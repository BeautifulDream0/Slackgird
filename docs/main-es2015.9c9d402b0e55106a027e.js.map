{"version":3,"sources":["node_modules/moment-mini/locale sync ^\\.\\/.*$","src/app/examples/home.component.ts","src/app/examples/home.component.html","src/app/examples/grid-additem.component.html","src/app/modules/angular-slickgrid/models/caseType.ts","src/app/modules/angular-slickgrid/models/delimiterType.enum.ts","src/app/modules/angular-slickgrid/models/emitterType.enum.ts","src/app/modules/angular-slickgrid/models/extensionName.enum.ts","src/app/modules/angular-slickgrid/models/fieldType.enum.ts","src/app/modules/angular-slickgrid/models/fileType.enum.ts","src/app/modules/angular-slickgrid/models/filterMultiplePassType.enum.ts","src/app/modules/angular-slickgrid/models/gridStateType.enum.ts","src/app/modules/angular-slickgrid/models/keyCode.enum.ts","src/app/modules/angular-slickgrid/models/operatorType.enum.ts","src/app/modules/angular-slickgrid/models/sortDirection.enum.ts","src/app/modules/angular-slickgrid/models/sortDirectionNumber.enum.ts","src/app/modules/angular-slickgrid/services/angularUtil.service.ts","src/app/modules/angular-slickgrid/services/backend-utilities.ts","src/app/modules/angular-slickgrid/services/bindingEvent.service.ts","src/app/modules/angular-slickgrid/services/bsDropdown.service.ts","src/app/modules/angular-slickgrid/services/utilities.ts","src/app/modules/angular-slickgrid/sorters/dateUtilities.ts","src/app/modules/angular-slickgrid/sorters/index.ts","src/app/modules/angular-slickgrid/sorters/numericSorter.ts","src/app/modules/angular-slickgrid/sorters/objectStringSorter.ts","src/app/modules/angular-slickgrid/sorters/stringSorter.ts","src/app/modules/angular-slickgrid/sorters/sorterUtilities.ts","src/app/modules/angular-slickgrid/services/collection.service.ts","src/app/modules/angular-slickgrid/constants.ts","src/app/modules/angular-slickgrid/formatters/formatterUtilities.ts","src/app/modules/angular-slickgrid/services/excelExport.service.ts","src/app/modules/angular-slickgrid/services/export.service.ts","src/app/modules/angular-slickgrid/services/shared.service.ts","src/app/modules/angular-slickgrid/extensions/autoTooltipExtension.ts","src/app/modules/angular-slickgrid/extensions/extensionUtility.ts","src/app/modules/angular-slickgrid/extensions/cellExternalCopyManagerExtension.ts","src/app/modules/angular-slickgrid/extensions/cellMenuExtension.ts","src/app/modules/angular-slickgrid/extensions/checkboxSelectorExtension.ts","src/app/modules/angular-slickgrid/extensions/columnPickerExtension.ts","src/app/modules/angular-slickgrid/services/sort.service.ts","src/app/modules/angular-slickgrid/services/treeData.service.ts","src/app/modules/angular-slickgrid/extensions/contextMenuExtension.ts","src/app/modules/angular-slickgrid/extensions/draggableGroupingExtension.ts","src/app/modules/angular-slickgrid/filter-conditions/filterUtilities.ts","src/app/modules/angular-slickgrid/filter-conditions/stringFilterCondition.ts","src/app/modules/angular-slickgrid/filter-conditions/numberFilterCondition.ts","src/app/modules/angular-slickgrid/filter-conditions/booleanFilterCondition.ts","src/app/modules/angular-slickgrid/filter-conditions/collectionSearchFilterCondition.ts","src/app/modules/angular-slickgrid/filter-conditions/dateFilterCondition.ts","src/app/modules/angular-slickgrid/filter-conditions/filterConditionProcesses.ts","src/app/modules/angular-slickgrid/filter-conditions/objectFilterCondition.ts","src/app/modules/angular-slickgrid/filter-conditions/filterConditions.index.ts","src/app/modules/angular-slickgrid/filters/autoCompleteFilter.ts","src/app/modules/angular-slickgrid/filters/filterUtilities.ts","src/app/modules/angular-slickgrid/filters/compoundDateFilter.ts","src/app/modules/angular-slickgrid/filters/compoundInputFilter.ts","src/app/modules/angular-slickgrid/filters/inputFilter.ts","src/app/modules/angular-slickgrid/filters/selectFilter.ts","src/app/modules/angular-slickgrid/filters/nativeSelectFilter.ts","src/app/modules/angular-slickgrid/filters/dateRangeFilter.ts","src/app/modules/angular-slickgrid/filters/filters.index.ts","src/app/modules/angular-slickgrid/filters/compoundInputNumberFilter.ts","src/app/modules/angular-slickgrid/filters/compoundInputPasswordFilter.ts","src/app/modules/angular-slickgrid/filters/compoundSliderFilter.ts","src/app/modules/angular-slickgrid/filters/inputMaskFilter.ts","src/app/modules/angular-slickgrid/filters/inputNumberFilter.ts","src/app/modules/angular-slickgrid/filters/inputPasswordFilter.ts","src/app/modules/angular-slickgrid/filters/multipleSelectFilter.ts","src/app/modules/angular-slickgrid/filters/singleSelectFilter.ts","src/app/modules/angular-slickgrid/filters/sliderFilter.ts","src/app/modules/angular-slickgrid/filters/sliderRangeFilter.ts","src/app/modules/angular-slickgrid/global-grid-options.ts","src/app/modules/angular-slickgrid/slickgrid-config.ts","src/app/modules/angular-slickgrid/filters/filterFactory.ts","src/app/modules/angular-slickgrid/services/filter.service.ts","src/app/modules/angular-slickgrid/extensions/gridMenuExtension.ts","src/app/modules/angular-slickgrid/extensions/groupItemMetaProviderExtension.ts","src/app/modules/angular-slickgrid/extensions/headerButtonExtension.ts","src/app/modules/angular-slickgrid/services/resizer.service.ts","src/app/modules/angular-slickgrid/extensions/headerMenuExtension.ts","src/app/modules/angular-slickgrid/extensions/rowDetailViewExtension.ts","src/app/modules/angular-slickgrid/extensions/rowMoveManagerExtension.ts","src/app/modules/angular-slickgrid/extensions/rowSelectionExtension.ts","src/app/modules/angular-slickgrid/services/extension.service.ts","src/app/modules/angular-slickgrid/services/graphqlQueryBuilder.ts","src/app/modules/angular-slickgrid/services/graphql.service.ts","src/app/modules/angular-slickgrid/services/odataQueryBuilder.service.ts","src/app/modules/angular-slickgrid/services/grid-odata.service.ts","src/app/modules/angular-slickgrid/services/grid.service.ts","src/app/modules/angular-slickgrid/services/gridState.service.ts","src/app/modules/angular-slickgrid/services/gridEvent.service.ts","src/app/modules/angular-slickgrid/services/groupingAndColspan.service.ts","src/app/modules/angular-slickgrid/services/pagination.service.ts","src/app/modules/angular-slickgrid/aggregators/index.ts","src/app/modules/angular-slickgrid/aggregators/avgAggregator.ts","src/app/modules/angular-slickgrid/aggregators/sumAggregator.ts","src/app/modules/angular-slickgrid/editorValidators/textValidator.ts","src/app/modules/angular-slickgrid/editors/autoCompleteEditor.ts","src/app/modules/angular-slickgrid/editors/dateEditor.ts","src/app/modules/angular-slickgrid/editorValidators/floatValidator.ts","src/app/modules/angular-slickgrid/editorValidators/integerValidator.ts","src/app/modules/angular-slickgrid/editors/selectEditor.ts","src/app/modules/angular-slickgrid/editors/editors.index.ts","src/app/modules/angular-slickgrid/editors/checkboxEditor.ts","src/app/modules/angular-slickgrid/editors/dualInputEditor.ts","src/app/modules/angular-slickgrid/editors/floatEditor.ts","src/app/modules/angular-slickgrid/editors/integerEditor.ts","src/app/modules/angular-slickgrid/editors/longTextEditor.ts","src/app/modules/angular-slickgrid/editors/multipleSelectEditor.ts","src/app/modules/angular-slickgrid/editors/singleSelectEditor.ts","src/app/modules/angular-slickgrid/editors/sliderEditor.ts","src/app/modules/angular-slickgrid/editorValidators/sliderValidator.ts","src/app/modules/angular-slickgrid/editors/textEditor.ts","src/app/modules/angular-slickgrid/formatters/arrayToCsvFormatter.ts","src/app/modules/angular-slickgrid/formatters/centerFormatter.ts","src/app/modules/angular-slickgrid/formatters/complexObjectFormatter.ts","src/app/modules/angular-slickgrid/formatters/hyperlinkFormatter.ts","src/app/modules/angular-slickgrid/formatters/treeFormatter.ts","src/app/modules/angular-slickgrid/formatters/formatters.index.ts","src/app/modules/angular-slickgrid/formatters/alignRightFormatter.ts","src/app/modules/angular-slickgrid/formatters/arrayObjectToCsvFormatter.ts","src/app/modules/angular-slickgrid/formatters/boldFormatter.ts","src/app/modules/angular-slickgrid/formatters/bsDropdownFormatter.ts","src/app/modules/angular-slickgrid/formatters/checkboxFormatter.ts","src/app/modules/angular-slickgrid/formatters/checkmarkFormatter.ts","src/app/modules/angular-slickgrid/formatters/collectionFormatter.ts","src/app/modules/angular-slickgrid/formatters/collectionEditorFormatter.ts","src/app/modules/angular-slickgrid/formatters/deleteIconFormatter.ts","src/app/modules/angular-slickgrid/formatters/decimalFormatter.ts","src/app/modules/angular-slickgrid/formatters/dollarFormatter.ts","src/app/modules/angular-slickgrid/formatters/dollarColoredFormatter.ts","src/app/modules/angular-slickgrid/formatters/dollarColoredBoldFormatter.ts","src/app/modules/angular-slickgrid/formatters/editIconFormatter.ts","src/app/modules/angular-slickgrid/formatters/fakeHyperlinkFormatter.ts","src/app/modules/angular-slickgrid/formatters/iconFormatter.ts","src/app/modules/angular-slickgrid/formatters/infoIconFormatter.ts","src/app/modules/angular-slickgrid/formatters/italicFormatter.ts","src/app/modules/angular-slickgrid/formatters/lowercaseFormatter.ts","src/app/modules/angular-slickgrid/formatters/maskFormatter.ts","src/app/modules/angular-slickgrid/formatters/multipleFormatter.ts","src/app/modules/angular-slickgrid/formatters/percentFormatter.ts","src/app/modules/angular-slickgrid/formatters/percentCompleteFormatter.ts","src/app/modules/angular-slickgrid/formatters/percentCompleteBarFormatter.ts","src/app/modules/angular-slickgrid/formatters/percentSymbolFormatter.ts","src/app/modules/angular-slickgrid/formatters/progressBarFormatter.ts","src/app/modules/angular-slickgrid/formatters/translateFormatter.ts","src/app/modules/angular-slickgrid/formatters/translateBooleanFormatter.ts","src/app/modules/angular-slickgrid/formatters/treeExportFormatter.ts","src/app/modules/angular-slickgrid/formatters/uppercaseFormatter.ts","src/app/modules/angular-slickgrid/formatters/yesNoFormatter.ts","src/app/modules/angular-slickgrid/grouping-formatters/index.ts","src/app/modules/angular-slickgrid/grouping-formatters/avgTotalsFormatter.ts","src/app/modules/angular-slickgrid/grouping-formatters/avgTotalsDollarFormatter.ts","src/app/modules/angular-slickgrid/grouping-formatters/avgTotalsPercentageFormatter.ts","src/app/modules/angular-slickgrid/grouping-formatters/maxTotalsFormatter.ts","src/app/modules/angular-slickgrid/grouping-formatters/minTotalsFormatter.ts","src/app/modules/angular-slickgrid/grouping-formatters/sumTotalsFormatter.ts","src/app/modules/angular-slickgrid/grouping-formatters/sumTotalsBoldFormatter.ts","src/app/modules/angular-slickgrid/grouping-formatters/sumTotalsColoredFormatter.ts","src/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarFormatter.ts","src/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarBoldFormatter.ts","src/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredFormatter.ts","src/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredBoldFormatter.ts","src/app/modules/angular-slickgrid/components/slick-pagination.component.ts","src/app/modules/angular-slickgrid/components/slick-pagination.component.html","src/app/modules/angular-slickgrid/components/slick-empty-warning.component.ts","src/app/modules/angular-slickgrid/components/angular-slickgrid.component.ts","src/app/modules/angular-slickgrid/components/slick-vanilla-utilities.ts","src/app/modules/angular-slickgrid/components/angular-slickgrid.component.html","src/app/modules/angular-slickgrid/modules/angular-slickgrid.module.ts","src/app/examples/grid-additem.component.ts","src/app/examples/editor-ng-select.component.ts","src/app/examples/custom-actionFormatter.component.ts","src/app/examples/custom-angularComponentEditor.ts","src/app/examples/custom-angularComponentFilter.ts","src/app/examples/custom-titleFormatter.component.ts","src/app/examples/filter-ng-select.component.ts","src/app/examples/grid-angular.component.ts","src/app/examples/grid-angular.component.html","src/app/examples/grid-angular.component.scss","src/app/examples/grid-autoheight.component.ts","src/app/examples/grid-autoheight.component.html","src/app/examples/grid-basic.component.ts","src/app/examples/grid-basic.component.html","src/app/examples/grid-clientside.component.html","src/app/examples/custom-inputFilter.ts","src/app/examples/grid-clientside.component.ts","src/app/examples/grid-colspan.component.ts","src/app/examples/grid-colspan.component.html","src/app/examples/grid-colspan.component.scss","src/app/examples/grid-contextmenu.component.ts","src/app/examples/grid-contextmenu.component.html","src/app/examples/grid-contextmenu.component.scss","src/app/examples/grid-draggrouping.component.ts","src/app/examples/grid-draggrouping.component.html","src/app/examples/custom-inputEditor.ts","src/app/examples/grid-editor.component.ts","src/app/examples/grid-editor.component.html","src/app/examples/grid-formatter.component.ts","src/app/examples/grid-formatter.component.html","src/app/examples/grid-frozen.component.ts","src/app/examples/grid-frozen.component.html","src/app/examples/grid-frozen.component.scss","src/app/examples/grid-graphql.component.ts","src/app/examples/grid-graphql.component.html","src/app/examples/grid-graphql-nopage.component.ts","src/app/examples/grid-graphql-nopage.component.html","src/app/examples/grid-graphql-nopage.component.scss","src/app/examples/grid-grouping.component.ts","src/app/examples/grid-grouping.component.html","src/app/examples/grid-headerbutton.component.ts","src/app/examples/grid-headerbutton.component.html","src/app/examples/grid-headermenu.component.ts","src/app/examples/grid-headermenu.component.html","src/app/examples/grid-headermenu.component.scss","src/app/examples/grid-localization.component.ts","src/app/examples/grid-localization.component.html","src/app/examples/grid-menu.component.ts","src/app/examples/grid-menu.component.html","src/app/examples/grid-menu.component.scss","src/app/examples/grid-odata.component.ts","src/app/examples/grid-odata.component.html","src/app/examples/grid-range.component.ts","src/app/examples/grid-range.component.html","src/app/examples/grid-remote.component.ts","src/app/examples/grid-remote.component.html","src/app/examples/grid-resize-by-content.component.ts","src/app/examples/grid-resize-by-content.component.html","src/app/examples/grid-resize-by-content.component.scss","src/app/examples/rowdetail-view.component.ts","src/app/examples/rowdetail-view.component.html","src/app/examples/rowdetail-preload.component.ts","src/app/examples/grid-rowdetail.component.ts","src/app/examples/grid-rowdetail.component.html","src/app/examples/grid-rowmove.component.ts","src/app/examples/grid-rowmove.component.html","src/app/examples/grid-rowselection.component.ts","src/app/examples/grid-rowselection.component.html","src/app/examples/grid-state.component.ts","src/app/examples/grid-state.component.html","src/app/examples/grid-tabs.component.ts","src/app/examples/grid-tabs.component.html","src/app/examples/grid-tree-data-hierarchical.component.ts","src/app/examples/grid-tree-data-hierarchical.component.html","src/app/examples/grid-tree-data-hierarchical.component.scss","src/app/examples/grid-tree-data-parent-child.component.ts","src/app/examples/grid-tree-data-parent-child.component.html","src/app/examples/grid-tree-data-parent-child.component.scss","src/app/examples/swt-common-grid-test.component.html","src/app/examples/swt-logger.service.ts","src/app/examples/swt-common-grid.component.ts","src/app/examples/swt-common-grid-pagination.component.ts","src/app/examples/swt-common-grid-test.component.ts","src/app/app-routing.module.ts","src/app/app.component.ts","src/app/app.component.html","src/app/app.component.scss","src/app/app.module.ts","src/main.ts","$_lazy_route_resource lazy namespace object"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","HomeComponent","title","subTitle","template","CaseType","DelimiterType","EmitterType","ExtensionName","FieldType","FileType","FilterMultiplePassType","GridStateType","KeyCode","OperatorType","SortDirection","SortDirectionNumber","AngularUtilService","compFactoryResolver","appRef","injector","component","componentRef","this","resolveComponentFactory","create","domElem","attachView","hostView","viewRef","Array","isArray","rootNodes","domElement","targetElement","clearTargetContent","componentOutput","createAngularComponent","appendChild","innerHTML","document","body","main","startTime","processResult","backendApi","totalItems","endTime","Date","internalPostProcess","postProcess","metrics","executionTime","valueOf","itemCount","totalItemCount","statistics","onError","backendServiceApi","query","args","emitActionChangedCallback","httpCancelRequests$","clearFilterTriggered","clearSortTriggered","remote","process","Promise","then","executeBackendProcessesCallback","catch","error","onBackendError","isObservable","next","pipe","takeUntil","iif","subscribe","gridOptions","service","buildQuery","preProcess","pagination","executeBackendCallback","refreshBackendDataset","BindingEventService","_boundedEvents","element","eventName","listener","options","addEventListener","push","length","boundedEvent","pop","removeEventListener","BsDropDownService","angularUtilService","_domElement","_domContainerElement","$","remove","show","dropdownParams","parent","offsetTop","offsetLeft","offsetDropupBottom","cell","row","cellPos","offset","componentInstance","instance","myDropId","dropdownId","dropDownToggleId","dispose","assign","dataContext","grid","getDataItem","setTimeout","topPos","top","leftPos","left","appendTo","css","addClass","hide","iElement","iElementWrapper","iElementWrapperOffset","iElementWrapperOffsetTop","iElementHeight","height","menuMarginTop","window","innerHeight","offsetBottom","concat","leftMargin","width","dropdown","on","dropContainerShow","gridViewport","moment","addWhiteSpaces","nbSpaces","spaceChar","result","i","arrayRemoveItemByIndex","array","index","filter","_el","addTreeLevelByMutation","treeArray","treeLevel","childrenPropName","item","levelPropName","flattenToParentChildArray","identifierPropName","parentPropName","shouldAddTreeLevelNumber","node","parentNode","undefined","obj","omitKey","reduce","objKey","deepCopy","objectOrArray","type","prototype","toString","call","slice","toLowerCase","clone","key","hasOwnProperty","findItemInTreeStructure","predicate","childrenPropertyName","initialFind","find","elementsWithChildren","x","childElements","forEach","htmlEncode","inputValue","entityMap","'","replace","s","castToPromise","input","fromServiceName","promise","Observable","first","toPromise","findOrDefault","logic","defaultVal","isNumber","value","strict","isNaN","decimalFormatted","minDecimal","maxDecimal","decimalSeparator","thousandSeparator","minDec","maxDec","amount","String","Math","round","pow","indexOf","decimalSplit","split","integerNumber","decimalNumber","thousandSeparatorFormatted","output","destroyObjectDomElementProps","HTMLElement","formatNumber","displayNegativeNumberWithParentheses","symbolPrefix","symbolSuffix","calculatedValue","parseFloat","absValue","abs","getDescendantProperty","path","acc","part","getTranslationPrefix","translationNamespace","translationNamespaceSeparator","mapMomentDateFormatWithFieldType","fieldType","dateTime","dateTimeIso","dateTimeShortIso","dateTimeIsoAmPm","dateTimeIsoAM_PM","dateEuro","dateEuroShort","dateTimeEuro","dateTimeShortEuro","dateTimeEuroAmPm","dateTimeEuroAM_PM","dateTimeEuroShort","dateTimeEuroShortAmPm","dateUs","dateUsShort","dateTimeUs","dateTimeShortUs","dateTimeUsAmPm","dateTimeUsAM_PM","dateTimeUsShort","dateTimeUsShortAmPm","dateUtc","date","dateIso","mapFlatpickrDateFormatWithFieldType","mapOperatorType","operator","lessThan","lessThanOrEqual","greaterThan","greaterThanOrEqual","notEqual","startsWith","endsWith","equal","in","notIn","notContains","contains","mapOperatorToShorthandDesignation","shortOperator","mapOperatorByFieldType","unknown","string","text","password","readonly","float","number","dateTimeEuroShortAM_PM","dateTimeUsShortAM_PM","parseBoolean","test","sanitizeHtmlToText","htmlString","temp","createElement","textContent","innerText","setDeepValue","shift","separator","stringValue","titleCase","inputStr","caseEveryWords","outputStr","charAt","toUpperCase","substr","toCamelCase","match","toKebabCase","uniqueArray","arr","unsubscribeAllObservables","subscriptions","subscription","unsubscribe","compareDates","value1","value2","sortDirection","sortColumn","format","diff","checkForUndefinedValues","valueCouldBeUndefined","cellValueCouldBeUndefined","date1","date2","isValid","getAssociatedDateSorter","FORMAT","ISO_8601","Sorters","numeric","y","objectString","dataKey","stringValue1","stringValue2","neutral","position","sortByFieldType","sortResult","integer","object","translate","collection","filterByOptions","filterResultBy","chain","filteredCollection","merge","filteredPass","singleFilterCollection","filterBy","objectProperty","property","columnDef","sortByOptions","enableTranslateLabel","instant","sortedCollection","sort","dataRow1","dataRow2","l","sortBy","sortDesc","desc","asc","currentLang","Constants","locales","TEXT_ALL_SELECTED","TEXT_CANCEL","TEXT_CLEAR_ALL_FILTERS","TEXT_CLEAR_ALL_GROUPING","TEXT_CLEAR_ALL_SORTING","TEXT_CLEAR_PINNING","TEXT_COLLAPSE_ALL_GROUPS","TEXT_CONTAINS","TEXT_COLUMNS","TEXT_COLUMN_RESIZE_BY_CONTENT","TEXT_COMMANDS","TEXT_COPY","TEXT_EQUALS","TEXT_EQUAL_TO","TEXT_ENDS_WITH","TEXT_EXPAND_ALL_GROUPS","TEXT_EXPORT_TO_CSV","TEXT_EXPORT_TO_TEXT_FORMAT","TEXT_EXPORT_TO_EXCEL","TEXT_FORCE_FIT_COLUMNS","TEXT_FREEZE_COLUMNS","TEXT_GREATER_THAN","TEXT_GREATER_THAN_OR_EQUAL_TO","TEXT_GROUP_BY","TEXT_HIDE_COLUMN","TEXT_ITEMS","TEXT_ITEMS_PER_PAGE","TEXT_ITEMS_SELECTED","TEXT_OF","TEXT_OK","TEXT_LAST_UPDATE","TEXT_LESS_THAN","TEXT_LESS_THAN_OR_EQUAL_TO","TEXT_NOT_CONTAINS","TEXT_NOT_EQUAL_TO","TEXT_PAGE","TEXT_REFRESH_DATASET","TEXT_REMOVE_FILTER","TEXT_REMOVE_SORT","TEXT_SAVE","TEXT_SELECT_ALL","TEXT_SYNCHRONOUS_RESIZE","TEXT_SORT_ASCENDING","TEXT_SORT_DESCENDING","TEXT_STARTS_WITH","TEXT_TOGGLE_FILTER_ROW","TEXT_TOGGLE_PRE_HEADER_ROW","TEXT_X_OF_Y_SELECTED","VALIDATION_REQUIRED_FIELD","VALIDATION_EDITOR_VALID_NUMBER","VALIDATION_EDITOR_VALID_INTEGER","VALIDATION_EDITOR_INTEGER_BETWEEN","VALIDATION_EDITOR_INTEGER_MAX","VALIDATION_EDITOR_INTEGER_MAX_INCLUSIVE","VALIDATION_EDITOR_INTEGER_MIN","VALIDATION_EDITOR_INTEGER_MIN_INCLUSIVE","VALIDATION_EDITOR_NUMBER_BETWEEN","VALIDATION_EDITOR_NUMBER_MAX","VALIDATION_EDITOR_NUMBER_MAX_INCLUSIVE","VALIDATION_EDITOR_NUMBER_MIN","VALIDATION_EDITOR_NUMBER_MIN_INCLUSIVE","VALIDATION_EDITOR_DECIMAL_BETWEEN","VALIDATION_EDITOR_TEXT_LENGTH_BETWEEN","VALIDATION_EDITOR_TEXT_MAX_LENGTH","VALIDATION_EDITOR_TEXT_MAX_LENGTH_INCLUSIVE","VALIDATION_EDITOR_TEXT_MIN_LENGTH","VALIDATION_EDITOR_TEXT_MIN_LENGTH_INCLUSIVE","getValueFromParamsOrFormatterOptions","optionName","defaultValue","getOptions","params","formatterOptions","getAssociatedDateFormatter","defaultSeparator","defaultDateFormat","_row","_cell","_dataContext","customSeparator","dateSeparator","inputDateFormat","isParsingAsUtc","parseDateAsUtc","isDateValid","outputDate","utc","regex","RegExp","exportWithFormatterWhenDefined","col","exportOptions","formatter","isEvaluatingFormatter","exportWithFormatter","exportCustomFormatter","parseFormatterWhenExist","fieldProperty","field","props","cellValue","formattedData","entries","DEFAULT_EXPORT_OPTIONS","filename","xlsx","_fileFormat","_hasColumnTitlePreHeader","_hasGroupedItems","onGridBeforeExportToExcel","Subject","onGridAfterExportToExcel","_gridOptions","datasetIdPropertyName","_grid","dataView","_dataView","_locales","enableTranslate","reject","_excelExportOptions","excelExportOptions","_workbook","_sheet","name","sheetName","_stylesheet","getStyleSheet","boldFormatter","createFormat","font","bold","stringFormatter","numberFormatter","usdFormatter","_stylesheetFormats","dollarFormatter","dataOutput","getDataOutput","customExcelHeader","columns","getColumns","setColumns","getColumnStyles","currentSheetData","data","finalOutput","setData","addWorksheet","mimeType","xls","excelBlob","createFile","downloadOptions","startDownloadFile","blob","colIndex","letters","nextPos","floor","lastPos","getExcelColumnNameByIndex","navigator","appName","msSaveOrOpenBlob","link","url","URL","createObjectURL","href","setAttribute","style","visibility","click","removeChild","outputData","metadata","columnHeaderStyle","columnHeaderStyleId","createPreHeaderPanel","showPreHeaderPanel","enableDraggableGrouping","boldCenterAlign","alignment","horizontal","getColumnGroupedHeaderTitlesData","getColumnHeaderData","pushAllGridRowDataToArray","grouping","getGrouping","columnStyles","bestFit","customColumnWidth","skippedField","excludeFromExport","exportColumnWidth","outputGroupedHeaderTitles","_groupedColumnHeaders","getColumnGroupedHeaderTitles","header","colspanStartIndex","headersLn","cellIndex","leftExcelColumnChar","rightExcelColumnChar","mergeCells","outputHeaderTitles","_columnHeaders","getColumnHeaders","groupTitle","getGroupColumnTitle","unshift","groupByColumnHeader","groupingColumnHeaderTitle","groupedColumnHeaders","groupedHeaderTitle","columnGroupKey","columnGroup","columnHeaders","headerTitle","headerKey","nameKey","originalDataArray","lineCount","getLength","rowNumber","itemObj","getItem","datasetIdName","readRegularRowData","__groupTotals","readGroupedTitleRow","readGroupedTotalRow","idx","rowOutputStrings","columnsLn","prevColspan","itemMetadata","getItemMetadata","outputType","colspanColumnId","colspan","columnData","excelRowNumber","itemData","sanitizeDataExport","useCellFormatByFieldType","groupName","addGroupIndentation","collapsedSymbol","groupCollapsedSymbol","expandedSymbol","groupExpandedSymbol","collapsed","level","outputStrings","groupingAggregatorRowText","exportCustomGroupTotalsFormatter","groupTotalsFormatter","delimiter","comma","csv","useUtf8WithBom","_delimiter","_lineCarriageReturn","_exportQuoteWrapper","onGridBeforeExportToFile","onGridAfterExportToFile","_exportOptions","delimiterOverride","content","dataContent","_match","dec","fromCharCode","encode","Blob","csvUrl","outputDataString","join","getAllGridRowData","lineCarriageReturn","outputDataStrings","exportQuoteWrapper","ln","emptyValue","keepAsStringWrapper","exportCsvForceToKeepAsString","_allColumns","_hasColumnsReordered","_hideHeaderRowAfterPageLoad","_visibleColumns","onHeaderMenuHideColumns","allColumns","_currentPagination","currentPagination","_frozenVisibleColumnId","columnId","isColumnReordered","_groupItemMetadataProvider","groupItemMetadataProvider","hideHeaderRowAfterPageLoad","visibleColumns","_hierarchicalDataset","hierarchicalDataset","AutoTooltipExtension","sharedService","_addon","destroy","Slick","AutoTooltips","autoTooltipOptions","registerPlugin","propName","pickerName","picker","titleKey","translationPrefix","prop","frozenColumnIndex","recalculatedFrozenColumnIndex","findIndex","frozenVisibleColumnId","frozenColumn","setOptions","items","propertyName","itemA","itemB","inputKey","outputKey","translationKey","localeKey","textToUse","extensionUtility","_eventHandler","EventHandler","_bindingEventService","_addonOptions","_commandQueue","_undoRedoBuffer","unsubscribeAll","unbindAll","_cellSelectionModel","nullifyFunctionNameStartingWithOn","createUndoRedoBuffer","bind","handleKeyDown","getDefaultOptions","excelCopyBufferOptions","CellSelectionModel","setSelectionModel","CellExternalCopyManager","onExtensionRegistered","onCopyCells","onCopyCancelled","onPasteCells","commandCtr","queueAndExecuteCommand","editCommand","execute","undo","command","GlobalEditorLock","cancelCurrentEdit","redo","newRowIds","clipboardCommandHandler","dataItemColumnValueExtractor","editable","editor","formattedOutput","outputString","readOnlyMode","includeHeaderWhenCopying","newRowCreator","count","getData","addItem","keyCode","ctrlKey","metaKey","shiftKey","_cellMenuOptions","getDefaultCellMenuOptions","cellMenu","translateCellMenu","sortMenuItems","Plugins","CellMenu","onCommand","event","onOptionSelected","onAfterMenuShow","onBeforeMenuShow","onBeforeMenuClose","resetMenuTranslations","columnDefinitions","commandItems","optionItems","columnCellMenuCommandItems","columnCellMenuOptionItems","commandTitleKey","commandTitle","optionTitleKey","optionTitle","translateItems","sortItems","CheckboxSelectorExtension","_rowSelectionPlugin","CheckboxSelectColumn","checkboxSelector","selectionColumn","getColumnDefinition","excludeFromColumnPicker","excludeFromGridMenu","excludeFromQuery","excludeFromHeaderMenu","maxWidth","columnPosition","columnIndexPosition","splice","rowSelectionPlugin","getSelectionModel","RowSelectionModel","rowSelectionOptions","preselectedRows","selectRows","ColumnPickerExtension","_columnPicker","columnTitle","getPickerTitleOutputString","forceFitTitle","syncResizeTitle","columnPicker","Controls","ColumnPicker","enableColumnPicker","onColumnsChanged","enableRowSelection","showing","rowSelection","getSelectedRows","setSelectedRows","readjustFrozenColumnIndexWhenNeeded","emptyColumnPickerTitles","updateAllTitles","_currentLocalSorters","_isBackendGrid","onSortChanged","onSortCleared","onSort","onBackendSortChanged","processTreeDataInitialSort","handleLocalOnSort","_e","sortCols","sortCol","sortColumns","sortAsc","direction","ASC","DESC","onLocalSortChanged","emitSortChanged","local","allSortedCols","getCurrentColumnSorts","sortedColsWithoutCurrent","multiColumnSort","sortOutput","notify","updatedSortColumns","setSortColumns","sortLocalGridByDefaultSortFieldId","triggerQueryEvent","_columnDefinitions","backendService","clearSorters","complete","isSortingDisabled","clearSortingWhenDisabled","newSorting","enableSorting","updatedColumnDefinitions","clearSorting","disableAllSortingCommands","onSortHandler","clearSortingOnDisable","previousSorting","disableSortFunctionality","sender","currentLocalSorters","currentSorters","getCurrentSorters","getCurrentLocalSorters","excludedColumnId","oldSortColumns","getSortColumns","cols","getColumnIndex","sorters","sorter","gridColumn","enableTreeData","treeDataOptions","columnWithTreeData","sortTreeLevelColumn","initialSort","initialSortColumnId","initialSortColumn","updateSorting","processOnSortChanged","forceReSort","isTreeDataEnabled","reSort","datasetSortResult","sortHierarchicalDataset","setItems","flat","sortComparers","invalidate","render","sortTreeData","dataViewIdIdentifier","treeDataOpt","hierarchical","sortColFieldId","defaultColumnSortFieldId","sortComparer","querySortField","queryFieldName1","queryFieldSorter","queryField","queryFieldName2","queryFieldNameGetterFn","customSortResult","sortTreeChild","a","b","emitChangedEvent","triggerBackendQuery","backendApiService","updateSorters","loadGridSorters","emitterType","isDisabling","sortable","menu","menuItem","menuCommand","hidden","gridMenu","customItems","sortService","getItems","enableFiltering","enablePagination","onClick","handleOnCellClick","initialColumnSorting","flatDataset","datasetHierarchical","convertFlatParentChildToTreeDataset","columnSort","getInitialSort","flatArray","roots","all","p","targetElm","target","collapsedPropName","idPropName","className","updateItem","stopImmediatePropagation","inputColumnSorts","columnSorts","finalColumnSorts","collapsing","excelExportService","exportService","treeDataService","contextMenu","_userOriginalContextMenu","_contextMenuOptions","originalCommandItems","addMenuCustomCommands","ContextMenu","translateContextMenu","menuOptions","originalCustomItems","menuCustomItems","hideCopyCellValueCommand","commandName","iconCssClass","iconCopyCellValueCommand","translateWhenEnabledAndServiceExist","disabled","positionOrder","action","copyToClipboard","itemUsabilityOverride","column","getCellValueFromQueryFieldGetter","enableExport","hideExportCsvCommand","iconExportCsvCommand","exportToFile","enableExcelExport","hideExportExcelCommand","iconExportExcelCommand","exportToExcel","hideExportTextDelimitedCommand","iconExportTextDelimitedCommand","tab","txt","enableGrouping","divider","hideClearAllGrouping","iconClearGroupingCommand","setGrouping","groupingArray","hideCollapseAllGroups","iconCollapseAllGroupsCommand","toggleTreeDataCollapse","collapseAllGroups","hideExpandAllGroups","iconExpandAllGroupsCommand","expandAllGroups","textToCopy","range","createRange","tmpElem","append","selectNodeContents","get","selection","getSelection","addRange","removeAllRanges","execCommand","queryFieldName","DraggableGroupingExtension","_draggableGroupingOptions","DraggableGrouping","draggableGrouping","onGroupChanged","compareObjects","o1","o2","compareKey","testFilterCondition","includes","some","executeStringFilterCondition","parsedSearchValues","searchValue1","searchValue2","defaultFilterRangeOperator","rangeInclusive","rangeExclusive","isInclusive","searchResult1","testStringCondition","searchInputLastChar","searchResult2","searchValue","executeNumberFilterCondition","resultCondition1","resultCondition2","executeBooleanFilterCondition","parsedSearchValue","executeCollectionSearchFilterCondition","filterOperator","searchTerms","getParsedSearchTermsByFieldType","inputSearchTerms","inputFilterSearchType","getVarTypeOfByColumnFieldType","searchValues","searchDate1","searchDate2","boolean","FilterConditions","parsedSearchTerms","filterSearchType","parsedSearchDates","dateCell","dateCellTimestamp","startOf","dateSearchTimestamp1","DOMPurify","collectionService","_clearFilterTriggered","_collection","_shouldTriggerQuery","isFilled","valueName","_autoCompleteOptions","collectionOptions","$filterElm","columnFilter","filterOptions","customStructure","columnType","labelKey","label","autocomplete","defaultOperator","callback","collectionAsync","labelName","labelPrefixName","labelPrefix","labelSuffixName","labelSuffix","newCollection","renderDomElement","renderOptionsAsync","shouldTriggerQuery","val","trigger","off","values","inputCollection","outputCollection","collectionFilterBy","filterCollectionBy","filterResultAfterEachPass","filterCollection","collectionSortBy","sortCollection","awaitedCollection","renderDomElementFromCollectionAsync","createCollectionAsyncSubject","newCollectionAsync","collectionInsideObjectProperty","collectionInObjectProperty","searchTerm","filterTemplate","buildTemplateHtmlString","createDomElement","enableWhiteSpaceTrim","enableFilterTrimWhiteSpace","enableTrimWhiteSpace","trim","removeClass","placeholder","defaultFilterPlaceholder","$headerElm","getHeaderRowColumn","empty","searchTermInput","autoCompleteOptions","source","select","ui","onSelect","renderItem","classes","layout","_renderItem","renderCustomItem","definedOptions","minLength","renderCollectionItem","$container","openSearchListOnFocus","callbacks","hasCustomRenderItemCallback","itemLabel","itemValue","setValues","ul","templateString","templateCallback","sanitizedTemplateText","sanitize","isRenderHtmlEnabled","enableRenderHtml","finalText","sanitizedText","$liDiv","buildSelectOperatorHtmlString","optionValues","optionValueString","option","paddingLength","inputStrLn","description","flatpickr","_currentValue","_currentDate","_flatpickrOptions","_operator","op","$filterInputElm","keyup","onTriggerEvent","$selectOperatorElm","change","flatInstance","clear","close","open","newValue","setDate","operatorShorthand","inputFormat","outputFormat","userFilterOptions","currentLocale","locale","substring","pickerOptions","defaultDate","altInput","altFormat","dateFormat","wrap","closeOnSelect","onChange","selectedDates","dateStr","customEvent","enableTime","CustomEvent","errorHandler","console","warn","compoundOperatorList","getOutputText","localeText","defaultText","fieldId","selectOperatorHtmlString","getOperatorOptionValues","buildDatePickerInput","$filterContainerElm","$containerInputGroup","$operatorInputGroupAddon","selectedOperator","_debounceTypingDelay","_inputType","filterTypingDebounce","defaultBackendServiceFilterTypingDebounce","buildInputHtmlString","eventType","callbackArgs","typingDelay","clearTimeout","timer","handleInputChange","addOptionalOperatorIntoSearchString","searchTermPrefix","searchTermSuffix","outputValue","_timer","isMultipleSelect","_isMultipleSelect","_collectionLength","optionLabel","initMultipleSelect","defaultOptions","emptySearchTermReturnAllValues","multipleSelect","siblings","elementClassName","elementName","addBlankEntry","createBlankEntry","addCustomFirstEntry","addCustomLastEntry","optionCollection","separatorBetweenLabels","separatorBetweenTextLabels","isEnableTranslate","sanitizedOptions","sanitizeHtmlOptions","every","selected","term","labelText","prefixText","suffixText","optionText","optionValue","blankEntry","attr","filterElmOptions","isTranslateEnabled","autoAdjustDropHeight","autoAdjustDropPosition","autoAdjustDropWidthByTextSize","container","maxHeight","single","textTemplate","$elm","html","onClose","okButton","addTitle","countSelected","allSelected","okButtonText","selectAllText","selectAllDelimiter","selectedItems","getValues","_currentValues","textLabel","_currentDates","_currentDateStrings","pickerValues","outFormat","mode","newEvent","Filters","autoComplete","compoundDate","compoundInput","compoundInputNumber","super","inputType","compoundInputPassword","compoundInputText","compoundSlider","_elementRangeInputId","_elementRangeOutputId","filterParams","hideSliderNumber","elements","getElementsByClassName","clearedValue","sliderStartValue","$containerInputGroupElm","children","last","minValue","filterProperties","maxValue","step","valueStep","startValue","$sliderTextInputAppendAddon","buildTemplateSliderTextHtmlString","dateRange","inputMask","_inputMask","mask","targetValue","unmaskedValue","unmaskValue","maskedValue","maskValue","preventDefault","valueWithoutSymbols","maskWithoutSymbols","inputNumber","inputPassword","inputText","singleSelect","slider","$filterNumberElm","sliderRange","_sliderOptions","lowestValue","highestValue","sliderEndValue","hideSliderNumbers","renderSliderValues","columndId","lowerElm","querySelector","highestElm","sliderValues","slide","defaultStartValue","defaultEndValue","$lowestSliderValueElm","$highestSliderValueElm","min","max","onValueChanged","GlobalGridOptions","alwaysShowVerticalScroll","autoEdit","asyncEditorLoading","autoFitColumnsOnFirstLoad","autoResize","calculateAvailableSizeBy","bottomPadding","minHeight","minWidth","sidePadding","cellHighlightCssClass","cssClass","fadeSpeed","hideForceFitButton","hideSyncResizeButton","headerColumnValueExtractor","pickerHeaderColumnValueExtractor","autoAdjustDrop","autoAlignSide","hideCloseButton","hideCommandSection","hideOptionSection","hideMenuOnScroll","customFooterOptions","hideRowSelectionCount","hideTotalItemCount","hideLastUpdateTimestamp","footerHeight","leftContainerClass","rightContainerClass","metricSeparator","metricTexts","itemsKey","itemsSelected","itemsSelectedKey","of","ofKey","syncGridSelection","syncGridSelectionWithBackendService","defaultFilter","enableAutoResize","enableAutoSizeColumns","enableCellNavigation","enableColumnReorder","enableColumnResizeOnDoubleClick","enableContextMenu","enableGridMenu","enableHeaderMenu","enableEmptyDataWarningMessage","emptyDataWarning","message","messageKey","hideFrozenLeftWarning","hideFrozenRightWarning","leftViewportMarginLeft","rightViewportMarginLeft","frozenLeftViewportMarginLeft","frozenRightViewportMarginLeft","enableMouseHoverHighlightRow","enableTextSelectionOnCells","explicitInitialization","forceFitColumns","frozenHeaderWidthCalcDifferential","commandLabels","clearAllFiltersCommandKey","clearAllSortingCommandKey","clearFrozenColumnsCommandKey","exportCsvCommandKey","exportExcelCommandKey","exportTextDelimitedCommandKey","refreshDatasetCommandKey","toggleFilterCommandKey","togglePreHeaderCommandKey","hideClearAllFiltersCommand","hideClearAllSortingCommand","hideClearFrozenColumnsCommand","hideRefreshDatasetCommand","hideToggleFilterCommand","hideTogglePreHeaderCommand","iconClearAllFiltersCommand","iconClearAllSortingCommand","iconClearFrozenColumnsCommand","iconRefreshDatasetCommand","iconToggleFilterCommand","iconTogglePreHeaderCommand","menuWidth","resizeOnShowHeaderRow","useClickToRepositionMenu","headerMenu","autoAlign","autoAlignOffset","iconClearFilterCommand","iconClearSortCommand","iconFreezeColumns","iconSortAscCommand","iconSortDescCommand","iconColumnHideCommand","iconColumnResizeByContentCommand","hideColumnResizeByContentCommand","hideColumnHideCommand","hideClearFilterCommand","hideClearSortCommand","hideFreezeColumnsCommand","hideSortCommands","headerRowHeight","numberedMultiColumnSort","tristateMultiColumnSort","sortColNumberInSeparateSpan","suppressActiveCellChangeOnEdit","pageSizes","pageSize","rowDetailView","panelRows","keyPrefix","useRowClick","useSimpleViewportCalc","saveDetailViewOnScroll","rowHeight","topPanelHeight","resizeByContentOnlyOnFirstLoad","resizeByContentOptions","alwaysRecalculateColumnWidth","cellCharWidthInPx","cellPaddingWidthInPx","defaultRatioForStringType","formatterPaddingWidthInPx","maxItemToInspectCellContentWidth","maxItemToInspectSingleColumnWidthByContent","widthToRemoveFromExceededWidthReadjustment","exportIndentMarginLeft","exportIndentationLeadingChar","headerGroup","FilterFactory","config","_options","model","filterFactory","_isFilterFirstRender","_firstColumnIdRendered","_filtersMetadata","_columnFilters","onFilterChanged","onFilterCleared","_onSearchChange","Event","disposeColumnFilters","onHeaderRowCellRendered","handleBackendOnSearchChange","onBackendFilterChange","addFilterTemplateToHeaderRow","setFilterArgs","columnFilters","setFilter","customLocalFilter","handleLocalOnSearchChange","isGridWithTreeData","isClearFilterEvent","_tmpPreFilteredData","preFilterTreeData","refresh","emitFilterChanged","isBackendApi","emitter","currentFilterColumnIds","currentColFilter","colFilter","triggerChange","resetColumnFilters","queryResponse","processOnFilterChanged","getItemById","conditionOptions","preProcessFilterConditionOnDataContext","fieldSearchValue","matches","inputLastChar","columnIndex","enableRowDetailView","metadataPrefix","queryFieldFilter","k","useFormatterOuputToFilter","rowIndex","getIdxById","inputArray","treeObj","filteredChildrenAndParents","__used","inputSearchConditions","parseFormInputFilterConditions","matchFilter","conditionOptionResult","len","currentFilters","colId","caller","getCurrentFilters","getCurrentLocalFilters","filters","columnPreset","presetFilter","refreshTreeDataFilters","inputItems","isFilterDisabled","clearFiltersWhenDisabled","newShowFilterFlag","clearFilters","disableAllFilteringCommands","setHeaderRowVisibility","prevShowFilterFlag","disableFilterFunctionality","showHeaderRow","triggerOnSearchChangeEvent","newFilter","uiFilter","newOperator","updateColumnFilters","callbackSearchEvent","forceOnSearchChangeEvent","updateFilters","_event","isFilterFirstRender","filterable","createFilter","filterArguments","init","filterExistIndex","hasSearchTerms","termsCount","oldColumnFilters","eventData","isPropagationStopped","extend","EventData","eventKey","eventKeyCode","ENTER","filterService","_areVisibleColumnDifferent","_userOriginalGridMenu","_gridMenuOptions","getDefaultGridMenuOptions","addGridMenuCustomCommands","GridMenu","executeGridMenuInternalCustomCommands","onMenuClose","autosizeColumns","gridUid","getUID","showGridMenu","emptyGridMenuTitles","gridMenuCustomItems","clearFrozenColumnsCommand","clearAllFiltersCommand","toggleFilterCommand","refreshDatasetCommand","togglePreHeaderCommand","clearAllSortingCommand","exportCsvCommand","exportExcelCommand","exportTextDelimitedCommand","customTitle","newGridOptions","frozenRow","frozenBottom","enableMouseWheelScrollHandler","showTopPanel","setTopPanelVisibility","setPreHeaderPanelVisibility","GroupItemMetaProviderExtension","HeaderButtonExtension","_headerButtonOptions","headerButton","HeaderButtons","_hasResizedByContentAtLeastOnce","_totalColumnsWidthByContent","_resizePaused","onGridAfterResize","onGridBeforeResize","gridId","fixedDimensions","containerNode","getContainerNode","_gridDomElm","autoResizeOptions","_gridContainerElm","containerId","gridContainerId","_fixedHeight","_fixedWidth","onColumnsResizeDblClick","handleSingleColumnResizeByContent","triggeredByColumn","newSizes","resizeGrid","_gridUid","handleResizeGrid","showCustomFooter","gridHeight","gridOffsetTop","coordOffsetTop","availableHeight","availableWidth","innerWidth","newHeight","newWidth","_lastDimensions","columnDefIdx","columnWidths","originalWidth","calculateCellWidthByReadingDataset","applyNewCalculatedColumnWidthByReference","reRenderColumns","rerenderOnResize","isResizePaused","delay","resizeGridCallback","lastDimensions","resizeGridWithDimensions","availableDimensions","calculateGridNewDimensions","gridContainerElm","autoHeight","exec","userAgent","resizeCanvas","enableAutoResizeColumnsByCellContent","resizeColumnsByCellContent","heightWithPagination","recalculateColumnsTotalWidth","dataset","reRender","readItemCount","totalColsWidth","resizeAlwaysRecalculateWidth","calculateColumnWidths","viewportWidth","columnOrColumns","maxItemToInspect","columnIndexOverride","rowIdx","colIdx","newColumnWidth","calculateCellWidthByContent","initialMininalColumnWidth","resizeCellCharWidthInPx","charWidthPx","resizeCharWidthInPx","formattedDataSanitized","formattedTextWidthInPx","ceil","resizeMaxWidthThreshold","calculatedColumnWidth","resizeCellPaddingWidthInPx","resizeFormatterPaddingWidthInPx","newColWidth","stringWidthRatio","resizeCalcWidthRatio","resizeExtraWidthPadding","readjustNewColumnWidthWhenOverLimit","frozenColumnIdx","columnIdx","adjustedWidth","allViewports","from","getViewports","leftViewportWidth","viewport","classList","clientWidth","rightViewportWidth","viewportFullWidth","leftViewportWidthMinusCurrentCol","resizerService","getDefaultHeaderMenuOptions","addHeaderMenuCustomCommands","HeaderMenu","executeHeaderMenuInternalCommands","headerMenuOptions","columnHeaderMenuItems","hasFrozenOrResizeCommand","hideFilterCommands","currentVisibleColumns","resetHeaderMenuTranslations","clearFilterByColumnId","clearSortByColumnId","hideColumn","clearColumnFilter","clearColumnSort","hasColumnsReordered","isSortingAsc","newSortColumns","_views","_subscriptions","disposeAllViewComponents","compRef","disposeViewComponent","_userProcessFn","onProcessing","preTemplate","_preloadComponent","preloadComponent","postTemplate","_viewComponent","viewComponent","itemDetail","datasetIdPropName","RowDetailView","iconColumn","selectActiveRow","rowDetailViewOptions","onAsyncResponse","onAsyncEndUpdate","renderViewModel","onAfterRowDetailToggle","renderPreloadView","renderAllViewComponents","onBeforeRowDetailToggle","onRowBackToViewportRange","onRowOutOfViewportRange","onColumnsReordered","redrawAllViewComponents","enableCheckboxSelector","onSelectedRowsChanged","redrawViewComponent","view","createdView","containerElements","createAngularComponentAppendToDom","addon","viewObj","expandedView","detachView","awaitedItemDetail","userProcessFn","response","notifyTemplate","__collapsed","viewInfo","inputItem","itemIdPropName","arrayRowIndex","foundViewIndex","RowMoveManagerExtension","loadAddonWhenNotExists","newRowMoveColumn","rowMoveColDef","behavior","finalRowMoveColumn","rowMoveManager","RowMoveManager","cancelEditOnDrag","onBeforeMoveRows","onMoveRows","RowSelectionExtension","autoTooltipExtension","cellExternalCopyExtension","cellMenuExtension","checkboxSelectorExtension","columnPickerExtension","contextMenuExtension","draggableGroupingExtension","gridMenuExtension","groupItemMetaExtension","headerButtonExtension","headerMenuExtension","rowDetailViewExtension","rowMoveManagerExtension","rowSelectionExtension","_extensionCreatedList","_extensionList","extensionName","extension","class","getExtensionByName","getAddonInstance","enableAutoTooltip","register","autoTooltip","enableExcelCopyBuffer","cellExternalCopyManager","enableCellMenu","enableRowMoveManager","createdExtension","getCreatedExtensionByName","groupItemMetaProvider","enableHeaderButton","registerPlugins","plugin","getPluginByName","noname","checkboxInstance","rowMoveInstance","rowDetailInstance","draggableInstance","getSetupColumnReorder","removeColumnByIndex","el","translateColumnPicker","translateGridMenu","translateHeaderMenu","newColumnDefinitions","use","renderColumnHeaders","forceColumnDefinitionsOverwrite","recreateExternalAddon","externalExtension","GraphqlQueryBuilder","queryFnName","aliasOrFilter","head","alias","arguments","TypeError","getGraphQLValue","searches","searchKeys","parceFind","ReferenceError","_levelA","currentValue","itemX","RangeError","propsAA","JSON","stringify","propS","objectToString","sourceA","_currentFilters","_currentSorters","_datasetIdPropName","defaultPaginationOptions","serviceOptions","datasetName","queryQb","datasetQb","nodesQb","columnIds","fields","columnsQuery","buildFilterQuery","graphqlNodeFields","isWithCursor","edgesQb","pageInfoQb","datasetFilters","paginationOptions","sortingOptions","orderBy","filteringOptions","addLocaleIntoQuery","i18n","extraQueryArguments","queryArgument","trimDoubleQuotesOnEnumField","keepArgumentFieldDoubleQuotes","set","updateOptions","paginationFirst","after","before","getInitPaginationOptions","pageNumber","castFilterToColumnFilters","resetPaginationOptions","updatePagination","newPage","isUpdatedByPresetOrDynamically","searchByArray","fieldName","lastValueChar","normalizeSearchValue","_part","presetSorters","graphqlSorters","tmpSorterArray","enumSearchWords","patternRegex","patternWordInQuotes","reg","group1","group2","group3","removeDoubleQuotes","filtersArray","tmpFilter","_odataOptions","filterQueue","_defaultSortBy","queryTmpArray","enableCount","countQuery","version","skip","argument","_filterCount","filterStr","filterBySeparator","addToFilterQueueWhenNotExists","search","caseType","pascalCase","_odataService","mergedOptions","topOption","removeColumnFilter","terms","saveColumnFilter","searchBy","odataVersion","bypassOdataQuery","bypassBackendQuery","tmpSearchTerms","j","lnj","lnk","filterBySearchTermRange","mapOdataOperator","odataSorters","columnFieldName","csvString","str","inputDateString","useUtc","dateString","decodeURIComponent","dateMoment","year","encodeURIComponent","highlightTimerEnd","extensionService","_columns","_currentColumns","_selectedRowDataContextIds","_selectedFilteredRowDataContextIds","_wasRecheckedAfterPageChange","onGridStateChanged","dataContextIds","subscribeToAllGridChanges","gridState","getCurrentColumns","pinning","getCurrentPagination","hasRowSelectionEnabled","currentRowSelection","getCurrentRowSelections","requestRefreshRowFilteredRow","gridColumns","currentColumns","headerCssClass","definedColumns","triggerAutoSizeColumns","triggerColumnsFullResizeByContent","getAssociatedGridColumns","checkboxColumn","autosizeColumnsByCellContentOnFirstLoad","currentColumn","c","getAssociatedCurrentColumns","requestRefreshFilteredRow","mapRowsToIds","filteredDataContextIds","gridRowIndexes","mapIdsToRows","refreshFilteredRowSelections","preservedRowSelection","preserveHidden","newValues","getCurrentGridState","needToPreserveRowSelection","resetRowSelectionWhenRequired","reEvaluateRowSelectionAfterFilterChange","bindExtensionAddonEventToGridStateChange","bindSlickGridColumnChangeEventToGridStateChange","bindSlickGridOnSetOptionsEventToGridStateChange","bindSlickGridRowSelectionToGridStateChange","slickEvent","slickGridEvent","onSetOptions","frozenBottomBefore","frozenColumnBefore","frozenRowBefore","optionsBefore","frozenBottomAfter","frozenColumnAfter","frozenRowAfter","optionsAfter","currentGridState","onBeforePagingInfoChanged","onPagingInfoChanged","shouldBeSelectedRowIndexes","currentSelectedRowIndexes","rows","previousSelectedRows","newSelectedRows","prevSelectedRows","newSelectedAdditions","newSelectedDeletions","removeId","dataId","selectionModel","previousSelectedFilteredRowDataContextIds","tmpFilteredArray","filteredDataset","getFilteredItems","selectedRowId","GridServiceDeleteOptionDefaults","triggerEvent","GridServiceInsertOptionDefaults","highlightRow","resortGrid","selectRow","GridServiceUpdateOptionDefaults","scrollRowIntoView","HideColumnOptionDefaults","autoResizeColumns","hideFromColumnPicker","hideFromGridMenu","gridStateService","onItemAdded","onItemDeleted","onItemUpdated","onItemUpserted","pinningOptions","shouldAutosizeColumns","suppressRender","suppressColumnSet","previousItemMetadata","meta","cssClasses","_dirty","rowClass","hideColumnByIndex","colIndexFound","columnIndexFromAllColumns","hideColumnById","fadeDelay","fadeOutDelay","highlightRowByMetadata","getItemRowMetadataToHighlight","renderGrid","indexes","dataItems","selectedRowIndexes","getDataItemByRowIndexes","rowIndexes","originalColumns","resetColumns","clearPinning","shouldHighlightRow","shouldResortGrid","shouldTriggerEvent","shouldSelectRow","addItems","insertPosition","insertItem","itemId","invalidateHierarchicalDataset","getRowById","setSelectedRow","rowNumbers","beginUpdate","insertItems","endUpdate","firstItemId","navigateTop","navigateBottom","deleteItem","deleteItems","deleteItemById","itemIds","deleteItemByIds","updateItems","updateItemById","updateRow","upsertItemById","upsertItem","upsertedRows","upsertRow","added","updated","addedItems","updatedItems","rowNumberAdded","rowNumberUpdated","isItemAdded","sortedDatasetResult","convertFlatParentChildToTreeDatasetAndSort","GridEventService","onCellChange","handleOnCellChange","returnedArgs","autoCommitEdit","setActiveCell","onCellClick","renderPreHeaderRowGroupingTitles","onRendered","onAutosizeColumns","onColumnsResized","onRowCountChanged","delayRenderPreHeaderRowGroupingTitles","$preHeaderPanel","getPreHeaderPanelLeft","renderHeaderGroups","getPreHeaderPanelRight","getPreHeaderPanel","preHeaderPanel","start","end","getHeadersWidth","headerColumnWidthDiff","getHeaderColumnWidthDiff","colDef","lastColumnGroup","widthTotal","isFrozenGrid","currentColumnDefinitions","gridService","_initialized","_isLocalGrid","_dataFrom","_dataTo","_itemsPerPage","_pageCount","_pageNumber","_totalItems","_availablePageSizes","onPaginationChanged","onPaginationVisibilityChanged","_paginationOptions","refreshPagination","_backendServiceApi","pagingInfo","totalRows","updateTotalItems","setRefreshHints","isFilterUnchanged","setPagingOptions","pageNum","resetPagination","processOnItemAddedOrRemoved","pageCount","dataFrom","dataTo","itemsPerPage","processOnPageChanged","previousPageNumber","isPageNumberReset","triggerChangedEvent","previousPagination","recalculateFromToIndexes","getFullPagination","processOnPaginationChanged","visible","isVisible","goToFirstPage","previousDataTo","itemCountWithDirection","Aggregators","_nonNullCount","_sum","_field","groupTotals","avg","sum","textValidator","errorMsg","errorMessage","isRequired","required","maxLength","operatorConditionalType","mapValidation","outputMsg","inputValueLength","validator","editorArgs","matched","defaultErrorMsg","valid","msg","floatValidator","floatNumber","decPlaces","decimal","integerValidator","intNumber","parseInt","_isDisposing","_translate","libOptions","internalColumnEditor","save","$editorElm","elmValue","isIncludingPrefixSuffix","includePrefixSuffixToSelectedValues","isComplexObject","serializeComplexValueFormat","columnEditor","itemFound","_collectionService","currentValues","loadMultipleValues","loadSingleValue","state","validation","validate","complexObjectPath","hasAutoCommitEdit","isValueChanged","objectPath","originalValue","currentStringValues","each","$e","forceCommitCurrentEdit","getEditorLock","commitCurrentEdit","commitChanges","valueSelection","collectionOverride","editorTemplate","elementOptions","editorOptions","editorElmOptions","Editors","_defaultTextValue","_elementCollection","_$editorElm","focus","editorCollection","collectionItem","lastKeyEvent","_lastInputEvent","alwaysSaveOnEnterKey","forceUserInput","setValue","activeCell","getActiveCell","LEFT","RIGHT","finalCollection","handleSelect","keydown","checkbox","_$input","isChecked","serializeValue","_originalDate","_pickerMergedOptions","currentFlatpickrOptions","inputCssClasses","altInputClass","_$editorInputElm","closeButtonElm","hideClearButton","_$inputWithData","_input","outputTypeFormat","saveTypeFormat","saveOutputType","elmDateStr","orgDateStr","domValue","dualInput","_isValueSaveCalled","_bindEventService","onValidationError","leftInput","_leftInput","rightInput","_rightInput","editorParams","_leftFieldName","_rightFieldName","createInput","containerElm","onkeydown","handleFocusOut","relatedTarget","_lastEventType","side","_lastInputKeyEvent","TAB","editorSideParams","readOnly","getInputDecimalSteps","leftInputValue","rightInputValue","isLeftInputTypeNumber","isRightInputTypeNumber","resultLeftValue","resultRightValue","applyValueByPosition","fieldNameToUse","complexFieldNames","stateValue","newValueFromComplex","leftElmValue","rightElmValue","leftEditorParams","rightEditorParams","leftResult","originalLeftValue","rightResult","originalRightValue","loadValueByPosition","originalValuePosition","inputVarPosition","decimalPlaces","getDecimalPlaces","toFixed","leftValue","serializeValueByPosition","rightValue","rtn","positionSide","sideParams","decimals","zeroString","inputValidation","posValidation","validateByPosition","leftValidation","rightValidation","positionEditorParams","currentVal","commonValidator","baseValidatorOptions","getValue","longText","_$textarea","cancelText","saveText","cancelKey","buttonTexts","saveKey","cancel","textAreaCols","textAreaRows","_$wrapper","editorFooterElm","countContainerElm","_$currentLengthElm","cancelBtnElm","saveBtnElm","handleOnInputChange","cancelChanges","parentPosition","containerOffset","rect","getBoundingClientRect","pageYOffset","pageXOffset","containerHeight","offsetHeight","containerWidth","offsetWidth","calculatedEditorHeight","calculatedEditorWidth","calculatedBodyHeight","calculatedBodyWidth","newPositionTop","newPositionLeft","marginRight","ESCAPE","navigatePrev","navigateNext","isTruncated","truncateText","newText","originalEvent","clipboardData","$inputElm","_defaultValue","$sliderNumber","arrayToCsvFormatter","centerFormatter","complexObjectFormatter","columnParams","complexFieldLabel","Formatters","alignCenter","alignRight","arrayObjectToCsv","propertyNames","parentObjectKeyName","dataContextProperty","strings","arrayToCsv","bsDropdown","formatterLabel","center","checkmark","isValidNumber","complex","complexObject","v","collectionEditor","deleteIcon","minDecimalPlaces","maxDecimalPlaces","dollar","dollarColored","dollarColoredBold","editIcon","fakeHyperlink","hyperlink","displayedText","hyperlinkText","outputLink","hyperlinkUrl","matchUrl","icon","formatterIcon","infoIcon","italic","lowercase","multiple","formatters","percent","percentComplete","colorStyle","formattedNumber","percentCompleteBar","color","percentSymbol","progressBar","translateBoolean","tree","indentMarginLeft","treeLevelPropName","getItemByIdx","getIdPropertyName","indentSpacer","nextItemRow","slickTreeLevelClass","toggleClass","titleFormatter","sanitizedOutputValue","ADD_ATTR","addClasses","treeExport","exportIndentationLeadingSpaceCount","toggleSymbol","indentation","uppercase","yesNo","GroupTotalFormatters","avgTotals","totals","prefix","groupFormatterPrefix","suffix","groupFormatterSuffix","avgTotalsDollar","avgTotalsPercentage","maxTotals","minTotals","sumTotals","sumTotalsBold","sumTotalsColored","sumTotalsDollar","sumTotalsDollarBold","sumTotalsDollarColored","sumTotalsDollarColoredBold","paginationService","_enableTranslate","textItemsPerPage","textItems","textOf","textPage","availablePageSizes","page","translateAllUiTexts","onLangChange","isLeftPaginationDisabled","isRightPaginationDisabled","goToLastPage","goToNextPage","goToPreviousPage","currentTarget","goToPageNumber","changeItemPerPage","selector","isPreviouslyShown","slickGrid","_warningLeftElement","_warningRightElement","isShowing","emptyDataClassName","gridCanvasLeftElm","gridCanvasRightElm","leftElementMarginLeft","rightElementMarginLeft","leftElementFrozenMarginLeft","rightElementFrozenMarginLeft","leftPaneElm","defHeightPane","defHeightRow","filterRowHeight","preHeaderRowHeight","preHeaderPanelHeight","leftPaneMinHeight","warningMessage","add","cloneNode","leftDisplay","display","leftFrozenMarginLeft","marginLeft","rightDisplay","rightFrozenMarginLeft","cd","elm","gridEventService","groupingAndColspanService","resizer","forRootConfig","_currentDatasetLength","_isGridInitialized","_isDatasetInitialized","_isDatasetHierarchicalInitialized","_isLeftFooterOriginallyEmpty","_isLeftFooterDisplayingSelectionRowCount","_isPaginationInitialized","_selectedRowCount","groupingDefinition","showPagination","onAngularGridCreated","onDataviewCreated","onGridCreated","onGridInitialized","onBeforeGridCreate","onBeforeGridDestroy","onAfterGridDestroyed","slickEmptyWarning","updateColumnDefinitionsList","copyColumnWidthsReference","newDataset","prevDatasetLn","sortTreeDataset","_dataset","refreshGridData","newHierarchicalDataset","prevFlatDatasetLn","flatDatasetLn","getItemCount","initialization","finalTotalCount","displayEmptyDataWarning","emit","gridHeightString","gridWidthString","shouldEmptyDomElementContainer","emptyGridContainerElm","_angularGridInstances","firstChild","lastChild","isBubbling","isCancelable","eventInit","bubbles","cancelable","detail","nativeElement","dispatchEvent","getDatasetName","nodes","totalCount","loadFilterPresetsWhenDatasetInitialized","loadRowSelectionPresetWhenExists","setPaginationOptionsWhenPresetDefined","totalRecords","initializePaginationService","presets","swapInternalEditorToSlickGridFactoryEditor","translateColumnHeaders","showWarning","showEmptyDataMessage","translateColumnHeaderTitleKeys","translateColumnGroupKeys","translateCustomFooterTexts","translateGroupingAndColSpan","customDataView","useLocalSorting","bindBackendOnSort","bindLocalOnSort","useLocalFiltering","bindBackendOnFilter","bindLocalOnFilter","loadColumnPresetsWhenDatasetInitialized","dispatchCustomEvent","gridStateChange","bindOnCellChange","bindOnClick","handleOnItemCountChanged","current","onSetItemsCalled","onRowsChanged","impactedColumns","colspanCallback","callbackResult","isExecuteCommandOnInit","getColumnFilters","onInit","bindAutoResizeDataGrid","currentPageRowItemCount","paginationData","changes","paginationChanged","detectChanges","mergeGridOptions","createBackendApiInternalPostProcessCallback","leftFooterText","dataViewOptions","inlineFilters","Data","GroupItemMetadataProvider","DataView","autoAddCustomEditorFormatter","customEditableFormatter","prevFormatter","createExtensionsBeforeGridCreation","Grid","bindDifferentExtensions","bindDifferentHooks","initialDataset","preservedRowSelectionWithBackend","preserveHiddenOnSelectionChange","executeAfterDataviewCreated","bindResizeHook","bindBackendCallbackFunctions","loadLocalGridPagination","extensions","extensionList","groupingService","pluginService","optionallyShowCustomFooterWithMetrics","resolvedCollection","updateEditorCollection","populateColumnFilterSearchTermPresets","getPagingInfo","slickPagingInfo","selectedRowDataContextIds","registerOnSelectedRowsChangedWhenEnabled","lastUpdate","selectedCountText","selectedCountText2","flatDatasetInput","flatDatasetOutput","loadEditorCollectionAsync","lastIndexOf","propNameWithoutKey","providers","ngModule","provide","useValue","imports","declarations","entryComponents","mockDataset","angularGrid","log","confirm","alert","mockedDataset","randomYear","random","randomMonth","randomDay","randomPercent","duration","percentCompleteNumber","finish","effortDriven","newItem1","createNewItem","incrementIdByHowMany","highestId","newId","scrollGridTop","updateItemMetadataForDurationOver40","updatedItem","getDataItemByRowNumber","encapsulation","None","selectedId","onItemChanged","selectedItem","CustomActionFormatterComponent","defaultId","defaultItem","itemObject","componentOuput","CustomTitleFormatterComponent","isAutoEdit","selectedLanguage","assignees","prepareGrid","gridObj","alertWarning","asyncPostRender","renderAngularComponent","symbol","enableAsyncPostRender","asyncPostRenderDelay","editCommandHandler","mockData","startingIndex","tempDataset","assignee","updatedObject","getColumnFromEventArguments","validationResults","gotoCell","cellNode","operatorList","selectedColumn","updateFilter","updateSingleFilter","columnDefinitions1","columnDefinitions2","gridOptions1","gridOptions2","dataset1","dataset2","randomBetween","http","useSelectOptionLabelToHtml","minDate","isEffort","autoDropWidth","randomDuration","randomYearShort","randomMonthStr","randomHour","randomTime","randomMilliseconds","randomIsEffort","usDateShort","utcDate","prepareGrid1","prepareGrid2","angularGrid2","gridObj2","selectable","renderDifferentColspan","resizable","num","frozenCols","0","actionFormatter","priority","priorityFormatter","priorityExportFormatter","taskTranslateFormatter","getSlickgridAddonInstance","menuUsabilityOverride","completed","textCssClass","itemVisibilityOverride","executeCommand","getContextMenuOptions","tmpData","commandShownOverColumnIds","optionShownOverColumnIds","showBothList","showOverColumnIds","contextMenuInstance","cellMenuInstance","nextLanguage","durationOrderByCount","processing","selectedGroupingFields","loadData","defineGrid","dataviewObj","getter","g","aggregators","aggregateCollapsed","comparer","clearGrouping","dropPlaceHolderText","deleteIconCssClass","draggableGroupingPlugin","rowCount","cost","clearGroupingSelects","setDroppedGroups","clearDroppedGroups","showPreHeader","sortedByCount","groupByDuration","setSortColumnIcons","groupedFields","groups","groupColumns","$input","lastEvent","myCustomTitleValidator","taskFormatter","duplicateTitleHeaderCount","request","ajax","dataType","q","success","inContains","lastRowIndex","newRows","requisiteColumnDef","filterCollectionAsync","selectCollectionObj","sortCollectionDescending","item1","item2","randomFinishYear","getFullYear","randomFinish","prerequisites","countryOfOrigin","countryOfOriginName","cityOfOrigin","newCol","myCustomCheckmarkFormatter","toolTip","customEnableButtonFormatter","resizerPaused","toggleCompletedProperty","phone","generatePhoneNumber","percentComplete2","pauseResizer","frozenColumnCount","frozenRowCount","isFrozenBottom","slickEventHandler","prepareDataGrid","onMouseEnter","onMouseLeave","isMouseEnter","getCellFromEvent","cannotTriggerInsert","unselectable","costDurationFormatter","title1","title2","title3","title4","costText","isNullUndefinedOrEmpty","durationText","graphqlQuery","status","presetLowestDay","presetHighestDay","resetGrid","localStorage","displaySpinner","getCustomerApiCall","isProcessing","mockedResult","gridStateChanges","clearAllFiltersAndSorts","COUNTRIES_API","isDataLoaded","getLanguages","getContinents","getCountries","post","focusable","lazyTotalsCalculation","columnsWithHighlightingById","highlightingFormatter","GridHeaderButtonComponent","button","tooltip","charCodeAt","buttons","handler","showOnHover","d","dataview","getDefaultLang","hideInFilterHeaderRow","hideInColumnTitleRow","lastUpdateKey","workbook","sheet","formatterId","setRowInstructions","completedBool","customTitleKey","isObjectEmpty","isCountEnabled","odataQuery","getCustomerCallback","countPropName","getCustomerDataApiMock","queryParams","countTotalItems","param","filterMatch","firstRow","filteredData","filterType","splitIds","filterTerm","updatedData","odataService","filterList","selectedPredefinedFilter","filterValue","currentYear","brandFormatter","brand","mpnFormatter","octopart_url","mpn","GridRemoteComponent","loading","loaderDataView","RemoteModel","setSort","setSortColumn","onViewportChanged","hookAllLoaderEvents","onDataLoading","onDataLoaded","invalidateRow","updateRowCount","to","getViewport","ensureData","vp","bottom","setSearch","customEditableInputFormatter","compositeEditorOptions","modalType","editQueue","editedItems","isUsingDefaultResize","isGridEditable","isCompositeDisabled","isMassSelectionDisabled","complexityLevelList","mockProducts","product","itemName","renderItemCallbackWith4Corners","prevSerializedValues","prevSerializedValue","serializedValues","serializedValue","editorColumns","modifiedColumns","_val","finalColumn","renderUnsavedCellStyling","tmpArray","randomItemId","randomPercentComplete","percentCompletion","isCompleted","analysis","complexity","origin","CompositeEditor","errors","hasEditor","isEditable","removeAllUnsavedStylingFromCell","renderUnsavedStylingOnAllVisibleCells","undoAllEdits","_item","removeCellCssStyles","lastEdit","lastEditCommand","lastEditColumn","removeUnsavedStylingFromCell","getRowByItem","hash","setCellCssStyles","showLastEditor","itemNameTranslated","listPrice","itemTypeName","image","getRandomIcon","iconIndex","icons","randomNumber","RowDetailViewComponent","collapseAll","rowId","showFlashMessage","RowDetailPreloadComponent","detailViewRowCount","flashAlertType","multiSelectFilterArray","simulateServerAsyncCall","loadOnce","singleRowExpand","alertType","randomNames","reporter","singleRowMove","disableRowSelection","onBeforeMoveRow","insertBefore","stopPropagation","extractedRows","right","reverse","tmpDataset","selectedRows","resetActiveCell","toggleFilterFunctionality","toggleSortFunctionality","isGrid2WithPagination","angularGrid1","gridObj1","hideSelectAllCheckbox","multiSelect","prepareData","selectedGrid2IDs","selectedTitles","dataContextId","togglePaginationVisibility","selectedTitle","parse","gridStatePresets","etc","defineGrid1","defineGrid2","searchString","treeFormatter","getFileIcon","spacer","folderPrefix","dataViewObj","tmpDatasetHierarchical","popItem","file","files","dateModified","size","_def","parentId","childItemFound","parentItemFound","newItem","indent","parents","LoggerLevel","_class","_clientLogLevel","INFO","_serverLogLevel","OFF","_isIE","serverLogLevel","serverLoggingUrl","additional","_log","TRACE","DEBUG","LOG","WARN","ERROR","toISOString","headers","Levels","timestamp","_timestamp","res","info","logOnServer","_logOnServer","_logIE","_getColor","httpClient","realPagination","logger","gridPaginationOptions","_gridPaginationOptions","commonGrid","onPageChanged","renderer","defaultPageSize","gridWidth","isMultiSelect","onFilterChanged_","onPaginationChanged_","onSortChanged_","sortedGridColumn","currentPage","filteredGridColumns","_onRowDoubleClick","Function","_onRowClick","_paginationComponent","angularSlickGrid","metaData","rowData","dataelement","heading","columnsData","lockedColumnCount","uniqueColumn","baseURL","programId","componentId","enableRenders","colValidationMap","checkHeader","cboLinked","rawData","dataProvider","idObj","paginationComponent","timing","_selectedRow","static","viewContainerRef","componentFactoryResolver","testurl","currentUrl","commonGridPag","CustomGrid","data_sample","pagination_samples","gridData","maxpage","updateGridData","routes","redirectTo","pathMatch","AppRoutingRoutingModule","forRoot","useHash","relativeLinkResolution","AppComponent","AppModule","loader","useFactory","deps","setDefaultLang","err","multi","bootstrap","bootstrapModule","preserveWhitespaces","webpackEmptyAsyncContext"],"mappings":"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","sourceRoot":"webpack:///","sourcesContent":["var map = {\n\t\"./locale\": \"wCDk\",\n\t\"./locale.js\": \"wCDk\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"Lw2E\";","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  templateUrl: './home.component.html'\r\n})\r\nexport class HomeComponent {\r\n  title = 'Angular-Slickgrid - Demo Site';\r\n  subTitle = 'This site is to demo multiple usage of Angular-Slickgrid, choose an example from left side menu';\r\n}\r\n","export default \"<div class=\\\"container\\\">\\n  <h2>{{title}}</h2>\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\n\\n  <hr />\\n\\n  <h4>Description</h4>\\n  <p>\\n    One of the best javascript datagrid\\n    <a href=\\\"https://github.com/mleibman/SlickGrid\\\"\\n       target=\\\"_blank\\\">SlickGrid</a> which was originally developed by @mleibman is now available to Angular. I have\\n    tried and used a few datagrids and SlickGrid beats most of them in terms of functionalities\\n    and performance (it can easily deal with even a million row).\\n  </p>\\n  <h4>Wiki / Documentation</h4>\\n  <p>\\n    The Wiki is where all the documentation and instructions will go, so please consult the\\n    <a href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/wiki\\\"\\n       target=\\\"_blank\\\">Angular-Slickgrid - Wiki</a>\\n    before opening any issues.\\n    <br />\\n    The\\n    <a href=\\\"https://github.com/ghiscoding/angular-slickgrid/wiki/HOWTO---Step-by-Step\\\"\\n       target=\\\"_blank\\\">HOWTO - Wiki</a>\\n    is the best starting point to get going with this library.\\n  </p>\\n\\n  <hr />\\n  Like my work? You can support me with caffeine :)\\n\\n  <br /><br />\\n\\n  <a href='https://ko-fi.com/N4N679OT'\\n     target='_blank'>\\n    <img height='36'\\n         style='border:0px;height:36px;'\\n         src='https://az743702.vo.msecnd.net/cdn/kofi2.png?v=0'\\n         border='0'\\n         alt='Buy Me a Coffee at ko-fi.com' />\\n  </a>\\n</div>\\n\";","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\n  <h2>\\n    {{title}}\\n    <span class=\\\"float-right\\\">\\n      <a style=\\\"font-size: 18px\\\"\\n         target=\\\"_blank\\\"\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-additem.component.ts\\\">\\n        <span class=\\\"fa fa-link\\\"></span> code\\n      </a>\\n    </span>\\n  </h2>\\n  <div class=\\\"subtitle\\\"\\n       [innerHTML]=\\\"subTitle\\\"></div>\\n\\n  <div class=\\\"col-sm-12\\\">\\n    <span>\\n      <label>Scroll: </label>\\n      <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n        <button class=\\\"btn btn-sm btn-outline-secondary\\\" data-test=\\\"scroll-top-btn\\\" (click)=\\\"scrollGridTop()\\\">\\n          <i class=\\\"fa fa-arrow-up\\\"></i>\\n        </button>\\n        <button class=\\\"btn btn-sm btn-outline-secondary\\\" data-test=\\\"scroll-bottom-btn\\\" (click)=\\\"scrollGridBottom()\\\">\\n          <i class=\\\"fa fa-arrow-down\\\"></i>\\n        </button>\\n      </div>\\n      <button class=\\\"btn btn-sm btn-outline-secondary\\\" data-test=\\\"add-new-item-top-btn\\\"\\n              (click)=\\\"addNewItem()\\\">Add New Mocked Item</button>\\n      <button class=\\\"btn btn-sm btn-outline-secondary\\\" data-test=\\\"add-new-item-bottom-btn\\\"\\n              (click)=\\\"addNewItem('bottom')\\\">Add New Mocked Item (bottom)</button>\\n      <button class=\\\"btn btn-sm btn-outline-secondary\\\" data-test=\\\"update-second-item-btn\\\"\\n              (click)=\\\"updateSecondItem()\\\">Update 2nd Row Item with Random Duration</button>\\n      <button class=\\\"btn btn-sm btn-outline-secondary\\\" data-test=\\\"highlight-row5-btn\\\"\\n              (click)=\\\"highlighFifthRow()\\\">Highlight 5th Row</button>\\n      <button class=\\\"btn btn-sm btn-outline-secondary\\\" data-test=\\\"highlight-duration40-btn\\\"\\n              (click)=\\\"changeDurationBackgroundColor()\\\">Highlight Rows with Duration over 50</button>\\n    </span>\\n    <hr />\\n  </div>\\n\\n  <div class=\\\"col-sm-12\\\">\\n    <angular-slickgrid gridId=\\\"grid11\\\"\\n                       [columnDefinitions]=\\\"columnDefinitions\\\"\\n                       [gridOptions]=\\\"gridOptions\\\"\\n                       [dataset]=\\\"dataset\\\"\\n                       (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\n    </angular-slickgrid>\\n  </div>\\n</div>\\n\";","export enum CaseType {\r\n  /** For example: camelCase */\r\n  camelCase,\r\n\r\n  /** For example: PascalCase */\r\n  pascalCase,\r\n\r\n  /** For example: snake_case */\r\n  snakeCase,\r\n\r\n  /** For example: kebab-case */\r\n  kebabCase,\r\n}\r\n","export enum DelimiterType {\r\n  colon = ':',\r\n  comma = ',',\r\n  equalSign = '=',\r\n  pipe = '|',\r\n  semicolon = ';',\r\n  space = ' ',\r\n  tab = '\\t',\r\n\r\n  doubleColon = '::',\r\n  doublePipe = '||',\r\n  doubleSemicolon = ';;',\r\n}\r\n\r\n","export enum EmitterType {\r\n  local = 'local',\r\n  remote = 'remote'\r\n}\r\n\r\n","/** List of available SlickGrid Extensions (Controls & Plugins) */\r\nexport enum ExtensionName {\r\n  autoTooltip = 'autoTooltip',\r\n  cellExternalCopyManager = 'cellExternalCopyManager',\r\n  cellMenu = 'cellMenu',\r\n  checkboxSelector = 'checkboxSelector',\r\n  columnPicker = 'columnPicker',\r\n  contextMenu = 'contextMenu',\r\n  draggableGrouping = 'draggableGrouping',\r\n  groupItemMetaProvider = 'groupItemMetaProvider',\r\n  gridMenu = 'gridMenu',\r\n  headerButton = 'headerButton',\r\n  headerMenu = 'headerMenu',\r\n  noname = 'noname',\r\n  rowDetailView = 'rowDetailView',\r\n  rowMoveManager = 'rowMoveManager',\r\n  rowSelection = 'rowSelection',\r\n}\r\n","export enum FieldType {\r\n  /** unknown type */\r\n  unknown = 'unknown',\r\n\r\n  /** string type */\r\n  string = 'string',\r\n\r\n  /** boolean type (true/false) */\r\n  boolean = 'boolean',\r\n\r\n  /** integer number type (1,2,99) */\r\n  integer = 'integer',\r\n\r\n  /** float number (with decimal) type */\r\n  float = 'float',\r\n\r\n  /** number includes Integer and Float */\r\n  number = 'number',\r\n\r\n  /** new Date(), javascript Date object */\r\n  date = 'date',\r\n\r\n  /** Format: 'YYYY-MM-DD' => 2001-02-28 */\r\n  dateIso = 'dateIso',\r\n\r\n  /** Format: 'YYYY-MM-DDTHH:mm:ss.SSSZ' => 2001-02-28T14:00:00.123Z */\r\n  dateUtc = 'dateUtc',\r\n\r\n  /** new Date(), javacript Date Object with Time */\r\n  dateTime = 'dateTime',\r\n\r\n  /** Format: 'YYYY-MM-DD HH:mm:ss' => 2001-02-28 14:01:01 */\r\n  dateTimeIso = 'dateTimeIso',\r\n\r\n  /** Format: 'YYYY-MM-DD h:mm:ss a' => 2001-02-28 11:01:01 pm */\r\n  dateTimeIsoAmPm = 'dateTimeIsoAmPm',\r\n\r\n  /** Format: 'YYYY-MM-DD h:mm:ss A' => 2001-02-28 11:01:01 PM */\r\n  dateTimeIsoAM_PM = 'dateTimeIsoAM_PM',\r\n\r\n  /** Format: 'YYYY-MM-DD HH:mm' => 2001-02-28 14:01 */\r\n  dateTimeShortIso = 'dateTimeShortIso',\r\n\r\n  /** Format (Euro): 'DD/MM/YYYY' => 28/02/2001 */\r\n  dateEuro = 'dateEuro',\r\n\r\n  /** Format (Euro): 'D/M/YY' => 28/2/12 */\r\n  dateEuroShort = 'dateEuroShort',\r\n\r\n  /** Format (Euro): 'DD/MM/YYYY HH:mm' => 28/02/2001 13:01 */\r\n  dateTimeShortEuro = 'dateTimeShortEuro',\r\n\r\n  /** Format (Euro): 'DD/MM/YYYY HH:mm:ss' => 02/28/2001 13:01:01 */\r\n  dateTimeEuro = 'dateTimeEuro',\r\n\r\n  /** Format (Euro): 'DD/MM/YYYY hh:mm:ss a' => 28/02/2001 11:01:01 pm */\r\n  dateTimeEuroAmPm = 'dateTimeEuroAmPm',\r\n\r\n  /** Format (Euro): 'DD/MM/YYYY hh:mm:ss A' => 28/02/2001 11:01:01 PM */\r\n  dateTimeEuroAM_PM = 'dateTimeEuroAM_PM',\r\n\r\n  /** Format (Euro): 'D/M/YY H:m:s' => 28/2/14 14:1:2 */\r\n  dateTimeEuroShort = 'dateTimeEuroShort',\r\n\r\n  /** Format (Euro): 'D/M/YY h:m:s a' => 28/2/14 1:2:10 pm */\r\n  dateTimeEuroShortAmPm = 'dateTimeEuroShortAmPm',\r\n\r\n  /** Format (Euro): 'D/M/YY h:m:s A' => 28/2/14 14:1:1 PM */\r\n  dateTimeEuroShortAM_PM = 'dateTimeEuroShortAM_PM',\r\n\r\n  /** Format: 'MM/DD/YYYY' => 02/28/2001 */\r\n  dateUs = 'dateUs',\r\n\r\n  /** Format: 'M/D/YY' => 2/28/12 */\r\n  dateUsShort = 'dateUsShort',\r\n\r\n  /** Format: 'MM/DD/YYYY HH:mm' => 02/28/2001 13:01 */\r\n  dateTimeShortUs = 'dateTimeShortUs',\r\n\r\n  /** Format: 'MM/DD/YYYY HH:mm:ss' => 02/28/2001 13:01:01 */\r\n  dateTimeUs = 'dateTimeUs',\r\n\r\n  /** Format: 'MM/DD/YYYY hh:mm:ss a' => 02/28/2001 11:01:01 pm */\r\n  dateTimeUsAmPm = 'dateTimeUsAmPm',\r\n\r\n  /** Format: 'MM/DD/YYYY hh:mm:ss A' => 02/28/2001 11:01:01 PM */\r\n  dateTimeUsAM_PM = 'dateTimeUsAM_PM',\r\n\r\n  /** Format: 'M/D/YY H:m:s' => 2/28/14 14:1:2 */\r\n  dateTimeUsShort = 'dateTimeUsShort',\r\n\r\n  /** Format: 'M/D/YY h:m:s a' => 2/28/14 1:2:10 pm */\r\n  dateTimeUsShortAmPm = 'dateTimeUsShortAmPm',\r\n\r\n  /** Format: 'M/D/YY h:m:s A' => 2/28/14 14:1:1 PM */\r\n  dateTimeUsShortAM_PM = 'dateTimeUsShortAM_PM',\r\n\r\n  /** complex object with various properties */\r\n  object = 'object',\r\n\r\n  /** password text string */\r\n  password = 'password',\r\n\r\n  /** alias to string */\r\n  text = 'text',\r\n\r\n  /** readonly text string */\r\n  readonly = 'readonly',\r\n}\r\n","export enum FileType {\r\n  csv = 'csv',\r\n  txt = 'txt',\r\n  xls = 'xls',\r\n  xlsx = 'xlsx'\r\n}\r\n","export enum FilterMultiplePassType {\r\n  merge = 'merge',\r\n  chain = 'chain'\r\n}\r\n","export enum GridStateType {\r\n  columns = 'columns',\r\n  filter = 'filter',\r\n  pagination = 'pagination',\r\n  pinning = 'pinning',\r\n  sorter = 'sorter',\r\n  rowSelection = 'rowSelection',\r\n}\r\n","export enum KeyCode {\r\n  BACKSPACE = 8,\r\n  DELETE = 46,\r\n  DOWN = 40,\r\n  END = 35,\r\n  ENTER = 13,\r\n  ESCAPE = 27,\r\n  HOME = 36,\r\n  INSERT = 45,\r\n  LEFT = 37,\r\n  PAGE_DOWN = 34,\r\n  PAGE_UP = 33,\r\n  RIGHT = 39,\r\n  TAB = 9,\r\n  UP = 38,\r\n  SPACE = 32,\r\n}\r\n","export enum OperatorType {\r\n  /** value is empty */\r\n  empty = '',\r\n\r\n  /** value contains in x (search for substring in the string) */\r\n  contains = 'Contains',\r\n\r\n  /** value not contains x (inversed of contains) */\r\n  notContains = 'Not_Contains',\r\n\r\n  /** value less than x */\r\n  lessThan = 'LT',\r\n\r\n  /** value less than or equal to x */\r\n  lessThanOrEqual = 'LE',\r\n\r\n  /** value greater than x */\r\n  greaterThan = 'GT',\r\n\r\n  /** value great than or equal to x */\r\n  greaterThanOrEqual = 'GE',\r\n\r\n  /** value not equal to x */\r\n  notEqual = 'NE',\r\n\r\n  /** value equal to x */\r\n  equal = 'EQ',\r\n\r\n  /** String ends with value */\r\n  endsWith = 'EndsWith',\r\n\r\n  /**\r\n   * Search in an inclusive range of values that is greater or equal to search value 1 and is smaller or equal to value 2\r\n   * For example the search term of \"5..10\" will return any values that are greater or equal to 5 and smaller or equal to 10\r\n   */\r\n  rangeInclusive = 'RangeInclusive',\r\n\r\n  /**\r\n   * Search in an inclusive range of values that is greater then search value 1 and is smaller then value 2\r\n   * For example the search term of \"5..10\" will return any values that is greater then 5 and smaller then 10\r\n   */\r\n  rangeExclusive = 'RangeExclusive',\r\n\r\n  /** String starts with value */\r\n  startsWith = 'StartsWith',\r\n\r\n  /** Find an equal match inside a collection */\r\n  in = 'IN',\r\n\r\n  /** Inverse (Not In) of an equal match inside a collection */\r\n  notIn = 'NOT_IN',\r\n\r\n  /**\r\n   * Find a substring contained inside a collection, note that it has to be a CSV string.\r\n   * For example, this condition would return True with \"IN_CONTAINS\":: value='Task2,Task3', collection=['Task2','Task3']\r\n   * This would have returned False with \"IN\" because 'Task2' does not equal 'Task2,Task3'. However 'Task2' is contained in 'Task2,Task3'\r\n   */\r\n  inContains = 'IN_CONTAINS',\r\n\r\n  /** Inversed (Not In) of substring contained inside a collection */\r\n  notInContains = 'NOT_IN_CONTAINS',\r\n\r\n  /** Find a value from within a collection inside another collection */\r\n  inCollection = 'IN_COLLECTION',\r\n\r\n  /** Inversed (Not In) of looking for a value from a collection inside another collection */\r\n  notInCollection = 'NOT_IN_COLLECTION',\r\n}\r\n","export enum SortDirection {\r\n  asc = 'asc',\r\n  ASC = 'ASC',\r\n  desc = 'desc',\r\n  DESC = 'DESC'\r\n}\r\n","export enum SortDirectionNumber {\r\n  asc = 1,\r\n  desc = -1,\r\n  neutral = 0,\r\n}\r\n","import { AngularComponentOutput } from '../models/angularComponentOutput.interface';\r\nimport { ApplicationRef, ComponentFactoryResolver, EmbeddedViewRef, Injectable, Injector } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class AngularUtilService {\r\n  constructor(\r\n    private compFactoryResolver: ComponentFactoryResolver,\r\n    private appRef: ApplicationRef,\r\n    private injector: Injector,\r\n  ) { }\r\n\r\n  // ref https://hackernoon.com/angular-pro-tip-how-to-dynamically-create-components-in-body-ba200cc289e6\r\n  createAngularComponent(component: any): AngularComponentOutput {\r\n    // Create a component reference from the component\r\n    const componentRef = this.compFactoryResolver\r\n      .resolveComponentFactory(component)\r\n      .create(this.injector);\r\n\r\n    // Attach component to the appRef so that it's inside the ng component tree\r\n    this.appRef.attachView(componentRef.hostView);\r\n\r\n    // Get DOM element from component\r\n    let domElem;\r\n    const viewRef = (componentRef.hostView as EmbeddedViewRef<any>);\r\n    if (viewRef && Array.isArray(viewRef.rootNodes) && viewRef.rootNodes[0]) {\r\n      domElem = viewRef.rootNodes[0] as HTMLElement;\r\n    }\r\n\r\n    return { componentRef, domElement: domElem as HTMLElement };\r\n  }\r\n\r\n  // ref https://hackernoon.com/angular-pro-tip-how-to-dynamically-create-components-in-body-ba200cc289e6\r\n  createAngularComponentAppendToDom(component: any, targetElement?: HTMLElement | Element, clearTargetContent = false): AngularComponentOutput {\r\n    const componentOutput = this.createAngularComponent(component);\r\n\r\n    // Append DOM element to the HTML element specified\r\n    if (targetElement && targetElement.appendChild) {\r\n      if (clearTargetContent && targetElement.innerHTML) {\r\n        targetElement.innerHTML = '';\r\n      }\r\n      targetElement.appendChild(componentOutput.domElement);\r\n    } else {\r\n      document.body.appendChild(componentOutput.domElement); // when no target provided, we'll simply add it to the HTML Body\r\n    }\r\n\r\n    return componentOutput;\r\n  }\r\n}\r\n","import { EMPTY, iif, isObservable, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { BackendServiceApi, EmitterType, GraphqlResult, GraphqlPaginatedResult, GridOption } from '../models';\r\n\r\nconst main: any = {};\r\n\r\n/** Execute the Backend Processes Callback, that could come from an Observable or a Promise callback */\r\nmain.executeBackendProcessesCallback = function exeBackendProcessesCallback(startTime: Date, processResult: GraphqlResult | GraphqlPaginatedResult | any, backendApi: BackendServiceApi, totalItems: number): GraphqlResult | GraphqlPaginatedResult | any {\r\n  const endTime = new Date();\r\n\r\n  // define what our internal Post Process callback, only available for GraphQL Service for now\r\n  // it will basically refresh the Dataset & Pagination removing the need for the user to always create his own PostProcess every time\r\n  if (processResult && backendApi && backendApi.internalPostProcess) {\r\n    backendApi.internalPostProcess(processResult);\r\n  }\r\n\r\n  // send the response process to the postProcess callback\r\n  if (backendApi.postProcess) {\r\n    if (processResult instanceof Object) {\r\n      processResult.metrics = {\r\n        startTime,\r\n        endTime,\r\n        executionTime: endTime.valueOf() - startTime.valueOf(),\r\n        itemCount: totalItems,\r\n        totalItemCount: totalItems\r\n      };\r\n      // @deprecated\r\n      processResult.statistics = processResult.metrics;\r\n    }\r\n    backendApi.postProcess(processResult);\r\n  }\r\n};\r\n\r\n/** On a backend service api error, we will run the \"onError\" if there is 1 provided or just throw back the error when nothing is provided */\r\nmain.onBackendError = function backendError(e: any, backendApi: BackendServiceApi) {\r\n  if (backendApi && backendApi.onError) {\r\n    backendApi.onError(e);\r\n  } else {\r\n    throw e;\r\n  }\r\n};\r\n\r\n/**\r\n * Execute the backend callback, which are mainly the \"process\" & \"postProcess\" methods.\r\n * Also note that \"preProcess\" was executed prior to this callback\r\n */\r\nmain.executeBackendCallback = function exeBackendCallback(backendServiceApi: BackendServiceApi, query: string, args: any, startTime: Date, totalItems: number, emitActionChangedCallback?: (type: EmitterType) => void, httpCancelRequests$?: Subject<void>) {\r\n  if (backendServiceApi) {\r\n    // emit an onFilterChanged event when it's not called by a clear filter\r\n    if (args && !args.clearFilterTriggered && !args.clearSortTriggered && emitActionChangedCallback) {\r\n      emitActionChangedCallback(EmitterType.remote);\r\n    }\r\n\r\n    // the processes can be Observables (like HttpClient) or Promises\r\n    const process = backendServiceApi.process(query);\r\n    if (process instanceof Promise && process.then) {\r\n      process.then((processResult: GraphqlResult | GraphqlPaginatedResult | any) => main.executeBackendProcessesCallback(startTime, processResult, backendServiceApi, totalItems))\r\n        .catch((error: any) => main.onBackendError(error, backendServiceApi));\r\n    } else if (isObservable(process)) {\r\n      // this will abort any previous HTTP requests, that were previously hooked in the takeUntil, before sending a new request\r\n      if (isObservable(httpCancelRequests$)) {\r\n        httpCancelRequests$.next();\r\n      }\r\n\r\n      process\r\n        // the following takeUntil, will potentially be used later to cancel any pending http request (takeUntil another rx, that would be httpCancelRequests$, completes)\r\n        // but make sure the observable is actually defined with the iif condition check before piping it to the takeUntil\r\n        .pipe(takeUntil(iif(() => isObservable(httpCancelRequests$), httpCancelRequests$, EMPTY)))\r\n        .subscribe(\r\n          (processResult: GraphqlResult | GraphqlPaginatedResult | any) => main.executeBackendProcessesCallback(startTime, processResult, backendServiceApi, totalItems),\r\n          (error: any) => main.onBackendError(error, backendServiceApi)\r\n        );\r\n    }\r\n  }\r\n};\r\n\r\n/** Refresh the dataset through the Backend Service */\r\nmain.refreshBackendDataset = function refreshBackend(gridOptions: GridOption) {\r\n  let query = '';\r\n  const backendApi = gridOptions && gridOptions.backendServiceApi;\r\n\r\n  if (!backendApi || !backendApi.service || !backendApi.process) {\r\n    throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n  }\r\n\r\n  if (backendApi.service) {\r\n    query = backendApi.service.buildQuery();\r\n  }\r\n\r\n  if (query && query !== '') {\r\n    // keep start time & end timestamps & return it after process execution\r\n    const startTime = new Date();\r\n\r\n    if (backendApi.preProcess) {\r\n      backendApi.preProcess();\r\n    }\r\n\r\n    const totalItems = gridOptions && gridOptions.pagination && gridOptions.pagination.totalItems;\r\n    main.executeBackendCallback(backendApi, query, null, startTime, totalItems);\r\n  }\r\n};\r\n\r\n// export all methods & the main so that it works in all modules but also in Jest unit test\r\n// export every method as independent constant so that it still works whenever this is used in other modules\r\nexport const executeBackendProcessesCallback = main.executeBackendProcessesCallback;\r\nexport const onBackendError = main.onBackendError;\r\nexport const executeBackendCallback = main.executeBackendCallback;\r\nexport const refreshBackendDataset = main.refreshBackendDataset;\r\n\r\nexport default main;\r\n","import { ElementEventListener } from '../models/elementEventListener.interface';\r\n\r\nexport class BindingEventService {\r\n  private _boundedEvents: ElementEventListener[] = [];\r\n\r\n  /** Bind an event listener to any element */\r\n  bind(element: Element, eventName: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) {\r\n    element.addEventListener(eventName, listener, options);\r\n    this._boundedEvents.push({ element, eventName, listener });\r\n  }\r\n\r\n  /** Unbind all will remove every every event handlers that were bounded earlier */\r\n  unbindAll() {\r\n    while (this._boundedEvents.length > 0) {\r\n      const boundedEvent = this._boundedEvents.pop() as ElementEventListener;\r\n      const { element, eventName, listener } = boundedEvent;\r\n      if (element && element.removeEventListener) {\r\n        element.removeEventListener(eventName, listener);\r\n      }\r\n    }\r\n  }\r\n}\r\n","\r\nimport { Injectable } from '@angular/core';\r\nimport { AngularUtilService } from './angularUtil.service';\r\n\r\ninterface DropDownServiceParams {\r\n  /** the custom action formatter component that contains the dropdown */\r\n  component: any;\r\n\r\n  /** help to get the data context */\r\n  args: any;\r\n\r\n  /** parent container */\r\n  parent: any;\r\n\r\n  /** Offset bottom when using a Drop Up, if we need to reposition the dropdown component */\r\n  offsetDropupBottom?: number;\r\n\r\n  /** Offset left if we need to reposition the dropdown component */\r\n  offsetLeft?: number;\r\n\r\n  /** Offset top if we need to reposition the dropdown component */\r\n  offsetTop?: number;\r\n}\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\n// Boostrap dropdown service\r\n@Injectable()\r\nexport class BsDropDownService {\r\n  private _domContainerElement: any;\r\n  private _domElement: any;\r\n\r\n  constructor(private angularUtilService: AngularUtilService) { }\r\n\r\n  get domElement() {\r\n    return this._domElement;\r\n  }\r\n\r\n  get domContainerElement() {\r\n    return this._domContainerElement;\r\n  }\r\n\r\n  get gridViewport() {\r\n    return $('.slick-viewport');\r\n  }\r\n\r\n  dispose() {\r\n    if (this._domElement && this._domElement.remove) {\r\n      this._domElement.remove();\r\n    }\r\n  }\r\n\r\n  dropContainerShow() {\r\n    if (this._domContainerElement && this._domContainerElement.show) {\r\n      this._domContainerElement.show();\r\n    }\r\n  }\r\n\r\n  render(dropdownParams: DropDownServiceParams) {\r\n    return new Promise((resolve) => {\r\n      const { component, args, parent, offsetTop, offsetLeft, offsetDropupBottom } = dropdownParams;\r\n\r\n      const cell = args.cell;\r\n      const row = args.row;\r\n\r\n      this._domContainerElement = $(`#myDrop-r${row}-c${cell}`);\r\n\r\n      if (this._domContainerElement) {\r\n        // hide the dropdown we created as a formatter Component, we'll redisplay it later\r\n        const cellPos = this._domContainerElement.offset();\r\n\r\n        const componentOutput = this.angularUtilService.createAngularComponent(component);\r\n        const componentInstance = componentOutput && componentOutput.componentRef && componentOutput.componentRef.instance;\r\n\r\n        if (componentInstance) {\r\n          const myDropId = componentInstance.dropdownId || 'myDrop';\r\n          const dropDownToggleId = componentInstance.dropDownToggleId || 'dropdownMenu1';\r\n          this._domElement = $(`#${myDropId}`);\r\n\r\n          if (this._domElement) {\r\n            // make sure to remove any previous Action dropdown elements, to avoid having multiple element of the same on top of each other\r\n            this.dispose();\r\n\r\n            // assign the row data to the dropdown component instance\r\n            Object.assign(componentInstance, { parent, row: args.row, dataContext: args.grid.getDataItem(args.row) });\r\n\r\n            // use a delay to make sure Angular ran at least a full cycle and make sure it finished rendering the Component before using it\r\n            setTimeout(() => {\r\n              // create a new dropdown element\r\n              this._domElement = $(componentOutput.domElement);\r\n              const topPos = (cellPos && cellPos.top || 0) + 30 + (offsetTop || 0);\r\n              const leftPos = (cellPos && cellPos.left || 0) + (offsetLeft || 0);\r\n              this._domElement.appendTo('body');\r\n              this._domElement.css('position', 'absolute');\r\n              this._domElement.css('top', topPos);\r\n              this._domElement.css('left', leftPos);\r\n              $(`#${myDropId}`).addClass('open');\r\n              $(`#${dropDownToggleId}`).hide();\r\n\r\n              // check if it should drop Up or Down\r\n              const offset = 35;\r\n              const iElement = $('.dropdown-menu');\r\n              const iElementWrapper = iElement.parent();\r\n              const iElementWrapperOffset = iElementWrapper.offset() || {};\r\n              const iElementWrapperOffsetTop = iElementWrapperOffset.top || iElementWrapper && iElementWrapper.length > 0 && iElementWrapper[0].offsetTop;\r\n              const iElementHeight = iElement.height();\r\n              const windowHeight = window.innerHeight;\r\n              const shouldDropUp = (windowHeight - iElementHeight - offset) < iElementWrapperOffsetTop;\r\n              let menuMarginTop = '0px';\r\n              if (shouldDropUp) {\r\n                const offsetBottom = offsetDropupBottom || 0;\r\n                menuMarginTop = '-'.concat(`${iElementHeight + offset + offsetBottom + 5}`, 'px');\r\n              }\r\n              this._domElement.css({ 'margin-top': menuMarginTop });\r\n\r\n              // set dropdown margin left according to the document width\r\n              const parentOffset = iElementWrapperOffset.left;\r\n              const leftMargin = parentOffset - $(document).width();\r\n              this._domElement.css({ 'margin-left': (this._domElement.width() + leftMargin + 60) + 'px' });\r\n\r\n              try {\r\n                this._domElement.dropdown('show'); // required for Bootstrap 4 only\r\n              } catch (e) {\r\n                // Bootstrap 3 wil throw an error since that method doesn't exist, we can safely disregard it\r\n              }\r\n\r\n              this._domElement.on('hidden.bs.dropdown', () => this.dropContainerShow());\r\n\r\n              // hide dropdown menu on grid scroll\r\n              this.gridViewport.on('scroll', () => this.dispose());\r\n\r\n              // hide on dropdown click\r\n              this._domElement.on('click', () => this.dispose());\r\n              resolve(true);\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { flatten } from 'un-flatten-tree';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { first } from 'rxjs/operators';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nimport { FieldType, GridOption, OperatorString, OperatorType } from '../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\n/**\r\n * Add an item to an array only when the item does not exists, when the item is an object we will be using their \"id\" to compare\r\n * @param inputArray\r\n * @param inputItem\r\n * @param itemIdPropName\r\n */\r\nexport function addToArrayWhenNotExists<T = any>(inputArray: T[], inputItem: T, itemIdPropName = 'id') {\r\n  let arrayRowIndex = -1;\r\n  if (typeof inputItem === 'object' && itemIdPropName in inputItem) {\r\n    arrayRowIndex = inputArray.findIndex((item) => (item as any)[itemIdPropName] === (inputItem as any)[itemIdPropName]);\r\n  } else {\r\n    arrayRowIndex = inputArray.findIndex((item) => item === inputItem);\r\n  }\r\n\r\n  if (arrayRowIndex < 0) {\r\n    inputArray.push(inputItem);\r\n  }\r\n}\r\n\r\n/**\r\n * Simple function to which will loop and create as demanded the number of white spaces,\r\n * this is used in the CSV export\r\n * @param {Number} nbSpaces - number of white spaces to create\r\n * @param {String} spaceChar - optionally provide character to use as a space (could be override to use &nbsp; in html)\r\n */\r\nexport function addWhiteSpaces(nbSpaces: number, spaceChar = ' '): string {\r\n  let result = '';\r\n\r\n  for (let i = 0; i < nbSpaces; i++) {\r\n    result += spaceChar;\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Remove a column from the grid by it's index in the grid\r\n * @param array input\r\n * @param index\r\n */\r\nexport function arrayRemoveItemByIndex<T>(array: T[], index: number): T[] {\r\n  return array.filter((_el: T, i: number) => index !== i);\r\n}\r\n\r\n/**\r\n * Convert a flat array (with \"parentId\" references) into a hierarchical (tree) dataset structure (where children are array(s) inside their parent objects)\r\n * @param flatArray input array (flat dataset)\r\n * @param options you can provide the following options:: \"parentPropName\" (defaults to \"parent\"), \"childrenPropName\" (defaults to \"children\") and \"identifierPropName\" (defaults to \"id\")\r\n * @return roots - hierarchical (tree) data view array\r\n */\r\nexport function unflattenParentChildArrayToTree<P, T extends P & { [childrenPropName: string]: P[] }>(flatArray: P[], options?: { parentPropName?: string; childrenPropName?: string; identifierPropName?: string; levelPropName?: string; }): T[] {\r\n  const childrenPropName = options?.childrenPropName ?? 'children';\r\n  const parentPropName = options?.parentPropName ?? '__parentId';\r\n  const identifierPropName = options?.identifierPropName ?? 'id';\r\n  const levelPropName = options?.levelPropName ?? '__treeLevel';\r\n  const inputArray: P[] = flatArray || [];\r\n  const roots: T[] = []; // items without parent which at the root\r\n\r\n  // make them accessible by guid on this map\r\n  const all: any = {};\r\n\r\n  inputArray.forEach((item: any) => all[item[identifierPropName]] = item);\r\n\r\n  // connect childrens to its parent, and split roots apart\r\n  Object.keys(all).forEach((id) => {\r\n    const item = all[id];\r\n    if (!(parentPropName in item) || item[parentPropName] === null || item[parentPropName] === undefined || item[parentPropName] === '') {\r\n      // delete item[parentPropName];\r\n      roots.push(item);\r\n    } else if (item[parentPropName] in all) {\r\n      const p = all[item[parentPropName]];\r\n      if (!(childrenPropName in p)) {\r\n        p[childrenPropName] = [];\r\n      }\r\n      // delete item[parentPropName];\r\n      p[childrenPropName].push(item);\r\n    }\r\n  });\r\n\r\n  // we need and want to the Tree Level,\r\n  // we can do that after the tree is created and mutate the array by adding a __treeLevel property on each item\r\n  // perhaps there might be a way to add this while creating the tree for now that is the easiest way I found\r\n  addTreeLevelByMutation(roots, { childrenPropName, levelPropName }, 0);\r\n\r\n  return roots;\r\n}\r\n\r\n/**\r\n * Mutate the original array and add a treeLevel (defaults to `__treeLevel`) property on each item.\r\n * @param {Array<Object>} treeArray - hierarchical tree array\r\n * @param {Object} options - options containing info like children & treeLevel property names\r\n * @param {Number} [treeLevel] - current tree level\r\n */\r\nexport function addTreeLevelByMutation<T>(treeArray: T[], options: { childrenPropName: string; levelPropName: string; }, treeLevel = 0) {\r\n  const childrenPropName = (options?.childrenPropName ?? 'children') as keyof T;\r\n\r\n  if (Array.isArray(treeArray)) {\r\n    for (const item of treeArray) {\r\n      if (item) {\r\n        if (Array.isArray(item[childrenPropName]) && (item[childrenPropName] as unknown as Array<T>).length > 0) {\r\n          treeLevel++;\r\n          addTreeLevelByMutation(item[childrenPropName] as unknown as Array<T>, options, treeLevel);\r\n          treeLevel--;\r\n        }\r\n        (item as any)[options.levelPropName] = treeLevel;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Convert a hierarchical (tree) array (with children) into a flat array structure array (where the children are pushed as next indexed item in the array)\r\n * @param {Array<Object>} treeArray - input hierarchical (tree) array\r\n * @param {Object} options - you can provide \"childrenPropName\" (defaults to \"children\")\r\n * @return {Array<Object>} output - Parent/Child array\r\n */\r\nexport function flattenToParentChildArray<T>(treeArray: T[], options?: { parentPropName?: string; childrenPropName?: string; identifierPropName?: string; shouldAddTreeLevelNumber?: boolean; levelPropName?: string; }) {\r\n  const childrenPropName = (options?.childrenPropName ?? 'children') as keyof T & string;\r\n  const identifierPropName = (options?.identifierPropName ?? 'id') as keyof T & string;\r\n  const parentPropName = (options?.parentPropName ?? '__parentId') as keyof T & string;\r\n  const levelPropName = options?.levelPropName ?? '__treeLevel';\r\n  type FlatParentChildArray = Omit<T, keyof typeof childrenPropName>;\r\n\r\n  if (options?.shouldAddTreeLevelNumber) {\r\n    addTreeLevelByMutation(treeArray, { childrenPropName, levelPropName });\r\n  }\r\n\r\n  const flat = flatten(\r\n    treeArray,\r\n    (node: any) => node[childrenPropName],\r\n    (node: T, parentNode?: T) => {\r\n      return {\r\n        [identifierPropName]: node[identifierPropName],\r\n        [parentPropName]: parentNode !== undefined ? parentNode[identifierPropName] : null,\r\n        ...objectWithoutKey(node, childrenPropName as keyof T) // reuse the entire object except the children array property\r\n      } as unknown as FlatParentChildArray;\r\n    }\r\n  );\r\n\r\n  return flat;\r\n}\r\n\r\n/**\r\n * Create an immutable clone of an array or object\r\n * (c) 2019 Chris Ferdinandi, MIT License, https://gomakethings.com\r\n * @param  {Array|Object} objectOrArray - the array or object to copy\r\n * @return {Array|Object} - the clone of the array or object\r\n */\r\nexport function deepCopy(objectOrArray: any | any[]): any | any[] {\r\n  /**\r\n   * Create an immutable copy of an object\r\n   * @return {Object}\r\n   */\r\n  const cloneObj = () => {\r\n    // Create new object\r\n    const clone = {};\r\n\r\n    // Loop through each item in the original\r\n    // Recursively copy it's value and add to the clone\r\n    for (const key in objectOrArray) {\r\n      if (Object.prototype.hasOwnProperty.call(objectOrArray, key)) {\r\n        (clone as any)[key] = deepCopy(objectOrArray[key]);\r\n      }\r\n    }\r\n    return clone;\r\n  };\r\n\r\n  /**\r\n   * Create an immutable copy of an array\r\n   * @return {Array}\r\n   */\r\n  const cloneArr = () => objectOrArray.map((item: any) => deepCopy(item));\r\n\r\n  // -- init --//\r\n  // Get object type\r\n  const type = Object.prototype.toString.call(objectOrArray).slice(8, -1).toLowerCase();\r\n\r\n  // If an object\r\n  if (type === 'object') {\r\n    return cloneObj();\r\n  }\r\n  // If an array\r\n  if (type === 'array') {\r\n    return cloneArr();\r\n  }\r\n  // Otherwise, return it as-is\r\n  return objectOrArray;\r\n}\r\n\r\n/**\r\n * Empty a DOM element by removing all of its DOM element children leaving with an empty element (basically an empty shell)\r\n * @return {object} element - updated element\r\n */\r\nexport function emptyElement<T extends Element = Element>(element?: T | null): T | undefined | null {\r\n  if (element?.firstChild) {\r\n    while (element.firstChild) {\r\n      if (element.lastChild) {\r\n        element.removeChild(element.lastChild);\r\n      }\r\n    }\r\n  }\r\n  return element;\r\n}\r\n\r\n/**\r\n * @deprecated use `findItemInTreeStructure()` instead. Find an item from a hierarchical (tree) view structure (a parent that can have children array which themseleves can children and so on)\r\n * @param treeArray\r\n * @param predicate\r\n * @param childrenPropertyName\r\n */\r\nexport function findItemInHierarchicalStructure<T = any>(treeArray: T[], predicate: (item: T) => boolean, childrenPropertyName: string): T | undefined {\r\n  return findItemInTreeStructure(treeArray, predicate, childrenPropertyName);\r\n}\r\n\r\n/**\r\n * Find an item from a tree (hierarchical) view structure (a parent that can have children array which themseleves can children and so on)\r\n * @param treeArray\r\n * @param predicate\r\n * @param childrenPropertyName\r\n */\r\nexport function findItemInTreeStructure<T = any>(treeArray: T[], predicate: (item: T) => boolean, childrenPropertyName: string): T | undefined {\r\n  if (!childrenPropertyName) {\r\n    throw new Error('findRecursive requires parameter \"childrenPropertyName\"');\r\n  }\r\n  const initialFind = treeArray.find(predicate);\r\n  const elementsWithChildren = treeArray.filter((x: T) => childrenPropertyName in x && (x as any)[childrenPropertyName]);\r\n  if (initialFind) {\r\n    return initialFind;\r\n  } else if (elementsWithChildren.length) {\r\n    const childElements: T[] = [];\r\n    elementsWithChildren.forEach((item: T) => {\r\n      if (childrenPropertyName in item) {\r\n        childElements.push(...(item as any)[childrenPropertyName]);\r\n      }\r\n    });\r\n    return findItemInTreeStructure<T>(childElements, predicate, childrenPropertyName);\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * HTML decode using jQuery with a <div>\r\n * Create a in-memory div, set it's inner text(which jQuery automatically encodes)\r\n * then grab the encoded contents back out.  The div never exists on the page.\r\n*/\r\nexport function htmlDecode(encodedStr: string): string {\r\n  const parser = DOMParser && new DOMParser;\r\n  if (parser && parser.parseFromString) {\r\n    const dom = parser.parseFromString(\r\n      '<!doctype html><body>' + encodedStr,\r\n      'text/html');\r\n    return dom && dom.body && dom.body.textContent || '';\r\n  } else {\r\n    // for some browsers that might not support DOMParser, use jQuery instead\r\n    return $('<div/>').html(encodedStr).text();\r\n  }\r\n}\r\n\r\n/**\r\n * HTML encode using jQuery with a <div>\r\n * Create a in-memory div, set it's inner text(which jQuery automatically encodes)\r\n * then grab the encoded contents back out.  The div never exists on the page.\r\n*/\r\nexport function htmlEncode(inputValue: string): string {\r\n  const entityMap = {\r\n    '&': '&amp;',\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '\"': '&quot;',\r\n    '\\'': '&#39;'\r\n  };\r\n  // all symbols::  /[&<>\"'`=\\/]/g\r\n  return (inputValue || '').toString().replace(/[&<>\"']/g, (s) => (entityMap as any)[s]);\r\n}\r\n\r\n/**\r\n * Decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityDecode(input: string): string {\r\n  return input.replace(/&#(\\d+);/g, function (_match, dec) {\r\n    return String.fromCharCode(dec);\r\n  });\r\n}\r\n\r\n/**\r\n * Decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityEncode(input: any): string {\r\n  const buf = [];\r\n  for (let i = input.length - 1; i >= 0; i--) {\r\n    buf.unshift(['&#', input[i].charCodeAt(), ';'].join(''));\r\n  }\r\n  return buf.join('');\r\n}\r\n\r\n/**\r\n * Try casting an input of type Promise | Observable into a Promise type.\r\n * @param object which could be of type Promise or Observable\r\n * @param fromServiceName string representing the caller service name and will be used if we throw a casting problem error\r\n */\r\nexport function castToPromise<T>(input: Promise<T> | Observable<T>, fromServiceName: string = ''): Promise<T> {\r\n  let promise: any = input;\r\n\r\n  if (input instanceof Promise) {\r\n    // if it's already a Promise then return it\r\n    return input;\r\n  } else if (input instanceof Observable) {\r\n    promise = input.pipe(first()).toPromise();\r\n  }\r\n\r\n  if (!(promise instanceof Promise)) {\r\n    throw new Error(\r\n      `Something went wrong, Angular-Slickgrid ${fromServiceName} is not able to convert the Observable into a Promise.\r\n      If you are using Angular HttpClient, you could try converting your http call to a Promise with \".toPromise()\"\r\n      for example::  this.http.post('graphql', { query: graphqlQuery }).toPromise()\r\n      `);\r\n  }\r\n\r\n  return promise;\r\n}\r\n\r\n/**\r\n * Uses the logic function to find an item in an array or returns the default\r\n * value provided (empty object by default)\r\n * @param any[] array the array to filter\r\n * @param function logic the logic to find the item\r\n * @param any [defaultVal={}] the default value to return\r\n * @return object the found object or default value\r\n */\r\nexport function findOrDefault<T = any>(array: any[], logic: (item: any) => boolean, defaultVal = {}): any {\r\n  return array.find(logic) || defaultVal;\r\n}\r\n\r\n/**\r\n * Encode string to html special char and add html space padding defined\r\n * @param {string} inputStr - input string\r\n * @param {number} paddingLength - padding to add\r\n */\r\nexport function htmlEncodedStringWithPadding(inputStr: string, paddingLength: number): string {\r\n  const inputStrLn = inputStr.length;\r\n  let outputStr = htmlEncode(inputStr);\r\n\r\n  if (inputStrLn < paddingLength) {\r\n    for (let i = inputStrLn; i < paddingLength; i++) {\r\n      outputStr += `&nbsp;`;\r\n    }\r\n  }\r\n  return outputStr;\r\n}\r\n\r\n/**\r\n * Check if input value is a number, by default it won't be a strict checking\r\n * but optionally we could check for strict equality, for example in strict \"3\" will return False but without strict it will return True\r\n * @param value - input value of any type\r\n * @param strict - when using strict it also check for strict equality, for example in strict \"3\" will return but without strict it will return true\r\n */\r\nexport function isNumber(value: any, strict = false) {\r\n  if (strict) {\r\n    return (value === null || value === undefined || typeof value === 'string') ? false : !isNaN(value);\r\n  }\r\n  return (value === null || value === undefined || value === '') ? false : !isNaN(+value);\r\n}\r\n\r\n/**\r\n  * Take a number (or a string) and display it as a formatted decimal string with defined minimum and maximum decimals\r\n  * @param input\r\n  * @param minDecimal\r\n  * @param maxDecimal\r\n  */\r\nexport function decimalFormatted(input: number | string, minDecimal?: number, maxDecimal?: number, decimalSeparator: '.' | ',' = '.', thousandSeparator: ',' | '_' | '.' | ' ' | '' = ''): string {\r\n  if (isNaN(+input)) {\r\n    return input as string;\r\n  }\r\n\r\n  const minDec = (minDecimal === undefined) ? 2 : minDecimal;\r\n  const maxDec = (maxDecimal === undefined) ? 2 : maxDecimal;\r\n  let amount = String(Math.round(+input * Math.pow(10, maxDec)) / Math.pow(10, maxDec));\r\n\r\n  if ((amount.indexOf('.') < 0) && (minDec > 0)) {\r\n    amount += '.';\r\n  }\r\n  while ((amount.length - amount.indexOf('.')) <= minDec) {\r\n    amount += '0';\r\n  }\r\n\r\n  const decimalSplit = amount.split('.');\r\n  let integerNumber;\r\n  let decimalNumber;\r\n\r\n  // do we want to display our number with a custom separator in each thousand position\r\n  if (thousandSeparator) {\r\n    integerNumber = decimalSplit.length >= 1 ? thousandSeparatorFormatted(decimalSplit[0], thousandSeparator) : undefined;\r\n  } else {\r\n    integerNumber = decimalSplit.length >= 1 ? decimalSplit[0] : amount;\r\n  }\r\n\r\n  // when using a separator that is not a dot, replace it with the new separator\r\n  if (decimalSplit.length > 1) {\r\n    decimalNumber = decimalSplit[1];\r\n  }\r\n\r\n  let output = '';\r\n  if (integerNumber !== undefined && decimalNumber !== undefined) {\r\n    output = `${integerNumber}${decimalSeparator}${decimalNumber}`;\r\n  } else if (integerNumber !== undefined && integerNumber !== null) {\r\n    output = integerNumber;\r\n  }\r\n  return output;\r\n}\r\n\r\n/**\r\n * Loop through all properties of an object and nullify any properties that are instanceof HTMLElement,\r\n * if we detect an array then use recursion to go inside it and apply same logic\r\n * @param obj - object containing 1 or more properties with DOM Elements\r\n */\r\nexport function destroyObjectDomElementProps(obj: any) {\r\n  if (obj) {\r\n    for (const key of Object.keys(obj)) {\r\n      if (Array.isArray(obj[key])) {\r\n        destroyObjectDomElementProps(obj[key]);\r\n      }\r\n      if (obj[key] instanceof HTMLElement) {\r\n        obj[key] = null;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Format a number following options passed as arguments (decimals, separator, ...)\r\n * @param input\r\n * @param minDecimal\r\n * @param maxDecimal\r\n * @param displayNegativeNumberWithParentheses\r\n * @param symbolPrefix\r\n * @param symbolSuffix\r\n * @param decimalSeparator\r\n * @param thousandSeparator\r\n */\r\nexport function formatNumber(input: number | string, minDecimal?: number, maxDecimal?: number, displayNegativeNumberWithParentheses?: boolean, symbolPrefix = '', symbolSuffix = '', decimalSeparator: '.' | ',' = '.', thousandSeparator: ',' | '_' | '.' | ' ' | '' = ''): string {\r\n  if (isNaN(+input)) {\r\n    return input as string;\r\n  }\r\n\r\n  const calculatedValue = ((Math.round(parseFloat(input as string) * 1000000) / 1000000));\r\n\r\n  if (calculatedValue < 0) {\r\n    const absValue = Math.abs(calculatedValue);\r\n    if (displayNegativeNumberWithParentheses) {\r\n      if (!isNaN(minDecimal as number) || !isNaN(maxDecimal as number)) {\r\n        return `(${symbolPrefix}${decimalFormatted(absValue, minDecimal, maxDecimal, decimalSeparator, thousandSeparator)}${symbolSuffix})`;\r\n      }\r\n      const formattedValue = thousandSeparatorFormatted(`${absValue}`, thousandSeparator);\r\n      return `(${symbolPrefix}${formattedValue}${symbolSuffix})`;\r\n    } else {\r\n      if (!isNaN(minDecimal as number) || !isNaN(maxDecimal as number)) {\r\n        return `-${symbolPrefix}${decimalFormatted(absValue, minDecimal, maxDecimal, decimalSeparator, thousandSeparator)}${symbolSuffix}`;\r\n      }\r\n      const formattedValue = thousandSeparatorFormatted(`${absValue}`, thousandSeparator);\r\n      return `-${symbolPrefix}${formattedValue}${symbolSuffix}`;\r\n    }\r\n  } else {\r\n    if (!isNaN(minDecimal as number) || !isNaN(maxDecimal as number)) {\r\n      return `${symbolPrefix}${decimalFormatted(input, minDecimal, maxDecimal, decimalSeparator, thousandSeparator)}${symbolSuffix}`;\r\n    }\r\n    const formattedValue = thousandSeparatorFormatted(`${input}`, thousandSeparator);\r\n    return `${symbolPrefix}${formattedValue}${symbolSuffix}`;\r\n  }\r\n}\r\n\r\n/** From a dot (.) notation path, find and return a property within an object given a path */\r\nexport function getDescendantProperty<T = any>(obj: T, path: string): T {\r\n  return path.split('.').reduce((acc: T, part: string) => acc && (acc as any)[part], obj);\r\n}\r\n\r\n/** Get HTML Element position offset (without jQuery) */\r\nexport function getHtmlElementOffset(element: HTMLElement): { top: number; left: number; } {\r\n  const rect = element.getBoundingClientRect();\r\n  let top = 0;\r\n  let left = 0;\r\n\r\n  if (rect && rect.top !== undefined && rect.left !== undefined) {\r\n    top = rect.top + window.pageYOffset;\r\n    left = rect.left + window.pageXOffset;\r\n  }\r\n  return { top, left };\r\n}\r\n\r\n/** Get Translation Prefix, defaults to an empty string */\r\nexport function getTranslationPrefix(gridOptions?: GridOption): string {\r\n  if (gridOptions && gridOptions.translationNamespace) {\r\n    return gridOptions.translationNamespace + (gridOptions.translationNamespaceSeparator || '');\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent moment.js format\r\n * refer to moment.js for the format standard used: https://momentjs.com/docs/#/parsing/string-format/\r\n * @param fieldType\r\n */\r\nexport function mapMomentDateFormatWithFieldType(fieldType: FieldType): string {\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'YYYY-MM-DD HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeShortIso:\r\n      map = 'YYYY-MM-DD HH:mm';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'YYYY-MM-DD hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'YYYY-MM-DD hh:mm:ss A';\r\n      break;\r\n    // all Euro Formats (date/month/year)\r\n    case FieldType.dateEuro:\r\n      map = 'DD/MM/YYYY';\r\n      break;\r\n    case FieldType.dateEuroShort:\r\n      map = 'D/M/YY';\r\n      break;\r\n    case FieldType.dateTimeEuro:\r\n      map = 'DD/MM/YYYY HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeShortEuro:\r\n      map = 'DD/MM/YYYY HH:mm';\r\n      break;\r\n    case FieldType.dateTimeEuroAmPm:\r\n      map = 'DD/MM/YYYY hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeEuroAM_PM:\r\n      map = 'DD/MM/YYYY hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateTimeEuroShort:\r\n      map = 'D/M/YY H:m:s';\r\n      break;\r\n    case FieldType.dateTimeEuroShortAmPm:\r\n      map = 'D/M/YY h:m:s a';\r\n      break;\r\n    // all US Formats (month/date/year)\r\n    case FieldType.dateUs:\r\n      map = 'MM/DD/YYYY';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'M/D/YY';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'MM/DD/YYYY HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeShortUs:\r\n      map = 'MM/DD/YYYY HH:mm';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'MM/DD/YYYY hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'MM/DD/YYYY hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'M/D/YY H:m:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'M/D/YY h:m:s a';\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'YYYY-MM-DD';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent Flatpickr format\r\n * refer to Flatpickr for the format standard used: https://chmln.github.io/flatpickr/formatting/#date-formatting-tokens\r\n * also note that they seem very similar to PHP format (except for am/pm): http://php.net/manual/en/function.date.php\r\n * @param fieldType\r\n */\r\nexport function mapFlatpickrDateFormatWithFieldType(fieldType: FieldType): string {\r\n  /*\r\n    d: Day of the month, 2 digits with leading zeros\t01 to 31\r\n    D: A textual representation of a day\tMon through Sun\r\n    l: (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday\r\n    j: Day of the month without leading zeros\t1 to 31\r\n    J: Day of the month without leading zeros and ordinal suffix\t1st, 2nd, to 31st\r\n    w: Numeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday)\r\n    F: A full textual representation of a month\tJanuary through December\r\n    m: Numeric representation of a month, with leading zero\t01 through 12\r\n    n: Numeric representation of a month, without leading zeros\t1 through 12\r\n    M: A short textual representation of a month\tJan through Dec\r\n    U: The number of seconds since the Unix Epoch\t1413704993\r\n    y: A two digit representation of a year\t99 or 03\r\n    Y: A full numeric representation of a year, 4 digits\t1999 or 2003\r\n    H: Hours (24 hours)\t00 to 23\r\n    h: Hours\t1 to 12\r\n    i: Minutes\t00 to 59\r\n    S: Seconds, 2 digits\t00 to 59\r\n    s: Seconds\t0, 1 to 59\r\n    K: AM/PM\tAM or PM\r\n  */\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'Y-m-d H:i:S';\r\n      break;\r\n    case FieldType.dateTimeShortIso:\r\n      map = 'Y-m-d H:i';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'Y-m-d h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    // all Euro Formats (date/month/year)\r\n    case FieldType.dateEuro:\r\n      map = 'd/m/Y';\r\n      break;\r\n    case FieldType.dateEuroShort:\r\n      map = 'd/m/y';\r\n      break;\r\n    case FieldType.dateTimeEuro:\r\n      map = 'd/m/Y H:i:S';\r\n      break;\r\n    case FieldType.dateTimeShortEuro:\r\n      map = 'd/m/y H:i';\r\n      break;\r\n    case FieldType.dateTimeEuroAmPm:\r\n      map = 'd/m/Y h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeEuroAM_PM:\r\n      map = 'd/m/Y h:i:s K';\r\n      break;\r\n    case FieldType.dateTimeEuroShort:\r\n      map = 'd/m/y H:i:s';\r\n      break;\r\n    case FieldType.dateTimeEuroShortAmPm:\r\n      map = 'd/m/y h:i:s K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    // all US Formats (month/date/year)\r\n    case FieldType.dateUs:\r\n      map = 'm/d/Y';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'm/d/y';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'm/d/Y H:i:S';\r\n      break;\r\n    case FieldType.dateTimeShortUs:\r\n      map = 'm/d/y H:i';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'm/d/Y h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'm/d/Y h:i:s K';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'm/d/y H:i:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'm/d/y h:i:s K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'Z';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'Y-m-d';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operators (ex.: <= is \"le\", > is \"gt\")\r\n * @param string operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorType(operator: OperatorType | OperatorString): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (operator) {\r\n    case '<':\r\n    case 'LT':\r\n      map = OperatorType.lessThan;\r\n      break;\r\n    case '<=':\r\n    case 'LE':\r\n      map = OperatorType.lessThanOrEqual;\r\n      break;\r\n    case '>':\r\n    case 'GT':\r\n      map = OperatorType.greaterThan;\r\n      break;\r\n    case '>=':\r\n    case 'GE':\r\n      map = OperatorType.greaterThanOrEqual;\r\n      break;\r\n    case '<>':\r\n    case '!=':\r\n    case 'NE':\r\n      map = OperatorType.notEqual;\r\n      break;\r\n    case '*':\r\n    case 'a*':\r\n    case 'StartsWith':\r\n      map = OperatorType.startsWith;\r\n      break;\r\n    case '*z':\r\n    case 'EndsWith':\r\n      map = OperatorType.endsWith;\r\n      break;\r\n    case '=':\r\n    case '==':\r\n    case 'EQ':\r\n      map = OperatorType.equal;\r\n      break;\r\n    case 'IN':\r\n      map = OperatorType.in;\r\n      break;\r\n    case 'NIN':\r\n    case 'NOT_IN':\r\n      map = OperatorType.notIn;\r\n      break;\r\n    case 'Not_Contains':\r\n    case 'NOT_CONTAINS':\r\n      map = OperatorType.notContains;\r\n      break;\r\n    case 'Contains':\r\n    case 'CONTAINS':\r\n    default:\r\n      map = OperatorType.contains;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Find equivalent short designation of an Operator Type or Operator String.\r\n * When using a Compound Filter, we use the short designation and so we need the mapped value.\r\n * For example OperatorType.startsWith short designation is \"a*\", while OperatorType.greaterThanOrEqual is \">=\"\r\n */\r\nexport function mapOperatorToShorthandDesignation(operator: OperatorType | OperatorString): OperatorString {\r\n  let shortOperator: OperatorString = '';\r\n\r\n  switch (operator) {\r\n    case OperatorType.greaterThan:\r\n    case '>':\r\n      shortOperator = '>';\r\n      break;\r\n    case OperatorType.greaterThanOrEqual:\r\n    case '>=':\r\n      shortOperator = '>=';\r\n      break;\r\n    case OperatorType.lessThan:\r\n    case '<':\r\n      shortOperator = '<';\r\n      break;\r\n    case OperatorType.lessThanOrEqual:\r\n    case '<=':\r\n      shortOperator = '<=';\r\n      break;\r\n    case OperatorType.notEqual:\r\n    case '<>':\r\n      shortOperator = '<>';\r\n      break;\r\n    case OperatorType.equal:\r\n    case '=':\r\n    case '==':\r\n    case 'EQ':\r\n      shortOperator = '=';\r\n      break;\r\n    case OperatorType.startsWith:\r\n    case 'a*':\r\n    case '*':\r\n      shortOperator = 'a*';\r\n      break;\r\n    case OperatorType.endsWith:\r\n    case '*z':\r\n      shortOperator = '*z';\r\n      break;\r\n    default:\r\n      // any other operator will be considered as already a short expression, so we can return same input operator\r\n      shortOperator = operator;\r\n      break;\r\n  }\r\n\r\n  return shortOperator;\r\n}\r\n\r\n/**\r\n * Mapper for query operator by a Filter Type\r\n * For example a multiple-select typically uses 'IN' operator\r\n * @param operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorByFieldType(fieldType: FieldType | string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.unknown:\r\n    case FieldType.string:\r\n    case FieldType.text:\r\n    case FieldType.password:\r\n    case FieldType.readonly:\r\n      map = OperatorType.contains;\r\n      break;\r\n    case FieldType.float:\r\n    case FieldType.number:\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    case FieldType.dateUtc:\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n    case FieldType.dateTimeIsoAmPm:\r\n    case FieldType.dateTimeIsoAM_PM:\r\n    case FieldType.dateEuro:\r\n    case FieldType.dateEuroShort:\r\n    case FieldType.dateTimeEuro:\r\n    case FieldType.dateTimeEuroAmPm:\r\n    case FieldType.dateTimeEuroAM_PM:\r\n    case FieldType.dateTimeEuroShort:\r\n    case FieldType.dateTimeEuroShortAmPm:\r\n    case FieldType.dateTimeEuroShortAM_PM:\r\n    case FieldType.dateUs:\r\n    case FieldType.dateUsShort:\r\n    case FieldType.dateTimeUs:\r\n    case FieldType.dateTimeUsAmPm:\r\n    case FieldType.dateTimeUsAM_PM:\r\n    case FieldType.dateTimeUsShort:\r\n    case FieldType.dateTimeUsShortAmPm:\r\n    case FieldType.dateTimeUsShortAM_PM:\r\n    default:\r\n      map = OperatorType.equal;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Takes an object and allow to provide a property key to omit from the original object\r\n * @param {Object} obj - input object\r\n * @param {String} omitKey - object property key to omit\r\n * @returns {String} original object without the property that user wants to omit\r\n */\r\nexport function objectWithoutKey<T = any>(obj: T, omitKey: keyof T): T {\r\n  return Object.keys(obj).reduce((result, objKey) => {\r\n    if (objKey !== omitKey) {\r\n      (result as T)[objKey as keyof T] = obj[objKey as keyof T];\r\n    }\r\n    return result;\r\n  }, {}) as unknown as T;\r\n}\r\n\r\n/** Parse any input (bool, number, string) and return a boolean or False when not possible */\r\nexport function parseBoolean(input: any): boolean {\r\n  return /(true|1)/i.test(input + '');\r\n}\r\n\r\n/**\r\n * Parse a date passed as a string (Date only, without time) and return a Date object (if valid)\r\n * @param inputDateString\r\n * @returns string date formatted\r\n */\r\nexport function parseUtcDate(inputDateString: string, useUtc?: boolean): string | null {\r\n  let date = null;\r\n\r\n  if (/^[0-9\\-\\/]*$/.test(inputDateString)) {\r\n    // get the UTC datetime with moment.js but we need to decode the value so that it's valid text\r\n    const dateString = decodeURIComponent(inputDateString);\r\n    const dateMoment = moment(new Date(dateString));\r\n    if (dateMoment.isValid() && dateMoment.year().toString().length === 4) {\r\n      date = (useUtc) ? dateMoment.utc().format() : dateMoment.format();\r\n    }\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\n/**\r\n * Sanitize, return only the text without HTML tags\r\n * @input htmlString\r\n * @return text\r\n */\r\nexport function sanitizeHtmlToText(htmlString: string) {\r\n  const temp = document.createElement('div');\r\n  temp.innerHTML = htmlString;\r\n  return temp.textContent || temp.innerText || '';\r\n}\r\n\r\n/** Set the object value of deeper node from a given dot (.) notation path (e.g.: \"user.firstName\") */\r\nexport function setDeepValue<T = any>(obj: T, path: string | string[], value: any) {\r\n  if (typeof path === 'string') {\r\n    path = path.split('.');\r\n  }\r\n\r\n  if (path.length > 1) {\r\n    const e = path.shift();\r\n    if (obj && e !== undefined) {\r\n      setDeepValue(\r\n        (obj as any)[e] = Object.prototype.toString.call((obj as any)[e]) === '[object Object]' ? (obj as any)[e] : {},\r\n        path,\r\n        value\r\n      );\r\n    }\r\n  } else if (obj && path[0]) {\r\n    (obj as any)[(path as any)[0]] = value;\r\n  }\r\n}\r\n\r\n/**\r\n * Format a number or a string into a string that is separated every thousand,\r\n * the default separator is a comma but user can optionally pass a different one\r\n * @param inputValue\r\n * @param separator default to comma \",\"\r\n * @returns string\r\n */\r\nexport function thousandSeparatorFormatted(inputValue: string | number | null, separator: ',' | '_' | '.' | ' ' | '' = ','): string | null {\r\n  if (inputValue !== null && inputValue !== undefined) {\r\n    const stringValue = `${inputValue}`;\r\n    const decimalSplit = stringValue.split('.');\r\n    if (decimalSplit.length === 2) {\r\n      return `${decimalSplit[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, separator)}.${decimalSplit[1]}`;\r\n    }\r\n    return stringValue.replace(/\\B(?=(\\d{3})+(?!\\d))/g, separator);\r\n  }\r\n  return inputValue as null;\r\n}\r\n\r\n/**\r\n * Title case (or capitalize) first char of a string, for example \"hello world\" will become \"Hello world\"\r\n * Change the string to be title case on the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param inputStr\r\n * @returns string\r\n */\r\nexport function titleCase(inputStr: string, caseEveryWords = false): string {\r\n  if (typeof inputStr === 'string') {\r\n    if (caseEveryWords) {\r\n      return inputStr.replace(/\\w\\S*/g, (outputStr) => {\r\n        return outputStr.charAt(0).toUpperCase() + outputStr.substr(1).toLowerCase();\r\n      });\r\n    }\r\n    return inputStr.charAt(0).toUpperCase() + inputStr.slice(1);\r\n  }\r\n  return inputStr;\r\n}\r\n\r\n/**\r\n * Converts a string to camel case (camelCase), for example \"hello-world\" (or \"hellow world\") will become \"helloWorld\"\r\n * @param inputStr the string to convert\r\n * @return the string in camel case\r\n */\r\nexport function toCamelCase(inputStr: string): string {\r\n  if (typeof inputStr === 'string') {\r\n    return inputStr.replace(/(?:^\\w|[A-Z]|\\b\\w|[\\s+\\-_\\/])/g, (match: string, offset: number) => {\r\n      // remove white space or hypens or underscores\r\n      if (/[\\s+\\-_\\/]/.test(match)) {\r\n        return '';\r\n      }\r\n\r\n      return offset === 0 ? match.toLowerCase() : match.toUpperCase();\r\n    });\r\n  }\r\n  return inputStr;\r\n}\r\n\r\n/**\r\n * Converts a string to kebab (hypen) case, for example \"helloWorld\" will become \"hello-world\"\r\n * @param str the string to convert\r\n * @return the string in kebab case\r\n */\r\nexport function toKebabCase(inputStr: string): string {\r\n  if (typeof inputStr === 'string') {\r\n    return toCamelCase(inputStr).replace(/([A-Z])/g, '-$1').toLowerCase();\r\n  }\r\n  return inputStr;\r\n}\r\n\r\n/**\r\n * Converts a string from camelCase to snake_case (underscore) case, for example \"helloWorld\" will become \"hello_world\"\r\n * @param str the string to convert\r\n * @return the string in kebab case\r\n */\r\nexport function toSnakeCase(inputStr: string): string {\r\n  if (typeof inputStr === 'string') {\r\n    return toCamelCase(inputStr).replace(/([A-Z])/g, '_$1').toLowerCase();\r\n  }\r\n  return inputStr;\r\n}\r\n\r\n/**\r\n * Takes an input array and makes sure the array has unique values by removing duplicates\r\n * @param array input with possible duplicates\r\n * @param objectProperty optionally provide an object property to compare (example: 'id')\r\n * @return array output without duplicates\r\n */\r\nexport function uniqueArray<T = any>(arr: T[]): T[] {\r\n  if (Array.isArray(arr) && arr.length > 0) {\r\n    return arr.filter((item: T, index: number) => {\r\n      return arr.indexOf(item) >= index;\r\n    });\r\n  }\r\n  return arr;\r\n}\r\n\r\n/**\r\n * Takes an input array of objects and makes sure the array has unique object values by removing duplicates\r\n * it will loop through the array using a property name (or \"id\" when is not provided) to compare uniqueness\r\n * @param array input with possible duplicates\r\n * @param propertyName defaults to \"id\"\r\n * @return array output without duplicates\r\n */\r\nexport function uniqueObjectArray(arr: any[], propertyName = 'id'): any[] {\r\n  if (Array.isArray(arr) && arr.length > 0) {\r\n    const result = [];\r\n    const map = new Map();\r\n\r\n    for (const item of arr) {\r\n      if (!map.has(item[propertyName])) {\r\n        map.set(item[propertyName], true);    // set any value to Map\r\n        result.push({\r\n          id: item[propertyName],\r\n          name: item.name\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  return arr;\r\n}\r\n\r\n/**\r\n * Unsubscribe all Observables Subscriptions\r\n * It will return an empty array if it all went well\r\n * @param subscriptions\r\n */\r\nexport function unsubscribeAllObservables(subscriptions: Subscription[]): Subscription[] {\r\n  if (Array.isArray(subscriptions)) {\r\n    subscriptions.forEach((subscription: Subscription) => {\r\n      if (subscription && subscription.unsubscribe) {\r\n        subscription.unsubscribe();\r\n      }\r\n    });\r\n    subscriptions = [];\r\n  }\r\n\r\n  return subscriptions;\r\n}\r\n","import { mapMomentDateFormatWithFieldType } from '../services/utilities';\r\nimport { Column, FieldType, GridOption, Sorter } from '../models/index';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport function compareDates(value1: any, value2: any, sortDirection: number, sortColumn: Column, gridOptions: GridOption, format: string | moment_.MomentBuiltinFormat, strict?: boolean) {\r\n  let diff = 0;\r\n  const checkForUndefinedValues = sortColumn && sortColumn.valueCouldBeUndefined || gridOptions && gridOptions.cellValueCouldBeUndefined || false;\r\n  const date1 = moment(value1, format, strict);\r\n  const date2 = moment(value2, format, strict);\r\n\r\n  if (value1 === null || value1 === '' || (checkForUndefinedValues && value1 === undefined) || !date1.isValid()) {\r\n    diff = -1;\r\n  } else if (value2 === null || value2 === '' || (checkForUndefinedValues && value2 === undefined) || !date2.isValid()) {\r\n    diff = 1;\r\n  } else {\r\n    diff = date1.valueOf() < date2.valueOf() ? -1 : 1;\r\n  }\r\n\r\n  return sortDirection * diff;\r\n}\r\n\r\n/** From a FieldType, return the associated date Sorter */\r\nexport function getAssociatedDateSorter(fieldType: FieldType): any {\r\n  const FORMAT = (fieldType === FieldType.date) ? moment.ISO_8601 : mapMomentDateFormatWithFieldType(fieldType);\r\n\r\n  return (value1: any, value2: any, sortDirection: number, sortColumn: Column, gridOptions: GridOption) => {\r\n    if (FORMAT === moment.ISO_8601) {\r\n      return compareDates(value1, value2, sortDirection, sortColumn, gridOptions, FORMAT, false) as number;\r\n    }\r\n    return compareDates(value1, value2, sortDirection, sortColumn, gridOptions, FORMAT, true) as number;\r\n  };\r\n}\r\n","import { numericSorter } from './numericSorter';\r\nimport { objectStringSorter } from './objectStringSorter';\r\nimport { stringSorter } from './stringSorter';\r\nimport { getAssociatedDateSorter } from './dateUtilities';\r\nimport { FieldType } from '../models/index';\r\n\r\nexport const Sorters = {\r\n  /** Sorter method to sort values by Date object type (uses Moment.js ISO_8601 standard format, optionally include time) */\r\n  date: getAssociatedDateSorter(FieldType.date),\r\n\r\n  /**\r\n   * Sorter method to sort values by Date formatted as ISO date (excluding time),\r\n   * If you wish to optionally include time simply use the \"Sorters.date\" which work with/without time\r\n   */\r\n  dateIso: getAssociatedDateSorter(FieldType.dateIso),\r\n\r\n  /** Sorter method to sort values by Date formatted as (YYYY-MM-DDTHH:mm:ss.SSSZ) */\r\n  dateUtc: getAssociatedDateSorter(FieldType.dateUtc),\r\n\r\n  /** Sorter method to sort values by Date and Time (native Date object) */\r\n  dateTime: getAssociatedDateSorter(FieldType.dateTime),\r\n\r\n  /** Sorter method to sort values by Date formatted as (YYYY-MM-DD HH:mm:ss) */\r\n  dateTimeIso: getAssociatedDateSorter(FieldType.dateTimeIso),\r\n\r\n  /** Sorter method to sort values by Date formatted as (YYYY-MM-DD h:mm:ss a) */\r\n  dateTimeIsoAmPm: getAssociatedDateSorter(FieldType.dateTimeIsoAmPm),\r\n\r\n  /** Sorter method to sort values by Date formatted as (YYYY-MM-DD h:mm:ss A) */\r\n  dateTimeIsoAM_PM: getAssociatedDateSorter(FieldType.dateTimeIsoAM_PM),\r\n\r\n  /** Sorter method to sort values by Date formatted as (YYYY-MM-DD HH:mm) */\r\n  dateTimeShortIso: getAssociatedDateSorter(FieldType.dateTimeShortIso),\r\n\r\n  /** Sorter method to sort values by Date formatted as Euro date (DD/MM/YYYY) */\r\n  dateEuro: getAssociatedDateSorter(FieldType.dateEuro),\r\n\r\n  /** Sorter method to sort values by Date formatted as Euro short date (D/M/YY) */\r\n  dateEuroShort: getAssociatedDateSorter(FieldType.dateEuroShort),\r\n\r\n  /** Sorter method to sort values by Date formatted as (DD/MM/YYYY HH:mm) */\r\n  dateTimeShortEuro: getAssociatedDateSorter(FieldType.dateTimeShortEuro),\r\n\r\n  /** Sorter method to sort values by Date formatted as (DD/MM/YYYY HH:mm:ss) */\r\n  dateTimeEuro: getAssociatedDateSorter(FieldType.dateTimeEuro),\r\n\r\n  /** Sorter method to sort values by Date formatted as (DD/MM/YYYY hh:mm:ss a) */\r\n  dateTimeEuroAmPm: getAssociatedDateSorter(FieldType.dateTimeEuroAmPm),\r\n\r\n  /** Sorter method to sort values by Date formatted as (DD/MM/YYYY hh:mm:ss A) */\r\n  dateTimeEuroAM_PM: getAssociatedDateSorter(FieldType.dateTimeEuroAM_PM),\r\n\r\n  /** Sorter method to sort values by Date formatted as (D/M/YY H:m:s) */\r\n  dateTimeEuroShort: getAssociatedDateSorter(FieldType.dateTimeEuroShort),\r\n\r\n  /** Sorter method to sort values by Date formatted as (D/M/YY h:m:s a) */\r\n  dateTimeEuroShortAmPm: getAssociatedDateSorter(FieldType.dateTimeEuroShortAmPm),\r\n\r\n  /** Sorter method to sort values by Date formatted as (D/M/YY h:m:s A) */\r\n  dateTimeEuroShortAM_PM: getAssociatedDateSorter(FieldType.dateTimeEuroShortAM_PM),\r\n\r\n  /** Sorter method to sort values by Date formatted as US date (MM/DD/YYYY) */\r\n  dateUs: getAssociatedDateSorter(FieldType.dateUs),\r\n\r\n  /** Sorter method to sort values by Date formatted as US short date (M/D/YY) */\r\n  dateUsShort: getAssociatedDateSorter(FieldType.dateUsShort),\r\n\r\n  /** Sorter method to sort values by Date formatted as (MM/DD/YYYY HH:mm) */\r\n  dateTimeShortUs: getAssociatedDateSorter(FieldType.dateTimeShortUs),\r\n\r\n  /** Sorter method to sort values by Date formatted as (MM/DD/YYYY HH:mm:s) */\r\n  dateTimeUs: getAssociatedDateSorter(FieldType.dateTimeUs),\r\n\r\n  /** Sorter method to sort values by Date formatted as (MM/DD/YYYY hh:mm:ss a) */\r\n  dateTimeUsAmPm: getAssociatedDateSorter(FieldType.dateTimeUsAmPm),\r\n\r\n  /** Sorter method to sort values by Date formatted as (MM/DD/YYYY hh:mm:ss A) */\r\n  dateTimeUsAM_PM: getAssociatedDateSorter(FieldType.dateTimeUsAM_PM),\r\n\r\n  /** Sorter method to sort values by Date formatted as (M/D/YY H:m:s) */\r\n  dateTimeUsShort: getAssociatedDateSorter(FieldType.dateTimeUsShort),\r\n\r\n  /** Sorter method to sort values by Date formatted as (M/D/YY h:m:s a) */\r\n  dateTimeUsShortAmPm: getAssociatedDateSorter(FieldType.dateTimeUsShortAmPm),\r\n\r\n  /** Sorter method to sort values by Date formatted as (M/D/YY h:m:s A) */\r\n  dateTimeUsShortAM_PM: getAssociatedDateSorter(FieldType.dateTimeUsShortAM_PM),\r\n\r\n  /** Sorter method to sort values as numeric fields */\r\n  numeric: numericSorter,\r\n\r\n  /**\r\n   * Sorter method to sort object values with a \"dataKey\" provided in your column definition, it's data content must be of type string\r\n   * Example:\r\n   * columnDef = { id='user', field: 'user', ..., dataKey: 'firstName', sorter: Sorters.objectString }\r\n   * collection = [{ firstName: 'John', lastName: 'Doe' }, { firstName: 'Bob', lastName: 'Cash' }]\r\n   */\r\n  objectString: objectStringSorter,\r\n\r\n  /** Sorter method to sort values as regular strings */\r\n  string: stringSorter\r\n};\r\n","import { Column, GridOption, Sorter } from './../models/index';\r\n\r\nexport const numericSorter: Sorter = (value1: any, value2: any, sortDirection: number, sortColumn?: Column, gridOptions?: GridOption) => {\r\n  const checkForUndefinedValues = sortColumn && sortColumn.valueCouldBeUndefined || gridOptions && gridOptions.cellValueCouldBeUndefined || false;\r\n  const x = (isNaN(value1) || value1 === '' || value1 === null || (checkForUndefinedValues && value1 === undefined)) ? -99e+10 : parseFloat(value1);\r\n  const y = (isNaN(value2) || value2 === '' || value2 === null || (checkForUndefinedValues && value2 === undefined)) ? -99e+10 : parseFloat(value2);\r\n  return sortDirection * (x === y ? 0 : (x > y ? 1 : -1));\r\n};\r\n","import { Column, GridOption, Sorter, SortDirectionNumber } from './../models/index';\r\n\r\nexport const objectStringSorter: Sorter = (value1: any, value2: any, sortDirection: number | SortDirectionNumber, sortColumn?: Column, gridOptions?: GridOption) => {\r\n  if (!sortColumn || !sortColumn.dataKey) {\r\n    throw new Error('Sorting a \"FieldType.object\" requires you to provide the \"dataKey\" (object property name) of the object so that we can use it to sort correctly');\r\n  }\r\n\r\n  const stringValue1 = (value1 && value1.hasOwnProperty(sortColumn.dataKey)) ? value1[sortColumn.dataKey] : value1;\r\n  const stringValue2 = (value2 && value2.hasOwnProperty(sortColumn.dataKey)) ? value2[sortColumn.dataKey] : value2;\r\n  const checkForUndefinedValues = sortColumn && sortColumn.valueCouldBeUndefined || gridOptions && gridOptions.cellValueCouldBeUndefined || false;\r\n\r\n  if (sortDirection === undefined || sortDirection === null) {\r\n    sortDirection = SortDirectionNumber.neutral;\r\n  }\r\n\r\n  let position = 0;\r\n  if (typeof value1 !== 'object') {\r\n    position = -99e+10;\r\n  } else if (typeof value2 !== 'object') {\r\n    position = 99e+10;\r\n  } else if (stringValue1 === null || (checkForUndefinedValues && stringValue1 === undefined)) {\r\n    position = -1;\r\n  } else if (stringValue2 === null || (checkForUndefinedValues && stringValue2 === undefined)) {\r\n    position = 1;\r\n  } else if (stringValue1 === stringValue2) {\r\n    position = 0;\r\n  } else if (sortDirection) {\r\n    position = stringValue1 < stringValue2 ? -1 : 1;\r\n  } else {\r\n    position = stringValue1 < stringValue2 ? 1 : -1;\r\n  }\r\n\r\n  return sortDirection * position;\r\n};\r\n","import { Column, GridOption, Sorter, SortDirectionNumber } from './../models/index';\r\n\r\nexport const stringSorter: Sorter = (value1: any, value2: any, sortDirection: number | SortDirectionNumber, sortColumn?: Column, gridOptions?: GridOption) => {\r\n  if (sortDirection === undefined || sortDirection === null) {\r\n    sortDirection = SortDirectionNumber.neutral;\r\n  }\r\n  let position = 0;\r\n  const checkForUndefinedValues = sortColumn && sortColumn.valueCouldBeUndefined || gridOptions && gridOptions.cellValueCouldBeUndefined || false;\r\n\r\n  if (value1 === value2) {\r\n    position = 0;\r\n  } else if (value1 === null || (checkForUndefinedValues && value1 === undefined)) {\r\n    position = -1;\r\n  } else if (value2 === null || (checkForUndefinedValues && value2 === undefined)) {\r\n    position = 1;\r\n  } else if (sortDirection) {\r\n    position = value1 < value2 ? -1 : 1;\r\n  } else {\r\n    position = value1 < value2 ? 1 : -1;\r\n  }\r\n  return sortDirection * position;\r\n};\r\n","import { Column, FieldType, GridOption, SortDirectionNumber } from './../models/index';\r\nimport { Sorters } from './index';\r\nimport { getAssociatedDateSorter } from './dateUtilities';\r\n\r\nexport function sortByFieldType(fieldType: FieldType, value1: any, value2: any, sortDirection: number | SortDirectionNumber, sortColumn?: Column, gridOptions?: GridOption) {\r\n  let sortResult = 0;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.float:\r\n    case FieldType.integer:\r\n    case FieldType.number:\r\n      sortResult = Sorters.numeric(value1, value2, sortDirection, sortColumn, gridOptions);\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    case FieldType.dateUtc:\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n    case FieldType.dateTimeIsoAmPm:\r\n    case FieldType.dateTimeIsoAM_PM:\r\n    case FieldType.dateTimeShortIso:\r\n    case FieldType.dateEuro:\r\n    case FieldType.dateEuroShort:\r\n    case FieldType.dateTimeShortEuro:\r\n    case FieldType.dateTimeEuro:\r\n    case FieldType.dateTimeEuroAmPm:\r\n    case FieldType.dateTimeEuroAM_PM:\r\n    case FieldType.dateTimeEuroShort:\r\n    case FieldType.dateTimeEuroShortAmPm:\r\n    case FieldType.dateTimeEuroShortAM_PM:\r\n    case FieldType.dateUs:\r\n    case FieldType.dateUsShort:\r\n    case FieldType.dateTimeShortUs:\r\n    case FieldType.dateTimeUs:\r\n    case FieldType.dateTimeUsAmPm:\r\n    case FieldType.dateTimeUsAM_PM:\r\n    case FieldType.dateTimeUsShort:\r\n    case FieldType.dateTimeUsShortAmPm:\r\n    case FieldType.dateTimeUsShortAM_PM:\r\n      // @ts-ignore\r\n      sortResult = getAssociatedDateSorter(fieldType).call(this, value1, value2, sortDirection, sortColumn, gridOptions);\r\n      break;\r\n    case FieldType.object:\r\n      sortResult = Sorters.objectString(value1, value2, sortDirection, sortColumn, gridOptions);\r\n      break;\r\n    case FieldType.string:\r\n    case FieldType.text:\r\n    case FieldType.password:\r\n    case FieldType.readonly:\r\n    default:\r\n      sortResult = Sorters.string(value1, value2, sortDirection, sortColumn, gridOptions);\r\n      break;\r\n  }\r\n\r\n  return sortResult;\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  CollectionFilterBy,\r\n  CollectionSortBy,\r\n  Column,\r\n  FilterMultiplePassType,\r\n  FilterMultiplePassTypeString,\r\n  FieldType,\r\n  OperatorType,\r\n  SortDirectionNumber,\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\nimport { uniqueArray } from './utilities';\r\n\r\n@Injectable()\r\nexport class CollectionService<T = any> {\r\n  constructor(@Optional() private readonly translate?: TranslateService) { }\r\n\r\n  /**\r\n   * Filter 1 or more items from a collection\r\n   * @param collection\r\n   * @param filterByOptions\r\n   */\r\n  filterCollection(collection: T[], filterByOptions: CollectionFilterBy | CollectionFilterBy[], filterResultBy: FilterMultiplePassType | FilterMultiplePassTypeString | null = FilterMultiplePassType.chain): T[] {\r\n    let filteredCollection: T[] = [];\r\n\r\n    // when it's array, we will use the new filtered collection after every pass\r\n    // basically if input collection has 10 items on 1st pass and 1 item is filtered out, then on 2nd pass the input collection will be 9 items\r\n    if (Array.isArray(filterByOptions)) {\r\n      filteredCollection = (filterResultBy === FilterMultiplePassType.merge) ? [] : collection;\r\n\r\n      for (const filter of filterByOptions) {\r\n        if (filterResultBy === FilterMultiplePassType.merge) {\r\n          const filteredPass = this.singleFilterCollection(collection, filter);\r\n          filteredCollection = uniqueArray([...filteredCollection, ...filteredPass]);\r\n        } else {\r\n          filteredCollection = this.singleFilterCollection(filteredCollection, filter);\r\n        }\r\n      }\r\n    } else {\r\n      filteredCollection = this.singleFilterCollection(collection, filterByOptions);\r\n    }\r\n\r\n    return filteredCollection;\r\n  }\r\n\r\n  /**\r\n   * Filter an item from a collection\r\n   * @param collection\r\n   * @param filterBy\r\n   */\r\n  singleFilterCollection(collection: T[], filterBy: CollectionFilterBy): T[] {\r\n    let filteredCollection: T[] = [];\r\n\r\n    if (filterBy) {\r\n      const objectProperty = filterBy.property;\r\n      const operator = filterBy.operator || OperatorType.equal;\r\n      // just check for undefined since the filter value could be null, 0, '', false etc\r\n      const value = typeof filterBy.value === 'undefined' ? '' : filterBy.value;\r\n\r\n      switch (operator) {\r\n        case OperatorType.equal:\r\n          if (objectProperty) {\r\n            filteredCollection = collection.filter((item) => (item as any)[objectProperty] === value);\r\n          } else {\r\n            filteredCollection = collection.filter((item) => item === value);\r\n          }\r\n          break;\r\n        case OperatorType.contains:\r\n          if (objectProperty) {\r\n            filteredCollection = collection.filter((item) => (item as any)[objectProperty].toString().indexOf(value.toString()) !== -1);\r\n          } else {\r\n            filteredCollection = collection.filter((item: any) => (item !== null && item !== undefined) && item.toString().indexOf(value.toString()) !== -1);\r\n          }\r\n          break;\r\n        case OperatorType.notContains:\r\n          if (objectProperty) {\r\n            filteredCollection = collection.filter((item) => (item as any)[objectProperty].toString().indexOf(value.toString()) === -1);\r\n          } else {\r\n            filteredCollection = collection.filter((item: any) => (item !== null && item !== undefined) && item.toString().indexOf(value.toString()) === -1);\r\n          }\r\n          break;\r\n        case OperatorType.notEqual:\r\n        default:\r\n          if (objectProperty) {\r\n            filteredCollection = collection.filter((item) => (item as any)[objectProperty] !== value);\r\n          } else {\r\n            filteredCollection = collection.filter((item) => item !== value);\r\n          }\r\n      }\r\n    }\r\n\r\n    return filteredCollection;\r\n  }\r\n\r\n  /**\r\n   * Sort 1 or more items in a collection\r\n   * @param column definition\r\n   * @param collection\r\n   * @param sortByOptions\r\n   * @param enableTranslateLabel\r\n   */\r\n  sortCollection(columnDef: Column, collection: T[], sortByOptions: CollectionSortBy | CollectionSortBy[], enableTranslateLabel?: boolean): T[] {\r\n    if (enableTranslateLabel && (!this.translate || !this.translate.instant)) {\r\n      throw new Error('[Angular-Slickgrid] requires \"ngx-translate\" to be installed and configured when the grid option \"enableTranslate\" is enabled.');\r\n    }\r\n\r\n    let sortedCollection: T[] = [];\r\n\r\n    if (sortByOptions) {\r\n      if (Array.isArray(sortByOptions)) {\r\n        // multi-sort\r\n        sortedCollection = collection.sort((dataRow1: any, dataRow2: any) => {\r\n          for (let i = 0, l = sortByOptions.length; i < l; i++) {\r\n            const sortBy = sortByOptions[i];\r\n\r\n            if (sortBy && sortBy.property) {\r\n              // collection of objects with a property name provided\r\n              const sortDirection = sortBy.sortDesc ? SortDirectionNumber.desc : SortDirectionNumber.asc;\r\n              const objectProperty = sortBy.property;\r\n              const fieldType = sortBy.fieldType || columnDef && columnDef.type || FieldType.string;\r\n              const value1 = (enableTranslateLabel) ? this.translate && this.translate.currentLang && this.translate.instant(dataRow1[objectProperty] || ' ') : dataRow1[objectProperty];\r\n              const value2 = (enableTranslateLabel) ? this.translate && this.translate.currentLang && this.translate.instant(dataRow2[objectProperty] || ' ') : dataRow2[objectProperty];\r\n\r\n              const sortResult = sortByFieldType(fieldType, value1, value2, sortDirection, columnDef);\r\n              if (sortResult !== SortDirectionNumber.neutral) {\r\n                return sortResult;\r\n              }\r\n            }\r\n          }\r\n          return SortDirectionNumber.neutral;\r\n        });\r\n      } else if (sortByOptions && sortByOptions.property) {\r\n        // single sort\r\n        // collection of objects with a property name provided\r\n        const objectProperty = sortByOptions.property;\r\n        const sortDirection = sortByOptions.sortDesc ? SortDirectionNumber.desc : SortDirectionNumber.asc;\r\n        const fieldType = sortByOptions.fieldType || columnDef && columnDef.type || FieldType.string;\r\n\r\n        if (objectProperty) {\r\n          sortedCollection = collection.sort((dataRow1: any, dataRow2: any) => {\r\n            const value1 = (enableTranslateLabel) ? this.translate && this.translate.currentLang && this.translate.instant(dataRow1[objectProperty] || ' ') : dataRow1[objectProperty];\r\n            const value2 = (enableTranslateLabel) ? this.translate && this.translate.currentLang && this.translate.instant(dataRow2[objectProperty] || ' ') : dataRow2[objectProperty];\r\n            const sortResult = sortByFieldType(fieldType, value1, value2, sortDirection, columnDef);\r\n            if (sortResult !== SortDirectionNumber.neutral) {\r\n              return sortResult;\r\n            }\r\n            return SortDirectionNumber.neutral;\r\n          });\r\n        }\r\n      } else if (sortByOptions && !sortByOptions.property) {\r\n        const sortDirection = sortByOptions.sortDesc ? SortDirectionNumber.desc : SortDirectionNumber.asc;\r\n        const fieldType = sortByOptions.fieldType || columnDef && columnDef.type || FieldType.string;\r\n\r\n        sortedCollection = collection.sort((dataRow1: any, dataRow2: any) => {\r\n          const value1 = (enableTranslateLabel) ? this.translate && this.translate.currentLang && this.translate.instant(dataRow1 || ' ') : dataRow1;\r\n          const value2 = (enableTranslateLabel) ? this.translate && this.translate.currentLang && this.translate.instant(dataRow2 || ' ') : dataRow2;\r\n          const sortResult = sortByFieldType(fieldType, value1, value2, sortDirection, columnDef);\r\n          if (sortResult !== SortDirectionNumber.neutral) {\r\n            return sortResult;\r\n          }\r\n          return SortDirectionNumber.neutral;\r\n        });\r\n      }\r\n    }\r\n\r\n    return sortedCollection;\r\n  }\r\n}\r\n","import { Locale } from './models/locale.interface';\r\n\r\nexport class Constants {\r\n  // English Locale texts when using only 1 Locale instead of I18N\r\n  static readonly locales: Locale = {\r\n    TEXT_ALL_SELECTED: 'All Selected',\r\n    TEXT_CANCEL: 'Cancel',\r\n    TEXT_CLEAR_ALL_FILTERS: 'Clear all Filters',\r\n    TEXT_CLEAR_ALL_GROUPING: 'Clear all Grouping',\r\n    TEXT_CLEAR_ALL_SORTING: 'Clear all Sorting',\r\n    TEXT_CLEAR_PINNING: 'Unfreeze Columns/Rows',\r\n    TEXT_COLLAPSE_ALL_GROUPS: 'Collapse all Groups',\r\n    TEXT_CONTAINS: 'Contains',\r\n    TEXT_COLUMNS: 'Columns',\r\n    TEXT_COLUMN_RESIZE_BY_CONTENT: 'Resize by Content',\r\n    TEXT_COMMANDS: 'Commands',\r\n    TEXT_COPY: 'Copy',\r\n    TEXT_EQUALS: 'Equals',\r\n    TEXT_EQUAL_TO: 'Equal to',\r\n    TEXT_ENDS_WITH: 'Ends With',\r\n    TEXT_EXPAND_ALL_GROUPS: 'Expand all Groups',\r\n    TEXT_EXPORT_TO_CSV: 'Export in CSV format',\r\n    TEXT_EXPORT_TO_TEXT_FORMAT: 'Export in Text format (Tab delimited)',\r\n    TEXT_EXPORT_TO_EXCEL: 'Export to Excel',\r\n    TEXT_FORCE_FIT_COLUMNS: 'Force fit columns',\r\n    TEXT_FREEZE_COLUMNS: 'Freeze Columns',\r\n    TEXT_GREATER_THAN: 'Greater than',\r\n    TEXT_GREATER_THAN_OR_EQUAL_TO: 'Greater than or equal to',\r\n    TEXT_GROUP_BY: 'Group By',\r\n    TEXT_HIDE_COLUMN: 'Hide Column',\r\n    TEXT_ITEMS: 'items',\r\n    TEXT_ITEMS_PER_PAGE: 'items per page',\r\n    TEXT_ITEMS_SELECTED: 'items selected',\r\n    TEXT_OF: 'of',\r\n    TEXT_OK: 'OK',\r\n    TEXT_LAST_UPDATE: 'Last Update',\r\n    TEXT_LESS_THAN: 'Less than',\r\n    TEXT_LESS_THAN_OR_EQUAL_TO: 'Less than or equal to',\r\n    TEXT_NOT_CONTAINS: 'Not contains',\r\n    TEXT_NOT_EQUAL_TO: 'Not equal to',\r\n    TEXT_PAGE: 'Page',\r\n    TEXT_REFRESH_DATASET: 'Refresh Dataset',\r\n    TEXT_REMOVE_FILTER: 'Remove Filter',\r\n    TEXT_REMOVE_SORT: 'Remove Sort',\r\n    TEXT_SAVE: 'Save',\r\n    TEXT_SELECT_ALL: 'Select All',\r\n    TEXT_SYNCHRONOUS_RESIZE: 'Synchronous resize',\r\n    TEXT_SORT_ASCENDING: 'Sort Ascending',\r\n    TEXT_SORT_DESCENDING: 'Sort Descending',\r\n    TEXT_STARTS_WITH: 'Starts With',\r\n    TEXT_TOGGLE_FILTER_ROW: 'Toggle Filter Row',\r\n    TEXT_TOGGLE_PRE_HEADER_ROW: 'Toggle Pre-Header Row',\r\n    TEXT_X_OF_Y_SELECTED: '# of % selected',\r\n  };\r\n\r\n  // some Validation default texts\r\n  static readonly VALIDATION_REQUIRED_FIELD = 'Field is required';\r\n  static readonly VALIDATION_EDITOR_VALID_NUMBER = 'Please enter a valid number';\r\n  static readonly VALIDATION_EDITOR_VALID_INTEGER = 'Please enter a valid integer number';\r\n  static readonly VALIDATION_EDITOR_INTEGER_BETWEEN = 'Please enter a valid integer number between {{minValue}} and {{maxValue}}';\r\n  static readonly VALIDATION_EDITOR_INTEGER_MAX = 'Please enter a valid integer number that is lower than {{maxValue}}';\r\n  static readonly VALIDATION_EDITOR_INTEGER_MAX_INCLUSIVE = 'Please enter a valid integer number that is lower than or equal to {{maxValue}}';\r\n  static readonly VALIDATION_EDITOR_INTEGER_MIN = 'Please enter a valid integer number that is greater than {{minValue}}';\r\n  static readonly VALIDATION_EDITOR_INTEGER_MIN_INCLUSIVE = 'Please enter a valid integer number that is greater than or equal to {{minValue}}';\r\n  static readonly VALIDATION_EDITOR_NUMBER_BETWEEN = 'Please enter a valid number between {{minValue}} and {{maxValue}}';\r\n  static readonly VALIDATION_EDITOR_NUMBER_MAX = 'Please enter a valid number that is lower than {{maxValue}}';\r\n  static readonly VALIDATION_EDITOR_NUMBER_MAX_INCLUSIVE = 'Please enter a valid number that is lower than or equal to {{maxValue}}';\r\n  static readonly VALIDATION_EDITOR_NUMBER_MIN = 'Please enter a valid number that is greater than {{minValue}}';\r\n  static readonly VALIDATION_EDITOR_NUMBER_MIN_INCLUSIVE = 'Please enter a valid number that is greater than or equal to {{minValue}}';\r\n  static readonly VALIDATION_EDITOR_DECIMAL_BETWEEN = 'Please enter a valid number with a maximum of {{maxDecimal}} decimals';\r\n  static readonly VALIDATION_EDITOR_TEXT_LENGTH_BETWEEN = 'Please make sure your text length is between {{minLength}} and {{maxLength}} characters';\r\n  static readonly VALIDATION_EDITOR_TEXT_MAX_LENGTH = 'Please make sure your text is less than {{maxLength}} characters';\r\n  static readonly VALIDATION_EDITOR_TEXT_MAX_LENGTH_INCLUSIVE = 'Please make sure your text is less than or equal to {{maxLength}} characters';\r\n  static readonly VALIDATION_EDITOR_TEXT_MIN_LENGTH = 'Please make sure your text is more than {{minLength}} character(s)';\r\n  static readonly VALIDATION_EDITOR_TEXT_MIN_LENGTH_INCLUSIVE = 'Please make sure your text is at least {{minLength}} character(s)';\r\n}\r\n","import { Column, FieldType, Formatter, GridOption, FormatterOption, ExportOption, ExcelExportOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from '../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\n/**\r\n * Find the option value from the following (in order of execution)\r\n * 1- Column Definition \"params\"\r\n * 2- Grid Options \"formatterOptions\"\r\n * 3- nothing found, return default value provided\r\n */\r\nexport function getValueFromParamsOrFormatterOptions(optionName: string, columnDef: Column, grid: any, defaultValue?: any) {\r\n  const gridOptions = ((grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {}) as GridOption;\r\n  const params = columnDef && columnDef.params;\r\n\r\n  if (params && params.hasOwnProperty(optionName)) {\r\n    return params[optionName];\r\n  } else if (gridOptions.formatterOptions?.hasOwnProperty(optionName)) {\r\n    return (gridOptions.formatterOptions as any)[optionName];\r\n  }\r\n  return defaultValue;\r\n}\r\n\r\n/** From a FieldType, return the associated date Formatter */\r\nexport function getAssociatedDateFormatter(fieldType: typeof FieldType[keyof typeof FieldType], defaultSeparator: string): Formatter {\r\n  const defaultDateFormat = mapMomentDateFormatWithFieldType(fieldType);\r\n\r\n  return (_row: number, _cell: number, value: any, columnDef: Column, _dataContext: any, grid: any) => {\r\n    const gridOptions = ((grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {}) as GridOption;\r\n    const customSeparator = gridOptions?.formatterOptions?.dateSeparator ?? defaultSeparator;\r\n    const inputType = columnDef?.type ?? FieldType.date;\r\n    const inputDateFormat = mapMomentDateFormatWithFieldType(inputType);\r\n    const isParsingAsUtc = columnDef?.params?.parseDateAsUtc ?? false;\r\n\r\n    const isDateValid = moment(value, inputDateFormat, false).isValid();\r\n    let outputDate = value;\r\n    if (value && isDateValid) {\r\n      outputDate = isParsingAsUtc ? moment.utc(value).format(defaultDateFormat) : moment(value).format(defaultDateFormat);\r\n    }\r\n\r\n    // user can customize the separator through the \"formatterOptions\"\r\n    // if that is the case we need to replace the default \"/\" to the new separator\r\n    if (outputDate && customSeparator !== defaultSeparator) {\r\n      const regex = new RegExp(defaultSeparator, 'ig'); // find separator globally\r\n      outputDate = outputDate.replace(regex, customSeparator);\r\n    }\r\n\r\n    return outputDate;\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * Goes through every possible ways to find and apply a Formatter when found,\r\n * it will first check if a `exportCustomFormatter` is defined else it will check if there's a regular `formatter` and `exportWithFormatter` is enabled.\r\n * This function is similar to `applyFormatterWhenDefined()` except that it execute any `exportCustomFormatter` while `applyFormatterWhenDefined` does not.\r\n * @param {Number} row - grid row index\r\n * @param {Number} col - grid column index\r\n * @param {Object} dataContext - item data context object\r\n * @param {Object} columnDef - column definition\r\n * @param {Object} grid - Slick Grid object\r\n * @param {Object} exportOptions - Excel or Text Export Options\r\n * @returns formatted string output or empty string\r\n */\r\nexport function exportWithFormatterWhenDefined<T = any>(row: number, col: number, columnDef: Column<T>, dataContext: T, grid: any, exportOptions?: ExportOption | ExcelExportOption) {\r\n  let isEvaluatingFormatter = false;\r\n\r\n  // first check if there are any export options provided (as Grid Options)\r\n  if (exportOptions && exportOptions.hasOwnProperty('exportWithFormatter')) {\r\n    isEvaluatingFormatter = !!exportOptions.exportWithFormatter;\r\n  }\r\n\r\n  // second check if \"exportWithFormatter\" is provided in the column definition, if so it will have precendence over the Grid Options exportOptions\r\n  if (columnDef && columnDef.hasOwnProperty('exportWithFormatter')) {\r\n    isEvaluatingFormatter = !!columnDef.exportWithFormatter;\r\n  }\r\n\r\n  let formatter: Formatter | undefined;\r\n  if (dataContext && columnDef.exportCustomFormatter) {\r\n    // did the user provide a Custom Formatter for the export\r\n    formatter = columnDef.exportCustomFormatter;\r\n  } else if (isEvaluatingFormatter && columnDef.formatter) {\r\n    // or else do we have a column Formatter AND are we evaluating it?\r\n    formatter = columnDef.formatter;\r\n  }\r\n\r\n  return parseFormatterWhenExist(formatter, row, col, columnDef, dataContext, grid);\r\n}\r\n\r\n/**\r\n * Takes a Formatter function, execute and return the formatted output\r\n * @param {Function} formatter - formatter function\r\n * @param {Number} row - grid row index\r\n * @param {Number} col - grid column index\r\n * @param {Object} dataContext - item data context object\r\n * @param {Object} columnDef - column definition\r\n * @param {Object} grid - Slick Grid object\r\n * @returns formatted string output or empty string\r\n */\r\nexport function parseFormatterWhenExist<T = any>(formatter: Formatter | undefined, row: number, col: number, columnDef: Column<T>, dataContext: T, grid: any): string {\r\n  let output = '';\r\n\r\n  // does the field have the dot (.) notation and is a complex object? if so pull the first property name\r\n  const fieldId = columnDef.field || columnDef.id || '';\r\n  let fieldProperty = fieldId;\r\n  if (typeof columnDef.field === 'string' && columnDef.field.indexOf('.') > 0) {\r\n    const props = columnDef.field.split('.');\r\n    fieldProperty = (props.length > 0) ? props[0] : columnDef.field;\r\n  }\r\n\r\n  const cellValue = (dataContext as any).hasOwnProperty(fieldProperty) ? (dataContext as any)[fieldProperty] : null;\r\n\r\n  if (typeof formatter === 'function') {\r\n    const formattedData = formatter(row, col, cellValue, columnDef, dataContext, grid);\r\n    output = formattedData as string;\r\n    if (formattedData && typeof formattedData === 'object' && formattedData.hasOwnProperty('text')) {\r\n      output = formattedData.text;\r\n    }\r\n    if (output === null || output === undefined) {\r\n      output = '';\r\n    }\r\n  } else {\r\n    output = (!(dataContext as any).hasOwnProperty(fieldProperty)) ? '' : cellValue;\r\n    if (output === null || output === undefined) {\r\n      output = '';\r\n    }\r\n  }\r\n\r\n  // if at the end we have an empty object, then replace it with an empty string\r\n  if (typeof output === 'object' && Object.entries(output).length === 0) {\r\n    output = '';\r\n  }\r\n\r\n  return output;\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n// @ts-ignore\r\nimport * as ExcelBuilder from 'excel-builder-webpacker';\r\nimport { Subject } from 'rxjs';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nimport { ExcelWorkbook } from './../models/excelWorkbook.interface';\r\nimport { ExcelStylesheet } from './../models/excelStylesheet.interface';\r\nimport {\r\n  Column,\r\n  ExcelCellFormat,\r\n  ExcelExportOption,\r\n  ExcelMetadata,\r\n  ExcelWorksheet,\r\n  FieldType,\r\n  FileType,\r\n  GridOption,\r\n  KeyTitlePair,\r\n  Locale,\r\n} from '../models/index';\r\nimport { Constants } from '../constants';\r\nimport { exportWithFormatterWhenDefined } from '../formatters/formatterUtilities';\r\nimport { addWhiteSpaces, deepCopy, getTranslationPrefix, mapMomentDateFormatWithFieldType, sanitizeHtmlToText, titleCase } from './utilities';\r\n\r\n\r\nconst DEFAULT_EXPORT_OPTIONS: ExcelExportOption = {\r\n  filename: 'export',\r\n  format: FileType.xlsx\r\n};\r\n\r\n@Injectable()\r\nexport class ExcelExportService {\r\n  private _fileFormat = FileType.xlsx;\r\n  private _hasColumnTitlePreHeader = false;\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _locales!: Locale;\r\n  private _columnHeaders!: Array<KeyTitlePair>;\r\n  private _groupedColumnHeaders!: Array<KeyTitlePair>;\r\n  private _hasGroupedItems = false;\r\n  private _excelExportOptions!: ExcelExportOption;\r\n  private _sheet!: ExcelWorksheet;\r\n  private _stylesheet!: ExcelStylesheet;\r\n  private _stylesheetFormats: any;\r\n  private _workbook!: ExcelWorkbook;\r\n  onGridBeforeExportToExcel = new Subject<boolean>();\r\n  onGridAfterExportToExcel = new Subject<{ blob?: Blob; filename: string; format?: string; }>();\r\n\r\n  constructor(@Optional() private readonly translate: TranslateService) { }\r\n\r\n  private get datasetIdName(): string {\r\n    return this._gridOptions && this._gridOptions.datasetIdPropertyName || 'id';\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Export Service\r\n   * @param grid\r\n   * @param dataView\r\n   */\r\n  init(grid: any, dataView: any): void {\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n\r\n    // get locales provided by user in forRoot or else use default English locales via the Constants\r\n    this._locales = this._gridOptions && this._gridOptions.locales || Constants.locales;\r\n\r\n    if (this._gridOptions.enableTranslate && (!this.translate || !this.translate.instant)) {\r\n      throw new Error('[Angular-Slickgrid] requires \"ngx-translate\" to be installed and configured when the grid option \"enableTranslate\" is enabled.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function to export the Grid result to an Excel CSV format using javascript for it to produce the CSV file.\r\n   * This is a WYSIWYG export to file output (What You See is What You Get)\r\n   *\r\n   * NOTES: The column position needs to match perfectly the JSON Object position because of the way we are pulling the data,\r\n   * which means that if any column(s) got moved in the UI, it has to be reflected in the JSON array output as well\r\n   *\r\n   * Example: exportToExcel({ format: FileType.csv, delimiter: DelimiterType.comma })\r\n   */\r\n  exportToExcel(options?: ExcelExportOption): Promise<boolean> {\r\n    if (!this._grid || !this._dataView) {\r\n      throw new Error('[Angular-Slickgrid] it seems that the SlickGrid & DataView objects are not initialized did you forget to enable the grid option flag \"enableExcelExport\"?');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.onGridBeforeExportToExcel.next(true);\r\n      this._excelExportOptions = deepCopy({ ...DEFAULT_EXPORT_OPTIONS, ...this._gridOptions.excelExportOptions, ...options });\r\n      this._fileFormat = this._excelExportOptions.format || FileType.xlsx;\r\n\r\n      // prepare the Excel Workbook & Sheet\r\n      this._workbook = new ExcelBuilder.Workbook();\r\n      this._sheet = new ExcelBuilder.Worksheet({ name: this._excelExportOptions.sheetName || 'Sheet1' });\r\n\r\n      // add any Excel Format/Stylesheet to current Workbook\r\n      this._stylesheet = this._workbook.getStyleSheet();\r\n      const boldFormatter = this._stylesheet.createFormat({ font: { bold: true } });\r\n      const stringFormatter = this._stylesheet.createFormat({ format: '@' });\r\n      const numberFormatter = this._stylesheet.createFormat({ format: '0' });\r\n      const usdFormatter = this._stylesheet.createFormat({ format: '$#,##0.00' });\r\n      this._stylesheetFormats = {\r\n        boldFormatter,\r\n        dollarFormatter: usdFormatter,\r\n        numberFormatter,\r\n        stringFormatter,\r\n      };\r\n\r\n      // get the CSV output from the grid data\r\n      const dataOutput = this.getDataOutput();\r\n\r\n      // trigger a download file\r\n      // wrap it into a setTimeout so that the EventAggregator has enough time to start a pre-process like showing a spinner\r\n      setTimeout(async () => {\r\n        try {\r\n          if (this._gridOptions && this._gridOptions.excelExportOptions && this._gridOptions.excelExportOptions.customExcelHeader) {\r\n            this._gridOptions.excelExportOptions.customExcelHeader(this._workbook, this._sheet);\r\n          }\r\n\r\n          const columns = this._grid && this._grid.getColumns && this._grid.getColumns() || [];\r\n          this._sheet.setColumns(this.getColumnStyles(columns));\r\n\r\n          const currentSheetData = this._sheet.data;\r\n          let finalOutput = currentSheetData;\r\n          if (Array.isArray(currentSheetData) && Array.isArray(dataOutput)) {\r\n            finalOutput = this._sheet.data.concat(dataOutput);\r\n          }\r\n\r\n          this._sheet.setData(finalOutput);\r\n          this._workbook.addWorksheet(this._sheet);\r\n\r\n          const mimeType = this._fileFormat === FileType.xls ? 'application/vnd.ms-excel' : 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet ';\r\n          const excelBlob = await ExcelBuilder.Builder.createFile(this._workbook, { type: 'blob', mimeType });\r\n          const downloadOptions = {\r\n            filename: `${this._excelExportOptions.filename}.${this._fileFormat}`,\r\n            format: this._fileFormat\r\n          };\r\n\r\n          // start downloading but add the Blob property only on the start download not on the event itself\r\n          this.startDownloadFile({ ...downloadOptions, blob: excelBlob, data: this._sheet.data });\r\n          this.onGridAfterExportToExcel.next(downloadOptions);\r\n          resolve(true);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Takes a positive integer and returns the corresponding column name.\r\n   * dealing with the Excel column position is a bit tricky since the first 26 columns are single char (A,B,...) but after that it becomes double char (AA,AB,...)\r\n   * so we must first see if we are in the first section of 26 chars, if that is the case we just concatenate 1 (1st row) so it becomes (A1, B1, ...)\r\n   * and again if we go 26, we need to add yet again an extra prefix (AA1, AB1, ...) and so goes the cycle\r\n   * @param {number} colIndex - The positive integer to convert to a column name.\r\n   * @return {string}  The column name.\r\n   */\r\n  getExcelColumnNameByIndex(colIndex: number): string {\r\n    const letters = 'ZABCDEFGHIJKLMNOPQRSTUVWXY';\r\n\r\n    let nextPos = Math.floor(colIndex / 26);\r\n    const lastPos = Math.floor(colIndex % 26);\r\n    if (lastPos === 0) {\r\n      nextPos--;\r\n    }\r\n\r\n    if (colIndex > 26) {\r\n      return this.getExcelColumnNameByIndex(nextPos) + letters[lastPos];\r\n    }\r\n\r\n    return letters[lastPos] + '';\r\n  }\r\n\r\n  /**\r\n   * Triggers download file with file format.\r\n   * IE(6-10) are not supported\r\n   * All other browsers will use plain javascript on client side to produce a file download.\r\n   * @param options\r\n   */\r\n  startDownloadFile(options: { filename: string, blob: Blob, data: any[] }) {\r\n    // IE(6-10) don't support javascript download and our service doesn't support either so throw an error, we have to make a round trip to the Web Server for exporting\r\n    if (navigator.appName === 'Microsoft Internet Explorer') {\r\n      throw new Error('Microsoft Internet Explorer 6 to 10 do not support javascript export to Excel. Please upgrade your browser.');\r\n    }\r\n\r\n    // when using IE/Edge, then use different download call\r\n    if (typeof navigator.msSaveOrOpenBlob === 'function') {\r\n      navigator.msSaveOrOpenBlob(options.blob, options.filename);\r\n    } else {\r\n      // this trick will generate a temp <a /> tag\r\n      // the code will then trigger a hidden click for it to start downloading\r\n      const link = document && document.createElement('a');\r\n      const url = URL.createObjectURL(options.blob);\r\n\r\n      if (link && document) {\r\n        link.textContent = 'download';\r\n        link.href = url;\r\n        link.setAttribute('download', options.filename);\r\n\r\n        // set the visibility to hidden so there is no effect on your web-layout\r\n        link.style.visibility = 'hidden';\r\n\r\n        // this part will append the anchor tag, trigger a click (for download to start) and finally remove the tag once completed\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** use different Excel Stylesheet Format as per the Field Type */\r\n  useCellFormatByFieldType(data: string | Date | moment_.Moment, fieldType: FieldType): ExcelCellFormat | string {\r\n    let outputData: ExcelCellFormat | string | Date | moment_.Moment = data;\r\n    switch (fieldType) {\r\n      case FieldType.dateTime:\r\n      case FieldType.dateTimeIso:\r\n      case FieldType.dateTimeShortIso:\r\n      case FieldType.dateTimeIsoAmPm:\r\n      case FieldType.dateTimeIsoAM_PM:\r\n      case FieldType.dateEuro:\r\n      case FieldType.dateEuroShort:\r\n      case FieldType.dateTimeEuro:\r\n      case FieldType.dateTimeShortEuro:\r\n      case FieldType.dateTimeEuroAmPm:\r\n      case FieldType.dateTimeEuroAM_PM:\r\n      case FieldType.dateTimeEuroShort:\r\n      case FieldType.dateTimeEuroShortAmPm:\r\n      case FieldType.dateUs:\r\n      case FieldType.dateUsShort:\r\n      case FieldType.dateTimeUs:\r\n      case FieldType.dateTimeShortUs:\r\n      case FieldType.dateTimeUsAmPm:\r\n      case FieldType.dateTimeUsAM_PM:\r\n      case FieldType.dateTimeUsShort:\r\n      case FieldType.dateTimeUsShortAmPm:\r\n      case FieldType.dateUtc:\r\n      case FieldType.date:\r\n      case FieldType.dateIso:\r\n        outputData = data;\r\n        if (data) {\r\n          const defaultDateFormat = mapMomentDateFormatWithFieldType(fieldType);\r\n          const isDateValid = moment(data as string, defaultDateFormat, false).isValid();\r\n          const outputDate = (data && isDateValid) ? moment(data as string).format(defaultDateFormat) : data;\r\n          const dateFormatter = this._stylesheet.createFormat({ format: defaultDateFormat });\r\n          outputData = { value: outputDate, metadata: { style: dateFormatter.id } };\r\n        }\r\n        break;\r\n      case FieldType.number:\r\n        const val = isNaN(+data) ? null : +data;\r\n        outputData = { value: val, metadata: { style: this._stylesheetFormats.numberFormatter.id } };\r\n        break;\r\n      default:\r\n        outputData = data;\r\n    }\r\n    return outputData as string;\r\n  }\r\n\r\n  // -----------------------\r\n  // Private functions\r\n  // -----------------------\r\n\r\n  private getDataOutput(): string[][] | ExcelCellFormat[][] {\r\n    const columns = this._grid && this._grid.getColumns && this._grid.getColumns() || [];\r\n\r\n    // data variable which will hold all the fields data of a row\r\n    const outputData: string[][] | ExcelCellFormat[][] = [];\r\n    const columnHeaderStyle = this._gridOptions && this._gridOptions.excelExportOptions && this._gridOptions.excelExportOptions.columnHeaderStyle;\r\n    let columnHeaderStyleId = this._stylesheetFormats.boldFormatter.id;\r\n    if (columnHeaderStyle) {\r\n      columnHeaderStyleId = this._stylesheet.createFormat(columnHeaderStyle).id;\r\n    }\r\n\r\n    // get all Grouped Column Header Titles when defined (from pre-header row)\r\n    if (this._gridOptions.createPreHeaderPanel && this._gridOptions.showPreHeaderPanel && !this._gridOptions.enableDraggableGrouping) {\r\n      // when having Grouped Header Titles (in the pre-header), then make the cell Bold & Aligned Center\r\n      const boldCenterAlign = this._stylesheet.createFormat({ alignment: { horizontal: 'center' }, font: { bold: true } });\r\n      (outputData as ExcelCellFormat[][]).push(this.getColumnGroupedHeaderTitlesData(columns, { style: boldCenterAlign && boldCenterAlign.id }));\r\n      this._hasColumnTitlePreHeader = true;\r\n    }\r\n\r\n    // get all Column Header Titles (it might include a \"Group by\" title at A1 cell)\r\n    // also style the headers, defaults to Bold but user could pass his own style\r\n    (outputData as ExcelCellFormat[][]).push(this.getColumnHeaderData(columns, { style: columnHeaderStyleId }) as ExcelCellFormat[]);\r\n\r\n    // Populate the rest of the Grid Data\r\n    this.pushAllGridRowDataToArray(outputData as any, columns);\r\n\r\n    return outputData;\r\n  }\r\n\r\n  /** Get each column style including a style for the width of each column */\r\n  private getColumnStyles(columns: Column[]): any[] {\r\n    const grouping = this._dataView && this._dataView.getGrouping && this._dataView.getGrouping();\r\n    const columnStyles = [];\r\n    if (Array.isArray(grouping) && grouping.length > 0) {\r\n      columnStyles.push({\r\n        bestFit: true,\r\n        columnStyles: (this._gridOptions && this._gridOptions.excelExportOptions && this._gridOptions.excelExportOptions.customColumnWidth) || 10\r\n      });\r\n    }\r\n\r\n    columns.forEach((columnDef: Column) => {\r\n      const skippedField = columnDef.excludeFromExport || false;\r\n      // if column width is 0, then we consider that field as a hidden field and should not be part of the export\r\n      if ((columnDef.width === undefined || columnDef.width > 0) && !skippedField) {\r\n        columnStyles.push({\r\n          bestFit: true,\r\n          width: columnDef.exportColumnWidth || (this._gridOptions && this._gridOptions.excelExportOptions && this._gridOptions.excelExportOptions.customColumnWidth) || 10\r\n        });\r\n      }\r\n    });\r\n    return columnStyles;\r\n  }\r\n\r\n  /**\r\n   * Get all Grouped Header Titles and their keys, translate the title when required, and format them in Bold\r\n   * @param {Array<Object>} columns - grid column definitions\r\n   * @param {Object} metadata - Excel metadata\r\n   * @returns {Object} array of Excel cell format\r\n   */\r\n  private getColumnGroupedHeaderTitlesData(columns: Column[], metadata: ExcelMetadata): Array<ExcelCellFormat> {\r\n    let outputGroupedHeaderTitles: Array<ExcelCellFormat> = [];\r\n\r\n    // get all Column Header Titles\r\n    this._groupedColumnHeaders = this.getColumnGroupedHeaderTitles(columns) || [];\r\n    if (this._groupedColumnHeaders && Array.isArray(this._groupedColumnHeaders) && this._groupedColumnHeaders.length > 0) {\r\n      // add the header row + add a new line at the end of the row\r\n      outputGroupedHeaderTitles = this._groupedColumnHeaders.map((header) => ({ value: header.title, metadata }));\r\n    }\r\n\r\n    // merge necessary cells (any grouped header titles)\r\n    let colspanStartIndex = 0;\r\n    const headersLn = this._groupedColumnHeaders.length;\r\n    for (let cellIndex = 0; cellIndex < headersLn; cellIndex++) {\r\n      if ((cellIndex + 1) === headersLn || ((cellIndex + 1) < headersLn && this._groupedColumnHeaders[cellIndex].title !== this._groupedColumnHeaders[cellIndex + 1].title)) {\r\n        const leftExcelColumnChar = this.getExcelColumnNameByIndex(colspanStartIndex + 1);\r\n        const rightExcelColumnChar = this.getExcelColumnNameByIndex(cellIndex + 1);\r\n        this._sheet.mergeCells(`${leftExcelColumnChar}1`, `${rightExcelColumnChar}1`);\r\n\r\n        // next group starts 1 column index away\r\n        colspanStartIndex = cellIndex + 1;\r\n      }\r\n    }\r\n\r\n    return outputGroupedHeaderTitles;\r\n  }\r\n\r\n  /** Get all column headers and format them in Bold */\r\n  private getColumnHeaderData(columns: Column[], metadata: ExcelMetadata): Array<string | ExcelCellFormat> {\r\n    let outputHeaderTitles: ExcelCellFormat[] = [];\r\n\r\n    // get all Column Header Titles\r\n    this._columnHeaders = this.getColumnHeaders(columns) || [];\r\n    if (this._columnHeaders && Array.isArray(this._columnHeaders) && this._columnHeaders.length > 0) {\r\n      // add the header row + add a new line at the end of the row\r\n      outputHeaderTitles = this._columnHeaders.map((header) => ({ value: header.title, metadata }));\r\n    }\r\n\r\n    // do we have a Group by title?\r\n    const groupTitle = this.getGroupColumnTitle();\r\n    if (groupTitle) {\r\n      outputHeaderTitles.unshift({ value: groupTitle, metadata });\r\n    }\r\n\r\n    return outputHeaderTitles;\r\n  }\r\n\r\n  private getGroupColumnTitle(): string | null {\r\n    // Group By text, it could be set in the export options or from translation or if nothing is found then use the English constant text\r\n    let groupByColumnHeader = this._excelExportOptions.groupingColumnHeaderTitle;\r\n    if (!groupByColumnHeader && this._gridOptions.enableTranslate && this.translate && this.translate.currentLang && this.translate.instant) {\r\n      groupByColumnHeader = this.translate.instant(`${getTranslationPrefix(this._gridOptions)}GROUP_BY`);\r\n    } else if (!groupByColumnHeader) {\r\n      groupByColumnHeader = this._locales && this._locales.TEXT_GROUP_BY;\r\n    }\r\n\r\n    // get grouped column titles and if found, we will add a \"Group by\" column at the first column index\r\n    // if it's a CSV format, we'll escape the text in double quotes\r\n    const grouping = this._dataView && this._dataView.getGrouping && this._dataView.getGrouping();\r\n    if (Array.isArray(grouping) && grouping.length > 0) {\r\n      this._hasGroupedItems = true;\r\n      return groupByColumnHeader as string;\r\n    } else {\r\n      this._hasGroupedItems = false;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get all Grouped Header Titles and their keys, translate the title when required.\r\n   * @param {Array<object>} columns of the grid\r\n   */\r\n  private getColumnGroupedHeaderTitles(columns: Column[]): Array<KeyTitlePair> {\r\n    const groupedColumnHeaders: Array<KeyTitlePair> = [];\r\n\r\n    if (columns && Array.isArray(columns)) {\r\n      // Populate the Grouped Column Header, pull the columnGroup(Key) defined\r\n      columns.forEach((columnDef: Column) => {\r\n        let groupedHeaderTitle: string = '';\r\n        if (columnDef.columnGroupKey && this._gridOptions.enableTranslate && this.translate && this.translate.currentLang && this.translate.instant) {\r\n          groupedHeaderTitle = this.translate.instant(columnDef.columnGroupKey);\r\n        } else {\r\n          groupedHeaderTitle = columnDef.columnGroup as string;\r\n        }\r\n        const skippedField = columnDef.excludeFromExport || false;\r\n\r\n        // if column width is 0px, then we consider that field as a hidden field and should not be part of the export\r\n        if ((columnDef.width === undefined || columnDef.width > 0) && !skippedField) {\r\n          groupedColumnHeaders.push({\r\n            key: (columnDef.field || columnDef.id) as string,\r\n            title: groupedHeaderTitle || '',\r\n          });\r\n        }\r\n      });\r\n    }\r\n    return groupedColumnHeaders;\r\n  }\r\n\r\n  /**\r\n   * Get all header titles and their keys, translate the title when required.\r\n   * @param columns of the grid\r\n   */\r\n  private getColumnHeaders(columns: Column[]): Array<KeyTitlePair> {\r\n    const columnHeaders: Array<KeyTitlePair> = [];\r\n\r\n    if (columns && Array.isArray(columns)) {\r\n      // Populate the Column Header, pull the name defined\r\n      columns.forEach((columnDef) => {\r\n        let headerTitle = '';\r\n        if ((columnDef.headerKey || columnDef.nameKey) && this._gridOptions.enableTranslate && this.translate && this.translate.currentLang && this.translate.instant) {\r\n          headerTitle = this.translate.instant((columnDef.headerKey || columnDef.nameKey) || ' ');\r\n        } else {\r\n          headerTitle = columnDef.name || titleCase(columnDef.field);\r\n        }\r\n        const skippedField = columnDef.excludeFromExport || false;\r\n\r\n        // if column width is 0, then we consider that field as a hidden field and should not be part of the export\r\n        if ((columnDef.width === undefined || columnDef.width > 0) && !skippedField) {\r\n          columnHeaders.push({\r\n            key: columnDef.field || columnDef.id,\r\n            title: headerTitle\r\n          });\r\n        }\r\n      });\r\n    }\r\n    return columnHeaders;\r\n  }\r\n\r\n  /**\r\n   * Get all the grid row data and return that as an output string\r\n   */\r\n  private pushAllGridRowDataToArray(originalDataArray: string[][], columns: Column[]): Array<string[] | ExcelCellFormat[]> {\r\n    const lineCount = this._dataView?.getLength() ?? 0;\r\n\r\n    // loop through all the grid rows of data\r\n    for (let rowNumber = 0; rowNumber < lineCount; rowNumber++) {\r\n      const itemObj = this._dataView.getItem(rowNumber);\r\n      if (itemObj) {\r\n        // Normal row (not grouped by anything) would have an ID which was predefined in the Grid Columns definition\r\n        if (itemObj[this.datasetIdName] !== null && itemObj[this.datasetIdName] !== undefined) {\r\n          // get regular row item data\r\n          originalDataArray.push(this.readRegularRowData(columns, rowNumber, itemObj));\r\n        } else if (this._hasGroupedItems && itemObj.__groupTotals === undefined) {\r\n          // get the group row\r\n          originalDataArray.push([this.readGroupedTitleRow(itemObj)]);\r\n        } else if (itemObj.__groupTotals) {\r\n          // else if the row is a Group By and we have agreggators, then a property of '__groupTotals' would exist under that object\r\n          originalDataArray.push(this.readGroupedTotalRow(columns, itemObj));\r\n        }\r\n      }\r\n    }\r\n    return originalDataArray;\r\n  }\r\n\r\n  /**\r\n   * Get the data of a regular row (a row without grouping).\r\n   * If the row has colspan, we will also merge the cells data\r\n   * @param row\r\n   * @param itemObj\r\n   */\r\n  private readRegularRowData(columns: Column[], row: number, itemObj: any): string[] {\r\n    let idx = 0;\r\n    const rowOutputStrings = [];\r\n    const columnsLn = columns.length;\r\n    let prevColspan: number | '*' = 1;\r\n    let colspanStartIndex = 0;\r\n    const itemMetadata = this._dataView.getItemMetadata(row);\r\n\r\n    for (let col = 0; col < columnsLn; col++) {\r\n      const columnDef = columns[col];\r\n      const fieldType = columnDef.outputType || columnDef.type || FieldType.string;\r\n\r\n      // skip excluded column\r\n      if (columnDef.excludeFromExport) {\r\n        continue;\r\n      }\r\n\r\n      // if we are grouping and are on 1st column index, we need to skip this column since it will be used later by the grouping text:: Group by [columnX]\r\n      if (this._hasGroupedItems && idx === 0) {\r\n        rowOutputStrings.push('');\r\n      }\r\n\r\n      let colspan = 1;\r\n      let colspanColumnId;\r\n      if (itemMetadata?.columns) {\r\n        const metadata = itemMetadata?.columns;\r\n        const columnData = metadata[columnDef.id] || metadata[col];\r\n        if (!(prevColspan > 1 || (prevColspan === '*' && col > 0))) {\r\n          prevColspan = columnData?.colspan ?? 1;\r\n        }\r\n        if (prevColspan === '*') {\r\n          colspan = columns.length - col;\r\n        } else {\r\n          colspan = prevColspan;\r\n          if (columnDef.id in metadata) {\r\n            colspanColumnId = columnDef.id;\r\n            colspanStartIndex = col;\r\n          }\r\n        }\r\n      }\r\n\r\n      // when using grid with colspan, we will merge some cells together\r\n      if ((prevColspan === '*' && col > 0) || (prevColspan > 1 && columnDef.id !== colspanColumnId)) {\r\n        // -- Merge Data\r\n        // Excel row starts at 2 or at 3 when dealing with pre-header grouping\r\n        const excelRowNumber = row + (this._hasColumnTitlePreHeader ? 3 : 2);\r\n\r\n        if (typeof prevColspan === 'number' && (colspan - 1) === 1) {\r\n          // partial column span\r\n          const leftExcelColumnChar = this.getExcelColumnNameByIndex(colspanStartIndex + 1);\r\n          const rightExcelColumnChar = this.getExcelColumnNameByIndex(col + 1);\r\n          this._sheet.mergeCells(`${leftExcelColumnChar}${excelRowNumber}`, `${rightExcelColumnChar}${excelRowNumber}`);\r\n          rowOutputStrings.push(''); // clear cell that won't be shown by a cell merge\r\n        } else if (prevColspan === '*' && colspan === 1) {\r\n          // full column span (from A1 until the last column)\r\n          const rightExcelColumnChar = this.getExcelColumnNameByIndex(col + 1);\r\n          this._sheet.mergeCells(`A${excelRowNumber}`, `${rightExcelColumnChar}${excelRowNumber}`);\r\n        } else {\r\n          rowOutputStrings.push(''); // clear cell that won't be shown by a cell merge\r\n        }\r\n\r\n        // decrement colspan until we reach colspan of 1 then proceed with cell merge OR full row merge when colspan is (*)\r\n        if (typeof prevColspan === 'number' && prevColspan > 1) {\r\n          colspan = prevColspan--;\r\n        }\r\n      } else {\r\n        // -- Read Data & Push to Data Array\r\n        // get the output by analyzing if we'll pull the value from the cell or from a formatter\r\n        let itemData: ExcelCellFormat | string = exportWithFormatterWhenDefined(row, col, columnDef, itemObj, this._grid, this._excelExportOptions);\r\n\r\n        // does the user want to sanitize the output data (remove HTML tags)?\r\n        if (columnDef.sanitizeDataExport || this._excelExportOptions.sanitizeDataExport) {\r\n          itemData = sanitizeHtmlToText(itemData as string);\r\n        }\r\n\r\n        // use different Excel Stylesheet Format as per the Field Type\r\n        if (!columnDef.exportWithFormatter) {\r\n          itemData = this.useCellFormatByFieldType(itemData as string, fieldType);\r\n        }\r\n\r\n        rowOutputStrings.push(itemData);\r\n        idx++;\r\n      }\r\n    }\r\n\r\n    return rowOutputStrings as string[];\r\n  }\r\n\r\n  /**\r\n   * Get the grouped title(s) and its group title formatter, for example if we grouped by salesRep, the returned result would be:: 'Sales Rep: John Dow (2 items)'\r\n   * @param itemObj\r\n   */\r\n  private readGroupedTitleRow(itemObj: any): string {\r\n    const groupName = sanitizeHtmlToText(itemObj.title);\r\n\r\n    if (this._excelExportOptions?.addGroupIndentation) {\r\n      const collapsedSymbol = this._excelExportOptions?.groupCollapsedSymbol ?? '⮞';\r\n      const expandedSymbol = this._excelExportOptions?.groupExpandedSymbol ?? '⮟';\r\n      const chevron = itemObj.collapsed ? collapsedSymbol : expandedSymbol;\r\n      return chevron + ' ' + addWhiteSpaces(5 * itemObj.level) + groupName;\r\n    }\r\n    return groupName;\r\n  }\r\n\r\n  /**\r\n   * Get the grouped totals (below the regular rows), these are set by Slick Aggregators.\r\n   * For example if we grouped by \"salesRep\" and we have a Sum Aggregator on \"sales\", then the returned output would be:: [\"Sum 123$\"]\r\n   * @param itemObj\r\n   */\r\n  private readGroupedTotalRow(columns: Column[], itemObj: any): string[] {\r\n    const groupingAggregatorRowText = this._excelExportOptions.groupingAggregatorRowText || '';\r\n    const outputStrings = [groupingAggregatorRowText];\r\n\r\n    columns.forEach((columnDef) => {\r\n      let itemData = '';\r\n\r\n      const skippedField = columnDef.excludeFromExport || false;\r\n\r\n      // if there's a exportCustomGroupTotalsFormatter or groupTotalsFormatter, we will re-run it to get the exact same output as what is shown in UI\r\n      if (columnDef.exportCustomGroupTotalsFormatter) {\r\n        itemData = columnDef.exportCustomGroupTotalsFormatter(itemObj, columnDef);\r\n      } else {\r\n        if (columnDef.groupTotalsFormatter) {\r\n          itemData = columnDef.groupTotalsFormatter(itemObj, columnDef);\r\n        }\r\n      }\r\n\r\n      // does the user want to sanitize the output data (remove HTML tags)?\r\n      if (columnDef.sanitizeDataExport || this._excelExportOptions.sanitizeDataExport) {\r\n        itemData = sanitizeHtmlToText(itemData);\r\n      }\r\n\r\n      // add the column (unless user wants to skip it)\r\n      if ((columnDef.width === undefined || columnDef.width > 0) && !skippedField) {\r\n        outputStrings.push(itemData);\r\n      }\r\n    });\r\n\r\n    return outputStrings;\r\n  }\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { TextEncoder } from 'text-encoding-utf-8';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport {\r\n  Column,\r\n  DelimiterType,\r\n  ExportOption,\r\n  FileType,\r\n  GridOption,\r\n  KeyTitlePair,\r\n  Locale,\r\n} from './../models/index';\r\nimport { Constants } from './../constants';\r\nimport { exportWithFormatterWhenDefined } from '../formatters/formatterUtilities';\r\nimport { addWhiteSpaces, deepCopy, getTranslationPrefix, htmlEntityDecode, sanitizeHtmlToText, titleCase } from './../services/utilities';\r\n\r\n// using external non-typed js libraries\r\ndeclare let $: any;\r\n\r\nconst DEFAULT_EXPORT_OPTIONS: ExportOption = {\r\n  delimiter: DelimiterType.comma,\r\n  filename: 'export',\r\n  format: FileType.csv,\r\n  useUtf8WithBom: true,\r\n};\r\n\r\ntype ExportTextDownloadOption = {\r\n  filename: string;\r\n  content: string;\r\n  format: FileType | string;\r\n  useUtf8WithBom: boolean;\r\n};\r\n\r\n@Injectable()\r\nexport class ExportService {\r\n  private _delimiter = ',';\r\n  private _fileFormat = FileType.csv;\r\n  private _lineCarriageReturn = '\\n';\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _locales!: Locale;\r\n  private _exportQuoteWrapper = '';\r\n  private _columnHeaders!: KeyTitlePair[];\r\n  private _groupedColumnHeaders!: KeyTitlePair[];\r\n  private _hasGroupedItems = false;\r\n  private _exportOptions!: ExportOption;\r\n  onGridBeforeExportToFile = new Subject<boolean>();\r\n  onGridAfterExportToFile = new Subject<{ content?: string; filename: string; format: string; useUtf8WithBom: boolean; }>();\r\n\r\n  constructor(@Optional() private readonly translate: TranslateService) { }\r\n\r\n  private get datasetIdName(): string {\r\n    return this._gridOptions && this._gridOptions.datasetIdPropertyName || 'id';\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Export Service\r\n   * @param grid\r\n   * @param gridOptions\r\n   * @param dataView\r\n   */\r\n  init(grid: any, dataView: any): void {\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n\r\n    // get locales provided by user in forRoot or else use default English locales via the Constants\r\n    this._locales = this._gridOptions && this._gridOptions.locales || Constants.locales;\r\n\r\n    if (this._gridOptions.enableTranslate && (!this.translate || !this.translate.instant)) {\r\n      throw new Error('[Angular-Slickgrid] requires \"ngx-translate\" to be installed and configured when the grid option \"enableTranslate\" is enabled.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function to export the Grid result to an Excel CSV format using javascript for it to produce the CSV file.\r\n   * This is a WYSIWYG export to file output (What You See is What You Get)\r\n   *\r\n   * NOTES: The column position needs to match perfectly the JSON Object position because of the way we are pulling the data,\r\n   * which means that if any column(s) got moved in the UI, it has to be reflected in the JSON array output as well\r\n   *\r\n   * Example: exportToFile({ format: FileType.csv, delimiter: DelimiterType.comma })\r\n   */\r\n  exportToFile(options?: ExportOption): Promise<boolean> {\r\n    if (!this._grid || !this._dataView) {\r\n      throw new Error('[Angular-Slickgrid] it seems that the SlickGrid & DataView objects are not initialized did you forget to enable the grid option flag \"enableExport\"?');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.onGridBeforeExportToFile.next(true);\r\n      this._exportOptions = deepCopy({ ...DEFAULT_EXPORT_OPTIONS, ...this._gridOptions.exportOptions, ...options });\r\n      this._delimiter = this._exportOptions.delimiterOverride || this._exportOptions.delimiter || '';\r\n      this._fileFormat = this._exportOptions.format || FileType.csv;\r\n\r\n      // get the CSV output from the grid data\r\n      const dataOutput = this.getDataOutput();\r\n\r\n      // trigger a download file\r\n      // wrap it into a setTimeout so that the EventAggregator has enough time to start a pre-process like showing a spinner\r\n      setTimeout(() => {\r\n        try {\r\n          const downloadOptions = {\r\n            filename: `${this._exportOptions.filename}.${this._fileFormat}`,\r\n            format: this._fileFormat,\r\n            useUtf8WithBom: this._exportOptions.hasOwnProperty('useUtf8WithBom') ? this._exportOptions.useUtf8WithBom : true\r\n          };\r\n\r\n          // start downloading but add the content property only on the start download not on the event itself\r\n          this.startDownloadFile({ ...downloadOptions, content: dataOutput } as ExportTextDownloadOption); // add content property\r\n          this.onGridAfterExportToFile.next(downloadOptions as ExportTextDownloadOption);\r\n          resolve(true);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }, 0);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Triggers download file with file format.\r\n   * IE(6-10) are not supported\r\n   * All other browsers will use plain javascript on client side to produce a file download.\r\n   * @param options\r\n   */\r\n  startDownloadFile(options: ExportTextDownloadOption) {\r\n    // IE(6-10) don't support javascript download and our service doesn't support either so throw an error, we have to make a round trip to the Web Server for exporting\r\n    if (navigator.appName === 'Microsoft Internet Explorer') {\r\n      throw new Error('Microsoft Internet Explorer 6 to 10 do not support javascript export to CSV. Please upgrade your browser.');\r\n    }\r\n\r\n    // set the correct MIME type\r\n    const mimeType = (options.format === FileType.csv) ? 'text/csv' : 'text/plain';\r\n\r\n    // make sure no html entities exist in the data\r\n    const dataContent = htmlEntityDecode(options.content);\r\n\r\n    // dealing with Excel CSV export and UTF-8 is a little tricky.. We will use Option #2 to cover older Excel versions\r\n    // Option #1: we need to make Excel knowing that it's dealing with an UTF-8, A correctly formatted UTF8 file can have a Byte Order Mark as its first three octets\r\n    // reference: http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\r\n    // Option#2: use a 3rd party extension to javascript encode into UTF-16\r\n    let outputData: Uint8Array | string;\r\n    if (options.format === FileType.csv) {\r\n      outputData = new TextEncoder('utf-8').encode(dataContent);\r\n    } else {\r\n      outputData = dataContent;\r\n    }\r\n\r\n    // create a Blob object for the download\r\n    const blob = new Blob([options.useUtf8WithBom ? '\\uFEFF' : '', outputData], {\r\n      type: `${mimeType};charset=utf-8;`\r\n    });\r\n\r\n    // when using IE/Edge, then use different download call\r\n    if (typeof navigator.msSaveOrOpenBlob === 'function') {\r\n      navigator.msSaveOrOpenBlob(blob, options.filename);\r\n    } else {\r\n      // this trick will generate a temp <a /> tag\r\n      // the code will then trigger a hidden click for it to start downloading\r\n      const link = document.createElement('a');\r\n      const csvUrl = URL.createObjectURL(blob);\r\n\r\n      link.textContent = 'download';\r\n      link.href = csvUrl;\r\n      link.setAttribute('download', options.filename);\r\n\r\n      // set the visibility to hidden so there is no effect on your web-layout\r\n      link.style.visibility = 'hidden';\r\n\r\n      // this part will append the anchor tag, trigger a click (for download to start) and finally remove the tag once completed\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    }\r\n  }\r\n\r\n  // -----------------------\r\n  // Private functions\r\n  // -----------------------\r\n\r\n  private getDataOutput(): string {\r\n    const columns = this._grid.getColumns() || [];\r\n\r\n    // Group By text, it could be set in the export options or from translation or if nothing is found then use the English constant text\r\n    let groupByColumnHeader = this._exportOptions.groupingColumnHeaderTitle;\r\n    if (!groupByColumnHeader && this._gridOptions.enableTranslate && this.translate && this.translate.currentLang && this.translate.instant) {\r\n      groupByColumnHeader = this.translate.instant(`${getTranslationPrefix(this._gridOptions)}GROUP_BY`);\r\n    } else if (!groupByColumnHeader) {\r\n      groupByColumnHeader = this._locales && this._locales.TEXT_GROUP_BY;\r\n    }\r\n\r\n    // a CSV needs double quotes wrapper, the other types do not need any wrapper\r\n    this._exportQuoteWrapper = (this._fileFormat === FileType.csv) ? '\"' : '';\r\n\r\n    // data variable which will hold all the fields data of a row\r\n    let outputDataString = '';\r\n\r\n    // get grouped column titles and if found, we will add a \"Group by\" column at the first column index\r\n    // if it's a CSV format, we'll escape the text in double quotes\r\n    const grouping = this._dataView.getGrouping();\r\n    if (grouping && Array.isArray(grouping) && grouping.length > 0) {\r\n      this._hasGroupedItems = true;\r\n      outputDataString += (this._fileFormat === FileType.csv) ? `\"${groupByColumnHeader}\"${this._delimiter}` : `${groupByColumnHeader}${this._delimiter}`;\r\n    } else {\r\n      this._hasGroupedItems = false;\r\n    }\r\n\r\n    // get all Grouped Column Header Titles when defined (from pre-header row)\r\n    if (this._gridOptions.createPreHeaderPanel && this._gridOptions.showPreHeaderPanel && !this._gridOptions.enableDraggableGrouping) {\r\n      this._groupedColumnHeaders = this.getColumnGroupedHeaderTitles(columns) || [];\r\n      if (this._groupedColumnHeaders && Array.isArray(this._groupedColumnHeaders) && this._groupedColumnHeaders.length > 0) {\r\n        // add the header row + add a new line at the end of the row\r\n        const outputGroupedHeaderTitles = this._groupedColumnHeaders.map((header) => `${this._exportQuoteWrapper}${header.title}${this._exportQuoteWrapper}`);\r\n        outputDataString += (outputGroupedHeaderTitles.join(this._delimiter) + this._lineCarriageReturn);\r\n      }\r\n    }\r\n\r\n    // get all Column Header Titles\r\n    this._columnHeaders = this.getColumnHeaders(columns) || [];\r\n    if (this._columnHeaders && Array.isArray(this._columnHeaders) && this._columnHeaders.length > 0) {\r\n      // add the header row + add a new line at the end of the row\r\n      const outputHeaderTitles = this._columnHeaders.map((header) => `${this._exportQuoteWrapper}${header.title}${this._exportQuoteWrapper}`);\r\n      outputDataString += (outputHeaderTitles.join(this._delimiter) + this._lineCarriageReturn);\r\n    }\r\n\r\n    // Populate the rest of the Grid Data\r\n    outputDataString += this.getAllGridRowData(columns, this._lineCarriageReturn);\r\n\r\n    return outputDataString;\r\n  }\r\n\r\n  /**\r\n   * Get all the grid row data and return that as an output string\r\n   */\r\n  private getAllGridRowData(columns: Column[], lineCarriageReturn: string): string {\r\n    const outputDataStrings = [];\r\n    const lineCount = this._dataView.getLength();\r\n\r\n    // loop through all the grid rows of data\r\n    for (let rowNumber = 0; rowNumber < lineCount; rowNumber++) {\r\n      const itemObj = this._dataView.getItem(rowNumber);\r\n      if (itemObj) {\r\n        // Normal row (not grouped by anything) would have an ID which was predefined in the Grid Columns definition\r\n        if (itemObj[this.datasetIdName] !== null && itemObj[this.datasetIdName] !== undefined) {\r\n          // get regular row item data\r\n          outputDataStrings.push(this.readRegularRowData(columns, rowNumber, itemObj));\r\n        } else if (this._hasGroupedItems && itemObj.__groupTotals === undefined) {\r\n          // get the group row\r\n          outputDataStrings.push(this.readGroupedTitleRow(itemObj));\r\n        } else if (itemObj.__groupTotals) {\r\n          // else if the row is a Group By and we have agreggators, then a property of '__groupTotals' would exist under that object\r\n          outputDataStrings.push(this.readGroupedTotalRow(columns, itemObj));\r\n        }\r\n      }\r\n    }\r\n\r\n    return outputDataStrings.join(lineCarriageReturn);\r\n  }\r\n\r\n  /**\r\n * Get all Grouped Header Titles and their keys, translate the title when required.\r\n * @param {Array<object>} columns of the grid\r\n */\r\n  private getColumnGroupedHeaderTitles(columns: Column[]): KeyTitlePair[] {\r\n    const groupedColumnHeaders: KeyTitlePair[] = [];\r\n\r\n    if (columns && Array.isArray(columns)) {\r\n      // Populate the Grouped Column Header, pull the columnGroup(Key) defined\r\n      columns.forEach((columnDef) => {\r\n        let groupedHeaderTitle = '';\r\n        if ((columnDef.columnGroupKey || columnDef.columnGroupKey) && this._gridOptions.enableTranslate && this.translate && this.translate.currentLang && this.translate.instant) {\r\n          groupedHeaderTitle = this.translate.instant((columnDef.columnGroupKey || columnDef.columnGroupKey));\r\n        } else {\r\n          groupedHeaderTitle = columnDef.columnGroup || '';\r\n        }\r\n        const skippedField = columnDef.excludeFromExport || false;\r\n\r\n        // if column width is 0px, then we consider that field as a hidden field and should not be part of the export\r\n        if ((columnDef.width === undefined || columnDef.width > 0) && !skippedField) {\r\n          groupedColumnHeaders.push({\r\n            key: (columnDef.field || columnDef.id) as string,\r\n            title: groupedHeaderTitle || ''\r\n          });\r\n        }\r\n      });\r\n    }\r\n    return groupedColumnHeaders;\r\n  }\r\n\r\n  /**\r\n   * Get all header titles and their keys, translate the title when required.\r\n   * @param {Array<object>} columns of the grid\r\n   */\r\n  private getColumnHeaders(columns: Column[]): KeyTitlePair[] {\r\n    const columnHeaders: any[] = [];\r\n\r\n    if (columns && Array.isArray(columns)) {\r\n      // Populate the Column Header, pull the name defined\r\n      columns.forEach((columnDef) => {\r\n        let headerTitle = '';\r\n        if ((columnDef.headerKey || columnDef.nameKey) && this._gridOptions.enableTranslate && this.translate && this.translate.currentLang && this.translate.instant) {\r\n          headerTitle = this.translate.instant((columnDef.headerKey || columnDef.nameKey) || ' ');\r\n        } else {\r\n          headerTitle = columnDef.name || titleCase(columnDef.field);\r\n        }\r\n        const skippedField = columnDef.excludeFromExport || false;\r\n\r\n        // if column width is 0, then we consider that field as a hidden field and should not be part of the export\r\n        if ((columnDef.width === undefined || columnDef.width > 0) && !skippedField) {\r\n          columnHeaders.push({\r\n            key: columnDef.field || columnDef.id,\r\n            title: headerTitle\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    return columnHeaders;\r\n  }\r\n\r\n  /**\r\n   * Get the data of a regular row (a row without grouping)\r\n   * @param row\r\n   * @param itemObj\r\n   */\r\n  private readRegularRowData(columns: Column[], row: number, itemObj: any) {\r\n    let idx = 0;\r\n    const rowOutputStrings = [];\r\n    const exportQuoteWrapper = this._exportQuoteWrapper;\r\n    let prevColspan: number | '*' = 1;\r\n    const itemMetadata = this._dataView.getItemMetadata(row);\r\n\r\n    for (let col = 0, ln = columns.length; col < ln; col++) {\r\n      const columnDef = columns[col];\r\n\r\n      // skip excluded column\r\n      if (columnDef.excludeFromExport) {\r\n        continue;\r\n      }\r\n\r\n      // if we are grouping and are on 1st column index, we need to skip this column since it will be used later by the grouping text:: Group by [columnX]\r\n      if (this._hasGroupedItems && idx === 0) {\r\n        const emptyValue = this._fileFormat === FileType.csv ? `\"\"` : '';\r\n        rowOutputStrings.push(emptyValue);\r\n      }\r\n\r\n      let colspanColumnId;\r\n      if (itemMetadata?.columns) {\r\n        const metadata = itemMetadata?.columns;\r\n        const columnData = metadata[columnDef.id] || metadata[col];\r\n        if (!(prevColspan > 1 || (prevColspan === '*' && col > 0))) {\r\n          prevColspan = columnData?.colspan ?? 1;\r\n        }\r\n        if (prevColspan !== '*') {\r\n          if (columnDef.id in metadata) {\r\n            colspanColumnId = columnDef.id;\r\n          }\r\n        }\r\n      }\r\n\r\n      if ((prevColspan === '*' && col > 0) || (prevColspan > 1 && columnDef.id !== colspanColumnId)) {\r\n        rowOutputStrings.push('');\r\n        if (prevColspan > 1) {\r\n          (prevColspan as number)--;\r\n        }\r\n      } else {\r\n        // get the output by analyzing if we'll pull the value from the cell or from a formatter\r\n        let itemData = exportWithFormatterWhenDefined(row, col, columnDef, itemObj, this._grid, this._exportOptions);\r\n\r\n        // does the user want to sanitize the output data (remove HTML tags)?\r\n        if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\r\n          itemData = sanitizeHtmlToText(itemData);\r\n        }\r\n\r\n        // when CSV we also need to escape double quotes twice, so \" becomes \"\"\r\n        if (this._fileFormat === FileType.csv && itemData) {\r\n          itemData = itemData.toString().replace(/\"/gi, `\"\"`);\r\n        }\r\n\r\n        // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\r\n        // to cancel that effect we can had = in front, ex: =\"1E06\"\r\n        const keepAsStringWrapper = columnDef?.exportCsvForceToKeepAsString ? '=' : '';\r\n\r\n        rowOutputStrings.push(keepAsStringWrapper + exportQuoteWrapper + itemData + exportQuoteWrapper);\r\n      }\r\n\r\n      idx++;\r\n    }\r\n\r\n    return rowOutputStrings.join(this._delimiter);\r\n  }\r\n\r\n  /**\r\n   * Get the grouped title(s) and its group title formatter, for example if we grouped by salesRep, the returned result would be:: 'Sales Rep: John Dow (2 items)'\r\n   * @param itemObj\r\n   */\r\n  private readGroupedTitleRow(itemObj: any) {\r\n    let groupName = sanitizeHtmlToText(itemObj.title);\r\n    const exportQuoteWrapper = this._exportQuoteWrapper;\r\n\r\n    groupName = addWhiteSpaces(5 * itemObj.level) + groupName;\r\n\r\n    if (this._fileFormat === FileType.csv) {\r\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\r\n      groupName = groupName.toString().replace(/\"/gi, `\"\"`);\r\n    }\r\n    return exportQuoteWrapper + groupName + exportQuoteWrapper;\r\n  }\r\n\r\n  /**\r\n   * Get the grouped totals (below the regular rows), these are set by Slick Aggregators.\r\n   * For example if we grouped by \"salesRep\" and we have a Sum Aggregator on \"sales\", then the returned output would be:: [\"Sum 123$\"]\r\n   * @param itemObj\r\n   */\r\n  private readGroupedTotalRow(columns: Column[], itemObj: any) {\r\n    const delimiter = this._exportOptions.delimiter;\r\n    const format = this._exportOptions.format;\r\n    const groupingAggregatorRowText = this._exportOptions.groupingAggregatorRowText || '';\r\n    const exportQuoteWrapper = this._exportQuoteWrapper;\r\n    const outputStrings = [`${exportQuoteWrapper}${groupingAggregatorRowText}${exportQuoteWrapper}`];\r\n\r\n    columns.forEach((columnDef) => {\r\n      let itemData = '';\r\n\r\n      const skippedField = columnDef.excludeFromExport || false;\r\n\r\n      // if there's a groupTotalsFormatter, we will re-run it to get the exact same output as what is shown in UI\r\n      if (columnDef.groupTotalsFormatter) {\r\n        itemData = columnDef.groupTotalsFormatter(itemObj, columnDef);\r\n      }\r\n\r\n      // does the user want to sanitize the output data (remove HTML tags)?\r\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\r\n        itemData = sanitizeHtmlToText(itemData);\r\n      }\r\n\r\n      if (format === FileType.csv) {\r\n        // when CSV we also need to escape double quotes twice, so a double quote \" becomes 2x double quotes \"\"\r\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\r\n      }\r\n\r\n      // add the column (unless user wants to skip it)\r\n      if ((columnDef.width === undefined || columnDef.width > 0) && !skippedField) {\r\n        outputStrings.push(exportQuoteWrapper + itemData + exportQuoteWrapper);\r\n      }\r\n    });\r\n\r\n    return outputStrings.join(delimiter);\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { Column, CurrentPagination, GridOption } from '../models';\r\n\r\n@Injectable()\r\nexport class SharedService {\r\n  private _allColumns: Column[] = [];\r\n  private _dataView: any;\r\n  private _groupItemMetadataProvider: any;\r\n  private _grid: any;\r\n  private _gridOptions!: GridOption;\r\n  private _hasColumnsReordered = false;\r\n  private _currentPagination: CurrentPagination | undefined;\r\n  private _hideHeaderRowAfterPageLoad = false;\r\n  private _visibleColumns: Column[] = [];\r\n  private _hierarchicalDataset: any[] | undefined;\r\n  private _frozenVisibleColumnId: string | number | undefined;\r\n  onHeaderMenuHideColumns = new Subject<Column[]>();\r\n\r\n  // --\r\n  // public\r\n\r\n  /** Getter for All Columns  in the grid (hidden/visible) */\r\n  get allColumns(): Column[] {\r\n    return this._allColumns;\r\n  }\r\n  /** Setter for All Columns  in the grid (hidden/visible) */\r\n  set allColumns(allColumns: Column[]) {\r\n    this._allColumns = allColumns;\r\n  }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  get columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  /** Getter for the Current Pagination (when Pagination is enabled) */\r\n  get currentPagination(): CurrentPagination | undefined {\r\n    return this._currentPagination;\r\n  }\r\n\r\n  /** Setter for the Current Pagination (when Pagination is enabled) */\r\n  set currentPagination(currentPagination: CurrentPagination | undefined) {\r\n    this._currentPagination = currentPagination;\r\n  }\r\n\r\n  /** Getter for SlickGrid DataView object */\r\n  get dataView(): any {\r\n    return this._dataView;\r\n  }\r\n  /** Setter for SlickGrid DataView object */\r\n  set dataView(dataView: any) {\r\n    this._dataView = dataView;\r\n  }\r\n\r\n  /** Setter to keep the frozen column id for reference if we ever show/hide column from ColumnPicker/GridMenu afterward */\r\n  get frozenVisibleColumnId(): string | number | undefined {\r\n    return this._frozenVisibleColumnId;\r\n  }\r\n  /** Getter to keep the frozen column id for reference if we ever show/hide column from ColumnPicker/GridMenu afterward */\r\n  set frozenVisibleColumnId(columnId: string | number | undefined) {\r\n    this._frozenVisibleColumnId = columnId;\r\n  }\r\n\r\n  /** Setter to keep the frozen column id for reference if we ever show/hide column from ColumnPicker/GridMenu afterward */\r\n  get hasColumnsReordered(): boolean {\r\n    return this._hasColumnsReordered;\r\n  }\r\n  /** Getter to keep the frozen column id for reference if we ever show/hide column from ColumnPicker/GridMenu afterward */\r\n  set hasColumnsReordered(isColumnReordered: boolean) {\r\n    this._hasColumnsReordered = isColumnReordered;\r\n  }\r\n\r\n  /** Getter for SlickGrid Grid object */\r\n  get grid(): any {\r\n    return this._grid;\r\n  }\r\n  /** Setter for SlickGrid Grid object */\r\n  set grid(grid: any) {\r\n    this._grid = grid;\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  get gridOptions(): GridOption {\r\n    return this._gridOptions || this._grid && this._grid.getOptions && this._grid.getOptions() || {};\r\n  }\r\n\r\n  /** Setter for the Grid Options pulled through the Grid Object */\r\n  set gridOptions(gridOptions: GridOption) {\r\n    this._gridOptions = gridOptions;\r\n  }\r\n\r\n  /** Getter for the Grid Options */\r\n  get groupItemMetadataProvider(): any {\r\n    return this._groupItemMetadataProvider;\r\n  }\r\n  /** Setter for the Grid Options */\r\n  set groupItemMetadataProvider(groupItemMetadataProvider: any) {\r\n    this._groupItemMetadataProvider = groupItemMetadataProvider;\r\n  }\r\n\r\n  /** Getter to know if user want to hide header row after 1st page load */\r\n  get hideHeaderRowAfterPageLoad(): boolean {\r\n    return this._hideHeaderRowAfterPageLoad;\r\n  }\r\n  /** Setter for knowing if user want to hide header row after 1st page load */\r\n  set hideHeaderRowAfterPageLoad(hideHeaderRowAfterPageLoad: boolean) {\r\n    this._hideHeaderRowAfterPageLoad = hideHeaderRowAfterPageLoad;\r\n  }\r\n\r\n  /** Getter for the Visible Columns in the grid */\r\n  get visibleColumns(): Column[] {\r\n    return this._visibleColumns;\r\n  }\r\n  /** Setter for the Visible Columns in the grid */\r\n  set visibleColumns(visibleColumns: Column[]) {\r\n    this._visibleColumns = visibleColumns;\r\n  }\r\n\r\n  /** Getter for the Hierarchical Tree Data dataset when the feature is enabled */\r\n  get hierarchicalDataset(): any[] | undefined {\r\n    return this._hierarchicalDataset;\r\n  }\r\n\r\n  /** Getter for the Hierarchical Tree Data dataset when the feature is enabled */\r\n  set hierarchicalDataset(hierarchicalDataset: any[] | undefined) {\r\n    this._hierarchicalDataset = hierarchicalDataset;\r\n  }\r\n}\r\n","import 'slickgrid/plugins/slick.autotooltips';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Extension } from '../models/index';\r\nimport { SharedService } from '../services/shared.service';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n@Injectable()\r\nexport class AutoTooltipExtension implements Extension {\r\n  private _addon: any;\r\n\r\n  constructor(private sharedService: SharedService) { }\r\n\r\n  dispose() {\r\n    if (this._addon && this._addon.destroy) {\r\n      this._addon.destroy();\r\n      this._addon = null;\r\n    }\r\n  }\r\n\r\n  /** Get the instance of the SlickGrid addon (control or plugin). */\r\n  getAddonInstance() {\r\n    return this._addon;\r\n  }\r\n\r\n  register(): any {\r\n    if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {\r\n      this._addon = new Slick.AutoTooltips(this.sharedService.gridOptions.autoTooltipOptions || {});\r\n      this.sharedService.grid.registerPlugin(this._addon);\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { Constants } from '../constants';\r\nimport { Column, Locale } from '../models/index';\r\nimport { SharedService } from '../services/shared.service';\r\nimport { getTranslationPrefix } from '../services/utilities';\r\n\r\n@Injectable()\r\nexport class ExtensionUtility {\r\n  constructor(private sharedService: SharedService, @Optional() private readonly translate: TranslateService) { }\r\n\r\n  /**\r\n   * From a Grid Menu object property name, we will return the correct title output string following this order\r\n   * 1- if user provided a title, use it as the output title\r\n   * 2- else if user provided a title key, use it to translate the output title\r\n   * 3- else if nothing is provided use text defined as constants\r\n   */\r\n  getPickerTitleOutputString(propName: string, pickerName: 'gridMenu' | 'columnPicker') {\r\n    if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableTranslate && (!this.translate || !this.translate.instant)) {\r\n      throw new Error('[Angular-Slickgrid] requires \"ngx-translate\" to be installed and configured when the grid option \"enableTranslate\" is enabled.');\r\n    }\r\n\r\n    let output = '';\r\n    const picker = this.sharedService.gridOptions && this.sharedService.gridOptions[pickerName] || {};\r\n    const enableTranslate = this.sharedService.gridOptions && this.sharedService.gridOptions.enableTranslate || false;\r\n\r\n    // get locales provided by user in forRoot or else use default English locales via the Constants\r\n    const locales = this.sharedService && this.sharedService.gridOptions && this.sharedService.gridOptions.locales || Constants.locales;\r\n\r\n    const title = picker && (picker as any)[propName];\r\n    const titleKey = picker && (picker as any)[`${propName}Key`];\r\n    const gridOptions = this.sharedService.gridOptions;\r\n    const translationPrefix = getTranslationPrefix(gridOptions);\r\n\r\n    if (titleKey && this.translate && this.translate.currentLang && this.translate.instant) {\r\n      output = this.translate.instant(titleKey || ' ');\r\n    } else {\r\n      switch (propName) {\r\n        case 'customTitle':\r\n          output = title || enableTranslate && this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(`${translationPrefix}COMMANDS` || ' ') || locales && locales.TEXT_COMMANDS;\r\n          break;\r\n        case 'columnTitle':\r\n          output = title || enableTranslate && this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(`${translationPrefix}COLUMNS` || ' ') || locales && locales.TEXT_COLUMNS;\r\n          break;\r\n        case 'forceFitTitle':\r\n          output = title || enableTranslate && this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(`${translationPrefix}FORCE_FIT_COLUMNS` || ' ') || locales && locales.TEXT_FORCE_FIT_COLUMNS;\r\n          break;\r\n        case 'syncResizeTitle':\r\n          output = title || enableTranslate && this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(`${translationPrefix}SYNCHRONOUS_RESIZE` || ' ') || locales && locales.TEXT_SYNCHRONOUS_RESIZE;\r\n          break;\r\n        default:\r\n          output = title;\r\n          break;\r\n      }\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Loop through object provided and set to null any property found starting with \"onX\"\r\n   * @param {Object}: obj\r\n   */\r\n  nullifyFunctionNameStartingWithOn(obj?: any) {\r\n    if (obj) {\r\n      for (const prop of Object.keys(obj)) {\r\n        if (prop.startsWith('on')) {\r\n          obj[prop] = null;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When using ColumnPicker/GridMenu to show/hide a column, we potentially need to readjust the grid option \"frozenColumn\" index.\r\n   * That is because SlickGrid freezes by column index and it has no knowledge of the columns themselves and won't change the index, we need to do that ourselves whenever necessary.\r\n   * Note: we call this method right after the visibleColumns array got updated, it won't work properly if we call it before the setting the visibleColumns.\r\n   * @param {Number} frozenColumnIndex - current frozenColumn index\r\n   * @param {Array<Object>} allColumns - all columns (including hidden ones)\r\n   * @param {Array<Object>} visibleColumns - only visible columns (excluding hidden ones)\r\n   */\r\n  readjustFrozenColumnIndexWhenNeeded(frozenColumnIndex: number, allColumns: Column[], visibleColumns: Column[]) {\r\n    if (frozenColumnIndex >= 0) {\r\n      const recalculatedFrozenColumnIndex = visibleColumns.findIndex(col => col.id === this.sharedService.frozenVisibleColumnId);\r\n      if (recalculatedFrozenColumnIndex >= 0 && recalculatedFrozenColumnIndex !== frozenColumnIndex) {\r\n        this.sharedService.gridOptions.frozenColumn = recalculatedFrozenColumnIndex;\r\n        this.sharedService.grid.setOptions({ frozenColumn: recalculatedFrozenColumnIndex });\r\n      }\r\n\r\n      // to freeze columns, we need to take only the visible columns and we also need to use setColumns() when some of them are hidden\r\n      // to make sure that we only use the visible columns, not doing this would show back some of the hidden columns\r\n      if (Array.isArray(visibleColumns) && Array.isArray(allColumns) && visibleColumns.length !== allColumns.length) {\r\n        this.sharedService.grid.setColumns(visibleColumns);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sort items (by pointers) in an array by a property name\r\n   * @params items array\r\n   * @param property name to sort with\r\n   */\r\n  sortItems<T = any>(items: T[], propertyName: string) {\r\n    // sort the custom items by their position in the list\r\n    if (Array.isArray(items)) {\r\n      items.sort((itemA: T, itemB: T) => {\r\n        if (itemA && itemB && (itemA as any).hasOwnProperty(propertyName) && (itemB as any).hasOwnProperty(propertyName)) {\r\n          return (itemA as any)[propertyName] - (itemB as any)[propertyName];\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Translate the an array of items from an input key and assign to the output key */\r\n  translateItems<T = any>(items: T[], inputKey: string, outputKey: string) {\r\n    if (Array.isArray(items)) {\r\n      for (const item of items) {\r\n        if ((item as any)[inputKey]) {\r\n          (item as any)[outputKey] = this.translate && this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant((item as any)[inputKey]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When \"enabledTranslate\" is set to True, we will try to translate if the Translate Service exist or use the Locales when not\r\n   * @param {String} translationKey\r\n   * @param {String} localeKey\r\n   * @param {String} textToUse - optionally provide a static text to use (that will completely override the other arguments of the method)\r\n   */\r\n  translateWhenEnabledAndServiceExist(translationKey: string, localeKey: string, textToUse?: string): string {\r\n    let text = '';\r\n    const gridOptions = this.sharedService?.gridOptions;\r\n\r\n    // get locales provided by user in main file or else use default English locales via the Constants\r\n    const locales = gridOptions?.locales ?? Constants.locales;\r\n\r\n    if (textToUse) {\r\n      text = textToUse;\r\n    } else if (gridOptions.enableTranslate && this.translate?.instant) {\r\n      text = this.translate.instant(translationKey || ' ');\r\n    } else if (localeKey in locales) {\r\n      text = locales[localeKey as keyof Locale] as string;\r\n    } else {\r\n      text = localeKey;\r\n    }\r\n    return text;\r\n  }\r\n}\r\n","import 'slickgrid/plugins/slick.cellexternalcopymanager';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport {\r\n  Column,\r\n  EditCommand,\r\n  EditUndoRedoBuffer,\r\n  ExcelCopyBufferOption,\r\n  Extension,\r\n  SelectedRange,\r\n  SlickEventHandler,\r\n} from '../models/index';\r\nimport { ExtensionUtility } from './extensionUtility';\r\nimport { BindingEventService } from '../services/bindingEvent.service';\r\nimport { sanitizeHtmlToText } from '../services/utilities';\r\nimport { SharedService } from '../services/shared.service';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\ndeclare const $: any;\r\n\r\n@Injectable()\r\nexport class CellExternalCopyManagerExtension implements Extension {\r\n  private _addon: any;\r\n  private _addonOptions!: ExcelCopyBufferOption | null;\r\n  private _bindingEventService: BindingEventService;\r\n  private _cellSelectionModel: any;\r\n  private _eventHandler: SlickEventHandler;\r\n  private _commandQueue!: EditCommand[];\r\n  private _undoRedoBuffer!: EditUndoRedoBuffer;\r\n\r\n  constructor(private extensionUtility: ExtensionUtility, private sharedService: SharedService) {\r\n    this._eventHandler = new Slick.EventHandler();\r\n    this._bindingEventService = new BindingEventService();\r\n  }\r\n\r\n  get addonOptions(): ExcelCopyBufferOption | null {\r\n    return this._addonOptions;\r\n  }\r\n\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  get commandQueue(): EditCommand[] {\r\n    return this._commandQueue;\r\n  }\r\n\r\n  get undoRedoBuffer(): EditUndoRedoBuffer {\r\n    return this._undoRedoBuffer;\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n    this._bindingEventService.unbindAll();\r\n\r\n    if (this._addon && this._addon.destroy) {\r\n      this._addon.destroy();\r\n    }\r\n    if (this._cellSelectionModel && this._cellSelectionModel.destroy) {\r\n      this._cellSelectionModel.destroy();\r\n    }\r\n    this.extensionUtility.nullifyFunctionNameStartingWithOn(this._addonOptions);\r\n    this._addon = null;\r\n    this._addonOptions = null;\r\n  }\r\n\r\n  /** Get the instance of the SlickGrid addon (control or plugin). */\r\n  getAddonInstance(): any {\r\n    return this._addon;\r\n  }\r\n\r\n  register(): any {\r\n    if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {\r\n      this.createUndoRedoBuffer();\r\n      this._bindingEventService.bind(document.body, 'keydown', this.handleKeyDown.bind(this) as EventListener);\r\n\r\n      this._addonOptions = { ...this.getDefaultOptions(), ...this.sharedService.gridOptions.excelCopyBufferOptions } as ExcelCopyBufferOption;\r\n      this._cellSelectionModel = new Slick.CellSelectionModel();\r\n      this.sharedService.grid.setSelectionModel(this._cellSelectionModel);\r\n      this._addon = new Slick.CellExternalCopyManager(this._addonOptions);\r\n      if (this._addon) {\r\n        this.sharedService.grid.registerPlugin(this._addon);\r\n      }\r\n\r\n      // hook to all possible events\r\n      if (this.sharedService.grid && this._addonOptions) {\r\n        if (this._addonOptions.onExtensionRegistered) {\r\n          this._addonOptions.onExtensionRegistered(this._addon);\r\n        }\r\n        this._eventHandler.subscribe(this._addon.onCopyCells, (e: any, args: { ranges: SelectedRange[] }) => {\r\n          if (this._addonOptions && typeof this._addonOptions.onCopyCells === 'function') {\r\n            this._addonOptions.onCopyCells(e, args);\r\n          }\r\n        });\r\n        this._eventHandler.subscribe(this._addon.onCopyCancelled, (e: any, args: { ranges: SelectedRange[] }) => {\r\n          if (this._addonOptions && typeof this._addonOptions.onCopyCancelled === 'function') {\r\n            this._addonOptions.onCopyCancelled(e, args);\r\n          }\r\n        });\r\n        this._eventHandler.subscribe(this._addon.onPasteCells, (e: any, args: { ranges: SelectedRange[] }) => {\r\n          if (this._addonOptions && typeof this._addonOptions.onPasteCells === 'function') {\r\n            this._addonOptions.onPasteCells(e, args);\r\n          }\r\n        });\r\n      }\r\n\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Create an undo redo buffer used by the Excel like copy */\r\n  private createUndoRedoBuffer() {\r\n    let commandCtr = 0;\r\n    this._commandQueue = [];\r\n\r\n    this._undoRedoBuffer = {\r\n      queueAndExecuteCommand: (editCommand: EditCommand) => {\r\n        this._commandQueue[commandCtr] = editCommand;\r\n        commandCtr++;\r\n        editCommand.execute();\r\n      },\r\n      undo: () => {\r\n        if (commandCtr === 0) {\r\n          return;\r\n        }\r\n        commandCtr--;\r\n        const command = this._commandQueue[commandCtr];\r\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\r\n          command.undo();\r\n        }\r\n      },\r\n      redo: () => {\r\n        if (commandCtr >= this._commandQueue.length) {\r\n          return;\r\n        }\r\n        const command = this._commandQueue[commandCtr];\r\n        commandCtr++;\r\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\r\n          command.execute();\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  /** @return default plugin (addon) options */\r\n  private getDefaultOptions(): ExcelCopyBufferOption {\r\n    let newRowIds = 0;\r\n\r\n    return {\r\n      clipboardCommandHandler: (editCommand: any) => {\r\n        this._undoRedoBuffer.queueAndExecuteCommand.call(this._undoRedoBuffer, editCommand);\r\n      },\r\n      dataItemColumnValueExtractor: (item: any, columnDef: Column) => {\r\n        // when grid or cell is not editable, we will possibly evaluate the Formatter if it was passed\r\n        // to decide if we evaluate the Formatter, we will use the same flag from Export which is \"exportWithFormatter\"\r\n        if (!this.sharedService.gridOptions.editable || !columnDef.editor) {\r\n          const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : (this.sharedService.gridOptions.exportOptions && this.sharedService.gridOptions.exportOptions.exportWithFormatter);\r\n          if (columnDef.formatter && isEvaluatingFormatter) {\r\n            const formattedOutput = columnDef.formatter(0, 0, item[columnDef.field], columnDef, item, this.sharedService.grid);\r\n            if (columnDef.sanitizeDataExport || (this.sharedService.gridOptions.exportOptions && this.sharedService.gridOptions.exportOptions.sanitizeDataExport)) {\r\n              let outputString = formattedOutput as string;\r\n              if (formattedOutput && typeof formattedOutput === 'object' && formattedOutput.hasOwnProperty('text')) {\r\n                outputString = formattedOutput.text;\r\n              }\r\n              if (outputString === null) {\r\n                outputString = '';\r\n              }\r\n              return sanitizeHtmlToText(outputString);\r\n            }\r\n            return formattedOutput;\r\n          }\r\n        }\r\n        // else use the default \"dataItemColumnValueExtractor\" from the plugin itself\r\n        // we can do that by setting back the getter with null\r\n        return null;\r\n      },\r\n      readOnlyMode: false,\r\n      includeHeaderWhenCopying: false,\r\n      newRowCreator: (count: number) => {\r\n        for (let i = 0; i < count; i++) {\r\n          const item = {\r\n            id: 'newRow_' + newRowIds++\r\n          };\r\n          this.sharedService.grid.getData().addItem(item);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  /** Hook an undo shortcut key hook that will redo/undo the copy buffer using Ctrl+(Shift)+Z keyboard events */\r\n  private handleKeyDown(e: KeyboardEvent) {\r\n    const keyCode = e.keyCode || e.code;\r\n    if (keyCode === 90 && (e.ctrlKey || e.metaKey)) {\r\n      if (e.shiftKey) {\r\n        this._undoRedoBuffer.redo(); // Ctrl + Shift + Z\r\n      } else {\r\n        this._undoRedoBuffer.undo(); // Ctrl + Z\r\n      }\r\n    }\r\n  }\r\n}\r\n","import 'slickgrid/plugins/slick.cellmenu';\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { Constants } from '../constants';\r\nimport {\r\n  CellMenu,\r\n  Column,\r\n  Extension,\r\n  MenuCommandItem,\r\n  MenuCommandItemCallbackArgs,\r\n  MenuOptionItemCallbackArgs,\r\n  MenuOptionItem,\r\n  Locale,\r\n  SlickEventHandler,\r\n} from '../models/index';\r\nimport { SharedService } from '../services/shared.service';\r\nimport { ExtensionUtility } from './extensionUtility';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n@Injectable()\r\nexport class CellMenuExtension implements Extension {\r\n  private _addon: any;\r\n  private _cellMenuOptions!: CellMenu | null;\r\n  private _eventHandler: SlickEventHandler;\r\n  private _locales!: Locale;\r\n\r\n  constructor(\r\n    private readonly extensionUtility: ExtensionUtility,\r\n    private readonly sharedService: SharedService,\r\n    @Optional() private readonly translate: TranslateService,\r\n  ) {\r\n    this._eventHandler = new Slick.EventHandler();\r\n  }\r\n\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    if (this._addon && this._addon.destroy) {\r\n      this._addon.destroy();\r\n    }\r\n    this.extensionUtility.nullifyFunctionNameStartingWithOn(this._cellMenuOptions);\r\n    this._addon = null;\r\n    this._cellMenuOptions = null;\r\n  }\r\n\r\n  /** Get the instance of the SlickGrid addon (control or plugin). */\r\n  getAddonInstance() {\r\n    return this._addon;\r\n  }\r\n\r\n  /**\r\n   * Create the Action Cell Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)\r\n   * @param grid\r\n   * @param dataView\r\n   * @param columnDefinitions\r\n   */\r\n  register(): any {\r\n    if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableTranslate && (!this.translate || !this.translate.instant)) {\r\n      throw new Error('[Angular-Slickgrid] requires \"ngx-translate\" to be installed and configured when the grid option \"enableTranslate\" is enabled.');\r\n    }\r\n\r\n    if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {\r\n      // get locales provided by user in main file or else use default English locales via the Constants\r\n      this._locales = this.sharedService.gridOptions && this.sharedService.gridOptions.locales || Constants.locales;\r\n\r\n      this._cellMenuOptions = { ...this.getDefaultCellMenuOptions(), ...this.sharedService.gridOptions.cellMenu };\r\n      this.sharedService.gridOptions.cellMenu = this._cellMenuOptions;\r\n\r\n      // translate the item keys when necessary\r\n      if (this.sharedService.gridOptions.enableTranslate) {\r\n        this.translateCellMenu();\r\n      }\r\n\r\n      // sort all menu items by their position order when defined\r\n      this.sortMenuItems(this.sharedService.allColumns);\r\n\r\n      this._addon = new Slick.Plugins.CellMenu(this._cellMenuOptions);\r\n      this.sharedService.grid.registerPlugin(this._addon);\r\n\r\n      // hook all events\r\n      if (this._cellMenuOptions) {\r\n        if (this._cellMenuOptions.onExtensionRegistered) {\r\n          this._cellMenuOptions.onExtensionRegistered(this._addon);\r\n        }\r\n        if (this._cellMenuOptions && typeof this._cellMenuOptions.onCommand === 'function') {\r\n          this._eventHandler.subscribe(this._addon.onCommand, (event: Event, args: MenuCommandItemCallbackArgs) => {\r\n            if (this._cellMenuOptions && this._cellMenuOptions.onCommand) {\r\n              this._cellMenuOptions.onCommand(event, args);\r\n            }\r\n          });\r\n        }\r\n        if (this._cellMenuOptions && typeof this._cellMenuOptions.onOptionSelected === 'function') {\r\n          this._eventHandler.subscribe(this._addon.onOptionSelected, (event: Event, args: MenuOptionItemCallbackArgs) => {\r\n            if (this._cellMenuOptions && this._cellMenuOptions.onOptionSelected) {\r\n              this._cellMenuOptions.onOptionSelected(event, args);\r\n            }\r\n          });\r\n        }\r\n        if (this._cellMenuOptions && typeof this._cellMenuOptions.onAfterMenuShow === 'function') {\r\n          this._eventHandler.subscribe(this._addon.onAfterMenuShow, (event: Event, args: { cell: number; row: number; grid: any; }) => {\r\n            if (this._cellMenuOptions && this._cellMenuOptions.onAfterMenuShow) {\r\n              this._cellMenuOptions.onAfterMenuShow(event, args);\r\n            }\r\n          });\r\n        }\r\n        if (this._cellMenuOptions && typeof this._cellMenuOptions.onBeforeMenuShow === 'function') {\r\n          this._eventHandler.subscribe(this._addon.onBeforeMenuShow, (event: Event, args: { cell: number; row: number; grid: any; menu: any; }) => {\r\n            if (this._cellMenuOptions && this._cellMenuOptions.onBeforeMenuShow) {\r\n              this._cellMenuOptions.onBeforeMenuShow(event, args);\r\n            }\r\n          });\r\n        }\r\n        if (this._cellMenuOptions && typeof this._cellMenuOptions.onBeforeMenuClose === 'function') {\r\n          this._eventHandler.subscribe(this._addon.onBeforeMenuClose, (event: Event, args: { cell: number; row: number; grid: any; menu: any; }) => {\r\n            if (this._cellMenuOptions && this._cellMenuOptions.onBeforeMenuClose) {\r\n              this._cellMenuOptions.onBeforeMenuClose(event, args);\r\n            }\r\n          });\r\n        }\r\n      }\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Translate the Cell Menu titles, we need to loop through all column definition to re-translate them */\r\n  translateCellMenu() {\r\n    if (this.sharedService.gridOptions && this.sharedService.gridOptions.cellMenu) {\r\n      this.resetMenuTranslations(this.sharedService.allColumns);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return default Action Cell Menu options\r\n   */\r\n  private getDefaultCellMenuOptions(): CellMenu {\r\n    return {\r\n      width: 180,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Reset all the internal Menu options which have text to translate\r\n   * @param grid menu object\r\n   */\r\n  private resetMenuTranslations(columnDefinitions: Column[]) {\r\n    const gridOptions = this.sharedService && this.sharedService.gridOptions;\r\n\r\n    if (gridOptions && gridOptions.enableTranslate) {\r\n      columnDefinitions.forEach((columnDef: Column) => {\r\n        if (columnDef && columnDef.cellMenu && (Array.isArray(columnDef.cellMenu.commandItems) || Array.isArray(columnDef.cellMenu.optionItems))) {\r\n          // get both items list\r\n          const columnCellMenuCommandItems: Array<MenuCommandItem | 'divider'> = columnDef.cellMenu.commandItems || [];\r\n          const columnCellMenuOptionItems: Array<MenuOptionItem | 'divider'> = columnDef.cellMenu.optionItems || [];\r\n\r\n          // translate their titles only if they have a titleKey defined\r\n          if (columnDef.cellMenu.commandTitleKey) {\r\n            columnDef.cellMenu.commandTitle = this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(columnDef.cellMenu.commandTitleKey) || this._locales && this._locales.TEXT_COMMANDS || columnDef.cellMenu.commandTitle;\r\n          }\r\n          if (columnDef.cellMenu.optionTitleKey) {\r\n            columnDef.cellMenu.optionTitle = this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(columnDef.cellMenu.optionTitleKey) || columnDef.cellMenu.optionTitle;\r\n          }\r\n\r\n          // translate both command/option items (whichever is provided)\r\n          this.extensionUtility.translateItems(columnCellMenuCommandItems, 'titleKey', 'title');\r\n          this.extensionUtility.translateItems(columnCellMenuOptionItems, 'titleKey', 'title');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  sortMenuItems(columnDefinitions: Column[]) {\r\n    columnDefinitions.forEach((columnDef: Column) => {\r\n      if (columnDef && columnDef.cellMenu && columnDef.cellMenu.commandItems) {\r\n        // get both items list\r\n        const columnCellMenuCommandItems: Array<MenuCommandItem | 'divider'> = columnDef.cellMenu.commandItems || [];\r\n        const columnCellMenuOptionItems: Array<MenuOptionItem | 'divider'> = columnDef.cellMenu.optionItems || [];\r\n\r\n        this.extensionUtility.sortItems(columnCellMenuCommandItems, 'positionOrder');\r\n        this.extensionUtility.sortItems(columnCellMenuOptionItems, 'positionOrder');\r\n      }\r\n    });\r\n  }\r\n}\r\n","import 'slickgrid/plugins/slick.checkboxselectcolumn';\r\nimport 'slickgrid/plugins/slick.rowselectionmodel';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Column, Extension, GridOption } from '../models/index';\r\nimport { SharedService } from '../services/shared.service';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n@Injectable()\r\nexport class CheckboxSelectorExtension implements Extension {\r\n  private _addon: any;\r\n  private _rowSelectionPlugin: any;\r\n\r\n  constructor(private sharedService: SharedService) { }\r\n\r\n  dispose() {\r\n    if (this._addon && this._addon.destroy) {\r\n      this._addon.destroy();\r\n    }\r\n    this._addon = null;\r\n    if (this._rowSelectionPlugin && this._rowSelectionPlugin.destroy) {\r\n      this._rowSelectionPlugin.destroy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the plugin before the Grid creation, else it will behave oddly.\r\n   * Mostly because the column definitions might change after the grid creation\r\n   */\r\n  create(columnDefinitions: Column[], gridOptions: GridOption) {\r\n    if (Array.isArray(columnDefinitions) && gridOptions) {\r\n      if (!this._addon) {\r\n        this._addon = new Slick.CheckboxSelectColumn(gridOptions.checkboxSelector || {});\r\n      }\r\n      const selectionColumn: Column = this._addon.getColumnDefinition();\r\n      if (typeof selectionColumn === 'object') {\r\n        selectionColumn.excludeFromExport = true;\r\n        selectionColumn.excludeFromColumnPicker = true;\r\n        selectionColumn.excludeFromGridMenu = true;\r\n        selectionColumn.excludeFromQuery = true;\r\n        selectionColumn.excludeFromHeaderMenu = true;\r\n        selectionColumn.maxWidth = selectionColumn.width || 30;\r\n\r\n        // column index position in the grid\r\n        const columnPosition = gridOptions && gridOptions.checkboxSelector && gridOptions.checkboxSelector.columnIndexPosition || 0;\r\n        if (columnPosition > 0) {\r\n          columnDefinitions.splice(columnPosition, 0, selectionColumn);\r\n        } else {\r\n          columnDefinitions.unshift(selectionColumn);\r\n        }\r\n      }\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Get the instance of the SlickGrid addon (control or plugin). */\r\n  getAddonInstance() {\r\n    return this._addon;\r\n  }\r\n\r\n  register(rowSelectionPlugin?: any) {\r\n    if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {\r\n      // the plugin has to be created BEFORE the grid (else it behaves oddly), but we can only watch grid events AFTER the grid is created\r\n      this.sharedService.grid.registerPlugin(this._addon);\r\n\r\n      // this also requires the Row Selection Model to be registered as well\r\n      if (!rowSelectionPlugin || !this.sharedService.grid.getSelectionModel()) {\r\n        rowSelectionPlugin = new Slick.RowSelectionModel(this.sharedService.gridOptions.rowSelectionOptions || {});\r\n        this.sharedService.grid.setSelectionModel(rowSelectionPlugin);\r\n      }\r\n\r\n      // user might want to pre-select some rows\r\n      // the setTimeout is because of timing issue with styling (row selection happen but rows aren't highlighted properly)\r\n      if (this.sharedService.gridOptions.preselectedRows && rowSelectionPlugin && this.sharedService.grid.getSelectionModel()) {\r\n        setTimeout(() => this._addon.selectRows(this.sharedService.gridOptions.preselectedRows));\r\n      }\r\n\r\n      this._rowSelectionPlugin = rowSelectionPlugin;\r\n      return rowSelectionPlugin;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import 'slickgrid/controls/slick.columnpicker';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Column, ColumnPicker, Extension, SlickEventHandler } from '../models/index';\r\nimport { ExtensionUtility } from './extensionUtility';\r\nimport { SharedService } from '../services/shared.service';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n@Injectable()\r\nexport class ColumnPickerExtension implements Extension {\r\n  private _eventHandler: SlickEventHandler;\r\n  private _addon: any;\r\n  private _columnPicker!: ColumnPicker | null;\r\n\r\n  constructor(private extensionUtility: ExtensionUtility, private sharedService: SharedService) {\r\n    this._eventHandler = new Slick.EventHandler();\r\n  }\r\n\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n    if (this._addon && this._addon.destroy) {\r\n      this._addon.destroy();\r\n    }\r\n    this.extensionUtility.nullifyFunctionNameStartingWithOn(this._columnPicker);\r\n    this._addon = null;\r\n  }\r\n\r\n  /** Get the instance of the SlickGrid addon (control or plugin). */\r\n  getAddonInstance() {\r\n    return this._addon;\r\n  }\r\n\r\n  register(): any {\r\n    if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {\r\n      // localization support for the picker\r\n      const columnTitle = this.extensionUtility.getPickerTitleOutputString('columnTitle', 'columnPicker');\r\n      const forceFitTitle = this.extensionUtility.getPickerTitleOutputString('forceFitTitle', 'columnPicker');\r\n      const syncResizeTitle = this.extensionUtility.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');\r\n\r\n      this._columnPicker = this.sharedService.gridOptions.columnPicker || {};\r\n      this.sharedService.gridOptions.columnPicker = this._columnPicker;\r\n      this._columnPicker.columnTitle = this._columnPicker.columnTitle || columnTitle;\r\n      this._columnPicker.forceFitTitle = this._columnPicker.forceFitTitle || forceFitTitle;\r\n      this._columnPicker.syncResizeTitle = this._columnPicker.syncResizeTitle || syncResizeTitle;\r\n      this._addon = new Slick.Controls.ColumnPicker(this.sharedService.allColumns, this.sharedService.grid, this.sharedService.gridOptions);\r\n\r\n      if (this.sharedService.grid && this.sharedService.gridOptions.enableColumnPicker) {\r\n        if (this._columnPicker.onExtensionRegistered) {\r\n          this._columnPicker.onExtensionRegistered(this._addon);\r\n        }\r\n        this._eventHandler.subscribe(this._addon.onColumnsChanged, (e: any, args: { columnId: string; showing: boolean; columns: Column[]; allColumns: Column[]; grid: any; }) => {\r\n          if (this._columnPicker && typeof this._columnPicker.onColumnsChanged === 'function') {\r\n            this._columnPicker.onColumnsChanged(e, args);\r\n          }\r\n\r\n          // keep reference to the updated visible columns list\r\n          if (args && Array.isArray(args.columns) && args.columns.length !== this.sharedService.visibleColumns.length) {\r\n            this.sharedService.visibleColumns = args.columns;\r\n          }\r\n\r\n          // when using row selection, SlickGrid will only apply the \"selected\" CSS class on the visible columns only\r\n          // and if the row selection was done prior to the column being shown then that column that was previously hidden (at the time of the row selection)\r\n          // will not have the \"selected\" CSS class because it wasn't visible at the time.\r\n          // To bypass this problem we can simply recall the row selection with the same selection and that will trigger a re-apply of the CSS class\r\n          // on all columns including the column we just made visible\r\n          if (this.sharedService.gridOptions.enableRowSelection && args.showing) {\r\n            const rowSelection = args.grid.getSelectedRows();\r\n            args.grid.setSelectedRows(rowSelection);\r\n          }\r\n\r\n          // if we're using frozen columns, we need to readjust pinning when the new hidden column becomes visible again on the left pinning container\r\n          // we need to readjust frozenColumn index because SlickGrid freezes by index and has no knowledge of the columns themselves\r\n          const frozenColumnIndex = this.sharedService.gridOptions.frozenColumn !== undefined ? this.sharedService.gridOptions.frozenColumn : -1;\r\n          if (frozenColumnIndex >= 0) {\r\n            const { allColumns, columns: visibleColumns } = args;\r\n            this.extensionUtility.readjustFrozenColumnIndexWhenNeeded(frozenColumnIndex, allColumns, visibleColumns);\r\n          }\r\n        });\r\n      }\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Translate the Column Picker headers and also the last 2 checkboxes */\r\n  translateColumnPicker() {\r\n    // update the properties by pointers, that is the only way to get Column Picker Control to see the new values\r\n    if (this._columnPicker) {\r\n      this.emptyColumnPickerTitles();\r\n      this._columnPicker.columnTitle = this.extensionUtility.getPickerTitleOutputString('columnTitle', 'columnPicker');\r\n      this._columnPicker.forceFitTitle = this.extensionUtility.getPickerTitleOutputString('forceFitTitle', 'columnPicker');\r\n      this._columnPicker.syncResizeTitle = this.extensionUtility.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');\r\n    }\r\n\r\n    // translate all columns (including hidden columns)\r\n    // eventually deprecate the \"headerKey\" and use only the \"nameKey\"\r\n    this.extensionUtility.translateItems(this.sharedService.allColumns, 'headerKey', 'name');\r\n    this.extensionUtility.translateItems(this.sharedService.allColumns, 'nameKey', 'name');\r\n\r\n    // update the Titles of each sections (command, customTitle, ...)\r\n    if (this._addon && this._addon.updateAllTitles && this._columnPicker) {\r\n      this._addon.updateAllTitles(this._columnPicker);\r\n    }\r\n  }\r\n\r\n  private emptyColumnPickerTitles() {\r\n    if (this._columnPicker) {\r\n      this._columnPicker.columnTitle = '';\r\n      this._columnPicker.forceFitTitle = '';\r\n      this._columnPicker.syncResizeTitle = '';\r\n    }\r\n  }\r\n}\r\n","import { isObservable, Subject } from 'rxjs';\r\n\r\nimport {\r\n  Column,\r\n  ColumnSort,\r\n  CurrentSorter,\r\n  EmitterType,\r\n  FieldType,\r\n  GridOption,\r\n  SlickEventHandler,\r\n  SortDirection,\r\n  SortDirectionNumber,\r\n  SortDirectionString,\r\n  TreeDataOption,\r\n} from './../models/index';\r\nimport { executeBackendCallback, refreshBackendDataset } from './backend-utilities';\r\nimport { getDescendantProperty, flattenToParentChildArray } from './utilities';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\nimport { SharedService } from './shared.service';\r\nimport { Injectable } from '@angular/core';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n@Injectable()\r\nexport class SortService {\r\n  private _currentLocalSorters: CurrentSorter[] = [];\r\n  private _eventHandler: SlickEventHandler;\r\n  private _grid: any;\r\n  private _isBackendGrid = false;\r\n  private httpCancelRequests$: Subject<void> = new Subject<void>(); // this will be used to cancel any pending http request\r\n  onSortChanged = new Subject<CurrentSorter[]>();\r\n  onSortCleared = new Subject<boolean>();\r\n\r\n  constructor(private sharedService: SharedService) {\r\n    this._eventHandler = new Slick.EventHandler();\r\n  }\r\n\r\n  /** Getter of the SlickGrid Event Handler */\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  /** Getter of SlickGrid DataView object */\r\n  private get _dataView(): any {\r\n    return (this._grid && this._grid.getData) ? this._grid.getData() : {};\r\n  }\r\n\r\n  /**\r\n   * Bind a backend sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param dataView SlickGrid DataView object\r\n   */\r\n  bindBackendOnSort(grid: any) {\r\n    this._isBackendGrid = true;\r\n    this._grid = grid;\r\n\r\n    // subscribe to the SlickGrid event and call the backend execution\r\n    this._eventHandler.subscribe(grid.onSort, this.onBackendSortChanged.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Bind a local sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param gridOptions Grid Options object\r\n   * @param dataView\r\n   */\r\n  bindLocalOnSort(grid: any) {\r\n    this._isBackendGrid = false;\r\n    this._grid = grid;\r\n\r\n    this.processTreeDataInitialSort();\r\n    this._eventHandler.subscribe(grid.onSort, this.handleLocalOnSort.bind(this));\r\n  }\r\n\r\n  handleLocalOnSort(_e: any, args: any) {\r\n    if (args && (args.sortCols || args.sortCol)) {\r\n      // multiSort and singleSort are not exactly the same, but we want to structure it the same for the (for loop) after\r\n      // also to avoid having to rewrite the for loop in the sort, we will make the singleSort an array of 1 object\r\n      const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortAsc: args.sortAsc, sortCol: args.sortCol });\r\n\r\n      // keep current sorters\r\n      this._currentLocalSorters = []; // reset current local sorters\r\n      if (Array.isArray(sortColumns)) {\r\n        sortColumns.forEach((sortColumn: { sortCol: Column; sortAsc: boolean; }) => {\r\n          if (sortColumn.sortCol) {\r\n            this._currentLocalSorters.push({\r\n              columnId: sortColumn.sortCol.id,\r\n              direction: sortColumn.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      this.onLocalSortChanged(this._grid, sortColumns);\r\n      this.emitSortChanged(EmitterType.local);\r\n    }\r\n  }\r\n\r\n  clearSortByColumnId(event: Event | undefined, columnId: string | number) {\r\n    // get previously sorted columns\r\n    const allSortedCols: ColumnSort[] = this.getCurrentColumnSorts();\r\n    const sortedColsWithoutCurrent: ColumnSort[] = this.getCurrentColumnSorts(`${columnId}`);\r\n\r\n    if (Array.isArray(allSortedCols) && Array.isArray(sortedColsWithoutCurrent) && allSortedCols.length !== sortedColsWithoutCurrent.length) {\r\n      if (this._gridOptions.backendServiceApi) {\r\n        this.onBackendSortChanged(event, { multiColumnSort: true, sortCols: sortedColsWithoutCurrent, grid: this._grid });\r\n      } else if (this._dataView) {\r\n        this.onLocalSortChanged(this._grid, sortedColsWithoutCurrent, true, true);\r\n      } else {\r\n        // when using customDataView, we will simply send it as a onSort event with notify\r\n        const isMultiSort = this._gridOptions && this._gridOptions.multiColumnSort || false;\r\n        const sortOutput = isMultiSort ? sortedColsWithoutCurrent : sortedColsWithoutCurrent[0];\r\n        this._grid.onSort.notify(sortOutput);\r\n      }\r\n\r\n      // update the grid sortColumns array which will at the same add the visual sort icon(s) on the UI\r\n      const updatedSortColumns: ColumnSort[] = sortedColsWithoutCurrent.map((col) => {\r\n        return {\r\n          columnId: col && col.sortCol && col.sortCol.id,\r\n          sortAsc: col && col.sortAsc,\r\n          sortCol: col && col.sortCol,\r\n        };\r\n      });\r\n      this._grid.setSortColumns(updatedSortColumns); // add sort icon in UI\r\n    }\r\n\r\n    // when there's no more sorting, we re-sort by the default sort field, user can customize it \"defaultColumnSortFieldId\", defaults to \"id\"\r\n    if (Array.isArray(sortedColsWithoutCurrent) && sortedColsWithoutCurrent.length === 0) {\r\n      this.sortLocalGridByDefaultSortFieldId();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear Sorting\r\n   * - 1st, remove the SlickGrid sort icons (this setSortColumns function call really does only that)\r\n   * - 2nd, we also need to trigger a sort change\r\n   *   - for a backend grid, we will trigger a backend sort changed with an empty sort columns array\r\n   *   - however for a local grid, we need to pass a sort column and so we will sort by the 1st column\r\n   * @param trigger query event after executing clear filter?\r\n   */\r\n  clearSorting(triggerQueryEvent = true) {\r\n    if (this._grid && this._gridOptions && this._dataView) {\r\n      // remove any sort icons (this setSortColumns function call really does only that)\r\n      this._grid.setSortColumns([]);\r\n\r\n      // we also need to trigger a sort change\r\n      // for a backend grid, we will trigger a backend sort changed with an empty sort columns array\r\n      // however for a local grid, we need to pass a sort column and so we will sort by the 1st column\r\n      if (triggerQueryEvent) {\r\n        if (this._isBackendGrid) {\r\n          this.onBackendSortChanged(undefined, { grid: this._grid, sortCols: [], clearSortTriggered: true });\r\n        } else {\r\n          if (this._columnDefinitions && Array.isArray(this._columnDefinitions)) {\r\n            this.sortLocalGridByDefaultSortFieldId();\r\n          }\r\n        }\r\n      } else if (this._isBackendGrid) {\r\n        const backendService = this._gridOptions && this._gridOptions.backendServiceApi && this._gridOptions.backendServiceApi.service;\r\n        if (backendService && backendService.clearSorters) {\r\n          backendService.clearSorters();\r\n        }\r\n      }\r\n    }\r\n\r\n    // set current sorter to empty & emit a sort changed event\r\n    this._currentLocalSorters = [];\r\n\r\n    // emit an event when sorts are all cleared\r\n    this.onSortCleared.next(true);\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    if (this._eventHandler && this._eventHandler.unsubscribeAll) {\r\n      this._eventHandler.unsubscribeAll();\r\n    }\r\n    if (isObservable(this.httpCancelRequests$)) {\r\n      this.httpCancelRequests$.next(); // this cancels any pending http requests\r\n      this.httpCancelRequests$.complete();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle the Sorting Functionality\r\n   * @param {boolean} isSortingDisabled - optionally force a disable/enable of the Sort Functionality? Defaults to True\r\n   * @param {boolean} clearSortingWhenDisabled - when disabling the sorting, do we also want to clear the sorting as well? Defaults to True\r\n   */\r\n  disableSortFunctionality(isSortingDisabled = true, clearSortingWhenDisabled = true) {\r\n    const prevSorting = this._gridOptions.enableSorting;\r\n    const newSorting = !prevSorting;\r\n\r\n    this._gridOptions.enableSorting = newSorting;\r\n    let updatedColumnDefinitions;\r\n    if (isSortingDisabled) {\r\n      if (clearSortingWhenDisabled) {\r\n        this.clearSorting();\r\n      }\r\n      this._eventHandler.unsubscribeAll();\r\n      updatedColumnDefinitions = this.disableAllSortingCommands(true);\r\n    } else {\r\n      updatedColumnDefinitions = this.disableAllSortingCommands(false);\r\n      const onSortHandler = this._grid.onSort;\r\n      this._eventHandler.subscribe(onSortHandler, (e: Event, args: any) => this.handleLocalOnSort(e, args));\r\n    }\r\n    this._grid.setOptions({ enableSorting: this._gridOptions.enableSorting }, false, true);\r\n    this.sharedService.gridOptions = this._gridOptions;\r\n\r\n    // reset columns so that it recreate the column headers and remove/add the sort icon hints\r\n    // basically without this, the sort icon hints were still showing up even after disabling the Sorting\r\n    this._grid.setColumns(updatedColumnDefinitions);\r\n  }\r\n\r\n  /**\r\n   * Toggle the Sorting functionality\r\n   * @param {boolean} clearSortingWhenDisabled - when disabling the sorting, do we also want to clear the sorting as well? Defaults to True\r\n   */\r\n  toggleSortFunctionality(clearSortingOnDisable = true) {\r\n    const previousSorting = this._gridOptions.enableSorting;\r\n    this.disableSortFunctionality(previousSorting, clearSortingOnDisable);\r\n  }\r\n\r\n  /**\r\n   * A simple function that is binded to the subscriber and emit a change when the sort is called.\r\n   * Other services, like Pagination, can then subscribe to it.\r\n   * @param sender\r\n   */\r\n  emitSortChanged(sender: EmitterType, currentLocalSorters?: CurrentSorter[]) {\r\n    if (sender === EmitterType.remote && this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      let currentSorters: CurrentSorter[] = [];\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        currentSorters = backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n      this.onSortChanged.next(currentSorters);\r\n    } else if (sender === EmitterType.local) {\r\n      if (currentLocalSorters) {\r\n        this._currentLocalSorters = currentLocalSorters;\r\n      }\r\n      this.onSortChanged.next(this.getCurrentLocalSorters());\r\n    }\r\n  }\r\n\r\n  getCurrentLocalSorters(): CurrentSorter[] {\r\n    return this._currentLocalSorters;\r\n  }\r\n\r\n  /**\r\n   * Get current column sorts,\r\n   * If a column is passed as an argument, that will be exclusion so we won't add this column to our output array since it is already in the array.\r\n   * The usage of this method is that we want to know the sort prior to calling the next sorting command\r\n   */\r\n  getCurrentColumnSorts(excludedColumnId?: string): { sortCol: Column; sortAsc: boolean; }[] {\r\n    // getSortColumns() only returns sortAsc & columnId, we want the entire column definition\r\n    const oldSortColumns = this._grid && this._grid.getSortColumns();\r\n\r\n    // get the column definition but only keep column which are not equal to our current column\r\n    if (Array.isArray(oldSortColumns)) {\r\n      const sortedCols = oldSortColumns.reduce((cols, col) => {\r\n        if (!excludedColumnId || col.columnId !== excludedColumnId) {\r\n          cols.push({ sortCol: this._columnDefinitions[this._grid.getColumnIndex(col.columnId)], sortAsc: col.sortAsc });\r\n        }\r\n        return cols;\r\n      }, []);\r\n\r\n      return sortedCols;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /** Load defined Sorting (sorters) into the grid */\r\n  loadGridSorters(sorters: CurrentSorter[]): ColumnSort[] {\r\n    this._currentLocalSorters = []; // reset current local sorters\r\n    const sortCols: ColumnSort[] = [];\r\n\r\n    if (Array.isArray(sorters)) {\r\n      sorters.forEach((sorter: CurrentSorter) => {\r\n        const gridColumn = this._columnDefinitions.find((col: Column) => col.id === sorter.columnId);\r\n        if (gridColumn) {\r\n          sortCols.push({\r\n            columnId: gridColumn.id,\r\n            sortAsc: ((sorter.direction.toUpperCase() === SortDirection.ASC) ? true : false),\r\n            sortCol: gridColumn\r\n          });\r\n\r\n          // keep current sorters\r\n          this._currentLocalSorters.push({\r\n            columnId: gridColumn.id + '',\r\n            direction: sorter.direction.toUpperCase() as SortDirectionString\r\n          });\r\n        }\r\n      });\r\n\r\n      this.onLocalSortChanged(this._grid, sortCols);\r\n      this._grid.setSortColumns(sortCols.map(col => ({ columnId: col.columnId, sortAsc: col.sortAsc }))); // use this to add sort icon(s) in UI\r\n    }\r\n\r\n    return sortCols;\r\n  }\r\n\r\n  /** Process the initial sort, typically it will sort ascending by the column that has the Tree Data unless user specifies a different initialSort */\r\n  processTreeDataInitialSort() {\r\n    // when a Tree Data view is defined, we must sort the data so that the UI works correctly\r\n    if (this._gridOptions?.enableTreeData && this._gridOptions.treeDataOptions) {\r\n      // first presort it once by tree level\r\n      const treeDataOptions = this._gridOptions.treeDataOptions;\r\n      const columnWithTreeData = this._columnDefinitions.find((col: Column) => col.id === treeDataOptions.columnId);\r\n      if (columnWithTreeData) {\r\n        let sortDirection = SortDirection.ASC;\r\n        let sortTreeLevelColumn: ColumnSort = { columnId: treeDataOptions.columnId, sortCol: columnWithTreeData, sortAsc: true };\r\n\r\n        // user could provide a custom sort field id, if so get that column and sort by it\r\n        if (treeDataOptions?.initialSort?.columnId) {\r\n          const initialSortColumnId = treeDataOptions.initialSort.columnId;\r\n          const initialSortColumn = this._columnDefinitions.find((col: Column) => col.id === initialSortColumnId);\r\n          sortDirection = (treeDataOptions.initialSort.direction || SortDirection.ASC).toUpperCase() as SortDirection;\r\n          sortTreeLevelColumn = { columnId: initialSortColumnId, sortCol: initialSortColumn, sortAsc: (sortDirection === SortDirection.ASC) } as ColumnSort;\r\n        }\r\n\r\n        // when we have a valid column with Tree Data, we can sort by that column\r\n        if (sortTreeLevelColumn?.columnId && this.sharedService?.hierarchicalDataset) {\r\n          this.updateSorting([{ columnId: sortTreeLevelColumn.columnId || '', direction: sortDirection }]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  onBackendSortChanged(event: Event | undefined, args: { multiColumnSort?: boolean; grid: any; sortCols: ColumnSort[]; clearSortTriggered?: boolean; }) {\r\n    if (!args || !args.grid) {\r\n      throw new Error('Something went wrong when trying to bind the \"onBackendSortChanged(event, args)\" function, it seems that \"args\" is not populated correctly');\r\n    }\r\n    const gridOptions: GridOption = (args.grid && args.grid.getOptions) ? args.grid.getOptions() : {};\r\n    const backendApi = gridOptions.backendServiceApi;\r\n\r\n    if (!backendApi || !backendApi.process || !backendApi.service) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    // keep start time & end timestamps & return it after process execution\r\n    const startTime = new Date();\r\n\r\n    if (backendApi.preProcess) {\r\n      backendApi.preProcess();\r\n    }\r\n\r\n    // query backend\r\n    const query = backendApi.service.processOnSortChanged(event, args);\r\n    const totalItems = gridOptions && gridOptions.pagination && gridOptions.pagination.totalItems;\r\n    executeBackendCallback(backendApi, query, args, startTime, totalItems, this.emitSortChanged.bind(this), this.httpCancelRequests$);\r\n  }\r\n\r\n  /** When a Sort Changes on a Local grid (JSON dataset) */\r\n  onLocalSortChanged(grid: any, sortColumns: Array<ColumnSort & { clearSortTriggered?: boolean; }>, forceReSort = false, emitSortChanged = false) {\r\n    const datasetIdPropertyName = this._gridOptions?.datasetIdPropertyName ?? 'id';\r\n    const isTreeDataEnabled = this._gridOptions && this._gridOptions.enableTreeData || false;\r\n    const dataView = grid && grid.getData && grid.getData();\r\n\r\n    if (grid && dataView) {\r\n      if (forceReSort && !isTreeDataEnabled) {\r\n        dataView.reSort();\r\n      }\r\n\r\n      if (isTreeDataEnabled && this.sharedService && Array.isArray(this.sharedService.hierarchicalDataset)) {\r\n        const hierarchicalDataset = this.sharedService.hierarchicalDataset;\r\n        const datasetSortResult = this.sortHierarchicalDataset(hierarchicalDataset, sortColumns);\r\n\r\n        // we could use the DataView sort but that would require re-sorting again (since the 2nd array that is currently in the DataView would have to be resorted against the 1st array that was sorting from tree sort)\r\n        // it is simply much faster to just replace the entire dataset\r\n        this._dataView.setItems(datasetSortResult.flat, datasetIdPropertyName);\r\n      } else {\r\n        dataView.sort(this.sortComparers.bind(this, sortColumns));\r\n      }\r\n\r\n      grid.invalidate();\r\n      grid.render();\r\n\r\n      if (emitSortChanged) {\r\n        this.emitSortChanged(EmitterType.local, sortColumns.map(col => {\r\n          return {\r\n            columnId: col.sortCol && col.sortCol.id || 'id',\r\n            direction: col.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n          };\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Takes a hierarchical dataset and sort it recursively,  */\r\n  sortHierarchicalDataset<T>(hierarchicalDataset: T[], sortColumns: Array<ColumnSort & { clearSortTriggered?: boolean; }>) {\r\n    this.sortTreeData(hierarchicalDataset, sortColumns);\r\n    const dataViewIdIdentifier = this._gridOptions?.datasetIdPropertyName ?? 'id';\r\n    const treeDataOpt: TreeDataOption = this._gridOptions?.treeDataOptions ?? { columnId: '' };\r\n    const treeDataOptions = { ...treeDataOpt, identifierPropName: treeDataOpt.identifierPropName ?? dataViewIdIdentifier, shouldAddTreeLevelNumber: true };\r\n    const sortedFlatArray = flattenToParentChildArray(hierarchicalDataset, treeDataOptions);\r\n\r\n    return { hierarchical: hierarchicalDataset, flat: sortedFlatArray };\r\n  }\r\n\r\n  /** Call a local grid sort by its default sort field id (user can customize default field by configuring \"defaultColumnSortFieldId\" in the grid options, defaults to \"id\") */\r\n  sortLocalGridByDefaultSortFieldId() {\r\n    const sortColFieldId = this._gridOptions && this._gridOptions.defaultColumnSortFieldId || this._gridOptions.datasetIdPropertyName || 'id';\r\n    const sortCol = { id: sortColFieldId, field: sortColFieldId } as Column;\r\n    this.onLocalSortChanged(this._grid, new Array({ sortAsc: true, sortCol, clearSortTriggered: true }));\r\n  }\r\n\r\n  sortComparers(sortColumns: ColumnSort[], dataRow1: any, dataRow2: any): number {\r\n    if (Array.isArray(sortColumns)) {\r\n      for (const sortColumn of sortColumns) {\r\n        const result = this.sortComparer(sortColumn, dataRow1, dataRow2);\r\n        if (result !== undefined) {\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n    return SortDirectionNumber.neutral;\r\n  }\r\n\r\n  sortComparer(sortColumn: ColumnSort, dataRow1: any, dataRow2: any, querySortField?: string): number | undefined {\r\n    if (sortColumn && sortColumn.sortCol) {\r\n      const columnDef = sortColumn.sortCol;\r\n      const sortDirection = sortColumn.sortAsc ? SortDirectionNumber.asc : SortDirectionNumber.desc;\r\n      let queryFieldName1 = querySortField || columnDef.queryFieldSorter || columnDef.queryField || columnDef.field;\r\n      let queryFieldName2 = queryFieldName1;\r\n      const fieldType = columnDef.type || FieldType.string;\r\n\r\n      // if user provided a query field name getter callback, we need to get the name on each item independently\r\n      if (typeof columnDef.queryFieldNameGetterFn === 'function') {\r\n        queryFieldName1 = columnDef.queryFieldNameGetterFn(dataRow1);\r\n        queryFieldName2 = columnDef.queryFieldNameGetterFn(dataRow2);\r\n      }\r\n\r\n      let value1 = dataRow1[queryFieldName1];\r\n      let value2 = dataRow2[queryFieldName2];\r\n\r\n      // when item is a complex object (dot \".\" notation), we need to filter the value contained in the object tree\r\n      if (queryFieldName1 && queryFieldName1.indexOf('.') >= 0) {\r\n        value1 = getDescendantProperty(dataRow1, queryFieldName1);\r\n      }\r\n      if (queryFieldName2 && queryFieldName2.indexOf('.') >= 0) {\r\n        value2 = getDescendantProperty(dataRow2, queryFieldName2);\r\n      }\r\n\r\n      // user could provide his own custom Sorter\r\n      if (columnDef.sorter) {\r\n        const customSortResult = columnDef.sorter(value1, value2, sortDirection, columnDef, this._gridOptions);\r\n        if (customSortResult !== SortDirectionNumber.neutral) {\r\n          return customSortResult;\r\n        }\r\n      } else {\r\n        const sortResult = sortByFieldType(fieldType, value1, value2, sortDirection, columnDef, this._gridOptions);\r\n        if (sortResult !== SortDirectionNumber.neutral) {\r\n          return sortResult;\r\n        }\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  sortTreeData(treeArray: any[], sortColumns: Array<ColumnSort>) {\r\n    if (Array.isArray(sortColumns)) {\r\n      for (const sortColumn of sortColumns) {\r\n        this.sortTreeChild(treeArray, sortColumn, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Sort the Tree Children of a hierarchical dataset by recursion */\r\n  sortTreeChild(treeArray: any[], sortColumn: ColumnSort, treeLevel: number) {\r\n    const treeDataOptions = this._gridOptions?.treeDataOptions;\r\n    const childrenPropName = treeDataOptions?.childrenPropName ?? 'children';\r\n    treeArray.sort((a: any, b: any) => this.sortComparer(sortColumn, a, b) ?? SortDirectionNumber.neutral);\r\n\r\n    // when item has a child, we'll sort recursively\r\n    for (const item of treeArray) {\r\n      if (item) {\r\n        const hasChildren = item.hasOwnProperty(childrenPropName) && Array.isArray(item[childrenPropName]);\r\n        // when item has a child, we'll sort recursively\r\n        if (hasChildren) {\r\n          treeLevel++;\r\n          this.sortTreeChild(item[childrenPropName], sortColumn, treeLevel);\r\n          treeLevel--;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update Sorting (sorters) dynamically just by providing an array of sorter(s).\r\n   * You can also choose emit (default) a Sort Changed event that will be picked by the Grid State Service.\r\n   *\r\n   * Also for backend service only, you can choose to trigger a backend query (default) or not if you wish to do it later,\r\n   * this could be useful when using updateFilters & updateSorting and you wish to only send the backend query once.\r\n   * @param sorters array\r\n   * @param triggerEvent defaults to True, do we want to emit a sort changed event?\r\n   * @param triggerBackendQuery defaults to True, which will query the backend.\r\n   */\r\n  updateSorting(sorters: CurrentSorter[], emitChangedEvent = true, triggerBackendQuery = true) {\r\n    if (!this._gridOptions || !this._gridOptions.enableSorting) {\r\n      throw new Error('[Angular-Slickgrid] in order to use \"updateSorting\" method, you need to have Sortable Columns defined in your grid and \"enableSorting\" set in your Grid Options');\r\n    }\r\n\r\n    if (Array.isArray(sorters)) {\r\n      const backendApi = this._gridOptions?.backendServiceApi;\r\n\r\n      if (backendApi) {\r\n        const backendApiService = backendApi?.service;\r\n        if (backendApiService?.updateSorters) {\r\n          backendApiService.updateSorters(undefined, sorters);\r\n          if (triggerBackendQuery) {\r\n            refreshBackendDataset(this._gridOptions);\r\n          }\r\n        }\r\n      } else {\r\n        this.loadGridSorters(sorters);\r\n      }\r\n\r\n      if (emitChangedEvent) {\r\n        const emitterType = backendApi ? EmitterType.remote : EmitterType.local;\r\n        this.emitSortChanged(emitterType);\r\n      }\r\n    }\r\n  }\r\n\r\n  // --\r\n  // private functions\r\n  // -------------------\r\n\r\n  /**\r\n   * Loop through all column definitions and do the following 2 things\r\n   * 1. disable/enable the \"sortable\" property of each column\r\n   * 2. loop through each Header Menu commands and change the \"hidden\" commands to show/hide depending if it's enabled/disabled\r\n   * Also note that we aren't deleting any properties, we just toggle their flags so that we can reloop through at later point in time.\r\n   * (if we previously deleted these properties we wouldn't be able to change them back since these properties wouldn't exist anymore, hence why we just hide the commands)\r\n   * @param {boolean} isDisabling - are we disabling the sort functionality? Defaults to true\r\n   */\r\n  private disableAllSortingCommands(isDisabling = true): Column[] {\r\n    const columnDefinitions = this._grid.getColumns();\r\n\r\n    // loop through column definition to hide/show header menu commands\r\n    columnDefinitions.forEach((col: Column) => {\r\n      if (typeof col.sortable !== undefined) {\r\n        col.sortable = !isDisabling;\r\n      }\r\n      if (col && col.header && col.header.menu) {\r\n        col.header.menu.items.forEach(menuItem => {\r\n          if (menuItem && typeof menuItem !== 'string') {\r\n            const menuCommand = menuItem.command;\r\n            if (menuCommand === 'sort-asc' || menuCommand === 'sort-desc' || menuCommand === 'clear-sort') {\r\n              menuItem.hidden = isDisabling;\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    // loop through column definition to hide/show grid menu commands\r\n    if (this._gridOptions && this._gridOptions.gridMenu && this._gridOptions.gridMenu.customItems) {\r\n      this._gridOptions.gridMenu.customItems.forEach((menuItem) => {\r\n        if (menuItem && typeof menuItem !== 'string') {\r\n          const menuCommand = menuItem.command;\r\n          if (menuCommand === 'clear-sorting') {\r\n            menuItem.hidden = isDisabling;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return columnDefinitions;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Column, ColumnSort, GridOption, SlickEventData, SlickEventHandler, TreeDataOption } from '../models/index';\r\nimport { SharedService } from './shared.service';\r\nimport { SortService } from './sort.service';\r\nimport { unflattenParentChildArrayToTree } from './utilities';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n@Injectable()\r\nexport class TreeDataService {\r\n  private _grid: any;\r\n  private _eventHandler: SlickEventHandler;\r\n\r\n  constructor(private sharedService: SharedService, private sortService: SortService) {\r\n    this._eventHandler = new Slick.EventHandler();\r\n  }\r\n\r\n  get dataset(): any[] {\r\n    return this.dataView && this.dataView.getItems && this.dataView.getItems();\r\n  }\r\n\r\n  get datasetHierarchical(): any[] | undefined {\r\n    return this.sharedService.hierarchicalDataset;\r\n  }\r\n\r\n  get dataView(): any {\r\n    return this._grid && this._grid.getData && this._grid.getData();\r\n  }\r\n\r\n  get gridOptions(): GridOption {\r\n    return this._grid && this._grid.getOptions && this._grid.getOptions() || {};\r\n  }\r\n\r\n  /** Getter of the SlickGrid Event Handler */\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    if (this._eventHandler && this._eventHandler.unsubscribeAll) {\r\n      this._eventHandler.unsubscribeAll();\r\n    }\r\n  }\r\n\r\n  init(grid: any) {\r\n    this._grid = grid;\r\n\r\n    // there's a few limitations with Tree Data, we'll just throw error when that happens\r\n    if (this.gridOptions?.enableTreeData) {\r\n      if (this.gridOptions?.multiColumnSort) {\r\n        throw new Error('[Angular-Slickgrid] Tree Data does not currently support multi-column sorting, you can disable it via \"multiColumnSort: false\" grid option and/or help in providing support for this feature.');\r\n      }\r\n\r\n      if (!this.gridOptions?.enableFiltering) {\r\n        throw new Error('[Angular-Slickgrid] It looks like you are trying to use Tree Data without using the filtering option, unfortunately that is not possible with Tree Data since it relies heavily on the filters to expand/collapse the tree. You need to enable it via \"enableFiltering: true\"');\r\n      }\r\n\r\n      if (this.gridOptions?.backendServiceApi || this.gridOptions?.enablePagination) {\r\n        throw new Error('[Angular-Slickgrid] It looks like you are trying to use Tree Data with Pagination and/or a Backend Service (OData, GraphQL) but unfortunately that is simply not supported because of its complexity.');\r\n      }\r\n\r\n      if (!this.gridOptions.treeDataOptions || !this.gridOptions.treeDataOptions.columnId) {\r\n        throw new Error('[Angular-Slickgrid] When enabling tree data, you must also provide the \"treeDataOption\" property in your Grid Options with \"childrenPropName\" or \"parentPropName\" (depending if your array is hierarchical or flat) for the Tree Data to work properly.');\r\n      }\r\n    }\r\n\r\n    // subscribe to the SlickGrid event and call the backend execution\r\n    this._eventHandler.subscribe(grid.onClick, this.handleOnCellClick.bind(this));\r\n  }\r\n\r\n  getInitialSort(columnDefinitions: Column[], gridOptions: GridOption): ColumnSort {\r\n    const treeDataOptions = gridOptions?.treeDataOptions;\r\n    const initialColumnSorting = treeDataOptions?.initialSort ?? { columnId: treeDataOptions?.columnId ?? '', direction: 'ASC' };\r\n    const initialSortColumn = columnDefinitions.find(col => col.id === initialColumnSorting.columnId);\r\n\r\n    return {\r\n      columnId: initialColumnSorting.columnId,\r\n      sortAsc: initialColumnSorting?.direction?.toUpperCase() !== 'DESC',\r\n      sortCol: initialSortColumn as Column,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Takes a flat dataset, converts it into a hierarchical dataset, sort it by recursion and finally return back the final and sorted flat array\r\n   * @param {Array<Object>} flatDataset - parent/child flat dataset\r\n   * @param {Object} gridOptions - grid options\r\n   * @returns {Array<Object>} - tree dataset\r\n   */\r\n  convertFlatParentChildToTreeDatasetAndSort<P, T extends P & { [childrenPropName: string]: T[] }>(flatDataset: P[], columnDefinitions: Column[], gridOptions: GridOption) {\r\n    // 1- convert the flat array into a hierarchical array\r\n    const datasetHierarchical = this.convertFlatParentChildToTreeDataset(flatDataset, gridOptions);\r\n\r\n    // 2- sort the hierarchical array recursively by an optional \"initialSort\" OR if nothing is provided we'll sort by the column defined as the Tree column\r\n    // also note that multi-column is not currently supported with Tree Data\r\n    const columnSort = this.getInitialSort(columnDefinitions, gridOptions);\r\n    const datasetSortResult = this.sortService.sortHierarchicalDataset(datasetHierarchical, [columnSort]);\r\n\r\n    // and finally add the sorting icon (this has to be done manually in SlickGrid) to the column we used for the sorting\r\n    this._grid?.setSortColumns([columnSort]);\r\n\r\n    return datasetSortResult;\r\n  }\r\n\r\n  /**\r\n   * Takes a flat dataset, converts it into a hierarchical dataset\r\n   * @param {Array<Object>} flatDataset - parent/child flat dataset\r\n   * @param {Object} gridOptions - grid options\r\n   * @returns {Array<Object>} - tree dataset\r\n   */\r\n  convertFlatParentChildToTreeDataset<P, T extends P & { [childrenPropName: string]: P[] }>(flatDataset: P[], gridOptions: GridOption): T[] {\r\n    const dataViewIdIdentifier = gridOptions?.datasetIdPropertyName ?? 'id';\r\n    const treeDataOpt: TreeDataOption = gridOptions?.treeDataOptions ?? { columnId: 'id' };\r\n    const treeDataOptions = { ...treeDataOpt, identifierPropName: treeDataOpt.identifierPropName ?? dataViewIdIdentifier };\r\n    return unflattenParentChildArrayToTree(flatDataset, treeDataOptions);\r\n  }\r\n\r\n  handleOnCellClick(event: any, args: any) {\r\n    if (event && args) {\r\n      const targetElm: any = event.target || {};\r\n      const treeDataOptions = this.gridOptions.treeDataOptions;\r\n      const collapsedPropName = treeDataOptions && treeDataOptions.collapsedPropName || '__collapsed';\r\n      const idPropName = this.gridOptions.datasetIdPropertyName ?? 'id';\r\n\r\n      if (targetElm && targetElm.className) {\r\n        const hasToggleClass = targetElm.className.indexOf('toggle') >= 0 || false;\r\n        if (hasToggleClass) {\r\n          const item = this.dataView.getItem(args.row);\r\n          if (item) {\r\n            item[collapsedPropName] = !item[collapsedPropName] ? true : false;\r\n            this.dataView.updateItem(item[idPropName], item);\r\n            this._grid.invalidate();\r\n          }\r\n          event.stopImmediatePropagation();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Takes a hierarchical (tree) input array and sort it (if an `initialSort` exist, it will use that to sort)\r\n   * @param {Array<Object>} hierarchicalDataset - inpu\r\n   * @returns {Object} sort result object that includes both the flat & tree data arrays\r\n   */\r\n  sortHierarchicalDataset<T>(hierarchicalDataset: T[], inputColumnSorts?: ColumnSort | ColumnSort[]) {\r\n    const columnSorts = inputColumnSorts ?? this.getInitialSort(this.sharedService.allColumns, this.gridOptions);\r\n    const finalColumnSorts = Array.isArray(columnSorts) ? columnSorts : [columnSorts];\r\n    return this.sortService.sortHierarchicalDataset(hierarchicalDataset, finalColumnSorts);\r\n  }\r\n\r\n  async toggleTreeDataCollapse(collapsing: boolean): Promise<boolean> {\r\n    if (this.gridOptions) {\r\n      const treeDataOptions = this.gridOptions.treeDataOptions;\r\n\r\n      if (this.gridOptions.enableTreeData) {\r\n        const items: any[] = this.dataView.getItems() || [];\r\n        const collapsedPropName = treeDataOptions && treeDataOptions.collapsedPropName || '__collapsed';\r\n        items.forEach((item: any) => item[collapsedPropName] = collapsing);\r\n        this.dataView.setItems(items);\r\n        this._grid.invalidate();\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","import 'slickgrid/plugins/slick.contextmenu';\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport {\r\n  Column,\r\n  ContextMenu,\r\n  DelimiterType,\r\n  Extension,\r\n  FileType,\r\n  MenuCallbackArgs,\r\n  MenuCommandItem,\r\n  MenuCommandItemCallbackArgs,\r\n  MenuOptionItemCallbackArgs,\r\n  SlickEventHandler,\r\n} from '../models/index';\r\nimport { ExtensionUtility } from './extensionUtility';\r\nimport { SharedService } from '../services/shared.service';\r\nimport { ExportService } from '../services/export.service';\r\nimport { ExcelExportService } from '../services/excelExport.service';\r\nimport { TreeDataService } from '../services/treeData.service';\r\nimport { exportWithFormatterWhenDefined } from '../formatters/formatterUtilities';\r\nimport { getDescendantProperty, getTranslationPrefix } from '../services/utilities';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n@Injectable()\r\nexport class ContextMenuExtension implements Extension {\r\n  private _addon: any;\r\n  private _contextMenuOptions!: ContextMenu | null;\r\n  private _eventHandler: SlickEventHandler;\r\n  private _userOriginalContextMenu: ContextMenu | undefined;\r\n\r\n  constructor(\r\n    private readonly excelExportService: ExcelExportService,\r\n    private readonly exportService: ExportService,\r\n    private readonly extensionUtility: ExtensionUtility,\r\n    private readonly sharedService: SharedService,\r\n    private readonly treeDataService: TreeDataService,\r\n    @Optional() private readonly translate: TranslateService,\r\n  ) {\r\n    this._eventHandler = new Slick.EventHandler();\r\n  }\r\n\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    if (this._addon && this._addon.destroy) {\r\n      this._addon.destroy();\r\n    }\r\n    if (this.sharedService.gridOptions && this.sharedService.gridOptions.contextMenu && this.sharedService.gridOptions.contextMenu.commandItems) {\r\n      this.sharedService.gridOptions.contextMenu = this._userOriginalContextMenu;\r\n    }\r\n    this.extensionUtility.nullifyFunctionNameStartingWithOn(this._contextMenuOptions);\r\n    this._addon = null;\r\n    this._contextMenuOptions = null;\r\n  }\r\n\r\n  /** Get the instance of the SlickGrid addon (control or plugin). */\r\n  getAddonInstance() {\r\n    return this._addon;\r\n  }\r\n\r\n  /**\r\n   * Create the Action Cell Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)\r\n   * @param grid\r\n   * @param dataView\r\n   * @param columnDefinitions\r\n   */\r\n  register(): any {\r\n    if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableTranslate && (!this.translate || !this.translate.instant)) {\r\n      throw new Error('[Angular-Slickgrid] requires \"ngx-translate\" to be installed and configured when the grid option \"enableTranslate\" is enabled.');\r\n    }\r\n\r\n    if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions && this.sharedService.gridOptions.contextMenu) {\r\n      this._contextMenuOptions = this.sharedService.gridOptions.contextMenu;\r\n\r\n      // keep original user context menu, useful when switching locale to translate\r\n      this._userOriginalContextMenu = { ...this._contextMenuOptions };\r\n\r\n      // merge the original commands with the built-in internal commands\r\n      const originalCommandItems = this._userOriginalContextMenu && Array.isArray(this._userOriginalContextMenu.commandItems) ? this._userOriginalContextMenu.commandItems : [];\r\n      this._contextMenuOptions.commandItems = [...originalCommandItems, ...this.addMenuCustomCommands(originalCommandItems)];\r\n      this._contextMenuOptions = { ...this._contextMenuOptions };\r\n      this.sharedService.gridOptions.contextMenu = this._contextMenuOptions;\r\n\r\n      // sort all menu items by their position order when defined\r\n      this.extensionUtility.sortItems(this._contextMenuOptions.commandItems || [], 'positionOrder');\r\n      this.extensionUtility.sortItems(this._contextMenuOptions.optionItems || [], 'positionOrder');\r\n\r\n      this._addon = new Slick.Plugins.ContextMenu(this._contextMenuOptions);\r\n      this.sharedService.grid.registerPlugin(this._addon);\r\n\r\n      // translate the item keys when necessary\r\n      if (this.sharedService.gridOptions.enableTranslate) {\r\n        this.translateContextMenu();\r\n      }\r\n\r\n      // hook all events\r\n      if (this.sharedService.grid && this._contextMenuOptions) {\r\n        if (this._contextMenuOptions.onExtensionRegistered) {\r\n          this._contextMenuOptions.onExtensionRegistered(this._addon);\r\n        }\r\n        if (this._contextMenuOptions && typeof this._contextMenuOptions.onCommand === 'function') {\r\n          this._eventHandler.subscribe(this._addon.onCommand, (event: Event, args: MenuCommandItemCallbackArgs) => {\r\n            if (this._contextMenuOptions && this._contextMenuOptions.onCommand) {\r\n              this._contextMenuOptions.onCommand(event, args);\r\n            }\r\n          });\r\n        }\r\n        if (this._contextMenuOptions && typeof this._contextMenuOptions.onOptionSelected === 'function') {\r\n          this._eventHandler.subscribe(this._addon.onOptionSelected, (event: Event, args: MenuOptionItemCallbackArgs) => {\r\n            if (this._contextMenuOptions && this._contextMenuOptions.onOptionSelected) {\r\n              this._contextMenuOptions.onOptionSelected(event, args);\r\n            }\r\n          });\r\n        }\r\n        if (this._contextMenuOptions && typeof this._contextMenuOptions.onBeforeMenuShow === 'function') {\r\n          this._eventHandler.subscribe(this._addon.onBeforeMenuShow, (event: Event, args: { cell: number; row: number; grid: any; }) => {\r\n            if (this._contextMenuOptions && this._contextMenuOptions.onBeforeMenuShow) {\r\n              this._contextMenuOptions.onBeforeMenuShow(event, args);\r\n            }\r\n          });\r\n        }\r\n        if (this._contextMenuOptions && typeof this._contextMenuOptions.onBeforeMenuClose === 'function') {\r\n          this._eventHandler.subscribe(this._addon.onBeforeMenuClose, (event: Event, args: { cell: number; row: number; grid: any; menu: any; }) => {\r\n            if (this._contextMenuOptions && this._contextMenuOptions.onBeforeMenuClose) {\r\n              this._contextMenuOptions.onBeforeMenuClose(event, args);\r\n            }\r\n          });\r\n        }\r\n        if (this._contextMenuOptions && typeof this._contextMenuOptions.onAfterMenuShow === 'function') {\r\n          this._eventHandler.subscribe(this._addon.onAfterMenuShow, (event: Event, args: { cell: number; row: number; grid: any; }) => {\r\n            if (this._contextMenuOptions && this._contextMenuOptions.onAfterMenuShow) {\r\n              this._contextMenuOptions.onAfterMenuShow(event, args);\r\n            }\r\n          });\r\n        }\r\n      }\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Translate the Cell Menu titles, we need to loop through all column definition to re-translate them */\r\n  translateContextMenu() {\r\n    if (this.sharedService && this.sharedService.gridOptions && this.sharedService.gridOptions.contextMenu) {\r\n      const contextMenu = this.sharedService.gridOptions.contextMenu;\r\n      const menuOptions: Partial<ContextMenu> = {};\r\n\r\n      if (contextMenu.commandTitleKey) {\r\n        contextMenu.commandTitle = this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(contextMenu.commandTitleKey) || contextMenu.commandTitle;\r\n        menuOptions.commandTitle = contextMenu.commandTitle;\r\n      }\r\n      if (contextMenu.optionTitleKey) {\r\n        contextMenu.optionTitle = this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(contextMenu.optionTitleKey) || contextMenu.optionTitle;\r\n        menuOptions.optionTitle = contextMenu.optionTitle;\r\n      }\r\n      const originalCommandItems = this._userOriginalContextMenu && Array.isArray(this._userOriginalContextMenu.commandItems) ? this._userOriginalContextMenu.commandItems : [];\r\n      contextMenu.commandItems = [...originalCommandItems, ...this.addMenuCustomCommands(originalCommandItems)];\r\n      menuOptions.commandItems = contextMenu.commandItems; // copy it also to the menuOptions else they won't be translated when locale changes\r\n\r\n      // translate all command/options and resort them afterward\r\n      this.extensionUtility.translateItems(contextMenu.commandItems || [], 'titleKey', 'title');\r\n      this.extensionUtility.translateItems(contextMenu.optionItems || [], 'titleKey', 'title');\r\n      this.extensionUtility.sortItems(contextMenu.commandItems || [], 'positionOrder');\r\n      this.extensionUtility.sortItems(contextMenu.optionItems || [], 'positionOrder');\r\n\r\n      // update the title options so that it has latest translated values\r\n      if (this._addon && this._addon.setOptions) {\r\n        this._addon.setOptions(menuOptions);\r\n      }\r\n    }\r\n  }\r\n\r\n  // --\r\n  // private functions\r\n  // ------------------\r\n\r\n  /** Create Context Menu with Custom Commands (copy cell value, export) */\r\n  private addMenuCustomCommands(originalCustomItems: Array<MenuCommandItem | 'divider'>) {\r\n    const menuCustomItems: Array<MenuCommandItem | 'divider'> = [];\r\n    const gridOptions = this.sharedService && this.sharedService.gridOptions || {};\r\n    const contextMenu = gridOptions && gridOptions.contextMenu;\r\n    const dataView = this.sharedService && this.sharedService.dataView;\r\n    const translationPrefix = getTranslationPrefix(gridOptions);\r\n\r\n    // show context menu: Copy (cell value)\r\n    if (contextMenu && !contextMenu.hideCopyCellValueCommand) {\r\n      const commandName = 'copy';\r\n      if (!originalCustomItems.find(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === commandName)) {\r\n        menuCustomItems.push(\r\n          {\r\n            iconCssClass: contextMenu.iconCopyCellValueCommand || 'fa fa-clone',\r\n            title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}COPY`, 'TEXT_COPY'),\r\n            disabled: false,\r\n            command: commandName,\r\n            positionOrder: 50,\r\n            action: (e: Event, args: MenuCommandItemCallbackArgs) => {\r\n              this.copyToClipboard(args);\r\n            },\r\n            itemUsabilityOverride: (args: MenuCallbackArgs) => {\r\n              // make sure there's an item to copy before enabling this command\r\n              const columnDef = args && args.column as Column;\r\n              const dataContext = args && args.dataContext;\r\n              if (typeof columnDef.queryFieldNameGetterFn === 'function') {\r\n                const cellValue = this.getCellValueFromQueryFieldGetter(columnDef, dataContext);\r\n                if (cellValue !== '' && cellValue !== undefined) {\r\n                  return true;\r\n                }\r\n              } else if (columnDef && dataContext.hasOwnProperty(columnDef.field)) {\r\n                return dataContext[columnDef.field] !== '' && dataContext[columnDef.field] !== null && dataContext[columnDef.field] !== undefined;\r\n              }\r\n              return false;\r\n            }\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n    // show context menu: Export to file\r\n    if (gridOptions && gridOptions.enableExport && contextMenu && !contextMenu.hideExportCsvCommand) {\r\n      const commandName = 'export-csv';\r\n      if (!originalCustomItems.find(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === commandName)) {\r\n        menuCustomItems.push(\r\n          {\r\n            iconCssClass: contextMenu.iconExportCsvCommand || 'fa fa-download',\r\n            title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}EXPORT_TO_CSV`, 'TEXT_EXPORT_TO_CSV'),\r\n            disabled: false,\r\n            command: commandName,\r\n            positionOrder: 51,\r\n            action: () => this.exportService.exportToFile({\r\n              delimiter: DelimiterType.comma,\r\n              format: FileType.csv,\r\n            }),\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n    // show context menu: Export to Excel\r\n    if (gridOptions && gridOptions.enableExcelExport && contextMenu && !contextMenu.hideExportExcelCommand) {\r\n      const commandName = 'export-excel';\r\n      if (!originalCustomItems.find(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === commandName)) {\r\n        menuCustomItems.push(\r\n          {\r\n            iconCssClass: contextMenu.iconExportExcelCommand || 'fa fa-file-excel-o text-success',\r\n            title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}EXPORT_TO_EXCEL`, 'TEXT_EXPORT_TO_EXCEL'),\r\n            disabled: false,\r\n            command: commandName,\r\n            positionOrder: 52,\r\n            action: () => this.excelExportService.exportToExcel(),\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n    // show context menu: export to text file as tab delimited\r\n    if (gridOptions && gridOptions.enableExport && contextMenu && !contextMenu.hideExportTextDelimitedCommand) {\r\n      const commandName = 'export-text-delimited';\r\n      if (!originalCustomItems.find(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === commandName)) {\r\n        menuCustomItems.push(\r\n          {\r\n            iconCssClass: contextMenu.iconExportTextDelimitedCommand || 'fa fa-download',\r\n            title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}EXPORT_TO_TAB_DELIMITED`, 'TEXT_EXPORT_TO_TAB_DELIMITED'),\r\n            disabled: false,\r\n            command: commandName,\r\n            positionOrder: 53,\r\n            action: () => this.exportService.exportToFile({\r\n              delimiter: DelimiterType.tab,\r\n              format: FileType.txt,\r\n            }),\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n    // -- Grouping Commands\r\n    if (gridOptions && (gridOptions.enableGrouping || gridOptions.enableDraggableGrouping || gridOptions.enableTreeData)) {\r\n      // add a divider (separator) between the top sort commands and the other clear commands\r\n      if (contextMenu && !contextMenu.hideCopyCellValueCommand) {\r\n        menuCustomItems.push({ divider: true, command: '', positionOrder: 54 });\r\n      }\r\n\r\n      // show context menu: Clear Grouping\r\n      if (gridOptions && !gridOptions.enableTreeData && contextMenu && !contextMenu.hideClearAllGrouping) {\r\n        const commandName = 'clear-grouping';\r\n        if (!originalCustomItems.find(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === commandName)) {\r\n          menuCustomItems.push(\r\n            {\r\n              iconCssClass: contextMenu.iconClearGroupingCommand || 'fa fa-times',\r\n              title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}CLEAR_ALL_GROUPING`, 'TEXT_CLEAR_ALL_GROUPING'),\r\n              disabled: false,\r\n              command: commandName,\r\n              positionOrder: 55,\r\n              action: () => dataView.setGrouping([]),\r\n              itemUsabilityOverride: () => {\r\n                // only enable the command when there's an actually grouping in play\r\n                const groupingArray = dataView && dataView.getGrouping && dataView.getGrouping();\r\n                return Array.isArray(groupingArray) && groupingArray.length > 0;\r\n              }\r\n            }\r\n          );\r\n        }\r\n      }\r\n\r\n      // show context menu: Collapse all Groups\r\n      if (gridOptions && contextMenu && !contextMenu.hideCollapseAllGroups) {\r\n        const commandName = 'collapse-all-groups';\r\n        if (!originalCustomItems.find(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === commandName)) {\r\n          menuCustomItems.push(\r\n            {\r\n              iconCssClass: contextMenu.iconCollapseAllGroupsCommand || 'fa fa-compress',\r\n              title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}COLLAPSE_ALL_GROUPS`, 'TEXT_COLLAPSE_ALL_GROUPS'),\r\n              disabled: false,\r\n              command: commandName,\r\n              positionOrder: 56,\r\n              action: () => {\r\n                if (gridOptions.enableTreeData) {\r\n                  this.treeDataService.toggleTreeDataCollapse(true);\r\n                } else {\r\n                  dataView.collapseAllGroups();\r\n                }\r\n              },\r\n              itemUsabilityOverride: () => {\r\n                if (gridOptions.enableTreeData) {\r\n                  return true;\r\n                }\r\n                // only enable the command when there's an actually grouping in play\r\n                const groupingArray = dataView && dataView.getGrouping && dataView.getGrouping();\r\n                return Array.isArray(groupingArray) && groupingArray.length > 0;\r\n              }\r\n            }\r\n          );\r\n        }\r\n      }\r\n\r\n      // show context menu: Expand all Groups\r\n      if (gridOptions && contextMenu && !contextMenu.hideExpandAllGroups) {\r\n        const commandName = 'expand-all-groups';\r\n        if (!originalCustomItems.find(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === commandName)) {\r\n          menuCustomItems.push(\r\n            {\r\n              iconCssClass: contextMenu.iconExpandAllGroupsCommand || 'fa fa-expand',\r\n              title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}EXPAND_ALL_GROUPS`, 'TEXT_EXPAND_ALL_GROUPS'),\r\n              disabled: false,\r\n              command: commandName,\r\n              positionOrder: 57,\r\n              action: () => {\r\n                if (gridOptions.enableTreeData) {\r\n                  this.treeDataService.toggleTreeDataCollapse(false);\r\n                } else {\r\n                  dataView.expandAllGroups();\r\n                }\r\n              },\r\n              itemUsabilityOverride: () => {\r\n                if (gridOptions.enableTreeData) {\r\n                  return true;\r\n                }\r\n                // only enable the command when there's an actually grouping in play\r\n                const groupingArray = dataView && dataView.getGrouping && dataView.getGrouping();\r\n                return Array.isArray(groupingArray) && groupingArray.length > 0;\r\n              }\r\n            }\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return menuCustomItems;\r\n  }\r\n\r\n  /**\r\n   * First get the value, if \"exportWithFormatter\" is set then we'll use the formatter output\r\n   * Then we create the DOM trick to copy a text value by creating a fake <div> that is not shown to the user\r\n   * and from there we can call the execCommand 'copy' command and expect the value to be in clipboard\r\n   * @param args\r\n   */\r\n  private copyToClipboard(args: MenuCommandItemCallbackArgs) {\r\n    try {\r\n      if (args && args.grid && args.command) {\r\n        // get the value, if \"exportWithFormatter\" is set then we'll use the formatter output\r\n        const gridOptions = this.sharedService && this.sharedService.gridOptions || {};\r\n        const cell = args && args.cell || 0;\r\n        const row = args && args.row || 0;\r\n        const columnDef = args && args.column;\r\n        const dataContext = args && args.dataContext;\r\n        const grid = this.sharedService && this.sharedService.grid;\r\n        const exportOptions = gridOptions && (gridOptions.excelExportOptions || gridOptions.exportOptions);\r\n        let textToCopy = exportWithFormatterWhenDefined(row, cell, columnDef, dataContext, grid, exportOptions);\r\n\r\n        if (typeof columnDef.queryFieldNameGetterFn === 'function') {\r\n          textToCopy = this.getCellValueFromQueryFieldGetter(columnDef, dataContext);\r\n        }\r\n\r\n        // create fake <div> to copy into clipboard & delete it from the DOM once we're done\r\n        const range = document.createRange();\r\n        const tmpElem = $('<div>').css({ position: 'absolute', left: '-1000px', top: '-1000px' }).text(textToCopy);\r\n        $('body').append(tmpElem);\r\n        range.selectNodeContents(tmpElem.get(0));\r\n        const selection = window.getSelection();\r\n        if (selection && selection.addRange && selection.removeAllRanges) {\r\n          selection.removeAllRanges();\r\n          selection.addRange(range);\r\n          const success = document.execCommand('copy', false, textToCopy);\r\n          if (success) {\r\n            tmpElem.remove();\r\n          }\r\n        }\r\n      }\r\n    } catch (e) { }\r\n  }\r\n\r\n  /**\r\n   * When a queryFieldNameGetterFn is defined, then get the value from that getter callback function\r\n   * @param columnDef\r\n   * @param dataContext\r\n   * @return cellValue\r\n   */\r\n  private getCellValueFromQueryFieldGetter(columnDef: Column, dataContext: any): string {\r\n    let cellValue = '';\r\n\r\n    if (typeof columnDef.queryFieldNameGetterFn === 'function') {\r\n      const queryFieldName = columnDef.queryFieldNameGetterFn(dataContext);\r\n\r\n      // get the cell value from the item or when it's a dot notation then exploded the item and get the final value\r\n      if (queryFieldName && queryFieldName.indexOf('.') >= 0) {\r\n        cellValue = getDescendantProperty(dataContext, queryFieldName);\r\n      } else {\r\n        cellValue = dataContext[queryFieldName];\r\n      }\r\n    }\r\n\r\n    return cellValue;\r\n  }\r\n}\r\n","import 'slickgrid/plugins/slick.draggablegrouping';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { SharedService } from '../services/shared.service';\r\nimport { DraggableGrouping, Extension, GridOption, Grouping, SlickEventHandler } from '../models/index';\r\nimport { ExtensionUtility } from './extensionUtility';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n@Injectable()\r\nexport class DraggableGroupingExtension implements Extension {\r\n  private _eventHandler: SlickEventHandler;\r\n  private _addon: any;\r\n  private _draggableGroupingOptions!: DraggableGrouping | null;\r\n\r\n  constructor(private extensionUtility: ExtensionUtility, private sharedService: SharedService) {\r\n    this._eventHandler = new Slick.EventHandler();\r\n  }\r\n\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    if (this._addon && this._addon.destroy) {\r\n      this._addon.destroy();\r\n    }\r\n    this.extensionUtility.nullifyFunctionNameStartingWithOn(this._draggableGroupingOptions);\r\n    this._addon = null;\r\n    this._draggableGroupingOptions = null;\r\n  }\r\n\r\n  /**\r\n   * Bind/Create different plugins before the Grid creation.\r\n   * For example the multi-select have to be added to the column definition before the grid is created to work properly\r\n   */\r\n  create(gridOptions: GridOption) {\r\n    if (gridOptions) {\r\n      if (!this._addon) {\r\n        this._addon = new Slick.DraggableGrouping(gridOptions.draggableGrouping || {});\r\n      }\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Get the instance of the SlickGrid addon (control or plugin). */\r\n  getAddonInstance() {\r\n    return this._addon;\r\n  }\r\n\r\n  register(): any {\r\n    if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {\r\n      this.sharedService.grid.registerPlugin(this._addon);\r\n\r\n      // Events\r\n      if (this.sharedService.grid && this.sharedService.gridOptions.draggableGrouping) {\r\n        this._draggableGroupingOptions = this.sharedService.gridOptions.draggableGrouping;\r\n        if (this._draggableGroupingOptions.onExtensionRegistered) {\r\n          this._draggableGroupingOptions.onExtensionRegistered(this._addon);\r\n        }\r\n        this._eventHandler.subscribe(this._addon.onGroupChanged, (e: any, args: { caller?: string; groupColumns: Grouping[] }) => {\r\n          if (this._draggableGroupingOptions && typeof this._draggableGroupingOptions.onGroupChanged === 'function') {\r\n            this._draggableGroupingOptions.onGroupChanged(e, args);\r\n          }\r\n        });\r\n      }\r\n\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import { OperatorString } from '../models/index';\r\n\r\n/**\r\n * Compare 2 objects,\r\n * we will loop through all properties of the object to compare the entire content of both objects\r\n * Optionally we can compare by a property key, when that is provided we will compare the object content\r\n * @param o1\r\n * @param o2\r\n * @param compareKey optional\r\n * @return boolean are objects equals?\r\n */\r\nexport function compareObjects(o1: any, o2: any, compareKey?: string): boolean {\r\n  // if user provided an object compare key then compare directly both objects by that key\r\n  if (compareKey && ((o1 && o1.hasOwnProperty(compareKey)) || (o2 && o2.hasOwnProperty(compareKey)))) {\r\n    return o1[compareKey] === o2 || o1 === o2[compareKey] || o1[compareKey] === o2[compareKey];\r\n  }\r\n\r\n  // loop through all object properties to compare the full content of the object\r\n  // we'll return false as soon as a difference is detected\r\n  for (const p in o1) {\r\n    if (o1.hasOwnProperty(p)) {\r\n      if (o1[p] !== o2[p]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/** Simple check to see if the given Operator is meant to be used with a collection check */\r\nexport function isCollectionOperator(operator: OperatorString): boolean {\r\n  const inputOperator = operator && operator.toUpperCase() || '';\r\n  switch (inputOperator) {\r\n    case 'IN':\r\n    case 'NIN':\r\n    case 'NOT_IN':\r\n    case 'IN_CONTAINS':\r\n    case 'NIN_CONTAINS':\r\n    case 'NOT_IN_CONTAINS':\r\n    case 'IN_COLLECTION':\r\n    case 'NOT_IN_COLLECTION':\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\n/** Execute the test on the filter condition given an operator and both values, returns a boolean */\r\nexport const testFilterCondition = (operator: OperatorString, value1: any, value2: any): boolean => {\r\n  switch (operator.toUpperCase()) {\r\n    case '<':\r\n    case 'LT':\r\n      return (value1 < value2);\r\n    case '<=':\r\n    case 'LE':\r\n      return (value1 <= value2);\r\n    case '>':\r\n    case 'GT':\r\n      return (value1 > value2);\r\n    case '>=':\r\n    case 'GE':\r\n      return (value1 >= value2);\r\n    case '!=':\r\n    case '<>':\r\n    case 'NE':\r\n      return (value1 !== value2);\r\n    case '=':\r\n    case '==':\r\n    case 'EQ':\r\n      return (value1 === value2);\r\n    case 'IN':\r\n      return ((value2 && Array.isArray(value2 as string[])) ? (value2.includes(value1)) : false);\r\n    case 'NIN':\r\n    case 'NOT_IN':\r\n      return ((value2 && Array.isArray(value2 as string[])) ? (!value2.includes(value1)) : false);\r\n    case 'IN_CONTAINS':\r\n      if (value2 && Array.isArray(value2) && typeof value1 === 'string') {\r\n        return value2.some(item => value1.split(/[\\s,]+/).includes(item));\r\n      }\r\n      return false;\r\n    case 'NIN_CONTAINS':\r\n    case 'NOT_IN_CONTAINS':\r\n      if (value2 && Array.isArray(value2) && typeof value1 === 'string') {\r\n        return !value2.some(item => value1.split(/[\\s,]+/).includes(item));\r\n      }\r\n      return false;\r\n    case 'IN_COLLECTION':\r\n      if (value1 && value2 && Array.isArray(value1) && Array.isArray(value2)) {\r\n        return value2.some(item => value1.includes(item));\r\n      }\r\n      return false;\r\n    case 'NOT_IN_COLLECTION':\r\n      if (value1 && value2 && Array.isArray(value1) && Array.isArray(value2)) {\r\n        return !value2.some(item => value1.includes(item));\r\n      }\r\n      return false;\r\n  }\r\n  return true;\r\n};\r\n","import { FilterCondition, FilterConditionOption, OperatorString, OperatorType, SearchTerm } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\n\r\n/** Execute filter condition check on each cell */\r\nexport const executeStringFilterCondition: FilterCondition = ((options: FilterConditionOption, parsedSearchValues: string[]) => {\r\n  let [searchValue1, searchValue2] = parsedSearchValues;\r\n\r\n  if (searchValue1 === undefined && !options.operator) {\r\n    return true;\r\n  }\r\n\r\n  // make sure the cell value is a string by casting it when possible\r\n  options.cellValue = (options.cellValue === undefined || options.cellValue === null) ? '' : options.cellValue.toString();\r\n\r\n  // make both the cell value and search value lower for case insensitive comparison\r\n  const cellValue = options.cellValue.toLowerCase();\r\n  if (typeof searchValue1 === 'string') {\r\n    searchValue1 = searchValue1.toLowerCase();\r\n  }\r\n  if (typeof searchValue2 === 'string') {\r\n    searchValue2 = searchValue2.toLowerCase();\r\n  }\r\n\r\n  if (searchValue1 !== undefined && searchValue2 !== undefined) {\r\n    let operator = options && options.operator || options.defaultFilterRangeOperator;\r\n    if (operator !== OperatorType.rangeInclusive && operator !== OperatorType.rangeExclusive) {\r\n      operator = options.defaultFilterRangeOperator;\r\n    }\r\n    const isInclusive = operator === OperatorType.rangeInclusive;\r\n    const searchResult1 = testStringCondition((isInclusive ? '>=' : '>'), cellValue, searchValue1, options.searchInputLastChar);\r\n    const searchResult2 = testStringCondition((isInclusive ? '<=' : '<'), cellValue, searchValue2, options.searchInputLastChar);\r\n    return searchResult1 && searchResult2;\r\n  }\r\n  const searchResult1 = testStringCondition(options.operator, cellValue, searchValue1, options.searchInputLastChar);\r\n  return searchResult1;\r\n}) as FilterCondition;\r\n\r\n/**\r\n * From our search filter value(s), get the parsed value(s).\r\n * This is called only once per filter before running the actual filter condition check on each cell\r\n */\r\nexport function getFilterParsedText(inputSearchTerms: SearchTerm[] | undefined): SearchTerm[] {\r\n  const defaultSearchTerm = ''; // when nothing is provided, we'll default to 0\r\n  const searchTerms = Array.isArray(inputSearchTerms) && inputSearchTerms || [defaultSearchTerm];\r\n  const parsedSearchValues: string[] = [];\r\n  let searchValue1;\r\n  let searchValue2;\r\n  if (searchTerms.length === 2 || (typeof searchTerms[0] === 'string' && (searchTerms[0] as string).indexOf('..') > 0)) {\r\n    const searchValues = (searchTerms.length === 2) ? searchTerms : (searchTerms[0] as string).split('..');\r\n    searchValue1 = `${Array.isArray(searchValues) ? searchValues[0] : ''}`;\r\n    searchValue2 = `${Array.isArray(searchValues) ? searchValues[1] : ''}`;\r\n  } else {\r\n    const parsedSearchValue = (Array.isArray(inputSearchTerms) && inputSearchTerms.length > 0) ? inputSearchTerms[0] : '';\r\n    searchValue1 = parsedSearchValue === undefined || parsedSearchValue === null ? '' : `${parsedSearchValue}`; // make sure it's a string\r\n  }\r\n\r\n  if (searchValue1 !== undefined && searchValue2 !== undefined) {\r\n    parsedSearchValues.push(searchValue1 as string, searchValue2 as string);\r\n  } else if (searchValue1 !== undefined) {\r\n    parsedSearchValues.push(searchValue1 as string);\r\n  }\r\n  return parsedSearchValues;\r\n}\r\n\r\n/** Execute the filter string test condition, returns a boolean */\r\nfunction testStringCondition(operator: OperatorType | OperatorString, cellValue: string, searchValue: string, searchInputLastChar?: string): boolean {\r\n  if (operator === '*' || operator === OperatorType.endsWith) {\r\n    return cellValue.endsWith(searchValue);\r\n  } else if ((operator === '' && searchInputLastChar === '*') || operator === OperatorType.startsWith) {\r\n    return cellValue.startsWith(searchValue);\r\n  } else if (operator === '' || operator === OperatorType.contains) {\r\n    return (cellValue.indexOf(searchValue) > -1);\r\n  } else if (operator === '<>' || operator === OperatorType.notContains) {\r\n    return (cellValue.indexOf(searchValue) === -1);\r\n  }\r\n  return testFilterCondition(operator || '==', cellValue, searchValue);\r\n}\r\n","import { FilterCondition, FilterConditionOption, OperatorType, SearchTerm } from '../models/index';\r\nimport { isNumber } from '../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\n/** Execute filter condition check on each cell */\r\nexport const executeNumberFilterCondition: FilterCondition = ((options: FilterConditionOption, parsedSearchValues: number[]) => {\r\n  const cellValue = parseFloat(options.cellValue);\r\n  const [searchValue1, searchValue2] = parsedSearchValues;\r\n\r\n  if (searchValue1 === undefined && !options.operator) {\r\n    return true;\r\n  }\r\n\r\n  if (searchValue1 !== undefined && searchValue2 !== undefined) {\r\n    let operator = options && options.operator || options.defaultFilterRangeOperator;\r\n    if (operator !== OperatorType.rangeInclusive && operator !== OperatorType.rangeExclusive) {\r\n      operator = options.defaultFilterRangeOperator;\r\n    }\r\n    const isInclusive = operator === OperatorType.rangeInclusive;\r\n    const resultCondition1 = testFilterCondition((isInclusive ? '>=' : '>'), cellValue, +searchValue1);\r\n    const resultCondition2 = testFilterCondition((isInclusive ? '<=' : '<'), cellValue, +searchValue2);\r\n    return (resultCondition1 && resultCondition2);\r\n  }\r\n  return testFilterCondition(options.operator || '==', cellValue, +searchValue1);\r\n}) as FilterCondition;\r\n\r\n/**\r\n * From our search filter value(s), get the parsed value(s).\r\n * This is called only once per filter before running the actual filter condition check on each cell\r\n */\r\nexport function getFilterParsedNumbers(inputSearchTerms: SearchTerm[] | undefined): number[] {\r\n  const defaultSearchTerm = 0; // when nothing is provided, we'll default to 0\r\n  const searchTerms = Array.isArray(inputSearchTerms) && inputSearchTerms || [defaultSearchTerm];\r\n  const parsedSearchValues: number[] = [];\r\n  let searchValue1;\r\n  let searchValue2;\r\n\r\n  if (searchTerms.length === 2 || (typeof searchTerms[0] === 'string' && (searchTerms[0] as string).indexOf('..') > 0)) {\r\n    const searchValues = (searchTerms.length === 2) ? searchTerms : (searchTerms[0] as string).split('..');\r\n    searchValue1 = parseFloat(Array.isArray(searchValues) ? searchValues[0] as string : '');\r\n    searchValue2 = parseFloat(Array.isArray(searchValues) ? searchValues[1] as string : '');\r\n  } else {\r\n    searchValue1 = parseFloat(searchTerms[0] as string);\r\n  }\r\n\r\n  if (isNumber(searchValue1, true) && isNumber(searchValue2, true)) {\r\n    parsedSearchValues.push(searchValue1 as number, searchValue2 as number);\r\n  } else if (isNumber(searchValue1, true)) {\r\n    parsedSearchValues.push(searchValue1 as number);\r\n  }\r\n  return parsedSearchValues;\r\n}\r\n","import { FilterCondition, FilterConditionOption, SearchTerm } from './../models/index';\r\nimport { parseBoolean } from '../services/utilities';\r\n\r\n/** Execute filter condition check on each cell */\r\nexport const executeBooleanFilterCondition: FilterCondition = ((options: FilterConditionOption, parsedSearchValue?: boolean | string) => {\r\n  return parseBoolean(options.cellValue) === parseBoolean(parsedSearchValue as string);\r\n}) as FilterCondition;\r\n\r\n/**\r\n * From our search filter value(s), get the parsed value(s).\r\n * This is called only once per filter before running the actual filter condition check on each cell\r\n */\r\nexport function getFilterParsedBoolean(inputSearchTerms: SearchTerm[] | undefined): boolean {\r\n  const searchTerm = Array.isArray(inputSearchTerms) && inputSearchTerms[0] || false;\r\n  return parseBoolean(searchTerm);\r\n}\r\n","import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\n/**\r\n * Execute filter condition check on each cell.\r\n * This is used only by the Select Single/Multiple Filter which uses the \"multiple-select.js\" 3rd party lib which always provide values as strings\r\n */\r\nexport const executeCollectionSearchFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // multiple-select will always return text, so we should make our cell values text as well\r\n  const filterOperator = options.operator;\r\n  let cellValue: string | string[];\r\n  if (Array.isArray(options.cellValue) && (filterOperator === 'IN_COLLECTION' || filterOperator === 'NOT_IN_COLLECTION')) {\r\n    cellValue = (!!options.cellValue.length ? options.cellValue.map(value => `${value}`) : []);\r\n  } else {\r\n    cellValue = (options.cellValue === undefined || options.cellValue === null) ? '' : `${options.cellValue}`;\r\n  }\r\n\r\n  return testFilterCondition(filterOperator || 'IN', cellValue, options.searchTerms || []);\r\n};\r\n","import * as moment_ from 'moment-mini';\r\nconst moment = (moment_ as any)['default'] || moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nimport { FieldType, FilterConditionOption, OperatorType, SearchTerm } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from '../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\n/**\r\n * Execute Date filter condition check on each cell and use correct date format depending on it's field type (or filterSearchType when that is provided)\r\n */\r\nexport function executeDateFilterCondition(options: FilterConditionOption, parsedSearchDates: any[]): boolean {\r\n  const filterSearchType = options && (options.filterSearchType || options.fieldType) || FieldType.dateIso;\r\n  const FORMAT = mapMomentDateFormatWithFieldType(filterSearchType);\r\n  const [searchDate1, searchDate2] = parsedSearchDates;\r\n\r\n  // cell value in moment format\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n\r\n  // return when cell value is not a valid date\r\n  if ((!searchDate1 && !searchDate2) || !dateCell.isValid()) {\r\n    return false;\r\n  }\r\n\r\n  // when comparing with Dates only (without time), we need to disregard the time portion, we can do so by setting our time to start at midnight\r\n  // ref, see https://stackoverflow.com/a/19699447/1212166\r\n  const dateCellTimestamp = FORMAT.toLowerCase().includes('h') ? dateCell.valueOf() : dateCell.clone().startOf('day').valueOf();\r\n\r\n  // having 2 search dates, we assume that it's a date range filtering and we'll compare against both dates\r\n  if (searchDate1 && searchDate2) {\r\n    let operator = options && options.operator || options.defaultFilterRangeOperator;\r\n    if (operator !== OperatorType.rangeInclusive && operator !== OperatorType.rangeExclusive) {\r\n      operator = options.defaultFilterRangeOperator;\r\n    }\r\n    const isInclusive = operator === OperatorType.rangeInclusive;\r\n    const resultCondition1 = testFilterCondition((isInclusive ? '>=' : '>'), dateCellTimestamp, searchDate1.valueOf());\r\n    const resultCondition2 = testFilterCondition((isInclusive ? '<=' : '<'), dateCellTimestamp, searchDate2.valueOf());\r\n    return (resultCondition1 && resultCondition2);\r\n  }\r\n\r\n  // comparing against a single search date\r\n  const dateSearchTimestamp1 = FORMAT.toLowerCase().includes('h') ? searchDate1.valueOf() : searchDate1.clone().startOf('day').valueOf();\r\n  return testFilterCondition(options.operator || '==', dateCellTimestamp, dateSearchTimestamp1);\r\n}\r\n\r\n/**\r\n * From our search filter value(s), get the parsed value(s), they are parsed as Moment object(s).\r\n * This is called only once per filter before running the actual filter condition check on each cell\r\n */\r\nexport function getFilterParsedDates(inputSearchTerms: SearchTerm[] | undefined, inputFilterSearchType: typeof FieldType[keyof typeof FieldType]): SearchTerm[] {\r\n  const searchTerms = Array.isArray(inputSearchTerms) && inputSearchTerms || [];\r\n  const filterSearchType = inputFilterSearchType || FieldType.dateIso;\r\n  const FORMAT = mapMomentDateFormatWithFieldType(filterSearchType);\r\n\r\n  const parsedSearchValues: any[] = [];\r\n\r\n  if (searchTerms.length === 2 || (typeof searchTerms[0] === 'string' && (searchTerms[0] as string).indexOf('..') > 0)) {\r\n    const searchValues = (searchTerms.length === 2) ? searchTerms : (searchTerms[0] as string).split('..');\r\n    const searchValue1 = (Array.isArray(searchValues) && searchValues[0] || '') as Date | string;\r\n    const searchValue2 = (Array.isArray(searchValues) && searchValues[1] || '') as Date | string;\r\n    const searchDate1 = moment(searchValue1, FORMAT, true);\r\n    const searchDate2 = moment(searchValue2, FORMAT, true);\r\n\r\n    // return if any of the 2 values are invalid dates\r\n    if (!searchDate1.isValid() || !searchDate2.isValid()) {\r\n      return [];\r\n    }\r\n    parsedSearchValues.push(searchDate1, searchDate2);\r\n  } else {\r\n    // return if the search term is an invalid date\r\n    const searchDate1 = moment(searchTerms[0] as Date | string, FORMAT, true);\r\n    if (!searchDate1.isValid()) {\r\n      return [];\r\n    }\r\n    parsedSearchValues.push(searchDate1);\r\n  }\r\n  return parsedSearchValues;\r\n}\r\n","import { FieldType, FilterCondition, FilterConditionOption, SearchTerm } from '../models/index';\r\nimport { executeBooleanFilterCondition, getFilterParsedBoolean } from './booleanFilterCondition';\r\nimport { executeCollectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { getFilterParsedNumbers, executeNumberFilterCondition } from './numberFilterCondition';\r\nimport { executeDateFilterCondition, getFilterParsedDates } from './dateFilterCondition';\r\nimport { executeObjectFilterCondition, getFilterParsedObjectResult } from './objectFilterCondition';\r\nimport { executeStringFilterCondition, getFilterParsedText } from './stringFilterCondition';\r\nimport { isCollectionOperator } from './filterUtilities';\r\n\r\n/**\r\n * General variable types, just 5x types instead of the multiple FieldType.\r\n * For example all DateIso, DateUs are all \"date\", this makes it easier to know which filter condition to call\r\n */\r\nexport type GeneralVariableDataType = 'boolean' | 'date' | 'number' | 'object' | 'string';\r\n\r\n/** Execute mapped condition (per field type) for each cell in the grid */\r\nexport const executeFilterConditionTest: FilterCondition = (options: FilterConditionOption, parsedSearchTerms?: SearchTerm | SearchTerm[]) => {\r\n  // when using a multi-select ('IN' operator) we will not use the field type but instead go directly with a collection search\r\n  if (isCollectionOperator(options.operator)) {\r\n    return executeCollectionSearchFilterCondition(options);\r\n  }\r\n\r\n  // From a more specific field type (dateIso, dateEuro, text, readonly, ...), get the more generalized type (boolean, date, number, object, text)\r\n  const generalizedType = getVarTypeOfByColumnFieldType(options.filterSearchType || options.fieldType);\r\n\r\n  // execute the mapped type, or default to String condition check\r\n  switch (generalizedType) {\r\n    case 'boolean':\r\n      // the parsedSearchTerms should be single value (result came from getFilterParsedBoolean() method)\r\n      return executeBooleanFilterCondition(options, parsedSearchTerms as SearchTerm);\r\n    case 'date':\r\n      return executeDateFilterCondition(options, (parsedSearchTerms || []) as any[]);\r\n    case 'number':\r\n      return executeNumberFilterCondition(options, (parsedSearchTerms || []) as number[]);\r\n    case 'object':\r\n      // the parsedSearchTerms should be single value (result came from getFilterParsedObjectResult() method)\r\n      return executeObjectFilterCondition(options, parsedSearchTerms as SearchTerm);\r\n    case 'string':\r\n    default:\r\n      // the parsedSearchTerms should be single value (result came from getFilterParsedText() method)\r\n      return executeStringFilterCondition(options, (parsedSearchTerms || []) as string[]);\r\n  }\r\n};\r\n\r\n/**\r\n * From our search filter value(s), get their parsed value(s), for example a \"dateIso\" filter will be parsed as Moment object.\r\n * Then later when we execute the filtering checks, we won't need to re-parse all search value(s) again and again.\r\n * So this is called only once, for each search filter that is, prior to running the actual filter condition checks on each cell afterward.\r\n */\r\nexport function getParsedSearchTermsByFieldType(inputSearchTerms: SearchTerm[] | undefined, inputFilterSearchType: typeof FieldType[keyof typeof FieldType]): SearchTerm | SearchTerm[] | undefined {\r\n  const generalizedType = getVarTypeOfByColumnFieldType(inputFilterSearchType);\r\n  let parsedSearchValues: SearchTerm | SearchTerm[] | undefined;\r\n\r\n  // parse the search value(s), the Date & Numbers could be in a range and so we will return an array for them\r\n  // any other type will return a single search value\r\n  switch (generalizedType) {\r\n    case 'boolean':\r\n      parsedSearchValues = getFilterParsedBoolean(inputSearchTerms) as boolean;\r\n      break;\r\n    case 'date':\r\n      parsedSearchValues = getFilterParsedDates(inputSearchTerms, inputFilterSearchType) as SearchTerm[];\r\n      break;\r\n    case 'number':\r\n      parsedSearchValues = getFilterParsedNumbers(inputSearchTerms) as SearchTerm[];\r\n      break;\r\n    case 'object':\r\n      parsedSearchValues = getFilterParsedObjectResult(inputSearchTerms);\r\n      break;\r\n    case 'string':\r\n      parsedSearchValues = getFilterParsedText(inputSearchTerms) as SearchTerm[];\r\n      break;\r\n  }\r\n  return parsedSearchValues;\r\n}\r\n\r\n\r\n/**\r\n * From a more specific field type, let's return a simple and more general type (boolean, date, number, object, text)\r\n * @param fieldType - specific field type\r\n * @returns generalType - general field type\r\n */\r\nexport function getVarTypeOfByColumnFieldType(fieldType: typeof FieldType[keyof typeof FieldType]): GeneralVariableDataType {\r\n  // return general field type\r\n  switch (fieldType) {\r\n    case FieldType.boolean:\r\n      return 'boolean';\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    case FieldType.dateUtc:\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n    case FieldType.dateTimeIsoAmPm:\r\n    case FieldType.dateTimeIsoAM_PM:\r\n    case FieldType.dateTimeShortIso:\r\n    case FieldType.dateEuro:\r\n    case FieldType.dateEuroShort:\r\n    case FieldType.dateTimeShortEuro:\r\n    case FieldType.dateTimeEuro:\r\n    case FieldType.dateTimeEuroAmPm:\r\n    case FieldType.dateTimeEuroAM_PM:\r\n    case FieldType.dateTimeEuroShort:\r\n    case FieldType.dateTimeEuroShortAmPm:\r\n    case FieldType.dateTimeEuroShortAM_PM:\r\n    case FieldType.dateUs:\r\n    case FieldType.dateUsShort:\r\n    case FieldType.dateTimeShortUs:\r\n    case FieldType.dateTimeUs:\r\n    case FieldType.dateTimeUsAmPm:\r\n    case FieldType.dateTimeUsAM_PM:\r\n    case FieldType.dateTimeUsShort:\r\n    case FieldType.dateTimeUsShortAmPm:\r\n    case FieldType.dateTimeUsShortAM_PM:\r\n      return 'date';\r\n    case FieldType.integer:\r\n    case FieldType.float:\r\n    case FieldType.number:\r\n      return 'number';\r\n    case FieldType.object:\r\n      return 'object';\r\n    case FieldType.string:\r\n    case FieldType.text:\r\n    case FieldType.password:\r\n    case FieldType.readonly:\r\n    default:\r\n      return 'string';\r\n  }\r\n}\r\n","import { FilterCondition, FilterConditionOption, SearchTerm } from '../models/index';\r\nimport { compareObjects } from './filterUtilities';\r\n\r\n/** Execute filter condition check on each cell */\r\nexport const executeObjectFilterCondition: FilterCondition = ((options: FilterConditionOption, parsedSearchValue: SearchTerm | undefined) => {\r\n  if (parsedSearchValue === undefined && !options.operator) {\r\n    return true;\r\n  }\r\n\r\n  const operator = (options.operator || '').toUpperCase();\r\n\r\n  switch (operator) {\r\n    case '!=':\r\n    case '<>':\r\n    case 'NE':\r\n      return !compareObjects(options.cellValue, parsedSearchValue, options.dataKey);\r\n    case '=':\r\n    case '==':\r\n    case 'EQ':\r\n    default:\r\n      return compareObjects(options.cellValue, parsedSearchValue, options.dataKey);\r\n  }\r\n}) as FilterCondition;\r\n\r\n/**\r\n * From our search filter value(s), get the parsed value(s).\r\n * This is called only once per filter before running the actual filter condition check on each cell\r\n */\r\nexport function getFilterParsedObjectResult(inputSearchTerms: SearchTerm[] | undefined): SearchTerm {\r\n  const parsedSearchValue = (Array.isArray(inputSearchTerms) && inputSearchTerms.length > 0) ? inputSearchTerms[0] : '';\r\n  return parsedSearchValue || '';\r\n}\r\n","import { executeBooleanFilterCondition } from './booleanFilterCondition';\r\nimport { executeFilterConditionTest } from './filterConditionProcesses';\r\nimport { executeCollectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { executeNumberFilterCondition } from './numberFilterCondition';\r\nimport { executeStringFilterCondition } from './stringFilterCondition';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const FilterConditions = {\r\n  executeFilterConditionTest,\r\n  booleanFilter: executeBooleanFilterCondition,\r\n  collectionSearchFilter: executeCollectionSearchFilterCondition,\r\n  numberFilter: executeNumberFilterCondition,\r\n  stringFilter: executeStringFilterCondition,\r\n  testFilter: testFilterCondition\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Subscription, Subject, Observable } from 'rxjs';\r\nimport * as DOMPurify_ from 'dompurify';\r\nconst DOMPurify = DOMPurify_; // patch to fix rollup to work\r\n\r\nimport {\r\n  AutocompleteOption,\r\n  CollectionCustomStructure,\r\n  CollectionOption,\r\n  Column,\r\n  ColumnFilter,\r\n  FieldType,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n} from './../models/index';\r\nimport { CollectionService } from '../services/collection.service';\r\nimport { castToPromise, getDescendantProperty, toKebabCase, unsubscribeAllObservables } from '../services/utilities';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\n@Injectable()\r\nexport class AutoCompleteFilter implements Filter {\r\n  protected _autoCompleteOptions!: AutocompleteOption;\r\n  protected _clearFilterTriggered = false;\r\n  protected _collection: any[] | null = [];\r\n  protected _shouldTriggerQuery = true;\r\n\r\n  /** DOM Element Name, useful for auto-detecting positioning (dropup / dropdown) */\r\n  elementName!: string;\r\n\r\n  /** The JQuery DOM element */\r\n  $filterElm: any;\r\n\r\n  grid: any;\r\n  searchTerms: SearchTerm[] = [];\r\n  columnDef!: Column;\r\n  callback!: FilterCallback;\r\n  isFilled = false;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName!: string;\r\n\r\n  /** The property name for a prefix that can be added to the labels in the collection */\r\n  labelPrefixName!: string;\r\n\r\n  /** The property name for a suffix that can be added to the labels in the collection */\r\n  labelSuffixName!: string;\r\n\r\n  /** The property name for values in the collection */\r\n  optionLabel!: string;\r\n\r\n  /** The property name for values in the collection */\r\n  valueName = 'label';\r\n\r\n  enableTranslateLabel = false;\r\n  subscriptions: Subscription[] = [];\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  constructor(protected readonly translate: TranslateService, protected readonly collectionService: CollectionService) { }\r\n\r\n  /** Getter for the Autocomplete Option */\r\n  get autoCompleteOptions(): Partial<AutocompleteOption> {\r\n    return this._autoCompleteOptions || {};\r\n  }\r\n\r\n  /** Getter for the Collection Options */\r\n  protected get collectionOptions(): CollectionOption {\r\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.collectionOptions || {};\r\n  }\r\n\r\n  /** Getter for the Collection Used by the Filter */\r\n  get collection(): any[] | null {\r\n    return this._collection;\r\n  }\r\n\r\n  /** Getter for the Column Filter */\r\n  get columnFilter(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  /** Get the Editor DOM Element */\r\n  get filterDomElement(): any {\r\n    return this.$filterElm;\r\n  }\r\n\r\n  get filterOptions(): AutocompleteOption {\r\n    return this.columnFilter && this.columnFilter.filterOptions || {};\r\n  }\r\n\r\n  /** Getter for the Custom Structure if exist */\r\n  get customStructure(): CollectionCustomStructure | undefined {\r\n    let customStructure = this.columnFilter && this.columnFilter.customStructure;\r\n    const columnType = this.columnFilter && this.columnFilter.type || this.columnDef && this.columnDef.type;\r\n    if (!customStructure && (columnType === FieldType.object && this.columnDef && this.columnDef.dataKey && this.columnDef.labelKey)) {\r\n      customStructure = {\r\n        label: this.columnDef.labelKey,\r\n        value: this.columnDef.dataKey,\r\n      };\r\n    }\r\n    return customStructure;\r\n  }\r\n\r\n  /** Getter to know what would be the default operator when none is specified */\r\n  get defaultOperator(): OperatorType | OperatorString {\r\n    return OperatorType.equal;\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /** jQuery UI AutoComplete instance */\r\n  get instance(): any {\r\n    return this.$filterElm.autocomplete('instance');\r\n  }\r\n\r\n  /** Getter of the Operator to use when doing the filter comparing */\r\n  get operator(): OperatorType | OperatorString {\r\n    return this.columnFilter && this.columnFilter.operator || this.defaultOperator;\r\n  }\r\n\r\n  /** Setter for the filter operator */\r\n  set operator(operator: OperatorType | OperatorString) {\r\n    if (this.columnFilter) {\r\n      this.columnFilter.operator = operator;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the filter template\r\n   */\r\n  init(args: FilterArguments): Promise<boolean> {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];\r\n\r\n    if (!this.grid || !this.columnDef || !this.columnFilter || (!this.columnFilter.collection && !this.columnFilter.collectionAsync && !this.columnFilter.filterOptions)) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" (or \"collectionAsync\") for the AutoComplete Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.autoComplete, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\r\n    }\r\n\r\n    this.enableTranslateLabel = this.columnFilter && this.columnFilter.enableTranslateLabel || false;\r\n    this.labelName = this.customStructure && this.customStructure.label || 'label';\r\n    this.valueName = this.customStructure && this.customStructure.value || 'value';\r\n    this.labelPrefixName = this.customStructure && this.customStructure.labelPrefix || 'labelPrefix';\r\n    this.labelSuffixName = this.customStructure && this.customStructure.labelSuffix || 'labelSuffix';\r\n\r\n    // always render the DOM element, even if user passed a \"collectionAsync\",\r\n    const newCollection = this.columnFilter.collection || [];\r\n    this._collection = newCollection;\r\n    this.renderDomElement(newCollection);\r\n\r\n    // on every Filter which have a \"collection\" or a \"collectionAsync\"\r\n    // we will add (or replace) a Subject to the \"collectionAsync\" property so that user has possibility to change the collection\r\n    // if \"collectionAsync\" is already set by the user, it will resolve it first then after it will replace it with a Subject\r\n    const collectionAsync = this.columnFilter && this.columnFilter.collectionAsync;\r\n    if (collectionAsync) {\r\n      return this.renderOptionsAsync(collectionAsync); // create Subject after resolve (createCollectionAsyncSubject)\r\n    } else {\r\n      return new Promise((resolve) => resolve(true));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear(shouldTriggerQuery = true) {\r\n    if (this.$filterElm) {\r\n      this._clearFilterTriggered = true;\r\n      this._shouldTriggerQuery = shouldTriggerQuery;\r\n      this.searchTerms = [];\r\n      this.$filterElm.val('');\r\n      this.$filterElm.trigger('input');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    // also unsubscribe all RxJS subscriptions\r\n    this.subscriptions = unsubscribeAllObservables(this.subscriptions);\r\n\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('input').remove();\r\n    }\r\n    this.$filterElm = null;\r\n    this._collection = null;\r\n  }\r\n\r\n  /** Set value(s) on the DOM element */\r\n  setValues(values: SearchTerm | SearchTerm[], operator?: OperatorType | OperatorString) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n\r\n    // set the operator when defined\r\n    this.operator = operator || this.defaultOperator;\r\n  }\r\n\r\n  //\r\n  // protected functions\r\n  // ------------------\r\n\r\n  /**\r\n   * user might want to filter certain items of the collection\r\n   * @param inputCollection\r\n   * @return outputCollection filtered and/or sorted collection\r\n   */\r\n  protected filterCollection(inputCollection: any[]): any[] {\r\n    let outputCollection = inputCollection;\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnFilter && this.columnFilter.collectionFilterBy) {\r\n      const filterBy = this.columnFilter.collectionFilterBy;\r\n      const filterCollectionBy = this.columnFilter.collectionOptions && this.columnFilter.collectionOptions.filterResultAfterEachPass || null;\r\n      outputCollection = this.collectionService.filterCollection(outputCollection, filterBy, filterCollectionBy);\r\n    }\r\n\r\n    return outputCollection;\r\n  }\r\n\r\n  /**\r\n   * user might want to sort the collection in a certain way\r\n   * @param inputCollection\r\n   * @return outputCollection filtered and/or sorted collection\r\n   */\r\n  protected sortCollection(inputCollection: any[]): any[] {\r\n    let outputCollection = inputCollection;\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnFilter && this.columnFilter.collectionSortBy) {\r\n      const sortBy = this.columnFilter.collectionSortBy;\r\n      outputCollection = this.collectionService.sortCollection(this.columnDef, outputCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    return outputCollection;\r\n  }\r\n\r\n  protected async renderOptionsAsync(collectionAsync: Promise<any> | Observable<any> | Subject<any>): Promise<boolean> {\r\n    if (collectionAsync) {\r\n      const awaitedCollection = await castToPromise(collectionAsync);\r\n      this.renderDomElementFromCollectionAsync(awaitedCollection);\r\n\r\n      // because we accept Promises & HttpClient Observable only execute once\r\n      // we will re-create an RxJs Subject which will replace the \"collectionAsync\" which got executed once anyway\r\n      // doing this provide the user a way to call a \"collectionAsync.next()\"\r\n      this.createCollectionAsyncSubject();\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Create or recreate an Observable Subject and reassign it to the \"collectionAsync\" object so user can call a \"collectionAsync.next()\" on it */\r\n  protected createCollectionAsyncSubject() {\r\n    const newCollectionAsync = new Subject<any>();\r\n    this.columnFilter.collectionAsync = newCollectionAsync;\r\n    this.subscriptions.push(\r\n      newCollectionAsync.subscribe(collection => this.renderDomElementFromCollectionAsync(collection))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * When user use a CollectionAsync we will use the returned collection to render the filter DOM element\r\n   * and reinitialize filter collection with this new collection\r\n   */\r\n  protected renderDomElementFromCollectionAsync(collection: any[]) {\r\n    this._collection = collection;\r\n    if (this.collectionOptions && (this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty)) {\r\n      const collectionInsideObjectProperty = this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty;\r\n      collection = getDescendantProperty(collection, collectionInsideObjectProperty as string);\r\n    }\r\n    if (!Array.isArray(collection)) {\r\n      throw new Error('Something went wrong while trying to pull the collection from the \"collectionAsync\" call in the AutoComplete Filter, the collection is not a valid array.');\r\n    }\r\n\r\n    // copy over the array received from the async call to the \"collection\" as the new collection to use\r\n    // this has to be BEFORE the `collectionObserver().subscribe` to avoid going into an infinite loop\r\n    this.columnFilter.collection = collection;\r\n\r\n    // recreate Filter DOM element after getting async collection\r\n    this.renderDomElement(collection);\r\n  }\r\n\r\n  protected renderDomElement(collection: any[]) {\r\n    if (!Array.isArray(collection) && this.collectionOptions && (this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty)) {\r\n      const collectionInsideObjectProperty = this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty;\r\n      collection = getDescendantProperty(collection, collectionInsideObjectProperty as string);\r\n    }\r\n    if (!Array.isArray(collection)) {\r\n      throw new Error('The \"collection\" passed to the Autocomplete Filter is not a valid array.');\r\n    }\r\n\r\n    // assign the collection to a temp variable before filtering/sorting the collection\r\n    let newCollection = collection;\r\n\r\n    // user might want to filter and/or sort certain items of the collection\r\n    newCollection = this.filterCollection(newCollection);\r\n    newCollection = this.sortCollection(newCollection);\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms.length >= 0) ? this.searchTerms[0] : '';\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & pre-load search term\r\n    // also subscribe to the onSelect event\r\n    this._collection = newCollection;\r\n    this.$filterElm = this.createDomElement(filterTemplate, newCollection, searchTerm);\r\n\r\n    // step 3, subscribe to the input change event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.on('input', (e: any) => {\r\n      let value = e && e.target && e.target.value || '';\r\n      const enableWhiteSpaceTrim = this.gridOptions.enableFilterTrimWhiteSpace || this.columnFilter.enableTrimWhiteSpace;\r\n      if (typeof value === 'string' && enableWhiteSpaceTrim) {\r\n        value = value.trim();\r\n      }\r\n\r\n      if (this._clearFilterTriggered) {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered, shouldTriggerQuery: this._shouldTriggerQuery });\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        value === '' ? this.$filterElm.removeClass('filled') : this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value], shouldTriggerQuery: this._shouldTriggerQuery });\r\n      }\r\n      // reset both flags for next use\r\n      this._clearFilterTriggered = false;\r\n      this._shouldTriggerQuery = true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  protected buildTemplateHtmlString() {\r\n    const columnId = this.columnDef && this.columnDef.id;\r\n    let placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    if (this.columnFilter && this.columnFilter.placeholder) {\r\n      placeholder = this.columnFilter.placeholder;\r\n    }\r\n    return `<input type=\"text\" role=\"presentation\" autocomplete=\"off\" class=\"form-control autocomplete search-filter filter-${columnId}\" placeholder=\"${placeholder}\">`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  protected createDomElement(filterTemplate: string, collection: any[], searchTerm?: SearchTerm) {\r\n    const columnId = this.columnDef && this.columnDef.id;\r\n    const $headerElm = this.grid.getHeaderRowColumn(columnId);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    this.$filterElm = $(filterTemplate) as any;\r\n    const searchTermInput = searchTerm as string;\r\n\r\n    // user might provide his own custom structure\r\n    // jQuery UI autocomplete requires a label/value pair, so we must remap them when user provide different ones\r\n    if (Array.isArray(collection)) {\r\n      collection = collection.map((item) => {\r\n        return { label: item[this.labelName], value: item[this.valueName], labelPrefix: item[this.labelPrefixName] || '', labelSuffix: item[this.labelSuffixName] || '' };\r\n      });\r\n    }\r\n\r\n    // user might pass his own autocomplete options\r\n    const autoCompleteOptions = this.filterOptions;\r\n\r\n    // when user passes it's own autocomplete options\r\n    // we still need to provide our own \"select\" callback implementation\r\n    if (autoCompleteOptions && autoCompleteOptions.source) {\r\n      autoCompleteOptions.select = (event: Event, ui: { item: any; }) => this.onSelect(event, ui);\r\n      this._autoCompleteOptions = { ...autoCompleteOptions };\r\n      // when renderItem is defined, we need to add our custom style CSS class\r\n      if (this._autoCompleteOptions.renderItem) {\r\n        this._autoCompleteOptions.classes = {\r\n          'ui-autocomplete': `autocomplete-custom-${toKebabCase(this._autoCompleteOptions.renderItem.layout)}`\r\n        };\r\n      }\r\n\r\n      // create the jQueryUI AutoComplete\r\n      this.$filterElm.autocomplete(this._autoCompleteOptions);\r\n\r\n      // when \"renderItem\" is defined, we need to call the user's custom renderItem template callback\r\n      if (this._autoCompleteOptions.renderItem) {\r\n        this.$filterElm.autocomplete('instance')._renderItem = this.renderCustomItem.bind(this);\r\n      }\r\n    } else {\r\n      const definedOptions: AutocompleteOption = {\r\n        minLength: 0,\r\n        source: collection,\r\n        select: (event: Event, ui: { item: any; }) => this.onSelect(event, ui),\r\n      };\r\n      this._autoCompleteOptions = { ...definedOptions, ...this.filterOptions };\r\n      this.$filterElm.autocomplete(this._autoCompleteOptions);\r\n\r\n      // we'll use our own renderer so that it works with label prefix/suffix and also with html rendering when enabled\r\n      this.$filterElm.autocomplete('instance')._renderItem = this.renderCollectionItem.bind(this);\r\n    }\r\n\r\n    this.$filterElm.val(searchTermInput);\r\n    this.$filterElm.data('columnId', columnId);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      this.$filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\r\n      const $container = $(`<div class=\"autocomplete-container\"></div>`);\r\n      $container.appendTo($headerElm);\r\n      this.$filterElm.appendTo($container);\r\n\r\n      // add a <span> in order to add spinner styling\r\n      $(`<span></span>`).appendTo($container);\r\n    }\r\n\r\n    // we could optionally trigger a search when clicking on the AutoComplete\r\n    if (this.filterOptions.openSearchListOnFocus) {\r\n      this.$filterElm.click(() => this.$filterElm.autocomplete('search', this.$filterElm.val()));\r\n    }\r\n\r\n    // user might override any of the jQueryUI callback methods\r\n    if (this.columnFilter.callbacks) {\r\n      for (const callback of Object.keys(this.columnFilter.callbacks)) {\r\n        if (typeof this.columnFilter.callbacks[callback] === 'function') {\r\n          this.$filterElm.autocomplete('instance')[callback] = this.columnFilter.callbacks[callback];\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.$filterElm;\r\n  }\r\n\r\n  //\r\n  // protected functions\r\n  // ------------------\r\n\r\n  // this function should be protected but for unit tests purposes we'll make it public until a better solution is found\r\n  // a better solution would be to get the autocomplete DOM element to work with selection but I couldn't find how to do that in Jest\r\n  onSelect(event: Event, ui: { item: any; }) {\r\n    if (ui && ui.item) {\r\n      const item = ui.item;\r\n      // when the user defines a \"renderItem\" (or \"_renderItem\") template, then we assume the user defines his own custom structure of label/value pair\r\n      // otherwise we know that jQueryUI always require a label/value pair, we can pull them directly\r\n      const hasCustomRenderItemCallback = this.columnFilter && this.columnFilter.callbacks && this.columnFilter.callbacks.hasOwnProperty('_renderItem') || (this.columnFilter && this.columnFilter.filterOptions && this.columnFilter.filterOptions.renderItem) || false;\r\n\r\n      const itemLabel = typeof item === 'string' ? item : (hasCustomRenderItemCallback ? item[this.labelName] : item.label);\r\n      const itemValue = typeof item === 'string' ? item : (hasCustomRenderItemCallback ? item[this.valueName] : item.value);\r\n      this.setValues(itemLabel);\r\n      itemValue === '' ? this.$filterElm.removeClass('filled') : this.$filterElm.addClass('filled');\r\n      this.callback(event, { columnDef: this.columnDef, operator: this.operator, searchTerms: [itemValue], shouldTriggerQuery: this._shouldTriggerQuery });\r\n\r\n      // reset both flags for next use\r\n      this._clearFilterTriggered = false;\r\n      this._shouldTriggerQuery = true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  protected renderCustomItem(ul: HTMLElement, item: any) {\r\n    const templateString = this._autoCompleteOptions && this._autoCompleteOptions.renderItem && this._autoCompleteOptions.renderItem.templateCallback(item) || '';\r\n\r\n    // sanitize any unauthorized html tags like script and others\r\n    // for the remaining allowed tags we'll permit all attributes\r\n    const sanitizedTemplateText = (DOMPurify.sanitize(templateString, {}) || '').toString();\r\n\r\n    return $('<li></li>')\r\n      .data('item.autocomplete', item)\r\n      .append(sanitizedTemplateText)\r\n      .appendTo(ul);\r\n  }\r\n\r\n  protected renderCollectionItem(ul: any, item: any) {\r\n    const isRenderHtmlEnabled = this.columnFilter && this.columnFilter.enableRenderHtml || false;\r\n    const prefixText = item.labelPrefix || '';\r\n    const labelText = item.label || '';\r\n    const suffixText = item.labelSuffix || '';\r\n    const finalText = prefixText + labelText + suffixText;\r\n\r\n    // sanitize any unauthorized html tags like script and others\r\n    // for the remaining allowed tags we'll permit all attributes\r\n    const sanitizedText = (DOMPurify.sanitize(finalText, {}) || '').toString();\r\n\r\n    const $liDiv = $('<div></div>')[isRenderHtmlEnabled ? 'html' : 'text'](sanitizedText);\r\n    return $('<li></li>')\r\n      .data('item.autocomplete', item)\r\n      .append($liDiv)\r\n      .appendTo(ul);\r\n  }\r\n}\r\n","import { OperatorString } from '../models/operatorString';\r\nimport { htmlEncodedStringWithPadding } from '../services/utilities';\r\n\r\nexport function buildSelectOperatorHtmlString(optionValues: Array<{ operator: OperatorString, description: string }>) {\r\n  let optionValueString = '';\r\n  optionValues.forEach(option => {\r\n    optionValueString += `<option value=\"${option.operator}\">${htmlEncodedStringWithPadding(option.operator, 3)}${option.description}</option>`;\r\n  });\r\n\r\n  return `<select class=\"form-control\">${optionValueString}</select>`;\r\n}\r\n","import { Optional } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport * as flatpickr_ from 'flatpickr';\r\nimport { BaseOptions as FlatpickrBaseOptions } from 'flatpickr/dist/types/options';\r\nimport { FlatpickrFn } from 'flatpickr/dist/types/instance';\r\nconst flatpickr: FlatpickrFn = (flatpickr_ && flatpickr_['default'] || flatpickr_) as any; // patch for rollup\r\n\r\nimport { Constants } from '../constants';\r\nimport {\r\n  Column,\r\n  ColumnFilter,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  FieldType,\r\n  FlatpickrOption,\r\n  GridOption,\r\n  Locale,\r\n  OperatorDetail,\r\n  OperatorString,\r\n  OperatorType,\r\n  SearchTerm,\r\n} from './../models/index';\r\nimport { buildSelectOperatorHtmlString } from './filterUtilities';\r\nimport { destroyObjectDomElementProps, getTranslationPrefix, mapFlatpickrDateFormatWithFieldType, mapOperatorToShorthandDesignation } from '../services/utilities';\r\n\r\n// use Flatpickr from import or 'require', whichever works first\r\ndeclare function require(name: string): any;\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\nexport class CompoundDateFilter implements Filter {\r\n  protected _clearFilterTriggered = false;\r\n  protected _currentDate!: Date | undefined;\r\n  protected _flatpickrOptions!: FlatpickrOption;\r\n  protected _shouldTriggerQuery = true;\r\n  protected $filterElm: any;\r\n  protected $filterInputElm: any;\r\n  protected $selectOperatorElm: any;\r\n  protected _currentValue = '';\r\n  protected _operator!: OperatorType | OperatorString;\r\n  flatInstance: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[] = [];\r\n  columnDef!: Column;\r\n  callback!: FilterCallback;\r\n\r\n  constructor(@Optional() protected readonly translate: TranslateService) { }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  protected get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Column Filter */\r\n  get columnFilter(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  /** Getter for the Current Dates selected */\r\n  get currentDate(): Date | undefined {\r\n    return this._currentDate;\r\n  }\r\n\r\n  /** Getter to know what would be the default operator when none is specified */\r\n  get defaultOperator(): OperatorType | OperatorString {\r\n    return OperatorType.empty;\r\n  }\r\n\r\n  /** Getter for the Flatpickr Options */\r\n  get flatpickrOptions(): FlatpickrOption {\r\n    return this._flatpickrOptions || {};\r\n  }\r\n\r\n  /** Getter for the single Locale texts provided by the user in main file or else use default English locales via the Constants */\r\n  get locales(): Locale {\r\n    return this.gridOptions.locales || Constants.locales;\r\n  }\r\n\r\n  /** Getter for the Filter Operator */\r\n  get operator(): OperatorType | OperatorString {\r\n    return this._operator || this.columnFilter.operator || this.defaultOperator;\r\n  }\r\n\r\n  /** Setter for the Filter Operator */\r\n  set operator(op: OperatorType | OperatorString) {\r\n    this._operator = op;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.operator = args.operator || '';\r\n    this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];\r\n\r\n    // date input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms.length >= 0) ? this.searchTerms[0] : '';\r\n\r\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n    // and initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(searchTerm);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterInputElm.keyup((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n    this.$selectOperatorElm.change((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear(shouldTriggerQuery = true) {\r\n    if (this.flatInstance && this.$selectOperatorElm) {\r\n      this._clearFilterTriggered = true;\r\n      this._shouldTriggerQuery = shouldTriggerQuery;\r\n      this.searchTerms = [];\r\n      this.$selectOperatorElm.val(0);\r\n      this.flatInstance.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.flatInstance && typeof this.flatInstance.destroy === 'function') {\r\n      this.flatInstance.destroy();\r\n      if (this.flatInstance.element) {\r\n        destroyObjectDomElementProps(this.flatInstance);\r\n      }\r\n      this.flatInstance = null;\r\n    }\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n    if (this.$selectOperatorElm) {\r\n      this.$selectOperatorElm.off('change').remove();\r\n    }\r\n    this.$filterElm = null;\r\n  }\r\n\r\n  hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n\r\n  /** Set value(s) in the DOM element, we can optionally pass an operator and/or trigger a change event */\r\n  setValues(values: SearchTerm | SearchTerm[], operator?: OperatorType | OperatorString) {\r\n    if (this.flatInstance && values) {\r\n      const newValue = Array.isArray(values) ? values[0] : values;\r\n      this._currentDate = newValue as Date;\r\n      this.flatInstance.setDate(newValue);\r\n    }\r\n\r\n    // set the operator, in the DOM as well, when defined\r\n    this.operator = operator || this.defaultOperator;\r\n    if (operator && this.$selectOperatorElm) {\r\n      const operatorShorthand = mapOperatorToShorthandDesignation(this.operator);\r\n      this.$selectOperatorElm.val(operatorShorthand);\r\n    }\r\n  }\r\n\r\n  //\r\n  // protected functions\r\n  // ------------------\r\n  protected buildDatePickerInput(searchTerm?: SearchTerm) {\r\n    const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnFilter.type || this.columnDef.type || FieldType.dateIso);\r\n    const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnFilter.type || this.columnDef.type || FieldType.dateUtc);\r\n    const userFilterOptions = (this.columnFilter && this.columnFilter.filterOptions || {}) as FlatpickrOption;\r\n\r\n    // get current locale, if user defined a custom locale just use or get it the Translate Service if it exist else just use English\r\n    let currentLocale = (userFilterOptions && userFilterOptions.locale) || (this.translate && this.translate.currentLang) || this.gridOptions.locale || 'en';\r\n    if (currentLocale && currentLocale.length > 2) {\r\n      currentLocale = currentLocale.substring(0, 2);\r\n    }\r\n\r\n    // if we are preloading searchTerms, we'll keep them for reference\r\n    if (searchTerm) {\r\n      this._currentDate = searchTerm as Date;\r\n    }\r\n\r\n    const pickerOptions: FlatpickrOption = {\r\n      defaultDate: (searchTerm as string) || '',\r\n      altInput: true,\r\n      altFormat: outputFormat,\r\n      dateFormat: inputFormat,\r\n      wrap: true,\r\n      closeOnSelect: true,\r\n      locale: currentLocale,\r\n      onChange: (selectedDates: Date[] | Date, dateStr: string) => {\r\n        this._currentValue = dateStr;\r\n        this._currentDate = Array.isArray(selectedDates) && selectedDates[0] || undefined;\r\n\r\n        // when using the time picker, we can simulate a keyup event to avoid multiple backend request\r\n        // since backend request are only executed after user start typing, changing the time should be treated the same way\r\n        let customEvent: CustomEvent | undefined;\r\n        if (pickerOptions.enableTime) {\r\n          customEvent = new CustomEvent('keyup');\r\n        }\r\n        this.onTriggerEvent(customEvent);\r\n      },\r\n      errorHandler: (error) => {\r\n        if (error.toString().includes('invalid locale')) {\r\n          console.warn(`[Angular-Slickgrid] Flatpickr missing locale imports (${currentLocale}), will revert to English as the default locale.\r\n          See Flatpickr Localization for more info, for example if we want to use French, then we can import it with:  import 'flatpickr/dist/l10n/fr';`);\r\n        }\r\n      }\r\n    };\r\n\r\n    // add the time picker when format is UTC (Z) or has the 'h' (meaning hours)\r\n    if (outputFormat && (outputFormat === 'Z' || outputFormat.toLowerCase().includes('h'))) {\r\n      pickerOptions.enableTime = true;\r\n    }\r\n\r\n    // merge options with optional user's custom options\r\n    this._flatpickrOptions = { ...pickerOptions, ...userFilterOptions };\r\n\r\n    let placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    if (this.columnFilter && this.columnFilter.placeholder) {\r\n      placeholder = this.columnFilter.placeholder;\r\n    }\r\n    const $filterInputElm: any = $(`<div class=\"flatpickr\"><input type=\"text\" class=\"form-control\" data-input placeholder=\"${placeholder}\"></div>`);\r\n    this.flatInstance = (flatpickr && $filterInputElm[0] && typeof $filterInputElm[0].flatpickr === 'function') ? $filterInputElm[0].flatpickr(this._flatpickrOptions) : flatpickr($filterInputElm, this._flatpickrOptions as unknown as Partial<FlatpickrBaseOptions>);\r\n    return $filterInputElm;\r\n  }\r\n\r\n  /** Get the available operator option values to populate the operator select dropdown list */\r\n  protected getOperatorOptionValues(): OperatorDetail[] {\r\n    if (this.columnFilter?.compoundOperatorList) {\r\n      return this.columnFilter.compoundOperatorList;\r\n    } else {\r\n      return [\r\n        { operator: '', description: '' },\r\n        { operator: '=', description: this.getOutputText('EQUAL_TO', 'TEXT_EQUAL_TO', 'Equal to') },\r\n        { operator: '<', description: this.getOutputText('LESS_THAN', 'TEXT_LESS_THAN', 'Less than') },\r\n        { operator: '<=', description: this.getOutputText('LESS_THAN_OR_EQUAL_TO', 'TEXT_LESS_THAN_OR_EQUAL_TO', 'Less than or equal to') },\r\n        { operator: '>', description: this.getOutputText('GREATER_THAN', 'TEXT_GREATER_THAN', 'Greater than') },\r\n        { operator: '>=', description: this.getOutputText('GREATER_THAN_OR_EQUAL_TO', 'TEXT_GREATER_THAN_OR_EQUAL_TO', 'Greater than or equal to') },\r\n        { operator: '<>', description: this.getOutputText('NOT_EQUAL_TO', 'TEXT_NOT_EQUAL_TO', 'Not equal to') }\r\n      ];\r\n    }\r\n  }\r\n\r\n  /** Get Locale, Translated or a Default Text if first two aren't detected */\r\n  protected getOutputText(translationKey: string, localeText: string, defaultText: string): string {\r\n    if (this.gridOptions && this.gridOptions.enableTranslate && this.translate && this.translate.instant) {\r\n      const translationPrefix = getTranslationPrefix(this.gridOptions);\r\n      return this.translate.instant(`${translationPrefix}${translationKey}`);\r\n    }\r\n    return this.locales && this.locales[localeText as keyof Locale] || defaultText;\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  protected createDomElement(searchTerm?: SearchTerm) {\r\n    const fieldId = this.columnDef && this.columnDef.id;\r\n    const $headerElm = this.grid.getHeaderRowColumn(fieldId);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    const selectOperatorHtmlString = buildSelectOperatorHtmlString(this.getOperatorOptionValues());\r\n    this.$selectOperatorElm = $(selectOperatorHtmlString);\r\n    this.$filterInputElm = this.buildDatePickerInput(searchTerm);\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter filter-${fieldId}\"></div>`);\r\n    const $containerInputGroup = $(`<div class=\"input-group flatpickr\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon input-group-prepend operator\"></div>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon input-group-prepend operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <div class=flatpickr>\r\n          <input type=\"text\" class=\"form-control\" data-input>\r\n        </div>\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    $containerInputGroup.append($operatorInputGroupAddon);\r\n    $containerInputGroup.append(this.$filterInputElm);\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append($containerInputGroup);\r\n    this.$filterInputElm.data('columnId', fieldId);\r\n\r\n    if (this.operator) {\r\n      const operatorShorthand = mapOperatorToShorthandDesignation(this.operator);\r\n      this.$selectOperatorElm.val(operatorShorthand);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm && searchTerm !== '') {\r\n      this.$filterInputElm.addClass('filled');\r\n      this._currentDate = searchTerm as Date;\r\n      this._currentValue = searchTerm as string;\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  protected onTriggerEvent(e: Event | undefined) {\r\n    if (this._clearFilterTriggered) {\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered, shouldTriggerQuery: this._shouldTriggerQuery });\r\n      this.$filterElm.removeClass('filled');\r\n    } else {\r\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').val();\r\n      (this._currentValue) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (this._currentValue ? [this._currentValue] : null), operator: selectedOperator || '', shouldTriggerQuery: this._shouldTriggerQuery });\r\n    }\r\n    // reset both flags for next use\r\n    this._clearFilterTriggered = false;\r\n    this._shouldTriggerQuery = true;\r\n  }\r\n}\r\n","import { TranslateService } from '@ngx-translate/core';\r\n\r\nimport {\r\n  Column,\r\n  ColumnFilter,\r\n  FieldType,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  Locale,\r\n  GridOption,\r\n  OperatorDetail,\r\n  OperatorString,\r\n  OperatorType,\r\n  SearchTerm,\r\n} from './../models/index';\r\nimport { Constants } from './../constants';\r\nimport { buildSelectOperatorHtmlString } from './filterUtilities';\r\nimport { getTranslationPrefix, mapOperatorToShorthandDesignation } from '../services/utilities';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\nexport class CompoundInputFilter implements Filter {\r\n  protected _clearFilterTriggered = false;\r\n  protected _debounceTypingDelay = 0;\r\n  protected _shouldTriggerQuery = true;\r\n  protected _inputType = 'text';\r\n  protected $filterElm: any;\r\n  protected $filterInputElm: any;\r\n  protected $selectOperatorElm: any;\r\n  protected _operator: OperatorType | OperatorString | undefined;\r\n  grid: any;\r\n  searchTerms: SearchTerm[] = [];\r\n  columnDef!: Column;\r\n  callback!: FilterCallback;\r\n  timer?: any;\r\n\r\n  constructor(protected readonly translate: TranslateService) { }\r\n\r\n  /** Getter for the Column Filter */\r\n  get columnFilter(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  /** Getter to know what would be the default operator when none is specified */\r\n  get defaultOperator(): OperatorType | OperatorString {\r\n    return OperatorType.empty;\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  protected get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter of input type (text, number, password) */\r\n  get inputType() {\r\n    return this._inputType;\r\n  }\r\n\r\n  /** Setter of input type (text, number, password) */\r\n  set inputType(type: string) {\r\n    this._inputType = type;\r\n  }\r\n\r\n  /** Getter for the single Locale texts provided by the user in main file or else use default English locales via the Constants */\r\n  get locales(): Locale {\r\n    return this.gridOptions.locales || Constants.locales;\r\n  }\r\n\r\n  /** Getter of the Operator to use when doing the filter comparing */\r\n  get operator(): OperatorType | OperatorString {\r\n    return this._operator || this.defaultOperator;\r\n  }\r\n\r\n  /** Getter of the Operator to use when doing the filter comparing */\r\n  set operator(op: OperatorType | OperatorString) {\r\n    this._operator = op;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\r\n    }\r\n\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.operator = args.operator as OperatorString;\r\n    this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms.length >= 0) ? this.searchTerms[0] : '';\r\n\r\n    // analyze if we have any keyboard debounce delay (do we wait for user to finish typing before querying)\r\n    // it is used by default for a backend service but is optional when using local dataset\r\n    const backendApi = this.gridOptions?.backendServiceApi;\r\n    this._debounceTypingDelay = (backendApi ? (backendApi?.filterTypingDebounce ?? this.gridOptions?.defaultBackendServiceFilterTypingDebounce) : this.gridOptions?.filterTypingDebounce) ?? 0;\r\n\r\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n    // and initialize it if searchTerms is filled\r\n    this.$filterElm = this.createDomElement(searchTerm);\r\n\r\n    // step 3, subscribe to the input change event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    // we'll use all necessary events to cover the following (keyup, change, mousewheel & spinner)\r\n    this.$filterInputElm.on('keyup blur change wheel', this.onTriggerEvent.bind(this));\r\n    this.$selectOperatorElm.on('change', this.onTriggerEvent.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear(shouldTriggerQuery = true) {\r\n    if (this.$filterElm && this.$selectOperatorElm) {\r\n      this._clearFilterTriggered = true;\r\n      this._shouldTriggerQuery = shouldTriggerQuery;\r\n      this.searchTerms = [];\r\n      this.$selectOperatorElm.val(0);\r\n      this.$filterInputElm.val('');\r\n      this.onTriggerEvent(undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm && this.$selectOperatorElm) {\r\n      this.$filterElm.off('keyup blur change wheel').remove();\r\n      this.$selectOperatorElm.off('change');\r\n    }\r\n    this.$filterElm = null;\r\n    this.$selectOperatorElm = null;\r\n  }\r\n\r\n  /** Set value(s) on the DOM element */\r\n  setValues(values: SearchTerm[] | SearchTerm, operator?: OperatorType | OperatorString) {\r\n    if (values) {\r\n      const newValue = Array.isArray(values) ? values[0] : values;\r\n      this.$filterInputElm.val(newValue);\r\n    }\r\n\r\n    // set the operator, in the DOM as well, when defined\r\n    this.operator = operator || this.defaultOperator;\r\n    if (operator && this.$selectOperatorElm) {\r\n      const operatorShorthand = mapOperatorToShorthandDesignation(this.operator);\r\n      this.$selectOperatorElm.val(operatorShorthand);\r\n    }\r\n  }\r\n\r\n  //\r\n  // protected functions\r\n  // ------------------\r\n\r\n  protected buildInputHtmlString() {\r\n    let placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    if (this.columnFilter && this.columnFilter.placeholder) {\r\n      placeholder = this.columnFilter.placeholder;\r\n    }\r\n    return `<input type=\"${this._inputType || 'text'}\" role=\"presentation\"  autocomplete=\"off\" class=\"form-control compound-input\" placeholder=\"${placeholder}\" /><span></span>`;\r\n  }\r\n\r\n  /** Get the available operator option values to populate the operator select dropdown list */\r\n  protected getOperatorOptionValues(): OperatorDetail[] {\r\n    const type = (this.columnDef.type && this.columnDef.type) ? this.columnDef.type : FieldType.string;\r\n    let optionValues = [];\r\n\r\n    if (this.columnFilter?.compoundOperatorList) {\r\n      return this.columnFilter.compoundOperatorList;\r\n    } else {\r\n      switch (type) {\r\n        case FieldType.string:\r\n        case FieldType.text:\r\n        case FieldType.readonly:\r\n        case FieldType.password:\r\n          optionValues = [\r\n            { operator: '' as OperatorString, description: this.getOutputText('CONTAINS', 'TEXT_CONTAINS', 'Contains') },\r\n            { operator: '<>' as OperatorString, description: this.getOutputText('NOT_CONTAINS', 'TEXT_NOT_CONTAINS', 'Not Contains') },\r\n            { operator: '=' as OperatorString, description: this.getOutputText('EQUALS', 'TEXT_EQUALS', 'Equals') },\r\n            { operator: '!=' as OperatorString, description: this.getOutputText('NOT_EQUAL_TO', 'TEXT_NOT_EQUAL_TO', 'Not equal to') },\r\n            { operator: 'a*' as OperatorString, description: this.getOutputText('STARTS_WITH', 'TEXT_STARTS_WITH', 'Starts with') },\r\n            { operator: '*z' as OperatorString, description: this.getOutputText('ENDS_WITH', 'TEXT_ENDS_WITH', 'Ends with') },\r\n          ];\r\n          break;\r\n        default:\r\n          optionValues = [\r\n            { operator: '' as OperatorString, description: '' },\r\n            { operator: '=' as OperatorString, description: this.getOutputText('EQUAL_TO', 'TEXT_EQUAL_TO', 'Equal to') },\r\n            { operator: '<' as OperatorString, description: this.getOutputText('LESS_THAN', 'TEXT_LESS_THAN', 'Less than') },\r\n            { operator: '<=' as OperatorString, description: this.getOutputText('LESS_THAN_OR_EQUAL_TO', 'TEXT_LESS_THAN_OR_EQUAL_TO', 'Less than or equal to') },\r\n            { operator: '>' as OperatorString, description: this.getOutputText('GREATER_THAN', 'TEXT_GREATER_THAN', 'Greater than') },\r\n            { operator: '>=' as OperatorString, description: this.getOutputText('GREATER_THAN_OR_EQUAL_TO', 'TEXT_GREATER_THAN_OR_EQUAL_TO', 'Greater than or equal to') },\r\n            { operator: '<>' as OperatorString, description: this.getOutputText('NOT_EQUAL_TO', 'TEXT_NOT_EQUAL_TO', 'Not equal to') }\r\n          ];\r\n          break;\r\n      }\r\n    }\r\n\r\n    return optionValues;\r\n  }\r\n\r\n  /** Get Locale, Translated or a Default Text if first two aren't detected */\r\n  protected getOutputText(translationKey: string, localeText: string, defaultText: string): string {\r\n    if (this.gridOptions && this.gridOptions.enableTranslate && this.translate && this.translate.instant) {\r\n      const translationPrefix = getTranslationPrefix(this.gridOptions);\r\n      return this.translate.instant(`${translationPrefix}${translationKey}`);\r\n    }\r\n    return this.locales && this.locales[localeText as keyof Locale] || defaultText;\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  protected createDomElement(searchTerm?: SearchTerm) {\r\n    const fieldId = this.columnDef && this.columnDef.id;\r\n    const $headerElm = this.grid.getHeaderRowColumn(fieldId);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    const selectOperatorHtmlString = buildSelectOperatorHtmlString(this.getOperatorOptionValues());\r\n    this.$selectOperatorElm = $(selectOperatorHtmlString);\r\n    this.$filterInputElm = $(this.buildInputHtmlString());\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter filter-${fieldId}\"></div>`);\r\n    const $containerInputGroup = $(`<div class=\"input-group\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon input-group-prepend operator\"></div>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon input-group-prepend operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <input class=\"form-control compount-input\" type=\"text\" />\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    $containerInputGroup.append($operatorInputGroupAddon);\r\n    $containerInputGroup.append(this.$filterInputElm);\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append($containerInputGroup);\r\n\r\n    this.$filterInputElm.val(searchTerm);\r\n    this.$filterInputElm.data('columnId', fieldId);\r\n\r\n    if (this.operator) {\r\n      const operatorShorthand = mapOperatorToShorthandDesignation(this.operator);\r\n      this.$selectOperatorElm.val(operatorShorthand);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterContainerElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  /**\r\n   * Event trigger, could be called by the Operator dropdown or the input itself and we will cover the following (keyup, change, mousewheel & spinner)\r\n   * We will trigger the Filter Service callback from this handler\r\n   */\r\n  protected onTriggerEvent(event: KeyboardEvent | undefined) {\r\n    if (this._clearFilterTriggered) {\r\n      this.callback(event, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered, shouldTriggerQuery: this._shouldTriggerQuery });\r\n      this.$filterElm.removeClass('filled');\r\n    } else {\r\n      const eventType = event?.type ?? '';\r\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').val();\r\n      let value = this.$filterInputElm.val() as string;\r\n      const enableWhiteSpaceTrim = this.gridOptions.enableFilterTrimWhiteSpace || this.columnFilter.enableTrimWhiteSpace;\r\n      if (typeof value === 'string' && enableWhiteSpaceTrim) {\r\n        value = value.trim();\r\n      }\r\n\r\n      (value !== null && value !== undefined && value !== '') ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      const callbackArgs = { columnDef: this.columnDef, searchTerms: (value ? [value] : null), operator: selectedOperator || '', shouldTriggerQuery: this._shouldTriggerQuery };\r\n      const typingDelay = (eventType === 'keyup' && event?.key !== 'Enter') ? this._debounceTypingDelay : 0;\r\n\r\n      if (typingDelay > 0) {\r\n        clearTimeout(this.timer);\r\n        this.timer = setTimeout(() => this.callback(event, callbackArgs), typingDelay);\r\n      } else {\r\n        this.callback(event, callbackArgs);\r\n      }\r\n    }\r\n\r\n    // reset both flags for next use\r\n    this._clearFilterTriggered = false;\r\n    this._shouldTriggerQuery = true;\r\n  }\r\n}\r\n","import {\r\n  Column,\r\n  ColumnFilter,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\nexport class InputFilter implements Filter {\r\n  protected _clearFilterTriggered = false;\r\n  protected _debounceTypingDelay = 0;\r\n  protected _shouldTriggerQuery = true;\r\n  protected _inputType = 'text';\r\n  protected _timer?: any;\r\n  protected $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[] = [];\r\n  columnDef!: Column;\r\n  callback!: FilterCallback;\r\n\r\n  constructor() { }\r\n\r\n  /** Getter for the Column Filter */\r\n  get columnFilter(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  /** Getter to know what would be the default operator when none is specified */\r\n  get defaultOperator(): OperatorType | OperatorString {\r\n    return OperatorType.empty;\r\n  }\r\n\r\n  /** Getter of input type (text, number, password) */\r\n  get inputType() {\r\n    return this._inputType;\r\n  }\r\n\r\n  /** Setter of input type (text, number, password) */\r\n  set inputType(type: string) {\r\n    this._inputType = type;\r\n  }\r\n\r\n  /** Getter of the Operator to use when doing the filter comparing */\r\n  get operator(): OperatorType | OperatorString {\r\n    return this.columnFilter && this.columnFilter.operator || this.defaultOperator;\r\n  }\r\n\r\n  /** Setter for the filter operator */\r\n  set operator(operator: OperatorType | OperatorString) {\r\n    if (this.columnFilter) {\r\n      this.columnFilter.operator = operator;\r\n    }\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  protected get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];\r\n\r\n    // analyze if we have any keyboard debounce delay (do we wait for user to finish typing before querying)\r\n    // it is used by default for a backend service but is optional when using local dataset\r\n    const backendApi = this.gridOptions?.backendServiceApi;\r\n    this._debounceTypingDelay = (backendApi ? (backendApi?.filterTypingDebounce ?? this.gridOptions?.defaultBackendServiceFilterTypingDebounce) : this.gridOptions?.filterTypingDebounce) ?? 0;\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms.length >= 0) ? this.searchTerms[0] : '';\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the input change event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    // we'll use all necessary events to cover the following (keyup, change, mousewheel & spinner)\r\n    this.$filterElm.on('keyup blur change wheel', this.handleInputChange.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear(shouldTriggerQuery = true) {\r\n    if (this.$filterElm) {\r\n      this._clearFilterTriggered = true;\r\n      this._shouldTriggerQuery = shouldTriggerQuery;\r\n      this.searchTerms = [];\r\n      this.$filterElm.val('');\r\n      this.$filterElm.trigger('change');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup blur change wheel').remove();\r\n    }\r\n    this.$filterElm = null;\r\n  }\r\n\r\n  getValue() {\r\n    return this.$filterElm.val();\r\n  }\r\n\r\n  /** Set value(s) on the DOM element */\r\n  setValues(values: SearchTerm | SearchTerm[], operator?: OperatorType | OperatorString) {\r\n    const searchValues = Array.isArray(values) ? values : [values];\r\n    let searchValue: SearchTerm = '';\r\n    for (const value of searchValues) {\r\n      searchValue = operator ? this.addOptionalOperatorIntoSearchString(value, operator) : value;\r\n      this.$filterElm.val(searchValue);\r\n    }\r\n\r\n    // set the operator when defined\r\n    this.operator = operator || this.defaultOperator;\r\n  }\r\n\r\n  //\r\n  // protected functions\r\n  // ------------------\r\n\r\n  /**\r\n * When loading the search string from the outside into the input text field, we should also add the prefix/suffix of the operator.\r\n * We do this so that if it was loaded by a Grid Presets then we should also add the operator into the search string\r\n * Let's take these 3 examples:\r\n * 1. (operator: '>=', searchTerms:[55]) should display as \">=55\"\r\n * 2. (operator: 'StartsWith', searchTerms:['John']) should display as \"John*\"\r\n * 3. (operator: 'EndsWith', searchTerms:['John']) should display as \"*John\"\r\n * @param operator - operator string\r\n */\r\n  protected addOptionalOperatorIntoSearchString(inputValue: SearchTerm, operator: OperatorType | OperatorString): string {\r\n    let searchTermPrefix = '';\r\n    let searchTermSuffix = '';\r\n    let outputValue = inputValue === undefined || inputValue === null ? '' : `${inputValue}`;\r\n\r\n    if (operator && outputValue) {\r\n      switch (operator) {\r\n        case '<>':\r\n        case '!=':\r\n        case '=':\r\n        case '==':\r\n        case '>':\r\n        case '>=':\r\n        case '<':\r\n        case '<=':\r\n          searchTermPrefix = operator;\r\n          break;\r\n        case 'EndsWith':\r\n        case '*z':\r\n          searchTermPrefix = '*';\r\n          break;\r\n        case 'StartsWith':\r\n        case 'a*':\r\n          searchTermSuffix = '*';\r\n          break;\r\n      }\r\n      outputValue = `${searchTermPrefix}${outputValue}${searchTermSuffix}`;\r\n    }\r\n\r\n    return outputValue;\r\n  }\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  protected buildTemplateHtmlString() {\r\n    const fieldId = this.columnDef && this.columnDef.id;\r\n    let placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    if (this.columnFilter && this.columnFilter.placeholder) {\r\n      placeholder = this.columnFilter.placeholder;\r\n    }\r\n    return `<input type=\"${this._inputType || 'text'}\" role=\"presentation\" autocomplete=\"off\" class=\"form-control search-filter filter-${fieldId}\" placeholder=\"${placeholder}\"><span></span>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  protected createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const fieldId = this.columnDef && this.columnDef.id;\r\n    const $headerElm = this.grid.getHeaderRowColumn(fieldId);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n\r\n    $filterElm.val(searchTerm);\r\n    $filterElm.data('columnId', fieldId);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n\r\n  /**\r\n   * Event handler to cover the following (keyup, change, mousewheel & spinner)\r\n   * We will trigger the Filter Service callback from this handler\r\n   */\r\n  protected handleInputChange(event: KeyboardEvent & { target: any; }) {\r\n    if (this._clearFilterTriggered) {\r\n      this.callback(event, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered, shouldTriggerQuery: this._shouldTriggerQuery });\r\n      this.$filterElm.removeClass('filled');\r\n    } else {\r\n      const eventType = event?.type ?? '';\r\n      let value = event?.target?.value ?? '';\r\n      const enableWhiteSpaceTrim = this.gridOptions.enableFilterTrimWhiteSpace || this.columnFilter.enableTrimWhiteSpace;\r\n      if (typeof value === 'string' && enableWhiteSpaceTrim) {\r\n        value = value.trim();\r\n      }\r\n      value === '' ? this.$filterElm.removeClass('filled') : this.$filterElm.addClass('filled');\r\n      const callbackArgs = { columnDef: this.columnDef, operator: this.operator, searchTerms: [value], shouldTriggerQuery: this._shouldTriggerQuery };\r\n      const typingDelay = (eventType === 'keyup' && event?.key !== 'Enter') ? this._debounceTypingDelay : 0;\r\n\r\n      if (typingDelay > 0) {\r\n        clearTimeout(this._timer);\r\n        this._timer = setTimeout(() => this.callback(event, callbackArgs), typingDelay);\r\n      } else {\r\n        this.callback(event, callbackArgs);\r\n      }\r\n    }\r\n\r\n    // reset both flags for next use\r\n    this._clearFilterTriggered = false;\r\n    this._shouldTriggerQuery = true;\r\n  }\r\n}\r\n","import { Optional } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Observable, Subject, Subscription } from 'rxjs';\r\nimport * as DOMPurify_ from 'dompurify';\r\nconst DOMPurify = DOMPurify_; // patch to fix rollup to work\r\n\r\nimport {\r\n  CollectionCustomStructure,\r\n  CollectionOption,\r\n  Column,\r\n  ColumnFilter,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n  SelectOption,\r\n} from './../models/index';\r\nimport { Constants } from './../constants';\r\nimport { Locale } from './../models/locale.interface';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport { castToPromise, getDescendantProperty, getTranslationPrefix, htmlEncode, unsubscribeAllObservables } from '../services/utilities';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\nexport class SelectFilter implements Filter {\r\n  protected _isMultipleSelect = true;\r\n  protected _collectionLength = 0;\r\n  protected _locales!: Locale;\r\n  protected _shouldTriggerQuery = true;\r\n\r\n  /** DOM Element Name, useful for auto-detecting positioning (dropup / dropdown) */\r\n  elementName!: string;\r\n\r\n  /** Filter Multiple-Select options */\r\n  filterElmOptions!: MultipleSelectOption;\r\n\r\n  /** The JQuery DOM element */\r\n  $filterElm: any;\r\n\r\n  grid!: any;\r\n  searchTerms: SearchTerm[] | undefined;\r\n  columnDef!: Column;\r\n  callback!: FilterCallback;\r\n  defaultOptions!: MultipleSelectOption;\r\n  isFilled = false;\r\n  labelName!: string;\r\n  labelPrefixName!: string;\r\n  labelSuffixName!: string;\r\n  optionLabel!: string;\r\n  valueName!: string;\r\n  enableTranslateLabel = false;\r\n  subscriptions: Subscription[] = [];\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  constructor(\r\n    @Optional() protected readonly translate: TranslateService,\r\n    protected readonly collectionService: CollectionService,\r\n    isMultipleSelect = true\r\n  ) {\r\n    this._isMultipleSelect = isMultipleSelect;\r\n  }\r\n\r\n  /** Getter for the Column Filter itself */\r\n  protected get columnFilter(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  /** Getter for the Collection Options */\r\n  protected get collectionOptions(): CollectionOption | undefined {\r\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.collectionOptions;\r\n  }\r\n\r\n  /** Getter for the Custom Structure if exist */\r\n  protected get customStructure(): CollectionCustomStructure | undefined {\r\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.customStructure;\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  protected get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter to know what would be the default operator when none is specified */\r\n  get defaultOperator(): OperatorType | OperatorString {\r\n    return this.isMultipleSelect ? OperatorType.in : OperatorType.equal;\r\n  }\r\n\r\n  /** Getter to know if the current filter is a multiple-select (false means it's a single select) */\r\n  get isMultipleSelect(): boolean {\r\n    return this._isMultipleSelect;\r\n  }\r\n\r\n  /** Getter for the filter operator */\r\n  get operator(): OperatorType | OperatorString {\r\n    return this.columnFilter && this.columnFilter.operator || this.defaultOperator;\r\n  }\r\n\r\n  /** Setter for the filter operator */\r\n  set operator(operator: OperatorType | OperatorString) {\r\n    if (this.columnFilter) {\r\n      this.columnFilter.operator = operator;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the filter template\r\n   */\r\n  init(args: FilterArguments): Promise<boolean> {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];\r\n\r\n    if (!this.grid || !this.columnDef || !this.columnFilter || (!this.columnFilter.collection && !this.columnFilter.collectionAsync)) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" (or \"collectionAsync\") for the MultipleSelect/SingleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\r\n    }\r\n\r\n    this.enableTranslateLabel = this.columnFilter.enableTranslateLabel || false;\r\n    this.labelName = this.customStructure && this.customStructure.label || 'label';\r\n    this.labelPrefixName = this.customStructure && this.customStructure.labelPrefix || 'labelPrefix';\r\n    this.labelSuffixName = this.customStructure && this.customStructure.labelSuffix || 'labelSuffix';\r\n    this.optionLabel = this.customStructure && this.customStructure.optionLabel || 'value';\r\n    this.valueName = this.customStructure && this.customStructure.value || 'value';\r\n\r\n    if (this.enableTranslateLabel && !this.gridOptions.enableTranslate && (!this.translate || typeof this.translate.instant !== 'function')) {\r\n      throw new Error(`[select-filter] The ngx-translate TranslateService is required for the Select Filter to work correctly when \"enableTranslateLabel\" is set.`);\r\n    }\r\n\r\n    // get locales provided by user in forRoot or else use default English locales via the Constants\r\n    this._locales = this.gridOptions && this.gridOptions.locales || Constants.locales;\r\n\r\n    // create the multiple select element\r\n    this.initMultipleSelect();\r\n\r\n    // add placeholder when found\r\n    let placeholder = this.gridOptions && this.gridOptions.defaultFilterPlaceholder || '';\r\n    if (this.columnFilter && this.columnFilter.placeholder) {\r\n      placeholder = this.columnFilter.placeholder;\r\n    }\r\n    this.defaultOptions.placeholder = placeholder || '';\r\n\r\n    // when we're using a multiple-select filter and we have an empty select option,\r\n    // we probably want this value to be a valid filter option that will ONLY return value that are empty (not everything like its default behavior)\r\n    // user can still override it by defining it\r\n    if (this._isMultipleSelect && this.columnDef?.filter) {\r\n      this.columnDef.filter.emptySearchTermReturnAllValues = this.columnDef.filter?.emptySearchTermReturnAllValues ?? false;\r\n    }\r\n\r\n    // always render the Select (dropdown) DOM element, even if user passed a \"collectionAsync\",\r\n    // if that is the case, the Select will simply be without any options but we still have to render it (else SlickGrid would throw an error)\r\n    const newCollection = this.columnFilter.collection || [];\r\n    this.renderDomElement(newCollection);\r\n\r\n    // on every Filter which have a \"collection\" or a \"collectionAsync\"\r\n    // we will add (or replace) a Subject to the \"collectionAsync\" property so that user has possibility to change the collection\r\n    // if \"collectionAsync\" is already set by the user, it will resolve it first then after it will replace it with a Subject\r\n    const collectionAsync = this.columnFilter && this.columnFilter.collectionAsync;\r\n    if (collectionAsync) {\r\n      return this.renderOptionsAsync(collectionAsync); // create Subject after resolve (createCollectionAsyncSubject)\r\n    } else {\r\n      return new Promise((resolve) => resolve(true));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the filter values\r\n   */\r\n  clear(shouldTriggerQuery = true) {\r\n    if (this.$filterElm && this.$filterElm.multipleSelect && this._collectionLength > 0) {\r\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\r\n      this.$filterElm.multipleSelect('setSelects', []);\r\n      this.$filterElm.removeClass('filled');\r\n      this.$filterElm.siblings('div .search-filter').removeClass('filled');\r\n      this.searchTerms = [];\r\n      this._shouldTriggerQuery = shouldTriggerQuery;\r\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true, shouldTriggerQuery: this._shouldTriggerQuery });\r\n      // reset both flags for next use\r\n      this._shouldTriggerQuery = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    // also dispose of all Subscriptions\r\n    this.subscriptions = unsubscribeAllObservables(this.subscriptions);\r\n\r\n    if (this.$filterElm && typeof this.$filterElm.multipleSelect === 'function') {\r\n      this.$filterElm.multipleSelect('destroy');\r\n      this.$filterElm.remove();\r\n      const elementClassName = this.elementName.toString().replace('.', '\\\\.'); // make sure to escape any dot \".\" from CSS class to avoid console error\r\n      $(`[name=${elementClassName}].ms-drop`).remove();\r\n    }\r\n    this.$filterElm = null;\r\n  }\r\n\r\n  /**\r\n   * Get selected values retrieved from the multiple-selected element\r\n   * @params selected items\r\n   */\r\n  getValues(): any[] {\r\n    if (this.$filterElm && typeof this.$filterElm.multipleSelect === 'function') {\r\n      return this.$filterElm.multipleSelect('getSelects');\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /** Set value(s) on the DOM element */\r\n  setValues(values: SearchTerm | SearchTerm[] | undefined, operator?: OperatorType | OperatorString) {\r\n    if (values && this.$filterElm && typeof this.$filterElm.multipleSelect === 'function') {\r\n      values = Array.isArray(values) ? values : [values];\r\n      this.$filterElm.multipleSelect('setSelects', values);\r\n    }\r\n\r\n    // set the operator when defined\r\n    this.operator = operator || this.defaultOperator;\r\n  }\r\n\r\n  //\r\n  // protected functions\r\n  // ------------------\r\n\r\n  /**\r\n   * user might want to filter certain items of the collection\r\n   * @param inputCollection\r\n   * @return outputCollection filtered and/or sorted collection\r\n   */\r\n  protected filterCollection(inputCollection: any[]): any[] {\r\n    let outputCollection = inputCollection;\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnDef && this.columnFilter && this.columnFilter.collectionFilterBy) {\r\n      const filterBy = this.columnFilter.collectionFilterBy;\r\n      const filterCollectionBy = this.columnFilter.collectionOptions && this.columnFilter.collectionOptions.filterResultAfterEachPass || null;\r\n      outputCollection = this.collectionService.filterCollection(outputCollection, filterBy, filterCollectionBy);\r\n    }\r\n\r\n    return outputCollection;\r\n  }\r\n\r\n  /**\r\n   * user might want to sort the collection in a certain way\r\n   * @param inputCollection\r\n   * @return outputCollection filtered and/or sorted collection\r\n   */\r\n  protected sortCollection(inputCollection: any[]): any[] {\r\n    let outputCollection = inputCollection;\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef && this.columnFilter && this.columnFilter.collectionSortBy) {\r\n      const sortBy = this.columnFilter.collectionSortBy;\r\n      outputCollection = this.collectionService.sortCollection(this.columnDef, outputCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    return outputCollection;\r\n  }\r\n\r\n  protected async renderOptionsAsync(collectionAsync: Promise<any> | Observable<any> | Subject<any>): Promise<boolean> {\r\n    let awaitedCollection: any = [];\r\n\r\n    if (collectionAsync) {\r\n      awaitedCollection = await castToPromise(collectionAsync);\r\n      this.renderDomElementFromCollectionAsync(awaitedCollection);\r\n\r\n      // because we accept Promises & HttpClient Observable only execute once\r\n      // we will re-create an RxJs Subject which will replace the \"collectionAsync\" which got executed once anyway\r\n      // doing this provide the user a way to call a \"collectionAsync.next()\"\r\n      this.createCollectionAsyncSubject();\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Create or recreate an Observable Subject and reassign it to the \"collectionAsync\" object so user can call a \"collectionAsync.next()\" on it */\r\n  protected createCollectionAsyncSubject() {\r\n    const newCollectionAsync = new Subject<any>();\r\n    this.columnFilter.collectionAsync = newCollectionAsync;\r\n    this.subscriptions.push(\r\n      newCollectionAsync.subscribe(collection => this.renderDomElementFromCollectionAsync(collection))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * When user use a CollectionAsync we will use the returned collection to render the filter DOM element\r\n   * and reinitialize filter collection with this new collection\r\n   */\r\n  protected renderDomElementFromCollectionAsync(collection: any[]) {\r\n    if (this.collectionOptions && (this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty)) {\r\n      const collectionInsideObjectProperty = this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty;\r\n      collection = getDescendantProperty(collection, collectionInsideObjectProperty as string);\r\n    }\r\n    if (!Array.isArray(collection)) {\r\n      throw new Error('Something went wrong while trying to pull the collection from the \"collectionAsync\" call in the Select Filter, the collection is not a valid array.');\r\n    }\r\n\r\n    // copy over the array received from the async call to the \"collection\" as the new collection to use\r\n    // this has to be BEFORE the `collectionObserver().subscribe` to avoid going into an infinite loop\r\n    this.columnFilter.collection = collection;\r\n\r\n    // recreate Multiple Select after getting async collection\r\n    this.renderDomElement(collection);\r\n  }\r\n\r\n  protected renderDomElement(inputCollection: any[]) {\r\n    if (!Array.isArray(inputCollection) && this.collectionOptions && (this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty)) {\r\n      const collectionInsideObjectProperty = this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty;\r\n      inputCollection = getDescendantProperty(inputCollection, collectionInsideObjectProperty as string);\r\n    }\r\n    if (!Array.isArray(inputCollection)) {\r\n      throw new Error('The \"collection\" passed to the Select Filter is not a valid array.');\r\n    }\r\n\r\n    // make a copy of the collection so that we don't impact SelectEditor, this could happen when calling \"addBlankEntry\" or \"addCustomFirstEntry\"\r\n    let collection: any[] = [];\r\n    if (inputCollection.length > 0) {\r\n      collection = [...inputCollection];\r\n    }\r\n\r\n    // user can optionally add a blank entry at the beginning of the collection\r\n    // make sure however that it wasn't added more than once\r\n    if (this.collectionOptions && this.collectionOptions.addBlankEntry && Array.isArray(collection) && collection.length > 0 && collection[0][this.valueName] !== '') {\r\n      collection.unshift(this.createBlankEntry());\r\n    }\r\n\r\n    // user can optionally add his own custom entry at the beginning of the collection\r\n    if (this.collectionOptions && this.collectionOptions.addCustomFirstEntry && Array.isArray(collection) && collection.length > 0 && collection[0][this.valueName] !== this.collectionOptions.addCustomFirstEntry[this.valueName]) {\r\n      collection.unshift(this.collectionOptions.addCustomFirstEntry);\r\n    }\r\n\r\n    // user can optionally add his own custom entry at the end of the collection\r\n    if (this.collectionOptions && this.collectionOptions.addCustomLastEntry && Array.isArray(collection) && collection.length > 0) {\r\n      const lastCollectionIndex = collection.length - 1;\r\n      if (collection[lastCollectionIndex][this.valueName] !== this.collectionOptions.addCustomLastEntry[this.valueName]) {\r\n        collection.push(this.collectionOptions.addCustomLastEntry);\r\n      }\r\n    }\r\n\r\n    let newCollection = collection;\r\n\r\n    // user might want to filter and/or sort certain items of the collection\r\n    newCollection = this.filterCollection(newCollection);\r\n    newCollection = this.sortCollection(newCollection);\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString(newCollection, this.searchTerms || []);\r\n\r\n    // step 2, create the DOM Element of the filter & pre-load search terms\r\n    // also subscribe to the onClose event\r\n    this.createDomElement(filterTemplate);\r\n    this._collectionLength = newCollection.length;\r\n  }\r\n\r\n  /** Create the HTML template as a string */\r\n  protected buildTemplateHtmlString(optionCollection: any[], searchTerms: SearchTerm[]) {\r\n    let options = '';\r\n    const columnId = this.columnDef && this.columnDef.id;\r\n    const separatorBetweenLabels = this.collectionOptions && this.collectionOptions.separatorBetweenTextLabels || '';\r\n    const isEnableTranslate = this.gridOptions && this.gridOptions.enableTranslate;\r\n    const isRenderHtmlEnabled = this.columnFilter && this.columnFilter.enableRenderHtml || false;\r\n    const sanitizedOptions = this.gridOptions && this.gridOptions.sanitizeHtmlOptions || {};\r\n\r\n    // collection could be an Array of Strings OR Objects\r\n    if (Array.isArray(optionCollection)) {\r\n      if (optionCollection.every(x => typeof x === 'string')) {\r\n        optionCollection.forEach((option: string) => {\r\n          const selected = (searchTerms.findIndex((term) => term === option) >= 0) ? 'selected' : '';\r\n          options += `<option value=\"${option}\" label=\"${option}\" ${selected}>${option}</option>`;\r\n\r\n          // if there's at least 1 search term found, we will add the \"filled\" class for styling purposes\r\n          // on a single select, we'll also make sure the single value is not an empty string to consider this being filled\r\n          if ((selected && this.isMultipleSelect) || (selected && !this.isMultipleSelect && option !== '')) {\r\n            this.isFilled = true;\r\n          }\r\n        });\r\n      } else {\r\n        // array of objects will require a label/value pair unless a customStructure is passed\r\n        optionCollection.forEach((option: SelectOption) => {\r\n          if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n            throw new Error(`[select-filter] A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.multipleSelect, collection: [ { value: '1', label: 'One' } ]')`);\r\n          }\r\n          const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n          const selected = (searchTerms.findIndex((term) => `${term}` === `${option[this.valueName]}`) >= 0) ? 'selected' : '';\r\n          const labelText = ((option.labelKey || this.enableTranslateLabel) && labelKey && isEnableTranslate) ? this.translate && this.translate.currentLang && this.translate.instant(labelKey || ' ') : labelKey;\r\n          let prefixText = option[this.labelPrefixName] || '';\r\n          let suffixText = option[this.labelSuffixName] || '';\r\n          let optionLabel = option.hasOwnProperty(this.optionLabel) ? option[this.optionLabel] : '';\r\n          if (optionLabel && optionLabel.toString) {\r\n            optionLabel = optionLabel.toString().replace(/\\\"/g, '\\''); // replace double quotes by single quotes to avoid interfering with regular html\r\n          }\r\n\r\n          // also translate prefix/suffix if enableTranslateLabel is true and text is a string\r\n          prefixText = (this.enableTranslateLabel && isEnableTranslate && prefixText && typeof prefixText === 'string') ? this.translate && this.translate.currentLang && this.translate.instant(prefixText || ' ') : prefixText;\r\n          suffixText = (this.enableTranslateLabel && isEnableTranslate && suffixText && typeof suffixText === 'string') ? this.translate && this.translate.currentLang && this.translate.instant(suffixText || ' ') : suffixText;\r\n          optionLabel = (this.enableTranslateLabel && isEnableTranslate && optionLabel && typeof optionLabel === 'string') ? this.translate && this.translate.currentLang && this.translate.instant(optionLabel || ' ') : optionLabel;\r\n\r\n          // add to a temp array for joining purpose and filter out empty text\r\n          const tmpOptionArray = [prefixText, (typeof labelText === 'string' || typeof labelText === 'number') ? labelText.toString() : labelText, suffixText].filter((text) => text);\r\n          let optionText = tmpOptionArray.join(separatorBetweenLabels);\r\n\r\n          // if user specifically wants to render html text, he needs to opt-in else it will stripped out by default\r\n          // also, the 3rd party lib will saninitze any html code unless it's encoded, so we'll do that\r\n          if (isRenderHtmlEnabled) {\r\n            // sanitize any unauthorized html tags like script and others\r\n            // for the remaining allowed tags we'll permit all attributes\r\n            const sanitizedText = (DOMPurify.sanitize(optionText, sanitizedOptions) || '').toString();\r\n            optionText = htmlEncode(sanitizedText);\r\n          }\r\n\r\n          // html text of each select option\r\n          let optionValue = option[this.valueName];\r\n          if (optionValue === undefined || optionValue === null) {\r\n            optionValue = '';\r\n          }\r\n          options += `<option value=\"${optionValue}\" label=\"${optionLabel}\" ${selected}>${optionText}</option>`;\r\n\r\n          // if there's at least 1 search term found, we will add the \"filled\" class for styling purposes\r\n          // on a single select, we'll also make sure the single value is not an empty string to consider this being filled\r\n          if ((selected && this.isMultipleSelect) || (selected && !this.isMultipleSelect && option[this.valueName] !== '')) {\r\n            this.isFilled = true;\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return `<select class=\"ms-filter search-filter filter-${columnId}\" ${this.isMultipleSelect ? 'multiple=\"multiple\"' : ''}>${options}</select>`;\r\n  }\r\n\r\n  /** Create a blank entry that can be added to the collection. It will also reuse the same customStructure if need be */\r\n  protected createBlankEntry() {\r\n    const blankEntry = {\r\n      [this.labelName]: '',\r\n      [this.valueName]: ''\r\n    };\r\n    if (this.labelPrefixName) {\r\n      blankEntry[this.labelPrefixName] = '';\r\n    }\r\n    if (this.labelSuffixName) {\r\n      blankEntry[this.labelSuffixName] = '';\r\n    }\r\n    return blankEntry;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * Subscribe to the onClose event and run the callback when that happens\r\n   * @param filterTemplate\r\n   */\r\n  protected createDomElement(filterTemplate: string) {\r\n    const fieldId = this.columnDef && this.columnDef.id;\r\n\r\n    // provide the name attribute to the DOM element which will be needed to auto-adjust drop position (dropup / dropdown)\r\n    this.elementName = `filter-${fieldId}`;\r\n    this.defaultOptions.name = this.elementName;\r\n\r\n    const $headerElm = this.grid.getHeaderRowColumn(fieldId);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    this.$filterElm = $(filterTemplate);\r\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\r\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\r\n    }\r\n    this.$filterElm.attr('name', this.elementName);\r\n    this.$filterElm.data('columnId', fieldId);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (this.isFilled) {\r\n      this.$filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\r\n      this.$filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    // merge options & attach multiSelect\r\n    const filterOptions: MultipleSelectOption = { ...this.defaultOptions, ...this.columnFilter.filterOptions };\r\n    this.filterElmOptions = { ...this.defaultOptions, ...(filterOptions as MultipleSelectOption) };\r\n    this.$filterElm = this.$filterElm.multipleSelect(this.filterElmOptions);\r\n  }\r\n\r\n  /** Initialize the Multiple Select element and its options to use */\r\n  protected initMultipleSelect() {\r\n    const isTranslateEnabled = this.gridOptions && this.gridOptions.enableTranslate;\r\n\r\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\r\n    const options: MultipleSelectOption = {\r\n      autoAdjustDropHeight: true,\r\n      autoAdjustDropPosition: true,\r\n      autoAdjustDropWidthByTextSize: true,\r\n      container: 'body',\r\n      filter: false,  // input search term on top of the select option list\r\n      maxHeight: 275,\r\n      single: true,\r\n\r\n      textTemplate: ($elm) => {\r\n        // are we rendering HTML code? by default it is sanitized and won't be rendered\r\n        const isRenderHtmlEnabled = this.columnDef && this.columnDef.filter && this.columnDef.filter.enableRenderHtml || false;\r\n        return isRenderHtmlEnabled ? $elm.text() : $elm.html();\r\n      },\r\n      onClose: () => {\r\n        // we will subscribe to the onClose event for triggering our callback\r\n        // also add/remove \"filled\" class for styling purposes\r\n        this.onTriggerEvent(undefined);\r\n      }\r\n    };\r\n\r\n    if (this.isMultipleSelect) {\r\n      options.single = false;\r\n      options.okButton = true;\r\n      options.addTitle = true; // show tooltip of all selected items while hovering the filter\r\n      const translationPrefix = getTranslationPrefix(this.gridOptions);\r\n      options.countSelected = (isTranslateEnabled && this.translate && this.translate.instant) ? this.translate.instant(`${translationPrefix}X_OF_Y_SELECTED`) : this._locales && this._locales.TEXT_X_OF_Y_SELECTED;\r\n      options.allSelected = (isTranslateEnabled && this.translate && this.translate.instant) ? this.translate.instant(`${translationPrefix}ALL_SELECTED`) : this._locales && this._locales.TEXT_ALL_SELECTED;\r\n      options.okButtonText = (isTranslateEnabled && this.translate && this.translate.instant) ? this.translate.instant(`${translationPrefix}OK`) : this._locales && this._locales.TEXT_OK;\r\n      options.selectAllText = (isTranslateEnabled && this.translate && this.translate.instant) ? this.translate.instant(`${translationPrefix}SELECT_ALL`) : this._locales && this._locales.TEXT_SELECT_ALL;\r\n      options.selectAllDelimiter = ['', '']; // remove default square brackets of default text \"[Select All]\" => \"Select All\"\r\n    }\r\n\r\n    this.defaultOptions = options;\r\n  }\r\n\r\n  protected onTriggerEvent(e: Event | undefined) {\r\n    const selectedItems = this.getValues();\r\n    if (Array.isArray(selectedItems) && selectedItems.length > 1 || (selectedItems.length === 1 && selectedItems[0] !== '')) {\r\n      this.isFilled = true;\r\n      this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\r\n    } else {\r\n      this.isFilled = false;\r\n      this.$filterElm.removeClass('filled');\r\n      this.$filterElm.siblings('div .search-filter').removeClass('filled');\r\n    }\r\n\r\n    this.searchTerms = selectedItems;\r\n    this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: selectedItems, shouldTriggerQuery: this._shouldTriggerQuery });\r\n    // reset flag for next use\r\n    this._shouldTriggerQuery = true;\r\n  }\r\n}\r\n","import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Column,\r\n  ColumnFilter,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n} from './../models/index';\r\nimport { Optional } from '@angular/core';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\nexport class NativeSelectFilter implements Filter {\r\n  protected _clearFilterTriggered = false;\r\n  protected _shouldTriggerQuery = true;\r\n  protected _currentValues: any | any[] = [];\r\n  $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[] = [];\r\n  columnDef!: Column;\r\n  callback!: FilterCallback;\r\n\r\n  constructor(@Optional() protected readonly translate: TranslateService) { }\r\n\r\n  /** Getter for the Column Filter itself */\r\n  protected get columnFilter(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  /** Getter to know what would be the default operator when none is specified */\r\n  get defaultOperator(): OperatorType | OperatorString {\r\n    return OperatorType.equal;\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  protected get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return this.columnFilter && this.columnFilter.operator || this.defaultOperator;\r\n  }\r\n\r\n  /** Setter for the filter operator */\r\n  set operator(operator: OperatorType | OperatorString) {\r\n    if (this.columnFilter) {\r\n      this.columnFilter.operator = operator;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];\r\n\r\n    if (!this.grid || !this.columnDef || !this.columnFilter || !this.columnFilter.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the Native Select Filter to work correctly.`);\r\n    }\r\n\r\n    if (this.columnFilter.enableTranslateLabel && !this.gridOptions.enableTranslate && (!this.translate || typeof this.translate.instant !== 'function')) {\r\n      throw new Error(`The ngx-translate TranslateService is required for the Native Select Filter to work correctly when \"enableTranslateLabel\" is set.`);\r\n    }\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms.length >= 0) ? this.searchTerms[0] : '';\r\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\r\n      searchTerm = `${searchTerm}`;\r\n    }\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the change event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.change((e: any) => {\r\n      const value = e && e.target && e.target.value || '';\r\n      this._currentValues = [value];\r\n\r\n      if (this._clearFilterTriggered) {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered, shouldTriggerQuery: this._shouldTriggerQuery });\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        value === '' ? this.$filterElm.removeClass('filled') : this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value], shouldTriggerQuery: this._shouldTriggerQuery });\r\n      }\r\n      // reset both flags for next use\r\n      this._clearFilterTriggered = false;\r\n      this._shouldTriggerQuery = true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter values\r\n   */\r\n  clear(shouldTriggerQuery = true) {\r\n    if (this.$filterElm) {\r\n      this._clearFilterTriggered = true;\r\n      this._shouldTriggerQuery = shouldTriggerQuery;\r\n      this.searchTerms = [];\r\n      this._currentValues = [];\r\n      this.$filterElm.val('');\r\n      this.$filterElm.trigger('change');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('change').remove();\r\n    }\r\n    this.$filterElm = null;\r\n  }\r\n\r\n  /**\r\n   * Get selected values retrieved from the select element\r\n   * @params selected items\r\n   */\r\n  getValues(): any[] {\r\n    return this._currentValues;\r\n  }\r\n\r\n  /** Set value(s) on the DOM element */\r\n  setValues(values: SearchTerm | SearchTerm[], operator?: OperatorType | OperatorString) {\r\n    if (Array.isArray(values)) {\r\n      this.$filterElm.val(values[0]);\r\n      this._currentValues = values;\r\n    } else if (values) {\r\n      this.$filterElm.val(values);\r\n      this._currentValues = [values];\r\n    }\r\n\r\n    // set the operator when defined\r\n    this.operator = operator || this.defaultOperator;\r\n  }\r\n\r\n  //\r\n  // protected functions\r\n  // ------------------\r\n\r\n  protected buildTemplateHtmlString() {\r\n    const collection = this.columnFilter && this.columnFilter.collection || [];\r\n    if (!Array.isArray(collection)) {\r\n      throw new Error('The \"collection\" passed to the Native Select Filter is not a valid array.');\r\n    }\r\n    const fieldId = this.columnDef && this.columnDef.id;\r\n    const labelName = (this.columnFilter.customStructure) ? this.columnFilter.customStructure.label : 'label';\r\n    const valueName = (this.columnFilter.customStructure) ? this.columnFilter.customStructure.value : 'value';\r\n\r\n    let options = '';\r\n\r\n    // collection could be an Array of Strings OR Objects\r\n    if (collection.every(x => typeof x === 'string')) {\r\n      collection.forEach((option: string) => {\r\n        options += `<option value=\"${option}\" label=\"${option}\">${option}</option>`;\r\n      });\r\n    } else {\r\n      collection.forEach((option: any) => {\r\n        if (!option || (option[labelName] === undefined && option.labelKey === undefined)) {\r\n          throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Native Select Filter list, for example:: { filter: model: Filters.select, collection: [ { value: '1', label: 'One' } ]')`);\r\n        }\r\n        const labelKey = option.labelKey || option[labelName];\r\n        const textLabel = ((option.labelKey || this.columnFilter.enableTranslateLabel) && this.translate && this.translate.currentLang && this.translate.instant) ? this.translate.instant(labelKey || ' ') : labelKey;\r\n        options += `<option value=\"${option[valueName]}\">${textLabel}</option>`;\r\n      });\r\n    }\r\n    return `<select class=\"form-control search-filter filter-${fieldId}\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  protected createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const fieldId = this.columnDef && this.columnDef.id;\r\n    const $headerElm = this.grid.getHeaderRowColumn(fieldId);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n    const searchTermInput = (searchTerm || '') as string;\r\n\r\n    $filterElm.val(searchTermInput);\r\n    $filterElm.data('columnId', fieldId);\r\n\r\n    if (searchTermInput) {\r\n      this._currentValues = [searchTermInput];\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n","import { Optional } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { destroyObjectDomElementProps, mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType } from '../services/utilities';\r\nimport {\r\n  Column,\r\n  ColumnFilter,\r\n  FieldType,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  FlatpickrOption,\r\n  GridOption,\r\n  OperatorString,\r\n  OperatorType,\r\n  SearchTerm,\r\n} from '../models/index';\r\nimport * as flatpickr_ from 'flatpickr';\r\nimport * as moment_ from 'moment-mini';\r\nimport { BaseOptions as FlatpickrBaseOptions } from 'flatpickr/dist/types/options';\r\nimport { FlatpickrFn } from 'flatpickr/dist/types/instance';\r\nconst flatpickr: FlatpickrFn = (flatpickr_ && flatpickr_['default'] || flatpickr_) as any; // patch for rollup\r\nconst moment = (moment_ as any)['default'] || moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\n// use Flatpickr from import or 'require', whichever works first\r\ndeclare function require(name: string): any;\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\nexport class DateRangeFilter implements Filter {\r\n  protected _clearFilterTriggered = false;\r\n  protected _currentValue: string = '';\r\n  protected _currentDates: Date[] = [];\r\n  protected _currentDateStrings: string[] = [];\r\n  protected _flatpickrOptions!: FlatpickrOption;\r\n  protected _shouldTriggerQuery = true;\r\n  protected $filterElm: any;\r\n  protected $filterInputElm: any;\r\n  flatInstance: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[] = [];\r\n  columnDef!: Column;\r\n  callback!: FilterCallback;\r\n\r\n  constructor(@Optional() private readonly translate: TranslateService) { }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  protected get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Column Filter */\r\n  get columnFilter(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  /** Getter for the Current Dates selected */\r\n  get currentDates(): Date[] {\r\n    return this._currentDates;\r\n  }\r\n\r\n  /** Getter to know what would be the default operator when none is specified */\r\n  get defaultOperator(): OperatorType | OperatorString {\r\n    return this.gridOptions.defaultFilterRangeOperator || OperatorType.rangeInclusive;\r\n  }\r\n\r\n  /** Getter for the Flatpickr Options */\r\n  get flatpickrOptions(): FlatpickrOption {\r\n    return this._flatpickrOptions || {};\r\n  }\r\n\r\n  /** Getter of the Operator to use when doing the filter comparing */\r\n  get operator(): OperatorType | OperatorString {\r\n    return this.columnFilter && this.columnFilter.operator || this.defaultOperator;\r\n  }\r\n\r\n  /** Setter for the filter operator */\r\n  set operator(operator: OperatorType | OperatorString) {\r\n    if (this.columnFilter) {\r\n      this.columnFilter.operator = operator;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\r\n    }\r\n\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];\r\n\r\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n    this.$filterElm = this.createDomElement(this.searchTerms);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterInputElm.keyup((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear(shouldTriggerQuery = true) {\r\n    if (this.flatInstance) {\r\n      this._clearFilterTriggered = true;\r\n      this._shouldTriggerQuery = shouldTriggerQuery;\r\n      this.searchTerms = [];\r\n      this.flatInstance.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.flatInstance && typeof this.flatInstance.destroy === 'function') {\r\n      this.flatInstance.destroy();\r\n      if (this.flatInstance.element) {\r\n        destroyObjectDomElementProps(this.flatInstance);\r\n      }\r\n    }\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n    this.flatInstance = null;\r\n    this.$filterElm = null;\r\n  }\r\n\r\n  hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   * @params searchTerms\r\n   */\r\n  setValues(searchTerms: SearchTerm[] | SearchTerm, operator?: OperatorType | OperatorString) {\r\n    let pickerValues: any[] = [];\r\n\r\n    // get the picker values, if it's a string with the \"..\", we'll do the split else we'll use the array of search terms\r\n    if (typeof searchTerms === 'string' || (Array.isArray(searchTerms) && typeof searchTerms[0] === 'string') && (searchTerms[0] as string).indexOf('..') > 0) {\r\n      pickerValues = (typeof searchTerms === 'string') ? [(searchTerms as string)] : (searchTerms[0] as string).split('..');\r\n    } else if (Array.isArray(searchTerms)) {\r\n      pickerValues = searchTerms;\r\n    }\r\n\r\n    if (this.flatInstance && searchTerms) {\r\n      this._currentDates = pickerValues;\r\n      this.flatInstance.setDate(pickerValues);\r\n    }\r\n\r\n    // set the operator when defined\r\n    this.operator = operator || this.defaultOperator;\r\n  }\r\n\r\n  //\r\n  // protected functions\r\n  // ------------------\r\n  protected buildDatePickerInput(searchTerms?: SearchTerm | SearchTerm[]) {\r\n    const columnId = this.columnDef && this.columnDef.id || '';\r\n    const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnFilter.type || this.columnDef.type || FieldType.dateIso);\r\n    const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnFilter.type || this.columnDef.type || FieldType.dateUtc);\r\n    const userFilterOptions = (this.columnFilter && this.columnFilter.filterOptions || {}) as FlatpickrOption;\r\n\r\n    // get current locale, if user defined a custom locale just use or get it the Translate Service if it exist else just use English\r\n    let currentLocale = (userFilterOptions && userFilterOptions.locale) || (this.translate && this.translate.currentLang) || this.gridOptions.locale || 'en';\r\n    if (currentLocale.length > 2) {\r\n      currentLocale = currentLocale.substring(0, 2);\r\n    }\r\n\r\n    let pickerValues: any[] = [];\r\n\r\n    // get the picker values, if it's a string with the \"..\", we'll do the split else we'll use the array of search terms\r\n    if (typeof searchTerms === 'string' || (Array.isArray(searchTerms) && typeof searchTerms[0] === 'string') && (searchTerms[0] as string).indexOf('..') > 0) {\r\n      pickerValues = (typeof searchTerms === 'string') ? [(searchTerms as string)] : (searchTerms[0] as string).split('..');\r\n    } else if (Array.isArray(searchTerms)) {\r\n      pickerValues = searchTerms;\r\n    }\r\n\r\n    // if we are preloading searchTerms, we'll keep them for reference\r\n    if (pickerValues) {\r\n      this._currentDates = pickerValues;\r\n      const outFormat = mapMomentDateFormatWithFieldType(this.columnFilter.type || this.columnDef.type || FieldType.dateIso);\r\n      this._currentDateStrings = pickerValues.map(date => moment(date).format(outFormat));\r\n    }\r\n\r\n    const pickerOptions: FlatpickrOption = {\r\n      defaultDate: pickerValues || '',\r\n      altInput: true,\r\n      altFormat: outputFormat,\r\n      dateFormat: inputFormat,\r\n      mode: 'range',\r\n      wrap: true,\r\n      closeOnSelect: true,\r\n      locale: currentLocale,\r\n      onChange: (selectedDates: Date[] | Date, dateStr: string, instance: any) => {\r\n        if (Array.isArray(selectedDates)) {\r\n          this._currentDates = selectedDates;\r\n          const outFormat = mapMomentDateFormatWithFieldType(this.columnDef.outputType || this.columnFilter.type || this.columnDef.type || FieldType.dateIso);\r\n          this._currentDateStrings = selectedDates.map(date => moment(date).format(outFormat));\r\n          this._currentValue = this._currentDateStrings.join('..');\r\n        }\r\n\r\n        // when using the time picker, we can simulate a keyup event to avoid multiple backend request\r\n        // since backend request are only executed after user start typing, changing the time should be treated the same way\r\n        const newEvent = pickerOptions.enableTime ? new CustomEvent('keyup') : undefined;\r\n        this.onTriggerEvent(newEvent);\r\n      },\r\n      errorHandler: (error) => {\r\n        if (error.toString().includes('invalid locale')) {\r\n          console.warn(`[Angular-Slickgrid] Flatpickr missing locale imports (${currentLocale}), will revert to English as the default locale.\r\n          See Flatpickr Localization for more info, for example if we want to use French, then we can import it with:  import 'flatpickr/dist/l10n/fr';`);\r\n        }\r\n      }\r\n    };\r\n\r\n    // add the time picker when format is UTC (Z) or has the 'h' (meaning hours)\r\n    if (outputFormat && (outputFormat === 'Z' || outputFormat.toLowerCase().includes('h'))) {\r\n      pickerOptions.enableTime = true;\r\n    }\r\n\r\n    // merge options with optional user's custom options\r\n    this._flatpickrOptions = { ...pickerOptions, ...userFilterOptions };\r\n\r\n    let placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    if (this.columnFilter && this.columnFilter.placeholder) {\r\n      placeholder = this.columnFilter.placeholder;\r\n    }\r\n    const $filterInputElm: any = $(`<div class=\"flatpickr search-filter filter-${columnId}\"><input type=\"text\" class=\"form-control\" data-input placeholder=\"${placeholder}\"></div>`);\r\n    this.flatInstance = (flatpickr && $filterInputElm[0] && typeof $filterInputElm[0].flatpickr === 'function') ? $filterInputElm[0].flatpickr(this._flatpickrOptions) : flatpickr($filterInputElm, this._flatpickrOptions as unknown as Partial<FlatpickrBaseOptions>);\r\n    return $filterInputElm;\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   * @params searchTerms\r\n   */\r\n  protected createDomElement(searchTerms?: SearchTerm[]) {\r\n    const fieldId = this.columnDef && this.columnDef.id;\r\n    const $headerElm = this.grid.getHeaderRowColumn(fieldId);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    this.$filterInputElm = this.buildDatePickerInput(searchTerms);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=flatpickr>\r\n        <input type=\"text\" class=\"form-control\" data-input>\r\n      </div>\r\n    */\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    this.$filterInputElm.data('columnId', fieldId);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (Array.isArray(searchTerms) && searchTerms.length > 0 && searchTerms[0] !== '') {\r\n      this.$filterInputElm.addClass('filled');\r\n      this._currentDates = searchTerms as Date[];\r\n      this._currentValue = searchTerms[0] as string;\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if (this.$filterInputElm && typeof this.$filterInputElm.appendTo === 'function') {\r\n      this.$filterInputElm.appendTo($headerElm);\r\n    }\r\n\r\n    return this.$filterInputElm;\r\n  }\r\n\r\n  protected onTriggerEvent(e: Event | undefined) {\r\n    if (this._clearFilterTriggered) {\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered, shouldTriggerQuery: this._shouldTriggerQuery });\r\n      this.$filterElm.removeClass('filled');\r\n    } else {\r\n      (this._currentDateStrings) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (this._currentDateStrings ? this._currentDateStrings : [this._currentValue]), operator: this.operator || '', shouldTriggerQuery: this._shouldTriggerQuery });\r\n    }\r\n    // reset both flags for next use\r\n    this._clearFilterTriggered = false;\r\n    this._shouldTriggerQuery = true;\r\n  }\r\n}\r\n","import { Column, Filter } from './../models/index';\r\nimport { AutoCompleteFilter } from './autoCompleteFilter';\r\nimport { CompoundDateFilter } from './compoundDateFilter';\r\nimport { CompoundInputFilter } from './compoundInputFilter';\r\nimport { CompoundInputNumberFilter } from './compoundInputNumberFilter';\r\nimport { CompoundInputPasswordFilter } from './compoundInputPasswordFilter';\r\nimport { CompoundSliderFilter } from './compoundSliderFilter';\r\nimport { InputFilter } from './inputFilter';\r\nimport { InputMaskFilter } from './inputMaskFilter';\r\nimport { InputNumberFilter } from './inputNumberFilter';\r\nimport { InputPasswordFilter } from './inputPasswordFilter';\r\nimport { MultipleSelectFilter } from './multipleSelectFilter';\r\nimport { NativeSelectFilter } from './nativeSelectFilter';\r\nimport { DateRangeFilter } from './dateRangeFilter';\r\nimport { SingleSelectFilter } from './singleSelectFilter';\r\nimport { SliderFilter } from './sliderFilter';\r\nimport { SliderRangeFilter } from './sliderRangeFilter';\r\n\r\nexport const Filters = {\r\n  /** AutoComplete Filter (using jQuery UI autocomplete feature) */\r\n  autoComplete: AutoCompleteFilter,\r\n\r\n  /** Compound Date Filter (compound of Operator + Date picker) */\r\n  compoundDate: CompoundDateFilter,\r\n\r\n  /** Alias to compoundInputText to Compound Input Filter (compound of Operator + Input Text) */\r\n  compoundInput: CompoundInputFilter,\r\n\r\n  /** Compound Input Number Filter (compound of Operator + Input of type Number) */\r\n  compoundInputNumber: CompoundInputNumberFilter,\r\n\r\n  /** Compound Input Password Filter (compound of Operator + Input of type Password, also note that only the text shown in the UI will be masked, filter query is still plain text) */\r\n  compoundInputPassword: CompoundInputPasswordFilter,\r\n\r\n  /** Compound Input Text Filter (compound of Operator + Input Text) */\r\n  compoundInputText: CompoundInputFilter,\r\n\r\n  /** Compound Slider Filter (compound of Operator + Slider) */\r\n  compoundSlider: CompoundSliderFilter,\r\n\r\n  /** Range Date Filter (uses the Flactpickr Date picker with range option) */\r\n  dateRange: DateRangeFilter,\r\n\r\n  /** Alias to inputText, input type text filter (this is the default filter when no type is provided) */\r\n  input: InputFilter,\r\n\r\n  /**\r\n   * Input Filter of type text that will be formatted with a mask output\r\n   * e.g.: column: { filter: { model: Filters.inputMask }, params: { mask: '(000) 000-0000' }}\r\n   */\r\n  inputMask: InputMaskFilter,\r\n\r\n  /** Input Filter of type Number */\r\n  inputNumber: InputNumberFilter,\r\n\r\n  /** Input Filter of type Password (note that only the text shown in the UI will be masked, filter query is still plain text) */\r\n  inputPassword: InputPasswordFilter,\r\n\r\n  /** Default Filter, input type text filter */\r\n  inputText: InputFilter,\r\n\r\n  /** Multiple Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  multipleSelect: MultipleSelectFilter,\r\n\r\n  /** Select filter, which uses native DOM element select */\r\n  select: NativeSelectFilter,\r\n\r\n  /** Single Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  singleSelect: SingleSelectFilter,\r\n\r\n  /** Slider Filter (only 1 value) */\r\n  slider: SliderFilter,\r\n\r\n  /** Slider Range Filter, uses jQuery UI Range Slider (2 values, lowest/highest search range) */\r\n  sliderRange: SliderRangeFilter,\r\n};\r\n","import { TranslateService } from '@ngx-translate/core';\r\nimport { CompoundInputFilter } from './compoundInputFilter';\r\n\r\nexport class CompoundInputNumberFilter extends CompoundInputFilter {\r\n  /** Initialize the Filter */\r\n  constructor(protected readonly translate: TranslateService) {\r\n    super(translate);\r\n    this.inputType = 'number';\r\n  }\r\n}\r\n","import { TranslateService } from '@ngx-translate/core';\r\nimport { CompoundInputFilter } from './compoundInputFilter';\r\n\r\nexport class CompoundInputPasswordFilter extends CompoundInputFilter {\r\n  /** Initialize the Filter */\r\n  constructor(protected readonly translate: TranslateService) {\r\n    super(translate);\r\n    this.inputType = 'password';\r\n  }\r\n}\r\n","import { TranslateService } from '@ngx-translate/core';\r\n\r\nimport {\r\n  Column,\r\n  ColumnFilter,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  Locale,\r\n  OperatorDetail,\r\n  OperatorString,\r\n  OperatorType,\r\n  SearchTerm,\r\n} from './../models/index';\r\nimport { Constants } from '../constants';\r\nimport { buildSelectOperatorHtmlString } from './filterUtilities';\r\nimport { getTranslationPrefix, mapOperatorToShorthandDesignation } from '../services/utilities';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\nconst DEFAULT_MIN_VALUE = 0;\r\nconst DEFAULT_MAX_VALUE = 100;\r\nconst DEFAULT_STEP = 1;\r\n\r\nexport class CompoundSliderFilter implements Filter {\r\n  protected _clearFilterTriggered = false;\r\n  protected _currentValue: number = 0;\r\n  protected _shouldTriggerQuery = true;\r\n  protected _elementRangeInputId!: string;\r\n  protected _elementRangeOutputId!: string;\r\n  protected _operator!: OperatorType | OperatorString;\r\n  protected $containerInputGroupElm: any;\r\n  protected $filterElm: any;\r\n  protected $filterInputElm: any;\r\n  protected $selectOperatorElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[] = [];\r\n  columnDef!: Column;\r\n  callback!: FilterCallback;\r\n\r\n  constructor(protected readonly translate: TranslateService) { }\r\n\r\n  /** Getter for the Filter Operator */\r\n  get columnFilter(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  /** Getter to know what would be the default operator when none is specified */\r\n  get defaultOperator(): OperatorType | OperatorString {\r\n    return OperatorType.empty;\r\n  }\r\n\r\n  /** Getter for the Filter Generic Params */\r\n  protected get filterParams(): any {\r\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};\r\n  }\r\n\r\n  /** Getter for the `filter` properties */\r\n  protected get filterProperties(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  protected get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the single Locale texts provided by the user in main file or else use default English locales via the Constants */\r\n  get locales(): Locale {\r\n    return this.gridOptions.locales || Constants.locales;\r\n  }\r\n\r\n  /** Getter for the Filter Operator */\r\n  get operator(): OperatorType | OperatorString {\r\n    return this._operator || this.columnFilter.operator || this.defaultOperator;\r\n  }\r\n\r\n  /** Setter for the Filter Operator */\r\n  set operator(op: OperatorType | OperatorString) {\r\n    this._operator = op;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.operator = args.operator || '';\r\n    this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];\r\n\r\n    // define the input & slider number IDs\r\n    this._elementRangeInputId = `rangeInput_${this.columnDef.field}`;\r\n    this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}`;\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms.length >= 0) ? this.searchTerms[0] : '';\r\n\r\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n    // and initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(searchTerm);\r\n\r\n    // step 3, subscribe to the input change event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterInputElm.on('change', this.onTriggerEvent.bind(this));\r\n    this.$selectOperatorElm.on('change', this.onTriggerEvent.bind(this));\r\n\r\n    // if user chose to display the slider number on the right side, then update it every time it changes\r\n    // we need to use both \"input\" and \"change\" event to be all cross-browser\r\n    if (!this.filterParams.hideSliderNumber) {\r\n      this.$filterInputElm.on('input change', (e: { target: HTMLInputElement }) => {\r\n        const value = e && e.target && e.target.value || '';\r\n        if (value) {\r\n          const elements = document.getElementsByClassName(this._elementRangeOutputId);\r\n          if (elements.length) {\r\n            elements[0].innerHTML = value;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear(shouldTriggerQuery = true) {\r\n    if (this.$filterElm && this.$selectOperatorElm) {\r\n      this._clearFilterTriggered = true;\r\n      this._shouldTriggerQuery = shouldTriggerQuery;\r\n      this.searchTerms = [];\r\n      const clearedValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;\r\n      this._currentValue = +clearedValue;\r\n      this.$selectOperatorElm.val(0);\r\n      this.$filterInputElm.val(clearedValue);\r\n      if (!this.filterParams.hideSliderNumber) {\r\n        this.$containerInputGroupElm.children('div.input-group-addon.input-group-append').children().last().html(clearedValue);\r\n      }\r\n      this.onTriggerEvent(undefined);\r\n      this.$filterElm.removeClass('filled');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterInputElm) {\r\n      this.$filterInputElm.off('input change').remove();\r\n      this.$selectOperatorElm.off('change').remove();\r\n    }\r\n    this.$filterInputElm = null;\r\n    this.$filterElm = null;\r\n    this.$selectOperatorElm = null;\r\n  }\r\n\r\n  /**\r\n   * Get selected value retrieved from the slider element\r\n   * @params selected items\r\n   */\r\n  getValues(): number {\r\n    return this._currentValue;\r\n  }\r\n\r\n  /** Set value(s) on the DOM element */\r\n  setValues(values: SearchTerm | SearchTerm[], operator?: OperatorType | OperatorString) {\r\n    const newValue = Array.isArray(values) ? values[0] : values;\r\n    this._currentValue = +newValue;\r\n    this.$filterInputElm.val(newValue);\r\n    this.$containerInputGroupElm.children('div.input-group-addon.input-group-append').children().last().html(newValue);\r\n\r\n    // set the operator, in the DOM as well, when defined\r\n    this.operator = operator || this.defaultOperator;\r\n    if (operator && this.$selectOperatorElm) {\r\n      const operatorShorthand = mapOperatorToShorthandDesignation(this.operator);\r\n      this.$selectOperatorElm.val(operatorShorthand);\r\n    }\r\n  }\r\n\r\n  //\r\n  // protected functions\r\n  // ------------------\r\n\r\n  /** Build HTML Template for the input range (slider) */\r\n  protected buildTemplateHtmlString() {\r\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\r\n    const maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;\r\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\r\n    const step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;\r\n\r\n    return `<input type=\"range\" name=\"${this._elementRangeInputId}\"\r\n              defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\r\n              class=\"form-control slider-filter-input range compound-slider ${this._elementRangeInputId}\" />`;\r\n  }\r\n\r\n  /** Build HTML Template for the text (number) that is shown appended to the slider */\r\n  protected buildTemplateSliderTextHtmlString() {\r\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\r\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\r\n\r\n    return `<div class=\"input-group-addon input-group-append slider-value\"><span class=\"input-group-text ${this._elementRangeOutputId}\">${defaultValue}</span></div>`;\r\n  }\r\n\r\n  /** Get the available operator option values to populate the operator select dropdown list */\r\n  protected getOperatorOptionValues(): OperatorDetail[] {\r\n    if (this.columnFilter?.compoundOperatorList) {\r\n      return this.columnFilter.compoundOperatorList;\r\n    } else {\r\n      return [\r\n        { operator: '', description: '' },\r\n        { operator: '=', description: this.getOutputText('EQUAL_TO', 'TEXT_EQUAL_TO', 'Equal to') },\r\n        { operator: '<', description: this.getOutputText('LESS_THAN', 'TEXT_LESS_THAN', 'Less than') },\r\n        { operator: '<=', description: this.getOutputText('LESS_THAN_OR_EQUAL_TO', 'TEXT_LESS_THAN_OR_EQUAL_TO', 'Less than or equal to') },\r\n        { operator: '>', description: this.getOutputText('GREATER_THAN', 'TEXT_GREATER_THAN', 'Greater than') },\r\n        { operator: '>=', description: this.getOutputText('GREATER_THAN_OR_EQUAL_TO', 'TEXT_GREATER_THAN_OR_EQUAL_TO', 'Greater than or equal to') },\r\n        { operator: '<>', description: this.getOutputText('NOT_EQUAL_TO', 'TEXT_NOT_EQUAL_TO', 'Not equal to') }\r\n      ];\r\n    }\r\n  }\r\n\r\n  /** Get Locale, Translated or a Default Text if first two aren't detected */\r\n  protected getOutputText(translationKey: string, localeText: string, defaultText: string): string {\r\n    if (this.gridOptions && this.gridOptions.enableTranslate && this.translate && this.translate.instant) {\r\n      const translationPrefix = getTranslationPrefix(this.gridOptions);\r\n      return this.translate.instant(`${translationPrefix}${translationKey}`);\r\n    }\r\n    return this.locales && this.locales[localeText as keyof Locale] || defaultText;\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  protected createDomElement(searchTerm?: SearchTerm) {\r\n    const fieldId = this.columnDef && this.columnDef.id;\r\n    const minValue = (this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE) as number;\r\n    const startValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    let searchTermInput = (searchTerm || '0') as string;\r\n    if (+searchTermInput < minValue) {\r\n      searchTermInput = `${minValue}`;\r\n    }\r\n    if (+searchTermInput < startValue) {\r\n      searchTermInput = `${startValue}`;\r\n    }\r\n    this._currentValue = +searchTermInput;\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    const selectOperatorHtmlString = buildSelectOperatorHtmlString(this.getOperatorOptionValues());\r\n    this.$selectOperatorElm = $(selectOperatorHtmlString);\r\n    this.$filterInputElm = $(this.buildTemplateHtmlString());\r\n    const $filterContainerElm = $(`<div class=\"form-group slider-container search-filter filter-${fieldId}\"></div>`);\r\n    this.$containerInputGroupElm = $(`<div class=\"input-group search-filter filter-${fieldId}\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<span class=\"input-group-addon input-group-prepend operator\"></span>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon input-group-prepend operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <input class=\"form-control\" type=\"text\" />\r\n        <div class=\"input-group-addon input-group-prepend rangeOuput_percentComplete\"><span class=\"input-group-text\">0</span></div>\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    this.$containerInputGroupElm.append($operatorInputGroupAddon);\r\n    this.$containerInputGroupElm.append(this.$filterInputElm);\r\n    if (!this.filterParams.hideSliderNumber) {\r\n      const $sliderTextInputAppendAddon = $(this.buildTemplateSliderTextHtmlString());\r\n      $sliderTextInputAppendAddon.children().html(searchTermInput);\r\n      this.$containerInputGroupElm.append($sliderTextInputAppendAddon);\r\n    }\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append(this.$containerInputGroupElm);\r\n\r\n    this.$filterInputElm.val(searchTermInput);\r\n    this.$filterInputElm.data('columnId', fieldId);\r\n\r\n    if (this.operator) {\r\n      const operatorShorthand = mapOperatorToShorthandDesignation(this.operator);\r\n      this.$selectOperatorElm.val(operatorShorthand);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm !== '') {\r\n      $filterContainerElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  protected onTriggerEvent(e: Event | undefined) {\r\n    const value = this.$filterInputElm.val();\r\n    this._currentValue = +value;\r\n\r\n    if (this._clearFilterTriggered) {\r\n      this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered, shouldTriggerQuery: this._shouldTriggerQuery });\r\n    } else {\r\n      this.$filterElm.addClass('filled');\r\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').val();\r\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (value ? [value || '0'] : null), operator: selectedOperator || '', shouldTriggerQuery: this._shouldTriggerQuery });\r\n    }\r\n    // reset both flags for next use\r\n    this._clearFilterTriggered = false;\r\n    this._shouldTriggerQuery = true;\r\n  }\r\n}\r\n","import { InputFilter } from './inputFilter';\r\nimport { FilterArguments } from '../models/filterArguments.interface';\r\n\r\nexport class InputMaskFilter extends InputFilter {\r\n  protected _inputMask = '';\r\n\r\n  /** Initialize the Filter */\r\n  constructor() {\r\n    super();\r\n    this.inputType = 'text';\r\n  }\r\n\r\n  /** Getter of the input mask, when provided */\r\n  get inputMask(): string {\r\n    return this._inputMask;\r\n  }\r\n\r\n  /**\r\n   * Override the Filter init used by SlickGrid\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];\r\n\r\n    // get input mask from params (can be in columnDef or columnFilter params)\r\n    if (this.columnDef && this.columnDef.params && this.columnDef.params.mask) {\r\n      this._inputMask = this.columnDef.params.mask;\r\n    } else if (this.columnFilter && this.columnFilter.params && this.columnFilter.params.mask) {\r\n      this._inputMask = this.columnFilter.params.mask;\r\n    }\r\n\r\n    if (!this._inputMask) {\r\n      throw new Error(`[Angular-Slickgrid] The Filters.inputMask requires the mask to be passed in the filter params or the column definition params\r\n        for example:: this.columnDefinitions: [{ id: 'phone', field: 'phone', filter: { model: Filters.inputMask, params: { mask: '000-000-0000' }}}]`);\r\n    }\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms.length >= 0) ? this.searchTerms[0] : '';\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the input change event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n\r\n    this.$filterElm.on('keyup blur change', (e: any) => {\r\n      let value = '';\r\n      if (e && e.target && e.target.value) {\r\n        let targetValue = e.target.value;\r\n        const enableWhiteSpaceTrim = this.gridOptions.enableFilterTrimWhiteSpace || this.columnFilter.enableTrimWhiteSpace;\r\n        if (typeof targetValue === 'string' && enableWhiteSpaceTrim) {\r\n          targetValue = targetValue.trim();\r\n        }\r\n\r\n        // if it has a mask, we need to do a bit more work\r\n        // and replace the filter string by the masked output without triggering an event\r\n        const unmaskedValue = this.unmaskValue(targetValue);\r\n        const maskedValue = this.maskValue(unmaskedValue);\r\n        value = unmaskedValue;\r\n\r\n        if (e.keyCode >= 48) {\r\n          this.$filterElm.val(maskedValue); // replace filter string with masked string\r\n          e.preventDefault();\r\n        }\r\n      }\r\n\r\n      if (this._clearFilterTriggered) {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered, shouldTriggerQuery: this._shouldTriggerQuery });\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value], shouldTriggerQuery: this._shouldTriggerQuery });\r\n      }\r\n      // reset both flags for next use\r\n      this._clearFilterTriggered = false;\r\n      this._shouldTriggerQuery = true;\r\n    });\r\n  }\r\n\r\n  /** From a regular string, we will use the mask to output a new string */\r\n  protected maskValue(inputValue: string): string {\r\n    let i = 0;\r\n    let maskedValue = '';\r\n\r\n    if (this._inputMask) {\r\n      maskedValue = this._inputMask.replace(/[09A]/gi, (match) => {\r\n        // only replace the char when the mask is a 0 or 9 for a digit OR the mask is \"A\" and the char is a non-digit meaning a string char\r\n        if (\r\n          ((match === '0' || match === '9') && /\\d+/g.test(inputValue[i]))    // mask is 0 or 9 and value is a digit\r\n          || (match.toUpperCase() === 'A' && /[^\\d]+/gi.test(inputValue[i]))  // OR mask is an \"A\" and value is non-digit\r\n        ) {\r\n          return inputValue[i++] || '';\r\n        }\r\n        return '';\r\n      });\r\n    }\r\n\r\n    return maskedValue;\r\n  }\r\n\r\n  /** From a masked string, we will remove the mask and make a regular string again */\r\n  protected unmaskValue(maskedValue: string): string {\r\n    // remove anything else but digits and chars from both the input mask and the input masked value for later comparison\r\n    // e.g. (000) 000-0000 would return 0000000000\r\n    const valueWithoutSymbols = maskedValue.replace(/[^0-9a-z]*/gi, '');\r\n    const maskWithoutSymbols = this._inputMask.replace(/[^0-9a-z]*/gi, '');\r\n\r\n    // then we can analyze if each char on each indexes equals what the mask requires, if not the char will be disregarded from the output\r\n    // basically, if our mask is \"0A0\" and input value is \"2ab\", then only \"2a\" will be returned since the last char \"b\" is not part of the mask and is invalid\r\n    let output = '';\r\n    for (let i = 0; i < maskWithoutSymbols.length; i++) {\r\n      if (valueWithoutSymbols[i]) {\r\n        if (\r\n          ((maskWithoutSymbols[i] === '0' || maskWithoutSymbols[i] === '9') && /\\d+/g.test(valueWithoutSymbols[i]))    // mask is 0 or 9 and value is a digit\r\n          || (maskWithoutSymbols[i].toUpperCase() === 'A' && /[^\\d]+/gi.test(valueWithoutSymbols[i]))  // OR mask is an \"A\" and value is non-digit\r\n        ) {\r\n          output += valueWithoutSymbols[i]; // valid and matches the Mask, so we can add it up to the string output\r\n        }\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n}\r\n","import { InputFilter } from './inputFilter';\r\n\r\nexport class InputNumberFilter extends InputFilter {\r\n  /** Initialize the Filter */\r\n  constructor() {\r\n    super();\r\n    this.inputType = 'number';\r\n  }\r\n}\r\n","import { InputFilter } from './inputFilter';\r\n\r\nexport class InputPasswordFilter extends InputFilter {\r\n  /** Initialize the Filter */\r\n  constructor() {\r\n    super();\r\n    this.inputType = 'password';\r\n  }\r\n}\r\n","import { TranslateService } from '@ngx-translate/core';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport { SelectFilter } from './selectFilter';\r\n\r\nexport class MultipleSelectFilter extends SelectFilter {\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  constructor(protected readonly translate: TranslateService, protected readonly collectionService: CollectionService) {\r\n    super(translate, collectionService, true);\r\n  }\r\n}\r\n","import { TranslateService } from '@ngx-translate/core';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport { SelectFilter } from './selectFilter';\r\n\r\nexport class SingleSelectFilter extends SelectFilter {\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  constructor(protected readonly translate: TranslateService, protected readonly collectionService: CollectionService) {\r\n    super(translate, collectionService, false);\r\n  }\r\n}\r\n","import {\r\n  Column,\r\n  ColumnFilter,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\nconst DEFAULT_MIN_VALUE = 0;\r\nconst DEFAULT_MAX_VALUE = 100;\r\nconst DEFAULT_STEP = 1;\r\n\r\nexport class SliderFilter implements Filter {\r\n  protected _clearFilterTriggered = false;\r\n  protected _currentValue = 0;\r\n  protected _shouldTriggerQuery = true;\r\n  protected _elementRangeInputId!: string;\r\n  protected _elementRangeOutputId!: string;\r\n  protected $filterElm: any;\r\n  protected $filterInputElm: any;\r\n  protected $filterNumberElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[] = [];\r\n  columnDef!: Column;\r\n  callback!: FilterCallback;\r\n\r\n  /** Getter for the Column Filter */\r\n  get columnFilter(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  /** Getter to know what would be the default operator when none is specified */\r\n  get defaultOperator(): OperatorType | OperatorString {\r\n    return OperatorType.equal;\r\n  }\r\n\r\n  /** Getter for the Filter Generic Params */\r\n  protected get filterParams(): any {\r\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};\r\n  }\r\n\r\n  /** Getter for the `filter` properties */\r\n  protected get filterProperties(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return this.columnFilter && this.columnFilter.operator || this.defaultOperator;\r\n  }\r\n\r\n  /** Setter for the filter operator */\r\n  set operator(operator: OperatorType | OperatorString) {\r\n    if (this.columnFilter) {\r\n      this.columnFilter.operator = operator;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];\r\n\r\n    // define the input & slider number IDs\r\n    this._elementRangeInputId = `rangeInput_${this.columnDef.field}`;\r\n    this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}`;\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms.length >= 0) ? this.searchTerms[0] : '';\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the change event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterInputElm.change((e: any) => {\r\n      const value = e && e.target && e.target.value;\r\n      this._currentValue = +value;\r\n\r\n      if (this._clearFilterTriggered) {\r\n        this.$filterElm.removeClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered, searchTerms: [], shouldTriggerQuery: this._shouldTriggerQuery });\r\n      } else {\r\n        this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value || '0'], shouldTriggerQuery: this._shouldTriggerQuery });\r\n      }\r\n      // reset both flags for next use\r\n      this._clearFilterTriggered = false;\r\n      this._shouldTriggerQuery = true;\r\n    });\r\n\r\n    // if user chose to display the slider number on the right side, then update it every time it changes\r\n    // we need to use both \"input\" and \"change\" event to be all cross-browser\r\n    if (!this.filterParams.hideSliderNumber) {\r\n      this.$filterInputElm.on('input change', (e: { target: HTMLInputElement }) => {\r\n        const value = e && e.target && e.target.value;\r\n        if (value !== undefined && value !== null) {\r\n          const elements = document.getElementsByClassName(this._elementRangeOutputId);\r\n          if (elements.length) {\r\n            elements[0].innerHTML = value;\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear(shouldTriggerQuery = true) {\r\n    if (this.$filterElm) {\r\n      this._clearFilterTriggered = true;\r\n      this._shouldTriggerQuery = shouldTriggerQuery;\r\n      this.searchTerms = [];\r\n      const clearedValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;\r\n      this._currentValue = +clearedValue;\r\n      this.$filterInputElm.val(clearedValue);\r\n      this.$filterNumberElm.html(clearedValue);\r\n      this.$filterInputElm.trigger('change');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterInputElm) {\r\n      this.$filterInputElm.off('input change').remove();\r\n    }\r\n    this.$filterInputElm = null;\r\n    this.$filterElm = null;\r\n  }\r\n\r\n  /**\r\n   * Get selected value retrieved from the slider element\r\n   * @params selected items\r\n   */\r\n  getValues(): number {\r\n    return this._currentValue;\r\n  }\r\n\r\n  /** Set value(s) on the DOM element */\r\n  setValues(values: SearchTerm | SearchTerm[], operator?: OperatorType | OperatorString) {\r\n    if (Array.isArray(values)) {\r\n      this.$filterInputElm.val(`${values[0]}`);\r\n      this.$filterNumberElm.html(`${values[0]}`);\r\n      this._currentValue = +values[0];\r\n    } else if (values) {\r\n      this.$filterInputElm.val(values);\r\n      this._currentValue = +values;\r\n    }\r\n\r\n    // set the operator when defined\r\n    this.operator = operator || this.defaultOperator;\r\n  }\r\n\r\n  //\r\n  // protected functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  protected buildTemplateHtmlString() {\r\n    const fieldId = this.columnDef && this.columnDef.id;\r\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\r\n    const maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;\r\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\r\n    const step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;\r\n\r\n    if (this.filterParams.hideSliderNumber) {\r\n      return `\r\n      <div class=\"search-filter slider-container filter-${fieldId}\">\r\n        <input type=\"range\" name=\"${this._elementRangeInputId}\"\r\n          defaultValue=\"${defaultValue}\" value=\"${defaultValue}\"\r\n          min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\r\n          class=\"form-control slider-filter-input range ${this._elementRangeInputId}\" />\r\n      </div>`;\r\n    }\r\n\r\n    return `\r\n      <div class=\"input-group slider-container search-filter filter-${fieldId}\">\r\n        <input type=\"range\" name=\"${this._elementRangeInputId}\"\r\n          defaultValue=\"${defaultValue}\" value=\"${defaultValue}\"\r\n          min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\r\n          class=\"form-control slider-filter-input range ${this._elementRangeInputId}\" />\r\n        <div class=\"input-group-addon input-group-append slider-value\">\r\n          <span class=\"input-group-text ${this._elementRangeOutputId}\">${defaultValue}</span>\r\n        </div>\r\n      </div>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate string\r\n   * @param searchTerm optional preset search terms\r\n   */\r\n  protected createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const columnId = this.columnDef && this.columnDef.id;\r\n    const minValue = (this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE) as number;\r\n    const startValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\r\n    const $headerElm = this.grid.getHeaderRowColumn(columnId);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n    let searchTermInput = (searchTerm || '0') as string;\r\n    if (+searchTermInput < minValue) {\r\n      searchTermInput = `${minValue}`;\r\n    }\r\n    if (+searchTermInput < startValue) {\r\n      searchTermInput = `${startValue}`;\r\n    }\r\n    this._currentValue = +searchTermInput;\r\n\r\n    this.$filterInputElm = $filterElm.children('input');\r\n    this.$filterNumberElm = $filterElm.children('div.input-group-addon.input-group-append').children();\r\n    this.$filterInputElm.val(searchTermInput);\r\n    this.$filterNumberElm.html(searchTermInput);\r\n    $filterElm.data('columnId', columnId);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n","import {\r\n  Column,\r\n  ColumnFilter,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  JQueryUiSliderOption,\r\n  JQueryUiSliderResponse,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n} from '../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\nconst DEFAULT_MIN_VALUE = 0;\r\nconst DEFAULT_MAX_VALUE = 100;\r\nconst DEFAULT_STEP = 1;\r\n\r\n/** A Slider Range Filter which uses jQuery UI, this is only meant to be used as a range filter (with 2 handles lowest & highest values) */\r\nexport class SliderRangeFilter implements Filter {\r\n  protected _clearFilterTriggered = false;\r\n  protected _currentValues: number[] = [];\r\n  protected _shouldTriggerQuery = true;\r\n  protected _sliderOptions!: JQueryUiSliderOption;\r\n  protected $filterElm: any;\r\n  protected $filterContainerElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[] = [];\r\n  columnDef!: Column;\r\n  callback!: FilterCallback;\r\n\r\n  /** Getter for the Filter Generic Params */\r\n  protected get filterParams(): any {\r\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};\r\n  }\r\n\r\n  /** Getter for the `filter` properties */\r\n  protected get filterProperties(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  /** Getter for the Column Filter */\r\n  get columnFilter(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  /** Getter for the Current Slider Values */\r\n  get currentValues(): number[] {\r\n    return this._currentValues;\r\n  }\r\n\r\n  /** Getter to know what would be the default operator when none is specified */\r\n  get defaultOperator(): OperatorType | OperatorString {\r\n    return this.gridOptions.defaultFilterRangeOperator || OperatorType.rangeInclusive;\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the JQuery UI Slider Options */\r\n  get sliderOptions(): JQueryUiSliderOption {\r\n    return this._sliderOptions || {};\r\n  }\r\n\r\n  /** Getter of the Operator to use when doing the filter comparing */\r\n  get operator(): OperatorType | OperatorString {\r\n    return this.columnFilter && this.columnFilter.operator || this.defaultOperator;\r\n  }\r\n\r\n  /** Setter for the filter operator */\r\n  set operator(operator: OperatorType | OperatorString) {\r\n    if (this.columnFilter) {\r\n      this.columnFilter.operator = operator;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];\r\n\r\n    // step 1, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(this.searchTerms);\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear(shouldTriggerQuery = true) {\r\n    if (this.$filterElm) {\r\n      this._clearFilterTriggered = true;\r\n      this._shouldTriggerQuery = shouldTriggerQuery;\r\n      this.searchTerms = [];\r\n      const lowestValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;\r\n      const highestValue = this.filterParams.hasOwnProperty('sliderEndValue') ? this.filterParams.sliderEndValue : DEFAULT_MAX_VALUE;\r\n      this._currentValues = [lowestValue, highestValue];\r\n      this.$filterElm.slider('values', [lowestValue, highestValue]);\r\n      if (!this.filterParams.hideSliderNumbers) {\r\n        this.renderSliderValues(lowestValue, highestValue);\r\n      }\r\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true, shouldTriggerQuery });\r\n      this.$filterContainerElm.removeClass('filled');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('change').remove();\r\n      this.$filterContainerElm.remove();\r\n    }\r\n    this.$filterElm = null;\r\n    this.$filterContainerElm = null;\r\n  }\r\n\r\n  /**\r\n   * Render both slider values (low/high) on screen\r\n   * @param lowestValue number\r\n   * @param highestValue number\r\n   */\r\n  renderSliderValues(lowestValue: number | string, highestValue: number | string) {\r\n    const columndId = this.columnDef && this.columnDef.id;\r\n    const lowerElm = document.querySelector(`.lowest-range-${columndId}`);\r\n    const highestElm = document.querySelector(`.highest-range-${columndId}`);\r\n    if (lowerElm && lowerElm.innerHTML) {\r\n      lowerElm.innerHTML = lowestValue.toString();\r\n    }\r\n    if (highestElm && highestElm.innerHTML) {\r\n      highestElm.innerHTML = highestValue.toString();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   * @params searchTerms\r\n   */\r\n  setValues(searchTerms: SearchTerm | SearchTerm[], operator?: OperatorType | OperatorString) {\r\n    if (searchTerms) {\r\n      let sliderValues: any[] = [];\r\n\r\n      // get the slider values, if it's a string with the \"..\", we'll do the split else we'll use the array of search terms\r\n      if (typeof searchTerms === 'string' || (Array.isArray(searchTerms) && typeof searchTerms[0] === 'string') && (searchTerms[0] as string).indexOf('..') > 0) {\r\n        sliderValues = (typeof searchTerms === 'string') ? [(searchTerms as string)] : (searchTerms[0] as string).split('..');\r\n      } else if (Array.isArray(searchTerms)) {\r\n        sliderValues = searchTerms;\r\n      }\r\n\r\n      if (Array.isArray(sliderValues) && sliderValues.length === 2) {\r\n        this.$filterElm.slider('values', sliderValues);\r\n        if (!this.filterParams.hideSliderNumbers) {\r\n          this.renderSliderValues(sliderValues[0], sliderValues[1]);\r\n        }\r\n      }\r\n    }\r\n\r\n    // set the operator when defined\r\n    this.operator = operator || this.defaultOperator;\r\n  }\r\n\r\n  //\r\n  // protected functions\r\n  // ------------------\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param searchTerm optional preset search terms\r\n   */\r\n  protected createDomElement(searchTerms?: SearchTerm | SearchTerm[]) {\r\n    if (this.columnFilter && this.columnFilter.filterOptions && (this.columnFilter.filterOptions.change || this.columnFilter.filterOptions.slide)) {\r\n      throw new Error(`[Angular-Slickgrid] You cannot override the \"change\" and/or the \"slide\" callback methods\r\n        since they are used in SliderRange Filter itself, however any other methods can be used for example the \"create\", \"start\", \"stop\" methods.`);\r\n    }\r\n    const fieldId = this.columnDef && this.columnDef.id;\r\n    const $headerElm = this.grid.getHeaderRowColumn(fieldId);\r\n    const minValue = (this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE) as number;\r\n    const maxValue = (this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE) as number;\r\n    const step = (this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP) as number;\r\n\r\n    let defaultStartValue: number = DEFAULT_MIN_VALUE;\r\n    let defaultEndValue: number = DEFAULT_MAX_VALUE;\r\n    if (Array.isArray(searchTerms) && searchTerms.length > 1) {\r\n      defaultStartValue = +searchTerms[0];\r\n      defaultEndValue = +searchTerms[1];\r\n    } else {\r\n      defaultStartValue = +(this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue);\r\n      defaultEndValue = +(this.filterParams.hasOwnProperty('sliderEndValue') ? this.filterParams.sliderEndValue : maxValue);\r\n    }\r\n\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $lowestSliderValueElm = $(`\r\n    <div class=\"input-group-addon input-group-prepend slider-range-value\">\r\n      <span class=\"input-group-text lowest-range-${fieldId}\">${defaultStartValue}</span>\r\n    </div>`);\r\n    const $highestSliderValueElm = $(`\r\n    <div class=\"input-group-addon input-group-append slider-range-value\">\r\n      <span class=\"input-group-text highest-range-${fieldId}\">${defaultEndValue}</span>\r\n    </div>`);\r\n    this.$filterElm = $(`<div class=\"filter-input filter-${fieldId}\"></div>`);\r\n    this.$filterContainerElm = $(`<div class=\"input-group form-control search-filter slider-range-container slider-values filter-${fieldId}\">`);\r\n\r\n    if (this.filterParams.hideSliderNumbers) {\r\n      this.$filterContainerElm.append(this.$filterElm);\r\n    } else {\r\n      this.$filterContainerElm.append($lowestSliderValueElm);\r\n      this.$filterContainerElm.append(this.$filterElm);\r\n      this.$filterContainerElm.append($highestSliderValueElm);\r\n    }\r\n\r\n    // if we are preloading searchTerms, we'll keep them for reference\r\n    this._currentValues = [defaultStartValue, defaultEndValue];\r\n\r\n    const definedOptions: JQueryUiSliderOption = {\r\n      range: true,\r\n      min: +minValue,\r\n      max: +maxValue,\r\n      step: +step,\r\n      values: [defaultStartValue, defaultEndValue],\r\n      change: (e: Event, ui: JQueryUiSliderResponse) => this.onValueChanged(e, ui),\r\n      slide: (e: Event, ui: JQueryUiSliderResponse) => {\r\n        const values = ui.values;\r\n        if (!this.filterParams.hideSliderNumbers && Array.isArray(values)) {\r\n          this.renderSliderValues(values[0], values[1]);\r\n        }\r\n      }\r\n    };\r\n\r\n    // merge options with optional user's custom options\r\n    this._sliderOptions = { ...definedOptions, ...(this.columnFilter.filterOptions as JQueryUiSliderOption) };\r\n    this.$filterElm.slider(this._sliderOptions);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (Array.isArray(searchTerms) && searchTerms.length > 0 && searchTerms[0] !== '') {\r\n      this.$filterContainerElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if (this.$filterContainerElm && typeof this.$filterContainerElm.appendTo === 'function') {\r\n      this.$filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return this.$filterElm;\r\n  }\r\n\r\n  /** On a value change event triggered */\r\n  protected onValueChanged(e: Event, ui: JQueryUiSliderResponse) {\r\n    const values = ui && Array.isArray(ui.values) ? ui.values : [];\r\n    const value = values.join('..');\r\n\r\n    if (this._clearFilterTriggered) {\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered, shouldTriggerQuery: this._shouldTriggerQuery });\r\n      this.$filterContainerElm.removeClass('filled');\r\n    } else {\r\n      value === '' ? this.$filterContainerElm.removeClass('filled') : this.$filterContainerElm.addClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: values, shouldTriggerQuery: this._shouldTriggerQuery });\r\n    }\r\n    // reset both flags for next use\r\n    this._clearFilterTriggered = false;\r\n    this._shouldTriggerQuery = true;\r\n  }\r\n}\r\n","import { Column, DelimiterType, FileType, GridOption, OperatorType, TreeDataOption } from './models/index';\r\nimport { Filters } from './filters/filters.index';\r\n\r\n/** Global Grid Options Defaults */\r\nexport const GlobalGridOptions: Partial<GridOption> = {\r\n  alwaysShowVerticalScroll: true,\r\n  autoEdit: false,\r\n  asyncEditorLoading: false,\r\n  autoFitColumnsOnFirstLoad: true,\r\n  autoResize: {\r\n    calculateAvailableSizeBy: 'window',\r\n    bottomPadding: 20,\r\n    minHeight: 180,\r\n    minWidth: 300,\r\n    sidePadding: 0\r\n  },\r\n  cellHighlightCssClass: 'slick-cell-modified',\r\n  checkboxSelector: {\r\n    cssClass: 'slick-cell-checkboxsel'\r\n  },\r\n  columnPicker: {\r\n    fadeSpeed: 0,\r\n    hideForceFitButton: false,\r\n    hideSyncResizeButton: true,\r\n    headerColumnValueExtractor: pickerHeaderColumnValueExtractor\r\n  },\r\n  cellMenu: {\r\n    autoAdjustDrop: true,\r\n    autoAlignSide: true,\r\n    hideCloseButton: true,\r\n    hideCommandSection: false,\r\n    hideOptionSection: false,\r\n  },\r\n  contextMenu: {\r\n    autoAdjustDrop: true,\r\n    autoAlignSide: true,\r\n    hideCloseButton: true,\r\n    hideClearAllGrouping: false,\r\n    hideCollapseAllGroups: false,\r\n    hideCommandSection: false,\r\n    hideCopyCellValueCommand: false,\r\n    hideExpandAllGroups: false,\r\n    hideExportCsvCommand: false,\r\n    hideExportExcelCommand: false,\r\n    hideExportTextDelimitedCommand: true,\r\n    hideMenuOnScroll: true,\r\n    hideOptionSection: false,\r\n    iconCopyCellValueCommand: 'fa fa-clone',\r\n    iconExportCsvCommand: 'fa fa-download',\r\n    iconExportExcelCommand: 'fa fa-file-excel-o text-success',\r\n    iconExportTextDelimitedCommand: 'fa fa-download',\r\n    width: 200,\r\n  },\r\n  customFooterOptions: {\r\n    dateFormat: 'yyyy-MM-dd, hh:mm aaaaa\\'m\\'',\r\n    hideRowSelectionCount: false,\r\n    hideTotalItemCount: false,\r\n    hideLastUpdateTimestamp: true,\r\n    footerHeight: 20,\r\n    leftContainerClass: 'col-xs-12 col-sm-5',\r\n    rightContainerClass: 'col-xs-6 col-sm-7',\r\n    metricSeparator: '|',\r\n    metricTexts: {\r\n      items: 'items',\r\n      itemsKey: 'ITEMS',\r\n      itemsSelected: 'items selected',\r\n      itemsSelectedKey: 'ITEMS_SELECTED',\r\n      of: 'of',\r\n      ofKey: 'OF',\r\n    }\r\n  },\r\n  dataView: {\r\n    syncGridSelection: true, // when enabled, this will preserve the row selection even after filtering/sorting/grouping\r\n    syncGridSelectionWithBackendService: false, // but disable it when using backend services\r\n  },\r\n  datasetIdPropertyName: 'id',\r\n  defaultColumnSortFieldId: 'id',\r\n  defaultFilter: Filters.input,\r\n  defaultBackendServiceFilterTypingDebounce: 500,\r\n  enableFilterTrimWhiteSpace: false, // do we want to trim white spaces on all Filters?\r\n  defaultFilterPlaceholder: '🔎︎',\r\n  defaultFilterRangeOperator: OperatorType.rangeInclusive,\r\n  editable: false,\r\n  enableAutoResize: true,\r\n  enableAutoSizeColumns: true,\r\n  enableCellNavigation: false,\r\n  enableColumnPicker: true,\r\n  enableColumnReorder: true,\r\n  enableColumnResizeOnDoubleClick: true,\r\n  enableContextMenu: true,\r\n  enableExcelExport: true, // Excel Export is the new default,\r\n  enableExport: false, // CSV/Text with Tab Delimited\r\n  enableGridMenu: true,\r\n  enableHeaderMenu: true,\r\n  enableEmptyDataWarningMessage: true,\r\n  emptyDataWarning: {\r\n    className: 'slick-empty-data-warning',\r\n    message: 'No data to display.',\r\n    messageKey: 'EMPTY_DATA_WARNING_MESSAGE',\r\n    hideFrozenLeftWarning: false,\r\n    hideFrozenRightWarning: false,\r\n    leftViewportMarginLeft: '40%',\r\n    rightViewportMarginLeft: '40%',\r\n    frozenLeftViewportMarginLeft: '0px',\r\n    frozenRightViewportMarginLeft: '40%',\r\n  },\r\n  enableMouseHoverHighlightRow: true,\r\n  enableSorting: true,\r\n  enableTextSelectionOnCells: true,\r\n  explicitInitialization: true,\r\n  excelExportOptions: {\r\n    addGroupIndentation: true,\r\n    exportWithFormatter: false,\r\n    filename: 'export',\r\n    format: FileType.xlsx,\r\n    groupingColumnHeaderTitle: 'Group By',\r\n    groupCollapsedSymbol: '⮞',\r\n    groupExpandedSymbol: '⮟',\r\n    groupingAggregatorRowText: '',\r\n    sanitizeDataExport: false,\r\n  },\r\n  exportOptions: {\r\n    delimiter: DelimiterType.comma,\r\n    exportWithFormatter: false,\r\n    filename: 'export',\r\n    format: FileType.csv,\r\n    groupingColumnHeaderTitle: 'Group By',\r\n    groupingAggregatorRowText: '',\r\n    sanitizeDataExport: false,\r\n    useUtf8WithBom: true\r\n  },\r\n  filterTypingDebounce: 0,\r\n  forceFitColumns: false,\r\n  frozenHeaderWidthCalcDifferential: 0,\r\n  gridMenu: {\r\n    commandLabels: {\r\n      clearAllFiltersCommandKey: 'CLEAR_ALL_FILTERS',\r\n      clearAllSortingCommandKey: 'CLEAR_ALL_SORTING',\r\n      clearFrozenColumnsCommandKey: 'CLEAR_PINNING',\r\n      exportCsvCommandKey: 'EXPORT_TO_CSV',\r\n      exportExcelCommandKey: 'EXPORT_TO_EXCEL',\r\n      exportTextDelimitedCommandKey: 'EXPORT_TO_TAB_DELIMITED',\r\n      refreshDatasetCommandKey: 'REFRESH_DATASET',\r\n      toggleFilterCommandKey: 'TOGGLE_FILTER_ROW',\r\n      togglePreHeaderCommandKey: 'TOGGLE_PRE_HEADER_ROW',\r\n    },\r\n    hideClearAllFiltersCommand: false,\r\n    hideClearAllSortingCommand: false,\r\n    hideClearFrozenColumnsCommand: true, // opt-in command\r\n    hideExportCsvCommand: false,\r\n    hideExportExcelCommand: false,\r\n    hideExportTextDelimitedCommand: true,\r\n    hideForceFitButton: false,\r\n    hideRefreshDatasetCommand: false,\r\n    hideSyncResizeButton: true,\r\n    hideToggleFilterCommand: false,\r\n    hideTogglePreHeaderCommand: false,\r\n    iconCssClass: 'fa fa-bars',\r\n    iconClearAllFiltersCommand: 'fa fa-filter text-danger',\r\n    iconClearAllSortingCommand: 'fa fa-unsorted text-danger',\r\n    iconClearFrozenColumnsCommand: 'fa fa-times',\r\n    iconExportCsvCommand: 'fa fa-download',\r\n    iconExportExcelCommand: 'fa fa-file-excel-o text-success',\r\n    iconExportTextDelimitedCommand: 'fa fa-download',\r\n    iconRefreshDatasetCommand: 'fa fa-refresh',\r\n    iconToggleFilterCommand: 'fa fa-random',\r\n    iconTogglePreHeaderCommand: 'fa fa-random',\r\n    menuWidth: 16,\r\n    resizeOnShowHeaderRow: true,\r\n    useClickToRepositionMenu: false, // use icon location to reposition instead\r\n    headerColumnValueExtractor: pickerHeaderColumnValueExtractor\r\n  },\r\n  headerMenu: {\r\n    autoAlign: true,\r\n    autoAlignOffset: 12,\r\n    minWidth: 140,\r\n    iconClearFilterCommand: 'fa fa-filter text-danger',\r\n    iconClearSortCommand: 'fa fa-unsorted',\r\n    iconFreezeColumns: 'fa fa-thumb-tack',\r\n    iconSortAscCommand: 'fa fa-sort-amount-asc',\r\n    iconSortDescCommand: 'fa fa-sort-amount-desc',\r\n    iconColumnHideCommand: 'fa fa-times',\r\n    iconColumnResizeByContentCommand: 'fa fa-arrows-h',\r\n    hideColumnResizeByContentCommand: false,\r\n    hideColumnHideCommand: false,\r\n    hideClearFilterCommand: false,\r\n    hideClearSortCommand: false,\r\n    hideFreezeColumnsCommand: true, // opt-in command\r\n    hideSortCommands: false\r\n  },\r\n  headerRowHeight: 35,\r\n  multiColumnSort: true,\r\n  numberedMultiColumnSort: true,\r\n  tristateMultiColumnSort: false,\r\n  sortColNumberInSeparateSpan: true,\r\n  suppressActiveCellChangeOnEdit: true,\r\n  pagination: {\r\n    pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\r\n    pageSize: 25,\r\n    totalItems: 0\r\n  },\r\n  // technically speaking the Row Detail requires the process & viewComponent but we'll ignore it just to set certain options\r\n  // @ts-ignore\r\n  rowDetailView: {\r\n    cssClass: 'detail-view-toggle',\r\n    panelRows: 1,\r\n    keyPrefix: '__',\r\n    useRowClick: false,\r\n    useSimpleViewportCalc: true,\r\n    saveDetailViewOnScroll: false,\r\n  },\r\n  rowHeight: 35,\r\n  topPanelHeight: 35,\r\n  translationNamespaceSeparator: ':',\r\n  resizeByContentOnlyOnFirstLoad: true,\r\n  resizeByContentOptions: {\r\n    alwaysRecalculateColumnWidth: false,\r\n    cellCharWidthInPx: 7.8,\r\n    cellPaddingWidthInPx: 14,\r\n    defaultRatioForStringType: 0.88,\r\n    formatterPaddingWidthInPx: 0,\r\n    maxItemToInspectCellContentWidth: 1000,\r\n    maxItemToInspectSingleColumnWidthByContent: 5000,\r\n    widthToRemoveFromExceededWidthReadjustment: 50,\r\n  },\r\n  treeDataOptions: {\r\n    exportIndentMarginLeft: 5,\r\n    exportIndentationLeadingChar: '͏͏͏͏͏͏͏͏͏·',\r\n  } as unknown as TreeDataOption\r\n};\r\n\r\n/**\r\n * Value Extractor for both ColumnPicker & GridMenu Picker\r\n * when using Column Header Grouping, we'll prefix the column group title\r\n * else we'll simply return the column name title\r\n */\r\nfunction pickerHeaderColumnValueExtractor(column: Column) {\r\n  const headerGroup = column && column.columnGroup || '';\r\n  if (headerGroup) {\r\n    return headerGroup + ' - ' + column.name;\r\n  }\r\n  return column && column.name || '';\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\n\r\nimport { GridOption } from './models/gridOption.interface';\r\nimport { GlobalGridOptions } from './global-grid-options';\r\n\r\n@Injectable()\r\nexport class SlickgridConfig {\r\n  options: Partial<GridOption>;\r\n\r\n  constructor() {\r\n    this.options = GlobalGridOptions;\r\n  }\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Filter } from '../models/filter.interface';\r\nimport { ColumnFilter } from '../models';\r\nimport { SlickgridConfig } from '../slickgrid-config';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CollectionService } from '../services/collection.service';\r\n\r\n@Injectable()\r\nexport class FilterFactory {\r\n  /**\r\n   * The options from the SlickgridConfig\r\n   */\r\n  private _options: any;\r\n\r\n  constructor(private readonly config: SlickgridConfig, @Optional() private readonly translate: TranslateService, private readonly collectionService: CollectionService) {\r\n    this._options = this.config.options;\r\n  }\r\n\r\n  // Uses the User model to create a new User\r\n  createFilter(columnFilter: ColumnFilter | undefined): Filter | undefined {\r\n    let filter: Filter | undefined;\r\n\r\n    if (columnFilter && columnFilter.model) {\r\n      filter = typeof columnFilter.model === 'function' ? new columnFilter.model(this.translate, this.collectionService) : columnFilter.model;\r\n    }\r\n\r\n    // fallback to the default filter\r\n    if (!filter && this._options.defaultFilter) {\r\n      filter = new this._options.defaultFilter(this.translate, this.collectionService);\r\n    }\r\n\r\n    return filter;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { dequal } from 'dequal/lite';\r\nimport { isObservable, Subject } from 'rxjs';\r\n\r\nimport {\r\n  Column,\r\n  ColumnFilters,\r\n  CurrentFilter,\r\n  EmitterType,\r\n  FieldType,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallbackArg,\r\n  FilterChangedArgs,\r\n  FilterConditionOption,\r\n  GridOption,\r\n  KeyCode,\r\n  OperatorString,\r\n  OperatorType,\r\n  SearchColumnFilter,\r\n  SearchTerm,\r\n  SlickEvent,\r\n  SlickEventHandler,\r\n} from './../models/index';\r\nimport { executeBackendCallback, refreshBackendDataset } from './backend-utilities';\r\nimport { deepCopy, getDescendantProperty, mapOperatorByFieldType, sanitizeHtmlToText } from './utilities';\r\nimport { FilterConditions, getParsedSearchTermsByFieldType } from './../filter-conditions';\r\nimport { FilterFactory } from '../filters/filterFactory';\r\nimport { SharedService } from './shared.service';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\ndeclare const $: any;\r\n\r\n@Injectable()\r\nexport class FilterService {\r\n  protected _eventHandler: SlickEventHandler;\r\n  protected _isFilterFirstRender = true;\r\n  protected _firstColumnIdRendered = '';\r\n  protected _filtersMetadata: Array<Filter> = [];\r\n  protected _columnFilters: ColumnFilters = {};\r\n  protected _grid: any;\r\n  protected _onSearchChange: SlickEvent | null;\r\n  protected _tmpPreFilteredData?: number[];\r\n  protected httpCancelRequests$: Subject<void> = new Subject<void>(); // this will be used to cancel any pending http request\r\n  onFilterChanged = new Subject<CurrentFilter[]>();\r\n  onFilterCleared = new Subject<boolean>();\r\n\r\n  constructor(protected filterFactory: FilterFactory, protected sharedService: SharedService) {\r\n    this._eventHandler = new Slick.EventHandler();\r\n    this._onSearchChange = new Slick.Event();\r\n  }\r\n\r\n  /** Getter of the SlickGrid Event Handler */\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  /** Getter to know if the filter was already rendered or if it was its first time render */\r\n  get isFilterFirstRender(): boolean {\r\n    return this._isFilterFirstRender;\r\n  }\r\n\r\n  /** Getter of the SlickGrid Event Handler */\r\n  get onSearchChange(): SlickEvent | null {\r\n    return this._onSearchChange;\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  protected get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  protected get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  /** Getter of SlickGrid DataView object */\r\n  protected get _dataView(): any {\r\n    return (this._grid && this._grid.getData) ? this._grid.getData() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Service\r\n   * @param grid\r\n   */\r\n  init(grid: any): void {\r\n    this._grid = grid;\r\n\r\n    if (this._gridOptions && this._gridOptions.enableTreeData && this._gridOptions.treeDataOptions) {\r\n      this._grid.setSortColumns([{ columnId: this._gridOptions.treeDataOptions.columnId, sortAsc: true }]);\r\n    }\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    if (this._eventHandler && this._eventHandler.unsubscribeAll) {\r\n      this._eventHandler.unsubscribeAll();\r\n    }\r\n    if (isObservable(this.httpCancelRequests$)) {\r\n      this.httpCancelRequests$.next(); // this cancels any pending http requests\r\n      this.httpCancelRequests$.complete();\r\n    }\r\n    this.disposeColumnFilters();\r\n    this._onSearchChange = null;\r\n  }\r\n\r\n  /**\r\n   * Dispose of the filters, since it's a singleton, we don't want to affect other grids with same columns\r\n   */\r\n  disposeColumnFilters() {\r\n    // we need to loop through all columnFilters and delete them 1 by 1\r\n    // only trying to make columnFilter an empty (without looping) would not trigger a dataset change\r\n    if (typeof this._columnFilters === 'object') {\r\n      for (const columnId in this._columnFilters) {\r\n        if (columnId && this._columnFilters[columnId]) {\r\n          delete this._columnFilters[columnId];\r\n        }\r\n      }\r\n    }\r\n\r\n    // also destroy each Filter instances\r\n    if (Array.isArray(this._filtersMetadata)) {\r\n      this._filtersMetadata.forEach((filter) => {\r\n        if (filter && filter.destroy) {\r\n          filter.destroy();\r\n        }\r\n      });\r\n    }\r\n    this._filtersMetadata = [];\r\n  }\r\n\r\n  /**\r\n   * When clearing or disposing of all filters, we need to loop through all columnFilters and delete them 1 by 1\r\n   * only trying to make columnFilter an empty (without looping) would not trigger a dataset change\r\n   */\r\n  resetColumnFilters() {\r\n    if (typeof this._columnFilters === 'object') {\r\n      for (const columnId in this._columnFilters) {\r\n        if (columnId && this._columnFilters[columnId]) {\r\n          delete this._columnFilters[columnId];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bind a backend filter hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   */\r\n  bindBackendOnFilter(grid: any) {\r\n    this._filtersMetadata = [];\r\n\r\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\r\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, this.handleBackendOnSearchChange.bind(this));\r\n\r\n    // subscribe to the SlickGrid event and call the backend execution\r\n    if (this._onSearchChange) {\r\n      this._eventHandler.subscribe(this._onSearchChange, this.onBackendFilterChange.bind(this));\r\n    }\r\n  }\r\n\r\n  handleBackendOnSearchChange(_e: KeyboardEvent, args: any) {\r\n    // firstColumnIdRendered is null at first, so if it changes to being filled and equal, then we would know that it was already rendered\r\n    // this is to avoid rendering the filter twice (only the Select Filter for now), rendering it again also clears the filter which has unwanted side effect\r\n    if (args.column.id === this._firstColumnIdRendered) {\r\n      this._isFilterFirstRender = false;\r\n    }\r\n    this.addFilterTemplateToHeaderRow(undefined, args, this._isFilterFirstRender);\r\n    if (this._firstColumnIdRendered === '') {\r\n      this._firstColumnIdRendered = args.column.id;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bind a local filter hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param dataView\r\n   */\r\n  bindLocalOnFilter(grid: any) {\r\n    this._filtersMetadata = [];\r\n\r\n    this._dataView.setFilterArgs({ columnFilters: this._columnFilters, grid: this._grid, dataView: this._dataView });\r\n    this._dataView.setFilter(this.customLocalFilter.bind(this));\r\n\r\n    // bind any search filter change (e.g. input filter input change event)\r\n    if (this._onSearchChange) {\r\n      this._eventHandler.subscribe(this._onSearchChange, this.handleLocalOnSearchChange.bind(this));\r\n\r\n      // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\r\n      this._eventHandler.subscribe(grid.onHeaderRowCellRendered, this.addFilterTemplateToHeaderRow.bind(this));\r\n    }\r\n  }\r\n\r\n  handleLocalOnSearchChange(_e: KeyboardEvent, args: any) {\r\n    const isGridWithTreeData = this._gridOptions && this._gridOptions.enableTreeData || false;\r\n    const isClearFilterEvent = args?.clearFilterTriggered ?? false;\r\n\r\n    // When using Tree Data, we need to do it in 2 steps\r\n    // step 1. we need to prefilter (search) the data prior, the result will be an array of IDs which are the node(s) and their parent nodes when necessary.\r\n    // step 2. calling the DataView.refresh() is what triggers the final filtering, with \"customLocalFilter()\" which will decide which rows should persist\r\n    if (isGridWithTreeData) {\r\n      this._tmpPreFilteredData = this.preFilterTreeData(this._dataView.getItems(), this._columnFilters);\r\n    }\r\n\r\n    const columnId = args.columnId;\r\n    if (columnId !== null) {\r\n      this._dataView.refresh();\r\n    }\r\n\r\n    // emit an onFilterChanged event when it's not called by a clear filter\r\n    if (!isClearFilterEvent) {\r\n      this.emitFilterChanged(EmitterType.local);\r\n    }\r\n  }\r\n\r\n  clearFilterByColumnId(event: Event, columnId: number | string) {\r\n    const isBackendApi = this._gridOptions?.backendServiceApi ?? false;\r\n    const emitter = isBackendApi ? EmitterType.remote : EmitterType.local;\r\n\r\n    // get current column filter before clearing, this allow us to know if the filter was empty prior to calling the clear filter\r\n    const currentFilterColumnIds = Object.keys(this._columnFilters);\r\n    let currentColFilter: string | undefined;\r\n    if (Array.isArray(currentFilterColumnIds)) {\r\n      currentColFilter = currentFilterColumnIds.find(name => name === `${columnId}`);\r\n    }\r\n\r\n    // find the filter object and call its clear method with true (the argument tells the method it was called by a clear filter)\r\n    const colFilter: Filter | undefined = this._filtersMetadata.find((filter: Filter) => filter.columnDef.id === columnId);\r\n    if (colFilter && colFilter.clear) {\r\n      colFilter.clear(true);\r\n    }\r\n\r\n    // when using a backend service, we need to manually trigger a filter change but only if the filter was previously filled\r\n    if (isBackendApi) {\r\n      if (currentColFilter !== undefined) {\r\n        this.onBackendFilterChange(event as KeyboardEvent, { grid: this._grid, columnFilters: this._columnFilters });\r\n      }\r\n    }\r\n\r\n    // emit an event when filter is cleared\r\n    this.emitFilterChanged(emitter);\r\n  }\r\n\r\n  /** Clear the search filters (below the column titles) */\r\n  clearFilters(triggerChange = true) {\r\n    this._filtersMetadata.forEach((filter: Filter) => {\r\n      if (filter && filter.clear) {\r\n        // clear element but don't trigger individual clear change,\r\n        // we'll do 1 trigger for all filters at once afterward\r\n        filter.clear(false);\r\n      }\r\n    });\r\n\r\n    // also reset the columnFilters object and remove any filters from the object\r\n    this.resetColumnFilters();\r\n\r\n    // also remove any search terms directly on each column definitions\r\n    if (Array.isArray(this._columnDefinitions)) {\r\n      this._columnDefinitions.forEach((columnDef: Column) => {\r\n        if (columnDef.filter?.searchTerms) {\r\n          delete columnDef.filter.searchTerms;\r\n        }\r\n      });\r\n    }\r\n\r\n    // we also need to refresh the dataView and optionally the grid (it's optional since we use DataView)\r\n    if (this._dataView && this._grid) {\r\n      this._dataView.refresh();\r\n      this._grid.invalidate();\r\n    }\r\n\r\n    // when using backend service, we need to query only once so it's better to do it here\r\n    const backendApi = this._gridOptions && this._gridOptions.backendServiceApi;\r\n    if (backendApi && triggerChange) {\r\n      const callbackArgs = { clearFilterTriggered: true, shouldTriggerQuery: triggerChange, grid: this._grid, columnFilters: this._columnFilters };\r\n      const queryResponse = backendApi.service.processOnFilterChanged(undefined, callbackArgs as FilterChangedArgs);\r\n      if (queryResponse instanceof Promise && queryResponse.then) {\r\n        // @deprecated, processOnFilterChanged in the future should be returned as a query string NOT as a Promise\r\n        console.warn(`[Angular-Slickgrid] please note that the \"processOnFilterChanged\" from your Backend Service, should now return a string instead of a Promise.\r\n          Returning a Promise will be deprecated in the future.`);\r\n        queryResponse.then((query: string) => {\r\n          const totalItems = this._gridOptions && this._gridOptions.pagination && this._gridOptions.pagination.totalItems;\r\n          executeBackendCallback(backendApi, query, callbackArgs, new Date(), totalItems, this.emitFilterChanged.bind(this));\r\n        });\r\n      } else {\r\n        const query = queryResponse as string;\r\n        const totalItems = this._gridOptions && this._gridOptions.pagination && this._gridOptions.pagination.totalItems;\r\n        executeBackendCallback(backendApi, query, callbackArgs, new Date(), totalItems, this.emitFilterChanged.bind(this));\r\n      }\r\n    }\r\n\r\n    // emit an event when filters are all cleared\r\n    if (triggerChange) {\r\n      this.onFilterCleared.next(true);\r\n    }\r\n  }\r\n\r\n  /** Local Grid Filter search */\r\n  customLocalFilter(item: any, args: any): boolean {\r\n    const dataView = args && args.dataView;\r\n    const grid = args && args.grid;\r\n    const isGridWithTreeData = this._gridOptions && this._gridOptions.enableTreeData || false;\r\n    const columnFilters = args && args.columnFilters || {};\r\n    let treeDataOptions;\r\n\r\n    // when the column is a Tree Data structure and the parent is collapsed, we won't go further and just continue with next row\r\n    // so we always run this check even when there are no filter search, the reason is because the user might click on the expand/collapse\r\n    if (isGridWithTreeData && this._gridOptions && this._gridOptions.treeDataOptions) {\r\n      treeDataOptions = this._gridOptions.treeDataOptions;\r\n      const collapsedPropName = treeDataOptions.collapsedPropName || '__collapsed';\r\n      const parentPropName = treeDataOptions.parentPropName || '__parentId';\r\n      const dataViewIdIdentifier = this._gridOptions.datasetIdPropertyName || 'id';\r\n\r\n      if (item[parentPropName] !== null) {\r\n        let parent = this._dataView.getItemById(item[parentPropName]);\r\n        while (parent) {\r\n          if (parent[collapsedPropName]) {\r\n            return false; // don't display any row that have their parent collapsed\r\n          }\r\n          parent = this._dataView.getItemById(parent[parentPropName]);\r\n        }\r\n      }\r\n\r\n      // filter out any row items that aren't part of our pre-processed \"preFilterTreeData()\" result\r\n      if (Array.isArray(this._tmpPreFilteredData)) {\r\n        return this._tmpPreFilteredData.includes(item[dataViewIdIdentifier]); // return true when found, false otherwise\r\n      }\r\n    } else {\r\n      if (typeof columnFilters === 'object') {\r\n        for (const columnId of Object.keys(columnFilters)) {\r\n          const columnFilter = columnFilters[columnId] as SearchColumnFilter;\r\n          const conditionOptions = this.preProcessFilterConditionOnDataContext(item, columnFilter, grid);\r\n\r\n          if (typeof conditionOptions === 'boolean') {\r\n            return conditionOptions;\r\n          }\r\n\r\n          let parsedSearchTerms = columnFilter && columnFilter.parsedSearchTerms; // parsed term could a single value or an array of values\r\n\r\n          // in the rare case that it's empty (it can happen when creating an external grid global search)\r\n          // then get the parsed terms, once it's filled it typically won't ask for it anymore\r\n          if (parsedSearchTerms === undefined) {\r\n            parsedSearchTerms = getParsedSearchTermsByFieldType(columnFilter.searchTerms, columnFilter.columnDef.type || FieldType.string); // parsed term could a single value or an array of values\r\n            if (parsedSearchTerms !== undefined) {\r\n              columnFilter.parsedSearchTerms = parsedSearchTerms;\r\n            }\r\n          }\r\n\r\n          // execute the filtering conditions check (all cell values vs search term(s))\r\n          if (!FilterConditions.executeFilterConditionTest(conditionOptions as FilterConditionOption, parsedSearchTerms)) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // if it reaches here, that means the row is valid and passed all filter\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Loop through each form input search filter and parse their searchTerms,\r\n   * for example a CompoundDate Filter will be parsed as a Moment object.\r\n   * Also if we are dealing with a text filter input,\r\n   * an operator can optionally be part of the filter itself and we need to extract it from there,\r\n   * for example a filter of \"John*\" will be analyzed as { operator: StartsWith, searchTerms: ['John'] }\r\n   * @param inputSearchTerms - filter search terms\r\n   * @param columnFilter - column filter object (the object properties represent each column id and the value is the filter metadata)\r\n   * @returns FilterConditionOption\r\n   */\r\n  parseFormInputFilterConditions(inputSearchTerms: SearchTerm[] | undefined, columnFilter: Omit<SearchColumnFilter, 'searchTerms'>): Omit<FilterConditionOption, 'cellValue'> {\r\n    const searchValues: SearchTerm[] = deepCopy(inputSearchTerms) || [];\r\n    let fieldSearchValue = (Array.isArray(searchValues) && searchValues.length === 1) ? searchValues[0] : '';\r\n    const columnDef = columnFilter.columnDef;\r\n    const fieldType = columnDef.filter?.type ?? columnDef.type ?? FieldType.string;\r\n\r\n    let matches = null;\r\n    if (fieldType !== FieldType.object) {\r\n      fieldSearchValue = (fieldSearchValue === undefined || fieldSearchValue === null) ? '' : `${fieldSearchValue}`; // make sure it's a string\r\n      matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])?([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n    }\r\n\r\n    let operator = matches?.[1] || columnFilter.operator;\r\n    const searchTerm = matches?.[2] || '';\r\n    const inputLastChar = matches?.[3] || (operator === '*z' ? '*' : '');\r\n\r\n    if (typeof fieldSearchValue === 'string') {\r\n      fieldSearchValue = fieldSearchValue.replace(`'`, `''`); // escape any single quotes by doubling them\r\n      if (operator === '*' || operator === '*z') {\r\n        operator = OperatorType.endsWith;\r\n      } else if (operator === 'a*' || inputLastChar === '*') {\r\n        operator = OperatorType.startsWith;\r\n      }\r\n    }\r\n\r\n    // if search value has a regex match we will only keep the value without the operator\r\n    // in this case we need to overwrite the returned search values to truncate operator from the string search\r\n    if (Array.isArray(matches) && matches.length >= 1 && (Array.isArray(searchValues) && searchValues.length === 1)) {\r\n      searchValues[0] = searchTerm;\r\n    }\r\n\r\n    return {\r\n      dataKey: columnDef.dataKey,\r\n      fieldType,\r\n      searchTerms: searchValues || [],\r\n      operator: operator as OperatorString,\r\n      searchInputLastChar: inputLastChar,\r\n      filterSearchType: columnDef.filterSearchType,\r\n      defaultFilterRangeOperator: this._gridOptions.defaultFilterRangeOperator,\r\n    } as FilterConditionOption;\r\n  }\r\n\r\n  /**\r\n   * PreProcess the filter(s) condition(s) on each item data context, the result might be a boolean or FilterConditionOption object.\r\n   * It will be a boolean when the searchTerms are invalid or the column is not found (it so it will return True and the item won't be filtered out from the grid)\r\n   * or else a FilterConditionOption object with the necessary info for the test condition needs to be processed in a further stage.\r\n   * @param item - item data context\r\n   * @param columnFilter - column filter object (the object properties represent each column id and the value is the filter metadata)\r\n   * @param grid - SlickGrid object\r\n   * @returns FilterConditionOption or boolean\r\n   */\r\n  preProcessFilterConditionOnDataContext(item: any, columnFilter: SearchColumnFilter, grid: any): FilterConditionOption | boolean {\r\n    const columnDef = columnFilter.columnDef;\r\n    const columnId = columnFilter.columnId;\r\n    let columnIndex = grid.getColumnIndex(columnId) as number;\r\n\r\n    // it might be a hidden column, if so it won't be part of the getColumns (because it could be hidden via setColumns())\r\n    // when that happens we can try to get the column definition from all defined columns\r\n    if (!columnDef && this.sharedService && Array.isArray(this.sharedService.allColumns)) {\r\n      columnIndex = this.sharedService.allColumns.findIndex(col => col.field === columnId);\r\n    }\r\n\r\n    // if we still don't have a column definition then we should return then row anyway (true)\r\n    if (!columnDef) {\r\n      return true;\r\n    }\r\n\r\n    // Row Detail View plugin, if the row is padding we just get the value we're filtering on from it's parent\r\n    if (this._gridOptions.enableRowDetailView) {\r\n      const metadataPrefix = this._gridOptions.rowDetailView && this._gridOptions.rowDetailView.keyPrefix || '__';\r\n      if (item[`${metadataPrefix}isPadding`] && item[`${metadataPrefix}parent`]) {\r\n        item = item[`${metadataPrefix}parent`];\r\n      }\r\n    }\r\n\r\n    let queryFieldName = (columnDef.filter && columnDef.filter.queryField) || columnDef.queryFieldFilter || columnDef.queryField || columnDef.field || '';\r\n    if (typeof columnDef.queryFieldNameGetterFn === 'function') {\r\n      queryFieldName = columnDef.queryFieldNameGetterFn(item);\r\n    }\r\n    const fieldType = (columnDef.filter && columnDef.filter.type) || columnDef.type || FieldType.string;\r\n    let cellValue = item[queryFieldName];\r\n\r\n    // when item is a complex object (dot \".\" notation), we need to filter the value contained in the object tree\r\n    if (queryFieldName && queryFieldName.indexOf('.') >= 0) {\r\n      cellValue = getDescendantProperty(item, queryFieldName);\r\n    }\r\n\r\n    const operator = columnFilter.operator;\r\n    const searchValues = columnFilter.searchTerms || [];\r\n\r\n    // no need to query if search value is empty or if the search value is in fact equal to the operator\r\n    if (!searchValues || (Array.isArray(searchValues) && (searchValues.length === 0 || searchValues.length === 1 && operator === searchValues[0]))) {\r\n      return true;\r\n    }\r\n\r\n    // filter search terms should always be string type (even though we permit the end user to input numbers)\r\n    // so make sure each term are strings, if user has some default search terms, we will cast them to string\r\n    if (searchValues && Array.isArray(searchValues) && fieldType !== FieldType.object) {\r\n      for (let k = 0, ln = searchValues.length; k < ln; k++) {\r\n        // make sure all search terms are strings\r\n        searchValues[k] = ((searchValues[k] === undefined || searchValues[k] === null) ? '' : searchValues[k]) + '';\r\n      }\r\n    }\r\n\r\n    // when using localization (i18n), we should use the formatter output to search as the new cell value\r\n    // we will also sanitize/remove HTML tags out of the text (which might be added by multiple-select)\r\n    if (columnDef && columnDef.params && columnDef.params.useFormatterOuputToFilter) {\r\n      const dataView = grid.getData();\r\n      const idPropName = this._gridOptions.datasetIdPropertyName || 'id';\r\n      const rowIndex = (dataView && typeof dataView.getIdxById === 'function') ? dataView.getIdxById(item[idPropName]) : 0;\r\n      cellValue = (columnDef && typeof columnDef.formatter === 'function') ? columnDef.formatter(rowIndex || 0, columnIndex, cellValue, columnDef, item, this._grid) : '';\r\n      cellValue = sanitizeHtmlToText(cellValue); // also remove any html tag\r\n    }\r\n\r\n    // make sure cell value is always a string\r\n    if (typeof cellValue === 'number') {\r\n      cellValue = cellValue.toString();\r\n    }\r\n\r\n    return {\r\n      dataKey: columnDef.dataKey,\r\n      fieldType,\r\n      searchTerms: searchValues,\r\n      cellValue,\r\n      operator: operator as OperatorString,\r\n      searchInputLastChar: columnFilter.searchInputLastChar,\r\n      filterSearchType: columnDef.filterSearchType,\r\n      defaultFilterRangeOperator: this._gridOptions.defaultFilterRangeOperator,\r\n    } as FilterConditionOption;\r\n  }\r\n\r\n  /**\r\n   * When using Tree Data, we need to prefilter (search) the data prior, the result will be an array of IDs which are the node(s) and their parent nodes when necessary.\r\n   * This will then be passed to the DataView setFilter(customLocalFilter), which will itself loop through the list of IDs and display/hide the row if found that array of IDs\r\n   * We do this in 2 steps so that we can still use the DataSet setFilter()\r\n   */\r\n  preFilterTreeData(inputArray: any[], columnFilters: ColumnFilters) {\r\n    const treeDataOptions = this._gridOptions && this._gridOptions.treeDataOptions;\r\n    const parentPropName = treeDataOptions && treeDataOptions.parentPropName || '__parentId';\r\n    const dataViewIdIdentifier = this._gridOptions && this._gridOptions.datasetIdPropertyName || 'id';\r\n\r\n    const treeObj = {};\r\n    const filteredChildrenAndParents: any[] = [];\r\n\r\n    if (Array.isArray(inputArray)) {\r\n      for (let i = 0; i < inputArray.length; i++) {\r\n        (treeObj as any)[inputArray[i][dataViewIdIdentifier]] = inputArray[i];\r\n        // as the filtered data is then used again as each subsequent letter\r\n        // we need to delete the .__used property, otherwise the logic below\r\n        // in the while loop (which checks for parents) doesn't work:\r\n        delete (treeObj as any)[inputArray[i][dataViewIdIdentifier]].__used;\r\n      }\r\n\r\n      // Step 1. prepare search filter by getting their parsed value(s), for example if it's a date filter then parse it to a Moment object\r\n      // loop through all column filters once and get parsed filter search value then save a reference in the columnFilter itself\r\n      // it is much more effective to do it outside and prior to Step 2 so that we don't re-parse search filter for no reason while checking every row\r\n      for (const columnId of Object.keys(columnFilters)) {\r\n        const columnFilter = columnFilters[columnId] as SearchColumnFilter;\r\n        const searchValues: SearchTerm[] = (columnFilter && columnFilter.searchTerms) ? deepCopy(columnFilter.searchTerms) : [];\r\n\r\n        const inputSearchConditions = this.parseFormInputFilterConditions(searchValues, columnFilter);\r\n\r\n        const columnDef = columnFilter.columnDef;\r\n        const fieldType = columnDef && columnDef.filter && columnDef.filter.type || columnDef && columnDef.type || FieldType.string;\r\n        const parsedSearchTerms = getParsedSearchTermsByFieldType(inputSearchConditions.searchTerms, fieldType); // parsed term could a single value or an array of values\r\n        if (parsedSearchTerms !== undefined) {\r\n          columnFilter.parsedSearchTerms = parsedSearchTerms;\r\n        }\r\n      }\r\n\r\n      // Step 2. loop through every item data context to execute filter condition check\r\n      for (let i = 0; i < inputArray.length; i++) {\r\n        const item = inputArray[i];\r\n        let matchFilter = true; // valid until proven otherwise\r\n\r\n        // loop through all column filters and execute filter condition(s)\r\n        for (const columnId of Object.keys(columnFilters)) {\r\n          const columnFilter = columnFilters[columnId] as SearchColumnFilter;\r\n          const conditionOptionResult = this.preProcessFilterConditionOnDataContext(item, columnFilter, this._grid);\r\n\r\n          if (conditionOptionResult) {\r\n            const parsedSearchTerms = columnFilter && columnFilter.parsedSearchTerms; // parsed term could a single value or an array of values\r\n            const conditionResult = (typeof conditionOptionResult === 'boolean') ? conditionOptionResult : FilterConditions.executeFilterConditionTest(conditionOptionResult as FilterConditionOption, parsedSearchTerms);\r\n            if (conditionResult) {\r\n              // don't return true since we still need to check other keys in columnFilters\r\n              continue;\r\n            }\r\n          }\r\n          matchFilter = false;\r\n          continue;\r\n        }\r\n\r\n        // build an array from the matched filters, anything valid from filter condition\r\n        // will be pushed to the filteredChildrenAndParents array\r\n        if (matchFilter) {\r\n          const len = filteredChildrenAndParents.length;\r\n          // add child (id):\r\n          filteredChildrenAndParents.splice(len, 0, item[dataViewIdIdentifier]);\r\n          let parent = (treeObj as any)[item[parentPropName]] || false;\r\n          while (parent) {\r\n            // only add parent (id) if not already added:\r\n            parent.__used || filteredChildrenAndParents.splice(len, 0, parent[dataViewIdIdentifier]);\r\n            // mark each parent as used to not use them again later:\r\n            (treeObj as any)[parent[dataViewIdIdentifier]].__used = true;\r\n            // try to find parent of the current parent, if exists:\r\n            parent = (treeObj as any)[parent[parentPropName]] || false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return filteredChildrenAndParents;\r\n  }\r\n\r\n  getColumnFilters() {\r\n    return this._columnFilters;\r\n  }\r\n\r\n  getFiltersMetadata() {\r\n    return this._filtersMetadata;\r\n  }\r\n\r\n  getCurrentLocalFilters(): CurrentFilter[] {\r\n    const currentFilters: CurrentFilter[] = [];\r\n    if (this._columnFilters) {\r\n      for (const colId of Object.keys(this._columnFilters)) {\r\n        const columnFilter = this._columnFilters[colId];\r\n        const filter = { columnId: colId || '' } as CurrentFilter;\r\n        const columnDef = this.sharedService.allColumns.find(col => col.id === filter.columnId);\r\n        const emptySearchTermReturnAllValues = columnDef?.filter?.emptySearchTermReturnAllValues ?? true;\r\n\r\n        if (columnFilter && columnFilter.searchTerms) {\r\n          filter.searchTerms = columnFilter.searchTerms;\r\n        }\r\n        if (columnFilter.operator) {\r\n          filter.operator = columnFilter.operator;\r\n        }\r\n        if (Array.isArray(filter.searchTerms) && filter.searchTerms.length > 0 && (!emptySearchTermReturnAllValues || filter.searchTerms[0] !== '')) {\r\n          currentFilters.push(filter);\r\n        }\r\n      }\r\n    }\r\n    return currentFilters;\r\n  }\r\n\r\n  /**\r\n   * A simple function that will be called to emit a change when a filter changes.\r\n   * Other services, like Pagination, can then subscribe to it.\r\n   * @param caller\r\n   */\r\n  emitFilterChanged(caller: EmitterType) {\r\n    if (caller === EmitterType.remote && this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      let currentFilters: CurrentFilter[] = [];\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentFilters) {\r\n        currentFilters = backendService.getCurrentFilters() as CurrentFilter[];\r\n      }\r\n      this.onFilterChanged.next(currentFilters);\r\n    } else if (caller === EmitterType.local) {\r\n      this.onFilterChanged.next(this.getCurrentLocalFilters());\r\n    }\r\n  }\r\n\r\n  async onBackendFilterChange(event: KeyboardEvent, args: any) {\r\n    if (!args || !args.grid) {\r\n      throw new Error('Something went wrong when trying to bind the \"onBackendFilterChange(event, args)\" function, it seems that \"args\" is not populated correctly');\r\n    }\r\n\r\n    const backendApi = this._gridOptions.backendServiceApi;\r\n\r\n    if (!backendApi || !backendApi.process || !backendApi.service) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    // keep start time & end timestamps & return it after process execution\r\n    const startTime = new Date();\r\n\r\n    // run a preProcess callback if defined\r\n    if (backendApi.preProcess) {\r\n      backendApi.preProcess();\r\n    }\r\n\r\n    // query backend, except when it's called by a ClearFilters then we won't\r\n    if (args?.shouldTriggerQuery) {\r\n      const query = await backendApi.service.processOnFilterChanged(event, args);\r\n      const totalItems = this._gridOptions && this._gridOptions.pagination && this._gridOptions.pagination.totalItems || 0;\r\n      executeBackendCallback(backendApi, query, args, startTime, totalItems, this.emitFilterChanged.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When user passes an array of preset filters, we need to pre-populate each column filter searchTerm(s)\r\n   * The process is to loop through the preset filters array, find the associated column from columnDefinitions and fill in the filter object searchTerm(s)\r\n   * This is basically the same as if we would manually add searchTerm(s) to a column filter object in the column definition, but we do it programmatically.\r\n   * At the end of the day, when creating the Filter (DOM Element), it will use these searchTerm(s) so we can take advantage of that without recoding each Filter type (DOM element)\r\n   */\r\n  populateColumnFilterSearchTermPresets(filters: CurrentFilter[]) {\r\n    if (Array.isArray(filters)) {\r\n      this._columnDefinitions.forEach((columnDef: Column) => {\r\n        // clear any columnDef searchTerms before applying Presets\r\n        if (columnDef.filter && columnDef.filter.searchTerms) {\r\n          delete columnDef.filter.searchTerms;\r\n        }\r\n\r\n        // from each presets, we will find the associated columnDef and apply the preset searchTerms & operator if there is\r\n        const columnPreset = filters.find((presetFilter: CurrentFilter) => presetFilter.columnId === columnDef.id);\r\n        if (columnPreset && columnPreset.searchTerms && Array.isArray(columnPreset.searchTerms)) {\r\n          columnDef.filter = columnDef.filter || {};\r\n          columnDef.filter.operator = columnPreset.operator || columnDef.filter.operator || '';\r\n          columnDef.filter.searchTerms = columnPreset.searchTerms;\r\n        }\r\n      });\r\n\r\n      // when we have a Filter Presets on a Tree Data View grid, we need to call the pre-filtering of tree data\r\n      this.refreshTreeDataFilters();\r\n    }\r\n    return this._columnDefinitions;\r\n  }\r\n\r\n  /**\r\n   * when we have a Filter Presets on a Tree Data View grid, we need to call the pre-filtering of tree data\r\n   * we need to do this because Tree Data is the only type of grid that requires a pre-filter (preFilterTreeData) to be executed before the final filtering\r\n   * @param {Array<Object>} [items] - optional flat array of parent/child items to use while redoing the full sort & refresh\r\n   */\r\n   refreshTreeDataFilters(items?: any[]) {\r\n    const inputItems = items ?? this._dataView.getItems();\r\n    if (this._dataView && this._gridOptions?.enableTreeData) {\r\n      this._tmpPreFilteredData = this.preFilterTreeData(inputItems, this._columnFilters);\r\n      this._dataView.refresh(); // and finally this refresh() is what triggers a DataView filtering check\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle the Filter Functionality\r\n   * @param {boolean} isFilterDisabled - optionally force a disable/enable of the Sort Functionality? Defaults to True\r\n   * @param {boolean} clearFiltersWhenDisabled - when disabling the Filter, do we also want to clear all the filters as well? Defaults to True\r\n   */\r\n  disableFilterFunctionality(isFilterDisabled = true, clearFiltersWhenDisabled = true) {\r\n    const prevShowFilterFlag = this._gridOptions.enableFiltering;\r\n    const newShowFilterFlag = !prevShowFilterFlag;\r\n\r\n    if (newShowFilterFlag !== isFilterDisabled) {\r\n      if (clearFiltersWhenDisabled && isFilterDisabled) {\r\n        this.clearFilters();\r\n      }\r\n      this.disableAllFilteringCommands(isFilterDisabled);\r\n      this._grid.setOptions({ enableFiltering: newShowFilterFlag }, false, true);\r\n      this._grid.setHeaderRowVisibility(newShowFilterFlag);\r\n      this._gridOptions.enableFiltering = !isFilterDisabled;\r\n      this.sharedService.gridOptions = this._gridOptions;\r\n\r\n      // when displaying header row, we'll call \"setColumns\" which in terms will recreate the header row filters\r\n      this._grid.setColumns(this.sharedService.columnDefinitions);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle the Filter Functionality (show/hide the header row filter bar as well)\r\n   * @param {boolean} clearFiltersWhenDisabled - when disabling the filters, do we want to clear the filters before hiding the filters? Defaults to True\r\n   */\r\n  toggleFilterFunctionality(clearFiltersWhenDisabled = true) {\r\n    const prevShowFilterFlag = this._gridOptions.enableFiltering;\r\n    this.disableFilterFunctionality(prevShowFilterFlag, clearFiltersWhenDisabled);\r\n  }\r\n\r\n  /**\r\n   * Toggle the Header Row filter bar (this does not disable the Filtering itself, you can use \"toggleFilterFunctionality()\" instead, however this will reset any column positions)\r\n   */\r\n  toggleHeaderFilterRow() {\r\n    let showHeaderRow = this._gridOptions && this._gridOptions.showHeaderRow || false;\r\n    showHeaderRow = !showHeaderRow; // inverse show header flag\r\n    this._grid.setHeaderRowVisibility(showHeaderRow);\r\n\r\n    // when displaying header row, we'll call \"setColumns\" which in terms will recreate the header row filters\r\n    if (showHeaderRow === true) {\r\n      this._grid.setColumns(this.sharedService.columnDefinitions);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the sort icons in the UI (ONLY the icons, it does not do any sorting)\r\n   * The column sort icons are not necessarily inter-connected to the sorting functionality itself,\r\n   * you can change the sorting icons separately by passing an array of columnId/sortAsc and that will change ONLY the icons\r\n   * @param sortColumns\r\n   */\r\n  setSortColumnIcons(sortColumns: { columnId: string, sortAsc: boolean }[]) {\r\n    if (this._grid && Array.isArray(sortColumns)) {\r\n      this._grid.setSortColumns(sortColumns);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update Filters dynamically just by providing an array of filter(s).\r\n   * You can also choose emit (default) a Filter Changed event that will be picked by the Grid State Service.\r\n   *\r\n   * Also for backend service only, you can choose to trigger a backend query (default) or not if you wish to do it later,\r\n   * this could be useful when using updateFilters & updateSorting and you wish to only send the backend query once.\r\n   * @param filters array\r\n   * @param triggerEvent defaults to True, do we want to emit a filter changed event?\r\n   * @param triggerBackendQuery defaults to True, which will query the backend.\r\n   * @param triggerOnSearchChangeEvent defaults to False, can be useful with Tree Data structure where the onSearchEvent has to run to execute a prefiltering step\r\n   */\r\n  updateFilters(filters: CurrentFilter[], emitChangedEvent = true, triggerBackendQuery = true, triggerOnSearchChangeEvent = false) {\r\n    if (!this._filtersMetadata || this._filtersMetadata.length === 0 || !this._gridOptions || !this._gridOptions.enableFiltering) {\r\n      throw new Error('[Angular-Slickgrid] in order to use \"updateFilters\" method, you need to have Filterable Columns defined in your grid and \"enableFiltering\" set in your Grid Options');\r\n    }\r\n\r\n    if (Array.isArray(filters)) {\r\n      // start by clearing all filters (without triggering an event) before applying any new filters\r\n      this.clearFilters(false);\r\n\r\n      // pre-fill (value + operator) and render all filters in the DOM\r\n      // loop through each Filters provided (which has a columnId property)\r\n      // then find their associated Filter instances that were originally created in the grid\r\n      filters.forEach((newFilter) => {\r\n        const uiFilter = this._filtersMetadata.find((filter) => newFilter.columnId === filter.columnDef.id);\r\n        if (newFilter && uiFilter) {\r\n          const newOperator = newFilter.operator || uiFilter.defaultOperator;\r\n          this.updateColumnFilters(newFilter.searchTerms, uiFilter.columnDef, newOperator);\r\n          uiFilter.setValues(newFilter.searchTerms || [], newOperator);\r\n\r\n          if (triggerOnSearchChangeEvent || this._gridOptions?.enableTreeData) {\r\n            this.callbackSearchEvent(undefined, { columnDef: uiFilter.columnDef, operator: newOperator, searchTerms: newFilter.searchTerms, shouldTriggerQuery: true, forceOnSearchChangeEvent: true });\r\n          }\r\n        }\r\n      });\r\n\r\n      const backendApi = this._gridOptions && this._gridOptions.backendServiceApi;\r\n\r\n      // refresh the DataView and trigger an event after all filters were updated and rendered\r\n      this._dataView.refresh();\r\n\r\n      if (backendApi) {\r\n        const backendApiService = backendApi && backendApi.service;\r\n        if (backendApiService && backendApiService.updateFilters) {\r\n          backendApiService.updateFilters(filters, true);\r\n          if (triggerBackendQuery) {\r\n            refreshBackendDataset(this._gridOptions);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (emitChangedEvent) {\r\n        const emitterType = backendApi ? EmitterType.remote : EmitterType.local;\r\n        this.emitFilterChanged(emitterType);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * **NOTE**: This should only ever be used when having a global external search and hidding the grid inline filters (with `enableFiltering: true` and `showHeaderRow: false`).\r\n   * For inline filters, please use `updateFilters()` instead.\r\n   *\r\n   * Update a Single Filter dynamically just by providing (columnId, operator and searchTerms)\r\n   * You can also choose emit (default) a Filter Changed event that will be picked by the Grid State Service.\r\n   * Also for backend service only, you can choose to trigger a backend query (default) or not if you wish to do it later,\r\n   * this could be useful when using updateFilters & updateSorting and you wish to only send the backend query once.\r\n   * @param filters array\r\n   * @param triggerEvent defaults to True, do we want to emit a filter changed event?\r\n   * @param triggerBackendQuery defaults to True, which will query the backend.\r\n   */\r\n  updateSingleFilter(filter: CurrentFilter, emitChangedEvent = true, triggerBackendQuery = true) {\r\n    const columnDef = this.sharedService.allColumns.find(col => col.id === filter.columnId);\r\n    if (columnDef && filter.columnId) {\r\n      this._columnFilters = {};\r\n      const emptySearchTermReturnAllValues = columnDef.filter?.emptySearchTermReturnAllValues ?? true;\r\n\r\n      if (Array.isArray(filter.searchTerms) && (filter.searchTerms.length > 1 || (filter.searchTerms.length === 1 && (!emptySearchTermReturnAllValues || filter.searchTerms[0] !== '')))) {\r\n        // pass a columnFilter object as an object which it's property name must be a column field name (e.g.: 'duration': {...} )\r\n        this._columnFilters[filter.columnId] = {\r\n          columnId: filter.columnId,\r\n          operator: filter.operator,\r\n          searchTerms: filter.searchTerms,\r\n          columnDef,\r\n          type: columnDef.type || FieldType.string,\r\n        };\r\n      }\r\n\r\n      const backendApi = this._gridOptions && this._gridOptions.backendServiceApi;\r\n\r\n      if (backendApi) {\r\n        const backendApiService = backendApi && backendApi.service;\r\n        if (backendApiService && backendApiService.updateFilters) {\r\n          backendApiService.updateFilters(this._columnFilters, true);\r\n          if (triggerBackendQuery) {\r\n            refreshBackendDataset(this._gridOptions);\r\n          }\r\n        }\r\n      } else {\r\n        this._dataView.setFilterArgs({\r\n          columnFilters: this._columnFilters,\r\n          grid: this._grid\r\n        });\r\n\r\n        // when using Tree Data, we also need to refresh the filters because of the tree structure with recursion\r\n        this.refreshTreeDataFilters();\r\n\r\n        this._dataView.refresh();\r\n      }\r\n\r\n      if (emitChangedEvent) {\r\n        const emitterType = backendApi ? EmitterType.remote : EmitterType.local;\r\n        this.emitFilterChanged(emitterType);\r\n      }\r\n    }\r\n  }\r\n\r\n  // --\r\n  // protected functions\r\n  // -------------------\r\n\r\n  /** Add all created filters (from their template) to the header row section area */\r\n  protected addFilterTemplateToHeaderRow(_event: Event | undefined, args: { column: Column; grid: any; node: HTMLElement }, isFilterFirstRender = true) {\r\n    const columnDef = args.column;\r\n    const columnId = columnDef && columnDef.id || '';\r\n\r\n    if (columnDef && columnId !== 'selector' && columnDef.filterable) {\r\n      let searchTerms: SearchTerm[] | undefined;\r\n      let operator: OperatorString | OperatorType | undefined;\r\n      const newFilter: Filter | undefined = this.filterFactory.createFilter(columnDef.filter);\r\n      operator = (columnDef && columnDef.filter && columnDef.filter.operator) || (newFilter && newFilter.operator);\r\n\r\n      if (this._columnFilters[columnDef.id]) {\r\n        searchTerms = this._columnFilters[columnDef.id].searchTerms || undefined;\r\n        operator = this._columnFilters[columnDef.id].operator || undefined;\r\n      } else if (columnDef.filter) {\r\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\r\n        // because of that we need to first get searchTerm(s) from the columnFilters (that is what the user last typed in a filter search input)\r\n        searchTerms = columnDef.filter.searchTerms || undefined;\r\n        this.updateColumnFilters(searchTerms, columnDef, operator);\r\n      }\r\n\r\n      const filterArguments: FilterArguments = {\r\n        grid: this._grid,\r\n        operator,\r\n        searchTerms,\r\n        columnDef,\r\n        callback: this.callbackSearchEvent.bind(this)\r\n      };\r\n\r\n      if (newFilter) {\r\n        newFilter.init(filterArguments, isFilterFirstRender);\r\n        const filterExistIndex = this._filtersMetadata.findIndex((filter) => newFilter.columnDef.id === filter.columnDef.id);\r\n\r\n        // add to the filters arrays or replace it when found\r\n        if (filterExistIndex === -1) {\r\n          this._filtersMetadata.push(newFilter);\r\n        } else {\r\n          this._filtersMetadata[filterExistIndex] = newFilter;\r\n        }\r\n\r\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\r\n        // we need to also set again the values in the DOM elements if the values were set by a searchTerm(s)\r\n        if (searchTerms && newFilter.setValues) {\r\n          newFilter.setValues(searchTerms, operator);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback method that is called and executed by the individual Filter (DOM element),\r\n   * for example when user starts typing chars on a search input (which uses InputFilter), this Filter will execute the callback from an input change event.\r\n   */\r\n  protected callbackSearchEvent(event: any | undefined, args: FilterCallbackArg) {\r\n    if (args) {\r\n      const searchTerm = ((event && event.target) ? (event.target as HTMLInputElement).value : undefined);\r\n      const searchTerms = (args.searchTerms && Array.isArray(args.searchTerms)) ? args.searchTerms : (searchTerm ? [searchTerm] : undefined);\r\n      const columnDef = args.columnDef || null;\r\n      const columnId = columnDef && columnDef.id || '';\r\n      const fieldType = columnDef && columnDef.filter && columnDef.filter.type || columnDef && columnDef.type || FieldType.string;\r\n      const operator = args.operator || undefined;\r\n      const hasSearchTerms = searchTerms && Array.isArray(searchTerms);\r\n      const termsCount = hasSearchTerms && searchTerms && searchTerms.length;\r\n      const oldColumnFilters = { ...this._columnFilters };\r\n      const emptySearchTermReturnAllValues = columnDef.filter?.emptySearchTermReturnAllValues ?? true;\r\n      let parsedSearchTerms: SearchTerm | SearchTerm[] | undefined;\r\n\r\n      if (columnDef && columnId) {\r\n        if (!hasSearchTerms || termsCount === 0 || (termsCount === 1 && Array.isArray(searchTerms) && emptySearchTermReturnAllValues && searchTerms[0] === '')) {\r\n          // delete the property from the columnFilters when it becomes empty\r\n          // without doing this, it would leave an incorrect state of the previous column filters when filtering on another column\r\n          delete this._columnFilters[columnId];\r\n        } else {\r\n          const colId = `${columnId}`;\r\n          const colFilter: Omit<SearchColumnFilter, 'searchTerms'> = {\r\n            columnId: colId,\r\n            columnDef,\r\n            parsedSearchTerms: [],\r\n            type: fieldType\r\n          };\r\n          const inputSearchConditions = this.parseFormInputFilterConditions(searchTerms, colFilter);\r\n          colFilter.operator = operator || inputSearchConditions.operator || mapOperatorByFieldType(fieldType);\r\n          parsedSearchTerms = getParsedSearchTermsByFieldType(inputSearchConditions.searchTerms, fieldType);\r\n          if (parsedSearchTerms !== undefined) {\r\n            colFilter.parsedSearchTerms = parsedSearchTerms;\r\n          }\r\n\r\n          // use searchTerms only coming from the input search result because original terms might include extra operator symbols within their string\r\n          // and the input search result would be correctly stripped them from input result and assigned to the appropriate operator\r\n          // for example we might have: { searchTerms: ['*doe'] } and that should be reassigned to: { operator: EndsWith, searchTerms: 'doe' }\r\n          (colFilter as SearchColumnFilter).searchTerms = inputSearchConditions.searchTerms || [];\r\n          this._columnFilters[colId] = colFilter as SearchColumnFilter;\r\n        }\r\n      }\r\n\r\n      // event might have been created as a CustomEvent (e.g. CompoundDateFilter), without being a valid Slick.EventData,\r\n      // if so we will create a new Slick.EventData and merge it with that CustomEvent to avoid having SlickGrid errors\r\n      const eventData = (event && typeof event.isPropagationStopped !== 'function') ? $.extend({}, new Slick.EventData(), event) : event;\r\n\r\n      // trigger an event only if Filters changed or if ENTER key was pressed\r\n      const eventKey = event && event.key;\r\n      const eventKeyCode = event && event.keyCode;\r\n      if (this._onSearchChange && (args.forceOnSearchChangeEvent || eventKey === 'Enter' || eventKeyCode === KeyCode.ENTER || !dequal(oldColumnFilters, this._columnFilters))) {\r\n        this._onSearchChange.notify({\r\n          clearFilterTriggered: args.clearFilterTriggered,\r\n          shouldTriggerQuery: args.shouldTriggerQuery,\r\n          columnId,\r\n          columnDef,\r\n          columnFilters: this._columnFilters,\r\n          operator: operator || mapOperatorByFieldType(fieldType),\r\n          searchTerms,\r\n          parsedSearchTerms,\r\n          grid: this._grid\r\n        }, eventData);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loop through all column definitions and do the following thing\r\n   * 1. loop through each Header Menu commands and change the \"hidden\" commands to show/hide depending if it's enabled/disabled\r\n   * Also note that we aren't deleting any properties, we just toggle their flags so that we can reloop through at later point in time.\r\n   * (if we previously deleted these properties we wouldn't be able to change them back since these properties wouldn't exist anymore, hence why we just hide the commands)\r\n   * @param {boolean} isDisabling - are we disabling the filter functionality? Defaults to true\r\n   */\r\n  protected disableAllFilteringCommands(isDisabling = true): Column[] {\r\n    const columnDefinitions = this._grid.getColumns();\r\n\r\n    // loop through column definition to hide/show header menu commands\r\n    columnDefinitions.forEach((col: Column) => {\r\n      if (col && col.header && col.header.menu) {\r\n        col.header.menu.items.forEach(menuItem => {\r\n          if (menuItem && typeof menuItem !== 'string') {\r\n            const menuCommand = menuItem.command;\r\n            if (menuCommand === 'clear-filter') {\r\n              menuItem.hidden = isDisabling;\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    // loop through column definition to hide/show grid menu commands\r\n    if (this._gridOptions && this._gridOptions.gridMenu && this._gridOptions.gridMenu.customItems) {\r\n      this._gridOptions.gridMenu.customItems.forEach((menuItem) => {\r\n        if (menuItem && typeof menuItem !== 'string') {\r\n          const menuCommand = menuItem.command;\r\n          if (menuCommand === 'clear-filter' || menuCommand === 'toggle-filter') {\r\n            menuItem.hidden = isDisabling;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return columnDefinitions;\r\n  }\r\n\r\n  protected updateColumnFilters(searchTerms: SearchTerm[] | undefined, columnDef: any, operator?: OperatorType | OperatorString) {\r\n    const fieldType = columnDef && columnDef.filter && columnDef.filter.type || columnDef && columnDef.type || FieldType.string;\r\n    const parsedSearchTerms = getParsedSearchTermsByFieldType(searchTerms, fieldType); // parsed term could a single value or an array of values\r\n\r\n    if (searchTerms && columnDef) {\r\n      this._columnFilters[columnDef.id] = {\r\n        columnId: columnDef.id,\r\n        columnDef,\r\n        searchTerms,\r\n        operator,\r\n        parsedSearchTerms,\r\n        type: fieldType,\r\n      };\r\n    }\r\n  }\r\n}\r\n","import 'slickgrid/controls/slick.gridmenu';\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { Constants } from '../constants';\r\nimport {\r\n  Column,\r\n  DelimiterType,\r\n  Extension,\r\n  FileType,\r\n  GridOption,\r\n  GridMenu,\r\n  GridMenuItem,\r\n  Locale,\r\n  MenuCommandItemCallbackArgs,\r\n  SlickEventHandler,\r\n} from '../models';\r\nimport { ExcelExportService } from '../services/excelExport.service';\r\nimport { ExportService } from '../services/export.service';\r\nimport { ExtensionUtility } from './extensionUtility';\r\nimport { FilterService } from '../services/filter.service';\r\nimport { SortService } from '../services/sort.service';\r\nimport { SharedService } from '../services/shared.service';\r\nimport { refreshBackendDataset } from '../services/backend-utilities';\r\nimport { getTranslationPrefix } from '../services/utilities';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\ndeclare const $: any;\r\n\r\n@Injectable()\r\nexport class GridMenuExtension implements Extension {\r\n  private _addon: any;\r\n  private _gridMenuOptions!: GridMenu | null;\r\n  private _areVisibleColumnDifferent = false;\r\n  private _eventHandler: SlickEventHandler;\r\n  private _locales!: Locale;\r\n  private _userOriginalGridMenu!: GridMenu;\r\n\r\n  constructor(\r\n    private readonly excelExportService: ExcelExportService,\r\n    private readonly exportService: ExportService,\r\n    private readonly extensionUtility: ExtensionUtility,\r\n    private readonly filterService: FilterService,\r\n    private readonly sharedService: SharedService,\r\n    private readonly sortService: SortService,\r\n    @Optional() private readonly translate: TranslateService,\r\n  ) {\r\n    this._eventHandler = new Slick.EventHandler();\r\n  }\r\n\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n    if (this._addon?.destroy) {\r\n      this._addon.destroy();\r\n    }\r\n    if (this.sharedService.gridOptions?.gridMenu?.customItems) {\r\n      this.sharedService.gridOptions.gridMenu = this._userOriginalGridMenu;\r\n    }\r\n    this.extensionUtility.nullifyFunctionNameStartingWithOn(this._gridMenuOptions);\r\n    this._addon = null;\r\n    this._gridMenuOptions = null;\r\n  }\r\n\r\n  /** Get the instance of the SlickGrid addon (control or plugin). */\r\n  getAddonInstance() {\r\n    return this._addon;\r\n  }\r\n\r\n  /** Create the Header Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...) */\r\n  register(): any {\r\n    if (this.sharedService.gridOptions?.enableTranslate && (!this.translate || !this.translate.instant)) {\r\n      throw new Error('[Angular-Slickgrid] requires \"ngx-translate\" to be installed and configured when the grid option \"enableTranslate\" is enabled.');\r\n    }\r\n\r\n    if (this.sharedService?.gridOptions?.gridMenu) {\r\n      // keep original user grid menu, useful when switching locale to translate\r\n      this._userOriginalGridMenu = { ...this.sharedService.gridOptions.gridMenu };\r\n\r\n      // get locales provided by user in forRoot or else use default English locales via the Constants\r\n      this._locales = this.sharedService.gridOptions?.locales ?? Constants.locales;\r\n\r\n      this._gridMenuOptions = { ...this.getDefaultGridMenuOptions(), ...this.sharedService.gridOptions.gridMenu };\r\n      this.sharedService.gridOptions.gridMenu = this._gridMenuOptions;\r\n\r\n      // merge original user grid menu items with internal items\r\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\r\n      const originalCustomItems = this._userOriginalGridMenu && Array.isArray(this._userOriginalGridMenu.customItems) ? this._userOriginalGridMenu.customItems : [];\r\n      this._gridMenuOptions.customItems = [...originalCustomItems, ...this.addGridMenuCustomCommands(originalCustomItems)];\r\n      this.extensionUtility.translateItems(this._gridMenuOptions.customItems, 'titleKey', 'title');\r\n      this.extensionUtility.sortItems(this._gridMenuOptions.customItems, 'positionOrder');\r\n\r\n      this._addon = new Slick.Controls.GridMenu(this.sharedService.allColumns, this.sharedService.grid, this.sharedService.gridOptions);\r\n\r\n      // hook all events\r\n      if (this._gridMenuOptions) {\r\n        if (this._gridMenuOptions.onExtensionRegistered) {\r\n          this._gridMenuOptions.onExtensionRegistered(this._addon);\r\n        }\r\n        if (this._gridMenuOptions && typeof this._gridMenuOptions.onBeforeMenuShow === 'function') {\r\n          this._eventHandler.subscribe(this._addon.onBeforeMenuShow, (e: any, args: { grid: any; menu: any; columns: Column[] }) => {\r\n            if (this._gridMenuOptions && this._gridMenuOptions.onBeforeMenuShow) {\r\n              this._gridMenuOptions.onBeforeMenuShow(e, args);\r\n            }\r\n          });\r\n        }\r\n        if (this._gridMenuOptions && typeof this._gridMenuOptions.onAfterMenuShow === 'function') {\r\n          this._eventHandler.subscribe(this._addon.onAfterMenuShow, (e: any, args: { grid: any; menu: any; columns: Column[] }) => {\r\n            if (this._gridMenuOptions && this._gridMenuOptions.onAfterMenuShow) {\r\n              this._gridMenuOptions.onAfterMenuShow(e, args);\r\n            }\r\n          });\r\n        }\r\n        this._eventHandler.subscribe(this._addon.onColumnsChanged, (e: any, args: { columnId: string; showing: boolean; columns: Column[]; allColumns: Column[]; grid: any; }) => {\r\n          this._areVisibleColumnDifferent = true;\r\n          if (this._gridMenuOptions && typeof this._gridMenuOptions.onColumnsChanged === 'function') {\r\n            this._gridMenuOptions.onColumnsChanged(e, args);\r\n          }\r\n\r\n          // keep reference to the updated visible columns list\r\n          if (args && Array.isArray(args.columns) && args.columns.length > this.sharedService.visibleColumns.length) {\r\n            this.sharedService.visibleColumns = args.columns;\r\n          }\r\n\r\n          // when using row selection, SlickGrid will only apply the \"selected\" CSS class on the visible columns only\r\n          // and if the row selection was done prior to the column being shown then that column that was previously hidden (at the time of the row selection)\r\n          // will not have the \"selected\" CSS class because it wasn't visible at the time.\r\n          // To bypass this problem we can simply recall the row selection with the same selection and that will trigger a re-apply of the CSS class\r\n          // on all columns including the column we just made visible\r\n          if (this.sharedService.gridOptions.enableRowSelection && args.showing) {\r\n            args.grid.setSelectedRows(args.grid.getSelectedRows());\r\n          }\r\n\r\n          // if we're using frozen columns, we need to readjust pinning when the new hidden column becomes visible again on the left pinning container\r\n          // we need to readjust frozenColumn index because SlickGrid freezes by index and has no knowledge of the columns themselves\r\n          const frozenColumnIndex = this.sharedService.gridOptions.frozenColumn !== undefined ? this.sharedService.gridOptions.frozenColumn : -1;\r\n          if (frozenColumnIndex >= 0) {\r\n            const { allColumns, columns: visibleColumns } = args;\r\n            this.extensionUtility.readjustFrozenColumnIndexWhenNeeded(frozenColumnIndex, allColumns, visibleColumns);\r\n          }\r\n        });\r\n        this._eventHandler.subscribe(this._addon.onCommand, (e: any, args: MenuCommandItemCallbackArgs) => {\r\n          this.executeGridMenuInternalCustomCommands(e, args);\r\n          if (this._gridMenuOptions && typeof this._gridMenuOptions.onCommand === 'function') {\r\n            this._gridMenuOptions.onCommand(e, args);\r\n          }\r\n        });\r\n        this._eventHandler.subscribe(this._addon.onMenuClose, (e: any, args: { grid: any; menu: any; allColumns: Column[], visibleColumns: Column[] }) => {\r\n          if (this._gridMenuOptions && typeof this._gridMenuOptions.onMenuClose === 'function') {\r\n            this._gridMenuOptions.onMenuClose(e, args);\r\n          }\r\n\r\n          // we also want to resize the columns if the user decided to hide certain column(s)\r\n          if (this.sharedService.grid && typeof this.sharedService.grid.autosizeColumns === 'function') {\r\n            // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree)\r\n            const gridUid = this.sharedService.grid.getUID();\r\n            if (this._areVisibleColumnDifferent && gridUid && document.querySelector(`.${gridUid}`) !== null) {\r\n              const gridOptions = this.sharedService.grid.getOptions();\r\n              if (gridOptions.enableAutoSizeColumns) {\r\n                this.sharedService.grid.autosizeColumns();\r\n              }\r\n              this._areVisibleColumnDifferent = false;\r\n            }\r\n          }\r\n        });\r\n      }\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Refresh the dataset through the Backend Service */\r\n  refreshBackendDataset(gridOptions?: GridOption) {\r\n    // user can pass new set of grid options which will override current ones\r\n    if (gridOptions) {\r\n      this.sharedService.gridOptions = { ...this.sharedService.gridOptions, ...gridOptions };\r\n    }\r\n    refreshBackendDataset(this.sharedService.gridOptions);\r\n  }\r\n\r\n  showGridMenu(e: Event) {\r\n    this._addon.showGridMenu(e);\r\n  }\r\n\r\n  /** Translate the Grid Menu titles and column picker */\r\n  translateGridMenu() {\r\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\r\n    // we also need to call the control init so that it takes the new Grid object with latest values\r\n    if (this.sharedService?.gridOptions?.gridMenu) {\r\n      this.sharedService.gridOptions.gridMenu.customItems = [];\r\n      this.emptyGridMenuTitles();\r\n\r\n      // merge original user grid menu items with internal items\r\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\r\n      const originalCustomItems = this._userOriginalGridMenu && Array.isArray(this._userOriginalGridMenu.customItems) ? this._userOriginalGridMenu.customItems : [];\r\n      this.sharedService.gridOptions.gridMenu.customItems = [...originalCustomItems, ...this.addGridMenuCustomCommands(originalCustomItems)];\r\n      this.extensionUtility.translateItems(this.sharedService.gridOptions.gridMenu.customItems, 'titleKey', 'title');\r\n      this.extensionUtility.sortItems(this.sharedService.gridOptions.gridMenu.customItems, 'positionOrder');\r\n\r\n      this.sharedService.gridOptions.gridMenu.columnTitle = this.extensionUtility.getPickerTitleOutputString('columnTitle', 'gridMenu');\r\n      this.sharedService.gridOptions.gridMenu.forceFitTitle = this.extensionUtility.getPickerTitleOutputString('forceFitTitle', 'gridMenu');\r\n      this.sharedService.gridOptions.gridMenu.syncResizeTitle = this.extensionUtility.getPickerTitleOutputString('syncResizeTitle', 'gridMenu');\r\n\r\n      // translate all columns (including non-visible)\r\n      // eventually deprecate the \"headerKey\" and use only the \"nameKey\"\r\n      this.extensionUtility.translateItems(this.sharedService.allColumns, 'headerKey', 'name');\r\n      this.extensionUtility.translateItems(this.sharedService.allColumns, 'nameKey', 'name');\r\n\r\n      // update the Titles of each sections (command, customTitle, ...)\r\n      if (this._addon && this._addon.updateAllTitles) {\r\n        this._addon.updateAllTitles(this.sharedService.gridOptions.gridMenu);\r\n      }\r\n    }\r\n  }\r\n\r\n  // --\r\n  // private functions\r\n  // ------------------\r\n\r\n  /** Create Grid Menu with Custom Commands if user has enabled Filters and/or uses a Backend Service (OData, GraphQL) */\r\n  private addGridMenuCustomCommands(originalCustomItems: Array<GridMenuItem | 'divider'>) {\r\n    const backendApi = this.sharedService.gridOptions.backendServiceApi || null;\r\n    const gridMenuCustomItems: Array<GridMenuItem | 'divider'> = [];\r\n    const gridOptions = this.sharedService.gridOptions;\r\n    const translationPrefix = getTranslationPrefix(gridOptions);\r\n    const commandLabels = this._gridMenuOptions?.commandLabels;\r\n\r\n    // show grid menu: Unfreeze Columns/Rows\r\n    if (this.sharedService.gridOptions && this._gridMenuOptions && !this._gridMenuOptions.hideClearFrozenColumnsCommand) {\r\n      const commandName = 'clear-pinning';\r\n      if (!originalCustomItems.find(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === commandName)) {\r\n        gridMenuCustomItems.push(\r\n          {\r\n            iconCssClass: this._gridMenuOptions.iconClearFrozenColumnsCommand || 'fa fa-times',\r\n            title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}${commandLabels?.clearFrozenColumnsCommandKey}`, 'TEXT_CLEAR_PINNING', commandLabels?.clearFrozenColumnsCommand),\r\n            disabled: false,\r\n            command: commandName,\r\n            positionOrder: 52\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this.sharedService.gridOptions && (this.sharedService.gridOptions.enableFiltering && !this.sharedService.hideHeaderRowAfterPageLoad)) {\r\n      // show grid menu: Clear all Filters\r\n      if (this.sharedService.gridOptions && this._gridMenuOptions && !this._gridMenuOptions.hideClearAllFiltersCommand) {\r\n        const commandName = 'clear-filter';\r\n        if (!originalCustomItems.find(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === commandName)) {\r\n          gridMenuCustomItems.push(\r\n            {\r\n              iconCssClass: this._gridMenuOptions.iconClearAllFiltersCommand || 'fa fa-filter text-danger',\r\n              title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}${commandLabels?.clearAllFiltersCommandKey}`, 'TEXT_CLEAR_ALL_FILTERS', commandLabels?.clearAllFiltersCommand),\r\n              disabled: false,\r\n              command: commandName,\r\n              positionOrder: 50\r\n            }\r\n          );\r\n        }\r\n      }\r\n\r\n      // show grid menu: toggle filter row\r\n      if (this.sharedService.gridOptions && this._gridMenuOptions && !this._gridMenuOptions.hideToggleFilterCommand) {\r\n        const commandName = 'toggle-filter';\r\n        if (!originalCustomItems.find(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === commandName)) {\r\n          gridMenuCustomItems.push(\r\n            {\r\n              iconCssClass: this._gridMenuOptions.iconToggleFilterCommand || 'fa fa-random',\r\n              title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}${commandLabels?.toggleFilterCommandKey}`, 'TEXT_TOGGLE_FILTER_ROW', commandLabels?.toggleFilterCommand),\r\n              disabled: false,\r\n              command: commandName,\r\n              positionOrder: 53\r\n            }\r\n          );\r\n        }\r\n      }\r\n\r\n      // show grid menu: refresh dataset\r\n      if (this.sharedService.gridOptions && this._gridMenuOptions && !this._gridMenuOptions.hideRefreshDatasetCommand && backendApi) {\r\n        const commandName = 'refresh-dataset';\r\n        if (!originalCustomItems.find(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === commandName)) {\r\n          gridMenuCustomItems.push(\r\n            {\r\n              iconCssClass: this._gridMenuOptions.iconRefreshDatasetCommand || 'fa fa-refresh',\r\n              title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}${commandLabels?.refreshDatasetCommandKey}`, 'TEXT_REFRESH_DATASET', commandLabels?.refreshDatasetCommand),\r\n              disabled: false,\r\n              command: commandName,\r\n              positionOrder: 57\r\n            }\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.sharedService.gridOptions.showPreHeaderPanel) {\r\n      // show grid menu: toggle pre-header row\r\n      if (this.sharedService.gridOptions && this._gridMenuOptions && !this._gridMenuOptions.hideTogglePreHeaderCommand) {\r\n        const commandName = 'toggle-preheader';\r\n        if (!originalCustomItems.find(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === commandName)) {\r\n          gridMenuCustomItems.push(\r\n            {\r\n              iconCssClass: this._gridMenuOptions.iconTogglePreHeaderCommand || 'fa fa-random',\r\n              title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}${commandLabels?.togglePreHeaderCommandKey}`, 'TEXT_TOGGLE_PRE_HEADER_ROW', commandLabels?.togglePreHeaderCommand),\r\n              disabled: false,\r\n              command: commandName,\r\n              positionOrder: 53\r\n            }\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.sharedService.gridOptions.enableSorting) {\r\n      // show grid menu: Clear all Sorting\r\n      if (this.sharedService.gridOptions && this._gridMenuOptions && !this._gridMenuOptions.hideClearAllSortingCommand) {\r\n        const commandName = 'clear-sorting';\r\n        if (!originalCustomItems.find(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === commandName)) {\r\n          gridMenuCustomItems.push(\r\n            {\r\n              iconCssClass: this._gridMenuOptions.iconClearAllSortingCommand || 'fa fa-unsorted text-danger',\r\n              title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}${commandLabels?.clearAllSortingCommandKey}`, 'TEXT_CLEAR_ALL_SORTING', commandLabels?.clearAllSortingCommand),\r\n              disabled: false,\r\n              command: commandName,\r\n              positionOrder: 51\r\n            }\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // show grid menu: Export to file\r\n    if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableExport && this._gridMenuOptions && !this._gridMenuOptions.hideExportCsvCommand) {\r\n      const commandName = 'export-csv';\r\n      if (!originalCustomItems.find(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === commandName)) {\r\n        gridMenuCustomItems.push(\r\n          {\r\n            iconCssClass: this._gridMenuOptions.iconExportCsvCommand || 'fa fa-download',\r\n            title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}${commandLabels?.exportCsvCommandKey}`, 'TEXT_EXPORT_TO_CSV', commandLabels?.exportCsvCommand),\r\n            disabled: false,\r\n            command: commandName,\r\n            positionOrder: 54\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n    // show grid menu: Export to Excel\r\n    if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableExcelExport && this._gridMenuOptions && !this._gridMenuOptions.hideExportExcelCommand) {\r\n      const commandName = 'export-excel';\r\n      if (!originalCustomItems.find(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === commandName)) {\r\n        gridMenuCustomItems.push(\r\n          {\r\n            iconCssClass: this._gridMenuOptions.iconExportExcelCommand || 'fa fa-file-excel-o text-success',\r\n            title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}${commandLabels?.exportExcelCommandKey}`, 'TEXT_EXPORT_TO_EXCEL', commandLabels?.exportExcelCommand),\r\n            disabled: false,\r\n            command: commandName,\r\n            positionOrder: 55\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n    // show grid menu: export to text file as tab delimited\r\n    if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableExport && this._gridMenuOptions && !this._gridMenuOptions.hideExportTextDelimitedCommand) {\r\n      const commandName = 'export-text-delimited';\r\n      if (!originalCustomItems.find(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === commandName)) {\r\n        gridMenuCustomItems.push(\r\n          {\r\n            iconCssClass: this._gridMenuOptions.iconExportTextDelimitedCommand || 'fa fa-download',\r\n            title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}${commandLabels?.exportTextDelimitedCommandKey}`, 'TEXT_EXPORT_TO_TAB_DELIMITED', commandLabels?.exportTextDelimitedCommand),\r\n            disabled: false,\r\n            command: commandName,\r\n            positionOrder: 56\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n    // add the custom \"Commands\" title if there are any commands\r\n    if (this.sharedService && this.sharedService.gridOptions && this._gridMenuOptions && (Array.isArray(gridMenuCustomItems) && gridMenuCustomItems.length > 0 || (Array.isArray(this._gridMenuOptions.customItems) && this._gridMenuOptions.customItems.length > 0))) {\r\n      this._gridMenuOptions.customTitle = this._gridMenuOptions.customTitle || this.extensionUtility.getPickerTitleOutputString('customTitle', 'gridMenu');\r\n    }\r\n\r\n    return gridMenuCustomItems;\r\n  }\r\n\r\n  /**\r\n   * Execute the Grid Menu Custom command callback that was triggered by the onCommand subscribe\r\n   * These are the default internal custom commands\r\n   * @param event\r\n   * @param GridMenuItem args\r\n   */\r\n  private executeGridMenuInternalCustomCommands(e: Event, args: GridMenuItem) {\r\n    if (args && args.command) {\r\n      switch (args.command) {\r\n        case 'clear-pinning':\r\n          const visibleColumns = [...this.sharedService.visibleColumns];\r\n          const newGridOptions = { frozenColumn: -1, frozenRow: -1, frozenBottom: false, enableMouseWheelScrollHandler: false };\r\n          this.sharedService.grid.setOptions(newGridOptions);\r\n          this.sharedService.gridOptions.frozenColumn = newGridOptions.frozenColumn;\r\n          this.sharedService.gridOptions.frozenRow = newGridOptions.frozenRow;\r\n          this.sharedService.gridOptions.frozenBottom = newGridOptions.frozenBottom;\r\n          this.sharedService.gridOptions.enableMouseWheelScrollHandler = newGridOptions.enableMouseWheelScrollHandler;\r\n\r\n          // SlickGrid seems to be somehow resetting the columns to their original positions,\r\n          // so let's re-fix them to the position we kept as reference\r\n          if (Array.isArray(visibleColumns)) {\r\n            this.sharedService.grid.setColumns(visibleColumns);\r\n          }\r\n\r\n          // we also need to autosize columns if the option is enabled\r\n          const gridOptions = this.sharedService.grid.getOptions();\r\n          if (gridOptions.enableAutoSizeColumns) {\r\n            this.sharedService.grid.autosizeColumns();\r\n          }\r\n          break;\r\n        case 'clear-filter':\r\n          this.filterService.clearFilters();\r\n          this.sharedService.dataView.refresh();\r\n          break;\r\n        case 'clear-sorting':\r\n          this.sortService.clearSorting();\r\n          this.sharedService.dataView.refresh();\r\n          break;\r\n        case 'export-csv':\r\n          this.exportService.exportToFile({\r\n            delimiter: DelimiterType.comma,\r\n            format: FileType.csv,\r\n          });\r\n          break;\r\n        case 'export-excel':\r\n          this.excelExportService.exportToExcel();\r\n          break;\r\n        case 'export-text-delimited':\r\n          this.exportService.exportToFile({\r\n            delimiter: DelimiterType.tab,\r\n            format: FileType.txt,\r\n          });\r\n          break;\r\n        case 'toggle-filter':\r\n          let showHeaderRow = this.sharedService && this.sharedService.gridOptions && this.sharedService.gridOptions.showHeaderRow || false;\r\n          showHeaderRow = !showHeaderRow; // inverse show header flag\r\n          this.sharedService.grid.setHeaderRowVisibility(showHeaderRow);\r\n\r\n          // when displaying header row, we'll call \"setColumns\" which in terms will recreate the header row filters\r\n          if (showHeaderRow === true) {\r\n            this.sharedService.grid.setColumns(this.sharedService.columnDefinitions);\r\n          }\r\n          break;\r\n        case 'toggle-toppanel':\r\n          const showTopPanel = this.sharedService && this.sharedService.gridOptions && this.sharedService.gridOptions.showTopPanel || false;\r\n          this.sharedService.grid.setTopPanelVisibility(!showTopPanel);\r\n          break;\r\n        case 'toggle-preheader':\r\n          const showPreHeaderPanel = this.sharedService && this.sharedService.gridOptions && this.sharedService.gridOptions.showPreHeaderPanel || false;\r\n          this.sharedService.grid.setPreHeaderPanelVisibility(!showPreHeaderPanel);\r\n          break;\r\n        case 'refresh-dataset':\r\n          this.refreshBackendDataset();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  private emptyGridMenuTitles() {\r\n    if (this.sharedService && this.sharedService.gridOptions && this._gridMenuOptions) {\r\n      this._gridMenuOptions.customTitle = '';\r\n      this._gridMenuOptions.columnTitle = '';\r\n      this._gridMenuOptions.forceFitTitle = '';\r\n      this._gridMenuOptions.syncResizeTitle = '';\r\n    }\r\n  }\r\n\r\n  /** @return default Grid Menu options */\r\n  private getDefaultGridMenuOptions(): GridMenu {\r\n    return {\r\n      customTitle: undefined,\r\n      columnTitle: this.extensionUtility.getPickerTitleOutputString('columnTitle', 'gridMenu'),\r\n      forceFitTitle: this.extensionUtility.getPickerTitleOutputString('forceFitTitle', 'gridMenu'),\r\n      syncResizeTitle: this.extensionUtility.getPickerTitleOutputString('syncResizeTitle', 'gridMenu'),\r\n      iconCssClass: 'fa fa-bars',\r\n      menuWidth: 18,\r\n      customItems: [],\r\n      hideClearAllFiltersCommand: false,\r\n      hideRefreshDatasetCommand: false,\r\n      hideToggleFilterCommand: false,\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Extension } from '../models/index';\r\nimport { SharedService } from '../services/shared.service';\r\n\r\n@Injectable()\r\nexport class GroupItemMetaProviderExtension implements Extension {\r\n  private _addon: any;\r\n\r\n  constructor(private sharedService: SharedService) { }\r\n\r\n  dispose() {\r\n    if (this._addon && this._addon.destroy) {\r\n      this._addon.destroy();\r\n    }\r\n    this._addon = null;\r\n  }\r\n\r\n  /** Get the instance of the SlickGrid addon (control or plugin). */\r\n  getAddonInstance() {\r\n    return this._addon;\r\n  }\r\n\r\n  /** register the group item metadata provider to add expand/collapse group handlers */\r\n  register(): any {\r\n    if (this.sharedService && this.sharedService.grid) {\r\n      this._addon = this.sharedService.groupItemMetadataProvider || {};\r\n      this.sharedService.grid.registerPlugin(this._addon);\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import 'slickgrid/plugins/slick.headerbuttons';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Extension, HeaderButton, HeaderButtonOnCommandArgs, SlickEventHandler } from '../models/index';\r\nimport { ExtensionUtility } from './extensionUtility';\r\nimport { SharedService } from '../services/shared.service';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n@Injectable()\r\nexport class HeaderButtonExtension implements Extension {\r\n  private _eventHandler: SlickEventHandler;\r\n  private _addon: any;\r\n  private _headerButtonOptions!: HeaderButton | null;\r\n\r\n  constructor(private extensionUtility: ExtensionUtility, private sharedService: SharedService) {\r\n    this._eventHandler = new Slick.EventHandler();\r\n  }\r\n\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    if (this._addon && this._addon.destroy) {\r\n      this._addon.destroy();\r\n    }\r\n    this.extensionUtility.nullifyFunctionNameStartingWithOn(this._headerButtonOptions);\r\n    this._addon = null;\r\n    this._headerButtonOptions = null;\r\n  }\r\n\r\n  /** Get the instance of the SlickGrid addon (control or plugin). */\r\n  getAddonInstance() {\r\n    return this._addon;\r\n  }\r\n\r\n  // Header Button Plugin\r\n  register(): any {\r\n    if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {\r\n      this._headerButtonOptions = this.sharedService.gridOptions.headerButton || {};\r\n      this._addon = new Slick.Plugins.HeaderButtons(this._headerButtonOptions);\r\n      this.sharedService.grid.registerPlugin(this._addon);\r\n\r\n      // hook all events\r\n      if (this._headerButtonOptions) {\r\n        if (this._headerButtonOptions.onExtensionRegistered) {\r\n          this._headerButtonOptions.onExtensionRegistered(this._addon);\r\n        }\r\n        this._eventHandler.subscribe(this._addon.onCommand, (e: any, args: HeaderButtonOnCommandArgs) => {\r\n          if (this._headerButtonOptions && typeof this._headerButtonOptions.onCommand === 'function') {\r\n            this._headerButtonOptions.onCommand(e, args);\r\n          }\r\n        });\r\n      }\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { Column, FieldType, GridOption, ResizeByContentOption, SlickEventHandler } from './../models/index';\r\nimport { parseFormatterWhenExist } from '../formatters/formatterUtilities';\r\nimport { sanitizeHtmlToText } from './utilities';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\ndeclare const Slick: any;\r\n\r\n// global constants, height/width are in pixels\r\nconst DATAGRID_MIN_HEIGHT = 180;\r\nconst DATAGRID_MIN_WIDTH = 300;\r\nconst DATAGRID_BOTTOM_PADDING = 20;\r\nconst DATAGRID_FOOTER_HEIGHT = 20;\r\nconst DATAGRID_PAGINATION_HEIGHT = 35;\r\n\r\nexport interface GridDimension {\r\n  height?: number;\r\n  width?: number;\r\n  heightWithPagination?: number;\r\n}\r\n\r\n@Injectable()\r\nexport class ResizerService {\r\n  private _eventHandler: SlickEventHandler;\r\n  private _fixedHeight: number | undefined;\r\n  private _fixedWidth: number | undefined;\r\n  private _grid: any;\r\n  private _gridDomElm: any;\r\n  private _gridContainerElm: any;\r\n  private _hasResizedByContentAtLeastOnce = false;\r\n  private _lastDimensions: GridDimension | undefined;\r\n  private _totalColumnsWidthByContent = 0;\r\n  private _timer: any;\r\n  private _resizePaused = false;\r\n  onGridAfterResize = new Subject<GridDimension>();\r\n  onGridBeforeResize = new Subject<Event>();\r\n\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  /** Getter for the SlickGrid DataView */\r\n  get dataView(): any {\r\n    return this._grid?.getData();\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  private get _gridUid(): string {\r\n    return (this._grid && this._grid.getUID) ? this._grid.getUID() : this._gridOptions && this._gridOptions.gridId;\r\n  }\r\n\r\n  get resizeByContentOptions(): ResizeByContentOption {\r\n    return this._gridOptions?.resizeByContentOptions ?? {};\r\n  }\r\n\r\n  constructor() {\r\n    this._eventHandler = new Slick.EventHandler();\r\n  }\r\n\r\n  init(grid: any, fixedDimensions?: GridDimension): void {\r\n    if (!grid || !this._gridOptions) {\r\n      throw new Error(`\r\n      Angular-Slickgrid resizer requires a valid Grid object and Grid Options defined.\r\n      You can fix this by setting your gridOption to use \"enableAutoResize\" or create an instance of the ResizerService by calling bindAutoResizeDataGrid()`);\r\n    }\r\n\r\n    this._grid = grid;\r\n    const containerNode = grid && grid.getContainerNode && grid.getContainerNode() || '';\r\n    this._gridDomElm = $(containerNode);\r\n    const autoResizeOptions = this._gridOptions && this._gridOptions.autoResize || {};\r\n    this._gridContainerElm = (autoResizeOptions && autoResizeOptions.containerId) ? $(`#${autoResizeOptions.containerId}`) : $(`#${this._gridOptions.gridContainerId}`);\r\n\r\n    if (fixedDimensions) {\r\n      this._fixedHeight = fixedDimensions.height;\r\n      this._fixedWidth = fixedDimensions.width;\r\n    }\r\n\r\n    this._eventHandler?.subscribe?.(this._grid.onColumnsResizeDblClick, (_e: Event, args: { triggeredByColumn: string; }) => {\r\n      this.handleSingleColumnResizeByContent(args.triggeredByColumn);\r\n    });\r\n  }\r\n\r\n  /** Bind an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space\r\n   * Options: we could also provide a % factor to resize on each height/width independently\r\n   */\r\n  bindAutoResizeDataGrid(newSizes?: GridDimension): null | void {\r\n    // if we can't find the grid to resize, return without binding anything\r\n    if (this._gridDomElm === undefined || this._gridDomElm.offset() === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // -- 1st resize the datagrid size at first load (we need this because the .on event is not triggered on first load)\r\n    // -- also we add a slight delay (in ms) so that we resize after the grid render is done\r\n    this.resizeGrid(10, newSizes);\r\n\r\n    // -- 2nd bind a trigger on the Window DOM element, so that it happens also when resizing after first load\r\n    // -- bind auto-resize to Window object only if it exist\r\n    $(window).on(`resize.grid.${this._gridUid}`, this.handleResizeGrid.bind(this, newSizes));\r\n  }\r\n\r\n  handleResizeGrid(newSizes?: GridDimension, event?: Event) {\r\n    this.onGridBeforeResize.next(event);\r\n    if (!this._resizePaused) {\r\n      // for some yet unknown reason, calling the resize twice removes any stuttering/flickering\r\n      // when changing the height and makes it much smoother experience\r\n      this.resizeGrid(0, newSizes);\r\n      this.resizeGrid(0, newSizes);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation\r\n   * object gridOptions\r\n   */\r\n  calculateGridNewDimensions(gridOptions: GridOption): GridDimension | null {\r\n    const autoResizeOptions = gridOptions && gridOptions.autoResize || {};\r\n    if (!window || this._gridContainerElm === undefined || this._gridDomElm.offset() === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // calculate bottom padding\r\n    // if using pagination, we need to add the pagination height to this bottom padding\r\n    let bottomPadding = (autoResizeOptions && autoResizeOptions.bottomPadding !== undefined) ? autoResizeOptions.bottomPadding : DATAGRID_BOTTOM_PADDING;\r\n    if (bottomPadding && gridOptions.enablePagination) {\r\n      bottomPadding += DATAGRID_PAGINATION_HEIGHT;\r\n    }\r\n\r\n    // optionally show a custom footer with the data metrics (dataset length and last updated timestamp)\r\n    if (bottomPadding && gridOptions.showCustomFooter) {\r\n      bottomPadding += gridOptions?.customFooterOptions?.footerHeight ?? DATAGRID_FOOTER_HEIGHT;\r\n    }\r\n\r\n    let gridHeight = 0;\r\n    let gridOffsetTop = 0;\r\n\r\n    // which DOM element are we using to calculate the available size for the grid?\r\n    if (autoResizeOptions.calculateAvailableSizeBy === 'container') {\r\n      // uses the container's height to calculate grid height without any top offset\r\n      gridHeight = this._gridContainerElm.height() || 0;\r\n    } else {\r\n      // uses the browser's window height with its top offset to calculate grid height\r\n      gridHeight = window.innerHeight || 0;\r\n      const coordOffsetTop = this._gridDomElm.offset();\r\n      gridOffsetTop = (coordOffsetTop !== undefined) ? coordOffsetTop.top : 0;\r\n    }\r\n\r\n    const availableHeight = gridHeight - gridOffsetTop - bottomPadding;\r\n    const availableWidth = this._gridContainerElm.width() || window.innerWidth || 0;\r\n    const maxHeight = autoResizeOptions && autoResizeOptions.maxHeight || undefined;\r\n    const minHeight = (autoResizeOptions && autoResizeOptions.minHeight !== undefined) ? autoResizeOptions.minHeight : DATAGRID_MIN_HEIGHT;\r\n    const maxWidth = autoResizeOptions && autoResizeOptions.maxWidth || undefined;\r\n    const minWidth = (autoResizeOptions && autoResizeOptions.minWidth !== undefined) ? autoResizeOptions.minWidth : DATAGRID_MIN_WIDTH;\r\n\r\n    let newHeight = availableHeight;\r\n    let newWidth = (autoResizeOptions && autoResizeOptions.sidePadding) ? availableWidth - autoResizeOptions.sidePadding : availableWidth;\r\n\r\n    // optionally (when defined), make sure that grid height & width are within their thresholds\r\n    if (newHeight < minHeight) {\r\n      newHeight = minHeight;\r\n    }\r\n    if (maxHeight && newHeight > maxHeight) {\r\n      newHeight = maxHeight;\r\n    }\r\n    if (newWidth < minWidth) {\r\n      newWidth = minWidth;\r\n    }\r\n    if (maxWidth && newWidth > maxWidth) {\r\n      newWidth = maxWidth;\r\n    }\r\n\r\n    // return the new dimensions unless a fixed height/width was defined\r\n    return {\r\n      height: this._fixedHeight || newHeight,\r\n      width: this._fixedWidth || newWidth\r\n    };\r\n  }\r\n\r\n  /** Dispose function when service is destroyed */\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler?.unsubscribeAll();\r\n\r\n    $(window).off(`resize.grid.${this._gridUid}`);\r\n  }\r\n\r\n  /**\r\n   * Return the last resize dimensions used by the service\r\n   * @return last dimensions\r\n   */\r\n  getLastResizeDimensions(): GridDimension | undefined {\r\n    return this._lastDimensions;\r\n  }\r\n\r\n  handleSingleColumnResizeByContent(columnId: string) {\r\n    const columnDefinitions = this._grid.getColumns() as Column[];\r\n    const columnDefIdx = columnDefinitions.findIndex(col => col.id === columnId);\r\n\r\n    if (columnDefIdx >= 0) {\r\n      // provide the initial column width by reference to the calculation and the result will also be returned by reference\r\n      const columnDef = columnDefinitions[columnDefIdx];\r\n      const columnWidths = { [columnId]: columnDef.originalWidth ?? columnDef.minWidth ?? 0 };\r\n      columnDef.originalWidth = undefined; // reset original width since we want to recalculate it\r\n      this.calculateCellWidthByReadingDataset(columnDef, columnWidths, this.resizeByContentOptions.maxItemToInspectSingleColumnWidthByContent, columnDefIdx);\r\n      this.applyNewCalculatedColumnWidthByReference(columnDef, columnWidths[columnId]);\r\n\r\n      // finally call the re-render for the UI to render the new column width\r\n      this._grid.reRenderColumns(columnDef?.rerenderOnResize ?? false);\r\n    }\r\n  }\r\n\r\n  /** Provide the possibility to pause the resizer for some time, until user decides to re-enabled it later if he wish to. */\r\n  pauseResizer(isResizePaused: boolean) {\r\n    this._resizePaused = isResizePaused;\r\n  }\r\n\r\n  /** Resize the datagrid to fit the browser height & width */\r\n  resizeGrid(delay = 10, newSizes?: GridDimension): Promise<GridDimension | undefined> {\r\n    return new Promise((resolve) => {\r\n      // because of the javascript async nature, we might want to delay the resize a little bit\r\n      delay = delay || 0;\r\n\r\n      if (delay > 0) {\r\n        clearTimeout(this._timer);\r\n        this._timer = setTimeout(() => resolve(this.resizeGridCallback(newSizes)), delay);\r\n      } else {\r\n        resolve(this.resizeGridCallback(newSizes));\r\n      }\r\n    });\r\n  }\r\n\r\n  resizeGridCallback(newSizes?: GridDimension) {\r\n    const lastDimensions = this.resizeGridWithDimensions(newSizes);\r\n    this.onGridAfterResize.next(lastDimensions);\r\n    return lastDimensions;\r\n  }\r\n\r\n  resizeGridWithDimensions(newSizes?: GridDimension): GridDimension | undefined {\r\n    // calculate the available sizes with minimum height defined as a constant\r\n    const availableDimensions = this.calculateGridNewDimensions(this._gridOptions);\r\n    const gridContainerElm = $(`#${this._gridOptions.gridContainerId}`) || {};\r\n\r\n    if ((newSizes || availableDimensions) && this._gridDomElm.length > 0) {\r\n      // get the new sizes, if new sizes are passed (not 0), we will use them else use available space\r\n      // basically if user passes 1 of the dimension, let say he passes just the height,\r\n      // we will use the height as a fixed height but the width will be resized by it's available space\r\n      const newHeight = (newSizes && newSizes.height) ? newSizes.height : availableDimensions && availableDimensions.height;\r\n      const newWidth = (newSizes && newSizes.width) ? newSizes.width : availableDimensions && availableDimensions.width;\r\n\r\n      // apply these new height/width to the datagrid\r\n      if (!this._gridOptions.autoHeight) {\r\n        this._gridDomElm.height(newHeight);\r\n        gridContainerElm.height(newHeight);\r\n      }\r\n      this._gridDomElm.width(newWidth);\r\n      gridContainerElm.width(newWidth);\r\n\r\n      // resize the slickgrid canvas on all browser except some IE versions\r\n      // exclude all IE below IE11\r\n      // IE11 wants to be a better standard (W3C) follower (finally) they even changed their appName output to also have 'Netscape'\r\n      if (new RegExp('MSIE [6-8]').exec(navigator.userAgent) === null && this._grid && this._grid.resizeCanvas) {\r\n        this._grid.resizeCanvas();\r\n      }\r\n\r\n      // also call the grid auto-size columns so that it takes available space when going bigger\r\n      if (this._gridOptions && this._gridOptions.enableAutoSizeColumns && this._grid.autosizeColumns) {\r\n        // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree) to avoid SlickGrid error \"missing stylesheet\"\r\n        if (this._gridUid && $(`.${this._gridUid}`).length > 0) {\r\n          this._grid.autosizeColumns();\r\n        }\r\n      } else if (this._gridOptions.enableAutoResizeColumnsByCellContent && (!this._lastDimensions?.width || newWidth !== this._lastDimensions?.width)) {\r\n        // we can call our resize by content here (when enabled)\r\n        // since the core Slick.Resizer plugin only supports the \"autosizeColumns\"\r\n        this.resizeColumnsByCellContent();\r\n      }\r\n\r\n      // keep last resized dimensions & resolve them to the Promise\r\n      this._lastDimensions = {\r\n        height: newHeight || 0,\r\n        width: newWidth || 0\r\n      };\r\n\r\n      if ((this._gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\r\n        this._lastDimensions.heightWithPagination = (newHeight || 0) + DATAGRID_PAGINATION_HEIGHT;\r\n      }\r\n    }\r\n\r\n    return this._lastDimensions;\r\n  }\r\n\r\n  /**\r\n   * Resize each column width by their cell text/value content (this could potentially go wider than the viewport and end up showing an horizontal scroll).\r\n   * This operation requires to loop through each dataset item to inspect each cell content width and has a performance cost associated to this process.\r\n   *\r\n   * NOTE: please that for performance reasons we will only inspect the first 1000 rows,\r\n   * however user could override it by using the grid option `resizeMaxItemToInspectCellContentWidth` to increase/decrease how many items to inspect.\r\n   * @param {Boolean} recalculateColumnsTotalWidth - defaults to false, do we want to recalculate the necessary total columns width even if it was already calculated?\r\n   */\r\n  resizeColumnsByCellContent(recalculateColumnsTotalWidth = false) {\r\n    const columnDefinitions = this._grid.getColumns();\r\n    const dataset = this.dataView.getItems() as any[];\r\n    const columnWidths: { [columnId in string | number]: number; } = {};\r\n    let reRender = false;\r\n    let readItemCount = 0;\r\n\r\n    if ((!Array.isArray(dataset) || dataset.length === 0) || (this._hasResizedByContentAtLeastOnce && this._gridOptions?.resizeByContentOnlyOnFirstLoad && !recalculateColumnsTotalWidth)) {\r\n      return;\r\n    }\r\n\r\n    // calculate total width necessary by each cell content\r\n    // we won't re-evaluate if we already had calculated the total\r\n    if (this._totalColumnsWidthByContent === 0 || recalculateColumnsTotalWidth) {\r\n      // loop through all columns to get their minWidth or width for later usage\r\n      for (const columnDef of columnDefinitions) {\r\n        columnWidths[columnDef.id] = columnDef.originalWidth ?? columnDef.minWidth ?? 0;\r\n      }\r\n\r\n      // calculate cell width by reading all data from dataset and also parse through any Formatter(s) when exist\r\n      readItemCount = this.calculateCellWidthByReadingDataset(columnDefinitions, columnWidths, this.resizeByContentOptions.maxItemToInspectCellContentWidth);\r\n\r\n      // finally loop through all column definitions one last time to apply new calculated `width` on each elligible column\r\n      let totalColsWidth = 0;\r\n      for (const column of columnDefinitions) {\r\n        const resizeAlwaysRecalculateWidth = column.resizeAlwaysRecalculateWidth ?? this.resizeByContentOptions.alwaysRecalculateColumnWidth ?? false;\r\n\r\n        if (column.originalWidth && !resizeAlwaysRecalculateWidth) {\r\n          column.width = column.originalWidth;\r\n        } else if (columnWidths[column.id] !== undefined) {\r\n          if (column.rerenderOnResize) {\r\n            reRender = true;\r\n          }\r\n\r\n          // let's start with column width found in previous column & data analysis\r\n          this.applyNewCalculatedColumnWidthByReference(column, columnWidths[column.id]);\r\n        }\r\n\r\n        // add the new column width to the total width which we'll use later to compare against viewport width\r\n        totalColsWidth += column.width || 0;\r\n        this._totalColumnsWidthByContent = totalColsWidth;\r\n      }\r\n    }\r\n\r\n    // send updated column definitions widths to SlickGrid\r\n    this._grid.setColumns(columnDefinitions);\r\n    this._hasResizedByContentAtLeastOnce = true;\r\n\r\n    const calculateColumnWidths: { [columnId in string | number]: number | undefined; } = {};\r\n    for (const columnDef of columnDefinitions) {\r\n      calculateColumnWidths[columnDef.id] = columnDef.width;\r\n    }\r\n\r\n    // get the grid container viewport width and if our viewport calculated total columns is greater than the viewport width\r\n    // then we'll call reRenderColumns() when getting wider than viewport or else the default autosizeColumns() when we know we have plenty of space to shrink the columns\r\n    const viewportWidth = this._gridContainerElm.width() ?? 0;\r\n    this._totalColumnsWidthByContent > viewportWidth ? this._grid.reRenderColumns(reRender) : this._grid.autosizeColumns();\r\n  }\r\n\r\n  // --\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Step 1 - The first step will read through the entire dataset (unless max item count is reached),\r\n   * it will analyze each cell of the grid and calculate its max width via its content and column definition info (it will do so by calling step 2 method while looping through each cell).\r\n   * @param columnOrColumns - single or array of column definition(s)\r\n   * @param columnWidths - column width object that will be updated by reference pointers\r\n   * @param columnIndexOverride - an optional column index, if provided it will override the column index position\r\n   * @returns - count of items that was read\r\n   */\r\n  private calculateCellWidthByReadingDataset(columnOrColumns: Column | Column[], columnWidths: { [columnId in string | number]: number; }, maxItemToInspect = 1000, columnIndexOverride?: number) {\r\n    const columnDefinitions = Array.isArray(columnOrColumns) ? columnOrColumns : [columnOrColumns];\r\n\r\n    // const columnDefinitions = this._grid.getColumns();\r\n    const dataset = this.dataView.getItems() as any[];\r\n\r\n    let readItemCount = 0;\r\n    for (const [rowIdx, item] of dataset.entries()) {\r\n      if (rowIdx > maxItemToInspect) {\r\n        break;\r\n      }\r\n      if (Array.isArray(columnDefinitions)) {\r\n        if (typeof columnWidths === 'object') {\r\n          columnDefinitions.forEach((columnDef, colIdx) => {\r\n            const newColumnWidth = this.calculateCellWidthByContent(item, columnDef, rowIdx, columnIndexOverride ?? colIdx, columnWidths[columnDef.id]);\r\n            if (newColumnWidth !== undefined) {\r\n              columnWidths[columnDef.id] = newColumnWidth;\r\n            }\r\n          });\r\n        }\r\n      }\r\n      readItemCount = rowIdx + 1;\r\n    }\r\n\r\n    return readItemCount;\r\n  }\r\n\r\n  /**\r\n   * Step 2 - This step will parse any Formatter(s) if defined, it will then sanitize any HTML tags and calculate the max width from that cell content.\r\n   * This function will be executed on every cell of the grid data.\r\n   * @param {Object} item - item data context object\r\n   * @param {Object} columnDef - column definition\r\n   * @param {Number} rowIdx - row index\r\n   * @param {Number} colIdx - column (cell) index\r\n   * @param {Number} initialMininalColumnWidth - initial width, could be coming from `minWidth` or a default `width`\r\n   * @returns - column width\r\n   */\r\n  private calculateCellWidthByContent(item: any, columnDef: Column, rowIdx: number, colIdx: number, initialMininalColumnWidth?: number): number | undefined {\r\n    const resizeCellCharWidthInPx = this.resizeByContentOptions.cellCharWidthInPx ?? 7; // width in pixels of a string character, this can vary depending on which font family/size is used & cell padding\r\n\r\n    if (!columnDef.originalWidth) {\r\n      const charWidthPx = columnDef?.resizeCharWidthInPx ?? resizeCellCharWidthInPx;\r\n      const formattedData = parseFormatterWhenExist(columnDef?.formatter, rowIdx, colIdx, columnDef, item, this._grid);\r\n      const formattedDataSanitized = sanitizeHtmlToText(formattedData);\r\n      const formattedTextWidthInPx = Math.ceil(formattedDataSanitized.length * charWidthPx);\r\n      const resizeMaxWidthThreshold = columnDef.resizeMaxWidthThreshold;\r\n      if (columnDef && (initialMininalColumnWidth === undefined || formattedTextWidthInPx > initialMininalColumnWidth)) {\r\n        initialMininalColumnWidth = (resizeMaxWidthThreshold !== undefined && formattedTextWidthInPx > resizeMaxWidthThreshold)\r\n          ? resizeMaxWidthThreshold\r\n          : (columnDef.maxWidth !== undefined && formattedTextWidthInPx > columnDef.maxWidth) ? columnDef.maxWidth : formattedTextWidthInPx;\r\n      }\r\n    }\r\n    return initialMininalColumnWidth;\r\n  }\r\n\r\n  /**\r\n   * Step 3 - Apply the new calculated width, it might or might not use this calculated width depending on a few conditions.\r\n   * One of those condition will be to check that the new width doesn't go over a maxWidth and/or a maxWidthThreshold\r\n   * @param {Object} column - column definition to apply the width\r\n   * @param {Number} calculatedColumnWidth - new calculated column width to possibly apply\r\n   */\r\n  private applyNewCalculatedColumnWidthByReference(column: Column<any>, calculatedColumnWidth: number) {\r\n    // read a few optional resize by content grid options\r\n    const resizeCellPaddingWidthInPx = this.resizeByContentOptions.cellPaddingWidthInPx ?? 6;\r\n    const resizeFormatterPaddingWidthInPx = this.resizeByContentOptions.formatterPaddingWidthInPx ?? 6;\r\n    const fieldType = column?.filter?.type ?? column?.type ?? FieldType.string;\r\n\r\n    // let's start with column width found in previous column & data analysis\r\n    let newColWidth = calculatedColumnWidth;\r\n\r\n    // apply optional ratio which is typically 1, except for string where we use a ratio of around ~0.9 since we have more various thinner characters like (i, l, t, ...)\r\n    const stringWidthRatio = column?.resizeCalcWidthRatio ?? this.resizeByContentOptions.defaultRatioForStringType ?? 0.9;\r\n    newColWidth *= fieldType === 'string' ? stringWidthRatio : 1;\r\n\r\n    // apply extra cell padding, custom padding & editor formatter padding\r\n    // --\r\n    newColWidth += resizeCellPaddingWidthInPx;\r\n    if (column.resizeExtraWidthPadding) {\r\n      newColWidth += column.resizeExtraWidthPadding;\r\n    }\r\n    if (column.editor && this._gridOptions.editable) {\r\n      newColWidth += resizeFormatterPaddingWidthInPx;\r\n    }\r\n\r\n    // make sure we're not over a column max width and/or optional custom max width threshold\r\n    if (column.maxWidth !== undefined && newColWidth > column.maxWidth) {\r\n      newColWidth = column.maxWidth;\r\n    }\r\n    if (column.resizeMaxWidthThreshold !== undefined && newColWidth > column.resizeMaxWidthThreshold) {\r\n      newColWidth = column.resizeMaxWidthThreshold;\r\n    }\r\n\r\n    // make the value the closest bottom integer\r\n    newColWidth = Math.ceil(newColWidth);\r\n\r\n    // finally only apply the new width if user didn't yet provide one and/or if user really wants to specifically ask for a recalculate\r\n    if (column.originalWidth === undefined || column.resizeAlwaysRecalculateWidth === true || this.resizeByContentOptions.alwaysRecalculateColumnWidth === true) {\r\n      column.width = this.readjustNewColumnWidthWhenOverLimit(column, newColWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks wether the new calculated column width is valid or not, if it's not then return a lower and acceptable width.\r\n   * When using frozen (pinned) column, we cannot make our column wider than the grid viewport because it would become unusable/unscrollable\r\n   * and so if we do reach that threshold then our calculated column width becomes officially invalid\r\n   * @param {Object} column - column definition\r\n   * @param {Number} newColumnWidth - calculated column width input\r\n   * @returns boolean\r\n   */\r\n  private readjustNewColumnWidthWhenOverLimit(column: Column, newColumnWidth: number): number {\r\n    const frozenColumnIdx = this._gridOptions.frozenColumn ?? -1;\r\n    const columns = (this._grid && this._grid.getColumns() || []) as Column[];\r\n    const columnIdx = columns.findIndex(col => col.id === column.id) ?? 0;\r\n    let adjustedWidth = newColumnWidth;\r\n\r\n    if (frozenColumnIdx >= 0 && columnIdx <= frozenColumnIdx) {\r\n      const allViewports = Array.from(this._grid.getViewports() as HTMLElement[]);\r\n      if (allViewports) {\r\n        const leftViewportWidth = allViewports.find(viewport => viewport.classList.contains('slick-viewport-left'))?.clientWidth ?? 0;\r\n        const rightViewportWidth = allViewports.find(viewport => viewport.classList.contains('slick-viewport-right'))?.clientWidth ?? 0;\r\n        const viewportFullWidth = leftViewportWidth + rightViewportWidth;\r\n        const leftViewportWidthMinusCurrentCol = leftViewportWidth - (column.width ?? 0);\r\n        const isGreaterThanFullViewportWidth = (leftViewportWidthMinusCurrentCol + newColumnWidth) > viewportFullWidth;\r\n\r\n        if (isGreaterThanFullViewportWidth) {\r\n          const resizeWidthToRemoveFromExceededWidthReadjustment = this.resizeByContentOptions.widthToRemoveFromExceededWidthReadjustment ?? 50;\r\n          adjustedWidth = (leftViewportWidth - leftViewportWidthMinusCurrentCol + rightViewportWidth - resizeWidthToRemoveFromExceededWidthReadjustment);\r\n        }\r\n      }\r\n    }\r\n    return Math.ceil(adjustedWidth);\r\n  }\r\n}\r\n","import 'slickgrid/plugins/slick.headermenu';\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { Constants } from '../constants';\r\nimport {\r\n  Column,\r\n  ColumnSort,\r\n  CurrentSorter,\r\n  EmitterType,\r\n  Extension,\r\n  GridOption,\r\n  HeaderMenu,\r\n  Locale,\r\n  MenuCommandItem,\r\n  MenuCommandItemCallbackArgs,\r\n  SlickEventHandler,\r\n} from '../models/index';\r\nimport { FilterService } from '../services/filter.service';\r\nimport { ResizerService } from '../services/resizer.service';\r\nimport { SortService } from '../services/sort.service';\r\nimport { SharedService } from '../services/shared.service';\r\nimport { arrayRemoveItemByIndex, getTranslationPrefix } from '../services/utilities';\r\nimport { ExtensionUtility } from './extensionUtility';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n@Injectable()\r\nexport class HeaderMenuExtension implements Extension {\r\n  private _addon: any;\r\n  private _eventHandler: SlickEventHandler;\r\n  private _locales!: Locale;\r\n\r\n  constructor(\r\n    private readonly extensionUtility: ExtensionUtility,\r\n    private readonly filterService: FilterService,\r\n    private readonly resizerService: ResizerService,\r\n    private readonly sharedService: SharedService,\r\n    private readonly sortService: SortService,\r\n    @Optional() private readonly translate: TranslateService,\r\n  ) {\r\n    this._eventHandler = new Slick.EventHandler();\r\n  }\r\n\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    if (this._addon && this._addon.destroy) {\r\n      this._addon.destroy();\r\n    }\r\n    this._addon = null;\r\n  }\r\n\r\n  /** Get the instance of the SlickGrid addon (control or plugin). */\r\n  getAddonInstance() {\r\n    return this._addon;\r\n  }\r\n\r\n  /**\r\n   * Create the Header Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)\r\n   * @param grid\r\n   * @param dataView\r\n   * @param columnDefinitions\r\n   */\r\n  register(): any {\r\n    if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableTranslate && (!this.translate || !this.translate.instant)) {\r\n      throw new Error('[Angular-Slickgrid] requires \"ngx-translate\" to be installed and configured when the grid option \"enableTranslate\" is enabled.');\r\n    }\r\n\r\n    if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {\r\n      // get locales provided by user in forRoot or else use default English locales via the Constants\r\n      this._locales = this.sharedService.gridOptions && this.sharedService.gridOptions.locales || Constants.locales;\r\n\r\n      this.sharedService.gridOptions.headerMenu = { ...this.getDefaultHeaderMenuOptions(), ...this.sharedService.gridOptions.headerMenu };\r\n      if (this.sharedService.gridOptions.enableHeaderMenu) {\r\n        this.sharedService.gridOptions.headerMenu = this.addHeaderMenuCustomCommands(this.sharedService.gridOptions, this.sharedService.columnDefinitions);\r\n      }\r\n\r\n      this._addon = new Slick.Plugins.HeaderMenu(this.sharedService.gridOptions.headerMenu);\r\n      this.sharedService.grid.registerPlugin(this._addon);\r\n\r\n      // hook all events\r\n      if (this.sharedService.grid && this.sharedService.gridOptions.headerMenu) {\r\n        if (this.sharedService.gridOptions.headerMenu.onExtensionRegistered) {\r\n          this.sharedService.gridOptions.headerMenu.onExtensionRegistered(this._addon);\r\n        }\r\n        this._eventHandler.subscribe(this._addon.onCommand, (e: any, args: MenuCommandItemCallbackArgs) => {\r\n          this.executeHeaderMenuInternalCommands(e, args);\r\n          if (this.sharedService.gridOptions.headerMenu && typeof this.sharedService.gridOptions.headerMenu.onCommand === 'function') {\r\n            this.sharedService.gridOptions.headerMenu.onCommand(e, args);\r\n          }\r\n        });\r\n        if (this.sharedService.gridOptions.headerMenu && typeof this.sharedService.gridOptions.headerMenu.onBeforeMenuShow === 'function') {\r\n          this._eventHandler.subscribe(this._addon.onBeforeMenuShow, (e: Event, args: { grid: any; column: Column; menu: any; }) => {\r\n            if (this.sharedService.gridOptions.headerMenu && this.sharedService.gridOptions.headerMenu.onBeforeMenuShow) {\r\n              this.sharedService.gridOptions.headerMenu.onBeforeMenuShow(e, args);\r\n            }\r\n          });\r\n        }\r\n        if (this.sharedService.gridOptions.headerMenu && typeof this.sharedService.gridOptions.headerMenu.onAfterMenuShow === 'function') {\r\n          this._eventHandler.subscribe(this._addon.onAfterMenuShow, (e: Event, args: { grid: any; column: Column; menu: any; }) => {\r\n            if (this.sharedService.gridOptions.headerMenu && this.sharedService.gridOptions.headerMenu.onAfterMenuShow) {\r\n              this.sharedService.gridOptions.headerMenu.onAfterMenuShow(e, args);\r\n            }\r\n          });\r\n        }\r\n      }\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Create Header Menu with Custom Commands if user has enabled Header Menu\r\n   * @param options\r\n   * @param columnDefinitions\r\n   * @return header menu\r\n   */\r\n  private addHeaderMenuCustomCommands(options: GridOption, columnDefinitions: Column[]): HeaderMenu {\r\n    const headerMenuOptions = options.headerMenu || {};\r\n    const gridOptions = this.sharedService.gridOptions;\r\n    const translationPrefix = getTranslationPrefix(gridOptions);\r\n\r\n    if (columnDefinitions && Array.isArray(columnDefinitions) && options.enableHeaderMenu) {\r\n      columnDefinitions.forEach((columnDef: Column) => {\r\n        if (columnDef && !columnDef.excludeFromHeaderMenu) {\r\n          if (!columnDef.header || !columnDef.header.menu) {\r\n            columnDef.header = {\r\n              menu: {\r\n                items: []\r\n              }\r\n            };\r\n          }\r\n\r\n          const columnHeaderMenuItems: Array<MenuCommandItem | 'divider'> = columnDef?.header?.menu?.items ?? [];\r\n\r\n          // Freeze Column (pinning)\r\n          let hasFrozenOrResizeCommand = false;\r\n          if (headerMenuOptions && !headerMenuOptions.hideFreezeColumnsCommand) {\r\n            hasFrozenOrResizeCommand = true;\r\n            if (columnHeaderMenuItems.filter(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === 'freeze-columns').length === 0) {\r\n              columnHeaderMenuItems.push({\r\n                iconCssClass: headerMenuOptions.iconFreezeColumns || 'fa fa-thumb-tack',\r\n                title: options.enableTranslate ? this.translate.instant(`${translationPrefix}FREEZE_COLUMNS`) : this._locales && this._locales.TEXT_FREEZE_COLUMNS,\r\n                command: 'freeze-columns',\r\n                positionOrder: 47\r\n              });\r\n            }\r\n          }\r\n          // Column Resize by Content (column autofit)\r\n          if (headerMenuOptions && !headerMenuOptions.hideColumnResizeByContentCommand && this.sharedService.gridOptions.enableColumnResizeOnDoubleClick) {\r\n            hasFrozenOrResizeCommand = true;\r\n            if (!columnHeaderMenuItems.some(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === 'column-resize-by-content')) {\r\n              columnHeaderMenuItems.push({\r\n                iconCssClass: headerMenuOptions.iconColumnResizeByContentCommand || 'fa fa-arrows-h',\r\n                title: this.extensionUtility.translateWhenEnabledAndServiceExist(`${translationPrefix}COLUMN_RESIZE_BY_CONTENT`, 'TEXT_COLUMN_RESIZE_BY_CONTENT'),\r\n                command: 'column-resize-by-content',\r\n                positionOrder: 48\r\n              });\r\n            }\r\n          }\r\n\r\n          // add a divider (separator) between the top freeze columns commands and the rest of the commands\r\n          if (hasFrozenOrResizeCommand && !columnHeaderMenuItems.some(item => item !== 'divider' && item.positionOrder === 49)) {\r\n            columnHeaderMenuItems.push({ divider: true, command: '', positionOrder: 49 });\r\n          }\r\n\r\n          // Sorting Commands\r\n          if (options.enableSorting && columnDef.sortable && headerMenuOptions && !headerMenuOptions.hideSortCommands) {\r\n            if (columnHeaderMenuItems.filter(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === 'sort-asc').length === 0) {\r\n              columnHeaderMenuItems.push({\r\n                iconCssClass: headerMenuOptions.iconSortAscCommand || 'fa fa-sort-asc',\r\n                title: options.enableTranslate ? this.translate.instant(`${translationPrefix}SORT_ASCENDING`) : this._locales && this._locales.TEXT_SORT_ASCENDING,\r\n                command: 'sort-asc',\r\n                positionOrder: 50\r\n              });\r\n            }\r\n            if (columnHeaderMenuItems.filter(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === 'sort-desc').length === 0) {\r\n              columnHeaderMenuItems.push({\r\n                iconCssClass: headerMenuOptions.iconSortDescCommand || 'fa fa-sort-desc',\r\n                title: options.enableTranslate ? this.translate.instant(`${translationPrefix}SORT_DESCENDING`) : this._locales && this._locales.TEXT_SORT_DESCENDING,\r\n                command: 'sort-desc',\r\n                positionOrder: 51\r\n              });\r\n            }\r\n\r\n            // add a divider (separator) between the top sort commands and the other clear commands\r\n            if (columnHeaderMenuItems.filter(item => item !== 'divider' && item.hasOwnProperty('command') && item.positionOrder === 52).length === 0) {\r\n              columnHeaderMenuItems.push({ divider: true, command: '', positionOrder: 52 });\r\n            }\r\n\r\n            if (!headerMenuOptions.hideClearSortCommand && columnHeaderMenuItems.filter(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === 'clear-sort').length === 0) {\r\n              columnHeaderMenuItems.push({\r\n                iconCssClass: headerMenuOptions.iconClearSortCommand || 'fa fa-unsorted',\r\n                title: options.enableTranslate ? this.translate.instant(`${translationPrefix}REMOVE_SORT`) : this._locales && this._locales.TEXT_REMOVE_SORT,\r\n                command: 'clear-sort',\r\n                positionOrder: 54\r\n              });\r\n            }\r\n          }\r\n\r\n          // Filtering Commands\r\n          if (options.enableFiltering && columnDef.filterable && headerMenuOptions && !headerMenuOptions.hideFilterCommands) {\r\n            if (!headerMenuOptions.hideClearFilterCommand && columnHeaderMenuItems.filter(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === 'clear-filter').length === 0) {\r\n              columnHeaderMenuItems.push({\r\n                iconCssClass: headerMenuOptions.iconClearFilterCommand || 'fa fa-filter',\r\n                title: options.enableTranslate ? this.translate.instant(`${translationPrefix}REMOVE_FILTER`) : this._locales && this._locales.TEXT_REMOVE_FILTER,\r\n                command: 'clear-filter',\r\n                positionOrder: 53\r\n              });\r\n            }\r\n          }\r\n\r\n          // Hide Column Command\r\n          if (headerMenuOptions && !headerMenuOptions.hideColumnHideCommand && columnHeaderMenuItems.filter(item => item !== 'divider' && item.hasOwnProperty('command') && item.command === 'hide').length === 0) {\r\n            columnHeaderMenuItems.push({\r\n              iconCssClass: headerMenuOptions.iconColumnHideCommand || 'fa fa-times',\r\n              title: options.enableTranslate ? this.translate.instant(`${translationPrefix}HIDE_COLUMN`) : this._locales && this._locales.TEXT_HIDE_COLUMN,\r\n              command: 'hide',\r\n              positionOrder: 55\r\n            });\r\n          }\r\n\r\n          this.extensionUtility.translateItems(columnHeaderMenuItems, 'titleKey', 'title');\r\n          this.extensionUtility.sortItems(columnHeaderMenuItems, 'positionOrder');\r\n        }\r\n      });\r\n    }\r\n    return headerMenuOptions;\r\n  }\r\n\r\n  /** Hide a column from the grid */\r\n  hideColumn(column: Column) {\r\n    if (this.sharedService?.grid?.getColumnIndex) {\r\n      const columnIndex = this.sharedService.grid.getColumnIndex(column.id);\r\n      const currentVisibleColumns = this.sharedService.grid.getColumns() as Column[];\r\n\r\n      // if we're using frozen columns, we need to readjust pinning when the new hidden column is on the left pinning container\r\n      // we need to do this because SlickGrid freezes by index and has no knowledge of the columns themselves\r\n      const frozenColumnIndex = this.sharedService.gridOptions.frozenColumn !== undefined ? this.sharedService.gridOptions.frozenColumn : -1;\r\n      if (frozenColumnIndex >= 0 && frozenColumnIndex >= columnIndex) {\r\n        this.sharedService.gridOptions.frozenColumn = frozenColumnIndex - 1;\r\n        this.sharedService.grid.setOptions({ frozenColumn: this.sharedService.gridOptions.frozenColumn });\r\n      }\r\n\r\n      // then proceed with hiding the column in SlickGrid & trigger an event when done\r\n      const visibleColumns = arrayRemoveItemByIndex(currentVisibleColumns, columnIndex);\r\n      this.sharedService.visibleColumns = visibleColumns;\r\n      this.sharedService.grid.setColumns(visibleColumns);\r\n      this.sharedService.onHeaderMenuHideColumns.next(visibleColumns);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Translate the Header Menu titles, we need to loop through all column definition to re-translate them\r\n   */\r\n  translateHeaderMenu() {\r\n    if (this.sharedService.gridOptions && this.sharedService.gridOptions.headerMenu) {\r\n      this.resetHeaderMenuTranslations(this.sharedService.visibleColumns);\r\n    }\r\n  }\r\n\r\n  // --\r\n  // private functions\r\n  // ------------------\r\n\r\n  /** @return default Header Menu options */\r\n  private getDefaultHeaderMenuOptions(): HeaderMenu {\r\n    return {\r\n      autoAlignOffset: 12,\r\n      minWidth: 140,\r\n      hideColumnHideCommand: false,\r\n      hideSortCommands: false,\r\n      title: ''\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Reset all the internal Menu options which have text to translate\r\n   * @param header menu object\r\n   */\r\n  private resetHeaderMenuTranslations(columnDefinitions: Column[]) {\r\n    const gridOptions = this.sharedService.gridOptions;\r\n    const translationPrefix = getTranslationPrefix(gridOptions);\r\n\r\n    columnDefinitions.forEach((columnDef: Column) => {\r\n      if (columnDef && columnDef.header && columnDef.header && columnDef.header.menu && columnDef.header.menu.items) {\r\n        if (!columnDef.excludeFromHeaderMenu) {\r\n          const columnHeaderMenuItems: Array<MenuCommandItem | 'divider'> = columnDef.header.menu.items || [];\r\n          columnHeaderMenuItems.forEach(item => {\r\n            if (item !== 'divider' && item.hasOwnProperty('command')) {\r\n              switch (item.command) {\r\n                case 'column-resize-by-content':\r\n                  item.title = this.translate.instant(`${translationPrefix}COLUMN_RESIZE_BY_CONTENT`) || this._locales && this._locales.TEXT_COLUMN_RESIZE_BY_CONTENT;\r\n                  break;\r\n                case 'clear-filter':\r\n                  item.title = this.translate.instant(`${translationPrefix}REMOVE_FILTER`) || this._locales && this._locales.TEXT_REMOVE_FILTER;\r\n                  break;\r\n                case 'clear-sort':\r\n                  item.title = this.translate.instant(`${translationPrefix}REMOVE_SORT`) || this._locales && this._locales.TEXT_REMOVE_SORT;\r\n                  break;\r\n                case 'freeze-columns':\r\n                  item.title = this.translate.instant(`${translationPrefix}FREEZE_COLUMNS`) || this._locales && this._locales.TEXT_FREEZE_COLUMNS;\r\n                  break;\r\n                case 'sort-asc':\r\n                  item.title = this.translate.instant(`${translationPrefix}SORT_ASCENDING`) || this._locales && this._locales.TEXT_SORT_ASCENDING;\r\n                  break;\r\n                case 'sort-desc':\r\n                  item.title = this.translate.instant(`${translationPrefix}SORT_DESCENDING`) || this._locales && this._locales.TEXT_SORT_DESCENDING;\r\n                  break;\r\n                case 'hide':\r\n                  item.title = this.translate.instant(`${translationPrefix}HIDE_COLUMN`) || this._locales && this._locales.TEXT_HIDE_COLUMN;\r\n                  break;\r\n              }\r\n            }\r\n\r\n            // re-translate if there's a \"titleKey\"\r\n            if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableTranslate) {\r\n              this.extensionUtility.translateItems(columnHeaderMenuItems, 'titleKey', 'title');\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Clear the Filter on the current column (if it's actually filtered) */\r\n  private clearColumnFilter(event: Event, args: MenuCommandItemCallbackArgs) {\r\n    if (args && args.column) {\r\n      this.filterService.clearFilterByColumnId(event, args.column.id);\r\n    }\r\n  }\r\n\r\n  /** Clear the Sort on the current column (if it's actually sorted) */\r\n  private clearColumnSort(event: Event, args: MenuCommandItemCallbackArgs) {\r\n    if (args && args.column && this.sharedService) {\r\n      this.sortService.clearSortByColumnId(event, args.column.id);\r\n    }\r\n  }\r\n\r\n  /** Execute the Header Menu Commands that was triggered by the onCommand subscribe */\r\n  private executeHeaderMenuInternalCommands(event: Event, args: MenuCommandItemCallbackArgs) {\r\n    if (args && args.command) {\r\n      switch (args.command) {\r\n        case 'hide':\r\n          this.hideColumn(args.column);\r\n          if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableAutoSizeColumns) {\r\n            this.sharedService.grid.autosizeColumns();\r\n          }\r\n          break;\r\n        case 'clear-filter':\r\n          this.clearColumnFilter(event, args);\r\n          break;\r\n        case 'clear-sort':\r\n          this.clearColumnSort(event, args);\r\n          break;\r\n        case 'column-resize-by-content':\r\n          this.resizerService.handleSingleColumnResizeByContent(`${args.column.id}`);\r\n          break;\r\n        case 'freeze-columns':\r\n          const visibleColumns = [...this.sharedService.visibleColumns];\r\n          const columnPosition = visibleColumns.findIndex((col) => col.id === args.column.id);\r\n          const newGridOptions = { frozenColumn: columnPosition, enableMouseWheelScrollHandler: true };\r\n          this.sharedService.grid.setOptions(newGridOptions);\r\n          this.sharedService.gridOptions.frozenColumn = newGridOptions.frozenColumn;\r\n          this.sharedService.gridOptions.enableMouseWheelScrollHandler = newGridOptions.enableMouseWheelScrollHandler;\r\n          this.sharedService.frozenVisibleColumnId = args.column.id;\r\n\r\n          // to freeze columns, we need to take only the visible columns and we also need to use setColumns() when some of them are hidden\r\n          // to make sure that we only use the visible columns, not doing this will have the undesired effect of showing back some of the hidden columns\r\n          if (this.sharedService.hasColumnsReordered || (Array.isArray(this.sharedService.allColumns) && visibleColumns.length !== this.sharedService.allColumns.length)) {\r\n            this.sharedService.grid.setColumns(visibleColumns);\r\n          }\r\n\r\n          // we also need to autosize columns if the option is enabled\r\n          const gridOptions = this.sharedService.grid.getOptions();\r\n          if (gridOptions.enableAutoSizeColumns) {\r\n            this.sharedService.grid.autosizeColumns();\r\n          }\r\n          break;\r\n        case 'sort-asc':\r\n        case 'sort-desc':\r\n          const isSortingAsc = (args.command === 'sort-asc');\r\n          this.sortColumn(event, args, isSortingAsc);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Sort the current column */\r\n  private sortColumn(event: Event, args: MenuCommandItemCallbackArgs, isSortingAsc = true) {\r\n    if (args && args.column) {\r\n      // get previously sorted columns\r\n      const columnDef = args.column;\r\n      const sortedColsWithoutCurrent: ColumnSort[] = this.sortService.getCurrentColumnSorts(args.column.id + '');\r\n\r\n      let emitterType: EmitterType = EmitterType.local;\r\n\r\n      // add to the column array, the column sorted by the header menu\r\n      sortedColsWithoutCurrent.push({ columnId: columnDef.id, sortCol: columnDef, sortAsc: isSortingAsc });\r\n      if (this.sharedService.gridOptions.backendServiceApi) {\r\n        this.sortService.onBackendSortChanged(event, { multiColumnSort: true, sortCols: sortedColsWithoutCurrent, grid: this.sharedService.grid });\r\n        emitterType = EmitterType.remote;\r\n      } else if (this.sharedService.dataView) {\r\n        this.sortService.onLocalSortChanged(this.sharedService.grid, sortedColsWithoutCurrent);\r\n        emitterType = EmitterType.local;\r\n      } else {\r\n        // when using customDataView, we will simply send it as a onSort event with notify\r\n        const isMultiSort = this.sharedService && this.sharedService.gridOptions && this.sharedService.gridOptions.multiColumnSort || false;\r\n        const sortOutput = isMultiSort ? sortedColsWithoutCurrent : sortedColsWithoutCurrent[0];\r\n        args.grid.onSort.notify(sortOutput);\r\n      }\r\n\r\n      // update the this.sharedService.gridObj sortColumns array which will at the same add the visual sort icon(s) on the UI\r\n      const newSortColumns: ColumnSort[] = sortedColsWithoutCurrent.map((col) => {\r\n        return {\r\n          columnId: col && col.sortCol && col.sortCol.id,\r\n          sortAsc: col && col.sortAsc,\r\n          sortCol: col && col.sortCol,\r\n        };\r\n      });\r\n\r\n      // add sort icon in UI\r\n      this.sharedService.grid.setSortColumns(newSortColumns);\r\n\r\n      // if we have an emitter type set, we will emit a sort changed\r\n      // for the Grid State Service to see the change.\r\n      // We also need to pass current sorters changed to the emitSortChanged method\r\n      if (emitterType) {\r\n        const currentLocalSorters: CurrentSorter[] = [];\r\n        newSortColumns.forEach((sortCol) => {\r\n          currentLocalSorters.push({\r\n            columnId: sortCol.columnId + '',\r\n            direction: sortCol.sortAsc ? 'ASC' : 'DESC'\r\n          });\r\n        });\r\n        this.sortService.emitSortChanged(emitterType, currentLocalSorters);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import 'slickgrid/plugins/slick.rowdetailview';\r\nimport 'slickgrid/plugins/slick.rowselectionmodel';\r\nimport { ApplicationRef, ComponentRef, Injectable, Type, ViewContainerRef } from '@angular/core';\r\nimport { Observable, Subject, Subscription } from 'rxjs';\r\nimport * as DOMPurify_ from 'dompurify';\r\nconst DOMPurify = DOMPurify_; // patch to fix rollup to work\r\n\r\nimport { Column, Extension, GridOption, RowDetailView, SlickEventHandler } from '../models/index';\r\nimport { ExtensionUtility } from './extensionUtility';\r\nimport { AngularUtilService } from '../services/angularUtil.service';\r\nimport { FilterService } from '../services/filter.service';\r\nimport { SharedService } from '../services/shared.service';\r\nimport { addToArrayWhenNotExists, castToPromise, unsubscribeAllObservables } from '../services/utilities';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\nconst ROW_DETAIL_CONTAINER_PREFIX = 'container_';\r\nconst PRELOAD_CONTAINER_PREFIX = 'container_loading';\r\n\r\nexport interface CreatedView {\r\n  id: string | number;\r\n  dataContext: any;\r\n  componentRef?: ComponentRef<any>;\r\n}\r\n\r\n@Injectable()\r\nexport class RowDetailViewExtension implements Extension {\r\n  rowDetailContainer!: ViewContainerRef;\r\n  private _addon: any;\r\n  private _addonOptions!: RowDetailView | null;\r\n  private _eventHandler: SlickEventHandler;\r\n  private _preloadComponent: Type<object> | undefined;\r\n  private _views: CreatedView[] = [];\r\n  private _viewComponent!: Type<object>;\r\n  private _subscriptions: Subscription[] = [];\r\n  private _userProcessFn!: (item: any) => Promise<any> | Observable<any> | Subject<any>;\r\n\r\n  constructor(\r\n    private angularUtilService: AngularUtilService,\r\n    private appRef: ApplicationRef,\r\n    private extensionUtility: ExtensionUtility,\r\n    private filterService: FilterService,\r\n    private sharedService: SharedService,\r\n  ) {\r\n    this._eventHandler = new Slick.EventHandler();\r\n  }\r\n\r\n  private get datasetIdPropName(): string {\r\n    return this.gridOptions.datasetIdPropertyName || 'id';\r\n  }\r\n\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  get gridOptions(): GridOption {\r\n    return this.sharedService && this.sharedService.gridOptions || {};\r\n  }\r\n\r\n  get rowDetailViewOptions(): RowDetailView | undefined {\r\n    return this.gridOptions.rowDetailView;\r\n  }\r\n\r\n  /** Dispose of the RowDetailView Extension */\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    if (this._addon && this._addon.destroy) {\r\n      this._addon.destroy();\r\n    }\r\n    this.extensionUtility.nullifyFunctionNameStartingWithOn(this._addonOptions);\r\n    this._addonOptions = null;\r\n\r\n    // also unsubscribe all RxJS subscriptions\r\n    this._subscriptions = unsubscribeAllObservables(this._subscriptions);\r\n    this.disposeAllViewComponents();\r\n  }\r\n\r\n  /** Dispose of all the opened Row Detail Panels Angular View Components */\r\n  disposeAllViewComponents() {\r\n    this._views.forEach((compRef) => this.disposeViewComponent(compRef));\r\n    this._views = [];\r\n  }\r\n\r\n  /**\r\n   * Create the plugin before the Grid creation, else it will behave oddly.\r\n   * Mostly because the column definitions might change after the grid creation\r\n   */\r\n  create(columnDefinitions: Column[], gridOptions: GridOption) {\r\n    if (columnDefinitions && gridOptions) {\r\n      if (!gridOptions.rowDetailView) {\r\n        throw new Error('The Row Detail View requires options to be passed via the \"rowDetailView\" property of the Grid Options');\r\n      }\r\n\r\n      if (gridOptions && gridOptions.rowDetailView) {\r\n        if (!this._addon) {\r\n          if (typeof gridOptions.rowDetailView.process === 'function') {\r\n            // we need to keep the user \"process\" method and replace it with our own execution method\r\n            // we do this because when we get the item detail, we need to call \"onAsyncResponse.notify\" for the plugin to work\r\n            this._userProcessFn = gridOptions.rowDetailView.process;                // keep user's process method\r\n            gridOptions.rowDetailView.process = (item) => this.onProcessing(item);  // replace process method & run our internal one\r\n          } else {\r\n            throw new Error('You need to provide a \"process\" function for the Row Detail Extension to work properly');\r\n          }\r\n\r\n          // load the Preload & RowDetail Templates (could be straight HTML or Angular View/ViewModel)\r\n          // when those are Angular View/ViewModel, we need to create View Component & provide the html containers to the Plugin (preTemplate/postTemplate methods)\r\n          if (!gridOptions.rowDetailView.preTemplate) {\r\n            this._preloadComponent = gridOptions && gridOptions.rowDetailView && gridOptions.rowDetailView.preloadComponent;\r\n            gridOptions.rowDetailView.preTemplate = () => DOMPurify.sanitize(`<div class=\"${PRELOAD_CONTAINER_PREFIX}\"></div>`);\r\n          }\r\n          if (!gridOptions.rowDetailView.postTemplate) {\r\n            this._viewComponent = gridOptions && gridOptions.rowDetailView && gridOptions.rowDetailView.viewComponent;\r\n            gridOptions.rowDetailView.postTemplate = (itemDetail: any) => DOMPurify.sanitize(`<div class=\"${ROW_DETAIL_CONTAINER_PREFIX}${itemDetail[this.datasetIdPropName]}\"></div>`);\r\n          }\r\n\r\n          // finally register the Row Detail View Plugin\r\n          this._addonOptions = gridOptions.rowDetailView;\r\n          this._addon = new Slick.Plugins.RowDetailView(this._addonOptions);\r\n        }\r\n        const iconColumn: Column = this._addon.getColumnDefinition();\r\n        if (typeof iconColumn === 'object') {\r\n          iconColumn.excludeFromExport = true;\r\n          iconColumn.excludeFromColumnPicker = true;\r\n          iconColumn.excludeFromGridMenu = true;\r\n          iconColumn.excludeFromQuery = true;\r\n          iconColumn.excludeFromHeaderMenu = true;\r\n\r\n          // column index position in the grid\r\n          const columnPosition = gridOptions && gridOptions.rowDetailView && gridOptions.rowDetailView.columnIndexPosition || 0;\r\n          if (columnPosition > 0) {\r\n            columnDefinitions.splice(columnPosition, 0, iconColumn);\r\n          } else {\r\n            columnDefinitions.unshift(iconColumn);\r\n          }\r\n        }\r\n      }\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Get the instance of the SlickGrid addon (control or plugin). */\r\n  getAddonInstance() {\r\n    return this._addon;\r\n  }\r\n\r\n  register(rowSelectionPlugin?: any) {\r\n    if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {\r\n      // the plugin has to be created BEFORE the grid (else it behaves oddly), but we can only watch grid events AFTER the grid is created\r\n      this.sharedService.grid.registerPlugin(this._addon);\r\n\r\n      // this also requires the Row Selection Model to be registered as well\r\n      if (!rowSelectionPlugin || !this.sharedService.grid.getSelectionModel()) {\r\n        rowSelectionPlugin = new Slick.RowSelectionModel(this.sharedService.gridOptions.rowSelectionOptions || { selectActiveRow: true });\r\n        this.sharedService.grid.setSelectionModel(rowSelectionPlugin);\r\n      }\r\n\r\n      // hook all events\r\n      if (this.sharedService.grid && this.rowDetailViewOptions) {\r\n        if (this.rowDetailViewOptions.onExtensionRegistered) {\r\n          this.rowDetailViewOptions.onExtensionRegistered(this._addon);\r\n        }\r\n        this._eventHandler.subscribe(this._addon.onAsyncResponse, (e: any, args: { item: any; detailView: any }) => {\r\n          if (this.rowDetailViewOptions && typeof this.rowDetailViewOptions.onAsyncResponse === 'function') {\r\n            this.rowDetailViewOptions.onAsyncResponse(e, args);\r\n          }\r\n        });\r\n        this._eventHandler.subscribe(this._addon.onAsyncEndUpdate, (e: any, args: { grid: any; item: any; }) => {\r\n          // triggers after backend called \"onAsyncResponse.notify()\"\r\n          this.renderViewModel(args && args.item);\r\n\r\n          if (this.rowDetailViewOptions && typeof this.rowDetailViewOptions.onAsyncEndUpdate === 'function') {\r\n            this.rowDetailViewOptions.onAsyncEndUpdate(e, args);\r\n          }\r\n        });\r\n        this._eventHandler.subscribe(this._addon.onAfterRowDetailToggle, (e: any, args: { grid: any; item: any; expandedRows: number[]; }) => {\r\n          // display preload template & re-render all the other Detail Views after toggling\r\n          // the preload View will eventually go away once the data gets loaded after the \"onAsyncEndUpdate\" event\r\n          this.renderPreloadView();\r\n          this.renderAllViewComponents();\r\n\r\n          if (this.rowDetailViewOptions && typeof this.rowDetailViewOptions.onAfterRowDetailToggle === 'function') {\r\n            this.rowDetailViewOptions.onAfterRowDetailToggle(e, args);\r\n          }\r\n        });\r\n        this._eventHandler.subscribe(this._addon.onBeforeRowDetailToggle, (e: any, args: { grid: any; item: any; }) => {\r\n          // before toggling row detail, we need to create View Component if it doesn't exist\r\n          this.onBeforeRowDetailToggle(e, args);\r\n\r\n          if (this.rowDetailViewOptions && typeof this.rowDetailViewOptions.onBeforeRowDetailToggle === 'function') {\r\n            this.rowDetailViewOptions.onBeforeRowDetailToggle(e, args);\r\n          }\r\n        });\r\n        this._eventHandler.subscribe(this._addon.onRowBackToViewportRange, (e: any, args: { grid: any; item: any; rowId: number; rowIndex: number; expandedRows: any[]; rowIdsOutOfViewport: number[]; }) => {\r\n          // when row is back to viewport range, we will re-render the View Component(s)\r\n          this.onRowBackToViewportRange(e, args);\r\n\r\n          if (this.rowDetailViewOptions && typeof this.rowDetailViewOptions.onRowBackToViewportRange === 'function') {\r\n            this.rowDetailViewOptions.onRowBackToViewportRange(e, args);\r\n          }\r\n        });\r\n        this._eventHandler.subscribe(this._addon.onRowOutOfViewportRange, (e: any, args: { grid: any; item: any; rowId: number; rowIndex: number; expandedRows: any[]; rowIdsOutOfViewport: number[]; }) => {\r\n          if (this.rowDetailViewOptions && typeof this.rowDetailViewOptions.onRowOutOfViewportRange === 'function') {\r\n            this.rowDetailViewOptions.onRowOutOfViewportRange(e, args);\r\n          }\r\n        });\r\n\r\n        // --\r\n        // hook some events needed by the Plugin itself\r\n\r\n        // we need to redraw the open detail views if we change column position (column reorder)\r\n        this._eventHandler.subscribe(this.sharedService.grid.onColumnsReordered, this.redrawAllViewComponents.bind(this));\r\n\r\n        // on row selection changed, we also need to redraw\r\n        if (this.gridOptions.enableRowSelection || this.gridOptions.enableCheckboxSelector) {\r\n          this._eventHandler.subscribe(this.sharedService.grid.onSelectedRowsChanged, this.redrawAllViewComponents.bind(this));\r\n        }\r\n\r\n        // on sort, all row detail are collapsed so we can dispose of all the Views as well\r\n        this._eventHandler.subscribe(this.sharedService.grid.onSort, this.disposeAllViewComponents.bind(this));\r\n\r\n        // on filter changed, we need to re-render all Views\r\n        this._subscriptions.push(\r\n          this.filterService.onFilterChanged.subscribe(this.redrawAllViewComponents.bind(this))\r\n        );\r\n      }\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Redraw (re-render) all the expanded row detail View Components */\r\n  redrawAllViewComponents() {\r\n    this._views.forEach((compRef) => {\r\n      this.redrawViewComponent(compRef);\r\n    });\r\n  }\r\n\r\n  /** Render all the expanded row detail View Components */\r\n  renderAllViewComponents() {\r\n    this._views.forEach((view) => {\r\n      if (view && view.dataContext) {\r\n        this.renderViewModel(view.dataContext);\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Redraw the necessary View Component */\r\n  redrawViewComponent(createdView: CreatedView) {\r\n    const containerElements = document.getElementsByClassName(`${ROW_DETAIL_CONTAINER_PREFIX}${createdView.id}`);\r\n    if (containerElements && containerElements.length >= 0) {\r\n      this.renderViewModel(createdView.dataContext);\r\n    }\r\n  }\r\n\r\n  /** Render (or re-render) the View Component (Row Detail) */\r\n  renderPreloadView() {\r\n    const containerElements = document.getElementsByClassName(`${PRELOAD_CONTAINER_PREFIX}`);\r\n    if (containerElements && containerElements.length >= 0) {\r\n      this.angularUtilService.createAngularComponentAppendToDom(this._preloadComponent, containerElements[containerElements.length - 1], true);\r\n    }\r\n  }\r\n\r\n  /** Render (or re-render) the View Component (Row Detail) */\r\n  renderViewModel(item: any): CreatedView | undefined {\r\n    const containerElements = document.getElementsByClassName(`${ROW_DETAIL_CONTAINER_PREFIX}${item[this.datasetIdPropName]}`);\r\n    if (containerElements && containerElements.length > 0) {\r\n      const componentOutput = this.angularUtilService.createAngularComponentAppendToDom(this._viewComponent, containerElements[containerElements.length - 1], true);\r\n      if (componentOutput && componentOutput.componentRef && componentOutput.componentRef.instance) {\r\n        // pass a few properties to the Row Detail template component\r\n        Object.assign(componentOutput.componentRef.instance, {\r\n          model: item,\r\n          addon: this._addon,\r\n          grid: this.sharedService.grid,\r\n          dataView: this.sharedService.dataView,\r\n          parent: this.rowDetailViewOptions && this.rowDetailViewOptions.parent,\r\n        });\r\n\r\n        const viewObj = this._views.find(obj => obj.id === item[this.datasetIdPropName]);\r\n        if (viewObj) {\r\n          viewObj.componentRef = componentOutput.componentRef;\r\n        }\r\n        return viewObj;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  // --\r\n  // private functions\r\n  // ------------------\r\n\r\n  private disposeViewComponent(expandedView: CreatedView) {\r\n    const compRef = expandedView && expandedView.componentRef;\r\n    if (compRef) {\r\n      this.appRef.detachView(compRef.hostView);\r\n      compRef.destroy();\r\n      return expandedView;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * notify the onAsyncResponse with the \"args.item\" (required property)\r\n   * the plugin will then use item to populate the row detail panel with the \"postTemplate\"\r\n   * @param item\r\n   */\r\n  private notifyTemplate(item: any) {\r\n    if (this._addon) {\r\n      this._addon.onAsyncResponse.notify({ item }, undefined, this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On Processing, we will notify the plugin with the new item detail once backend server call completes\r\n   * @param item\r\n   */\r\n  private async onProcessing(item: any) {\r\n    if (item && typeof this._userProcessFn === 'function') {\r\n      let awaitedItemDetail: any;\r\n      const userProcessFn = this._userProcessFn(item);\r\n\r\n      // wait for the \"userProcessFn\", once resolved we will save it into the \"collection\"\r\n      const response: any | any[] = await userProcessFn;\r\n\r\n      if (response.hasOwnProperty(this.datasetIdPropName)) {\r\n        awaitedItemDetail = response; // from Promise\r\n      } else if (response && response instanceof Observable || response instanceof Promise) {\r\n        awaitedItemDetail = await castToPromise(response); // from Angular-http-client\r\n      }\r\n\r\n      if (!awaitedItemDetail || !awaitedItemDetail.hasOwnProperty(this.datasetIdPropName)) {\r\n        throw new Error(`[Angular-Slickgrid] could not process the Row Detail, you must make sure that your \"process\" callback\r\n          (a Promise or an HttpClient call returning an Observable) returns an item object that has an \"${this.datasetIdPropName}\" property`);\r\n      }\r\n\r\n      // notify the plugin with the new item details\r\n      this.notifyTemplate(awaitedItemDetail || {});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Just before the row get expanded or collapsed we will do the following\r\n   * First determine if the row is expanding or collapsing,\r\n   * if it's expanding we will add it to our View Components reference array if we don't already have it\r\n   * or if it's collapsing we will remove it from our View Components reference array\r\n   */\r\n  private onBeforeRowDetailToggle(e: Event, args: { grid: any; item: any; }) {\r\n    // expanding\r\n    if (args && args.item && args.item.__collapsed) {\r\n      // expanding row detail\r\n      const viewInfo: CreatedView = {\r\n        id: args.item[this.datasetIdPropName],\r\n        dataContext: args.item\r\n      };\r\n      const idPropName = this.gridOptions.datasetIdPropertyName || 'id';\r\n      addToArrayWhenNotExists(this._views, viewInfo, idPropName);\r\n    } else {\r\n      // collapsing, so dispose of the View/Component\r\n      const foundViewIndex = this._views.findIndex((view: CreatedView) => view.id === args.item[this.datasetIdPropName]);\r\n      if (foundViewIndex >= 0 && this._views.hasOwnProperty(foundViewIndex)) {\r\n        const compRef = this._views[foundViewIndex].componentRef;\r\n        if (compRef) {\r\n          this.appRef.detachView(compRef.hostView);\r\n          compRef.destroy();\r\n        }\r\n        this._views.splice(foundViewIndex, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** When Row comes back to Viewport Range, we need to redraw the View */\r\n  private onRowBackToViewportRange(e: Event, args: { grid: any; item: any; rowId: number; rowIndex: number; expandedRows: any[]; rowIdsOutOfViewport: number[]; }) {\r\n    if (args && args.item) {\r\n      this._views.forEach((view) => {\r\n        if (view.id === args.item[this.datasetIdPropName]) {\r\n          this.redrawViewComponent(view);\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","import 'slickgrid/plugins/slick.rowmovemanager';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { CellArgs, Column, Extension, GridOption, SlickEventHandler } from '../models/index';\r\nimport { SharedService } from '../services/shared.service';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n@Injectable()\r\nexport class RowMoveManagerExtension implements Extension {\r\n  private _addon: any;\r\n  private _eventHandler: SlickEventHandler;\r\n  private _rowSelectionPlugin: any;\r\n\r\n  constructor(private sharedService: SharedService) {\r\n    this._eventHandler = new Slick.EventHandler();\r\n  }\r\n\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    if (this._addon && this._addon.destroy) {\r\n      this._addon.destroy();\r\n      this._addon = null;\r\n    }\r\n    if (this._rowSelectionPlugin && this._rowSelectionPlugin.destroy) {\r\n      this._rowSelectionPlugin.destroy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the plugin before the Grid creation to avoid having odd behaviors.\r\n   * Mostly because the column definitions might change after the grid creation, so we want to make sure to add it before then\r\n   */\r\n  create(columnDefinitions: Column[], gridOptions: GridOption) {\r\n    if (Array.isArray(columnDefinitions) && gridOptions) {\r\n      this._addon = this.loadAddonWhenNotExists(columnDefinitions, gridOptions);\r\n      const newRowMoveColumn: Column = this._addon.getColumnDefinition();\r\n      const rowMoveColDef = Array.isArray(columnDefinitions) && columnDefinitions.find((col: Column) => col && col.behavior === 'selectAndMove');\r\n      const finalRowMoveColumn = rowMoveColDef ? rowMoveColDef : newRowMoveColumn;\r\n\r\n      // set some exclusion properties since we don't want this column to be part of the export neither the list of column in the pickers\r\n      if (typeof finalRowMoveColumn === 'object') {\r\n        finalRowMoveColumn.excludeFromExport = true;\r\n        finalRowMoveColumn.excludeFromColumnPicker = true;\r\n        finalRowMoveColumn.excludeFromGridMenu = true;\r\n        finalRowMoveColumn.excludeFromQuery = true;\r\n        finalRowMoveColumn.excludeFromHeaderMenu = true;\r\n      }\r\n\r\n      // only add the new column if it doesn't already exist\r\n      if (!rowMoveColDef) {\r\n        // column index position in the grid\r\n        const columnPosition = gridOptions && gridOptions.rowMoveManager && gridOptions.rowMoveManager.columnIndexPosition || 0;\r\n        if (columnPosition > 0) {\r\n          columnDefinitions.splice(columnPosition, 0, finalRowMoveColumn);\r\n        } else {\r\n          columnDefinitions.unshift(finalRowMoveColumn);\r\n        }\r\n      }\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  loadAddonWhenNotExists(columnDefinitions: Column[], gridOptions: GridOption): any {\r\n    if (Array.isArray(columnDefinitions) && gridOptions) {\r\n      if (!this._addon) {\r\n        this._addon = new Slick.RowMoveManager(gridOptions && gridOptions.rowMoveManager || { cancelEditOnDrag: true });\r\n      }\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Get the instance of the SlickGrid addon (control or plugin). */\r\n  getAddonInstance() {\r\n    return this._addon;\r\n  }\r\n\r\n  register(rowSelectionPlugin?: any): any {\r\n    if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {\r\n      // this also requires the Row Selection Model to be registered as well\r\n      if (!rowSelectionPlugin || !this.sharedService.grid.getSelectionModel()) {\r\n        rowSelectionPlugin = new Slick.RowSelectionModel(this.sharedService.gridOptions.rowSelectionOptions || {});\r\n        this.sharedService.grid.setSelectionModel(rowSelectionPlugin);\r\n      }\r\n      this._rowSelectionPlugin = rowSelectionPlugin;\r\n      this.sharedService.grid.registerPlugin(this._addon);\r\n\r\n      // hook all events\r\n      if (this.sharedService.grid && this.sharedService.gridOptions.rowMoveManager) {\r\n        if (this.sharedService.gridOptions.rowMoveManager.onExtensionRegistered) {\r\n          this.sharedService.gridOptions.rowMoveManager.onExtensionRegistered(this._addon);\r\n        }\r\n        this._eventHandler.subscribe(this._addon.onBeforeMoveRows, (e: any, args: CellArgs) => {\r\n          if (this.sharedService.gridOptions.rowMoveManager && typeof this.sharedService.gridOptions.rowMoveManager.onBeforeMoveRows === 'function') {\r\n            this.sharedService.gridOptions.rowMoveManager.onBeforeMoveRows(e, args);\r\n          }\r\n        });\r\n        this._eventHandler.subscribe(this._addon.onMoveRows, (e: any, args: CellArgs) => {\r\n          if (this.sharedService.gridOptions.rowMoveManager && typeof this.sharedService.gridOptions.rowMoveManager.onMoveRows === 'function') {\r\n            this.sharedService.gridOptions.rowMoveManager.onMoveRows(e, args);\r\n          }\r\n        });\r\n      }\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import 'slickgrid/plugins/slick.rowselectionmodel';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Extension } from './../models/index';\r\nimport { SharedService } from '../services/shared.service';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n@Injectable()\r\nexport class RowSelectionExtension implements Extension {\r\n  private _addon: any;\r\n\r\n  constructor(private sharedService: SharedService) { }\r\n\r\n  dispose() {\r\n    if (this._addon && this._addon.destroy) {\r\n      this._addon.destroy();\r\n    }\r\n    this._addon = null;\r\n  }\r\n\r\n  /** Get the instance of the SlickGrid addon (control or plugin). */\r\n  getAddonInstance() {\r\n    return this._addon;\r\n  }\r\n\r\n  register(): any {\r\n    if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {\r\n      this._addon = new Slick.RowSelectionModel(this.sharedService.gridOptions.rowSelectionOptions || {});\r\n      this.sharedService.grid.setSelectionModel(this._addon);\r\n      return this._addon;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","// import common 3rd party SlickGrid plugins/libs\r\nimport 'slickgrid/plugins/slick.cellrangedecorator';\r\nimport 'slickgrid/plugins/slick.cellrangeselector';\r\nimport 'slickgrid/plugins/slick.cellselectionmodel';\r\n\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Column,\r\n  Extension,\r\n  ExtensionList,\r\n  ExtensionModel,\r\n  ExtensionName,\r\n  GridOption,\r\n} from '../models/index';\r\nimport {\r\n  AutoTooltipExtension,\r\n  CellExternalCopyManagerExtension,\r\n  CellMenuExtension,\r\n  CheckboxSelectorExtension,\r\n  ColumnPickerExtension,\r\n  ContextMenuExtension,\r\n  DraggableGroupingExtension,\r\n  GridMenuExtension,\r\n  GroupItemMetaProviderExtension,\r\n  HeaderButtonExtension,\r\n  HeaderMenuExtension,\r\n  RowDetailViewExtension,\r\n  RowMoveManagerExtension,\r\n  RowSelectionExtension,\r\n} from '../extensions/index';\r\nimport { SharedService } from './shared.service';\r\n\r\n@Injectable()\r\nexport class ExtensionService {\r\n  private _extensionCreatedList: ExtensionList = {} as ExtensionList;\r\n  private _extensionList: ExtensionList = {} as ExtensionList;\r\n\r\n  get extensionList(): ExtensionList {\r\n    return this._extensionList;\r\n  }\r\n\r\n  constructor(\r\n    private readonly autoTooltipExtension: AutoTooltipExtension,\r\n    private readonly cellExternalCopyExtension: CellExternalCopyManagerExtension,\r\n    private readonly cellMenuExtension: CellMenuExtension,\r\n    private readonly checkboxSelectorExtension: CheckboxSelectorExtension,\r\n    private readonly columnPickerExtension: ColumnPickerExtension,\r\n    private readonly contextMenuExtension: ContextMenuExtension,\r\n    private readonly draggableGroupingExtension: DraggableGroupingExtension,\r\n    private readonly gridMenuExtension: GridMenuExtension,\r\n    private readonly groupItemMetaExtension: GroupItemMetaProviderExtension,\r\n    private readonly headerButtonExtension: HeaderButtonExtension,\r\n    private readonly headerMenuExtension: HeaderMenuExtension,\r\n    private readonly rowDetailViewExtension: RowDetailViewExtension,\r\n    private readonly rowMoveManagerExtension: RowMoveManagerExtension,\r\n    private readonly rowSelectionExtension: RowSelectionExtension,\r\n    private readonly sharedService: SharedService,\r\n    @Optional() private readonly translate: TranslateService,\r\n  ) { }\r\n\r\n  /** Dispose of all the controls & plugins */\r\n  dispose() {\r\n    this.sharedService.grid = null;\r\n    this.sharedService.visibleColumns = [];\r\n\r\n    // dispose of each control/plugin & reset the list\r\n    for (const extensionName of Object.keys(this._extensionList)) {\r\n      if (this._extensionList.hasOwnProperty(extensionName)) {\r\n        const extension = this._extensionList[extensionName as keyof Record<ExtensionName, ExtensionModel>] as ExtensionModel;\r\n        if (extension && extension.class && extension.class.dispose) {\r\n          extension.class.dispose();\r\n        }\r\n      }\r\n    }\r\n    for (const key of Object.keys(this._extensionList)) {\r\n      delete this._extensionList[key as keyof Record<ExtensionName, ExtensionModel>];\r\n    }\r\n  }\r\n\r\n  /** Get all columns (includes visible and non-visible) */\r\n  getAllColumns(): Column[] {\r\n    return this.sharedService.allColumns || [];\r\n  }\r\n\r\n  /** Get only visible columns */\r\n  getVisibleColumns(): Column[] {\r\n    return this.sharedService.visibleColumns || [];\r\n  }\r\n\r\n  /**\r\n   * Get an Extension by it's name\r\n   *  @param name\r\n   */\r\n  getExtensionByName(name: ExtensionName): ExtensionModel | undefined {\r\n    if (this._extensionList && this._extensionList[name]) {\r\n      return this._extensionList[name];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Get the instance of the SlickGrid addon (control or plugin).\r\n   * This is the raw addon coming directly from SlickGrid itself, not to confuse with Angular-Slickgrid extension\r\n   *  @param name\r\n   */\r\n  getSlickgridAddonInstance(name: ExtensionName): any {\r\n    const extension = this.getExtensionByName(name);\r\n    if (extension && extension.class && (extension.instance || extension.addon)) {\r\n      if (extension.class && extension.class.getAddonInstance) {\r\n        return extension.class.getAddonInstance();\r\n      }\r\n      return extension.instance;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Auto-resize all the column in the grid to fit the grid width */\r\n  autoResizeColumns() {\r\n    this.sharedService.grid.autosizeColumns();\r\n  }\r\n\r\n  /** Bind/Create different Controls or Plugins after the Grid is created */\r\n  bindDifferentExtensions() {\r\n    if (this.sharedService && this.sharedService.gridOptions) {\r\n      // make sure all columns are translated before creating ColumnPicker/GridMenu Controls\r\n      // this is to avoid having hidden columns not being translated on first load\r\n      if (this.sharedService.gridOptions.enableTranslate) {\r\n        // eventually deprecate the \"headerKey\" and use only the \"nameKey\"\r\n        this.translateItems(this.sharedService.allColumns, 'headerKey', 'name');\r\n        this.translateItems(this.sharedService.allColumns, 'nameKey', 'name');\r\n      }\r\n\r\n      // Auto Tooltip Plugin\r\n      if (this.sharedService.gridOptions.enableAutoTooltip) {\r\n        if (this.autoTooltipExtension && this.autoTooltipExtension.register) {\r\n          const instance = this.autoTooltipExtension.register();\r\n          this._extensionList[ExtensionName.autoTooltip] = { name: ExtensionName.autoTooltip, class: this.autoTooltipExtension, addon: instance, instance };\r\n        }\r\n      }\r\n\r\n      // Cell External Copy Manager Plugin (Excel Like)\r\n      if (this.sharedService.gridOptions.enableExcelCopyBuffer) {\r\n        if (this.cellExternalCopyExtension && this.cellExternalCopyExtension.register) {\r\n          const instance = this.cellExternalCopyExtension.register();\r\n          this._extensionList[ExtensionName.cellExternalCopyManager] = { name: ExtensionName.cellExternalCopyManager, class: this.cellExternalCopyExtension, addon: instance, instance };\r\n        }\r\n      }\r\n\r\n      // (Action) Cell Menu Plugin\r\n      if (this.sharedService.gridOptions.enableCellMenu) {\r\n        if (this.cellMenuExtension && this.cellMenuExtension.register) {\r\n          const instance = this.cellMenuExtension.register();\r\n          this._extensionList[ExtensionName.cellMenu] = { name: ExtensionName.cellMenu, class: this.cellMenuExtension, addon: instance, instance };\r\n        }\r\n      }\r\n\r\n      // Row Selection Plugin\r\n      // this extension should be registered BEFORE the CheckboxSelector, RowDetail or RowMoveManager since it can be use by these 2 plugins\r\n      if (!this.getExtensionByName(ExtensionName.rowSelection) && (this.sharedService.gridOptions.enableRowSelection || this.sharedService.gridOptions.enableCheckboxSelector || this.sharedService.gridOptions.enableRowDetailView || this.sharedService.gridOptions.enableRowMoveManager)) {\r\n        if (this.rowSelectionExtension && this.rowSelectionExtension.register) {\r\n          const instance = this.rowSelectionExtension.register();\r\n          this._extensionList[ExtensionName.rowSelection] = { name: ExtensionName.rowSelection, class: this.rowSelectionExtension, addon: instance, instance };\r\n        }\r\n      }\r\n\r\n      // Checkbox Selector Plugin\r\n      if (this.sharedService.gridOptions.enableCheckboxSelector) {\r\n        if (this.checkboxSelectorExtension && this.checkboxSelectorExtension.register) {\r\n          const rowSelectionExtension = this.getExtensionByName(ExtensionName.rowSelection);\r\n          this.checkboxSelectorExtension.register(rowSelectionExtension);\r\n          const createdExtension = this.getCreatedExtensionByName(ExtensionName.checkboxSelector); // get the instance from when it was really created earlier\r\n          const instance = createdExtension && createdExtension.instance;\r\n          this._extensionList[ExtensionName.checkboxSelector] = { name: ExtensionName.checkboxSelector, class: this.checkboxSelectorExtension, addon: instance, instance };\r\n        }\r\n      }\r\n\r\n      // Column Picker Control\r\n      if (this.sharedService.gridOptions.enableColumnPicker) {\r\n        if (this.columnPickerExtension && this.columnPickerExtension.register) {\r\n          const instance = this.columnPickerExtension.register();\r\n          this._extensionList[ExtensionName.columnPicker] = { name: ExtensionName.columnPicker, class: this.columnPickerExtension, addon: instance, instance };\r\n        }\r\n      }\r\n\r\n      // Context Menu Control\r\n      if (this.sharedService.gridOptions.enableContextMenu) {\r\n        if (this.contextMenuExtension && this.contextMenuExtension.register) {\r\n          const instance = this.contextMenuExtension.register();\r\n          this._extensionList[ExtensionName.contextMenu] = { name: ExtensionName.contextMenu, class: this.contextMenuExtension, addon: instance, instance };\r\n        }\r\n      }\r\n\r\n      // Draggable Grouping Plugin\r\n      if (this.sharedService.gridOptions.enableDraggableGrouping) {\r\n        if (this.draggableGroupingExtension && this.draggableGroupingExtension.register) {\r\n          const instance = this.draggableGroupingExtension.register();\r\n          this._extensionList[ExtensionName.draggableGrouping] = { name: ExtensionName.draggableGrouping, class: this.draggableGroupingExtension, addon: instance, instance };\r\n        }\r\n      }\r\n\r\n      // Grid Menu Control\r\n      if (this.sharedService.gridOptions.enableGridMenu) {\r\n        if (this.gridMenuExtension && this.gridMenuExtension.register) {\r\n          const instance = this.gridMenuExtension.register();\r\n          this._extensionList[ExtensionName.gridMenu] = { name: ExtensionName.gridMenu, class: this.gridMenuExtension, addon: instance, instance };\r\n        }\r\n      }\r\n\r\n      // Grouping Plugin\r\n      // register the group item metadata provider to add expand/collapse group handlers\r\n      if (this.sharedService.gridOptions.enableDraggableGrouping || this.sharedService.gridOptions.enableGrouping) {\r\n        if (this.groupItemMetaExtension && this.groupItemMetaExtension.register) {\r\n          const instance = this.groupItemMetaExtension.register();\r\n          this._extensionList[ExtensionName.groupItemMetaProvider] = { name: ExtensionName.groupItemMetaProvider, class: this.groupItemMetaExtension, addon: instance, instance };\r\n        }\r\n      }\r\n\r\n      // Header Button Plugin\r\n      if (this.sharedService.gridOptions.enableHeaderButton) {\r\n        if (this.headerButtonExtension && this.headerButtonExtension.register) {\r\n          const instance = this.headerButtonExtension.register();\r\n          this._extensionList[ExtensionName.headerButton] = { name: ExtensionName.headerButton, class: this.headerButtonExtension, addon: instance, instance };\r\n        }\r\n      }\r\n\r\n      // Header Menu Plugin\r\n      if (this.sharedService.gridOptions.enableHeaderMenu) {\r\n        if (this.headerMenuExtension && this.headerMenuExtension.register) {\r\n          const instance = this.headerMenuExtension.register();\r\n          this._extensionList[ExtensionName.headerMenu] = { name: ExtensionName.headerMenu, class: this.headerMenuExtension, addon: instance, instance };\r\n        }\r\n      }\r\n\r\n      // Row Detail View Plugin\r\n      if (this.sharedService.gridOptions.enableRowDetailView) {\r\n        if (this.rowDetailViewExtension && this.rowDetailViewExtension.register) {\r\n          const rowSelectionExtension = this.getExtensionByName(ExtensionName.rowSelection);\r\n          this.rowDetailViewExtension.register(rowSelectionExtension);\r\n          const createdExtension = this.getCreatedExtensionByName(ExtensionName.rowDetailView); // get the plugin from when it was really created earlier\r\n          const instance = createdExtension && createdExtension.instance;\r\n          this._extensionList[ExtensionName.rowDetailView] = { name: ExtensionName.rowDetailView, class: this.rowDetailViewExtension, addon: instance, instance };\r\n        }\r\n      }\r\n\r\n      // Row Move Manager Plugin\r\n      if (this.sharedService.gridOptions.enableRowMoveManager && this.rowMoveManagerExtension && this.rowMoveManagerExtension.register) {\r\n        const rowSelectionExtension = this.getExtensionByName(ExtensionName.rowSelection);\r\n        this.rowMoveManagerExtension.register(rowSelectionExtension);\r\n        const createdExtension = this.getCreatedExtensionByName(ExtensionName.rowMoveManager); // get the instance from when it was really created earlier\r\n        const instance = createdExtension && createdExtension.instance;\r\n        this._extensionList[ExtensionName.rowMoveManager] = { name: ExtensionName.rowMoveManager, class: this.rowMoveManagerExtension, addon: instance, instance };\r\n      }\r\n\r\n      // manually register other plugins\r\n      if (this.sharedService.gridOptions.registerPlugins !== undefined) {\r\n        const grid = this.sharedService.grid;\r\n        const gridOptions = this.sharedService.gridOptions;\r\n\r\n        if (Array.isArray(gridOptions.registerPlugins)) {\r\n          gridOptions.registerPlugins.forEach((plugin: any) => {\r\n            grid.registerPlugin(plugin);\r\n            const instance = grid.getPluginByName(plugin && plugin.name || '');\r\n            this._extensionList[ExtensionName.noname] = { name: ExtensionName.noname, class: null, addon: instance, instance };\r\n          });\r\n        } else {\r\n          const plugin = gridOptions.registerPlugins;\r\n          grid.registerPlugin(plugin);\r\n          const instance = grid.getPluginByName(plugin && plugin.name || '');\r\n          this._extensionList[ExtensionName.noname] = { name: ExtensionName.noname, class: null, addon: instance, instance };\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bind/Create certain plugins before the Grid creation to avoid having odd behaviors.\r\n   * Mostly because the column definitions might change after the grid creation, so we want to make sure to add it before then\r\n   * @param columnDefinitions\r\n   * @param options\r\n   */\r\n  createExtensionsBeforeGridCreation(columnDefinitions: Column[], options: GridOption) {\r\n    if (options.enableCheckboxSelector) {\r\n      if (!this.getCreatedExtensionByName(ExtensionName.checkboxSelector)) {\r\n        const checkboxInstance = this.checkboxSelectorExtension.create(columnDefinitions, options);\r\n        this._extensionCreatedList[ExtensionName.checkboxSelector] = { name: ExtensionName.checkboxSelector, addon: checkboxInstance, instance: checkboxInstance, class: this.checkboxSelectorExtension };\r\n      }\r\n    }\r\n    if (options.enableRowMoveManager) {\r\n      if (!this.getCreatedExtensionByName(ExtensionName.rowMoveManager)) {\r\n        const rowMoveInstance = this.rowMoveManagerExtension.create(columnDefinitions, options);\r\n        this._extensionCreatedList[ExtensionName.rowMoveManager] = { name: ExtensionName.rowMoveManager, addon: rowMoveInstance, instance: rowMoveInstance, class: this.rowMoveManagerExtension };\r\n      }\r\n    }\r\n    if (options.enableRowDetailView) {\r\n      if (!this.getCreatedExtensionByName(ExtensionName.rowDetailView)) {\r\n        const rowDetailInstance = this.rowDetailViewExtension.create(columnDefinitions, options);\r\n        this._extensionCreatedList[ExtensionName.rowDetailView] = { name: ExtensionName.rowDetailView, addon: rowDetailInstance, instance: rowDetailInstance, class: this.rowDetailViewExtension };\r\n      }\r\n    }\r\n    if (options.enableDraggableGrouping) {\r\n      if (!this.getCreatedExtensionByName(ExtensionName.draggableGrouping)) {\r\n        const draggableInstance = this.draggableGroupingExtension.create(options);\r\n        options.enableColumnReorder = draggableInstance.getSetupColumnReorder;\r\n        this._extensionCreatedList[ExtensionName.draggableGrouping] = { name: ExtensionName.draggableGrouping, addon: draggableInstance, instance: draggableInstance, class: draggableInstance.getSetupColumnReorder };\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Hide a column from the grid */\r\n  hideColumn(column: Column) {\r\n    if (this.sharedService && this.sharedService.grid && this.sharedService.grid.getColumns && this.sharedService.grid.setColumns) {\r\n      const columnIndex = this.sharedService.grid.getColumnIndex(column.id);\r\n      this.sharedService.visibleColumns = this.removeColumnByIndex(this.sharedService.grid.getColumns(), columnIndex);\r\n      this.sharedService.grid.setColumns(this.sharedService.visibleColumns);\r\n    }\r\n  }\r\n\r\n  /** Refresh the dataset through the Backend Service */\r\n  refreshBackendDataset(gridOptions?: GridOption) {\r\n    this.gridMenuExtension.refreshBackendDataset(gridOptions);\r\n  }\r\n\r\n  /**\r\n   * Remove a column from the grid by it's index in the grid\r\n   * @param columns input\r\n   * @param index\r\n   */\r\n  removeColumnByIndex(columns: Column[], index: number): Column[] {\r\n    if (Array.isArray(columns)) {\r\n      return columns.filter((el: Column, i: number) => index !== i);\r\n    }\r\n    return columns;\r\n  }\r\n\r\n  /** Translate the Cell Menu titles, we need to loop through all column definition to re-translate them */\r\n  translateCellMenu() {\r\n    if (this.cellMenuExtension && this.cellMenuExtension.translateCellMenu) {\r\n      this.cellMenuExtension.translateCellMenu();\r\n    }\r\n  }\r\n\r\n  /** Translate the Column Picker and it's last 2 checkboxes */\r\n  translateColumnPicker() {\r\n    if (this.columnPickerExtension && this.columnPickerExtension.translateColumnPicker) {\r\n      this.columnPickerExtension.translateColumnPicker();\r\n    }\r\n  }\r\n\r\n  /** Translate the Context Menu titles, we need to loop through all column definition to re-translate them */\r\n  translateContextMenu() {\r\n    if (this.contextMenuExtension && this.contextMenuExtension.translateContextMenu) {\r\n      this.contextMenuExtension.translateContextMenu();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Translate the Header Menu titles, we need to loop through all column definition to re-translate them\r\n   */\r\n  translateGridMenu() {\r\n    if (this.gridMenuExtension && this.gridMenuExtension.translateGridMenu) {\r\n      this.gridMenuExtension.translateGridMenu();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Translate the Header Menu titles, we need to loop through all column definition to re-translate them\r\n   */\r\n  translateHeaderMenu() {\r\n    if (this.headerMenuExtension && this.headerMenuExtension.translateHeaderMenu) {\r\n      this.headerMenuExtension.translateHeaderMenu();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Translate manually the header titles.\r\n   * We could optionally pass a locale (that will change currently loaded locale), else it will use current locale\r\n   * @param locale to use\r\n   * @param new column definitions (optional)\r\n   */\r\n  translateColumnHeaders(locale?: boolean | string, newColumnDefinitions?: Column[]) {\r\n    if (this.sharedService && this.sharedService.gridOptions && this.sharedService.gridOptions.enableTranslate && (!this.translate || !this.translate.instant)) {\r\n      throw new Error('[Angular-Slickgrid] requires \"ngx-translate\" to be installed and configured when the grid option \"enableTranslate\" is enabled.');\r\n    }\r\n\r\n    if (locale) {\r\n      this.translate.use(locale as string);\r\n    }\r\n\r\n    let columnDefinitions = newColumnDefinitions;\r\n    if (!columnDefinitions) {\r\n      columnDefinitions = this.sharedService.columnDefinitions;\r\n    }\r\n\r\n    // eventually deprecate the \"headerKey\" and use only the \"nameKey\"\r\n    this.translateItems(columnDefinitions, 'headerKey', 'name');\r\n    this.translateItems(this.sharedService.allColumns, 'headerKey', 'name');\r\n    this.translateItems(columnDefinitions, 'nameKey', 'name');\r\n    this.translateItems(this.sharedService.allColumns, 'nameKey', 'name');\r\n\r\n    // re-render the column headers\r\n    this.renderColumnHeaders(columnDefinitions, Array.isArray(newColumnDefinitions));\r\n    this.gridMenuExtension.translateGridMenu();\r\n  }\r\n\r\n  /**\r\n   * Render (or re-render) the column headers from column definitions.\r\n   * calling setColumns() will trigger a grid re-render\r\n   */\r\n  renderColumnHeaders(newColumnDefinitions?: Column[], forceColumnDefinitionsOverwrite = false) {\r\n    let collection = newColumnDefinitions;\r\n    if (!collection) {\r\n      collection = this.sharedService.columnDefinitions;\r\n    }\r\n    if (Array.isArray(collection) && this.sharedService.grid && this.sharedService.grid.setColumns) {\r\n      if (collection.length > this.sharedService.allColumns.length || forceColumnDefinitionsOverwrite) {\r\n        this.sharedService.allColumns = collection;\r\n      }\r\n      this.sharedService.grid.setColumns(collection);\r\n    }\r\n\r\n    // recreate the Column Picker when enabled\r\n    if (this.sharedService.gridOptions.enableColumnPicker) {\r\n      this.recreateExternalAddon(this.columnPickerExtension, ExtensionName.columnPicker);\r\n    }\r\n\r\n    // recreate the Grid Menu when enabled\r\n    if (this.sharedService.gridOptions.enableGridMenu) {\r\n      this.recreateExternalAddon(this.gridMenuExtension, ExtensionName.gridMenu);\r\n    }\r\n\r\n    // recreate the Header Menu when enabled\r\n    if (this.sharedService.gridOptions.enableHeaderMenu) {\r\n      this.recreateExternalAddon(this.headerMenuExtension, ExtensionName.headerMenu);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // -------------------\r\n\r\n  /**\r\n   * Get an Extension that was created by calling its \"create\" method (there are only 3 extensions which uses this method)\r\n   *  @param name\r\n   */\r\n  private getCreatedExtensionByName(name: ExtensionName): ExtensionModel | undefined {\r\n    if (this._extensionCreatedList && this._extensionCreatedList.hasOwnProperty(name)) {\r\n      return this._extensionCreatedList[name];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Dispose of previous extension/addon instance, then re-register it and don't forget to overwrite previous instance ref\r\n   * @param extensionName\r\n   */\r\n  private recreateExternalAddon(externalExtension: Extension, extensionName: ExtensionName) {\r\n    externalExtension.dispose();\r\n    const instance = externalExtension.register();\r\n    const extension = this.getExtensionByName(extensionName);\r\n    if (extension) {\r\n      extension.addon = instance;\r\n      extension.instance = instance;\r\n    }\r\n  }\r\n\r\n  /** Translate an array of items from an input key and assign translated value to the output key */\r\n  private translateItems(items: any[], inputKey: string, outputKey: string) {\r\n    if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableTranslate && (!this.translate || !this.translate.instant)) {\r\n      throw new Error('[Angular-Slickgrid] requires \"ngx-translate\" to be installed and configured when the grid option \"enableTranslate\" is enabled.');\r\n    }\r\n\r\n    if (Array.isArray(items)) {\r\n      for (const item of items) {\r\n        if (item[inputKey]) {\r\n          item[outputKey] = this.translate && this.translate.currentLang && this.translate.instant(item[inputKey]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * This GraphqlQueryBuilder class is a lib that already exist\r\n * but was causing issues with TypeScript, RequireJS and other bundler/packagers\r\n * and so I rewrote it in pure TypeScript.\r\n *\r\n * The previous lib can be viewed here at this Github\r\n * https://github.com/codemeasandwich/graphql-query-builder\r\n */\r\nexport default class GraphqlQueryBuilder {\r\n  alias!: string | Function;\r\n  head: any[] = [];\r\n  body: any;\r\n\r\n  /* Constructor, query/mutator you wish to use, and an alias or filter arguments. */\r\n  constructor(private queryFnName: string, aliasOrFilter?: string | object) {\r\n    if (typeof aliasOrFilter === 'string') {\r\n      this.alias = aliasOrFilter;\r\n    } else if (typeof aliasOrFilter === 'object') {\r\n      this.filter(aliasOrFilter);\r\n    } else if (aliasOrFilter === undefined && arguments.length === 2) {\r\n      throw new TypeError(`You have passed undefined as Second argument to \"Query\"`);\r\n    } else if (aliasOrFilter !== undefined) {\r\n      throw new TypeError(`Second argument to \"Query\" should be an alias name(String) or filter arguments(Object). What was passed is: ${aliasOrFilter}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The parameters to run the query against.\r\n   * @param filters An object mapping attribute to values\r\n   */\r\n  filter(filters: any) {\r\n    for (const prop of Object.keys(filters)) {\r\n      if (typeof filters[prop] === 'function') {\r\n        continue;\r\n      }\r\n      const val = this.getGraphQLValue(filters[prop]);\r\n      if (val === '{}') {\r\n        continue;\r\n      }\r\n      this.head.push(`${prop}:${val}`);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Outlines the properties you wish to be returned from the query.\r\n   * @param properties representing each attribute you want Returned\r\n   */\r\n  find(...searches: any[]) { // THIS NEED TO BE A \"FUNCTION\" to scope 'arguments'\r\n    if (!searches || !Array.isArray(searches) || searches.length === 0) {\r\n      throw new TypeError(`find value can not be >>falsy<<`);\r\n    }\r\n    // if its a string.. it may have other values\r\n    // else it sould be an Object or Array of maped values\r\n    const searchKeys = (searches.length === 1 && Array.isArray(searches[0])) ? searches[0] : searches;\r\n    this.body = this.parceFind(searchKeys);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set an alias for this result.\r\n   * @param alias\r\n   */\r\n  setAlias(alias: string) {\r\n    this.alias = alias;\r\n  }\r\n\r\n  /**\r\n   * Return to the formatted query string\r\n   * @return\r\n   */\r\n  toString() {\r\n    if (this.body === undefined) {\r\n      throw new ReferenceError(`return properties are not defined. use the 'find' function to defined them`);\r\n    }\r\n\r\n    return `${(this.alias) ? (this.alias + ':') : ''} ${this.queryFnName} ${(this.head.length > 0) ? '(' + this.head.join(',') + ')' : ''}  { ${this.body} }`;\r\n  }\r\n\r\n  // --\r\n  // PRIVATE FUNCTIONS\r\n  // -----------------\r\n\r\n  private parceFind(_levelA: any[]) {\r\n    const propsA = _levelA.map((currentValue, index) => {\r\n      const itemX = _levelA[index];\r\n\r\n      if (itemX instanceof GraphqlQueryBuilder) {\r\n        return itemX.toString();\r\n      } else if (!Array.isArray(itemX) && typeof itemX === 'object') {\r\n        const propsAA = Object.keys(itemX);\r\n        if (1 !== propsAA.length) {\r\n          throw new RangeError(`Alias objects should only have one value. was passed: ${JSON.stringify(itemX)}`);\r\n        }\r\n        const propS = propsAA[0];\r\n        const item = itemX[propS];\r\n\r\n        if (Array.isArray(item)) {\r\n          return new GraphqlQueryBuilder(propS).find(item);\r\n        }\r\n        return `${propS} : ${item} `;\r\n      } else if (typeof itemX === 'string') {\r\n        return itemX;\r\n      } else {\r\n        throw new RangeError(`cannot handle Find value of ${itemX}`);\r\n      }\r\n    });\r\n\r\n    return propsA.join(',');\r\n  }\r\n\r\n  private getGraphQLValue(value: any) {\r\n    if (typeof value === 'string') {\r\n      value = JSON.stringify(value);\r\n    } else if (Array.isArray(value)) {\r\n      value = value.map(item => {\r\n        return this.getGraphQLValue(item);\r\n      }).join();\r\n      value = `[${value}]`;\r\n    } else if (value instanceof Date) {\r\n      value = JSON.stringify(value);\r\n    } else if (value !== null && typeof value === 'object') {\r\n      value = this.objectToString(value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private objectToString(obj: any) {\r\n    const sourceA = [];\r\n\r\n    for (const prop of Object.keys(obj)) {\r\n      if (typeof obj[prop] === 'function') {\r\n        continue;\r\n      }\r\n      sourceA.push(`${prop}:${this.getGraphQLValue(obj[prop])}`);\r\n    }\r\n    return `{${sourceA.join()}}`;\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\n\r\nimport { mapOperatorType, mapOperatorByFieldType } from './utilities';\r\nimport {\r\n  BackendService,\r\n  Column,\r\n  ColumnFilter,\r\n  ColumnFilters,\r\n  ColumnSort,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  FieldType,\r\n  FilterChangedArgs,\r\n  GraphqlCursorPaginationOption,\r\n  GraphqlDatasetFilter,\r\n  GraphqlFilteringOption,\r\n  GraphqlPaginationOption,\r\n  GraphqlServiceOption,\r\n  GraphqlSortingOption,\r\n  GridOption,\r\n  MultiColumnSort,\r\n  OperatorType,\r\n  Pagination,\r\n  PaginationChangedArgs,\r\n  SortChangedArgs,\r\n  SortDirection,\r\n  SortDirectionString,\r\n  OperatorString\r\n} from './../models/index';\r\nimport QueryBuilder from './graphqlQueryBuilder';\r\n\r\nconst DEFAULT_ITEMS_PER_PAGE = 25;\r\nconst DEFAULT_PAGE_SIZE = 20;\r\n\r\n@Injectable()\r\nexport class GraphqlService implements BackendService {\r\n  private _currentFilters: ColumnFilters | CurrentFilter[] = [];\r\n  private _currentPagination?: CurrentPagination;\r\n  private _currentSorters: CurrentSorter[] = [];\r\n  private _columnDefinitions!: Column[];\r\n  private _grid: any;\r\n  private _datasetIdPropName = 'id';\r\n  options!: GraphqlServiceOption;\r\n  pagination: Pagination | undefined;\r\n  defaultPaginationOptions: GraphqlPaginationOption | GraphqlCursorPaginationOption = {\r\n    first: DEFAULT_ITEMS_PER_PAGE,\r\n    offset: 0\r\n  };\r\n\r\n  /** Getter for the Column Definitions */\r\n  get columnDefinitions() {\r\n    return this._columnDefinitions;\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /** Initialization of the service, which acts as a constructor */\r\n  init(serviceOptions?: GraphqlServiceOption | undefined, pagination?: Pagination, grid?: any): void {\r\n    this._grid = grid;\r\n    this.options = serviceOptions || { datasetName: '', columnDefinitions: [] };\r\n    this.pagination = pagination;\r\n    this._datasetIdPropName = this._gridOptions.datasetIdPropertyName || 'id';\r\n\r\n    if (grid && grid.getColumns) {\r\n      this._columnDefinitions = (serviceOptions && serviceOptions.columnDefinitions) || grid.getColumns();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build the GraphQL query, since the service include/exclude cursor, the output query will be different.\r\n   * @param serviceOptions GraphqlServiceOption\r\n   */\r\n  buildQuery() {\r\n    if (!this.options || !this.options.datasetName || (!this._columnDefinitions && !Array.isArray(this.options.columnDefinitions))) {\r\n      throw new Error('GraphQL Service requires the \"datasetName\" property to properly build the GraphQL query');\r\n    }\r\n\r\n    // get the column definitions and exclude some if they were tagged as excluded\r\n    let columnDefinitions = this._columnDefinitions || this.options.columnDefinitions;\r\n    columnDefinitions = columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\r\n\r\n    const queryQb = new QueryBuilder('query');\r\n    const datasetQb = new QueryBuilder(this.options.datasetName);\r\n    const nodesQb = new QueryBuilder('nodes');\r\n\r\n    // get all the columnds Ids for the filters to work\r\n    const columnIds: string[] = [];\r\n    if (columnDefinitions && Array.isArray(columnDefinitions)) {\r\n      for (const column of columnDefinitions) {\r\n        columnIds.push(column.field);\r\n\r\n        // if extra \"fields\" are passed, also push them to columnIds\r\n        if (column.fields) {\r\n          columnIds.push(...column.fields);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Slickgrid also requires the \"id\" (or the dataset defined unique ide) field to be part of DataView\r\n    // add it to the GraphQL query if it wasn't already part of the list\r\n    if (columnIds.indexOf(this._datasetIdPropName) === -1) {\r\n      columnIds.unshift(this._datasetIdPropName);\r\n    }\r\n\r\n    const columnsQuery = this.buildFilterQuery(columnIds);\r\n    let graphqlNodeFields = [];\r\n\r\n    if (this._gridOptions.enablePagination !== false) {\r\n      if (this.options.isWithCursor) {\r\n        // ...pageInfo { hasNextPage, endCursor }, edges { cursor, node { _columns_ } }, totalCount: 100\r\n        const edgesQb = new QueryBuilder('edges');\r\n        const pageInfoQb = new QueryBuilder('pageInfo');\r\n        pageInfoQb.find('hasNextPage', 'hasPreviousPage', 'endCursor', 'startCursor');\r\n        nodesQb.find(columnsQuery);\r\n        edgesQb.find(['cursor']);\r\n        graphqlNodeFields = ['totalCount', nodesQb, pageInfoQb, edgesQb];\r\n      } else {\r\n        // ...nodes { _columns_ }, totalCount: 100\r\n        nodesQb.find(columnsQuery);\r\n        graphqlNodeFields = ['totalCount', nodesQb];\r\n      }\r\n      // all properties to be returned by the query\r\n      datasetQb.find(graphqlNodeFields);\r\n    } else {\r\n      // include all columns to be returned\r\n      datasetQb.find(columnsQuery);\r\n    }\r\n\r\n    // add dataset filters, could be Pagination and SortingFilters and/or FieldFilters\r\n    let datasetFilters: GraphqlDatasetFilter = {};\r\n\r\n    // only add pagination if it's enabled in the grid options\r\n    if (this._gridOptions.enablePagination !== false) {\r\n      datasetFilters = {\r\n        ...this.options.paginationOptions,\r\n        first: ((this.options.paginationOptions && this.options.paginationOptions.first) ? this.options.paginationOptions.first : ((this.pagination && this.pagination.pageSize) ? this.pagination.pageSize : null)) || this.defaultPaginationOptions.first\r\n      };\r\n\r\n      if (!this.options.isWithCursor) {\r\n        datasetFilters.offset = ((this.options.paginationOptions && this.options.paginationOptions.hasOwnProperty('offset')) ? +(this.options.paginationOptions as any)['offset'] : 0);\r\n      }\r\n    }\r\n\r\n    if (this.options.sortingOptions && Array.isArray(this.options.sortingOptions) && this.options.sortingOptions.length > 0) {\r\n      // orderBy: [{ field:x, direction: 'ASC' }]\r\n      datasetFilters.orderBy = this.options.sortingOptions;\r\n    }\r\n    if (this.options.filteringOptions && Array.isArray(this.options.filteringOptions) && this.options.filteringOptions.length > 0) {\r\n      // filterBy: [{ field: date, operator: '>', value: '2000-10-10' }]\r\n      datasetFilters.filterBy = this.options.filteringOptions;\r\n    }\r\n    if (this.options.addLocaleIntoQuery) {\r\n      // first: 20, ... locale: \"en-CA\"\r\n      datasetFilters.locale = this._gridOptions && this._gridOptions.i18n && this._gridOptions.i18n.currentLang || this._gridOptions.locale || 'en';\r\n    }\r\n    if (this.options.extraQueryArguments) {\r\n      // first: 20, ... userId: 123\r\n      for (const queryArgument of this.options.extraQueryArguments) {\r\n        (datasetFilters as any)[queryArgument.field] = queryArgument.value;\r\n      }\r\n    }\r\n\r\n    // with pagination:: query { users(first: 20, offset: 0, orderBy: [], filterBy: []) { totalCount: 100, nodes: { _columns_ }}}\r\n    // without pagination:: query { users(orderBy: [], filterBy: []) { _columns_ }}\r\n    datasetQb.filter(datasetFilters);\r\n    queryQb.find(datasetQb);\r\n\r\n    const enumSearchProperties = ['direction:', 'field:', 'operator:'];\r\n    return this.trimDoubleQuotesOnEnumField(queryQb.toString(), enumSearchProperties, this.options.keepArgumentFieldDoubleQuotes || false);\r\n  }\r\n\r\n  /**\r\n   * From an input array of strings, we want to build a GraphQL query string.\r\n   * The process has to take the dot notation and parse it into a valid GraphQL query\r\n   * Following this SO answer https://stackoverflow.com/a/47705476/1212166\r\n   *\r\n   * INPUT\r\n   *  ['firstName', 'lastName', 'billing.address.street', 'billing.address.zip']\r\n   * OUTPUT\r\n   * firstName, lastName, billing{address{street, zip}}\r\n   * @param inputArray\r\n   */\r\n  buildFilterQuery(inputArray: string[]) {\r\n\r\n    const set = (o: any = {}, a: any) => {\r\n      const k = a.shift();\r\n      o[k] = a.length ? set(o[k], a) : null;\r\n      return o;\r\n    };\r\n\r\n    const output = inputArray.reduce((o: any, a: string) => set(o, a.split('.')), {});\r\n\r\n    return JSON.stringify(output)\r\n      .replace(/\\\"|\\:|null/g, '')\r\n      .replace(/^\\{/, '')\r\n      .replace(/\\}$/, '');\r\n  }\r\n\r\n  clearFilters() {\r\n    this._currentFilters = [];\r\n    this.updateOptions({ filteringOptions: [] });\r\n  }\r\n\r\n  clearSorters() {\r\n    this._currentSorters = [];\r\n    this.updateOptions({ sortingOptions: [] });\r\n  }\r\n\r\n  /**\r\n   * Get an initialization of Pagination options\r\n   * @return Pagination Options\r\n   */\r\n  getInitPaginationOptions(): GraphqlDatasetFilter {\r\n    const paginationFirst = this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE;\r\n    return (this.options && this.options.isWithCursor) ? { first: paginationFirst } : { first: paginationFirst, offset: 0 };\r\n  }\r\n\r\n  /** Get the GraphQL dataset name */\r\n  getDatasetName(): string {\r\n    return this.options.datasetName || '';\r\n  }\r\n\r\n  /** Get the Filters that are currently used by the grid */\r\n  getCurrentFilters(): ColumnFilters | CurrentFilter[] {\r\n    return this._currentFilters;\r\n  }\r\n\r\n  /** Get the Pagination that is currently used by the grid */\r\n  getCurrentPagination(): CurrentPagination | undefined {\r\n    return this._currentPagination;\r\n  }\r\n\r\n  /** Get the Sorters that are currently used by the grid */\r\n  getCurrentSorters(): CurrentSorter[] {\r\n    return this._currentSorters;\r\n  }\r\n\r\n  /*\r\n   * Reset the pagination options\r\n   */\r\n  resetPaginationOptions() {\r\n    let paginationOptions: GraphqlPaginationOption | GraphqlCursorPaginationOption;\r\n\r\n    if (this.options && this.options.isWithCursor) {\r\n      // first, last, after, before\r\n      paginationOptions = {\r\n        after: '',\r\n        before: undefined,\r\n        last: undefined\r\n      } as GraphqlCursorPaginationOption;\r\n    } else {\r\n      // first, last, offset\r\n      paginationOptions = ((this.options && this.options.paginationOptions) || this.getInitPaginationOptions()) as GraphqlPaginationOption;\r\n      (paginationOptions as GraphqlPaginationOption).offset = 0;\r\n    }\r\n\r\n    // save current pagination as Page 1 and page size as \"first\" set size\r\n    this._currentPagination = {\r\n      pageNumber: 1,\r\n      pageSize: paginationOptions.first || DEFAULT_PAGE_SIZE,\r\n    };\r\n\r\n    this.updateOptions({ paginationOptions });\r\n  }\r\n\r\n  updateOptions(serviceOptions?: Partial<GraphqlServiceOption>) {\r\n    this.options = { ...this.options, ...serviceOptions };\r\n  }\r\n\r\n  /*\r\n   * FILTERING\r\n   */\r\n  processOnFilterChanged(event: Event | undefined, args: FilterChangedArgs): string {\r\n    const gridOptions: GridOption = this._gridOptions;\r\n    const backendApi = gridOptions.backendServiceApi;\r\n\r\n    if (backendApi === undefined) {\r\n      throw new Error('Something went wrong in the GraphqlService, \"backendServiceApi\" is not initialized');\r\n    }\r\n\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    this._currentFilters = this.castFilterToColumnFilters(args.columnFilters);\r\n\r\n    if (!args || !args.grid) {\r\n      throw new Error('Something went wrong when trying create the GraphQL Backend Service, it seems that \"args\" is not populated correctly');\r\n    }\r\n\r\n    // loop through all columns to inspect filters & set the query\r\n    this.updateFilters(args.columnFilters, false);\r\n\r\n    this.resetPaginationOptions();\r\n    return this.buildQuery();\r\n  }\r\n\r\n  /*\r\n   * PAGINATION\r\n   * With cursor, the query can have 4 arguments (first, after, last, before), for example:\r\n   *   users (first:20, after:\"YXJyYXljb25uZWN0aW9uOjM=\") {\r\n   *     totalCount\r\n   *     pageInfo {\r\n   *       hasNextPage\r\n   *       hasPreviousPage\r\n   *       endCursor\r\n   *       startCursor\r\n   *     }\r\n   *     edges {\r\n   *       cursor\r\n   *       node {\r\n   *         name\r\n   *         gender\r\n   *       }\r\n   *     }\r\n   *   }\r\n   * Without cursor, the query can have 3 arguments (first, last, offset), for example:\r\n   *   users (first:20, offset: 10) {\r\n   *     totalCount\r\n   *     nodes {\r\n   *       name\r\n   *       gender\r\n   *     }\r\n   *   }\r\n   */\r\n  processOnPaginationChanged(_event: Event | undefined, args: PaginationChangedArgs): string {\r\n    const pageSize = +(args.pageSize || ((this.pagination) ? this.pagination.pageSize : DEFAULT_PAGE_SIZE));\r\n    this.updatePagination(args.newPage, pageSize);\r\n\r\n    // build the GraphQL query which we will use in the WebAPI callback\r\n    return this.buildQuery();\r\n  }\r\n\r\n  /*\r\n   * SORTING\r\n   * we will use sorting as per a Facebook suggestion on a Github issue (with some small changes)\r\n   * https://github.com/graphql/graphql-relay-js/issues/20#issuecomment-220494222\r\n   *\r\n   *  users (first: 20, offset: 10, orderBy: [{field: lastName, direction: ASC}, {field: firstName, direction: DESC}]) {\r\n   *    totalCount\r\n   *    nodes {\r\n   *      name\r\n   *      gender\r\n   *    }\r\n   *  }\r\n   */\r\n  // @deprecated note, we should remove \"SortChangedArgs\" and only use: ColumnSort | MultiColumnSort\r\n  processOnSortChanged(_event: Event | undefined, args: SortChangedArgs | ColumnSort | MultiColumnSort): string {\r\n    const sortColumns = (args.multiColumnSort) ? (args as MultiColumnSort).sortCols : new Array({ sortCol: (args as ColumnSort).sortCol, sortAsc: (args as ColumnSort).sortAsc });\r\n\r\n    // loop through all columns to inspect sorters & set the query\r\n    this.updateSorters(sortColumns);\r\n\r\n    // build the GraphQL query which we will use in the WebAPI callback\r\n    return this.buildQuery();\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect filters & update backend service filteringOptions\r\n   * @param columnFilters\r\n   */\r\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPresetOrDynamically: boolean) {\r\n    const searchByArray: GraphqlFilteringOption[] = [];\r\n    let searchValue: string | string[];\r\n\r\n    // on filter preset load, we need to keep current filters\r\n    if (isUpdatedByPresetOrDynamically) {\r\n      this._currentFilters = this.castFilterToColumnFilters(columnFilters);\r\n    }\r\n\r\n    for (const columnId in columnFilters) {\r\n      if (columnFilters.hasOwnProperty(columnId)) {\r\n        const columnFilter = (columnFilters as any)[columnId];\r\n\r\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\r\n        let columnDef: Column | undefined;\r\n        if (isUpdatedByPresetOrDynamically && Array.isArray(this._columnDefinitions)) {\r\n          columnDef = this._columnDefinitions.find((column: Column) => column.id === columnFilter.columnId);\r\n        } else {\r\n          columnDef = columnFilter.columnDef;\r\n        }\r\n        if (!columnDef) {\r\n          throw new Error('[GraphQL Service]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\r\n        }\r\n\r\n        const fieldName = (columnDef.filter && columnDef.filter.queryField) || columnDef.queryFieldFilter || columnDef.queryField || columnDef.field || columnDef.name || '';\r\n        const fieldType = columnDef.type || FieldType.string;\r\n        let searchTerms = columnFilter && columnFilter.searchTerms || [];\r\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\r\n        if (typeof fieldSearchValue === 'undefined') {\r\n          fieldSearchValue = '';\r\n        }\r\n\r\n        if (!fieldName) {\r\n          throw new Error(`GraphQL filter could not find the field name to query the search, your column definition must include a valid \"field\" or \"name\" (optionally you can also use the \"queryfield\").`);\r\n        }\r\n\r\n        fieldSearchValue = (fieldSearchValue === undefined || fieldSearchValue === null) ? '' : `${fieldSearchValue}`; // make sure it's a string\r\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n        let operator = columnFilter.operator || ((matches) ? matches[1] : '');\r\n        searchValue = (!!matches) ? matches[2] : '';\r\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\r\n\r\n        // no need to query if search value is empty\r\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\r\n          continue;\r\n        }\r\n\r\n        if (Array.isArray(searchTerms) && searchTerms.length === 1 && typeof searchTerms[0] === 'string' && searchTerms[0].indexOf('..') >= 0) {\r\n          if (!operator) {\r\n            operator = this._gridOptions.defaultFilterRangeOperator as OperatorString;\r\n          }\r\n          searchTerms = searchTerms[0].split('..', 2);\r\n          if (searchTerms[0] === '') {\r\n            operator = operator === OperatorType.rangeInclusive ? '<=' : operator === OperatorType.rangeExclusive ? '<' : operator;\r\n            searchTerms = searchTerms.slice(1);\r\n            searchValue = searchTerms[0];\r\n          } else if (searchTerms[1] === '') {\r\n            operator = operator === OperatorType.rangeInclusive ? '>=' : operator === OperatorType.rangeExclusive ? '>' : operator;\r\n            searchTerms = searchTerms.slice(0, 1);\r\n            searchValue = searchTerms[0];\r\n          }\r\n        }\r\n\r\n        if (typeof searchValue === 'string') {\r\n          if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\r\n            operator = ((operator === '*' || operator === '*z') ? 'EndsWith' : 'StartsWith') as OperatorString;\r\n          }\r\n        }\r\n\r\n        // if we didn't find an Operator but we have a Column Operator inside the Filter (DOM Element), we should use its default Operator\r\n        // multipleSelect is \"IN\", while singleSelect is \"EQ\", else don't map any operator\r\n        if (!operator && columnDef.filter) {\r\n          operator = columnDef.filter.operator;\r\n        }\r\n\r\n        // No operator and 2 search terms should lead to default range operator.\r\n        if (!operator && Array.isArray(searchTerms) && searchTerms.length === 2 && searchTerms[0] && searchTerms[1]) {\r\n          operator = this._gridOptions.defaultFilterRangeOperator as OperatorString;\r\n        }\r\n\r\n        // Range with 1 searchterm should lead to equals for a date field.\r\n        if ((operator === OperatorType.rangeInclusive || OperatorType.rangeExclusive) && Array.isArray(searchTerms) && searchTerms.length === 1 && fieldType === FieldType.date) {\r\n          operator = OperatorType.equal;\r\n        }\r\n\r\n        // Normalize all search values\r\n        searchValue = this.normalizeSearchValue(fieldType, searchValue);\r\n        if (Array.isArray(searchTerms)) {\r\n          searchTerms.forEach((_part, index) => {\r\n            searchTerms[index] = this.normalizeSearchValue(fieldType, searchTerms[index]);\r\n          });\r\n        }\r\n\r\n        // when having more than 1 search term (we need to create a CSV string for GraphQL \"IN\" or \"NOT IN\" filter search)\r\n        if (searchTerms && searchTerms.length > 1 && (operator === 'IN' || operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN' || operator === 'NOT_IN')) {\r\n          searchValue = searchTerms.join(',');\r\n        } else if (searchTerms && searchTerms.length === 2 && (operator === OperatorType.rangeExclusive || operator === OperatorType.rangeInclusive)) {\r\n          searchByArray.push({ field: fieldName, operator: (operator === OperatorType.rangeInclusive ? 'GE' : 'GT'), value: searchTerms[0] });\r\n          searchByArray.push({ field: fieldName, operator: (operator === OperatorType.rangeInclusive ? 'LE' : 'LT'), value: searchTerms[1] });\r\n          continue;\r\n        }\r\n\r\n        // if we still don't have an operator find the proper Operator to use by it's field type\r\n        if (!operator) {\r\n          operator = mapOperatorByFieldType(fieldType);\r\n        }\r\n\r\n        // build the search array\r\n        searchByArray.push({ field: fieldName, operator: mapOperatorType(operator), value: searchValue });\r\n      }\r\n    }\r\n\r\n    // update the service options with filters for the buildQuery() to work later\r\n    this.updateOptions({ filteringOptions: searchByArray });\r\n  }\r\n\r\n  /**\r\n   * Update the pagination component with it's new page number and size\r\n   * @param newPage\r\n   * @param pageSize\r\n   */\r\n  updatePagination(newPage: number, pageSize: number) {\r\n    this._currentPagination = {\r\n      pageNumber: newPage,\r\n      pageSize,\r\n    };\r\n\r\n    let paginationOptions;\r\n    if (this.options && this.options.isWithCursor) {\r\n      paginationOptions = {\r\n        first: pageSize\r\n      };\r\n    } else {\r\n      paginationOptions = {\r\n        first: pageSize,\r\n        offset: (newPage > 1) ? ((newPage - 1) * pageSize) : 0 // recalculate offset but make sure the result is always over 0\r\n      };\r\n    }\r\n\r\n    // unless user specifically set \"enablePagination\" to False, we'll update pagination options in every other cases\r\n    if (this._gridOptions && (this._gridOptions.enablePagination || !this._gridOptions.hasOwnProperty('enablePagination'))) {\r\n      this.updateOptions({ paginationOptions });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect sorters & update backend service sortingOptions\r\n   * @param columnFilters\r\n   */\r\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\r\n    let currentSorters: CurrentSorter[] = [];\r\n    const graphqlSorters: GraphqlSortingOption[] = [];\r\n\r\n    if (!sortColumns && presetSorters) {\r\n      // make the presets the current sorters, also make sure that all direction are in uppercase for GraphQL\r\n      currentSorters = presetSorters;\r\n      currentSorters.forEach((sorter) => sorter.direction = sorter.direction.toUpperCase() as SortDirectionString);\r\n\r\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\r\n      const tmpSorterArray = currentSorters.map((sorter) => {\r\n        const columnDef = this._columnDefinitions.find((column: Column) => column.id === sorter.columnId);\r\n\r\n        graphqlSorters.push({\r\n          field: columnDef ? ((columnDef.queryFieldSorter || columnDef.queryField || columnDef.field) + '') : (sorter.columnId + ''),\r\n          direction: sorter.direction\r\n        });\r\n\r\n        // return only the column(s) found in the Column Definitions ELSE null\r\n        if (columnDef) {\r\n          return {\r\n            columnId: sorter.columnId,\r\n            sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\r\n          };\r\n        }\r\n        return null;\r\n      });\r\n\r\n      // set the sort icons, but also make sure to filter out null values (that happens when columnDef is not found)\r\n      if (Array.isArray(tmpSorterArray)) {\r\n        this._grid.setSortColumns(tmpSorterArray.filter((sorter) => sorter));\r\n      }\r\n    } else if (sortColumns && !presetSorters) {\r\n      // build the orderBy array, it could be multisort, example\r\n      // orderBy:[{field: lastName, direction: ASC}, {field: firstName, direction: DESC}]\r\n      if (Array.isArray(sortColumns) && sortColumns.length > 0) {\r\n        for (const column of sortColumns) {\r\n          if (column && column.sortCol) {\r\n            currentSorters.push({\r\n              columnId: column.sortCol.id + '',\r\n              direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n            });\r\n\r\n            const fieldName = (column.sortCol.queryFieldSorter || column.sortCol.queryField || column.sortCol.field || '') + '';\r\n            if (fieldName) {\r\n              graphqlSorters.push({\r\n                field: fieldName,\r\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // keep current Sorters and update the service options with the new sorting\r\n    this._currentSorters = currentSorters;\r\n    this.updateOptions({ sortingOptions: graphqlSorters });\r\n  }\r\n\r\n  /**\r\n   * A function which takes an input string and removes double quotes only\r\n   * on certain fields are identified as GraphQL enums (except fields with dot notation)\r\n   * For example let say we identified (\"direction:\", \"sort\") as word which are GraphQL enum fields\r\n   * then the result will be:\r\n   * FROM\r\n   * query { users (orderBy:[{field:\"firstName\", direction:\"ASC\"} }]) }\r\n   * TO\r\n   * query { users (orderBy:[{field: firstName, direction: ASC}})}\r\n   *\r\n   * EXCEPTIONS (fields with dot notation \".\" which are inside a \"field:\")\r\n   * these fields will keep double quotes while everything else will be stripped of double quotes\r\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: \"ASC\"} }\r\n   * TO\r\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: ASC}}\r\n   * @param inputStr input string\r\n   * @param enumSearchWords array of enum words to filter\r\n   * @returns outputStr output string\r\n   */\r\n  trimDoubleQuotesOnEnumField(inputStr: string, enumSearchWords: string[], keepArgumentFieldDoubleQuotes: boolean) {\r\n    const patternWordInQuotes = `\\s?((field:\\s*)?\".*?\")`;\r\n    let patternRegex = enumSearchWords.join(patternWordInQuotes + '|');\r\n    patternRegex += patternWordInQuotes; // the last one should also have the pattern but without the pipe \"|\"\r\n    // example with (field: & direction:):  /field:s?(\".*?\")|direction:s?(\".*?\")/\r\n    const reg = new RegExp(patternRegex, 'g');\r\n\r\n    return inputStr.replace(reg, (group1, group2, group3) => {\r\n      // remove double quotes except when the string starts with a \"field:\"\r\n      let removeDoubleQuotes = true;\r\n      if (group1.startsWith('field:') && keepArgumentFieldDoubleQuotes) {\r\n        removeDoubleQuotes = false;\r\n      }\r\n      const rep = removeDoubleQuotes ? group1.replace(/\"/g, '') : group1;\r\n      return rep;\r\n    });\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // -------------------\r\n  /**\r\n   * Cast provided filters (could be in multiple formats) into an array of CurrentFilter\r\n   * @param columnFilters\r\n   */\r\n  private castFilterToColumnFilters(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    const filtersArray: ColumnFilter[] = (typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => (columnFilters as any)[key]) : columnFilters;\r\n\r\n    if (!Array.isArray(filtersArray)) {\r\n      return [];\r\n    }\r\n\r\n    return filtersArray.map((filter) => {\r\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\r\n      if (filter.operator) {\r\n        tmpFilter.operator = filter.operator;\r\n      }\r\n      if (Array.isArray(filter.searchTerms)) {\r\n        tmpFilter.searchTerms = filter.searchTerms;\r\n      }\r\n      return tmpFilter;\r\n    });\r\n  }\r\n\r\n  /** Normalizes the search value according to field type. */\r\n  private normalizeSearchValue(fieldType: typeof FieldType[keyof typeof FieldType], searchValue: any) {\r\n    switch (fieldType) {\r\n      case FieldType.date:\r\n      case FieldType.string:\r\n      case FieldType.text:\r\n      case FieldType.readonly:\r\n        if (typeof searchValue === 'string') {\r\n          // escape single quotes by doubling them\r\n          searchValue = searchValue.replace(/'/g, `''`);\r\n        }\r\n        break;\r\n      case FieldType.integer:\r\n      case FieldType.number:\r\n      case FieldType.float:\r\n        if (typeof searchValue === 'string') {\r\n          // Parse a valid decimal from the string.\r\n\r\n          // Replace double dots with single dots\r\n          searchValue = searchValue.replace(/\\.\\./g, '.');\r\n          // Remove a trailing dot\r\n          searchValue = searchValue.replace(/\\.+$/g, '');\r\n          // Prefix a leading dot with 0\r\n          searchValue = searchValue.replace(/^\\.+/g, '0.');\r\n          // Prefix leading dash dot with -0.\r\n          searchValue = searchValue.replace(/^\\-+\\.+/g, '-0.');\r\n          // Remove any non valid decimal characters from the search string\r\n          searchValue = searchValue.replace(/(?!^\\-)[^\\d\\.]/g, '');\r\n\r\n          // if nothing left, search for 0\r\n          if (searchValue === '' || searchValue === '-') {\r\n            searchValue = '0';\r\n          }\r\n        }\r\n        break;\r\n    }\r\n\r\n    return searchValue;\r\n  }\r\n}\r\n","import { CaseType, OdataOption } from '../models/index';\r\nimport { titleCase } from './utilities';\r\n\r\nexport class OdataQueryBuilderService {\r\n  _columnFilters: any;\r\n  _defaultSortBy: string;\r\n  _filterCount?: number;\r\n  _odataOptions: Partial<OdataOption>;\r\n\r\n  constructor() {\r\n    this._odataOptions = {\r\n      filterQueue: [],\r\n      orderBy: ''\r\n    };\r\n    this._defaultSortBy = '';\r\n    this._columnFilters = {};\r\n  }\r\n\r\n  /*\r\n    * Build the OData query string from all the options provided\r\n    * @return string OData query\r\n    */\r\n  buildQuery(): string {\r\n    if (!this._odataOptions) {\r\n      throw new Error('Odata Service requires certain options like \"top\" for it to work');\r\n    }\r\n    this._odataOptions.filterQueue = [];\r\n    const queryTmpArray = [];\r\n\r\n    // When enableCount is set, add it to the OData query\r\n    if (this._odataOptions && this._odataOptions.enableCount === true) {\r\n      const countQuery = ((this._odataOptions as any).version >= 4) ? '$count=true' : '$inlinecount=allpages';\r\n      queryTmpArray.push(countQuery);\r\n    }\r\n\r\n    if (this._odataOptions.top) {\r\n      queryTmpArray.push(`$top=${this._odataOptions.top}`);\r\n    }\r\n    if (this._odataOptions.skip) {\r\n      queryTmpArray.push(`$skip=${this._odataOptions.skip}`);\r\n    }\r\n    if (this._odataOptions.orderBy) {\r\n      let argument = '';\r\n      if (Array.isArray(this._odataOptions.orderBy)) {\r\n        argument = this._odataOptions.orderBy.join(','); // csv, that will form a query, for example: $orderby=RoleName asc, Id desc\r\n      } else {\r\n        argument = this._odataOptions.orderBy;\r\n      }\r\n      queryTmpArray.push(`$orderby=${argument}`);\r\n    }\r\n    if (this._odataOptions.filterBy || this._odataOptions.filter) {\r\n      const filterBy = this._odataOptions.filter || this._odataOptions.filterBy;\r\n      if (filterBy) {\r\n        this._filterCount = 1;\r\n        this._odataOptions.filterQueue = [];\r\n        let filterStr = filterBy;\r\n        if (Array.isArray(filterBy)) {\r\n          this._filterCount = filterBy.length;\r\n          filterStr = filterBy.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n        }\r\n\r\n        if (typeof filterStr === 'string') {\r\n          if (!(filterStr[0] === '(' && filterStr.slice(-1) === ')')) {\r\n            this.addToFilterQueueWhenNotExists(`(${filterStr})`);\r\n          } else {\r\n            this.addToFilterQueueWhenNotExists(filterStr);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (this._odataOptions.filterQueue.length > 0) {\r\n      const query = this._odataOptions.filterQueue.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n      this._odataOptions.filter = query; // overwrite with\r\n      queryTmpArray.push(`$filter=${query}`);\r\n    }\r\n\r\n    // join all the odata functions by a '&'\r\n    return queryTmpArray.join('&');\r\n  }\r\n\r\n  getFilterCount(): number | undefined {\r\n    return this._filterCount;\r\n  }\r\n\r\n  get columnFilters(): any[] {\r\n    return this._columnFilters;\r\n  }\r\n\r\n  get options(): Partial<OdataOption> {\r\n    return this._odataOptions;\r\n  }\r\n\r\n  set options(options: Partial<OdataOption>) {\r\n    this._odataOptions = options;\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string) {\r\n    if (this._columnFilters && this._columnFilters.hasOwnProperty(fieldName)) {\r\n      delete this._columnFilters[fieldName];\r\n    }\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: any, searchTerms?: any[]) {\r\n    this._columnFilters[fieldName] = {\r\n      search: searchTerms,\r\n      value\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Change any OData options that will be used to build the query\r\n   * @param object options\r\n   */\r\n  updateOptions(options: Partial<OdataOption>) {\r\n    for (const property of Object.keys(options)) {\r\n      if (options.hasOwnProperty(property)) {\r\n        (this._odataOptions as any)[property as keyof OdataOption] = options[property as keyof OdataOption]; // replace of the property\r\n      }\r\n\r\n      // we need to keep the defaultSortBy for references whenever the user removes his Sorting\r\n      // then we would revert to the defaultSortBy and the only way is to keep a hard copy here\r\n      if (property === 'orderBy' || property === 'sortBy') {\r\n        let sortBy = options[property as keyof OdataOption];\r\n\r\n        // make sure first char of each orderBy field is capitalize\r\n        if (this._odataOptions.caseType === CaseType.pascalCase) {\r\n          if (Array.isArray(sortBy)) {\r\n            sortBy.forEach((field, index, inputArray) => {\r\n              inputArray[index] = titleCase(field);\r\n            });\r\n          } else {\r\n            sortBy = titleCase(options[property as keyof OdataOption]);\r\n          }\r\n        }\r\n        this._odataOptions.orderBy = sortBy;\r\n        this._defaultSortBy = sortBy;\r\n      }\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // -------------------\r\n\r\n  private addToFilterQueueWhenNotExists(filterStr: string) {\r\n    if (this._odataOptions.filterQueue && this._odataOptions.filterQueue.indexOf(filterStr) === -1) {\r\n      this._odataOptions.filterQueue.push(filterStr);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { parseUtcDate, mapOperatorByFieldType, titleCase } from './utilities';\r\nimport {\r\n  BackendService,\r\n  CaseType,\r\n  Column,\r\n  ColumnFilter,\r\n  ColumnFilters,\r\n  ColumnSort,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  FilterChangedArgs,\r\n  FieldType,\r\n  GridOption,\r\n  OdataOption,\r\n  Pagination,\r\n  PaginationChangedArgs,\r\n  SortChangedArgs,\r\n  SortDirection,\r\n  SortDirectionString,\r\n  OperatorType,\r\n  OdataSortingOption,\r\n  OperatorString,\r\n  SearchTerm\r\n} from './../models/index';\r\nimport { OdataQueryBuilderService } from './odataQueryBuilder.service';\r\n\r\nconst DEFAULT_ITEMS_PER_PAGE = 25;\r\nconst DEFAULT_PAGE_SIZE = 20;\r\n\r\n@Injectable()\r\nexport class GridOdataService implements BackendService {\r\n  private _currentFilters: CurrentFilter[] = [];\r\n  private _currentPagination?: CurrentPagination;\r\n  private _currentSorters: CurrentSorter[] = [];\r\n  private _columnDefinitions!: Column[];\r\n  private _grid: any;\r\n  private _odataService: OdataQueryBuilderService;\r\n  options!: Partial<OdataOption>;\r\n  pagination: Pagination | undefined;\r\n  defaultOptions: OdataOption = {\r\n    top: DEFAULT_ITEMS_PER_PAGE,\r\n    orderBy: '',\r\n    caseType: CaseType.pascalCase\r\n  };\r\n\r\n  /** Getter for the Column Definitions */\r\n  get columnDefinitions() {\r\n    return this._columnDefinitions;\r\n  }\r\n\r\n  /** Getter for the Odata Service */\r\n  get odataService() {\r\n    return this._odataService;\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  constructor() {\r\n    this._odataService = new OdataQueryBuilderService();\r\n  }\r\n\r\n  init(serviceOptions: Partial<OdataOption> | undefined, pagination?: Pagination, grid?: any): void {\r\n    this._grid = grid;\r\n    const mergedOptions = { ...this.defaultOptions, ...serviceOptions };\r\n\r\n    // unless user specifically set \"enablePagination\" to False, we'll add \"top\" property for the pagination in every other cases\r\n    if (this._gridOptions && !this._gridOptions.enablePagination) {\r\n      // save current pagination as Page 1 and page size as \"top\"\r\n      this._odataService.options = { ...mergedOptions, top: undefined };\r\n      this._currentPagination = undefined;\r\n    } else {\r\n      const topOption = (pagination && pagination.pageSize) ? pagination.pageSize : this.defaultOptions.top;\r\n      this._odataService.options = { ...mergedOptions, top: topOption };\r\n      this._currentPagination = {\r\n        pageNumber: 1,\r\n        pageSize: this._odataService.options.top || this.defaultOptions.top || DEFAULT_PAGE_SIZE,\r\n      };\r\n    }\r\n\r\n    this.options = this._odataService.options;\r\n    this.pagination = pagination;\r\n\r\n    if (grid && grid.getColumns) {\r\n      this._columnDefinitions = serviceOptions && serviceOptions.columnDefinitions || grid.getColumns();\r\n      this._columnDefinitions = this._columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\r\n    }\r\n  }\r\n\r\n  buildQuery(): string {\r\n    return this._odataService.buildQuery();\r\n  }\r\n\r\n  clearFilters() {\r\n    this._currentFilters = [];\r\n    this.updateFilters([]);\r\n  }\r\n\r\n  clearSorters() {\r\n    this._currentSorters = [];\r\n    this.updateSorters([]);\r\n  }\r\n\r\n  updateOptions(serviceOptions?: Partial<OdataOption>) {\r\n    this.options = { ...this.options, ...serviceOptions };\r\n    this._odataService.options = this.options;\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string): void {\r\n    this._odataService.removeColumnFilter(fieldName);\r\n  }\r\n\r\n  /** Get the Filters that are currently used by the grid */\r\n  getCurrentFilters(): CurrentFilter[] {\r\n    return this._currentFilters;\r\n  }\r\n\r\n  /** Get the Pagination that is currently used by the grid */\r\n  getCurrentPagination(): CurrentPagination | undefined {\r\n    return this._currentPagination;\r\n  }\r\n\r\n  /** Get the Sorters that are currently used by the grid */\r\n  getCurrentSorters(): CurrentSorter[] {\r\n    return this._currentSorters;\r\n  }\r\n\r\n  /**\r\n   * Mapper for mathematical operators (ex.: <= is \"le\", > is \"gt\")\r\n   * @param string operator\r\n   * @returns string map\r\n   */\r\n  mapOdataOperator(operator: string) {\r\n    let map = '';\r\n    switch (operator) {\r\n      case '<':\r\n        map = 'lt';\r\n        break;\r\n      case '<=':\r\n        map = 'le';\r\n        break;\r\n      case '>':\r\n        map = 'gt';\r\n        break;\r\n      case '>=':\r\n        map = 'ge';\r\n        break;\r\n      case '<>':\r\n      case '!=':\r\n        map = 'ne';\r\n        break;\r\n      case '=':\r\n      case '==':\r\n      default:\r\n        map = 'eq';\r\n        break;\r\n    }\r\n\r\n    return map;\r\n  }\r\n\r\n  /*\r\n   * Reset the pagination options\r\n   */\r\n  resetPaginationOptions() {\r\n    this._odataService.updateOptions({\r\n      skip: 0\r\n    });\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: string, terms?: any[]) {\r\n    this._odataService.saveColumnFilter(fieldName, value, terms);\r\n  }\r\n\r\n  /*\r\n   * FILTERING\r\n   */\r\n  processOnFilterChanged(event: Event | undefined, args: FilterChangedArgs): string {\r\n    const gridOptions: GridOption = this._gridOptions;\r\n    const backendApi = gridOptions.backendServiceApi;\r\n\r\n    if (backendApi === undefined) {\r\n      throw new Error('Something went wrong in the GridOdataService, \"backendServiceApi\" is not initialized');\r\n    }\r\n\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    this._currentFilters = this.castFilterToColumnFilters(args.columnFilters);\r\n\r\n    if (!args || !args.grid) {\r\n      throw new Error('Something went wrong when trying create the GridOdataService, it seems that \"args\" is not populated correctly');\r\n    }\r\n\r\n    // loop through all columns to inspect filters & set the query\r\n    this.updateFilters(args.columnFilters);\r\n\r\n    this.resetPaginationOptions();\r\n    return this._odataService.buildQuery();\r\n  }\r\n\r\n  /*\r\n   * PAGINATION\r\n   */\r\n  processOnPaginationChanged(_event: Event | undefined, args: PaginationChangedArgs) {\r\n    const pageSize = +(args.pageSize || ((this.pagination) ? this.pagination.pageSize : DEFAULT_PAGE_SIZE));\r\n    this.updatePagination(args.newPage, pageSize);\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this._odataService.buildQuery();\r\n  }\r\n\r\n  /*\r\n   * SORTING\r\n   */\r\n  processOnSortChanged(_event: Event | undefined, args: SortChangedArgs) {\r\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\r\n\r\n    // loop through all columns to inspect sorters & set the query\r\n    this.updateSorters(sortColumns);\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this._odataService.buildQuery();\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect filters & update backend service filters\r\n   * @param columnFilters\r\n   */\r\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPresetOrDynamically?: boolean) {\r\n    let searchBy = '';\r\n    const searchByArray: string[] = [];\r\n    const odataVersion = this._odataService && this._odataService.options && this._odataService.options.version || 2;\r\n\r\n    // on filter preset load, we need to keep current filters\r\n    if (isUpdatedByPresetOrDynamically) {\r\n      this._currentFilters = this.castFilterToColumnFilters(columnFilters);\r\n    }\r\n\r\n    // loop through all columns to inspect filters\r\n    for (const columnId in columnFilters) {\r\n      if (columnFilters.hasOwnProperty(columnId)) {\r\n        const columnFilter = (columnFilters as any)[columnId];\r\n\r\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\r\n        let columnDef: Column | undefined;\r\n        if (isUpdatedByPresetOrDynamically && Array.isArray(this._columnDefinitions)) {\r\n          columnDef = this._columnDefinitions.find((column: Column) => {\r\n            return column.id === columnFilter.columnId;\r\n          });\r\n        } else {\r\n          columnDef = columnFilter.columnDef;\r\n        }\r\n        if (!columnDef) {\r\n          throw new Error('[GridOData Service]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\r\n        }\r\n\r\n        let fieldName = (columnDef.filter && columnDef.filter.queryField) || columnDef.queryFieldFilter || columnDef.queryField || columnDef.field || columnDef.name || '';\r\n        const fieldType = columnDef.type || FieldType.string;\r\n        let searchTerms = (columnFilter && columnFilter.searchTerms ? [...columnFilter.searchTerms] : null) || [];\r\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\r\n        if (typeof fieldSearchValue === 'undefined') {\r\n          fieldSearchValue = '';\r\n        }\r\n\r\n        if (!fieldName) {\r\n          throw new Error(`GridOData filter could not find the field name to query the search, your column definition must include a valid \"field\" or \"name\" (optionally you can also use the \"queryfield\").`);\r\n        }\r\n\r\n        fieldSearchValue = (fieldSearchValue === undefined || fieldSearchValue === null) ? '' : `${fieldSearchValue}`; // make sure it's a string\r\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n        let operator = columnFilter.operator || ((matches) ? matches[1] : '');\r\n        let searchValue = (!!matches) ? matches[2] : '';\r\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' || operator === OperatorType.endsWith) ? '*' : '';\r\n        const bypassOdataQuery = columnFilter.bypassBackendQuery || false;\r\n\r\n        // no need to query if search value is empty\r\n        if (fieldName && searchValue === '' && searchTerms.length <= 1) {\r\n          this.removeColumnFilter(fieldName);\r\n          continue;\r\n        }\r\n\r\n        if (Array.isArray(searchTerms) && searchTerms.length === 1 && typeof searchTerms[0] === 'string' && searchTerms[0].indexOf('..') >= 0) {\r\n          if (!operator) {\r\n            operator = this._gridOptions.defaultFilterRangeOperator;\r\n          }\r\n\r\n          searchTerms = searchTerms[0].split('..', 2);\r\n          if (searchTerms[0] === '') {\r\n            operator = operator === OperatorType.rangeInclusive ? '<=' : operator === OperatorType.rangeExclusive ? '<' : operator;\r\n            searchTerms = searchTerms.slice(1);\r\n            searchValue = searchTerms[0];\r\n          } else if (searchTerms[1] === '') {\r\n            operator = operator === OperatorType.rangeInclusive ? '>=' : operator === OperatorType.rangeExclusive ? '>' : operator;\r\n            searchTerms = searchTerms.slice(0, 1);\r\n            searchValue = searchTerms[0];\r\n          }\r\n        }\r\n\r\n        // if we didn't find an Operator but we have a Column Operator inside the Filter (DOM Element), we should use its default Operator\r\n        // multipleSelect is \"IN\", while singleSelect is \"EQ\", else don't map any operator\r\n        if (!operator && columnDef.filter) {\r\n          operator = columnDef.filter.operator;\r\n        }\r\n\r\n        // No operator and 2 search terms should lead to default range operator.\r\n        if (!operator && Array.isArray(searchTerms) && searchTerms.length === 2 && searchTerms[0] && searchTerms[1]) {\r\n          operator = this._gridOptions.defaultFilterRangeOperator;\r\n        }\r\n\r\n        // Range with 1 searchterm should lead to equals for a date field.\r\n        if ((operator === OperatorType.rangeInclusive || OperatorType.rangeExclusive) && Array.isArray(searchTerms) && searchTerms.length === 1 && fieldType === FieldType.date) {\r\n          operator = OperatorType.equal;\r\n        }\r\n\r\n        // if we still don't have an operator find the proper Operator to use by it's field type\r\n        if (!operator) {\r\n          operator = mapOperatorByFieldType(fieldType);\r\n        }\r\n\r\n        // extra query arguments\r\n        if (bypassOdataQuery) {\r\n          // push to our temp array and also trim white spaces\r\n          if (fieldName) {\r\n            this.saveColumnFilter(fieldName, fieldSearchValue, searchTerms);\r\n          }\r\n        } else {\r\n          // Normalize all search values\r\n          searchValue = this.normalizeSearchValue(fieldType, searchValue, odataVersion);\r\n          if (Array.isArray(searchTerms)) {\r\n            searchTerms.forEach((part, index) => {\r\n              searchTerms[index] = this.normalizeSearchValue(fieldType, searchTerms[index], odataVersion);\r\n            });\r\n          }\r\n\r\n          searchBy = '';\r\n\r\n          // titleCase the fieldName so that it matches the WebApi names\r\n          if (this._odataService.options.caseType === CaseType.pascalCase) {\r\n            fieldName = titleCase(fieldName || '');\r\n          }\r\n\r\n          if (searchTerms && searchTerms.length > 1 && (operator === 'IN' || operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN' || operator === 'NOT_IN')) {\r\n            // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n            const tmpSearchTerms: string[] = [];\r\n            if (operator === 'IN') {\r\n              // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n              for (let j = 0, lnj = searchTerms.length; j < lnj; j++) {\r\n                tmpSearchTerms.push(`${fieldName} eq ${searchTerms[j]}`);\r\n              }\r\n              searchBy = tmpSearchTerms.join(' or ');\r\n            } else {\r\n              // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n              for (let k = 0, lnk = searchTerms.length; k < lnk; k++) {\r\n                tmpSearchTerms.push(`${fieldName} ne ${searchTerms[k]}`);\r\n              }\r\n              searchBy = tmpSearchTerms.join(' and ');\r\n            }\r\n            if (!(typeof searchBy === 'string' && searchBy[0] === '(' && searchBy.slice(-1) === ')')) {\r\n              searchBy = `(${searchBy})`;\r\n            }\r\n          } else if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*' || operator === OperatorType.startsWith || operator === OperatorType.endsWith) {\r\n            // first/last character is a '*' will be a startsWith or endsWith\r\n            searchBy = (operator === '*' || operator === '*z' || operator === OperatorType.endsWith) ? `endswith(${fieldName}, ${searchValue})` : `startswith(${fieldName}, ${searchValue})`;\r\n          } else if (operator === OperatorType.rangeExclusive || operator === OperatorType.rangeInclusive) {\r\n            // example:: (Name >= 'Bob' and Name <= 'Jane')\r\n            searchBy = this.filterBySearchTermRange(fieldName, operator, searchTerms);\r\n          } else if ((operator === '' || operator === OperatorType.contains || operator === OperatorType.notContains) &&\r\n            (fieldType === FieldType.string || fieldType === FieldType.text || fieldType === FieldType.readonly)) {\r\n            searchBy = odataVersion >= 4 ? `contains(${fieldName}, ${searchValue})` : `substringof(${searchValue}, ${fieldName})`;\r\n            if (operator === OperatorType.notContains) {\r\n              searchBy = `not ${searchBy}`;\r\n            }\r\n          } else {\r\n            // any other field type (or undefined type)\r\n            searchBy = `${fieldName} ${this.mapOdataOperator(operator)} ${searchValue}`;\r\n          }\r\n\r\n          // push to our temp array and also trim white spaces\r\n          if (searchBy !== '') {\r\n            searchByArray.push(searchBy.trim());\r\n            this.saveColumnFilter(fieldName || '', fieldSearchValue, searchValue);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // update the service options with filters for the buildQuery() to work later\r\n    this._odataService.updateOptions({\r\n      filter: (searchByArray.length > 0) ? searchByArray.join(' and ') : '',\r\n      skip: undefined\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the pagination component with it's new page number and size\r\n   * @param newPage\r\n   * @param pageSize\r\n   */\r\n  updatePagination(newPage: number, pageSize: number) {\r\n    this._currentPagination = {\r\n      pageNumber: newPage,\r\n      pageSize,\r\n    };\r\n\r\n    // unless user specifically set \"enablePagination\" to False, we'll update pagination options in every other cases\r\n    if (this._gridOptions && (this._gridOptions.enablePagination || !this._gridOptions.hasOwnProperty('enablePagination'))) {\r\n      this._odataService.updateOptions({\r\n        top: pageSize,\r\n        skip: (newPage - 1) * pageSize\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect sorters & update backend service orderBy\r\n   * @param columnFilters\r\n   */\r\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\r\n    let currentSorters: CurrentSorter[] = [];\r\n    const odataSorters: OdataSortingOption[] = [];\r\n\r\n    if (!sortColumns && presetSorters) {\r\n      // make the presets the current sorters, also make sure that all direction are in lowercase for OData\r\n      currentSorters = presetSorters;\r\n      currentSorters.forEach((sorter) => sorter.direction = sorter.direction.toLowerCase() as SortDirectionString);\r\n\r\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\r\n      const tmpSorterArray = currentSorters.map((sorter) => {\r\n        const columnDef = this._columnDefinitions.find((column: Column) => column.id === sorter.columnId);\r\n\r\n        odataSorters.push({\r\n          field: columnDef ? ((columnDef.queryFieldSorter || columnDef.queryField || columnDef.field) + '') : (sorter.columnId + ''),\r\n          direction: sorter.direction\r\n        });\r\n\r\n        // return only the column(s) found in the Column Definitions ELSE null\r\n        if (columnDef) {\r\n          return {\r\n            columnId: sorter.columnId,\r\n            sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\r\n          };\r\n        }\r\n        return null;\r\n      });\r\n\r\n      // set the sort icons, but also make sure to filter out null values (that happens when columnDef is not found)\r\n      if (Array.isArray(tmpSorterArray)) {\r\n        this._grid.setSortColumns(tmpSorterArray);\r\n      }\r\n    } else if (sortColumns && !presetSorters) {\r\n      // build the SortBy string, it could be multisort, example: customerNo asc, purchaserName desc\r\n      if (sortColumns && sortColumns.length === 0) {\r\n        // TODO fix this line\r\n        // currentSorters = new Array(this.defaultOptions.orderBy); // when empty, use the default sort\r\n      } else {\r\n        if (sortColumns) {\r\n          for (const columnDef of sortColumns) {\r\n            if (columnDef.sortCol) {\r\n              let fieldName = (columnDef.sortCol.queryFieldSorter || columnDef.sortCol.queryField || columnDef.sortCol.field) + '';\r\n              let columnFieldName = (columnDef.sortCol.field || columnDef.sortCol.id) + '';\r\n              let queryField = (columnDef.sortCol.queryFieldSorter || columnDef.sortCol.queryField || columnDef.sortCol.field || '') + '';\r\n              if (this._odataService.options.caseType === CaseType.pascalCase) {\r\n                fieldName = titleCase(fieldName);\r\n                columnFieldName = titleCase(columnFieldName);\r\n                queryField = titleCase(queryField);\r\n              }\r\n\r\n              if (columnFieldName !== '') {\r\n                currentSorters.push({\r\n                  columnId: columnFieldName,\r\n                  direction: columnDef.sortAsc ? 'asc' : 'desc'\r\n                });\r\n              }\r\n\r\n              if (queryField !== '') {\r\n                odataSorters.push({\r\n                  field: queryField,\r\n                  direction: columnDef.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // transform the sortby array into a CSV string for OData\r\n    currentSorters = currentSorters || [] as CurrentSorter[];\r\n    const csvString = odataSorters.map((sorter) => {\r\n      let str = '';\r\n      if (sorter && sorter.field) {\r\n        const sortField = (this._odataService.options.caseType === CaseType.pascalCase) ? titleCase(sorter.field) : sorter.field;\r\n        str = `${sortField} ${sorter && sorter.direction && sorter.direction.toLowerCase() || ''}`;\r\n      }\r\n      return str;\r\n    }).join(',');\r\n\r\n    this._odataService.updateOptions({\r\n      orderBy: csvString\r\n    });\r\n\r\n    // keep current Sorters and update the service options with the new sorting\r\n    this._currentSorters = currentSorters;\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this._odataService.buildQuery();\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // -------------------\r\n  /**\r\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\r\n   * @param columnFilters\r\n   */\r\n  private castFilterToColumnFilters(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    const filtersArray: ColumnFilter[] = (typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => (columnFilters as any)[key]) : columnFilters;\r\n\r\n    if (!Array.isArray(filtersArray)) {\r\n      return [];\r\n    }\r\n\r\n    return filtersArray.map((filter) => {\r\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\r\n      if (filter.operator) {\r\n        tmpFilter.operator = filter.operator;\r\n      }\r\n      if (Array.isArray(filter.searchTerms)) {\r\n        tmpFilter.searchTerms = filter.searchTerms;\r\n      }\r\n      return tmpFilter;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Filter by a range of searchTerms (2 searchTerms OR 1 string separated by 2 dots \"value1..value2\")\r\n   */\r\n  private filterBySearchTermRange(fieldName: string, operator: OperatorType | OperatorString, searchTerms: SearchTerm[]) {\r\n    let query = '';\r\n    if (Array.isArray(searchTerms) && searchTerms.length === 2) {\r\n      if (operator === OperatorType.rangeInclusive) {\r\n        // example:: (Duration >= 5 and Duration <= 10)\r\n        query = `(${fieldName} ge ${searchTerms[0]}`;\r\n        if (searchTerms[1] !== '') {\r\n          query += ` and ${fieldName} le ${searchTerms[1]}`;\r\n        }\r\n        query += ')';\r\n      } else if (operator === OperatorType.rangeExclusive) {\r\n        // example:: (Duration > 5 and Duration < 10)\r\n        query = `(${fieldName} gt ${searchTerms[0]}`;\r\n        if (searchTerms[1] !== '') {\r\n          query += ` and ${fieldName} lt ${searchTerms[1]}`;\r\n        }\r\n        query += ')';\r\n      }\r\n    }\r\n    return query;\r\n  }\r\n\r\n  /**\r\n   * Normalizes the search value according to field type and oData version.\r\n   */\r\n  private normalizeSearchValue(fieldType: FieldType, searchValue: any, version: number) {\r\n    switch (fieldType) {\r\n      case FieldType.date:\r\n        searchValue = parseUtcDate(searchValue as string, true);\r\n        searchValue = version >= 4 ? searchValue : `DateTime'${searchValue}'`;\r\n        break;\r\n      case FieldType.string:\r\n      case FieldType.text:\r\n      case FieldType.readonly:\r\n        if (typeof searchValue === 'string') {\r\n          // escape single quotes by doubling them\r\n          searchValue = searchValue.replace(/'/g, `''`);\r\n          // encode URI of the final search value\r\n          searchValue = encodeURIComponent(searchValue);\r\n          // strings need to be quoted.\r\n          searchValue = `'${searchValue}'`;\r\n        }\r\n        break;\r\n      case FieldType.integer:\r\n      case FieldType.number:\r\n      case FieldType.float:\r\n        if (typeof searchValue === 'string') {\r\n          // Parse a valid decimal from the string.\r\n\r\n          // Replace double dots with single dots\r\n          searchValue = searchValue.replace(/\\.\\./g, '.');\r\n          // Remove a trailing dot\r\n          searchValue = searchValue.replace(/\\.+$/g, '');\r\n          // Prefix a leading dot with 0\r\n          searchValue = searchValue.replace(/^\\.+/g, '0.');\r\n          // Prefix leading dash dot with -0.\r\n          searchValue = searchValue.replace(/^\\-+\\.+/g, '-0.');\r\n          // Remove any non valid decimal characters from the search string\r\n          searchValue = searchValue.replace(/(?!^\\-)[^\\d\\.]/g, '');\r\n\r\n          // if nothing left, search for 0\r\n          if (searchValue === '' || searchValue === '-') {\r\n            searchValue = '0';\r\n          }\r\n        }\r\n        break;\r\n    }\r\n\r\n    return searchValue;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport {\r\n  CellArgs,\r\n  Column,\r\n  CurrentPinning,\r\n  GridOption,\r\n  GridServiceDeleteOption,\r\n  GridServiceInsertOption,\r\n  GridServiceUpdateOption,\r\n  HideColumnOption,\r\n  OnEventArgs\r\n} from './../models/index';\r\nimport { arrayRemoveItemByIndex } from './utilities';\r\nimport { FilterService } from './filter.service';\r\nimport { GridStateService } from './gridState.service';\r\nimport { SharedService } from './shared.service';\r\nimport { SortService } from './sort.service';\r\nimport { TreeDataService } from './treeData.service';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\nlet highlightTimerEnd: any;\r\n\r\nconst GridServiceDeleteOptionDefaults: GridServiceDeleteOption = { triggerEvent: true };\r\nconst GridServiceInsertOptionDefaults: GridServiceInsertOption = { highlightRow: true, position: 'top', resortGrid: false, selectRow: false, triggerEvent: true };\r\nconst GridServiceUpdateOptionDefaults: GridServiceUpdateOption = { highlightRow: true, selectRow: false, scrollRowIntoView: false, triggerEvent: true };\r\nconst HideColumnOptionDefaults: HideColumnOption = { autoResizeColumns: true, triggerEvent: true, hideFromColumnPicker: false, hideFromGridMenu: false };\r\n\r\n@Injectable()\r\nexport class GridService {\r\n  private _grid: any;\r\n  private _dataView: any;\r\n  private _rowSelectionPlugin: any;\r\n  onItemAdded = new Subject<any | any[]>();\r\n  onItemDeleted = new Subject<any | any[]>();\r\n  onItemUpdated = new Subject<any | any[]>();\r\n  onItemUpserted = new Subject<any | any[]>();\r\n  onColumnsChanged = new Subject<Column[]>();\r\n\r\n  constructor(\r\n    private filterService: FilterService,\r\n    private gridStateService: GridStateService,\r\n    private sharedService: SharedService,\r\n    private sortService: SortService,\r\n    private treeDataService: TreeDataService,\r\n  ) { }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  dispose() {\r\n    if (this._rowSelectionPlugin && this._rowSelectionPlugin.destroy) {\r\n      this._rowSelectionPlugin.destroy();\r\n    }\r\n  }\r\n\r\n  init(grid: any, dataView: any): void {\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n  }\r\n\r\n  /** Clear all Filters & Sorts */\r\n  clearAllFiltersAndSorts() {\r\n    // call both clear Filters & Sort but only trigger the last one to avoid sending multiple backend queries\r\n    if (this.sortService && this.sortService.clearSorting) {\r\n      this.sortService.clearSorting(false); // skip event trigger on this one\r\n    }\r\n    if (this.filterService && this.filterService.clearFilters) {\r\n      this.filterService.clearFilters();\r\n    }\r\n  }\r\n\r\n  /** Clear all the pinning (frozen) options */\r\n  clearPinning() {\r\n    const visibleColumns = [...this.sharedService.visibleColumns];\r\n    this.sharedService.grid.setOptions({ frozenColumn: -1, frozenRow: -1, frozenBottom: false, enableMouseWheelScrollHandler: false });\r\n\r\n    // SlickGrid seems to be somehow resetting the columns to their original positions,\r\n    // so let's re-fix them to the position we kept as reference\r\n    if (Array.isArray(visibleColumns)) {\r\n      this.sharedService.grid.setColumns(visibleColumns);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set pinning (frozen) grid options\r\n   * @param  {Object} pinningOptions - which pinning/frozen options to modify\r\n   * @param {Boolean} shouldAutosizeColumns - defaults to True, should we call an autosizeColumns after the pinning is done?\r\n   * @param {Boolean} suppressRender - do we want to supress the grid re-rendering? (defaults to false)\r\n   * @param {Boolean} suppressColumnSet - do we want to supress the columns set, via \"setColumns()\" method? (defaults to false)\r\n   */\r\n  setPinning(pinningOptions: CurrentPinning, shouldAutosizeColumns = true, suppressRender = false, suppressColumnSet = true) {\r\n    this.sharedService.grid.setOptions(pinningOptions, suppressRender, suppressColumnSet);\r\n    this.sharedService.gridOptions = { ...this.sharedService.gridOptions, ...pinningOptions };\r\n\r\n    if (shouldAutosizeColumns) {\r\n      this.sharedService.grid.autosizeColumns();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all column set in the grid, that is all visible/hidden columns\r\n   * and also include any extra columns used by some plugins (like Row Selection, Row Detail, ...)\r\n   */\r\n  getAllColumnDefinitions() {\r\n    return this.sharedService.allColumns;\r\n  }\r\n\r\n  /** Get only visible column definitions and also include any extra columns by some plugins (like Row Selection, Row Detail, ...) */\r\n  getVisibleColumnDefinitions(): Column[] {\r\n    return this.sharedService.visibleColumns;\r\n  }\r\n\r\n  /**\r\n   * From a SlickGrid Event triggered get the Column Definition and Item Data Context\r\n   *\r\n   * For example the SlickGrid onClick will return cell arguments when subscribing to it.\r\n   * From these cellArgs, we want to get the Column Definition and Item Data\r\n   * @param cell event args\r\n   * @return object with columnDef and dataContext\r\n   */\r\n  getColumnFromEventArguments(args: CellArgs): OnEventArgs {\r\n    if (!args || !args.grid || !args.grid.getColumns || !args.grid.getDataItem) {\r\n      throw new Error('To get the column definition and data, we need to have these arguments passed as objects (row, cell, grid)');\r\n    }\r\n\r\n    return {\r\n      row: args.row,\r\n      cell: args.cell,\r\n      columnDef: args.grid.getColumns()[args.cell],\r\n      dataContext: args.grid.getDataItem(args.row),\r\n      dataView: this._dataView,\r\n      grid: this._grid\r\n    };\r\n  }\r\n\r\n  /** Get data item by it's row index number */\r\n  getDataItemByRowNumber<T = any>(rowNumber: number): T {\r\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\r\n      throw new Error(`We could not find SlickGrid Grid object or it's \"getDataItem\" method`);\r\n    }\r\n    return this._grid.getDataItem(rowNumber);\r\n  }\r\n\r\n  /** Chain the item Metadata with our implementation of Metadata at given row index */\r\n  getItemRowMetadataToHighlight(previousItemMetadata: any) {\r\n    return (rowNumber: number) => {\r\n      const item = this._dataView.getItem(rowNumber);\r\n      let meta = { cssClasses: '' };\r\n      if (typeof previousItemMetadata === 'function') {\r\n        meta = previousItemMetadata(rowNumber);\r\n      }\r\n\r\n      if (!meta) {\r\n        meta = { cssClasses: '' };\r\n      }\r\n\r\n      if (item && item._dirty) {\r\n        meta.cssClasses = (meta && meta.cssClasses || '') + ' dirty';\r\n      }\r\n\r\n      if (item && item.rowClass && meta) {\r\n        meta.cssClasses += ` ${item.rowClass}`;\r\n        meta.cssClasses += ` row${rowNumber}`;\r\n      }\r\n\r\n      return meta;\r\n    };\r\n  }\r\n\r\n  /**\r\n     * @deprecated Hide a Column from the Grid (the column will just become hidden and will still show up in columnPicker/gridMenu)\r\n     * @see hideColumnById\r\n     * @param column\r\n     */\r\n  hideColumn(column: Column) {\r\n    if (this._grid && this._grid.getColumns && this._grid.setColumns && this._grid.getColumnIndex) {\r\n      const columnIndex = this._grid.getColumnIndex(column.id);\r\n      if (columnIndex >= 0) {\r\n        this.hideColumnByIndex(columnIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @deprecated Hide a Column from the Grid by its column definition index (the column will just become hidden and will still show up in columnPicker/gridMenu)\r\n   * @see hideColumnById Please use \"hideColumnById(id)\" or \"hideColumnByIds([ids])\" instead since it has a lot more options\r\n   * @param columnIndex - column definition index\r\n   * @param triggerEvent - do we want to trigger an event (onHeaderMenuColumnsChanged) when column becomes hidden? Defaults to true.\r\n   */\r\n  hideColumnByIndex(columnIndex: number, triggerEvent = true) {\r\n    if (this._grid && this._grid.getColumns && this._grid.setColumns) {\r\n      const currentColumns = this._grid.getColumns();\r\n      const visibleColumns = arrayRemoveItemByIndex<Column>(currentColumns, columnIndex);\r\n      this.sharedService.visibleColumns = visibleColumns;\r\n      this._grid.setColumns(visibleColumns);\r\n      if (triggerEvent) {\r\n        this.onColumnsChanged.next(visibleColumns);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hide a Column from the Grid by its column definition id, the column will just become hidden and will still show up in columnPicker/gridMenu\r\n   * @param {string | number} columnId - column definition id\r\n   * @param {boolean} triggerEvent - do we want to trigger an event (onHeaderMenuColumnsChanged) when column becomes hidden? Defaults to true.\r\n   * @return {number} columnIndex - column index position when found or -1\r\n   */\r\n  hideColumnById(columnId: string | number, options?: HideColumnOption): number {\r\n    options = { ...HideColumnOptionDefaults, ...options };\r\n    if (this._grid && this._grid.getColumns && this._grid.setColumns) {\r\n      const currentColumns = this._grid.getColumns();\r\n      const colIndexFound = currentColumns.findIndex((col: Column) => col.id === columnId);\r\n\r\n      if (colIndexFound >= 0) {\r\n        const visibleColumns = arrayRemoveItemByIndex<Column>(currentColumns, colIndexFound);\r\n        this.sharedService.visibleColumns = visibleColumns;\r\n        this._grid.setColumns(visibleColumns);\r\n\r\n        const columnIndexFromAllColumns = this.sharedService.allColumns.findIndex(col => col.id === columnId);\r\n        if (columnIndexFromAllColumns) {\r\n          if (options && options.hideFromColumnPicker) {\r\n            this.sharedService.allColumns[columnIndexFromAllColumns].excludeFromColumnPicker = true;\r\n          }\r\n          if (options && options.hideFromGridMenu) {\r\n            this.sharedService.allColumns[columnIndexFromAllColumns].excludeFromGridMenu = true;\r\n          }\r\n        }\r\n\r\n        // do we want to auto-resize the columns in the grid after hidding some? most often yes\r\n        if (options && options.autoResizeColumns) {\r\n          this._grid.autosizeColumns();\r\n        }\r\n\r\n        // do we want to trigger an event after hidding\r\n        if (options && options.triggerEvent) {\r\n          this.onColumnsChanged.next(visibleColumns);\r\n        }\r\n        return colIndexFound;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Hide a Column from the Grid by its column definition id(s), the column will just become hidden and will still show up in columnPicker/gridMenu\r\n   * @param {Array<string | number>} columnIds - column definition ids, can be a single string and an array of strings\r\n   * @param {boolean} triggerEvent - do we want to trigger an event (onHeaderMenuColumnsChanged) when column becomes hidden? Defaults to true.\r\n   */\r\n  hideColumnByIds(columnIds: Array<string | number>, options?: HideColumnOption) {\r\n    options = { ...HideColumnOptionDefaults, ...options };\r\n    if (Array.isArray(columnIds)) {\r\n      for (const columnId of columnIds) {\r\n        // hide each column by its id but wait after the for loop to auto resize columns in the grid\r\n        this.hideColumnById(columnId, { ...options, triggerEvent: false, autoResizeColumns: false });\r\n      }\r\n      // do we want to auto-resize the columns in the grid after hidding some? most often yes\r\n      if (options && options.autoResizeColumns) {\r\n        this._grid.autosizeColumns();\r\n      }\r\n      // do we want to trigger an event after hidding\r\n      if (options && options.triggerEvent) {\r\n        this.onColumnsChanged.next(this.sharedService.visibleColumns);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Highlight then fade a row for x seconds.\r\n   * The implementation follows this SO answer: https://stackoverflow.com/a/19985148/1212166\r\n   * @param rowNumber\r\n   * @param fadeDelay\r\n   */\r\n  highlightRow(rowNumber: number | number[], fadeDelay = 1500, fadeOutDelay = 300) {\r\n    // create a SelectionModel if there's not one yet\r\n    if (!this._grid.getSelectionModel() && Slick && Slick.RowSelectionModel) {\r\n      this._rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\r\n      this._grid.setSelectionModel(this._rowSelectionPlugin);\r\n    }\r\n\r\n    if (Array.isArray(rowNumber)) {\r\n      rowNumber.forEach(row => this.highlightRowByMetadata(row, fadeDelay, fadeOutDelay));\r\n    } else {\r\n      this.highlightRowByMetadata(rowNumber, fadeDelay, fadeOutDelay);\r\n    }\r\n  }\r\n\r\n  highlightRowByMetadata(rowNumber: number, fadeDelay = 1500, fadeOutDelay = 300) {\r\n    this._dataView.getItemMetadata = this.getItemRowMetadataToHighlight(this._dataView.getItemMetadata);\r\n\r\n    const item = this._dataView.getItem(rowNumber);\r\n    const idPropName = this._gridOptions.datasetIdPropertyName || 'id';\r\n\r\n    if (item && item[idPropName] !== undefined) {\r\n      item.rowClass = 'highlight';\r\n      this._dataView.updateItem(item[idPropName], item);\r\n      this.renderGrid();\r\n\r\n      // fade out\r\n      clearTimeout(highlightTimerEnd);\r\n      highlightTimerEnd = setTimeout(() => {\r\n        item.rowClass = 'highlight-end';\r\n        this._dataView.updateItem(item[idPropName], item);\r\n        this.renderGrid();\r\n      }, fadeOutDelay);\r\n\r\n      // delete the row's CSS highlight classes once the delay is passed\r\n      setTimeout(() => {\r\n        if (item && item[idPropName] !== undefined) {\r\n          delete item.rowClass;\r\n          if (this._dataView.getIdxById(item[idPropName]) !== undefined) {\r\n            this._dataView.updateItem(item[idPropName], item);\r\n            this.renderGrid();\r\n          }\r\n        }\r\n      }, fadeDelay + fadeOutDelay);\r\n    }\r\n  }\r\n\r\n  /** Get the Data Item from a grid row index */\r\n  getDataItemByRowIndex<T = any>(index: number): T {\r\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object and/or \"getDataItem\" method');\r\n    }\r\n\r\n    return this._grid.getDataItem(index);\r\n  }\r\n\r\n  /** Get the Data Item from an array of grid row indexes */\r\n  getDataItemByRowIndexes<T = any>(indexes: number[]): T[] {\r\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object and/or \"getDataItem\" method');\r\n    }\r\n\r\n    const dataItems: any[] = [];\r\n\r\n    if (Array.isArray(indexes)) {\r\n      indexes.forEach((idx) => {\r\n        dataItems.push(this._grid.getDataItem(idx));\r\n      });\r\n    }\r\n\r\n    return dataItems;\r\n  }\r\n\r\n  /** Get the currently selected row indexes */\r\n  getSelectedRows(): number[] {\r\n    if (!this._grid || typeof this._grid.getSelectedRows !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object and/or \"getSelectedRows\" method');\r\n    }\r\n    return this._grid.getSelectedRows();\r\n  }\r\n\r\n  /** Get the currently selected rows item data */\r\n  getSelectedRowsDataItem<T = any>(): T[] {\r\n    if (!this._grid || typeof this._grid.getSelectedRows !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object and/or \"getSelectedRows\" method');\r\n    }\r\n\r\n    const selectedRowIndexes = this._grid.getSelectedRows();\r\n    return this.getDataItemByRowIndexes<T>(selectedRowIndexes);\r\n  }\r\n\r\n  /** Select the selected row by a row index */\r\n  setSelectedRow(rowIndex: number) {\r\n    if (this._grid && this._grid.setSelectedRows) {\r\n      this._grid.setSelectedRows([rowIndex]);\r\n    }\r\n  }\r\n\r\n  /** Set selected rows with provided array of row indexes */\r\n  setSelectedRows(rowIndexes: number[]) {\r\n    if (this._grid && this._grid.setSelectedRows) {\r\n      this._grid.setSelectedRows(rowIndexes);\r\n    }\r\n  }\r\n\r\n  /** Re-Render the Grid */\r\n  renderGrid() {\r\n    if (this._grid && typeof this._grid.invalidate === 'function') {\r\n      this._grid.invalidate();\r\n      this._grid.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset the grid to it's original state (clear any filters, sorting & pagination if exists) .\r\n   * The column definitions could be passed as argument to reset (this can be used after a Grid State reset)\r\n   * The reset will clear the Filters & Sort, then will reset the Columns to their original state\r\n   */\r\n  resetGrid(columnDefinitions?: Column[]) {\r\n    // reset columns to original states & refresh the grid\r\n    if (this._grid && this._dataView) {\r\n      const originalColumns = this.sharedService.allColumns || [];\r\n\r\n      if (Array.isArray(originalColumns) && originalColumns.length > 0) {\r\n        // set the grid columns to it's original column definitions\r\n        this._grid.setColumns(originalColumns);\r\n        if (this._gridOptions && this._gridOptions.enableAutoSizeColumns) {\r\n          this._grid.autosizeColumns();\r\n        }\r\n        this.gridStateService.resetColumns(columnDefinitions);\r\n      }\r\n    }\r\n\r\n    // clear any Pinning/Frozen columns/rows\r\n    this.clearPinning();\r\n\r\n    if (this.filterService && this.filterService.clearFilters) {\r\n      this.filterService.clearFilters();\r\n    }\r\n    if (this.sortService && this.sortService.clearSorting) {\r\n      this.sortService.clearSorting();\r\n    }\r\n  }\r\n\r\n  /** @deprecated please use \"addItem\" method instead */\r\n  addItemToDatagrid(item: any, shouldHighlightRow = true, shouldResortGrid = false, shouldTriggerEvent = true, shouldSelectRow = true): number | undefined {\r\n    console.warn('[Angular-Slickgrid - GridService] please consider using the new \"addItem\" method since \"addItemToDatagrid\" will be deprecated in the future.');\r\n    return this.addItem(item, { highlightRow: shouldHighlightRow, resortGrid: shouldResortGrid, triggerEvent: shouldTriggerEvent, selectRow: shouldSelectRow });\r\n  }\r\n\r\n  /** @deprecated please use \"addItems\" method instead */\r\n  addItemsToDatagrid(items: any[], shouldHighlightRow = true, shouldResortGrid = false, shouldTriggerEvent = true, shouldSelectRow = true): number[] {\r\n    console.warn('[Angular-Slickgrid - GridService] please consider using the new \"addItems\" method since \"addItemsToDatagrid\" will be deprecated in the future.');\r\n    return this.addItems(items, { highlightRow: shouldHighlightRow, resortGrid: shouldResortGrid, triggerEvent: shouldTriggerEvent, selectRow: shouldSelectRow });\r\n  }\r\n\r\n  /**\r\n   * Add an item (data item) to the datagrid, by default it will highlight (flashing) the inserted row but we can disable it too\r\n   * @param item object which must contain a unique \"id\" property and any other suitable properties\r\n   * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)\r\n   * @return rowIndex: typically index 0 when adding to position \"top\" or a different number when adding to the \"bottom\"\r\n   */\r\n  addItem<T = any>(item: T, options?: GridServiceInsertOption): number | undefined {\r\n    options = { ...GridServiceInsertOptionDefaults, ...options };\r\n    const insertPosition = options?.position ?? 'top';\r\n\r\n    if (!this._grid || !this._gridOptions || !this._dataView) {\r\n      throw new Error('We could not find SlickGrid Grid, DataView objects');\r\n    }\r\n    const idPropName = this._gridOptions.datasetIdPropertyName || 'id';\r\n    if (!item || !(idPropName in item)) {\r\n      throw new Error(`Adding an item requires the item to include an \"${idPropName}\" property`);\r\n    }\r\n\r\n    // insert position top/bottom, defaults to top\r\n    // when position is top we'll call insert at index 0, else call addItem which just push to the DataView array\r\n    if (insertPosition === 'bottom' || this._gridOptions?.enableTreeData) {\r\n      this._dataView.addItem(item);\r\n    } else {\r\n      this._dataView.insertItem(0, item); // insert at index 0\r\n    }\r\n\r\n    // row number in the grid, by default it will be on first row (top is the default)\r\n    let rowNumber: number | undefined = 0;\r\n    const itemId = (item as any)?.[idPropName] ?? '';\r\n\r\n    if (this._gridOptions?.enableTreeData) {\r\n      // if we add/remove item(s) from the dataset, we need to also refresh our tree data filters\r\n      this.invalidateHierarchicalDataset();\r\n      rowNumber = this._dataView.getRowById(itemId);\r\n      this._grid.scrollRowIntoView(rowNumber ?? 0, false);\r\n    } else if (options.resortGrid) {\r\n      // do we want the item to be sorted in the grid, when set to False it will insert on first row (defaults to false)\r\n      this._dataView.reSort();\r\n\r\n      // find the row number in the grid and if user wanted to see highlighted row\r\n      // we need to do it here after resort and get each row number because it possibly changes after the sort\r\n      rowNumber = this._dataView.getRowById(itemId);\r\n    } else {\r\n      // scroll to row index 0 when inserting on top else scroll to the bottom where it got inserted\r\n      rowNumber = (insertPosition === 'bottom') ? this._dataView.getRowById(itemId) : 0;\r\n      this._grid.scrollRowIntoView(rowNumber ?? 0);\r\n    }\r\n\r\n    // if highlight is enabled, we'll highlight the row we just added\r\n    if (options.highlightRow && rowNumber !== undefined) {\r\n      this.highlightRow(rowNumber);\r\n    }\r\n\r\n    // if row selection (checkbox selector) is enabled, we'll select the row in the grid\r\n    if (rowNumber !== undefined && options.selectRow && this._gridOptions && (this._gridOptions.enableCheckboxSelector || this._gridOptions.enableRowSelection)) {\r\n      this.setSelectedRow(rowNumber);\r\n    }\r\n\r\n    // do we want to trigger an event after adding the item\r\n    if (options.triggerEvent) {\r\n      this.onItemAdded.next(item);\r\n    }\r\n\r\n    return rowNumber;\r\n  }\r\n\r\n  /**\r\n   * Add item array (data item) to the datagrid, by default it will highlight (flashing) the inserted row but we can disable it too\r\n   * @param item object arrays, which must contain unique \"id\" property and any other suitable properties\r\n   * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)\r\n   */\r\n  addItems<T = any>(items: T | T[], options?: GridServiceInsertOption): number[] {\r\n    options = { ...GridServiceInsertOptionDefaults, ...options };\r\n    const idPropName = this._gridOptions.datasetIdPropertyName || 'id';\r\n    const insertPosition = options?.position ?? 'top';\r\n    const rowNumbers: number[] = [];\r\n\r\n    // loop through all items to add\r\n    if (!Array.isArray(items)) {\r\n      return [this.addItem<T>(items, options) || 0]; // on a single item, just call addItem()\r\n    } else {\r\n      // begin bulk transaction\r\n      this._dataView.beginUpdate(true);\r\n\r\n      // insert position top/bottom, defaults to top\r\n      // when position is top we'll call insert at index 0, else call addItem which just push to the DataView array\r\n      if (insertPosition === 'bottom' || this._gridOptions?.enableTreeData) {\r\n        this._dataView.addItems(items);\r\n      } else {\r\n        this._dataView.insertItems(0, items); // insert at index 0 to the start of the dataset\r\n      }\r\n\r\n      // end the bulk transaction since we're all done\r\n      this._dataView.endUpdate();\r\n    }\r\n\r\n    if (this._gridOptions?.enableTreeData) {\r\n      // if we add/remove item(s) from the dataset, we need to also refresh our tree data filters\r\n      this.invalidateHierarchicalDataset();\r\n      const firstItemId = (items as any)[0]?.[idPropName] ?? '';\r\n      const rowNumber = this._dataView.getRowById(firstItemId);\r\n      this._grid.scrollRowIntoView(rowNumber ?? 0, false);\r\n    } else if (options.resortGrid) {\r\n      // do we want the item to be sorted in the grid, when set to False it will insert on first row (defaults to false)\r\n      this._dataView.reSort();\r\n    }\r\n\r\n    // scroll to row index 0 when inserting on top else scroll to the bottom where it got inserted\r\n    (insertPosition === 'bottom' && !this._gridOptions?.enableTreeData) ? this._grid.navigateBottom() : this._grid.navigateTop();\r\n\r\n    // get row numbers of all new inserted items\r\n    // we need to do it after resort and get each row number because it possibly changed after the sort\r\n    items.forEach((item: T) => rowNumbers.push(this._dataView.getRowById((item as any)[idPropName]) as number));\r\n\r\n    // if user wanted to see highlighted row\r\n    if (options.highlightRow) {\r\n      this.highlightRow(rowNumbers);\r\n    }\r\n\r\n    // select the row in the grid\r\n    if (options.selectRow && this._gridOptions && (this._gridOptions.enableCheckboxSelector || this._gridOptions.enableRowSelection)) {\r\n      this.setSelectedRows(rowNumbers);\r\n    }\r\n\r\n    // do we want to trigger an event after adding the item\r\n    if (options.triggerEvent) {\r\n      this.onItemAdded.next(items);\r\n    }\r\n\r\n    return rowNumbers;\r\n  }\r\n\r\n  /** @deprecated please use \"deleteItem\" method instead */\r\n  deleteDataGridItem(item: any, shouldTriggerEvent = true) {\r\n    console.warn('[Angular-Slickgrid - GridService] please consider using the new \"deleteItem\" method since \"deleteDataGridItem\" will be deprecated in the future.');\r\n    this.deleteItem(item, { triggerEvent: shouldTriggerEvent });\r\n  }\r\n\r\n  /** @deprecated please use \"deleteItems\" method instead */\r\n  deleteDataGridItems(items: any[], shouldTriggerEvent = true) {\r\n    console.warn('[Angular-Slickgrid - GridService] please consider using the new \"deleteItems\" method since \"deleteDataGridItems\" will be deprecated in the future.');\r\n    this.deleteItems(items, { triggerEvent: shouldTriggerEvent });\r\n  }\r\n\r\n  /** @deprecated please use \"deleteItemById\" method instead */\r\n  deleteDataGridItemById(itemId: string | number, shouldTriggerEvent = true) {\r\n    console.warn('[Angular-Slickgrid - GridService] please consider using the new \"deleteItemById\" method since \"deleteDataGridItemById\" will be deprecated in the future.');\r\n    this.deleteItemById(itemId, { triggerEvent: shouldTriggerEvent });\r\n  }\r\n\r\n  /** @deprecated please use \"deleteItemByIds\" method instead */\r\n  deleteDataGridItemByIds(itemIds: number[] | string[], shouldTriggerEvent = true) {\r\n    console.warn('[Angular-Slickgrid - GridService] please consider using the new \"deleteItemByIds\" method since \"deleteDataGridItemByIds\" will be deprecated in the future.');\r\n    this.deleteItemByIds(itemIds, { triggerEvent: shouldTriggerEvent });\r\n  }\r\n\r\n  /**\r\n   * Delete an existing item from the datagrid (dataView)\r\n   * @param item object which must contain a unique \"id\" property and any other suitable properties\r\n   * @param options: provide the possibility to do certain actions after or during the upsert (triggerEvent)\r\n   * @return item id deleted\r\n   */\r\n  deleteItem<T = any>(item: T, options?: GridServiceDeleteOption): number | string {\r\n    options = { ...GridServiceDeleteOptionDefaults, ...options };\r\n    const idPropName = this._gridOptions.datasetIdPropertyName || 'id';\r\n\r\n    if (!item || !(idPropName in item)) {\r\n      throw new Error(`Deleting an item requires the item to include an \"${idPropName}\" property`);\r\n    }\r\n    return this.deleteItemById((item as any)[idPropName], options);\r\n  }\r\n\r\n  /**\r\n   * Delete an array of existing items from the datagrid\r\n   * @param item object which must contain a unique \"id\" property and any other suitable properties\r\n   * @param options: provide the possibility to do certain actions after or during the upsert (triggerEvent)\r\n   * @return item id deleted\r\n   */\r\n  deleteItems<T = any>(items: T | T[], options?: GridServiceDeleteOption): number[] | string[] {\r\n    options = { ...GridServiceDeleteOptionDefaults, ...options };\r\n    const idPropName = this._gridOptions.datasetIdPropertyName || 'id';\r\n\r\n    // when it's not an array, we can call directly the single item delete\r\n    if (!Array.isArray(items)) {\r\n      this.deleteItem<T>(items, options);\r\n      return [(items as any)[idPropName]];\r\n    }\r\n\r\n    // begin bulk transaction\r\n    this._dataView.beginUpdate(true);\r\n\r\n    const itemIds: string[] = [];\r\n    items.forEach((item: T) => {\r\n      if (item && (item as any)[idPropName] !== undefined) {\r\n        itemIds.push((item as any)[idPropName]);\r\n      }\r\n    });\r\n\r\n    // delete the item from the dataView\r\n    this._dataView.deleteItems(itemIds);\r\n\r\n    // end the bulk transaction since we're all done\r\n    this._dataView.endUpdate();\r\n\r\n    // do we want to trigger an event after deleting the item\r\n    if (options.triggerEvent) {\r\n      this.onItemDeleted.next(items);\r\n    }\r\n    return itemIds;\r\n  }\r\n\r\n  /**\r\n   * Delete an existing item from the datagrid (dataView) by it's id\r\n   * @param itemId: item unique id\r\n   * @param options: provide the possibility to do certain actions after or during the upsert (triggerEvent)\r\n   * @return item id deleted\r\n   */\r\n  deleteItemById(itemId: string | number, options?: GridServiceDeleteOption): number | string {\r\n    options = { ...GridServiceDeleteOptionDefaults, ...options };\r\n\r\n    if (itemId === null || itemId === undefined) {\r\n      throw new Error(`Cannot delete a row without a valid \"id\"`);\r\n    }\r\n\r\n    // when user has row selection enabled, we should clear any selection to avoid confusion after a delete\r\n    const isSyncGridSelectionEnabled = this.gridStateService && this.gridStateService.needToPreserveRowSelection() || false;\r\n    if (!isSyncGridSelectionEnabled && this._grid && this._gridOptions && (this._gridOptions.enableCheckboxSelector || this._gridOptions.enableRowSelection)) {\r\n      this.setSelectedRows([]);\r\n    }\r\n\r\n    // delete the item from the dataView\r\n    this._dataView.deleteItem(itemId);\r\n\r\n    // do we want to trigger an event after deleting the item\r\n    if (options.triggerEvent) {\r\n      this.onItemDeleted.next(itemId);\r\n    }\r\n    return itemId;\r\n  }\r\n\r\n  /**\r\n   * Delete an array of existing items from the datagrid\r\n   * @param itemIds array of item unique IDs\r\n   * @param options: provide the possibility to do certain actions after or during the upsert (triggerEvent)\r\n   */\r\n  deleteItemByIds(itemIds: number[] | string[], options?: GridServiceDeleteOption): number[] | string[] {\r\n    options = { ...GridServiceDeleteOptionDefaults, ...options };\r\n\r\n    // when it's not an array, we can call directly the single item delete\r\n    if (Array.isArray(itemIds)) {\r\n      // begin bulk transaction\r\n      this._dataView.beginUpdate(true);\r\n      for (let i = 0; i < itemIds.length; i++) {\r\n        if (itemIds[i] !== null) {\r\n          this.deleteItemById(itemIds[i], { triggerEvent: false });\r\n        }\r\n      }\r\n\r\n      // end the bulk transaction since we're all done\r\n      this._dataView.endUpdate();\r\n\r\n      // do we want to trigger an event after deleting the item\r\n      if (options.triggerEvent) {\r\n        this.onItemDeleted.next(itemIds);\r\n      }\r\n      return itemIds;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /** @deprecated please use \"updateItem\" method instead */\r\n  updateDataGridItem(item: any, shouldHighlightRow = true, shouldTriggerEvent = true, shouldSelectRow = true): number {\r\n    console.warn('[Angular-Slickgrid - GridService] please consider using the new \"updateItem\" method since \"updateDataGridItem\" will be deprecated in the future.');\r\n    return this.updateItem(item, { highlightRow: shouldHighlightRow, triggerEvent: shouldTriggerEvent, selectRow: shouldSelectRow });\r\n  }\r\n\r\n  /** @deprecated please use \"updateItems\" method instead */\r\n  updateDataGridItems(items: any | any[], shouldHighlightRow = true, shouldTriggerEvent = true, shouldSelectRow = true): number[] {\r\n    console.warn('[Angular-Slickgrid - GridService] please consider using the new \"updateItems\" method since \"updateDataGridItems\" will be deprecated in the future.');\r\n    return this.updateItems(items, { highlightRow: shouldHighlightRow, triggerEvent: shouldTriggerEvent, selectRow: shouldSelectRow });\r\n  }\r\n\r\n  /** @deprecated please use \"updateItemById\" method instead */\r\n  updateDataGridItemById(itemId: number | string, item: any, shouldHighlightRow = true, shouldTriggerEvent = true, shouldSelectRow = true): number {\r\n    console.warn('[Angular-Slickgrid - GridService] please consider using the new \"updateItemById\" method since \"updateDataGridItemById\" will be deprecated in the future.');\r\n    return this.updateItemById(itemId, item, { highlightRow: shouldHighlightRow, triggerEvent: shouldTriggerEvent, selectRow: shouldSelectRow });\r\n  }\r\n\r\n  /**\r\n   * Update an existing item with new properties inside the datagrid\r\n   * @param item object which must contain a unique \"id\" property and any other suitable properties\r\n   * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, selectRow, triggerEvent)\r\n   * @return grid row index\r\n   */\r\n  updateItem<T = any>(item: T, options?: GridServiceUpdateOption): number {\r\n    options = { ...GridServiceUpdateOptionDefaults, ...options };\r\n    const idPropName = this._gridOptions.datasetIdPropertyName || 'id';\r\n    const itemId = (!item || !(idPropName in item)) ? undefined : (item as any)[idPropName];\r\n\r\n    if (itemId === undefined) {\r\n      throw new Error(`Calling Update of an item requires the item to include an \"${idPropName}\" property`);\r\n    }\r\n\r\n    return this.updateItemById<T>(itemId, item, options);\r\n  }\r\n\r\n  /**\r\n   * Update an array of existing items with new properties inside the datagrid\r\n   * @param item object arrays, which must contain unique \"id\" property and any other suitable properties\r\n   * @param options: provide the possibility to do certain actions after or during the update (highlightRow, selectRow, triggerEvent)\r\n   * @return grid row indexes\r\n   */\r\n  updateItems<T = any>(items: T | T[], options?: GridServiceUpdateOption): number[] {\r\n    options = { ...GridServiceUpdateOptionDefaults, ...options };\r\n    const idPropName = this._gridOptions.datasetIdPropertyName || 'id';\r\n\r\n    // when it's not an array, we can call directly the single item update\r\n    if (!Array.isArray(items)) {\r\n      return [this.updateItem<T>(items, options)];\r\n    }\r\n\r\n    // begin bulk transaction\r\n    this._dataView.beginUpdate(true);\r\n\r\n    // loop through each item, get their Ids\r\n    // also call a grid render on the modified row for the item to be reflected in the UI\r\n    const rowNumbers: number[] = [];\r\n    const itemIds: Array<string | number> = [];\r\n    items.forEach((item: T) => {\r\n      const itemId = (!item || !(idPropName in item)) ? undefined : (item as any)[idPropName];\r\n      itemIds.push(itemId); // keep item id reference\r\n\r\n      if (this._dataView.getIdxById(itemId) !== undefined) {\r\n        const rowNumber = this._dataView.getRowById(itemId);\r\n        if (rowNumber !== undefined) {\r\n          rowNumbers.push(rowNumber);\r\n          this._grid.updateRow(rowNumber);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Update the items in the dataView, note that the itemIds must be in the same order as the items\r\n    this._dataView.updateItems(itemIds, items);\r\n\r\n    // end the bulk transaction since we're all done\r\n    this._dataView.endUpdate();\r\n\r\n    // only highlight at the end, all at once\r\n    // we have to do this because doing highlight 1 by 1 would only re-select the last highlighted row which is wrong behavior\r\n    if (options.highlightRow) {\r\n      this.highlightRow(rowNumbers);\r\n    }\r\n\r\n    // select the row in the grid\r\n    if (options.selectRow && this._gridOptions && (this._gridOptions.enableCheckboxSelector || this._gridOptions.enableRowSelection)) {\r\n      this.setSelectedRows(rowNumbers);\r\n    }\r\n\r\n    // do we want to trigger an event after updating the item\r\n    if (options.triggerEvent) {\r\n      this.onItemUpdated.next(items);\r\n    }\r\n\r\n    return rowNumbers;\r\n  }\r\n\r\n  /**\r\n   * Update an existing item in the datagrid by it's id and new properties\r\n   * @param itemId: item unique id\r\n   * @param item object which must contain a unique \"id\" property and any other suitable properties\r\n   * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, selectRow, triggerEvent)\r\n   * @return grid row number\r\n   */\r\n  updateItemById<T = any>(itemId: number | string, item: T, options?: GridServiceUpdateOption): number {\r\n    options = { ...GridServiceUpdateOptionDefaults, ...options };\r\n    if (itemId === undefined) {\r\n      throw new Error(`Cannot update a row without a valid \"id\"`);\r\n    }\r\n    const rowNumber = this._dataView.getRowById(itemId);\r\n\r\n    if (!item || rowNumber === undefined) {\r\n      throw new Error(`The item to update in the grid was not found with id: ${itemId}`);\r\n    }\r\n\r\n    if (this._dataView.getIdxById(itemId) !== undefined) {\r\n      // Update the item itself inside the dataView\r\n      this._dataView.updateItem(itemId, item);\r\n      this._grid.updateRow(rowNumber);\r\n\r\n      // do we want to scroll to the row so that it shows in the Viewport (UI)\r\n      if (options.scrollRowIntoView) {\r\n        this._grid.scrollRowIntoView(rowNumber);\r\n      }\r\n\r\n      // highlight the row we just updated, if defined\r\n      if (options.highlightRow) {\r\n        this.highlightRow(rowNumber);\r\n      }\r\n\r\n      // select the row in the grid\r\n      if (options.selectRow && this._gridOptions && (this._gridOptions.enableCheckboxSelector || this._gridOptions.enableRowSelection)) {\r\n        this.setSelectedRow(rowNumber);\r\n      }\r\n\r\n      // do we want to trigger an event after updating the item\r\n      if (options.triggerEvent) {\r\n        this.onItemUpdated.next(item);\r\n      }\r\n    }\r\n    return rowNumber;\r\n  }\r\n\r\n  /**\r\n   * Insert a row into the grid if it doesn't already exist or update if it does.\r\n   * @param item object which must contain a unique \"id\" property and any other suitable properties\r\n   * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)\r\n   */\r\n  upsertItem<T = any>(item: T, options?: GridServiceInsertOption): { added: number | undefined, updated: number | undefined } {\r\n    options = { ...GridServiceInsertOptionDefaults, ...options };\r\n    const idPropName = this._gridOptions.datasetIdPropertyName || 'id';\r\n    const itemId = (!item || !(idPropName in item)) ? undefined : (item as any)[idPropName];\r\n\r\n    if (itemId === undefined) {\r\n      throw new Error(`Calling Upsert of an item requires the item to include an \"${idPropName}\" property`);\r\n    }\r\n\r\n    return this.upsertItemById<T>(itemId, item, options);\r\n  }\r\n\r\n  /**\r\n   * Update an array of existing items with new properties inside the datagrid\r\n   * @param item object arrays, which must contain unique \"id\" property and any other suitable properties\r\n   * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)\r\n   * @return row numbers in the grid\r\n   */\r\n  upsertItems<T = any>(items: T | T[], options?: GridServiceInsertOption): { added: number | undefined, updated: number | undefined }[] {\r\n    options = { ...GridServiceInsertOptionDefaults, ...options };\r\n    // when it's not an array, we can call directly the single item upsert\r\n    if (!Array.isArray(items)) {\r\n      return [this.upsertItem<T>(items, options)];\r\n    }\r\n\r\n    // begin bulk transaction\r\n    this._dataView.beginUpdate(true);\r\n    const upsertedRows: { added: number | undefined, updated: number | undefined }[] = [];\r\n    items.forEach((item: T) => {\r\n      upsertedRows.push(this.upsertItem<T>(item, { ...options, highlightRow: false, resortGrid: false, selectRow: false, triggerEvent: false }));\r\n    });\r\n\r\n    // end the bulk transaction since we're all done\r\n    this._dataView.endUpdate();\r\n\r\n    const rowNumbers = upsertedRows.map((upsertRow) => upsertRow.added !== undefined ? upsertRow.added : upsertRow.updated);\r\n    // only highlight at the end, all at once\r\n    // we have to do this because doing highlight 1 by 1 would only re-select the last highlighted row which is wrong behavior\r\n    if (options.highlightRow) {\r\n      this.highlightRow(rowNumbers as number[]);\r\n    }\r\n\r\n    // select the row in the grid\r\n    if (options.selectRow && this._gridOptions && (this._gridOptions.enableCheckboxSelector || this._gridOptions.enableRowSelection)) {\r\n      this.setSelectedRows(rowNumbers as number[]);\r\n    }\r\n\r\n    // do we want to trigger an event after updating the item\r\n    if (options.triggerEvent) {\r\n      this.onItemUpserted.next(items);\r\n      const addedItems = upsertedRows.filter((upsertRow) => upsertRow.added !== undefined);\r\n      if (Array.isArray(addedItems) && addedItems.length > 0) {\r\n        this.onItemAdded.next(addedItems);\r\n      }\r\n      const updatedItems = upsertedRows.filter((upsertRow) => upsertRow.updated !== undefined);\r\n      if (Array.isArray(updatedItems) && updatedItems.length > 0) {\r\n        this.onItemUpdated.next(updatedItems);\r\n      }\r\n    }\r\n    return upsertedRows;\r\n  }\r\n\r\n  /**\r\n   * Update an existing item in the datagrid by it's id and new properties\r\n   * @param itemId: item unique id\r\n   * @param item object which must contain a unique \"id\" property and any other suitable properties\r\n   * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)\r\n   * @return grid row number in the grid\r\n   */\r\n  upsertItemById<T = any>(itemId: number | string, item: T, options?: GridServiceInsertOption): { added: number | undefined, updated: number | undefined } {\r\n    let isItemAdded = false;\r\n    options = { ...GridServiceInsertOptionDefaults, ...options };\r\n    if (itemId === undefined) {\r\n      if (!this.hasRowSelectionEnabled()) {\r\n        throw new Error(`Calling Upsert of an item requires the item to include a valid and unique \"id\" property`);\r\n      }\r\n    }\r\n\r\n    let rowNumberAdded;\r\n    let rowNumberUpdated;\r\n    if (this._dataView.getRowById(itemId) === undefined) {\r\n      rowNumberAdded = this.addItem<T>(item, options);\r\n      isItemAdded = true;\r\n    } else {\r\n      rowNumberUpdated = this.updateItem<T>(item, { highlightRow: options.highlightRow, selectRow: options.selectRow, triggerEvent: options.triggerEvent });\r\n      isItemAdded = false;\r\n    }\r\n\r\n    // do we want to trigger an event after updating the item\r\n    if (options.triggerEvent) {\r\n      this.onItemUpserted.next(item);\r\n      isItemAdded ? this.onItemAdded.next(item) : this.onItemUpdated.next(item);\r\n    }\r\n    return { added: rowNumberAdded, updated: rowNumberUpdated };\r\n  }\r\n\r\n  /**\r\n   * When dealing with hierarchical (tree) dataset, we can invalidate all the rows and force a full resort & re-render of the hierarchical tree dataset.\r\n   * This method will automatically be called anytime user called `addItem()` or `addItems()`.\r\n   * However please note that it won't be called when `updateItem`, if the data that gets updated does change the tree data column then you should call this method.\r\n   * @param {Array<Object>} [items] - optional flat array of parent/child items to use while redoing the full sort & refresh\r\n   */\r\n  invalidateHierarchicalDataset(items?: any[]) {\r\n    // if we add/remove item(s) from the dataset, we need to also refresh our tree data filters\r\n    if (this._gridOptions?.enableTreeData && this.treeDataService) {\r\n      const inputItems = items ?? this._dataView.getItems();\r\n      const sortedDatasetResult = this.treeDataService.convertFlatParentChildToTreeDatasetAndSort(inputItems, this.sharedService.allColumns, this._gridOptions);\r\n      this.sharedService.hierarchicalDataset = sortedDatasetResult.hierarchical;\r\n      this.filterService.refreshTreeDataFilters(items);\r\n      this._dataView.setItems(sortedDatasetResult.flat);\r\n    }\r\n  }\r\n\r\n  // --\r\n  // private functions\r\n  // -------------------\r\n\r\n  /** Check wether the grid has the Row Selection enabled */\r\n  private hasRowSelectionEnabled() {\r\n    const selectionModel = this._grid.getSelectionModel();\r\n    const isRowSelectionEnabled = this._gridOptions.enableRowSelection || this._gridOptions.enableCheckboxSelector;\r\n    return (isRowSelectionEnabled && selectionModel);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { dequal } from 'dequal/lite';\r\nimport { Subject, Subscription } from 'rxjs';\r\n\r\nimport {\r\n  Column,\r\n  CurrentColumn,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentRowSelection,\r\n  CurrentSorter,\r\n  ExtensionName,\r\n  GridOption,\r\n  GridState,\r\n  GridStateChange,\r\n  GridStateType,\r\n  SlickEventHandler,\r\n} from './../models/index';\r\nimport { ExtensionService } from './extension.service';\r\nimport { FilterService } from './filter.service';\r\nimport { SortService } from './sort.service';\r\nimport { unsubscribeAllObservables } from './utilities';\r\nimport { ResizerService } from './resizer.service';\r\nimport { SharedService } from './shared.service';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n@Injectable()\r\nexport class GridStateService {\r\n  private _eventHandler: SlickEventHandler;\r\n  private _columns: Column[] = [];\r\n  private _currentColumns: CurrentColumn[] = [];\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _subscriptions: Subscription[] = [];\r\n  private _selectedRowDataContextIds: Array<number | string> = []; // used with row selection\r\n  private _selectedFilteredRowDataContextIds: Array<number | string> = []; // used with row selection\r\n  private _wasRecheckedAfterPageChange = true; // used with row selection & pagination\r\n  onGridStateChanged = new Subject<GridStateChange>();\r\n\r\n  constructor(\r\n    private extensionService: ExtensionService,\r\n    private filterService: FilterService,\r\n    private resizerService: ResizerService,\r\n    private sharedService: SharedService,\r\n    private sortService: SortService\r\n  ) {\r\n    this._eventHandler = new Slick.EventHandler();\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  private get datasetIdPropName(): string {\r\n    return this._gridOptions.datasetIdPropertyName || 'id';\r\n  }\r\n\r\n  /** Getter of the selected data context object IDs */\r\n  get selectedRowDataContextIds(): Array<number | string> {\r\n    return this._selectedRowDataContextIds;\r\n  }\r\n\r\n  /** Setter of the selected data context object IDs */\r\n  set selectedRowDataContextIds(dataContextIds: Array<number | string>) {\r\n    this._selectedRowDataContextIds = dataContextIds;\r\n\r\n    // since this is coming from a preset, we also need to update the filtered IDs\r\n    this._selectedFilteredRowDataContextIds = dataContextIds;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Grid State Service\r\n   * @param grid\r\n   */\r\n  init(grid: any, dataView: any): void {\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this.subscribeToAllGridChanges(grid);\r\n  }\r\n\r\n  /** Dispose of all the SlickGrid & Angular subscriptions */\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    // also unsubscribe all Angular Subscriptions\r\n    this._subscriptions = unsubscribeAllObservables(this._subscriptions);\r\n\r\n    this._currentColumns = [];\r\n    this._columns = [];\r\n  }\r\n\r\n  /**\r\n   * Get the current grid state (filters/sorters/pagination)\r\n   * @return grid state\r\n   */\r\n  getCurrentGridState(args?: { requestRefreshRowFilteredRow?: boolean }): GridState {\r\n    const { frozenColumn, frozenRow, frozenBottom } = this.sharedService.gridOptions;\r\n    const gridState: GridState = {\r\n      columns: this.getCurrentColumns(),\r\n      filters: this.getCurrentFilters(),\r\n      sorters: this.getCurrentSorters(),\r\n      pinning: { frozenColumn, frozenRow, frozenBottom },\r\n    };\r\n\r\n    const currentPagination = this.getCurrentPagination();\r\n    if (currentPagination) {\r\n      gridState.pagination = currentPagination;\r\n    }\r\n\r\n    if (this.hasRowSelectionEnabled()) {\r\n      const currentRowSelection = this.getCurrentRowSelections(args && args.requestRefreshRowFilteredRow);\r\n      if (currentRowSelection) {\r\n        gridState.rowSelection = currentRowSelection;\r\n      }\r\n    }\r\n    return gridState;\r\n  }\r\n\r\n  /**\r\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\r\n   * @return current columns\r\n   */\r\n  getColumns(): Column[] {\r\n    return this._columns;\r\n  }\r\n\r\n  /**\r\n   * From an array of Grid Column Definitions, get the associated Current Columns\r\n   * @param gridColumns\r\n   */\r\n  getAssociatedCurrentColumns(gridColumns: Column[]): CurrentColumn[] {\r\n    const currentColumns: CurrentColumn[] = [];\r\n\r\n    if (gridColumns && Array.isArray(gridColumns)) {\r\n      gridColumns.forEach((column: Column, index: number) => {\r\n        if (column && column.id) {\r\n          currentColumns.push({\r\n            columnId: column.id as string,\r\n            cssClass: column.cssClass || '',\r\n            headerCssClass: column.headerCssClass || '',\r\n            width: column.width || 0\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this._currentColumns = currentColumns;\r\n    return currentColumns;\r\n  }\r\n\r\n  /**\r\n   * Dynamically change the arrangement/distribution of the columns Positions/Visibilities and optionally Widths.\r\n   * For a column to have its visibly as hidden, it has to be part of the original list but excluded from the list provided as argument to be considered a hidden field.\r\n   * If you are passing columns Width, then you probably don't want to trigger the autosizeColumns (2nd argument to False).\r\n   * We could also resize the columns by their content but be aware that you can only trigger 1 type of resize at a time (either the 2nd argument or the 3rd last argument but not both at same time)\r\n   * The resize by content could be called by the 3rd argument OR simply by enabling `enableAutoResizeColumnsByCellContent` but again this will only get executed when the 2nd argument is set to false.\r\n   * @param {Array<Column>} definedColumns - defined columns\r\n   * @param {Boolean} triggerAutoSizeColumns - True by default, do we also want to call the \"autosizeColumns()\" method to make the columns fit in the grid?\r\n   * @param {Boolean} triggerColumnsFullResizeByContent - False by default, do we also want to call full columns resize by their content?\r\n   */\r\n  changeColumnsArrangement(definedColumns: CurrentColumn[], triggerAutoSizeColumns = true, triggerColumnsFullResizeByContent = false) {\r\n    if (Array.isArray(definedColumns) && definedColumns.length > 0) {\r\n      const gridColumns: Column[] = this.getAssociatedGridColumns(this._grid, definedColumns);\r\n\r\n      if (gridColumns && Array.isArray(gridColumns) && gridColumns.length > 0) {\r\n        // make sure that the checkbox selector is still visible in the list when it is enabled\r\n        if (this._gridOptions.enableCheckboxSelector) {\r\n          const checkboxColumn = (Array.isArray(this.sharedService.allColumns) && this.sharedService.allColumns.length > 0) ? this.sharedService.allColumns[0] : null;\r\n          if (checkboxColumn?.id === '_checkbox_selector' && gridColumns[0].id !== '_checkbox_selector') {\r\n            gridColumns.unshift(checkboxColumn);\r\n          }\r\n        }\r\n\r\n        // keep copy the original optional `width` properties optionally provided by the user.\r\n        // We will use this when doing a resize by cell content, if user provided a `width` it won't override it.\r\n        gridColumns.forEach(col => col.originalWidth = col.width || col.originalWidth);\r\n\r\n        // finally set the new presets columns (including checkbox selector if need be)\r\n        this._grid.setColumns(gridColumns);\r\n        this.sharedService.visibleColumns = gridColumns;\r\n\r\n        // resize the columns to fit the grid canvas\r\n        if (triggerAutoSizeColumns) {\r\n          this._grid.autosizeColumns();\r\n        } else if (triggerColumnsFullResizeByContent || (this._gridOptions.enableAutoResizeColumnsByCellContent && !this._gridOptions.autosizeColumnsByCellContentOnFirstLoad)) {\r\n          this.resizerService.resizeColumnsByCellContent(true);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * From an array of Current Columns, get the associated Grid Column Definitions\r\n   * @param grid\r\n   * @param currentColumns\r\n   */\r\n  getAssociatedGridColumns(grid: any, currentColumns: CurrentColumn[]): Column[] {\r\n    const columns: Column[] = [];\r\n    const gridColumns: Column[] = this.sharedService.allColumns || grid.getColumns();\r\n\r\n    if (currentColumns && Array.isArray(currentColumns)) {\r\n      currentColumns.forEach((currentColumn: CurrentColumn, index: number) => {\r\n        const gridColumn = gridColumns.find((c: Column) => c.id === currentColumn.columnId);\r\n        if (gridColumn && gridColumn.id) {\r\n          columns.push({\r\n            ...gridColumn,\r\n            cssClass: currentColumn.cssClass,\r\n            headerCssClass: currentColumn.headerCssClass,\r\n            width: currentColumn.width\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this._columns = columns;\r\n    return columns;\r\n  }\r\n\r\n  /**\r\n   * Get the Columns (and their states: visibility/position/width) that are currently applied in the grid\r\n   * @return current columns\r\n   */\r\n  getCurrentColumns(): CurrentColumn[] {\r\n    let currentColumns: CurrentColumn[] = [];\r\n    if (this._currentColumns && Array.isArray(this._currentColumns) && this._currentColumns.length > 0) {\r\n      currentColumns = this._currentColumns;\r\n    } else {\r\n      currentColumns = this.getAssociatedCurrentColumns(this._grid.getColumns());\r\n    }\r\n\r\n    return currentColumns;\r\n  }\r\n\r\n  /**\r\n   * Get the Filters (and their state, columnId, searchTerm(s)) that are currently applied in the grid\r\n   * @return current filters\r\n   */\r\n  getCurrentFilters(): CurrentFilter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentFilters) {\r\n        return backendService.getCurrentFilters() as CurrentFilter[];\r\n      }\r\n    } else if (this.filterService && this.filterService.getCurrentLocalFilters) {\r\n      return this.filterService.getCurrentLocalFilters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get current Pagination (and its state, pageNumber, pageSize) that are currently applied in the grid\r\n   * @return current pagination state\r\n   */\r\n  getCurrentPagination(): CurrentPagination | undefined {\r\n    if (this._gridOptions.enablePagination) {\r\n      if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n        const backendService = this._gridOptions.backendServiceApi.service;\r\n        if (backendService && backendService.getCurrentPagination) {\r\n          return backendService.getCurrentPagination();\r\n        }\r\n      } else {\r\n        return this.sharedService.currentPagination;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Get the current Row Selections (and its state, gridRowIndexes, dataContextIds, filteredDataContextIds) that are currently applied in the grid\r\n   * @return current row selection\r\n   */\r\n  getCurrentRowSelections(requestRefreshFilteredRow = true): CurrentRowSelection | null {\r\n    if (this._grid && this._gridOptions && this._dataView && this.hasRowSelectionEnabled()) {\r\n      if (this._grid.getSelectedRows && this._dataView.mapRowsToIds) {\r\n        let filteredDataContextIds: Array<number | string> | undefined = [];\r\n        const gridRowIndexes: number[] = this._dataView.mapIdsToRows(this._selectedRowDataContextIds || []); // note that this will return only what is visible in current page\r\n        const dataContextIds: Array<number | string> | undefined = this._selectedRowDataContextIds;\r\n\r\n        // user might request to refresh the filtered selection dataset\r\n        // typically always True, except when \"reEvaluateRowSelectionAfterFilterChange\" is called and we don't need to refresh the filtered dataset twice\r\n        if (requestRefreshFilteredRow === true) {\r\n          filteredDataContextIds = this.refreshFilteredRowSelections();\r\n        }\r\n        filteredDataContextIds = this._selectedFilteredRowDataContextIds;\r\n\r\n        return { gridRowIndexes, dataContextIds, filteredDataContextIds };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get the current Sorters (and their state, columnId, direction) that are currently applied in the grid\r\n   * @return current sorters\r\n   */\r\n  getCurrentSorters(): CurrentSorter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        return backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n    } else if (this.sortService && this.sortService.getCurrentLocalSorters) {\r\n      return this.sortService.getCurrentLocalSorters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Check whether the row selection needs to be preserved */\r\n  needToPreserveRowSelection(): boolean {\r\n    let preservedRowSelection = false;\r\n    if (this._gridOptions && this._gridOptions.dataView && this._gridOptions.dataView.hasOwnProperty('syncGridSelection')) {\r\n      const syncGridSelection = this._gridOptions.dataView.syncGridSelection;\r\n      if (typeof syncGridSelection === 'boolean') {\r\n        preservedRowSelection = this._gridOptions.dataView.syncGridSelection as boolean;\r\n      } else {\r\n        preservedRowSelection = syncGridSelection!.preserveHidden;\r\n      }\r\n\r\n      // if the result is True but the grid is using a Backend Service, we will do an extra flag check the reason is because it might have some unintended behaviors\r\n      // with the BackendServiceApi because technically the data in the page changes the DataView on every page.\r\n      if (preservedRowSelection && this._gridOptions.backendServiceApi && this._gridOptions.dataView.hasOwnProperty('syncGridSelectionWithBackendService')) {\r\n        preservedRowSelection = (this._gridOptions.dataView.syncGridSelectionWithBackendService) as boolean;\r\n      }\r\n    }\r\n    return preservedRowSelection;\r\n  }\r\n\r\n  resetColumns(columnDefinitions?: Column[]) {\r\n    const columns: Column[] = columnDefinitions || this._columns;\r\n    const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n    this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n  }\r\n\r\n  /**\r\n   * Reset the grid to its original (all) columns, that is to display the entire set of columns with their original positions & visibilities\r\n   * @param {Boolean} triggerAutoSizeColumns - True by default, do we also want to call the \"autosizeColumns()\" method to make the columns fit in the grid?\r\n   */\r\n  resetToOriginalColumns(triggerAutoSizeColumns = true) {\r\n    this._grid.setColumns(this.sharedService.allColumns);\r\n    this.sharedService.visibleColumns = this.sharedService.allColumns;\r\n\r\n    // resize the columns to fit the grid canvas\r\n    if (triggerAutoSizeColumns) {\r\n      this._grid.autosizeColumns();\r\n    }\r\n  }\r\n\r\n  /** if we use Row Selection or the Checkbox Selector, we need to reset any selection */\r\n  resetRowSelectionWhenRequired() {\r\n    if (!this.needToPreserveRowSelection() && (this._gridOptions.enableRowSelection || this._gridOptions.enableCheckboxSelector)) {\r\n      // this also requires the Row Selection Model to be registered as well\r\n      const rowSelectionExtension = this.extensionService && this.extensionService.getExtensionByName && this.extensionService.getExtensionByName(ExtensionName.rowSelection);\r\n      if (rowSelectionExtension && rowSelectionExtension.instance) {\r\n        this._grid.setSelectedRows([]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribe to all necessary SlickGrid or Service Events that deals with a Grid change,\r\n   * when triggered, we will publish a Grid State Event with current Grid State\r\n   */\r\n  subscribeToAllGridChanges(grid: any) {\r\n    // Subscribe to Event Emitter of Filter changed\r\n    this._subscriptions.push(\r\n      this.filterService.onFilterChanged.subscribe((currentFilters: CurrentFilter[]) => {\r\n        this.resetRowSelectionWhenRequired();\r\n\r\n        // trigger a Grid State filter change, however don't reevaluate the filtered row selections, we'll do that on the next Grid State change below\r\n        this.onGridStateChanged.next({ change: { newValues: currentFilters, type: GridStateType.filter }, gridState: this.getCurrentGridState({ requestRefreshRowFilteredRow: !this.hasRowSelectionEnabled() }) });\r\n\r\n        // when Row Selection is enabled, we also need to re-evaluate the row selection with the leftover filtered dataset\r\n        if (this.hasRowSelectionEnabled()) {\r\n          this.reEvaluateRowSelectionAfterFilterChange();\r\n        }\r\n      })\r\n    );\r\n\r\n    // Subscribe to Event Emitter of Filter cleared\r\n    this._subscriptions.push(\r\n      this.filterService.onFilterCleared.subscribe(() => {\r\n        this.resetRowSelectionWhenRequired();\r\n        this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.filter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to Event Emitter of Sort changed\r\n    this._subscriptions.push(\r\n      this.sortService.onSortChanged.subscribe((currentSorters: CurrentSorter[]) => {\r\n        this.resetRowSelectionWhenRequired();\r\n        this.onGridStateChanged.next({ change: { newValues: currentSorters, type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to Event Emitter of Sort cleared\r\n    this._subscriptions.push(\r\n      this.sortService.onSortCleared.subscribe(() => {\r\n        this.resetRowSelectionWhenRequired();\r\n        this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to ColumnPicker and/or GridMenu for show/hide Columns visibility changes\r\n    this.bindExtensionAddonEventToGridStateChange(ExtensionName.columnPicker, 'onColumnsChanged');\r\n    this.bindExtensionAddonEventToGridStateChange(ExtensionName.gridMenu, 'onColumnsChanged');\r\n\r\n    // subscribe to Column Resize & Reordering\r\n    this.bindSlickGridColumnChangeEventToGridStateChange('onColumnsReordered', grid);\r\n    this.bindSlickGridColumnChangeEventToGridStateChange('onColumnsResized', grid);\r\n    this.bindSlickGridOnSetOptionsEventToGridStateChange(grid);\r\n\r\n    // subscribe to Row Selection changes (when enabled)\r\n    if (this._gridOptions.enableRowSelection || this._gridOptions.enableCheckboxSelector) {\r\n      this.bindSlickGridRowSelectionToGridStateChange();\r\n    }\r\n\r\n    // subscribe to HeaderMenu (hide column)\r\n    this._subscriptions.push(\r\n      this.sharedService.onHeaderMenuHideColumns.subscribe((visibleColumns: Column[]) => {\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(visibleColumns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n  }\r\n\r\n  // --\r\n  // private methods\r\n  // ------------------\r\n\r\n  /**\r\n   * Bind a SlickGrid Extension Event to a Grid State change event\r\n   * @param extension name\r\n   * @param grid\r\n   */\r\n  private bindExtensionAddonEventToGridStateChange(extensionName: ExtensionName, eventName: string) {\r\n    const extension = this.extensionService && this.extensionService.getExtensionByName && this.extensionService.getExtensionByName(extensionName);\r\n    const slickEvent = extension && extension.instance && extension.instance[eventName];\r\n\r\n    if (slickEvent && slickEvent.subscribe) {\r\n      this._eventHandler.subscribe(slickEvent, (e: Event, args: any) => {\r\n        const columns: Column[] = args && args.columns;\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bind a Grid Event (of Column changes) to a Grid State change event\r\n   * @param event - event name\r\n   * @param grid - SlickGrid object\r\n   */\r\n  private bindSlickGridColumnChangeEventToGridStateChange(eventName: string, grid: any) {\r\n    const slickGridEvent = grid && grid[eventName];\r\n\r\n    if (slickGridEvent && slickGridEvent.subscribe) {\r\n      this._eventHandler.subscribe(slickGridEvent, () => {\r\n        const columns: Column[] = grid.getColumns();\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bind a Grid Event (of grid option changes) to a Grid State change event, if we detect that any of the pinning (frozen) options changes then we'll trigger a Grid State change\r\n   * @param grid - SlickGrid object\r\n   */\r\n  private bindSlickGridOnSetOptionsEventToGridStateChange(grid: any) {\r\n    this._eventHandler.subscribe(grid.onSetOptions, (_e: Event, args: any) => {\r\n      const { frozenBottom: frozenBottomBefore, frozenColumn: frozenColumnBefore, frozenRow: frozenRowBefore } = args.optionsBefore;\r\n      const { frozenBottom: frozenBottomAfter, frozenColumn: frozenColumnAfter, frozenRow: frozenRowAfter } = args.optionsAfter;\r\n\r\n      if ((frozenBottomBefore !== frozenBottomAfter) || (frozenColumnBefore !== frozenColumnAfter) || (frozenRowBefore !== frozenRowAfter)) {\r\n        const newValues = { frozenBottom: frozenBottomAfter, frozenColumn: frozenColumnAfter, frozenRow: frozenRowAfter };\r\n        const currentGridState = this.getCurrentGridState();\r\n        this.onGridStateChanged.next({ change: { newValues, type: GridStateType.pinning }, gridState: currentGridState });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Bind a Grid Event of Row Selection change to a Grid State change event\r\n   * For the row selection, we can't just use the getSelectedRows() since this will only return the visible rows shown in the UI which is not enough.\r\n   * The process is much more complex, what we have to do instead is the following\r\n   * 1. when changing a row selection, we'll add the new selection if it's not yet in the global array of selected IDs\r\n   * 2. when deleting a row selection, we'll remove the selection from our global array of selected IDs (unless it came from a page change)\r\n   * 3. if we use Pagination and we change page, we'll keep track with a flag (this flag will be used to skip any deletion when we're changing page)\r\n   * 4. after the Page or DataView is changed or updated, we'll do an extra (and delayed) check to make sure that what we have in our global array of selected IDs is displayed on screen\r\n   */\r\n  private bindSlickGridRowSelectionToGridStateChange() {\r\n    if (this._grid && this._gridOptions && this._dataView) {\r\n      this._eventHandler.subscribe(this._dataView.onBeforePagingInfoChanged, () => {\r\n        this._wasRecheckedAfterPageChange = false; // reset the page check flag, to skip deletions on page change (used in code below)\r\n      });\r\n\r\n      this._eventHandler.subscribe(this._dataView.onPagingInfoChanged, () => {\r\n        // when user changes page, the selected row indexes might not show up\r\n        // we can check to make sure it is but it has to be in a delay so it happens after the first \"onSelectedRowsChanged\" is triggered\r\n        setTimeout(() => {\r\n          const shouldBeSelectedRowIndexes = this._dataView.mapIdsToRows(this._selectedRowDataContextIds || []);\r\n          const currentSelectedRowIndexes = this._grid.getSelectedRows();\r\n          if (!dequal(shouldBeSelectedRowIndexes, currentSelectedRowIndexes)) {\r\n            this._grid.setSelectedRows(shouldBeSelectedRowIndexes);\r\n          }\r\n        });\r\n      });\r\n\r\n      this._eventHandler.subscribe(this._grid.onSelectedRowsChanged, (e: Event, args: any) => {\r\n        if (Array.isArray(args.rows) && Array.isArray(args.previousSelectedRows)) {\r\n          const newSelectedRows = args.rows as number[];\r\n          const prevSelectedRows = args.previousSelectedRows as number[];\r\n\r\n          const newSelectedAdditions = newSelectedRows.filter((i) => prevSelectedRows.indexOf(i) < 0);\r\n          const newSelectedDeletions = prevSelectedRows.filter((i) => newSelectedRows.indexOf(i) < 0);\r\n\r\n          // deletion might happen when user is changing page, if that is the case then skip the deletion since it's only a visual deletion (current page)\r\n          // if it's not a page change (when the flag is true), then proceed with the deletion in our global array of selected IDs\r\n          if (this._wasRecheckedAfterPageChange && newSelectedDeletions.length > 0) {\r\n            const toDeleteDataIds: Array<number | string> = this._dataView.mapRowsToIds(newSelectedDeletions) || [];\r\n            toDeleteDataIds.forEach((removeId: number | string) => {\r\n              this._selectedRowDataContextIds.splice((this._selectedRowDataContextIds as Array<number | string>).indexOf(removeId), 1);\r\n            });\r\n          }\r\n\r\n          // if we have newly added selected row(s), let's update our global array of selected IDs\r\n          if (newSelectedAdditions.length > 0) {\r\n            const toAddDataIds: Array<number | string> = this._dataView.mapRowsToIds(newSelectedAdditions) || [];\r\n            toAddDataIds.forEach((dataId: number | string) => {\r\n              if ((this._selectedRowDataContextIds as Array<number | string>).indexOf(dataId) === -1) {\r\n                (this._selectedRowDataContextIds as Array<number | string>).push(dataId);\r\n              }\r\n            });\r\n          }\r\n\r\n          // we set this flag which will be used on the 2nd time the \"onSelectedRowsChanged\" event is called\r\n          // when it's the first time, we skip deletion and this is what this flag is for\r\n          this._wasRecheckedAfterPageChange = true;\r\n\r\n          // form our full selected row IDs, let's make sure these indexes are selected in the grid, if not then let's call a reselect\r\n          // this could happen if the previous step was a page change\r\n          const shouldBeSelectedRowIndexes = this._dataView.mapIdsToRows(this._selectedRowDataContextIds || []);\r\n          const currentSelectedRowIndexes = this._grid.getSelectedRows();\r\n          if (!dequal(shouldBeSelectedRowIndexes, currentSelectedRowIndexes)) {\r\n            this._grid.setSelectedRows(shouldBeSelectedRowIndexes);\r\n          }\r\n\r\n          const filteredDataContextIds = this.refreshFilteredRowSelections();\r\n          const newValues = { gridRowIndexes: this._grid.getSelectedRows(), dataContextIds: this._selectedRowDataContextIds, filteredDataContextIds } as CurrentRowSelection;\r\n          this.onGridStateChanged.next({ change: { newValues, type: GridStateType.rowSelection }, gridState: this.getCurrentGridState() });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Check wether the grid has the Row Selection enabled */\r\n  private hasRowSelectionEnabled() {\r\n    const selectionModel = this._grid.getSelectionModel();\r\n    const isRowSelectionEnabled = this._gridOptions.enableRowSelection || this._gridOptions.enableCheckboxSelector;\r\n    return (isRowSelectionEnabled && selectionModel);\r\n  }\r\n\r\n  private reEvaluateRowSelectionAfterFilterChange() {\r\n    const currentSelectedRowIndexes = this._grid.getSelectedRows();\r\n    const previousSelectedFilteredRowDataContextIds = this._selectedFilteredRowDataContextIds.slice();\r\n    const filteredDataContextIds = this.refreshFilteredRowSelections();\r\n\r\n    // when selection changed, we'll send a Grid State event with the selection changes\r\n    if (!dequal(this._selectedFilteredRowDataContextIds, previousSelectedFilteredRowDataContextIds)) {\r\n      const newValues = { gridRowIndexes: currentSelectedRowIndexes, dataContextIds: this._selectedRowDataContextIds, filteredDataContextIds } as CurrentRowSelection;\r\n      this.onGridStateChanged.next({ change: { newValues, type: GridStateType.rowSelection }, gridState: this.getCurrentGridState({ requestRefreshRowFilteredRow: false }) });\r\n    }\r\n  }\r\n\r\n  /** When a Filter is triggered or when user request it, we will refresh the filtered selection array and return it */\r\n  private refreshFilteredRowSelections(): Array<number | string> {\r\n    let tmpFilteredArray: Array<number | string> = [];\r\n    const filteredDataset = this._dataView.getFilteredItems() || [];\r\n    if (Array.isArray(this._selectedRowDataContextIds)) {\r\n      const selectedFilteredRowDataContextIds = [...this._selectedRowDataContextIds]; // take a fresh copy of all selections before filtering the row ids\r\n      tmpFilteredArray = selectedFilteredRowDataContextIds.filter((selectedRowId: number | string) => {\r\n        return filteredDataset.findIndex((item: any) => item[this.datasetIdPropName] === selectedRowId) > -1;\r\n      });\r\n      this._selectedFilteredRowDataContextIds = tmpFilteredArray;\r\n    }\r\n    return tmpFilteredArray;\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { CellArgs, Column, GridOption, OnEventArgs, SlickEventHandler } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n@Injectable()\r\nexport class GridEventService {\r\n  private _eventHandler: SlickEventHandler;\r\n\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  constructor() {\r\n    this._eventHandler = new Slick.EventHandler();\r\n  }\r\n\r\n  dispose() {\r\n    this._eventHandler.unsubscribeAll();\r\n  }\r\n\r\n  /* OnCellChange Event */\r\n  bindOnCellChange(grid: any, dataView: any) {\r\n    // subscribe to this Slickgrid event of onCellChange\r\n    this._eventHandler.subscribe(grid.onCellChange, (e: KeyboardEvent | MouseEvent, args: CellArgs) => {\r\n      this.handleOnCellChange.call(this, grid, dataView, e, args);\r\n    });\r\n  }\r\n\r\n  /* OnClick Event */\r\n  bindOnClick(grid: any, dataView: any) {\r\n    this._eventHandler.subscribe(grid.onClick, (e: KeyboardEvent | MouseEvent, args: CellArgs) => {\r\n      this.handleOnCellClick.call(this, grid, dataView, e, args);\r\n    });\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /* OnCellChange Event Handler */\r\n  handleOnCellChange(grid: any, dataView: any, e: KeyboardEvent | MouseEvent, args: CellArgs) {\r\n    if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\r\n      return;\r\n    }\r\n    const column: Column = grid.getColumns()[args.cell];\r\n\r\n    // if the column definition has a onCellChange property (a callback function), then run it\r\n    if (typeof column.onCellChange === 'function') {\r\n      // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onCellChange\r\n      const returnedArgs: OnEventArgs = {\r\n        row: args.row,\r\n        cell: args.cell,\r\n        dataView,\r\n        grid,\r\n        columnDef: column,\r\n        dataContext: grid.getDataItem(args.row)\r\n      };\r\n\r\n      // finally call up the Slick.column.onCellChanges.... function\r\n      column.onCellChange(e, returnedArgs);\r\n    }\r\n  }\r\n\r\n  /* OnCellClick Event Handler */\r\n  private handleOnCellClick(grid: any, dataView: any, e: KeyboardEvent | MouseEvent, args: CellArgs) {\r\n    if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\r\n      return;\r\n    }\r\n    const column: Column = grid && grid.getColumns && grid.getColumns()[args.cell];\r\n    const gridOptions: GridOption = grid && grid.getOptions && grid.getOptions() || {};\r\n\r\n    // only when the grid option \"autoCommitEdit\" is enabled, we will make the cell active (in focus) when clicked\r\n    // setting the cell as active as a side effect and if \"autoCommitEdit\" is set to false then the Editors won't save correctly\r\n    if (gridOptions.enableCellNavigation && (!gridOptions.editable || (gridOptions.editable && gridOptions.autoCommitEdit))) {\r\n      grid.setActiveCell(args.row, args.cell, false, false, true);\r\n    }\r\n\r\n    // if the column definition has a onCellClick property (a callback function), then run it\r\n    if (typeof column.onCellClick === 'function') {\r\n      // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onClick\r\n      const returnedArgs: OnEventArgs = {\r\n        row: args.row,\r\n        cell: args.cell,\r\n        dataView,\r\n        grid,\r\n        columnDef: column,\r\n        dataContext: grid.getDataItem(args.row)\r\n      };\r\n\r\n      // finally call up the Slick.column.onCellClick.... function\r\n      column.onCellClick(e, returnedArgs);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { Column, GridOption, SlickEventHandler, ExtensionName } from './../models/index';\r\nimport { ExtensionUtility } from '../extensions/extensionUtility';\r\nimport { ExtensionService } from './extension.service';\r\nimport { ResizerService } from './resizer.service';\r\nimport { unsubscribeAllObservables } from './utilities';\r\nimport { SharedService } from './shared.service';\r\n\r\n// using external non-typed js libraries\r\ndeclare let $: any;\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n@Injectable()\r\nexport class GroupingAndColspanService {\r\n  private _eventHandler: SlickEventHandler;\r\n  private _grid: any;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(private extensionUtility: ExtensionUtility, private extensionService: ExtensionService, private resizerService: ResizerService, private sharedService: SharedService) {\r\n    this._eventHandler = new Slick.EventHandler();\r\n  }\r\n\r\n  /** Getter of the SlickGrid Event Handler */\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  init(grid: any, dataView: any) {\r\n    this._grid = grid;\r\n\r\n    if (grid && this._gridOptions) {\r\n      // When dealing with Pre-Header Grouping colspan, we need to re-create the pre-header in multiple occasions\r\n      // for all these events, we have to trigger a re-create\r\n      if (this._gridOptions.createPreHeaderPanel) {\r\n        // on all following events, call the\r\n        this._eventHandler.subscribe(grid.onSort, () => this.renderPreHeaderRowGroupingTitles());\r\n        this._eventHandler.subscribe(grid.onRendered, () => this.renderPreHeaderRowGroupingTitles());\r\n        this._eventHandler.subscribe(grid.onAutosizeColumns, () => this.renderPreHeaderRowGroupingTitles());\r\n        this._eventHandler.subscribe(grid.onColumnsResized, () => this.renderPreHeaderRowGroupingTitles());\r\n        this._eventHandler.subscribe(grid.onColumnsReordered, () => this.renderPreHeaderRowGroupingTitles());\r\n        this._eventHandler.subscribe(dataView.onRowCountChanged, () => this.renderPreHeaderRowGroupingTitles());\r\n        this.subscriptions.push(\r\n          this.resizerService.onGridAfterResize.subscribe(() => this.renderPreHeaderRowGroupingTitles()),\r\n          this.sharedService.onHeaderMenuHideColumns.subscribe(() => this.delayRenderPreHeaderRowGroupingTitles(0))\r\n        );\r\n\r\n        this._eventHandler.subscribe(grid.onSetOptions, (_e: Event, args: any) => {\r\n          // when user changes frozen columns dynamically (e.g. from header menu), we need to re-render the pre-header of the grouping titles\r\n          if (args && args.optionsBefore && args.optionsAfter && args.optionsBefore.frozenColumn !== args.optionsAfter.frozenColumn) {\r\n            this.delayRenderPreHeaderRowGroupingTitles(0);\r\n          }\r\n        });\r\n\r\n        // for both picker (columnPicker/gridMenu) we also need to re-create after hiding/showing columns\r\n        const columnPickerExtension = this.extensionService.getExtensionByName(ExtensionName.columnPicker);\r\n        if (columnPickerExtension && columnPickerExtension.instance && columnPickerExtension.instance.onColumnsChanged) {\r\n          this._eventHandler.subscribe(columnPickerExtension.instance.onColumnsChanged, () => this.renderPreHeaderRowGroupingTitles());\r\n        }\r\n\r\n        const gridMenuExtension = this.extensionService.getExtensionByName(ExtensionName.gridMenu);\r\n        if (gridMenuExtension && gridMenuExtension.instance && gridMenuExtension.instance.onColumnsChanged && gridMenuExtension.instance.onMenuClose) {\r\n          this._eventHandler.subscribe(gridMenuExtension.instance.onColumnsChanged, () => this.renderPreHeaderRowGroupingTitles());\r\n          this._eventHandler.subscribe(gridMenuExtension.instance.onMenuClose, () => this.renderPreHeaderRowGroupingTitles());\r\n        }\r\n\r\n        // also not sure why at this point, but it seems that I need to call the 1st create in a delayed execution\r\n        // probably some kind of timing issues and delaying it until the grid is fully ready fixes this problem\r\n        this.delayRenderPreHeaderRowGroupingTitles(50);\r\n      }\r\n    }\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    // also unsubscribe all Angular Subscriptions\r\n    this.subscriptions = unsubscribeAllObservables(this.subscriptions);\r\n  }\r\n\r\n  /** call \"renderPreHeaderRowGroupingTitles()\" with a setTimeout delay */\r\n  delayRenderPreHeaderRowGroupingTitles(delay = 0) {\r\n    setTimeout(() => this.renderPreHeaderRowGroupingTitles(), delay);\r\n  }\r\n\r\n  /** Create or Render the Pre-Header Row Grouping Titles */\r\n  renderPreHeaderRowGroupingTitles() {\r\n    if (this._gridOptions && this._gridOptions.frozenColumn !== undefined && this._gridOptions.frozenColumn >= 0) {\r\n      // Add column groups to left panel\r\n      let $preHeaderPanel = $(this._grid.getPreHeaderPanelLeft());\r\n      this.renderHeaderGroups($preHeaderPanel, 0, this._gridOptions.frozenColumn + 1);\r\n\r\n      // Add column groups to right panel\r\n      $preHeaderPanel = $(this._grid.getPreHeaderPanelRight());\r\n      this.renderHeaderGroups($preHeaderPanel, this._gridOptions.frozenColumn + 1, this._columnDefinitions.length);\r\n    } else {\r\n      // regular grid (not a frozen grid)\r\n      const $preHeaderPanel = $(this._grid.getPreHeaderPanel());\r\n      this.renderHeaderGroups($preHeaderPanel, 0, this._columnDefinitions.length);\r\n    }\r\n  }\r\n\r\n  renderHeaderGroups(preHeaderPanel: any, start: number, end: number) {\r\n    preHeaderPanel.empty()\r\n      .addClass('slick-header-columns')\r\n      .css('left', '-1000px')\r\n      .width(this._grid.getHeadersWidth());\r\n    preHeaderPanel.parent().addClass('slick-header');\r\n\r\n    const headerColumnWidthDiff = this._grid.getHeaderColumnWidthDiff();\r\n\r\n    let colDef;\r\n    let header;\r\n    let lastColumnGroup = '';\r\n    let widthTotal = 0;\r\n    const frozenHeaderWidthCalcDifferential = this._gridOptions && this._gridOptions.frozenHeaderWidthCalcDifferential || 0;\r\n    const isFrozenGrid = (this._gridOptions && (this._gridOptions.frozenColumn !== undefined && this._gridOptions.frozenColumn >= 0));\r\n\r\n    for (let i = start; i < end; i++) {\r\n      colDef = this._columnDefinitions[i];\r\n      if (colDef) {\r\n        if (lastColumnGroup === colDef.columnGroup && i > 0) {\r\n          widthTotal += colDef.width || 0;\r\n          if (header && header.width) {\r\n            header.width(widthTotal - headerColumnWidthDiff - frozenHeaderWidthCalcDifferential); // remove possible frozen border\r\n          }\r\n        } else {\r\n          widthTotal = colDef.width || 0;\r\n          header = $(`<div class=\"ui-state-default slick-header-column ${isFrozenGrid ? 'frozen' : ''}\" />`)\r\n            .html(`<span class=\"slick-column-name\">${colDef.columnGroup || ''}</span>`)\r\n            .width(widthTotal - headerColumnWidthDiff)\r\n            .appendTo(preHeaderPanel);\r\n        }\r\n        lastColumnGroup = colDef.columnGroup || '';\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /** Translate Column Group texts and re-render them afterward. */\r\n  translateGroupingAndColSpan() {\r\n    const currentColumnDefinitions = this._grid.getColumns();\r\n    this.extensionUtility.translateItems(currentColumnDefinitions, 'columnGroupKey', 'columnGroup');\r\n    this._grid.setColumns(currentColumnDefinitions);\r\n    this.renderPreHeaderRowGroupingTitles();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { dequal } from 'dequal/lite';\r\nimport { Subscription, isObservable, Subject } from 'rxjs';\r\n\r\nimport { BackendServiceApi, CurrentPagination, GraphqlResult, GraphqlPaginatedResult, GridOption, Pagination, ServicePagination } from '../models';\r\nimport { FilterService } from './filter.service';\r\nimport { GridService } from './grid.service';\r\nimport { SharedService } from './shared.service';\r\nimport { executeBackendProcessesCallback, onBackendError } from './backend-utilities';\r\nimport { unsubscribeAllObservables } from './utilities';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n@Injectable()\r\nexport class PaginationService {\r\n  private _initialized = false;\r\n  private _isLocalGrid = true;\r\n  private _backendServiceApi?: BackendServiceApi;\r\n  private _dataFrom = 1;\r\n  private _dataTo = 1;\r\n  private _itemsPerPage = 0;\r\n  private _pageCount = 1;\r\n  private _pageNumber = 1;\r\n  private _totalItems = 0;\r\n  private _availablePageSizes: number[] = [];\r\n  private _eventHandler = new Slick.EventHandler();\r\n  private _paginationOptions!: Pagination;\r\n  private _subscriptions: Subscription[] = [];\r\n  onPaginationChanged = new Subject<ServicePagination>();\r\n  onPaginationVisibilityChanged = new Subject<{ visible: boolean }>();\r\n\r\n  dataView: any;\r\n  grid: any;\r\n\r\n  /** Constructor */\r\n  constructor(private filterService: FilterService, private gridService: GridService, private sharedService: SharedService) { }\r\n\r\n  get paginationOptions(): Pagination {\r\n    return this._paginationOptions;\r\n  }\r\n  set paginationOptions(paginationOptions: Pagination) {\r\n    this._paginationOptions = paginationOptions;\r\n  }\r\n\r\n  get availablePageSizes(): number[] {\r\n    return this._availablePageSizes || [];\r\n  }\r\n\r\n  get dataFrom(): number {\r\n    return this._dataFrom;\r\n  }\r\n\r\n  get dataTo(): number {\r\n    return this._dataTo;\r\n  }\r\n\r\n  get itemsPerPage(): number {\r\n    return this._itemsPerPage;\r\n  }\r\n\r\n  get pageCount(): number {\r\n    return this._pageCount;\r\n  }\r\n\r\n  get pageNumber(): number {\r\n    return this._pageNumber;\r\n  }\r\n\r\n  set totalItems(totalItems: number) {\r\n    this._totalItems = totalItems;\r\n    if (this._initialized) {\r\n      this.refreshPagination();\r\n    }\r\n  }\r\n\r\n  get totalItems(): number {\r\n    return this._totalItems;\r\n  }\r\n\r\n  init(grid: any, dataView: any, paginationOptions: Pagination, backendServiceApi?: BackendServiceApi) {\r\n    this._availablePageSizes = paginationOptions.pageSizes;\r\n    this.dataView = dataView;\r\n    this.grid = grid;\r\n    this._backendServiceApi = backendServiceApi;\r\n    this._paginationOptions = paginationOptions;\r\n    this._isLocalGrid = !backendServiceApi;\r\n    this._pageNumber = paginationOptions.pageNumber || 1;\r\n\r\n    if (backendServiceApi && (!backendServiceApi.service || !backendServiceApi.process)) {\r\n      throw new Error(`BackendServiceApi requires the following 2 properties \"process\" and \"service\" to be defined.`);\r\n    }\r\n\r\n    if (this._isLocalGrid && this.dataView) {\r\n      this._eventHandler.subscribe(this.dataView.onPagingInfoChanged, (_e: Event, pagingInfo: any) => {\r\n        if (this._totalItems !== pagingInfo.totalRows) {\r\n          this.updateTotalItems(pagingInfo.totalRows);\r\n        }\r\n      });\r\n      dataView.setRefreshHints({ isFilterUnchanged: true });\r\n      dataView.setPagingOptions({ pageSize: this.paginationOptions.pageSize, pageNum: (this._pageNumber - 1) }); // dataView page starts at 0 instead of 1\r\n    }\r\n\r\n    // Subscribe to Filter Clear & Changed and go back to page 1 when that happen\r\n    this._subscriptions.push(this.filterService.onFilterChanged.subscribe(() => this.resetPagination()));\r\n    this._subscriptions.push(this.filterService.onFilterCleared.subscribe(() => this.resetPagination()));\r\n\r\n    // Subscribe to any dataview row count changed so that when Adding/Deleting item(s) through the DataView\r\n    // that would trigger a refresh of the pagination numbers\r\n    if (this.dataView) {\r\n      this._subscriptions.push(this.gridService.onItemAdded.subscribe((items: any | any[]) => this.processOnItemAddedOrRemoved(items, true)));\r\n      this._subscriptions.push(this.gridService.onItemDeleted.subscribe((items: any | any[]) => this.processOnItemAddedOrRemoved(items, false)));\r\n    }\r\n\r\n    this.refreshPagination(false, false);\r\n    this._initialized = true;\r\n  }\r\n\r\n  dispose() {\r\n    this._initialized = false;\r\n\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    // also unsubscribe all Angular Subscriptions\r\n    this._subscriptions = unsubscribeAllObservables(this._subscriptions);\r\n  }\r\n\r\n  getCurrentPageNumber(): number {\r\n    return this._pageNumber;\r\n  }\r\n\r\n  getCurrentPagination(): CurrentPagination & { pageSizes: number[] } {\r\n    return {\r\n      pageNumber: this._pageNumber,\r\n      pageSize: this._itemsPerPage,\r\n      pageSizes: this._availablePageSizes,\r\n    };\r\n  }\r\n\r\n  getFullPagination(): ServicePagination {\r\n    return {\r\n      pageCount: this._pageCount,\r\n      pageNumber: this._pageNumber,\r\n      pageSize: this._itemsPerPage,\r\n      pageSizes: this._availablePageSizes,\r\n      totalItems: this._totalItems,\r\n      dataFrom: this._dataFrom,\r\n      dataTo: this._dataTo,\r\n    };\r\n  }\r\n\r\n  getCurrentItemPerPage(): number {\r\n    return this._itemsPerPage;\r\n  }\r\n\r\n  changeItemPerPage(itemsPerPage: number, event?: any): Promise<any> {\r\n    this._pageNumber = 1;\r\n    this._pageCount = Math.ceil(this._totalItems / itemsPerPage);\r\n    this._itemsPerPage = itemsPerPage;\r\n    return this.processOnPageChanged(this._pageNumber, event);\r\n  }\r\n\r\n  goToFirstPage(event?: any): Promise<any> {\r\n    this._pageNumber = 1;\r\n    return this.processOnPageChanged(this._pageNumber, event);\r\n  }\r\n\r\n  goToLastPage(event?: any): Promise<any> {\r\n    this._pageNumber = this._pageCount || 1;\r\n    return this.processOnPageChanged(this._pageNumber, event);\r\n  }\r\n\r\n  goToNextPage(event?: any): Promise<any> {\r\n    if (this._pageNumber < this._pageCount) {\r\n      this._pageNumber++;\r\n      return this.processOnPageChanged(this._pageNumber, event);\r\n    } else {\r\n      return new Promise(resolve => resolve(false));\r\n    }\r\n  }\r\n\r\n  goToPageNumber(pageNumber: number, event?: any): Promise<any> {\r\n    const previousPageNumber = this._pageNumber;\r\n\r\n    if (pageNumber < 1) {\r\n      this._pageNumber = 1;\r\n    } else if (pageNumber > this._pageCount) {\r\n      this._pageNumber = this._pageCount;\r\n    } else {\r\n      this._pageNumber = pageNumber;\r\n    }\r\n\r\n    if (this._pageNumber !== previousPageNumber) {\r\n      return this.processOnPageChanged(this._pageNumber, event);\r\n    } else {\r\n      return new Promise(resolve => resolve(false));\r\n    }\r\n  }\r\n\r\n  goToPreviousPage(event?: any): Promise<any> {\r\n    if (this._pageNumber > 1) {\r\n      this._pageNumber--;\r\n      return this.processOnPageChanged(this._pageNumber, event);\r\n    } else {\r\n      return new Promise(resolve => resolve(false));\r\n    }\r\n  }\r\n\r\n  refreshPagination(isPageNumberReset: boolean = false, triggerChangedEvent = true) {\r\n    const previousPagination = { ...this.getCurrentPagination() };\r\n\r\n    if (this._paginationOptions) {\r\n      const pagination = this._paginationOptions;\r\n\r\n      // set the number of items per page if not already set\r\n      if (!this._itemsPerPage) {\r\n        if (this._isLocalGrid) {\r\n          this._itemsPerPage = pagination.pageSize;\r\n        } else {\r\n          this._itemsPerPage = +((this._backendServiceApi && this._backendServiceApi.options && this._backendServiceApi.options.paginationOptions && this._backendServiceApi.options.paginationOptions.first) ? this._backendServiceApi.options.paginationOptions.first : pagination.pageSize);\r\n        }\r\n      }\r\n\r\n      // if totalItems changed, we should always go back to the first page and recalculation the From-To indexes\r\n      if (isPageNumberReset || this._totalItems !== pagination.totalItems) {\r\n        if (isPageNumberReset) {\r\n          this._pageNumber = 1;\r\n          this.paginationOptions.pageNumber = 1;\r\n        } else if (!this._initialized && pagination.pageNumber && pagination.pageNumber > 1) {\r\n          this._pageNumber = pagination.pageNumber || 1;\r\n        }\r\n\r\n        // when page number is set to 1 then also reset the \"offset\" of backend service\r\n        if (this._pageNumber === 1 && this._backendServiceApi) {\r\n          this._backendServiceApi.service.resetPaginationOptions();\r\n        }\r\n      }\r\n\r\n      // calculate and refresh the multiple properties of the pagination UI\r\n      this._availablePageSizes = pagination.pageSizes;\r\n      if (!this._totalItems && pagination.totalItems) {\r\n        this._totalItems = pagination.totalItems;\r\n      }\r\n      this.recalculateFromToIndexes();\r\n    }\r\n    this._pageCount = Math.ceil(this._totalItems / this._itemsPerPage);\r\n    const currentPagination = this.getCurrentPagination();\r\n    this.sharedService.currentPagination = currentPagination;\r\n\r\n    if (triggerChangedEvent && !dequal(previousPagination, currentPagination)) {\r\n      this.onPaginationChanged.next(currentPagination);\r\n    }\r\n  }\r\n\r\n  processOnPageChanged(pageNumber: number, event?: Event | undefined): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      this.recalculateFromToIndexes();\r\n\r\n      if (this._isLocalGrid && this.dataView) {\r\n        this.dataView.setPagingOptions({ pageSize: this._itemsPerPage, pageNum: (pageNumber - 1) }); // dataView page starts at 0 instead of 1\r\n        this.onPaginationChanged.next(this.getFullPagination());\r\n      } else {\r\n        const itemsPerPage = +this._itemsPerPage;\r\n\r\n        // keep start time & end timestamps & return it after process execution\r\n        const startTime = new Date();\r\n\r\n        // run any pre-process, if defined, for example a spinner\r\n        if (this._backendServiceApi && this._backendServiceApi.preProcess) {\r\n          this._backendServiceApi.preProcess();\r\n        }\r\n\r\n        const query = this._backendServiceApi && this._backendServiceApi.service.processOnPaginationChanged(event, { newPage: pageNumber, pageSize: itemsPerPage }) || '';\r\n\r\n        // the processes can be Promises or an Observables (like HttpClient)\r\n        const process = this._backendServiceApi && this._backendServiceApi.process(query);\r\n        if (process instanceof Promise) {\r\n          process\r\n            .then((processResult: GraphqlResult | GraphqlPaginatedResult | any) => {\r\n              resolve(executeBackendProcessesCallback(startTime, processResult, this._backendServiceApi, this._totalItems));\r\n            })\r\n            .catch((error) => {\r\n              onBackendError(error, this._backendServiceApi);\r\n              reject(process);\r\n            });\r\n        } else if (isObservable(process)) {\r\n          this._subscriptions.push(\r\n            process.subscribe(\r\n              (processResult: GraphqlResult | GraphqlPaginatedResult | any) => {\r\n                resolve(executeBackendProcessesCallback(startTime, processResult, this._backendServiceApi, this._totalItems));\r\n              },\r\n              (error: any) => {\r\n                onBackendError(error, this._backendServiceApi);\r\n                reject(process);\r\n              }\r\n            )\r\n          );\r\n        }\r\n        this.onPaginationChanged.next(this.getFullPagination());\r\n      }\r\n    });\r\n  }\r\n\r\n  recalculateFromToIndexes() {\r\n    if (this._totalItems === 0) {\r\n      this._dataFrom = 0;\r\n      this._dataTo = 1;\r\n      this._pageNumber = 0;\r\n    } else {\r\n      this._dataFrom = this._pageNumber > 1 ? ((this._pageNumber * this._itemsPerPage) - this._itemsPerPage + 1) : 1;\r\n      this._dataTo = (this._totalItems < this._itemsPerPage) ? this._totalItems : ((this._pageNumber || 1) * this._itemsPerPage);\r\n      if (this._dataTo > this._totalItems) {\r\n        this._dataTo = this._totalItems;\r\n      }\r\n    }\r\n    this._pageNumber = (this._totalItems > 0 && this._pageNumber === 0) ? 1 : this._pageNumber;\r\n\r\n    // do a final check on the From/To and make sure they are not over or below min/max acceptable values\r\n    if (this._dataTo > this._totalItems) {\r\n      this._dataTo = this._totalItems;\r\n    } else if (this._totalItems < this._itemsPerPage) {\r\n      this._dataTo = this._totalItems;\r\n    }\r\n  }\r\n\r\n  /** Reset the Pagination to first page and recalculate necessary numbers */\r\n  resetPagination(triggerChangedEvent = true) {\r\n    if (this._isLocalGrid) {\r\n      // on a local grid we also need to reset the DataView paging to 1st page\r\n      this.dataView.setPagingOptions({ pageSize: this._itemsPerPage, pageNum: 0 });\r\n    }\r\n    this.refreshPagination(true, triggerChangedEvent);\r\n  }\r\n\r\n  /**\r\n   * Toggle the Pagination (show/hide), it will use the visible if defined else it will automatically inverse when called without argument\r\n   *\r\n   * IMPORTANT NOTE:\r\n   * The Pagination must be created on initial page load, then only after can you toggle it.\r\n   * Basically this method WILL NOT WORK to show the Pagination if it was not there from the start.\r\n   */\r\n  togglePaginationVisibility(visible?: boolean) {\r\n    if (this.grid && this.sharedService && this.sharedService.gridOptions) {\r\n      const isVisible = visible !== undefined ? visible : !this.sharedService.gridOptions.enablePagination;\r\n      this.sharedService.gridOptions.enablePagination = isVisible;\r\n      this.onPaginationVisibilityChanged.next({ visible: isVisible });\r\n\r\n      // make sure to reset the Pagination and go back to first page to avoid any issues with Pagination being offset\r\n      if (isVisible) {\r\n        this.goToFirstPage();\r\n      }\r\n\r\n      // when using a local grid, we can reset the DataView pagination by changing its page size\r\n      // page size of 0 would show all, hence cancel the pagination\r\n      if (this._isLocalGrid) {\r\n        const pageSize = visible ? this._itemsPerPage : 0;\r\n        this.dataView.setPagingOptions({ pageSize, pageNum: 0 });\r\n      }\r\n    }\r\n  }\r\n\r\n  // --\r\n  // private functions\r\n  // --------------------\r\n\r\n  updateTotalItems(totalItems: number, triggerChangedEvent = false) {\r\n    this._totalItems = totalItems;\r\n    if (this._paginationOptions) {\r\n      this._paginationOptions.totalItems = totalItems;\r\n      this.refreshPagination(false, triggerChangedEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When item is added or removed, we will refresh the numbers on the pagination however we won't trigger a backend change\r\n   * This will have a side effect though, which is that the \"To\" count won't be matching the \"items per page\" count,\r\n   * that is a necessary side effect to avoid triggering a backend query just to refresh the paging,\r\n   * basically we assume that this offset is fine for the time being,\r\n   * until user does an action which will refresh the data hence the pagination which will then become normal again\r\n   */\r\n  private processOnItemAddedOrRemoved(items: any | any[], isItemAdded = true) {\r\n    if (items !== null) {\r\n      const previousDataTo = this._dataTo;\r\n      const itemCount = Array.isArray(items) ? items.length : 1;\r\n      const itemCountWithDirection = isItemAdded ? +itemCount : -itemCount;\r\n\r\n      // refresh the total count in the pagination and in the UI\r\n      this._totalItems += itemCountWithDirection;\r\n      this.recalculateFromToIndexes();\r\n\r\n      // finally refresh the \"To\" count and we know it might be different than the \"items per page\" count\r\n      // but this is necessary since we don't want an actual backend refresh\r\n      this._dataTo = previousDataTo + itemCountWithDirection;\r\n      this.onPaginationChanged.next(this.getFullPagination());\r\n    }\r\n  }\r\n}\r\n","import { AvgAggregator } from './avgAggregator';\r\nimport { MinAggregator } from './minAggregator';\r\nimport { MaxAggregator } from './maxAggregator';\r\nimport { SumAggregator } from './sumAggregator';\r\n\r\n/** Provides a list of different Aggregators for the Group Formatter */\r\nexport const Aggregators = {\r\n  Avg: AvgAggregator,\r\n  Min: MinAggregator,\r\n  Max: MaxAggregator,\r\n  Sum: SumAggregator\r\n};\r\n","import { Aggregator } from './../models/aggregator.interface';\r\n\r\nexport class AvgAggregator implements Aggregator {\r\n  private _nonNullCount: number = 0;\r\n  private _sum: number = 0;\r\n  private _field: number | string;\r\n\r\n  constructor(field: number | string) {\r\n    this._field = field;\r\n  }\r\n\r\n  init(): void {\r\n    this._nonNullCount = 0;\r\n    this._sum = 0;\r\n  }\r\n\r\n  accumulate(item: any) {\r\n    const val = (item && item.hasOwnProperty(this._field)) ? item[this._field] : null;\r\n    if (val !== null && val !== undefined && val !== '' && !isNaN(val)) {\r\n      this._nonNullCount++;\r\n      this._sum += parseFloat(val);\r\n    }\r\n  }\r\n\r\n  storeResult(groupTotals: any) {\r\n    if (!groupTotals || groupTotals.avg === undefined) {\r\n      groupTotals.avg = {};\r\n    }\r\n    if (this._nonNullCount !== 0) {\r\n      groupTotals.avg[this._field] = this._sum / this._nonNullCount;\r\n    }\r\n  }\r\n}\r\n","import { Aggregator } from './../models/aggregator.interface';\r\n\r\nexport class SumAggregator implements Aggregator {\r\n  private _sum: number = 0;\r\n  private _field: number | string;\r\n\r\n  constructor(field: number | string) {\r\n    this._field = field;\r\n  }\r\n\r\n  init() {\r\n    this._sum = 0;\r\n  }\r\n\r\n  accumulate(item: any) {\r\n    const val = (item && item.hasOwnProperty(this._field)) ? item[this._field] : null;\r\n    if (val !== null && val !== undefined && val !== '' && !isNaN(val)) {\r\n      this._sum += parseFloat(val);\r\n    }\r\n  }\r\n\r\n  storeResult(groupTotals: any) {\r\n    if (!groupTotals || groupTotals.sum === undefined) {\r\n      groupTotals.sum = {};\r\n    }\r\n    groupTotals.sum[this._field] = this._sum;\r\n  }\r\n}\r\n","import { Constants } from '../constants';\r\nimport { EditorValidatorOutput } from '../models/editorValidatorOutput.interface';\r\nimport { EditorValidator } from '../models/editorValidator.interface';\r\n\r\ninterface TextValidatorOptions {\r\n  editorArgs: any;\r\n  errorMessage?: string;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  operatorConditionalType?: 'inclusive' | 'exclusive';\r\n  required?: boolean;\r\n  validator?: EditorValidator;\r\n}\r\n\r\nexport function textValidator(inputValue: any, options: TextValidatorOptions): EditorValidatorOutput {\r\n  const errorMsg = options.errorMessage;\r\n  const isRequired = options.required;\r\n  const minLength = options.minLength;\r\n  const maxLength = options.maxLength;\r\n  const operatorConditionalType = options.operatorConditionalType || 'inclusive';\r\n  const mapValidation = {\r\n    '{{minLength}}': minLength,\r\n    '{{maxLength}}': maxLength\r\n  };\r\n  let isValid = true;\r\n  let outputMsg = '';\r\n  const inputValueLength = inputValue && inputValue.length || 0;\r\n\r\n  if (options.validator) {\r\n    return options.validator(inputValue, options.editorArgs);\r\n  }\r\n\r\n  // by default the editor is almost always valid (except when it's required but not provided)\r\n  if (isRequired && inputValue === '') {\r\n    isValid = false;\r\n    outputMsg = errorMsg || Constants.VALIDATION_REQUIRED_FIELD;\r\n  } else if (minLength !== undefined && maxLength !== undefined && ((operatorConditionalType === 'exclusive' && (inputValueLength <= minLength || inputValueLength >= maxLength)) || (operatorConditionalType === 'inclusive' && (inputValueLength < minLength || inputValueLength > maxLength)))) {\r\n    // MIN & MAX Length provided\r\n    // make sure text length is between minLength and maxLength\r\n    isValid = false;\r\n    outputMsg = errorMsg || Constants.VALIDATION_EDITOR_TEXT_LENGTH_BETWEEN.replace(/{{minLength}}|{{maxLength}}/gi, (matched) => (mapValidation as any)[matched]);\r\n  } else if (minLength !== undefined && inputValueLength !== null && ((operatorConditionalType === 'exclusive' && inputValueLength <= minLength) || (operatorConditionalType === 'inclusive' && inputValueLength !== null && inputValueLength < minLength))) {\r\n    // MIN Length ONLY\r\n    // when text length is shorter than minLength\r\n    isValid = false;\r\n    const defaultErrorMsg = operatorConditionalType === 'inclusive' ? Constants.VALIDATION_EDITOR_TEXT_MIN_LENGTH_INCLUSIVE : Constants.VALIDATION_EDITOR_TEXT_MIN_LENGTH;\r\n    outputMsg = errorMsg || defaultErrorMsg.replace(/{{minLength}}/gi, (matched) => (mapValidation as any)[matched]);\r\n  } else if (maxLength !== undefined && inputValueLength !== null && ((operatorConditionalType === 'exclusive' && inputValueLength >= maxLength) || (operatorConditionalType === 'inclusive' && inputValueLength !== null && inputValueLength > maxLength))) {\r\n    // MAX Length ONLY\r\n    // when text length is longer than minLength\r\n    isValid = false;\r\n    const defaultErrorMsg = operatorConditionalType === 'inclusive' ? Constants.VALIDATION_EDITOR_TEXT_MAX_LENGTH_INCLUSIVE : Constants.VALIDATION_EDITOR_TEXT_MAX_LENGTH;\r\n    outputMsg = errorMsg || defaultErrorMsg.replace(/{{maxLength}}/gi, (matched) => (mapValidation as any)[matched]);\r\n  }\r\n\r\n  return { valid: isValid, msg: outputMsg };\r\n}\r\n","import * as DOMPurify_ from 'dompurify';\r\nconst DOMPurify = DOMPurify_; // patch to fix rollup to work\r\n\r\nimport {\r\n  AutocompleteOption,\r\n  CollectionCustomStructure,\r\n  Column,\r\n  ColumnEditor,\r\n  Editor,\r\n  EditorArguments,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  FieldType,\r\n  GridOption,\r\n  KeyCode,\r\n} from './../models/index';\r\nimport { findOrDefault, getDescendantProperty, setDeepValue, toKebabCase } from '../services/utilities';\r\nimport { textValidator } from '../editorValidators/textValidator';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\n// minimum length of chars to type before starting to start querying\r\nconst MIN_LENGTH = 3;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class AutoCompleteEditor implements Editor {\r\n  protected _autoCompleteOptions!: AutocompleteOption;\r\n  protected _currentValue: any;\r\n  protected _defaultTextValue = '';\r\n  protected _elementCollection: any[] | null = null;\r\n  protected _lastInputEvent!: JQuery.Event;\r\n\r\n  /** The JQuery DOM element */\r\n  protected _$editorElm: any;\r\n\r\n  /** SlickGrid Grid object */\r\n  grid: any;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName!: string;\r\n\r\n  /** The property name for a prefix that can be added to the labels in the collection */\r\n  labelPrefixName!: string;\r\n\r\n  /** The property name for a suffix that can be added to the labels in the collection */\r\n  labelSuffixName!: string;\r\n\r\n  /** The property name for values in the collection */\r\n  valueName!: string;\r\n\r\n  forceUserInput!: boolean;\r\n\r\n  constructor(protected args: EditorArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.init();\r\n  }\r\n\r\n  /** Getter for the Autocomplete Option */\r\n  get autoCompleteOptions(): Partial<AutocompleteOption> {\r\n    return this._autoCompleteOptions || {};\r\n  }\r\n\r\n  /** Get the Collection */\r\n  get editorCollection(): any[] {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collection || [];\r\n  }\r\n\r\n  /** Get the Final Collection used in the AutoCompleted Source (this may vary from the \"collection\" especially when providing a customStructure) */\r\n  get elementCollection(): any[] | null {\r\n    return this._elementCollection;\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args.column;\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): ColumnEditor {\r\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Getter for the Custom Structure if exist */\r\n  get customStructure(): CollectionCustomStructure {\r\n    let customStructure = this.columnEditor && this.columnEditor.customStructure;\r\n    const columnType = this.columnEditor && this.columnEditor.type || this.columnDef && this.columnDef.type;\r\n    if (!customStructure && (columnType === FieldType.object && this.columnDef && this.columnDef.dataKey && this.columnDef.labelKey)) {\r\n      customStructure = {\r\n        label: this.columnDef.labelKey,\r\n        value: this.columnDef.dataKey,\r\n      };\r\n    }\r\n    return customStructure as CollectionCustomStructure;\r\n  }\r\n\r\n  get hasAutoCommitEdit() {\r\n    return this.gridOptions.autoCommitEdit;\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator | undefined {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  get editorOptions() {\r\n    return this.columnEditor && this.columnEditor.editorOptions || {};\r\n  }\r\n\r\n  /** jQuery UI AutoComplete instance */\r\n  get instance(): any {\r\n    return this._$editorElm.autocomplete('instance');\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /** Get the Editor DOM Element */\r\n  get editorDomElement(): any {\r\n    return this._$editorElm;\r\n  }\r\n\r\n  init() {\r\n    this.labelName = this.customStructure && this.customStructure.label || 'label';\r\n    this.valueName = this.customStructure && this.customStructure.value || 'value';\r\n    this.labelPrefixName = this.customStructure && this.customStructure.labelPrefix || 'labelPrefix';\r\n    this.labelSuffixName = this.customStructure && this.customStructure.labelSuffix || 'labelSuffix';\r\n\r\n    // always render the DOM element, even if user passed a \"collectionAsync\",\r\n    const newCollection = this.columnEditor.collection || [];\r\n    this.renderDomElement(newCollection);\r\n  }\r\n\r\n  destroy() {\r\n    if (this._$editorElm) {\r\n      this._$editorElm.autocomplete('destroy');\r\n      this._$editorElm.off('keydown.nav').remove();\r\n    }\r\n    this._$editorElm = null;\r\n    this._elementCollection = null;\r\n  }\r\n\r\n  focus() {\r\n    if (this._$editorElm) {\r\n      this._$editorElm.focus().select();\r\n    }\r\n  }\r\n\r\n  getValue() {\r\n    return this._$editorElm.val();\r\n  }\r\n\r\n  setValue(value: string) {\r\n    this._$editorElm.val(value);\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    let newValue = state;\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n\r\n    // if we have a collection defined, we will try to find the string within the collection and return it\r\n    if (Array.isArray(this.editorCollection) && this.editorCollection.length > 0) {\r\n      newValue = findOrDefault(this.editorCollection, (collectionItem: any) => {\r\n        if (collectionItem && typeof state === 'object' && collectionItem.hasOwnProperty(this.labelName)) {\r\n          return (collectionItem.hasOwnProperty(this.labelName) && collectionItem[this.labelName].toString()) === (state.hasOwnProperty(this.labelName) && state[this.labelName].toString());\r\n        } else if (collectionItem && typeof state === 'string' && collectionItem.hasOwnProperty(this.labelName)) {\r\n          return (collectionItem.hasOwnProperty(this.labelName) && collectionItem[this.labelName].toString()) === state;\r\n        }\r\n        return collectionItem && collectionItem.toString() === state;\r\n      });\r\n    }\r\n\r\n    // is the field a complex object, \"address.streetNumber\"\r\n    const isComplexObject = fieldName && fieldName.indexOf('.') > 0;\r\n\r\n    // validate the value before applying it (if not valid we'll set an empty string)\r\n    const validation = this.validate(newValue);\r\n    newValue = (validation && validation.valid) ? newValue : '';\r\n\r\n    // set the new value to the item datacontext\r\n    if (isComplexObject) {\r\n      setDeepValue(item, fieldName, newValue);\r\n    } else {\r\n      item[fieldName] = newValue;\r\n    }\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    const elmValue = this._$editorElm.val();\r\n    const lastKeyEvent = this._lastInputEvent && this._lastInputEvent.keyCode;\r\n    if (this.columnEditor && this.columnEditor.alwaysSaveOnEnterKey && lastKeyEvent === KeyCode.ENTER) {\r\n      return true;\r\n    }\r\n    return (!(elmValue === '' && (this._defaultTextValue === null || this._defaultTextValue === undefined))) && (elmValue !== this._defaultTextValue);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n\r\n    if (item && fieldName !== undefined) {\r\n      // is the field a complex object, \"address.streetNumber\"\r\n      const isComplexObject = fieldName && fieldName.indexOf('.') > 0;\r\n      const data = (isComplexObject) ? getDescendantProperty(item, fieldName) : item[fieldName];\r\n\r\n      this._currentValue = data;\r\n      this._defaultTextValue = typeof data === 'string' ? data : (data && data.hasOwnProperty(this.labelName) && data[this.labelName] || '');\r\n      this._$editorElm.val(this._defaultTextValue);\r\n      this._$editorElm.select();\r\n    }\r\n  }\r\n\r\n  save() {\r\n    const validation = this.validate();\r\n    const isValid = (validation && validation.valid) || false;\r\n\r\n    if (this.hasAutoCommitEdit && isValid) {\r\n      // do not use args.commitChanges() as this sets the focus to the next row.\r\n      // also the select list will stay shown when clicking off the grid\r\n      this.grid.getEditorLock().commitCurrentEdit();\r\n    } else {\r\n      this.args.commitChanges();\r\n    }\r\n  }\r\n\r\n  serializeValue(): any {\r\n    // if you want to add the autocomplete functionality but want the user to be able to input a new option\r\n    if (this.editorOptions.forceUserInput) {\r\n      const minLength = this.editorOptions && this.editorOptions.hasOwnProperty('minLength') ? this.editorOptions.minLength : MIN_LENGTH;\r\n      this._currentValue = this._$editorElm.val().length > minLength ? this._$editorElm.val() : this._currentValue;\r\n    }\r\n    // if user provided a custom structure, we will serialize the value returned from the object with custom structure\r\n    if (this.customStructure && this._currentValue && this._currentValue.hasOwnProperty(this.valueName) && (this.columnDef && this.columnDef.type !== FieldType.object && this.columnEditor && this.columnEditor.type !== FieldType.object)) {\r\n      return this._currentValue[this.valueName];\r\n    } else if (this._currentValue && this._currentValue.value !== undefined) {\r\n      // when object has a \"value\" property and its column is set as an Object type, we'll return an object with optional custom structure\r\n      if (this.columnDef && this.columnDef.type === FieldType.object || ((this.columnEditor && this.columnEditor.type) === FieldType.object)) {\r\n        return {\r\n          [this.labelName]: this._currentValue.label,\r\n          [this.valueName]: this._currentValue.value\r\n        };\r\n      }\r\n      return this._currentValue.value;\r\n    }\r\n    // if it falls here it might be that the user provided its own custom item with something else than the regular label/value pair\r\n    // at this point it's only available when user provide a custom template for the autocomplete renderItem callback\r\n    return this._currentValue;\r\n  }\r\n\r\n  validate(inputValue?: any): EditorValidatorOutput {\r\n    const val = (inputValue !== undefined) ? inputValue : this._$editorElm && this._$editorElm.val && this._$editorElm.val();\r\n    return textValidator(val, {\r\n      editorArgs: this.args,\r\n      errorMessage: this.columnEditor.errorMessage,\r\n      minLength: this.columnEditor.minLength,\r\n      maxLength: this.columnEditor.maxLength,\r\n      operatorConditionalType: this.columnEditor.operatorConditionalType,\r\n      required: this.columnEditor.required,\r\n      validator: this.validator,\r\n    });\r\n  }\r\n\r\n  //\r\n  // protected functions\r\n  // ------------------\r\n\r\n  // this function should be protected but for unit tests purposes we'll make it public until a better solution is found\r\n  // a better solution would be to get the autocomplete DOM element to work with selection but I couldn't find how to do that in Jest\r\n  handleSelect(event: Event, ui: { item: any; }) {\r\n    if (ui && ui.item) {\r\n      const item = ui && ui.item;\r\n      this._currentValue = item;\r\n      // when the user defines a \"renderItem\" (or \"_renderItem\") template, then we assume the user defines his own custom structure of label/value pair\r\n      // otherwise we know that jQueryUI always require a label/value pair, we can pull them directly\r\n      const hasCustomRenderItemCallback = this.columnEditor && this.columnEditor.callbacks && this.columnEditor.callbacks.hasOwnProperty('_renderItem') || (this.columnEditor && this.columnEditor.editorOptions && this.columnEditor.editorOptions.renderItem) || false;\r\n\r\n      const itemLabel = typeof item === 'string' ? item : (hasCustomRenderItemCallback ? item[this.labelName] : item.label);\r\n      this.setValue(itemLabel);\r\n      this.save();\r\n\r\n      // if user wants to hook to the \"select\", he can do via this \"onSelect\"\r\n      // it purposely has a similar signature as the \"select\" callback + some extra arguments (row, cell, column, dataContext)\r\n      if (this.editorOptions.onSelect) {\r\n        const activeCell = this.grid && this.grid.getActiveCell() || {};\r\n        this.editorOptions.onSelect(event, ui, activeCell.row, activeCell.cell, this.args.column, this.args.item);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  protected renderCustomItem(ul: HTMLElement, item: any) {\r\n    const templateString = this._autoCompleteOptions && this._autoCompleteOptions.renderItem && this._autoCompleteOptions.renderItem.templateCallback(item) || '';\r\n\r\n    // sanitize any unauthorized html tags like script and others\r\n    // for the remaining allowed tags we'll permit all attributes\r\n    const sanitizedTemplateText = (DOMPurify.sanitize(templateString, {}) || '').toString();\r\n\r\n    return $('<li></li>')\r\n      .data('item.autocomplete', item)\r\n      .append(sanitizedTemplateText)\r\n      .appendTo(ul);\r\n  }\r\n\r\n  protected renderCollectionItem(ul: HTMLElement, item: any) {\r\n    const isRenderHtmlEnabled = this.columnEditor && this.columnEditor.enableRenderHtml || false;\r\n    const prefixText = item.labelPrefix || '';\r\n    const labelText = item.label || '';\r\n    const suffixText = item.labelSuffix || '';\r\n    const finalText = prefixText + labelText + suffixText;\r\n\r\n    // sanitize any unauthorized html tags like script and others\r\n    // for the remaining allowed tags we'll permit all attributes\r\n    const sanitizedText = (DOMPurify.sanitize(finalText, {}) || '').toString();\r\n\r\n    const $liDiv = $('<div></div>')[isRenderHtmlEnabled ? 'html' : 'text'](sanitizedText);\r\n    return $('<li></li>')\r\n      .data('item.autocomplete', item)\r\n      .append($liDiv)\r\n      .appendTo(ul);\r\n  }\r\n\r\n  protected renderDomElement(collection: any[]) {\r\n    if (!Array.isArray(collection)) {\r\n      throw new Error('The \"collection\" passed to the Autocomplete Editor is not a valid array.');\r\n    }\r\n    const columnId = this.columnDef && this.columnDef.id || '';\r\n    const placeholder = this.columnEditor && this.columnEditor.placeholder || '';\r\n    const title = this.columnEditor && this.columnEditor.title || '';\r\n\r\n    this._$editorElm = $(`<input type=\"text\" role=\"presentation\" autocomplete=\"off\" class=\"autocomplete editor-text editor-${columnId}\" placeholder=\"${placeholder}\" title=\"${title}\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (event: JQuery.Event) => {\r\n        this._lastInputEvent = event;\r\n        if (event.keyCode === KeyCode.LEFT || event.keyCode === KeyCode.RIGHT) {\r\n          event.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    // add a <span> in order to add spinner styling\r\n    $(`<span></span>`).appendTo(this.args.container);\r\n\r\n    // user might pass his own autocomplete options\r\n    const autoCompleteOptions: AutocompleteOption = this.columnEditor.editorOptions;\r\n\r\n    // assign the collection to a temp variable before filtering/sorting the collection\r\n    let finalCollection = collection;\r\n\r\n    // user could also override the collection\r\n    if (this.columnEditor && this.columnEditor.collectionOverride) {\r\n      finalCollection = this.columnEditor.collectionOverride(finalCollection, { column: this.columnDef, dataContext: this.args.item, grid: this.grid });\r\n    }\r\n\r\n    // user might provide his own custom structure\r\n    // jQuery UI autocomplete requires a label/value pair, so we must remap them when user provide different ones\r\n    if (Array.isArray(finalCollection)) {\r\n      finalCollection = finalCollection.map((item) => {\r\n        return { label: item[this.labelName], value: item[this.valueName], labelPrefix: item[this.labelPrefixName] || '', labelSuffix: item[this.labelSuffixName] || '' };\r\n      });\r\n    }\r\n\r\n    // keep the final source collection used in the AutoComplete as reference\r\n    this._elementCollection = finalCollection;\r\n\r\n    // when user passes it's own autocomplete options\r\n    // we still need to provide our own \"select\" callback implementation\r\n    if (autoCompleteOptions && autoCompleteOptions.source) {\r\n      autoCompleteOptions.select = (event: Event, ui: { item: any; }) => this.handleSelect(event, ui);\r\n      this._autoCompleteOptions = { ...autoCompleteOptions };\r\n\r\n      // when \"renderItem\" is defined, we need to add our custom style CSS class\r\n      if (this._autoCompleteOptions.renderItem) {\r\n        this._autoCompleteOptions.classes = {\r\n          'ui-autocomplete': `autocomplete-custom-${toKebabCase(this._autoCompleteOptions.renderItem.layout)}`\r\n        };\r\n      }\r\n      // create the jQueryUI AutoComplete\r\n      this._$editorElm.autocomplete(this._autoCompleteOptions);\r\n\r\n      // when \"renderItem\" is defined, we need to call the user's custom renderItem template callback\r\n      if (this._autoCompleteOptions.renderItem) {\r\n        this._$editorElm.autocomplete('instance')._renderItem = this.renderCustomItem.bind(this);\r\n      }\r\n    } else {\r\n      const definedOptions: AutocompleteOption = {\r\n        source: finalCollection,\r\n        minLength: 0,\r\n        select: (event: Event, ui: { item: any; }) => this.handleSelect(event, ui),\r\n      };\r\n      this._autoCompleteOptions = { ...definedOptions, ...(this.columnEditor.editorOptions as AutocompleteOption) };\r\n      this._$editorElm.autocomplete(this._autoCompleteOptions);\r\n\r\n      // we'll use our own renderer so that it works with label prefix/suffix and also with html rendering when enabled\r\n      this._$editorElm.autocomplete('instance')._renderItem = this.renderCollectionItem.bind(this);\r\n    }\r\n\r\n    // in case the user wants to save even an empty value,\r\n    // we need to subscribe to the onKeyDown event for that use case and clear the current value\r\n    if (this.columnEditor.alwaysSaveOnEnterKey) {\r\n      this._$editorElm.keydown((event: JQuery.Event) => {\r\n        if (event.keyCode === KeyCode.ENTER) {\r\n          this._currentValue = null;\r\n        }\r\n      });\r\n    }\r\n\r\n    // we could optionally trigger a search when clicking on the AutoComplete\r\n    if (this.editorOptions.openSearchListOnFocus) {\r\n      this._$editorElm.click(() => this._$editorElm.autocomplete('search', this._$editorElm.val()));\r\n    }\r\n\r\n    // user might override any of the jQueryUI callback methods\r\n    if (this.columnEditor.callbacks) {\r\n      for (const callback of Object.keys(this.columnEditor.callbacks)) {\r\n        if (typeof this.columnEditor.callbacks[callback] === 'function') {\r\n          this.instance[callback] = this.columnEditor.callbacks[callback];\r\n        }\r\n      }\r\n    }\r\n\r\n    this._$editorElm.on('focus', () => {\r\n      this._$editorElm.select();\r\n\r\n      // we could optionally trigger a search to open the AutoComplete search list\r\n      if (this.editorOptions.openSearchListOnFocus) {\r\n        this._$editorElm.autocomplete('search', this._$editorElm.val());\r\n      }\r\n    });\r\n\r\n    setTimeout(() => this.focus(), 50);\r\n  }\r\n}\r\n","import * as flatpickr_ from 'flatpickr';\r\nimport * as moment_ from 'moment-mini';\r\nimport { BaseOptions as FlatpickrBaseOptions } from 'flatpickr/dist/types/options';\r\nimport { FlatpickrFn } from 'flatpickr/dist/types/instance';\r\nconst flatpickr: FlatpickrFn = (flatpickr_ && flatpickr_['default'] || flatpickr_) as any; // patch for rollup\r\nconst moment = (moment_ as any)['default'] || moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { Constants } from './../constants';\r\nimport { destroyObjectDomElementProps, getDescendantProperty, mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType, setDeepValue } from './../services/utilities';\r\nimport {\r\n  Column,\r\n  ColumnEditor,\r\n  Editor,\r\n  EditorArguments,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  FieldType,\r\n  FlatpickrOption,\r\n  GridOption,\r\n} from './../models/index';\r\n\r\ndeclare function require(name: string): any;\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\n/*\r\n * An example of a date picker editor using Flatpickr\r\n * https://chmln.github.io/flatpickr\r\n */\r\nexport class DateEditor implements Editor {\r\n  protected _$inputWithData: any;\r\n  protected _$input: any;\r\n  protected _$editorInputElm: any;\r\n  protected _originalDate = '';\r\n  protected _pickerMergedOptions!: FlatpickrOption;\r\n\r\n  /** The translate library */\r\n  protected _translate?: TranslateService;\r\n\r\n  flatInstance: any;\r\n  defaultDate?: string;\r\n  originalDate?: string;\r\n\r\n  /** SlickGrid Grid object */\r\n  grid: any;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  constructor(protected args: EditorArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.gridOptions = (args.grid && args.grid.getOptions() || {}) as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    if (options && options.i18n instanceof TranslateService) {\r\n      this._translate = options.i18n;\r\n    }\r\n\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args.column;\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): ColumnEditor {\r\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Editor DOM Element */\r\n  get editorDomElement(): any {\r\n    return this._$input;\r\n  }\r\n\r\n  /** Get Flatpickr options passed to the editor by the user */\r\n  get editorOptions(): FlatpickrOption {\r\n    return this.columnEditor.editorOptions || {};\r\n  }\r\n\r\n  get hasAutoCommitEdit() {\r\n    return this.grid.getOptions().autoCommitEdit;\r\n  }\r\n\r\n  get pickerOptions(): FlatpickrOption {\r\n    return this._pickerMergedOptions;\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator | undefined {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    if (this.args && this.columnDef) {\r\n      const columnId = this.columnDef && this.columnDef.id;\r\n      const placeholder = this.columnEditor && this.columnEditor.placeholder || '';\r\n      const title = this.columnEditor && this.columnEditor.title || '';\r\n      this.defaultDate = (this.args.item) ? this.args.item[this.columnDef.field] : null;\r\n      const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnEditor.type || this.columnDef.type || FieldType.dateUtc);\r\n      const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnEditor.type || this.columnDef.type || FieldType.dateUtc);\r\n      let currentLocale = this._translate && this._translate.currentLang || this.gridOptions.locale || 'en';\r\n      if (currentLocale && currentLocale.length > 2) {\r\n        currentLocale = currentLocale.substring(0, 2);\r\n      }\r\n\r\n      const pickerOptions: FlatpickrOption = {\r\n        defaultDate: this.defaultDate as string,\r\n        altInput: true,\r\n        altFormat: outputFormat,\r\n        dateFormat: inputFormat,\r\n        closeOnSelect: true,\r\n        wrap: true,\r\n        locale: currentLocale,\r\n        onChange: () => {\r\n          const currentFlatpickrOptions = this.flatInstance?.config ?? this._pickerMergedOptions;\r\n          if (this.args && currentFlatpickrOptions?.closeOnSelect) {\r\n            this.save();\r\n          }\r\n        },\r\n        errorHandler: (error: Error) => {\r\n          if (error.toString().includes('invalid locale')) {\r\n            console.warn(`[Angular-Slickgrid] Flatpickr missing locale imports (${currentLocale}), will revert to English as the default locale.\r\n          See Flatpickr Localization for more info, for example if we want to use French, then we can import it with:  import 'flatpickr/dist/l10n/fr';`);\r\n          }\r\n          // for any other error do nothing\r\n          // Flatpickr is a little too sensitive and will throw an error when provided date is lower than minDate so just disregard the error completely\r\n        }\r\n      };\r\n\r\n      // merge options with optional user's custom options\r\n      this._pickerMergedOptions = { ...pickerOptions, ...(this.editorOptions as FlatpickrOption) };\r\n      const inputCssClasses = `.editor-text.editor-${columnId}.form-control`;\r\n      if (this._pickerMergedOptions.altInput) {\r\n        this._pickerMergedOptions.altInputClass = 'flatpickr-alt-input form-control';\r\n      }\r\n\r\n      this._$editorInputElm = $(`<div class=\"flatpickr input-group\"></div>`);\r\n      const closeButtonElm = $(`<span class=\"input-group-btn input-group-append\" data-clear>\r\n          <button class=\"btn btn-default icon-close\" type=\"button\"></button>\r\n        </span>`);\r\n      this._$input = $(`<input type=\"text\" data-input data-defaultDate=\"${this.defaultDate}\" class=\"${inputCssClasses.replace(/\\./g, ' ')}\" placeholder=\"${placeholder}\" title=\"${title}\" />`);\r\n      this._$input.appendTo(this._$editorInputElm);\r\n\r\n      // show clear date button (unless user specifically doesn't want it)\r\n      const isCloseButtonHidden = this.columnEditor && this.columnEditor.params && this.columnEditor.params.hideClearButton || false;\r\n      if (!isCloseButtonHidden) {\r\n        closeButtonElm.appendTo(this._$editorInputElm);\r\n      }\r\n\r\n      this._$editorInputElm.appendTo(this.args.container);\r\n      this.flatInstance = (!!flatpickr && this._$editorInputElm[0] && typeof this._$editorInputElm[0].flatpickr === 'function') ? this._$editorInputElm[0].flatpickr(this._pickerMergedOptions) : flatpickr(this._$editorInputElm, this._pickerMergedOptions as unknown as Partial<FlatpickrBaseOptions>);\r\n\r\n      // when we're using an alternate input to display data, we'll consider this input as the one to do the focus later on\r\n      // else just use the top one\r\n      this._$inputWithData = (this._pickerMergedOptions && this._pickerMergedOptions.altInput) ? $(`${inputCssClasses}.flatpickr-alt-input`) : this._$input;\r\n\r\n      setTimeout(() => {\r\n        this.show();\r\n        this.focus();\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this.hide();\r\n    if (this.flatInstance && typeof this.flatInstance.destroy === 'function') {\r\n      this.flatInstance.destroy();\r\n      if (this.flatInstance.element) {\r\n        setTimeout(() => destroyObjectDomElementProps(this.flatInstance));\r\n      }\r\n      this.flatInstance = null;\r\n    }\r\n    if (this._$editorInputElm) {\r\n      this._$editorInputElm.remove();\r\n      this._$editorInputElm = null;\r\n    }\r\n    if (this._$inputWithData) {\r\n      this._$inputWithData.remove();\r\n      this._$inputWithData = null;\r\n    }\r\n    this._$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this._$input.focus();\r\n    if (this._$inputWithData && typeof this._$inputWithData.focus === 'function') {\r\n      this._$inputWithData.focus().select();\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function' && this.flatInstance._input) {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n\r\n  getValue(): string {\r\n    return this._$input.val();\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this.flatInstance.setDate(val);\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n    if (fieldName !== undefined) {\r\n      const outputTypeFormat = mapMomentDateFormatWithFieldType((this.columnDef && (this.columnDef.outputType || this.columnEditor.type || this.columnDef.type)) || FieldType.dateUtc);\r\n      const saveTypeFormat = mapMomentDateFormatWithFieldType((this.columnDef && (this.columnDef.saveOutputType || this.columnDef.outputType || this.columnEditor.type || this.columnDef.type)) || FieldType.dateUtc);\r\n      const isComplexObject = fieldName && fieldName.indexOf('.') > 0; // is the field a complex object, \"address.streetNumber\"\r\n\r\n      // validate the value before applying it (if not valid we'll set an empty string)\r\n      const validation = this.validate(state);\r\n      const newValue = (state && validation && validation.valid) ? moment(state, outputTypeFormat).format(saveTypeFormat) : '';\r\n\r\n      // set the new value to the item datacontext\r\n      if (isComplexObject) {\r\n        setDeepValue(item, fieldName, newValue);\r\n      } else {\r\n        item[fieldName] = newValue;\r\n      }\r\n    }\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    const elmValue = this._$input.val();\r\n    const inputFormat = mapMomentDateFormatWithFieldType(this.columnEditor.type || (this.columnDef && this.columnDef.type) || FieldType.dateIso);\r\n    const outputTypeFormat = mapMomentDateFormatWithFieldType((this.columnDef && (this.columnDef.outputType || this.columnEditor.type || this.columnDef.type)) || FieldType.dateUtc);\r\n    const elmDateStr = elmValue ? moment(elmValue, inputFormat, false).format(outputTypeFormat) : '';\r\n    const orgDateStr = this._originalDate ? moment(this._originalDate, inputFormat, false).format(outputTypeFormat) : '';\r\n    if (elmDateStr === 'Invalid date' || orgDateStr === 'Invalid date') {\r\n      return false;\r\n    }\r\n\r\n    const isChanged = (!(elmDateStr === '' && orgDateStr === '')) && (elmDateStr !== orgDateStr);\r\n    return isChanged;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n\r\n    if (item && fieldName !== undefined) {\r\n      // is the field a complex object, \"address.streetNumber\"\r\n      const isComplexObject = fieldName && fieldName.indexOf('.') > 0;\r\n      const value = (isComplexObject) ? getDescendantProperty(item, fieldName) : item[fieldName];\r\n\r\n      this._originalDate = value;\r\n      this.flatInstance.setDate(value);\r\n    }\r\n  }\r\n\r\n  save() {\r\n    const validation = this.validate();\r\n    const isValid = (validation && validation.valid) || false;\r\n\r\n    if (this.hasAutoCommitEdit && isValid) {\r\n      // do not use args.commitChanges() as this sets the focus to the next row.\r\n      // also the select list will stay shown when clicking off the grid\r\n      this.grid.getEditorLock().commitCurrentEdit();\r\n    } else {\r\n      this.args.commitChanges();\r\n    }\r\n  }\r\n\r\n  serializeValue() {\r\n    const domValue: string = this._$input.val();\r\n\r\n    if (!domValue) {\r\n      return '';\r\n    }\r\n\r\n    const inputFormat = mapMomentDateFormatWithFieldType(this.columnEditor.type || (this.columnDef && this.columnDef.type) || FieldType.dateIso);\r\n    const outputTypeFormat = mapMomentDateFormatWithFieldType((this.columnDef && (this.columnDef.outputType || this.columnEditor.type || this.columnDef.type)) || FieldType.dateIso);\r\n    const value = moment(domValue, inputFormat, false).format(outputTypeFormat);\r\n\r\n    return value;\r\n  }\r\n\r\n  validate(inputValue?: any): EditorValidatorOutput {\r\n    const isRequired = this.columnEditor.required;\r\n    const elmValue = (inputValue !== undefined) ? inputValue : this._$input && this._$input.val && this._$input.val();\r\n    const errorMsg = this.columnEditor.errorMessage;\r\n\r\n    if (this.validator) {\r\n      return this.validator(elmValue, this.args);\r\n    }\r\n\r\n    // by default the editor is almost always valid (except when it's required but not provided)\r\n    if (isRequired && elmValue === '') {\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || Constants.VALIDATION_REQUIRED_FIELD\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n","import { Constants } from '../constants';\r\nimport { EditorValidatorOutput } from '../models/editorValidatorOutput.interface';\r\nimport { EditorValidator } from '../models/editorValidator.interface';\r\n\r\ninterface FloatValidatorOptions {\r\n  editorArgs: any;\r\n  decimal?: number;\r\n  errorMessage?: string;\r\n  minValue?: string | number;\r\n  maxValue?: string | number;\r\n  operatorConditionalType?: 'inclusive' | 'exclusive';\r\n  required?: boolean;\r\n  validator?: EditorValidator;\r\n}\r\n\r\nexport function floatValidator(inputValue: any, options: FloatValidatorOptions): EditorValidatorOutput {\r\n  const floatNumber = !isNaN(inputValue as number) ? parseFloat(inputValue) : null;\r\n  const decPlaces = options.decimal || 0;\r\n  const isRequired = options.required;\r\n  const minValue = options.minValue;\r\n  const maxValue = options.maxValue;\r\n  const operatorConditionalType = options.operatorConditionalType || 'inclusive';\r\n  const errorMsg = options.errorMessage;\r\n  const mapValidation = {\r\n    '{{minValue}}': minValue,\r\n    '{{maxValue}}': maxValue,\r\n    '{{minDecimal}}': 0,\r\n    '{{maxDecimal}}': decPlaces\r\n  };\r\n  let isValid = true;\r\n  let outputMsg = '';\r\n\r\n  if (typeof options.validator === 'function') {\r\n    return options.validator(inputValue, options.editorArgs);\r\n  } else if (isRequired && inputValue === '') {\r\n    isValid = false;\r\n    outputMsg = errorMsg || Constants.VALIDATION_REQUIRED_FIELD;\r\n  } else if (inputValue !== '' && (isNaN(inputValue as number) || (decPlaces === 0 && !/^[-+]?(\\d*(\\.)?(\\d)*)$/.test(inputValue)))) {\r\n    // when decimal value is 0 (which is the default), we accept 0 or more decimal values\r\n    isValid = false;\r\n    outputMsg = errorMsg || Constants.VALIDATION_EDITOR_VALID_NUMBER;\r\n  } else if (minValue !== undefined && maxValue !== undefined && floatNumber !== null && ((operatorConditionalType === 'exclusive' && (floatNumber <= minValue || floatNumber >= maxValue)) || (operatorConditionalType === 'inclusive' && (floatNumber < minValue || floatNumber > maxValue)))) {\r\n    // MIN & MAX Values provided\r\n    // when decimal value is bigger than 0, we only accept the decimal values as that value set\r\n    // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\r\n    isValid = false;\r\n    outputMsg = errorMsg || Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => (mapValidation as any)[matched]);\r\n  } else if (minValue !== undefined && floatNumber !== null && ((operatorConditionalType === 'exclusive' && floatNumber <= minValue) || (operatorConditionalType === 'inclusive' && floatNumber < minValue))) {\r\n    // MIN VALUE ONLY\r\n    // when decimal value is bigger than 0, we only accept the decimal values as that value set\r\n    // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\r\n    isValid = false;\r\n    const defaultErrorMsg = operatorConditionalType === 'inclusive' ? Constants.VALIDATION_EDITOR_NUMBER_MIN_INCLUSIVE : Constants.VALIDATION_EDITOR_NUMBER_MIN;\r\n    outputMsg = errorMsg || defaultErrorMsg.replace(/{{minValue}}/gi, (matched) => (mapValidation as any)[matched]);\r\n  } else if (maxValue !== undefined && floatNumber !== null && ((operatorConditionalType === 'exclusive' && floatNumber >= maxValue) || (operatorConditionalType === 'inclusive' && floatNumber > maxValue))) {\r\n    // MAX VALUE ONLY\r\n    // when decimal value is bigger than 0, we only accept the decimal values as that value set\r\n    // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\r\n    isValid = false;\r\n    const defaultErrorMsg = operatorConditionalType === 'inclusive' ? Constants.VALIDATION_EDITOR_NUMBER_MAX_INCLUSIVE : Constants.VALIDATION_EDITOR_NUMBER_MAX;\r\n    outputMsg = errorMsg || defaultErrorMsg.replace(/{{maxValue}}/gi, (matched) => (mapValidation as any)[matched]);\r\n  } else if ((decPlaces > 0 && !new RegExp(`^[-+]?(\\\\d*(\\\\.)?(\\\\d){0,${decPlaces}})$`).test(inputValue))) {\r\n    // when decimal value is bigger than 0, we only accept the decimal values as that value set\r\n    // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\r\n    isValid = false;\r\n    outputMsg = errorMsg || Constants.VALIDATION_EDITOR_DECIMAL_BETWEEN.replace(/{{minDecimal}}|{{maxDecimal}}/gi, (matched) => (mapValidation as any)[matched]);\r\n  }\r\n\r\n  return { valid: isValid, msg: outputMsg };\r\n}\r\n","import { Constants } from '../constants';\r\nimport { EditorValidatorOutput } from '../models/editorValidatorOutput.interface';\r\nimport { EditorValidator } from '../models/editorValidator.interface';\r\n\r\ninterface IntegerValidatorOptions {\r\n  editorArgs: any;\r\n  errorMessage?: string;\r\n  minValue?: string | number;\r\n  maxValue?: string | number;\r\n  operatorConditionalType?: 'inclusive' | 'exclusive';\r\n  required?: boolean;\r\n  validator?: EditorValidator;\r\n}\r\n\r\nexport function integerValidator(inputValue: any, options: IntegerValidatorOptions): EditorValidatorOutput {\r\n  let intNumber = !isNaN(inputValue as number) ? parseInt(inputValue, 10) : null;\r\n  if (intNumber !== null && isNaN(intNumber)) {\r\n    intNumber = null;\r\n  }\r\n  const errorMsg = options.errorMessage;\r\n  const isRequired = options.required;\r\n  const minValue = options.minValue;\r\n  const maxValue = options.maxValue;\r\n  const operatorConditionalType = options.operatorConditionalType || 'inclusive';\r\n  const mapValidation = {\r\n    '{{minValue}}': minValue,\r\n    '{{maxValue}}': maxValue\r\n  };\r\n  let isValid = true;\r\n  let outputMsg = '';\r\n\r\n  if (options.validator) {\r\n    return options.validator(inputValue, options.editorArgs);\r\n  } else if (isRequired && inputValue === '') {\r\n    isValid = false;\r\n    outputMsg = errorMsg || Constants.VALIDATION_REQUIRED_FIELD;\r\n  } else if (inputValue !== '' && ((isNaN(inputValue as number) || !/^[+-]?\\d+$/.test(inputValue)))) {\r\n    isValid = false;\r\n    outputMsg = errorMsg || Constants.VALIDATION_EDITOR_VALID_INTEGER;\r\n  } else if (minValue !== undefined && maxValue !== undefined && intNumber !== null && ((operatorConditionalType === 'exclusive' && (intNumber <= minValue || intNumber >= maxValue)) || (operatorConditionalType === 'inclusive' && (intNumber < minValue || intNumber > maxValue)))) {\r\n    // MIN & MAX Values provided (between)\r\n    // when decimal value is bigger than 0, we only accept the decimal values as that value set\r\n    // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\r\n    isValid = false;\r\n    outputMsg = errorMsg || Constants.VALIDATION_EDITOR_INTEGER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => (mapValidation as any)[matched]);\r\n  } else if (minValue !== undefined && intNumber !== null && ((operatorConditionalType === 'exclusive' && intNumber <= minValue) || (operatorConditionalType === 'inclusive' && intNumber !== null && intNumber < minValue))) {\r\n    // MIN VALUE ONLY\r\n    // when decimal value has to be higher then provided minValue\r\n    isValid = false;\r\n    const defaultErrorMsg = operatorConditionalType === 'inclusive' ? Constants.VALIDATION_EDITOR_INTEGER_MIN_INCLUSIVE : Constants.VALIDATION_EDITOR_INTEGER_MIN;\r\n    outputMsg = errorMsg || defaultErrorMsg.replace(/{{minValue}}/gi, (matched) => (mapValidation as any)[matched]);\r\n  } else if (maxValue !== undefined && intNumber !== null && ((operatorConditionalType === 'exclusive' && intNumber >= maxValue) || (operatorConditionalType === 'inclusive' && intNumber !== null && intNumber > maxValue))) {\r\n    // MAX VALUE ONLY\r\n    // when decimal value has to be lower then provided maxValue\r\n    isValid = false;\r\n    const defaultErrorMsg = operatorConditionalType === 'inclusive' ? Constants.VALIDATION_EDITOR_INTEGER_MAX_INCLUSIVE : Constants.VALIDATION_EDITOR_INTEGER_MAX;\r\n    outputMsg = errorMsg || defaultErrorMsg.replace(/{{maxValue}}/gi, (matched) => (mapValidation as any)[matched]);\r\n  }\r\n\r\n  return { valid: isValid, msg: outputMsg };\r\n}\r\n","import { TranslateService } from '@ngx-translate/core';\r\nimport { dequal } from 'dequal/lite';\r\nimport { Subscription } from 'rxjs';\r\nimport * as DOMPurify_ from 'dompurify';\r\nconst DOMPurify = DOMPurify_; // patch to fix rollup to work\r\n\r\nimport { Constants } from '../constants';\r\nimport {\r\n  CollectionCustomStructure,\r\n  CollectionOption,\r\n  Column,\r\n  ColumnEditor,\r\n  Editor,\r\n  EditorArguments,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  FieldType,\r\n  GridOption,\r\n  Locale,\r\n  MultipleSelectOption,\r\n  SelectOption,\r\n} from './../models/index';\r\nimport { CollectionService } from '../services/index';\r\nimport { findOrDefault, getDescendantProperty, getTranslationPrefix, htmlEncode, setDeepValue } from '../services/utilities';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\n/**\r\n * Slickgrid editor class for multiple/single select lists\r\n */\r\nexport class SelectEditor implements Editor {\r\n  /** The JQuery DOM element */\r\n  $editorElm: any;\r\n\r\n  /** Editor Multiple-Select options */\r\n  editorElmOptions!: MultipleSelectOption;\r\n\r\n  /** DOM Element Name, useful for auto-detecting positioning (dropup / dropdown) */\r\n  elementName: string;\r\n\r\n  /** The multiple-select options for a multiple select list */\r\n  defaultOptions: MultipleSelectOption;\r\n\r\n  /** The original item values that are set at the beginning */\r\n  originalValue?: any[];\r\n\r\n  /** The property name for values in the collection */\r\n  valueName!: string;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName!: string;\r\n\r\n  /** The property name for a prefix that can be added to the labels in the collection */\r\n  labelPrefixName!: string;\r\n\r\n  /** The property name for a suffix that can be added to the labels in the collection */\r\n  labelSuffixName!: string;\r\n\r\n  /** A label that can be added to each option and can be used as an alternative to display selected options */\r\n  optionLabel!: string;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** Do we translate the label? */\r\n  enableTranslateLabel = false;\r\n\r\n  /** Locales */\r\n  protected _locales: Locale;\r\n\r\n  /** Observable Subscriptions */\r\n  protected _subscriptions: Subscription[] = [];\r\n\r\n  // flag to signal that the editor is destroying itself, helps prevent\r\n  // commit changes from being called twice and erroring\r\n  protected _isDisposing = false;\r\n\r\n  /** Collection Service */\r\n  protected _collectionService!: CollectionService;\r\n\r\n  /** The translate library */\r\n  protected _translate?: TranslateService;\r\n\r\n  /** SlickGrid Grid object */\r\n  grid: any;\r\n\r\n  constructor(protected args: EditorArguments, protected isMultipleSelect: boolean) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.gridOptions = (this.grid.getOptions() || {}) as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    if (options && options.i18n instanceof TranslateService) {\r\n      this._translate = options.i18n;\r\n    }\r\n\r\n    // get locales provided by user in main file or else use default English locales via the Constants\r\n    this._locales = this.gridOptions.locales || Constants.locales;\r\n\r\n    // provide the name attribute to the DOM element which will be needed to auto-adjust drop position (dropup / dropdown)\r\n    const fieldId = this.columnDef && this.columnDef.id;\r\n    this.elementName = `editor-${fieldId}`;\r\n\r\n    const libOptions: MultipleSelectOption = {\r\n      autoAdjustDropHeight: true,\r\n      autoAdjustDropPosition: true,\r\n      autoAdjustDropWidthByTextSize: true,\r\n      container: 'body',\r\n      filter: false,\r\n      maxHeight: 275,\r\n      name: this.elementName,\r\n      single: true,\r\n      textTemplate: ($elm) => {\r\n        // render HTML code or not, by default it is sanitized and won't be rendered\r\n        const isRenderHtmlEnabled = this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.enableRenderHtml || false;\r\n        return isRenderHtmlEnabled ? $elm.text() : $elm.html();\r\n      },\r\n      onClose: () => this.save(),\r\n    };\r\n\r\n    if (isMultipleSelect) {\r\n      libOptions.single = false;\r\n      libOptions.addTitle = true;\r\n      libOptions.okButton = true;\r\n      libOptions.selectAllDelimiter = ['', ''];\r\n\r\n      if (this._translate && this._translate.instant && this._translate.currentLang) {\r\n        const translationPrefix = getTranslationPrefix(this.gridOptions);\r\n        libOptions.countSelected = this._translate.instant(`${translationPrefix}X_OF_Y_SELECTED`);\r\n        libOptions.allSelected = this._translate.instant(`${translationPrefix}ALL_SELECTED`);\r\n        libOptions.selectAllText = this._translate.instant(`${translationPrefix}SELECT_ALL`);\r\n        libOptions.okButtonText = this._translate.instant(`${translationPrefix}OK`);\r\n      } else {\r\n        libOptions.countSelected = this._locales && this._locales.TEXT_X_OF_Y_SELECTED;\r\n        libOptions.allSelected = this._locales && this._locales.TEXT_ALL_SELECTED;\r\n        libOptions.selectAllText = this._locales && this._locales.TEXT_SELECT_ALL;\r\n        libOptions.okButtonText = this._locales && this._locales.TEXT_OK;\r\n      }\r\n    }\r\n\r\n    // assign the multiple select lib options\r\n    this.defaultOptions = libOptions;\r\n\r\n    this.init();\r\n  }\r\n\r\n  /** Get the Collection */\r\n  get collection(): SelectOption[] {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collection || [];\r\n  }\r\n\r\n\r\n  /** Getter for the Collection Options */\r\n  get collectionOptions(): CollectionOption | undefined {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionOptions;\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args.column;\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): ColumnEditor | undefined {\r\n    return this.columnDef && this.columnDef.internalColumnEditor;\r\n  }\r\n\r\n  /** Get the Editor DOM Element */\r\n  get editorDomElement(): any {\r\n    return this.$editorElm;\r\n  }\r\n\r\n  /** Getter for the Custom Structure if exist */\r\n  protected get customStructure(): CollectionCustomStructure | undefined {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.customStructure;\r\n  }\r\n\r\n  get hasAutoCommitEdit() {\r\n    return this.grid.getOptions().autoCommitEdit;\r\n  }\r\n\r\n  /**\r\n   * The current selected values (multiple select) from the collection\r\n   */\r\n  get currentValues() {\r\n    const elmValue = this.$editorElm.val();\r\n\r\n    // collection of strings, just return the filtered string that are equals\r\n    if (this.collection.every(x => typeof x === 'string')) {\r\n      return this.collection.filter(c => elmValue.indexOf(c.toString()) !== -1);\r\n    }\r\n\r\n    // collection of label/value pair\r\n    const separatorBetweenLabels = this.collectionOptions && this.collectionOptions.separatorBetweenTextLabels || '';\r\n    const isIncludingPrefixSuffix = this.collectionOptions && this.collectionOptions.includePrefixSuffixToSelectedValues || false;\r\n\r\n    return this.collection\r\n      .filter(c => elmValue.indexOf(c.hasOwnProperty(this.valueName) && c[this.valueName] !== null && c[this.valueName].toString()) !== -1)\r\n      .map(c => {\r\n        const labelText = c[this.valueName];\r\n        let prefixText = c[this.labelPrefixName] || '';\r\n        let suffixText = c[this.labelSuffixName] || '';\r\n\r\n        // when it's a complex object, then pull the object name only, e.g.: \"user.firstName\" => \"user\"\r\n        const fieldName = this.columnDef && this.columnDef.field;\r\n\r\n        // is the field a complex object, \"address.streetNumber\"\r\n        const isComplexObject = fieldName && fieldName.indexOf('.') > 0;\r\n        const serializeComplexValueFormat = this.columnEditor && this.columnEditor.serializeComplexValueFormat || 'object';\r\n\r\n        if (isComplexObject && typeof c === 'object' && serializeComplexValueFormat === 'object') {\r\n          return c;\r\n        }\r\n\r\n        // also translate prefix/suffix if enableTranslateLabel is true and text is a string\r\n        prefixText = (this.enableTranslateLabel && this._translate && prefixText && typeof prefixText === 'string') ? this._translate.instant(prefixText || ' ') : prefixText;\r\n        suffixText = (this.enableTranslateLabel && this._translate && suffixText && typeof suffixText === 'string') ? this._translate.instant(suffixText || ' ') : suffixText;\r\n\r\n        if (isIncludingPrefixSuffix) {\r\n          const tmpOptionArray = [prefixText, labelText, suffixText].filter((text) => text); // add to a temp array for joining purpose and filter out empty text\r\n          return tmpOptionArray.join(separatorBetweenLabels);\r\n        }\r\n        return labelText;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * The current selected values (single select) from the collection\r\n   */\r\n  get currentValue() {\r\n    const elmValue = this.$editorElm.val();\r\n\r\n    // collection of strings, just return the filtered string that are equals\r\n    if (this.collection.every(x => typeof x === 'string')) {\r\n      return findOrDefault(this.collection, (c: any) => c.toString() === elmValue);\r\n    }\r\n\r\n    // collection of label/value pair\r\n    const separatorBetweenLabels = this.collectionOptions && this.collectionOptions.separatorBetweenTextLabels || '';\r\n    const isIncludingPrefixSuffix = this.collectionOptions && this.collectionOptions.includePrefixSuffixToSelectedValues || false;\r\n    const itemFound = findOrDefault(this.collection, (c: any) => c.hasOwnProperty(this.valueName) && c[this.valueName] !== null && c[this.valueName].toString() === elmValue);\r\n\r\n    // is the field a complex object, \"address.streetNumber\"\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n    const isComplexObject = fieldName && fieldName.indexOf('.') > 0;\r\n    const serializeComplexValueFormat = this.columnEditor && this.columnEditor.serializeComplexValueFormat || 'object';\r\n\r\n    if (isComplexObject && typeof itemFound === 'object' && serializeComplexValueFormat === 'object') {\r\n      return itemFound;\r\n    } else if (itemFound && itemFound.hasOwnProperty(this.valueName)) {\r\n      const labelText = itemFound[this.valueName];\r\n\r\n      if (isIncludingPrefixSuffix) {\r\n        let prefixText = itemFound[this.labelPrefixName] || '';\r\n        let suffixText = itemFound[this.labelSuffixName] || '';\r\n\r\n        // also translate prefix/suffix if enableTranslateLabel is true and text is a string\r\n        prefixText = (this.enableTranslateLabel && this._translate && prefixText && typeof prefixText === 'string') ? this._translate.instant(prefixText || ' ') : prefixText;\r\n        suffixText = (this.enableTranslateLabel && this._translate && suffixText && typeof suffixText === 'string') ? this._translate.instant(suffixText || ' ') : suffixText;\r\n\r\n        // add to a temp array for joining purpose and filter out empty text\r\n        const tmpOptionArray = [prefixText, labelText, suffixText].filter((text) => text);\r\n        return tmpOptionArray.join(separatorBetweenLabels);\r\n      }\r\n\r\n      return labelText;\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator | undefined {\r\n    return this.columnEditor!.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init() {\r\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || (!this.columnDef.internalColumnEditor.collection && !this.columnDef.internalColumnEditor.collectionAsync)) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" (or \"collectionAsync\") inside Column Definition Editor for the MultipleSelect/SingleSelect Editor to work correctly.\r\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\r\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\r\n    }\r\n\r\n    this._collectionService = new CollectionService(this._translate);\r\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\r\n    this.labelName = this.customStructure && this.customStructure.label || 'label';\r\n    this.labelPrefixName = this.customStructure && this.customStructure.labelPrefix || 'labelPrefix';\r\n    this.labelSuffixName = this.customStructure && this.customStructure.labelSuffix || 'labelSuffix';\r\n    this.optionLabel = this.customStructure && this.customStructure.optionLabel || 'value';\r\n    this.valueName = this.customStructure && this.customStructure.value || 'value';\r\n\r\n    if (this.enableTranslateLabel && (!this._translate || typeof this._translate.instant !== 'function')) {\r\n      throw new Error('[Angular-Slickgrid] requires \"ngx-translate\" to be installed and configured when the grid option \"enableTranslate\" is enabled.');\r\n    }\r\n\r\n    // always render the Select (dropdown) DOM element, even if user passed a \"collectionAsync\",\r\n    // if that is the case, the Select will simply be without any options but we still have to render it (else SlickGrid would throw an error)\r\n    this.renderDomElement(this.collection);\r\n  }\r\n\r\n  getValue(): any | any[] {\r\n    return (this.isMultipleSelect) ? this.currentValues : this.currentValue;\r\n  }\r\n\r\n  setValue(value: any | any[]) {\r\n    if (this.isMultipleSelect && Array.isArray(value)) {\r\n      this.loadMultipleValues(value);\r\n    } else {\r\n      this.loadSingleValue(value);\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    if (this.$editorElm && typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('close');\r\n    }\r\n  }\r\n\r\n  show() {\r\n    if (this.$editorElm && typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('open');\r\n    }\r\n  }\r\n\r\n  applyValue(item: any, state: any): void {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n    const fieldType = this.columnDef && this.columnDef.type;\r\n    let newValue = state;\r\n\r\n    // when the provided user defined the column field type as a possible number then try parsing the state value as that\r\n    if (fieldType === FieldType.number || fieldType === FieldType.integer || fieldType === FieldType.boolean) {\r\n      newValue = parseFloat(state);\r\n    }\r\n\r\n    // when set as a multiple selection, we can assume that the 3rd party lib multiple-select will return a CSV string\r\n    // we need to re-split that into an array to be the same as the original column\r\n    if (this.isMultipleSelect && typeof state === 'string' && state.indexOf(',') >= 0) {\r\n      newValue = state.split(',');\r\n    }\r\n\r\n    // is the field a complex object, \"user.address.streetNumber\"\r\n    const isComplexObject = fieldName && fieldName.indexOf('.') > 0;\r\n\r\n    // validate the value before applying it (if not valid we'll set an empty string)\r\n    const validation = this.validate(newValue);\r\n    newValue = (validation && validation.valid) ? newValue : '';\r\n\r\n    // set the new value to the item datacontext\r\n    if (isComplexObject) {\r\n      // when it's a complex object, user could override the object path (where the editable object is located)\r\n      // else we use the path provided in the Field Column Definition\r\n      const objectPath = this.columnEditor && this.columnEditor.complexObjectPath || fieldName;\r\n      setDeepValue(item, objectPath, newValue);\r\n    } else {\r\n      item[fieldName] = newValue;\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    // when autoCommitEdit is enabled, we might end up leave the editor without it being saved, if so do call a save before destroying\r\n    // this mainly happens doing a blur or focusing on another cell in the grid (it won't come here if we click outside the grid, in the body)\r\n    if (this.$editorElm && this.hasAutoCommitEdit && this.isValueChanged() && !this._isDisposing) {\r\n      this._isDisposing = true; // change destroying flag to avoid infinite loop\r\n      this.save(true);\r\n    }\r\n\r\n    this._isDisposing = true;\r\n    if (this.$editorElm && typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('destroy');\r\n      this.$editorElm.remove();\r\n      const elementClassName = this.elementName.toString().replace('.', '\\\\.'); // make sure to escape any dot \".\" from CSS class to avoid console error\r\n      $(`[name=${elementClassName}].ms-drop`).remove();\r\n      this.$editorElm.remove();\r\n      this.$editorElm = null;\r\n    }\r\n  }\r\n\r\n  loadValue(item: any): void {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n\r\n    if (item && fieldName !== undefined) {\r\n      // is the field a complex object, \"address.streetNumber\"\r\n      const isComplexObject = fieldName && fieldName.indexOf('.') > 0;\r\n\r\n      // when it's a complex object, user could override the object path (where the editable object is located)\r\n      // else we use the path provided in the Field Column Definition\r\n      const objectPath = this.columnEditor && this.columnEditor.complexObjectPath || fieldName;\r\n      const currentValue = (isComplexObject) ? getDescendantProperty(item, objectPath) : item[fieldName];\r\n      const value = (isComplexObject && currentValue && currentValue.hasOwnProperty(this.valueName)) ? currentValue[this.valueName] : currentValue;\r\n\r\n      if (this.isMultipleSelect && Array.isArray(value)) {\r\n        this.loadMultipleValues(value);\r\n      } else {\r\n        this.loadSingleValue(value);\r\n      }\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  loadMultipleValues(currentValues: any[]) {\r\n    // convert to string because that is how the DOM will return these values\r\n    if (Array.isArray(currentValues)) {\r\n      // keep the default values in memory for references\r\n      this.originalValue = currentValues.map((i: any) => i);\r\n\r\n      // compare all the array values but as string type since multiple-select always return string\r\n      const currentStringValues = currentValues.map((i: any) => i.toString());\r\n      this.$editorElm.find('option').each((i: number, $e: any) => {\r\n        $e.selected = (currentStringValues.indexOf($e.value) !== -1);\r\n      });\r\n    }\r\n  }\r\n\r\n  loadSingleValue(currentValue: any) {\r\n    // keep the default value in memory for references\r\n    this.originalValue = typeof currentValue === 'number' ? `${currentValue}` : currentValue;\r\n    this.$editorElm.val(currentValue);\r\n\r\n    // make sure the prop exists first\r\n    this.$editorElm.find('option').each((i: number, $e: any) => {\r\n      // check equality after converting originalValue to string since the DOM value will always be of type string\r\n      $e.selected = (`${currentValue}` === $e.value);\r\n    });\r\n  }\r\n\r\n  save(forceCommitCurrentEdit = false) {\r\n    const validation = this.validate();\r\n    const isValid = validation?.valid ?? false;\r\n\r\n    if ((!this._isDisposing || forceCommitCurrentEdit) && this.hasAutoCommitEdit && isValid) {\r\n      // do not use args.commitChanges() as this sets the focus to the next row.\r\n      // also the select list will stay shown when clicking off the grid\r\n      this.grid.getEditorLock().commitCurrentEdit();\r\n    } else {\r\n      this.args.commitChanges();\r\n    }\r\n  }\r\n\r\n  serializeValue(): any | any[] {\r\n    return (this.isMultipleSelect) ? this.currentValues : this.currentValue;\r\n  }\r\n\r\n  focus() {\r\n    if (this.$editorElm && this.$editorElm.multipleSelect) {\r\n      this.$editorElm.multipleSelect('focus');\r\n    }\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    const valueSelection = this.$editorElm?.multipleSelect('getSelects');\r\n    if (this.isMultipleSelect) {\r\n      const isEqual = dequal(valueSelection, this.originalValue);\r\n      return !isEqual;\r\n    }\r\n    const value = Array.isArray(valueSelection) && valueSelection.length > 0 ? valueSelection[0] : undefined;\r\n    return value !== this.originalValue;\r\n  }\r\n\r\n  validate(inputValue?: any): EditorValidatorOutput {\r\n    const isRequired = this.columnEditor!.required;\r\n    const elmValue = (inputValue !== undefined) ? inputValue : this.$editorElm && this.$editorElm.val && this.$editorElm.val();\r\n    const errorMsg = this.columnEditor!.errorMessage;\r\n\r\n    if (this.validator) {\r\n      const value = (inputValue !== undefined) ? inputValue : (this.isMultipleSelect ? this.currentValues : this.currentValue);\r\n      return this.validator(value, this.args);\r\n    }\r\n\r\n    // by default the editor is almost always valid (except when it's required but not provided)\r\n    if (isRequired && (elmValue === '' || (Array.isArray(elmValue) && elmValue.length === 0))) {\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || Constants.VALIDATION_REQUIRED_FIELD\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n\r\n  //\r\n  // protected functions\r\n  // ------------------\r\n\r\n  /**\r\n   * user might want to filter certain items of the collection\r\n   * @param inputCollection\r\n   * @return outputCollection filtered and/or sorted collection\r\n   */\r\n  protected filterCollection(inputCollection: any[]) {\r\n    let outputCollection = inputCollection;\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnEditor && this.columnEditor.collectionFilterBy) {\r\n      const filterBy = this.columnEditor.collectionFilterBy;\r\n      const filterCollectionBy = this.columnEditor.collectionOptions && this.columnEditor.collectionOptions.filterResultAfterEachPass || null;\r\n      outputCollection = this._collectionService.filterCollection(outputCollection, filterBy, filterCollectionBy);\r\n    }\r\n\r\n    return outputCollection;\r\n  }\r\n\r\n  /**\r\n   * user might want to sort the collection in a certain way\r\n   * @param inputCollection\r\n   * @return outputCollection sorted collection\r\n   */\r\n  protected sortCollection(inputCollection: any[]) {\r\n    let outputCollection = inputCollection;\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\r\n      outputCollection = this._collectionService.sortCollection(this.columnDef, outputCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    return outputCollection;\r\n  }\r\n\r\n  protected renderDomElement(inputCollection: any[]) {\r\n    if (!Array.isArray(inputCollection) && this.collectionOptions && (this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty)) {\r\n      const collectionInsideObjectProperty = this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty;\r\n      inputCollection = getDescendantProperty(inputCollection, collectionInsideObjectProperty as string);\r\n    }\r\n    if (!Array.isArray(inputCollection)) {\r\n      throw new Error('The \"collection\" passed to the Select Editor is not a valid array.');\r\n    }\r\n\r\n    // make a copy of the collection so that we don't impact SelectFilter, this could happen when calling \"addBlankEntry\" or \"addCustomFirstEntry\"\r\n    let collection: any[] = [];\r\n    if (inputCollection.length > 0) {\r\n      collection = [...inputCollection];\r\n    }\r\n\r\n    // user can optionally add a blank entry at the beginning of the collection\r\n    // make sure however that it wasn't added more than once\r\n    if (this.collectionOptions && this.collectionOptions.addBlankEntry && Array.isArray(collection) && collection.length > 0 && collection[0][this.valueName] !== '') {\r\n      collection.unshift(this.createBlankEntry());\r\n    }\r\n\r\n    // user can optionally add his own custom entry at the beginning of the collection\r\n    if (this.collectionOptions && this.collectionOptions.addCustomFirstEntry && Array.isArray(collection) && collection.length > 0 && collection[0][this.valueName] !== this.collectionOptions.addCustomFirstEntry[this.valueName]) {\r\n      collection.unshift(this.collectionOptions && this.collectionOptions.addCustomFirstEntry);\r\n    }\r\n\r\n    // user can optionally add his own custom entry at the end of the collection\r\n    if (this.collectionOptions && this.collectionOptions.addCustomLastEntry && Array.isArray(collection) && collection.length > 0) {\r\n      const lastCollectionIndex = collection.length - 1;\r\n      if (collection[lastCollectionIndex][this.valueName] !== this.collectionOptions.addCustomLastEntry[this.valueName]) {\r\n        collection.push(this.collectionOptions && this.collectionOptions.addCustomLastEntry);\r\n      }\r\n    }\r\n\r\n    let newCollection = collection || [];\r\n\r\n    // user might want to filter and/or sort certain items of the collection\r\n    newCollection = this.filterCollection(newCollection);\r\n    newCollection = this.sortCollection(newCollection);\r\n\r\n    // user could also override the collection\r\n    if (this.columnEditor && this.columnEditor.collectionOverride) {\r\n      newCollection = this.columnEditor.collectionOverride(newCollection, { column: this.columnDef, dataContext: this.args.item, grid: this.grid });\r\n    }\r\n\r\n    // step 1, create HTML string template\r\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    // step 2, create the DOM Element of the editor\r\n    // also subscribe to the onClose event\r\n    this.createDomElement(editorTemplate);\r\n  }\r\n\r\n  protected buildTemplateHtmlString(collection: any[]) {\r\n    let options = '';\r\n    const fieldId = this.columnDef && this.columnDef.id;\r\n    const separatorBetweenLabels = this.collectionOptions && this.collectionOptions.separatorBetweenTextLabels || '';\r\n    const isRenderHtmlEnabled = this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.enableRenderHtml || false;\r\n    const sanitizedOptions = this.gridOptions && this.gridOptions.sanitizeHtmlOptions || {};\r\n\r\n    // collection could be an Array of Strings OR Objects\r\n    if (collection.every(x => typeof x === 'string')) {\r\n      collection.forEach((option: string) => {\r\n        options += `<option value=\"${option}\" label=\"${option}\">${option}</option>`;\r\n      });\r\n    } else {\r\n      // array of objects will require a label/value pair unless a customStructure is passed\r\n      collection.forEach((option: SelectOption) => {\r\n        if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n          throw new Error(`[select-editor] A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example: { collection: [ { value: '1', label: 'One' } ])`);\r\n        }\r\n        const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n        const labelText = (option.labelKey || ((this.enableTranslateLabel && this._translate) && labelKey)) ? this._translate && this._translate.instant(labelKey || ' ') : labelKey;\r\n        let prefixText = option[this.labelPrefixName] || '';\r\n        let suffixText = option[this.labelSuffixName] || '';\r\n        let optionLabel = option[this.optionLabel] || '';\r\n        if (optionLabel && optionLabel.toString) {\r\n          optionLabel = optionLabel.toString().replace(/\\\"/g, '\\''); // replace double quotes by single quotes to avoid interfering with regular html\r\n        }\r\n\r\n        // also translate prefix/suffix if enableTranslateLabel is true and text is a string\r\n        prefixText = (this.enableTranslateLabel && this._translate && prefixText && typeof prefixText === 'string') ? this._translate.instant(prefixText || ' ') : prefixText;\r\n        suffixText = (this.enableTranslateLabel && this._translate && suffixText && typeof suffixText === 'string') ? this._translate.instant(suffixText || ' ') : suffixText;\r\n        optionLabel = (this.enableTranslateLabel && this._translate && optionLabel && typeof optionLabel === 'string') ? this._translate.instant(optionLabel || ' ') : optionLabel;\r\n\r\n        // add to a temp array for joining purpose and filter out empty text\r\n        const tmpOptionArray = [prefixText, labelText, suffixText].filter(text => (text !== undefined && text !== ''));\r\n        let optionText = tmpOptionArray.join(separatorBetweenLabels);\r\n\r\n        // if user specifically wants to render html text, he needs to opt-in else it will stripped out by default\r\n        // also, the 3rd party lib will saninitze any html code unless it's encoded, so we'll do that\r\n        if (isRenderHtmlEnabled) {\r\n          // sanitize any unauthorized html tags like script and others\r\n          // for the remaining allowed tags we'll permit all attributes\r\n          const sanitizedText = (DOMPurify.sanitize(optionText, sanitizedOptions) || '').toString();\r\n          optionText = htmlEncode(sanitizedText);\r\n        }\r\n\r\n        // html text of each select option\r\n        let optionValue = option[this.valueName];\r\n        if (optionValue === undefined || optionValue === null) {\r\n          optionValue = '';\r\n        }\r\n        options += `<option value=\"${optionValue}\" label=\"${optionLabel}\">${optionText}</option>`;\r\n      });\r\n    }\r\n\r\n    return `<select id=\"${this.elementName}\" class=\"ms-filter search-filter editor-${fieldId}\" ${this.isMultipleSelect ? 'multiple=\"multiple\"' : ''}>${options}</select>`;\r\n  }\r\n\r\n  /** Create a blank entry that can be added to the collection. It will also reuse the same customStructure if need be */\r\n  protected createBlankEntry() {\r\n    const blankEntry = {\r\n      [this.labelName]: '',\r\n      [this.valueName]: ''\r\n    };\r\n    if (this.labelPrefixName) {\r\n      blankEntry[this.labelPrefixName] = '';\r\n    }\r\n    if (this.labelSuffixName) {\r\n      blankEntry[this.labelSuffixName] = '';\r\n    }\r\n    return blankEntry;\r\n  }\r\n\r\n  /** Build the template HTML string */\r\n  protected createDomElement(editorTemplate: string) {\r\n    this.$editorElm = $(editorTemplate);\r\n\r\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\r\n      this.$editorElm.appendTo(this.args.container);\r\n    }\r\n\r\n    // add placeholder when found\r\n    const placeholder = this.columnEditor && this.columnEditor.placeholder || '';\r\n    this.defaultOptions.placeholder = placeholder || '';\r\n\r\n    if (typeof this.$editorElm.multipleSelect === 'function') {\r\n      const elementOptions = (this.columnDef.internalColumnEditor) ? this.columnDef.internalColumnEditor.elementOptions : {};\r\n      const editorOptions = (this.columnDef && this.columnDef.internalColumnEditor) ? this.columnDef.internalColumnEditor.editorOptions : {};\r\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions, ...editorOptions };\r\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\r\n      setTimeout(() => this.show());\r\n    }\r\n  }\r\n\r\n  // refresh the jquery object because the selected checkboxes were already set\r\n  // prior to this method being called\r\n  protected refresh() {\r\n    if (typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('refresh');\r\n    }\r\n  }\r\n}\r\n","import { AutoCompleteEditor } from './autoCompleteEditor';\r\nimport { CheckboxEditor } from './checkboxEditor';\r\nimport { DateEditor } from './dateEditor';\r\nimport { DualInputEditor } from './dualInputEditor';\r\nimport { FloatEditor } from './floatEditor';\r\nimport { IntegerEditor } from './integerEditor';\r\nimport { LongTextEditor } from './longTextEditor';\r\nimport { MultipleSelectEditor } from './multipleSelectEditor';\r\nimport { SingleSelectEditor } from './singleSelectEditor';\r\nimport { SliderEditor } from './sliderEditor';\r\nimport { TextEditor } from './textEditor';\r\n\r\nexport const Editors = {\r\n  /** AutoComplete Editor (using jQuery UI autocomplete feature) */\r\n  autoComplete: AutoCompleteEditor,\r\n\r\n  /** Checkbox Editor (uses native checkbox DOM element) */\r\n  checkbox: CheckboxEditor,\r\n\r\n  /** Date Picker Editor (which uses 3rd party lib \"flatpickr\") */\r\n  date: DateEditor,\r\n\r\n  /** Dual Input Editor, default input type is text but it could be (integer/float/number/password/text) */\r\n  dualInput: DualInputEditor,\r\n\r\n  /** Float Number Editor */\r\n  float: FloatEditor,\r\n\r\n  /** Integer Editor */\r\n  integer: IntegerEditor,\r\n\r\n  /** Long Text Editor (uses a textarea) */\r\n  longText: LongTextEditor,\r\n\r\n  /** Multiple Select editor (which uses 3rd party lib \"multiple-select.js\") */\r\n  multipleSelect: MultipleSelectEditor,\r\n\r\n  /** Single Select editor (which uses 3rd party lib \"multiple-select.js\") */\r\n  singleSelect: SingleSelectEditor,\r\n\r\n  /** Slider Editor */\r\n  slider: SliderEditor,\r\n\r\n  /** Text Editor */\r\n  text: TextEditor\r\n};\r\n","import { Constants } from './../constants';\r\nimport { Column, ColumnEditor, Editor, EditorArguments, EditorValidator, EditorValidatorOutput } from './../models/index';\r\nimport { getDescendantProperty, setDeepValue } from '../services/utilities';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class CheckboxEditor implements Editor {\r\n  protected _$input: any;\r\n  originalValue!: boolean;\r\n\r\n  /** SlickGrid Grid object */\r\n  grid: any;\r\n\r\n  constructor(protected args: EditorArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args.column;\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): ColumnEditor {\r\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Editor DOM Element */\r\n  get editorDomElement(): any {\r\n    return this._$input;\r\n  }\r\n\r\n  get hasAutoCommitEdit() {\r\n    return this.args.grid.getOptions().autoCommitEdit;\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator | undefined {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    const fieldId = this.columnDef && this.columnDef.id;\r\n    const title = this.columnEditor && this.columnEditor.title || '';\r\n\r\n    this._$input = $(`<input type=\"checkbox\" value=\"true\" class=\"editor-checkbox editor-${fieldId}\" title=\"${title}\" />`);\r\n    this._$input.appendTo(this.args.container);\r\n    this.focus();\r\n\r\n    // make the checkbox editor act like a regular checkbox that commit the value on click\r\n    if (this.hasAutoCommitEdit) {\r\n      this._$input.click(() => this.save());\r\n    }\r\n  }\r\n\r\n  destroy(): void {\r\n    this._$input.remove();\r\n    this._$input = null;\r\n  }\r\n\r\n  focus(): void {\r\n    this._$input.focus();\r\n  }\r\n\r\n  /** pre-click, when enabled, will simply toggle the checkbox without requiring to double-click */\r\n  preClick() {\r\n    this._$input.prop('checked', !this._$input.prop('checked'));\r\n  }\r\n\r\n  getValue() {\r\n    return this._$input.prop('checked');\r\n  }\r\n\r\n  setValue(val: boolean | string) {\r\n    const isChecked = val ? true : false;\r\n    this._$input.prop('checked', isChecked);\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n    const isComplexObject = fieldName && fieldName.indexOf('.') > 0; // is the field a complex object, \"address.streetNumber\"\r\n\r\n    // validate the value before applying it (if not valid we'll set an empty string)\r\n    const validation = this.validate(state);\r\n    const newValue = (validation && validation.valid) ? state : '';\r\n\r\n    // set the new value to the item datacontext\r\n    if (isComplexObject) {\r\n      setDeepValue(item, fieldName, newValue);\r\n    } else {\r\n      item[fieldName] = newValue;\r\n    }\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (this.serializeValue() !== this.originalValue);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n\r\n    if (item && fieldName !== undefined) {\r\n      // is the field a complex object, \"address.streetNumber\"\r\n      const isComplexObject = fieldName && fieldName.indexOf('.') > 0;\r\n      const value = (isComplexObject) ? getDescendantProperty(item, fieldName) : item[fieldName];\r\n\r\n      this.originalValue = value;\r\n      if (this.originalValue) {\r\n        this._$input.prop('checked', true);\r\n      } else {\r\n        this._$input.prop('checked', false);\r\n      }\r\n    }\r\n  }\r\n\r\n  save() {\r\n    const validation = this.validate();\r\n    const isValid = (validation && validation.valid) || false;\r\n\r\n    if (this.hasAutoCommitEdit && isValid) {\r\n      // do not use args.commitChanges() as this sets the focus to the next row.\r\n      // also the select list will stay shown when clicking off the grid\r\n      this.grid.getEditorLock().commitCurrentEdit();\r\n    } else {\r\n      this.args.commitChanges();\r\n    }\r\n  }\r\n\r\n  serializeValue(): boolean {\r\n    return this._$input.prop('checked');\r\n  }\r\n\r\n  validate(inputValue?: any): EditorValidatorOutput {\r\n    const isRequired = this.columnEditor.required;\r\n    const isChecked = (inputValue !== undefined) ? inputValue : this._$input && this._$input.prop && this._$input.prop('checked');\r\n    const errorMsg = this.columnEditor.errorMessage;\r\n\r\n    if (this.validator) {\r\n      return this.validator(isChecked, this.args);\r\n    }\r\n\r\n    // by default the editor is almost always valid (except when it's required but not provided)\r\n    if (isRequired && !isChecked) {\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || Constants.VALIDATION_REQUIRED_FIELD\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n","import {\r\n  DOMEvent,\r\n  Column,\r\n  ColumnEditor,\r\n  ColumnEditorDualInput,\r\n  Editor,\r\n  EditorArguments,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  GridOption,\r\n  KeyCode,\r\n  SlickEventHandler,\r\n} from '../models/index';\r\nimport { BindingEventService } from '../services/bindingEvent.service';\r\nimport { getDescendantProperty, setDeepValue } from '../services/utilities';\r\nimport { floatValidator, integerValidator, textValidator } from '../editorValidators';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class DualInputEditor implements Editor {\r\n  protected _bindEventService: BindingEventService;\r\n  protected _eventHandler: SlickEventHandler;\r\n  protected _isValueSaveCalled = false;\r\n  protected _lastEventType: string | undefined;\r\n  protected _lastInputKeyEvent?: JQuery.Event;\r\n  protected _leftInput!: HTMLInputElement;\r\n  protected _rightInput!: HTMLInputElement;\r\n  protected _leftFieldName!: string;\r\n  protected _rightFieldName!: string;\r\n  originalLeftValue?: string | number;\r\n  originalRightValue?: string | number;\r\n\r\n  /** SlickGrid Grid object */\r\n  grid: any;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  constructor(protected args: EditorArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-Slickgrid] Something is wrong with this grid, an Editor must always have valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.gridOptions = (this.grid.getOptions() || {}) as GridOption;\r\n    this._eventHandler = new Slick.EventHandler();\r\n    this._bindEventService = new BindingEventService();\r\n    this.init();\r\n    this._eventHandler.subscribe(this.grid.onValidationError, () => this._isValueSaveCalled = true);\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args.column;\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): ColumnEditor {\r\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Editor DOM Element */\r\n  get editorDomElement(): { leftInput: HTMLInputElement, rightInput: HTMLInputElement } {\r\n    return { leftInput: this._leftInput, rightInput: this._rightInput };\r\n  }\r\n\r\n  get editorParams(): ColumnEditorDualInput {\r\n    return this.columnEditor.params || {};\r\n  }\r\n\r\n  get eventHandler(): SlickEventHandler {\r\n    return this._eventHandler;\r\n  }\r\n\r\n  get hasAutoCommitEdit() {\r\n    return this.grid.getOptions().autoCommitEdit;\r\n  }\r\n\r\n  get isValueSaveCalled(): boolean {\r\n    return this._isValueSaveCalled;\r\n  }\r\n\r\n  /** Get the Shared Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator | undefined {\r\n    return (this.columnEditor && this.columnEditor.validator) || (this.columnDef && this.columnDef.validator);\r\n  }\r\n\r\n  init() {\r\n    if (!this.editorParams || !this.editorParams.leftInput || !this.editorParams.leftInput.field || !this.editorParams.rightInput || !this.editorParams.rightInput.field) {\r\n      throw new Error(`[Angular-Slickgrid] Please make sure that your Combo Input Editor has params defined with \"leftInput\" and \"rightInput\" (example: { editor: { model: Editors.comboInput, params: { leftInput: { field: 'firstName' }, { rightSide: { field: 'lastName' } }}}`);\r\n    }\r\n    this._leftFieldName = this.editorParams && this.editorParams.leftInput && this.editorParams.leftInput.field;\r\n    this._rightFieldName = this.editorParams && this.editorParams.rightInput && this.editorParams.rightInput.field;\r\n    this._leftInput = this.createInput('leftInput');\r\n    this._rightInput = this.createInput('rightInput');\r\n\r\n    const containerElm = this.args.container;\r\n    if (containerElm && typeof containerElm.appendChild === 'function') {\r\n      containerElm.appendChild(this._leftInput);\r\n      containerElm.appendChild(this._rightInput);\r\n    }\r\n\r\n    this._leftInput.onkeydown = this.handleKeyDown.bind(this) as unknown as EventListener;\r\n    this._rightInput.onkeydown = this.handleKeyDown.bind(this) as unknown as EventListener;\r\n\r\n    // the lib does not get the focus out event for some reason, so register it here\r\n    if (this.hasAutoCommitEdit) {\r\n      this._bindEventService.bind(this._leftInput, 'focusout', ((event: DOMEvent<HTMLInputElement>) => this.handleFocusOut(event, 'leftInput')) as EventListener);\r\n      this._bindEventService.bind(this._rightInput, 'focusout', ((event: DOMEvent<HTMLInputElement>) => this.handleFocusOut(event, 'rightInput')) as EventListener);\r\n    }\r\n\r\n    setTimeout(() => this._leftInput.select(), 50);\r\n  }\r\n\r\n  handleFocusOut(event: DOMEvent<HTMLInputElement>, position: 'leftInput' | 'rightInput') {\r\n    // when clicking outside the editable cell OR when focusing out of it\r\n    const targetClassNames = event.relatedTarget && event.relatedTarget.className || '';\r\n    if (targetClassNames.indexOf('dual-editor') === -1 && this._lastEventType !== 'focusout-right') {\r\n      if (position === 'rightInput' || (position === 'leftInput' && this._lastEventType !== 'focusout-left')) {\r\n        this.save();\r\n      }\r\n    }\r\n    const side = (position === 'leftInput') ? 'left' : 'right';\r\n    this._lastEventType = `${event && event.type}-${side}`;\r\n  }\r\n\r\n  handleKeyDown(event: JQuery.Event) {\r\n    this._lastInputKeyEvent = event;\r\n    if (event.keyCode === KeyCode.LEFT || event.keyCode === KeyCode.RIGHT || event.keyCode === KeyCode.TAB) {\r\n      event.stopImmediatePropagation();\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n    this._bindEventService.unbindAll();\r\n  }\r\n\r\n  createInput(position: 'leftInput' | 'rightInput'): HTMLInputElement {\r\n    const editorSideParams = this.editorParams[position];\r\n    const columnId = this.columnDef && this.columnDef.id;\r\n    const idPropName = this.gridOptions.datasetIdPropertyName || 'id';\r\n    const itemId = this.args && this.args.item && this.args.item[idPropName] || 0;\r\n\r\n    let fieldType: string = editorSideParams.type || 'text';\r\n    if (fieldType === 'float' || fieldType === 'integer') {\r\n      fieldType = 'number';\r\n    }\r\n\r\n    const input = document.createElement('input') as HTMLInputElement;\r\n    input.id = `item-${itemId}-${position}`;\r\n    input.className = `dual-editor-text editor-${columnId} ${position.replace(/input/gi, '')}`;\r\n    if (fieldType === 'readonly') {\r\n      // when the custom type is defined as readonly, we'll make a readonly text input\r\n      input.readOnly = true;\r\n      fieldType = 'text';\r\n    }\r\n    input.type = fieldType || 'text';\r\n    input.setAttribute('role', 'presentation');\r\n    input.autocomplete = 'off';\r\n    input.placeholder = editorSideParams.placeholder || '';\r\n    input.title = editorSideParams.title || '';\r\n    if (fieldType === 'number') {\r\n      input.step = this.getInputDecimalSteps(position);\r\n    }\r\n    return input;\r\n  }\r\n\r\n  focus() {\r\n    // do nothing since we have 2 inputs and we might focus on left/right depending on which is invalid and/or new\r\n  }\r\n\r\n  getValues(): { [fieldName: string]: string | number } {\r\n    const obj = {};\r\n    const leftInputValue = this._leftInput.value;\r\n    const rightInputValue = this._rightInput.value;\r\n    const isLeftInputTypeNumber = (this.editorParams.leftInput && (this.editorParams.leftInput.type === 'float' || this.editorParams.leftInput.type === 'integer'));\r\n    const isRightInputTypeNumber = (this.editorParams.rightInput && (this.editorParams.rightInput.type === 'float' || this.editorParams.rightInput.type === 'integer'));\r\n    const resultLeftValue = (leftInputValue !== '' && isLeftInputTypeNumber) ? +this._leftInput.value : (leftInputValue || '');\r\n    const resultRightValue = (rightInputValue !== '' && isRightInputTypeNumber) ? +this._rightInput.value : (rightInputValue || '');\r\n    setDeepValue(obj, this._leftFieldName, resultLeftValue);\r\n    setDeepValue(obj, this._rightFieldName, resultRightValue);\r\n\r\n    return obj;\r\n  }\r\n\r\n  setValues(values: Array<number | string>) {\r\n    if (Array.isArray(values) && values.length === 2) {\r\n      this._leftInput.value = `${values[0]}`;\r\n      this._rightInput.value = `${values[1]}`;\r\n    }\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    this.applyValueByPosition(item, state, 'leftInput');\r\n    this.applyValueByPosition(item, state, 'rightInput');\r\n  }\r\n\r\n  applyValueByPosition(item: any, state: any, position: 'leftInput' | 'rightInput') {\r\n    const fieldName = position === 'leftInput' ? this._leftFieldName : this._rightFieldName;\r\n    if (fieldName !== undefined) {\r\n      const isComplexObject = fieldName && fieldName.indexOf('.') > 0; // is the field a complex object, \"address.streetNumber\"\r\n\r\n      let fieldNameToUse = fieldName;\r\n      if (isComplexObject) {\r\n        const complexFieldNames = fieldName.split(/\\.(.*)/);\r\n        fieldNameToUse = (complexFieldNames.length > 1 ? complexFieldNames[1] : complexFieldNames) as string;\r\n      }\r\n\r\n      // validate the value before applying it (if not valid we'll set an empty string)\r\n      const stateValue = isComplexObject ? getDescendantProperty(state, fieldNameToUse) : state[fieldName];\r\n      const validation = this.validate({ position, inputValue: stateValue });\r\n\r\n      // set the new value to the item datacontext\r\n      if (isComplexObject) {\r\n        const newValueFromComplex = getDescendantProperty(state, fieldNameToUse);\r\n        const newValue = (validation && validation.valid) ? newValueFromComplex : '';\r\n        setDeepValue(item, fieldName, newValue);\r\n      } else if (fieldName) {\r\n        item[fieldName] = (validation && validation.valid) ? state[fieldName] : '';\r\n      }\r\n    }\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    const leftElmValue = this._leftInput.value;\r\n    const rightElmValue = this._rightInput.value;\r\n    const leftEditorParams = this.editorParams && this.editorParams.leftInput;\r\n    const rightEditorParams = this.editorParams && this.editorParams.rightInput;\r\n    const lastKeyEvent = this._lastInputKeyEvent && this._lastInputKeyEvent.keyCode;\r\n    if ((leftEditorParams && leftEditorParams.alwaysSaveOnEnterKey || rightEditorParams && rightEditorParams.alwaysSaveOnEnterKey) && lastKeyEvent === KeyCode.ENTER) {\r\n      return true;\r\n    }\r\n    const leftResult = (!(leftElmValue === '' && (this.originalLeftValue === null || this.originalLeftValue === undefined))) && (leftElmValue !== this.originalLeftValue);\r\n    const rightResult = (!(rightElmValue === '' && (this.originalRightValue === null || this.originalRightValue === undefined))) && (rightElmValue !== this.originalRightValue);\r\n    return leftResult || rightResult;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.loadValueByPosition(item, 'leftInput');\r\n    this.loadValueByPosition(item, 'rightInput');\r\n    this._leftInput.select();\r\n  }\r\n\r\n  loadValueByPosition(item: any, position: 'leftInput' | 'rightInput') {\r\n    // is the field a complex object, \"address.streetNumber\"\r\n    const fieldName = (position === 'leftInput') ? this._leftFieldName : this._rightFieldName;\r\n    const originalValuePosition = (position === 'leftInput') ? 'originalLeftValue' : 'originalRightValue';\r\n    const inputVarPosition = (position === 'leftInput') ? '_leftInput' : '_rightInput';\r\n\r\n    if (item && fieldName !== undefined) {\r\n      const isComplexObject = fieldName && fieldName.indexOf('.') > 0;\r\n      const itemValue = (isComplexObject) ? getDescendantProperty(item, fieldName) : (item.hasOwnProperty(fieldName) ? item[fieldName] : '');\r\n      this[originalValuePosition] = itemValue;\r\n      if (this.editorParams[position].type === 'float') {\r\n        const decimalPlaces = this.getDecimalPlaces(position);\r\n        if (decimalPlaces !== null && (this[originalValuePosition] || this[originalValuePosition] === 0) && (+(this as any)[originalValuePosition]).toFixed) {\r\n          this[originalValuePosition] = (+(this as any)[originalValuePosition]).toFixed(decimalPlaces);\r\n        }\r\n      }\r\n      if (this[inputVarPosition]) {\r\n        const originalValue = this[originalValuePosition];\r\n        this[inputVarPosition].value = `${originalValue}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  save() {\r\n    const validation = this.validate();\r\n    const isValid = (validation && validation.valid) || false;\r\n\r\n    if (!this._isValueSaveCalled) {\r\n      if (this.hasAutoCommitEdit && isValid) {\r\n        this.grid.getEditorLock().commitCurrentEdit();\r\n      } else {\r\n        this.args.commitChanges();\r\n      }\r\n      this._isValueSaveCalled = true;\r\n    }\r\n  }\r\n\r\n  serializeValue() {\r\n    const obj = {};\r\n    const leftValue = this.serializeValueByPosition('leftInput');\r\n    const rightValue = this.serializeValueByPosition('rightInput');\r\n\r\n    setDeepValue(obj, this._leftFieldName, leftValue);\r\n    setDeepValue(obj, this._rightFieldName, rightValue);\r\n\r\n    return obj;\r\n  }\r\n\r\n  serializeValueByPosition(position: 'leftInput' | 'rightInput') {\r\n    const elmValue = position === 'leftInput' ? this._leftInput.value : this._rightInput.value;\r\n    if (elmValue === '' || isNaN(+elmValue)) {\r\n      return elmValue;\r\n    }\r\n\r\n    let rtn = parseFloat(elmValue);\r\n    const decPlaces = this.getDecimalPlaces(position);\r\n    if (decPlaces !== null && (rtn || rtn === 0) && rtn.toFixed) {\r\n      rtn = parseFloat(rtn.toFixed(decPlaces));\r\n    }\r\n\r\n    return rtn;\r\n  }\r\n\r\n  getDecimalPlaces(position: 'leftInput' | 'rightInput'): number {\r\n    const defaultDecimalPlaces = 0; // TODO move into a constant\r\n\r\n    // returns the number of fixed decimal places or null\r\n    const positionSide = position === 'leftInput' ? 'leftInput' : 'rightInput';\r\n    const sideParams = this.editorParams[positionSide];\r\n    const rtn: number | undefined = sideParams && sideParams.decimal;\r\n\r\n    if (rtn === undefined) {\r\n      return defaultDecimalPlaces;\r\n    }\r\n    return rtn;\r\n  }\r\n\r\n  getInputDecimalSteps(position: 'leftInput' | 'rightInput'): string {\r\n    const decimals = this.getDecimalPlaces(position);\r\n    let zeroString = '';\r\n    for (let i = 1; i < decimals; i++) {\r\n      zeroString += '0';\r\n    }\r\n\r\n    if (decimals > 0) {\r\n      return `0.${zeroString}1`;\r\n    }\r\n    return '1';\r\n  }\r\n\r\n  validate(inputValidation?: { position: 'leftInput' | 'rightInput', inputValue: any }): EditorValidatorOutput {\r\n    if (inputValidation) {\r\n      const posValidation = this.validateByPosition(inputValidation.position, inputValidation.inputValue);\r\n      if (!posValidation.valid) {\r\n        inputValidation.position === 'leftInput' ? this._leftInput.select() : this._rightInput.select();\r\n        return posValidation;\r\n      }\r\n    } else {\r\n      const leftValidation = this.validateByPosition('leftInput');\r\n      const rightValidation = this.validateByPosition('rightInput');\r\n\r\n      if (!leftValidation.valid) {\r\n        this._leftInput.select();\r\n        return leftValidation;\r\n      }\r\n      if (!rightValidation.valid) {\r\n        this._rightInput.select();\r\n        return rightValidation;\r\n      }\r\n    }\r\n    return { valid: true, msg: '' };\r\n  }\r\n\r\n  validateByPosition(position: 'leftInput' | 'rightInput', inputValue?: any): EditorValidatorOutput {\r\n    const positionEditorParams = this.editorParams[position];\r\n    let currentVal: any = '';\r\n    if (inputValue) {\r\n      currentVal = inputValue;\r\n    } else {\r\n      const input = position === 'leftInput' ? this._leftInput : this._rightInput;\r\n      currentVal = input && input.value;\r\n    }\r\n\r\n    // there are 2 ways of passing a Validator, 1-independent validator on each side, 2-shared validator\r\n    const commonValidator = this.validator;\r\n    currentVal = typeof commonValidator === 'function' ? this.getValues() : currentVal;\r\n    const baseValidatorOptions = {\r\n      editorArgs: this.args,\r\n      errorMessage: positionEditorParams.errorMessage,\r\n      required: positionEditorParams.required,\r\n      validator: typeof commonValidator === 'function' ? commonValidator : positionEditorParams.validator,\r\n    };\r\n\r\n    switch (positionEditorParams.type) {\r\n      case 'float':\r\n        return floatValidator(currentVal, {\r\n          ...baseValidatorOptions,\r\n          decimal: this.getDecimalPlaces(position),\r\n          minValue: positionEditorParams.minValue,\r\n          maxValue: positionEditorParams.maxValue,\r\n          operatorConditionalType: positionEditorParams.operatorConditionalType,\r\n        });\r\n      case 'integer':\r\n        return integerValidator(currentVal, {\r\n          ...baseValidatorOptions,\r\n          minValue: positionEditorParams.minValue,\r\n          maxValue: positionEditorParams.maxValue,\r\n          operatorConditionalType: positionEditorParams.operatorConditionalType,\r\n        });\r\n      case 'text':\r\n      case 'password':\r\n      default:\r\n        return textValidator(currentVal, baseValidatorOptions);\r\n    }\r\n  }\r\n}\r\n","import { Column, ColumnEditor, Editor, EditorArguments, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\r\nimport { setDeepValue, getDescendantProperty } from '../services/utilities';\r\nimport { floatValidator } from '../editorValidators/floatValidator';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\nconst defaultDecimalPlaces = 0;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class FloatEditor implements Editor {\r\n  protected _lastInputEvent?: JQuery.Event;\r\n  protected _$input: any;\r\n  originalValue?: number | string;\r\n\r\n  /** SlickGrid Grid object */\r\n  grid: any;\r\n\r\n  constructor(protected args: EditorArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args.column;\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): ColumnEditor {\r\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Editor DOM Element */\r\n  get editorDomElement(): any {\r\n    return this._$input;\r\n  }\r\n\r\n  get hasAutoCommitEdit() {\r\n    return this.grid && this.grid.getOptions && this.grid.getOptions().autoCommitEdit;\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator | undefined {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init() {\r\n    const columnId = this.columnDef && this.columnDef.id;\r\n    const placeholder = this.columnEditor && this.columnEditor.placeholder || '';\r\n    const title = this.columnEditor && this.columnEditor.title || '';\r\n\r\n    this._$input = $(`<input type=\"number\" role=\"presentation\" autocomplete=\"off\" class=\"editor-text editor-${columnId}\" placeholder=\"${placeholder}\" title=\"${title}\" step=\"${this.getInputDecimalSteps()}\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (event: JQuery.Event) => {\r\n        this._lastInputEvent = event;\r\n        if (event.keyCode === KeyCode.LEFT || event.keyCode === KeyCode.RIGHT) {\r\n          event.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    // the lib does not get the focus out event for some reason\r\n    // so register it here\r\n    if (this.hasAutoCommitEdit) {\r\n      this._$input.on('focusout', () => this.save());\r\n    }\r\n\r\n    setTimeout(() => this.focus(), 50);\r\n  }\r\n\r\n  destroy() {\r\n    if (this._$input) {\r\n      this._$input.off('keydown.nav').remove();\r\n      this._$input = null;\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    if (this._$input) {\r\n      this._$input.focus();\r\n    }\r\n  }\r\n\r\n  getDecimalPlaces(): number {\r\n    // returns the number of fixed decimal places or null\r\n    let rtn = (this.columnEditor.params && this.columnEditor.params.hasOwnProperty('decimalPlaces')) ? this.columnEditor.params.decimalPlaces : undefined;\r\n\r\n    if (rtn === undefined) {\r\n      rtn = defaultDecimalPlaces;\r\n    }\r\n    return (!rtn && rtn !== 0 ? null : rtn);\r\n  }\r\n\r\n  getInputDecimalSteps(): string {\r\n    const decimals = this.getDecimalPlaces();\r\n    let zeroString = '';\r\n    for (let i = 1; i < decimals; i++) {\r\n      zeroString += '0';\r\n    }\r\n\r\n    if (decimals > 0) {\r\n      return `0.${zeroString}1`;\r\n    }\r\n    return '1';\r\n  }\r\n\r\n  getValue(): string {\r\n    return this._$input.val() || '';\r\n  }\r\n\r\n  setValue(value: number | string) {\r\n    this._$input.val(value);\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n    const isComplexObject = fieldName && fieldName.indexOf('.') > 0; // is the field a complex object, \"address.streetNumber\"\r\n\r\n    const validation = this.validate(state);\r\n    const newValue = (validation && validation.valid) ? state : '';\r\n\r\n    // set the new value to the item datacontext\r\n    if (isComplexObject) {\r\n      setDeepValue(item, fieldName, newValue);\r\n    } else {\r\n      item[fieldName] = newValue;\r\n    }\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    const elmValue = this._$input.val();\r\n    const lastKeyEvent = this._lastInputEvent && this._lastInputEvent.keyCode;\r\n    if (this.columnEditor && this.columnEditor.alwaysSaveOnEnterKey && lastKeyEvent === KeyCode.ENTER) {\r\n      return true;\r\n    }\r\n    return (!(elmValue === '' && (this.originalValue === null || this.originalValue === undefined))) && (elmValue !== this.originalValue);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n\r\n\r\n    if (item && fieldName !== undefined) {\r\n      // is the field a complex object, \"address.streetNumber\"\r\n      const isComplexObject = fieldName && fieldName.indexOf('.') > 0;\r\n      const value = (isComplexObject) ? getDescendantProperty(item, fieldName) : item[fieldName];\r\n\r\n      this.originalValue = value;\r\n      const decPlaces = this.getDecimalPlaces();\r\n      if (decPlaces !== null && (this.originalValue || this.originalValue === 0) && (+this.originalValue).toFixed) {\r\n        this.originalValue = (+this.originalValue).toFixed(decPlaces);\r\n      }\r\n      this._$input.val(this.originalValue);\r\n      this._$input.select();\r\n    }\r\n  }\r\n\r\n  save() {\r\n    const validation = this.validate();\r\n    const isValid = (validation && validation.valid) || false;\r\n\r\n    if (this.hasAutoCommitEdit && isValid) {\r\n      // do not use args.commitChanges() as this sets the focus to the next row.\r\n      // also the select list will stay shown when clicking off the grid\r\n      this.grid.getEditorLock().commitCurrentEdit();\r\n    } else {\r\n      this.args.commitChanges();\r\n    }\r\n  }\r\n\r\n  serializeValue() {\r\n    const elmValue = this._$input.val();\r\n    if (elmValue === '' || isNaN(elmValue)) {\r\n      return elmValue;\r\n    }\r\n\r\n    let rtn = parseFloat(elmValue);\r\n    const decPlaces = this.getDecimalPlaces();\r\n    if (decPlaces !== null && (rtn || rtn === 0) && rtn.toFixed) {\r\n      rtn = parseFloat(rtn.toFixed(decPlaces));\r\n    }\r\n\r\n    return rtn;\r\n  }\r\n\r\n  validate(inputValue?: any): EditorValidatorOutput {\r\n    const elmValue = (inputValue !== undefined) ? inputValue : (this._$input && this._$input.val && this._$input.val());\r\n    return floatValidator(elmValue, {\r\n      editorArgs: this.args,\r\n      errorMessage: this.columnEditor.errorMessage,\r\n      decimal: this.getDecimalPlaces(),\r\n      minValue: this.columnEditor.minValue,\r\n      maxValue: this.columnEditor.maxValue,\r\n      operatorConditionalType: this.columnEditor.operatorConditionalType,\r\n      required: this.columnEditor.required,\r\n      validator: this.validator,\r\n    });\r\n  }\r\n}\r\n","import { Column, ColumnEditor, Editor, EditorArguments, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\r\nimport { getDescendantProperty, setDeepValue } from '../services/utilities';\r\nimport { integerValidator } from '../editorValidators/integerValidator';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class IntegerEditor implements Editor {\r\n  protected _lastInputEvent?: JQuery.Event;\r\n  protected _$input: any;\r\n  originalValue?: number | string;\r\n\r\n  /** SlickGrid Grid object */\r\n  grid: any;\r\n\r\n  constructor(protected args: EditorArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args.column;\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): ColumnEditor {\r\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Editor DOM Element */\r\n  get editorDomElement(): any {\r\n    return this._$input;\r\n  }\r\n\r\n  get hasAutoCommitEdit() {\r\n    return this.args && this.grid && this.grid.getOptions && this.grid.getOptions().autoCommitEdit;\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator | undefined {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init() {\r\n    const columnId = this.columnDef && this.columnDef.id;\r\n    const placeholder = this.columnEditor && this.columnEditor.placeholder || '';\r\n    const title = this.columnEditor && this.columnEditor.title || '';\r\n\r\n    this._$input = $(`<input type=\"number\" role=\"presentation\" autocomplete=\"off\" class=\"editor-text editor-${columnId}\" placeholder=\"${placeholder}\" title=\"${title}\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (event: JQuery.Event) => {\r\n        this._lastInputEvent = event;\r\n        if (event.keyCode === KeyCode.LEFT || event.keyCode === KeyCode.RIGHT) {\r\n          event.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    // the lib does not get the focus out event for some reason\r\n    // so register it here\r\n    if (this.hasAutoCommitEdit) {\r\n      this._$input.on('focusout', () => this.save());\r\n    }\r\n\r\n    setTimeout(() => this.focus(), 50);\r\n  }\r\n\r\n  destroy() {\r\n    this._$input.off('keydown.nav focusout').remove();\r\n    this._$input = null;\r\n  }\r\n\r\n  focus() {\r\n    if (this._$input) {\r\n      this._$input.focus();\r\n    }\r\n  }\r\n\r\n  getValue(): string {\r\n    return this._$input.val() || '';\r\n  }\r\n\r\n  setValue(value: number | string) {\r\n    this._$input.val(value);\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n    const isComplexObject = fieldName && fieldName.indexOf('.') > 0; // is the field a complex object, \"address.streetNumber\"\r\n\r\n    // validate the value before applying it (if not valid we'll set an empty string)\r\n    const validation = this.validate(state);\r\n    const newValue = (validation && validation.valid) ? state : '';\r\n\r\n    // set the new value to the item datacontext\r\n    if (isComplexObject) {\r\n      setDeepValue(item, fieldName, newValue);\r\n    } else {\r\n      item[fieldName] = newValue;\r\n    }\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    const elmValue = this._$input.val();\r\n    const lastKeyEvent = this._lastInputEvent && this._lastInputEvent.keyCode;\r\n    if (this.columnEditor && this.columnEditor.alwaysSaveOnEnterKey && lastKeyEvent === KeyCode.ENTER) {\r\n      return true;\r\n    }\r\n    return (!(elmValue === '' && (this.originalValue === null || this.originalValue === undefined))) && (elmValue !== this.originalValue);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n\r\n    if (item && fieldName !== undefined) {\r\n      // is the field a complex object, \"address.streetNumber\"\r\n      const isComplexObject = fieldName && fieldName.indexOf('.') > 0;\r\n      const value = (isComplexObject) ? getDescendantProperty(item, fieldName) : item[fieldName];\r\n\r\n      this.originalValue = (isNaN(value) || value === null || value === undefined) ? value : `${value}`;\r\n      this._$input.val(this.originalValue);\r\n      this._$input.select();\r\n    }\r\n  }\r\n\r\n  save() {\r\n    const validation = this.validate();\r\n    const isValid = (validation && validation.valid) || false;\r\n\r\n    if (this.hasAutoCommitEdit && isValid) {\r\n      // do not use args.commitChanges() as this sets the focus to the next row.\r\n      // also the select list will stay shown when clicking off the grid\r\n      this.grid.getEditorLock().commitCurrentEdit();\r\n    } else {\r\n      this.args.commitChanges();\r\n    }\r\n  }\r\n\r\n  serializeValue() {\r\n    const elmValue = this._$input.val();\r\n    if (elmValue === '' || isNaN(elmValue)) {\r\n      return elmValue;\r\n    }\r\n    const output = isNaN(elmValue) ? elmValue : parseInt(elmValue, 10);\r\n    return isNaN(output) ? elmValue : output;\r\n  }\r\n\r\n  validate(inputValue?: any): EditorValidatorOutput {\r\n    const elmValue = (inputValue !== undefined) ? inputValue : this.getValue();\r\n    return integerValidator(elmValue, {\r\n      editorArgs: this.args,\r\n      errorMessage: this.columnEditor.errorMessage,\r\n      minValue: this.columnEditor.minValue,\r\n      maxValue: this.columnEditor.maxValue,\r\n      operatorConditionalType: this.columnEditor.operatorConditionalType,\r\n      required: this.columnEditor.required,\r\n      validator: this.validator,\r\n    });\r\n  }\r\n}\r\n","import { TranslateService } from '@ngx-translate/core';\r\nimport { Constants } from './../constants';\r\nimport {\r\n  Column,\r\n  ColumnEditor,\r\n  Editor,\r\n  EditorArguments,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  GridOption,\r\n  HtmlElementPosition,\r\n  KeyCode,\r\n  Locale,\r\n  LongTextEditorOption,\r\n} from './../models/index';\r\nimport { getDescendantProperty, getHtmlElementOffset, getTranslationPrefix, setDeepValue } from '../services/utilities';\r\nimport { textValidator } from '../editorValidators/textValidator';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class LongTextEditor implements Editor {\r\n  protected _locales: Locale;\r\n  protected _$textarea: any;\r\n  protected _$currentLengthElm: any;\r\n  protected _$wrapper: any;\r\n  defaultValue: any;\r\n\r\n  /** SlickGrid Grid object */\r\n  grid: any;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** The translate library */\r\n  protected _translate?: TranslateService;\r\n\r\n  constructor(protected args: EditorArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.gridOptions = args.grid && args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    if (options && options.i18n instanceof TranslateService) {\r\n      this._translate = options.i18n;\r\n    }\r\n    // get locales provided by user in forRoot or else use default English locales via the Constants\r\n    this._locales = this.gridOptions && this.gridOptions.locales || Constants.locales;\r\n\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args.column;\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): ColumnEditor {\r\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Editor DOM Element */\r\n  get editorDomElement(): any {\r\n    return this._$textarea;\r\n  }\r\n\r\n  get editorOptions(): LongTextEditorOption {\r\n    return this.columnEditor && this.columnEditor.editorOptions || {};\r\n  }\r\n\r\n  get hasAutoCommitEdit() {\r\n    return this.grid.getOptions().autoCommitEdit;\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator | undefined {\r\n    return (this.columnEditor && this.columnEditor.validator) || (this.columnDef && this.columnDef.validator);\r\n  }\r\n\r\n  init(): void {\r\n    let cancelText = '';\r\n    let saveText = '';\r\n\r\n    if (this._translate && this._translate.instant && this.gridOptions.enableTranslate) {\r\n      const translationPrefix = getTranslationPrefix(this.gridOptions);\r\n      const cancelKey = this.editorOptions.buttonTexts && this.editorOptions.buttonTexts.cancelKey || `${translationPrefix}CANCEL`;\r\n      const saveKey = this.editorOptions.buttonTexts && this.editorOptions.buttonTexts.saveKey || `${translationPrefix}SAVE`;\r\n      cancelText = this._translate.instant(`${translationPrefix}${cancelKey}`);\r\n      saveText = this._translate.instant(`${translationPrefix}${saveKey}`);\r\n    } else {\r\n      cancelText = this.editorOptions.buttonTexts && this.editorOptions.buttonTexts.cancel || this._locales && this._locales.TEXT_CANCEL || 'Cancel';\r\n      saveText = this.editorOptions.buttonTexts && this.editorOptions.buttonTexts.save || this._locales && this._locales.TEXT_SAVE || 'Save';\r\n    }\r\n\r\n    const columnId = this.columnDef && this.columnDef.id;\r\n    const placeholder = this.columnEditor && this.columnEditor.placeholder || '';\r\n    const title = this.columnEditor && this.columnEditor.title || '';\r\n    const maxLength = this.columnEditor && this.columnEditor.maxLength;\r\n    const textAreaCols = this.editorOptions && this.editorOptions.cols || 40;\r\n    const textAreaRows = this.editorOptions && this.editorOptions.rows || 4;\r\n\r\n    const $container = $('body');\r\n    this._$wrapper = $(`<div class=\"slick-large-editor-text editor-${columnId}\" />`).appendTo($container);\r\n    this._$textarea = $(`<textarea hidefocus cols=\"${textAreaCols}\" rows=\"${textAreaRows}\" placeholder=\"${placeholder}\" title=\"${title}\">`).appendTo(this._$wrapper);\r\n\r\n    const editorFooterElm = $(`<div class=\"editor-footer\"/>`);\r\n    const countContainerElm = $(`<span class=\"counter\"/>`);\r\n    this._$currentLengthElm = $(`<span class=\"text-length\">0</span>`);\r\n    this._$currentLengthElm.appendTo(countContainerElm);\r\n    if (maxLength !== undefined) {\r\n      const textMaxLengthElm = $(`<span class=\"separator\">/</span><span class=\"max-length\">${maxLength}</span>`);\r\n      textMaxLengthElm.appendTo(countContainerElm);\r\n    }\r\n\r\n    const cancelBtnElm = $(`<button class=\"btn btn-cancel btn-default btn-xs\">${cancelText}</button>`);\r\n    const saveBtnElm = $(`<button class=\"btn btn-save btn-primary btn-xs\">${saveText}</button>`);\r\n    countContainerElm.appendTo(editorFooterElm);\r\n    cancelBtnElm.appendTo(editorFooterElm);\r\n    saveBtnElm.appendTo(editorFooterElm);\r\n    editorFooterElm.appendTo(this._$wrapper);\r\n\r\n    this._$wrapper.find('.btn-save').on('click', () => this.save());\r\n    this._$wrapper.find('.btn-cancel').on('click', () => this.cancel());\r\n    this._$textarea.on('keydown', this.handleKeyDown.bind(this));\r\n    this._$textarea.on('input', this.handleOnInputChange.bind(this));\r\n    this._$textarea.on('paste', this.handleOnInputChange.bind(this));\r\n\r\n    this.position(this.args && this.args.position);\r\n    this._$textarea.focus().select();\r\n  }\r\n\r\n  cancel() {\r\n    const value = this.defaultValue || '';\r\n    this._$textarea.val(value);\r\n    this._$currentLengthElm.text(value.length);\r\n    if (this.args && this.args.cancelChanges) {\r\n      this.args.cancelChanges();\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    this._$wrapper.hide();\r\n  }\r\n\r\n  show() {\r\n    this._$wrapper.show();\r\n  }\r\n\r\n  destroy() {\r\n    if (this._$textarea) {\r\n      this._$textarea.off('keydown');\r\n      this._$textarea.off('input');\r\n      this._$textarea.off('paste');\r\n    }\r\n    if (this._$wrapper) {\r\n      this._$wrapper.find('.btn-save').off('click');\r\n      this._$wrapper.find('.btn-cancel').off('click');\r\n      this._$wrapper.remove();\r\n    }\r\n    this._$wrapper = null;\r\n  }\r\n\r\n  focus() {\r\n    this._$textarea.focus();\r\n  }\r\n\r\n  getValue(): string {\r\n    return this._$textarea.val();\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this._$textarea.val(val);\r\n    this._$currentLengthElm.text(val.length);\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n    const isComplexObject = fieldName && fieldName.indexOf('.') > 0; // is the field a complex object, \"address.streetNumber\"\r\n\r\n    // validate the value before applying it (if not valid we'll set an empty string)\r\n    const validation = this.validate(state);\r\n    const newValue = (validation && validation.valid) ? state : '';\r\n\r\n    // set the new value to the item datacontext\r\n    if (isComplexObject) {\r\n      setDeepValue(item, fieldName, newValue);\r\n    } else {\r\n      item[fieldName] = newValue;\r\n    }\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    const elmValue = this._$textarea.val();\r\n    return (!(elmValue === '' && (this.defaultValue === null || this.defaultValue === undefined))) && (elmValue !== this.defaultValue);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n\r\n    if (item && fieldName !== undefined) {\r\n      // is the field a complex object, \"address.streetNumber\"\r\n      const isComplexObject = fieldName && fieldName.indexOf('.') > 0;\r\n      const value = (isComplexObject) ? getDescendantProperty(item, fieldName) : item[fieldName];\r\n\r\n      this.defaultValue = value || '';\r\n      this._$textarea.val(this.defaultValue);\r\n      this._$currentLengthElm.text(this.defaultValue.length);\r\n      this._$textarea[0].defaultValue = this.defaultValue;\r\n      this._$textarea.select();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reposition the LongText Editor to be right over the cell, so that it looks like we opened the editor on top of the cell when in reality we just reposition (absolute) over the cell.\r\n   * By default we use an \"auto\" mode which will allow to position the LongText Editor to the best logical position in the window, also when we say position, we are talking about the relative position against the grid cell.\r\n   * We can assume that in 80% of the time the default position is bottom right, the default is \"auto\" but we can also override this and use a specific position.\r\n   * Most of the time positioning of the editor will be to the \"right\" of the cell is ok but if our column is completely on the right side then we'll want to change the position to \"left\" align.\r\n   * Same goes for the top/bottom position, Most of the time positioning the editor to the \"bottom\" but we are clicking on a cell at the bottom of the grid then we might need to reposition to \"top\" instead.\r\n   * NOTE: this only applies to Inline Editing and will not have any effect when using the Composite Editor modal window.\r\n   */\r\n  position(parentPosition: HtmlElementPosition) {\r\n    const containerOffset = getHtmlElementOffset(this.args.container);\r\n    const containerHeight = this.args.container.offsetHeight;\r\n    const containerWidth = this.args.container.offsetWidth;\r\n    const calculatedEditorHeight = this._$wrapper.height() || this.args.position.height;\r\n    const calculatedEditorWidth = this._$wrapper.width() || this.args.position.width;\r\n    const calculatedBodyHeight = document.body.offsetHeight || window.innerHeight; // body height/width might be 0 if so use the window height/width\r\n    const calculatedBodyWidth = document.body.offsetWidth || window.innerWidth;\r\n\r\n    // first defined position will be bottom/right (which will position the editor completely over the cell)\r\n    let newPositionTop = containerOffset !== undefined && containerOffset.top || parentPosition.top || 0;\r\n    let newPositionLeft = containerOffset !== undefined && containerOffset.left || parentPosition.left || 0;\r\n\r\n    // user could explicitely use a \"left\" position (when user knows his column is completely on the right)\r\n    // or when using \"auto\" and we detect not enough available space then we'll position to the \"left\" of the cell\r\n    const position = this.editorOptions && this.editorOptions.position || 'auto';\r\n    if (position === 'left' || (position === 'auto' && (newPositionLeft + calculatedEditorWidth) > calculatedBodyWidth)) {\r\n      const marginRightAdjustment = this.editorOptions && this.editorOptions.marginRight || 15;\r\n      newPositionLeft -= (calculatedEditorWidth - containerWidth + marginRightAdjustment);\r\n    }\r\n\r\n    // do the same calculation/reposition with top/bottom (default is bottom of the cell or in other word starting from the cell going down)\r\n    if (position === 'top' || (position === 'auto' && (newPositionTop + calculatedEditorHeight) > calculatedBodyHeight)) {\r\n      newPositionTop -= (calculatedEditorHeight - containerHeight);\r\n    }\r\n\r\n\r\n    // reposition the editor over the cell (90% of the time this will end up using a position on the \"right\" of the cell)\r\n    this._$wrapper\r\n      .css('top', newPositionTop)\r\n      .css('left', newPositionLeft);\r\n  }\r\n\r\n  save() {\r\n    const validation = this.validate();\r\n    const isValid = (validation && validation.valid) || false;\r\n\r\n    if (this.hasAutoCommitEdit && isValid) {\r\n      // do not use args.commitChanges() as this sets the focus to the next row.\r\n      // also the select list will stay shown when clicking off the grid\r\n      this.grid.getEditorLock().commitCurrentEdit();\r\n    } else {\r\n      this.args.commitChanges();\r\n    }\r\n  }\r\n\r\n  serializeValue() {\r\n    return this._$textarea.val();\r\n  }\r\n\r\n  validate(inputValue?: any): EditorValidatorOutput {\r\n    const elmValue = (inputValue !== undefined) ? inputValue : this._$textarea && this._$textarea.val && this._$textarea.val();\r\n    return textValidator(elmValue, {\r\n      editorArgs: this.args,\r\n      errorMessage: this.columnEditor.errorMessage,\r\n      minLength: this.columnEditor.minLength,\r\n      maxLength: this.columnEditor.maxLength,\r\n      operatorConditionalType: this.columnEditor.operatorConditionalType,\r\n      required: this.columnEditor.required,\r\n      validator: this.validator,\r\n    });\r\n  }\r\n\r\n  // --\r\n  // protected functions\r\n  // ------------------\r\n\r\n  protected handleKeyDown(event: KeyboardEvent) {\r\n    const keyCode = event.keyCode || event.code;\r\n    if (keyCode === KeyCode.ENTER && event.ctrlKey) {\r\n      this.save();\r\n    } else if (keyCode === KeyCode.ESCAPE) {\r\n      event.preventDefault();\r\n      this.cancel();\r\n    } else if (keyCode === KeyCode.TAB && event.shiftKey) {\r\n      event.preventDefault();\r\n      if (this.args && this.grid) {\r\n        this.grid.navigatePrev();\r\n      }\r\n    } else if (keyCode === KeyCode.TAB) {\r\n      event.preventDefault();\r\n      if (this.args && this.grid) {\r\n        this.grid.navigateNext();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** On every input change event, we'll update the current text length counter */\r\n  protected handleOnInputChange(event: JQuery.Event & { originalEvent: any, target: HTMLTextAreaElement }) {\r\n    const maxLength = this.columnEditor && this.columnEditor.maxLength;\r\n\r\n    // when user defines a maxLength, we'll make sure that it doesn't go over this limit if so then truncate the text (disregard the extra text)\r\n    let isTruncated = false;\r\n    if (maxLength) {\r\n      isTruncated = this.truncateText(this._$textarea, maxLength);\r\n    }\r\n\r\n    // if the text get truncated then update text length as maxLength, else update text length with actual\r\n    if (isTruncated) {\r\n      this._$currentLengthElm.text(maxLength);\r\n    } else {\r\n      const newText = event.type === 'paste' ? event.originalEvent.clipboardData.getData('text') : event.target.value;\r\n      this._$currentLengthElm.text(newText.length);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Truncate text if the value is longer than the acceptable max length\r\n   * @param $inputElm - textarea jQuery element\r\n   * @param maxLength - max acceptable length\r\n   * @returns truncated - returns True if it truncated or False otherwise\r\n   */\r\n  protected truncateText($inputElm: JQuery<HTMLTextAreaElement>, maxLength: number): boolean {\r\n    const text = $inputElm.val() + '';\r\n    if (text.length > maxLength) {\r\n      $inputElm.val(text.substring(0, maxLength));\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import { SelectEditor } from './selectEditor';\r\n\r\nexport class MultipleSelectEditor extends SelectEditor {\r\n  /**\r\n   * Initialize the Editor\r\n   */\r\n  constructor(protected args: any) {\r\n    super(args, true);\r\n  }\r\n}\r\n","import { SelectEditor } from './selectEditor';\r\n\r\nexport class SingleSelectEditor extends SelectEditor {\r\n  /**\r\n   * Initialize the Editor\r\n   */\r\n  constructor(protected args: any) {\r\n    super(args, false);\r\n  }\r\n}\r\n","import { Column, Editor, EditorArguments, EditorValidator, EditorValidatorOutput, ColumnEditor } from './../models/index';\r\nimport { getDescendantProperty, setDeepValue } from '../services/utilities';\r\nimport { sliderValidator } from '../editorValidators/sliderValidator';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\nconst DEFAULT_MIN_VALUE = 0;\r\nconst DEFAULT_MAX_VALUE = 100;\r\nconst DEFAULT_STEP = 1;\r\n\r\nexport class SliderEditor implements Editor {\r\n  protected _defaultValue = 0;\r\n  protected _elementRangeInputId!: string;\r\n  protected _elementRangeOutputId!: string;\r\n  protected _$editorElm: any;\r\n  protected _$input: any;\r\n  $sliderNumber: any;\r\n  originalValue: any;\r\n\r\n  /** SlickGrid Grid object */\r\n  grid: any;\r\n\r\n  constructor(protected args: EditorArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args.column;\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): ColumnEditor {\r\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Editor DOM Element */\r\n  get editorDomElement(): any {\r\n    return this._$input;\r\n  }\r\n\r\n  get hasAutoCommitEdit() {\r\n    return this.grid && this.grid.getOptions && this.grid.getOptions().autoCommitEdit;\r\n  }\r\n\r\n  /** Getter for the Editor Generic Params */\r\n  protected get editorParams(): any {\r\n    return this.columnEditor.params || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator | undefined {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    const container = this.args && this.args.container;\r\n\r\n    // define the input & slider number IDs\r\n    const itemId = this.args && this.args.item && this.args.item.id;\r\n    this._elementRangeInputId = `rangeInput_${this.columnDef.id}_${itemId}`;\r\n    this._elementRangeOutputId = `rangeOutput_${this.columnDef.id}_${itemId}`;\r\n\r\n    // create HTML string template\r\n    const editorTemplate = this.buildTemplateHtmlString();\r\n    this._$editorElm = $(editorTemplate);\r\n    this._$input = this._$editorElm.children('input');\r\n    this.$sliderNumber = this._$editorElm.children('div.input-group-addon.input-group-append').children();\r\n    this.focus();\r\n\r\n    // watch on change event\r\n    this._$editorElm\r\n      .appendTo(container)\r\n      .on('mouseup', () => this.save());\r\n\r\n    // if user chose to display the slider number on the right side, then update it every time it changes\r\n    // we need to use both \"input\" and \"change\" event to be all cross-browser\r\n    if (!this.editorParams.hideSliderNumber) {\r\n      this._$editorElm.on('input change', (event: JQuery.Event & { target: HTMLInputElement }) => {\r\n        const value = event && event.target && event.target.value || '';\r\n        if (value) {\r\n          const elements = document.getElementsByClassName(this._elementRangeOutputId);\r\n          if (elements.length) {\r\n            elements[0].innerHTML = event.target.value;\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    this._$input.val(this.originalValue);\r\n    this.args.cancelChanges();\r\n  }\r\n\r\n  destroy() {\r\n    if (this._$editorElm) {\r\n      this._$editorElm.off('input change mouseup touchend').remove();\r\n      this._$editorElm = null;\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this._$editorElm.focus();\r\n  }\r\n\r\n  getValue(): string {\r\n    return this._$input.val() || '';\r\n  }\r\n\r\n  setValue(value: number | string) {\r\n    this._$input.val(value);\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n    const isComplexObject = fieldName && fieldName.indexOf('.') > 0; // is the field a complex object, \"address.streetNumber\"\r\n\r\n    const validation = this.validate(state);\r\n    const newValue = (validation && validation.valid) ? state : '';\r\n\r\n    // set the new value to the item datacontext\r\n    if (isComplexObject) {\r\n      setDeepValue(item, fieldName, newValue);\r\n    } else {\r\n      item[fieldName] = newValue;\r\n    }\r\n  }\r\n\r\n  isValueChanged() {\r\n    const elmValue = this._$input.val();\r\n    return (!(elmValue === '' && this.originalValue === undefined)) && (+elmValue !== this.originalValue);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n\r\n    if (item && fieldName !== undefined) {\r\n      // is the field a complex object, \"address.streetNumber\"\r\n      const isComplexObject = fieldName && fieldName.indexOf('.') > 0;\r\n      let value = (isComplexObject) ? getDescendantProperty(item, fieldName) : (item.hasOwnProperty(fieldName) ? item[fieldName] : this._defaultValue);\r\n\r\n      if (value === '' || value === null || value === undefined) {\r\n        value = this._defaultValue; // load default value when item doesn't have any value\r\n      }\r\n      this.originalValue = +value;\r\n      this._$input.val(value);\r\n      this.$sliderNumber.html(value);\r\n    }\r\n  }\r\n\r\n  save() {\r\n    const validation = this.validate();\r\n    const isValid = (validation && validation.valid) || false;\r\n\r\n    if (this.hasAutoCommitEdit && isValid) {\r\n      // do not use args.commitChanges() as this sets the focus to the next row.\r\n      // also the select list will stay shown when clicking off the grid\r\n      this.grid.getEditorLock().commitCurrentEdit();\r\n    } else {\r\n      this.args.commitChanges();\r\n    }\r\n  }\r\n\r\n  serializeValue() {\r\n    const elmValue: string = this._$input.val();\r\n    return elmValue !== '' ? parseInt(elmValue, 10) : this.originalValue;\r\n  }\r\n\r\n  validate(inputValue?: any): EditorValidatorOutput {\r\n    const elmValue = (inputValue !== undefined) ? inputValue : this._$input && this._$input.val();\r\n    return sliderValidator(elmValue, {\r\n      editorArgs: this.args,\r\n      errorMessage: this.columnEditor.errorMessage,\r\n      minValue: this.columnEditor.minValue,\r\n      maxValue: this.columnEditor.maxValue,\r\n      required: this.columnEditor.required,\r\n      validator: this.validator,\r\n    });\r\n  }\r\n\r\n  //\r\n  // protected functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  protected buildTemplateHtmlString() {\r\n    const fieldId = this.columnDef && this.columnDef.id;\r\n    const title = this.columnEditor && this.columnEditor.title || '';\r\n    const minValue = this.columnEditor.hasOwnProperty('minValue') ? this.columnEditor.minValue : DEFAULT_MIN_VALUE;\r\n    const maxValue = this.columnEditor.hasOwnProperty('maxValue') ? this.columnEditor.maxValue : DEFAULT_MAX_VALUE;\r\n    const defaultValue = this.editorParams.hasOwnProperty('sliderStartValue') ? this.editorParams.sliderStartValue : minValue;\r\n    const step = this.columnEditor.hasOwnProperty('valueStep') ? this.columnEditor.valueStep : DEFAULT_STEP;\r\n    this._defaultValue = defaultValue;\r\n\r\n    if (this.editorParams.hideSliderNumber) {\r\n      return `\r\n      <div class=\"slider-container slider-editor\">\r\n        <input type=\"range\" name=\"${this._elementRangeInputId}\" title=\"${title}\"\r\n          defaultValue=\"${defaultValue}\" value=\"${defaultValue}\"\r\n          min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\r\n          class=\"form-control slider-editor-input editor-${fieldId} range ${this._elementRangeInputId}\" />\r\n      </div>`;\r\n    }\r\n\r\n    return `\r\n      <div class=\"input-group slider-container slider-editor\">\r\n        <input type=\"range\" name=\"${this._elementRangeInputId}\" title=\"${title}\"\r\n          defaultValue=\"${defaultValue}\" value=\"${defaultValue}\"\r\n          min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\r\n          class=\"form-control slider-editor-input editor-${fieldId} range ${this._elementRangeInputId}\" />\r\n        <div class=\"input-group-addon input-group-append slider-value\"><span class=\"input-group-text ${this._elementRangeOutputId}\">${defaultValue}</span></div>\r\n      </div>`;\r\n  }\r\n}\r\n","import { Constants } from '../constants';\r\nimport { EditorValidatorOutput } from '../models/editorValidatorOutput.interface';\r\nimport { EditorValidator } from '../models/editorValidator.interface';\r\n\r\ninterface SliderValidatorOptions {\r\n  editorArgs: any;\r\n  errorMessage?: string;\r\n  minValue?: string | number;\r\n  maxValue?: string | number;\r\n  required?: boolean;\r\n  validator?: EditorValidator;\r\n}\r\n\r\nexport function sliderValidator(inputValue: any, options: SliderValidatorOptions): EditorValidatorOutput {\r\n  const isRequired = options.required;\r\n  const minValue = options.minValue;\r\n  const maxValue = options.maxValue;\r\n  const errorMsg = options.errorMessage;\r\n  const mapValidation = {\r\n    '{{minValue}}': minValue,\r\n    '{{maxValue}}': maxValue\r\n  };\r\n\r\n  if (options.validator) {\r\n    return options.validator(inputValue, options.editorArgs);\r\n  } else if (isRequired && inputValue === '') {\r\n    return {\r\n      valid: false,\r\n      msg: errorMsg || Constants.VALIDATION_REQUIRED_FIELD\r\n    };\r\n  } else if (minValue !== undefined && maxValue !== undefined && inputValue !== null && (inputValue < minValue || inputValue > maxValue)) {\r\n    // when decimal value is bigger than 0, we only accept the decimal values as that value set\r\n    // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\r\n    return {\r\n      valid: false,\r\n      msg: errorMsg || Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => {\r\n        return (mapValidation as any)[matched];\r\n      })\r\n    };\r\n  }\r\n\r\n  return { valid: true, msg: null };\r\n}\r\n","import { Column, ColumnEditor, Editor, EditorArguments, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\r\nimport { getDescendantProperty, setDeepValue } from '../services/utilities';\r\nimport { textValidator } from '../editorValidators/textValidator';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class TextEditor implements Editor {\r\n  protected _lastInputEvent?: JQuery.Event;\r\n  protected _$input: any;\r\n  originalValue?: string;\r\n\r\n  /** SlickGrid Grid object */\r\n  grid: any;\r\n\r\n  constructor(protected args: EditorArguments) {\r\n    if (!args) {\r\n      throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args.column;\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): ColumnEditor {\r\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Editor DOM Element */\r\n  get editorDomElement(): any {\r\n    return this._$input;\r\n  }\r\n\r\n  get hasAutoCommitEdit() {\r\n    return this.grid.getOptions().autoCommitEdit;\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator | undefined {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init() {\r\n    const columnId = this.columnDef && this.columnDef.id;\r\n    const placeholder = this.columnEditor && this.columnEditor.placeholder || '';\r\n    const title = this.columnEditor && this.columnEditor.title || '';\r\n\r\n    this._$input = $(`<input type=\"text\" role=\"presentation\"  autocomplete=\"off\" class=\"editor-text editor-${columnId}\" placeholder=\"${placeholder}\" title=\"${title}\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (event: JQuery.Event) => {\r\n        this._lastInputEvent = event;\r\n        if (event.keyCode === KeyCode.LEFT || event.keyCode === KeyCode.RIGHT) {\r\n          event.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    // the lib does not get the focus out event for some reason\r\n    // so register it here\r\n    if (this.hasAutoCommitEdit) {\r\n      this._$input.on('focusout', () => this.save());\r\n    }\r\n\r\n    setTimeout(() => this.focus(), 50);\r\n  }\r\n\r\n  destroy() {\r\n    this._$input.off('keydown.nav focusout').remove();\r\n    this._$input = null;\r\n  }\r\n\r\n  focus() {\r\n    if (this._$input) {\r\n      this._$input.focus();\r\n    }\r\n  }\r\n\r\n  getValue(): string {\r\n    return this._$input.val();\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this._$input.val(val);\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n    const isComplexObject = fieldName && fieldName.indexOf('.') > 0; // is the field a complex object, \"address.streetNumber\"\r\n\r\n    // validate the value before applying it (if not valid we'll set an empty string)\r\n    const validation = this.validate(state);\r\n    const newValue = (validation && validation.valid) ? state : '';\r\n\r\n    // set the new value to the item datacontext\r\n    if (isComplexObject) {\r\n      setDeepValue(item, fieldName, newValue);\r\n    } else {\r\n      item[fieldName] = newValue;\r\n    }\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    const elmValue = this._$input.val();\r\n    const lastKeyEvent = this._lastInputEvent && this._lastInputEvent.keyCode;\r\n    if (this.columnEditor && this.columnEditor.alwaysSaveOnEnterKey && lastKeyEvent === KeyCode.ENTER) {\r\n      return true;\r\n    }\r\n    return (!(elmValue === '' && (this.originalValue === null || this.originalValue === undefined))) && (elmValue !== this.originalValue);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    const fieldName = this.columnDef && this.columnDef.field;\r\n\r\n    if (item && fieldName !== undefined) {\r\n      // is the field a complex object, \"address.streetNumber\"\r\n      const isComplexObject = fieldName && fieldName.indexOf('.') > 0;\r\n      const value = (isComplexObject) ? getDescendantProperty(item, fieldName) : item[fieldName];\r\n\r\n      this.originalValue = value;\r\n      this._$input.val(this.originalValue);\r\n      this._$input.select();\r\n    }\r\n  }\r\n\r\n  save() {\r\n    const validation = this.validate();\r\n    const isValid = (validation && validation.valid) || false;\r\n\r\n    if (this.hasAutoCommitEdit && isValid) {\r\n      // do not use args.commitChanges() as this sets the focus to the next row.\r\n      // also the select list will stay shown when clicking off the grid\r\n      this.grid.getEditorLock().commitCurrentEdit();\r\n    } else {\r\n      this.args.commitChanges();\r\n    }\r\n  }\r\n\r\n  serializeValue() {\r\n    return this._$input.val();\r\n  }\r\n\r\n  validate(inputValue?: any): EditorValidatorOutput {\r\n    const elmValue = (inputValue !== undefined) ? inputValue : this._$input && this._$input.val();\r\n    return textValidator(elmValue, {\r\n      editorArgs: this.args,\r\n      errorMessage: this.columnEditor.errorMessage,\r\n      minLength: this.columnEditor.minLength,\r\n      maxLength: this.columnEditor.maxLength,\r\n      operatorConditionalType: this.columnEditor.operatorConditionalType,\r\n      required: this.columnEditor.required,\r\n      validator: this.validator,\r\n    });\r\n  }\r\n}\r\n","import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const arrayToCsvFormatter: Formatter = (row: number, cell: number, value: any) => {\r\n  if (value && Array.isArray(value) && value.length > 0) {\r\n    const values = value.join(', ');\r\n    return `<span title=\"${values}\">${values}</span>`;\r\n  }\r\n  return value;\r\n};\r\n","import { Formatter } from './../models/index';\r\n\r\nexport const centerFormatter: Formatter = (_row: number, _cell: number, value: string | any): string => {\r\n  let outputValue = value;\r\n\r\n  if (value === null || value === undefined) {\r\n    outputValue = '';\r\n  }\r\n  return `<center>${outputValue}</center>`;\r\n};\r\n","import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const complexObjectFormatter: Formatter = (row: number, cell: number, cellValue: any, columnDef: Column, dataContext: any) => {\r\n  if (!columnDef) {\r\n    return '';\r\n  }\r\n\r\n  const columnParams = columnDef.params || {};\r\n  const complexFieldLabel = columnParams && columnParams.complexFieldLabel || columnDef.field;\r\n\r\n  if (!complexFieldLabel) {\r\n    throw new Error(`For the Formatters.complexObject to work properly, you need to tell it which property of the complex object to use.\r\n      There are 3 ways to provide it:\r\n      1- via the generic \"params\" with a \"complexFieldLabel\" property on your Column Definition, example: this.columnDefs = [{ id: 'user', field: 'user', params: { complexFieldLabel: 'user.firstName' } }]\r\n      2- via the generic \"params\" with a \"complexFieldLabel\" and a \"labelKey\" property on your Column Definition, example: this.columnDefs = [{ id: 'user', field: 'user', labelKey: 'firstName' params: { complexFieldLabel: 'user' } }]\r\n      3- via the field name that includes a dot notation, example: this.columnDefs = [{ id: 'user', field: 'user.firstName'}] `);\r\n  }\r\n\r\n  if (columnDef.labelKey && dataContext.hasOwnProperty(complexFieldLabel)) {\r\n    return dataContext[complexFieldLabel] && dataContext[complexFieldLabel][columnDef.labelKey];\r\n  }\r\n\r\n  // when complexFieldLabel includes the dot \".\", we will do the split and get the value from the complex object\r\n  // however we also need to make sure that the complex objet exist, else we'll return the cell value (original value)\r\n  if (typeof complexFieldLabel === 'string' && complexFieldLabel.indexOf('.') > 0) {\r\n    let outputValue = complexFieldLabel.split('.').reduce((obj, i) => (obj && obj.hasOwnProperty(i) ? obj[i] : ''), dataContext);\r\n    if (typeof outputValue === 'object' && Object.entries(outputValue).length === 0) {\r\n      outputValue = ''; // return empty string when value ends up being an empty object\r\n    }\r\n    return outputValue;\r\n  }\r\n  return cellValue;\r\n};\r\n","import * as DOMPurify_ from 'dompurify';\r\nconst DOMPurify = DOMPurify_; // patch to fix rollup to work\r\n\r\nimport { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\n/**\r\n * Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https).\r\n * The structure will be \"<a href=\"hyperlink\">hyperlink</a>\"\r\n *\r\n * You can optionally change the hyperlink text displayed by using the generic params \"hyperlinkText\" in the column definition\r\n * For example: { id: 'link', field: 'link', params: { hyperlinkText: 'Company Website' } } will display \"<a href=\"link\">Company Website</a>\"\r\n *\r\n * You can also optionally provide the hyperlink URL by using the generic params \"hyperlinkUrl\" in the column definition\r\n * For example: { id: 'link', field: 'link', params: {  hyperlinkText: 'Company Website', hyperlinkUrl: 'http://www.somewhere.com' } } will display \"<a href=\"http://www.somewhere.com\">Company Website</a>\"\r\n */\r\nexport const hyperlinkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\r\n  const columnParams = columnDef && columnDef.params || {};\r\n\r\n  let displayedText = columnParams.hyperlinkText ? columnParams.hyperlinkText : value;\r\n  displayedText = DOMPurify.sanitize(displayedText || '');\r\n\r\n  let outputLink = columnParams.hyperlinkUrl ? columnParams.hyperlinkUrl : value;\r\n  outputLink = DOMPurify.sanitize(outputLink || '');\r\n\r\n  const matchUrl = outputLink.match(/^(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:\\/~\\+#]*[\\w\\-\\@?^=%&amp;\\/~\\+#])?/i);\r\n\r\n  if (matchUrl && Array.isArray(matchUrl) && matchUrl.length > 0) {\r\n    const finalUrl = matchUrl[0];\r\n    return `<a href=\"${finalUrl}\">${displayedText}</a>`;\r\n  }\r\n\r\n  return value;\r\n};\r\n","import * as DOMPurify_ from 'dompurify';\r\nconst DOMPurify = DOMPurify_; // patch to fix rollup to work\r\n\r\nimport { Formatter } from './../models/index';\r\nimport { parseFormatterWhenExist } from './formatterUtilities';\r\nimport { getDescendantProperty } from '../services/utilities';\r\n\r\n/** Formatter that must be use with a Tree Data column */\r\nexport const treeFormatter: Formatter = (row, cell, value, columnDef, dataContext, grid) => {\r\n  const dataView = grid.getData();\r\n  const gridOptions = grid.getOptions();\r\n  const treeDataOptions = gridOptions?.treeDataOptions;\r\n  const collapsedPropName = treeDataOptions?.collapsedPropName ?? '__collapsed';\r\n  const indentMarginLeft = treeDataOptions?.indentMarginLeft ?? 15;\r\n  const treeLevelPropName = treeDataOptions?.levelPropName ?? '__treeLevel';\r\n  let outputValue = value;\r\n\r\n  if (typeof columnDef.queryFieldNameGetterFn === 'function') {\r\n    const fieldName = columnDef.queryFieldNameGetterFn(dataContext);\r\n    if (fieldName?.indexOf('.') >= 0) {\r\n      outputValue = getDescendantProperty(dataContext, fieldName);\r\n    } else {\r\n      outputValue = dataContext.hasOwnProperty(fieldName) ? dataContext[fieldName] : value;\r\n    }\r\n  }\r\n  if (outputValue === null || outputValue === undefined || dataContext === undefined) {\r\n    return '';\r\n  }\r\n\r\n  if (!dataContext.hasOwnProperty(treeLevelPropName)) {\r\n    throw new Error('[Angular-Slickgrid] You must provide valid \"treeDataOptions\" in your Grid Options, however it seems that we could not find any tree level info on the current item datacontext row.');\r\n  }\r\n\r\n  if (dataView?.getItemByIdx) {\r\n    const identifierPropName = dataView.getIdPropertyName() ?? 'id';\r\n    const treeLevel = dataContext?.[treeLevelPropName] ?? 0;\r\n    const indentSpacer = `<span style=\"display:inline-block; width:${indentMarginLeft * treeLevel}px;\"></span>`;\r\n    const idx = dataView.getIdxById(dataContext[identifierPropName]);\r\n    const nextItemRow = dataView.getItemByIdx((idx || 0) + 1);\r\n    const slickTreeLevelClass = `slick-tree-level-${treeLevel}`;\r\n    let toggleClass = '';\r\n\r\n    if (nextItemRow?.[treeLevelPropName] > treeLevel) {\r\n      toggleClass = dataContext?.[collapsedPropName] ? 'collapsed' : 'expanded'; // parent with child will have a toggle icon\r\n    }\r\n\r\n    if (treeDataOptions?.titleFormatter) {\r\n      outputValue = parseFormatterWhenExist(treeDataOptions.titleFormatter, row, cell, columnDef, dataContext, grid);\r\n    }\r\n    const sanitizedOutputValue = DOMPurify.sanitize(outputValue, { ADD_ATTR: ['target'] });\r\n    const spanToggleClass = `slick-group-toggle ${toggleClass}`.trim();\r\n    const outputHtml = `${indentSpacer}<span class=\"${spanToggleClass}\"></span><span class=\"slick-tree-title\" level=\"${treeLevel}\">${sanitizedOutputValue}</span>`;\r\n    return { addClasses: slickTreeLevelClass, text: outputHtml };\r\n  }\r\n  return '';\r\n};\r\n","import { FieldType } from '../models/index';\r\nimport { getAssociatedDateFormatter } from './formatterUtilities';\r\nimport { alignRightFormatter } from './alignRightFormatter';\r\nimport { arrayObjectToCsvFormatter } from './arrayObjectToCsvFormatter';\r\nimport { arrayToCsvFormatter } from './arrayToCsvFormatter';\r\nimport { boldFormatter } from './boldFormatter';\r\nimport { centerFormatter } from './centerFormatter';\r\nimport { checkboxFormatter } from './checkboxFormatter';\r\nimport { checkmarkFormatter } from './checkmarkFormatter';\r\nimport { collectionFormatter } from './collectionFormatter';\r\nimport { collectionEditorFormatter } from './collectionEditorFormatter';\r\nimport { complexObjectFormatter } from './complexObjectFormatter';\r\nimport { decimalFormatter } from './decimalFormatter';\r\nimport { deleteIconFormatter } from './deleteIconFormatter';\r\nimport { dollarColoredBoldFormatter } from './dollarColoredBoldFormatter';\r\nimport { dollarColoredFormatter } from './dollarColoredFormatter';\r\nimport { dollarFormatter } from './dollarFormatter';\r\nimport { editIconFormatter } from './editIconFormatter';\r\nimport { fakeHyperlinkFormatter } from './fakeHyperlinkFormatter';\r\nimport { hyperlinkFormatter } from './hyperlinkFormatter';\r\nimport { iconFormatter } from './iconFormatter';\r\nimport { infoIconFormatter } from './infoIconFormatter';\r\nimport { italicFormatter } from './italicFormatter';\r\nimport { lowercaseFormatter } from './lowercaseFormatter';\r\nimport { maskFormatter } from './maskFormatter';\r\nimport { multipleFormatter } from './multipleFormatter';\r\nimport { percentFormatter } from './percentFormatter';\r\nimport { percentCompleteBarFormatter } from './percentCompleteBarFormatter';\r\nimport { percentCompleteFormatter } from './percentCompleteFormatter';\r\nimport { percentSymbolFormatter } from './percentSymbolFormatter';\r\nimport { progressBarFormatter } from './progressBarFormatter';\r\nimport { translateFormatter } from './translateFormatter';\r\nimport { translateBooleanFormatter } from './translateBooleanFormatter';\r\nimport { treeExportFormatter } from './treeExportFormatter';\r\nimport { treeFormatter } from './treeFormatter';\r\nimport { uppercaseFormatter } from './uppercaseFormatter';\r\nimport { yesNoFormatter } from './yesNoFormatter';\r\nimport { bsDropdownFormatter } from './bsDropdownFormatter';\r\n\r\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\r\nexport const Formatters = {\r\n  /** Align cell value to the center (alias to Formatters.center)  */\r\n  alignCenter: centerFormatter,\r\n\r\n  /** Align cell value to the right */\r\n  alignRight: alignRightFormatter,\r\n\r\n  /**\r\n   * Takes an array of complex objects converts it to a comma delimited string.\r\n   * Requires to pass an array of \"propertyNames\" in the column definition the generic \"params\" property\r\n   * For example, if we have an array of user objects that have the property of firstName & lastName then we need to pass in your column definition::\r\n   * params: { propertyNames: ['firtName', 'lastName'] } => 'John Doe, Jane Doe'\r\n   */\r\n  arrayObjectToCsv: arrayObjectToCsvFormatter,\r\n\r\n  /** Takes an array of string and converts it to a comma delimited string */\r\n  arrayToCsv: arrayToCsvFormatter,\r\n\r\n  /** show value in bold font weight */\r\n  bold: boldFormatter,\r\n\r\n  /** boostrap dropdown formatter */\r\n  bsDropdown: bsDropdownFormatter,\r\n\r\n  /** Center a text value horizontally */\r\n  center: centerFormatter,\r\n\r\n  /** When value is filled (true), it will display a checkbox Unicode icon */\r\n  checkbox: checkboxFormatter,\r\n\r\n  /**\r\n   * When value is filled, or if the value is a number and is bigger than 0, it will display a Font-Awesome icon (fa-check).\r\n   * The icon will NOT be displayed when the value is any of the following (\"false\", false, \"0\", 0, -0.5, null, undefined)\r\n   * Anything else than the condition specified will display the icon, so a text with \"00123\" will display the icon but \"0\" will not.\r\n   * Also note that a string (\"null\", \"undefined\") will display the icon but (null, undefined) will not, so the typeof is also important\r\n   */\r\n  checkmark: checkmarkFormatter,\r\n\r\n  /**\r\n   * Takes a complex data object and return the data under that property (for example: \"user.firstName\" will return the first name \"John\")\r\n   * You can pass the complex structure in the \"field\" or the \"params: { complexField: string }\" properties.\r\n   * For example::\r\n   * this.columnDefs = [{ id: 'username', field: 'user.firstName', ... }]\r\n   * OR this.columnDefs = [{ id: 'username', field: 'user', params: { complexField: 'user.firstName' }, ... }]\r\n   */\r\n  complex: complexObjectFormatter,\r\n  complexObject: complexObjectFormatter,\r\n\r\n  /**\r\n   * Looks up values from the columnDefinition.params.collection property and displays the label in CSV or string format\r\n   * @example\r\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\r\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\r\n   * const dataset = [1, 2];\r\n   */\r\n  collection: collectionFormatter,\r\n\r\n  /**\r\n   * Roughly the same as the \"collectionFormatter\" except that it\r\n   * looks up values from the columnDefinition.editor.collection (instead of params) property and displays the label in CSV or string format\r\n   * @example\r\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\r\n   * { editor: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\r\n   * const dataset = [1, 2];\r\n   */\r\n  collectionEditor: collectionEditorFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date format (YYYY-MM-DD) */\r\n  dateIso: getAssociatedDateFormatter(FieldType.dateIso, '-'),\r\n\r\n  /** Takes a Date object and displays it as an ISO Date+Time format (YYYY-MM-DD HH:mm:ss) */\r\n  dateTimeIso: getAssociatedDateFormatter(FieldType.dateTimeIso, '-'),\r\n\r\n  /** Takes a Date object and displays it as an ISO Date+Time (without seconds) format (YYYY-MM-DD HH:mm) */\r\n  dateTimeShortIso: getAssociatedDateFormatter(FieldType.dateTimeShortIso, '-'),\r\n\r\n  /** Takes a Date object and displays it as an ISO Date+Time+(am/pm) format (YYYY-MM-DD h:mm:ss a) */\r\n  dateTimeIsoAmPm: getAssociatedDateFormatter(FieldType.dateTimeIsoAmPm, '-'),\r\n\r\n  /** Takes a Date object and displays it as an Euro Date format (DD/MM/YYYY) */\r\n  dateEuro: getAssociatedDateFormatter(FieldType.dateEuro, '/'),\r\n\r\n  /** Takes a Date object and displays it as an Euro Date+Time format (DD/MM/YYYY HH:mm:ss) */\r\n  dateTimeEuro: getAssociatedDateFormatter(FieldType.dateTimeEuro, '/'),\r\n\r\n  /** Takes a Date object and displays it as an Euro Date+Time (without seconds) format (DD/MM/YYYY HH:mm) */\r\n  dateTimeShortEuro: getAssociatedDateFormatter(FieldType.dateTimeShortEuro, '/'),\r\n\r\n  /** Takes a Date object and displays it as an Euro Date+Time+(am/pm) format (DD/MM/YYYY hh:mm:ss a) */\r\n  dateTimeEuroAmPm: getAssociatedDateFormatter(FieldType.dateTimeEuroAmPm, '/'),\r\n\r\n  /** Takes a Date object and displays it as an US Date format (MM/DD/YYYY) */\r\n  dateUs: getAssociatedDateFormatter(FieldType.dateUs, '/'),\r\n\r\n  /** Takes a Date object and displays it as an US Date+Time format (MM/DD/YYYY HH:mm:ss) */\r\n  dateTimeUs: getAssociatedDateFormatter(FieldType.dateTimeUs, '/'),\r\n\r\n  /** Takes a Date object and displays it as an US Date+Time (without seconds) format (MM/DD/YYYY HH:mm:ss) */\r\n  dateTimeShortUs: getAssociatedDateFormatter(FieldType.dateTimeShortUs, '/'),\r\n\r\n  /** Takes a Date object and displays it as an US Date+Time+(am/pm) format (MM/DD/YYYY hh:mm:ss a) */\r\n  dateTimeUsAmPm: getAssociatedDateFormatter(FieldType.dateTimeUsAmPm, '/'),\r\n\r\n  /** Displays a Font-Awesome delete icon (fa-trash) */\r\n  deleteIcon: deleteIconFormatter,\r\n\r\n  /**\r\n   * Display the value as x decimals formatted, defaults to 2 decimals.\r\n   * You can pass \"decimalPlaces\" or \"minDecimalPlaces\" and/or \"maxDecimalPlaces\" to the \"params\" property.\r\n   * For example:: `{ formatter: Formatters.decimal, params: { decimalPlaces: 3 }}`\r\n   * The property \"decimalPlaces\" is an alias of \"minDecimalPlaces\"\r\n   */\r\n  decimal: decimalFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value */\r\n  dollar: dollarFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value */\r\n  dollarColored: dollarColoredFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value, show it in bold font weight as well */\r\n  dollarColoredBold: dollarColoredBoldFormatter,\r\n\r\n  /** Displays a Font-Awesome edit icon (fa-pencil) */\r\n  editIcon: editIconFormatter,\r\n\r\n  /** Takes any text value and display it as a fake a hyperlink (only styled as an hyperlink), this can be used in combo with \"onCellClick\" event */\r\n  fakeHyperlink: fakeHyperlinkFormatter,\r\n\r\n  /**\r\n   * Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https).\r\n   * The structure will be \"<a href=\"hyperlink\">hyperlink</a>\"\r\n   *\r\n   * You can optionally change the hyperlink text displayed by using the generic params \"hyperlinkText\" in the column definition\r\n   * For example: { id: 'link', field: 'link', params: { hyperlinkText: 'Company Website' } } will display \"<a href=\"link\">Company Website</a>\"\r\n   *\r\n   * You can also optionally provide the hyperlink URL by using the generic params \"hyperlinkUrl\" in the column definition\r\n   * For example: { id: 'link', field: 'link', params: {  hyperlinkText: 'Company Website', hyperlinkUrl: 'http://www.somewhere.com' } } will display \"<a href=\"http://www.somewhere.com\">Company Website</a>\"\r\n   */\r\n  hyperlink: hyperlinkFormatter,\r\n\r\n  /** Display whichever icon you want (library agnostic, it could be Font-Awesome or any other) */\r\n  icon: iconFormatter,\r\n\r\n  /** Displays a Font-Awesome edit icon (fa-info-circle) */\r\n  infoIcon: infoIconFormatter,\r\n\r\n  /** show input text value as italic text */\r\n  italic: italicFormatter,\r\n\r\n  /** Takes a value and displays it all lowercase */\r\n  lowercase: lowercaseFormatter,\r\n\r\n  /**\r\n   * Takes a value display it according to a mask provided\r\n   * e.: 1234567890 with mask \"(000) 000-0000\" will display \"(123) 456-7890\"\r\n   */\r\n  mask: maskFormatter,\r\n\r\n  /**\r\n   * You can pipe multiple formatters (executed in sequence), use params to pass the list of formatters.\r\n   * Requires to pass an array of \"formatters\" in the column definition the generic \"params\" property\r\n   * For example::\r\n   * { field: 'title', formatter: Formatters.multiple, params: { formatters: [ Formatters.lowercase, Formatters.uppercase ] }\r\n   */\r\n  multiple: multipleFormatter,\r\n\r\n  /** Takes a cell value number (between 0.0-1.0) and displays a red (<50) or green (>=50) bar */\r\n  percent: percentFormatter,\r\n\r\n  /** Takes a cell value number (between 0.0-100) and displays a red (<50) or green (>=50) bar */\r\n  percentComplete: percentCompleteFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"percent-complete-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\r\n  percentCompleteBar: percentCompleteBarFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and add the \"%\" after the number */\r\n  percentSymbol: percentSymbolFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"progress-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\r\n  progressBar: progressBarFormatter,\r\n\r\n  /** Takes a cell value and translates it (i18n). Requires an instance of the Translate Service:: `i18n: this.translate */\r\n  translate: translateFormatter,\r\n\r\n  /** Takes a boolean value, cast it to upperCase string and finally translates it (i18n). */\r\n  translateBoolean: translateBooleanFormatter,\r\n\r\n  /** Formatter that must be use with a Tree Data column */\r\n  tree: treeFormatter,\r\n\r\n  /** Formatter that must be use with a Tree Data column for Exporting the data */\r\n  treeExport: treeExportFormatter,\r\n\r\n  /** Takes a value and displays it all uppercase */\r\n  uppercase: uppercaseFormatter,\r\n\r\n  /** Takes a boolean value and display a string 'Yes' or 'No' */\r\n  yesNo: yesNoFormatter\r\n};\r\n","import { Formatter } from './../models/index';\r\n\r\nexport const alignRightFormatter: Formatter = (_row: number, _cell: number, value: string | any): string => {\r\n  let outputValue = value;\r\n\r\n  if (value === null || value === undefined) {\r\n    outputValue = '';\r\n  }\r\n  return `<div style=\"float: right\">${outputValue}</div>`;\r\n};\r\n","import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const arrayObjectToCsvFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\r\n  const columnParams = columnDef && columnDef.params || {};\r\n  const propertyNames = columnParams.propertyNames;\r\n  let parentObjectKeyName = columnParams.dataContextProperty;\r\n  if (!parentObjectKeyName) {\r\n    parentObjectKeyName = columnDef && columnDef.field && columnDef.field.split('.')[0]; // e.g. \"users.roles\" would be \"users\"\r\n  }\r\n\r\n  if (!propertyNames || !Array.isArray(propertyNames) || !parentObjectKeyName) {\r\n    throw new Error(`Formatters.arrayObjectToCsv requires you to pass an array of \"propertyNames\" (declared in \"params\") that you want to pull the data from.\r\n      For example, if we have an array of user objects that have the property of firstName & lastName then we need to pass in your column definition:: { params: { propertyNames: ['firtName'] }}.\r\n      Optionally, you can also pass the \"dataContextProperty\" if you wish to run this on another completely different field of the dataContext object.`);\r\n  }\r\n\r\n  // the dataContext holds all the data, so we can find the values we want even when \"value\" argument might be null\r\n  // e.g. if we want to use the propertyNames of ['firstName', 'lastName'] from the \"users\" array of objects\r\n  if (dataContext[parentObjectKeyName] && Array.isArray(dataContext[parentObjectKeyName])) {\r\n    // we will 1st get the object from the dataContext, then\r\n    if (Array.isArray(dataContext[parentObjectKeyName]) && dataContext[parentObjectKeyName].length > 0) {\r\n      const outputStrings: string[] = [];\r\n      dataContext[parentObjectKeyName].forEach((data: any) => {\r\n        const strings: string[] = [];\r\n\r\n        // 2nd from that data loop through all propertyNames we want to use (e.g.: ['firstName', 'lastName'])\r\n        propertyNames.forEach((prop) => {\r\n          strings.push(data[prop]);\r\n        });\r\n        // we will join these strings with spaces (e.g. 'John Doe' where 'John' was firstName and 'Doe' was lastName)\r\n        outputStrings.push(strings.join(' '));\r\n      });\r\n\r\n      // finally join all the output strings by CSV (e.g.: 'John Doe, Jane Doe')\r\n      const output = outputStrings.join(', ');\r\n      return `<span title=\"${output}\">${output}</span>`;\r\n    }\r\n  }\r\n  return value;\r\n};\r\n","import { Column, Formatter } from './../models/index';\r\n\r\nexport const boldFormatter: Formatter = (row: number, cell: number, value: any) => {\r\n  return value ? `<b>${value}</b>` : '';\r\n};\r\n","import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const bsDropdownFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\r\n  const columnParams = columnDef && columnDef.params || {};\r\n  const label = columnParams.label || columnParams.formatterLabel;\r\n\r\n  if (!label) {\r\n    throw new Error(`You must provide the \"label\" or \"formatterLabel\" via the generic \"params\" options (e.g.: { formatter: Formatters.bsDropdown, params: { formatterLabel: 'Label' }}`);\r\n  }\r\n\r\n  return `<div id=\"myDrop-r${row}-c${cell}\" class=\"dropdown pointer\">\r\n    <a class=\"dropdown-toggle\">\r\n      ${label}\r\n      <span class=\"caret\"></span>\r\n    </a>\r\n  </div>`;\r\n};\r\n","import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const checkboxFormatter: Formatter = (row: number, cell: number, value: any) =>\r\n  value ? '&#x2611;' : '';\r\n","import { Formatter } from './../models/formatter.interface';\r\nimport { isNumber } from '../services/utilities';\r\n\r\nexport const checkmarkFormatter: Formatter = (row: number, cell: number, value: any) => {\r\n  let isChecked = false;\r\n  const isValidNumber = isNumber(value);\r\n\r\n  if (isValidNumber) {\r\n    value = +value; // convert to number before doing next condition\r\n  }\r\n\r\n  if (value === true || (isValidNumber && +value > 0) || (typeof value === 'string' && value.length > 0 && value.toLowerCase() !== 'false' && value !== '0')) {\r\n    isChecked = true;\r\n  }\r\n\r\n  return isChecked ? `<i class=\"fa fa-check checkmark-icon\" aria-hidden=\"true\"></i>` : '';\r\n};\r\n","import { arrayToCsvFormatter } from './arrayToCsvFormatter';\r\nimport { Column, Formatter } from './../models/index';\r\nimport { findOrDefault } from '../services/utilities';\r\n\r\n/**\r\n * A formatter to show the label property value of a params collection\r\n */\r\nexport const collectionFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\r\n  if (!value || !columnDef || !columnDef.params || !columnDef.params.collection\r\n    || !columnDef.params.collection.length) {\r\n    return value;\r\n  }\r\n\r\n  const { params, params: { collection } } = columnDef;\r\n  const labelName = (params.customStructure) ? params.customStructure.label : 'label';\r\n  const valueName = (params.customStructure) ? params.customStructure.value : 'value';\r\n\r\n  if (Array.isArray(value)) {\r\n    return arrayToCsvFormatter(row,\r\n      cell,\r\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\r\n      columnDef,\r\n      dataContext,\r\n      grid);\r\n  }\r\n\r\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\r\n};\r\n","import { arrayToCsvFormatter } from './arrayToCsvFormatter';\r\nimport { Column, Formatter } from './../models/index';\r\nimport { findOrDefault } from '../services/utilities';\r\n\r\n/**\r\n * A formatter to show the label property value of an editor collection\r\n */\r\nexport const collectionEditorFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\r\n  if (!value || !columnDef || !columnDef.internalColumnEditor || !columnDef.internalColumnEditor.collection\r\n    || !columnDef.internalColumnEditor.collection.length) {\r\n    return value;\r\n  }\r\n\r\n  const { internalColumnEditor, internalColumnEditor: { collection } } = columnDef;\r\n  const labelName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.label : 'label';\r\n  const valueName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.value : 'value';\r\n\r\n  if (Array.isArray(value)) {\r\n    if (collection.every(x => typeof x === 'string')) {\r\n      return arrayToCsvFormatter(row,\r\n        cell,\r\n        value.map((v: any) => findOrDefault(collection, (c: any) => c === v)),\r\n        columnDef,\r\n        dataContext,\r\n        grid);\r\n    } else {\r\n      return arrayToCsvFormatter(row,\r\n        cell,\r\n        value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\r\n        columnDef,\r\n        dataContext,\r\n        grid);\r\n    }\r\n  }\r\n\r\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\r\n};\r\n","import { Formatter } from './../models/formatter.interface';\r\n\r\nexport const deleteIconFormatter: Formatter = () =>\r\n  `<i class=\"fa fa-trash pointer delete-icon\" aria-hidden=\"true\"></i>`;\r\n","import { Column, Formatter } from './../models/index';\r\nimport { formatNumber, isNumber } from './../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from './formatterUtilities';\r\n\r\nexport const decimalFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\r\n  const params = columnDef.params || {};\r\n  let minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid, 2);\r\n  let maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid, 2);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  // @deprecated: decimalPlaces, minDecimalPlaces, maxDecimalPlaces\r\n  // add these extra checks to support previous way of passing the decimal count\r\n  if ((params.minDecimalPlaces !== null && params.minDecimalPlaces) || (params.decimalPlaces !== null && params.decimalPlaces)) {\r\n    console.warn('[Angular-Slickgrid] please consider using \"minDecimal\" (instead of \"minDecimalPlaces\" or \"decimalPlaces\").');\r\n    minDecimal = (params.minDecimalPlaces !== null && params.minDecimalPlaces) || (params.decimalPlaces !== null && params.decimalPlaces);\r\n  }\r\n  if (params.maxDecimalPlaces !== null && params.maxDecimalPlaces) {\r\n    console.warn('[Angular-Slickgrid] please consider using \"maxDecimal\" (instead of \"maxDecimalPlaces\").');\r\n    maxDecimal = (params.maxDecimalPlaces !== null && params.maxDecimalPlaces);\r\n  }\r\n\r\n  if (isNumber(value)) {\r\n    return formatNumber(value, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '', '', decimalSeparator, thousandSeparator);\r\n  }\r\n  return value;\r\n};\r\n","import { Column, Formatter } from './../models/index';\r\nimport { formatNumber, isNumber } from './../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from './formatterUtilities';\r\n\r\nexport const dollarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid, 2);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid, 4);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (isNumber(value)) {\r\n    return formatNumber(value, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '$', '', decimalSeparator, thousandSeparator);\r\n  }\r\n  return value;\r\n};\r\n","import { Column, Formatter } from './../models/index';\r\nimport { formatNumber, isNumber } from './../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from './formatterUtilities';\r\n\r\nexport const dollarColoredFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid, 2);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid, 4);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (isNumber(value)) {\r\n    const colorStyle = (value >= 0) ? 'green' : 'red';\r\n    const formattedNumber = formatNumber(value, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '$', '', decimalSeparator, thousandSeparator);\r\n    return `<span style=\"color:${colorStyle}\">${formattedNumber}</span>`;\r\n  }\r\n  return value;\r\n};\r\n","import { Column, Formatter } from './../models/index';\r\nimport { formatNumber, isNumber } from './../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from './formatterUtilities';\r\n\r\nexport const dollarColoredBoldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid, 2);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid, 4);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (isNumber(value)) {\r\n    const colorStyle = (value >= 0) ? 'green' : 'red';\r\n    const formattedNumber = formatNumber(value, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '$', '', decimalSeparator, thousandSeparator);\r\n    return `<span style=\"color:${colorStyle}; font-weight:bold;\">${formattedNumber}</span>`;\r\n  }\r\n  return value;\r\n};\r\n","import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const editIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  `<i class=\"fa fa-pencil pointer edit-icon\" aria-hidden=\"true\"></i>`;\r\n","import { Formatter } from '../models/formatter.interface';\r\n\r\nexport const fakeHyperlinkFormatter: Formatter = (_row: number, _cell: number, value: string) => {\r\n  return value ? `<span class=\"fake-hyperlink\">${value}</span>` : '';\r\n};\r\n","import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const iconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\r\n  const columnParams = columnDef && columnDef.params || {};\r\n  const icon = columnParams.icon || columnParams.formatterIcon;\r\n\r\n  if (!icon) {\r\n    throw new Error(`You must provide the \"icon\" or \"formatterIcon\" via the generic \"params\" options (e.g.: { formatter: Formatters.icon, params: { formatterIcon: 'fa fa-search' }}`);\r\n  }\r\n  return `<i class=\"${icon}\" aria-hidden=\"true\"></i>`;\r\n};\r\n","import { Formatter } from './../models/formatter.interface';\r\n\r\nexport const infoIconFormatter: Formatter = () =>\r\n  `<i class=\"fa fa-info-circle pointer info-icon\" aria-hidden=\"true\"></i>`;\r\n","import { Column, Formatter } from './../models/index';\r\n\r\nexport const italicFormatter: Formatter = (row: number, cell: number, value: any) => {\r\n  return value ? `<i>${value}</i>` : '';\r\n};\r\n","import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const lowercaseFormatter: Formatter = (row: number, cell: number, value: string | any): string => {\r\n  // make sure the value is a string\r\n  if (value !== undefined && typeof value !== 'string') {\r\n    value = value + '';\r\n  }\r\n  return value ? value.toLowerCase() : '';\r\n};\r\n","\r\nimport { Column, Formatter } from './../models/index';\r\n\r\n/**\r\n * Takes a value display it according to a mask provided\r\n * e.: 1234567890 with mask \"(000) 000-0000\" will display \"(123) 456-7890\"\r\n */\r\nexport const maskFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column) => {\r\n  const params = columnDef.params || {};\r\n  const mask = params.mask;\r\n\r\n  if (!mask) {\r\n    throw new Error(`You must provide a \"mask\" via the generic \"params\" options (e.g.: { formatter: Formatters.mask, params: { mask: '000-000' }}`);\r\n  }\r\n\r\n  if (value) {\r\n    let i = 0;\r\n    const v = value.toString();\r\n    return mask.replace(/[09A]/gi, () => v[i++] || '');\r\n  }\r\n  return value;\r\n};\r\n","import { Column, Formatter } from './../models/index';\r\n\r\nexport const multipleFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\r\n  const params = columnDef.params || {};\r\n  if (!params.formatters || !Array.isArray(params.formatters)) {\r\n    throw new Error(`The multiple formatter requires the \"formatters\" to be provided as a column params.\r\n    For example: this.columnDefinitions = [{ id: title, field: title, formatter: Formatters.multiple, params: { formatters: [Formatters.lowercase, Formatters.uppercase] }`);\r\n  }\r\n  const formatters: Formatter[] = params.formatters;\r\n\r\n  // loop through all Formatters, the value of 1st formatter will be used by 2nd formatter and so on.\r\n  // they are piped and executed in sequences\r\n  let currentValue = value;\r\n  for (const formatter of formatters) {\r\n    currentValue = formatter(row, cell, currentValue, columnDef, dataContext, grid);\r\n  }\r\n  return currentValue;\r\n};\r\n","import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\nimport { formatNumber, isNumber } from './../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from './formatterUtilities';\r\n\r\nexport const percentFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any): string => {\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (isNumber(value)) {\r\n    const percentValue = value * 100;\r\n    return formatNumber(percentValue, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '', '%', decimalSeparator, thousandSeparator);\r\n  }\r\n  return value;\r\n};\r\n","import { Column, Formatter } from './../models/index';\r\nimport { formatNumber, isNumber } from './../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from './formatterUtilities';\r\n\r\nexport const percentCompleteFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any): string => {\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (isNumber(value)) {\r\n    const colorStyle = (value < 50) ? 'red' : 'green';\r\n    const formattedNumber = formatNumber(value, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '', '%', decimalSeparator, thousandSeparator);\r\n    const outputFormattedValue = value > 100 ? '100%' : formattedNumber;\r\n    return `<span style='color:${colorStyle}'>${outputFormattedValue}</span>`;\r\n  }\r\n  return value;\r\n};\r\n","import { Column, Formatter } from './../models/index';\r\nimport { isNumber } from '../services/utilities';\r\n\r\nexport const percentCompleteBarFormatter: Formatter = (row: number, cell: number, value: any): string => {\r\n  if (!isNumber(value)) {\r\n    return '';\r\n  }\r\n\r\n  let color = '';\r\n  let inputNumber = parseFloat(value);\r\n  if (inputNumber > 100) {\r\n    inputNumber = 100;\r\n  }\r\n\r\n  if (inputNumber < 30) {\r\n    color = 'red';\r\n  } else if (inputNumber < 70) {\r\n    color = 'silver';\r\n  } else {\r\n    color = 'green';\r\n  }\r\n\r\n  return `<span class=\"percent-complete-bar\" style=\"background:${color}; width:${inputNumber}%\"></span>`;\r\n};\r\n","import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\nimport { formatNumber, isNumber } from './../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from './formatterUtilities';\r\n\r\nexport const percentSymbolFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any): string => {\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (isNumber(value)) {\r\n    return formatNumber(value, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '', '%', decimalSeparator, thousandSeparator);\r\n  }\r\n  return value;\r\n};\r\n","import { Column, Formatter } from './../models/index';\r\nimport { isNumber } from '../services/utilities';\r\n\r\nexport const progressBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  if (!isNumber(value)) {\r\n    return '';\r\n  }\r\n\r\n  let color = '';\r\n  let inputNumber = parseFloat(value);\r\n  if (inputNumber > 100) {\r\n    inputNumber = 100;\r\n  }\r\n\r\n  if (inputNumber < 30) {\r\n    color = 'danger';\r\n  } else if (inputNumber < 70) {\r\n    color = 'warning';\r\n  } else {\r\n    color = 'success';\r\n  }\r\n\r\n  const output = `<div class=\"progress\">\r\n    <div class=\"progress-bar progress-bar-${color} bg-${color}\" role=\"progressbar\" aria-valuenow=\"${inputNumber}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"min-width: 2em; width: ${inputNumber}%;\">\r\n    ${inputNumber}%\r\n    </div>\r\n  </div>`;\r\n\r\n  return output.replace(/\\s{2,}/g, ' ').trim();\r\n};\r\n","import { Column, Formatter } from './../models/index';\r\n\r\n/** Takes a cell value and translates it with the \"ngx-translate\" service */\r\nexport const translateFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\r\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\r\n  const translate = gridOptions.i18n || (columnDef && columnDef.params && columnDef.params.i18n);\r\n\r\n  if (!translate || typeof translate.instant !== 'function') {\r\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\r\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\r\n  }\r\n\r\n  // make sure the value is a string (for example a boolean value would throw an error)\r\n  if (value !== undefined && value !== null && typeof value !== 'string') {\r\n    value = value + '';\r\n  }\r\n\r\n  return value ? translate.instant(value) : '';\r\n};\r\n","import { Column, Formatter } from './../models/index';\r\n\r\n/** Takes a boolean value, cast it to upperCase string and finally translates it with the \"ngx-translate\" service */\r\nexport const translateBooleanFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\r\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\r\n  const translate = gridOptions.i18n || (columnDef && columnDef.params && columnDef.params.i18n);\r\n\r\n  if (!translate || typeof translate.instant !== 'function') {\r\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\r\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\r\n  }\r\n\r\n  // make sure the value is a string (for example a boolean value would throw an error)\r\n  if (value !== undefined && value !== null && typeof value !== 'string') {\r\n    value = value + '';\r\n  }\r\n  return value ? translate.instant(value.toUpperCase() as string) : '';\r\n};\r\n","import { Formatter } from './../models/index';\r\nimport { parseFormatterWhenExist } from './formatterUtilities';\r\nimport { addWhiteSpaces, getDescendantProperty, sanitizeHtmlToText } from '../services/utilities';\r\n\r\n/** Formatter that must be use with a Tree Data column */\r\nexport const treeExportFormatter: Formatter = (row, cell, value, columnDef, dataContext, grid) => {\r\n  const dataView = grid.getData();\r\n  const gridOptions = grid.getOptions();\r\n  const treeDataOptions = gridOptions?.treeDataOptions;\r\n  const collapsedPropName = treeDataOptions?.collapsedPropName ?? '__collapsed';\r\n  const treeLevelPropName = treeDataOptions?.levelPropName ?? '__treeLevel';\r\n  const indentMarginLeft = treeDataOptions?.exportIndentMarginLeft ?? 5;\r\n  const exportIndentationLeadingChar = treeDataOptions?.exportIndentationLeadingChar ?? '.';\r\n  const exportIndentationLeadingSpaceCount = treeDataOptions?.exportIndentationLeadingSpaceCount ?? 3;\r\n  const groupCollapsedSymbol = gridOptions?.excelExportOptions?.groupCollapsedSymbol ?? '⮞';\r\n  const groupExpandedSymbol = gridOptions?.excelExportOptions?.groupExpandedSymbol ?? '⮟';\r\n  let outputValue = value;\r\n\r\n  if (typeof columnDef.queryFieldNameGetterFn === 'function') {\r\n    const fieldName = columnDef.queryFieldNameGetterFn(dataContext);\r\n    if (fieldName?.indexOf('.') >= 0) {\r\n      outputValue = getDescendantProperty(dataContext, fieldName);\r\n    } else {\r\n      outputValue = dataContext.hasOwnProperty(fieldName) ? dataContext[fieldName] : value;\r\n    }\r\n  }\r\n  if (outputValue === null || outputValue === undefined || dataContext === undefined) {\r\n    return '';\r\n  }\r\n\r\n  if (!dataContext.hasOwnProperty(treeLevelPropName)) {\r\n    throw new Error('[Angular-Slickgrid] You must provide valid \"treeDataOptions\" in your Grid Options, however it seems that we could not find any tree level info on the current item datacontext row.');\r\n  }\r\n\r\n  if (dataView?.getItemByIdx) {\r\n    const identifierPropName = dataView.getIdPropertyName() ?? 'id';\r\n    const treeLevel = dataContext?.[treeLevelPropName] ?? 0;\r\n    const idx = dataView.getIdxById(dataContext[identifierPropName]);\r\n    const nextItemRow = dataView.getItemByIdx((idx || 0) + 1);\r\n    let toggleSymbol = '';\r\n    let indentation = 0;\r\n\r\n    if (nextItemRow?.[treeLevelPropName] > treeLevel) {\r\n      toggleSymbol = dataContext?.[collapsedPropName] ? groupCollapsedSymbol : groupExpandedSymbol; // parent with child will have a toggle icon\r\n      indentation = treeLevel === 0 ? 0 : (indentMarginLeft * treeLevel);\r\n    } else {\r\n      indentation = (indentMarginLeft * (treeLevel === 0 ? 0 : treeLevel + 1));\r\n    }\r\n    const indentSpacer = addWhiteSpaces(indentation);\r\n\r\n    if (treeDataOptions?.titleFormatter) {\r\n      outputValue = parseFormatterWhenExist(treeDataOptions.titleFormatter, row, cell, columnDef, dataContext, grid);\r\n    }\r\n\r\n    const leadingChar = (treeLevel === 0 && toggleSymbol) ? '' : (treeLevel === 0 ? `${exportIndentationLeadingChar}${addWhiteSpaces(exportIndentationLeadingSpaceCount)}` : exportIndentationLeadingChar);\r\n    outputValue = `${leadingChar}${indentSpacer}${toggleSymbol} ${outputValue}`;\r\n    const sanitizedOutputValue = sanitizeHtmlToText(outputValue); // also remove any html tags that might exist\r\n\r\n    return sanitizedOutputValue;\r\n  }\r\n  return '';\r\n};\r\n","import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const uppercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\r\n  // make sure the value is a string\r\n  if (value !== undefined && typeof value !== 'string') {\r\n    value = value + '';\r\n  }\r\n  return value ? value.toUpperCase() : '';\r\n};\r\n","import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const yesNoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string =>\r\n  value ? 'Yes' : 'No';\r\n","import { Column } from './../models/index';\r\nimport { avgTotalsPercentageFormatter } from './avgTotalsPercentageFormatter';\r\nimport { avgTotalsDollarFormatter } from './avgTotalsDollarFormatter';\r\nimport { avgTotalsFormatter } from './avgTotalsFormatter';\r\nimport { minTotalsFormatter } from './minTotalsFormatter';\r\nimport { maxTotalsFormatter } from './maxTotalsFormatter';\r\nimport { sumTotalsColoredFormatter } from './sumTotalsColoredFormatter';\r\nimport { sumTotalsDollarColoredBoldFormatter } from './sumTotalsDollarColoredBoldFormatter';\r\nimport { sumTotalsDollarColoredFormatter } from './sumTotalsDollarColoredFormatter';\r\nimport { sumTotalsDollarBoldFormatter } from './sumTotalsDollarBoldFormatter';\r\nimport { sumTotalsDollarFormatter } from './sumTotalsDollarFormatter';\r\nimport { sumTotalsFormatter } from './sumTotalsFormatter';\r\nimport { sumTotalsBoldFormatter } from './sumTotalsBoldFormatter';\r\n\r\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\r\nexport const GroupTotalFormatters = {\r\n  /**\r\n   * Average all the column totals\r\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\r\n   */\r\n  avgTotals: avgTotalsFormatter,\r\n\r\n  /**\r\n   * Average all the column totals and display '$' at the end of the value\r\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\r\n   */\r\n  avgTotalsDollar: avgTotalsDollarFormatter,\r\n\r\n  /**\r\n   * Average all the column totals and display '%' at the end of the value\r\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\r\n   */\r\n  avgTotalsPercentage: avgTotalsPercentageFormatter,\r\n\r\n  /**\r\n   * Show max value of all the column totals\r\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\r\n   */\r\n  maxTotals: maxTotalsFormatter,\r\n\r\n  /**\r\n   * Show min value of all the column totals\r\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\r\n   */\r\n  minTotals: minTotalsFormatter,\r\n\r\n  /**\r\n   * Sums up all the column totals\r\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\r\n   */\r\n  sumTotals: sumTotalsFormatter,\r\n\r\n  /**\r\n   * Sums up all the column totals and display it in bold font weight\r\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\r\n   */\r\n  sumTotalsBold: sumTotalsBoldFormatter,\r\n\r\n  /**\r\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\r\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\r\n   */\r\n  sumTotalsColored: sumTotalsColoredFormatter,\r\n\r\n  /**\r\n   * Sums up all the column totals and display dollar sign\r\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\r\n   */\r\n  sumTotalsDollar: sumTotalsDollarFormatter,\r\n\r\n  /**\r\n   * Sums up all the column totals and display dollar sign and show it in bold font weight\r\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\r\n   */\r\n  sumTotalsDollarBold: sumTotalsDollarBoldFormatter,\r\n\r\n  /**\r\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\r\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\r\n   */\r\n  sumTotalsDollarColored: sumTotalsDollarColoredFormatter,\r\n\r\n  /**\r\n   * Sums up all the column totals, change color of text to red/green on negative/positive value, show it in bold font weight as well\r\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\r\n   */\r\n  sumTotalsDollarColoredBold: sumTotalsDollarColoredBoldFormatter,\r\n};\r\n","import { Column, GroupTotalsFormatter } from './../models/index';\r\nimport { decimalFormatted, thousandSeparatorFormatted } from '../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from '../formatters/formatterUtilities';\r\n\r\nexport const avgTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\r\n  const field = columnDef.field || '';\r\n  let val = totals.avg && totals.avg[field];\r\n  const params = columnDef && columnDef.params;\r\n  let prefix = params && params.groupFormatterPrefix || '';\r\n  const suffix = params && params.groupFormatterSuffix || '';\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (val !== null && val !== undefined && !isNaN(+val)) {\r\n    if (val < 0) {\r\n      val = Math.abs(val);\r\n      if (!displayNegativeNumberWithParentheses) {\r\n        prefix += '-';\r\n      } else {\r\n        if (isNaN(minDecimal) && isNaN(maxDecimal)) {\r\n          const outputVal = thousandSeparatorFormatted(Math.round(val), thousandSeparator);\r\n          return `${prefix}(${outputVal})${suffix}`;\r\n        }\r\n        return `${prefix}(${decimalFormatted(val, minDecimal, maxDecimal, decimalSeparator, thousandSeparator)})${suffix}`;\r\n      }\r\n    }\r\n\r\n    if (isNaN(minDecimal) && isNaN(maxDecimal)) {\r\n      const outputVal = thousandSeparatorFormatted(Math.round(val), thousandSeparator);\r\n      return `${prefix}${outputVal}${suffix}`;\r\n    }\r\n    return `${prefix}${decimalFormatted(val, minDecimal, maxDecimal, decimalSeparator, thousandSeparator)}${suffix}`;\r\n  }\r\n  return '';\r\n};\r\n","import { Column, GroupTotalsFormatter } from './../models/index';\r\nimport { formatNumber } from './../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from '../formatters/formatterUtilities';\r\n\r\nexport const avgTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\r\n  const field = columnDef.field || '';\r\n  const val = totals.avg && totals.avg[field];\r\n  const params = columnDef && columnDef.params;\r\n  const prefix = params && params.groupFormatterPrefix || '';\r\n  const suffix = params && params.groupFormatterSuffix || '';\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid, 2);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid, 4);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (val !== null && val !== undefined && !isNaN(+val)) {\r\n    const formattedNumber = formatNumber(val, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '$', '', decimalSeparator, thousandSeparator);\r\n    return `${prefix}${formattedNumber}${suffix}`;\r\n  }\r\n  return '';\r\n};\r\n","import { Column, GroupTotalsFormatter } from './../models/index';\r\nimport { decimalFormatted, thousandSeparatorFormatted } from '../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from '../formatters/formatterUtilities';\r\n\r\nexport const avgTotalsPercentageFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\r\n  const field = columnDef.field || '';\r\n  let val = totals.avg && totals.avg[field];\r\n  const params = columnDef && columnDef.params;\r\n  let prefix = params && params.groupFormatterPrefix || '';\r\n  const suffix = params && params.groupFormatterSuffix || '';\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (val !== null && val !== undefined && !isNaN(+val)) {\r\n    if (val < 0) {\r\n      val = Math.abs(val);\r\n      if (!displayNegativeNumberWithParentheses) {\r\n        prefix += '-';\r\n      } else {\r\n        if (isNaN(minDecimal) && isNaN(maxDecimal)) {\r\n          const outputVal = thousandSeparatorFormatted(Math.round(val), thousandSeparator);\r\n          return `${prefix}(${outputVal}%)${suffix}`;\r\n        }\r\n        return `${prefix}(${decimalFormatted(val, minDecimal, maxDecimal, decimalSeparator, thousandSeparator)}%)${suffix}`;\r\n      }\r\n    }\r\n\r\n    if (isNaN(minDecimal) && isNaN(maxDecimal)) {\r\n      const outputVal = thousandSeparatorFormatted(Math.round(val), thousandSeparator);\r\n      return `${prefix}${outputVal}%${suffix}`;\r\n    }\r\n    return `${prefix}${decimalFormatted(val, minDecimal, maxDecimal, decimalSeparator, thousandSeparator)}%${suffix}`;\r\n  }\r\n  return '';\r\n};\r\n","import { Column, GroupTotalsFormatter } from './../models/index';\r\nimport { formatNumber } from '../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from '../formatters/formatterUtilities';\r\n\r\nexport const maxTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\r\n  const field = columnDef.field || '';\r\n  const val = totals.max && totals.max[field];\r\n  const params = columnDef && columnDef.params;\r\n  const prefix = params && params.groupFormatterPrefix || '';\r\n  const suffix = params && params.groupFormatterSuffix || '';\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (val !== null && val !== undefined && !isNaN(+val)) {\r\n    const formattedNumber = formatNumber(val, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '', '', decimalSeparator, thousandSeparator);\r\n    return `${prefix}${formattedNumber}${suffix}`;\r\n  }\r\n  return '';\r\n};\r\n","import { Column, GroupTotalsFormatter } from './../models/index';\r\nimport { formatNumber } from '../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from '../formatters/formatterUtilities';\r\n\r\nexport const minTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\r\n  const field = columnDef.field || '';\r\n  const val = totals.min && totals.min[field];\r\n  const params = columnDef && columnDef.params;\r\n  const prefix = params && params.groupFormatterPrefix || '';\r\n  const suffix = params && params.groupFormatterSuffix || '';\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (val !== null && val !== undefined && !isNaN(+val)) {\r\n    const formattedNumber = formatNumber(val, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '', '', decimalSeparator, thousandSeparator);\r\n    return `${prefix}${formattedNumber}${suffix}`;\r\n  }\r\n  return '';\r\n};\r\n","import { Column, GroupTotalsFormatter } from './../models/index';\r\nimport { formatNumber } from '../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from '../formatters/formatterUtilities';\r\n\r\nexport const sumTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\r\n  const field = columnDef.field || '';\r\n  const val = totals.sum && totals.sum[field];\r\n  const params = columnDef && columnDef.params;\r\n  const prefix = params && params.groupFormatterPrefix || '';\r\n  const suffix = params && params.groupFormatterSuffix || '';\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (val !== null && val !== undefined && !isNaN(+val)) {\r\n    const formattedNumber = formatNumber(val, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '', '', decimalSeparator, thousandSeparator);\r\n    return `${prefix}${formattedNumber}${suffix}`;\r\n  }\r\n  return '';\r\n};\r\n","import { Column, GroupTotalsFormatter } from './../models/index';\r\nimport { formatNumber } from '../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from '../formatters/formatterUtilities';\r\n\r\nexport const sumTotalsBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\r\n  const field = columnDef.field || '';\r\n  const val = totals.sum && totals.sum[field];\r\n  const params = columnDef && columnDef.params;\r\n  const prefix = params && params.groupFormatterPrefix || '';\r\n  const suffix = params && params.groupFormatterSuffix || '';\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (val !== null && val !== undefined && !isNaN(+val)) {\r\n    const formattedNumber = formatNumber(val, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '', '', decimalSeparator, thousandSeparator);\r\n    return `<b>${prefix}${formattedNumber}${suffix}</b>`;\r\n  }\r\n  return '';\r\n};\r\n","import { Column, GroupTotalsFormatter } from './../models/index';\r\nimport { formatNumber } from '../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from '../formatters/formatterUtilities';\r\n\r\nexport const sumTotalsColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\r\n  const field = columnDef.field || '';\r\n  const val = totals.sum && totals.sum[field];\r\n  const params = columnDef && columnDef.params;\r\n  const prefix = params && params.groupFormatterPrefix || '';\r\n  const suffix = params && params.groupFormatterSuffix || '';\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (val !== null && val !== undefined && !isNaN(+val)) {\r\n    const colorStyle = (val >= 0) ? 'green' : 'red';\r\n    const formattedNumber = formatNumber(val, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '', '', decimalSeparator, thousandSeparator);\r\n    return `<span style=\"color:${colorStyle}\">${prefix}${formattedNumber}${suffix}</span>`;\r\n  }\r\n  return '';\r\n};\r\n","import { Column, GroupTotalsFormatter } from './../models/index';\r\nimport { formatNumber } from './../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from '../formatters/formatterUtilities';\r\n\r\nexport const sumTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\r\n  const field = columnDef.field || '';\r\n  const val = totals.sum && totals.sum[field];\r\n  const params = columnDef && columnDef.params;\r\n  const prefix = params && params.groupFormatterPrefix || '';\r\n  const suffix = params && params.groupFormatterSuffix || '';\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid, 2);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid, 4);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (val !== null && val !== undefined && !isNaN(+val)) {\r\n    const formattedNumber = formatNumber(val, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '$', '', decimalSeparator, thousandSeparator);\r\n    return `${prefix}${formattedNumber}${suffix}`;\r\n  }\r\n  return '';\r\n};\r\n","import { Column, GroupTotalsFormatter } from './../models/index';\r\nimport { formatNumber } from './../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from '../formatters/formatterUtilities';\r\n\r\nexport const sumTotalsDollarBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\r\n  const field = columnDef.field || '';\r\n  const val = totals.sum && totals.sum[field];\r\n  const params = columnDef && columnDef.params;\r\n  const prefix = params && params.groupFormatterPrefix || '';\r\n  const suffix = params && params.groupFormatterSuffix || '';\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid, 2);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid, 4);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (val !== null && val !== undefined && !isNaN(+val)) {\r\n    const formattedNumber = formatNumber(val, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '$', '', decimalSeparator, thousandSeparator);\r\n    return `<b>${prefix}${formattedNumber}${suffix}</b>`;\r\n  }\r\n  return '';\r\n};\r\n","import { Column, GroupTotalsFormatter } from './../models/index';\r\nimport { formatNumber } from './../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from '../formatters/formatterUtilities';\r\n\r\nexport const sumTotalsDollarColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\r\n  const field = columnDef.field || '';\r\n  const val = totals.sum && totals.sum[field];\r\n  const params = columnDef && columnDef.params;\r\n  const prefix = params && params.groupFormatterPrefix || '';\r\n  const suffix = params && params.groupFormatterSuffix || '';\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid, 2);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid, 4);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (val !== null && val !== undefined && !isNaN(+val)) {\r\n    const colorStyle = (val >= 0) ? 'green' : 'red';\r\n    const formattedNumber = formatNumber(val, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '$', '', decimalSeparator, thousandSeparator);\r\n    return `<span style=\"color:${colorStyle}\">${prefix}${formattedNumber}${suffix}</span>`;\r\n  }\r\n  return '';\r\n};\r\n","import { Column, GroupTotalsFormatter } from './../models/index';\r\nimport { formatNumber } from './../services/utilities';\r\nimport { getValueFromParamsOrFormatterOptions } from '../formatters/formatterUtilities';\r\n\r\nexport const sumTotalsDollarColoredBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\r\n  const field = columnDef.field || '';\r\n  const val = totals.sum && totals.sum[field];\r\n  const params = columnDef && columnDef.params;\r\n  const prefix = params && params.groupFormatterPrefix || '';\r\n  const suffix = params && params.groupFormatterSuffix || '';\r\n  const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid, 2);\r\n  const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid, 4);\r\n  const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');\r\n  const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');\r\n  const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);\r\n\r\n  if (val !== null && val !== undefined && !isNaN(+val)) {\r\n    const colorStyle = (val >= 0) ? 'green' : 'red';\r\n    const formattedNumber = formatNumber(val, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '$', '', decimalSeparator, thousandSeparator);\r\n    return `<span style=\"color:${colorStyle}; font-weight: bold;\">${prefix}${formattedNumber}${suffix}</span>`;\r\n  }\r\n  return '';\r\n};\r\n","import { Component, Input, OnDestroy, OnInit, Optional } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { Constants } from '../constants';\r\nimport { GridOption, Locale } from './../models/index';\r\nimport { PaginationService } from '../services/pagination.service';\r\nimport { getTranslationPrefix, unsubscribeAllObservables } from '../services/utilities';\r\n\r\n@Component({\r\n  selector: 'slick-pagination',\r\n  templateUrl: './slick-pagination.component.html'\r\n})\r\nexport class SlickPaginationComponent implements OnDestroy, OnInit {\r\n  @Input() gridOptions!: GridOption;\r\n\r\n  private subscriptions: Subscription[] = [];\r\n  private _enableTranslate = false;\r\n  private _gridOptions!: GridOption;\r\n  private _locales!: Locale;\r\n\r\n  // text translations (handled by ngx-translate or by custom locale)\r\n  textItemsPerPage = 'items per page';\r\n  textItems = 'items';\r\n  textOf = 'of';\r\n  textPage = 'Page';\r\n\r\n  /** Constructor */\r\n  constructor(private readonly paginationService: PaginationService, @Optional() private readonly translate: TranslateService) { }\r\n\r\n  get availablePageSizes(): number[] {\r\n    return this.paginationService.availablePageSizes;\r\n  }\r\n\r\n  get dataFrom(): number {\r\n    return this.paginationService.dataFrom;\r\n  }\r\n\r\n  get dataTo(): number {\r\n    return this.paginationService.dataTo;\r\n  }\r\n\r\n  /** is the left side pagination disabled? */\r\n  get isLeftPaginationDisabled(): boolean {\r\n    return this.pageNumber === 1 || this.totalItems === 0;\r\n  }\r\n\r\n  /** is the right side pagination disabled? */\r\n  get isRightPaginationDisabled(): boolean {\r\n    return this.pageNumber === this.pageCount || this.totalItems === 0;\r\n  }\r\n\r\n  get itemsPerPage(): number {\r\n    return this.paginationService.itemsPerPage;\r\n  }\r\n\r\n  get pageCount(): number {\r\n    return this.paginationService.pageCount;\r\n  }\r\n\r\n  get pageNumber(): number {\r\n    return this.paginationService.pageNumber;\r\n  }\r\n  set pageNumber(page: number) {\r\n    // the setter has to be declared but we won't use it, instead we will use the \"changeToCurrentPage()\" to only update the value after ENTER keydown event\r\n  }\r\n\r\n  get totalItems() {\r\n    return this.paginationService.totalItems;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._gridOptions = this.gridOptions || {};\r\n    this._enableTranslate = this._gridOptions && this._gridOptions.enableTranslate || false;\r\n    this._locales = this._gridOptions && this._gridOptions.locales || Constants.locales;\r\n\r\n    if (this._enableTranslate && !this.translate) {\r\n      throw new Error('[Angular-Slickgrid] requires \"ngx-translate\" to be installed and configured when the grid option \"enableTranslate\" is enabled.');\r\n    }\r\n\r\n    this.translateAllUiTexts(this._locales);\r\n\r\n    // translate all the text using ngx-translate or custom locales\r\n    if (this._enableTranslate && this.translate && this.translate.onLangChange) {\r\n      this.subscriptions.push(this.translate.onLangChange.subscribe(() => this.translateAllUiTexts(this._locales)));\r\n    }\r\n  }\r\n\r\n  changeToFirstPage(event: MouseEvent) {\r\n    if (!this.isLeftPaginationDisabled) {\r\n      this.paginationService.goToFirstPage(event);\r\n    }\r\n  }\r\n\r\n  changeToLastPage(event: MouseEvent) {\r\n    if (!this.isRightPaginationDisabled) {\r\n      this.paginationService.goToLastPage(event);\r\n    }\r\n  }\r\n\r\n  changeToNextPage(event: MouseEvent) {\r\n    if (!this.isRightPaginationDisabled) {\r\n      this.paginationService.goToNextPage(event);\r\n    }\r\n  }\r\n\r\n  changeToPreviousPage(event: MouseEvent) {\r\n    if (!this.isLeftPaginationDisabled) {\r\n      this.paginationService.goToPreviousPage(event);\r\n    }\r\n  }\r\n\r\n  changeToCurrentPage(event: any) {\r\n    let pageNumber = 1;\r\n    if (event && event.currentTarget && event.currentTarget.value) {\r\n      pageNumber = +(event.currentTarget.value);\r\n    }\r\n    this.paginationService.goToPageNumber(pageNumber, event);\r\n  }\r\n\r\n  changeItemPerPage(event: any) {\r\n    let itemsPerPage = 1;\r\n    if (event && event.currentTarget && event.currentTarget.value) {\r\n      itemsPerPage = +(event.currentTarget.value);\r\n    }\r\n    this.paginationService.changeItemPerPage(itemsPerPage, event);\r\n  }\r\n\r\n  dispose() {\r\n    this.paginationService?.dispose();\r\n\r\n    // also unsubscribe all Angular Subscriptions\r\n    this.subscriptions = unsubscribeAllObservables(this.subscriptions);\r\n  }\r\n\r\n  // --\r\n  // private functions\r\n  // --------------------\r\n\r\n  /** Translate all the texts shown in the UI, use ngx-translate service when available or custom locales when service is null */\r\n  private translateAllUiTexts(locales: Locale) {\r\n    if (this._enableTranslate && this.translate && this.translate.instant && this.translate.currentLang) {\r\n      const translationPrefix = getTranslationPrefix(this._gridOptions);\r\n      this.textItemsPerPage = this.translate.instant(`${translationPrefix}ITEMS_PER_PAGE`);\r\n      this.textItems = this.translate.instant(`${translationPrefix}ITEMS`);\r\n      this.textOf = this.translate.instant(`${translationPrefix}OF`);\r\n      this.textPage = this.translate.instant(`${translationPrefix}PAGE`);\r\n    } else if (locales) {\r\n      this.textItemsPerPage = locales.TEXT_ITEMS_PER_PAGE || 'TEXT_ITEMS_PER_PAGE';\r\n      this.textItems = locales.TEXT_ITEMS || 'TEXT_ITEMS';\r\n      this.textOf = locales.TEXT_OF || 'TEXT_OF';\r\n      this.textPage = locales.TEXT_PAGE || 'TEXT_PAGE';\r\n    }\r\n  }\r\n}\r\n","export default \"<div class=\\\"slick-pagination\\\">\\r\\n  <div class=\\\"slick-pagination-nav\\\">\\r\\n    <nav aria-label=\\\"Page navigation\\\">\\r\\n      <ul class=\\\"pagination\\\">\\r\\n        <li class=\\\"page-item\\\" [ngClass]=\\\"isLeftPaginationDisabled ? 'disabled' : ''\\\">\\r\\n          <a class=\\\"page-link icon-seek-first fa fa-angle-double-left\\\" aria-label=\\\"First\\\"\\r\\n             (click)=\\\"changeToFirstPage($event)\\\">\\r\\n          </a>\\r\\n        </li>\\r\\n        <li class=\\\"page-item\\\" [ngClass]=\\\"isLeftPaginationDisabled ? 'disabled' : ''\\\">\\r\\n          <a class=\\\"page-link icon-seek-prev fa fa-angle-left\\\" aria-label=\\\"Previous\\\"\\r\\n             (click)=\\\"changeToPreviousPage($event)\\\">\\r\\n          </a>\\r\\n        </li>\\r\\n      </ul>\\r\\n    </nav>\\r\\n\\r\\n    <div class=\\\"slick-page-number\\\">\\r\\n      <span>{{textPage}}</span>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" data-test=\\\"page-number-input\\\" [value]=\\\"pageNumber\\\" size=\\\"1\\\"\\r\\n             [readOnly]=\\\"totalItems === 0\\\" (change)=\\\"changeToCurrentPage($event)\\\">\\r\\n      <span>{{textOf}}</span><span data-test=\\\"page-count\\\"> {{pageCount}}</span>\\r\\n    </div>\\r\\n\\r\\n    <nav aria-label=\\\"Page navigation\\\">\\r\\n      <ul class=\\\"pagination\\\">\\r\\n        <li class=\\\"page-item\\\" [ngClass]=\\\"isRightPaginationDisabled ? 'disabled' : ''\\\">\\r\\n          <a class=\\\"page-link icon-seek-next text-center fa fa-lg fa-angle-right\\\" aria-label=\\\"Next\\\"\\r\\n             (click)=\\\"changeToNextPage($event)\\\">\\r\\n          </a>\\r\\n        </li>\\r\\n        <li class=\\\"page-item\\\" [ngClass]=\\\"isRightPaginationDisabled ? 'disabled' : ''\\\">\\r\\n          <a class=\\\"page-link icon-seek-end fa fa-lg fa-angle-double-right\\\" aria-label=\\\"Last\\\"\\r\\n             (click)=\\\"changeToLastPage($event)\\\">\\r\\n          </a>\\r\\n        </li>\\r\\n      </ul>\\r\\n    </nav>\\r\\n  </div>\\r\\n  <span class=\\\"slick-pagination-settings\\\">\\r\\n    <select id=\\\"items-per-page-label\\\" (change)=\\\"changeItemPerPage($event)\\\">\\r\\n      <option value=\\\"{{pageSize}}\\\" [selected]=\\\"pageSize === itemsPerPage\\\" *ngFor=\\\"let pageSize of availablePageSizes\\\">{{pageSize}}</option>\\r\\n    </select>\\r\\n    <span>{{textItemsPerPage}}</span>,\\r\\n    <span class=\\\"slick-pagination-count\\\">\\r\\n      <span *ngIf=\\\"totalItems\\\">\\r\\n        <span class=\\\"page-info-from-to\\\">\\r\\n          <span data-test=\\\"item-from\\\">{{dataFrom}}</span>-<span data-test=\\\"item-to\\\">{{dataTo}}</span>\\r\\n          {{textOf}}\\r\\n        </span>\\r\\n      </span>\\r\\n      <span class=\\\"page-info-total-items\\\">\\r\\n        <span data-test=\\\"total-items\\\">{{totalItems}}</span> {{textItems}}\\r\\n      </span>\\r\\n    </span>\\r\\n  </span>\\r\\n</div>\\r\\n\";","\r\nimport { Optional } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport * as DOMPurify from 'dompurify';\r\n\r\nimport { EmptyWarning, GridOption } from '../models/index';\r\n\r\nexport class SlickEmptyWarningComponent {\r\n  private _grid: any;\r\n  private _warningLeftElement?: HTMLDivElement;\r\n  private _warningRightElement?: HTMLDivElement;\r\n  private isPreviouslyShown = false;\r\n  private defHeightPane?: number;\r\n  private defHeightRow?: number;\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  get gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  set grid(slickGrid: any) {\r\n    this._grid = slickGrid;\r\n  }\r\n\r\n  constructor(@Optional() private translate?: TranslateService) { }\r\n\r\n  dispose() {\r\n    if (this._warningLeftElement && this._warningLeftElement.remove) {\r\n      this._warningLeftElement.remove();\r\n    }\r\n    if (this._warningRightElement && this._warningRightElement.remove) {\r\n      this._warningRightElement.remove();\r\n    }\r\n    this._warningLeftElement = undefined;\r\n    this._warningRightElement = undefined;\r\n  }\r\n\r\n  /**\r\n   * Display a warning of empty data when the filtered dataset is empty\r\n   * NOTE: to make this code reusable, you could (should) move this code into a utility service\r\n   * @param isShowing - are we showing the message?\r\n   * @param options - any styling options you'd like to pass like the text color\r\n   */\r\n  showEmptyDataMessage(isShowing = true, options?: EmptyWarning): boolean {\r\n    if (!this._grid || !this.gridOptions || this.isPreviouslyShown === isShowing) {\r\n      return false;\r\n    }\r\n\r\n    // keep reference so that we won't re-render the warning if the status is the same\r\n    this.isPreviouslyShown = isShowing;\r\n\r\n    const gridUid = this._grid && this._grid.getUID();\r\n    const defaultMessage = 'No data to display.';\r\n    const mergedOptions: EmptyWarning = { message: defaultMessage, ...this.gridOptions.emptyDataWarning, ...options };\r\n    const emptyDataClassName = mergedOptions && mergedOptions.className || 'slick-empty-data-warning';\r\n    this._warningLeftElement = document.querySelector<HTMLDivElement>(`.${gridUid} .${emptyDataClassName}`) as HTMLDivElement;\r\n    const gridCanvasLeftElm = document.querySelector<HTMLDivElement>(`.${gridUid} .grid-canvas.grid-canvas-left`);\r\n    const gridCanvasRightElm = document.querySelector<HTMLDivElement>(`.${gridUid} .grid-canvas.grid-canvas-right`);\r\n    const leftElementMarginLeft = mergedOptions.leftViewportMarginLeft || 0;\r\n    const rightElementMarginLeft = mergedOptions.rightViewportMarginLeft || 0;\r\n    const leftElementFrozenMarginLeft = mergedOptions.frozenLeftViewportMarginLeft || 0;\r\n    const rightElementFrozenMarginLeft = mergedOptions.frozenRightViewportMarginLeft || 0;\r\n    const isFrozenGrid = (this.gridOptions.frozenColumn !== undefined && this.gridOptions.frozenColumn >= 0);\r\n    const leftViewportMarginLeft = typeof leftElementMarginLeft === 'string' ? leftElementMarginLeft : `${leftElementMarginLeft}px`;\r\n    const rightViewportMarginLeft = typeof rightElementMarginLeft === 'string' ? rightElementMarginLeft : `${rightElementMarginLeft}px`;\r\n\r\n    // when dealing with a grid that has \"autoHeight\" option, we need to override 2 height that get miscalculated\r\n    // that is because it is not aware that we are adding this slick empty element in this grid DOM\r\n    if (this.gridOptions.autoHeight) {\r\n      const leftPaneElm = document.querySelector<HTMLDivElement>('.slick-pane.slick-pane-top.slick-pane-left');\r\n\r\n      // get default values\r\n      if (leftPaneElm && gridCanvasLeftElm) {\r\n        this.defHeightPane = parseInt(leftPaneElm.style.height || '', 10); // this field auto calc by row height\r\n\r\n        // get row height of each feature when enabled (rowHeight will always be defined because that is cell height)\r\n        this.defHeightRow = this.gridOptions.rowHeight;\r\n        const filterRowHeight = (this.gridOptions.enableFiltering ? this.gridOptions.headerRowHeight : 0) as number;\r\n        const preHeaderRowHeight = (this.gridOptions.createPreHeaderPanel ? this.gridOptions.preHeaderPanelHeight : 0) as number;\r\n\r\n        if (isShowing) {\r\n          // use when height with rows more that 100px\r\n          // AutoHeight option collapse dataview to 100px when show message without data in huge grid\r\n          // (default autoHeight for message - 100px you can add as param if needed)\r\n          let leftPaneMinHeight = (this.defHeightPane !== undefined && this.defHeightPane < 100) ? this.defHeightPane : 100;\r\n          leftPaneMinHeight += filterRowHeight + preHeaderRowHeight; // add preHeader & filter height when enabled\r\n          leftPaneElm.style.minHeight = `${leftPaneMinHeight}px`;\r\n          gridCanvasLeftElm.style.minHeight = `${this.defHeightRow}px`;\r\n        }\r\n      }\r\n    }\r\n\r\n    // warning message could come from a translation key or by the warning options\r\n    let warningMessage = mergedOptions.message;\r\n    if (this.gridOptions.enableTranslate && this.translate && this.translate.instant && mergedOptions && mergedOptions.messageKey) {\r\n      warningMessage = this.translate.instant(mergedOptions.messageKey);\r\n    }\r\n\r\n    if (!this._warningLeftElement && gridCanvasLeftElm && gridCanvasRightElm) {\r\n      const sanitizedOptions = this.gridOptions && this.gridOptions.sanitizeHtmlOptions || {};\r\n\r\n      // sanitize any unauthorized html tags like script and others\r\n      // for the remaining allowed tags we'll permit all attributes\r\n      const sanitizedText = (DOMPurify.sanitize(warningMessage, sanitizedOptions) || '').toString();\r\n\r\n      this._warningLeftElement = document.createElement('div');\r\n      this._warningLeftElement.classList.add(emptyDataClassName);\r\n      this._warningLeftElement.classList.add('left');\r\n      this._warningLeftElement.innerHTML = sanitizedText;\r\n\r\n      // clone the warning element and add the \"right\" class to it so we can distinguish\r\n      this._warningRightElement = this._warningLeftElement.cloneNode(true) as HTMLDivElement;\r\n      this._warningRightElement.classList.add('right');\r\n\r\n      // append both warning elements to both left/right canvas\r\n      gridCanvasRightElm.appendChild(this._warningRightElement);\r\n      gridCanvasLeftElm.appendChild(this._warningLeftElement);\r\n    }\r\n\r\n    // if we did find the Slick-Empty-Warning element then we'll display/hide at the grid position with some margin offsets (we need to position under the headerRow and filterRow)\r\n    // when using a frozen/pinned grid, we also have extra options to hide left/right message\r\n    if (this._warningLeftElement) {\r\n      // display/hide right/left messages\r\n      let leftDisplay = isShowing ? 'block' : 'none';\r\n      if (isFrozenGrid && isShowing) {\r\n        leftDisplay = (mergedOptions.hideFrozenLeftWarning) ? 'none' : 'block';\r\n      }\r\n      this._warningLeftElement.style.display = leftDisplay;\r\n\r\n      // use correct left margin (defaults to 40% on regular grid or 10px on frozen grid)\r\n      const leftFrozenMarginLeft = typeof leftElementFrozenMarginLeft === 'string' ? leftElementFrozenMarginLeft : `${leftElementFrozenMarginLeft}px`;\r\n      this._warningLeftElement.style.marginLeft = isFrozenGrid ? leftFrozenMarginLeft : leftViewportMarginLeft;\r\n    }\r\n\r\n    if (this._warningRightElement) {\r\n      // use correct left margin (defaults to 40% on regular grid or 10px on frozen grid)\r\n      let rightDisplay = isShowing ? 'block' : 'none';\r\n      if (isFrozenGrid && isShowing) {\r\n        rightDisplay = (mergedOptions.hideFrozenRightWarning) ? 'none' : 'block';\r\n      }\r\n      this._warningRightElement.style.display = rightDisplay;\r\n\r\n      // use correct left margin (defaults to 40% on regular grid or 10px on frozen grid)\r\n      const rightFrozenMarginLeft = typeof rightElementFrozenMarginLeft === 'string' ? rightElementFrozenMarginLeft : `${rightElementFrozenMarginLeft}px`;\r\n      this._warningRightElement.style.marginLeft = isFrozenGrid ? rightFrozenMarginLeft : rightViewportMarginLeft;\r\n    }\r\n\r\n    return isShowing;\r\n  }\r\n}\r\n","// import 3rd party vendor libs\r\n// only import the necessary core lib, each will be imported on demand when enabled (via require)\r\nimport 'jquery-ui-dist/jquery-ui';\r\nimport 'slickgrid/lib/jquery.event.drag-2.3.0';\r\nimport 'slickgrid/lib/jquery.mousewheel';\r\nimport 'slickgrid/slick.core';\r\nimport 'slickgrid/slick.grid';\r\nimport 'slickgrid/slick.dataview';\r\nimport 'slickgrid/slick.groupitemmetadataprovider';\r\n\r\n// ...then everything else...\r\nimport { AfterViewInit, ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, Output, OnDestroy, OnInit, Optional } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { isObservable, Observable, Subscription } from 'rxjs';\r\n\r\nimport { Constants } from '../constants';\r\nimport { GlobalGridOptions } from './../global-grid-options';\r\nimport { emptyElement, titleCase, unsubscribeAllObservables } from './../services/utilities';\r\nimport { executeBackendProcessesCallback, onBackendError, refreshBackendDataset } from '../services/backend-utilities';\r\nimport {\r\n  AngularGridInstance,\r\n  BackendServiceApi,\r\n  BackendServiceOption,\r\n  Column,\r\n  ColumnEditor,\r\n  CustomFooterOption,\r\n  DataViewOption,\r\n  GraphqlPaginatedResult,\r\n  GraphqlResult,\r\n  GridOption,\r\n  GridStateChange,\r\n  GridStateType,\r\n  Locale,\r\n  Metrics,\r\n  Pagination,\r\n  ServicePagination,\r\n  SlickEventHandler,\r\n} from './../models/index';\r\nimport { FilterFactory } from '../filters/filterFactory';\r\nimport { autoAddEditorFormatterToColumnsWithEditor } from './slick-vanilla-utilities';\r\nimport { SlickgridConfig } from '../slickgrid-config';\r\nimport { SlickEmptyWarningComponent } from './slick-empty-warning.component';\r\n\r\n// Services\r\nimport { AngularUtilService } from '../services/angularUtil.service';\r\nimport { ExcelExportService } from '../services/excelExport.service';\r\nimport { ExportService } from './../services/export.service';\r\nimport { ExtensionService } from '../services/extension.service';\r\nimport { ExtensionUtility } from '../extensions/extensionUtility';\r\nimport { FilterService } from './../services/filter.service';\r\nimport { GraphqlService } from './../services/graphql.service';\r\nimport { GridEventService } from './../services/gridEvent.service';\r\nimport { GridService } from './../services/grid.service';\r\nimport { GridStateService } from './../services/gridState.service';\r\nimport { GroupingAndColspanService } from './../services/groupingAndColspan.service';\r\nimport { PaginationService } from '../services/pagination.service';\r\nimport { ResizerService } from './../services/resizer.service';\r\nimport { SharedService } from '../services/shared.service';\r\nimport { SortService } from './../services/sort.service';\r\nimport { TreeDataService } from './../services/treeData.service';\r\n\r\n// Extensions (SlickGrid Controls & Plugins)\r\nimport { AutoTooltipExtension } from '../extensions/autoTooltipExtension';\r\nimport { CellExternalCopyManagerExtension } from '../extensions/cellExternalCopyManagerExtension';\r\nimport { CellMenuExtension } from '../extensions/cellMenuExtension';\r\nimport { CheckboxSelectorExtension } from '../extensions/checkboxSelectorExtension';\r\nimport { ColumnPickerExtension } from '../extensions/columnPickerExtension';\r\nimport { ContextMenuExtension } from '../extensions/contextMenuExtension';\r\nimport { DraggableGroupingExtension } from '../extensions/draggableGroupingExtension';\r\nimport { GridMenuExtension } from '../extensions/gridMenuExtension';\r\nimport { GroupItemMetaProviderExtension } from '../extensions/groupItemMetaProviderExtension';\r\nimport { HeaderButtonExtension } from '../extensions/headerButtonExtension';\r\nimport { HeaderMenuExtension } from '../extensions/headerMenuExtension';\r\nimport { RowDetailViewExtension } from '../extensions/rowDetailViewExtension';\r\nimport { RowMoveManagerExtension } from '../extensions/rowMoveManagerExtension';\r\nimport { RowSelectionExtension } from '../extensions/rowSelectionExtension';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\ndeclare const $: any;\r\n\r\nconst slickgridEventPrefix = 'sg';\r\n\r\n@Component({\r\n  selector: 'angular-slickgrid',\r\n  templateUrl: './angular-slickgrid.component.html',\r\n  providers: [\r\n    // make everything transient (non-singleton)\r\n    AngularUtilService,\r\n    AutoTooltipExtension,\r\n    CellExternalCopyManagerExtension,\r\n    CellMenuExtension,\r\n    CheckboxSelectorExtension,\r\n    ColumnPickerExtension,\r\n    ContextMenuExtension,\r\n    DraggableGroupingExtension,\r\n    ExcelExportService,\r\n    ExtensionService,\r\n    ExportService,\r\n    ExtensionUtility,\r\n    FilterFactory,\r\n    FilterService,\r\n    GraphqlService,\r\n    GridEventService,\r\n    GridMenuExtension,\r\n    GridService,\r\n    GridStateService,\r\n    GroupingAndColspanService,\r\n    GroupItemMetaProviderExtension,\r\n    HeaderButtonExtension,\r\n    HeaderMenuExtension,\r\n    PaginationService,\r\n    ResizerService,\r\n    RowDetailViewExtension,\r\n    RowMoveManagerExtension,\r\n    RowSelectionExtension,\r\n    SharedService,\r\n    SortService,\r\n    SlickgridConfig,\r\n    TreeDataService,\r\n  ]\r\n})\r\nexport class AngularSlickgridComponent implements AfterViewInit, OnDestroy, OnInit {\r\n  private _dataset?: any[] | null;\r\n  private _columnDefinitions!: Column[];\r\n  private _currentDatasetLength = 0;\r\n  private _eventHandler: SlickEventHandler = new Slick.EventHandler();\r\n  private _angularGridInstances: AngularGridInstance | undefined;\r\n  private _fixedHeight?: number | null;\r\n  private _fixedWidth?: number | null;\r\n  private _hideHeaderRowAfterPageLoad = false;\r\n  private _isGridInitialized = false;\r\n  private _isDatasetInitialized = false;\r\n  private _isDatasetHierarchicalInitialized = false;\r\n  private _isLeftFooterOriginallyEmpty = false;\r\n  private _isLeftFooterDisplayingSelectionRowCount = false;\r\n  private _isPaginationInitialized = false;\r\n  private _isLocalGrid = true;\r\n  private _paginationOptions: Pagination | undefined;\r\n  private _selectedRowCount = 0;\r\n  private slickEmptyWarning: SlickEmptyWarningComponent;\r\n  dataView: any | null;\r\n  grid: any | null;\r\n  gridHeightString?: string;\r\n  gridWidthString?: string;\r\n  groupingDefinition: any = {};\r\n  groupItemMetadataProvider: any;\r\n  backendServiceApi?: BackendServiceApi;\r\n  customFooterOptions?: CustomFooterOption;\r\n  locales!: Locale;\r\n  metrics?: Metrics;\r\n  showCustomFooter = false;\r\n  showPagination = false;\r\n  totalItems = 0;\r\n  paginationData?: {\r\n    gridOptions: GridOption;\r\n  };\r\n  subscriptions: Subscription[] = [];\r\n\r\n  @Output() onAngularGridCreated = new EventEmitter<AngularGridInstance>();\r\n  @Output() onDataviewCreated = new EventEmitter<any>();\r\n  @Output() onGridCreated = new EventEmitter<any>();\r\n  @Output() onGridInitialized = new EventEmitter<any>();\r\n  @Output() onBeforeGridCreate = new EventEmitter<boolean>();\r\n  @Output() onBeforeGridDestroy = new EventEmitter<any>();\r\n  @Output() onAfterGridDestroyed = new EventEmitter<boolean>();\r\n  @Output() onGridStateChanged = new EventEmitter<GridStateChange>();\r\n  @Output() onGridBeforeExportToFile = this.exportService.onGridBeforeExportToFile;\r\n  @Output() onGridAfterExportToFile = this.exportService.onGridAfterExportToFile;\r\n  @Output() onGridBeforeExportToExcel = this.excelExportService.onGridBeforeExportToExcel;\r\n  @Output() onGridAfterExportToExcel = this.excelExportService.onGridAfterExportToExcel;\r\n  @Input() customDataView: any;\r\n  @Input() gridId: string = '';\r\n  @Input() gridOptions!: GridOption;\r\n\r\n  @Input()\r\n  get paginationOptions(): Pagination | undefined {\r\n    return this._paginationOptions;\r\n  }\r\n  set paginationOptions(options: Pagination | undefined) {\r\n    if (options && this._paginationOptions) {\r\n      this._paginationOptions = { ...this._paginationOptions, ...options };\r\n    } else {\r\n      this._paginationOptions = options;\r\n    }\r\n    this.gridOptions.pagination = this._paginationOptions;\r\n    this.paginationService.updateTotalItems(options && options.totalItems || 0, true);\r\n  }\r\n\r\n  @Input()\r\n  set gridHeight(height: number) {\r\n    this._fixedHeight = height;\r\n  }\r\n  @Input()\r\n  set gridWidth(width: number) {\r\n    this._fixedWidth = width;\r\n  }\r\n\r\n  @Input()\r\n  set columnDefinitions(columnDefinitions: Column[]) {\r\n    this._columnDefinitions = columnDefinitions;\r\n    if (this._isGridInitialized) {\r\n      this.updateColumnDefinitionsList(columnDefinitions);\r\n    }\r\n    if (columnDefinitions.length > 0) {\r\n      this.copyColumnWidthsReference(columnDefinitions);\r\n    }\r\n  }\r\n  get columnDefinitions(): Column[] {\r\n    return this._columnDefinitions;\r\n  }\r\n\r\n  @Input()\r\n  get dataset(): any[] {\r\n    return this.dataView.getItems();\r\n  }\r\n  set dataset(newDataset: any[]) {\r\n    const prevDatasetLn = this._currentDatasetLength;\r\n    let data = newDataset;\r\n\r\n    // when Tree Data is enabled and we don't yet have the hierarchical dataset filled, we can force a convert & sort of the array\r\n    if (this.grid && this.gridOptions?.enableTreeData && Array.isArray(newDataset) && (newDataset.length > 0 || newDataset.length !== prevDatasetLn)) {\r\n      this._isDatasetHierarchicalInitialized = false;\r\n      data = this.sortTreeDataset(newDataset);\r\n    }\r\n    this._dataset = data;\r\n    this.refreshGridData(data || []);\r\n    this._currentDatasetLength = newDataset.length;\r\n  }\r\n\r\n  @Input()\r\n  get datasetHierarchical(): any[] | undefined {\r\n    return this.sharedService.hierarchicalDataset;\r\n  }\r\n  set datasetHierarchical(newHierarchicalDataset: any[] | undefined) {\r\n    const prevFlatDatasetLn = this._currentDatasetLength;\r\n    this.sharedService.hierarchicalDataset = newHierarchicalDataset;\r\n\r\n    if (newHierarchicalDataset && this.columnDefinitions && this.filterService?.clearFilters) {\r\n      this.filterService.clearFilters();\r\n    }\r\n\r\n    // when a hierarchical dataset is set afterward, we can reset the flat dataset and call a tree data sort that will overwrite the flat dataset\r\n    if (newHierarchicalDataset && this.grid && this.sortService?.processTreeDataInitialSort) {\r\n      this.dataView.setItems([], this.gridOptions.datasetIdPropertyName);\r\n      this.sortService.processTreeDataInitialSort();\r\n\r\n      // we also need to reset/refresh the Tree Data filters because if we inserted new item(s) then it might not show up without doing this refresh\r\n      // however we need 1 cpu cycle before having the DataView refreshed, so we need to wrap this check in a setTimeout\r\n      setTimeout(() => {\r\n        const flatDatasetLn = this.dataView.getItemCount();\r\n        if (flatDatasetLn !== prevFlatDatasetLn && flatDatasetLn > 0) {\r\n          this.filterService.refreshTreeDataFilters();\r\n        }\r\n      });\r\n    }\r\n\r\n    this._isDatasetHierarchicalInitialized = true;\r\n  }\r\n\r\n  get elementRef(): ElementRef {\r\n    return this.elm;\r\n  }\r\n\r\n  constructor(\r\n    private readonly cd: ChangeDetectorRef,\r\n    private readonly elm: ElementRef,\r\n    private readonly excelExportService: ExcelExportService,\r\n    private readonly exportService: ExportService,\r\n    private readonly extensionService: ExtensionService,\r\n    private readonly extensionUtility: ExtensionUtility,\r\n    private readonly filterService: FilterService,\r\n    private readonly gridEventService: GridEventService,\r\n    private readonly gridService: GridService,\r\n    private readonly gridStateService: GridStateService,\r\n    private readonly groupingAndColspanService: GroupingAndColspanService,\r\n    private readonly paginationService: PaginationService,\r\n    private readonly resizer: ResizerService,\r\n    private readonly sharedService: SharedService,\r\n    private readonly sortService: SortService,\r\n    private readonly treeDataService: TreeDataService,\r\n    @Optional() private readonly translate: TranslateService,\r\n    @Inject('config') private forRootConfig: GridOption\r\n  ) {\r\n    this.slickEmptyWarning = new SlickEmptyWarningComponent(this.translate);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.initialization();\r\n    this._isGridInitialized = true;\r\n\r\n    // user must provide a \"gridHeight\" or use \"autoResize: true\" in the grid options\r\n    if (!this._fixedHeight && !this.gridOptions.enableAutoResize) {\r\n      throw new Error(\r\n        `[Angular-Slickgrid] requires a \"grid-height\" or the \"enableAutoResize\" grid option to be enabled.\r\n        Without that the grid will seem empty while in fact it just does not have any height define.`\r\n      );\r\n    }\r\n\r\n    // recheck the empty warning message after grid is shown so that it works in every use case\r\n    if (this.gridOptions && this.gridOptions.enableEmptyDataWarningMessage && Array.isArray(this.dataset)) {\r\n      const finalTotalCount = this.dataset.length;\r\n      this.displayEmptyDataWarning(finalTotalCount < 1);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.onBeforeGridCreate.emit(true);\r\n    if (this.gridOptions && !this.gridOptions.enableAutoResize && (this._fixedHeight || this._fixedWidth)) {\r\n      this.gridHeightString = `${this._fixedHeight}px`;\r\n      this.gridWidthString = `${this._fixedWidth}px`;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.onBeforeGridDestroy.emit(this.grid);\r\n    this.destroy();\r\n    this.onAfterGridDestroyed.emit(true);\r\n  }\r\n\r\n  destroy(shouldEmptyDomElementContainer = false) {\r\n    this.extensionService.dispose();\r\n    this.filterService.dispose();\r\n    this.gridEventService.dispose();\r\n    this.gridStateService.dispose();\r\n    this.gridService.dispose();\r\n    this.groupingAndColspanService.dispose();\r\n    this.paginationService.dispose();\r\n    this.resizer.dispose();\r\n    this.sortService.dispose();\r\n    this.treeDataService.dispose();\r\n\r\n    // dispose the Components\r\n    this.slickEmptyWarning.dispose();\r\n\r\n    if (this._eventHandler && this._eventHandler.unsubscribeAll) {\r\n      this._eventHandler.unsubscribeAll();\r\n    }\r\n    if (this.dataView) {\r\n      if (this.dataView && this.dataView.setItems) {\r\n        this.dataView.setItems([]);\r\n      }\r\n      if (this.dataView.destroy) {\r\n        this.dataView.destroy();\r\n      }\r\n    }\r\n    if (this.grid && this.grid.destroy) {\r\n      this.grid.destroy(shouldEmptyDomElementContainer);\r\n    }\r\n\r\n    if (this.backendServiceApi) {\r\n      for (const prop of Object.keys(this.backendServiceApi)) {\r\n        delete this.backendServiceApi[prop as keyof BackendServiceApi];\r\n      }\r\n      this.backendServiceApi = undefined;\r\n    }\r\n    for (const prop of Object.keys(this.columnDefinitions)) {\r\n      (this.columnDefinitions as any)[prop] = null;\r\n    }\r\n    for (const prop of Object.keys(this.sharedService)) {\r\n      (this.sharedService as any)[prop] = null;\r\n    }\r\n\r\n    // we could optionally also empty the content of the grid container DOM element\r\n    if (shouldEmptyDomElementContainer) {\r\n      this.emptyGridContainerElm();\r\n    }\r\n\r\n    // also unsubscribe all RxJS subscriptions\r\n    this.subscriptions = unsubscribeAllObservables(this.subscriptions);\r\n\r\n    this._dataset = null;\r\n    this.datasetHierarchical = undefined;\r\n    this._columnDefinitions = [];\r\n    this._angularGridInstances = undefined;\r\n    this.grid = null;\r\n    this.dataView = null;\r\n  }\r\n\r\n  emptyGridContainerElm() {\r\n    const gridContainerId = this.gridOptions?.gridContainerId ?? 'grid1';\r\n    const gridContainerElm = document.querySelector(gridContainerId);\r\n    emptyElement(gridContainerElm);\r\n  }\r\n\r\n  /** Dispatch of Custom Event, which by default will bubble & is cancelable */\r\n  dispatchCustomEvent(eventName: string, data?: any, isBubbling: boolean = true, isCancelable: boolean = true) {\r\n    const eventInit: CustomEventInit = { bubbles: isBubbling, cancelable: isCancelable };\r\n    if (data) {\r\n      eventInit.detail = data;\r\n    }\r\n    return this.elm.nativeElement.dispatchEvent(new CustomEvent(eventName, eventInit));\r\n  }\r\n\r\n  /**\r\n   * Define our internal Post Process callback, it will execute internally after we get back result from the Process backend call\r\n   * For now, this is GraphQL Service ONLY feature and it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\r\n   */\r\n  createBackendApiInternalPostProcessCallback(gridOptions: GridOption) {\r\n    const backendApi = gridOptions && gridOptions.backendServiceApi;\r\n    if (backendApi && backendApi.service) {\r\n      // internalPostProcess only works (for now) with a GraphQL Service, so make sure it is of that type\r\n      if (backendApi.service instanceof GraphqlService || typeof backendApi.service.getDatasetName === 'function') {\r\n        backendApi.internalPostProcess = (processResult: GraphqlResult | GraphqlPaginatedResult) => {\r\n          const datasetName = (backendApi && backendApi.service && typeof backendApi.service.getDatasetName === 'function') ? backendApi.service.getDatasetName() : '';\r\n          if (processResult && processResult.data && processResult.data[datasetName]) {\r\n            const data = processResult.data[datasetName].hasOwnProperty('nodes') ? (processResult as GraphqlPaginatedResult).data[datasetName].nodes : (processResult as GraphqlResult).data[datasetName];\r\n            const totalCount = processResult.data[datasetName].hasOwnProperty('totalCount') ? (processResult as GraphqlPaginatedResult).data[datasetName].totalCount : (processResult as GraphqlResult).data[datasetName].length;\r\n            this.refreshGridData(data, totalCount || 0);\r\n          }\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On a Pagination changed, we will trigger a Grid State changed with the new pagination info\r\n   * Also if we use Row Selection or the Checkbox Selector, we need to reset any selection\r\n   */\r\n  paginationChanged(pagination: ServicePagination) {\r\n    const isSyncGridSelectionEnabled = this.gridStateService && this.gridStateService.needToPreserveRowSelection() || false;\r\n    if (!isSyncGridSelectionEnabled && (this.gridOptions.enableRowSelection || this.gridOptions.enableCheckboxSelector)) {\r\n      this.gridService.setSelectedRows([]);\r\n    }\r\n\r\n    const { pageNumber, pageSize } = pagination;\r\n    if (this.sharedService) {\r\n      if (pageSize) {\r\n        this.sharedService.currentPagination = { pageNumber: pageNumber as number, pageSize: pageSize as number };\r\n      }\r\n    }\r\n    this.gridStateService.onGridStateChanged.next({\r\n      change: { newValues: { pageNumber: pageNumber as number, pageSize: pageSize as number }, type: GridStateType.pagination },\r\n      gridState: this.gridStateService.getCurrentGridState()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well\r\n   * @param dataset\r\n   */\r\n  refreshGridData(dataset: any[], totalCount?: number) {\r\n    if (this.gridOptions && this.gridOptions.enableEmptyDataWarningMessage && Array.isArray(dataset)) {\r\n      const finalTotalCount = totalCount || dataset.length;\r\n      this.displayEmptyDataWarning(finalTotalCount < 1);\r\n    }\r\n\r\n    if (Array.isArray(dataset) && this.grid && this.dataView && typeof this.dataView.setItems === 'function') {\r\n      this.dataView.setItems(dataset, this.gridOptions.datasetIdPropertyName);\r\n      if (!this.gridOptions.backendServiceApi && !this.gridOptions.enableTreeData) {\r\n        this.dataView.reSort();\r\n      }\r\n\r\n      if (dataset.length > 0) {\r\n        if (!this._isDatasetInitialized) {\r\n          this.loadFilterPresetsWhenDatasetInitialized();\r\n\r\n          if (this.gridOptions.enableCheckboxSelector) {\r\n            this.loadRowSelectionPresetWhenExists();\r\n          }\r\n        }\r\n        this._isDatasetInitialized = true;\r\n      }\r\n\r\n      if (dataset) {\r\n        this.grid.invalidate();\r\n      }\r\n\r\n      // display the Pagination component only after calling this refresh data first, we call it here so that if we preset pagination page number it will be shown correctly\r\n      this.showPagination = (this.gridOptions && (this.gridOptions.enablePagination || (this.gridOptions.backendServiceApi && this.gridOptions.enablePagination === undefined))) ? true : false;\r\n\r\n      if (this.gridOptions && this.gridOptions.backendServiceApi && this.gridOptions.pagination) {\r\n        const paginationOptions = this.setPaginationOptionsWhenPresetDefined(this.gridOptions, this._paginationOptions as Pagination);\r\n        // when we have a totalCount use it, else we'll take it from the pagination object\r\n        // only update the total items if it's different to avoid refreshing the UI\r\n        const totalRecords = totalCount !== undefined ? totalCount : (this.gridOptions && this.gridOptions.pagination && this.gridOptions.pagination.totalItems);\r\n        if (totalRecords !== this.totalItems) {\r\n          this.totalItems = totalRecords as number;\r\n        }\r\n\r\n        // initialize the Pagination Service with new pagination options (which might have presets)\r\n        if (!this._isPaginationInitialized) {\r\n          this.initializePaginationService(paginationOptions);\r\n        } else {\r\n          // update the pagination service with the new total\r\n          this.paginationService.totalItems = this.totalItems;\r\n        }\r\n      }\r\n\r\n      // resize the grid inside a slight timeout, in case other DOM element changed prior to the resize (like a filter/pagination changed)\r\n      if (this.grid && this.gridOptions.enableAutoResize) {\r\n        const delay = this.gridOptions.autoResize && this.gridOptions.autoResize.delay;\r\n        this.resizer.resizeGrid(delay || 10);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if there's any Pagination Presets defined in the Grid Options,\r\n   * if there are then load them in the paginationOptions object\r\n   */\r\n  setPaginationOptionsWhenPresetDefined(gridOptions: GridOption, paginationOptions: Pagination): Pagination {\r\n    if (gridOptions.presets && gridOptions.presets.pagination && gridOptions.pagination) {\r\n      paginationOptions.pageSize = gridOptions.presets.pagination.pageSize;\r\n      paginationOptions.pageNumber = gridOptions.presets.pagination.pageNumber;\r\n    }\r\n    return paginationOptions;\r\n  }\r\n\r\n  /**\r\n   * Dynamically change or update the column definitions list.\r\n   * We will re-render the grid so that the new header and data shows up correctly.\r\n   * If using i18n, we also need to trigger a re-translate of the column headers\r\n   */\r\n  updateColumnDefinitionsList(newColumnDefinitions: Column[]) {\r\n    // map/swap the internal library Editor to the SlickGrid Editor factory\r\n    newColumnDefinitions = this.swapInternalEditorToSlickGridFactoryEditor(newColumnDefinitions);\r\n\r\n    if (this.gridOptions.enableTranslate) {\r\n      this.extensionService.translateColumnHeaders(false, newColumnDefinitions);\r\n    } else {\r\n      this.extensionService.renderColumnHeaders(newColumnDefinitions, true);\r\n    }\r\n\r\n    if (this.gridOptions?.enableAutoSizeColumns) {\r\n      this.grid.autosizeColumns();\r\n    } else if (this.gridOptions?.enableAutoResizeColumnsByCellContent && this.resizer?.resizeColumnsByCellContent) {\r\n      this.resizer.resizeColumnsByCellContent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show the filter row displayed on first row, we can optionally pass false to hide it.\r\n   * @param showing\r\n   */\r\n  showHeaderRow(showing = true) {\r\n    this.grid.setHeaderRowVisibility(showing, false);\r\n    if (showing === true && this._isGridInitialized) {\r\n      this.grid.setColumns(this.columnDefinitions);\r\n    }\r\n    return showing;\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Loop through all column definitions and copy the original optional `width` properties optionally provided by the user.\r\n   * We will use this when doing a resize by cell content, if user provided a `width` it won't override it.\r\n   */\r\n  private copyColumnWidthsReference(columnDefinitions: Column[]) {\r\n    columnDefinitions.forEach(col => col.originalWidth = col.width);\r\n  }\r\n\r\n  private displayEmptyDataWarning(showWarning = true) {\r\n    this.slickEmptyWarning.grid = this.grid;\r\n    this.slickEmptyWarning && this.slickEmptyWarning.showEmptyDataMessage(showWarning);\r\n  }\r\n\r\n  private bindDifferentHooks(grid: any, gridOptions: GridOption, dataView: any) {\r\n    // on locale change, we have to manually translate the Headers, GridMenu\r\n    if (this.translate && this.translate.onLangChange) {\r\n      // translate some of them on first load, then on each language change\r\n      if (gridOptions.enableTranslate) {\r\n        this.translateColumnHeaderTitleKeys();\r\n        this.translateColumnGroupKeys();\r\n        this.translateCustomFooterTexts();\r\n      }\r\n\r\n      this.subscriptions.push(\r\n        this.translate.onLangChange.subscribe(() => {\r\n          if (gridOptions.enableTranslate) {\r\n            this.extensionService.translateCellMenu();\r\n            this.extensionService.translateColumnHeaders();\r\n            this.extensionService.translateColumnPicker();\r\n            this.extensionService.translateContextMenu();\r\n            this.extensionService.translateGridMenu();\r\n            this.extensionService.translateHeaderMenu();\r\n            this.translateCustomFooterTexts();\r\n            this.translateColumnHeaderTitleKeys();\r\n            this.translateColumnGroupKeys();\r\n            if (gridOptions.createPreHeaderPanel && !gridOptions.enableDraggableGrouping) {\r\n              this.groupingAndColspanService.translateGroupingAndColSpan();\r\n            }\r\n          }\r\n        })\r\n      );\r\n    }\r\n\r\n    if (!this.customDataView) {\r\n      // bind external sorting (backend) when available or default onSort (dataView)\r\n      if (gridOptions.enableSorting) {\r\n        // bind external sorting (backend) unless specified to use the local one\r\n        if (gridOptions.backendServiceApi && !gridOptions.backendServiceApi.useLocalSorting) {\r\n          this.sortService.bindBackendOnSort(grid);\r\n        } else {\r\n          this.sortService.bindLocalOnSort(grid);\r\n        }\r\n      }\r\n\r\n      // bind external filter (backend) when available or default onFilter (dataView)\r\n      if (gridOptions.enableFiltering) {\r\n        this.filterService.init(grid);\r\n\r\n        // bind external filter (backend) unless specified to use the local one\r\n        if (gridOptions.backendServiceApi && !gridOptions.backendServiceApi.useLocalFiltering) {\r\n          this.filterService.bindBackendOnFilter(grid);\r\n        } else {\r\n          this.filterService.bindLocalOnFilter(grid);\r\n        }\r\n      }\r\n\r\n      // load any presets if any (after dataset is initialized)\r\n      this.loadColumnPresetsWhenDatasetInitialized();\r\n      this.loadFilterPresetsWhenDatasetInitialized();\r\n    }\r\n\r\n\r\n    // if user set an onInit Backend, we'll run it right away (and if so, we also need to run preProcess, internalPostProcess & postProcess)\r\n    if (gridOptions.backendServiceApi) {\r\n      const backendApi = gridOptions.backendServiceApi;\r\n\r\n      if (backendApi && backendApi.service && backendApi.service.init) {\r\n        backendApi.service.init(backendApi.options, gridOptions.pagination, this.grid);\r\n      }\r\n    }\r\n\r\n    // expose all Slick Grid Events through dispatch\r\n    for (const prop in grid) {\r\n      if (grid.hasOwnProperty(prop) && prop.startsWith('on')) {\r\n        this._eventHandler.subscribe(grid[prop], (event: Event, args: any) => {\r\n          return this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: event, args });\r\n        });\r\n      }\r\n    }\r\n\r\n    // expose all Slick DataView Events through dispatch\r\n    for (const prop in dataView) {\r\n      if (dataView.hasOwnProperty(prop) && prop.startsWith('on')) {\r\n        this._eventHandler.subscribe(dataView[prop], (event: Event, args: any) => {\r\n          return this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: event, args });\r\n        });\r\n      }\r\n    }\r\n\r\n    // expose GridState Service changes event through dispatch\r\n    this.subscriptions.push(\r\n      this.gridStateService.onGridStateChanged.subscribe((gridStateChange: GridStateChange) => {\r\n        this.onGridStateChanged.emit(gridStateChange);\r\n      })\r\n    );\r\n\r\n\r\n    // on cell click, mainly used with the columnDef.action callback\r\n    this.gridEventService.bindOnCellChange(grid, dataView);\r\n    this.gridEventService.bindOnClick(grid, dataView);\r\n\r\n    if (dataView && grid) {\r\n      // When data changes in the DataView, we need to refresh the metrics and/or display a warning if the dataset is empty\r\n      this._eventHandler.subscribe(dataView.onRowCountChanged, (_e: Event, args: any) => {\r\n        grid.invalidate();\r\n        this.handleOnItemCountChanged(args.current || 0, this.dataView.getItemCount());\r\n      });\r\n      this._eventHandler.subscribe(dataView.onSetItemsCalled, (_e: Event, args: any) => {\r\n        grid.invalidate();\r\n        this.handleOnItemCountChanged(this.dataView.getLength(), args.itemCount);\r\n\r\n        // when user has resize by content enabled, we'll force a full width calculation since we change our entire dataset\r\n        if (args.itemCount > 0 && (this.gridOptions.autosizeColumnsByCellContentOnFirstLoad || this.gridOptions.enableAutoResizeColumnsByCellContent)) {\r\n          this.resizer.resizeColumnsByCellContent(!this.gridOptions?.resizeByContentOnlyOnFirstLoad);\r\n        }\r\n      });\r\n\r\n      this._eventHandler.subscribe(dataView.onRowsChanged, (_e: Event, args: any) => {\r\n        // filtering data with local dataset will not always show correctly unless we call this updateRow/render\r\n        // also don't use \"invalidateRows\" since it destroys the entire row and as bad user experience when updating a row\r\n        // see commit: https://github.com/ghiscoding/Angular-Slickgrid/commit/bb62c0aa2314a5d61188ff005ccb564577f08805\r\n        if (gridOptions && gridOptions.enableFiltering && !gridOptions.enableRowDetailView) {\r\n          if (args && args.rows && Array.isArray(args.rows)) {\r\n            args.rows.forEach((row: any) => grid.updateRow(row));\r\n            grid.render();\r\n          }\r\n        }\r\n      });\r\n\r\n      // when column are reordered, we need to update the visibleColumn array\r\n      this._eventHandler.subscribe(grid.onColumnsReordered, (e: any, args: { impactedColumns: Column[]; grid: any; }) => {\r\n        this.sharedService.hasColumnsReordered = true;\r\n        this.sharedService.visibleColumns = args.impactedColumns;\r\n      });\r\n    }\r\n\r\n    // does the user have a colspan callback?\r\n    if (gridOptions && gridOptions.colspanCallback && dataView && dataView.getItem && dataView.getItemMetadata) {\r\n      dataView.getItemMetadata = (rowNumber: number) => {\r\n        let callbackResult = null;\r\n        if (gridOptions.colspanCallback && gridOptions.colspanCallback) {\r\n          callbackResult = gridOptions.colspanCallback(dataView.getItem(rowNumber));\r\n        }\r\n        return callbackResult;\r\n      };\r\n    }\r\n  }\r\n\r\n  private bindBackendCallbackFunctions(gridOptions: GridOption) {\r\n    const backendApi = gridOptions.backendServiceApi;\r\n    const backendApiService = backendApi && backendApi.service;\r\n    const serviceOptions: BackendServiceOption = backendApiService && backendApiService.options || {};\r\n    const isExecuteCommandOnInit = (!serviceOptions) ? false : ((serviceOptions && serviceOptions.hasOwnProperty('executeProcessCommandOnInit')) ? serviceOptions['executeProcessCommandOnInit'] : true);\r\n\r\n    if (backendApiService) {\r\n      // update backend filters (if need be) BEFORE the query runs (via the onInit command a few lines below)\r\n      // if user entered some any \"presets\", we need to reflect them all in the grid\r\n      if (gridOptions && gridOptions.presets) {\r\n        // Filters \"presets\"\r\n        if (backendApiService.updateFilters && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\r\n          backendApiService.updateFilters(gridOptions.presets.filters, true);\r\n        }\r\n        // Sorters \"presets\"\r\n        if (backendApiService.updateSorters && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\r\n          backendApiService.updateSorters(undefined, gridOptions.presets.sorters);\r\n        }\r\n        // Pagination \"presets\"\r\n        if (backendApiService.updatePagination && gridOptions.presets.pagination) {\r\n          const { pageNumber, pageSize } = gridOptions.presets.pagination;\r\n          backendApiService.updatePagination(pageNumber, pageSize);\r\n        }\r\n      } else {\r\n        const columnFilters = this.filterService.getColumnFilters();\r\n        if (columnFilters && backendApiService.updateFilters) {\r\n          backendApiService.updateFilters(columnFilters, false);\r\n        }\r\n      }\r\n\r\n      // execute onInit command when necessary\r\n      if (backendApi && backendApiService && (backendApi.onInit || isExecuteCommandOnInit)) {\r\n        const query = (typeof backendApiService.buildQuery === 'function') ? backendApiService.buildQuery() : '';\r\n        const process = (isExecuteCommandOnInit) ? (backendApi.process && backendApi.process(query) || null) : (backendApi.onInit && backendApi.onInit(query) || null);\r\n\r\n        // wrap this inside a setTimeout to avoid timing issue since the gridOptions needs to be ready before running this onInit\r\n        setTimeout(() => {\r\n          // keep start time & end timestamps then return these metrics after the process execution\r\n          const startTime = new Date();\r\n\r\n          // run any pre-process, if defined, for example a spinner\r\n          if (backendApi.preProcess) {\r\n            backendApi.preProcess();\r\n          }\r\n\r\n          // the processes can be Promises or Observables (like Angular HttpClient)\r\n          const totalItems = this.gridOptions && this.gridOptions.pagination && this.gridOptions.pagination.totalItems;\r\n          if (process instanceof Promise && process.then) {\r\n            process.then((processResult: GraphqlResult | GraphqlPaginatedResult | any) => executeBackendProcessesCallback(startTime, processResult, backendApi, totalItems))\r\n              .catch((error: any) => onBackendError(error, backendApi));\r\n          } else if (isObservable(process)) {\r\n            this.subscriptions.push(\r\n              process.subscribe(\r\n                (processResult: GraphqlResult | GraphqlPaginatedResult | any) => executeBackendProcessesCallback(startTime, processResult, backendApi, totalItems),\r\n                (error: any) => onBackendError(error, backendApi)\r\n              )\r\n            );\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private bindResizeHook(grid: any, options: GridOption) {\r\n    if ((options.autoFitColumnsOnFirstLoad && options.autosizeColumnsByCellContentOnFirstLoad) || (options.enableAutoSizeColumns && options.enableAutoResizeColumnsByCellContent)) {\r\n      throw new Error(`[Angular-Slickgrid] You cannot enable both autosize/fit viewport & resize by content, you must choose which resize technique to use. You can enable these 2 options (\"autoFitColumnsOnFirstLoad\" and \"enableAutoSizeColumns\") OR these other 2 options (\"autosizeColumnsByCellContentOnFirstLoad\" and \"enableAutoResizeColumnsByCellContent\").`);\r\n    }\r\n\r\n    // expand/autofit columns on first page load\r\n    if (grid && options.autoFitColumnsOnFirstLoad && options.enableAutoSizeColumns) {\r\n      grid.autosizeColumns();\r\n    }\r\n\r\n    // auto-resize grid on browser resize\r\n    if (this._fixedHeight || this._fixedWidth) {\r\n      this.resizer.init(grid, { height: this._fixedHeight as number, width: this._fixedWidth as number });\r\n    } else {\r\n      this.resizer.init(grid);\r\n    }\r\n    if (options.enableAutoResize) {\r\n      this.resizer.bindAutoResizeDataGrid();\r\n      if (grid && options.autoFitColumnsOnFirstLoad && options.enableAutoSizeColumns) {\r\n        grid.autosizeColumns();\r\n      }\r\n    }\r\n  }\r\n\r\n  private executeAfterDataviewCreated(grid: any, gridOptions: GridOption, dataView: any) {\r\n    // if user entered some Sort \"presets\", we need to reflect them all in the DOM\r\n    if (gridOptions.enableSorting) {\r\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.sorters)) {\r\n        this.sortService.loadGridSorters(gridOptions.presets.sorters);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** When data changes in the DataView, we'll refresh the metrics and/or display a warning if the dataset is empty */\r\n  private handleOnItemCountChanged(currentPageRowItemCount: number, totalItemCount: number) {\r\n    this._currentDatasetLength = totalItemCount;\r\n    this.metrics = {\r\n      startTime: new Date(),\r\n      endTime: new Date(),\r\n      itemCount: currentPageRowItemCount,\r\n      totalItemCount\r\n    };\r\n\r\n    // when using local (in-memory) dataset, we'll display a warning message when filtered data is empty\r\n    if (this._isLocalGrid && this.gridOptions && this.gridOptions.enableEmptyDataWarningMessage) {\r\n      this.displayEmptyDataWarning(currentPageRowItemCount === 0);\r\n    }\r\n  }\r\n\r\n  private initializePaginationService(paginationOptions: Pagination) {\r\n    if (this.gridOptions) {\r\n      this.paginationData = {\r\n        gridOptions: this.gridOptions,\r\n      };\r\n      this.paginationService.totalItems = this.totalItems;\r\n      this.paginationService.init(this.grid, this.dataView, paginationOptions, this.backendServiceApi);\r\n      this.subscriptions.push(\r\n        this.paginationService.onPaginationChanged.subscribe((changes: ServicePagination) => this.paginationChanged(changes)),\r\n        this.paginationService.onPaginationVisibilityChanged.subscribe((visibility: { visible: boolean }) => {\r\n          this.showPagination = visibility && visibility.visible || false;\r\n          if (this.gridOptions && this.gridOptions.backendServiceApi) {\r\n            refreshBackendDataset();\r\n          }\r\n        })\r\n      );\r\n      this._isPaginationInitialized = true;\r\n    }\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n  private initialization() {\r\n    // when detecting a frozen grid, we'll automatically enable the mousewheel scroll handler so that we can scroll from both left/right frozen containers\r\n    if (this.gridOptions && ((this.gridOptions.frozenRow !== undefined && this.gridOptions.frozenRow >= 0) || this.gridOptions.frozenColumn !== undefined && this.gridOptions.frozenColumn >= 0) && this.gridOptions.enableMouseWheelScrollHandler === undefined) {\r\n      this.gridOptions.enableMouseWheelScrollHandler = true;\r\n    }\r\n\r\n    // make sure the dataset is initialized (if not it will throw an error that it cannot getLength of null)\r\n    this._dataset = this._dataset || [];\r\n    this.gridOptions = this.mergeGridOptions(this.gridOptions);\r\n    this._paginationOptions = this.gridOptions.pagination;\r\n    this.locales = this.gridOptions?.locales ?? Constants.locales;\r\n    this.backendServiceApi = this.gridOptions?.backendServiceApi;\r\n    this.createBackendApiInternalPostProcessCallback(this.gridOptions);\r\n    this._isLocalGrid = !this.backendServiceApi; // considered a local grid if it doesn't have a backend service set\r\n    this._isLeftFooterOriginallyEmpty = !(this.gridOptions.customFooterOptions?.leftFooterText);\r\n\r\n    if (!this.customDataView) {\r\n      const dataviewInlineFilters = this.gridOptions.dataView && this.gridOptions.dataView.inlineFilters || false;\r\n      let dataViewOptions: DataViewOption = { inlineFilters: dataviewInlineFilters };\r\n\r\n      if (this.gridOptions.draggableGrouping || this.gridOptions.enableGrouping) {\r\n        this.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\r\n        this.sharedService.groupItemMetadataProvider = this.groupItemMetadataProvider;\r\n        dataViewOptions = { ...dataViewOptions, groupItemMetadataProvider: this.groupItemMetadataProvider };\r\n      }\r\n      this.dataView = new Slick.Data.DataView(dataViewOptions);\r\n    }\r\n\r\n    // for convenience to the user, we provide the property \"editor\" as an Angular-Slickgrid editor complex object\r\n    // however \"editor\" is used internally by SlickGrid for it's own Editor Factory\r\n    // so in our lib we will swap \"editor\" and copy it into a new property called \"internalColumnEditor\"\r\n    // then take back \"editor.model\" and make it the new \"editor\" so that SlickGrid Editor Factory still works\r\n    this._columnDefinitions = this.swapInternalEditorToSlickGridFactoryEditor(this._columnDefinitions);\r\n\r\n    // if the user wants to automatically add a Custom Editor Formatter, we need to call the auto add function again\r\n    if (this.gridOptions.autoAddCustomEditorFormatter) {\r\n      autoAddEditorFormatterToColumnsWithEditor(this._columnDefinitions, this.gridOptions.autoAddCustomEditorFormatter);\r\n    }\r\n\r\n\r\n    // save reference for all columns before they optionally become hidden/visible\r\n    this.sharedService.allColumns = this._columnDefinitions;\r\n    this.sharedService.visibleColumns = this._columnDefinitions;\r\n    this.extensionService.createExtensionsBeforeGridCreation(this._columnDefinitions, this.gridOptions);\r\n\r\n    // if user entered some Pinning/Frozen \"presets\", we need to apply them in the grid options\r\n    if (this.gridOptions.presets?.pinning) {\r\n      this.gridOptions = { ...this.gridOptions, ...this.gridOptions.presets.pinning };\r\n    }\r\n\r\n    // build SlickGrid Grid, also user might optionally pass a custom dataview (e.g. remote model)\r\n    this.grid = new Slick.Grid(`#${this.gridId}`, this.customDataView || this.dataView, this._columnDefinitions, this.gridOptions);\r\n\r\n    this.sharedService.dataView = this.dataView;\r\n    this.sharedService.grid = this.grid;\r\n\r\n    // load the resizer service\r\n    this.resizer.init(this.grid);\r\n\r\n    this.extensionService.bindDifferentExtensions();\r\n    this.bindDifferentHooks(this.grid, this.gridOptions, this.dataView);\r\n\r\n    // emit the Grid & DataView object to make them available in parent component\r\n    this.onGridCreated.emit(this.grid);\r\n\r\n    // when it's a frozen grid, we need to keep the frozen column id for reference if we ever show/hide column from ColumnPicker/GridMenu afterward\r\n    const frozenColumnIndex = this.gridOptions.frozenColumn !== undefined ? this.gridOptions.frozenColumn : -1;\r\n    if (frozenColumnIndex >= 0 && frozenColumnIndex <= this._columnDefinitions.length) {\r\n      this.sharedService.frozenVisibleColumnId = this._columnDefinitions[frozenColumnIndex].id || '';\r\n    }\r\n\r\n    // initialize the SlickGrid grid\r\n    this.grid.init();\r\n\r\n    // when using Tree Data View\r\n    if (this.gridOptions.enableTreeData) {\r\n      this.treeDataService.init(this.grid);\r\n    }\r\n\r\n    if (!this.customDataView && (this.dataView && this.dataView.beginUpdate && this.dataView.setItems && this.dataView.endUpdate)) {\r\n      const initialDataset = this.gridOptions?.enableTreeData ? this.sortTreeDataset(this._dataset) : this._dataset;\r\n      this.onDataviewCreated.emit(this.dataView);\r\n      this.dataView.beginUpdate();\r\n      this.dataView.setItems(initialDataset || [], this.gridOptions.datasetIdPropertyName);\r\n      this.dataView.endUpdate();\r\n\r\n      // if you don't want the items that are not visible (due to being filtered out or being on a different page)\r\n      // to stay selected, pass 'false' to the second arg\r\n      const selectionModel = this.grid && this.grid.getSelectionModel();\r\n      if (selectionModel && this.gridOptions && this.gridOptions.dataView && this.gridOptions.dataView.hasOwnProperty('syncGridSelection')) {\r\n        // if we are using a Backend Service, we will do an extra flag check, the reason is because it might have some unintended behaviors\r\n        // with the BackendServiceApi because technically the data in the page changes the DataView on every page change.\r\n        let preservedRowSelectionWithBackend = false;\r\n        if (this.gridOptions.backendServiceApi && this.gridOptions.dataView.hasOwnProperty('syncGridSelectionWithBackendService')) {\r\n          preservedRowSelectionWithBackend = this.gridOptions.dataView.syncGridSelectionWithBackendService as boolean;\r\n        }\r\n\r\n        const syncGridSelection = this.gridOptions.dataView.syncGridSelection;\r\n        if (typeof syncGridSelection === 'boolean') {\r\n          let preservedRowSelection = syncGridSelection;\r\n          if (!this._isLocalGrid) {\r\n            // when using BackendServiceApi, we'll be using the \"syncGridSelectionWithBackendService\" flag BUT \"syncGridSelection\" must also be set to True\r\n            preservedRowSelection = syncGridSelection && preservedRowSelectionWithBackend;\r\n          }\r\n          this.dataView.syncGridSelection(this.grid, preservedRowSelection);\r\n        } else if (typeof syncGridSelection === 'object') {\r\n          this.dataView.syncGridSelection(this.grid, syncGridSelection.preserveHidden, syncGridSelection.preserveHiddenOnSelectionChange);\r\n        }\r\n      }\r\n\r\n      const datasetLn = this.dataView.getLength() || this._dataset && this._dataset.length || 0;\r\n      if (datasetLn > 0) {\r\n        if (!this._isDatasetInitialized && (this.gridOptions.enableCheckboxSelector || this.gridOptions.enableRowSelection)) {\r\n          this.loadRowSelectionPresetWhenExists();\r\n        }\r\n        this.loadFilterPresetsWhenDatasetInitialized();\r\n        this._isDatasetInitialized = true;\r\n      }\r\n    }\r\n\r\n    // user might want to hide the header row on page load but still have `enableFiltering: true`\r\n    // if that is the case, we need to hide the headerRow ONLY AFTER all filters got created & dataView exist\r\n    if (this._hideHeaderRowAfterPageLoad) {\r\n      this.showHeaderRow(false);\r\n      this.sharedService.hideHeaderRowAfterPageLoad = this._hideHeaderRowAfterPageLoad;\r\n    }\r\n\r\n    // after the DataView is created & updated execute some processes\r\n    this.executeAfterDataviewCreated(this.grid, this.gridOptions, this.dataView);\r\n\r\n    // bind resize ONLY after the dataView is ready\r\n    this.bindResizeHook(this.grid, this.gridOptions);\r\n\r\n    // bind & initialize grouping and header grouping colspan service\r\n    if (this.gridOptions.createPreHeaderPanel && !this.gridOptions.enableDraggableGrouping) {\r\n      this.groupingAndColspanService.init(this.grid, this.dataView);\r\n    }\r\n\r\n    // bind & initialize the grid service\r\n    this.gridService.init(this.grid, this.dataView);\r\n\r\n    // when user enables translation, we need to translate Headers on first pass & subsequently in the bindDifferentHooks\r\n    if (this.gridOptions.enableTranslate) {\r\n      this.extensionService.translateColumnHeaders();\r\n    }\r\n\r\n    // if Export is enabled, initialize the service with the necessary grid and other objects\r\n    if (this.gridOptions.enableExport) {\r\n      this.exportService.init(this.grid, this.dataView);\r\n    }\r\n\r\n    // if Excel Export is enabled, initialize the service with the necessary grid and other objects\r\n    if (this.gridOptions.enableExcelExport && this.sharedService) {\r\n      this.excelExportService.init(this.grid, this.dataView);\r\n    }\r\n\r\n    // once all hooks are in placed and the grid is initialized, we can emit an event\r\n    this.onGridInitialized.emit(this.grid);\r\n\r\n    // bind the Backend Service API callback functions only after the grid is initialized\r\n    // because the preProcess() and onInit() might get triggered\r\n    if (this.gridOptions && this.gridOptions.backendServiceApi) {\r\n      this.bindBackendCallbackFunctions(this.gridOptions);\r\n    }\r\n\r\n    this.gridStateService.init(this.grid, this.dataView);\r\n\r\n    // local grid, check if we need to show the Pagination\r\n    // if so then also check if there's any presets and finally initialize the PaginationService\r\n    // a local grid with Pagination presets will potentially have a different total of items, we'll need to get it from the DataView and update our total\r\n    if (this.gridOptions && this.gridOptions.enablePagination && this._isLocalGrid) {\r\n      this.showPagination = true;\r\n      this.loadLocalGridPagination();\r\n    }\r\n\r\n    this._angularGridInstances = {\r\n      // Slick Grid & DataView objects\r\n      dataView: this.dataView,\r\n      slickGrid: this.grid,\r\n      extensions: this.extensionService && this.extensionService.extensionList,\r\n\r\n      // public methods\r\n      destroy: this.destroy.bind(this),\r\n\r\n      // return all available Services (non-singleton)\r\n      backendService: this.gridOptions && this.gridOptions.backendServiceApi && this.gridOptions.backendServiceApi.service,\r\n      excelExportService: this.excelExportService,\r\n      exportService: this.exportService,\r\n      extensionService: this.extensionService,\r\n      filterService: this.filterService,\r\n      gridEventService: this.gridEventService,\r\n      gridStateService: this.gridStateService,\r\n      gridService: this.gridService,\r\n      groupingService: this.groupingAndColspanService,\r\n      paginationService: this.paginationService,\r\n      resizerService: this.resizer,\r\n      sortService: this.sortService,\r\n      treeDataService: this.treeDataService,\r\n\r\n      /** @deprecated please use \"extensionService\" instead */\r\n      pluginService: this.extensionService,\r\n    }\r\n\r\n    // all instances (SlickGrid, DataView & all Services)\r\n    this.onAngularGridCreated.emit(this._angularGridInstances);\r\n\r\n    // user could show a custom footer with the data metrics (dataset length and last updated timestamp)\r\n    this.optionallyShowCustomFooterWithMetrics();\r\n  }\r\n\r\n  /** Load the Editor Collection asynchronously and replace the \"collection\" property when Observable resolves */\r\n  private loadEditorCollectionAsync(column: Column) {\r\n    const collectionAsync = column && column.editor && (column.editor as ColumnEditor).collectionAsync;\r\n    if (collectionAsync instanceof Observable) {\r\n      this.subscriptions.push(\r\n        collectionAsync.subscribe((resolvedCollection) => this.updateEditorCollection(column, resolvedCollection))\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Load any possible Columns Grid Presets */\r\n  private loadColumnPresetsWhenDatasetInitialized() {\r\n    // if user entered some Columns \"presets\", we need to reflect them all in the grid\r\n    if (this.gridOptions.presets && Array.isArray(this.gridOptions.presets.columns) && this.gridOptions.presets.columns.length > 0) {\r\n      const gridColumns: Column[] = this.gridStateService.getAssociatedGridColumns(this.grid, this.gridOptions.presets.columns);\r\n      if (gridColumns && Array.isArray(gridColumns) && gridColumns.length > 0) {\r\n        // make sure that the checkbox selector is also visible if it is enabled\r\n        if (this.gridOptions.enableCheckboxSelector) {\r\n          const checkboxColumn = (Array.isArray(this._columnDefinitions) && this._columnDefinitions.length > 0) ? this._columnDefinitions[0] : null;\r\n          if (checkboxColumn && checkboxColumn.id === '_checkbox_selector' && gridColumns[0].id !== '_checkbox_selector') {\r\n            gridColumns.unshift(checkboxColumn);\r\n          }\r\n        }\r\n\r\n        // keep copy the original optional `width` properties optionally provided by the user.\r\n        // We will use this when doing a resize by cell content, if user provided a `width` it won't override it.\r\n        gridColumns.forEach(col => col.originalWidth = col.width);\r\n\r\n        // finally set the new presets columns (including checkbox selector if need be)\r\n        this.grid.setColumns(gridColumns);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Load any possible Filters Grid Presets */\r\n  private loadFilterPresetsWhenDatasetInitialized() {\r\n    if (this.gridOptions && !this.customDataView) {\r\n      // if user entered some Filter \"presets\", we need to reflect them all in the DOM\r\n      if (this.gridOptions.presets && Array.isArray(this.gridOptions.presets.filters)) {\r\n        this.filterService.populateColumnFilterSearchTermPresets(this.gridOptions.presets.filters);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * local grid, check if we need to show the Pagination\r\n   * if so then also check if there's any presets and finally initialize the PaginationService\r\n   * a local grid with Pagination presets will potentially have a different total of items, we'll need to get it from the DataView and update our total\r\n   */\r\n  private loadLocalGridPagination() {\r\n    if (this.gridOptions) {\r\n      this.totalItems = Array.isArray(this.dataset) ? this.dataset.length : 0;\r\n      if (this._paginationOptions && this.dataView && this.dataView.getPagingInfo) {\r\n        const slickPagingInfo = this.dataView.getPagingInfo() || {};\r\n        if (slickPagingInfo.hasOwnProperty('totalRows') && this._paginationOptions.totalItems !== slickPagingInfo.totalRows) {\r\n          this.totalItems = slickPagingInfo.totalRows;\r\n        }\r\n      }\r\n      if (this._paginationOptions) {\r\n        this._paginationOptions.totalItems = this.totalItems;\r\n        const paginationOptions = this.setPaginationOptionsWhenPresetDefined(this.gridOptions, this._paginationOptions);\r\n        this.initializePaginationService(paginationOptions);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Load any Row Selections into the DataView that were presets by the user */\r\n  private loadRowSelectionPresetWhenExists() {\r\n    // if user entered some Row Selections \"presets\"\r\n    const presets = this.gridOptions && this.gridOptions.presets;\r\n    const selectionModel = this.grid && this.grid.getSelectionModel();\r\n    const enableRowSelection = this.gridOptions && (this.gridOptions.enableCheckboxSelector || this.gridOptions.enableRowSelection);\r\n    if (enableRowSelection && selectionModel && presets && presets.rowSelection && (Array.isArray(presets.rowSelection.gridRowIndexes) || Array.isArray(presets.rowSelection.dataContextIds))) {\r\n      let dataContextIds = presets.rowSelection.dataContextIds;\r\n      let gridRowIndexes = presets.rowSelection.gridRowIndexes;\r\n\r\n      // maps the IDs to the Grid Rows and vice versa, the \"dataContextIds\" has precedence over the other\r\n      if (Array.isArray(dataContextIds) && dataContextIds.length > 0) {\r\n        gridRowIndexes = this.dataView.mapIdsToRows(dataContextIds) || [];\r\n      } else if (Array.isArray(gridRowIndexes) && gridRowIndexes.length > 0) {\r\n        dataContextIds = this.dataView.mapRowsToIds(gridRowIndexes) || [];\r\n      }\r\n      this.gridStateService.selectedRowDataContextIds = dataContextIds as string[];\r\n\r\n      // change the selected rows except UNLESS it's a Local Grid with Pagination\r\n      // local Pagination uses the DataView and that also trigger a change/refresh\r\n      // and we don't want to trigger 2 Grid State changes just 1\r\n      if ((this._isLocalGrid && !this.gridOptions.enablePagination) || !this._isLocalGrid) {\r\n        setTimeout(() => this.grid.setSelectedRows(gridRowIndexes));\r\n      }\r\n    }\r\n  }\r\n\r\n  private mergeGridOptions(gridOptions: GridOption): GridOption {\r\n    gridOptions.gridId = this.gridId;\r\n    gridOptions.gridContainerId = `slickGridContainer-${this.gridId}`;\r\n\r\n    // if we have a backendServiceApi and the enablePagination is undefined, we'll assume that we do want to see it, else get that defined value\r\n    // @deprecated TODO remove this check in the future, user should explicitely enable the Pagination since this feature is now optional (you can now call OData/GraphQL without Pagination which is a new feature)\r\n    gridOptions.enablePagination = ((gridOptions.backendServiceApi && gridOptions.enablePagination === undefined) ? true : gridOptions.enablePagination) || false;\r\n\r\n    // use jquery extend to deep merge & copy to avoid immutable properties being changed in GlobalGridOptions after a route change\r\n    const options = $.extend(true, {}, GlobalGridOptions, this.forRootConfig, gridOptions) as GridOption;\r\n\r\n    // using jQuery extend to do a deep clone has an unwanted side on objects and pageSizes but ES6 spread has other worst side effects\r\n    // so we will just overwrite the pageSizes when needed, this is the only one causing issues so far.\r\n    // jQuery wrote this on their docs:: On a deep extend, Object and Array are extended, but object wrappers on primitive types such as String, Boolean, and Number are not.\r\n    if (options && options.pagination && (gridOptions.enablePagination || gridOptions.backendServiceApi) && gridOptions.pagination && Array.isArray(gridOptions.pagination.pageSizes)) {\r\n      options.pagination.pageSizes = gridOptions.pagination.pageSizes;\r\n    }\r\n\r\n    // also make sure to show the header row if user have enabled filtering\r\n    this._hideHeaderRowAfterPageLoad = (options.showHeaderRow === false);\r\n    if (options.enableFiltering && !options.showHeaderRow) {\r\n      options.showHeaderRow = options.enableFiltering;\r\n    }\r\n\r\n    // when we use Pagination on Local Grid, it doesn't seem to work without enableFiltering\r\n    // so we'll enable the filtering but we'll keep the header row hidden\r\n    if (!options.enableFiltering && options.enablePagination && this._isLocalGrid) {\r\n      options.enableFiltering = true;\r\n      options.showHeaderRow = false;\r\n      this._hideHeaderRowAfterPageLoad = true;\r\n      this.sharedService.hideHeaderRowAfterPageLoad = true;\r\n    }\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * We could optionally display a custom footer below the grid to show some metrics (last update, item count with/without filters)\r\n   * It's an opt-in, user has to enable \"showCustomFooter\" and it cannot be used when there's already a Pagination since they display the same kind of info\r\n   */\r\n  private optionallyShowCustomFooterWithMetrics() {\r\n    if (this.gridOptions) {\r\n      const customFooterOptions = this.gridOptions.customFooterOptions;\r\n      this.registerOnSelectedRowsChangedWhenEnabled(customFooterOptions);\r\n\r\n      if (this.gridOptions.enableTranslate) {\r\n        this.translateCustomFooterTexts();\r\n      } else if (customFooterOptions) {\r\n        customFooterOptions.metricTexts = customFooterOptions.metricTexts || {};\r\n        customFooterOptions.metricTexts.lastUpdate = customFooterOptions.metricTexts.lastUpdate || this.locales && this.locales.TEXT_LAST_UPDATE || 'TEXT_LAST_UPDATE';\r\n        customFooterOptions.metricTexts.items = customFooterOptions.metricTexts.items || this.locales && this.locales.TEXT_ITEMS || 'TEXT_ITEMS';\r\n        customFooterOptions.metricTexts.itemsSelected = customFooterOptions.metricTexts.itemsSelected || this.locales && this.locales.TEXT_ITEMS_SELECTED || 'TEXT_ITEMS_SELECTED';\r\n        customFooterOptions.metricTexts.of = customFooterOptions.metricTexts.of || this.locales && this.locales.TEXT_OF || 'TEXT_OF';\r\n      }\r\n      this.registerOnSelectedRowsChangedWhenEnabled(this.gridOptions.customFooterOptions);\r\n\r\n      // we will display the custom footer only when there's no Pagination\r\n      if (!this.gridOptions.enablePagination && !this._isPaginationInitialized) {\r\n        this.showCustomFooter = (this.gridOptions.hasOwnProperty('showCustomFooter') ? this.gridOptions.showCustomFooter : false) as boolean;\r\n        this.customFooterOptions = this.gridOptions.customFooterOptions || {};\r\n      }\r\n      this.cd.detectChanges();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When user has row selections enabled and does not have any custom text shown on the left side footer,\r\n   * we will show the row selection count on the bottom left side of the footer (by subscribing to the SlickGrid `onSelectedRowsChanged` event).\r\n   * @param customFooterOptions\r\n   */\r\n  private registerOnSelectedRowsChangedWhenEnabled(customFooterOptions?: CustomFooterOption) {\r\n    const isRowSelectionEnabled = this.gridOptions.enableCheckboxSelector || this.gridOptions.enableRowSelection;\r\n    if (isRowSelectionEnabled && customFooterOptions && (!customFooterOptions.hideRowSelectionCount && this._isLeftFooterOriginallyEmpty)) {\r\n      this._isLeftFooterDisplayingSelectionRowCount = true;\r\n      const selectedCountText = customFooterOptions.metricTexts?.itemsSelected ?? this.locales?.TEXT_ITEMS_SELECTED ?? 'TEXT_ITEMS_SELECTED';\r\n      customFooterOptions.leftFooterText = `0 ${selectedCountText}`;\r\n\r\n      this._eventHandler.subscribe(this.grid.onSelectedRowsChanged, (_e: any, args: { rows: number[]; previousSelectedRows: number[]; }) => {\r\n        this._selectedRowCount = args.rows.length;\r\n        const selectedCountText2 = customFooterOptions.metricTexts?.itemsSelected ?? this.locales?.TEXT_ITEMS_SELECTED ?? 'TEXT_ITEMS_SELECTED';\r\n        customFooterOptions.leftFooterText = `${this._selectedRowCount} ${selectedCountText2}`;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Takes a flat dataset with parent/child relationship, sort it (via its tree structure) and return the sorted flat array\r\n   * @returns {Array<Object>} sort flat parent/child dataset\r\n   */\r\n  private sortTreeDataset<T>(flatDatasetInput: T[]): T[] {\r\n    const prevDatasetLn = this._currentDatasetLength;\r\n    let sortedDatasetResult;\r\n    let flatDatasetOutput: any[] = [];\r\n\r\n    // if the hierarchical dataset was already initialized then no need to re-convert it, we can use it directly from the shared service ref\r\n    if (this._isDatasetHierarchicalInitialized && this.datasetHierarchical) {\r\n      sortedDatasetResult = this.treeDataService.sortHierarchicalDataset(this.datasetHierarchical);\r\n      flatDatasetOutput = sortedDatasetResult.flat;\r\n    } else if (Array.isArray(flatDatasetInput) && flatDatasetInput.length > 0) {\r\n      if (this.gridOptions?.treeDataOptions?.initialSort) {\r\n        // else we need to first convert the flat dataset to a hierarchical dataset and then sort\r\n        sortedDatasetResult = this.treeDataService.convertFlatParentChildToTreeDatasetAndSort(flatDatasetInput, this._columnDefinitions, this.gridOptions);\r\n        this.sharedService.hierarchicalDataset = sortedDatasetResult.hierarchical;\r\n        flatDatasetOutput = sortedDatasetResult.flat;\r\n      } else {\r\n        // else we assume that the user provided an array that is already sorted (user's responsability)\r\n        // and so we can simply convert the array to a tree structure and we're done, no need to sort\r\n        this.sharedService.hierarchicalDataset = this.treeDataService.convertFlatParentChildToTreeDataset(flatDatasetInput, this.gridOptions);\r\n        flatDatasetOutput = flatDatasetInput || [];\r\n      }\r\n    }\r\n\r\n    // if we add/remove item(s) from the dataset, we need to also refresh our tree data filters\r\n    if (flatDatasetInput.length > 0 && flatDatasetInput.length !== prevDatasetLn) {\r\n      this.filterService.refreshTreeDataFilters(flatDatasetOutput);\r\n    }\r\n\r\n    return flatDatasetOutput;\r\n  }\r\n\r\n  /**\r\n   * For convenience to the user, we provide the property \"editor\" as an Angular-Slickgrid editor complex object\r\n   * however \"editor\" is used internally by SlickGrid for it's own Editor Factory\r\n   * so in our lib we will swap \"editor\" and copy it into a new property called \"internalColumnEditor\"\r\n   * then take back \"editor.model\" and make it the new \"editor\" so that SlickGrid Editor Factory still works\r\n   */\r\n  private swapInternalEditorToSlickGridFactoryEditor(columnDefinitions: Column[]) {\r\n    if (columnDefinitions.some(col => `${col.id}`.includes('.'))) {\r\n      console.error('[Angular-Slickgrid] Make sure that none of your Column Definition \"id\" property includes a dot in its name because that will cause some problems with the Editors. For example if your column definition \"field\" property is \"user.firstName\" then use \"firstName\" as the column \"id\".');\r\n    }\r\n\r\n    return columnDefinitions.map((column: Column | any) => {\r\n      // on every Editor that have a \"collectionAsync\", resolve the data and assign it to the \"collection\" property\r\n      if (column && column.editor && column.editor.collectionAsync) {\r\n        this.loadEditorCollectionAsync(column);\r\n      }\r\n      return { ...column, editor: column.editor && column.editor.model, internalColumnEditor: { ...column.editor } };\r\n    });\r\n  }\r\n\r\n  /** Translate all Custom Footer Texts (footer with metrics) */\r\n  private translateCustomFooterTexts() {\r\n    if (this.translate && this.translate.instant && this.translate.currentLang) {\r\n      const customFooterOptions = this.gridOptions && this.gridOptions.customFooterOptions || {};\r\n      customFooterOptions.metricTexts = customFooterOptions.metricTexts || {};\r\n      for (const propName of Object.keys(customFooterOptions.metricTexts)) {\r\n        if (propName.lastIndexOf('Key') > 0) {\r\n          const propNameWithoutKey = propName.substring(0, propName.lastIndexOf('Key'));\r\n          (customFooterOptions.metricTexts as any)[propNameWithoutKey] = this.translate.instant((customFooterOptions.metricTexts as any)[propName] || ' ');\r\n        }\r\n      }\r\n\r\n      // when we're display row selection count on left footer, we also need to translate that text with its count\r\n      if (this._isLeftFooterDisplayingSelectionRowCount) {\r\n        customFooterOptions.leftFooterText = `${this._selectedRowCount} ${customFooterOptions.metricTexts!.itemsSelected}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  private translateColumnHeaderTitleKeys() {\r\n    // translate all columns (including hidden columns)\r\n    // eventually deprecate the \"headerKey\" and use only the \"nameKey\"\r\n    this.extensionUtility.translateItems(this.sharedService.allColumns, 'headerKey', 'name');\r\n    this.extensionUtility.translateItems(this.sharedService.allColumns, 'nameKey', 'name');\r\n  }\r\n\r\n  private translateColumnGroupKeys() {\r\n    // translate all column groups (including hidden columns)\r\n    this.extensionUtility.translateItems(this.sharedService.allColumns, 'columnGroupKey', 'columnGroup');\r\n  }\r\n\r\n  /**\r\n   * Update the Editor \"collection\" property from an async call resolved\r\n   * Since this is called after the async call resolves, the pointer will not be the same as the \"column\" argument passed.\r\n   * Once we found the new pointer, we will reassign the \"editor\" and \"collection\" to the \"internalColumnEditor\" so it has newest collection\r\n   */\r\n  private updateEditorCollection<T = any>(column: Column<T>, newCollection: T[]) {\r\n    (column.editor as ColumnEditor).collection = newCollection;\r\n\r\n    // find the new column reference pointer\r\n    const columns = this.grid.getColumns();\r\n    if (Array.isArray(columns)) {\r\n      const columnRef: Column = columns.find((col: Column) => col.id === column.id);\r\n      columnRef.internalColumnEditor = column.editor as ColumnEditor;\r\n    }\r\n  }\r\n}\r\n","import { Formatters } from '../formatters/index';\r\nimport { Column, Formatter } from '../models/index';\r\n\r\n/**\r\n * Automatically add a Custom Formatter on all column definitions that have an Editor.\r\n * Instead of manually adding a Custom Formatter on every column definitions that are editables, let's ask the system to do it in an easier automated way.\r\n * It will loop through all column definitions and add an Custom Editor Formatter when necessary,\r\n * also note that if there's already a Formatter on the column definition it will automatically use the Formatters.multiple and add the custom formatter into the `params: formatters: {}}`\r\n */\r\nexport function autoAddEditorFormatterToColumnsWithEditor(columnDefinitions: Column[], customEditableFormatter: Formatter) {\r\n  if (Array.isArray(columnDefinitions)) {\r\n    for (const columnDef of columnDefinitions) {\r\n      if (columnDef.editor) {\r\n        if (columnDef.formatter && columnDef.formatter !== Formatters.multiple) {\r\n          const prevFormatter = columnDef.formatter;\r\n          columnDef.formatter = Formatters.multiple;\r\n          columnDef.params = { ...columnDef.params, formatters: [prevFormatter, customEditableFormatter] };\r\n        } else if (columnDef.formatter && columnDef.formatter === Formatters.multiple && columnDef.params) {\r\n          columnDef.params.formatters = [...columnDef.params.formatters, customEditableFormatter];\r\n        } else {\r\n          columnDef.formatter = customEditableFormatter;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","export default \"<div id=\\\"slickGridContainer-{{gridId}}\\\" class=\\\"gridPane\\\" [style.width]=\\\"gridWidthString\\\">\\r\\n  <div attr.id='{{gridId}}' class=\\\"slickgrid-container\\\" style=\\\"width: 100%\\\" [style.height]=\\\"gridHeightString\\\">\\r\\n  </div>\\r\\n\\r\\n  <!-- Pagination section under the grid -->\\r\\n  <slick-pagination id=\\\"slickPagingContainer-{{gridId}}\\\" *ngIf=\\\"showPagination\\\" [gridOptions]=\\\"gridOptions\\\">\\r\\n  </slick-pagination>\\r\\n\\r\\n  <!-- Custom Footer section under the grid -->\\r\\n  <div *ngIf=\\\"showCustomFooter && customFooterOptions\\\" class=\\\"slick-custom-footer\\\" style=\\\"width: 100%;\\\"\\r\\n       [style.height]=\\\"customFooterOptions?.footerHeight || 20\\\">\\r\\n    <div class=\\\"left-footer\\\" [ngClass]=\\\"customFooterOptions.leftContainerClass\\\">{{customFooterOptions.leftFooterText}}</div>\\r\\n\\r\\n    <div class=\\\"right-footer metrics\\\" [ngClass]=\\\"customFooterOptions.rightContainerClass\\\"\\r\\n         *ngIf=\\\"metrics && !customFooterOptions.hideMetrics\\\">\\r\\n      <span *ngIf=\\\"!customFooterOptions.hideLastUpdateTimestamp\\\">\\r\\n        <span>{{customFooterOptions.metricTexts?.lastUpdate}}</span>\\r\\n        {{metrics.endTime | date: customFooterOptions.dateFormat}}\\r\\n        <span class=\\\"separator\\\">{{customFooterOptions.metricSeparator}}</span>\\r\\n      </span>\\r\\n\\r\\n      {{metrics.itemCount}}\\r\\n      <span *ngIf=\\\"!customFooterOptions.hideTotalItemCount\\\">{{customFooterOptions.metricTexts?.of}}\\r\\n        {{metrics.totalItemCount}}\\r\\n      </span>\\r\\n      {{customFooterOptions.metricTexts?.items}}\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\";","import { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AngularUtilService } from '../services/angularUtil.service';\r\nimport { AngularSlickgridComponent } from './../components/angular-slickgrid.component';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport { FilterFactory } from '../filters/filterFactory';\r\nimport { GraphqlService } from './../services/graphql.service';\r\nimport { GridOdataService } from './../services/grid-odata.service';\r\nimport { GridOption } from './../models/gridOption.interface';\r\nimport { SlickPaginationComponent } from './../components/slick-pagination.component';\r\nimport { BsDropDownService } from '../services/bsDropdown.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TranslateModule\r\n  ],\r\n  declarations: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  exports: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  entryComponents: [AngularSlickgridComponent]\r\n})\r\nexport class AngularSlickgridModule {\r\n  static forRoot(config: GridOption = {}): ModuleWithProviders<AngularSlickgridModule> {\r\n    return {\r\n      ngModule: AngularSlickgridModule,\r\n      providers: [\r\n        { provide: 'config', useValue: config },\r\n        AngularUtilService,\r\n        BsDropDownService,\r\n        CollectionService,\r\n        FilterFactory,\r\n        GraphqlService,\r\n        GridOdataService,\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Component, Injectable, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { AngularGridInstance, Column, Editors, FieldType, Formatters, GridOption, GridService, OnEventArgs } from './../modules/angular-slickgrid';\r\n\r\n@Component({\r\n  styles: ['.duration-bg { background-color: #e9d4f1 !important }'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  templateUrl: './grid-additem.component.html'\r\n})\r\n@Injectable()\r\nexport class GridAddItemComponent implements OnInit {\r\n  title = 'Example 11: Add / Update / Highlight a Datagrid Item';\r\n  subTitle = `\r\n  Add / Update / Hightlight an Item from the Datagrid (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Add,-Update-or-Highlight-a-Datagrid-Item\" target=\"_blank\">Wiki docs</a>).\r\n  <ul>\r\n    <li><b>Note:</b> this demo is <b>only</b> on the datagrid (client) side, you still need to deal with the backend yourself</li>\r\n    <li>Adding an item, will always be showing as the 1st item in the grid because that is the best visual place to add it</li>\r\n    <li>Add/Update an item requires a valid Slickgrid Selection Model, you have 2 choices to deal with this:</li>\r\n    <ul><li>You can enable \"enableCheckboxSelector\" or \"enableRowSelection\" to True</li></ul>\r\n    <li>Click on any of the buttons below to test this out</li>\r\n    <li>You can change the highlighted color &amp; animation by changing the <a href=\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/modules/angular-slickgrid/styles/_variables.scss\" target=\"_blank\">SASS Variables</a>:</li>\r\n    <ul>\r\n      <li>\"$row-highlight-background-color\" or \"$row-highlight-fade-animation\"</li>\r\n    </ul>\r\n    <li>You can also add CSS class(es) on the fly (or on page load) on rows with certain criteria, (e.g. click on last button)\r\n    <ul>\r\n      <li>Example, click on button \"Highlight Rows with Duration over 50\" to see row styling changing. <a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Dynamically-Add-CSS-Classes-to-Item-Rows\" target=\"_blank\">Wiki doc</a></li>\r\n    </ul>\r\n  </ul>\r\n  `;\r\n\r\n  angularGrid!: AngularGridInstance;\r\n  grid: any;\r\n  gridService!: GridService;\r\n  dataView: any;\r\n  columnDefinitions: Column[] = [];\r\n  gridOptions!: GridOption;\r\n  dataset: any[];\r\n  updatedObject: any;\r\n\r\n  constructor() {\r\n    // mock a dataset\r\n    this.dataset = this.mockDataset(1000);\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n    this.dataView = angularGrid.dataView;\r\n    this.grid = angularGrid.slickGrid;\r\n    this.gridService = angularGrid.gridService;\r\n\r\n    // if you want to change background color of Duration over 50 right after page load,\r\n    // you would put the code here, also make sure to re-render the grid for the styling to be applied right away\r\n    /*\r\n    this.dataView.getItemMetadata = this.updateItemMetadataForDurationOver50(this.dataView.getItemMetadata);\r\n    this.grid.invalidate();\r\n    this.grid.render();\r\n    */\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'delete',\r\n        field: 'id',\r\n        excludeFromHeaderMenu: true,\r\n        formatter: Formatters.deleteIcon,\r\n        minWidth: 30,\r\n        maxWidth: 30,\r\n        // use onCellClick OR grid.onClick.subscribe which you can see down below\r\n        onCellClick: (e: Event, args: OnEventArgs) => {\r\n          console.log(args);\r\n          if (confirm('Are you sure?')) {\r\n            this.angularGrid.gridService.deleteItemById(args.dataContext.id);\r\n          }\r\n        }\r\n      },\r\n      {\r\n        id: 'title', name: 'Title', field: 'title',\r\n        sortable: true,\r\n        type: FieldType.string,\r\n        editor: {\r\n          model: Editors.longText\r\n        }\r\n      },\r\n      {\r\n        id: 'duration', name: 'Duration (days)', field: 'duration',\r\n        sortable: true,\r\n        type: FieldType.number,\r\n        editor: {\r\n          model: Editors.text\r\n        },\r\n        onCellChange: (e: Event, args: OnEventArgs) => {\r\n          alert('onCellChange directly attached to the column definition');\r\n          console.log(args);\r\n        }\r\n      },\r\n      {\r\n        id: 'complete', name: '% Complete', field: 'percentComplete',\r\n        formatter: Formatters.percentCompleteBar,\r\n        type: FieldType.number,\r\n        editor: {\r\n          model: Editors.integer\r\n        }\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start',\r\n        formatter: Formatters.dateIso,\r\n        sortable: true,\r\n        type: FieldType.date,\r\n        /*\r\n        editor: {\r\n          model: Editors.date\r\n        }\r\n        */\r\n      },\r\n      {\r\n        id: 'finish', name: 'Finish', field: 'finish',\r\n        formatter: Formatters.dateIso, sortable: true,\r\n        type: FieldType.date\r\n      },\r\n      {\r\n        id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven',\r\n        formatter: Formatters.checkmark,\r\n        type: FieldType.number,\r\n        editor: {\r\n          model: Editors.checkbox\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      asyncEditorLoading: false,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      editable: true,\r\n      enableColumnPicker: true,\r\n      enableCellNavigation: true,\r\n      enableRowSelection: true\r\n    };\r\n  }\r\n\r\n  mockDataset(itemCount: number) {\r\n    // mock a dataset\r\n    const mockedDataset = [];\r\n    for (let i = 0; i < itemCount; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n      mockedDataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 100) + '',\r\n        percentComplete: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n    return mockedDataset;\r\n  }\r\n\r\n  addNewItem(insertPosition?: 'top' | 'bottom') {\r\n    const newItem1 = this.createNewItem(1);\r\n    const newItem2 = this.createNewItem(2);\r\n\r\n    // single insert\r\n    this.angularGrid.gridService.addItem(newItem1, { position: insertPosition });\r\n\r\n    // OR multiple inserts\r\n    // this.angularGrid.gridService.addItems([newItem1, newItem2], { position: insertPosition });\r\n  }\r\n\r\n  createNewItem(incrementIdByHowMany = 1) {\r\n    const dataset = this.angularGrid.dataView.getItems();\r\n    let highestId = 0;\r\n    dataset.forEach((item: any) => {\r\n      if (item.id > highestId) {\r\n        highestId = item.id;\r\n      }\r\n    });\r\n    const newId = highestId + incrementIdByHowMany;\r\n    const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n    const randomMonth = Math.floor(Math.random() * 11);\r\n    const randomDay = Math.floor((Math.random() * 29));\r\n    const randomPercent = Math.round(Math.random() * 100);\r\n\r\n    return {\r\n      id: newId,\r\n      title: 'Task ' + newId,\r\n      duration: Math.round(Math.random() * 100) + '',\r\n      percentComplete: randomPercent,\r\n      percentCompleteNumber: randomPercent,\r\n      start: new Date(randomYear, randomMonth, randomDay),\r\n      finish: new Date(randomYear, (randomMonth + 2), randomDay),\r\n      effortDriven: true\r\n    };\r\n  }\r\n\r\n  highlighFifthRow() {\r\n    this.scrollGridTop();\r\n    this.angularGrid.gridService.highlightRow(4, 1500);\r\n  }\r\n\r\n  /** Change the Duration Rows Background Color */\r\n  changeDurationBackgroundColor() {\r\n    this.dataView.getItemMetadata = this.updateItemMetadataForDurationOver40(this.dataView.getItemMetadata);\r\n\r\n    // also re-render the grid for the styling to be applied right away\r\n    this.grid.invalidate();\r\n    this.grid.render();\r\n\r\n    // or use the Angular-SlickGrid GridService\r\n    // this.gridService.renderGrid();\r\n  }\r\n\r\n  /**\r\n   * Change the SlickGrid Item Metadata, we will add a CSS class on all rows with a Duration over 50\r\n   * For more info, you can see this SO https://stackoverflow.com/a/19985148/1212166\r\n   */\r\n  updateItemMetadataForDurationOver40(previousItemMetadata: any) {\r\n    const newCssClass = 'duration-bg';\r\n\r\n    return (rowNumber: number) => {\r\n      const item = this.dataView.getItem(rowNumber);\r\n      let meta = {\r\n        cssClasses: ''\r\n      };\r\n      if (typeof previousItemMetadata === 'object') {\r\n        meta = previousItemMetadata(rowNumber);\r\n      }\r\n\r\n      if (meta && item && item.duration) {\r\n        const duration = +item.duration; // convert to number\r\n        if (duration > 40) {\r\n          meta.cssClasses = (meta.cssClasses || '') + ' ' + newCssClass;\r\n        }\r\n      }\r\n\r\n      return meta;\r\n    };\r\n  }\r\n\r\n  updateSecondItem() {\r\n    this.scrollGridTop();\r\n    const updatedItem = this.angularGrid.gridService.getDataItemByRowNumber(1);\r\n    updatedItem.duration = Math.round(Math.random() * 100);\r\n    this.angularGrid.gridService.updateItem(updatedItem);\r\n\r\n    // OR by id\r\n    // this.angularGrid.gridService.updateItemById(updatedItem.id, updatedItem);\r\n\r\n    // OR multiple changes\r\n    /*\r\n    const updatedItem1 = this.angularGrid.gridService.getDataItemByRowNumber(1);\r\n    const updatedItem2 = this.angularGrid.gridService.getDataItemByRowNumber(2);\r\n    updatedItem1.duration = Math.round(Math.random() * 100);\r\n    updatedItem2.duration = Math.round(Math.random() * 100);\r\n    this.angularGrid.gridService.updateItems([updatedItem1, updatedItem2], { highlightRow: true });\r\n    */\r\n  }\r\n\r\n  scrollGridBottom() {\r\n    this.angularGrid.slickGrid.navigateBottom();\r\n  }\r\n\r\n  scrollGridTop() {\r\n    this.angularGrid.slickGrid.navigateTop();\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n// the appendTo=\"body\" (necessary for SlickGrid filter) requires the body to be position relative like so\r\n// <body style=\"position: relative\">\r\n@Component({\r\n  template: `\r\n  <ng-select class=\"no-style-select\"\r\n      [items]=\"collection\"\r\n      autofocus\r\n      bindValue=\"id\"\r\n      bindLabel=\"name\"\r\n      appendTo=\"body\"\r\n      [clearable]=\"false\"\r\n      (change)=\"onChange($event)\"\r\n      [(ngModel)]=\"selectedId\"\r\n\t\t>\r\n\t\t\t<ng-template ng-label-tmp ng-option-tmp let-item=\"item\">\r\n\t\t\t\t{{ item?.name }}\r\n\t\t\t</ng-template>\r\n\t\t</ng-select>`\r\n})\r\nexport class EditorNgSelectComponent {\r\n  selectedId = '';\r\n  selectedItem: any;\r\n  collection?: any[]; // this will be filled by the collection of your column definition\r\n  onItemChanged = new Subject<any>();    // object\r\n\r\n  onChange(item: any) {\r\n    this.selectedItem = item;\r\n    this.onItemChanged.next(item);\r\n  }\r\n\r\n  focus() {\r\n    // do a focus\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  template: `\r\n  <div id=\"{{dropdownId}}\" class=\"dropdown\" style=\"position:absolute; z-index:12000;\">\r\n    <a class=\"dropdown-toggle\"\r\n       id=\"{{dropDownToggleId}}\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n      Actions\r\n      <span class=\"caret\"></span>\r\n    </a>\r\n    <ul class=\"dropdown-menu padding10\">\r\n      <li><span class=\"text-primary text-center\" >{{dataContext.title}}</span></li>\r\n      <li role=\"separator\" class=\"divider\"></li>\r\n      <li><span class='pointer'>Another action</span></li>\r\n      <li><span class='pointer'>Something else here</span></li>\r\n      <li role=\"separator\" class=\"divider\"></li>\r\n      <li><a class=\"text-danger pointer\" (click)=\"parent.deleteCell(row)\">Delete Row</a></li>\r\n    </ul>\r\n  </div>\r\n  `\r\n})\r\nexport class CustomActionFormatterComponent {\r\n  parent: any; // parent component context\r\n  row!: number;\r\n  dataContext: any;\r\n  dropdownId = 'myDrop';\r\n  dropDownToggleId = 'toggleDrop';\r\n}\r\n","import { ComponentRef } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport {\r\n  AngularUtilService,\r\n  Column,\r\n  ColumnEditor,\r\n  Editor,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  GridOption,\r\n  unsubscribeAllObservables,\r\n} from './../modules/angular-slickgrid';\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class CustomAngularComponentEditor implements Editor {\r\n  private _subscriptions: Subscription[] = [];\r\n\r\n  /** Angular Component Reference */\r\n  componentRef!: ComponentRef<any>;\r\n\r\n  /** default item Id */\r\n  defaultId = '';\r\n\r\n  /** default item object */\r\n  defaultItem: any;\r\n\r\n  /** SlickGrid grid object */\r\n  grid: any;\r\n\r\n  constructor(private args: any) {\r\n    this.grid = args && args.grid;\r\n    this.init();\r\n  }\r\n\r\n  /** Angular Util Service (could be inside the Grid Options Params or the Editor Params ) */\r\n  get angularUtilService(): AngularUtilService {\r\n    let angularUtilService = this.gridOptions && this.gridOptions.params && this.gridOptions.params.angularUtilService;\r\n    if (!angularUtilService || !(angularUtilService instanceof AngularUtilService)) {\r\n      angularUtilService = this.columnEditor && this.columnEditor.params && this.columnEditor.params.angularUtilService;\r\n    }\r\n    return angularUtilService;\r\n  }\r\n\r\n  /** Get the Collection */\r\n  get collection(): any[] {\r\n    return this.columnDef && this.columnDef.internalColumnEditor!.collection || [];\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): ColumnEditor {\r\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  get hasAutoCommitEdit() {\r\n    return this.gridOptions.autoCommitEdit;\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator | undefined {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init() {\r\n    if (!this.columnEditor || !this.columnEditor.params.component || !(this.angularUtilService instanceof AngularUtilService)) {\r\n      throw new Error(`[Angular-Slickgrid] For Editor with Angular Component to work properly, you need to provide your component to the \"component\" property and make sure to add it to your \"entryComponents\" array.\r\n      You also need to provide the \"AngularUtilService\" via the Editor Params OR the Grid Options Params\r\n      Example: this.columnDefs = [{ id: 'title', field: 'title', editor: { model: CustomAngularComponentEditor, collection: [...], params: { component: MyComponent, angularUtilService: this.angularUtilService }}];\r\n      OR this.columnDefs = [{ id: 'title', field: 'title', editor: { model: CustomAngularComponentEditor, collection: [...] }]; this.gridOptions = { params: { angularUtilService: this.angularUtilService }}`);\r\n    }\r\n    if (this.columnEditor && this.columnEditor.params.component) {\r\n      const componentOutput = this.angularUtilService.createAngularComponentAppendToDom(this.columnEditor.params.component, this.args.container);\r\n      this.componentRef = componentOutput && componentOutput.componentRef;\r\n\r\n      // here we override the collection object of the Angular Component\r\n      // but technically you can pass any values you wish to your Component\r\n      Object.assign(this.componentRef.instance, { collection: this.collection });\r\n\r\n      // when our model (item object) changes, we'll call a save of the slickgrid editor\r\n      this._subscriptions.push(\r\n        this.componentRef.instance.onItemChanged.subscribe((item: any) => this.save())\r\n      );\r\n    }\r\n  }\r\n\r\n  save() {\r\n    const validation = this.validate();\r\n    if (validation && validation.valid) {\r\n      if (this.hasAutoCommitEdit) {\r\n        this.args.grid.getEditorLock().commitCurrentEdit();\r\n      } else {\r\n        this.args.commitChanges();\r\n      }\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    this.componentRef.instance.selectedId = this.defaultId;\r\n    this.componentRef.instance.selectedItem = this.defaultItem;\r\n    if (this.args && this.args.cancelChanges) {\r\n      this.args.cancelChanges();\r\n    }\r\n  }\r\n\r\n  /** optional, implement a hide method on your Angular Component */\r\n  hide() {\r\n    if (this.componentRef && this.componentRef.instance && typeof this.componentRef.instance.hide === 'function') {\r\n      this.componentRef.instance.hide();\r\n    }\r\n  }\r\n\r\n  /** optional, implement a show method on your Angular Component */\r\n  show() {\r\n    if (this.componentRef && this.componentRef.instance && typeof this.componentRef.instance.show === 'function') {\r\n      this.componentRef.instance.show();\r\n    }\r\n  }\r\n\r\n  /** destroy the Angular Component & Subscription */\r\n  destroy() {\r\n    if (this.componentRef && this.componentRef.destroy) {\r\n      this.componentRef.destroy();\r\n    }\r\n\r\n    // also unsubscribe all Angular Subscriptions\r\n    this._subscriptions = unsubscribeAllObservables(this._subscriptions);\r\n  }\r\n\r\n  /** optional, implement a focus method on your Angular Component */\r\n  focus() {\r\n    if (this.componentRef && this.componentRef.instance && typeof this.componentRef.instance.focus === 'function') {\r\n      this.componentRef.instance.focus();\r\n    }\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  getValue() {\r\n    return this.componentRef.instance.selectedId;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    const itemObject = item && item[this.columnDef.field];\r\n    this.componentRef.instance.selectedId = itemObject && itemObject.id || '';\r\n    this.componentRef.instance.selectedItem = itemObject && itemObject;\r\n  }\r\n\r\n  serializeValue(): any {\r\n    return this.componentRef.instance.selectedItem;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.componentRef.instance.selectedId === '' && (this.defaultId === null || this.defaultId === undefined))) && (this.componentRef.instance.selectedId !== this.defaultId);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const value = this.componentRef.instance.selectedId;\r\n      return this.validator(value, this.args);\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be required, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n","import { ComponentRef } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport {\r\n  AngularUtilService,\r\n  Column,\r\n  ColumnFilter,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n  unsubscribeAllObservables,\r\n} from './../modules/angular-slickgrid';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\nexport class CustomAngularComponentFilter implements Filter {\r\n  private _shouldTriggerQuery = true;\r\n  private _subscriptions: Subscription[] = [];\r\n\r\n  /** Angular Component Reference */\r\n  componentRef!: ComponentRef<any>;\r\n\r\n  grid: any;\r\n  searchTerms: SearchTerm[] = [];\r\n  columnDef!: Column;\r\n  callback!: FilterCallback;\r\n  operator: OperatorType | OperatorString = OperatorType.equal;\r\n\r\n  constructor() { }\r\n\r\n  /** Angular Util Service (could be inside the Grid Options Params or the Filter Params ) */\r\n  get angularUtilService(): AngularUtilService {\r\n    let angularUtilService = this.gridOptions && this.gridOptions.params && this.gridOptions.params.angularUtilService;\r\n    if (!angularUtilService || !(angularUtilService instanceof AngularUtilService)) {\r\n      angularUtilService = this.columnFilter && this.columnFilter.params && this.columnFilter.params.angularUtilService;\r\n    }\r\n    return angularUtilService;\r\n  }\r\n\r\n  /** Get the Collection */\r\n  get collection(): any[] {\r\n    return this.columnFilter && this.columnFilter.collection || [];\r\n  }\r\n\r\n  /** Getter for the Column Filter */\r\n  get columnFilter(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];\r\n\r\n    if (!this.columnFilter || !this.columnFilter.params.component || !(this.angularUtilService instanceof AngularUtilService)) {\r\n      throw new Error(`[Angular-Slickgrid] For Filter with Angular Component to work properly, you need to provide your component to the \"component\" property and make sure to add it to your \"entryComponents\" array.\r\n      You also need to provide the \"AngularUtilService\" via the Filter Params OR the Grid Options Params\r\n      Example: this.columnDefs = [{ id: 'title', field: 'title', filter: { model: CustomAngularComponentFilter, collection: [...], params: { component: MyComponent, angularUtilService: this.angularUtilService }}];\r\n      OR this.columnDefs = [{ id: 'title', field: 'title', filter: { model: CustomAngularComponentFilter, collection: [...] }]; this.gridOptions = { params: { angularUtilService: this.angularUtilService }}`);\r\n    }\r\n\r\n    if (this.columnFilter && this.columnFilter.params.component) {\r\n      // use a delay to make sure Angular ran at least a full cycle and it finished rendering the Component before hooking onto it\r\n      // else we get the infamous error \"ExpressionChangedAfterItHasBeenCheckedError\"\r\n      setTimeout(() => {\r\n        const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n        $($headerElm).empty();\r\n        const componentOuput = this.angularUtilService.createAngularComponentAppendToDom(this.columnFilter.params.component, $headerElm);\r\n        this.componentRef = componentOuput.componentRef;\r\n\r\n        // here we override the collection object of the Angular Component\r\n        // but technically you can pass any values you wish to your Component\r\n        Object.assign(componentOuput.componentRef.instance, { collection: this.collection });\r\n\r\n        this._subscriptions.push(\r\n          componentOuput.componentRef.instance.onItemChanged.subscribe((item: any) => {\r\n            this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: [item.id], shouldTriggerQuery: this._shouldTriggerQuery });\r\n            // reset flag for next use\r\n            this._shouldTriggerQuery = true;\r\n          })\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear(shouldTriggerQuery = true) {\r\n    this._shouldTriggerQuery = shouldTriggerQuery;\r\n    if (this.componentRef && this.componentRef.instance && this.componentRef.instance.hasOwnProperty('selectedId')) {\r\n      this.componentRef.instance.selectedId = 0;\r\n    }\r\n  }\r\n\r\n  /** destroy the Angular Component & Subscription */\r\n  destroy() {\r\n    if (this.componentRef && this.componentRef.destroy) {\r\n      this.componentRef.destroy();\r\n    }\r\n\r\n    // also unsubscribe all Angular Subscriptions\r\n    this._subscriptions = unsubscribeAllObservables(this._subscriptions);\r\n  }\r\n\r\n  /** Set value(s) on the DOM element */\r\n  setValues(values: SearchTerm[] | SearchTerm) {\r\n    if (this.componentRef && this.componentRef.instance && this.componentRef.instance.hasOwnProperty('selectedId')) {\r\n      this.componentRef.instance.selectedId = values;\r\n    }\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  template: `<b>{{item?.assignee?.name}}</b>`\r\n})\r\nexport class CustomTitleFormatterComponent {\r\n  item: any;\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n// the appendTo=\"body\" (necessary for SlickGrid filter) requires the body to be position relative like so\r\n// <body style=\"position: relative\">\r\n@Component({\r\n  template: `\r\n  <ng-select class=\"custom no-style-select\"\r\n      [items]=\"collection\"\r\n      bindValue=\"id\"\r\n      bindLabel=\"name\"\r\n      appendTo=\"body\"\r\n      [clearable]=\"false\"\r\n      (change)=\"onChange($event)\"\r\n      [(ngModel)]=\"selectedId\"\r\n\t\t>\r\n\t\t\t<ng-template ng-label-tmp ng-option-tmp let-item=\"item\">\r\n\t\t\t\t{{ item?.name }}\r\n\t\t\t</ng-template>\r\n\t\t</ng-select>`\r\n})\r\nexport class FilterNgSelectComponent {\r\n  selectedId = '';\r\n  selectedItem: any;\r\n  collection?: any[]; // this will be filled by the collection of your column definition\r\n  onItemChanged = new Subject<any>();    // object\r\n\r\n  onChange(item: any) {\r\n    this.selectedItem = item;\r\n    this.onItemChanged.next(item);\r\n  }\r\n}\r\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  AngularGridInstance,\r\n  AngularUtilService,\r\n  BsDropDownService,\r\n  Column,\r\n  Editors,\r\n  FieldType,\r\n  Filters,\r\n  Formatters,\r\n  GridOption,\r\n  OnEventArgs,\r\n} from './../modules/angular-slickgrid';\r\nimport { EditorNgSelectComponent } from './editor-ng-select.component';\r\nimport { CustomActionFormatterComponent } from './custom-actionFormatter.component';\r\nimport { CustomAngularComponentEditor } from './custom-angularComponentEditor';\r\nimport { CustomAngularComponentFilter } from './custom-angularComponentFilter';\r\nimport { CustomTitleFormatterComponent } from './custom-titleFormatter.component';\r\nimport { FilterNgSelectComponent } from './filter-ng-select.component';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\ndeclare const $: any;\r\n\r\nconst NB_ITEMS = 100;\r\n\r\n@Component({\r\n  templateUrl: './grid-angular.component.html',\r\n  styleUrls: ['./grid-angular.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class GridAngularComponent implements OnInit {\r\n  title = 'Example 22: Use of Angular Components';\r\n  subTitle = `\r\n  <h3>Filters, Editors, AsyncPostRender with Angular Components</h3>\r\n  Grid with usage of Angular Components as Editor &amp; AsyncPostRender (similar to Formatter).\r\n  <ul>\r\n    <li>Support of Angular Component as Custom Editor (click on any \"Assignee\" name cell)</li>\r\n    <ul>\r\n      <li>That column uses <a href=\"https://github.com/ng-select/ng-select\" target=\"_blank\">ng-select</a> as a custom editor as an Angular Component\r\n      <li>Increased Grid Options \"rowHeight\" &amp; \"headerRowHeight\" to 45 so that the \"ng-select\" fits in the cell. Ideally it would be better to override the ng-select css styling to change it's max height</li>\r\n    </ul>\r\n    <li>Support of Angular Component as Custom Filter (\"Assignee\" columns), which also uses \"ng-select\"\r\n    <li>The 2nd \"Assignee\" column (showing in bold text) uses \"asyncPostRender\" with an Angular Component</li>\r\n    <ul>\r\n      <li>Why can't we use Angular Component as Customer Formatter and why do I see a slight delay in loading the data?</li>\r\n      <li>It's totally normal since SlickGrid Formatters only accept strings (synchronously),\r\n      so we cannot use that (Angular requires at least 1 full cycle to render the element), so we are left with SlickGrid \"asyncPostRender\" and\r\n      it works but as the name suggest it's async users might see noticeable delay in loading the data\r\n      </li>\r\n    </ul>\r\n  </ul>\r\n  `;\r\n\r\n  private _commandQueue: any[] = [];\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions: Column[] = [];\r\n  gridOptions!: GridOption;\r\n  dataset!: any[];\r\n  gridObj: any;\r\n  isAutoEdit = true;\r\n  alertWarning: any;\r\n  updatedObject: any;\r\n  selectedLanguage = 'en';\r\n  assignees = [\r\n    { id: '', name: '' },\r\n    { id: '1', name: 'John' },\r\n    { id: '2', name: 'Pierre' },\r\n    { id: '3', name: 'Paul' },\r\n  ];\r\n\r\n  constructor(private angularUtilService: AngularUtilService, private bsDropdown: BsDropDownService, private translate: TranslateService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.prepareGrid();\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n    this.gridObj = angularGrid.slickGrid;\r\n  }\r\n\r\n  prepareGrid() {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'title',\r\n        name: 'Title',\r\n        field: 'title',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        sortable: true,\r\n        type: FieldType.string,\r\n        editor: {\r\n          model: Editors.longText,\r\n          minLength: 5,\r\n          maxLength: 255,\r\n        },\r\n        onCellChange: (e: Event, args: OnEventArgs) => {\r\n          console.log(args);\r\n          this.alertWarning = `Updated Title: ${args.dataContext.title}`;\r\n        }\r\n      }, {\r\n        id: 'assignee',\r\n        name: 'Assignee',\r\n        field: 'assignee',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        sortable: true,\r\n        filter: {\r\n          model: new CustomAngularComponentFilter(), // create a new instance to make each Filter independent from each other\r\n          collection: this.assignees,\r\n          params: {\r\n            component: FilterNgSelectComponent,\r\n          }\r\n        },\r\n        queryFieldFilter: 'assignee.id', // for a complex object it's important to tell the Filter which field to query and our CustomAngularComponentFilter returns the \"id\" property\r\n        queryFieldSorter: 'assignee.name',\r\n        formatter: Formatters.complexObject,\r\n        params: {\r\n          complexFieldLabel: 'assignee.name',\r\n        },\r\n        exportWithFormatter: true,\r\n        editor: {\r\n          model: CustomAngularComponentEditor,\r\n          collection: this.assignees,\r\n          params: {\r\n            component: EditorNgSelectComponent,\r\n          }\r\n        },\r\n        onCellChange: (e: Event, args: OnEventArgs) => {\r\n          console.log(args);\r\n          this.alertWarning = `Updated Title: ${args.dataContext.title}`;\r\n        }\r\n      }, {\r\n        id: 'assignee2',\r\n        name: 'Assignee with Angular Component',\r\n        field: 'assignee',\r\n        minWidth: 125,\r\n        filterable: true,\r\n        sortable: true,\r\n        filter: {\r\n          model: new CustomAngularComponentFilter(), // create a new instance to make each Filter independent from each other\r\n          collection: this.assignees,\r\n          params: {\r\n            component: FilterNgSelectComponent,\r\n          }\r\n        },\r\n        queryFieldFilter: 'assignee.id', // for a complex object it's important to tell the Filter which field to query and our CustomAngularComponentFilter returns the \"id\" property\r\n        queryFieldSorter: 'assignee.name',\r\n\r\n        // loading formatter, text to display while Post Render gets processed\r\n        formatter: () => '...',\r\n\r\n        // to load an Angular Component, you cannot use a Formatter since Angular needs at least 1 cycle to render everything\r\n        // you can use a PostRenderer but you will visually see the data appearing,\r\n        // which is why it's still better to use regular Formatter (with jQuery if need be) instead of Angular Component\r\n        asyncPostRender: this.renderAngularComponent.bind(this),\r\n        params: {\r\n          component: CustomTitleFormatterComponent,\r\n          angularUtilService: this.angularUtilService,\r\n          complexFieldLabel: 'assignee.name' // for the exportCustomFormatter\r\n        },\r\n        exportCustomFormatter: Formatters.complexObject,\r\n      }, {\r\n        id: 'complete',\r\n        name: '% Complete',\r\n        field: 'percentComplete',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        formatter: Formatters.multiple,\r\n        type: FieldType.number,\r\n        editor: {\r\n          model: Editors.singleSelect,\r\n\r\n          // We can also add HTML text to be rendered (any bad script will be sanitized) but we have to opt-in, else it will be sanitized\r\n          enableRenderHtml: true,\r\n          collection: Array.from(Array(101).keys()).map(k => ({ value: k, label: k, symbol: '<i class=\"fa fa-percent\" style=\"color:cadetblue\"></i>' })),\r\n          customStructure: {\r\n            value: 'value',\r\n            label: 'label',\r\n            labelSuffix: 'symbol'\r\n          },\r\n          editorOptions: {\r\n            maxHeight: 400\r\n          }\r\n        },\r\n        filter: {\r\n          model: Filters.slider,\r\n          operator: '>=',\r\n          params: { hideSliderNumber: false }\r\n        },\r\n        params: {\r\n          formatters: [Formatters.collectionEditor, Formatters.percentCompleteBar],\r\n        }\r\n      }, {\r\n        id: 'start',\r\n        name: 'Start',\r\n        field: 'start',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        filter: { model: Filters.compoundDate },\r\n        formatter: Formatters.dateIso,\r\n        exportWithFormatter: true,\r\n        sortable: true,\r\n        type: FieldType.date,\r\n        editor: {\r\n          model: Editors.date\r\n        },\r\n      }, {\r\n        id: 'finish',\r\n        name: 'Finish',\r\n        field: 'finish',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        sortable: true,\r\n        filter: { model: Filters.compoundDate },\r\n        formatter: Formatters.dateIso,\r\n        exportWithFormatter: true,\r\n        type: FieldType.date,\r\n        editor: {\r\n          model: Editors.date\r\n        },\r\n      },\r\n      {\r\n        id: 'action',\r\n        name: 'Action',\r\n        field: 'id',\r\n        formatter: Formatters.bsDropdown,\r\n        params: { label: 'Action' },\r\n        onCellClick: (e: Event, args: OnEventArgs) => {\r\n          this.bsDropdown.render({\r\n            component: CustomActionFormatterComponent,\r\n            args,\r\n            offsetLeft: 92,\r\n            offsetDropupBottom: 15,\r\n            parent: this, // provide this object to the child component so we can call a method from here if we wish\r\n          });\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      asyncEditorLoading: false,\r\n      autoEdit: this.isAutoEdit,\r\n      autoCommitEdit: false,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      headerRowHeight: 45,\r\n      rowHeight: 45, // increase row height so that the ng-select fits in the cell\r\n      editable: true,\r\n      enableCellNavigation: true,\r\n      enableColumnPicker: true,\r\n      enableExcelCopyBuffer: true,\r\n      enableFiltering: true,\r\n      enableAsyncPostRender: true, // for the Angular PostRenderer, don't forget to enable it\r\n      asyncPostRenderDelay: 0,    // also make sure to remove any delay to render it\r\n      editCommandHandler: (item, column, editCommand) => {\r\n        this._commandQueue.push(editCommand);\r\n        editCommand.execute();\r\n      },\r\n      i18n: this.translate,\r\n      params: {\r\n        angularUtilService: this.angularUtilService // provide the service to all at once (Editor, Filter, AsyncPostRender)\r\n      }\r\n    };\r\n\r\n    this.dataset = this.mockData(NB_ITEMS);\r\n  }\r\n\r\n  mockData(itemCount: number, startingIndex = 0) {\r\n    // mock a dataset\r\n    const tempDataset = [];\r\n    for (let i = startingIndex; i < (startingIndex + itemCount); i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n\r\n      tempDataset.push({\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        assignee: i % 3 ? this.assignees[3] : i % 2 ? this.assignees[2] : this.assignees[1],\r\n        duration: Math.round(Math.random() * 100) + '',\r\n        percentComplete: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\r\n        effortDriven: (i % 5 === 0),\r\n      });\r\n    }\r\n    return tempDataset;\r\n  }\r\n\r\n  onCellChanged(e: Event, args: any) {\r\n    this.updatedObject = args.item;\r\n  }\r\n\r\n  onCellClicked(e: Event, args: any) {\r\n    const metadata = this.angularGrid.gridService.getColumnFromEventArguments(args);\r\n    console.log(metadata);\r\n\r\n    if (metadata.columnDef.id === 'edit') {\r\n      this.alertWarning = `open a modal window to edit: ${metadata.dataContext.title}`;\r\n\r\n      // highlight the row, to customize the color, you can change the SASS variable $row-highlight-background-color\r\n      this.angularGrid.gridService.highlightRow(args.row, 1500);\r\n\r\n      // you could also select the row, when using \"enableCellNavigation: true\", it automatically selects the row\r\n      // this.angularGrid.gridService.setSelectedRow(args.row);\r\n    } else if (metadata.columnDef.id === 'delete') {\r\n      if (confirm('Are you sure?')) {\r\n        this.angularGrid.gridService.deleteItemById(metadata.dataContext.id);\r\n      }\r\n    }\r\n  }\r\n\r\n  onCellValidationError(e: Event, args: any) {\r\n    alert(args.validationResults.msg);\r\n  }\r\n\r\n  changeAutoCommit() {\r\n    this.gridOptions.autoCommitEdit = !this.gridOptions.autoCommitEdit;\r\n    this.gridObj.setOptions({\r\n      autoCommitEdit: this.gridOptions.autoCommitEdit\r\n    });\r\n    return true;\r\n  }\r\n\r\n  setAutoEdit(isAutoEdit: boolean) {\r\n    this.isAutoEdit = isAutoEdit;\r\n    this.gridObj.setOptions({ autoEdit: isAutoEdit }); // change the grid option dynamically\r\n    return true;\r\n  }\r\n\r\n  undo() {\r\n    const command = this._commandQueue.pop();\r\n    if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\r\n      command.undo();\r\n      this.gridObj.gotoCell(command.row, command.cell, false);\r\n    }\r\n  }\r\n\r\n  renderAngularComponent(cellNode: HTMLElement, row: number, dataContext: any, colDef: Column) {\r\n    if (colDef.params.component) {\r\n      const componentOutput = this.angularUtilService.createAngularComponent(colDef.params.component);\r\n      Object.assign(componentOutput.componentRef.instance, { item: dataContext });\r\n\r\n      // use a delay to make sure Angular ran at least a full cycle and make sure it finished rendering the Component\r\n      setTimeout(() => $(cellNode).empty().html(componentOutput.domElement));\r\n    }\r\n  }\r\n\r\n  /* Create an Action Dropdown Menu */\r\n  deleteCell(rowNumber: number) {\r\n    const item = this.angularGrid.dataView.getItem(rowNumber);\r\n    this.angularGrid.gridService.deleteItemById(item.id);\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-angular.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\"\\r\\n       [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <div class=\\\"col-sm-6\\\">\\r\\n    <label>autoEdit setting: </label>\\r\\n    <span id=\\\"radioAutoEdit\\\">\\r\\n      <label class=\\\"radio-inline control-label\\\"\\r\\n             for=\\\"radioTrue\\\">\\r\\n        <input type=\\\"radio\\\"\\r\\n               name=\\\"inlineRadioOptions\\\"\\r\\n               id=\\\"radioTrue\\\"\\r\\n               checked\\r\\n               [value]=\\\"isAutoEdit\\\"\\r\\n               (change)=\\\"setAutoEdit(true)\\\"> ON (single-click)\\r\\n      </label>\\r\\n      <label class=\\\"radio-inline control-label\\\"\\r\\n             for=\\\"radioFalse\\\">\\r\\n        <input type=\\\"radio\\\"\\r\\n               name=\\\"inlineRadioOptions\\\"\\r\\n               id=\\\"radioFalse\\\"\\r\\n               [value]=\\\"isAutoEdit\\\"\\r\\n               (change)=\\\"setAutoEdit(false)\\\"> OFF (double-click)\\r\\n      </label>\\r\\n    </span>\\r\\n    <div class=\\\"row col-sm-12\\\">\\r\\n      <span>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"undo()\\\">\\r\\n          <i class=\\\"fa fa-undo\\\"></i>\\r\\n          Undo last edit(s)\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"angularGrid.filterService.clearFilters()\\\">\\r\\n          Clear Filters\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"angularGrid.sortService.clearSorting()\\\">\\r\\n          Clear Sorting\\r\\n        </button>\\r\\n        <label class=\\\"checkbox-inline control-label\\\" for=\\\"autoCommitEdit\\\">\\r\\n          <input type=\\\"checkbox\\\" id=\\\"autoCommitEdit\\\" data-test=\\\"auto-commit\\\"\\r\\n                 [checked]=\\\"gridOptions.autoCommitEdit\\\"\\r\\n                 (click)=\\\"changeAutoCommit()\\\">\\r\\n          Auto Commit Edit\\r\\n        </label>\\r\\n      </span>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n\\r\\n  <div class=\\\"col-sm-6\\\">\\r\\n    <div class=\\\"alert alert-info\\\" *ngIf=\\\"updatedObject\\\">\\r\\n      <strong>Updated Item:</strong> {{updatedObject | json}}\\r\\n    </div>\\r\\n    <div class=\\\"alert alert-warning\\\" *ngIf=\\\"alertWarning\\\">\\r\\n      <strong>Updated Item:</strong> {{alertWarning}}\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"col-sm-12\\\">\\r\\n    <angular-slickgrid gridId=\\\"grid22\\\"\\r\\n                       [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                       [gridOptions]=\\\"gridOptions\\\"\\r\\n                       [dataset]=\\\"dataset\\\"\\r\\n                       (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n                       (sgOnCellChange)=\\\"onCellChanged($event.detail.eventData, $event.detail.args)\\\"\\r\\n                       (sgOnClick)=\\\"onCellClicked($event.detail.eventData, $event.detail.args)\\\"\\r\\n                       (sgOnValidationError)=\\\"onCellValidationError($event.detail.eventData, $event.detail.args)\\\">\\r\\n    </angular-slickgrid>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \"h3 {\\n  font-style: normal;\\n  color: #3d3d3d;\\n}\\n\\n#slickGridContainer-grid22 .slickgrid-container .slick-headerrow-column .ng-input {\\n  padding-top: -4px !important;\\n  padding-left: 4px !important;\\n}\\n\\n#slickGridContainer-grid22 .slickgrid-container .slick-cell {\\n  line-height: 30px !important;\\n}\\n\\n#slickGridContainer-grid22 input.slider-filter-input[type=range],\\n#slickGridContainer-grid22 .form-control {\\n  height: 34px !important;\\n}\";","import { Component, OnInit, Injectable, ViewEncapsulation, Input } from '@angular/core';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  FieldType,\r\n  Formatters,\r\n  GridOption,\r\n  OperatorString,\r\n} from './../modules/angular-slickgrid';\r\n\r\n@Component({\r\n  styles: ['.duration-bg { background-color: #e9d4f1 !important }'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  templateUrl: './grid-autoheight.component.html'\r\n})\r\n@Injectable()\r\nexport class GridAutoHeightComponent implements OnInit {\r\n  title = 'Example 23: Grid AutoHeight';\r\n  subTitle = `\r\n  The SlickGrid option \"autoHeight\" can be used if you wish to keep the full height of the grid without any scrolling\r\n  <ul>\r\n  <li>You define a fixed grid width via \"gridWidth\" in the View</li>\r\n  <li>You can still use the \"autoResize\" for the width to be resized automatically (the height will never change in this case)</li>\r\n  <li>This dataset has 25 rows, if you scroll down the page you can see the entire set is shown without any grid scrolling (though you might have browser scrolling)</li>\r\n  </ul>\r\n  `;\r\n\r\n  angularGrid!: AngularGridInstance;\r\n  grid: any;\r\n  dataView: any;\r\n  columnDefinitions: Column[] = [];\r\n  gridOptions!: GridOption;\r\n  dataset!: any[];\r\n  operatorList: OperatorString[] = ['=', '<', '<=', '>', '>=', '<>', 'StartsWith', 'EndsWith'];\r\n  selectedOperator = '=';\r\n  searchValue = '';\r\n  selectedColumn?: Column;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    this.prepareGrid();\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  prepareGrid() {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'title', name: 'Title', field: 'title',\r\n        sortable: true,\r\n        type: FieldType.string\r\n      },\r\n      {\r\n        id: 'duration', name: 'Duration (days)', field: 'duration',\r\n        sortable: true,\r\n        type: FieldType.number\r\n      },\r\n      {\r\n        id: 'complete', name: '% Complete', field: 'percentComplete',\r\n        formatter: Formatters.percentCompleteBar,\r\n        type: FieldType.number\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start',\r\n        formatter: Formatters.dateIso,\r\n        sortable: true,\r\n        type: FieldType.date\r\n      },\r\n      {\r\n        id: 'finish', name: 'Finish', field: 'finish',\r\n        formatter: Formatters.dateIso, sortable: true,\r\n        type: FieldType.date\r\n      },\r\n      {\r\n        id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven',\r\n        formatter: Formatters.checkmark,\r\n        type: FieldType.number\r\n      }\r\n    ];\r\n    this.selectedColumn = this.columnDefinitions[0];\r\n\r\n    this.gridOptions = {\r\n      // if you want to disable autoResize and use a fixed width which requires horizontal scrolling\r\n      // it's advised to disable the autoFitColumnsOnFirstLoad as well\r\n      // enableAutoResize: false,\r\n      // autoFitColumnsOnFirstLoad: false,\r\n\r\n      autoHeight: true,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n\r\n      // enable the filtering but hide the user filter row since we use our own single filter\r\n      enableFiltering: true,\r\n      showHeaderRow: false, // hide the filter row (header row)\r\n\r\n      enableGridMenu: false, // disable grid menu & remove vertical scroll\r\n      alwaysShowVerticalScroll: false,\r\n      enableColumnPicker: true,\r\n      enableCellNavigation: true,\r\n      enableRowSelection: true\r\n    };\r\n\r\n    // mock a dataset\r\n    const mockedDataset = [];\r\n    for (let i = 0; i < 25; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n\r\n      mockedDataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 100) + '',\r\n        percentComplete: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n    this.dataset = mockedDataset;\r\n  }\r\n\r\n  //\r\n  // -- if any of the Search form input changes, we'll call the updateFilter() method\r\n  //\r\n\r\n  cleargridSearchInput() {\r\n    this.searchValue = '';\r\n    this.updateFilter();\r\n  }\r\n\r\n  updateFilter() {\r\n    this.angularGrid.filterService.updateSingleFilter({\r\n      columnId: `${this.selectedColumn!.id || ''}`,\r\n      operator: this.selectedOperator as OperatorString,\r\n      searchTerms: [this.searchValue || '']\r\n    });\r\n  }\r\n}\r\n","export default \"<div class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-autoheight.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <div class=\\\"row row-cols-lg-auto g-3 align-items-center\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <label for=\\\"columnSelect\\\">Single Search:</label>\\r\\n    </div>\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <select class=\\\"form-select\\\" class=\\\"form-select\\\" data-test=\\\"search-column-list\\\" name=\\\"selectedColumn\\\"\\r\\n              [(ngModel)]=\\\"selectedColumn\\\"\\r\\n              (ngModelChange)=\\\"updateFilter()\\\">\\r\\n        <option [ngValue]=\\\"field\\\" *ngFor=\\\"let field of columnDefinitions\\\">{{field.name}}</option>\\r\\n      </select>\\r\\n    </div>\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <select class=\\\"form-select\\\" data-test=\\\"search-operator-list\\\" name=\\\"selectedOperator\\\"\\r\\n              [(ngModel)]=\\\"selectedOperator\\\" (ngModelChange)=\\\"updateFilter()\\\">\\r\\n        <option [ngValue]=\\\"operator\\\" *ngFor=\\\"let operator of operatorList\\\">{{operator}}</option>\\r\\n      </select>\\r\\n    </div>\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <div class=\\\"input-group\\\">\\r\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" data-test=\\\"search-value-input\\\" name=\\\"searchValue\\\"\\r\\n               placeholder=\\\"search value\\\" autocomplete=\\\"off\\\" (input)=\\\"updateFilter()\\\" [(ngModel)]=\\\"searchValue\\\">\\r\\n        <button class=\\\"btn btn-outline-secondary d-flex align-items-center pl-2 pr-2\\\" data-test=\\\"clear-search-value\\\"\\r\\n                (click)=\\\"cleargridSearchInput()\\\">\\r\\n          <span class=\\\"icon fa fa-times\\\"></span>\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <hr />\\r\\n\\r\\n  <angular-slickgrid gridId=\\\"grid23\\\"\\r\\n                     [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                     [gridOptions]=\\\"gridOptions\\\"\\r\\n                     [dataset]=\\\"dataset\\\"\\r\\n                     (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\r\\n  </angular-slickgrid>\\r\\n</div>\\r\\n\";","import { Component, OnInit } from '@angular/core';\r\nimport { Column, GridOption, Formatters } from './../modules/angular-slickgrid';\r\n\r\nconst NB_ITEMS = 995;\r\n\r\n@Component({\r\n  templateUrl: './grid-basic.component.html'\r\n})\r\nexport class GridBasicComponent implements OnInit {\r\n  title = 'Example 1: Basic Grids';\r\n  subTitle = `\r\n    Basic Grids with fixed sizes (800 x 225) set by \"gridHeight\" &amp; \"gridWidth\"\r\n    <ul>\r\n      <li><a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/HOWTO---Step-by-Step\" target=\"_blank\">Wiki HOWTO link</a></li>\r\n    </ul>\r\n  `;\r\n\r\n  columnDefinitions1: Column[] = [];\r\n  columnDefinitions2: Column[] = [];\r\n  gridOptions1!: GridOption;\r\n  gridOptions2!: GridOption;\r\n  dataset1!: any[];\r\n  dataset2!: any[];\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions1 = [\r\n      { id: 'title', name: 'Title', field: 'title', sortable: true },\r\n      { id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true },\r\n      { id: '%', name: '% Complete', field: 'percentComplete', sortable: true },\r\n      { id: 'start', name: 'Start', field: 'start', formatter: Formatters.dateIso },\r\n      { id: 'finish', name: 'Finish', field: 'finish', formatter: Formatters.dateIso },\r\n      { id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven', sortable: true }\r\n    ];\r\n    this.gridOptions1 = {\r\n      enableAutoResize: false,\r\n      enableSorting: true,\r\n    };\r\n\r\n    // copy the same Grid Options and Column Definitions to 2nd grid\r\n    // but also add Pagination in this grid\r\n    this.columnDefinitions2 = this.columnDefinitions1;\r\n    this.gridOptions2 = {\r\n      ...this.gridOptions1,\r\n      ...{\r\n        enablePagination: true,\r\n        pagination: {\r\n          pageSizes: [5, 10, 20, 25, 50],\r\n          pageSize: 5\r\n        },\r\n      }\r\n    };\r\n\r\n    // mock some data (different in each dataset)\r\n    this.dataset1 = this.mockData(NB_ITEMS);\r\n    this.dataset2 = this.mockData(NB_ITEMS);\r\n  }\r\n\r\n  mockData(count: number) {\r\n    // mock a dataset\r\n    const mockDataset = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n\r\n      mockDataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 100) + '',\r\n        percentComplete: randomPercent,\r\n        start: new Date(randomYear, randomMonth + 1, randomDay),\r\n        finish: new Date(randomYear + 1, randomMonth + 1, randomDay),\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n\r\n    return mockDataset;\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\n  <h2>\\n    {{title}}\\n    <span class=\\\"float-right\\\">\\n      <a style=\\\"font-size: 18px\\\"\\n         target=\\\"_blank\\\"\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-basic.component.ts\\\">\\n        <span class=\\\"fa fa-link\\\"></span> code\\n      </a>\\n    </span>\\n  </h2>\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\n\\n  <h3>Grid 1</h3>\\n  <angular-slickgrid gridId=\\\"grid1\\\"\\n                     [columnDefinitions]=\\\"columnDefinitions1\\\"\\n                     [gridOptions]=\\\"gridOptions1\\\"\\n                     [dataset]=\\\"dataset1\\\"\\n                     gridHeight=\\\"225\\\"\\n                     gridWidth=\\\"800\\\">\\n  </angular-slickgrid>\\n\\n  <hr />\\n\\n  <h3>Grid 2 <small>(with local Pagination)</small></h3>\\n  <angular-slickgrid gridId=\\\"grid2\\\"\\n                     [columnDefinitions]=\\\"columnDefinitions2\\\"\\n                     [gridOptions]=\\\"gridOptions2\\\"\\n                     [dataset]=\\\"dataset2\\\"\\n                     gridHeight=\\\"225\\\"\\n                     gridWidth=\\\"800\\\">\\n  </angular-slickgrid>\\n</div>\\n\";","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\n  <h2>\\n    {{title}}\\n    <span class=\\\"float-right\\\">\\n      <a style=\\\"font-size: 18px\\\"\\n         target=\\\"_blank\\\"\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-clientside.component.ts\\\">\\n        <span class=\\\"fa fa-link\\\"></span> code\\n      </a>\\n    </span>\\n  </h2>\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\n\\n  <br />\\n  <span *ngIf=\\\"metrics\\\" style=\\\"margin-right: 10px\\\">\\n    <b>Metrics:</b> {{metrics.startTime | date: 'yyyy-MM-dd hh:mm aaaaa\\\\'m\\\\''}} | {{metrics.itemCount}} of\\n    {{metrics.totalItemCount}} items\\n  </span>\\n  <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n    <button class=\\\"btn btn-sm btn-outline-secondary\\\" data-test=\\\"scroll-top-btn\\\" (click)=\\\"scrollGridTop()\\\">\\n      <i class=\\\"fa fa-arrow-up\\\"></i>\\n    </button>\\n    <button class=\\\"btn btn-sm btn-outline-secondary\\\" data-test=\\\"scroll-bottom-btn\\\" (click)=\\\"scrollGridBottom()\\\">\\n      <i class=\\\"fa fa-arrow-down\\\"></i>\\n    </button>\\n  </div>\\n  <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"clear-filters\\\"\\n          (click)=\\\"angularGrid.filterService.clearFilters()\\\">\\n    Clear Filters\\n  </button>\\n  <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"clear-sorting\\\"\\n          (click)=\\\"angularGrid.sortService.clearSorting()\\\">\\n    Clear Sorting\\n  </button>\\n  <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"set-dynamic-filter\\\" (click)=\\\"setFiltersDynamically()\\\">\\n    Set Filters Dynamically\\n  </button>\\n  <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"set-dynamic-sorting\\\" (click)=\\\"setSortingDynamically()\\\">\\n    Set Sorting Dynamically\\n  </button>\\n\\n  <angular-slickgrid gridId=\\\"grid4\\\" [columnDefinitions]=\\\"columnDefinitions\\\" [gridOptions]=\\\"gridOptions\\\"\\n                     [dataset]=\\\"dataset\\\" (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\n                     (onGridStateChanged)=\\\"gridStateChanged($event)\\\"\\n                     (onBeforeGridDestroy)=\\\"saveCurrentGridState()\\\"\\n                     (sgOnRowCountChanged)=\\\"refreshMetrics($event.detail.eventData, $event.detail.args)\\\">\\n  </angular-slickgrid>\\n</div>\\n\";","import {\r\n  Column,\r\n  ColumnFilter,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n} from './../modules/angular-slickgrid';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\nexport class CustomInputFilter implements Filter {\r\n  private _clearFilterTriggered = false;\r\n  private _shouldTriggerQuery = true;\r\n  private $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[] = [];\r\n  columnDef!: Column;\r\n  callback!: FilterCallback;\r\n  operator: OperatorType | OperatorString = OperatorType.equal;\r\n\r\n  constructor() { }\r\n\r\n  /** Getter for the Column Filter */\r\n  get columnFilter(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms.length >= 0) ? this.searchTerms[0] : '';\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    this.$filterElm.keyup((e: any) => {\r\n      let value = e && e.target && e.target.value || '';\r\n      const enableWhiteSpaceTrim = this.gridOptions.enableFilterTrimWhiteSpace || this.columnFilter.enableTrimWhiteSpace;\r\n      if (typeof value === 'string' && enableWhiteSpaceTrim) {\r\n        value = value.trim();\r\n      }\r\n\r\n      if (this._clearFilterTriggered) {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered, shouldTriggerQuery: this._shouldTriggerQuery });\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        value === '' ? this.$filterElm.removeClass('filled') : this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, searchTerms: [value], shouldTriggerQuery: this._shouldTriggerQuery });\r\n      }\r\n      // reset both flags for next use\r\n      this._clearFilterTriggered = false;\r\n      this._shouldTriggerQuery = true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear(shouldTriggerQuery = true) {\r\n    if (this.$filterElm) {\r\n      this._clearFilterTriggered = true;\r\n      this._shouldTriggerQuery = shouldTriggerQuery;\r\n      this.$filterElm.val('');\r\n      this.$filterElm.trigger('keyup');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n  }\r\n\r\n  /** Set value(s) on the DOM element */\r\n  setValues(values: SearchTerm | SearchTerm[]) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString() {\r\n    let placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    if (this.columnFilter && this.columnFilter.placeholder) {\r\n      placeholder = this.columnFilter.placeholder;\r\n    }\r\n    return `<input type=\"text\" class=\"form-control search-filter\" placeholder=\"${placeholder}\">`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n\r\n    $filterElm.val(searchTerm);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CustomInputFilter } from './custom-inputFilter';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  FieldType,\r\n  Filters,\r\n  FlatpickrOption,\r\n  Formatters,\r\n  GridOption,\r\n  GridStateChange,\r\n  Metrics,\r\n  MultipleSelectOption,\r\n  OperatorType,\r\n} from './../modules/angular-slickgrid';\r\n\r\nfunction randomBetween(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\nconst NB_ITEMS = 1500;\r\nconst URL_SAMPLE_COLLECTION_DATA = 'assets/data/collection_500_numbers.json';\r\n\r\n@Component({\r\n  templateUrl: './grid-clientside.component.html'\r\n})\r\nexport class GridClientSideComponent implements OnInit {\r\n  title = 'Example 4: Client Side Sort/Filter';\r\n  subTitle = `\r\n    Sort/Filter on client side only using SlickGrid DataView (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Sorting\" target=\"_blank\">Wiki docs</a>)\r\n    <br/>\r\n    <ul class=\"small\">\r\n      <li>Support multi-sort (by default), hold \"Shift\" key and click on the next column to sort.</li>\r\n      <li>All column types support the following operators: (>, >=, <, <=, <>, !=, =, ==, *)</li>\r\n      <ul>\r\n        <li>Example: >100 ... >=2001-01-01 ... >02/28/17</li>\r\n        <li><b>Note:</b> For filters to work properly (default is string), make sure to provide a FieldType (type is against the dataset, not the Formatter)</li>\r\n      </ul>\r\n      <li>Date Filters</li>\r\n      <ul>\r\n        <li>\r\n          FieldType of dateUtc/date (from dataset) can use an extra option of \"filterSearchType\" to let user filter more easily.\r\n          For example, in the \"UTC Date\" field below, you can type \"&gt;02/28/2017\", also when dealing with UTC you have to take the time difference in consideration.\r\n        </li>\r\n      </ul>\r\n      <li>On String filters, (*) can be used as startsWith (Hello* => matches \"Hello Word\") ... endsWith (*Doe => matches: \"John Doe\")</li>\r\n      <li>Custom Filter are now possible, \"Description\" column below, is a customized InputFilter with different placeholder. See <a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Custom-Filter\" target=\"_blank\">Wiki - Custom Filter</a>\r\n      <li>MultipleSelect & SingeSelect Filters can use a regular \"collection\" or \"collectionAsync\" to load it asynchronously</li>\r\n    </ul>\r\n  `;\r\n\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions: Column[] = [];\r\n  gridOptions!: GridOption;\r\n  dataset!: any[];\r\n  metrics!: Metrics;\r\n\r\n  constructor(private http: HttpClient, private translate: TranslateService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'title', name: 'Title', field: 'title', sortable: true, minWidth: 55,\r\n        type: FieldType.string, filterable: true, filter: { model: Filters.compoundInputText }\r\n      },\r\n      {\r\n        id: 'description', name: 'Description', field: 'description', filterable: true, sortable: true, minWidth: 80,\r\n        type: FieldType.string,\r\n        filter: {\r\n          model: new CustomInputFilter(), // create a new instance to make each Filter independent from each other\r\n          enableTrimWhiteSpace: true // or use global \"enableFilterTrimWhiteSpace\" to trim on all Filters\r\n        }\r\n      },\r\n      {\r\n        id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true, type: FieldType.number, exportCsvForceToKeepAsString: true,\r\n        minWidth: 55,\r\n        filterable: true,\r\n        filter: {\r\n          collectionAsync: this.http.get<{ option: string; value: string; }[]>(URL_SAMPLE_COLLECTION_DATA),\r\n          // collectionFilterBy & collectionSortBy accept a single or multiple options\r\n          // we can exclude certains values 365 & 360 from the dropdown filter\r\n          collectionFilterBy: [{\r\n            property: 'value',\r\n            operator: OperatorType.notEqual,\r\n            value: 360\r\n          }, {\r\n            property: 'value',\r\n            operator: OperatorType.notEqual,\r\n            value: 365\r\n          }],\r\n          collectionSortBy: {\r\n            property: 'value',\r\n            sortDesc: true,\r\n            fieldType: FieldType.number\r\n          },\r\n          customStructure: {\r\n            value: 'value',\r\n            label: 'label',\r\n            optionLabel: 'value', // if selected text is too long, we can use option labels instead\r\n            labelSuffix: 'text',\r\n          },\r\n          collectionOptions: {\r\n            separatorBetweenTextLabels: ' ',\r\n            filterResultAfterEachPass: 'chain' // options are \"merge\" or \"chain\" (defaults to \"chain\")\r\n          },\r\n          model: Filters.multipleSelect,\r\n\r\n          // we could add certain option(s) to the \"multiple-select\" plugin\r\n          filterOptions: {\r\n            maxHeight: 250,\r\n            width: 175,\r\n\r\n            // if we want to display shorter text as the selected text (on the select filter itself, parent element)\r\n            // we can use \"useSelectOptionLabel\" or \"useSelectOptionLabelToHtml\" the latter will parse html\r\n            useSelectOptionLabelToHtml: true\r\n          } as MultipleSelectOption\r\n        }\r\n      },\r\n      {\r\n        id: 'complete', name: '% Complete', field: 'percentComplete', formatter: Formatters.percentCompleteBar, minWidth: 70, type: FieldType.number, sortable: true,\r\n        filterable: true, filter: { model: Filters.compoundInputNumber }\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start', formatter: Formatters.dateIso, sortable: true, minWidth: 75, exportWithFormatter: false,\r\n        type: FieldType.date, filterable: true, filter: { model: Filters.compoundDate }\r\n      },\r\n      {\r\n        id: 'usDateShort', name: 'US Date Short', field: 'usDateShort', sortable: true, minWidth: 70, width: 70,\r\n        type: FieldType.dateUsShort, exportWithFormatter: true, filterable: true, filter: { model: Filters.compoundDate }\r\n      },\r\n      {\r\n        id: 'utcDate', name: 'UTC Date', field: 'utcDate', formatter: Formatters.dateTimeIsoAmPm, sortable: true, minWidth: 115,\r\n        type: FieldType.dateUtc, exportWithFormatter: true, outputType: FieldType.dateTimeIsoAmPm, filterable: true,\r\n        filter: {\r\n          model: Filters.compoundDate,\r\n          // override any of the Flatpickr options through \"filterOptions\"\r\n          // please note that there's no TSlint on this property since it's generic for any filter, so make sure you entered the correct filter option(s)\r\n          filterOptions: { minDate: 'today' } as FlatpickrOption\r\n        }\r\n      },\r\n      {\r\n        id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven.isEffort', minWidth: 85, maxWidth: 85,\r\n        type: FieldType.boolean,\r\n        sortable: true,\r\n        exportCustomFormatter: Formatters.complexObject,\r\n\r\n        // to pass multiple formatters, use the params property\r\n        // also these formatters are executed in sequence, so if you want the checkmark to work correctly, it has to be the last formatter defined\r\n        formatter: Formatters.multiple,\r\n        params: { formatters: [Formatters.complexObject, Formatters.checkmark] },\r\n\r\n        // when the \"field\" string includes the dot \".\" notation, the library will consider this to be a complex object and Filter accordingly\r\n        filterable: true,\r\n        filter: {\r\n          // We can also add HTML text to be rendered (any bad script will be sanitized) but we have to opt-in, else it will be sanitized\r\n          // enableRenderHtml: true,\r\n          // collection: [{ value: '', label: '' }, { value: true, label: 'True', labelPrefix: `<i class=\"fa fa-check\"></i> ` }, { value: false, label: 'False' }],\r\n\r\n          collection: [{ isEffort: '', label: '' }, { isEffort: true, label: 'True' }, { isEffort: false, label: 'False' }],\r\n          customStructure: {\r\n            value: 'isEffort',\r\n            label: 'label'\r\n          },\r\n          model: Filters.singleSelect,\r\n\r\n          // we could add certain option(s) to the \"multiple-select\" plugin\r\n          filterOptions: { autoDropWidth: true } as MultipleSelectOption,\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableExcelExport: true,\r\n      enableExcelCopyBuffer: true,\r\n      enableFiltering: true,\r\n      // enableFilterTrimWhiteSpace: true,\r\n      i18n: this.translate,\r\n      showCustomFooter: true, // display some metrics in the bottom custom footer\r\n\r\n      // use columnDef searchTerms OR use presets as shown below\r\n      presets: {\r\n        filters: [\r\n          { columnId: 'duration', searchTerms: [10, 98] },\r\n          // { columnId: 'complete', searchTerms: ['5'], operator: '>' },\r\n          { columnId: 'usDateShort', operator: '<', searchTerms: ['4/20/25'] },\r\n          // { columnId: 'effort-driven', searchTerms: [true] },\r\n        ],\r\n        sorters: [\r\n          { columnId: 'duration', direction: 'DESC' },\r\n          { columnId: 'complete', direction: 'ASC' }\r\n        ],\r\n      },\r\n    };\r\n\r\n    // mock a dataset\r\n    this.dataset = this.mockData(NB_ITEMS);\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  mockData(itemCount: number, startingIndex = 0): any[] {\r\n    // mock a dataset\r\n    const tempDataset = [];\r\n    for (let i = startingIndex; i < (startingIndex + itemCount); i++) {\r\n      const randomDuration = Math.round(Math.random() * 100);\r\n      const randomYear = randomBetween(2000, 2035);\r\n      const randomYearShort = randomBetween(10, 35);\r\n      const randomMonth = randomBetween(1, 12);\r\n      const randomMonthStr = (randomMonth < 10) ? `0${randomMonth}` : randomMonth;\r\n      const randomDay = randomBetween(10, 28);\r\n      const randomPercent = randomBetween(0, 100);\r\n      const randomHour = randomBetween(10, 23);\r\n      const randomTime = randomBetween(10, 59);\r\n      const randomMilliseconds = `${randomBetween(1, 9)}${randomBetween(10, 99)}`;\r\n      const randomIsEffort = (i % 3 === 0);\r\n\r\n      tempDataset.push({\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        description: (i % 5) ? 'desc ' + i : null, // also add some random to test NULL field\r\n        duration: randomDuration,\r\n        percentComplete: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: (i % 4) ? null : new Date(randomYear, randomMonth, randomDay),          // provide a Date format\r\n        usDateShort: `${randomMonth}/${randomDay}/${randomYearShort}`, // provide a date US Short in the dataset\r\n        utcDate: `${randomYear}-${randomMonthStr}-${randomDay}T${randomHour}:${randomTime}:${randomTime}.${randomMilliseconds}Z`,\r\n        effortDriven: {\r\n          isEffort: randomIsEffort,\r\n          label: randomIsEffort ? 'Effort' : 'NoEffort',\r\n        }\r\n      });\r\n    }\r\n    return tempDataset;\r\n  }\r\n\r\n  /** Dispatched event of a Grid State Changed event */\r\n  gridStateChanged(gridState: GridStateChange) {\r\n    console.log('Client sample, Grid State changed:: ', gridState);\r\n  }\r\n\r\n  /** Save current Filters, Sorters in LocaleStorage or DB */\r\n  saveCurrentGridState() {\r\n    console.log('Client sample, last Grid State:: ', this.angularGrid.gridStateService.getCurrentGridState());\r\n  }\r\n\r\n  setFiltersDynamically() {\r\n    // we can Set Filters Dynamically (or different filters) afterward through the FilterService\r\n    this.angularGrid.filterService.updateFilters([\r\n      { columnId: 'duration', searchTerms: [2, 25, 48, 50] },\r\n      { columnId: 'complete', searchTerms: [95], operator: '<' },\r\n      { columnId: 'effort-driven', searchTerms: [true] },\r\n      { columnId: 'start', operator: '>=', searchTerms: ['2001-02-28'] },\r\n    ]);\r\n  }\r\n\r\n  setSortingDynamically() {\r\n    this.angularGrid.sortService.updateSorting([\r\n      // orders matter, whichever is first in array will be the first sorted column\r\n      { columnId: 'duration', direction: 'ASC' },\r\n      { columnId: 'start', direction: 'DESC' },\r\n    ]);\r\n  }\r\n\r\n  refreshMetrics(e: Event, args: any) {\r\n    if (args && args.current >= 0) {\r\n      setTimeout(() => {\r\n        this.metrics = {\r\n          startTime: new Date(),\r\n          endTime: new Date(),\r\n          itemCount: args && args.current || 0,\r\n          totalItemCount: this.dataset.length || 0\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  scrollGridBottom() {\r\n    this.angularGrid.slickGrid.navigateBottom();\r\n  }\r\n\r\n  scrollGridTop() {\r\n    this.angularGrid.slickGrid.navigateTop();\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AngularGridInstance, Column, FieldType, GridOption, ItemMetadata } from './../modules/angular-slickgrid';\r\n\r\n@Component({\r\n  templateUrl: './grid-colspan.component.html',\r\n  styleUrls: ['./grid-colspan.component.scss'],\r\n})\r\nexport class GridColspanComponent implements OnInit {\r\n  title = 'Example 15: Column Span & Header Grouping';\r\n  subTitle = `\r\n  This example demonstrates how to easily span a row over multiple columns & how to group header titles.\r\n  <ul>\r\n    <li>\r\n      Row Colspan - (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Row-Colspan\" target=\"_blank\">Wiki docs</a>) /\r\n      Header Grouping - (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Header-Title-Grouping\" target=\"_blank\">Wiki docs</a>)\r\n    </li>\r\n    <li>Note that you can add Sort but remember that it will sort by the data which the row contains, even if the data is visually hidden by colspan it will still sort it</li>\r\n    <li>\r\n      Header Grouping spanning accross multiple columns is working but has some UI issues on window resize.\r\n      If anyone can fix it, probably some CSS issues, please let us know.\r\n    </li>\r\n  </ul>\r\n  `;\r\n\r\n  angularGrid2!: AngularGridInstance;\r\n  gridObj2: any;\r\n  columnDefinitions1!: Column[];\r\n  columnDefinitions2!: Column[];\r\n  gridOptions1!: GridOption;\r\n  gridOptions2!: GridOption;\r\n  dataset1: any[] = [];\r\n  dataset2: any[] = [];\r\n\r\n  ngOnInit(): void {\r\n    this.prepareGrid1();\r\n    this.prepareGrid2();\r\n  }\r\n\r\n  angularGridReady2(angularGrid: AngularGridInstance) {\r\n    this.angularGrid2 = angularGrid;\r\n    this.gridObj2 = angularGrid.slickGrid;\r\n  }\r\n\r\n  prepareGrid1() {\r\n    this.columnDefinitions1 = [\r\n      { id: 'title', name: 'Title', field: 'title', sortable: true, columnGroup: 'Common Factor' },\r\n      { id: 'duration', name: 'Duration', field: 'duration', columnGroup: 'Common Factor' },\r\n      { id: 'start', name: 'Start', field: 'start', columnGroup: 'Period' },\r\n      { id: 'finish', name: 'Finish', field: 'finish', columnGroup: 'Period' },\r\n      { id: '%', name: '% Complete', field: 'percentComplete', selectable: false, columnGroup: 'Analysis' },\r\n      { id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven', type: FieldType.boolean, columnGroup: 'Analysis' }\r\n    ];\r\n\r\n    this.gridOptions1 = {\r\n      enableAutoResize: false,\r\n      enableCellNavigation: true,\r\n      enableExport: true,\r\n      enableSorting: true,\r\n      createPreHeaderPanel: true,\r\n      showPreHeaderPanel: true,\r\n      preHeaderPanelHeight: 28,\r\n      explicitInitialization: true,\r\n      colspanCallback: this.renderDifferentColspan,\r\n    };\r\n\r\n    this.dataset1 = this.getData(500);\r\n  }\r\n\r\n  prepareGrid2() {\r\n    this.columnDefinitions2 = [\r\n      { id: 'sel', name: '#', field: 'num', behavior: 'select', cssClass: 'cell-selection', width: 40, resizable: false, selectable: false },\r\n      { id: 'title', name: 'Title', field: 'title', sortable: true, columnGroup: 'Common Factor' },\r\n      { id: 'duration', name: 'Duration', field: 'duration', columnGroup: 'Common Factor' },\r\n      { id: 'start', name: 'Start', field: 'start', columnGroup: 'Period' },\r\n      { id: 'finish', name: 'Finish', field: 'finish', columnGroup: 'Period' },\r\n      { id: '%', name: '% Complete', field: 'percentComplete', selectable: false, columnGroup: 'Analysis' },\r\n      { id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven', type: FieldType.boolean, columnGroup: 'Analysis' }\r\n    ];\r\n\r\n    this.gridOptions2 = {\r\n      enableCellNavigation: true,\r\n      createPreHeaderPanel: true,\r\n      showPreHeaderPanel: true,\r\n      preHeaderPanelHeight: 25,\r\n      explicitInitialization: true,\r\n      frozenColumn: 2,\r\n      gridMenu: { hideClearFrozenColumnsCommand: false },\r\n      headerMenu: { hideFreezeColumnsCommand: false }\r\n    };\r\n\r\n    this.dataset2 = this.getData(500);\r\n  }\r\n\r\n  getData(count: number) {\r\n    // Set up some test columns.\r\n    const mockDataset = [];\r\n    for (let i = 0; i < count; i++) {\r\n      mockDataset[i] = {\r\n        id: i,\r\n        num: i,\r\n        title: 'Task ' + i,\r\n        duration: '5 days',\r\n        percentComplete: Math.round(Math.random() * 100),\r\n        start: '01/01/2009',\r\n        finish: '01/05/2009',\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n    return mockDataset;\r\n  }\r\n\r\n  setFrozenColumns2(frozenCols: number) {\r\n    this.gridObj2.setOptions({ frozenColumn: frozenCols });\r\n    this.gridOptions2 = this.gridObj2.getOptions();\r\n  }\r\n\r\n  /**\r\n   * A callback to render different row column span\r\n   * Your callback will always have the \"item\" argument which you can use to decide on the colspan\r\n   * Your return must always be in the form of:: return { columns: {}}\r\n   */\r\n  renderDifferentColspan(item: any): ItemMetadata {\r\n    if (item.id % 2 === 1) {\r\n      return {\r\n        columns: {\r\n          duration: {\r\n            colspan: 3 // \"duration\" will span over 3 columns\r\n          }\r\n        }\r\n      };\r\n    }\r\n    return {\r\n      columns: {\r\n        0: {\r\n          colspan: '*' // starting at column index 0, we will span accross all column (*)\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\n  <h2>\\n    {{title}}\\n    <span class=\\\"float-right\\\">\\n      <a style=\\\"font-size: 18px\\\"\\n         target=\\\"_blank\\\"\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-colspan.component.ts\\\">\\n        <span class=\\\"fa fa-link\\\"></span> code\\n      </a>\\n    </span>\\n  </h2>\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\n\\n  <h3>Grid 1 <small>(with Header Grouping &amp; Colspan)</small></h3>\\n  <angular-slickgrid gridId=\\\"grid1\\\"\\n                     [columnDefinitions]=\\\"columnDefinitions1\\\"\\n                     [gridOptions]=\\\"gridOptions1\\\"\\n                     [dataset]=\\\"dataset1\\\"\\n                     gridHeight=\\\"275\\\"\\n                     gridWidth=\\\"800\\\">\\n  </angular-slickgrid>\\n\\n  <hr />\\n\\n  <h3>Grid 2 <small>(with Header Grouping &amp; Frozen/Pinned Columns)</small></h3>\\n  <div class=\\\"col-sm 12\\\">\\n    <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"setFrozenColumns2(-1)\\\"\\n            data-test=\\\"remove-frozen-column-button\\\">\\n      <i class=\\\"fa fa-times fa-lg\\\"></i> Remove Frozen Columns\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"setFrozenColumns2(2)\\\" data-test=\\\"set-3frozen-columns\\\">\\n      <i class=\\\"fa fa-thumb-tack fa-lg\\\"></i> Set 3 Frozen Columns\\n    </button>\\n  </div>\\n  <angular-slickgrid gridId=\\\"grid2\\\"\\n                     [columnDefinitions]=\\\"columnDefinitions2\\\"\\n                     [gridOptions]=\\\"gridOptions2\\\"\\n                     [dataset]=\\\"dataset2\\\"\\n                     gridHeight=\\\"275\\\"\\n                     gridWidth=\\\"800\\\"\\n                     (onAngularGridCreated)=\\\"angularGridReady2($event)\\\">\\n  </angular-slickgrid>\\n</div>\\n\";","export default \"/** You can change the pinned/frozen border styling through this css override */\\n.slick-row .slick-cell.frozen:last-child,\\n.slick-headerrow-column.frozen:last-child,\\n.slick-footerrow-column.frozen:last-child {\\n  border-right: 1px solid #969696 !important;\\n}\\n.slick-pane-bottom {\\n  border-top: 1px solid #969696 !important;\\n}\";","import { Component, OnInit, OnDestroy, ViewEncapsulation } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Subscription } from 'rxjs';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  ContextMenu,\r\n  ExtensionName,\r\n  FieldType,\r\n  Filters,\r\n  Formatter,\r\n  Formatters,\r\n  GridOption,\r\n  unsubscribeAllObservables,\r\n} from './../modules/angular-slickgrid';\r\n\r\nconst actionFormatter: Formatter = (row, cell, value, columnDef, dataContext) => {\r\n  if (dataContext.priority === 3) { // option 3 is High\r\n    return `<div class=\"fake-hyperlink\">Action <i class=\"fa fa-caret-down\"></i></div>`;\r\n  }\r\n  return `<div class=\"disabled\">Action <i class=\"fa fa-caret-down\"></i></div>`;\r\n};\r\n\r\nconst priorityFormatter: Formatter = (row, cell, value, columnDef, dataContext) => {\r\n  if (!value) {\r\n    return '';\r\n  }\r\n  let output = '';\r\n  const count = +(value >= 3 ? 3 : value);\r\n  const color = count === 3 ? 'red' : (count === 2 ? 'orange' : 'yellow');\r\n  const icon = `<i class=\"fa fa-star ${color}\" aria-hidden=\"true\"></i>`;\r\n\r\n  for (let i = 1; i <= count; i++) {\r\n    output += icon;\r\n  }\r\n  return output;\r\n};\r\n\r\nconst priorityExportFormatter: Formatter = (row, cell, value, columnDef, dataContext, grid) => {\r\n  if (!value) {\r\n    return '';\r\n  }\r\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\r\n  const translate = gridOptions.i18n;\r\n  const count = +(value >= 3 ? 3 : value);\r\n  const key = count === 3 ? 'HIGH' : (count === 2 ? 'MEDIUM' : 'LOW');\r\n\r\n  return translate && translate.instant && translate.instant(key);\r\n};\r\n\r\nconst taskTranslateFormatter: Formatter = (row: number, cell: number, value: any, columnDef: any, dataContext: any, grid: any) => {\r\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\r\n  const translate = gridOptions.i18n;\r\n\r\n  return translate && translate.instant && translate.instant('TASK_X', { x: value });\r\n};\r\n\r\n@Component({\r\n  templateUrl: './grid-contextmenu.component.html',\r\n  styleUrls: ['./grid-contextmenu.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class GridContextMenuComponent implements OnInit, OnDestroy {\r\n  title = 'Example 26: Cell Menu & Context Menu Plugins';\r\n  subTitle = `Add Cell Menu and Context Menu\r\n    <ul>\r\n      <li>This example demonstrates 2 SlickGrid plugins\r\n      <ol>\r\n      <li>Using the <b>Slick.Plugins.CellMenu</b> plugin, often used for an Action Menu(s), 1 or more per grid\r\n      (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Cell-Menu\" target=\"_blank\">Wiki docs</a>).\r\n    </li>\r\n    <li>Using the <b>Slick.Plugins.ContextMenu</b> plugin, shown after a mouse right+click, only 1 per grid.\r\n    (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Context-Menu\" target=\"_blank\">Wiki docs</a>).\r\n    </li>\r\n      </ol>\r\n      <li>It will also \"autoAdjustDrop\" (bottom/top) and \"autoAlignSide\" (left/right) by default but could be turned off</li>\r\n      <li>Both plugins have 2 sections, 1st section can have an array of Options (to change value of a field) and 2nd section an array of Commands (execute a command)</li>\r\n      <li>There are 2 ways to execute a Command/Option</li>\r\n      <ol>\r\n        <li>via onCommand/onOptionSelected (use a switch/case to parse command/option and do something with it)</li>\r\n        <li>via action callback (that can be defined on each command/option)</li>\r\n      </ol>\r\n      <li>Use override callback functions to change the properties of show/hide, enable/disable the menu or certain item(s) from the list</li>\r\n      <ol>\r\n        <li>These callbacks are: \"menuUsabilityOverride\", \"itemVisibilityOverride\", \"itemUsabilityOverride\"</li>\r\n        <li>... e.g. in the demo, the \"Action\" Cell Menu is only available when Priority is set to \"High\" via \"menuUsabilityOverride\"</li>\r\n        <li>... e.g. in the demo, the Context Menu is only available on the first 20 Tasks via \"menuUsabilityOverride\"</li>\r\n      </ol>\r\n    </ul>`;\r\n\r\n  private subscriptions: Subscription[] = [];\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions!: Column[];\r\n  gridOptions!: GridOption;\r\n  dataset!: any[];\r\n  selectedLanguage: string;\r\n\r\n  constructor(private translate: TranslateService) {\r\n    // always start with English for Cypress E2E tests to be consistent\r\n    const defaultLang = 'en';\r\n    this.translate.use(defaultLang);\r\n    this.selectedLanguage = defaultLang;\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  get cellMenuInstance(): any {\r\n    return this.angularGrid && this.angularGrid.extensionService.getSlickgridAddonInstance(ExtensionName.cellMenu) || {};\r\n  }\r\n\r\n  get contextMenuInstance(): any {\r\n    return this.angularGrid && this.angularGrid.extensionService.getSlickgridAddonInstance(ExtensionName.contextMenu) || {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.prepareGrid();\r\n    this.dataset = this.getData(1000);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // also unsubscribe all Angular Subscriptions\r\n    this.subscriptions = unsubscribeAllObservables(this.subscriptions);\r\n  }\r\n\r\n  prepareGrid() {\r\n    this.columnDefinitions = [\r\n      { id: 'id', name: '#', field: 'id', maxWidth: 45, sortable: true, filterable: true },\r\n      {\r\n        id: 'title', name: 'Title', field: 'id', nameKey: 'TITLE', minWidth: 100,\r\n        formatter: taskTranslateFormatter,\r\n        sortable: true,\r\n        filterable: true,\r\n        params: { useFormatterOuputToFilter: true }\r\n      },\r\n      {\r\n        id: 'percentComplete', nameKey: 'PERCENT_COMPLETE', field: 'percentComplete', minWidth: 100,\r\n        exportWithFormatter: false,\r\n        sortable: true, filterable: true,\r\n        filter: { model: Filters.slider, operator: '>=' },\r\n        formatter: Formatters.percentCompleteBar, type: FieldType.number,\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start', nameKey: 'START', minWidth: 100,\r\n        formatter: Formatters.dateIso, outputType: FieldType.dateIso, type: FieldType.date,\r\n        filterable: true, filter: { model: Filters.compoundDate }\r\n      },\r\n      { id: 'finish', name: 'Finish', field: 'finish', nameKey: 'FINISH', formatter: Formatters.dateIso, outputType: FieldType.dateIso, type: FieldType.date, minWidth: 100, filterable: true, filter: { model: Filters.compoundDate } },\r\n      {\r\n        id: 'priority', nameKey: 'PRIORITY', field: 'priority',\r\n        exportCustomFormatter: priorityExportFormatter,\r\n        formatter: priorityFormatter,\r\n        sortable: true, filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: 1, labelKey: 'LOW' }, { value: 2, labelKey: 'MEDIUM' }, { value: 3, labelKey: 'HIGH' }],\r\n          model: Filters.singleSelect,\r\n          enableTranslateLabel: true,\r\n          filterOptions: {\r\n            autoDropWidth: true\r\n          }\r\n        }\r\n      },\r\n      {\r\n        id: 'completed', nameKey: 'COMPLETED', field: 'completed',\r\n        exportCustomFormatter: Formatters.translateBoolean,\r\n        formatter: Formatters.checkmark,\r\n        sortable: true, filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, labelKey: 'TRUE' }, { value: false, labelKey: 'FALSE' }],\r\n          model: Filters.singleSelect,\r\n          enableTranslateLabel: true,\r\n          filterOptions: {\r\n            autoDropWidth: true\r\n          }\r\n        }\r\n      },\r\n      {\r\n        id: 'action', name: 'Action', field: 'action', width: 110, maxWidth: 200,\r\n        excludeFromExport: true,\r\n        formatter: actionFormatter,\r\n        cellMenu: {\r\n          hideCloseButton: false,\r\n          width: 200,\r\n          // you can override the logic of when the menu is usable\r\n          // for example say that we want to show a menu only when then Priority is set to 'High'.\r\n          // Note that this ONLY overrides the usability itself NOT the text displayed in the cell,\r\n          // if you wish to change the cell text (or hide it)\r\n          // then you SHOULD use it in combination with a custom formatter (actionFormatter) and use the same logic in that formatter\r\n          menuUsabilityOverride: (args) => {\r\n            return (args.dataContext.priority === 3); // option 3 is High\r\n          },\r\n\r\n          // when using Translate Service, every translation will have the suffix \"Key\"\r\n          // else use title without the suffix, for example \"commandTitle\" (no translations) or \"commandTitleKey\" (with translations)\r\n          commandTitleKey: 'COMMANDS', // optional title, use \"commandTitle\" when not using Translate\r\n          commandItems: [\r\n            // array of command item objects, you can also use the \"positionOrder\" that will be used to sort the items in the list\r\n            {\r\n              command: 'command2', title: 'Command 2', positionOrder: 62,\r\n              // you can use the \"action\" callback and/or use \"onCallback\" callback from the grid options, they both have the same arguments\r\n              action: (e, args) => {\r\n                console.log(args.dataContext, args.column);\r\n                // action callback.. do something\r\n              },\r\n              // only enable command when the task is not completed\r\n              itemUsabilityOverride: (args) => {\r\n                return !args.dataContext.completed;\r\n              }\r\n            },\r\n            { command: 'command1', title: 'Command 1', cssClass: 'orange', positionOrder: 61 },\r\n            {\r\n              command: 'delete-row', titleKey: 'DELETE_ROW', positionOrder: 64,\r\n              iconCssClass: 'fa fa-times', cssClass: 'red', textCssClass: 'bold',\r\n              // only show command to 'Delete Row' when the task is not completed\r\n              itemVisibilityOverride: (args) => {\r\n                return !args.dataContext.completed;\r\n              }\r\n            },\r\n            // you can pass divider as a string or an object with a boolean (if sorting by position, then use the object)\r\n            // note you should use the \"divider\" string only when items array is already sorted and positionOrder are not specified\r\n            { divider: true, command: '', positionOrder: 63 },\r\n            // 'divider',\r\n\r\n            {\r\n              command: 'help',\r\n              titleKey: 'HELP', // use \"title\" without translation and \"titleKey\" with TranslateService\r\n              iconCssClass: 'fa fa-question-circle',\r\n              positionOrder: 66,\r\n            },\r\n            { command: 'something', titleKey: 'DISABLED_COMMAND', disabled: true, positionOrder: 67, }\r\n          ],\r\n          optionTitleKey: 'CHANGE_COMPLETED_FLAG',\r\n          optionItems: [\r\n            { option: true, titleKey: 'TRUE', iconCssClass: 'fa fa-check-square-o' },\r\n            { option: false, titleKey: 'FALSE', iconCssClass: 'fa fa-square-o' },\r\n            {\r\n              option: null, title: 'null', cssClass: 'italic',\r\n              // you can use the \"action\" callback and/or use \"onCallback\" callback from the grid options, they both have the same arguments\r\n              action: (e, args) => {\r\n                // action callback.. do something\r\n              },\r\n              // only enable Action menu when the Priority is set to High\r\n              itemUsabilityOverride: (args) => {\r\n                return (args.dataContext.priority === 3);\r\n              },\r\n              // only show command to 'Delete Row' when the task is not completed\r\n              itemVisibilityOverride: (args) => {\r\n                return !args.dataContext.completed;\r\n              }\r\n            },\r\n          ]\r\n        }\r\n      },\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableCellNavigation: true,\r\n      enableFiltering: true,\r\n      enableSorting: true,\r\n      enableTranslate: true,\r\n      excelExportOptions: {\r\n        exportWithFormatter: true,\r\n        customColumnWidth: 15,\r\n\r\n        // you can customize how the header titles will be styled (defaults to Bold)\r\n        columnHeaderStyle: { font: { bold: true, italic: true } }\r\n      },\r\n      i18n: this.translate,\r\n\r\n      enableContextMenu: true,\r\n      enableCellMenu: true,\r\n\r\n      // when using the cellMenu, you can change some of the default options and all use some of the callback methods\r\n      cellMenu: {\r\n        // all the Cell Menu callback methods (except the action callback)\r\n        // are available under the grid options as shown below\r\n        onCommand: (e, args) => this.executeCommand(e, args),\r\n        onOptionSelected: (e, args) => {\r\n          // change \"Completed\" property with new option selected from the Cell Menu\r\n          const dataContext = args && args.dataContext;\r\n          if (dataContext && dataContext.hasOwnProperty('completed')) {\r\n            dataContext.completed = args.item.option;\r\n            this.angularGrid.gridService.updateItem(dataContext);\r\n          }\r\n        },\r\n        onBeforeMenuShow: ((e, args) => {\r\n          // for example, you could select the row that the click originated\r\n          // this.angularGrid.gridService.setSelectedRows([args.row]);\r\n          console.log('Before the Cell Menu is shown', args);\r\n        }),\r\n        onBeforeMenuClose: ((e, args) => console.log('Cell Menu is closing', args)),\r\n      },\r\n\r\n      // load Context Menu structure\r\n      contextMenu: this.getContextMenuOptions(),\r\n    };\r\n  }\r\n\r\n  executeCommand(e: Event, args: any) {\r\n    const columnDef = args.column;\r\n    const command = args.command;\r\n    const dataContext = args.dataContext;\r\n\r\n    switch (command) {\r\n      case 'command1':\r\n        alert('Command 1');\r\n        break;\r\n      case 'command2':\r\n        alert('Command 2');\r\n        break;\r\n      case 'help':\r\n        alert('Please help!');\r\n        break;\r\n      case 'delete-row':\r\n        if (confirm(`Do you really want to delete row ${args.row + 1} with ${this.translate.instant('TASK_X', { x: dataContext.id })}`)) {\r\n          this.angularGrid.dataView.deleteItem(dataContext.id);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  getData(count: number) {\r\n    // mock a dataset\r\n    const tmpData = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 30);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n\r\n      tmpData[i] = {\r\n        id: i,\r\n        duration: Math.floor(Math.random() * 25) + ' days',\r\n        percentComplete: Math.floor(Math.random() * 100),\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\r\n        priority: i % 3 ? 2 : (i % 5 ? 3 : 1),\r\n        completed: (i % 4 === 0),\r\n      };\r\n    }\r\n    return tmpData;\r\n  }\r\n\r\n  getContextMenuOptions(): ContextMenu {\r\n    return {\r\n      hideCloseButton: false,\r\n      width: 200,\r\n      // optionally and conditionally define when the the menu is usable,\r\n      // this should be used with a custom formatter to show/hide/disable the menu\r\n      menuUsabilityOverride: (args) => {\r\n        const dataContext = args && args.dataContext;\r\n        return (dataContext.id < 21); // say we want to display the menu only from Task 0 to 20\r\n      },\r\n      // which column to show the command list? when not defined it will be shown over all columns\r\n      commandShownOverColumnIds: ['id', 'title', 'percentComplete', 'start', 'finish', 'completed' /*, 'priority', 'action' */],\r\n      commandTitleKey: 'COMMANDS', // this title is optional, you could also use \"commandTitle\" when not using Translate\r\n      commandItems: [\r\n        { divider: true, command: '', positionOrder: 61 },\r\n        { command: 'delete-row', titleKey: 'DELETE_ROW', iconCssClass: 'fa fa-times', cssClass: 'red', textCssClass: 'bold', positionOrder: 62 },\r\n        // you can pass divider as a string or an object with a boolean (if sorting by position, then use the object)\r\n        // note you should use the \"divider\" string only when items array is already sorted and positionOrder are not specified\r\n        // 'divider',\r\n        { divider: true, command: '', positionOrder: 63 },\r\n        {\r\n          command: 'help', titleKey: 'HELP', iconCssClass: 'fa fa-question-circle', positionOrder: 64,\r\n          // you can use the 'action' callback and/or subscribe to the 'onCallback' event, they both have the same arguments\r\n          action: (e, args) => {\r\n            // action callback.. do something\r\n          },\r\n          // only show command to 'Help' when the task is Not Completed\r\n          itemVisibilityOverride: (args) => {\r\n            const dataContext = args && args.dataContext;\r\n            return (!dataContext.completed);\r\n          }\r\n        },\r\n        { command: 'something', titleKey: 'DISABLED_COMMAND', disabled: true, positionOrder: 65 },\r\n      ],\r\n\r\n      // Options allows you to edit a column from an option chose a list\r\n      // for example, changing the Priority value\r\n      // you can also optionally define an array of column ids that you wish to display this option list (when not defined it will show over all columns)\r\n      optionTitleKey: 'CHANGE_PRIORITY',\r\n      optionShownOverColumnIds: ['priority'], // optional, when defined it will only show over the columns (column id) defined in the array\r\n      optionItems: [\r\n        {\r\n          option: 0, title: 'n/a', textCssClass: 'italic',\r\n          // only enable this option when the task is Not Completed\r\n          itemUsabilityOverride: (args) => {\r\n            const dataContext = args && args.dataContext;\r\n            return (!dataContext.completed);\r\n          },\r\n          // you can use the 'action' callback and/or subscribe to the 'onCallback' event, they both have the same arguments\r\n          action: (e, args) => {\r\n            // action callback.. do something\r\n          },\r\n        },\r\n        { option: 1, iconCssClass: 'fa fa-star-o yellow', titleKey: 'LOW' },\r\n        { option: 2, iconCssClass: 'fa fa-star-half-o orange', titleKey: 'MEDIUM' },\r\n        { option: 3, iconCssClass: 'fa fa-star red', titleKey: 'HIGH' },\r\n        // you can pass divider as a string or an object with a boolean (if sorting by position, then use the object)\r\n        // note you should use the \"divider\" string only when items array is already sorted and positionOrder are not specified\r\n        'divider',\r\n        // { divider: true, option: '', positionOrder: 3 },\r\n        {\r\n          option: 4, title: 'Extreme', iconCssClass: 'fa fa-fire', disabled: true,\r\n          // only shown when the task is Not Completed\r\n          itemVisibilityOverride: (args) => {\r\n            const dataContext = args && args.dataContext;\r\n            return (!dataContext.completed);\r\n          }\r\n        },\r\n      ],\r\n      // subscribe to Context Menu\r\n      onBeforeMenuShow: ((e, args) => {\r\n        // for example, you could select the row it was clicked with\r\n        // grid.setSelectedRows([args.row]); // select the entire row\r\n        this.angularGrid.slickGrid.setActiveCell(args.row, args.cell, false); // select the cell that the click originated\r\n        console.log('Before the global Context Menu is shown', args);\r\n      }),\r\n      onBeforeMenuClose: ((e, args) => console.log('Global Context Menu is closing', args)),\r\n\r\n      // subscribe to Context Menu onCommand event (or use the action callback on each command)\r\n      onCommand: ((e, args) => this.executeCommand(e, args)),\r\n\r\n      // subscribe to Context Menu onOptionSelected event (or use the action callback on each option)\r\n      onOptionSelected: ((e, args) => {\r\n        // change Priority\r\n        const dataContext = args && args.dataContext;\r\n        if (dataContext && dataContext.hasOwnProperty('priority')) {\r\n          dataContext.priority = args.item.option;\r\n          this.angularGrid.gridService.updateItem(dataContext);\r\n        }\r\n      }),\r\n    };\r\n  }\r\n\r\n  showContextCommandsAndOptions(showBothList: boolean) {\r\n    // when showing both Commands/Options, we can just pass an empty array to show over all columns\r\n    // else show on all columns except Priority\r\n    const showOverColumnIds = showBothList ? [] : ['id', 'title', 'complete', 'start', 'finish', 'completed', 'action'];\r\n    this.contextMenuInstance.setOptions({\r\n      commandShownOverColumnIds: showOverColumnIds,\r\n      // hideCommandSection: !showBothList\r\n    });\r\n  }\r\n\r\n  showCellMenuCommandsAndOptions(showBothList: boolean) {\r\n    // change via the plugin setOptions\r\n    this.cellMenuInstance.setOptions({\r\n      hideOptionSection: !showBothList\r\n    });\r\n\r\n    // OR find the column, then change the same hide property\r\n    // var actionColumn = columns.find(function (column) { return column.id === 'action' });\r\n    // actionColumn.cellMenu.hideOptionSection = !showBothList;\r\n  }\r\n\r\n  switchLanguage() {\r\n    const nextLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\r\n\r\n    this.subscriptions.push(\r\n      this.translate.use(nextLanguage).subscribe(() => {\r\n        this.selectedLanguage = nextLanguage;\r\n      })\r\n    );\r\n  }\r\n}\r\n","export default \"<div class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-contextmenu.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <div class=\\\"row mb-1\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <span class=\\\"context-menu\\\">\\r\\n        <strong>Context Menu:</strong>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"showContextCommandsAndOptions(false)\\\"\\r\\n                data-test=\\\"context-menu-priority-only-button\\\">\\r\\n          Show Priority Options Only\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"showContextCommandsAndOptions(true)\\\"\\r\\n                data-test=\\\"context-menu-commands-and-priority-button\\\">\\r\\n          Show Commands & Priority Options\\r\\n        </button>\\r\\n      </span>\\r\\n\\r\\n      <span class=\\\"cell-menu\\\">\\r\\n        <strong>Cell Menu:</strong>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"showCellMenuCommandsAndOptions(false)\\\"\\r\\n                data-test=\\\"cell-menu-commands-and-options-false-button\\\">\\r\\n          Show Action Commands Only\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"showCellMenuCommandsAndOptions(true)\\\"\\r\\n                data-test=\\\"cell-menu-commands-and-options-true-button\\\">\\r\\n          Show Actions Commands & Completed Options\\r\\n        </button>\\r\\n      </span>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"row locale\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"switchLanguage()\\\" data-test=\\\"language-button\\\">\\r\\n        <i class=\\\"fa fa-language\\\"></i>\\r\\n        Switch Language\\r\\n      </button>\\r\\n      <b>Locale:</b>\\r\\n      <span style=\\\"font-style: italic\\\" data-test=\\\"selected-locale\\\">\\r\\n        {{selectedLanguage + '.json'}}\\r\\n      </span>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"col-sm-12\\\">\\r\\n    <angular-slickgrid gridId=\\\"grid26\\\"\\r\\n                       [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                       [gridOptions]=\\\"gridOptions\\\"\\r\\n                       [dataset]=\\\"dataset\\\"\\r\\n                       (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\r\\n    </angular-slickgrid>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \".bold {\\n  font-weight: bold;\\n}\\n\\n.italic {\\n  font-style: italic;\\n}\\n\\n.grey {\\n  color: grey;\\n}\\n\\n.orange {\\n  color: orange;\\n}\\n\\n.red {\\n  color: red;\\n}\\n\\n.yellow {\\n  color: #ffeb34;\\n}\\n\\n.pointer {\\n  cursor: pointer;\\n}\\n\\n.disabled {\\n  color: #ccc;\\n}\\n\\n.fake-hyperlink {\\n  cursor: pointer;\\n  color: #08c;\\n}\\n\\n.row.locale {\\n  margin-top: 5px;\\n}\\n\\nspan.cell-menu {\\n  margin-left: 15px;\\n}\";","import { Component, Injectable, OnInit } from '@angular/core';\r\nimport {\r\n  AngularGridInstance,\r\n  Aggregators,\r\n  Column,\r\n  DelimiterType,\r\n  FieldType,\r\n  FileType,\r\n  Filters,\r\n  Formatters,\r\n  GridOption,\r\n  Grouping,\r\n  GroupingGetterFunction,\r\n  GroupTotalFormatters,\r\n  SortDirectionNumber,\r\n  Sorters,\r\n} from './../modules/angular-slickgrid';\r\n\r\n@Injectable()\r\n@Component({\r\n  templateUrl: './grid-draggrouping.component.html'\r\n})\r\nexport class GridDraggableGroupingComponent implements OnInit {\r\n  title = 'Example 19: Draggable Grouping & Aggregators';\r\n  subTitle = `\r\n      <ul>\r\n        <li><a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Grouping-&-Aggregators\" target=\"_blank\">Wiki docs</a></li>\r\n        <li>This example shows 3 ways of grouping</li>\r\n        <ol>\r\n          <li>Drag any Column Header on the top placeholder to group by that column (support moti-columns grouping by adding more columns to the drop area).</li>\r\n          <li>Use buttons and defined functions to group by wichever field you want</li>\r\n          <li>Use the Select dropdown to group, the position of the Selects represent the grouping level</li>\r\n        </ol>\r\n        <li>Fully dynamic and interactive multi-level grouping with filtering and aggregates ovor 50'000 items</li>\r\n        <li>Each grouping level can have its own aggregates (over child rows, child groups, or all descendant rows)..</li>\r\n        <li>Use \"Aggregators\" and \"GroupTotalFormatters\" directly from Angular-Slickgrid</li>\r\n      </ul>\r\n    `;\r\n\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions!: Column[];\r\n  dataset!: any[];\r\n  dataviewObj: any;\r\n  draggableGroupingPlugin: any;\r\n  durationOrderByCount = false;\r\n  gridObj: any;\r\n  gridOptions!: GridOption;\r\n  processing = false;\r\n  selectedGroupingFields: Array<string | GroupingGetterFunction> = ['', '', ''];\r\n\r\n  constructor() {\r\n    // define the grid options & columns and then create the grid itself\r\n    this.loadData(500);\r\n    this.defineGrid();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // populate the dataset once the grid is ready\r\n    this.defineGrid();\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n    this.gridObj = angularGrid.slickGrid; // grid object\r\n    this.dataviewObj = angularGrid.dataView;\r\n  }\r\n\r\n  /* Define grid Options and Columns */\r\n  defineGrid() {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'title', name: 'Title', field: 'title',\r\n        width: 70, minWidth: 50,\r\n        cssClass: 'cell-title',\r\n        filterable: true,\r\n        sortable: true,\r\n        grouping: {\r\n          getter: 'title',\r\n          formatter: (g) => `Title: ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`,\r\n          aggregators: [\r\n            new Aggregators.Sum('cost')\r\n          ],\r\n          aggregateCollapsed: false,\r\n          collapsed: false\r\n        }\r\n      },\r\n      {\r\n        id: 'duration', name: 'Duration', field: 'duration',\r\n        width: 70,\r\n        sortable: true,\r\n        filterable: true,\r\n        filter: { model: Filters.slider, operator: '>=' },\r\n        type: FieldType.number,\r\n        groupTotalsFormatter: GroupTotalFormatters.sumTotals,\r\n        grouping: {\r\n          getter: 'duration',\r\n          formatter: (g) => `Duration: ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`,\r\n          comparer: (a, b) => {\r\n            return this.durationOrderByCount ? (a.count - b.count) : Sorters.numeric(a.value, b.value, SortDirectionNumber.asc);\r\n          },\r\n          aggregators: [\r\n            new Aggregators.Sum('cost')\r\n          ],\r\n          aggregateCollapsed: false,\r\n          collapsed: false\r\n        }\r\n      },\r\n      {\r\n        id: 'percentComplete', name: '% Complete', field: 'percentComplete',\r\n        minWidth: 70, width: 90,\r\n        formatter: Formatters.percentCompleteBar,\r\n        type: FieldType.number,\r\n        filterable: true,\r\n        filter: { model: Filters.compoundSlider },\r\n        sortable: true,\r\n        groupTotalsFormatter: GroupTotalFormatters.avgTotalsPercentage,\r\n        grouping: {\r\n          getter: 'percentComplete',\r\n          formatter: (g) => `% Complete: ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`,\r\n          aggregators: [\r\n            new Aggregators.Sum('cost')\r\n          ],\r\n          aggregateCollapsed: false,\r\n          collapsed: false\r\n        },\r\n        params: { groupFormatterPrefix: '<i>Avg</i>: ' }\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start', minWidth: 60,\r\n        sortable: true,\r\n        filterable: true,\r\n        filter: { model: Filters.compoundDate },\r\n        formatter: Formatters.dateIso,\r\n        type: FieldType.dateUtc,\r\n        outputType: FieldType.dateIso,\r\n        exportWithFormatter: true,\r\n        grouping: {\r\n          getter: 'start',\r\n          formatter: (g) => `Start: ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`,\r\n          aggregators: [\r\n            new Aggregators.Sum('cost')\r\n          ],\r\n          aggregateCollapsed: false,\r\n          collapsed: false\r\n        }\r\n      },\r\n      {\r\n        id: 'finish', name: 'Finish', field: 'finish',\r\n        minWidth: 60,\r\n        sortable: true,\r\n        filterable: true,\r\n        filter: { model: Filters.compoundDate },\r\n        formatter: Formatters.dateIso,\r\n        type: FieldType.dateUtc,\r\n        outputType: FieldType.dateIso,\r\n        exportWithFormatter: true,\r\n        grouping: {\r\n          getter: 'finish',\r\n          formatter: (g) => `Finish: ${g.value} <span style=\"color:green\">(${g.count} items)</span>`,\r\n          aggregators: [\r\n            new Aggregators.Sum('cost')\r\n          ],\r\n          aggregateCollapsed: false,\r\n          collapsed: false\r\n        }\r\n      },\r\n      {\r\n        id: 'cost', name: 'Cost', field: 'cost',\r\n        width: 90,\r\n        sortable: true,\r\n        filterable: true,\r\n        filter: { model: Filters.compoundInput },\r\n        formatter: Formatters.dollar,\r\n        groupTotalsFormatter: GroupTotalFormatters.sumTotalsDollar,\r\n        type: FieldType.number,\r\n        grouping: {\r\n          getter: 'cost',\r\n          formatter: (g) => `Cost: ${g.value} <span style=\"color:green\">(${g.count} items)</span>`,\r\n          aggregators: [\r\n            new Aggregators.Sum('cost')\r\n          ],\r\n          aggregateCollapsed: true,\r\n          collapsed: true\r\n        }\r\n      },\r\n      {\r\n        id: 'effortDriven', name: 'Effort Driven', field: 'effortDriven',\r\n        width: 80, minWidth: 20, maxWidth: 100,\r\n        cssClass: 'cell-effort-driven',\r\n        sortable: true,\r\n        filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\r\n          model: Filters.singleSelect\r\n        },\r\n        formatter: Formatters.checkmark,\r\n        grouping: {\r\n          getter: 'effortDriven',\r\n          formatter: (g) => `Effort-Driven: ${g.value ? 'True' : 'False'} <span style=\"color:green\">(${g.count} items)</span>`,\r\n          aggregators: [\r\n            new Aggregators.Sum('cost')\r\n          ],\r\n          collapsed: false\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableDraggableGrouping: true,\r\n      createPreHeaderPanel: true,\r\n      showPreHeaderPanel: true,\r\n      preHeaderPanelHeight: 40,\r\n      enableFiltering: true,\r\n      // you could debounce/throttle the input text filter if you have lots of data\r\n      // filterTypingDebounce: 250,\r\n      enableSorting: true,\r\n      exportOptions: {\r\n        sanitizeDataExport: true\r\n      },\r\n      gridMenu: {\r\n        onCommand: (e, args) => {\r\n          if (args.command === 'toggle-preheader') {\r\n            // in addition to the grid menu pre-header toggling (internally), we will also clear grouping\r\n            this.clearGrouping();\r\n          }\r\n        },\r\n      },\r\n      draggableGrouping: {\r\n        dropPlaceHolderText: 'Drop a column header here to group by the column',\r\n        // groupIconCssClass: 'fa fa-outdent',\r\n        deleteIconCssClass: 'fa fa-times',\r\n        onGroupChanged: (e, args) => this.onGroupChanged(args),\r\n        onExtensionRegistered: (extension) => this.draggableGroupingPlugin = extension,\r\n      }\r\n    };\r\n\r\n    this.loadData(500);\r\n  }\r\n\r\n  loadData(rowCount: number) {\r\n    // mock a dataset\r\n    this.dataset = [];\r\n    for (let i = 0; i < rowCount; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n\r\n      this.dataset[i] = {\r\n        id: 'id_' + i,\r\n        num: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 100) + '',\r\n        percentComplete: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\r\n        cost: (i % 33 === 0) ? null : Math.round(Math.random() * 10000) / 100,\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n  }\r\n\r\n  clearGroupsAndSelects() {\r\n    this.clearGroupingSelects();\r\n    this.clearGrouping();\r\n  }\r\n\r\n  clearGrouping() {\r\n    if (this.draggableGroupingPlugin && this.draggableGroupingPlugin.setDroppedGroups) {\r\n      this.draggableGroupingPlugin.clearDroppedGroups();\r\n    }\r\n    this.gridObj.invalidate(); // invalidate all rows and re-render\r\n  }\r\n\r\n  clearGroupingSelects() {\r\n    this.selectedGroupingFields.forEach((g, i) => this.selectedGroupingFields[i] = '');\r\n  }\r\n\r\n  collapseAllGroups() {\r\n    this.dataviewObj.collapseAllGroups();\r\n  }\r\n\r\n  expandAllGroups() {\r\n    this.dataviewObj.expandAllGroups();\r\n  }\r\n\r\n  exportToExcel() {\r\n    this.angularGrid.excelExportService!.exportToExcel({\r\n      filename: 'Export',\r\n      format: FileType.xlsx\r\n    });\r\n  }\r\n\r\n  exportToCsv(type = 'csv') {\r\n    this.angularGrid.exportService.exportToFile({\r\n      delimiter: (type === 'csv') ? DelimiterType.comma : DelimiterType.tab,\r\n      filename: 'myExport',\r\n      format: (type === 'csv') ? FileType.csv : FileType.txt\r\n    });\r\n  }\r\n\r\n  groupByDuration() {\r\n    this.clearGrouping();\r\n    if (this.draggableGroupingPlugin && this.draggableGroupingPlugin.setDroppedGroups) {\r\n      this.showPreHeader();\r\n      this.draggableGroupingPlugin.setDroppedGroups('duration');\r\n      this.gridObj.invalidate(); // invalidate all rows and re-render\r\n    }\r\n  }\r\n\r\n  groupByDurationOrderByCount(sortedByCount = false) {\r\n    this.durationOrderByCount = sortedByCount;\r\n    this.clearGrouping();\r\n    this.groupByDuration();\r\n\r\n    // you need to manually add the sort icon(s) in UI\r\n    const sortColumns = sortedByCount ? [] : [{ columnId: 'duration', sortAsc: true }];\r\n    this.angularGrid.filterService.setSortColumnIcons(sortColumns);\r\n  }\r\n\r\n  groupByDurationEffortDriven() {\r\n    this.clearGrouping();\r\n    if (this.draggableGroupingPlugin && this.draggableGroupingPlugin.setDroppedGroups) {\r\n      this.showPreHeader();\r\n      this.draggableGroupingPlugin.setDroppedGroups(['duration', 'effortDriven']);\r\n      this.gridObj.invalidate(); // invalidate all rows and re-render\r\n    }\r\n  }\r\n\r\n  groupByFieldName(fieldName: string, index: number) {\r\n    this.clearGrouping();\r\n    if (this.draggableGroupingPlugin && this.draggableGroupingPlugin.setDroppedGroups) {\r\n      // get the field names from Group By select(s) dropdown, but filter out any empty fields\r\n      const groupedFields = this.selectedGroupingFields.filter((g) => g !== '');\r\n\r\n      this.showPreHeader();\r\n      this.draggableGroupingPlugin.setDroppedGroups(groupedFields);\r\n      this.gridObj.invalidate(); // invalidate all rows and re-render\r\n    }\r\n  }\r\n\r\n  onGroupChanged(change: { caller?: string; groupColumns: Grouping[] }) {\r\n    // the \"caller\" property might not be in the SlickGrid core lib yet, reference PR https://github.com/6pac/SlickGrid/pull/303\r\n    const caller = change && change.caller || [];\r\n    const groups = change && change.groupColumns || [];\r\n\r\n    if (Array.isArray(this.selectedGroupingFields) && Array.isArray(groups) && groups.length > 0) {\r\n      // update all Group By select dropdown\r\n      this.selectedGroupingFields.forEach((g, i) => this.selectedGroupingFields[i] = groups[i] && groups[i].getter || '');\r\n    } else if (groups.length === 0 && caller === 'remove-group') {\r\n      this.clearGroupingSelects();\r\n    }\r\n  }\r\n\r\n  showPreHeader() {\r\n    this.gridObj.setPreHeaderPanelVisibility(true);\r\n  }\r\n\r\n  selectTrackByFn(index: number, item: any) {\r\n    return index;\r\n  }\r\n\r\n  setFiltersDynamically() {\r\n    // we can Set Filters Dynamically (or different filters) afterward through the FilterService\r\n    this.angularGrid.filterService.updateFilters([\r\n      { columnId: 'percentComplete', operator: '>=', searchTerms: ['55'] },\r\n      { columnId: 'cost', operator: '<', searchTerms: ['80'] },\r\n    ]);\r\n  }\r\n\r\n  setSortingDynamically() {\r\n    this.angularGrid.sortService.updateSorting([\r\n      // orders matter, whichever is first in array will be the first sorted column\r\n      { columnId: 'percentComplete', direction: 'ASC' },\r\n    ]);\r\n  }\r\n\r\n  toggleDraggableGroupingRow() {\r\n    this.clearGrouping();\r\n    this.gridObj.setPreHeaderPanelVisibility(!this.gridObj.getOptions().showPreHeaderPanel);\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-draggrouping.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <form class=\\\"form-inline\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-sm-12\\\">\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"add-500-rows-btn\\\" (click)=\\\"loadData(500)\\\">\\r\\n          500 rows\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"add-50k-rows-btn\\\" (click)=\\\"loadData(50000)\\\">\\r\\n          50k rows\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"clear-grouping-btn\\\"\\r\\n                (click)=\\\"clearGroupsAndSelects()\\\">\\r\\n          <i class=\\\"fa fa-times\\\"></i> Clear grouping\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"collapse-all-btn\\\" (click)=\\\"collapseAllGroups()\\\">\\r\\n          <i class=\\\"fa fa-compress\\\"></i> Collapse all groups\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"expand-all-btn\\\" (click)=\\\"expandAllGroups()\\\">\\r\\n          <i class=\\\"fa fa-expand\\\"></i> Expand all groups\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"toggleDraggableGroupingRow()\\\">\\r\\n          Toggle Draggable Grouping Row\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"exportToExcel()\\\">\\r\\n          <i class=\\\"fa fa-file-excel-o text-success\\\"></i> Export to Excel\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-sm-12\\\">\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"group-duration-sort-value-btn\\\"\\r\\n                (click)=\\\"groupByDurationOrderByCount(false)\\\">\\r\\n          Group by duration &amp; sort groups by value\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"group-duration-sort-count-btn\\\"\\r\\n                (click)=\\\"groupByDurationOrderByCount(true)\\\">\\r\\n          Group by duration &amp; sort groups by count\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"group-duration-effort-btn\\\"\\r\\n                (click)=\\\"groupByDurationEffortDriven()\\\">\\r\\n          Group by Duration &amp; then Effort-Driven\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"set-dynamic-filter\\\"\\r\\n                (click)=\\\"setFiltersDynamically()\\\">\\r\\n          Set Filters Dynamically\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"set-dynamic-sorting\\\"\\r\\n                (click)=\\\"setSortingDynamically()\\\">\\r\\n          Set Sorting Dynamically\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"row mt-2\\\">\\r\\n      <div class=\\\"col-sm-12\\\">\\r\\n        <div class=\\\"form-row\\\">\\r\\n          <div class=\\\"row form-group\\\">\\r\\n            <label for=\\\"field1\\\" class=\\\"col-sm-3 mb-2\\\">Group by field(s)</label>\\r\\n            <div class=\\\"form-group col-md-3\\\"\\r\\n                 *ngFor=\\\"let groupField of selectedGroupingFields; let i = index; trackBy: selectTrackByFn\\\">\\r\\n              <select class=\\\"form-select\\\" name=\\\"groupField{{i}}\\\" [(ngModel)]=\\\"selectedGroupingFields[i]\\\"\\r\\n                      (ngModelChange)=\\\"groupByFieldName($event, i)\\\">\\r\\n                <option value=\\\"\\\"></option>\\r\\n                <option [ngValue]=\\\"field.id\\\" *ngFor=\\\"let field of columnDefinitions\\\">{{field.name}}</option>\\r\\n              </select>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </form>\\r\\n  <div class=\\\"row mt-1 mb-1\\\">\\r\\n    <hr />\\r\\n  </div>\\r\\n\\r\\n  <angular-slickgrid gridId=\\\"grid19\\\"\\r\\n                     [dataset]=\\\"dataset\\\"\\r\\n                     [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                     [gridOptions]=\\\"gridOptions\\\"\\r\\n                     (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\r\\n  </angular-slickgrid>\\r\\n</div>\\r\\n\";","import { Column, ColumnEditor, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../modules/angular-slickgrid';\r\n\r\n// using external non-typed js libraries\r\ndeclare const $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class CustomInputEditor implements Editor {\r\n  private _lastInputEvent?: JQuery.Event;\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): ColumnEditor {\r\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  get hasAutoCommitEdit() {\r\n    return this.args.grid.getOptions().autoCommitEdit;\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator | undefined {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    const placeholder = this.columnEditor && this.columnEditor.placeholder || '';\r\n    const title = this.columnEditor && this.columnEditor.title || '';\r\n\r\n    this.$input = $(`<input type=\"text\" class=\"editor-text\" placeholder=\"${placeholder}\" title=\"${title}\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (event: JQuery.Event) => {\r\n        this._lastInputEvent = event;\r\n        if (event.keyCode === KeyCode.LEFT || event.keyCode === KeyCode.RIGHT) {\r\n          event.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    // the lib does not get the focus out event for some reason\r\n    // so register it here\r\n    if (this.hasAutoCommitEdit) {\r\n      this.$input.on('focusout', () => this.save());\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.off('keydown.nav').remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this.$input.val(val);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field] || '';\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    const validation = this.validate(state);\r\n    item[this.args.column.field] = (validation && validation.valid) ? state : '';\r\n  }\r\n\r\n  isValueChanged() {\r\n    const lastEvent = this._lastInputEvent && this._lastInputEvent.keyCode;\r\n    if (this.columnEditor && this.columnEditor.alwaysSaveOnEnterKey && lastEvent === KeyCode.ENTER) {\r\n      return true;\r\n    }\r\n    return (!(this.$input.val() === '' && this.defaultValue === null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  save() {\r\n    const validation = this.validate();\r\n    if (validation && validation.valid) {\r\n      if (this.hasAutoCommitEdit) {\r\n        this.args.grid.getEditorLock().commitCurrentEdit();\r\n      } else {\r\n        this.args.commitChanges();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(inputValue?: any): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const value = (inputValue !== undefined) ? inputValue : this.$input && this.$input.val && this.$input.val();\r\n      return this.validator(value, this.args);\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n","import { Component, Injectable, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Instance as FlatpickrInstance } from 'flatpickr/dist/types/instance';\r\nimport {\r\n  AngularGridInstance,\r\n  AutocompleteOption,\r\n  Column,\r\n  Editors,\r\n  EditorArgs,\r\n  EditorValidator,\r\n  FieldType,\r\n  Filters,\r\n  FlatpickrOption,\r\n  Formatter,\r\n  Formatters,\r\n  GridOption,\r\n  LongTextEditorOption,\r\n  OnEventArgs,\r\n  OperatorType,\r\n  Sorters,\r\n} from './../modules/angular-slickgrid';\r\nimport { CustomInputEditor } from './custom-inputEditor';\r\nimport { CustomInputFilter } from './custom-inputFilter';\r\nimport { Subject } from 'rxjs';\r\n\r\n// using external non-typed js libraries\r\ndeclare const Slick: any;\r\ndeclare const $: any;\r\n\r\nconst NB_ITEMS = 100;\r\nconst URL_SAMPLE_COLLECTION_DATA = 'assets/data/collection_100_numbers.json';\r\nconst URL_COUNTRIES_COLLECTION = 'assets/data/countries.json';\r\nconst URL_COUNTRY_NAMES = 'assets/data/country_names.json';\r\n\r\n// you can create custom validator to pass to an inline editor\r\nconst myCustomTitleValidator: EditorValidator = (value: any, args?: EditorArgs) => {\r\n  // you can get the Editor Args which can be helpful, e.g. we can get the Translate Service from it\r\n  const grid = args && args.grid;\r\n  const gridOptions = (grid && grid.getOptions) ? grid.getOptions() : {};\r\n  const translate = gridOptions.i18n;\r\n\r\n  // to get the editor object, you'll need to use \"internalColumnEditor\"\r\n  // don't use \"editor\" property since that one is what SlickGrid uses internally by it's editor factory\r\n  const columnEditor = args && args.column && args.column.internalColumnEditor;\r\n\r\n  if (value === null || value === undefined || !value.length) {\r\n    return { valid: false, msg: 'This is a required field' };\r\n  } else if (!/^Task\\s\\d+$/.test(value)) {\r\n    return { valid: false, msg: 'Your title is invalid, it must start with \"Task\" followed by a number' };\r\n    // OR use the Translate Service with your custom message\r\n    // return { valid: false, msg: translate.instant('YOUR_ERROR', { x: value }) };\r\n  }\r\n  return { valid: true, msg: '' };\r\n};\r\n\r\n// create a custom Formatter to show the Task + value\r\nconst taskFormatter: Formatter = (row, cell, value, columnDef, dataContext) => {\r\n  if (value && Array.isArray(value)) {\r\n    const taskValues = value.map((val) => `Task ${val}`);\r\n    const values = taskValues.join(', ');\r\n    return `<span title=\"${values}\">${values}</span>`;\r\n  }\r\n  return '';\r\n};\r\n@Component({\r\n  templateUrl: './grid-editor.component.html'\r\n})\r\n@Injectable()\r\nexport class GridEditorComponent implements OnInit {\r\n  title = 'Example 3: Editors / Delete';\r\n  subTitle = `\r\n  Grid with Inline Editors and onCellClick actions (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Editors\" target=\"_blank\">Wiki docs</a>).\r\n  <ul>\r\n    <li>Multiple Editors & Filters are available: AutoComplete, Checkbox, Date, Slider, SingleSelect, MultipleSelect, Float, Text, LongText... even Custom Editor</li>\r\n    <li>When using \"enableCellNavigation: true\", clicking on a cell will automatically make it active &amp; selected.</li>\r\n    <ul><li>If you don't want this behavior, then you should disable \"enableCellNavigation\"</li></ul>\r\n    <li>Inline Editors requires \"enableCellNavigation: true\" (not sure why though)</li>\r\n    <li>\r\n        Support Excel Copy Buffer (SlickGrid Copy Manager Plugin), you can use it by simply enabling \"enableExcelCopyBuffer\" flag.\r\n        Note that it will only evaluate Formatter when the \"exportWithFormatter\" flag is enabled (through \"ExportOptions\" or the column definition)\r\n    </li>\r\n    <li>MultipleSelect & SingeSelect Editors & Filters can use a regular \"collection\" or \"collectionAsync\" to load it asynchronously</li>\r\n    <ul>\r\n      <li>Click on \"Add Item\" and see the Editor/Filter or the \"Prerequesites\" column change</li>\r\n      <li>Any Editor/Filter with a \"collection\" can be changed dynamically later in the future</li>\r\n    </ul>\r\n  </ul>\r\n  `;\r\n\r\n  private _commandQueue: any = [];\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions!: Column[];\r\n  gridOptions!: GridOption;\r\n  dataset!: any[];\r\n  gridObj: any;\r\n  isAutoEdit = true;\r\n  alertWarning: any;\r\n  updatedObject: any;\r\n  selectedLanguage = 'en';\r\n  duplicateTitleHeaderCount = 1;\r\n\r\n  constructor(private http: HttpClient, private translate: TranslateService) { }\r\n\r\n  ngOnInit() {\r\n    this.prepareGrid();\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n    this.gridObj = angularGrid.slickGrid;\r\n  }\r\n\r\n  prepareGrid() {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'edit',\r\n        field: 'id',\r\n        excludeFromColumnPicker: true,\r\n        excludeFromGridMenu: true,\r\n        excludeFromHeaderMenu: true,\r\n        formatter: Formatters.editIcon,\r\n        minWidth: 30,\r\n        maxWidth: 30,\r\n        // use onCellClick OR grid.onClick.subscribe which you can see down below\r\n        onCellClick: (e: Event, args: OnEventArgs) => {\r\n          console.log(args);\r\n          this.alertWarning = `Editing: ${args.dataContext.title}`;\r\n          this.angularGrid.gridService.highlightRow(args.row, 1500);\r\n          this.angularGrid.gridService.setSelectedRow(args.row);\r\n        }\r\n      }, {\r\n        id: 'delete',\r\n        field: 'id',\r\n        excludeFromColumnPicker: true,\r\n        excludeFromGridMenu: true,\r\n        excludeFromHeaderMenu: true,\r\n        formatter: Formatters.deleteIcon,\r\n        minWidth: 30,\r\n        maxWidth: 30,\r\n        // use onCellClick OR grid.onClick.subscribe which you can see down below\r\n        /*\r\n        onCellClick: (e: Event, args: OnEventArgs) => {\r\n          console.log(args);\r\n          this.alertWarning = `Deleting: ${args.dataContext.title}`;\r\n        }\r\n        */\r\n      }, {\r\n        id: 'title',\r\n        name: 'Title',\r\n        field: 'title',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        sortable: true,\r\n        type: FieldType.string,\r\n        editor: {\r\n          model: Editors.longText,\r\n          required: true,\r\n          maxLength: 12,\r\n          editorOptions: {\r\n            // you can change textarea cols,rows (defaults to 40,4)\r\n            cols: 42,\r\n            rows: 5,\r\n            buttonTexts: {\r\n              /* you can change button texts (defaults to \"Cancel\", \"Save\") */\r\n              // cancel: 'Close',\r\n              // save: 'Done'\r\n\r\n              /* or with translations (defaults to \"CANCEL\", \"SAVE\") */\r\n              // cancelKey: 'CANCEL',\r\n              // saveKey: 'SAVE'\r\n            }\r\n          } as LongTextEditorOption,\r\n          validator: myCustomTitleValidator,\r\n        },\r\n        onCellChange: (e: Event, args: OnEventArgs) => {\r\n          console.log(args);\r\n          this.alertWarning = `Updated Title: ${args.dataContext.title}`;\r\n        }\r\n      }, {\r\n        id: 'title2',\r\n        name: 'Title, Custom Editor',\r\n        field: 'title',\r\n        minWidth: 70,\r\n        filterable: true,\r\n        sortable: true,\r\n        type: FieldType.string,\r\n        editor: {\r\n          model: CustomInputEditor,\r\n          placeholder: 'custom',\r\n          validator: myCustomTitleValidator, // use a custom validator\r\n        },\r\n        filter: {\r\n          model: CustomInputFilter,\r\n          placeholder: '🔎︎ custom',\r\n        },\r\n      }, {\r\n        id: 'duration',\r\n        name: 'Duration (days)',\r\n        field: 'duration',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        sortable: true,\r\n        formatter: Formatters.complexObject,\r\n        type: FieldType.number,\r\n        exportWithFormatter: true,\r\n        filter: { model: Filters.slider, params: { hideSliderNumber: false } },\r\n        editor: {\r\n          model: Editors.slider,\r\n          minValue: 0,\r\n          maxValue: 100,\r\n          // params: { hideSliderNumber: true },\r\n        },\r\n        /*\r\n        editor: {\r\n          // default is 0 decimals, if no decimals is passed it will accept 0 or more decimals\r\n          // however if you pass the \"decimalPlaces\", it will validate with that maximum\r\n          alwaysSaveOnEnterKey: true, // defaults to False, when set to true and user presses ENTER it will always call a Save even if value is empty\r\n          model: Editors.float,\r\n          placeholder: 'enter number',\r\n          title: 'Your number must be bigger than 5', // add a custom title, to see it as a real tooltip you'll need to implement something like tipsy jquery lib\r\n          minValue: 5,\r\n          maxValue: 365,\r\n          // the default validation error message is in English but you can override it by using \"errorMessage\"\r\n          // errorMessage: this.i18n.tr('INVALID_FLOAT', { maxDecimal: 2 }),\r\n          params: { decimalPlaces: 2 },\r\n        },\r\n        */\r\n      }, {\r\n        id: 'complete',\r\n        name: '% Complete',\r\n        field: 'percentComplete',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        formatter: Formatters.multiple,\r\n        type: FieldType.number,\r\n        editor: {\r\n          model: Editors.singleSelect,\r\n\r\n          // We can also add HTML text to be rendered (any bad script will be sanitized) but we have to opt-in, else it will be sanitized\r\n          enableRenderHtml: true,\r\n          collection: Array.from(Array(101).keys()).map(k => ({ value: k, label: k, symbol: '<i class=\"fa fa-percent\" style=\"color:cadetblue\"></i>' })),\r\n          customStructure: {\r\n            value: 'value',\r\n            label: 'label',\r\n            labelSuffix: 'symbol'\r\n          },\r\n\r\n          // collection: Array.from(Array(101).keys()).map(k => ({ value: k, label: k, labelSuffix: '%' })),\r\n          collectionSortBy: {\r\n            property: 'label',\r\n            sortDesc: true\r\n          },\r\n          collectionFilterBy: {\r\n            property: 'value',\r\n            value: 0,\r\n            operator: OperatorType.notEqual\r\n          },\r\n          // you could also provide a collection override to filter/sort based on the item dataContext or whatever else\r\n          // collectionOverride: (updatedCollection, args) => {\r\n          //   console.log(args);\r\n          //   return updatedCollection.filter((col) => args.dataContext.id % 2 ? col.value < 50 : col.value >= 50);\r\n          // },\r\n          editorOptions: {\r\n            maxHeight: 400\r\n          }\r\n        },\r\n        params: {\r\n          formatters: [Formatters.collectionEditor, Formatters.percentCompleteBar],\r\n        },\r\n        // validator: (value, args) => {\r\n        //   if (value < 50) {\r\n        //     return { valid: false, msg: 'Please use at least 50%' };\r\n        //   }\r\n        //   return { valid: true, msg: '' };\r\n        // }\r\n      }, {\r\n        id: 'start',\r\n        name: 'Start',\r\n        field: 'start',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        filter: { model: Filters.compoundDate },\r\n        formatter: Formatters.multiple,\r\n        params: {\r\n          formatters: [Formatters.complexObject, Formatters.dateIso]\r\n        },\r\n        exportWithFormatter: true,\r\n        sortable: true,\r\n        type: FieldType.date,\r\n        editor: {\r\n          model: Editors.date,\r\n        },\r\n      }, {\r\n        id: 'finish',\r\n        name: 'Finish',\r\n        field: 'finish',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        sortable: true,\r\n        filter: { model: Filters.compoundDate },\r\n        formatter: Formatters.dateIso,\r\n        exportWithFormatter: true,\r\n        type: FieldType.date,              // dataset cell input format\r\n        // outputType: FieldType.dateUs,   // date picker format\r\n        saveOutputType: FieldType.dateUtc, // save output date formattype: FieldType.date,\r\n        editor: {\r\n          model: Editors.date,\r\n          // override any of the Flatpickr options through \"editorOptions\"\r\n          // please note that there's no TSlint on this property since it's generic for any filter, so make sure you entered the correct filter option(s)\r\n          editorOptions: {\r\n            minDate: 'today',\r\n\r\n            // if we want to preload the date picker with a different date,\r\n            // we could toggle the `closeOnSelect: false`, set the date in the picker and re-toggle `closeOnSelect: true`\r\n            // closeOnSelect: false,\r\n            // onOpen: (selectedDates: Date[] | Date, dateStr: string, instance: FlatpickrInstance) => {\r\n            //   instance.setDate('2021-12-31', true);\r\n            //   instance.set('closeOnSelect', true);\r\n            // },\r\n          } as FlatpickrOption\r\n        },\r\n      }, {\r\n        id: 'cityOfOrigin', name: 'City of Origin', field: 'cityOfOrigin',\r\n        filterable: true,\r\n        minWidth: 100,\r\n        editor: {\r\n          model: Editors.autoComplete,\r\n          placeholder: '🔎︎ search city',\r\n\r\n          // We can use the autocomplete through 3 ways \"collection\", \"collectionAsync\" or with your own autocomplete options\r\n          // use your own autocomplete options, instead of $.ajax, use http\r\n          // here we use $.ajax just because I'm not sure how to configure http with JSONP and CORS\r\n          editorOptions: {\r\n            forceUserInput: true,\r\n            minLength: 3,\r\n            source: (request, response) => {\r\n              /** with Angular Http, note this demo won't work because of CORS */\r\n              // this.http.get(`http://gd.geobytes.com/AutoCompleteCity?q=${request.term}`).subscribe(data => response(data));\r\n\r\n              /** with jQuery AJAX will work locally but not on the GitHub demo because of CORS */\r\n              $.ajax({\r\n                url: 'http://gd.geobytes.com/AutoCompleteCity',\r\n                dataType: 'jsonp',\r\n                data: {\r\n                  q: request.term\r\n                },\r\n                success: (data: any) => response(data)\r\n              });\r\n            }\r\n          } as AutocompleteOption,\r\n        },\r\n        filter: {\r\n          model: Filters.autoComplete,\r\n          // placeholder: '🔎︎ search city',\r\n\r\n          // We can use the autocomplete through 3 ways \"collection\", \"collectionAsync\" or with your own autocomplete options\r\n          // collectionAsync: this.http.get(URL_COUNTRIES_COLLECTION),\r\n\r\n          // OR use your own autocomplete options, instead of $.ajax, use http\r\n          // here we use $.ajax just because I'm not sure how to configure http with JSONP and CORS\r\n          filterOptions: {\r\n            minLength: 3,\r\n            source: (request, response) => {\r\n              $.ajax({\r\n                url: 'http://gd.geobytes.com/AutoCompleteCity',\r\n                dataType: 'jsonp',\r\n                data: {\r\n                  q: request.term\r\n                },\r\n                success: (data: any) => response(data)\r\n              });\r\n            }\r\n          } as AutocompleteOption,\r\n        }\r\n      }, {\r\n        id: 'countryOfOrigin', name: 'Country of Origin', field: 'countryOfOrigin',\r\n        formatter: Formatters.complexObject,\r\n        exportWithFormatter: true,\r\n        dataKey: 'code',\r\n        labelKey: 'name',\r\n        type: FieldType.object,\r\n        sorter: Sorters.objectString, // this sorter requires the dataKey and assume that obj1[dataKey] will be a string so it can sort it that way\r\n        filterable: true,\r\n        sortable: true,\r\n        minWidth: 100,\r\n        editor: {\r\n          model: Editors.autoComplete,\r\n          customStructure: { label: 'name', value: 'code' },\r\n          collectionAsync: this.http.get(URL_COUNTRIES_COLLECTION),\r\n        },\r\n        filter: {\r\n          model: Filters.autoComplete,\r\n          customStructure: { label: 'name', value: 'code' },\r\n          collectionAsync: this.http.get(URL_COUNTRIES_COLLECTION),\r\n        }\r\n      }, {\r\n        id: 'countryOfOriginName', name: 'Country of Origin Name', field: 'countryOfOriginName',\r\n        filterable: true,\r\n        sortable: true,\r\n        minWidth: 100,\r\n        editor: {\r\n          model: Editors.autoComplete,\r\n          collectionAsync: this.http.get(URL_COUNTRY_NAMES),\r\n        },\r\n        filter: {\r\n          model: Filters.autoComplete,\r\n          collectionAsync: this.http.get(URL_COUNTRY_NAMES),\r\n        }\r\n      }, {\r\n        id: 'effort-driven',\r\n        name: 'Effort Driven',\r\n        field: 'effortDriven',\r\n        minWidth: 70,\r\n        filterable: true,\r\n        type: FieldType.boolean,\r\n        filter: {\r\n          model: Filters.singleSelect,\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\r\n        },\r\n        formatter: Formatters.checkmark,\r\n        editor: {\r\n          model: Editors.checkbox,\r\n        },\r\n      }, {\r\n        id: 'prerequisites',\r\n        name: 'Prerequisites',\r\n        field: 'prerequisites',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        formatter: taskFormatter,\r\n        exportWithFormatter: true,\r\n        sanitizeDataExport: true,\r\n        sortable: true,\r\n        type: FieldType.string,\r\n        editor: {\r\n          placeholder: 'choose option',\r\n          collectionAsync: this.http.get<{ value: string; label: string; }[]>(URL_SAMPLE_COLLECTION_DATA),\r\n          // OR a regular collection load\r\n          // collection: Array.from(Array(100).keys()).map(k => ({ value: k, prefix: 'Task', label: k })),\r\n          collectionSortBy: {\r\n            property: 'label',\r\n            sortDesc: true\r\n          },\r\n          customStructure: {\r\n            label: 'label',\r\n            value: 'value',\r\n            labelPrefix: 'prefix',\r\n          },\r\n          collectionOptions: {\r\n            separatorBetweenTextLabels: ' '\r\n          },\r\n          model: Editors.multipleSelect,\r\n          required: true\r\n        },\r\n        filter: {\r\n          collectionAsync: this.http.get<{ value: string; label: string; }[]>(URL_SAMPLE_COLLECTION_DATA),\r\n          // OR a regular collection load\r\n          // collection: Array.from(Array(100).keys()).map(k => ({ value: k, prefix: 'Task', label: k })),\r\n          collectionSortBy: {\r\n            property: 'label',\r\n            sortDesc: true\r\n          },\r\n          customStructure: {\r\n            label: 'label',\r\n            value: 'value',\r\n            labelPrefix: 'prefix',\r\n          },\r\n          collectionOptions: {\r\n            separatorBetweenTextLabels: ' '\r\n          },\r\n          model: Filters.multipleSelect,\r\n          operator: OperatorType.inContains,\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      asyncEditorLoading: false,\r\n      autoEdit: this.isAutoEdit,\r\n      autoCommitEdit: false,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      editable: true,\r\n      enableCellNavigation: true,\r\n      enableColumnPicker: true,\r\n      enableExcelCopyBuffer: true,\r\n      enableFiltering: true,\r\n      editCommandHandler: (item, column, editCommand) => {\r\n        this._commandQueue.push(editCommand);\r\n        editCommand.execute();\r\n      },\r\n      i18n: this.translate\r\n    };\r\n\r\n    this.dataset = this.mockData(NB_ITEMS);\r\n  }\r\n\r\n  /** Add a new row to the grid and refresh the Filter collection.\r\n   * Note that because Filter elements are always displayed on the screen, we need to tell the Filter,\r\n   * we do this via a Subject .next(), that it's collection got changed\r\n   * as for the Editor, there's nothing to do since the element is not shown and it will have latest collection next time it shows up\r\n   */\r\n  addItem() {\r\n    const lastRowIndex = this.dataset.length;\r\n    const newRows = this.mockData(1, lastRowIndex);\r\n\r\n    // wrap into a timer to simulate a backend async call\r\n    setTimeout(() => {\r\n      const requisiteColumnDef = this.columnDefinitions.find((column: Column) => column.id === 'prerequisites');\r\n      if (requisiteColumnDef) {\r\n        const filterCollectionAsync = requisiteColumnDef.filter!.collectionAsync;\r\n        const editorCollection = requisiteColumnDef.editor!.collection;\r\n\r\n        if (Array.isArray(editorCollection)) {\r\n          // add the new row to the grid\r\n          this.angularGrid.gridService.addItem(newRows[0]);\r\n\r\n          // then refresh the Editor \"collection\", we have 2 ways of doing it\r\n\r\n          // Push to the Editor \"collection\"\r\n          editorCollection.push({ value: lastRowIndex, label: lastRowIndex, prefix: 'Task' });\r\n\r\n          // or replace entire \"collection\"\r\n          // durationColumnDef.editor.collection = [...collection, ...[{ value: lastRowIndex, label: lastRowIndex }]];\r\n\r\n          // for the Filter only, we have a trigger an RxJS/Subject change with the new collection\r\n          // we do this because Filter(s) are shown at all time, while on Editor it's unnecessary since they are only shown when opening them\r\n          if (filterCollectionAsync instanceof Subject) {\r\n            filterCollectionAsync.next(editorCollection);\r\n          }\r\n        }\r\n      }\r\n    }, 250);\r\n  }\r\n\r\n  /**\r\n   * Delete last inserted row.\r\n   * Note that because Filter elements are always displayed on the screen, we need to tell the Filter,\r\n   * we do this via a Subject .next(), that it's collection got changed\r\n   * as for the Editor, there's nothing to do since the element is not shown and it will have latest collection next time it shows up\r\n   */\r\n  deleteItem() {\r\n    const requisiteColumnDef = this.columnDefinitions.find((column: Column) => column.id === 'prerequisites');\r\n    if (requisiteColumnDef) {\r\n      const filterCollectionAsync = requisiteColumnDef.filter!.collectionAsync;\r\n      const filterCollection = requisiteColumnDef.filter!.collection;\r\n\r\n      if (Array.isArray(filterCollection)) {\r\n        // sort collection in descending order and take out last collection option\r\n        const selectCollectionObj = this.sortCollectionDescending(filterCollection).pop();\r\n\r\n        // then we will delete that item from the grid\r\n        this.angularGrid.gridService.deleteItemById(selectCollectionObj.value);\r\n\r\n        // for the Filter only, we have a trigger an RxJS/Subject change with the new collection\r\n        // we do this because Filter(s) are shown at all time, while on Editor it's unnecessary since they are only shown when opening them\r\n        if (filterCollectionAsync instanceof Subject) {\r\n          filterCollectionAsync.next(filterCollection);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  sortCollectionDescending(collection: any[]) {\r\n    return collection.sort((item1, item2) => item1.value - item2.value);\r\n  }\r\n\r\n  mockData(itemCount: number, startingIndex = 0) {\r\n    // mock a dataset\r\n    const tempDataset = [];\r\n    for (let i = startingIndex; i < (startingIndex + itemCount); i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomFinishYear = (new Date().getFullYear() - 3) + Math.floor(Math.random() * 10); // use only years not lower than 3 years ago\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n      const randomFinish = new Date(randomFinishYear, (randomMonth + 1), randomDay);\r\n\r\n      tempDataset.push({\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: (i % 33 === 0) ? null : Math.round(Math.random() * 100) + '',\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        percentComplete: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        finish: randomFinish < new Date() ? '' : randomFinish, // make sure the random date is earlier than today\r\n        effortDriven: (i % 5 === 0),\r\n        prerequisites: (i % 2 === 0) && i !== 0 && i < 12 ? [i, i - 1] : [],\r\n        countryOfOrigin: (i % 2) ? { code: 'CA', name: 'Canada' } : { code: 'US', name: 'United States' },\r\n        countryOfOriginName: (i % 2) ? 'Canada' : 'United States',\r\n        cityOfOrigin: (i % 2) ? 'Vancouver, BC, Canada' : 'Boston, MA, United States',\r\n      });\r\n    }\r\n    return tempDataset;\r\n  }\r\n\r\n  onCellChanged(e: Event, args: any) {\r\n    this.updatedObject = args.item;\r\n  }\r\n\r\n  onCellClicked(e: Event, args: any) {\r\n    const metadata = this.angularGrid.gridService.getColumnFromEventArguments(args);\r\n    console.log(metadata);\r\n\r\n    if (metadata.columnDef.id === 'edit') {\r\n      this.alertWarning = `open a modal window to edit: ${metadata.dataContext.title}`;\r\n\r\n      // highlight the row, to customize the color, you can change the SASS variable $row-highlight-background-color\r\n      this.angularGrid.gridService.highlightRow(args.row, 1500);\r\n\r\n      // you could also select the row, when using \"enableCellNavigation: true\", it automatically selects the row\r\n      // this.angularGrid.gridService.setSelectedRow(args.row);\r\n    } else if (metadata.columnDef.id === 'delete') {\r\n      if (confirm('Are you sure?')) {\r\n        this.angularGrid.gridService.deleteItemById(metadata.dataContext.id);\r\n      }\r\n    }\r\n  }\r\n\r\n  onValidationError(e: Event, args: any) {\r\n    if (args.validationResults) {\r\n      alert(args.validationResults.msg);\r\n    }\r\n  }\r\n\r\n  changeAutoCommit() {\r\n    this.gridOptions.autoCommitEdit = !this.gridOptions.autoCommitEdit;\r\n    this.gridObj.setOptions({\r\n      autoCommitEdit: this.gridOptions.autoCommitEdit\r\n    });\r\n    return true;\r\n  }\r\n\r\n  dynamicallyAddTitleHeader() {\r\n    const newCol = {\r\n      id: `title${this.duplicateTitleHeaderCount++}`,\r\n      name: 'Title',\r\n      field: 'title',\r\n      editor: {\r\n        model: Editors.text,\r\n        required: true,\r\n        validator: myCustomTitleValidator, // use a custom validator\r\n      },\r\n      sortable: true, minWidth: 100, filterable: true,\r\n    };\r\n\r\n    // you can dynamically add your column to your column definitions\r\n    // and then use the spread operator [...cols] OR slice to force Angular to review the changes\r\n    this.columnDefinitions.push(newCol);\r\n    this.columnDefinitions = this.columnDefinitions.slice(); // or use spread operator [...cols]\r\n\r\n    // NOTE if you use an Extensions (Checkbox Selector, Row Detail, ...) that modifies the column definitions in any way\r\n    // you MUST use \"getAllColumnDefinitions()\" from the GridService, using this will be ALL columns including the 1st column that is created internally\r\n    // for example if you use the Checkbox Selector (row selection), you MUST use the code below\r\n    /*\r\n    const allColumns = this.angularGrid.gridService.getAllColumnDefinitions();\r\n    allColumns.push(newCol);\r\n    this.columnDefinitions = [...allColumns]; // (or use slice) reassign to column definitions for Angular to do dirty checking\r\n    */\r\n  }\r\n\r\n  dynamicallyRemoveLastColumn() {\r\n    this.columnDefinitions.pop();\r\n    this.columnDefinitions = this.columnDefinitions.slice();\r\n\r\n    // NOTE if you use an Extensions (Checkbox Selector, Row Detail, ...) that modifies the column definitions in any way\r\n    // you MUST use the code below, first you must reassign the Editor facade (from the internalColumnEditor back to the editor)\r\n    // in other words, SlickGrid is not using the same as Angular-Slickgrid uses (editor with a \"model\" and other properties are a facade, SlickGrid only uses what is inside the model)\r\n    /*\r\n    const allColumns = this.angularGrid.gridService.getAllColumnDefinitions();\r\n    const allOriginalColumns = allColumns.map((column) => {\r\n      column.editor = column.internalColumnEditor;\r\n      return column;\r\n    });\r\n\r\n    // remove your column the full set of columns\r\n    // and use slice or spread [...] to trigger an Angular dirty change\r\n    allOriginalColumns.pop();\r\n    this.columnDefinitions = allOriginalColumns.slice();\r\n    */\r\n  }\r\n\r\n  setAutoEdit(isAutoEdit: boolean) {\r\n    this.isAutoEdit = isAutoEdit;\r\n    this.gridObj.setOptions({ autoEdit: isAutoEdit }); // change the grid option dynamically\r\n    return true;\r\n  }\r\n\r\n  undo() {\r\n    const command = this._commandQueue.pop();\r\n    const item = this.angularGrid.dataView.getItem(command.row);\r\n    if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\r\n      command.undo();\r\n      this.gridObj.gotoCell(command.row, command.cell, false);\r\n    }\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-editor.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <div class=\\\"col-sm-6\\\">\\r\\n    <label>autoEdit setting: </label>\\r\\n    <span id=\\\"radioAutoEdit\\\">\\r\\n      <label class=\\\"radio-inline control-label\\\" for=\\\"radioTrue\\\">\\r\\n        <input type=\\\"radio\\\" name=\\\"inlineRadioOptions\\\" id=\\\"radioTrue\\\" checked [value]=\\\"isAutoEdit\\\"\\r\\n               (change)=\\\"setAutoEdit(true)\\\"> ON (single-click)\\r\\n      </label>\\r\\n      <label class=\\\"radio-inline control-label\\\" for=\\\"radioFalse\\\">\\r\\n        <input type=\\\"radio\\\" name=\\\"inlineRadioOptions\\\" id=\\\"radioFalse\\\" [value]=\\\"isAutoEdit\\\"\\r\\n               (change)=\\\"setAutoEdit(false)\\\"> OFF (double-click)\\r\\n      </label>\\r\\n    </span>\\r\\n    <div class=\\\"row col-sm-12\\\">\\r\\n      <span>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"undo()\\\">\\r\\n          <i class=\\\"fa fa-undo\\\"></i>\\r\\n          Undo last edit(s)\\r\\n        </button>\\r\\n        <label class=\\\"checkbox-inline control-label\\\" for=\\\"autoCommitEdit\\\">\\r\\n          <input type=\\\"checkbox\\\" id=\\\"autoCommitEdit\\\" data-test=\\\"auto-commit\\\" [checked]=\\\"gridOptions.autoCommitEdit\\\"\\r\\n                 (click)=\\\"changeAutoCommit()\\\">\\r\\n          Auto Commit Edit\\r\\n        </label>\\r\\n      </span>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\" style=\\\"margin-top: 5px\\\">\\r\\n      <div class=\\\"col-sm-12\\\">\\r\\n        <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"angularGrid.filterService.clearFilters()\\\">\\r\\n          Clear Filters\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"angularGrid.sortService.clearSorting()\\\">\\r\\n          Clear Sorting\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-sm btn-outline-info\\\" (click)=\\\"addItem()\\\"\\r\\n                title=\\\"Clear Filters &amp; Sorting to see it better\\\">Add item</button>\\r\\n        <button class=\\\"btn btn-sm btn-outline-danger\\\" (click)=\\\"deleteItem()\\\">Delete item</button>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\" style=\\\"margin-top: 5px\\\">\\r\\n      <div class=\\\"col-sm-12\\\">\\r\\n        <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"add-title-column\\\"\\r\\n                (click)=\\\"dynamicallyAddTitleHeader()\\\">\\r\\n          <i class=\\\"fa fa-plus\\\"></i>\\r\\n          Dynamically Duplicate Title Column\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"remove-title-column\\\"\\r\\n                (click)=\\\"dynamicallyRemoveLastColumn()\\\">\\r\\n          <i class=\\\"fa fa-minus\\\"></i>\\r\\n          Dynamically Remove Last Column\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"col-sm-6\\\">\\r\\n    <div class=\\\"alert alert-info\\\" *ngIf=\\\"updatedObject\\\">\\r\\n      <strong>Updated Item:</strong> {{updatedObject | json}}\\r\\n    </div>\\r\\n    <div class=\\\"alert alert-warning\\\" *ngIf=\\\"alertWarning\\\">\\r\\n      <strong>Updated Item:</strong> {{alertWarning}}\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"col-sm-12\\\">\\r\\n    <angular-slickgrid gridId=\\\"grid3\\\"\\r\\n                       [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                       [gridOptions]=\\\"gridOptions\\\"\\r\\n                       [dataset]=\\\"dataset\\\"\\r\\n                       (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n                       (sgOnCellChange)=\\\"onCellChanged($event.detail.eventData, $event.detail.args)\\\"\\r\\n                       (sgOnClick)=\\\"onCellClicked($event.detail.eventData, $event.detail.args)\\\"\\r\\n                       (sgOnValidationError)=\\\"onValidationError($event.detail.eventData, $event.detail.args)\\\">\\r\\n    </angular-slickgrid>\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { Component, OnInit } from '@angular/core';\r\nimport { AngularGridInstance, Column, FieldType, Formatter, Formatters, GridOption, SelectedRange } from './../modules/angular-slickgrid';\r\n\r\n// create my custom Formatter with the Formatter type\r\nconst myCustomCheckmarkFormatter: Formatter = (row, cell, value, columnDef, dataContext) => {\r\n  // you can return a string of a object (of type FormatterResultObject), the 2 types are shown below\r\n  return value ? `<i class=\"fa fa-fire red\" aria-hidden=\"true\"></i>` : { text: '<i class=\"fa fa-snowflake-o\" aria-hidden=\"true\"></i>', addClasses: 'lightblue', toolTip: 'Freezing' };\r\n};\r\n\r\nconst customEnableButtonFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\r\n  return `<span style=\"margin-left: 5px\">\r\n      <button class=\"btn btn-xs btn-default\">\r\n        <i class=\"fa ${value ? 'fa-check-circle' : 'fa-circle-thin'} fa-lg\" style=\"color: ${value ? 'black' : 'lavender'}\"></i>\r\n      </button>\r\n    </span>`;\r\n};\r\n\r\n@Component({\r\n  templateUrl: './grid-formatter.component.html'\r\n})\r\nexport class GridFormatterComponent implements OnInit {\r\n  title = 'Example 2: Grid with Formatters';\r\n  subTitle = `\r\n    Grid with Custom and/or included Slickgrid Formatters (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Formatters\" target=\"_blank\">Wiki docs</a>).\r\n    <ul>\r\n      <li>The 2 last columns are using Custom Formatters</li>\r\n      <ul><li>The \"Completed\" column uses a the \"onCellClick\" event and a formatter to simulate a toggle action</li></ul>\r\n      <li>\r\n        Support Excel Copy Buffer (SlickGrid Copy Manager Plugin), you can use it by simply enabling \"enableExcelCopyBuffer\" flag.\r\n        Note that it will only evaluate Formatter when the \"exportWithFormatter\" flag is enabled (through \"ExportOptions\" or the column definition)\r\n      </li>\r\n      <li>This example also has auto-resize enabled, and we also demo how you can pause the resizer if you wish to</li>\r\n    </ul>\r\n  `;\r\n\r\n  columnDefinitions!: Column[];\r\n  gridOptions!: GridOption;\r\n  dataset!: any[];\r\n  angularGrid!: AngularGridInstance;\r\n  resizerPaused = false;\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      { id: 'title', name: 'Title', field: 'title', sortable: true, type: FieldType.string, width: 70 },\r\n      { id: 'phone', name: 'Phone Number using mask', field: 'phone', sortable: true, type: FieldType.number, minWidth: 100, formatter: Formatters.mask, params: { mask: '(000) 000-0000' } },\r\n      { id: 'duration', name: 'Duration (days)', field: 'duration', formatter: Formatters.decimal, params: { minDecimal: 1, maxDecimal: 2 }, sortable: true, type: FieldType.number, minWidth: 90, exportWithFormatter: true },\r\n      { id: 'complete', name: '% Complete', field: 'percentComplete', formatter: Formatters.percentCompleteBar, type: FieldType.number, sortable: true, minWidth: 100 },\r\n      { id: 'percent2', name: '% Complete', field: 'percentComplete2', formatter: Formatters.progressBar, type: FieldType.number, sortable: true, minWidth: 100 },\r\n      { id: 'start', name: 'Start', field: 'start', formatter: Formatters.dateIso, sortable: true, type: FieldType.date, minWidth: 90, exportWithFormatter: true },\r\n      { id: 'finish', name: 'Finish', field: 'finish', formatter: Formatters.dateIso, sortable: true, type: FieldType.date, minWidth: 90, exportWithFormatter: true },\r\n      { id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven', formatter: myCustomCheckmarkFormatter, type: FieldType.number, sortable: true, minWidth: 100 },\r\n      {\r\n        id: 'completed', name: 'Completed', field: 'completed', type: FieldType.number, sortable: true, minWidth: 100,\r\n        formatter: customEnableButtonFormatter,\r\n        onCellClick: (e, args) => {\r\n          this.toggleCompletedProperty(args && args.dataContext);\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableAutoResize: true,\r\n      enableCellNavigation: true,\r\n      showCustomFooter: true, // display some metrics in the bottom custom footer\r\n      customFooterOptions: {\r\n        // optionally display some text on the left footer container\r\n        leftFooterText: 'custom footer text',\r\n        hideTotalItemCount: true,\r\n        hideLastUpdateTimestamp: true\r\n      },\r\n\r\n      // you customize all formatter at once certain options through \"formatterOptions\" in the Grid Options\r\n      // or independently through the column definition \"params\", the option names are the same\r\n      /*\r\n      formatterOptions: {\r\n        dateSeparator: '.',\r\n        decimalSeparator: ',',\r\n        displayNegativeNumberWithParentheses: true,\r\n        minDecimal: 0,\r\n        maxDecimal: 2,\r\n        thousandSeparator: '_'\r\n      },\r\n      */\r\n\r\n      // when using the ExcelCopyBuffer, you can see what the selection range is\r\n      enableExcelCopyBuffer: true,\r\n      // excelCopyBufferOptions: {\r\n      //   onCopyCells: (e, args: { ranges: SelectedRange[] }) => console.log('onCopyCells', args.ranges),\r\n      //   onPasteCells: (e, args: { ranges: SelectedRange[] }) => console.log('onPasteCells', args.ranges),\r\n      //   onCopyCancelled: (e, args: { ranges: SelectedRange[] }) => console.log('onCopyCancelled', args.ranges),\r\n      // }\r\n    };\r\n\r\n    // mock a dataset\r\n    this.dataset = [];\r\n    for (let i = 0; i < 500; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n\r\n      this.dataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        phone: this.generatePhoneNumber(),\r\n        duration: (i % 33 === 0) ? null : Math.random() * 100 + '',\r\n        percentComplete: randomPercent,\r\n        percentComplete2: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n  }\r\n\r\n  generatePhoneNumber(): string {\r\n    let phone = '';\r\n    for (let i = 0; i < 10; i++) {\r\n      phone += Math.round(Math.random() * 9) + '';\r\n    }\r\n    return phone;\r\n  }\r\n\r\n  togglePauseResizer() {\r\n    this.resizerPaused = !this.resizerPaused;\r\n    this.angularGrid.resizerService.pauseResizer(this.resizerPaused);\r\n  }\r\n\r\n  toggleCompletedProperty(item: any) {\r\n    // toggle property\r\n    if (typeof item === 'object') {\r\n      item.completed = !item.completed;\r\n\r\n      // simulate a backend http call and refresh the grid row after delay\r\n      setTimeout(() => {\r\n        this.angularGrid.gridService.updateItemById(item.id, item, { highlightRow: false });\r\n      }, 250);\r\n    }\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-formatter.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\"\\r\\n       [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <button class=\\\"btn btn-outline-secondary btn-sm\\\"\\r\\n          (click)=\\\"togglePauseResizer()\\\">\\r\\n    Pause auto-resize: <b>{{resizerPaused}}</b>\\r\\n  </button>\\r\\n\\r\\n  <angular-slickgrid gridId=\\\"grid2\\\"\\r\\n                     [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                     [gridOptions]=\\\"gridOptions\\\"\\r\\n                     [dataset]=\\\"dataset\\\"\\r\\n                     (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\r\\n  </angular-slickgrid>\\r\\n</div>\\r\\n\";","import { Component, OnInit, OnDestroy, ViewEncapsulation } from '@angular/core';\r\nimport { AngularGridInstance, Column, ColumnEditorDualInput, Editors, FieldType, formatNumber, Formatters, Filters, GridOption } from './../modules/angular-slickgrid';\r\n\r\ndeclare const Slick: any;\r\n\r\n@Component({\r\n  templateUrl: './grid-frozen.component.html',\r\n  styleUrls: ['./grid-frozen.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class GridFrozenComponent implements OnInit, OnDestroy {\r\n  title = 'Example 20: Pinned (frozen) Columns/Rows';\r\n  subTitle = `\r\n  This example demonstrates the use of Pinned (aka frozen) Columns and/or Rows (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Pinned-(aka-Frozen)-Columns-Rows\" target=\"_blank\">Wiki docs</a>)\r\n  <ul>\r\n      <li>Option to pin any number of columns (left only) or rows</li>\r\n      <li>Option to pin the rows at the bottom instead of the top (default)</li>\r\n      <li>You can also dynamically any of these options, through SlickGrid \"setOptions()\"</li>\r\n      <li>Possibility to change the styling of the line border between pinned columns/rows</li>\r\n    </ul>\r\n  `;\r\n\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions!: Column[];\r\n  gridOptions!: GridOption;\r\n  dataset!: any[];\r\n  frozenColumnCount = 2;\r\n  frozenRowCount = 3;\r\n  isFrozenBottom = false;\r\n  gridObj: any;\r\n  slickEventHandler: any;\r\n\r\n  constructor() {\r\n    this.slickEventHandler = new Slick.EventHandler();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.prepareDataGrid();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // unsubscribe all SlickGrid events\r\n    this.slickEventHandler.unsubscribeAll();\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n    this.gridObj = angularGrid.slickGrid;\r\n\r\n    // with frozen (pinned) grid, in order to see the entire row being highlighted when hovering\r\n    // we need to do some extra tricks (that is because frozen grids use 2 separate div containers)\r\n    // the trick is to use row selection to highlight when hovering current row and remove selection once we're not\r\n    this.slickEventHandler.subscribe(this.gridObj.onMouseEnter, (event: Event) => this.highlightRow(event, true));\r\n    this.slickEventHandler.subscribe(this.gridObj.onMouseLeave, (event: Event) => this.highlightRow(event, false));\r\n  }\r\n\r\n  highlightRow(event: Event, isMouseEnter: boolean) {\r\n    const cell = this.gridObj.getCellFromEvent(event);\r\n    const rows = isMouseEnter ? [cell.row] : [];\r\n    this.gridObj.setSelectedRows(rows); // highlight current row\r\n    event.preventDefault();\r\n  }\r\n\r\n  prepareDataGrid() {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'sel', name: '#', field: 'id',\r\n        minWidth: 40, width: 40, maxWidth: 40,\r\n        cannotTriggerInsert: true,\r\n        resizable: false,\r\n        unselectable: true,\r\n      },\r\n      {\r\n        id: 'title', name: 'Title', field: 'title',\r\n        minWidth: 100, width: 120,\r\n        filterable: true,\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'percentComplete', name: '% Complete', field: 'percentComplete',\r\n        resizable: false,\r\n        minWidth: 130, width: 140,\r\n        formatter: Formatters.percentCompleteBar,\r\n        type: FieldType.number,\r\n        filterable: true,\r\n        filter: { model: Filters.slider, operator: '>=' },\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start',\r\n        minWidth: 100, width: 120,\r\n        filterable: true, sortable: true,\r\n        formatter: Formatters.dateIso\r\n      },\r\n      {\r\n        id: 'finish', name: 'Finish', field: 'finish',\r\n        minWidth: 100, width: 120,\r\n        filterable: true, sortable: true,\r\n        formatter: Formatters.dateIso\r\n      },\r\n      {\r\n        id: 'cost', name: 'Cost | Duration', field: 'cost',\r\n        formatter: this.costDurationFormatter.bind(this),\r\n        minWidth: 150, width: 170,\r\n        sortable: true,\r\n        // filterable: true,\r\n        filter: {\r\n          model: Filters.compoundSlider,\r\n        },\r\n        editor: {\r\n          model: Editors.dualInput,\r\n          // the DualInputEditor is of Type ColumnEditorDualInput and MUST include (leftInput/rightInput) in its params object\r\n          // in each of these 2 properties, you can pass any regular properties of a column editor\r\n          // and they will be executed following the options defined in each\r\n          params: {\r\n            leftInput: {\r\n              field: 'cost',\r\n              type: 'float',\r\n              decimal: 2,\r\n              minValue: 0,\r\n              maxValue: 50000,\r\n              placeholder: '< 50K',\r\n              errorMessage: 'Cost must be positive and below $50K.',\r\n            },\r\n            rightInput: {\r\n              field: 'duration',\r\n              type: 'float', // you could have 2 different input type as well\r\n              minValue: 0,\r\n              maxValue: 100,\r\n              title: 'make sure Duration is withing its range of 0 to 100',\r\n              errorMessage: 'Duration must be between 0 and 100.',\r\n\r\n              // Validator Option #1\r\n              // You could also optionally define a custom validator in 1 or both inputs\r\n              /*\r\n              validator: (value, args) => {\r\n                let isValid = true;\r\n                let errorMsg = '';\r\n                if (value < 0 || value > 120) {\r\n                  isValid = false;\r\n                  errorMsg = 'Duration MUST be between 0 and 120.';\r\n                }\r\n                return { valid: isValid, msg: errorMsg };\r\n              }\r\n              */\r\n            },\r\n          } as ColumnEditorDualInput,\r\n\r\n          // Validator Option #2 (shared Validator) - this is the last alternative, option #1 (independent Validators) is still the recommended way\r\n          // You can also optionally use a common Validator (if you do then you cannot use the leftInput/rightInput validators at same time)\r\n          // to compare both values at the same time.\r\n          /*\r\n          validator: (values, args) => {\r\n            let isValid = true;\r\n            let errorMsg = '';\r\n            if (values.cost < 0 || values.cost > 50000) {\r\n              isValid = false;\r\n              errorMsg = 'Cost MUST be between 0 and 50k.';\r\n            }\r\n            if (values.duration < 0 || values.duration > 120) {\r\n              isValid = false;\r\n              errorMsg = 'Duration MUST be between 0 and 120.';\r\n            }\r\n            if (values.cost < values.duration) {\r\n              isValid = false;\r\n              errorMsg = 'Cost can never be lower than its Duration.';\r\n            }\r\n            return { valid: isValid, msg: errorMsg };\r\n          }\r\n          */\r\n        }\r\n      },\r\n      {\r\n        id: 'effortDriven', name: 'Effort Driven', field: 'effortDriven',\r\n        minWidth: 100, width: 120,\r\n        formatter: Formatters.checkmark,\r\n        filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\r\n          model: Filters.singleSelect\r\n        },\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'title1', name: 'Title 1', field: 'title1',\r\n        minWidth: 100, width: 120,\r\n        filterable: true,\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'title2', name: 'Title 2', field: 'title2',\r\n        minWidth: 100, width: 120,\r\n        filterable: true,\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'title3', name: 'Title 3', field: 'title3',\r\n        minWidth: 100, width: 120,\r\n        filterable: true,\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'title4', name: 'Title 4', field: 'title4',\r\n        minWidth: 100, width: 120,\r\n        filterable: true,\r\n        sortable: true\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableExcelCopyBuffer: true,\r\n      enableCellNavigation: true,\r\n      editable: true,\r\n      autoEdit: true,\r\n      asyncEditorLoading: true,\r\n      frozenColumn: this.frozenColumnCount,\r\n      frozenRow: this.frozenRowCount,\r\n      // frozenBottom: true, // if you want to freeze the bottom instead of the top, you can enable this property\r\n\r\n      gridMenu: { hideClearFrozenColumnsCommand: false },\r\n      headerMenu: { hideFreezeColumnsCommand: false }\r\n    };\r\n\r\n    // mock a dataset\r\n    this.dataset = this.getData();\r\n  }\r\n\r\n  getData() {\r\n    // Set up some test columns.\r\n    const mockDataset = [];\r\n    for (let i = 0; i < 500; i++) {\r\n      mockDataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        cost: (i % 33 === 0) ? null : Math.random() * 10000,\r\n        duration: i % 8 ? (Math.round(Math.random() * 100) + '') : null,\r\n        percentComplete: Math.round(Math.random() * 100),\r\n        start: new Date(2009, 0, 1),\r\n        finish: new Date(2009, 4, 5),\r\n        effortDriven: (i % 5 === 0),\r\n        title1: `Some Text ${Math.round(Math.random() * 25)}`,\r\n        title2: `Some Text ${Math.round(Math.random() * 25)}`,\r\n        title3: `Some Text ${Math.round(Math.random() * 25)}`,\r\n        title4: `Some Text ${Math.round(Math.random() * 25)}`,\r\n      };\r\n    }\r\n    return mockDataset;\r\n  }\r\n\r\n  /** change dynamically, through slickgrid \"setOptions()\" the number of pinned columns */\r\n  changeFrozenColumnCount() {\r\n    if (this.gridObj && this.gridObj.setOptions) {\r\n      this.gridObj.setOptions({\r\n        frozenColumn: this.frozenColumnCount\r\n      });\r\n    }\r\n  }\r\n\r\n  /** change dynamically, through slickgrid \"setOptions()\" the number of pinned rows */\r\n  changeFrozenRowCount() {\r\n    if (this.gridObj && this.gridObj.setOptions) {\r\n      this.gridObj.setOptions({\r\n        frozenRow: this.frozenRowCount\r\n      });\r\n    }\r\n  }\r\n\r\n  costDurationFormatter(row: number, cell: number, value: any, columnDef: Column, dataContext: any) {\r\n    const costText = this.isNullUndefinedOrEmpty(dataContext.cost) ? 'n/a' : formatNumber(dataContext.cost, 0, 2, false, '$', '', '.', ',');\r\n    let durationText = 'n/a';\r\n    if (!this.isNullUndefinedOrEmpty(dataContext.duration) && dataContext.duration >= 0) {\r\n      durationText = `${dataContext.duration} ${dataContext.duration > 1 ? 'days' : 'day'}`;\r\n    }\r\n    return `<b>${costText}</b> | ${durationText}`;\r\n  }\r\n\r\n  isNullUndefinedOrEmpty(data: any) {\r\n    return (data === '' || data === null || data === undefined);\r\n  }\r\n\r\n  onValidationError(e: Event, args: any) {\r\n    alert(args.validationResults.msg);\r\n  }\r\n\r\n  setFrozenColumns(frozenCols: number) {\r\n    this.gridObj.setOptions({ frozenColumn: frozenCols });\r\n    this.gridOptions = this.gridObj.getOptions();\r\n  }\r\n\r\n  /** toggle dynamically, through slickgrid \"setOptions()\" the top/bottom pinned location */\r\n  toggleFrozenBottomRows() {\r\n    if (this.gridObj && this.gridObj.setOptions) {\r\n      this.gridObj.setOptions({\r\n        frozenBottom: !this.isFrozenBottom\r\n      });\r\n      this.isFrozenBottom = !this.isFrozenBottom; // toggle the variable\r\n    }\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-frozen.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <br>\\r\\n\\r\\n  <div class=\\\"row mb-1\\\">\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n      <span>\\r\\n        <label for=\\\"\\\">Pinned Rows: </label>\\r\\n        <input type=\\\"number\\\" [(ngModel)]=\\\"frozenRowCount\\\">\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"changeFrozenRowCount()\\\">\\r\\n          Set\\r\\n        </button>\\r\\n      </span>\\r\\n      <span style=\\\"margin-left: 10px\\\">\\r\\n        <label for=\\\"\\\">Pinned Columns: </label>\\r\\n        <input type=\\\"number\\\" [(ngModel)]=\\\"frozenColumnCount\\\">\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"changeFrozenColumnCount()\\\">\\r\\n          Set\\r\\n        </button>\\r\\n      </span>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"setFrozenColumns(-1)\\\"\\r\\n              data-test=\\\"remove-frozen-column-button\\\">\\r\\n        <i class=\\\"fa fa-times fa-lg\\\"></i> Remove Frozen Columns\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"setFrozenColumns(2)\\\" data-test=\\\"set-3frozen-columns\\\">\\r\\n        <i class=\\\"fa fa-thumb-tack fa-lg\\\"></i> Set 3 Frozen Columns\\r\\n      </button>\\r\\n\\r\\n      <span style=\\\"margin-left: 15px\\\">\\r\\n        <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"toggleFrozenBottomRows()\\\">\\r\\n          <i class=\\\"fa fa-random fa-lg\\\"></i> Toggle Pinned Rows\\r\\n        </button>\\r\\n        <span style=\\\"font-weight: bold;\\\">: {{ isFrozenBottom ? 'Bottom' : 'Top' }}</span>\\r\\n      </span>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"row mt-2 mb-2\\\">\\r\\n    <hr>\\r\\n  </div>\\r\\n  <angular-slickgrid gridId=\\\"grid20\\\"\\r\\n                     gridWidth=\\\"875\\\"\\r\\n                     [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                     [gridOptions]=\\\"gridOptions\\\"\\r\\n                     [dataset]=\\\"dataset\\\"\\r\\n                     (sgOnValidationError)=\\\"onValidationError($event.detail.eventData, $event.detail.args)\\\"\\r\\n                     (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\r\\n  </angular-slickgrid>\\r\\n</div>\\r\\n\";","export default \"/** You can change the pinned/frozen border styling through this css override */\\n.slick-row .slick-cell.frozen:last-child,\\n.slick-headerrow-column.frozen:last-child,\\n.slick-footerrow-column.frozen:last-child {\\n  border-right: 1px solid #969696 !important;\\n}\\n.slick-pane-bottom {\\n  border-top: 1px solid #969696 !important;\\n}\";","import { Component, Injectable, OnInit, OnDestroy } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  FieldType,\r\n  Filters,\r\n  Formatters,\r\n  GraphqlPaginatedResult,\r\n  GraphqlService,\r\n  GraphqlServiceApi,\r\n  GridOption,\r\n  GridStateChange,\r\n  Metrics,\r\n  MultipleSelectOption,\r\n  OperatorType,\r\n  SortDirection,\r\n  unsubscribeAllObservables,\r\n} from './../modules/angular-slickgrid';\r\nimport * as moment from 'moment-mini';\r\nimport { Subscription } from 'rxjs';\r\n\r\nconst defaultPageSize = 20;\r\nconst GRAPHQL_QUERY_DATASET_NAME = 'users';\r\nconst LOCAL_STORAGE_KEY = 'gridStateGraphql';\r\n\r\n@Component({\r\n  templateUrl: './grid-graphql.component.html'\r\n})\r\n@Injectable()\r\nexport class GridGraphqlComponent implements OnInit, OnDestroy {\r\n  title = 'Example 6: Grid connected to Backend Server with GraphQL';\r\n  subTitle = `\r\n    Sorting/Paging connected to a Backend GraphQL Service (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/GraphQL\" target=\"_blank\">Wiki docs</a>).\r\n    <br/>\r\n    <ul class=\"small\">\r\n      <li><span class=\"red\">(*) NO DATA SHOWING</span> - just change Filters &amp; Pages and look at the \"GraphQL Query\" changing :)</li>\r\n      <li>This example also demos the Grid State feature, open the console log to see the changes</li>\r\n      <li>String column also support operator (>, >=, <, <=, <>, !=, =, ==, *)\r\n      <ul>\r\n        <li>The (*) can be used as startsWith (ex.: \"abc*\" => startsWith \"abc\") / endsWith (ex.: \"*xyz\" => endsWith \"xyz\")</li>\r\n        <li>The other operators can be used on column type number for example: \">=100\" (bigger or equal than 100)</li>\r\n      </ul>\r\n      <li>You can also preload a grid with certain \"presets\" like Filters / Sorters / Pagination <a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Grid-State-&-Preset\" target=\"_blank\">Wiki - Grid Preset</a>\r\n    </ul>\r\n  `;\r\n  private subscriptions: Subscription[] = [];\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions!: Column[];\r\n  gridOptions!: GridOption;\r\n  dataset = [];\r\n  metrics!: Metrics;\r\n\r\n  graphqlQuery = '';\r\n  processing = true;\r\n  status = { text: 'processing...', class: 'alert alert-danger' };\r\n  isWithCursor = false;\r\n  selectedLanguage: string;\r\n\r\n  constructor(private translate: TranslateService) {\r\n    // always start with English for Cypress E2E tests to be consistent\r\n    const defaultLang = 'en';\r\n    this.translate.use(defaultLang);\r\n    this.selectedLanguage = defaultLang;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // also unsubscribe all Angular Subscriptions\r\n    this.subscriptions = unsubscribeAllObservables(this.subscriptions);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'name', field: 'name', nameKey: 'NAME', width: 60, columnGroupKey: 'CUSTOMER_INFORMATION',\r\n        type: FieldType.string,\r\n        sortable: true,\r\n        filterable: true,\r\n        filter: {\r\n          model: Filters.compoundInput\r\n        }\r\n      },\r\n      {\r\n        id: 'gender', field: 'gender', nameKey: 'GENDER', filterable: true, sortable: true, width: 60, columnGroupKey: 'CUSTOMER_INFORMATION',\r\n        filter: {\r\n          model: Filters.singleSelect,\r\n          collection: [{ value: '', label: '' }, { value: 'male', label: 'male', labelKey: 'MALE' }, { value: 'female', label: 'female', labelKey: 'FEMALE' }]\r\n        }\r\n      },\r\n      {\r\n        id: 'company', field: 'company', nameKey: 'COMPANY', width: 60, columnGroupKey: 'CUSTOMER_INFORMATION',\r\n        sortable: true, filterable: true,\r\n        filter: {\r\n          model: Filters.multipleSelect,\r\n          collection: [{ value: 'acme', label: 'Acme' }, { value: 'abc', label: 'Company ABC' }, { value: 'xyz', label: 'Company XYZ' }],\r\n          filterOptions: {\r\n            filter: true // adds a filter on top of the multi-select dropdown\r\n          } as MultipleSelectOption\r\n        }\r\n      },\r\n      {\r\n        id: 'billingAddressStreet', field: 'billing.address.street', nameKey: 'BILLING.ADDRESS.STREET',\r\n        width: 60, filterable: true, sortable: true, columnGroupKey: 'BILLING.INFORMATION',\r\n      },\r\n      {\r\n        id: 'billingAddressZip', field: 'billing.address.zip', nameKey: 'BILLING.ADDRESS.ZIP', width: 60,\r\n        type: FieldType.number,\r\n        columnGroupKey: 'BILLING.INFORMATION', // or use \"columnGroup\" without Translate\r\n        filterable: true, sortable: true,\r\n        filter: {\r\n          model: Filters.compoundInput\r\n        },\r\n        formatter: Formatters.multiple, params: { formatters: [Formatters.complexObject, Formatters.translate] }\r\n      },\r\n      {\r\n        id: 'finish', field: 'finish', name: 'Date', formatter: Formatters.dateIso, sortable: true, minWidth: 90, width: 120, exportWithFormatter: true,\r\n        type: FieldType.date,\r\n        columnGroupKey: 'BILLING.INFORMATION', // or use \"columnGroup\" without Translate\r\n        filterable: true,\r\n        filter: {\r\n          model: Filters.dateRange,\r\n        }\r\n      },\r\n    ];\r\n\r\n    const presetLowestDay = moment().add(-2, 'days').format('YYYY-MM-DD');\r\n    const presetHighestDay = moment().add(20, 'days').format('YYYY-MM-DD');\r\n\r\n    this.gridOptions = {\r\n      enableFiltering: true,\r\n      enableCellNavigation: true,\r\n      enableTranslate: true,\r\n      createPreHeaderPanel: true,\r\n      showPreHeaderPanel: true,\r\n      preHeaderPanelHeight: 28,\r\n      i18n: this.translate,\r\n      gridMenu: {\r\n        resizeOnShowHeaderRow: true,\r\n        customItems: [\r\n          {\r\n            iconCssClass: 'fa fa-times text-danger',\r\n            title: 'Reset Grid',\r\n            disabled: false,\r\n            command: 'reset-grid',\r\n            positionOrder: 60\r\n          }\r\n        ],\r\n        onCommand: (e, args) => {\r\n          if (args.command === 'reset-grid') {\r\n            this.angularGrid.gridService.resetGrid(this.columnDefinitions);\r\n            localStorage[LOCAL_STORAGE_KEY] = null;\r\n          }\r\n        }\r\n      },\r\n      enablePagination: true, // you could optionally disable the Pagination\r\n      pagination: {\r\n        pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\r\n        pageSize: defaultPageSize,\r\n        totalItems: 0\r\n      },\r\n      presets: {\r\n        columns: [\r\n          { columnId: 'name', width: 100 },\r\n          { columnId: 'gender', width: 55 },\r\n          { columnId: 'company' },\r\n          { columnId: 'billingAddressZip' }, // flip column position of Street/Zip to Zip/Street\r\n          { columnId: 'billingAddressStreet', width: 120 },\r\n          { columnId: 'finish', width: 130 },\r\n        ],\r\n        filters: [\r\n          // you can use OperatorType or type them as string, e.g.: operator: 'EQ'\r\n          { columnId: 'gender', searchTerms: ['male'], operator: OperatorType.equal },\r\n          { columnId: 'name', searchTerms: ['John Doe'], operator: OperatorType.contains },\r\n          { columnId: 'company', searchTerms: ['xyz'], operator: 'IN' },\r\n\r\n          // use a date range with 2 searchTerms values\r\n          { columnId: 'finish', searchTerms: [presetLowestDay, presetHighestDay], operator: OperatorType.rangeInclusive },\r\n        ],\r\n        sorters: [\r\n          // direction can written as 'asc' (uppercase or lowercase) and/or use the SortDirection type\r\n          { columnId: 'name', direction: 'asc' },\r\n          { columnId: 'company', direction: SortDirection.DESC }\r\n        ],\r\n        pagination: { pageNumber: 2, pageSize: defaultPageSize }\r\n      },\r\n      backendServiceApi: {\r\n        service: new GraphqlService(),\r\n        options: {\r\n          datasetName: GRAPHQL_QUERY_DATASET_NAME, // the only REQUIRED property\r\n          addLocaleIntoQuery: true,   // optionally add current locale into the query\r\n          extraQueryArguments: [{     // optionally add some extra query arguments as input query arguments\r\n            field: 'userId',\r\n            value: 123\r\n          }],\r\n          // when dealing with complex objects, we want to keep our field name with double quotes\r\n          // example with gender: query { users (orderBy:[{field:\"gender\",direction:ASC}]) {}\r\n          keepArgumentFieldDoubleQuotes: true\r\n        },\r\n        // you can define the onInit callback OR enable the \"executeProcessCommandOnInit\" flag in the service init\r\n        // onInit: (query) => this.getCustomerApiCall(query)\r\n        preProcess: () => this.displaySpinner(true),\r\n        process: (query) => this.getCustomerApiCall(query),\r\n        postProcess: (result: GraphqlPaginatedResult) => {\r\n          this.metrics = result.metrics as Metrics;\r\n          this.displaySpinner(false);\r\n        }\r\n      } as GraphqlServiceApi\r\n    };\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n    this.subscriptions.push(\r\n      this.angularGrid.gridStateService.onGridStateChanged.subscribe((data) => console.log(data))\r\n    );\r\n  }\r\n\r\n  displaySpinner(isProcessing: boolean) {\r\n    this.processing = isProcessing;\r\n    this.status = (isProcessing)\r\n      ? { text: 'processing...', class: 'alert alert-danger' }\r\n      : { text: 'done', class: 'alert alert-success' };\r\n  }\r\n\r\n  /**\r\n   * Calling your GraphQL backend server should always return a Promise or Observable of type GraphqlPaginatedResult (or GraphqlResult without Pagination)\r\n   * @param query\r\n   * @return Promise<GraphqlPaginatedResult> | Observable<GraphqlResult>\r\n   */\r\n  getCustomerApiCall(query: string): Promise<GraphqlPaginatedResult> {\r\n    // in your case, you will call your WebAPI function (wich needs to return a Promise)\r\n    // for the demo purpose, we will call a mock WebAPI function\r\n    const mockedResult = {\r\n      // the dataset name is the only unknown property\r\n      // will be the same defined in your GraphQL Service init, in our case GRAPHQL_QUERY_DATASET_NAME\r\n      data: {\r\n        [GRAPHQL_QUERY_DATASET_NAME]: {\r\n          nodes: [],\r\n          totalCount: 100\r\n        }\r\n      }\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        this.graphqlQuery = this.angularGrid.backendService!.buildQuery();\r\n        resolve(mockedResult);\r\n      }, 100);\r\n    });\r\n  }\r\n\r\n  goToFirstPage() {\r\n    this.angularGrid.paginationService.goToFirstPage();\r\n  }\r\n\r\n  goToLastPage() {\r\n    this.angularGrid.paginationService.goToLastPage();\r\n  }\r\n\r\n  /** Dispatched event of a Grid State Changed event */\r\n  gridStateChanged(gridStateChanges: GridStateChange) {\r\n    console.log('Client sample, Grid State changed:: ', gridStateChanges);\r\n    localStorage[LOCAL_STORAGE_KEY] = JSON.stringify(gridStateChanges.gridState);\r\n  }\r\n\r\n  clearAllFiltersAndSorts() {\r\n    if (this.angularGrid && this.angularGrid.gridService) {\r\n      this.angularGrid.gridService.clearAllFiltersAndSorts();\r\n    }\r\n  }\r\n\r\n  /** Save current Filters, Sorters in LocaleStorage or DB */\r\n  saveCurrentGridState() {\r\n    console.log('GraphQL current grid state', this.angularGrid.gridStateService.getCurrentGridState());\r\n  }\r\n\r\n  setFiltersDynamically() {\r\n    const presetLowestDay = moment().add(-2, 'days').format('YYYY-MM-DD');\r\n    const presetHighestDay = moment().add(20, 'days').format('YYYY-MM-DD');\r\n\r\n    // we can Set Filters Dynamically (or different filters) afterward through the FilterService\r\n    this.angularGrid.filterService.updateFilters([\r\n      { columnId: 'gender', searchTerms: ['female'], operator: OperatorType.equal },\r\n      { columnId: 'name', searchTerms: ['Jane'], operator: OperatorType.startsWith },\r\n      { columnId: 'company', searchTerms: ['acme'], operator: 'IN' },\r\n      { columnId: 'billingAddressZip', searchTerms: ['11'], operator: OperatorType.greaterThanOrEqual },\r\n      { columnId: 'finish', searchTerms: [presetLowestDay, presetHighestDay], operator: OperatorType.rangeInclusive },\r\n    ]);\r\n  }\r\n\r\n  setSortingDynamically() {\r\n    this.angularGrid.sortService.updateSorting([\r\n      // orders matter, whichever is first in array will be the first sorted column\r\n      { columnId: 'billingAddressZip', direction: 'DESC' },\r\n      { columnId: 'company', direction: 'ASC' },\r\n    ]);\r\n  }\r\n\r\n  switchLanguage() {\r\n    const nextLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\r\n    this.subscriptions.push(\r\n      this.translate.use(nextLanguage).subscribe(() => {\r\n        this.selectedLanguage = nextLanguage;\r\n      })\r\n    );\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-graphql.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-5\\\">\\r\\n      <div [class]=\\\"status.class\\\" role=\\\"alert\\\" data-test=\\\"status\\\">\\r\\n        <strong>Status: </strong> {{status.text}}\\r\\n        <span [hidden]=\\\"!processing\\\">\\r\\n          <i class=\\\"fa fa-refresh fa-spin fa-lg fa-fw\\\"></i>\\r\\n        </span>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-12\\\">\\r\\n          <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"clear-filters-sorting\\\"\\r\\n                  (click)=\\\"clearAllFiltersAndSorts()\\\" title=\\\"Clear all Filters & Sorts\\\">\\r\\n            <i class=\\\"fa fa-filter text-danger\\\"></i>\\r\\n            Clear all Filter & Sorts\\r\\n          </button>\\r\\n          <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"set-dynamic-filter\\\"\\r\\n                  (click)=\\\"setFiltersDynamically()\\\">\\r\\n            Set Filters Dynamically\\r\\n          </button>\\r\\n          <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"set-dynamic-sorting\\\"\\r\\n                  (click)=\\\"setSortingDynamically()\\\">\\r\\n            Set Sorting Dynamically\\r\\n          </button>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"row mt-1\\\">\\r\\n        <div class=\\\"col-md-12\\\">\\r\\n          <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"language-button\\\" (click)=\\\"switchLanguage()\\\">\\r\\n            <i class=\\\"fa fa-language\\\"></i>\\r\\n            Switch Language\\r\\n          </button>\\r\\n          <strong>Locale:</strong>\\r\\n          <span style=\\\"font-style: italic\\\" data-test=\\\"selected-locale\\\">\\r\\n            {{selectedLanguage + '.json'}}\\r\\n          </span>\\r\\n        </div>\\r\\n      </div>\\r\\n      <br />\\r\\n      <div *ngIf=\\\"metrics\\\" style=\\\"margin: 10px 0px\\\">\\r\\n        <b>Metrics:</b> {{metrics.endTime | date: 'yyyy-MM-dd hh:mm aaaaa\\\\'m\\\\''}} | {{metrics.executionTime}}ms\\r\\n        | {{metrics.totalItemCount}} items\\r\\n      </div>\\r\\n      <div class=\\\"row mb-2\\\">\\r\\n        <div class=\\\"col-md-12\\\">\\r\\n          <label>Programmatically go to first/last page:</label>\\r\\n          <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"goto-first-page\\\" (click)=\\\"goToFirstPage()\\\">\\r\\n            <i class=\\\"fa fa-caret-left fa-lg\\\"></i>\\r\\n          </button>\\r\\n          <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"goto-last-page\\\" (click)=\\\"goToLastPage()\\\">\\r\\n            <i class=\\\"fa fa-caret-right fa-lg\\\"></i>\\r\\n          </button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-sm-7\\\">\\r\\n      <div class=\\\"alert alert-info\\\" data-test=\\\"alert-graphql-query\\\">\\r\\n        <strong>GraphQL Query:</strong>\\r\\n        <div [innerHTML]=\\\"graphqlQuery\\\" data-test=\\\"graphql-query-result\\\"></div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <hr />\\r\\n  <angular-slickgrid gridId=\\\"grid6\\\"\\r\\n                     [gridHeight]=\\\"200\\\"\\r\\n                     [gridWidth]=\\\"900\\\"\\r\\n                     [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                     [gridOptions]=\\\"gridOptions\\\"\\r\\n                     [dataset]=\\\"dataset\\\"\\r\\n                     (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n                     (onGridStateChanged)=\\\"gridStateChanged($event)\\\"\\r\\n                     (onBeforeGridDestroy)=\\\"saveCurrentGridState()\\\">\\r\\n  </angular-slickgrid>\\r\\n</div>\\r\\n\";","import { Component, Injectable, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  Filters,\r\n  Formatters,\r\n  GraphqlResult,\r\n  GraphqlService,\r\n  GraphqlServiceApi,\r\n  GridOption,\r\n  Metrics,\r\n  MultipleSelectOption,\r\n  OperatorType,\r\n} from './../modules/angular-slickgrid';\r\nimport { Observable } from 'rxjs';\r\n\r\nconst COUNTRIES_API = 'https://countries.trevorblades.com/';\r\n\r\nexport interface Country {\r\n  countryCode: string;\r\n  countryName: string;\r\n  countryNative: string;\r\n  countryPhone: number;\r\n  countryCurrency: string;\r\n  countryEmoji: string;\r\n  continentCode: string;\r\n  continentName: string;\r\n  languageCode: string;\r\n  languageName: string;\r\n  languageNative: string;\r\n};\r\n\r\n@Component({\r\n  templateUrl: './grid-graphql-nopage.component.html',\r\n  styleUrls: ['./grid-graphql-nopage.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\n@Injectable()\r\nexport class GridGraphqlWithoutPaginationComponent implements OnInit {\r\n  title = 'Example 27: GraphQL Basic API without Pagination';\r\n  subTitle = `\r\n  Use basic GraphQL query with any external public APIs (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/GraphQL\" target=\"_blank\">Wiki docs</a>).\r\n  <ul>\r\n    <li>This Examples uses a Public GraphQL API that you can find at this link <a href=\"https://countries.trevorblades.com/\" target=\"_blank\">https://countries.trevorblades.com/</a></li>\r\n    <li>Compare to the regular and default GraphQL implementation, you will find the following differences</li>\r\n    <ul>\r\n      <li>There are no Pagination and we only use GraphQL <b>once</b> to load the data, then we use the grid as a regular local in-memory grid</li>\r\n      <li>We enabled the following 2 flags \"useLocalFiltering\" and \"useLocalSorting\" to use regular (in memory) DataView filtering/sorting</li>\r\n    </ul>\r\n    <li>NOTE - This Example calls multiple GraphQL queries, this is <b>ONLY</b> for demo purposes, you would typically only call 1 query (which is what GraphQL is good at)</li>\r\n    <li>This example is mainly to demo the use of GraphqlService to build the query and retrieve the data but also to demo how to mix that with local (in-memory) Filtering/Sorting strategies</li>\r\n  </ul>\r\n  `;\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions!: Column[];\r\n  gridOptions!: GridOption;\r\n  dataset = [];\r\n  metrics!: Metrics;\r\n\r\n  graphqlQuery = '';\r\n  processing = true;\r\n  status = { text: 'processing...', class: 'alert alert-danger' };\r\n  isDataLoaded = false;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      { id: 'countryCode', field: 'code', name: 'Code', maxWidth: 90, sortable: true, filterable: true, columnGroup: 'Country' },\r\n      { id: 'countryName', field: 'name', name: 'Name', width: 60, sortable: true, filterable: true, columnGroup: 'Country' },\r\n      { id: 'countryNative', field: 'native', name: 'Native', width: 60, sortable: true, filterable: true, columnGroup: 'Country' },\r\n      { id: 'countryPhone', field: 'phone', name: 'Phone Area Code', maxWidth: 110, sortable: true, filterable: true, columnGroup: 'Country' },\r\n      { id: 'countryCurrency', field: 'currency', name: 'Currency', maxWidth: 90, sortable: true, filterable: true, columnGroup: 'Country' },\r\n      { id: 'countryEmoji', field: 'emoji', name: 'Emoji', maxWidth: 90, sortable: true, columnGroup: 'Country' },\r\n      {\r\n        id: 'languageName', field: 'languages.name', name: 'Names', width: 60,\r\n        formatter: Formatters.arrayObjectToCsv, columnGroup: 'Language',\r\n        params: { propertyNames: ['name'], useFormatterOuputToFilter: true },\r\n        filterable: true,\r\n        // this Filter is a bit more tricky than others since the values are an array of objects\r\n        // what we can do is use the Formatter to search from the CSV string coming from the Formatter (with \"useFormatterOuputToFilter: true\")\r\n        // we also need to use the Operator IN_CONTAINS\r\n        filter: {\r\n          model: Filters.multipleSelect,\r\n          collectionAsync: this.getLanguages(),\r\n          operator: OperatorType.inContains,\r\n          collectionOptions: {\r\n            addBlankEntry: true,\r\n            // the data is not at the root of the array, so we must tell the Select Filter where to pull the data\r\n            collectionInsideObjectProperty: 'data.languages'\r\n          },\r\n          collectionFilterBy: [\r\n            // filter out any empty values\r\n            { property: 'name', value: '', operator: 'NE' },\r\n            { property: 'name', value: null, operator: 'NE' },\r\n          ],\r\n          collectionSortBy: {\r\n            property: 'name'\r\n          },\r\n          customStructure: {\r\n            value: 'name',\r\n            label: 'name',\r\n          },\r\n          filterOptions: {\r\n            filter: true\r\n          } as MultipleSelectOption\r\n        },\r\n      },\r\n      {\r\n        id: 'languageNative', field: 'languages.native', name: 'Native', width: 60,\r\n        formatter: Formatters.arrayObjectToCsv, params: { propertyNames: ['native'], useFormatterOuputToFilter: true }, columnGroup: 'Language',\r\n        filterable: true,\r\n        filter: {\r\n          model: Filters.multipleSelect,\r\n          collectionAsync: this.getLanguages(),\r\n          operator: OperatorType.inContains,\r\n          collectionOptions: {\r\n            addBlankEntry: true,\r\n            // the data is not at the root of the array, so we must tell the Select Filter where to pull the data\r\n            collectionInsideObjectProperty: 'data.languages'\r\n          },\r\n          collectionFilterBy: [\r\n            // filter out any empty values\r\n            { property: 'native', value: '', operator: 'NE' },\r\n            { property: 'native', value: null, operator: 'NE' },\r\n          ],\r\n          collectionSortBy: {\r\n            property: 'native'\r\n          },\r\n          customStructure: {\r\n            value: 'native',\r\n            label: 'native',\r\n          },\r\n          filterOptions: {\r\n            filter: true\r\n          } as MultipleSelectOption\r\n        },\r\n      },\r\n      {\r\n        id: 'languageCode', field: 'languages.code', name: 'Codes', maxWidth: 100,\r\n        formatter: Formatters.arrayObjectToCsv, params: { propertyNames: ['code'], useFormatterOuputToFilter: true }, columnGroup: 'Language',\r\n        filterable: true,\r\n      },\r\n      {\r\n        id: 'continentName', field: 'continent.name', name: 'Name', width: 60, sortable: true,\r\n        filterable: true, formatter: Formatters.complexObject, columnGroup: 'Continent'\r\n      },\r\n      {\r\n        id: 'continentCode', field: 'continent.code', name: 'Code', maxWidth: 90,\r\n        sortable: true,\r\n        filterable: true,\r\n        filter: {\r\n          model: Filters.singleSelect,\r\n          collectionAsync: this.getContinents(),\r\n          collectionOptions: {\r\n            // the data is not at the root of the array, so we must tell the Select Filter where to pull the data\r\n            collectionInsideObjectProperty: 'data.continents',\r\n            addBlankEntry: true,\r\n            separatorBetweenTextLabels: ': ',\r\n          },\r\n          customStructure: {\r\n            value: 'code',\r\n            label: 'code',\r\n            labelSuffix: 'name',\r\n          }\r\n        },\r\n        formatter: Formatters.complexObject, columnGroup: 'Continent',\r\n      },\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableFiltering: true,\r\n      enableCellNavigation: true,\r\n      enablePagination: false,\r\n      createPreHeaderPanel: true,\r\n      showPreHeaderPanel: true,\r\n      preHeaderPanelHeight: 28,\r\n      datasetIdPropertyName: 'code',\r\n      showCustomFooter: true, // display some metrics in the bottom custom footer\r\n      backendServiceApi: {\r\n        // use the GraphQL Service to build the query but use local (in memory) Filtering/Sorting strategies\r\n        // the useLocalFiltering/useLocalSorting flags can be enabled independently\r\n        service: new GraphqlService(),\r\n        useLocalFiltering: true,\r\n        useLocalSorting: true,\r\n\r\n        options: {\r\n          datasetName: 'countries', // the only REQUIRED property\r\n        },\r\n        // you can define the onInit callback OR enable the \"executeProcessCommandOnInit\" flag in the service init\r\n        preProcess: () => !this.isDataLoaded ? this.displaySpinner(true) : '',\r\n        process: (query) => this.getCountries(query),\r\n        postProcess: (result: GraphqlResult<Country>) => {\r\n          this.metrics = result.metrics as Metrics;\r\n          this.displaySpinner(false);\r\n          this.isDataLoaded = true;\r\n        }\r\n      } as GraphqlServiceApi\r\n    };\r\n  }\r\n\r\n  displaySpinner(isProcessing: boolean) {\r\n    this.processing = isProcessing;\r\n    this.status = (isProcessing)\r\n      ? { text: 'processing...', class: 'alert alert-danger' }\r\n      : { text: 'done', class: 'alert alert-success' };\r\n  }\r\n\r\n  // --\r\n  // NOTE - Demo Code ONLY\r\n  // This Example calls multiple GraphQL queries, this is ONLY for demo purposes, you would typically only call 1 query (which is what GraphQL is good at)\r\n  // This demo is mainly to show the use of GraphqlService to build the query and retrieve the data but also to show how to mix that with usage of local Filtering/Sorting strategies\r\n  // --\r\n\r\n  /** Calling the GraphQL backend API to get the Countries with the Query created by the \"process\" method of GraphqlService  */\r\n  getCountries(query: string): Observable<GraphqlResult<Country>> {\r\n    return this.http.post<GraphqlResult<Country>>(COUNTRIES_API, { query });\r\n  }\r\n\r\n  /**\r\n   * Calling again the GraphQL backend API, however in this case we cannot use the GraphQL Service to build the query\r\n   * So we will have to write, by hand, the query to get the continents code & name\r\n   * We also need to resolve the data in a flat array (singleSelect/multipleSelect Filters only accept data at the root of the array)\r\n   */\r\n  getContinents(): Observable<GraphqlResult<{ code: string; name: string; }>> {\r\n    const continentQuery = `query { continents { code, name  }}`;\r\n    return this.http.post<GraphqlResult<{ code: string; name: string; }>>(COUNTRIES_API, { query: continentQuery });\r\n  }\r\n\r\n  /**\r\n   * Calling again the GraphQL backend API, however in this case we cannot use the GraphQL Service to build the query\r\n   * So we will have to write, by hand, the query to get the languages code & name\r\n   * We also need to resolve the data in a flat array (singleSelect/multipleSelect Filters only accept data at the root of the array)\r\n   */\r\n  getLanguages(): Observable<GraphqlResult<{ code: string; name: string; native: string; }>> {\r\n    const languageQuery = `query { languages { code, name, native  }}`;\r\n    return this.http.post<GraphqlResult<{ code: string; name: string; native: string; }>>(COUNTRIES_API, { query: languageQuery });\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-graphql-nopage.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle row\\\">\\r\\n    <div class=\\\"col-12\\\" [innerHTML]=\\\"subTitle\\\">\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-xs-6 col-sm-3\\\">\\r\\n      <div [class]=\\\"status.class\\\" role=\\\"alert\\\" data-test=\\\"status\\\">\\r\\n        <strong>Status: </strong> {{status.text}}\\r\\n        <span [hidden]=\\\"!processing\\\">\\r\\n          <i class=\\\"fa fa-refresh fa-spin fa-lg fa-fw\\\"></i>\\r\\n        </span>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <angular-slickgrid gridId=\\\"grid27\\\"\\r\\n                     [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                     [gridOptions]=\\\"gridOptions\\\"\\r\\n                     [dataset]=\\\"dataset\\\">\\r\\n  </angular-slickgrid>\\r\\n</div>\\r\\n\";","export default \"@charset \\\"UTF-8\\\";\\n/* make sure to add the @import the SlickGrid Bootstrap Theme AFTER the variables changes */\\n/*!\\n * SlickGrid custom styling for Bootstrap (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n * @author: Ghislain B. (ghiscoding)\\n */\\n/*!\\n\\n/** SlickGrid Bootstrap Theme */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.pointer {\\n  cursor: pointer;\\n}\\n.slickgrid-container .slick-header-columns,\\n.slickgrid-container .slick-header-column {\\n  background: rgba(255, 255, 255, 0.6);\\n  box-sizing: content-box !important;\\n  /* this here only for Firefox! */\\n}\\n.slickgrid-container .slick-header-columns {\\n  /*border-bottom: 1px solid $grid-border-color;*/\\n  background: linear-gradient(rgba(0, 0, 0, 0) 60%, rgba(0, 0, 0, 0.1));\\n}\\n.slickgrid-container .slick-header-column {\\n  border-right: 1px solid fade(black, 3%);\\n  border-bottom: 1px solid fade(black, 3%);\\n}\\n.slickgrid-container .slick-header-column:hover {\\n  background: rgba(250, 250, 250, 0.6);\\n}\\n.slickgrid-container .slick-header-column-active {\\n  background: rgba(242, 242, 242, 0.6) !important;\\n}\\n.slickgrid-container .slick-headerrow {\\n  background: rgba(255, 255, 255, 0.6);\\n}\\n.slickgrid-container .slick-headerrow-column {\\n  background: #fafafa;\\n  border-bottom: 0;\\n}\\n.slickgrid-container .grid-canvas {\\n  background: white;\\n}\\n.slickgrid-container .slick-row {\\n  background: inherit;\\n  border: 0;\\n  line-height: 20px;\\n}\\n.slickgrid-container .slick-row .slick-cell {\\n  background: inherit;\\n  border: 1px transparent;\\n  padding-top: 3px;\\n  padding-bottom: 4px;\\n  padding-left: 4px;\\n  padding-right: 4px;\\n  box-sizing: border-box;\\n}\\n.slickgrid-container .slick-row .slick-cell.invalid {\\n  border-color: red;\\n  -moz-animation-duration: 0.2s;\\n  -webkit-animation-duration: 0.2s;\\n  -moz-animation-name: slickgrid-invalid-hilite;\\n  -webkit-animation-name: slickgrid-invalid-hilite;\\n  animation-duration: 0.2s;\\n  animation-name: slickgrid-invalid-hilite;\\n}\\n.slickgrid-container .slick-row .slick-cell.selected {\\n  background-color: #e7e7c3;\\n}\\n.slickgrid-container .slick-row .slick-cell.selected .cell-selection {\\n  background-color: transparent;\\n  /* show default selected row background */\\n}\\n.slickgrid-container .slick-row .slick-cell.active {\\n  box-shadow: inset 0 0 0 1px #aaaaaa;\\n  border: none;\\n  z-index: 6;\\n  padding: 5px 6px;\\n}\\n.slickgrid-container .slick-row .slick-cell.active input.editor-text {\\n  width: calc(100% + 2px);\\n  height: 100%;\\n  outline: 0;\\n  transform: translate(0, -2px);\\n}\\n.slickgrid-container .slick-row .slick-cell.active input.dual-editor-text {\\n  width: calc(50% + 1px - 5px);\\n  height: 100%;\\n  outline: 0;\\n  transform: translate(0, -2px);\\n}\\n.slickgrid-container .slick-row.odd .slick-cell {\\n  background: #f7f7f7;\\n}\\n.slickgrid-container .slick-row.odd .slick-cell.selected {\\n  background-color: #d6d6b2;\\n}\\n.slickgrid-container .slick-row.active-row .slick-cell {\\n  background-color: #e2fffd;\\n}\\n.slickgrid-container .slick-row.active-row .slick-cell.selected {\\n  background-color: red;\\n}\\n.slickgrid-container .slick-row.active-row.odd .slick-cell {\\n  background-color: #f2f2f2;\\n}\\n.slickgrid-container .slick-row.active-row.odd .slick-cell.selected {\\n  background-color: green;\\n}\\n.slickgrid-container .slick-row.loading {\\n  opacity: 0.5;\\n}\\n.slickgrid-container .slick-group {\\n  border-bottom: 2px solid silver;\\n}\\n.slickgrid-container .slick-group-toggle {\\n  width: 9px;\\n  height: 9px;\\n  margin-right: 5px;\\n}\\n.slickgrid-container .slick-group-toggle.expanded {\\n  background: none;\\n}\\n.slickgrid-container .slick-group-toggle.collapsed {\\n  background: none;\\n}\\n.slickgrid-container .slick-group-totals {\\n  color: gray;\\n  background: white;\\n}\\n.slickgrid-container .slick-sortable-placeholder {\\n  background: silver !important;\\n}\\n@-webkit-keyframes slickgrid-invalid-hilite {\\n  from {\\n    box-shadow: 0 0 6px red;\\n  }\\n  to {\\n    box-shadow: none;\\n  }\\n}\\n@keyframes slickgrid-invalid-hilite {\\n  from {\\n    box-shadow: 0 0 6px red;\\n  }\\n  to {\\n    box-shadow: none;\\n  }\\n}\\n.slickgrid-container .header-overlay,\\n.slickgrid-container .cell-overlay,\\n.slickgrid-container .selection-cell-overlay {\\n  display: block;\\n  position: absolute;\\n  z-index: 999;\\n}\\n.slickgrid-container .slick-cell > .editor-select {\\n  position: absolute;\\n  left: 0;\\n  right: 0;\\n  width: auto;\\n  top: 0;\\n  bottom: 0;\\n  max-width: 100%;\\n  min-width: 0;\\n  margin: 0;\\n}\\n.slickgrid-container .slick-range-decorator {\\n  z-index: 100;\\n  pointer-events: none;\\n  background: transparent;\\n  border: none;\\n  outline: black;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slickgrid-container {\\n  overflow: hidden;\\n  outline: 0;\\n  position: relative;\\n  box-sizing: content-box;\\n}\\n.slickgrid-container .slick-group-header-columns {\\n  position: relative;\\n  white-space: nowrap;\\n  cursor: default;\\n  overflow: hidden;\\n}\\n.slickgrid-container .slick-group-header {\\n  width: 100%;\\n  overflow: hidden;\\n  border-left: 0px;\\n}\\n.slickgrid-container .slick-group-header-column.ui-state-default {\\n  position: relative;\\n  display: inline-block;\\n  box-sizing: content-box !important;\\n  /* this here only for Firefox! */\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  height: 16px;\\n  line-height: 16px;\\n  margin: 0;\\n  padding: 4px;\\n}\\n.slickgrid-container .slick-viewport,\\n.slickgrid-container .slick-top-panel-scroller,\\n.slickgrid-container .slick-header,\\n.slickgrid-container .slick-headerrow,\\n.slickgrid-container .slick-footerrow {\\n  position: relative;\\n  width: 100%;\\n  border: 1px solid fade(black, 3%);\\n  border-right-color: transparent;\\n  border-bottom-color: transparent;\\n  border-right-width: 0;\\n  border-bottom-width: 0;\\n  margin: 0;\\n  outline: 0;\\n}\\n.slickgrid-container .slick-top-panel-scroller {\\n  overflow: hidden;\\n}\\n.slickgrid-container .slick-pane {\\n  position: absolute;\\n  outline: 0;\\n  overflow: hidden;\\n  width: 100%;\\n}\\n.slickgrid-container .slick-pane-header {\\n  display: block;\\n  background-color: #ffffff;\\n  border-bottom: 0 none;\\n}\\n.slickgrid-container .slick-pane-top {\\n  box-sizing: border-box;\\n  border-top: none;\\n}\\n.slickgrid-container .slick-viewport {\\n  overflow: auto;\\n}\\n.slickgrid-container .slick-viewport ::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n}\\n.slickgrid-container .slick-viewport ::-webkit-scrollbar-thumb {\\n  border-radius: 4px;\\n  border: 2px solid white;\\n  /* should match background, can't be transparent */\\n  background-color: rgba(0, 0, 0, 0.5);\\n}\\n.slickgrid-container .slick-header,\\n.slickgrid-container .slick-headerrow,\\n.slickgrid-container .slick-footerrow {\\n  overflow: hidden;\\n}\\n.slickgrid-container .slick-headerrow {\\n  border-top-color: transparent;\\n  border-top-width: 0;\\n}\\n.slickgrid-container .slick-top-panel,\\n.slickgrid-container .slick-header-columns,\\n.slickgrid-container .slick-headerrow-columns,\\n.slickgrid-container .slick-footerrow-columns {\\n  position: relative;\\n  white-space: nowrap;\\n  cursor: default;\\n  overflow: hidden;\\n  margin: 0;\\n  padding: 0;\\n  border: 0;\\n  outline: 0;\\n}\\n.slickgrid-container .slick-cell,\\n.slickgrid-container .slick-header-column,\\n.slickgrid-container .slick-headerrow-column,\\n.slickgrid-container .slick-footerrow-column {\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  border-top-color: transparent;\\n  border-left-color: transparent;\\n  border-top-width: 0;\\n  border-left-width: 0;\\n  margin: 0;\\n  padding: 0;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  vertical-align: middle;\\n  z-index: 1;\\n  white-space: nowrap;\\n  cursor: default;\\n}\\n.slickgrid-container .slick-cell.slick-header-is-leaf,\\n.slickgrid-container .slick-header-column.slick-header-is-leaf,\\n.slickgrid-container .slick-headerrow-column.slick-header-is-leaf,\\n.slickgrid-container .slick-footerrow-column.slick-header-is-leaf {\\n  border-bottom-color: transparent;\\n  border-bottom-width: 0;\\n}\\n.slickgrid-container .slick-header-column.ui-state-default {\\n  position: relative;\\n  display: inline-block;\\n  box-sizing: content-box !important;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  height: 16px;\\n  line-height: 16px;\\n  margin: 0;\\n  padding: 4px;\\n  border-right: 1px solid fade(black, 3%);\\n  border-left: 0px !important;\\n  border-top: 0px !important;\\n  border-bottom: 0px !important;\\n  float: left;\\n}\\n.slickgrid-container .slick-cell {\\n  box-sizing: border-box;\\n  border-style: solid;\\n  padding: 1px 2px 1px 2px;\\n}\\n.slickgrid-container .slick-header-column {\\n  padding: 4px 4px 4px 4px;\\n}\\n.slickgrid-container .grid-canvas {\\n  position: relative;\\n  outline: 0;\\n}\\n.slickgrid-container .slick-row {\\n  position: absolute;\\n  border: 0;\\n  width: 100%;\\n}\\n.slickgrid-container .slick-header-column-sorted {\\n  font-style: italic;\\n}\\n.slickgrid-container .slick-sort-indicator {\\n  display: inline-block;\\n  width: 8px;\\n  height: 5px;\\n  margin-left: 4px;\\n  margin-top: 6px;\\n  position: absolute;\\n  left: 0;\\n}\\n.slickgrid-container .slick-sort-indicator-desc:before {\\n  content: \\\"\\\";\\n}\\n.slickgrid-container .slick-sort-indicator-asc:before {\\n  content: \\\"\\\";\\n}\\n.slickgrid-container .slick-header-sortable .slick-column-name {\\n  margin-left: 10px;\\n}\\n.slickgrid-container .slick-header.ui-state-default {\\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\\n}\\n.slickgrid-container .slick-column-name {\\n  text-overflow: ellipsis;\\n}\\n.slickgrid-container .slick-resizable-handle {\\n  position: absolute;\\n  font-size: 0.1px;\\n  display: block;\\n  cursor: col-resize;\\n  width: 4px;\\n  right: 0;\\n  top: 0;\\n  height: 100%;\\n}\\n.slickgrid-container .slick-resizable-handle-hover {\\n  background-color: #ccc;\\n}\\n.slickgrid-container .slick-sortable-placeholder {\\n  background: silver;\\n}\\n.slickgrid-container .slick-group-toggle {\\n  display: inline-block;\\n}\\n.slickgrid-container .slick-cell.highlighted {\\n  background: lightskyblue;\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: all 0.5s;\\n}\\n.slickgrid-container .slick-cell.flashing {\\n  border: 1px solid red !important;\\n}\\n.slickgrid-container .slick-cell.editable {\\n  z-index: 11;\\n  overflow: visible;\\n  background: white;\\n  border-color: black;\\n  border-style: solid;\\n}\\n.slickgrid-container .slick-cell:focus {\\n  outline: none;\\n}\\n.slickgrid-container .slick-reorder-proxy {\\n  display: inline-block;\\n  background: blue;\\n  opacity: 0.15;\\n  cursor: move;\\n}\\n.slickgrid-container .slick-reorder-guide {\\n  display: inline-block;\\n  height: 2px;\\n  background: blue;\\n  opacity: 0.7;\\n}\\n.slickgrid-container .slick-selection {\\n  z-index: 10;\\n  position: absolute;\\n  border: 2px dashed black;\\n}\\n.slickgrid-container .slick-pane {\\n  position: absolute;\\n  outline: 0;\\n  overflow: hidden;\\n  width: 100%;\\n}\\n.flatpickr-wrapper {\\n  z-index: 10000;\\n}\\n.interact-placeholder {\\n  background: red !important;\\n  display: inline-block;\\n  float: left;\\n  transform: translate(0px, -100%);\\n}\\n.interact-drop-active {\\n  box-shadow: inset 0 0 8px rgba(7, 67, 128, 0.5);\\n}\\n.interact-can-drop {\\n  opacity: 0.9;\\n}\\n.scrollbar-fix::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n}\\n/* control variables */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-columnpicker {\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  background-color: #ffffff;\\n  border: 1px solid #b8b8b8;\\n  border-radius: 2px;\\n  padding: 6px;\\n  box-shadow: 1px 1px 1px silver;\\n  min-width: 150px;\\n  cursor: default;\\n  position: absolute;\\n  z-index: 2000;\\n  overflow: auto;\\n  resize: both;\\n  width: auto;\\n  padding-right: 24px;\\n  /* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n}\\n.slick-columnpicker > .close {\\n  float: right;\\n  position: absolute;\\n  color: #c3c3c3;\\n  cursor: pointer;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 21px;\\n  background-color: #ffffff;\\n  border: 0px solid #9c9c9c;\\n  right: 5px;\\n  top: 0px;\\n}\\n.slick-columnpicker > .close:hover {\\n  color: #838383;\\n}\\n.slick-columnpicker > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-columnpicker li {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n  background: none;\\n}\\n.slick-columnpicker li a {\\n  display: block;\\n  padding: 4px;\\n  font-weight: bold;\\n}\\n.slick-columnpicker li a:hover {\\n  background-color: #ffffff;\\n}\\n.slick-columnpicker li label {\\n  font-weight: normal;\\n}\\n.slick-columnpicker li label input {\\n  margin: 4px;\\n}\\n.slick-columnpicker div.title {\\n  font-size: calc(14px + 2px);\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: 1px solid #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-columnpicker-list {\\n  /** make sure the hidden class exist, it was removed in BS4 */\\n  /* replace checkboxes by Font-Awesome icons */\\n}\\n.slick-columnpicker-list li.hidden {\\n  display: none;\\n}\\n.slick-columnpicker-list li {\\n  width: calc(100% + 24px - 6px);\\n  /* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-columnpicker-list li:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-columnpicker-list li label {\\n  cursor: pointer;\\n  width: 100%;\\n  margin-bottom: 0px;\\n}\\n.slick-columnpicker-list hr {\\n  margin: 6px 0;\\n  border: 0;\\n  border-top: 1px solid #d5d5d5;\\n  width: calc(100% + 24px - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-columnpicker-list input[type=checkbox] {\\n  display: none;\\n  /* to hide the checkbox itself */\\n  margin-left: 4px;\\n  margin-top: 3px;\\n}\\n.slick-columnpicker-list input[type=checkbox] + label:before {\\n  cursor: pointer;\\n  content: \\\"\\\";\\n  color: #31708F;\\n  display: inline-block;\\n  font-weight: bold;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 13px;\\n  opacity: 0.15;\\n  /* unchecked icon */\\n  margin-right: 4px;\\n  width: 13px;\\n}\\n.slick-columnpicker-list input[type=checkbox] + label:hover:before {\\n  opacity: 0.35;\\n}\\n.slick-columnpicker-list input[type=checkbox]:checked + label:before {\\n  opacity: 1;\\n  /* checked icon */\\n  content: \\\"\\\";\\n  width: 13px;\\n}\\n.slick-gridmenu {\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  background-color: #ffffff;\\n  border: 1px solid #b8b8b8;\\n  border-radius: 2px;\\n  padding: 6px;\\n  box-shadow: 1px 1px 1px silver;\\n  min-width: 200px;\\n  cursor: default;\\n  position: absolute;\\n  z-index: 2000;\\n  overflow: auto;\\n  width: -webkit-max-content;\\n  width: -moz-max-content;\\n  width: max-content;\\n}\\n.slick-gridmenu > .close {\\n  float: right;\\n  position: absolute;\\n  color: #c3c3c3;\\n  cursor: pointer;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 21px;\\n  background-color: #ffffff;\\n  border: 0px solid #9c9c9c;\\n  right: 5px;\\n  top: 0px;\\n}\\n.slick-gridmenu > .close:hover {\\n  color: #838383;\\n}\\n.slick-gridmenu > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-gridmenu div.title {\\n  font-size: calc(14px + 2px);\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: solid 1px #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-gridmenu li {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n  background: none;\\n}\\n.slick-gridmenu li a {\\n  display: block;\\n  padding: 4px;\\n  font-weight: bold;\\n}\\n.slick-gridmenu li a:hover {\\n  background-color: #ffffff;\\n}\\n.slick-gridmenu li label {\\n  font-weight: normal;\\n}\\n.slick-gridmenu li label input {\\n  margin: 4px;\\n}\\n.slick-gridmenu input {\\n  margin: 4px;\\n}\\n.slick-gridmenu-button {\\n  position: absolute;\\n  cursor: pointer;\\n  right: 0;\\n  padding: 0 2px;\\n  margin-top: 5px;\\n  background-color: transparent;\\n  border: 0;\\n  width: 22px;\\n  font-size: 14px;\\n  z-index: 2;\\n}\\n.slick-gridmenu-custom {\\n  margin-bottom: 10px;\\n}\\n/* Menu items */\\n.slick-gridmenu-item {\\n  cursor: pointer;\\n  display: block;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-gridmenu-item:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-gridmenu-item.slick-gridmenu-item-divider {\\n  cursor: default;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 5px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-gridmenu-item.slick-gridmenu-item-divider:hover {\\n  border: none;\\n  background-color: silver;\\n}\\n.slick-gridmenu-item-divider.slick-gridmenu-item:hover {\\n  background-color: #e7e7e7;\\n}\\n.slick-gridmenu-item-disabled {\\n  cursor: inherit;\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n}\\n.slick-gridmenu-item-disabled .slick-gridmenu-icon, .slick-gridmenu-item-disabled .slick-gridmenu-content {\\n  color: silver;\\n}\\n.slick-gridmenu-item-hidden {\\n  display: none;\\n}\\n.slick-gridmenu-icon {\\n  display: inline-block;\\n  font-size: 14px;\\n  line-height: 14px;\\n  margin-right: 4px;\\n  width: 14px;\\n  vertical-align: middle;\\n  background-repeat: no-repeat;\\n  background-position: center center;\\n}\\n.slick-gridmenu-content {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.slick-gridmenu-list {\\n  /** make sure the hidden class exist, it was removed in BS4 */\\n  /* replace checkboxes by Font-Awesome icons */\\n}\\n.slick-gridmenu-list li.hidden {\\n  display: none;\\n}\\n.slick-gridmenu-list li {\\n  width: auto;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-gridmenu-list li:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-gridmenu-list li label {\\n  cursor: pointer;\\n  width: 100%;\\n  margin-bottom: 0px;\\n}\\n.slick-gridmenu-list hr {\\n  margin: 6px 0;\\n  border: 0;\\n  border-top: 1px solid #dddddd;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-gridmenu-list input[type=checkbox] {\\n  display: none;\\n  /* to hide the checkbox itself */\\n  margin-left: 4px;\\n  margin-top: 3px;\\n}\\n.slick-gridmenu-list input[type=checkbox] + label:before {\\n  cursor: pointer;\\n  content: \\\"\\\";\\n  color: #31708F;\\n  display: inline-block;\\n  font-weight: bold;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 13px;\\n  opacity: 0.15;\\n  /* unchecked icon */\\n  margin-right: 4px;\\n  width: 13px;\\n}\\n.slick-gridmenu-list input[type=checkbox] + label:hover:before {\\n  opacity: 0.35;\\n}\\n.slick-gridmenu-list input[type=checkbox]:checked + label:before {\\n  content: \\\"\\\";\\n  opacity: 1;\\n  /* checked icon */\\n  width: 13px;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-cell input.dual-editor-text,\\n.slick-cell input.editor-text {\\n  border: 1px solid #e2e2e2;\\n  border-radius: 3px;\\n  background: #ffffff;\\n  padding-bottom: 0;\\n  padding-left: 2px;\\n  padding-right: 0;\\n  padding-top: 0;\\n  margin-left: -2px;\\n  margin-bottom: 2px;\\n  margin-right: 2px;\\n  margin-top: 2px;\\n  width: calc(100% + 2px);\\n  transform: translate(0, -2px);\\n  outline: 0;\\n  height: 100%;\\n}\\n.slick-cell input.dual-editor-text:focus,\\n.slick-cell input.editor-text:focus {\\n  outline: 0;\\n  border-color: #3e8eb5;\\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px rgba(53, 121, 154, 0.3);\\n}\\n.slick-cell input.dual-editor-text.right,\\n.slick-cell input.editor-text.right {\\n  margin-left: calc(-2px + 9px);\\n}\\n.slick-cell input.dual-editor-text[readonly],\\n.slick-cell input.editor-text[readonly] {\\n  background-color: #f0f0f0;\\n}\\n.slick-cell .slider-editor-input:focus {\\n  outline: 0;\\n  border-color: #3e8eb5;\\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px rgba(53, 121, 154, 0.3);\\n}\\n.slick-cell .flatpickr.input-group .input-group-btn .btn {\\n  background-color: #eeeeee;\\n  border: 1px solid #cccccc;\\n  padding: 6px;\\n  border-top-right-radius: 3px;\\n  border-bottom-right-radius: 3px;\\n  cursor: pointer;\\n  height: 24px;\\n}\\n.slick-cell .flatpickr.input-group .input-group-btn .btn.icon-close:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: inherit;\\n  content: \\\"\\\";\\n  vertical-align: middle;\\n  display: inline-block;\\n  height: initial;\\n  width: initial;\\n  margin-top: -14px;\\n}\\n.slick-cell .flatpickr-alt-input {\\n  cursor: pointer;\\n  height: 24px;\\n  border-top-left-radius: 3px !important;\\n  border-bottom-left-radius: 3px !important;\\n  padding: 6px 2px;\\n}\\n.slick-cell .flatpickr-alt-input.editor-text {\\n  cursor: pointer;\\n  background-color: #ffffff;\\n}\\n.slick-cell .flatpickr-alt-input.editor-text:focus {\\n  outline: 0;\\n  border-color: #3e8eb5;\\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px rgba(53, 121, 154, 0.3);\\n}\\n/* Long Text Editor */\\n.slick-large-editor-text {\\n  z-index: 10000;\\n  position: absolute;\\n  background: #ffffff;\\n  padding: 5px;\\n  border: 2px solid #a0a0a0;\\n  border-radius: 6px;\\n}\\n.slick-large-editor-text .editor-footer {\\n  text-align: right;\\n}\\n.slick-large-editor-text .editor-footer button {\\n  margin-left: 2px;\\n  border-radius: 3px;\\n}\\n.slick-large-editor-text textarea {\\n  background: #ffffff;\\n  border: 0;\\n  outline: 0;\\n}\\n.slick-large-editor-text .counter {\\n  float: left;\\n  font-size: 11px;\\n  margin-top: 8px;\\n}\\n.slick-large-editor-text .counter .separator {\\n  margin: 0 1px;\\n}\\n/* plugin variables */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-cell-menu {\\n  position: absolute;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  background: #ffffff;\\n  border: 1px solid #BFBDBD;\\n  border-radius: 2px;\\n  min-width: 175px;\\n  padding: 6px;\\n  z-index: 100000;\\n  cursor: default;\\n  display: inline-block;\\n  overflow: auto;\\n  resize: both;\\n  /* make sure that other UI frameworks aren't overriding our properties (Bulma was one of them affecting this) */\\n  /* resize cell menu item width when there's a close button on same line */\\n}\\n.slick-cell-menu.dropdown, .slick-cell-menu.dropup {\\n  display: inline-block;\\n  position: absolute;\\n}\\n.slick-cell-menu > .close {\\n  float: right;\\n  cursor: pointer;\\n  color: #c3c3c3;\\n  background-color: #ffffff;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  border: 0px solid #9c9c9c;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 21px;\\n}\\n.slick-cell-menu > .close:hover {\\n  color: #838383;\\n}\\n.slick-cell-menu > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-cell-menu .slick-cell-menu-option-list .title,\\n.slick-cell-menu .slick-cell-menu-command-list .title {\\n  font-size: calc(14px + 2px);\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: 1px solid #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-cell-menu .slick-cell-menu-item {\\n  cursor: pointer;\\n  display: flex;\\n  align-items: center;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  font-size: 14px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n  width: 100%;\\n  height: 24px;\\n  /* Disabled item */\\n}\\n.slick-cell-menu .slick-cell-menu-item:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-divider {\\n  cursor: default;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 5px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-divider:hover {\\n  border: none;\\n  background-color: #e7e7e7;\\n}\\n.slick-cell-menu .slick-cell-menu-item .slick-cell-menu-icon {\\n  font-size: 14px;\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  display: inline-block;\\n  line-height: calc(14px + 2px);\\n  margin-right: 4px;\\n  vertical-align: middle;\\n  width: 16px;\\n}\\n.slick-cell-menu .slick-cell-menu-item .slick-cell-menu-content {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-disabled {\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n  cursor: inherit;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-disabled .slick-cell-menu-icon, .slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-disabled .slick-cell-menu-content {\\n  color: silver;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-hidden {\\n  display: none;\\n}\\n.slick-cell-menu .slick-cell-menu-option-list {\\n  margin-bottom: 10px;\\n}\\n.slick-cell-menu button + .slick-cell-menu-command-list .slick-cell-menu-item:first-child,\\n.slick-cell-menu button + .slick-cell-menu-option-list .slick-cell-menu-item:first-child {\\n  width: calc(100% - 15px - 3px);\\n}\\n.slick-context-menu {\\n  position: absolute;\\n  background: #ffffff;\\n  border: 1px solid #BFBDBD;\\n  border-radius: 2px;\\n  min-width: 175px;\\n  padding: 6px;\\n  z-index: 100000;\\n  cursor: default;\\n  display: inline-block;\\n  overflow: auto;\\n  resize: both;\\n  /* make sure that other UI frameworks aren't overriding our properties (Bulma was one of them affecting this) */\\n  /* resize context menu item width when there's a close button on same line */\\n}\\n.slick-context-menu.dropdown, .slick-context-menu.dropup {\\n  display: inline-block;\\n  position: absolute;\\n}\\n.slick-context-menu > .close {\\n  float: right;\\n  color: #c3c3c3;\\n  background-color: #ffffff;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  border: 0px solid #9c9c9c;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 21px;\\n}\\n.slick-context-menu > .close:hover {\\n  color: #838383;\\n}\\n.slick-context-menu > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-context-menu .title {\\n  font-size: calc(14px + 2px);\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: 1px solid #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-context-menu .slick-context-menu-item {\\n  cursor: pointer;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  font-size: 14px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n  width: 100%;\\n  /* Disabled item */\\n}\\n.slick-context-menu .slick-context-menu-item:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-divider {\\n  cursor: default;\\n  display: block;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 5px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-divider:hover {\\n  border: none;\\n  background-color: #e7e7e7;\\n}\\n.slick-context-menu .slick-context-menu-item .slick-context-menu-icon {\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  display: inline-block;\\n  font-size: 14px;\\n  height: 16px;\\n  line-height: 14px;\\n  margin-right: 4px;\\n  vertical-align: middle;\\n  width: 16px;\\n}\\n.slick-context-menu .slick-context-menu-item .slick-context-menu-content {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-disabled {\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n  cursor: inherit;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-disabled .slick-context-menu-icon, .slick-context-menu .slick-context-menu-item.slick-context-menu-item-disabled .slick-context-menu-content {\\n  color: silver;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-hidden {\\n  display: none;\\n}\\n.slick-context-menu .slick-context-menu-option-list {\\n  margin-bottom: 10px;\\n}\\n.slick-context-menu button + .slick-context-menu-command-list .slick-context-menu-item:first-child,\\n.slick-context-menu button + .slick-context-menu-option-list .slick-context-menu-item:first-child {\\n  width: calc(100% - 15px - 3px);\\n}\\n.slick-column-name,\\n.slick-sort-indicator {\\n  /**\\n   * This makes all \\\"float:right\\\" elements after it that spill over to the next line\\n   * display way below the lower boundary of the column thus hiding them.\\n   */\\n  float: left;\\n  margin-bottom: 100px;\\n}\\n.slick-header-button {\\n  /**\\n   * This makes all \\\"float:right\\\" elements after it that spill over to the next line\\n   * display way below the lower boundary of the column thus hiding them.\\n   */\\n  float: right;\\n  vertical-align: top;\\n  margin: 1px;\\n  margin-bottom: 100px;\\n  height: 15px;\\n  width: 15px;\\n  background-repeat: no-repeat;\\n  background-position: center center;\\n  cursor: pointer;\\n}\\n.slick-header-button-hidden {\\n  width: 0;\\n  margin-right: -8px;\\n  transition: 0.2s width;\\n}\\n.slick-header-column:hover > .slick-header-button {\\n  width: 15px;\\n}\\n.slick-header-menubutton {\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  cursor: pointer;\\n  display: none;\\n  position: absolute;\\n  height: 35px;\\n  border: 1px solid #BFBDBD;\\n  border-width: 0px;\\n  padding: 0px;\\n  color: #4a4a4a;\\n  bottom: 0;\\n  right: 3px;\\n  top: 0;\\n  width: 14px;\\n}\\n.slick-header-menubutton:before {\\n  display: inline-block;\\n  content: \\\"\\\";\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 14px;\\n  font-weight: normal;\\n  width: 14px;\\n}\\n.slick-header-column .slick-header-menubutton {\\n  display: none;\\n}\\n.slick-header-column:hover .slick-header-menubutton {\\n  display: inline-block;\\n}\\n.slick-header-menu {\\n  position: absolute;\\n  margin: 0;\\n  background: none repeat scroll 0 0 #ffffff;\\n  border: 1px solid #BFBDBD;\\n  border-radius: 2px;\\n  min-width: 175px;\\n  padding: 6px;\\n  z-index: 100000;\\n  cursor: default;\\n  display: inline-block;\\n}\\n.slick-header-menu .filter {\\n  border: 1px solid #BFBDBD;\\n  font-size: 8pt;\\n  height: 400px;\\n  margin-top: 6px;\\n  overflow: scroll;\\n  padding: 4px;\\n  white-space: nowrap;\\n  width: 200px;\\n}\\n.slick-header-menu .textfilter > label {\\n  display: inline-block;\\n  margin-left: 5px;\\n  margin-right: 10px;\\n}\\n.slick-header-menu .textfilter > input[type=text] {\\n  width: 70%;\\n}\\n.slick-header-menuitem {\\n  cursor: pointer;\\n  display: block;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-header-menuitem:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-header-menuitem.slick-header-menuitem-divider {\\n  cursor: default;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 3px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-header-menuitem.slick-header-menuitem-divider:hover {\\n  border: none;\\n  background-color: silver;\\n}\\n.slick-header-menuitem-divider.slick-header-menuitem:hover {\\n  background-color: #e7e7e7;\\n}\\n.slick-header-menuicon {\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  display: inline-block;\\n  color: #000000;\\n  font-size: 14px;\\n  font-weight: normal;\\n  line-height: 14px;\\n  height: 16px;\\n  margin-right: 4px;\\n  vertical-align: middle;\\n  width: 16px;\\n  /* Font Awesome sorting icons are not aligned in middle, let's align them ourselves */\\n}\\n.slick-header-menuicon.fa-sort-asc {\\n  transform: translateY(3px);\\n}\\n.slick-header-menuicon.fa-sort-desc {\\n  transform: translateY(-2px);\\n}\\n.slick-header-menucontent {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n/* Disabled */\\n.slick-header-menuitem-disabled {\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n  cursor: inherit;\\n}\\n.slick-header-menuitem-disabled .slick-header-menuicon, .slick-header-menuitem-disabled .slick-header-menucontent {\\n  color: silver;\\n}\\n.slick-header-menuitem-hidden {\\n  display: none;\\n}\\n.slick-cell.cell-reorder:before {\\n  display: inline-block;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 14px;\\n  content: \\\"\\\";\\n  width: 14px;\\n}\\n.slick-cell.cell-reorder {\\n  cursor: move;\\n}\\n.slick-headerrow-column,\\n.slick-column-name,\\n.slick-cell-checkboxsel {\\n  text-align: center;\\n}\\n.slick-headerrow-column #filter-checkbox-selectall-container,\\n.slick-column-name #filter-checkbox-selectall-container,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  height: 100%;\\n}\\n.slick-headerrow-column input[type=checkbox],\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox],\\n.slick-column-name input[type=checkbox],\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox],\\n.slick-cell-checkboxsel input[type=checkbox],\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] {\\n  display: none;\\n  /* to hide the checkbox itself */\\n}\\n.slick-headerrow-column input[type=checkbox],\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox] + label,\\n.slick-column-name input[type=checkbox],\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox] + label,\\n.slick-cell-checkboxsel input[type=checkbox],\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] + label {\\n  margin: 0;\\n}\\n.slick-headerrow-column input[type=checkbox] + label:before,\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox] + label:before,\\n.slick-column-name input[type=checkbox] + label:before,\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox] + label:before,\\n.slick-cell-checkboxsel input[type=checkbox] + label:before,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] + label:before {\\n  cursor: pointer;\\n  content: \\\"\\\";\\n  background-color: inherit;\\n  color: #31708F;\\n  display: inline-block;\\n  font-weight: bold;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(14px - 1px);\\n  opacity: 0.15;\\n  /* unchecked icon */\\n  height: 14px;\\n  width: 14px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0;\\n}\\n.slick-headerrow-column input[type=checkbox] + label:hover:before,\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox] + label:hover:before,\\n.slick-column-name input[type=checkbox] + label:hover:before,\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox] + label:hover:before,\\n.slick-cell-checkboxsel input[type=checkbox] + label:hover:before,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] + label:hover:before {\\n  opacity: 0.35;\\n}\\n.slick-headerrow-column input[type=checkbox]:checked + label:before,\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox]:checked + label:before,\\n.slick-column-name input[type=checkbox]:checked + label:before,\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox]:checked + label:before,\\n.slick-cell-checkboxsel input[type=checkbox]:checked + label:before,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox]:checked + label:before {\\n  content: \\\"\\\";\\n  color: #31708F;\\n  opacity: 1;\\n  /* checked icon */\\n  height: 14px;\\n  width: 14px;\\n  border-radius: none;\\n  border-radius: none;\\n}\\n.slick-group .slick-cell-checkboxsel {\\n  text-align: left;\\n}\\n.search-filter :focus {\\n  outline-color: #73b3e5;\\n}\\n.ms-choice {\\n  border: 1px solid #ccc;\\n  background-color: transparent;\\n  font-size: 14px;\\n}\\n.ms-choice div:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 16px;\\n}\\n.ms-choice div.open:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 16px;\\n}\\n.ms-choice span {\\n  font-size: 12px;\\n  font-family: \\\"Helvetica Neue\\\", Helvetica, Arial;\\n}\\n.ms-choice .placeholder {\\n  font-family: \\\"Segoe UI Symbol\\\";\\n  font-size: 14px;\\n  color: #c9c9c9 !important;\\n}\\n.ms-filter.search-filter {\\n  width: 100% !important;\\n}\\n.ms-drop {\\n  max-width: 250px;\\n  border: 1px solid #bbb;\\n  z-index: 9999;\\n}\\n.ms-drop input[type=checkbox],\\n.ms-drop input[type=radio] {\\n  /* make input checkbox invisible but don't hide it since multiple-select uses hide for something else */\\n  opacity: 0;\\n  width: 0;\\n}\\n.ms-drop input[type=checkbox] + span:before,\\n.ms-drop input[type=radio] + span:before {\\n  cursor: pointer;\\n  color: #31708F;\\n  content: \\\"\\\";\\n  display: inline-block;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 16px;\\n  font-weight: normal;\\n  height: 14px;\\n  width: 20px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0;\\n  opacity: 0.6;\\n}\\n.ms-drop input[type=checkbox]:checked + span:before,\\n.ms-drop input[type=radio]:checked + span:before {\\n  content: \\\"\\\";\\n  opacity: 1;\\n  height: 14px;\\n  width: 20px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0;\\n}\\n.ms-drop input[type=radio] + span:before {\\n  content: \\\"\\\";\\n  height: 14px;\\n  width: 20px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0;\\n}\\n.ms-drop input[type=radio]:checked + span:before {\\n  content: \\\"\\\";\\n  color: #31708F;\\n  height: 14px;\\n  width: 20px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0;\\n}\\n.ms-drop label {\\n  margin-bottom: 5px;\\n}\\n.ms-drop label span {\\n  cursor: pointer;\\n  margin-left: 4px;\\n  position: relative;\\n  top: 1px;\\n}\\n.ms-drop label:hover {\\n  cursor: pointer;\\n  background-color: #eff5fc;\\n}\\n.ms-drop .ms-select-all {\\n  border-bottom: 1px solid #ddd;\\n}\\n.ms-drop .ms-select-all label {\\n  display: inline-block;\\n  font-weight: normal;\\n  padding: 5px 8px;\\n  color: #2a617c;\\n}\\n.ms-drop .ms-select-all label:hover {\\n  color: #245269;\\n}\\n.ms-drop .ms-ok-button {\\n  cursor: pointer;\\n  display: block;\\n  width: 100%;\\n  height: 26px;\\n  padding: 0;\\n  border: 1px solid #ccc;\\n  text-align: center;\\n  color: #31708F;\\n  font-weight: 600;\\n  border-bottom-left-radius: 4px;\\n  border-bottom-right-radius: 4px;\\n  background-color: #fff;\\n}\\n.ms-drop .ms-ok-button:hover {\\n  background-color: #e2edfa;\\n  color: #2a617c;\\n}\\n.ms-drop .ms-search:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 16px;\\n  right: 8px;\\n  position: absolute;\\n}\\n.search-filter .operator.input-group-addon {\\n  margin: 0;\\n  padding: 0;\\n  min-width: 25px;\\n  border: none;\\n}\\n.search-filter .operator.input-group-addon .form-control {\\n  border-radius: 4px 0 0 4px;\\n  padding: 0 0 0 2px !important;\\n  font-size: 13px;\\n  color: #333333;\\n  font-weight: bold;\\n  background-color: #ffffff;\\n}\\n.search-filter .operator.input-group-addon select {\\n  font-family: Consolas, \\\"Lucida Console\\\";\\n  font-size: 14px !important;\\n  border: 1px solid #387fa2;\\n  width: 25px;\\n}\\n.search-filter .operator.input-group-addon select.form-control {\\n  cursor: pointer;\\n  -moz-appearance: none;\\n  -webkit-appearance: none;\\n}\\n.search-filter .operator.input-group-addon select.form-control:-ms-expand {\\n  display: none;\\n}\\n.search-filter .operator.input-group-addon select.form-control .empty {\\n  color: #c0c0c0;\\n}\\n.search-filter .operator-char3.input-group-addon {\\n  min-width: 30px;\\n}\\ninput.search-filter {\\n  font-family: \\\"Segoe UI Symbol\\\";\\n}\\n.search-filter input {\\n  font-family: \\\"Segoe UI Symbol\\\";\\n}\\n.search-filter input.compound-input {\\n  border-radius: 0 4px 4px 0 !important;\\n  border-left: none;\\n}\\n.search-filter input.compound-input::-moz-placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter input.compound-input::placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter input.compound-slider {\\n  border-left: none !important;\\n}\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column .input-group-prepend + .flatpickr input.compound-input {\\n  border-top-left-radius: 0;\\n  border-bottom-left-radius: 0;\\n}\\n.search-filter .flatpickr input.form-control {\\n  border-left: none;\\n}\\n.search-filter .flatpickr input.form-control::-moz-placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter .flatpickr input.form-control::placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter.flatpickr,\\n.search-filter .flatpickr {\\n  flex: 1;\\n  cursor: pointer;\\n}\\n.search-filter.flatpickr input.flatpickr.form-control,\\n.search-filter.flatpickr .flatpickr-input.form-control,\\n.search-filter .flatpickr input.flatpickr.form-control,\\n.search-filter .flatpickr .flatpickr-input.form-control {\\n  background-color: #ffffff;\\n  font-family: \\\"Segoe UI Symbol\\\";\\n  font-size: 14px;\\n  border-radius: 0 4px 4px 0;\\n  width: 100%;\\n}\\n.search-filter.flatpickr input.flatpickr.form-control[readonly],\\n.search-filter.flatpickr .flatpickr-input.form-control[readonly],\\n.search-filter .flatpickr input.flatpickr.form-control[readonly],\\n.search-filter .flatpickr .flatpickr-input.form-control[readonly] {\\n  background-color: #ffffff;\\n}\\n.search-filter.flatpickr .form-control[readonly],\\n.search-filter.flatpickr .flatpickr.form-control[readonly],\\n.search-filter .flatpickr .form-control[readonly],\\n.search-filter .flatpickr .flatpickr.form-control[readonly] {\\n  cursor: pointer;\\n  background-color: #ffffff;\\n}\\ninput.flatpickr-input.form-control,\\ninput.flatpickr.form-control {\\n  cursor: pointer;\\n  font-family: \\\"Segoe UI Symbol\\\";\\n  font-size: 14px;\\n  border-radius: 4px;\\n}\\ninput.flatpickr-input.form-control[readonly],\\ninput.flatpickr.form-control[readonly] {\\n  background-color: #ffffff;\\n}\\n.slick-preheader-panel .ui-droppable, .slick-preheader-panel .ui-droppable-hover {\\n  padding: 5px 10px;\\n  height: 35px;\\n  border: 1px solid #e0e0e0 !important;\\n  width: calc(100% - 25px) !important;\\n  border-radius: 4px;\\n  background-color: #ffffff;\\n}\\n.slick-preheader-panel .ui-droppable .slick-placeholder, .slick-preheader-panel .ui-droppable-hover .slick-placeholder {\\n  font-style: italic;\\n  color: #616161;\\n}\\n.slick-preheader-panel .ui-droppable .slick-group-toggle-all, .slick-preheader-panel .ui-droppable-hover .slick-group-toggle-all {\\n  position: absolute;\\n  cursor: pointer;\\n  font-family: \\\"FontAwesome\\\";\\n  color: #31708F;\\n  display: none !important;\\n  top: 7px;\\n  right: 40px;\\n}\\n.slick-preheader-panel .ui-droppable .slick-group-toggle-all.expanded:before, .slick-preheader-panel .ui-droppable-hover .slick-group-toggle-all.expanded:before {\\n  content: \\\"\\\";\\n}\\n.slick-preheader-panel .ui-droppable .slick-group-toggle-all.collapsed:before, .slick-preheader-panel .ui-droppable-hover .slick-group-toggle-all.collapsed:before {\\n  content: \\\"\\\";\\n}\\n.slick-preheader-panel .ui-droppable .slick-dropped-grouping, .slick-preheader-panel .ui-droppable-hover .slick-dropped-grouping {\\n  display: inline-block;\\n  vertical-align: middle;\\n  cursor: move;\\n}\\n.slick-preheader-panel .ui-droppable .slick-groupby-remove, .slick-preheader-panel .ui-droppable-hover .slick-groupby-remove {\\n  cursor: pointer;\\n  display: inline-flex;\\n  color: pink;\\n  font-size: 16px;\\n  padding-left: 5px;\\n  padding-right: 7px;\\n  vertical-align: baseline;\\n}\\n.slick-preheader-panel .ui-droppable .slick-groupby-remove:hover, .slick-preheader-panel .ui-droppable-hover .slick-groupby-remove:hover {\\n  color: red;\\n}\\n.slick-preheader-panel .ui-droppable-active {\\n  background-color: #fafafa;\\n}\\n.slick-preheader-panel .ui-droppable-hover {\\n  background-color: #ededed;\\n}\\n.slick-header .slick-header-columns .slick-column-groupable {\\n  display: inline-block;\\n  font-weight: normal;\\n  color: #707070;\\n  width: 9px;\\n  height: 9px;\\n  margin-left: 4px;\\n}\\n.ui-widget.ui-widget-content {\\n  border: 0;\\n}\\ninput.slider-editor-input[type=range],\\ninput.slider-filter-input[type=range] {\\n  /*removes default webkit styles*/\\n  -webkit-appearance: none;\\n  height: 27px;\\n  flex: 1;\\n  padding: 0 6px;\\n  /* change runnable track color while in focus on all browsers */\\n  /* WebKit specific (Opera/Chrome/Safari) */\\n  /* Mozilla Firefox specific */\\n  /*fix for FF unable to apply focus style bug */\\n  border: 1px solid #ccc;\\n  /*hide the outline behind the border*/\\n  /* Microsoft IE specific */\\n}\\ninput.slider-editor-input[type=range]:focus,\\ninput.slider-filter-input[type=range]:focus {\\n  outline: none;\\n}\\ninput.slider-editor-input[type=range]:focus::-webkit-slider-runnable-track,\\ninput.slider-filter-input[type=range]:focus::-webkit-slider-runnable-track {\\n  background: #ddd;\\n}\\ninput.slider-editor-input[type=range]:focus::-moz-range-track,\\ninput.slider-filter-input[type=range]:focus::-moz-range-track {\\n  background: #ddd;\\n}\\ninput.slider-editor-input[type=range]:focus::-ms-fill-lower,\\ninput.slider-filter-input[type=range]:focus::-ms-fill-lower {\\n  background: #aaa;\\n}\\ninput.slider-editor-input[type=range]:focus::-ms-fill-upper,\\ninput.slider-filter-input[type=range]:focus::-ms-fill-upper {\\n  background: #ddd;\\n}\\ninput.slider-editor-input[type=range]::-webkit-slider-runnable-track,\\ninput.slider-filter-input[type=range]::-webkit-slider-runnable-track {\\n  height: 4px;\\n  background: #eee;\\n  border: none;\\n  border-radius: 3px;\\n}\\ninput.slider-editor-input[type=range]::-webkit-slider-thumb,\\ninput.slider-filter-input[type=range]::-webkit-slider-thumb {\\n  cursor: pointer;\\n  -webkit-appearance: none;\\n  border: none;\\n  height: 14px;\\n  width: 14px;\\n  border-radius: 50%;\\n  border: 1px solid #9bbc9f;\\n  background: #c9dbcb;\\n  margin-top: -4px;\\n}\\ninput.slider-editor-input[type=range]::-moz-range-track,\\ninput.slider-filter-input[type=range]::-moz-range-track {\\n  height: 4px;\\n  background: #eee;\\n  border: none;\\n  border-radius: 3px;\\n}\\ninput.slider-editor-input[type=range]::-moz-range-thumb,\\ninput.slider-filter-input[type=range]::-moz-range-thumb {\\n  border: none;\\n  cursor: pointer;\\n  height: calc(14px - 2px);\\n  width: calc(14px - 2px);\\n  border-radius: 50%;\\n  border: 1px solid #9bbc9f;\\n  background: #c9dbcb;\\n}\\ninput.slider-editor-input[type=range]:-moz-focusring,\\ninput.slider-filter-input[type=range]:-moz-focusring {\\n  outline: 1px solid white;\\n  outline-offset: -1px;\\n}\\ninput.slider-editor-input[type=range]::-ms-track,\\ninput.slider-filter-input[type=range]::-ms-track {\\n  height: 4px;\\n  /*remove bg colour from the track, we'll use ms-fill-lower and ms-fill-upper instead */\\n  background: transparent;\\n  /*leave room for the larger thumb to overflow with a transparent border */\\n  border-color: transparent;\\n  border-width: 6px 0;\\n  /*remove default tick marks*/\\n  color: transparent;\\n}\\ninput.slider-editor-input[type=range]::-ms-fill-lower,\\ninput.slider-filter-input[type=range]::-ms-fill-lower {\\n  background: #ddd;\\n  border-radius: 10px;\\n}\\ninput.slider-editor-input[type=range]::-ms-fill-upper,\\ninput.slider-filter-input[type=range]::-ms-fill-upper {\\n  background: #eee;\\n  border-radius: 10px;\\n}\\ninput.slider-editor-input[type=range]::-ms-thumb,\\ninput.slider-filter-input[type=range]::-ms-thumb {\\n  border: none;\\n  cursor: pointer;\\n  height: calc(14px - 2px);\\n  width: calc(14px - 2px);\\n  border-radius: 50%;\\n  border: 1px solid #9bbc9f;\\n  background: #c9dbcb;\\n  margin-top: 1px;\\n}\\ninput.slider-editor-input[type=range]::-ms-tooltip,\\ninput.slider-filter-input[type=range]::-ms-tooltip {\\n  display: none;\\n}\\n.search-filter {\\n  height: 27px;\\n}\\n.search-filter::-moz-placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter::placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter .slider-value {\\n  padding: 0;\\n  height: 100%;\\n}\\n.search-filter .slider-value .input-group-text {\\n  padding: 4px 8px;\\n  font-size: calc(14 - 1px);\\n}\\ninput.slider-filter-input[type=range] {\\n  padding: 0 6px;\\n  height: 27px;\\n}\\n/* Slider Editor */\\ninput.slider-editor-input[type=range] {\\n  padding: 0 6px;\\n  height: 24px;\\n}\\n.slider-editor .slider-value {\\n  padding: 0;\\n  height: 24px;\\n}\\n.slider-editor .slider-value .input-group-text {\\n  padding: 4px 6px;\\n  font-size: calc(14 - 1px);\\n  height: 24px;\\n}\\n.slider-range-container {\\n  height: 27px;\\n  padding: 0 12px;\\n}\\n.slider-range-container .ui-slider {\\n  position: relative;\\n}\\n.slider-range-container .ui-slider .ui-slider-handle {\\n  position: absolute;\\n  top: -5px;\\n  border-radius: 50%;\\n  cursor: pointer;\\n  border: 1px solid #9bbc9f;\\n  height: 14px;\\n  width: 14px;\\n  background-color: #c9dbcb;\\n}\\n.slider-range-container .ui-slider .ui-slider-handle:focus {\\n  outline: none;\\n}\\n.slider-range-container .ui-slider-horizontal {\\n  top: 45%;\\n  height: 4px;\\n  background-color: #eee;\\n}\\n.slider-range-container .input-group-text {\\n  border: 0;\\n}\\n.slider-range-container.slider-values {\\n  padding: 0;\\n}\\n.slider-range-container.slider-values .ui-slider-horizontal {\\n  flex: 1;\\n  width: calc(98% - 16px);\\n  top: 12px;\\n  margin: 0 10px;\\n}\\n.slider-range-container.slider-values .slider-range-value {\\n  padding: 0;\\n  border: 0;\\n  height: 100%;\\n}\\n.slider-range-container.slider-values .slider-range-value .input-group-text {\\n  padding: 4px 8px;\\n  font-size: calc(14 - 1px);\\n}\\n.slider-range-container.slider-values .input-group-prepend.slider-range-value {\\n  border-right: 1px solid #ccc;\\n}\\n.slider-range-container.slider-values .input-group-append.slider-range-value {\\n  border-left: 1px solid #ccc;\\n}\\n.slick-row .detail-view-toggle {\\n  display: inline-block;\\n  cursor: pointer;\\n}\\n.slick-row .detail-view-toggle.expand {\\n  display: inline-block;\\n  color: #71b0ce;\\n}\\n.slick-row .detail-view-toggle.expand:hover {\\n  color: #4b9ac1;\\n}\\n.slick-row .detail-view-toggle.expand:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(14px + 2px);\\n  content: \\\"\\\";\\n}\\n.slick-row .detail-view-toggle.collapse {\\n  display: inline-block;\\n  color: #31708F;\\n}\\n.slick-row .detail-view-toggle.collapse:hover {\\n  color: #245269;\\n}\\n.slick-row .detail-view-toggle.collapse:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(14px + 2px);\\n  content: \\\"\\\";\\n}\\n.slick-row .dynamic-cell-detail {\\n  position: absolute;\\n  width: 100%;\\n  overflow: auto;\\n  border: 1px solid #c0c0c0;\\n  background-color: #f7f7f7;\\n  padding: 10px;\\n  z-index: 1000;\\n}\\n.slick-row .dynamic-cell-detail :first-child {\\n  vertical-align: middle;\\n  line-height: 13px;\\n}\\n/* pagination/pagination variables */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-custom-footer {\\n  color: #808080;\\n  padding: 5px 0;\\n  background-color: transparent;\\n  font-size: 14px;\\n  font-style: italic;\\n  font-weight: normal;\\n  height: 30px;\\n}\\n.slick-custom-footer .left-footer {\\n  color: #808080;\\n  font-style: italic;\\n  font-weight: normal;\\n  text-align: left;\\n  padding: 0px;\\n  width: 50%;\\n  float: left;\\n}\\n.slick-custom-footer .right-footer.metrics {\\n  color: #808080;\\n  text-align: right;\\n  font-style: italic;\\n  font-weight: normal;\\n  text-align: right;\\n  padding: 0px;\\n  width: 50%;\\n  float: right;\\n}\\n.slick-custom-footer .right-footer.metrics .separator {\\n  margin: 2px;\\n}\\n.slick-empty-data-warning {\\n  position: relative;\\n  color: #000000;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: calc(14px + 2px);\\n  font-style: italic;\\n  line-height: 18px;\\n  margin: 0px;\\n  padding: 8px;\\n  z-index: 10;\\n}\\n/* Pagination styling */\\n.slick-pagination {\\n  border-top: 0 none;\\n  border-right: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  width: 100%;\\n  height: 40px;\\n  padding-top: 4px;\\n  vertical-align: middle;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: calc(14px - 1px);\\n  font-weight: 400;\\n  color: #808080;\\n}\\n.slick-pagination .slick-pagination-status {\\n  display: inline-block;\\n  padding: 6px;\\n}\\n.slick-pagination .ui-icon-container {\\n  display: inline-block;\\n  border-color: #ddd;\\n}\\n.slick-pagination .slick-pagination-nav {\\n  display: inline-block;\\n  padding: 2px;\\n  height: 34px;\\n}\\n.slick-pagination .slick-pagination-nav nav {\\n  display: inline-block;\\n}\\n.slick-pagination .slick-pagination-nav .slick-page-number {\\n  vertical-align: top;\\n  margin-top: 6px;\\n  display: inline-block;\\n  padding: 0 5px;\\n}\\n.slick-pagination .slick-pagination-nav .slick-page-number input {\\n  background-color: #fafbed;\\n  height: 26px;\\n  width: 50px;\\n  padding: 2px;\\n  border-radius: 4px;\\n  display: inline-block;\\n}\\n.slick-pagination .slick-pagination-nav .pagination {\\n  margin: 0;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-link {\\n  font-size: calc(14px - 1px);\\n  border: 1px solid #acacac;\\n  height: 32px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item {\\n  cursor: pointer;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item a[class*=icon-seek-] {\\n  border-color: 1px solid #acacac;\\n  color: #31708F;\\n  text-decoration: none;\\n  font-family: \\\"FontAwesome\\\";\\n  line-height: calc(14px + 4px);\\n  -webkit-text-stroke: 0.4px;\\n  padding: 6px 12px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item a[class*=icon-seek-]:hover {\\n  background-color: #E6E6E6;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item:first-child a, .slick-pagination .slick-pagination-nav .pagination .page-item:first-child span {\\n  border-top-left-radius: 4px;\\n  border-bottom-left-radius: 4px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item:last-child a, .slick-pagination .slick-pagination-nav .pagination .page-item:last-child span {\\n  border-top-right-radius: 4px;\\n  border-bottom-right-radius: 4px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-first:before {\\n  content: \\\"\\\";\\n  display: block;\\n  width: inherit;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-prev:before {\\n  content: \\\"\\\";\\n  display: block;\\n  width: inherit;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-next:before {\\n  content: \\\"\\\";\\n  display: block;\\n  width: inherit;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-end:before {\\n  content: \\\"\\\";\\n  display: block;\\n  width: inherit;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item.disabled {\\n  cursor: not-allowed;\\n  font-weight: normal;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item.disabled a[class*=icon-seek-] {\\n  color: #b8b8b8;\\n  background-color: #f9f9f9;\\n  border-color: #dedede;\\n}\\n.slick-pagination .slick-pagination-settings {\\n  display: block;\\n  float: right;\\n  padding: 2px;\\n}\\n.slick-pagination .slick-pagination-settings select {\\n  font-size: calc(14px - 2px);\\n  line-height: 1.5;\\n  height: 32px;\\n  width: 60px;\\n  padding: 0 0 2px 2px;\\n  border: 1px solid #acacac;\\n  border-radius: 3px;\\n}\\n.slick-pagination .slick-pagination-settings .slick-pagination-count {\\n  margin-left: 2px;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.full-height {\\n  height: 100%;\\n}\\n.gridPane {\\n  width: 100%;\\n}\\n.grid-header {\\n  border: 1px solid gray;\\n  border-bottom: 0;\\n  border-top: 0;\\n  color: black;\\n  height: 24px;\\n  line-height: 24px;\\n}\\n.grid-header label {\\n  display: inline-block;\\n  font-weight: bold;\\n  margin: auto auto auto 6px;\\n}\\n.grid-header .ui-icon {\\n  margin: 4px 4px auto 6px;\\n  background-color: transparent;\\n  border-color: transparent;\\n}\\n.grid-header .ui-icon.ui-state-hover {\\n  background-color: white;\\n}\\n.grid-header #txtSearch {\\n  margin: 0 4px 0 4px;\\n  padding: 2px 2px;\\n  border-radius: 2px;\\n  border: 1px solid silver;\\n}\\n.options-panel {\\n  border-radius: 6px;\\n  border: 1px solid silver;\\n  background: #f0f0f0;\\n  padding: 4px;\\n  margin-bottom: 20px;\\n  width: 320px;\\n  position: absolute;\\n  top: 0px;\\n  left: 650px;\\n}\\n/* Individual cell styles */\\n.slick-cell.task-name {\\n  font-weight: bold;\\n  text-align: right;\\n}\\n.slick-cell.task-percent {\\n  text-align: right;\\n}\\n.slick-cell.cell-move-handle {\\n  font-weight: bold;\\n  text-align: right;\\n  border-right: solid gray;\\n  background: #efefef;\\n  cursor: move;\\n}\\n.cell-move-handle:hover {\\n  background: #b6b9bd;\\n}\\n.slick-row.selected .cell-move-handle {\\n  background: #D5DC8D;\\n}\\n.slick-row .cell-actions {\\n  text-align: left;\\n}\\n.slick-row.complete {\\n  background-color: #DFD;\\n  color: #555;\\n}\\n.percent-complete-bar {\\n  display: inline-block;\\n  height: 6px;\\n  border-radius: 3px;\\n  background-color: transparent;\\n}\\n/* Slick.Editors.Text, Slick.Editors.Date */\\n.ui-datepicker-trigger {\\n  margin-top: 2px;\\n  padding: 0;\\n  vertical-align: top;\\n}\\n/* Slick.Editors.PercentComplete */\\ninput.editor-percentcomplete {\\n  width: 100%;\\n  height: 100%;\\n  border: 0;\\n  margin: 0;\\n  background: transparent;\\n  outline: 0;\\n  padding: 0;\\n  float: left;\\n}\\n.editor-percentcomplete-picker {\\n  position: relative;\\n  display: inline-block;\\n  width: 16px;\\n  height: 100%;\\n  overflow: visible;\\n  z-index: 1000;\\n  float: right;\\n}\\n.editor-percentcomplete-helper {\\n  border: 0 solid gray;\\n  position: absolute;\\n  top: -2px;\\n  left: -9px;\\n  padding-left: 9px;\\n  width: 120px;\\n  height: 140px;\\n  display: none;\\n  overflow: visible;\\n}\\n.editor-percentcomplete-wrapper {\\n  background: beige;\\n  padding: 20px 8px;\\n  width: 100%;\\n  height: 98px;\\n  border: 1px solid gray;\\n  border-left: 0;\\n}\\n.editor-percentcomplete-buttons {\\n  float: right;\\n}\\n.editor-percentcomplete-buttons button {\\n  width: 80px;\\n}\\n.editor-percentcomplete-slider {\\n  float: left;\\n}\\n.editor-percentcomplete-picker:hover .editor-percentcomplete-helper {\\n  display: block;\\n}\\n.editor-percentcomplete-helper:hover {\\n  display: block;\\n}\\n/* Slick.Editors.YesNoSelect */\\nselect.editor-yesno {\\n  width: 100%;\\n  margin: 0;\\n  vertical-align: middle;\\n}\\n/* Slick.Editors.Checkbox */\\ninput.editor-checkbox {\\n  margin: 0;\\n  height: 100%;\\n  padding: 0;\\n  border: 0;\\n}\\n/*!\\n * SlickGrid custom styling for Bootstrap (https://github.com/ghiscoding/aurelia-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/aurelia-slickgrid/blob/master/LICENSE)\\n * @author: Ghislain B. (ghiscoding)\\n */\\n/*!\\n\\n/* Mixins for SlickGrid */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n@-webkit-keyframes highlight-start {\\n  to {\\n    background: #c8ddea;\\n  }\\n  from {\\n    background: none;\\n  }\\n}\\n@keyframes highlight-start {\\n  to {\\n    background: #c8ddea;\\n  }\\n  from {\\n    background: none;\\n  }\\n}\\n@-webkit-keyframes highlight-end {\\n  from {\\n    background: 0.3s ease 1;\\n  }\\n  to {\\n    background: none;\\n  }\\n}\\n@keyframes highlight-end {\\n  from {\\n    background: 0.3s ease 1;\\n  }\\n  to {\\n    background: none;\\n  }\\n}\\n.slickgrid-container {\\n  border-top: 0 none;\\n  border-bottom: 1px solid #dddddd;\\n  border-left: 0 none;\\n  border-right: 0 none;\\n  position: relative;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  /** Header Grouping **/\\n  /** Frozen/Pinned styling */\\n}\\n.slickgrid-container input[type=checkbox] {\\n  vertical-align: baseline;\\n  margin: 0;\\n}\\n.slickgrid-container .slick-viewport {\\n  border-top: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  border-right: 0 none;\\n}\\n.slickgrid-container .grid-canvas .slick-row {\\n  position: absolute;\\n  width: 100%;\\n  color: #000000;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-weight: normal;\\n}\\n.slickgrid-container .grid-canvas .slick-row:hover {\\n  background-color: #eff5fc;\\n  box-shadow: none;\\n  z-index: 5;\\n}\\n.slickgrid-container .grid-canvas .slick-row.active {\\n  padding: 5px 6px;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight {\\n  background-color: #c8ddea;\\n  -webkit-animation: highlight-start 1.5s ease 1;\\n          animation: highlight-start 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight.odd {\\n  background-color: #c8ddea;\\n  -webkit-animation: highlight-start 1.5s ease 1;\\n          animation: highlight-start 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight.odd .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight-end {\\n  background-color: #c8ddea;\\n  -webkit-animation: highlight-end 1.5s ease 1;\\n          animation: highlight-end 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight-end.odd {\\n  background-color: #c8ddea;\\n  -webkit-animation: highlight-end 1.5s ease 1;\\n          animation: highlight-end 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlighter {\\n  background: orange !important;\\n  transition-property: background;\\n  transition-duration: 3s;\\n  transition-timing-function: ease-in;\\n}\\n.slickgrid-container .grid-canvas .slick-row.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd {\\n  background-color: #f7f7f7;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd:hover {\\n  background-color: #eff5fc;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell {\\n  background: inherit;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.selected {\\n  background-color: #dae8f1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell {\\n  background: inherit;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.selected {\\n  background-color: #dae8f1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.slick-group-totals {\\n  color: gray;\\n  background: #fff;\\n}\\n.slickgrid-container .grid-canvas .slick-row.slick-group-totals .slick-cell {\\n  font-size: 14px;\\n}\\n.slickgrid-container .grid-canvas .slick-cell, .slickgrid-container .grid-canvas .slick-headerrow-column {\\n  border-top: 1px solid #dddddd;\\n  border-bottom: 1px transparent;\\n  border-left: 1px transparent;\\n  border-right: 1px transparent;\\n  box-shadow: inherit;\\n}\\n.slickgrid-container .grid-canvas .even {\\n  background-color: #ffffff;\\n}\\n.slickgrid-container .grid-canvas .slick-cell {\\n  padding: 5px 6px;\\n  font-size: 14px;\\n}\\n.slickgrid-container .grid-canvas .slick-cell td {\\n  font-size: 14px;\\n}\\nbody .slickgrid-container .grid-canvas .slick-cell {\\n  line-height: 20px;\\n}\\n.slickgrid-container .grid-canvas .slick-cell a, .slickgrid-container .grid-canvas .slick-cell a:visited, .slickgrid-container .grid-canvas .slick-cell .ui-widget-content a, .slickgrid-container .grid-canvas .slick-cell .ui-widget-content a:visited {\\n  color: #08c;\\n}\\n.slickgrid-container .grid-canvas .slick-cell a:hover, .slickgrid-container .grid-canvas .slick-cell .ui-widget-content a:hover {\\n  color: darker(#08c, 15%);\\n  border-bottom: none;\\n}\\n.slickgrid-container .grid-canvas .slick-cell table {\\n  height: 100%;\\n  padding: 0;\\n  background: none;\\n}\\n.slickgrid-container .grid-canvas .slick-cell td {\\n  padding: 0;\\n  vertical-align: middle;\\n  text-align: left;\\n}\\n.slickgrid-container .grid-canvas .slick-cell.selected {\\n  background-color: #dae8f1;\\n}\\n.slickgrid-container .grid-canvas .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-cell select:not([multiple]).form-control {\\n  height: 100%;\\n  padding: 0;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-title {\\n  height: 20px;\\n  line-height: 20px;\\n  vertical-align: none;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-toggle {\\n  color: #31708F;\\n  font-weight: bold;\\n  width: 14px;\\n  height: 20px;\\n  margin-right: 2px;\\n  cursor: pointer;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-toggle.expanded:before {\\n  display: inline-block;\\n  content: \\\"\\\";\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(14px + 4px);\\n  width: 14px;\\n  vertical-align: middle;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-toggle.collapsed:before {\\n  display: inline-block;\\n  content: \\\"\\\";\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(14px + 4px);\\n  width: 14px;\\n  vertical-align: middle;\\n}\\n.slickgrid-container .slick-header {\\n  border-top: 0 none;\\n  border-right: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  width: 100%;\\n  box-shadow: none !important;\\n}\\n.slickgrid-container .slick-headerrow {\\n  border-bottom: 0 none;\\n  border-top: 0 none;\\n  border-left: 0 none;\\n  border-right: 0 none;\\n}\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column {\\n  border: none;\\n  padding: 4px;\\n  background: #ffffff;\\n}\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column input,\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column select,\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column textarea {\\n  margin-right: 0;\\n  padding: 0 6px;\\n  width: none;\\n  height: 27px;\\n  box-sizing: border-box;\\n}\\n.slickgrid-container .slick-header-columns {\\n  background: none;\\n  background-color: #ffffff;\\n  width: calc(100% - 16px);\\n}\\n.slickgrid-container .slick-header-columns .slick-header-sortable .slick-column-name {\\n  margin-left: 0;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column {\\n  height: calc(17px * 2);\\n  line-height: 14px;\\n  margin: 0;\\n  border-top: 0 none;\\n  border-right: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  white-space: normal;\\n  /* like TH  */\\n  background: #ffffff;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  color: #000000;\\n  font-size: 14px;\\n  font-weight: bold;\\n  /* when sorting is possible and there's not yet a sort applied on the column\\n   we could display the sort ascending icon (with an opacity) as a hint */\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default {\\n  padding: 5px 6px;\\n  font-size: 14px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default td {\\n  font-size: 14px;\\n}\\nbody .slickgrid-container .slick-header-columns .slick-header-column.ui-state-default {\\n  line-height: 20px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column a, .slickgrid-container .slick-header-columns .slick-header-column a:visited {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column a:hover {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default {\\n  /* like TH  */\\n  background: #ffffff;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  color: #000000;\\n  font-size: 14px;\\n  font-weight: bold;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default a, .slickgrid-container .slick-header-columns .slick-header-column.ui-state-default a:visited {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default a:hover {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.slick-header-column-sorted {\\n  font-style: normal;\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column:hover {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-sortable-handle.ui-state-hover:not(.slick-header-column-sorted) .slick-sort-indicator:before {\\n  content: \\\"\\\";\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 14px;\\n  opacity: 0.5;\\n  display: inline-block;\\n  width: 14px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator {\\n  background: none;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 14px;\\n  position: absolute;\\n  display: inline-block;\\n  color: #31708F;\\n  width: 8px;\\n  height: 5px;\\n  left: auto;\\n  right: 10px;\\n  top: calc((15px * 2) - 15px);\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator-numbered {\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 10px;\\n  position: absolute;\\n  display: inline-block;\\n  color: #31708F;\\n  width: 8px;\\n  left: auto;\\n  right: 0px;\\n  top: calc(13px * 2);\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator-asc:before {\\n  content: \\\"\\\";\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 14px;\\n  opacity: 1;\\n  display: inline-block;\\n  width: 14px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator-desc:before {\\n  content: \\\"\\\";\\n  display: inline-block;\\n  opacity: 1;\\n  font-size: 14px;\\n  width: 14px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-resizable-handle {\\n  width: 7px;\\n  right: 0;\\n  z-index: 1;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-resizable-handle:hover {\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  border-right: 1px solid #d0d0d0;\\n  border-top: 0 none;\\n  width: 7px;\\n  border-radius: 8px;\\n  right: 0;\\n  height: 100%;\\n  top: 0;\\n  opacity: 1;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default {\\n  border-bottom: none;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns {\\n  border-top: none;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns .slick-header-column {\\n  height: 25px;\\n  border-left: none;\\n  border-right: 1px solid lightgrey;\\n  font-size: 18px;\\n  justify-content: left;\\n  display: inline-grid;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns .slick-header-column:first-child {\\n  border-left: none;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns .slick-header-column:last-child {\\n  border-right: none;\\n}\\n.slickgrid-container .slick-row .slick-cell.frozen:last-child,\\n.slickgrid-container .slick-footerrow-column.frozen:last-child {\\n  border-right: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-header-column.frozen:last-child {\\n  border-right: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-pane-left .slick-preheader-panel .slick-header-column.frozen:last-child {\\n  border-right: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-headerrow-column.frozen:last-child {\\n  border-right: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-pane-bottom {\\n  border-top: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-viewport-bottom.slick-viewport-right {\\n  overflow-y: scroll !important;\\n}\\n.slickgrid-container .input-group > :not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback) {\\n  margin-left: 0;\\n}\\n.slickgrid-container .input-group > :not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback).ui-slider-horizontal {\\n  margin-left: 10px;\\n}\\n.slickgrid-container .input-group .input-group-addon .input-group-text {\\n  height: 100%;\\n}\\n.slickgrid-container .input-group .input-group-addon.input-group-append .input-group-text {\\n  margin-left: -1px;\\n  border-top-left-radius: 0;\\n  border-bottom-left-radius: 0;\\n}\\n.slickgrid-container .input-group .input-group-addon.input-group-prepend .input-group-text {\\n  margin-right: -1px;\\n  border-top-right-radius: 0;\\n  border-bottom-right-radius: 0;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.autocomplete-container {\\n  display: flex;\\n}\\n.ui-widget-content {\\n  background: none;\\n}\\n.ui-autocomplete .ui-menu-item {\\n  color: #333333;\\n}\\n.ui-autocomplete .ui-menu-item .ui-state-active {\\n  color: #333333;\\n}\\n.ui-autocomplete .ui-menu-item .ui-state-active:hover {\\n  margin: 0;\\n  border: 0;\\n  color: #333333;\\n}\\n.ui-autocomplete {\\n  background: none;\\n  position: absolute;\\n  z-index: 9999;\\n  padding: 0;\\n  margin-top: 2px;\\n  list-style: none;\\n  background-color: #ffffff;\\n  border: 1px solid rgba(0, 0, 0, 0.15);\\n  border-radius: 4px;\\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\\n  background-clip: padding-box;\\n  max-height: 25vh;\\n  min-height: 75px;\\n  min-width: 50px;\\n  overflow-y: auto;\\n  overflow-x: hidden;\\n  text-overflow: ellipsis;\\n}\\n.ui-autocomplete li div {\\n  display: block;\\n  color: #333333;\\n  padding: 3px 15px;\\n  font-weight: normal;\\n  line-height: 1.42857143;\\n  white-space: nowrap;\\n  list-style-image: none;\\n}\\n/* jquery ui loading spinner */\\n@-webkit-keyframes md-spin {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n@keyframes md-spin {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n.ui-autocomplete-loading + span:after {\\n  -webkit-animation: md-spin 2s infinite linear;\\n          animation: md-spin 2s infinite linear;\\n  display: inline-block;\\n  font-family: \\\"FontAwesome\\\";\\n  color: #4a4a4a;\\n  content: \\\"\\\" !important;\\n  /* important is required to override default jquery-ui styling */\\n  width: inherit;\\n  margin-left: -16px;\\n  line-height: 0px;\\n  vertical-align: inherit;\\n}\\n.ui-state-hover,\\n.ui-state-active,\\n.ui-state-focus {\\n  cursor: pointer;\\n  text-decoration: none;\\n  color: #262626;\\n  background-color: #e2edfa;\\n}\\n.ui-helper-hidden-accessible {\\n  border: 0;\\n  clip: rect(0 0 0 0);\\n  height: 1px;\\n  margin: -1px;\\n  overflow: hidden;\\n  position: absolute;\\n  padding: 0;\\n  width: 1px;\\n}\\n/* autocomplete custom styling */\\n.ui-autocomplete.autocomplete-custom-four-corners {\\n  width: 385px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list {\\n  width: calc(385px - 15px);\\n  padding: 3px 10px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list div {\\n  margin: 0;\\n  padding: 0;\\n  line-height: 16px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-left {\\n  float: left;\\n  height: 32px;\\n  width: 32px;\\n  padding-right: 3px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-left > img {\\n  height: 32px;\\n  width: 32px;\\n  margin-top: 0px;\\n  background-color: #ffffff;\\n  background-clip: content-box;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-bottom-left {\\n  color: #686868;\\n  font-size: calc(12px - 1px);\\n  font-style: italic;\\n  font-weight: normal;\\n  max-width: calc(calc(385px - 15px) - 32px - (10px * 2));\\n  display: inline-block;\\n  /*margin-left: 30px;*/\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-bottom-right {\\n  float: right;\\n  color: #686868;\\n  font-size: calc(12px - 1px);\\n  font-style: italic;\\n  font-weight: normal;\\n  /*margin-left: 30px;*/\\n  text-overflow: ellipsis;\\n  max-width: 250px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-top-left {\\n  color: #313131;\\n  font-style: normal;\\n  font-size: 12px;\\n  font-weight: bold;\\n  max-width: calc(calc(385px - 15px) - 32px - (10px * 2));\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  padding-left: 1px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-top-right {\\n  float: right;\\n  color: #3a85aa;\\n  font-style: normal;\\n  font-size: calc(12px - 1px);\\n  font-weight: bold;\\n  max-width: 100px;\\n}\\n/* autocomplete custom styling */\\n.ui-autocomplete.autocomplete-custom-two-rows {\\n  width: 285px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list {\\n  width: calc(285px - 15px);\\n  padding: 3px 10px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list div {\\n  margin: 0;\\n  padding: 0;\\n  line-height: 16px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-left {\\n  float: left;\\n  height: 32px;\\n  width: 32px;\\n  padding-right: 3px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-left > img {\\n  height: 32px;\\n  margin-top: 0px;\\n  background-color: #ffffff;\\n  background-clip: content-box;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-bottom-left {\\n  color: #686868;\\n  font-size: calc(12px - 1px);\\n  font-style: italic;\\n  font-weight: normal;\\n  max-width: calc(calc(285px - 15px) - 32px - (10px * 2));\\n  /*margin-left: 30px;*/\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-top-left {\\n  color: #313131;\\n  font-style: normal;\\n  font-size: 12px;\\n  font-weight: bold;\\n  max-width: calc(calc(285px - 15px) - 32px - (10px * 2));\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  padding-left: 1px;\\n}\\n.alert {\\n  padding: 8px;\\n}\";","import { Component, Injectable, OnInit, OnDestroy } from '@angular/core';\r\nimport {\r\n  AngularGridInstance,\r\n  Aggregators,\r\n  Column,\r\n  DelimiterType,\r\n  FieldType,\r\n  FileType,\r\n  Filters,\r\n  Formatters,\r\n  GridOption,\r\n  Grouping,\r\n  GroupTotalFormatters,\r\n  SortDirectionNumber,\r\n  Sorters,\r\n} from './../modules/angular-slickgrid';\r\n\r\n@Injectable()\r\n@Component({\r\n  templateUrl: './grid-grouping.component.html'\r\n})\r\nexport class GridGroupingComponent implements OnInit {\r\n  title = 'Example 14: Grouping & Aggregators';\r\n  subTitle = `\r\n  (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Grouping-&-Aggregators\" target=\"_blank\">Wiki docs</a>)\r\n  <ul>\r\n    <li>\r\n    Fully dynamic and interactive multi-level grouping with filtering and aggregates over 50'000 items\r\n    </li>\r\n    <li>Each grouping level can have its own aggregates (over child rows, child groups, or all descendant rows)..</li>\r\n  </ul>\r\n  `;\r\n\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions!: Column[];\r\n  gridOptions!: GridOption;\r\n  dataset!: any[];\r\n  gridObj: any;\r\n  dataviewObj: any;\r\n  processing = false;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'sel', name: '#', field: 'num', width: 40,\r\n        excludeFromExport: true,\r\n        maxWidth: 70,\r\n        resizable: true,\r\n        filterable: true,\r\n        selectable: false,\r\n        focusable: false\r\n      },\r\n      {\r\n        id: 'title', name: 'Title', field: 'title',\r\n        width: 50,\r\n        minWidth: 50,\r\n        cssClass: 'cell-title',\r\n        filterable: true,\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'duration', name: 'Duration', field: 'duration',\r\n        minWidth: 50, width: 60,\r\n        filterable: true,\r\n        filter: { model: Filters.slider, operator: '>=' },\r\n        sortable: true,\r\n        type: FieldType.number,\r\n        groupTotalsFormatter: GroupTotalFormatters.sumTotals,\r\n        params: { groupFormatterPrefix: 'Total: ' }\r\n      },\r\n      {\r\n        id: '%', name: '% Complete', field: 'percentComplete',\r\n        minWidth: 70, width: 90,\r\n        formatter: Formatters.percentCompleteBar,\r\n        filterable: true,\r\n        filter: { model: Filters.compoundSlider },\r\n        sortable: true,\r\n        type: FieldType.number,\r\n        groupTotalsFormatter: GroupTotalFormatters.avgTotalsPercentage,\r\n        params: { groupFormatterPrefix: '<i>Avg</i>: ' }\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start',\r\n        minWidth: 60,\r\n        filterable: true,\r\n        filter: { model: Filters.compoundDate },\r\n        sortable: true,\r\n        type: FieldType.dateIso,\r\n        formatter: Formatters.dateIso,\r\n        exportWithFormatter: true\r\n      },\r\n      {\r\n        id: 'finish', name: 'Finish', field: 'finish',\r\n        minWidth: 60,\r\n        filterable: true,\r\n        filter: { model: Filters.compoundDate },\r\n        sortable: true,\r\n        type: FieldType.dateIso,\r\n        formatter: Formatters.dateIso,\r\n        exportWithFormatter: true\r\n      },\r\n      {\r\n        id: 'cost', name: 'Cost', field: 'cost',\r\n        minWidth: 70,\r\n        width: 100,\r\n        filterable: true,\r\n        filter: { model: Filters.compoundInputNumber },\r\n        type: FieldType.number,\r\n        sortable: true,\r\n        exportWithFormatter: true,\r\n        formatter: Formatters.dollar,\r\n        groupTotalsFormatter: GroupTotalFormatters.sumTotalsDollar,\r\n        params: { groupFormatterPrefix: '<b>Total</b>: ' /*, groupFormatterSuffix: ' USD'*/ }\r\n      },\r\n      {\r\n        id: 'effort-driven', name: 'Effort Driven',\r\n        minWidth: 20, width: 80, maxWidth: 80,\r\n        cssClass: 'cell-effort-driven',\r\n        field: 'effortDriven',\r\n        formatter: Formatters.checkmark,\r\n        sortable: true,\r\n        filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\r\n          model: Filters.singleSelect,\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableExcelExport: true,\r\n      enableFiltering: true,\r\n      // you could debounce/throttle the input text filter if you have lots of data\r\n      // filterTypingDebounce: 250,\r\n      enableGrouping: true,\r\n      enableExport: true,\r\n      exportOptions: {\r\n        sanitizeDataExport: true\r\n      },\r\n      excelExportOptions: {\r\n        sanitizeDataExport: true\r\n      },\r\n      gridMenu: {\r\n        hideExportTextDelimitedCommand: false\r\n      }\r\n    };\r\n\r\n    this.loadData(500);\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n    this.gridObj = angularGrid.slickGrid;\r\n    this.dataviewObj = angularGrid.dataView;\r\n  }\r\n\r\n  loadData(rowCount: number) {\r\n    // mock a dataset\r\n    this.dataset = [];\r\n    for (let i = 0; i < rowCount; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n\r\n      this.dataset[i] = {\r\n        id: 'id_' + i,\r\n        num: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 100) + '',\r\n        percentComplete: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\r\n        cost: (i % 33 === 0) ? null : Math.round(Math.random() * 10000) / 100,\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n  }\r\n\r\n  clearGrouping() {\r\n    this.dataviewObj.setGrouping([]);\r\n  }\r\n\r\n  collapseAllGroups() {\r\n    this.dataviewObj.collapseAllGroups();\r\n  }\r\n\r\n  expandAllGroups() {\r\n    this.dataviewObj.expandAllGroups();\r\n  }\r\n\r\n  exportToExcel() {\r\n    this.angularGrid.excelExportService!.exportToExcel({\r\n      filename: 'Export',\r\n      format: FileType.xlsx\r\n    });\r\n  }\r\n\r\n  exportToCsv(type = 'csv') {\r\n    this.angularGrid.exportService.exportToFile({\r\n      delimiter: (type === 'csv') ? DelimiterType.comma : DelimiterType.tab,\r\n      filename: 'myExport',\r\n      format: (type === 'csv') ? FileType.csv : FileType.txt\r\n    });\r\n  }\r\n\r\n  groupByDuration() {\r\n    this.dataviewObj.setGrouping({\r\n      getter: 'duration',\r\n      formatter: (g) => `Duration: ${g.value} <span style=\"color:green\">(${g.count} items)</span>`,\r\n      aggregators: [\r\n        new Aggregators.Avg('percentComplete'),\r\n        new Aggregators.Sum('cost')\r\n      ],\r\n      comparer: (a, b) => Sorters.numeric(a.value, b.value, SortDirectionNumber.asc),\r\n      aggregateCollapsed: false,\r\n      lazyTotalsCalculation: true\r\n    } as Grouping);\r\n\r\n    // you need to manually add the sort icon(s) in UI\r\n    this.angularGrid.filterService.setSortColumnIcons([{ columnId: 'duration', sortAsc: true }]);\r\n    this.gridObj.invalidate(); // invalidate all rows and re-render\r\n  }\r\n\r\n  groupByDurationOrderByCount(aggregateCollapsed: boolean) {\r\n    this.angularGrid.filterService.setSortColumnIcons([]);\r\n    this.dataviewObj.setGrouping({\r\n      getter: 'duration',\r\n      formatter: (g) => `Duration: ${g.value} <span style=\"color:green\">(${g.count} items)</span>`,\r\n      comparer: (a, b) => {\r\n        return a.count - b.count;\r\n      },\r\n      aggregators: [\r\n        new Aggregators.Avg('percentComplete'),\r\n        new Aggregators.Sum('cost')\r\n      ],\r\n      aggregateCollapsed,\r\n      lazyTotalsCalculation: true\r\n    } as Grouping);\r\n    this.gridObj.invalidate(); // invalidate all rows and re-render\r\n  }\r\n\r\n  groupByDurationEffortDriven() {\r\n    this.angularGrid.filterService.setSortColumnIcons([]);\r\n    this.dataviewObj.setGrouping([\r\n      {\r\n        getter: 'duration',\r\n        formatter: (g) => `Duration: ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`,\r\n        aggregators: [\r\n          new Aggregators.Sum('duration'),\r\n          new Aggregators.Sum('cost')\r\n        ],\r\n        aggregateCollapsed: true,\r\n        lazyTotalsCalculation: true\r\n      },\r\n      {\r\n        getter: 'effortDriven',\r\n        formatter: (g) => `Effort-Driven: ${(g.value ? 'True' : 'False')} <span style=\"color:green\">(${g.count} items)</span>`,\r\n        aggregators: [\r\n          new Aggregators.Avg('percentComplete'),\r\n          new Aggregators.Sum('cost')\r\n        ],\r\n        collapsed: true,\r\n        lazyTotalsCalculation: true\r\n      }\r\n    ] as Grouping[]);\r\n    this.gridObj.invalidate(); // invalidate all rows and re-render\r\n  }\r\n\r\n  groupByDurationEffortDrivenPercent() {\r\n    this.angularGrid.filterService.setSortColumnIcons([]);\r\n    this.dataviewObj.setGrouping([\r\n      {\r\n        getter: 'duration',\r\n        formatter: (g) => `Duration: ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`,\r\n        aggregators: [\r\n          new Aggregators.Sum('duration'),\r\n          new Aggregators.Sum('cost')\r\n        ],\r\n        aggregateCollapsed: true,\r\n        lazyTotalsCalculation: true\r\n      },\r\n      {\r\n        getter: 'effortDriven',\r\n        formatter: (g) => `Effort-Driven: ${(g.value ? 'True' : 'False')}  <span style=\"color:green\">(${g.count} items)</span>`,\r\n        aggregators: [\r\n          new Aggregators.Sum('duration'),\r\n          new Aggregators.Sum('cost')\r\n        ],\r\n        lazyTotalsCalculation: true\r\n      },\r\n      {\r\n        getter: 'percentComplete',\r\n        formatter: (g) => `% Complete: ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`,\r\n        aggregators: [\r\n          new Aggregators.Avg('percentComplete')\r\n        ],\r\n        aggregateCollapsed: true,\r\n        collapsed: true,\r\n        lazyTotalsCalculation: true\r\n      }\r\n    ] as Grouping[]);\r\n    this.gridObj.invalidate(); // invalidate all rows and re-render\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-grouping.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\"\\r\\n       [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n      <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"add-500-rows-btn\\\" (click)=\\\"loadData(500)\\\">\\r\\n        500 rows\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"add-50k-rows-btn\\\" (click)=\\\"loadData(50000)\\\">\\r\\n        50k rows\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"clear-grouping-btn\\\" (click)=\\\"clearGrouping()\\\">\\r\\n        <i class=\\\"fa fa-times\\\"></i> Clear grouping\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"collapse-all-btn\\\" (click)=\\\"collapseAllGroups()\\\">\\r\\n        <i class=\\\"fa fa-compress\\\"></i> Collapse all groups\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"expand-all-btn\\\" (click)=\\\"expandAllGroups()\\\">\\r\\n        <i class=\\\"fa fa-expand\\\"></i> Expand all groups\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"export-excel-btn\\\" (click)=\\\"exportToExcel()\\\">\\r\\n        <i class=\\\"fa fa-file-excel-o text-success\\\"></i> Export to Excel\\r\\n      </button>\\r\\n    </div>\\r\\n  </div>\\r\\n  <hr />\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n      <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"group-duration-sort-value-btn\\\"\\r\\n              (click)=\\\"groupByDuration()\\\">\\r\\n        Group by duration &amp; sort groups by value\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"group-duration-sort-count-btn\\\"\\r\\n              (click)=\\\"groupByDurationOrderByCount(false)\\\">\\r\\n        Group by duration &amp; sort groups by count\\r\\n      </button>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n      <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"group-duration-sort-count-collapse-btn\\\"\\r\\n              (click)=\\\"groupByDurationOrderByCount(true)\\\">\\r\\n        Group by duration &amp; sort groups by count, aggregate collapsed\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"group-duration-effort-btn\\\"\\r\\n              (click)=\\\"groupByDurationEffortDriven()\\\">\\r\\n        Group by duration then effort-driven\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"group-duration-effort-percent-btn\\\"\\r\\n              (click)=\\\"groupByDurationEffortDrivenPercent()\\\">\\r\\n        Group by duration then effort-driven then percent.\\r\\n      </button>\\r\\n      <span [hidden]=\\\"!processing\\\">\\r\\n        <i class=\\\"fa fa-refresh fa-spin fa-lg fa-fw\\\"></i>\\r\\n      </span>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <angular-slickgrid gridId=\\\"grid14\\\"\\r\\n                     [dataset]=\\\"dataset\\\"\\r\\n                     [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                     [gridOptions]=\\\"gridOptions\\\"\\r\\n                     (onGridBeforeExportToFile)=\\\"processing = true\\\"\\r\\n                     (onGridAfterExportToFile)=\\\"processing = false\\\"\\r\\n                     (onGridBeforeExportToExcel)=\\\"processing = true\\\"\\r\\n                     (onGridAfterExportToExcel)=\\\"processing = false\\\"\\r\\n                     (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\r\\n  </angular-slickgrid>\\r\\n</div>\\r\\n\";","import { Component, OnInit } from '@angular/core';\r\nimport { Column, Formatter, GridOption } from './../modules/angular-slickgrid';\r\n\r\n// create a custom Formatter to highlight negative values in red\r\nlet columnsWithHighlightingById = {};\r\nconst highlightingFormatter: Formatter = (_row, _cell, value, columnDef) => {\r\n  if (columnsWithHighlightingById && (columnsWithHighlightingById as any)[columnDef.id] && value < 0) {\r\n    return `<div style=\"color:red; font-weight:bold;\">${value}</div>`;\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\n\r\n@Component({\r\n  templateUrl: './grid-headerbutton.component.html'\r\n})\r\nexport class GridHeaderButtonComponent implements OnInit {\r\n  title = 'Example 7: Header Button Plugin';\r\n  subTitle = `\r\n    This example demonstrates using the <b>Slick.Plugins.HeaderButtons</b> plugin to easily add buttons to colum headers.\r\n    These buttons can be specified directly in the column definition, and are very easy to configure and use.\r\n    (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Header-Menu-&-Header-Buttons\" target=\"_blank\">Wiki docs</a>)\r\n    <ul>\r\n      <li>Resize the 1st column to see all icon/command</li>\r\n      <li>Mouse hover the 2nd column to see it's icon/command</li>\r\n      <li>For all the other columns, click on top-right red circle icon to enable highlight of negative numbers.</li>\r\n      <li>Note: The \"Header Button\" & \"Header Menu\" Plugins cannot be used at the same time</li>\r\n      <li>Use override callback functions to change the properties of show/hide, enable/disable the menu or certain item(s) from the list</li>\r\n      <ol>\r\n        <li>These callbacks are: \"itemVisibilityOverride\", \"itemUsabilityOverride\"</li>\r\n        <li>for example the \"Column E\" does not show the header button via \"itemVisibilityOverride\"</li>\r\n        <li>for example the \"Column J\" header button is displayed but it not usable via \"itemUsabilityOverride\"</li>\r\n      </ol>\r\n    </ul>\r\n  `;\r\n\r\n  columnDefinitions!: Column[];\r\n  gridOptions!: GridOption;\r\n  dataset!: any[];\r\n  gridObj: any;\r\n  dataviewObj: any;\r\n  visibleColumns!: Column[];\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [];\r\n    this.gridOptions = {\r\n      enableAutoResize: true,\r\n      enableHeaderButton: true,\r\n      enableHeaderMenu: false,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableFiltering: false,\r\n      enableCellNavigation: true,\r\n      headerButton: {\r\n        // you can use the \"onCommand\" (in Grid Options) and/or the \"action\" callback (in Column Definition)\r\n        onCommand: (e, args) => {\r\n          const column = args.column;\r\n          const button = args.button;\r\n          const command = args.command;\r\n          if (!columnsWithHighlightingById) {\r\n            columnsWithHighlightingById = {};\r\n          }\r\n\r\n          if (command === 'toggle-highlight') {\r\n            if (button.cssClass === 'fa fa-circle red') {\r\n              delete (columnsWithHighlightingById as any)[column.id];\r\n              button.cssClass = 'fa fa-circle-o red faded';\r\n              button.tooltip = 'Highlight negative numbers.';\r\n            } else {\r\n              (columnsWithHighlightingById as any)[column.id] = true;\r\n              button.cssClass = 'fa fa-circle red';\r\n              button.tooltip = 'Remove highlight.';\r\n            }\r\n\r\n            this.gridObj.invalidate();\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    // Set up some test columns.\r\n    for (let i = 0; i < 10; i++) {\r\n      this.columnDefinitions.push({\r\n        id: i,\r\n        name: 'Column ' + String.fromCharCode('A'.charCodeAt(0) + i),\r\n        field: i + '',\r\n        width: i === 0 ? 70 : 100, // have the 2 first columns wider\r\n        sortable: true,\r\n        formatter: highlightingFormatter,\r\n        header: {\r\n          buttons: [\r\n            {\r\n              cssClass: 'fa fa-circle-o red faded',\r\n              command: 'toggle-highlight',\r\n              tooltip: 'Highlight negative numbers.',\r\n              itemVisibilityOverride: (args) => {\r\n                // for example don't show the header button on column \"E\"\r\n                return args.column.name !== 'Column E';\r\n              },\r\n              itemUsabilityOverride: (args) => {\r\n                // for example the button usable everywhere except on last column ='J\"\r\n                return args.column.name !== 'Column J';\r\n              },\r\n              action: (e, args) => {\r\n                // you can use the \"action\" callback and/or subscribe to the \"onCallback\" event, they both have the same arguments\r\n                // do something\r\n                console.log(`execute a callback action to \"${args.command}\" on ${args.column.name}`);\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      });\r\n    }\r\n\r\n    // Set multiple buttons on the first column to demonstrate overflow.\r\n    this.columnDefinitions[0].name = 'Resize me!';\r\n    this.columnDefinitions[0].header = {\r\n      buttons: [\r\n        {\r\n          cssClass: 'fa fa-tag',\r\n          handler: (e) => {\r\n            alert('Tag');\r\n          }\r\n        },\r\n        {\r\n          cssClass: 'fa fa-comment',\r\n          handler: (e) => {\r\n            alert('Comment');\r\n          }\r\n        },\r\n        {\r\n          cssClass: 'fa fa-info-circle',\r\n          handler: (e) => {\r\n            alert('Info');\r\n          }\r\n        },\r\n        {\r\n          cssClass: 'fa fa-question-circle',\r\n          handler: (e) => {\r\n            alert('Help');\r\n          }\r\n        }\r\n      ]\r\n    };\r\n\r\n    // Set a button on the second column to demonstrate hover.\r\n    this.columnDefinitions[1].name = 'Hover me!';\r\n    this.columnDefinitions[1].header = {\r\n      buttons: [\r\n        {\r\n          cssClass: 'fa fa-question-circle',\r\n          showOnHover: true,\r\n          tooltip: 'This button only appears on hover.',\r\n          handler: (e) => {\r\n            alert('Help');\r\n          }\r\n        }\r\n      ]\r\n    };\r\n\r\n    // mock a dataset\r\n    const mockDataset = [];\r\n    for (let i = 0; i < 100; i++) {\r\n      const d: any = (mockDataset[i] = {});\r\n      d['id'] = i;\r\n      for (let j = 0; j < this.columnDefinitions.length; j++) {\r\n        d[j] = Math.round(Math.random() * 10) - 5;\r\n      }\r\n    }\r\n    this.dataset = mockDataset;\r\n  }\r\n\r\n  gridReady(grid: any) {\r\n    this.gridObj = grid;\r\n  }\r\n  dataviewReady(dataview: any) {\r\n    this.dataviewObj = dataview;\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-headerbutton.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <div class=\\\"col-sm-12\\\">\\r\\n    <angular-slickgrid gridId=\\\"grid7\\\"\\r\\n                       [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                       [gridOptions]=\\\"gridOptions\\\"\\r\\n                       [dataset]=\\\"dataset\\\"\\r\\n                       (onDataviewCreated)=\\\"dataviewReady($event)\\\"\\r\\n                       (onGridCreated)=\\\"gridReady($event)\\\">\\r\\n    </angular-slickgrid>\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { AngularGridInstance, Column, GridOption, unsubscribeAllObservables } from './../modules/angular-slickgrid';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  templateUrl: './grid-headermenu.component.html',\r\n  styleUrls: ['./grid-headermenu.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class GridHeaderMenuComponent implements OnInit, OnDestroy {\r\n  title = 'Example 8: Header Menu Plugin';\r\n  subTitle = `\r\n    This example demonstrates using the <b>Slick.Plugins.HeaderMenu</b> plugin to easily add menus to colum headers.<br/>\r\n    These menus can be specified directly in the column definition, and are very easy to configure and use.\r\n    (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Header-Menu-&-Header-Buttons\" target=\"_blank\">Wiki docs</a>)\r\n    <ul>\r\n      <li>Now enabled by default in the Global Grid Options, it will add the default commands of (hide column, sort asc/desc)</li>\r\n      <li>Hover over any column header to see an arrow showing up on the right</li>\r\n      <li>Try Sorting (multi-sort) the 2 columns \"Duration\" and \"% Complete\" (the other ones are disabled)</li>\r\n      <li>Try hiding any columns (you use the \"Column Picker\" plugin by doing a right+click on the header to show the column back)</li>\r\n      <li>Note: The \"Header Button\" & \"Header Menu\" Plugins cannot be used at the same time</li>\r\n      <li>You can change the menu icon via SASS variables as shown in this demo (check all SASS variables)</li>\r\n      <li>Use override callback functions to change the properties of show/hide, enable/disable the menu or certain item(s) from the list</li>\r\n      <ol>\r\n        <li>These callbacks are: \"itemVisibilityOverride\", \"itemUsabilityOverride\"</li>\r\n        <li>for example if we want to disable the \"Help\" command over the \"Title\" and \"Completed\" column</li>\r\n        <li>for example don't show Help on column \"% Complete\"</li>\r\n      </ol>\r\n    </ul>\r\n  `;\r\n\r\n  private subscriptions: Subscription[] = [];\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions!: Column[];\r\n  gridOptions!: GridOption;\r\n  dataset!: any[];\r\n  selectedLanguage: string;\r\n\r\n  constructor(private translate: TranslateService) {\r\n    this.selectedLanguage = this.translate.getDefaultLang();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // also unsubscribe all Angular Subscriptions\r\n    this.subscriptions = unsubscribeAllObservables(this.subscriptions);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      { id: 'title', name: 'Title', field: 'title', nameKey: 'TITLE' },\r\n      { id: 'duration', name: 'Duration', field: 'duration', nameKey: 'DURATION', sortable: true },\r\n      { id: 'percentComplete', name: '% Complete', field: 'percentComplete', nameKey: 'PERCENT_COMPLETE', sortable: true },\r\n      { id: 'start', name: 'Start', field: 'start', nameKey: 'START' },\r\n      { id: 'finish', name: 'Finish', field: 'finish', nameKey: 'FINISH' },\r\n      { id: 'completed', name: 'Completed', field: 'completed', nameKey: 'COMPLETED' }\r\n    ];\r\n\r\n    this.columnDefinitions.forEach((columnDef) => {\r\n      columnDef.header = {\r\n        menu: {\r\n          items: [\r\n            // add Custom Header Menu Item Commands which will be appended to the existing internal custom items\r\n            // you cannot override an internal command but you can hide them and create your own\r\n            // also note that the internal custom commands are in the positionOrder range of 50-60,\r\n            // if you want yours at the bottom then start with 61, below 50 will make your command(s) show on top\r\n            {\r\n              iconCssClass: 'fa fa-question-circle',\r\n\r\n              // you can disable a command with certain logic\r\n              // HOWEVER note that if you use \"itemUsabilityOverride\" has precedence when it is defined\r\n              // disabled: (columnDef.id === 'completed'),\r\n\r\n              titleKey: 'HELP', // use \"title\" as plain string OR \"titleKey\" when using a translation key\r\n              command: 'help',\r\n              tooltip: 'Need assistance?',\r\n              cssClass: 'bold',     // container css class\r\n              textCssClass: (columnDef.id === 'title' || columnDef.id === 'completed') ? '' : 'blue', // just the text css class\r\n              positionOrder: 99,\r\n              itemUsabilityOverride: (args) => {\r\n                // for example if we want to disable the \"Help\" command over the \"Title\" and \"Completed\" column\r\n                return !(args.column.id === 'title' || args.column.id === 'completed');\r\n              },\r\n              itemVisibilityOverride: (args) => {\r\n                // for example don't show Help on column \"% Complete\"\r\n                return (args.column.id !== 'percentComplete');\r\n              },\r\n              action: (e, args) => {\r\n                // you can use the \"action\" callback and/or subscribe to the \"onCallback\" event, they both have the same arguments\r\n                console.log('execute an action on Help', args);\r\n              }\r\n            },\r\n            // you can also add divider between commands (command is a required property but you can set it to empty string)\r\n            { divider: true, command: '', positionOrder: 98 },\r\n\r\n            // you can use \"divider\" as a string too, but if you do then make sure it's the correct position in the list\r\n            // (since there's no positionOrder when using 'divider')\r\n            // 'divider',\r\n          ]\r\n        }\r\n      };\r\n    });\r\n\r\n    this.gridOptions = {\r\n      enableAutoResize: true,\r\n      enableHeaderMenu: true,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableFiltering: false,\r\n      enableCellNavigation: true,\r\n      headerMenu: {\r\n        hideSortCommands: false,\r\n        hideColumnHideCommand: false,\r\n        // you can use the \"onCommand\" (in Grid Options) and/or the \"action\" callback (in Column Definition)\r\n        onCommand: (e, args) => {\r\n          if (args.command === 'help') {\r\n            alert('Please help!!!');\r\n          }\r\n        }\r\n      },\r\n      enableTranslate: true,\r\n      i18n: this.translate\r\n    };\r\n\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    // Set up some test columns.\r\n    const mockDataset = [];\r\n    for (let i = 0; i < 1000; i++) {\r\n      mockDataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 25) + ' days',\r\n        percentComplete: Math.round(Math.random() * 100),\r\n        start: '01/01/2009',\r\n        finish: '01/05/2009',\r\n        completed: (i % 5 === 0)\r\n      };\r\n    }\r\n    this.dataset = mockDataset;\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  switchLanguage() {\r\n    const nextLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\r\n    this.subscriptions.push(\r\n      this.translate.use(nextLanguage).subscribe(() => {\r\n        this.selectedLanguage = nextLanguage;\r\n      })\r\n    );\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-headermenu.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"switchLanguage()\\\">\\r\\n    <i class=\\\"fa fa-language\\\"></i>\\r\\n    Switch Language\\r\\n  </button>\\r\\n  <strong>Locale:</strong>\\r\\n  <span style=\\\"font-style: italic\\\" data-test=\\\"selected-locale\\\">\\r\\n    {{selectedLanguage + '.json'}}\\r\\n  </span>\\r\\n\\r\\n  <div class=\\\"col-sm-12\\\">\\r\\n    <angular-slickgrid gridId=\\\"grid8\\\"\\r\\n                       (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n                       [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                       [gridOptions]=\\\"gridOptions\\\"\\r\\n                       [dataset]=\\\"dataset\\\">\\r\\n    </angular-slickgrid>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \"@charset \\\"UTF-8\\\";\\n/* make sure to add the @import the SlickGrid Bootstrap Theme AFTER the variables changes */\\n/*!\\n * SlickGrid custom styling for Bootstrap (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n * @author: Ghislain B. (ghiscoding)\\n */\\n/*!\\n\\n/** SlickGrid Bootstrap Theme */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.pointer {\\n  cursor: pointer;\\n}\\n.slickgrid-container .slick-header-columns,\\n.slickgrid-container .slick-header-column {\\n  background: rgba(255, 255, 255, 0.6);\\n  box-sizing: content-box !important;\\n  /* this here only for Firefox! */\\n}\\n.slickgrid-container .slick-header-columns {\\n  /*border-bottom: 1px solid $grid-border-color;*/\\n  background: linear-gradient(rgba(0, 0, 0, 0) 60%, rgba(0, 0, 0, 0.1));\\n}\\n.slickgrid-container .slick-header-column {\\n  border-right: 1px solid fade(black, 3%);\\n  border-bottom: 1px solid fade(black, 3%);\\n}\\n.slickgrid-container .slick-header-column:hover {\\n  background: rgba(250, 250, 250, 0.6);\\n}\\n.slickgrid-container .slick-header-column-active {\\n  background: rgba(242, 242, 242, 0.6) !important;\\n}\\n.slickgrid-container .slick-headerrow {\\n  background: rgba(255, 255, 255, 0.6);\\n}\\n.slickgrid-container .slick-headerrow-column {\\n  background: #fafafa;\\n  border-bottom: 0;\\n}\\n.slickgrid-container .grid-canvas {\\n  background: white;\\n}\\n.slickgrid-container .slick-row {\\n  background: inherit;\\n  border: 0;\\n  line-height: 20px;\\n}\\n.slickgrid-container .slick-row .slick-cell {\\n  background: inherit;\\n  border: 1px transparent;\\n  padding-top: 3px;\\n  padding-bottom: 4px;\\n  padding-left: 4px;\\n  padding-right: 4px;\\n  box-sizing: border-box;\\n}\\n.slickgrid-container .slick-row .slick-cell.invalid {\\n  border-color: red;\\n  -moz-animation-duration: 0.2s;\\n  -webkit-animation-duration: 0.2s;\\n  -moz-animation-name: slickgrid-invalid-hilite;\\n  -webkit-animation-name: slickgrid-invalid-hilite;\\n  animation-duration: 0.2s;\\n  animation-name: slickgrid-invalid-hilite;\\n}\\n.slickgrid-container .slick-row .slick-cell.selected {\\n  background-color: #e7e7c3;\\n}\\n.slickgrid-container .slick-row .slick-cell.selected .cell-selection {\\n  background-color: transparent;\\n  /* show default selected row background */\\n}\\n.slickgrid-container .slick-row .slick-cell.active {\\n  box-shadow: inset 0 0 0 1px #aaaaaa;\\n  border: none;\\n  z-index: 6;\\n  padding: 5px 6px;\\n}\\n.slickgrid-container .slick-row .slick-cell.active input.editor-text {\\n  width: calc(100% + 2px);\\n  height: 100%;\\n  outline: 0;\\n  transform: translate(0, -2px);\\n}\\n.slickgrid-container .slick-row .slick-cell.active input.dual-editor-text {\\n  width: calc(50% + 1px - 5px);\\n  height: 100%;\\n  outline: 0;\\n  transform: translate(0, -2px);\\n}\\n.slickgrid-container .slick-row.odd .slick-cell {\\n  background: #f7f7f7;\\n}\\n.slickgrid-container .slick-row.odd .slick-cell.selected {\\n  background-color: #d6d6b2;\\n}\\n.slickgrid-container .slick-row.active-row .slick-cell {\\n  background-color: #e2fffd;\\n}\\n.slickgrid-container .slick-row.active-row .slick-cell.selected {\\n  background-color: red;\\n}\\n.slickgrid-container .slick-row.active-row.odd .slick-cell {\\n  background-color: #f2f2f2;\\n}\\n.slickgrid-container .slick-row.active-row.odd .slick-cell.selected {\\n  background-color: green;\\n}\\n.slickgrid-container .slick-row.loading {\\n  opacity: 0.5;\\n}\\n.slickgrid-container .slick-group {\\n  border-bottom: 2px solid silver;\\n}\\n.slickgrid-container .slick-group-toggle {\\n  width: 9px;\\n  height: 9px;\\n  margin-right: 5px;\\n}\\n.slickgrid-container .slick-group-toggle.expanded {\\n  background: none;\\n}\\n.slickgrid-container .slick-group-toggle.collapsed {\\n  background: none;\\n}\\n.slickgrid-container .slick-group-totals {\\n  color: gray;\\n  background: white;\\n}\\n.slickgrid-container .slick-sortable-placeholder {\\n  background: silver !important;\\n}\\n@-webkit-keyframes slickgrid-invalid-hilite {\\n  from {\\n    box-shadow: 0 0 6px red;\\n  }\\n  to {\\n    box-shadow: none;\\n  }\\n}\\n@keyframes slickgrid-invalid-hilite {\\n  from {\\n    box-shadow: 0 0 6px red;\\n  }\\n  to {\\n    box-shadow: none;\\n  }\\n}\\n.slickgrid-container .header-overlay,\\n.slickgrid-container .cell-overlay,\\n.slickgrid-container .selection-cell-overlay {\\n  display: block;\\n  position: absolute;\\n  z-index: 999;\\n}\\n.slickgrid-container .slick-cell > .editor-select {\\n  position: absolute;\\n  left: 0;\\n  right: 0;\\n  width: auto;\\n  top: 0;\\n  bottom: 0;\\n  max-width: 100%;\\n  min-width: 0;\\n  margin: 0;\\n}\\n.slickgrid-container .slick-range-decorator {\\n  z-index: 100;\\n  pointer-events: none;\\n  background: transparent;\\n  border: none;\\n  outline: black;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slickgrid-container {\\n  overflow: hidden;\\n  outline: 0;\\n  position: relative;\\n  box-sizing: content-box;\\n}\\n.slickgrid-container .slick-group-header-columns {\\n  position: relative;\\n  white-space: nowrap;\\n  cursor: default;\\n  overflow: hidden;\\n}\\n.slickgrid-container .slick-group-header {\\n  width: 100%;\\n  overflow: hidden;\\n  border-left: 0px;\\n}\\n.slickgrid-container .slick-group-header-column.ui-state-default {\\n  position: relative;\\n  display: inline-block;\\n  box-sizing: content-box !important;\\n  /* this here only for Firefox! */\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  height: 16px;\\n  line-height: 16px;\\n  margin: 0;\\n  padding: 4px;\\n}\\n.slickgrid-container .slick-viewport,\\n.slickgrid-container .slick-top-panel-scroller,\\n.slickgrid-container .slick-header,\\n.slickgrid-container .slick-headerrow,\\n.slickgrid-container .slick-footerrow {\\n  position: relative;\\n  width: 100%;\\n  border: 1px solid fade(black, 3%);\\n  border-right-color: transparent;\\n  border-bottom-color: transparent;\\n  border-right-width: 0;\\n  border-bottom-width: 0;\\n  margin: 0;\\n  outline: 0;\\n}\\n.slickgrid-container .slick-top-panel-scroller {\\n  overflow: hidden;\\n}\\n.slickgrid-container .slick-pane {\\n  position: absolute;\\n  outline: 0;\\n  overflow: hidden;\\n  width: 100%;\\n}\\n.slickgrid-container .slick-pane-header {\\n  display: block;\\n  background-color: #ffffff;\\n  border-bottom: 0 none;\\n}\\n.slickgrid-container .slick-pane-top {\\n  box-sizing: border-box;\\n  border-top: none;\\n}\\n.slickgrid-container .slick-viewport {\\n  overflow: auto;\\n}\\n.slickgrid-container .slick-viewport ::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n}\\n.slickgrid-container .slick-viewport ::-webkit-scrollbar-thumb {\\n  border-radius: 4px;\\n  border: 2px solid white;\\n  /* should match background, can't be transparent */\\n  background-color: rgba(0, 0, 0, 0.5);\\n}\\n.slickgrid-container .slick-header,\\n.slickgrid-container .slick-headerrow,\\n.slickgrid-container .slick-footerrow {\\n  overflow: hidden;\\n}\\n.slickgrid-container .slick-headerrow {\\n  border-top-color: transparent;\\n  border-top-width: 0;\\n}\\n.slickgrid-container .slick-top-panel,\\n.slickgrid-container .slick-header-columns,\\n.slickgrid-container .slick-headerrow-columns,\\n.slickgrid-container .slick-footerrow-columns {\\n  position: relative;\\n  white-space: nowrap;\\n  cursor: default;\\n  overflow: hidden;\\n  margin: 0;\\n  padding: 0;\\n  border: 0;\\n  outline: 0;\\n}\\n.slickgrid-container .slick-cell,\\n.slickgrid-container .slick-header-column,\\n.slickgrid-container .slick-headerrow-column,\\n.slickgrid-container .slick-footerrow-column {\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  border-top-color: transparent;\\n  border-left-color: transparent;\\n  border-top-width: 0;\\n  border-left-width: 0;\\n  margin: 0;\\n  padding: 0;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  vertical-align: middle;\\n  z-index: 1;\\n  white-space: nowrap;\\n  cursor: default;\\n}\\n.slickgrid-container .slick-cell.slick-header-is-leaf,\\n.slickgrid-container .slick-header-column.slick-header-is-leaf,\\n.slickgrid-container .slick-headerrow-column.slick-header-is-leaf,\\n.slickgrid-container .slick-footerrow-column.slick-header-is-leaf {\\n  border-bottom-color: transparent;\\n  border-bottom-width: 0;\\n}\\n.slickgrid-container .slick-header-column.ui-state-default {\\n  position: relative;\\n  display: inline-block;\\n  box-sizing: content-box !important;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  height: 16px;\\n  line-height: 16px;\\n  margin: 0;\\n  padding: 4px;\\n  border-right: 1px solid fade(black, 3%);\\n  border-left: 0px !important;\\n  border-top: 0px !important;\\n  border-bottom: 0px !important;\\n  float: left;\\n}\\n.slickgrid-container .slick-cell {\\n  box-sizing: border-box;\\n  border-style: solid;\\n  padding: 1px 2px 1px 2px;\\n}\\n.slickgrid-container .slick-header-column {\\n  padding: 4px 4px 4px 4px;\\n}\\n.slickgrid-container .grid-canvas {\\n  position: relative;\\n  outline: 0;\\n}\\n.slickgrid-container .slick-row {\\n  position: absolute;\\n  border: 0;\\n  width: 100%;\\n}\\n.slickgrid-container .slick-header-column-sorted {\\n  font-style: italic;\\n}\\n.slickgrid-container .slick-sort-indicator {\\n  display: inline-block;\\n  width: 8px;\\n  height: 5px;\\n  margin-left: 4px;\\n  margin-top: 6px;\\n  position: absolute;\\n  left: 0;\\n}\\n.slickgrid-container .slick-sort-indicator-desc:before {\\n  content: \\\"\\\";\\n}\\n.slickgrid-container .slick-sort-indicator-asc:before {\\n  content: \\\"\\\";\\n}\\n.slickgrid-container .slick-header-sortable .slick-column-name {\\n  margin-left: 10px;\\n}\\n.slickgrid-container .slick-header.ui-state-default {\\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\\n}\\n.slickgrid-container .slick-column-name {\\n  text-overflow: ellipsis;\\n}\\n.slickgrid-container .slick-resizable-handle {\\n  position: absolute;\\n  font-size: 0.1px;\\n  display: block;\\n  cursor: col-resize;\\n  width: 4px;\\n  right: 0;\\n  top: 0;\\n  height: 100%;\\n}\\n.slickgrid-container .slick-resizable-handle-hover {\\n  background-color: #ccc;\\n}\\n.slickgrid-container .slick-sortable-placeholder {\\n  background: silver;\\n}\\n.slickgrid-container .slick-group-toggle {\\n  display: inline-block;\\n}\\n.slickgrid-container .slick-cell.highlighted {\\n  background: lightskyblue;\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: all 0.5s;\\n}\\n.slickgrid-container .slick-cell.flashing {\\n  border: 1px solid red !important;\\n}\\n.slickgrid-container .slick-cell.editable {\\n  z-index: 11;\\n  overflow: visible;\\n  background: white;\\n  border-color: black;\\n  border-style: solid;\\n}\\n.slickgrid-container .slick-cell:focus {\\n  outline: none;\\n}\\n.slickgrid-container .slick-reorder-proxy {\\n  display: inline-block;\\n  background: blue;\\n  opacity: 0.15;\\n  cursor: move;\\n}\\n.slickgrid-container .slick-reorder-guide {\\n  display: inline-block;\\n  height: 2px;\\n  background: blue;\\n  opacity: 0.7;\\n}\\n.slickgrid-container .slick-selection {\\n  z-index: 10;\\n  position: absolute;\\n  border: 2px dashed black;\\n}\\n.slickgrid-container .slick-pane {\\n  position: absolute;\\n  outline: 0;\\n  overflow: hidden;\\n  width: 100%;\\n}\\n.flatpickr-wrapper {\\n  z-index: 10000;\\n}\\n.interact-placeholder {\\n  background: red !important;\\n  display: inline-block;\\n  float: left;\\n  transform: translate(0px, -100%);\\n}\\n.interact-drop-active {\\n  box-shadow: inset 0 0 8px rgba(7, 67, 128, 0.5);\\n}\\n.interact-can-drop {\\n  opacity: 0.9;\\n}\\n.scrollbar-fix::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n}\\n/* control variables */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-columnpicker {\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  background-color: #ffffff;\\n  border: 1px solid #b8b8b8;\\n  border-radius: 2px;\\n  padding: 6px;\\n  box-shadow: 1px 1px 1px silver;\\n  min-width: 150px;\\n  cursor: default;\\n  position: absolute;\\n  z-index: 2000;\\n  overflow: auto;\\n  resize: both;\\n  width: auto;\\n  padding-right: 24px;\\n  /* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n}\\n.slick-columnpicker > .close {\\n  float: right;\\n  position: absolute;\\n  color: #c3c3c3;\\n  cursor: pointer;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 21px;\\n  background-color: #ffffff;\\n  border: 0px solid #9c9c9c;\\n  right: 5px;\\n  top: 0px;\\n}\\n.slick-columnpicker > .close:hover {\\n  color: #838383;\\n}\\n.slick-columnpicker > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-columnpicker li {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n  background: none;\\n}\\n.slick-columnpicker li a {\\n  display: block;\\n  padding: 4px;\\n  font-weight: bold;\\n}\\n.slick-columnpicker li a:hover {\\n  background-color: #ffffff;\\n}\\n.slick-columnpicker li label {\\n  font-weight: normal;\\n}\\n.slick-columnpicker li label input {\\n  margin: 4px;\\n}\\n.slick-columnpicker div.title {\\n  font-size: calc(14px + 2px);\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: 1px solid #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-columnpicker-list {\\n  /** make sure the hidden class exist, it was removed in BS4 */\\n  /* replace checkboxes by Font-Awesome icons */\\n}\\n.slick-columnpicker-list li.hidden {\\n  display: none;\\n}\\n.slick-columnpicker-list li {\\n  width: calc(100% + 24px - 6px);\\n  /* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-columnpicker-list li:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-columnpicker-list li label {\\n  cursor: pointer;\\n  width: 100%;\\n  margin-bottom: 0px;\\n}\\n.slick-columnpicker-list hr {\\n  margin: 6px 0;\\n  border: 0;\\n  border-top: 1px solid #d5d5d5;\\n  width: calc(100% + 24px - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-columnpicker-list input[type=checkbox] {\\n  display: none;\\n  /* to hide the checkbox itself */\\n  margin-left: 4px;\\n  margin-top: 3px;\\n}\\n.slick-columnpicker-list input[type=checkbox] + label:before {\\n  cursor: pointer;\\n  content: \\\"\\\";\\n  color: #31708F;\\n  display: inline-block;\\n  font-weight: bold;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 13px;\\n  opacity: 0.15;\\n  /* unchecked icon */\\n  margin-right: 4px;\\n  width: 13px;\\n}\\n.slick-columnpicker-list input[type=checkbox] + label:hover:before {\\n  opacity: 0.35;\\n}\\n.slick-columnpicker-list input[type=checkbox]:checked + label:before {\\n  opacity: 1;\\n  /* checked icon */\\n  content: \\\"\\\";\\n  width: 13px;\\n}\\n.slick-gridmenu {\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  background-color: #ffffff;\\n  border: 1px solid #b8b8b8;\\n  border-radius: 2px;\\n  padding: 6px;\\n  box-shadow: 1px 1px 1px silver;\\n  min-width: 200px;\\n  cursor: default;\\n  position: absolute;\\n  z-index: 2000;\\n  overflow: auto;\\n  width: -webkit-max-content;\\n  width: -moz-max-content;\\n  width: max-content;\\n}\\n.slick-gridmenu > .close {\\n  float: right;\\n  position: absolute;\\n  color: #c3c3c3;\\n  cursor: pointer;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 21px;\\n  background-color: #ffffff;\\n  border: 0px solid #9c9c9c;\\n  right: 5px;\\n  top: 0px;\\n}\\n.slick-gridmenu > .close:hover {\\n  color: #838383;\\n}\\n.slick-gridmenu > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-gridmenu div.title {\\n  font-size: calc(14px + 2px);\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: solid 1px #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-gridmenu li {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n  background: none;\\n}\\n.slick-gridmenu li a {\\n  display: block;\\n  padding: 4px;\\n  font-weight: bold;\\n}\\n.slick-gridmenu li a:hover {\\n  background-color: #ffffff;\\n}\\n.slick-gridmenu li label {\\n  font-weight: normal;\\n}\\n.slick-gridmenu li label input {\\n  margin: 4px;\\n}\\n.slick-gridmenu input {\\n  margin: 4px;\\n}\\n.slick-gridmenu-button {\\n  position: absolute;\\n  cursor: pointer;\\n  right: 0;\\n  padding: 0 2px;\\n  margin-top: 5px;\\n  background-color: transparent;\\n  border: 0;\\n  width: 22px;\\n  font-size: 14px;\\n  z-index: 2;\\n}\\n.slick-gridmenu-custom {\\n  margin-bottom: 10px;\\n}\\n/* Menu items */\\n.slick-gridmenu-item {\\n  cursor: pointer;\\n  display: block;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-gridmenu-item:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-gridmenu-item.slick-gridmenu-item-divider {\\n  cursor: default;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 5px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-gridmenu-item.slick-gridmenu-item-divider:hover {\\n  border: none;\\n  background-color: silver;\\n}\\n.slick-gridmenu-item-divider.slick-gridmenu-item:hover {\\n  background-color: #e7e7e7;\\n}\\n.slick-gridmenu-item-disabled {\\n  cursor: inherit;\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n}\\n.slick-gridmenu-item-disabled .slick-gridmenu-icon, .slick-gridmenu-item-disabled .slick-gridmenu-content {\\n  color: silver;\\n}\\n.slick-gridmenu-item-hidden {\\n  display: none;\\n}\\n.slick-gridmenu-icon {\\n  display: inline-block;\\n  font-size: 14px;\\n  line-height: 14px;\\n  margin-right: 4px;\\n  width: 14px;\\n  vertical-align: middle;\\n  background-repeat: no-repeat;\\n  background-position: center center;\\n}\\n.slick-gridmenu-content {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.slick-gridmenu-list {\\n  /** make sure the hidden class exist, it was removed in BS4 */\\n  /* replace checkboxes by Font-Awesome icons */\\n}\\n.slick-gridmenu-list li.hidden {\\n  display: none;\\n}\\n.slick-gridmenu-list li {\\n  width: auto;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-gridmenu-list li:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-gridmenu-list li label {\\n  cursor: pointer;\\n  width: 100%;\\n  margin-bottom: 0px;\\n}\\n.slick-gridmenu-list hr {\\n  margin: 6px 0;\\n  border: 0;\\n  border-top: 1px solid #dddddd;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-gridmenu-list input[type=checkbox] {\\n  display: none;\\n  /* to hide the checkbox itself */\\n  margin-left: 4px;\\n  margin-top: 3px;\\n}\\n.slick-gridmenu-list input[type=checkbox] + label:before {\\n  cursor: pointer;\\n  content: \\\"\\\";\\n  color: #31708F;\\n  display: inline-block;\\n  font-weight: bold;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 13px;\\n  opacity: 0.15;\\n  /* unchecked icon */\\n  margin-right: 4px;\\n  width: 13px;\\n}\\n.slick-gridmenu-list input[type=checkbox] + label:hover:before {\\n  opacity: 0.35;\\n}\\n.slick-gridmenu-list input[type=checkbox]:checked + label:before {\\n  content: \\\"\\\";\\n  opacity: 1;\\n  /* checked icon */\\n  width: 13px;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-cell input.dual-editor-text,\\n.slick-cell input.editor-text {\\n  border: 1px solid #e2e2e2;\\n  border-radius: 3px;\\n  background: #ffffff;\\n  padding-bottom: 0;\\n  padding-left: 2px;\\n  padding-right: 0;\\n  padding-top: 0;\\n  margin-left: -2px;\\n  margin-bottom: 2px;\\n  margin-right: 2px;\\n  margin-top: 2px;\\n  width: calc(100% + 2px);\\n  transform: translate(0, -2px);\\n  outline: 0;\\n  height: 100%;\\n}\\n.slick-cell input.dual-editor-text:focus,\\n.slick-cell input.editor-text:focus {\\n  outline: 0;\\n  border-color: #3e8eb5;\\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px rgba(53, 121, 154, 0.3);\\n}\\n.slick-cell input.dual-editor-text.right,\\n.slick-cell input.editor-text.right {\\n  margin-left: calc(-2px + 9px);\\n}\\n.slick-cell input.dual-editor-text[readonly],\\n.slick-cell input.editor-text[readonly] {\\n  background-color: #f0f0f0;\\n}\\n.slick-cell .slider-editor-input:focus {\\n  outline: 0;\\n  border-color: #3e8eb5;\\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px rgba(53, 121, 154, 0.3);\\n}\\n.slick-cell .flatpickr.input-group .input-group-btn .btn {\\n  background-color: #eeeeee;\\n  border: 1px solid #cccccc;\\n  padding: 6px;\\n  border-top-right-radius: 3px;\\n  border-bottom-right-radius: 3px;\\n  cursor: pointer;\\n  height: 24px;\\n}\\n.slick-cell .flatpickr.input-group .input-group-btn .btn.icon-close:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: inherit;\\n  content: \\\"\\\";\\n  vertical-align: middle;\\n  display: inline-block;\\n  height: initial;\\n  width: initial;\\n  margin-top: -14px;\\n}\\n.slick-cell .flatpickr-alt-input {\\n  cursor: pointer;\\n  height: 24px;\\n  border-top-left-radius: 3px !important;\\n  border-bottom-left-radius: 3px !important;\\n  padding: 6px 2px;\\n}\\n.slick-cell .flatpickr-alt-input.editor-text {\\n  cursor: pointer;\\n  background-color: #ffffff;\\n}\\n.slick-cell .flatpickr-alt-input.editor-text:focus {\\n  outline: 0;\\n  border-color: #3e8eb5;\\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px rgba(53, 121, 154, 0.3);\\n}\\n/* Long Text Editor */\\n.slick-large-editor-text {\\n  z-index: 10000;\\n  position: absolute;\\n  background: #ffffff;\\n  padding: 5px;\\n  border: 2px solid #a0a0a0;\\n  border-radius: 6px;\\n}\\n.slick-large-editor-text .editor-footer {\\n  text-align: right;\\n}\\n.slick-large-editor-text .editor-footer button {\\n  margin-left: 2px;\\n  border-radius: 3px;\\n}\\n.slick-large-editor-text textarea {\\n  background: #ffffff;\\n  border: 0;\\n  outline: 0;\\n}\\n.slick-large-editor-text .counter {\\n  float: left;\\n  font-size: 11px;\\n  margin-top: 8px;\\n}\\n.slick-large-editor-text .counter .separator {\\n  margin: 0 1px;\\n}\\n/* plugin variables */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-cell-menu {\\n  position: absolute;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  background: #ffffff;\\n  border: 1px solid #BFBDBD;\\n  border-radius: 2px;\\n  min-width: 175px;\\n  padding: 6px;\\n  z-index: 100000;\\n  cursor: default;\\n  display: inline-block;\\n  overflow: auto;\\n  resize: both;\\n  /* make sure that other UI frameworks aren't overriding our properties (Bulma was one of them affecting this) */\\n  /* resize cell menu item width when there's a close button on same line */\\n}\\n.slick-cell-menu.dropdown, .slick-cell-menu.dropup {\\n  display: inline-block;\\n  position: absolute;\\n}\\n.slick-cell-menu > .close {\\n  float: right;\\n  cursor: pointer;\\n  color: #c3c3c3;\\n  background-color: #ffffff;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  border: 0px solid #9c9c9c;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 21px;\\n}\\n.slick-cell-menu > .close:hover {\\n  color: #838383;\\n}\\n.slick-cell-menu > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-cell-menu .slick-cell-menu-option-list .title,\\n.slick-cell-menu .slick-cell-menu-command-list .title {\\n  font-size: calc(14px + 2px);\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: 1px solid #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-cell-menu .slick-cell-menu-item {\\n  cursor: pointer;\\n  display: flex;\\n  align-items: center;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  font-size: 14px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n  width: 100%;\\n  height: 24px;\\n  /* Disabled item */\\n}\\n.slick-cell-menu .slick-cell-menu-item:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-divider {\\n  cursor: default;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 5px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-divider:hover {\\n  border: none;\\n  background-color: #e7e7e7;\\n}\\n.slick-cell-menu .slick-cell-menu-item .slick-cell-menu-icon {\\n  font-size: 14px;\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  display: inline-block;\\n  line-height: calc(14px + 2px);\\n  margin-right: 4px;\\n  vertical-align: middle;\\n  width: 16px;\\n}\\n.slick-cell-menu .slick-cell-menu-item .slick-cell-menu-content {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-disabled {\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n  cursor: inherit;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-disabled .slick-cell-menu-icon, .slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-disabled .slick-cell-menu-content {\\n  color: silver;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-hidden {\\n  display: none;\\n}\\n.slick-cell-menu .slick-cell-menu-option-list {\\n  margin-bottom: 10px;\\n}\\n.slick-cell-menu button + .slick-cell-menu-command-list .slick-cell-menu-item:first-child,\\n.slick-cell-menu button + .slick-cell-menu-option-list .slick-cell-menu-item:first-child {\\n  width: calc(100% - 15px - 3px);\\n}\\n.slick-context-menu {\\n  position: absolute;\\n  background: #ffffff;\\n  border: 1px solid #BFBDBD;\\n  border-radius: 2px;\\n  min-width: 175px;\\n  padding: 6px;\\n  z-index: 100000;\\n  cursor: default;\\n  display: inline-block;\\n  overflow: auto;\\n  resize: both;\\n  /* make sure that other UI frameworks aren't overriding our properties (Bulma was one of them affecting this) */\\n  /* resize context menu item width when there's a close button on same line */\\n}\\n.slick-context-menu.dropdown, .slick-context-menu.dropup {\\n  display: inline-block;\\n  position: absolute;\\n}\\n.slick-context-menu > .close {\\n  float: right;\\n  color: #c3c3c3;\\n  background-color: #ffffff;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  border: 0px solid #9c9c9c;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 21px;\\n}\\n.slick-context-menu > .close:hover {\\n  color: #838383;\\n}\\n.slick-context-menu > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-context-menu .title {\\n  font-size: calc(14px + 2px);\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: 1px solid #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-context-menu .slick-context-menu-item {\\n  cursor: pointer;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  font-size: 14px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n  width: 100%;\\n  /* Disabled item */\\n}\\n.slick-context-menu .slick-context-menu-item:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-divider {\\n  cursor: default;\\n  display: block;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 5px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-divider:hover {\\n  border: none;\\n  background-color: #e7e7e7;\\n}\\n.slick-context-menu .slick-context-menu-item .slick-context-menu-icon {\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  display: inline-block;\\n  font-size: 14px;\\n  height: 16px;\\n  line-height: 14px;\\n  margin-right: 4px;\\n  vertical-align: middle;\\n  width: 16px;\\n}\\n.slick-context-menu .slick-context-menu-item .slick-context-menu-content {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-disabled {\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n  cursor: inherit;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-disabled .slick-context-menu-icon, .slick-context-menu .slick-context-menu-item.slick-context-menu-item-disabled .slick-context-menu-content {\\n  color: silver;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-hidden {\\n  display: none;\\n}\\n.slick-context-menu .slick-context-menu-option-list {\\n  margin-bottom: 10px;\\n}\\n.slick-context-menu button + .slick-context-menu-command-list .slick-context-menu-item:first-child,\\n.slick-context-menu button + .slick-context-menu-option-list .slick-context-menu-item:first-child {\\n  width: calc(100% - 15px - 3px);\\n}\\n.slick-column-name,\\n.slick-sort-indicator {\\n  /**\\n   * This makes all \\\"float:right\\\" elements after it that spill over to the next line\\n   * display way below the lower boundary of the column thus hiding them.\\n   */\\n  float: left;\\n  margin-bottom: 100px;\\n}\\n.slick-header-button {\\n  /**\\n   * This makes all \\\"float:right\\\" elements after it that spill over to the next line\\n   * display way below the lower boundary of the column thus hiding them.\\n   */\\n  float: right;\\n  vertical-align: top;\\n  margin: 1px;\\n  margin-bottom: 100px;\\n  height: 15px;\\n  width: 15px;\\n  background-repeat: no-repeat;\\n  background-position: center center;\\n  cursor: pointer;\\n}\\n.slick-header-button-hidden {\\n  width: 0;\\n  margin-right: -8px;\\n  transition: 0.2s width;\\n}\\n.slick-header-column:hover > .slick-header-button {\\n  width: 15px;\\n}\\n.slick-header-menubutton {\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  cursor: pointer;\\n  display: none;\\n  position: absolute;\\n  height: 35px;\\n  border: 1px solid #cfcfcf;\\n  border-width: 0px 1px;\\n  padding: 10px 0 0 3px;\\n  color: #4a4a4a;\\n  bottom: 0;\\n  right: 3px;\\n  top: 0;\\n  width: 16px;\\n}\\n.slick-header-menubutton:before {\\n  display: inline-block;\\n  content: \\\"\\\";\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 14px;\\n  font-weight: normal;\\n  width: 14px;\\n}\\n.slick-header-column .slick-header-menubutton {\\n  display: none;\\n}\\n.slick-header-column:hover .slick-header-menubutton {\\n  display: inline-block;\\n}\\n.slick-header-menu {\\n  position: absolute;\\n  margin: 0;\\n  background: none repeat scroll 0 0 #ffffff;\\n  border: 1px solid #BFBDBD;\\n  border-radius: 2px;\\n  min-width: 175px;\\n  padding: 6px;\\n  z-index: 100000;\\n  cursor: default;\\n  display: inline-block;\\n}\\n.slick-header-menu .filter {\\n  border: 1px solid #BFBDBD;\\n  font-size: 8pt;\\n  height: 400px;\\n  margin-top: 6px;\\n  overflow: scroll;\\n  padding: 4px;\\n  white-space: nowrap;\\n  width: 200px;\\n}\\n.slick-header-menu .textfilter > label {\\n  display: inline-block;\\n  margin-left: 5px;\\n  margin-right: 10px;\\n}\\n.slick-header-menu .textfilter > input[type=text] {\\n  width: 70%;\\n}\\n.slick-header-menuitem {\\n  cursor: pointer;\\n  display: block;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-header-menuitem:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-header-menuitem.slick-header-menuitem-divider {\\n  cursor: default;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 3px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-header-menuitem.slick-header-menuitem-divider:hover {\\n  border: none;\\n  background-color: silver;\\n}\\n.slick-header-menuitem-divider.slick-header-menuitem:hover {\\n  background-color: #e7e7e7;\\n}\\n.slick-header-menuicon {\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  display: inline-block;\\n  color: #000000;\\n  font-size: 14px;\\n  font-weight: normal;\\n  line-height: 14px;\\n  height: 16px;\\n  margin-right: 4px;\\n  vertical-align: middle;\\n  width: 16px;\\n  /* Font Awesome sorting icons are not aligned in middle, let's align them ourselves */\\n}\\n.slick-header-menuicon.fa-sort-asc {\\n  transform: translateY(3px);\\n}\\n.slick-header-menuicon.fa-sort-desc {\\n  transform: translateY(-2px);\\n}\\n.slick-header-menucontent {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n/* Disabled */\\n.slick-header-menuitem-disabled {\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n  cursor: inherit;\\n}\\n.slick-header-menuitem-disabled .slick-header-menuicon, .slick-header-menuitem-disabled .slick-header-menucontent {\\n  color: silver;\\n}\\n.slick-header-menuitem-hidden {\\n  display: none;\\n}\\n.slick-cell.cell-reorder:before {\\n  display: inline-block;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 14px;\\n  content: \\\"\\\";\\n  width: 14px;\\n}\\n.slick-cell.cell-reorder {\\n  cursor: move;\\n}\\n.slick-headerrow-column,\\n.slick-column-name,\\n.slick-cell-checkboxsel {\\n  text-align: center;\\n}\\n.slick-headerrow-column #filter-checkbox-selectall-container,\\n.slick-column-name #filter-checkbox-selectall-container,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  height: 100%;\\n}\\n.slick-headerrow-column input[type=checkbox],\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox],\\n.slick-column-name input[type=checkbox],\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox],\\n.slick-cell-checkboxsel input[type=checkbox],\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] {\\n  display: none;\\n  /* to hide the checkbox itself */\\n}\\n.slick-headerrow-column input[type=checkbox],\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox] + label,\\n.slick-column-name input[type=checkbox],\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox] + label,\\n.slick-cell-checkboxsel input[type=checkbox],\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] + label {\\n  margin: 0;\\n}\\n.slick-headerrow-column input[type=checkbox] + label:before,\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox] + label:before,\\n.slick-column-name input[type=checkbox] + label:before,\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox] + label:before,\\n.slick-cell-checkboxsel input[type=checkbox] + label:before,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] + label:before {\\n  cursor: pointer;\\n  content: \\\"\\\";\\n  background-color: inherit;\\n  color: #31708F;\\n  display: inline-block;\\n  font-weight: bold;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(14px - 1px);\\n  opacity: 0.15;\\n  /* unchecked icon */\\n  height: 14px;\\n  width: 14px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0;\\n}\\n.slick-headerrow-column input[type=checkbox] + label:hover:before,\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox] + label:hover:before,\\n.slick-column-name input[type=checkbox] + label:hover:before,\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox] + label:hover:before,\\n.slick-cell-checkboxsel input[type=checkbox] + label:hover:before,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] + label:hover:before {\\n  opacity: 0.35;\\n}\\n.slick-headerrow-column input[type=checkbox]:checked + label:before,\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox]:checked + label:before,\\n.slick-column-name input[type=checkbox]:checked + label:before,\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox]:checked + label:before,\\n.slick-cell-checkboxsel input[type=checkbox]:checked + label:before,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox]:checked + label:before {\\n  content: \\\"\\\";\\n  color: #31708F;\\n  opacity: 1;\\n  /* checked icon */\\n  height: 14px;\\n  width: 14px;\\n  border-radius: none;\\n  border-radius: none;\\n}\\n.slick-group .slick-cell-checkboxsel {\\n  text-align: left;\\n}\\n.search-filter :focus {\\n  outline-color: #73b3e5;\\n}\\n.ms-choice {\\n  border: 1px solid #ccc;\\n  background-color: transparent;\\n  font-size: 14px;\\n}\\n.ms-choice div:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 16px;\\n}\\n.ms-choice div.open:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 16px;\\n}\\n.ms-choice span {\\n  font-size: 12px;\\n  font-family: \\\"Helvetica Neue\\\", Helvetica, Arial;\\n}\\n.ms-choice .placeholder {\\n  font-family: \\\"Segoe UI Symbol\\\";\\n  font-size: 14px;\\n  color: #c9c9c9 !important;\\n}\\n.ms-filter.search-filter {\\n  width: 100% !important;\\n}\\n.ms-drop {\\n  max-width: 250px;\\n  border: 1px solid #bbb;\\n  z-index: 9999;\\n}\\n.ms-drop input[type=checkbox],\\n.ms-drop input[type=radio] {\\n  /* make input checkbox invisible but don't hide it since multiple-select uses hide for something else */\\n  opacity: 0;\\n  width: 0;\\n}\\n.ms-drop input[type=checkbox] + span:before,\\n.ms-drop input[type=radio] + span:before {\\n  cursor: pointer;\\n  color: #31708F;\\n  content: \\\"\\\";\\n  display: inline-block;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 16px;\\n  font-weight: normal;\\n  height: 14px;\\n  width: 20px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0;\\n  opacity: 0.6;\\n}\\n.ms-drop input[type=checkbox]:checked + span:before,\\n.ms-drop input[type=radio]:checked + span:before {\\n  content: \\\"\\\";\\n  opacity: 1;\\n  height: 14px;\\n  width: 20px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0;\\n}\\n.ms-drop input[type=radio] + span:before {\\n  content: \\\"\\\";\\n  height: 14px;\\n  width: 20px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0;\\n}\\n.ms-drop input[type=radio]:checked + span:before {\\n  content: \\\"\\\";\\n  color: #31708F;\\n  height: 14px;\\n  width: 20px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0;\\n}\\n.ms-drop label {\\n  margin-bottom: 5px;\\n}\\n.ms-drop label span {\\n  cursor: pointer;\\n  margin-left: 4px;\\n  position: relative;\\n  top: 1px;\\n}\\n.ms-drop label:hover {\\n  cursor: pointer;\\n  background-color: #eff5fc;\\n}\\n.ms-drop .ms-select-all {\\n  border-bottom: 1px solid #ddd;\\n}\\n.ms-drop .ms-select-all label {\\n  display: inline-block;\\n  font-weight: normal;\\n  padding: 5px 8px;\\n  color: #2a617c;\\n}\\n.ms-drop .ms-select-all label:hover {\\n  color: #245269;\\n}\\n.ms-drop .ms-ok-button {\\n  cursor: pointer;\\n  display: block;\\n  width: 100%;\\n  height: 26px;\\n  padding: 0;\\n  border: 1px solid #ccc;\\n  text-align: center;\\n  color: #31708F;\\n  font-weight: 600;\\n  border-bottom-left-radius: 4px;\\n  border-bottom-right-radius: 4px;\\n  background-color: #fff;\\n}\\n.ms-drop .ms-ok-button:hover {\\n  background-color: #e2edfa;\\n  color: #2a617c;\\n}\\n.ms-drop .ms-search:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 16px;\\n  right: 8px;\\n  position: absolute;\\n}\\n.search-filter .operator.input-group-addon {\\n  margin: 0;\\n  padding: 0;\\n  min-width: 25px;\\n  border: none;\\n}\\n.search-filter .operator.input-group-addon .form-control {\\n  border-radius: 4px 0 0 4px;\\n  padding: 0 0 0 2px !important;\\n  font-size: 13px;\\n  color: #333333;\\n  font-weight: bold;\\n  background-color: #ffffff;\\n}\\n.search-filter .operator.input-group-addon select {\\n  font-family: Consolas, \\\"Lucida Console\\\";\\n  font-size: 14px !important;\\n  border: 1px solid #387fa2;\\n  width: 25px;\\n}\\n.search-filter .operator.input-group-addon select.form-control {\\n  cursor: pointer;\\n  -moz-appearance: none;\\n  -webkit-appearance: none;\\n}\\n.search-filter .operator.input-group-addon select.form-control:-ms-expand {\\n  display: none;\\n}\\n.search-filter .operator.input-group-addon select.form-control .empty {\\n  color: #c0c0c0;\\n}\\n.search-filter .operator-char3.input-group-addon {\\n  min-width: 30px;\\n}\\ninput.search-filter {\\n  font-family: \\\"Segoe UI Symbol\\\";\\n}\\n.search-filter input {\\n  font-family: \\\"Segoe UI Symbol\\\";\\n}\\n.search-filter input.compound-input {\\n  border-radius: 0 4px 4px 0 !important;\\n  border-left: none;\\n}\\n.search-filter input.compound-input::-moz-placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter input.compound-input::placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter input.compound-slider {\\n  border-left: none !important;\\n}\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column .input-group-prepend + .flatpickr input.compound-input {\\n  border-top-left-radius: 0;\\n  border-bottom-left-radius: 0;\\n}\\n.search-filter .flatpickr input.form-control {\\n  border-left: none;\\n}\\n.search-filter .flatpickr input.form-control::-moz-placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter .flatpickr input.form-control::placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter.flatpickr,\\n.search-filter .flatpickr {\\n  flex: 1;\\n  cursor: pointer;\\n}\\n.search-filter.flatpickr input.flatpickr.form-control,\\n.search-filter.flatpickr .flatpickr-input.form-control,\\n.search-filter .flatpickr input.flatpickr.form-control,\\n.search-filter .flatpickr .flatpickr-input.form-control {\\n  background-color: #ffffff;\\n  font-family: \\\"Segoe UI Symbol\\\";\\n  font-size: 14px;\\n  border-radius: 0 4px 4px 0;\\n  width: 100%;\\n}\\n.search-filter.flatpickr input.flatpickr.form-control[readonly],\\n.search-filter.flatpickr .flatpickr-input.form-control[readonly],\\n.search-filter .flatpickr input.flatpickr.form-control[readonly],\\n.search-filter .flatpickr .flatpickr-input.form-control[readonly] {\\n  background-color: #ffffff;\\n}\\n.search-filter.flatpickr .form-control[readonly],\\n.search-filter.flatpickr .flatpickr.form-control[readonly],\\n.search-filter .flatpickr .form-control[readonly],\\n.search-filter .flatpickr .flatpickr.form-control[readonly] {\\n  cursor: pointer;\\n  background-color: #ffffff;\\n}\\ninput.flatpickr-input.form-control,\\ninput.flatpickr.form-control {\\n  cursor: pointer;\\n  font-family: \\\"Segoe UI Symbol\\\";\\n  font-size: 14px;\\n  border-radius: 4px;\\n}\\ninput.flatpickr-input.form-control[readonly],\\ninput.flatpickr.form-control[readonly] {\\n  background-color: #ffffff;\\n}\\n.slick-preheader-panel .ui-droppable, .slick-preheader-panel .ui-droppable-hover {\\n  padding: 5px 10px;\\n  height: 35px;\\n  border: 1px solid #e0e0e0 !important;\\n  width: calc(100% - 25px) !important;\\n  border-radius: 4px;\\n  background-color: #ffffff;\\n}\\n.slick-preheader-panel .ui-droppable .slick-placeholder, .slick-preheader-panel .ui-droppable-hover .slick-placeholder {\\n  font-style: italic;\\n  color: #616161;\\n}\\n.slick-preheader-panel .ui-droppable .slick-group-toggle-all, .slick-preheader-panel .ui-droppable-hover .slick-group-toggle-all {\\n  position: absolute;\\n  cursor: pointer;\\n  font-family: \\\"FontAwesome\\\";\\n  color: #31708F;\\n  display: none !important;\\n  top: 7px;\\n  right: 40px;\\n}\\n.slick-preheader-panel .ui-droppable .slick-group-toggle-all.expanded:before, .slick-preheader-panel .ui-droppable-hover .slick-group-toggle-all.expanded:before {\\n  content: \\\"\\\";\\n}\\n.slick-preheader-panel .ui-droppable .slick-group-toggle-all.collapsed:before, .slick-preheader-panel .ui-droppable-hover .slick-group-toggle-all.collapsed:before {\\n  content: \\\"\\\";\\n}\\n.slick-preheader-panel .ui-droppable .slick-dropped-grouping, .slick-preheader-panel .ui-droppable-hover .slick-dropped-grouping {\\n  display: inline-block;\\n  vertical-align: middle;\\n  cursor: move;\\n}\\n.slick-preheader-panel .ui-droppable .slick-groupby-remove, .slick-preheader-panel .ui-droppable-hover .slick-groupby-remove {\\n  cursor: pointer;\\n  display: inline-flex;\\n  color: pink;\\n  font-size: 16px;\\n  padding-left: 5px;\\n  padding-right: 7px;\\n  vertical-align: baseline;\\n}\\n.slick-preheader-panel .ui-droppable .slick-groupby-remove:hover, .slick-preheader-panel .ui-droppable-hover .slick-groupby-remove:hover {\\n  color: red;\\n}\\n.slick-preheader-panel .ui-droppable-active {\\n  background-color: #fafafa;\\n}\\n.slick-preheader-panel .ui-droppable-hover {\\n  background-color: #ededed;\\n}\\n.slick-header .slick-header-columns .slick-column-groupable {\\n  display: inline-block;\\n  font-weight: normal;\\n  color: #707070;\\n  width: 9px;\\n  height: 9px;\\n  margin-left: 4px;\\n}\\n.ui-widget.ui-widget-content {\\n  border: 0;\\n}\\ninput.slider-editor-input[type=range],\\ninput.slider-filter-input[type=range] {\\n  /*removes default webkit styles*/\\n  -webkit-appearance: none;\\n  height: 27px;\\n  flex: 1;\\n  padding: 0 6px;\\n  /* change runnable track color while in focus on all browsers */\\n  /* WebKit specific (Opera/Chrome/Safari) */\\n  /* Mozilla Firefox specific */\\n  /*fix for FF unable to apply focus style bug */\\n  border: 1px solid #ccc;\\n  /*hide the outline behind the border*/\\n  /* Microsoft IE specific */\\n}\\ninput.slider-editor-input[type=range]:focus,\\ninput.slider-filter-input[type=range]:focus {\\n  outline: none;\\n}\\ninput.slider-editor-input[type=range]:focus::-webkit-slider-runnable-track,\\ninput.slider-filter-input[type=range]:focus::-webkit-slider-runnable-track {\\n  background: #ddd;\\n}\\ninput.slider-editor-input[type=range]:focus::-moz-range-track,\\ninput.slider-filter-input[type=range]:focus::-moz-range-track {\\n  background: #ddd;\\n}\\ninput.slider-editor-input[type=range]:focus::-ms-fill-lower,\\ninput.slider-filter-input[type=range]:focus::-ms-fill-lower {\\n  background: #aaa;\\n}\\ninput.slider-editor-input[type=range]:focus::-ms-fill-upper,\\ninput.slider-filter-input[type=range]:focus::-ms-fill-upper {\\n  background: #ddd;\\n}\\ninput.slider-editor-input[type=range]::-webkit-slider-runnable-track,\\ninput.slider-filter-input[type=range]::-webkit-slider-runnable-track {\\n  height: 4px;\\n  background: #eee;\\n  border: none;\\n  border-radius: 3px;\\n}\\ninput.slider-editor-input[type=range]::-webkit-slider-thumb,\\ninput.slider-filter-input[type=range]::-webkit-slider-thumb {\\n  cursor: pointer;\\n  -webkit-appearance: none;\\n  border: none;\\n  height: 14px;\\n  width: 14px;\\n  border-radius: 50%;\\n  border: 1px solid #9bbc9f;\\n  background: #c9dbcb;\\n  margin-top: -4px;\\n}\\ninput.slider-editor-input[type=range]::-moz-range-track,\\ninput.slider-filter-input[type=range]::-moz-range-track {\\n  height: 4px;\\n  background: #eee;\\n  border: none;\\n  border-radius: 3px;\\n}\\ninput.slider-editor-input[type=range]::-moz-range-thumb,\\ninput.slider-filter-input[type=range]::-moz-range-thumb {\\n  border: none;\\n  cursor: pointer;\\n  height: calc(14px - 2px);\\n  width: calc(14px - 2px);\\n  border-radius: 50%;\\n  border: 1px solid #9bbc9f;\\n  background: #c9dbcb;\\n}\\ninput.slider-editor-input[type=range]:-moz-focusring,\\ninput.slider-filter-input[type=range]:-moz-focusring {\\n  outline: 1px solid white;\\n  outline-offset: -1px;\\n}\\ninput.slider-editor-input[type=range]::-ms-track,\\ninput.slider-filter-input[type=range]::-ms-track {\\n  height: 4px;\\n  /*remove bg colour from the track, we'll use ms-fill-lower and ms-fill-upper instead */\\n  background: transparent;\\n  /*leave room for the larger thumb to overflow with a transparent border */\\n  border-color: transparent;\\n  border-width: 6px 0;\\n  /*remove default tick marks*/\\n  color: transparent;\\n}\\ninput.slider-editor-input[type=range]::-ms-fill-lower,\\ninput.slider-filter-input[type=range]::-ms-fill-lower {\\n  background: #ddd;\\n  border-radius: 10px;\\n}\\ninput.slider-editor-input[type=range]::-ms-fill-upper,\\ninput.slider-filter-input[type=range]::-ms-fill-upper {\\n  background: #eee;\\n  border-radius: 10px;\\n}\\ninput.slider-editor-input[type=range]::-ms-thumb,\\ninput.slider-filter-input[type=range]::-ms-thumb {\\n  border: none;\\n  cursor: pointer;\\n  height: calc(14px - 2px);\\n  width: calc(14px - 2px);\\n  border-radius: 50%;\\n  border: 1px solid #9bbc9f;\\n  background: #c9dbcb;\\n  margin-top: 1px;\\n}\\ninput.slider-editor-input[type=range]::-ms-tooltip,\\ninput.slider-filter-input[type=range]::-ms-tooltip {\\n  display: none;\\n}\\n.search-filter {\\n  height: 27px;\\n}\\n.search-filter::-moz-placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter::placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter .slider-value {\\n  padding: 0;\\n  height: 100%;\\n}\\n.search-filter .slider-value .input-group-text {\\n  padding: 4px 8px;\\n  font-size: calc(14 - 1px);\\n}\\ninput.slider-filter-input[type=range] {\\n  padding: 0 6px;\\n  height: 27px;\\n}\\n/* Slider Editor */\\ninput.slider-editor-input[type=range] {\\n  padding: 0 6px;\\n  height: 24px;\\n}\\n.slider-editor .slider-value {\\n  padding: 0;\\n  height: 24px;\\n}\\n.slider-editor .slider-value .input-group-text {\\n  padding: 4px 6px;\\n  font-size: calc(14 - 1px);\\n  height: 24px;\\n}\\n.slider-range-container {\\n  height: 27px;\\n  padding: 0 12px;\\n}\\n.slider-range-container .ui-slider {\\n  position: relative;\\n}\\n.slider-range-container .ui-slider .ui-slider-handle {\\n  position: absolute;\\n  top: -5px;\\n  border-radius: 50%;\\n  cursor: pointer;\\n  border: 1px solid #9bbc9f;\\n  height: 14px;\\n  width: 14px;\\n  background-color: #c9dbcb;\\n}\\n.slider-range-container .ui-slider .ui-slider-handle:focus {\\n  outline: none;\\n}\\n.slider-range-container .ui-slider-horizontal {\\n  top: 45%;\\n  height: 4px;\\n  background-color: #eee;\\n}\\n.slider-range-container .input-group-text {\\n  border: 0;\\n}\\n.slider-range-container.slider-values {\\n  padding: 0;\\n}\\n.slider-range-container.slider-values .ui-slider-horizontal {\\n  flex: 1;\\n  width: calc(98% - 16px);\\n  top: 12px;\\n  margin: 0 10px;\\n}\\n.slider-range-container.slider-values .slider-range-value {\\n  padding: 0;\\n  border: 0;\\n  height: 100%;\\n}\\n.slider-range-container.slider-values .slider-range-value .input-group-text {\\n  padding: 4px 8px;\\n  font-size: calc(14 - 1px);\\n}\\n.slider-range-container.slider-values .input-group-prepend.slider-range-value {\\n  border-right: 1px solid #ccc;\\n}\\n.slider-range-container.slider-values .input-group-append.slider-range-value {\\n  border-left: 1px solid #ccc;\\n}\\n.slick-row .detail-view-toggle {\\n  display: inline-block;\\n  cursor: pointer;\\n}\\n.slick-row .detail-view-toggle.expand {\\n  display: inline-block;\\n  color: #71b0ce;\\n}\\n.slick-row .detail-view-toggle.expand:hover {\\n  color: #4b9ac1;\\n}\\n.slick-row .detail-view-toggle.expand:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(14px + 2px);\\n  content: \\\"\\\";\\n}\\n.slick-row .detail-view-toggle.collapse {\\n  display: inline-block;\\n  color: #31708F;\\n}\\n.slick-row .detail-view-toggle.collapse:hover {\\n  color: #245269;\\n}\\n.slick-row .detail-view-toggle.collapse:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(14px + 2px);\\n  content: \\\"\\\";\\n}\\n.slick-row .dynamic-cell-detail {\\n  position: absolute;\\n  width: 100%;\\n  overflow: auto;\\n  border: 1px solid #c0c0c0;\\n  background-color: #f7f7f7;\\n  padding: 10px;\\n  z-index: 1000;\\n}\\n.slick-row .dynamic-cell-detail :first-child {\\n  vertical-align: middle;\\n  line-height: 13px;\\n}\\n/* pagination/pagination variables */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-custom-footer {\\n  color: #808080;\\n  padding: 5px 0;\\n  background-color: transparent;\\n  font-size: 14px;\\n  font-style: italic;\\n  font-weight: normal;\\n  height: 30px;\\n}\\n.slick-custom-footer .left-footer {\\n  color: #808080;\\n  font-style: italic;\\n  font-weight: normal;\\n  text-align: left;\\n  padding: 0px;\\n  width: 50%;\\n  float: left;\\n}\\n.slick-custom-footer .right-footer.metrics {\\n  color: #808080;\\n  text-align: right;\\n  font-style: italic;\\n  font-weight: normal;\\n  text-align: right;\\n  padding: 0px;\\n  width: 50%;\\n  float: right;\\n}\\n.slick-custom-footer .right-footer.metrics .separator {\\n  margin: 2px;\\n}\\n.slick-empty-data-warning {\\n  position: relative;\\n  color: #000000;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: calc(14px + 2px);\\n  font-style: italic;\\n  line-height: 18px;\\n  margin: 0px;\\n  padding: 8px;\\n  z-index: 10;\\n}\\n/* Pagination styling */\\n.slick-pagination {\\n  border-top: 0 none;\\n  border-right: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  width: 100%;\\n  height: 40px;\\n  padding-top: 4px;\\n  vertical-align: middle;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: calc(14px - 1px);\\n  font-weight: 400;\\n  color: #808080;\\n}\\n.slick-pagination .slick-pagination-status {\\n  display: inline-block;\\n  padding: 6px;\\n}\\n.slick-pagination .ui-icon-container {\\n  display: inline-block;\\n  border-color: #ddd;\\n}\\n.slick-pagination .slick-pagination-nav {\\n  display: inline-block;\\n  padding: 2px;\\n  height: 34px;\\n}\\n.slick-pagination .slick-pagination-nav nav {\\n  display: inline-block;\\n}\\n.slick-pagination .slick-pagination-nav .slick-page-number {\\n  vertical-align: top;\\n  margin-top: 6px;\\n  display: inline-block;\\n  padding: 0 5px;\\n}\\n.slick-pagination .slick-pagination-nav .slick-page-number input {\\n  background-color: #fafbed;\\n  height: 26px;\\n  width: 50px;\\n  padding: 2px;\\n  border-radius: 4px;\\n  display: inline-block;\\n}\\n.slick-pagination .slick-pagination-nav .pagination {\\n  margin: 0;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-link {\\n  font-size: calc(14px - 1px);\\n  border: 1px solid #acacac;\\n  height: 32px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item {\\n  cursor: pointer;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item a[class*=icon-seek-] {\\n  border-color: 1px solid #acacac;\\n  color: #31708F;\\n  text-decoration: none;\\n  font-family: \\\"FontAwesome\\\";\\n  line-height: calc(14px + 4px);\\n  -webkit-text-stroke: 0.4px;\\n  padding: 6px 12px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item a[class*=icon-seek-]:hover {\\n  background-color: #E6E6E6;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item:first-child a, .slick-pagination .slick-pagination-nav .pagination .page-item:first-child span {\\n  border-top-left-radius: 4px;\\n  border-bottom-left-radius: 4px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item:last-child a, .slick-pagination .slick-pagination-nav .pagination .page-item:last-child span {\\n  border-top-right-radius: 4px;\\n  border-bottom-right-radius: 4px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-first:before {\\n  content: \\\"\\\";\\n  display: block;\\n  width: inherit;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-prev:before {\\n  content: \\\"\\\";\\n  display: block;\\n  width: inherit;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-next:before {\\n  content: \\\"\\\";\\n  display: block;\\n  width: inherit;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-end:before {\\n  content: \\\"\\\";\\n  display: block;\\n  width: inherit;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item.disabled {\\n  cursor: not-allowed;\\n  font-weight: normal;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item.disabled a[class*=icon-seek-] {\\n  color: #b8b8b8;\\n  background-color: #f9f9f9;\\n  border-color: #dedede;\\n}\\n.slick-pagination .slick-pagination-settings {\\n  display: block;\\n  float: right;\\n  padding: 2px;\\n}\\n.slick-pagination .slick-pagination-settings select {\\n  font-size: calc(14px - 2px);\\n  line-height: 1.5;\\n  height: 32px;\\n  width: 60px;\\n  padding: 0 0 2px 2px;\\n  border: 1px solid #acacac;\\n  border-radius: 3px;\\n}\\n.slick-pagination .slick-pagination-settings .slick-pagination-count {\\n  margin-left: 2px;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.full-height {\\n  height: 100%;\\n}\\n.gridPane {\\n  width: 100%;\\n}\\n.grid-header {\\n  border: 1px solid gray;\\n  border-bottom: 0;\\n  border-top: 0;\\n  color: black;\\n  height: 24px;\\n  line-height: 24px;\\n}\\n.grid-header label {\\n  display: inline-block;\\n  font-weight: bold;\\n  margin: auto auto auto 6px;\\n}\\n.grid-header .ui-icon {\\n  margin: 4px 4px auto 6px;\\n  background-color: transparent;\\n  border-color: transparent;\\n}\\n.grid-header .ui-icon.ui-state-hover {\\n  background-color: white;\\n}\\n.grid-header #txtSearch {\\n  margin: 0 4px 0 4px;\\n  padding: 2px 2px;\\n  border-radius: 2px;\\n  border: 1px solid silver;\\n}\\n.options-panel {\\n  border-radius: 6px;\\n  border: 1px solid silver;\\n  background: #f0f0f0;\\n  padding: 4px;\\n  margin-bottom: 20px;\\n  width: 320px;\\n  position: absolute;\\n  top: 0px;\\n  left: 650px;\\n}\\n/* Individual cell styles */\\n.slick-cell.task-name {\\n  font-weight: bold;\\n  text-align: right;\\n}\\n.slick-cell.task-percent {\\n  text-align: right;\\n}\\n.slick-cell.cell-move-handle {\\n  font-weight: bold;\\n  text-align: right;\\n  border-right: solid gray;\\n  background: #efefef;\\n  cursor: move;\\n}\\n.cell-move-handle:hover {\\n  background: #b6b9bd;\\n}\\n.slick-row.selected .cell-move-handle {\\n  background: #D5DC8D;\\n}\\n.slick-row .cell-actions {\\n  text-align: left;\\n}\\n.slick-row.complete {\\n  background-color: #DFD;\\n  color: #555;\\n}\\n.percent-complete-bar {\\n  display: inline-block;\\n  height: 6px;\\n  border-radius: 3px;\\n  background-color: transparent;\\n}\\n/* Slick.Editors.Text, Slick.Editors.Date */\\n.ui-datepicker-trigger {\\n  margin-top: 2px;\\n  padding: 0;\\n  vertical-align: top;\\n}\\n/* Slick.Editors.PercentComplete */\\ninput.editor-percentcomplete {\\n  width: 100%;\\n  height: 100%;\\n  border: 0;\\n  margin: 0;\\n  background: transparent;\\n  outline: 0;\\n  padding: 0;\\n  float: left;\\n}\\n.editor-percentcomplete-picker {\\n  position: relative;\\n  display: inline-block;\\n  width: 16px;\\n  height: 100%;\\n  overflow: visible;\\n  z-index: 1000;\\n  float: right;\\n}\\n.editor-percentcomplete-helper {\\n  border: 0 solid gray;\\n  position: absolute;\\n  top: -2px;\\n  left: -9px;\\n  padding-left: 9px;\\n  width: 120px;\\n  height: 140px;\\n  display: none;\\n  overflow: visible;\\n}\\n.editor-percentcomplete-wrapper {\\n  background: beige;\\n  padding: 20px 8px;\\n  width: 100%;\\n  height: 98px;\\n  border: 1px solid gray;\\n  border-left: 0;\\n}\\n.editor-percentcomplete-buttons {\\n  float: right;\\n}\\n.editor-percentcomplete-buttons button {\\n  width: 80px;\\n}\\n.editor-percentcomplete-slider {\\n  float: left;\\n}\\n.editor-percentcomplete-picker:hover .editor-percentcomplete-helper {\\n  display: block;\\n}\\n.editor-percentcomplete-helper:hover {\\n  display: block;\\n}\\n/* Slick.Editors.YesNoSelect */\\nselect.editor-yesno {\\n  width: 100%;\\n  margin: 0;\\n  vertical-align: middle;\\n}\\n/* Slick.Editors.Checkbox */\\ninput.editor-checkbox {\\n  margin: 0;\\n  height: 100%;\\n  padding: 0;\\n  border: 0;\\n}\\n/*!\\n * SlickGrid custom styling for Bootstrap (https://github.com/ghiscoding/aurelia-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/aurelia-slickgrid/blob/master/LICENSE)\\n * @author: Ghislain B. (ghiscoding)\\n */\\n/*!\\n\\n/* Mixins for SlickGrid */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n@-webkit-keyframes highlight-start {\\n  to {\\n    background: #c8ddea;\\n  }\\n  from {\\n    background: none;\\n  }\\n}\\n@keyframes highlight-start {\\n  to {\\n    background: #c8ddea;\\n  }\\n  from {\\n    background: none;\\n  }\\n}\\n@-webkit-keyframes highlight-end {\\n  from {\\n    background: 0.3s ease 1;\\n  }\\n  to {\\n    background: none;\\n  }\\n}\\n@keyframes highlight-end {\\n  from {\\n    background: 0.3s ease 1;\\n  }\\n  to {\\n    background: none;\\n  }\\n}\\n.slickgrid-container {\\n  border-top: 0 none;\\n  border-bottom: 1px solid #dddddd;\\n  border-left: 0 none;\\n  border-right: 0 none;\\n  position: relative;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  /** Header Grouping **/\\n  /** Frozen/Pinned styling */\\n}\\n.slickgrid-container input[type=checkbox] {\\n  vertical-align: baseline;\\n  margin: 0;\\n}\\n.slickgrid-container .slick-viewport {\\n  border-top: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  border-right: 0 none;\\n}\\n.slickgrid-container .grid-canvas .slick-row {\\n  position: absolute;\\n  width: 100%;\\n  color: #000000;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-weight: normal;\\n}\\n.slickgrid-container .grid-canvas .slick-row:hover {\\n  background-color: #eff5fc;\\n  box-shadow: none;\\n  z-index: 5;\\n}\\n.slickgrid-container .grid-canvas .slick-row.active {\\n  padding: 5px 6px;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight {\\n  background-color: #c8ddea;\\n  -webkit-animation: highlight-start 1.5s ease 1;\\n          animation: highlight-start 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight.odd {\\n  background-color: #c8ddea;\\n  -webkit-animation: highlight-start 1.5s ease 1;\\n          animation: highlight-start 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight.odd .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight-end {\\n  background-color: #c8ddea;\\n  -webkit-animation: highlight-end 1.5s ease 1;\\n          animation: highlight-end 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight-end.odd {\\n  background-color: #c8ddea;\\n  -webkit-animation: highlight-end 1.5s ease 1;\\n          animation: highlight-end 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlighter {\\n  background: orange !important;\\n  transition-property: background;\\n  transition-duration: 3s;\\n  transition-timing-function: ease-in;\\n}\\n.slickgrid-container .grid-canvas .slick-row.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd {\\n  background-color: #f7f7f7;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd:hover {\\n  background-color: #eff5fc;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell {\\n  background: inherit;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.selected {\\n  background-color: #dae8f1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell {\\n  background: inherit;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.selected {\\n  background-color: #dae8f1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.slick-group-totals {\\n  color: gray;\\n  background: #fff;\\n}\\n.slickgrid-container .grid-canvas .slick-row.slick-group-totals .slick-cell {\\n  font-size: 14px;\\n}\\n.slickgrid-container .grid-canvas .slick-cell, .slickgrid-container .grid-canvas .slick-headerrow-column {\\n  border-top: 1px solid #dddddd;\\n  border-bottom: 1px transparent;\\n  border-left: 1px transparent;\\n  border-right: 1px transparent;\\n  box-shadow: inherit;\\n}\\n.slickgrid-container .grid-canvas .even {\\n  background-color: #ffffff;\\n}\\n.slickgrid-container .grid-canvas .slick-cell {\\n  padding: 5px 6px;\\n  font-size: 14px;\\n}\\n.slickgrid-container .grid-canvas .slick-cell td {\\n  font-size: 14px;\\n}\\nbody .slickgrid-container .grid-canvas .slick-cell {\\n  line-height: 20px;\\n}\\n.slickgrid-container .grid-canvas .slick-cell a, .slickgrid-container .grid-canvas .slick-cell a:visited, .slickgrid-container .grid-canvas .slick-cell .ui-widget-content a, .slickgrid-container .grid-canvas .slick-cell .ui-widget-content a:visited {\\n  color: #08c;\\n}\\n.slickgrid-container .grid-canvas .slick-cell a:hover, .slickgrid-container .grid-canvas .slick-cell .ui-widget-content a:hover {\\n  color: darker(#08c, 15%);\\n  border-bottom: none;\\n}\\n.slickgrid-container .grid-canvas .slick-cell table {\\n  height: 100%;\\n  padding: 0;\\n  background: none;\\n}\\n.slickgrid-container .grid-canvas .slick-cell td {\\n  padding: 0;\\n  vertical-align: middle;\\n  text-align: left;\\n}\\n.slickgrid-container .grid-canvas .slick-cell.selected {\\n  background-color: #dae8f1;\\n}\\n.slickgrid-container .grid-canvas .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-cell select:not([multiple]).form-control {\\n  height: 100%;\\n  padding: 0;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-title {\\n  height: 20px;\\n  line-height: 20px;\\n  vertical-align: none;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-toggle {\\n  color: #31708F;\\n  font-weight: bold;\\n  width: 14px;\\n  height: 20px;\\n  margin-right: 2px;\\n  cursor: pointer;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-toggle.expanded:before {\\n  display: inline-block;\\n  content: \\\"\\\";\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(14px + 4px);\\n  width: 14px;\\n  vertical-align: middle;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-toggle.collapsed:before {\\n  display: inline-block;\\n  content: \\\"\\\";\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(14px + 4px);\\n  width: 14px;\\n  vertical-align: middle;\\n}\\n.slickgrid-container .slick-header {\\n  border-top: 0 none;\\n  border-right: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  width: 100%;\\n  box-shadow: none !important;\\n}\\n.slickgrid-container .slick-headerrow {\\n  border-bottom: 0 none;\\n  border-top: 0 none;\\n  border-left: 0 none;\\n  border-right: 0 none;\\n}\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column {\\n  border: none;\\n  padding: 4px;\\n  background: #ffffff;\\n}\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column input,\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column select,\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column textarea {\\n  margin-right: 0;\\n  padding: 0 6px;\\n  width: none;\\n  height: 27px;\\n  box-sizing: border-box;\\n}\\n.slickgrid-container .slick-header-columns {\\n  background: none;\\n  background-color: #ffffff;\\n  width: calc(100% - 16px);\\n}\\n.slickgrid-container .slick-header-columns .slick-header-sortable .slick-column-name {\\n  margin-left: 0;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column {\\n  height: calc(17px * 2);\\n  line-height: 14px;\\n  margin: 0;\\n  border-top: 0 none;\\n  border-right: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  white-space: normal;\\n  /* like TH  */\\n  background: #ffffff;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  color: #000000;\\n  font-size: 14px;\\n  font-weight: bold;\\n  /* when sorting is possible and there's not yet a sort applied on the column\\n   we could display the sort ascending icon (with an opacity) as a hint */\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default {\\n  padding: 5px 6px;\\n  font-size: 14px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default td {\\n  font-size: 14px;\\n}\\nbody .slickgrid-container .slick-header-columns .slick-header-column.ui-state-default {\\n  line-height: 20px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column a, .slickgrid-container .slick-header-columns .slick-header-column a:visited {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column a:hover {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default {\\n  /* like TH  */\\n  background: #ffffff;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  color: #000000;\\n  font-size: 14px;\\n  font-weight: bold;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default a, .slickgrid-container .slick-header-columns .slick-header-column.ui-state-default a:visited {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default a:hover {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.slick-header-column-sorted {\\n  font-style: normal;\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column:hover {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-sortable-handle.ui-state-hover:not(.slick-header-column-sorted) .slick-sort-indicator:before {\\n  content: \\\"\\\";\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 14px;\\n  opacity: 0;\\n  display: inline-block;\\n  width: 14px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator {\\n  background: none;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 14px;\\n  position: absolute;\\n  display: inline-block;\\n  color: #31708F;\\n  width: 8px;\\n  height: 5px;\\n  left: auto;\\n  right: 10px;\\n  top: calc((15px * 2) - 15px);\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator-numbered {\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 10px;\\n  position: absolute;\\n  display: inline-block;\\n  color: #31708F;\\n  width: 8px;\\n  left: auto;\\n  right: 0px;\\n  top: calc(13px * 2);\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator-asc:before {\\n  content: \\\"\\\";\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 14px;\\n  opacity: 1;\\n  display: inline-block;\\n  width: 14px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator-desc:before {\\n  content: \\\"\\\";\\n  display: inline-block;\\n  opacity: 1;\\n  font-size: 14px;\\n  width: 14px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-resizable-handle {\\n  width: 7px;\\n  right: 0;\\n  z-index: 1;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-resizable-handle:hover {\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  border-right: 1px solid #d0d0d0;\\n  border-top: 0 none;\\n  width: 7px;\\n  border-radius: 8px;\\n  right: 0;\\n  height: 100%;\\n  top: 0;\\n  opacity: 1;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default {\\n  border-bottom: none;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns {\\n  border-top: none;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns .slick-header-column {\\n  height: 25px;\\n  border-left: none;\\n  border-right: none;\\n  font-size: calc(14px + 3px);\\n  justify-content: left;\\n  display: inline-grid;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns .slick-header-column:first-child {\\n  border-left: none;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns .slick-header-column:last-child {\\n  border-right: none;\\n}\\n.slickgrid-container .slick-row .slick-cell.frozen:last-child,\\n.slickgrid-container .slick-footerrow-column.frozen:last-child {\\n  border-right: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-header-column.frozen:last-child {\\n  border-right: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-pane-left .slick-preheader-panel .slick-header-column.frozen:last-child {\\n  border-right: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-headerrow-column.frozen:last-child {\\n  border-right: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-pane-bottom {\\n  border-top: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-viewport-bottom.slick-viewport-right {\\n  overflow-y: scroll !important;\\n}\\n.slickgrid-container .input-group > :not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback) {\\n  margin-left: 0;\\n}\\n.slickgrid-container .input-group > :not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback).ui-slider-horizontal {\\n  margin-left: 10px;\\n}\\n.slickgrid-container .input-group .input-group-addon .input-group-text {\\n  height: 100%;\\n}\\n.slickgrid-container .input-group .input-group-addon.input-group-append .input-group-text {\\n  margin-left: -1px;\\n  border-top-left-radius: 0;\\n  border-bottom-left-radius: 0;\\n}\\n.slickgrid-container .input-group .input-group-addon.input-group-prepend .input-group-text {\\n  margin-right: -1px;\\n  border-top-right-radius: 0;\\n  border-bottom-right-radius: 0;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.autocomplete-container {\\n  display: flex;\\n}\\n.ui-widget-content {\\n  background: none;\\n}\\n.ui-autocomplete .ui-menu-item {\\n  color: #333333;\\n}\\n.ui-autocomplete .ui-menu-item .ui-state-active {\\n  color: #333333;\\n}\\n.ui-autocomplete .ui-menu-item .ui-state-active:hover {\\n  margin: 0;\\n  border: 0;\\n  color: #333333;\\n}\\n.ui-autocomplete {\\n  background: none;\\n  position: absolute;\\n  z-index: 9999;\\n  padding: 0;\\n  margin-top: 2px;\\n  list-style: none;\\n  background-color: #ffffff;\\n  border: 1px solid rgba(0, 0, 0, 0.15);\\n  border-radius: 4px;\\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\\n  background-clip: padding-box;\\n  max-height: 25vh;\\n  min-height: 75px;\\n  min-width: 50px;\\n  overflow-y: auto;\\n  overflow-x: hidden;\\n  text-overflow: ellipsis;\\n}\\n.ui-autocomplete li div {\\n  display: block;\\n  color: #333333;\\n  padding: 3px 15px;\\n  font-weight: normal;\\n  line-height: 1.42857143;\\n  white-space: nowrap;\\n  list-style-image: none;\\n}\\n/* jquery ui loading spinner */\\n@-webkit-keyframes md-spin {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n@keyframes md-spin {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n.ui-autocomplete-loading + span:after {\\n  -webkit-animation: md-spin 2s infinite linear;\\n          animation: md-spin 2s infinite linear;\\n  display: inline-block;\\n  font-family: \\\"FontAwesome\\\";\\n  color: #4a4a4a;\\n  content: \\\"\\\" !important;\\n  /* important is required to override default jquery-ui styling */\\n  width: inherit;\\n  margin-left: -16px;\\n  line-height: 0px;\\n  vertical-align: inherit;\\n}\\n.ui-state-hover,\\n.ui-state-active,\\n.ui-state-focus {\\n  cursor: pointer;\\n  text-decoration: none;\\n  color: #262626;\\n  background-color: #e2edfa;\\n}\\n.ui-helper-hidden-accessible {\\n  border: 0;\\n  clip: rect(0 0 0 0);\\n  height: 1px;\\n  margin: -1px;\\n  overflow: hidden;\\n  position: absolute;\\n  padding: 0;\\n  width: 1px;\\n}\\n/* autocomplete custom styling */\\n.ui-autocomplete.autocomplete-custom-four-corners {\\n  width: 385px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list {\\n  width: calc(385px - 15px);\\n  padding: 3px 10px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list div {\\n  margin: 0;\\n  padding: 0;\\n  line-height: 16px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-left {\\n  float: left;\\n  height: 32px;\\n  width: 32px;\\n  padding-right: 3px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-left > img {\\n  height: 32px;\\n  width: 32px;\\n  margin-top: 0px;\\n  background-color: #ffffff;\\n  background-clip: content-box;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-bottom-left {\\n  color: #686868;\\n  font-size: calc(12px - 1px);\\n  font-style: italic;\\n  font-weight: normal;\\n  max-width: calc(calc(385px - 15px) - 32px - (10px * 2));\\n  display: inline-block;\\n  /*margin-left: 30px;*/\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-bottom-right {\\n  float: right;\\n  color: #686868;\\n  font-size: calc(12px - 1px);\\n  font-style: italic;\\n  font-weight: normal;\\n  /*margin-left: 30px;*/\\n  text-overflow: ellipsis;\\n  max-width: 250px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-top-left {\\n  color: #313131;\\n  font-style: normal;\\n  font-size: 12px;\\n  font-weight: bold;\\n  max-width: calc(calc(385px - 15px) - 32px - (10px * 2));\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  padding-left: 1px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-top-right {\\n  float: right;\\n  color: #3a85aa;\\n  font-style: normal;\\n  font-size: calc(12px - 1px);\\n  font-weight: bold;\\n  max-width: 100px;\\n}\\n/* autocomplete custom styling */\\n.ui-autocomplete.autocomplete-custom-two-rows {\\n  width: 285px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list {\\n  width: calc(285px - 15px);\\n  padding: 3px 10px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list div {\\n  margin: 0;\\n  padding: 0;\\n  line-height: 16px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-left {\\n  float: left;\\n  height: 32px;\\n  width: 32px;\\n  padding-right: 3px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-left > img {\\n  height: 32px;\\n  margin-top: 0px;\\n  background-color: #ffffff;\\n  background-clip: content-box;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-bottom-left {\\n  color: #686868;\\n  font-size: calc(12px - 1px);\\n  font-style: italic;\\n  font-weight: normal;\\n  max-width: calc(calc(285px - 15px) - 32px - (10px * 2));\\n  /*margin-left: 30px;*/\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-top-left {\\n  color: #313131;\\n  font-style: normal;\\n  font-size: 12px;\\n  font-weight: bold;\\n  max-width: calc(calc(285px - 15px) - 32px - (10px * 2));\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  padding-left: 1px;\\n}\\n.blue {\\n  color: #4949ff;\\n}\\n.orange {\\n  color: orange;\\n}\\n.red {\\n  color: red;\\n}\\n.bold {\\n  font-weight: bold;\\n}\\n.italic {\\n  font-style: italic;\\n}\";","import { Component, OnDestroy, OnInit, Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Subscription } from 'rxjs';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  DelimiterType,\r\n  FieldType,\r\n  FileType,\r\n  Filters,\r\n  Formatter,\r\n  Formatters,\r\n  GridOption,\r\n  GridStateChange,\r\n  unsubscribeAllObservables\r\n} from './../modules/angular-slickgrid';\r\n\r\nconst NB_ITEMS = 1500;\r\n\r\n// create a custom translate Formatter (typically you would move that a separate file, for separation of concerns)\r\nconst taskTranslateFormatter: Formatter = (row: number, cell: number, value: any, columnDef: any, dataContext: any, grid: any) => {\r\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\r\n  const translate = gridOptions.i18n;\r\n\r\n  return translate.instant('TASK_X', { x: value });\r\n};\r\n\r\n@Component({\r\n  templateUrl: './grid-localization.component.html'\r\n})\r\n@Injectable()\r\nexport class GridLocalizationComponent implements OnInit, OnDestroy {\r\n  title = 'Example 12: Localization (i18n)';\r\n  subTitle = `Support multiple locales with the ngx-translate plugin, following these steps (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Localization\" target=\"_blank\">Wiki docs</a>)\r\n  <ol class=\"small\">\r\n    <li>You first need to \"enableTranslate\" in the Grid Options</li>\r\n    <li>In the Column Definitions, you have following options</li>\r\n    <ul>\r\n      <li>To translate a header title, use \"nameKey\" with a translate key (nameKey: 'TITLE')</li>\r\n      <li>For the cell values, you need to use a Formatter, there's 2 ways of doing it</li>\r\n      <ul>\r\n        <li>formatter: myCustomTranslateFormatter <b>&lt;= \"Title\" column uses it</b></li>\r\n        <li>formatter: Formatters.translate, i18n: this.translateService <b>&lt;= \"Completed\" column uses it</b></li>\r\n      </ul>\r\n    </ul>\r\n    <li>For date localization, you need to create your own custom formatter. </li>\r\n    <ul>\r\n      <li>You can easily implement logic to switch between Formatters \"dateIso\" or \"dateUs\", depending on current locale.</li>\r\n    </ul>\r\n    <li>For the Select (dropdown) filter, you can fill in the \"labelKey\" property, if found it will use it, else it will use \"label\"</li>\r\n      <ul>\r\n        <li>What if your select options have totally different value/label pair? In this case, you can use the <b>customStructure: { label: 'customLabel', value: 'customValue'}</b> to change the property name(s) to use.'</li>\r\n        <li>What if you want to use \"customStructure\" and translation? Simply pass this flag <b>enableTranslateLabel: true</b></li>\r\n        <li>More info on the Select Filter <a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Select-Filter\" target=\"_blank\">Wiki page</a>\r\n      </ul>\r\n    <li>For more info about \"Download to File\", read the <a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Export-to-File\" target=\"_blank\">Wiki page</a></li>\r\n    </ol>\r\n  `;\r\n\r\n  private subscriptions: Subscription[] = [];\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions!: Column[];\r\n  gridOptions!: GridOption;\r\n  dataset!: any[];\r\n  selectedLanguage: string;\r\n  duplicateTitleHeaderCount = 1;\r\n  gridObj: any;\r\n\r\n  constructor(private translate: TranslateService) {\r\n    // always start with English for Cypress E2E tests to be consistent\r\n    const defaultLang = 'en';\r\n    this.translate.use(defaultLang);\r\n    this.selectedLanguage = defaultLang;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // also unsubscribe all Angular Subscriptions\r\n    this.subscriptions = unsubscribeAllObservables(this.subscriptions);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'title', name: 'Title', field: 'id', nameKey: 'TITLE', minWidth: 100,\r\n        formatter: taskTranslateFormatter,\r\n        sortable: true,\r\n        filterable: true,\r\n        params: { useFormatterOuputToFilter: true }\r\n      },\r\n      { id: 'description', name: 'Description', field: 'description', filterable: true, sortable: true, minWidth: 80 },\r\n      {\r\n        id: 'duration', name: 'Duration (days)', field: 'duration', nameKey: 'DURATION', sortable: true,\r\n        formatter: Formatters.percentCompleteBar, minWidth: 100,\r\n        exportWithFormatter: false,\r\n        filterable: true,\r\n        type: FieldType.number,\r\n        filter: { model: Filters.slider, /* operator: '>=',*/ params: { hideSliderNumber: true } }\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start', nameKey: 'START', minWidth: 100,\r\n        formatter: Formatters.dateIso, outputType: FieldType.dateIso, type: FieldType.date, exportWithFormatter: true,\r\n        filterable: true, filter: { model: Filters.compoundDate }\r\n      },\r\n      { id: 'finish', name: 'Finish', field: 'finish', nameKey: 'FINISH', formatter: Formatters.dateIso, outputType: FieldType.dateIso, type: FieldType.date, minWidth: 100, filterable: true, filter: { model: Filters.compoundDate } },\r\n      {\r\n        id: 'completedBool', name: 'Completed', field: 'completedBool', nameKey: 'COMPLETED', minWidth: 100,\r\n        sortable: true,\r\n        formatter: Formatters.checkmark,\r\n        exportCustomFormatter: Formatters.translateBoolean,\r\n        filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, labelKey: 'TRUE' }, { value: false, labelKey: 'FALSE' }],\r\n          model: Filters.singleSelect,\r\n          enableTranslateLabel: true,\r\n          filterOptions: {\r\n            autoDropWidth: true\r\n          }\r\n        }\r\n      },\r\n      {\r\n        id: 'completed', name: 'Completed', field: 'completed', nameKey: 'COMPLETED', formatter: Formatters.translate, sortable: true,\r\n        minWidth: 100,\r\n        exportWithFormatter: true, // you can set this property in the column definition OR in the grid options, column def has priority over grid options\r\n        filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: 'TRUE', labelKey: 'TRUE' }, { value: 'FALSE', labelKey: 'FALSE' }],\r\n          collectionSortBy: {\r\n            property: 'labelKey' // will sort by translated value since \"enableTranslateLabel\" is true\r\n          },\r\n          enableTranslateLabel: true,\r\n          model: Filters.singleSelect,\r\n          filterOptions: {\r\n            autoDropWidth: true\r\n          }\r\n        }\r\n      }\r\n      // OR via your own custom translate formatter\r\n      // { id: 'completed', name: 'Completed', field: 'completed', nameKey: 'COMPLETED', formatter: translateFormatter, sortable: true, minWidth: 100 }\r\n    ];\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableAutoResize: true,\r\n      enableExcelCopyBuffer: true,\r\n      enableExcelExport: true,\r\n      enableExport: true,\r\n      enableFiltering: true,\r\n      enableTranslate: true,\r\n      i18n: this.translate,\r\n      checkboxSelector: {\r\n        // you can toggle these 2 properties to show the \"select all\" checkbox in different location\r\n        hideInFilterHeaderRow: false,\r\n        hideInColumnTitleRow: true\r\n      },\r\n      enableCheckboxSelector: true,\r\n      enableRowSelection: true,\r\n      showCustomFooter: true, // display some metrics in the bottom custom footer\r\n      customFooterOptions: {\r\n        metricTexts: {\r\n          // default text displayed in the metrics section on the right\r\n          // all texts optionally support translation keys,\r\n          // if you wish to use that feature then use the text properties with the 'Key' suffix (e.g: itemsKey, ofKey, lastUpdateKey)\r\n          // example \"items\" for a plain string OR \"itemsKey\" to use a translation key\r\n          itemsKey: 'ITEMS',\r\n          ofKey: 'OF',\r\n          lastUpdateKey: 'LAST_UPDATE',\r\n        },\r\n        dateFormat: 'yyyy-MM-dd, hh:mm aaaaa\\'m\\'',\r\n        hideTotalItemCount: false,\r\n        hideLastUpdateTimestamp: false,\r\n      },\r\n      excelExportOptions: {\r\n        // optionally pass a custom header to the Excel Sheet\r\n        // a lot of the info can be found on Web Archive of Excel-Builder\r\n        // http://web.archive.org/web/20160907052007/http://excelbuilderjs.com/cookbook/fontsAndColors.html\r\n        customExcelHeader: (workbook, sheet) => {\r\n          const customTitle = this.translate.currentLang === 'fr' ? 'Titre qui est suffisament long pour être coupé' : 'My header that is long enough to wrap';\r\n          const stylesheet = workbook.getStyleSheet();\r\n          const aFormatDefn = {\r\n            'font': { 'size': 12, 'fontName': 'Calibri', 'bold': true, color: 'FF0000FF' }, // every color starts with FF, then regular HTML color\r\n            'alignment': { 'wrapText': true }\r\n          };\r\n          const formatterId = stylesheet.createFormat(aFormatDefn);\r\n          sheet.setRowInstructions(0, { height: 30 }); // change height of row 0\r\n\r\n          // excel cells start with A1 which is upper left corner\r\n          sheet.mergeCells('B1', 'D1');\r\n          const cols = [];\r\n          // push empty data on A1\r\n          cols.push({ value: '' });\r\n          // push data in B1 cell with metadata formatter\r\n          cols.push({ value: customTitle, metadata: { style: formatterId.id } });\r\n          sheet.data.push(cols);\r\n        }\r\n      },\r\n      exportOptions: {\r\n        // set at the grid option level, meaning all column will evaluate the Formatter (when it has a Formatter defined)\r\n        exportWithFormatter: true,\r\n        sanitizeDataExport: true\r\n      },\r\n      gridMenu: {\r\n        hideExportCsvCommand: false,           // false by default, so it's optional\r\n        hideExportTextDelimitedCommand: false  // true by default, so if you want it, you will need to disable the flag\r\n      }\r\n    };\r\n\r\n    this.loadData(NB_ITEMS);\r\n  }\r\n\r\n  // mock a dataset\r\n  loadData(count: number) {\r\n    this.dataset = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 30);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n\r\n      this.dataset[i] = {\r\n        id: i,\r\n        description: (i % 5) ? 'desc ' + i : '🚀🦄 español', // also add some random to test NULL field\r\n        duration: Math.round(Math.random() * 100) + '',\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\r\n        completedBool: (i % 5 === 0) ? true : false,\r\n        completed: (i % 5 === 0) ? 'TRUE' : 'FALSE'\r\n      };\r\n    }\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n    this.gridObj = angularGrid.slickGrid;\r\n  }\r\n\r\n  dynamicallyAddTitleHeader() {\r\n    // you can dynamically add your column to your column definitions\r\n    // and then use the spread operator [...cols] OR slice to force Angular to review the changes\r\n    const newCol = { id: `title${this.duplicateTitleHeaderCount++}`, field: 'id', nameKey: 'TITLE', formatter: taskTranslateFormatter, sortable: true, minWidth: 100, filterable: true, params: { useFormatterOuputToFilter: true } };\r\n    this.columnDefinitions.push(newCol);\r\n    this.columnDefinitions = this.columnDefinitions.slice(); // or use spread operator [...cols]\r\n\r\n    // NOTE if you use an Extensions (Checkbox Selector, Row Detail, ...) that modifies the column definitions in any way\r\n    // you MUST use \"getAllColumnDefinitions()\" from the GridService, using this will be ALL columns including the 1st column that is created internally\r\n    // for example if you use the Checkbox Selector (row selection), you MUST use the code below\r\n    /*\r\n    const allColumns = this.angularGrid.gridService.getAllColumnDefinitions();\r\n    allColumns.push(newCol);\r\n    this.columnDefinitions = [...allColumns]; // (or use slice) reassign to column definitions for Angular to do dirty checking\r\n    */\r\n  }\r\n\r\n  exportToExcel() {\r\n    this.angularGrid.excelExportService!.exportToExcel({\r\n      filename: 'Export',\r\n      format: FileType.xlsx\r\n    });\r\n  }\r\n\r\n  exportToFile(type = 'csv') {\r\n    this.angularGrid.exportService.exportToFile({\r\n      delimiter: (type === 'csv') ? DelimiterType.comma : DelimiterType.tab,\r\n      filename: 'myExport',\r\n      format: (type === 'csv') ? FileType.csv : FileType.txt\r\n    });\r\n  }\r\n\r\n  /** Dispatched event of a Grid State Changed event */\r\n  gridStateChanged(gridStateChanges: GridStateChange) {\r\n    console.log('Grid State changed:: ', gridStateChanges);\r\n    console.log('Grid State changed:: ', gridStateChanges.change);\r\n  }\r\n\r\n  switchLanguage() {\r\n    const nextLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\r\n    this.subscriptions.push(\r\n      this.translate.use(nextLanguage).subscribe(() => {\r\n        this.selectedLanguage = nextLanguage;\r\n      })\r\n    );\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-localization.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <hr />\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"language-button\\\" (click)=\\\"switchLanguage()\\\">\\r\\n        <i class=\\\"fa fa-language\\\"></i>\\r\\n        Switch Language\\r\\n      </button>\\r\\n      <b>Locale:</b> <span style=\\\"font-style: italic\\\" data-test=\\\"selected-locale\\\">{{selectedLanguage + '.json'}}</span>\\r\\n\\r\\n      <span style=\\\"margin-left: 20px\\\">\\r\\n        <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"exportToFile('csv')\\\">\\r\\n          <i class=\\\"fa fa-download\\\"></i>\\r\\n          Download to CSV\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"exportToFile('txt')\\\">\\r\\n          <i class=\\\"fa fa-download\\\"></i>\\r\\n          Download to Text\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"exportToExcel()\\\">\\r\\n          <i class=\\\"fa fa-file-excel-o text-success\\\"></i>\\r\\n          Download to Excel\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"dynamicallyAddTitleHeader()\\\">\\r\\n          <i class=\\\"fa fa-plus\\\"></i>\\r\\n          Dynamically Duplicate Title Column\\r\\n        </button>\\r\\n      </span>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"col-sm-12\\\">\\r\\n    <angular-slickgrid gridId=\\\"grid12\\\"\\r\\n                       [dataset]=\\\"dataset\\\"\\r\\n                       [gridOptions]=\\\"gridOptions\\\"\\r\\n                       [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                       (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n                       (onGridStateChanged)=\\\"gridStateChanged($event)\\\">\\r\\n    </angular-slickgrid>\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { Component, Injectable, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { AngularGridInstance, Column, ExtensionName, FieldType, Filters, Formatters, GridOption, unsubscribeAllObservables } from './../modules/angular-slickgrid';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  templateUrl: './grid-menu.component.html',\r\n  styleUrls: ['./grid-menu.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\n@Injectable()\r\nexport class GridMenuComponent implements OnInit, OnDestroy {\r\n  title = 'Example 9: Grid Menu Control';\r\n  subTitle = `\r\n    This example demonstrates using the <b>Slick.Controls.GridMenu</b> plugin to easily add a Grid Menu (aka hamburger menu) on the top right corner of the grid.\r\n    (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Grid-Menu\" target=\"_blank\">Wiki docs</a>)\r\n    <br/>\r\n    <ul>\r\n      <li>You can change the Grid Menu icon, for example \"fa-ellipsis-v\"&nbsp;&nbsp;<span class=\"fa fa-ellipsis-v\"></span>&nbsp;&nbsp;(which is shown in this example)</li>\r\n      <li>By default the Grid Menu shows all columns which you can show/hide them</li>\r\n      <li>You can configure multiple custom \"commands\" to show up in the Grid Menu and use the \"onGridMenuCommand()\" callback</li>\r\n      <li>Doing a \"right + click\" over any column header will also provide a way to show/hide a column (via the Column Picker Plugin)</li>\r\n      <li>You can change the icons of both picker via SASS variables as shown in this demo (check all SASS variables)</li>\r\n      <li><i class=\"fa fa-arrow-down\"></i> You can also show the Grid Menu anywhere on your page</li>\r\n    </ul>\r\n  `;\r\n\r\n  private subscriptions: Subscription[] = [];\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions!: Column[];\r\n  gridOptions!: GridOption;\r\n  dataset!: any[];\r\n  selectedLanguage: string;\r\n\r\n  constructor(private translate: TranslateService) {\r\n    // always start with English for Cypress E2E tests to be consistent\r\n    const defaultLang = 'en';\r\n    this.translate.use(defaultLang);\r\n    this.selectedLanguage = defaultLang;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // also unsubscribe all Angular Subscriptions\r\n    this.subscriptions = unsubscribeAllObservables(this.subscriptions);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      { id: 'title', name: 'Title', field: 'title', nameKey: 'TITLE', filterable: true, type: FieldType.string },\r\n      { id: 'duration', name: 'Duration', field: 'duration', nameKey: 'DURATION', sortable: true, filterable: true, type: FieldType.string },\r\n      {\r\n        id: 'percentComplete', name: '% Complete', field: 'percentComplete', nameKey: 'PERCENT_COMPLETE', sortable: true, filterable: true,\r\n        type: FieldType.number,\r\n        formatter: Formatters.percentCompleteBar,\r\n        filter: { model: Filters.compoundSlider, params: { hideSliderNumber: false } }\r\n      },\r\n      { id: 'start', name: 'Start', field: 'start', nameKey: 'START', filterable: true, type: FieldType.string },\r\n      { id: 'finish', name: 'Finish', field: 'finish', nameKey: 'FINISH', filterable: true, type: FieldType.string },\r\n      {\r\n        id: 'effort-driven', name: 'Completed', field: 'effortDriven', nameKey: 'COMPLETED', maxWidth: 80, formatter: Formatters.checkmark,\r\n        type: FieldType.boolean,\r\n        minWidth: 100,\r\n        sortable: true,\r\n        filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'true' }, { value: false, label: 'false' }],\r\n          model: Filters.singleSelect\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      columnPicker: {\r\n        hideForceFitButton: true,\r\n        hideSyncResizeButton: true,\r\n        onColumnsChanged: (e, args) => {\r\n          console.log('Column selection changed from Column Picker, visible columns: ', args.columns);\r\n        }\r\n      },\r\n      enableAutoResize: true,\r\n      enableGridMenu: true,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableFiltering: true,\r\n      enableCellNavigation: true,\r\n      gridMenu: {\r\n        // we could disable the menu entirely by returning false depending on some code logic\r\n        menuUsabilityOverride: (args) => true,\r\n\r\n        // use the click event position to reposition the grid menu (defaults to false)\r\n        // basically which offset do we want to use for reposition the grid menu,\r\n        // option1 is where we clicked (true) or option2 is where the icon button is located (false and is the defaults)\r\n        // you probably want to set this to True if you use an external grid menu button BUT set to False when using default grid menu\r\n        useClickToRepositionMenu: true,\r\n\r\n        // all titles optionally support translation keys, if you wish to use that feature then use the title properties with the 'Key' suffix (e.g: titleKey)\r\n        // example \"customTitle\" for a plain string OR \"customTitleKey\" to use a translation key\r\n        customTitleKey: 'CUSTOM_COMMANDS',\r\n        iconCssClass: 'fa fa-ellipsis-v', // defaults to \"fa-bars\"\r\n        hideForceFitButton: true,\r\n        hideSyncResizeButton: true,\r\n        hideToggleFilterCommand: false, // show/hide internal custom commands\r\n        menuWidth: 17,\r\n        resizeOnShowHeaderRow: true,\r\n        customItems: [\r\n          // add Custom Items Commands which will be appended to the existing internal custom items\r\n          // you cannot override an internal items but you can hide them and create your own\r\n          // also note that the internal custom commands are in the positionOrder range of 50-60,\r\n          // if you want yours at the bottom then start with 61, below 50 will make your command(s) show on top\r\n          {\r\n            iconCssClass: 'fa fa-question-circle',\r\n            titleKey: 'HELP',\r\n            disabled: false,\r\n            command: 'help',\r\n            positionOrder: 90,\r\n            cssClass: 'bold',     // container css class\r\n            textCssClass: 'blue'  // just the text css class\r\n          },\r\n          // you can pass divider as a string or an object with a boolean (if sorting by position, then use the object)\r\n          // note you should use the \"divider\" string only when items array is already sorted and positionOrder are not specified\r\n          { divider: true, command: '', positionOrder: 89 },\r\n          // 'divider',\r\n          {\r\n            title: 'Command 1',\r\n            command: 'command1',\r\n            positionOrder: 91,\r\n            cssClass: 'orange',\r\n            iconCssClass: 'fa fa-warning',\r\n            // you can use the \"action\" callback and/or use \"onCallback\" callback from the grid options, they both have the same arguments\r\n            action: (e, args) => alert(args.command),\r\n            itemUsabilityOverride: (args) => {\r\n              // for example disable the command if there's any hidden column(s)\r\n              if (args && Array.isArray(args.columns)) {\r\n                return args.columns.length === args.visibleColumns.length;\r\n              }\r\n              return true;\r\n            },\r\n          },\r\n          {\r\n            title: 'Command 2',\r\n            command: 'command2',\r\n            positionOrder: 92,\r\n            cssClass: 'red',        // container css class\r\n            textCssClass: 'italic', // just the text css class\r\n            action: (e, args) => alert(args.command),\r\n            itemVisibilityOverride: (args) => {\r\n              // for example hide this command from the menu if there's any filter entered\r\n              if (this.angularGrid) {\r\n                return this.isObjectEmpty(this.angularGrid.filterService.getColumnFilters());\r\n              }\r\n              return true;\r\n            },\r\n          },\r\n          {\r\n            title: 'Disabled command',\r\n            disabled: true,\r\n            command: 'disabled-command',\r\n            positionOrder: 98\r\n          }\r\n        ],\r\n        // you can use the \"action\" callback and/or use \"onCallback\" callback from the grid options, they both have the same arguments\r\n        onCommand: (e, args) => {\r\n          if (args.command === 'help') {\r\n            alert('Please help!!!');\r\n          }\r\n        },\r\n        onColumnsChanged: (e, args) => {\r\n          console.log('Column selection changed from Grid Menu, visible columns: ', args.columns);\r\n        }\r\n      },\r\n      enableTranslate: true,\r\n      i18n: this.translate\r\n    };\r\n\r\n    this.getData();\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  getData() {\r\n    // Set up some test columns.\r\n    const mockDataset = [];\r\n    for (let i = 0; i < 500; i++) {\r\n      mockDataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        phone: this.generatePhoneNumber(),\r\n        duration: Math.round(Math.random() * 25) + ' days',\r\n        percentComplete: Math.round(Math.random() * 100),\r\n        start: '01/01/2009',\r\n        finish: '01/05/2009',\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n    this.dataset = mockDataset;\r\n  }\r\n\r\n  generatePhoneNumber() {\r\n    let phone = '';\r\n    for (let i = 0; i < 10; i++) {\r\n      phone += Math.round(Math.random() * 9) + '';\r\n    }\r\n    return phone;\r\n  }\r\n\r\n  switchLanguage() {\r\n    const nextLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\r\n    this.subscriptions.push(\r\n      this.translate.use(nextLanguage).subscribe(() => {\r\n        this.selectedLanguage = nextLanguage;\r\n      })\r\n    );\r\n  }\r\n\r\n  toggleGridMenu(e: Event) {\r\n    if (this.angularGrid && this.angularGrid.extensionService) {\r\n      const gridMenuInstance = this.angularGrid.extensionService.getSlickgridAddonInstance(ExtensionName.gridMenu);\r\n      gridMenuInstance.showGridMenu(e);\r\n    }\r\n  }\r\n\r\n  private isObjectEmpty(obj: any) {\r\n    for (const key in obj) {\r\n      if (obj.hasOwnProperty(key) && obj[key] !== '') {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-menu.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"external-gridmenu\\\" (click)=\\\"toggleGridMenu($event)\\\">\\r\\n    <i class=\\\"fa fa-bars\\\"></i>\\r\\n    Grid Menu\\r\\n  </button>\\r\\n  <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"language\\\" (click)=\\\"switchLanguage()\\\">\\r\\n    <i class=\\\"fa fa-language\\\"></i>\\r\\n    Switch Language\\r\\n  </button>\\r\\n\\r\\n  <strong>Locale:</strong>\\r\\n  <span style=\\\"font-style: italic\\\"\\r\\n        data-test=\\\"selected-locale\\\">{{selectedLanguage + '.json'}}\\r\\n  </span>\\r\\n\\r\\n  <div class=\\\"col-sm-12\\\">\\r\\n    <angular-slickgrid gridId=\\\"grid9\\\"\\r\\n                       (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n                       [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                       [gridOptions]=\\\"gridOptions\\\"\\r\\n                       [dataset]=\\\"dataset\\\">\\r\\n    </angular-slickgrid>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \"@charset \\\"UTF-8\\\";\\n/* make sure to add the @import the SlickGrid Bootstrap Theme AFTER the variables changes */\\n/*!\\n * SlickGrid custom styling for Bootstrap (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n * @author: Ghislain B. (ghiscoding)\\n */\\n/*!\\n\\n/** SlickGrid Bootstrap Theme */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.pointer {\\n  cursor: pointer;\\n}\\n.slickgrid-container .slick-header-columns,\\n.slickgrid-container .slick-header-column {\\n  background: rgba(255, 255, 255, 0.6);\\n  box-sizing: content-box !important;\\n  /* this here only for Firefox! */\\n}\\n.slickgrid-container .slick-header-columns {\\n  /*border-bottom: 1px solid $grid-border-color;*/\\n  background: linear-gradient(rgba(0, 0, 0, 0) 60%, rgba(0, 0, 0, 0.1));\\n}\\n.slickgrid-container .slick-header-column {\\n  border-right: 1px solid fade(black, 3%);\\n  border-bottom: 1px solid fade(black, 3%);\\n}\\n.slickgrid-container .slick-header-column:hover {\\n  background: rgba(250, 250, 250, 0.6);\\n}\\n.slickgrid-container .slick-header-column-active {\\n  background: rgba(242, 242, 242, 0.6) !important;\\n}\\n.slickgrid-container .slick-headerrow {\\n  background: rgba(255, 255, 255, 0.6);\\n}\\n.slickgrid-container .slick-headerrow-column {\\n  background: #fafafa;\\n  border-bottom: 0;\\n}\\n.slickgrid-container .grid-canvas {\\n  background: white;\\n}\\n.slickgrid-container .slick-row {\\n  background: inherit;\\n  border: 0;\\n  line-height: 20px;\\n}\\n.slickgrid-container .slick-row .slick-cell {\\n  background: inherit;\\n  border: 1px transparent;\\n  padding-top: 3px;\\n  padding-bottom: 4px;\\n  padding-left: 4px;\\n  padding-right: 4px;\\n  box-sizing: border-box;\\n}\\n.slickgrid-container .slick-row .slick-cell.invalid {\\n  border-color: red;\\n  -moz-animation-duration: 0.2s;\\n  -webkit-animation-duration: 0.2s;\\n  -moz-animation-name: slickgrid-invalid-hilite;\\n  -webkit-animation-name: slickgrid-invalid-hilite;\\n  animation-duration: 0.2s;\\n  animation-name: slickgrid-invalid-hilite;\\n}\\n.slickgrid-container .slick-row .slick-cell.selected {\\n  background-color: #e7e7c3;\\n}\\n.slickgrid-container .slick-row .slick-cell.selected .cell-selection {\\n  background-color: transparent;\\n  /* show default selected row background */\\n}\\n.slickgrid-container .slick-row .slick-cell.active {\\n  box-shadow: inset 0 0 0 1px #aaaaaa;\\n  border: none;\\n  z-index: 6;\\n  padding: 5px 6px;\\n}\\n.slickgrid-container .slick-row .slick-cell.active input.editor-text {\\n  width: calc(100% + 2px);\\n  height: 100%;\\n  outline: 0;\\n  transform: translate(0, -2px);\\n}\\n.slickgrid-container .slick-row .slick-cell.active input.dual-editor-text {\\n  width: calc(50% + 1px - 5px);\\n  height: 100%;\\n  outline: 0;\\n  transform: translate(0, -2px);\\n}\\n.slickgrid-container .slick-row.odd .slick-cell {\\n  background: #f7f7f7;\\n}\\n.slickgrid-container .slick-row.odd .slick-cell.selected {\\n  background-color: #d6d6b2;\\n}\\n.slickgrid-container .slick-row.active-row .slick-cell {\\n  background-color: #e2fffd;\\n}\\n.slickgrid-container .slick-row.active-row .slick-cell.selected {\\n  background-color: red;\\n}\\n.slickgrid-container .slick-row.active-row.odd .slick-cell {\\n  background-color: #f2f2f2;\\n}\\n.slickgrid-container .slick-row.active-row.odd .slick-cell.selected {\\n  background-color: green;\\n}\\n.slickgrid-container .slick-row.loading {\\n  opacity: 0.5;\\n}\\n.slickgrid-container .slick-group {\\n  border-bottom: 2px solid silver;\\n}\\n.slickgrid-container .slick-group-toggle {\\n  width: 9px;\\n  height: 9px;\\n  margin-right: 5px;\\n}\\n.slickgrid-container .slick-group-toggle.expanded {\\n  background: none;\\n}\\n.slickgrid-container .slick-group-toggle.collapsed {\\n  background: none;\\n}\\n.slickgrid-container .slick-group-totals {\\n  color: gray;\\n  background: white;\\n}\\n.slickgrid-container .slick-sortable-placeholder {\\n  background: silver !important;\\n}\\n@-webkit-keyframes slickgrid-invalid-hilite {\\n  from {\\n    box-shadow: 0 0 6px red;\\n  }\\n  to {\\n    box-shadow: none;\\n  }\\n}\\n@keyframes slickgrid-invalid-hilite {\\n  from {\\n    box-shadow: 0 0 6px red;\\n  }\\n  to {\\n    box-shadow: none;\\n  }\\n}\\n.slickgrid-container .header-overlay,\\n.slickgrid-container .cell-overlay,\\n.slickgrid-container .selection-cell-overlay {\\n  display: block;\\n  position: absolute;\\n  z-index: 999;\\n}\\n.slickgrid-container .slick-cell > .editor-select {\\n  position: absolute;\\n  left: 0;\\n  right: 0;\\n  width: auto;\\n  top: 0;\\n  bottom: 0;\\n  max-width: 100%;\\n  min-width: 0;\\n  margin: 0;\\n}\\n.slickgrid-container .slick-range-decorator {\\n  z-index: 100;\\n  pointer-events: none;\\n  background: transparent;\\n  border: none;\\n  outline: black;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slickgrid-container {\\n  overflow: hidden;\\n  outline: 0;\\n  position: relative;\\n  box-sizing: content-box;\\n}\\n.slickgrid-container .slick-group-header-columns {\\n  position: relative;\\n  white-space: nowrap;\\n  cursor: default;\\n  overflow: hidden;\\n}\\n.slickgrid-container .slick-group-header {\\n  width: 100%;\\n  overflow: hidden;\\n  border-left: 0px;\\n}\\n.slickgrid-container .slick-group-header-column.ui-state-default {\\n  position: relative;\\n  display: inline-block;\\n  box-sizing: content-box !important;\\n  /* this here only for Firefox! */\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  height: 16px;\\n  line-height: 16px;\\n  margin: 0;\\n  padding: 4px;\\n}\\n.slickgrid-container .slick-viewport,\\n.slickgrid-container .slick-top-panel-scroller,\\n.slickgrid-container .slick-header,\\n.slickgrid-container .slick-headerrow,\\n.slickgrid-container .slick-footerrow {\\n  position: relative;\\n  width: 100%;\\n  border: 1px solid fade(black, 3%);\\n  border-right-color: transparent;\\n  border-bottom-color: transparent;\\n  border-right-width: 0;\\n  border-bottom-width: 0;\\n  margin: 0;\\n  outline: 0;\\n}\\n.slickgrid-container .slick-top-panel-scroller {\\n  overflow: hidden;\\n}\\n.slickgrid-container .slick-pane {\\n  position: absolute;\\n  outline: 0;\\n  overflow: hidden;\\n  width: 100%;\\n}\\n.slickgrid-container .slick-pane-header {\\n  display: block;\\n  background-color: #ffffff;\\n  border-bottom: 0 none;\\n}\\n.slickgrid-container .slick-pane-top {\\n  box-sizing: border-box;\\n  border-top: none;\\n}\\n.slickgrid-container .slick-viewport {\\n  overflow: auto;\\n}\\n.slickgrid-container .slick-viewport ::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n}\\n.slickgrid-container .slick-viewport ::-webkit-scrollbar-thumb {\\n  border-radius: 4px;\\n  border: 2px solid white;\\n  /* should match background, can't be transparent */\\n  background-color: rgba(0, 0, 0, 0.5);\\n}\\n.slickgrid-container .slick-header,\\n.slickgrid-container .slick-headerrow,\\n.slickgrid-container .slick-footerrow {\\n  overflow: hidden;\\n}\\n.slickgrid-container .slick-headerrow {\\n  border-top-color: transparent;\\n  border-top-width: 0;\\n}\\n.slickgrid-container .slick-top-panel,\\n.slickgrid-container .slick-header-columns,\\n.slickgrid-container .slick-headerrow-columns,\\n.slickgrid-container .slick-footerrow-columns {\\n  position: relative;\\n  white-space: nowrap;\\n  cursor: default;\\n  overflow: hidden;\\n  margin: 0;\\n  padding: 0;\\n  border: 0;\\n  outline: 0;\\n}\\n.slickgrid-container .slick-cell,\\n.slickgrid-container .slick-header-column,\\n.slickgrid-container .slick-headerrow-column,\\n.slickgrid-container .slick-footerrow-column {\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  border-top-color: transparent;\\n  border-left-color: transparent;\\n  border-top-width: 0;\\n  border-left-width: 0;\\n  margin: 0;\\n  padding: 0;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  vertical-align: middle;\\n  z-index: 1;\\n  white-space: nowrap;\\n  cursor: default;\\n}\\n.slickgrid-container .slick-cell.slick-header-is-leaf,\\n.slickgrid-container .slick-header-column.slick-header-is-leaf,\\n.slickgrid-container .slick-headerrow-column.slick-header-is-leaf,\\n.slickgrid-container .slick-footerrow-column.slick-header-is-leaf {\\n  border-bottom-color: transparent;\\n  border-bottom-width: 0;\\n}\\n.slickgrid-container .slick-header-column.ui-state-default {\\n  position: relative;\\n  display: inline-block;\\n  box-sizing: content-box !important;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  height: 16px;\\n  line-height: 16px;\\n  margin: 0;\\n  padding: 4px;\\n  border-right: 1px solid fade(black, 3%);\\n  border-left: 0px !important;\\n  border-top: 0px !important;\\n  border-bottom: 0px !important;\\n  float: left;\\n}\\n.slickgrid-container .slick-cell {\\n  box-sizing: border-box;\\n  border-style: solid;\\n  padding: 1px 2px 1px 2px;\\n}\\n.slickgrid-container .slick-header-column {\\n  padding: 4px 4px 4px 4px;\\n}\\n.slickgrid-container .grid-canvas {\\n  position: relative;\\n  outline: 0;\\n}\\n.slickgrid-container .slick-row {\\n  position: absolute;\\n  border: 0;\\n  width: 100%;\\n}\\n.slickgrid-container .slick-header-column-sorted {\\n  font-style: italic;\\n}\\n.slickgrid-container .slick-sort-indicator {\\n  display: inline-block;\\n  width: 8px;\\n  height: 5px;\\n  margin-left: 4px;\\n  margin-top: 6px;\\n  position: absolute;\\n  left: 0;\\n}\\n.slickgrid-container .slick-sort-indicator-desc:before {\\n  content: \\\"\\\";\\n}\\n.slickgrid-container .slick-sort-indicator-asc:before {\\n  content: \\\"\\\";\\n}\\n.slickgrid-container .slick-header-sortable .slick-column-name {\\n  margin-left: 10px;\\n}\\n.slickgrid-container .slick-header.ui-state-default {\\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\\n}\\n.slickgrid-container .slick-column-name {\\n  text-overflow: ellipsis;\\n}\\n.slickgrid-container .slick-resizable-handle {\\n  position: absolute;\\n  font-size: 0.1px;\\n  display: block;\\n  cursor: col-resize;\\n  width: 4px;\\n  right: 0;\\n  top: 0;\\n  height: 100%;\\n}\\n.slickgrid-container .slick-resizable-handle-hover {\\n  background-color: #ccc;\\n}\\n.slickgrid-container .slick-sortable-placeholder {\\n  background: silver;\\n}\\n.slickgrid-container .slick-group-toggle {\\n  display: inline-block;\\n}\\n.slickgrid-container .slick-cell.highlighted {\\n  background: lightskyblue;\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: all 0.5s;\\n}\\n.slickgrid-container .slick-cell.flashing {\\n  border: 1px solid red !important;\\n}\\n.slickgrid-container .slick-cell.editable {\\n  z-index: 11;\\n  overflow: visible;\\n  background: white;\\n  border-color: black;\\n  border-style: solid;\\n}\\n.slickgrid-container .slick-cell:focus {\\n  outline: none;\\n}\\n.slickgrid-container .slick-reorder-proxy {\\n  display: inline-block;\\n  background: blue;\\n  opacity: 0.15;\\n  cursor: move;\\n}\\n.slickgrid-container .slick-reorder-guide {\\n  display: inline-block;\\n  height: 2px;\\n  background: blue;\\n  opacity: 0.7;\\n}\\n.slickgrid-container .slick-selection {\\n  z-index: 10;\\n  position: absolute;\\n  border: 2px dashed black;\\n}\\n.slickgrid-container .slick-pane {\\n  position: absolute;\\n  outline: 0;\\n  overflow: hidden;\\n  width: 100%;\\n}\\n.flatpickr-wrapper {\\n  z-index: 10000;\\n}\\n.interact-placeholder {\\n  background: red !important;\\n  display: inline-block;\\n  float: left;\\n  transform: translate(0px, -100%);\\n}\\n.interact-drop-active {\\n  box-shadow: inset 0 0 8px rgba(7, 67, 128, 0.5);\\n}\\n.interact-can-drop {\\n  opacity: 0.9;\\n}\\n.scrollbar-fix::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n}\\n/* control variables */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-columnpicker {\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  background-color: #ffffff;\\n  border: 1px solid #b8b8b8;\\n  border-radius: 2px;\\n  padding: 6px;\\n  box-shadow: 1px 1px 1px silver;\\n  min-width: 150px;\\n  cursor: default;\\n  position: absolute;\\n  z-index: 2000;\\n  overflow: auto;\\n  resize: both;\\n  width: auto;\\n  padding-right: 24px;\\n  /* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n}\\n.slick-columnpicker > .close {\\n  float: right;\\n  position: absolute;\\n  color: #c3c3c3;\\n  cursor: pointer;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 21px;\\n  background-color: #ffffff;\\n  border: 0px solid #9c9c9c;\\n  right: 5px;\\n  top: 0px;\\n}\\n.slick-columnpicker > .close:hover {\\n  color: #838383;\\n}\\n.slick-columnpicker > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-columnpicker li {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n  background: none;\\n}\\n.slick-columnpicker li a {\\n  display: block;\\n  padding: 4px;\\n  font-weight: bold;\\n}\\n.slick-columnpicker li a:hover {\\n  background-color: #ffffff;\\n}\\n.slick-columnpicker li label {\\n  font-weight: normal;\\n}\\n.slick-columnpicker li label input {\\n  margin: 4px;\\n}\\n.slick-columnpicker div.title {\\n  font-size: calc(14px + 2px);\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: 1px solid #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-columnpicker-list {\\n  /** make sure the hidden class exist, it was removed in BS4 */\\n  /* replace checkboxes by Font-Awesome icons */\\n}\\n.slick-columnpicker-list li.hidden {\\n  display: none;\\n}\\n.slick-columnpicker-list li {\\n  width: calc(100% + 24px - 6px);\\n  /* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-columnpicker-list li:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-columnpicker-list li label {\\n  cursor: pointer;\\n  width: 100%;\\n  margin-bottom: 0px;\\n}\\n.slick-columnpicker-list hr {\\n  margin: 6px 0;\\n  border: 0;\\n  border-top: 1px solid #d5d5d5;\\n  width: calc(100% + 24px - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-columnpicker-list input[type=checkbox] {\\n  display: none;\\n  /* to hide the checkbox itself */\\n  margin-left: 4px;\\n  margin-top: 3px;\\n}\\n.slick-columnpicker-list input[type=checkbox] + label:before {\\n  cursor: pointer;\\n  content: \\\"\\\";\\n  color: #31708F;\\n  display: inline-block;\\n  font-weight: bold;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 13px;\\n  opacity: 0.2;\\n  /* unchecked icon */\\n  margin-right: 4px;\\n  width: 13px;\\n}\\n.slick-columnpicker-list input[type=checkbox] + label:hover:before {\\n  opacity: 0.35;\\n}\\n.slick-columnpicker-list input[type=checkbox]:checked + label:before {\\n  opacity: 1;\\n  /* checked icon */\\n  content: \\\"\\\";\\n  width: 13px;\\n}\\n.slick-gridmenu {\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  background-color: #ffffff;\\n  border: 1px solid #b8b8b8;\\n  border-radius: 2px;\\n  padding: 6px;\\n  box-shadow: 1px 1px 1px silver;\\n  min-width: 200px;\\n  cursor: default;\\n  position: absolute;\\n  z-index: 2000;\\n  overflow: auto;\\n  width: -webkit-max-content;\\n  width: -moz-max-content;\\n  width: max-content;\\n}\\n.slick-gridmenu > .close {\\n  float: right;\\n  position: absolute;\\n  color: #c3c3c3;\\n  cursor: pointer;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 21px;\\n  background-color: #ffffff;\\n  border: 0px solid #9c9c9c;\\n  right: 5px;\\n  top: 0px;\\n}\\n.slick-gridmenu > .close:hover {\\n  color: #838383;\\n}\\n.slick-gridmenu > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-gridmenu div.title {\\n  font-size: calc(14px + 2px);\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: solid 1px #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-gridmenu li {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n  background: none;\\n}\\n.slick-gridmenu li a {\\n  display: block;\\n  padding: 4px;\\n  font-weight: bold;\\n}\\n.slick-gridmenu li a:hover {\\n  background-color: #ffffff;\\n}\\n.slick-gridmenu li label {\\n  font-weight: normal;\\n}\\n.slick-gridmenu li label input {\\n  margin: 4px;\\n}\\n.slick-gridmenu input {\\n  margin: 4px;\\n}\\n.slick-gridmenu-button {\\n  position: absolute;\\n  cursor: pointer;\\n  right: 0;\\n  padding: 0 2px;\\n  margin-top: 5px;\\n  background-color: transparent;\\n  border: 0;\\n  width: 22px;\\n  font-size: 14px;\\n  z-index: 2;\\n}\\n.slick-gridmenu-custom {\\n  margin-bottom: 10px;\\n}\\n/* Menu items */\\n.slick-gridmenu-item {\\n  cursor: pointer;\\n  display: block;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-gridmenu-item:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-gridmenu-item.slick-gridmenu-item-divider {\\n  cursor: default;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 5px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-gridmenu-item.slick-gridmenu-item-divider:hover {\\n  border: none;\\n  background-color: silver;\\n}\\n.slick-gridmenu-item-divider.slick-gridmenu-item:hover {\\n  background-color: #e7e7e7;\\n}\\n.slick-gridmenu-item-disabled {\\n  cursor: inherit;\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n}\\n.slick-gridmenu-item-disabled .slick-gridmenu-icon, .slick-gridmenu-item-disabled .slick-gridmenu-content {\\n  color: silver;\\n}\\n.slick-gridmenu-item-hidden {\\n  display: none;\\n}\\n.slick-gridmenu-icon {\\n  display: inline-block;\\n  font-size: 14px;\\n  line-height: 14px;\\n  margin-right: 4px;\\n  width: 14px;\\n  vertical-align: middle;\\n  background-repeat: no-repeat;\\n  background-position: center center;\\n}\\n.slick-gridmenu-content {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.slick-gridmenu-list {\\n  /** make sure the hidden class exist, it was removed in BS4 */\\n  /* replace checkboxes by Font-Awesome icons */\\n}\\n.slick-gridmenu-list li.hidden {\\n  display: none;\\n}\\n.slick-gridmenu-list li {\\n  width: auto;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-gridmenu-list li:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-gridmenu-list li label {\\n  cursor: pointer;\\n  width: 100%;\\n  margin-bottom: 0px;\\n}\\n.slick-gridmenu-list hr {\\n  margin: 6px 0;\\n  border: 0;\\n  border-top: 1px solid #dddddd;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-gridmenu-list input[type=checkbox] {\\n  display: none;\\n  /* to hide the checkbox itself */\\n  margin-left: 4px;\\n  margin-top: 3px;\\n}\\n.slick-gridmenu-list input[type=checkbox] + label:before {\\n  cursor: pointer;\\n  content: \\\"\\\";\\n  color: #31708F;\\n  display: inline-block;\\n  font-weight: bold;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 13px;\\n  opacity: 0.7;\\n  /* unchecked icon */\\n  margin-right: 4px;\\n  width: 13px;\\n}\\n.slick-gridmenu-list input[type=checkbox] + label:hover:before {\\n  opacity: 1;\\n}\\n.slick-gridmenu-list input[type=checkbox]:checked + label:before {\\n  content: \\\"\\\";\\n  opacity: 1;\\n  /* checked icon */\\n  width: 13px;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-cell input.dual-editor-text,\\n.slick-cell input.editor-text {\\n  border: 1px solid #e2e2e2;\\n  border-radius: 3px;\\n  background: #ffffff;\\n  padding-bottom: 0;\\n  padding-left: 2px;\\n  padding-right: 0;\\n  padding-top: 0;\\n  margin-left: -2px;\\n  margin-bottom: 2px;\\n  margin-right: 2px;\\n  margin-top: 2px;\\n  width: calc(100% + 2px);\\n  transform: translate(0, -2px);\\n  outline: 0;\\n  height: 100%;\\n}\\n.slick-cell input.dual-editor-text:focus,\\n.slick-cell input.editor-text:focus {\\n  outline: 0;\\n  border-color: #3e8eb5;\\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px rgba(53, 121, 154, 0.3);\\n}\\n.slick-cell input.dual-editor-text.right,\\n.slick-cell input.editor-text.right {\\n  margin-left: calc(-2px + 9px);\\n}\\n.slick-cell input.dual-editor-text[readonly],\\n.slick-cell input.editor-text[readonly] {\\n  background-color: #f0f0f0;\\n}\\n.slick-cell .slider-editor-input:focus {\\n  outline: 0;\\n  border-color: #3e8eb5;\\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px rgba(53, 121, 154, 0.3);\\n}\\n.slick-cell .flatpickr.input-group .input-group-btn .btn {\\n  background-color: #eeeeee;\\n  border: 1px solid #cccccc;\\n  padding: 6px;\\n  border-top-right-radius: 3px;\\n  border-bottom-right-radius: 3px;\\n  cursor: pointer;\\n  height: 24px;\\n}\\n.slick-cell .flatpickr.input-group .input-group-btn .btn.icon-close:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: inherit;\\n  content: \\\"\\\";\\n  vertical-align: middle;\\n  display: inline-block;\\n  height: initial;\\n  width: initial;\\n  margin-top: -14px;\\n}\\n.slick-cell .flatpickr-alt-input {\\n  cursor: pointer;\\n  height: 24px;\\n  border-top-left-radius: 3px !important;\\n  border-bottom-left-radius: 3px !important;\\n  padding: 6px 2px;\\n}\\n.slick-cell .flatpickr-alt-input.editor-text {\\n  cursor: pointer;\\n  background-color: #ffffff;\\n}\\n.slick-cell .flatpickr-alt-input.editor-text:focus {\\n  outline: 0;\\n  border-color: #3e8eb5;\\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px rgba(53, 121, 154, 0.3);\\n}\\n/* Long Text Editor */\\n.slick-large-editor-text {\\n  z-index: 10000;\\n  position: absolute;\\n  background: #ffffff;\\n  padding: 5px;\\n  border: 2px solid #a0a0a0;\\n  border-radius: 6px;\\n}\\n.slick-large-editor-text .editor-footer {\\n  text-align: right;\\n}\\n.slick-large-editor-text .editor-footer button {\\n  margin-left: 2px;\\n  border-radius: 3px;\\n}\\n.slick-large-editor-text textarea {\\n  background: #ffffff;\\n  border: 0;\\n  outline: 0;\\n}\\n.slick-large-editor-text .counter {\\n  float: left;\\n  font-size: 11px;\\n  margin-top: 8px;\\n}\\n.slick-large-editor-text .counter .separator {\\n  margin: 0 1px;\\n}\\n/* plugin variables */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-cell-menu {\\n  position: absolute;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  background: #ffffff;\\n  border: 1px solid #BFBDBD;\\n  border-radius: 2px;\\n  min-width: 175px;\\n  padding: 6px;\\n  z-index: 100000;\\n  cursor: default;\\n  display: inline-block;\\n  overflow: auto;\\n  resize: both;\\n  /* make sure that other UI frameworks aren't overriding our properties (Bulma was one of them affecting this) */\\n  /* resize cell menu item width when there's a close button on same line */\\n}\\n.slick-cell-menu.dropdown, .slick-cell-menu.dropup {\\n  display: inline-block;\\n  position: absolute;\\n}\\n.slick-cell-menu > .close {\\n  float: right;\\n  cursor: pointer;\\n  color: #c3c3c3;\\n  background-color: #ffffff;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  border: 0px solid #9c9c9c;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 21px;\\n}\\n.slick-cell-menu > .close:hover {\\n  color: #838383;\\n}\\n.slick-cell-menu > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-cell-menu .slick-cell-menu-option-list .title,\\n.slick-cell-menu .slick-cell-menu-command-list .title {\\n  font-size: calc(14px + 2px);\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: 1px solid #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-cell-menu .slick-cell-menu-item {\\n  cursor: pointer;\\n  display: flex;\\n  align-items: center;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  font-size: 14px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n  width: 100%;\\n  height: 24px;\\n  /* Disabled item */\\n}\\n.slick-cell-menu .slick-cell-menu-item:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-divider {\\n  cursor: default;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 5px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-divider:hover {\\n  border: none;\\n  background-color: #e7e7e7;\\n}\\n.slick-cell-menu .slick-cell-menu-item .slick-cell-menu-icon {\\n  font-size: 14px;\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  display: inline-block;\\n  line-height: calc(14px + 2px);\\n  margin-right: 4px;\\n  vertical-align: middle;\\n  width: 16px;\\n}\\n.slick-cell-menu .slick-cell-menu-item .slick-cell-menu-content {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-disabled {\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n  cursor: inherit;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-disabled .slick-cell-menu-icon, .slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-disabled .slick-cell-menu-content {\\n  color: silver;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-hidden {\\n  display: none;\\n}\\n.slick-cell-menu .slick-cell-menu-option-list {\\n  margin-bottom: 10px;\\n}\\n.slick-cell-menu button + .slick-cell-menu-command-list .slick-cell-menu-item:first-child,\\n.slick-cell-menu button + .slick-cell-menu-option-list .slick-cell-menu-item:first-child {\\n  width: calc(100% - 15px - 3px);\\n}\\n.slick-context-menu {\\n  position: absolute;\\n  background: #ffffff;\\n  border: 1px solid #BFBDBD;\\n  border-radius: 2px;\\n  min-width: 175px;\\n  padding: 6px;\\n  z-index: 100000;\\n  cursor: default;\\n  display: inline-block;\\n  overflow: auto;\\n  resize: both;\\n  /* make sure that other UI frameworks aren't overriding our properties (Bulma was one of them affecting this) */\\n  /* resize context menu item width when there's a close button on same line */\\n}\\n.slick-context-menu.dropdown, .slick-context-menu.dropup {\\n  display: inline-block;\\n  position: absolute;\\n}\\n.slick-context-menu > .close {\\n  float: right;\\n  color: #c3c3c3;\\n  background-color: #ffffff;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  border: 0px solid #9c9c9c;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 21px;\\n}\\n.slick-context-menu > .close:hover {\\n  color: #838383;\\n}\\n.slick-context-menu > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-context-menu .title {\\n  font-size: calc(14px + 2px);\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: 1px solid #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-context-menu .slick-context-menu-item {\\n  cursor: pointer;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  font-size: 14px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n  width: 100%;\\n  /* Disabled item */\\n}\\n.slick-context-menu .slick-context-menu-item:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-divider {\\n  cursor: default;\\n  display: block;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 5px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-divider:hover {\\n  border: none;\\n  background-color: #e7e7e7;\\n}\\n.slick-context-menu .slick-context-menu-item .slick-context-menu-icon {\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  display: inline-block;\\n  font-size: 14px;\\n  height: 16px;\\n  line-height: 14px;\\n  margin-right: 4px;\\n  vertical-align: middle;\\n  width: 16px;\\n}\\n.slick-context-menu .slick-context-menu-item .slick-context-menu-content {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-disabled {\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n  cursor: inherit;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-disabled .slick-context-menu-icon, .slick-context-menu .slick-context-menu-item.slick-context-menu-item-disabled .slick-context-menu-content {\\n  color: silver;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-hidden {\\n  display: none;\\n}\\n.slick-context-menu .slick-context-menu-option-list {\\n  margin-bottom: 10px;\\n}\\n.slick-context-menu button + .slick-context-menu-command-list .slick-context-menu-item:first-child,\\n.slick-context-menu button + .slick-context-menu-option-list .slick-context-menu-item:first-child {\\n  width: calc(100% - 15px - 3px);\\n}\\n.slick-column-name,\\n.slick-sort-indicator {\\n  /**\\n   * This makes all \\\"float:right\\\" elements after it that spill over to the next line\\n   * display way below the lower boundary of the column thus hiding them.\\n   */\\n  float: left;\\n  margin-bottom: 100px;\\n}\\n.slick-header-button {\\n  /**\\n   * This makes all \\\"float:right\\\" elements after it that spill over to the next line\\n   * display way below the lower boundary of the column thus hiding them.\\n   */\\n  float: right;\\n  vertical-align: top;\\n  margin: 1px;\\n  margin-bottom: 100px;\\n  height: 15px;\\n  width: 15px;\\n  background-repeat: no-repeat;\\n  background-position: center center;\\n  cursor: pointer;\\n}\\n.slick-header-button-hidden {\\n  width: 0;\\n  margin-right: -8px;\\n  transition: 0.2s width;\\n}\\n.slick-header-column:hover > .slick-header-button {\\n  width: 15px;\\n}\\n.slick-header-menubutton {\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  cursor: pointer;\\n  display: none;\\n  position: absolute;\\n  height: 35px;\\n  border: 1px solid #BFBDBD;\\n  border-width: 0px;\\n  padding: 0px;\\n  color: #4a4a4a;\\n  bottom: 0;\\n  right: 3px;\\n  top: 0;\\n  width: 14px;\\n}\\n.slick-header-menubutton:before {\\n  display: inline-block;\\n  content: \\\"\\\";\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 14px;\\n  font-weight: normal;\\n  width: 14px;\\n}\\n.slick-header-column .slick-header-menubutton {\\n  display: none;\\n}\\n.slick-header-column:hover .slick-header-menubutton {\\n  display: inline-block;\\n}\\n.slick-header-menu {\\n  position: absolute;\\n  margin: 0;\\n  background: none repeat scroll 0 0 #ffffff;\\n  border: 1px solid #BFBDBD;\\n  border-radius: 2px;\\n  min-width: 175px;\\n  padding: 6px;\\n  z-index: 100000;\\n  cursor: default;\\n  display: inline-block;\\n}\\n.slick-header-menu .filter {\\n  border: 1px solid #BFBDBD;\\n  font-size: 8pt;\\n  height: 400px;\\n  margin-top: 6px;\\n  overflow: scroll;\\n  padding: 4px;\\n  white-space: nowrap;\\n  width: 200px;\\n}\\n.slick-header-menu .textfilter > label {\\n  display: inline-block;\\n  margin-left: 5px;\\n  margin-right: 10px;\\n}\\n.slick-header-menu .textfilter > input[type=text] {\\n  width: 70%;\\n}\\n.slick-header-menuitem {\\n  cursor: pointer;\\n  display: block;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-header-menuitem:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-header-menuitem.slick-header-menuitem-divider {\\n  cursor: default;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 3px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-header-menuitem.slick-header-menuitem-divider:hover {\\n  border: none;\\n  background-color: silver;\\n}\\n.slick-header-menuitem-divider.slick-header-menuitem:hover {\\n  background-color: #e7e7e7;\\n}\\n.slick-header-menuicon {\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  display: inline-block;\\n  color: #000000;\\n  font-size: 14px;\\n  font-weight: normal;\\n  line-height: 14px;\\n  height: 16px;\\n  margin-right: 4px;\\n  vertical-align: middle;\\n  width: 16px;\\n  /* Font Awesome sorting icons are not aligned in middle, let's align them ourselves */\\n}\\n.slick-header-menuicon.fa-sort-asc {\\n  transform: translateY(3px);\\n}\\n.slick-header-menuicon.fa-sort-desc {\\n  transform: translateY(-2px);\\n}\\n.slick-header-menucontent {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n/* Disabled */\\n.slick-header-menuitem-disabled {\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n  cursor: inherit;\\n}\\n.slick-header-menuitem-disabled .slick-header-menuicon, .slick-header-menuitem-disabled .slick-header-menucontent {\\n  color: silver;\\n}\\n.slick-header-menuitem-hidden {\\n  display: none;\\n}\\n.slick-cell.cell-reorder:before {\\n  display: inline-block;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 14px;\\n  content: \\\"\\\";\\n  width: 14px;\\n}\\n.slick-cell.cell-reorder {\\n  cursor: move;\\n}\\n.slick-headerrow-column,\\n.slick-column-name,\\n.slick-cell-checkboxsel {\\n  text-align: center;\\n}\\n.slick-headerrow-column #filter-checkbox-selectall-container,\\n.slick-column-name #filter-checkbox-selectall-container,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  height: 100%;\\n}\\n.slick-headerrow-column input[type=checkbox],\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox],\\n.slick-column-name input[type=checkbox],\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox],\\n.slick-cell-checkboxsel input[type=checkbox],\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] {\\n  display: none;\\n  /* to hide the checkbox itself */\\n}\\n.slick-headerrow-column input[type=checkbox],\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox] + label,\\n.slick-column-name input[type=checkbox],\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox] + label,\\n.slick-cell-checkboxsel input[type=checkbox],\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] + label {\\n  margin: 0;\\n}\\n.slick-headerrow-column input[type=checkbox] + label:before,\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox] + label:before,\\n.slick-column-name input[type=checkbox] + label:before,\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox] + label:before,\\n.slick-cell-checkboxsel input[type=checkbox] + label:before,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] + label:before {\\n  cursor: pointer;\\n  content: \\\"\\\";\\n  background-color: inherit;\\n  color: #31708F;\\n  display: inline-block;\\n  font-weight: bold;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(14px - 1px);\\n  opacity: 0.15;\\n  /* unchecked icon */\\n  height: 14px;\\n  width: 14px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0;\\n}\\n.slick-headerrow-column input[type=checkbox] + label:hover:before,\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox] + label:hover:before,\\n.slick-column-name input[type=checkbox] + label:hover:before,\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox] + label:hover:before,\\n.slick-cell-checkboxsel input[type=checkbox] + label:hover:before,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] + label:hover:before {\\n  opacity: 0.35;\\n}\\n.slick-headerrow-column input[type=checkbox]:checked + label:before,\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox]:checked + label:before,\\n.slick-column-name input[type=checkbox]:checked + label:before,\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox]:checked + label:before,\\n.slick-cell-checkboxsel input[type=checkbox]:checked + label:before,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox]:checked + label:before {\\n  content: \\\"\\\";\\n  color: #31708F;\\n  opacity: 1;\\n  /* checked icon */\\n  height: 14px;\\n  width: 14px;\\n  border-radius: none;\\n  border-radius: none;\\n}\\n.slick-group .slick-cell-checkboxsel {\\n  text-align: left;\\n}\\n.search-filter :focus {\\n  outline-color: #73b3e5;\\n}\\n.ms-choice {\\n  border: 1px solid #ccc;\\n  background-color: transparent;\\n  font-size: 14px;\\n}\\n.ms-choice div:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 16px;\\n}\\n.ms-choice div.open:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 16px;\\n}\\n.ms-choice span {\\n  font-size: 12px;\\n  font-family: \\\"Helvetica Neue\\\", Helvetica, Arial;\\n}\\n.ms-choice .placeholder {\\n  font-family: \\\"Segoe UI Symbol\\\";\\n  font-size: 14px;\\n  color: #c9c9c9 !important;\\n}\\n.ms-filter.search-filter {\\n  width: 100% !important;\\n}\\n.ms-drop {\\n  max-width: 250px;\\n  border: 1px solid #bbb;\\n  z-index: 9999;\\n}\\n.ms-drop input[type=checkbox],\\n.ms-drop input[type=radio] {\\n  /* make input checkbox invisible but don't hide it since multiple-select uses hide for something else */\\n  opacity: 0;\\n  width: 0;\\n}\\n.ms-drop input[type=checkbox] + span:before,\\n.ms-drop input[type=radio] + span:before {\\n  cursor: pointer;\\n  color: #31708F;\\n  content: \\\"\\\";\\n  display: inline-block;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 16px;\\n  font-weight: normal;\\n  height: 14px;\\n  width: 20px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0;\\n  opacity: 0.6;\\n}\\n.ms-drop input[type=checkbox]:checked + span:before,\\n.ms-drop input[type=radio]:checked + span:before {\\n  content: \\\"\\\";\\n  opacity: 1;\\n  height: 14px;\\n  width: 20px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0;\\n}\\n.ms-drop input[type=radio] + span:before {\\n  content: \\\"\\\";\\n  height: 14px;\\n  width: 20px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0;\\n}\\n.ms-drop input[type=radio]:checked + span:before {\\n  content: \\\"\\\";\\n  color: #31708F;\\n  height: 14px;\\n  width: 20px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0;\\n}\\n.ms-drop label {\\n  margin-bottom: 5px;\\n}\\n.ms-drop label span {\\n  cursor: pointer;\\n  margin-left: 4px;\\n  position: relative;\\n  top: 1px;\\n}\\n.ms-drop label:hover {\\n  cursor: pointer;\\n  background-color: #eff5fc;\\n}\\n.ms-drop .ms-select-all {\\n  border-bottom: 1px solid #ddd;\\n}\\n.ms-drop .ms-select-all label {\\n  display: inline-block;\\n  font-weight: normal;\\n  padding: 5px 8px;\\n  color: #2a617c;\\n}\\n.ms-drop .ms-select-all label:hover {\\n  color: #245269;\\n}\\n.ms-drop .ms-ok-button {\\n  cursor: pointer;\\n  display: block;\\n  width: 100%;\\n  height: 26px;\\n  padding: 0;\\n  border: 1px solid #ccc;\\n  text-align: center;\\n  color: #31708F;\\n  font-weight: 600;\\n  border-bottom-left-radius: 4px;\\n  border-bottom-right-radius: 4px;\\n  background-color: #fff;\\n}\\n.ms-drop .ms-ok-button:hover {\\n  background-color: #e2edfa;\\n  color: #2a617c;\\n}\\n.ms-drop .ms-search:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 16px;\\n  right: 8px;\\n  position: absolute;\\n}\\n.search-filter .operator.input-group-addon {\\n  margin: 0;\\n  padding: 0;\\n  min-width: 25px;\\n  border: none;\\n}\\n.search-filter .operator.input-group-addon .form-control {\\n  border-radius: 4px 0 0 4px;\\n  padding: 0 0 0 2px !important;\\n  font-size: 13px;\\n  color: #333333;\\n  font-weight: bold;\\n  background-color: #ffffff;\\n}\\n.search-filter .operator.input-group-addon select {\\n  font-family: Consolas, \\\"Lucida Console\\\";\\n  font-size: 14px !important;\\n  border: 1px solid #387fa2;\\n  width: 25px;\\n}\\n.search-filter .operator.input-group-addon select.form-control {\\n  cursor: pointer;\\n  -moz-appearance: none;\\n  -webkit-appearance: none;\\n}\\n.search-filter .operator.input-group-addon select.form-control:-ms-expand {\\n  display: none;\\n}\\n.search-filter .operator.input-group-addon select.form-control .empty {\\n  color: #c0c0c0;\\n}\\n.search-filter .operator-char3.input-group-addon {\\n  min-width: 30px;\\n}\\ninput.search-filter {\\n  font-family: \\\"Segoe UI Symbol\\\";\\n}\\n.search-filter input {\\n  font-family: \\\"Segoe UI Symbol\\\";\\n}\\n.search-filter input.compound-input {\\n  border-radius: 0 4px 4px 0 !important;\\n  border-left: none;\\n}\\n.search-filter input.compound-input::-moz-placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter input.compound-input::placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter input.compound-slider {\\n  border-left: none !important;\\n}\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column .input-group-prepend + .flatpickr input.compound-input {\\n  border-top-left-radius: 0;\\n  border-bottom-left-radius: 0;\\n}\\n.search-filter .flatpickr input.form-control {\\n  border-left: none;\\n}\\n.search-filter .flatpickr input.form-control::-moz-placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter .flatpickr input.form-control::placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter.flatpickr,\\n.search-filter .flatpickr {\\n  flex: 1;\\n  cursor: pointer;\\n}\\n.search-filter.flatpickr input.flatpickr.form-control,\\n.search-filter.flatpickr .flatpickr-input.form-control,\\n.search-filter .flatpickr input.flatpickr.form-control,\\n.search-filter .flatpickr .flatpickr-input.form-control {\\n  background-color: #ffffff;\\n  font-family: \\\"Segoe UI Symbol\\\";\\n  font-size: 14px;\\n  border-radius: 0 4px 4px 0;\\n  width: 100%;\\n}\\n.search-filter.flatpickr input.flatpickr.form-control[readonly],\\n.search-filter.flatpickr .flatpickr-input.form-control[readonly],\\n.search-filter .flatpickr input.flatpickr.form-control[readonly],\\n.search-filter .flatpickr .flatpickr-input.form-control[readonly] {\\n  background-color: #ffffff;\\n}\\n.search-filter.flatpickr .form-control[readonly],\\n.search-filter.flatpickr .flatpickr.form-control[readonly],\\n.search-filter .flatpickr .form-control[readonly],\\n.search-filter .flatpickr .flatpickr.form-control[readonly] {\\n  cursor: pointer;\\n  background-color: #ffffff;\\n}\\ninput.flatpickr-input.form-control,\\ninput.flatpickr.form-control {\\n  cursor: pointer;\\n  font-family: \\\"Segoe UI Symbol\\\";\\n  font-size: 14px;\\n  border-radius: 4px;\\n}\\ninput.flatpickr-input.form-control[readonly],\\ninput.flatpickr.form-control[readonly] {\\n  background-color: #ffffff;\\n}\\n.slick-preheader-panel .ui-droppable, .slick-preheader-panel .ui-droppable-hover {\\n  padding: 5px 10px;\\n  height: 35px;\\n  border: 1px solid #e0e0e0 !important;\\n  width: calc(100% - 25px) !important;\\n  border-radius: 4px;\\n  background-color: #ffffff;\\n}\\n.slick-preheader-panel .ui-droppable .slick-placeholder, .slick-preheader-panel .ui-droppable-hover .slick-placeholder {\\n  font-style: italic;\\n  color: #616161;\\n}\\n.slick-preheader-panel .ui-droppable .slick-group-toggle-all, .slick-preheader-panel .ui-droppable-hover .slick-group-toggle-all {\\n  position: absolute;\\n  cursor: pointer;\\n  font-family: \\\"FontAwesome\\\";\\n  color: #31708F;\\n  display: none !important;\\n  top: 7px;\\n  right: 40px;\\n}\\n.slick-preheader-panel .ui-droppable .slick-group-toggle-all.expanded:before, .slick-preheader-panel .ui-droppable-hover .slick-group-toggle-all.expanded:before {\\n  content: \\\"\\\";\\n}\\n.slick-preheader-panel .ui-droppable .slick-group-toggle-all.collapsed:before, .slick-preheader-panel .ui-droppable-hover .slick-group-toggle-all.collapsed:before {\\n  content: \\\"\\\";\\n}\\n.slick-preheader-panel .ui-droppable .slick-dropped-grouping, .slick-preheader-panel .ui-droppable-hover .slick-dropped-grouping {\\n  display: inline-block;\\n  vertical-align: middle;\\n  cursor: move;\\n}\\n.slick-preheader-panel .ui-droppable .slick-groupby-remove, .slick-preheader-panel .ui-droppable-hover .slick-groupby-remove {\\n  cursor: pointer;\\n  display: inline-flex;\\n  color: pink;\\n  font-size: 16px;\\n  padding-left: 5px;\\n  padding-right: 7px;\\n  vertical-align: baseline;\\n}\\n.slick-preheader-panel .ui-droppable .slick-groupby-remove:hover, .slick-preheader-panel .ui-droppable-hover .slick-groupby-remove:hover {\\n  color: red;\\n}\\n.slick-preheader-panel .ui-droppable-active {\\n  background-color: #fafafa;\\n}\\n.slick-preheader-panel .ui-droppable-hover {\\n  background-color: #ededed;\\n}\\n.slick-header .slick-header-columns .slick-column-groupable {\\n  display: inline-block;\\n  font-weight: normal;\\n  color: #707070;\\n  width: 9px;\\n  height: 9px;\\n  margin-left: 4px;\\n}\\n.ui-widget.ui-widget-content {\\n  border: 0;\\n}\\ninput.slider-editor-input[type=range],\\ninput.slider-filter-input[type=range] {\\n  /*removes default webkit styles*/\\n  -webkit-appearance: none;\\n  height: 27px;\\n  flex: 1;\\n  padding: 0 6px;\\n  /* change runnable track color while in focus on all browsers */\\n  /* WebKit specific (Opera/Chrome/Safari) */\\n  /* Mozilla Firefox specific */\\n  /*fix for FF unable to apply focus style bug */\\n  border: 1px solid #ccc;\\n  /*hide the outline behind the border*/\\n  /* Microsoft IE specific */\\n}\\ninput.slider-editor-input[type=range]:focus,\\ninput.slider-filter-input[type=range]:focus {\\n  outline: none;\\n}\\ninput.slider-editor-input[type=range]:focus::-webkit-slider-runnable-track,\\ninput.slider-filter-input[type=range]:focus::-webkit-slider-runnable-track {\\n  background: #ddd;\\n}\\ninput.slider-editor-input[type=range]:focus::-moz-range-track,\\ninput.slider-filter-input[type=range]:focus::-moz-range-track {\\n  background: #ddd;\\n}\\ninput.slider-editor-input[type=range]:focus::-ms-fill-lower,\\ninput.slider-filter-input[type=range]:focus::-ms-fill-lower {\\n  background: #aaa;\\n}\\ninput.slider-editor-input[type=range]:focus::-ms-fill-upper,\\ninput.slider-filter-input[type=range]:focus::-ms-fill-upper {\\n  background: #ddd;\\n}\\ninput.slider-editor-input[type=range]::-webkit-slider-runnable-track,\\ninput.slider-filter-input[type=range]::-webkit-slider-runnable-track {\\n  height: 4px;\\n  background: #eee;\\n  border: none;\\n  border-radius: 3px;\\n}\\ninput.slider-editor-input[type=range]::-webkit-slider-thumb,\\ninput.slider-filter-input[type=range]::-webkit-slider-thumb {\\n  cursor: pointer;\\n  -webkit-appearance: none;\\n  border: none;\\n  height: 14px;\\n  width: 14px;\\n  border-radius: 50%;\\n  border: 1px solid #9bbc9f;\\n  background: #c9dbcb;\\n  margin-top: -4px;\\n}\\ninput.slider-editor-input[type=range]::-moz-range-track,\\ninput.slider-filter-input[type=range]::-moz-range-track {\\n  height: 4px;\\n  background: #eee;\\n  border: none;\\n  border-radius: 3px;\\n}\\ninput.slider-editor-input[type=range]::-moz-range-thumb,\\ninput.slider-filter-input[type=range]::-moz-range-thumb {\\n  border: none;\\n  cursor: pointer;\\n  height: calc(14px - 2px);\\n  width: calc(14px - 2px);\\n  border-radius: 50%;\\n  border: 1px solid #9bbc9f;\\n  background: #c9dbcb;\\n}\\ninput.slider-editor-input[type=range]:-moz-focusring,\\ninput.slider-filter-input[type=range]:-moz-focusring {\\n  outline: 1px solid white;\\n  outline-offset: -1px;\\n}\\ninput.slider-editor-input[type=range]::-ms-track,\\ninput.slider-filter-input[type=range]::-ms-track {\\n  height: 4px;\\n  /*remove bg colour from the track, we'll use ms-fill-lower and ms-fill-upper instead */\\n  background: transparent;\\n  /*leave room for the larger thumb to overflow with a transparent border */\\n  border-color: transparent;\\n  border-width: 6px 0;\\n  /*remove default tick marks*/\\n  color: transparent;\\n}\\ninput.slider-editor-input[type=range]::-ms-fill-lower,\\ninput.slider-filter-input[type=range]::-ms-fill-lower {\\n  background: #ddd;\\n  border-radius: 10px;\\n}\\ninput.slider-editor-input[type=range]::-ms-fill-upper,\\ninput.slider-filter-input[type=range]::-ms-fill-upper {\\n  background: #eee;\\n  border-radius: 10px;\\n}\\ninput.slider-editor-input[type=range]::-ms-thumb,\\ninput.slider-filter-input[type=range]::-ms-thumb {\\n  border: none;\\n  cursor: pointer;\\n  height: calc(14px - 2px);\\n  width: calc(14px - 2px);\\n  border-radius: 50%;\\n  border: 1px solid #9bbc9f;\\n  background: #c9dbcb;\\n  margin-top: 1px;\\n}\\ninput.slider-editor-input[type=range]::-ms-tooltip,\\ninput.slider-filter-input[type=range]::-ms-tooltip {\\n  display: none;\\n}\\n.search-filter {\\n  height: 27px;\\n}\\n.search-filter::-moz-placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter::placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter .slider-value {\\n  padding: 0;\\n  height: 100%;\\n}\\n.search-filter .slider-value .input-group-text {\\n  padding: 4px 8px;\\n  font-size: calc(14 - 1px);\\n}\\ninput.slider-filter-input[type=range] {\\n  padding: 0 6px;\\n  height: 27px;\\n}\\n/* Slider Editor */\\ninput.slider-editor-input[type=range] {\\n  padding: 0 6px;\\n  height: 24px;\\n}\\n.slider-editor .slider-value {\\n  padding: 0;\\n  height: 24px;\\n}\\n.slider-editor .slider-value .input-group-text {\\n  padding: 4px 6px;\\n  font-size: calc(14 - 1px);\\n  height: 24px;\\n}\\n.slider-range-container {\\n  height: 27px;\\n  padding: 0 12px;\\n}\\n.slider-range-container .ui-slider {\\n  position: relative;\\n}\\n.slider-range-container .ui-slider .ui-slider-handle {\\n  position: absolute;\\n  top: -5px;\\n  border-radius: 50%;\\n  cursor: pointer;\\n  border: 1px solid #9bbc9f;\\n  height: 14px;\\n  width: 14px;\\n  background-color: #c9dbcb;\\n}\\n.slider-range-container .ui-slider .ui-slider-handle:focus {\\n  outline: none;\\n}\\n.slider-range-container .ui-slider-horizontal {\\n  top: 45%;\\n  height: 4px;\\n  background-color: #eee;\\n}\\n.slider-range-container .input-group-text {\\n  border: 0;\\n}\\n.slider-range-container.slider-values {\\n  padding: 0;\\n}\\n.slider-range-container.slider-values .ui-slider-horizontal {\\n  flex: 1;\\n  width: calc(98% - 16px);\\n  top: 12px;\\n  margin: 0 10px;\\n}\\n.slider-range-container.slider-values .slider-range-value {\\n  padding: 0;\\n  border: 0;\\n  height: 100%;\\n}\\n.slider-range-container.slider-values .slider-range-value .input-group-text {\\n  padding: 4px 8px;\\n  font-size: calc(14 - 1px);\\n}\\n.slider-range-container.slider-values .input-group-prepend.slider-range-value {\\n  border-right: 1px solid #ccc;\\n}\\n.slider-range-container.slider-values .input-group-append.slider-range-value {\\n  border-left: 1px solid #ccc;\\n}\\n.slick-row .detail-view-toggle {\\n  display: inline-block;\\n  cursor: pointer;\\n}\\n.slick-row .detail-view-toggle.expand {\\n  display: inline-block;\\n  color: #71b0ce;\\n}\\n.slick-row .detail-view-toggle.expand:hover {\\n  color: #4b9ac1;\\n}\\n.slick-row .detail-view-toggle.expand:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(14px + 2px);\\n  content: \\\"\\\";\\n}\\n.slick-row .detail-view-toggle.collapse {\\n  display: inline-block;\\n  color: #31708F;\\n}\\n.slick-row .detail-view-toggle.collapse:hover {\\n  color: #245269;\\n}\\n.slick-row .detail-view-toggle.collapse:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(14px + 2px);\\n  content: \\\"\\\";\\n}\\n.slick-row .dynamic-cell-detail {\\n  position: absolute;\\n  width: 100%;\\n  overflow: auto;\\n  border: 1px solid #c0c0c0;\\n  background-color: #f7f7f7;\\n  padding: 10px;\\n  z-index: 1000;\\n}\\n.slick-row .dynamic-cell-detail :first-child {\\n  vertical-align: middle;\\n  line-height: 13px;\\n}\\n/* pagination/pagination variables */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-custom-footer {\\n  color: #808080;\\n  padding: 5px 0;\\n  background-color: transparent;\\n  font-size: 14px;\\n  font-style: italic;\\n  font-weight: normal;\\n  height: 30px;\\n}\\n.slick-custom-footer .left-footer {\\n  color: #808080;\\n  font-style: italic;\\n  font-weight: normal;\\n  text-align: left;\\n  padding: 0px;\\n  width: 50%;\\n  float: left;\\n}\\n.slick-custom-footer .right-footer.metrics {\\n  color: #808080;\\n  text-align: right;\\n  font-style: italic;\\n  font-weight: normal;\\n  text-align: right;\\n  padding: 0px;\\n  width: 50%;\\n  float: right;\\n}\\n.slick-custom-footer .right-footer.metrics .separator {\\n  margin: 2px;\\n}\\n.slick-empty-data-warning {\\n  position: relative;\\n  color: #000000;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: calc(14px + 2px);\\n  font-style: italic;\\n  line-height: 18px;\\n  margin: 0px;\\n  padding: 8px;\\n  z-index: 10;\\n}\\n/* Pagination styling */\\n.slick-pagination {\\n  border-top: 0 none;\\n  border-right: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  width: 100%;\\n  height: 40px;\\n  padding-top: 4px;\\n  vertical-align: middle;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: calc(14px - 1px);\\n  font-weight: 400;\\n  color: #808080;\\n}\\n.slick-pagination .slick-pagination-status {\\n  display: inline-block;\\n  padding: 6px;\\n}\\n.slick-pagination .ui-icon-container {\\n  display: inline-block;\\n  border-color: #ddd;\\n}\\n.slick-pagination .slick-pagination-nav {\\n  display: inline-block;\\n  padding: 2px;\\n  height: 34px;\\n}\\n.slick-pagination .slick-pagination-nav nav {\\n  display: inline-block;\\n}\\n.slick-pagination .slick-pagination-nav .slick-page-number {\\n  vertical-align: top;\\n  margin-top: 6px;\\n  display: inline-block;\\n  padding: 0 5px;\\n}\\n.slick-pagination .slick-pagination-nav .slick-page-number input {\\n  background-color: #fafbed;\\n  height: 26px;\\n  width: 50px;\\n  padding: 2px;\\n  border-radius: 4px;\\n  display: inline-block;\\n}\\n.slick-pagination .slick-pagination-nav .pagination {\\n  margin: 0;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-link {\\n  font-size: calc(14px - 1px);\\n  border: 1px solid #acacac;\\n  height: 32px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item {\\n  cursor: pointer;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item a[class*=icon-seek-] {\\n  border-color: 1px solid #acacac;\\n  color: #31708F;\\n  text-decoration: none;\\n  font-family: \\\"FontAwesome\\\";\\n  line-height: calc(14px + 4px);\\n  -webkit-text-stroke: 0.4px;\\n  padding: 6px 12px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item a[class*=icon-seek-]:hover {\\n  background-color: #E6E6E6;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item:first-child a, .slick-pagination .slick-pagination-nav .pagination .page-item:first-child span {\\n  border-top-left-radius: 4px;\\n  border-bottom-left-radius: 4px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item:last-child a, .slick-pagination .slick-pagination-nav .pagination .page-item:last-child span {\\n  border-top-right-radius: 4px;\\n  border-bottom-right-radius: 4px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-first:before {\\n  content: \\\"\\\";\\n  display: block;\\n  width: inherit;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-prev:before {\\n  content: \\\"\\\";\\n  display: block;\\n  width: inherit;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-next:before {\\n  content: \\\"\\\";\\n  display: block;\\n  width: inherit;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-end:before {\\n  content: \\\"\\\";\\n  display: block;\\n  width: inherit;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item.disabled {\\n  cursor: not-allowed;\\n  font-weight: normal;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item.disabled a[class*=icon-seek-] {\\n  color: #b8b8b8;\\n  background-color: #f9f9f9;\\n  border-color: #dedede;\\n}\\n.slick-pagination .slick-pagination-settings {\\n  display: block;\\n  float: right;\\n  padding: 2px;\\n}\\n.slick-pagination .slick-pagination-settings select {\\n  font-size: calc(14px - 2px);\\n  line-height: 1.5;\\n  height: 32px;\\n  width: 60px;\\n  padding: 0 0 2px 2px;\\n  border: 1px solid #acacac;\\n  border-radius: 3px;\\n}\\n.slick-pagination .slick-pagination-settings .slick-pagination-count {\\n  margin-left: 2px;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.full-height {\\n  height: 100%;\\n}\\n.gridPane {\\n  width: 100%;\\n}\\n.grid-header {\\n  border: 1px solid gray;\\n  border-bottom: 0;\\n  border-top: 0;\\n  color: black;\\n  height: 24px;\\n  line-height: 24px;\\n}\\n.grid-header label {\\n  display: inline-block;\\n  font-weight: bold;\\n  margin: auto auto auto 6px;\\n}\\n.grid-header .ui-icon {\\n  margin: 4px 4px auto 6px;\\n  background-color: transparent;\\n  border-color: transparent;\\n}\\n.grid-header .ui-icon.ui-state-hover {\\n  background-color: white;\\n}\\n.grid-header #txtSearch {\\n  margin: 0 4px 0 4px;\\n  padding: 2px 2px;\\n  border-radius: 2px;\\n  border: 1px solid silver;\\n}\\n.options-panel {\\n  border-radius: 6px;\\n  border: 1px solid silver;\\n  background: #f0f0f0;\\n  padding: 4px;\\n  margin-bottom: 20px;\\n  width: 320px;\\n  position: absolute;\\n  top: 0px;\\n  left: 650px;\\n}\\n/* Individual cell styles */\\n.slick-cell.task-name {\\n  font-weight: bold;\\n  text-align: right;\\n}\\n.slick-cell.task-percent {\\n  text-align: right;\\n}\\n.slick-cell.cell-move-handle {\\n  font-weight: bold;\\n  text-align: right;\\n  border-right: solid gray;\\n  background: #efefef;\\n  cursor: move;\\n}\\n.cell-move-handle:hover {\\n  background: #b6b9bd;\\n}\\n.slick-row.selected .cell-move-handle {\\n  background: #D5DC8D;\\n}\\n.slick-row .cell-actions {\\n  text-align: left;\\n}\\n.slick-row.complete {\\n  background-color: #DFD;\\n  color: #555;\\n}\\n.percent-complete-bar {\\n  display: inline-block;\\n  height: 6px;\\n  border-radius: 3px;\\n  background-color: transparent;\\n}\\n/* Slick.Editors.Text, Slick.Editors.Date */\\n.ui-datepicker-trigger {\\n  margin-top: 2px;\\n  padding: 0;\\n  vertical-align: top;\\n}\\n/* Slick.Editors.PercentComplete */\\ninput.editor-percentcomplete {\\n  width: 100%;\\n  height: 100%;\\n  border: 0;\\n  margin: 0;\\n  background: transparent;\\n  outline: 0;\\n  padding: 0;\\n  float: left;\\n}\\n.editor-percentcomplete-picker {\\n  position: relative;\\n  display: inline-block;\\n  width: 16px;\\n  height: 100%;\\n  overflow: visible;\\n  z-index: 1000;\\n  float: right;\\n}\\n.editor-percentcomplete-helper {\\n  border: 0 solid gray;\\n  position: absolute;\\n  top: -2px;\\n  left: -9px;\\n  padding-left: 9px;\\n  width: 120px;\\n  height: 140px;\\n  display: none;\\n  overflow: visible;\\n}\\n.editor-percentcomplete-wrapper {\\n  background: beige;\\n  padding: 20px 8px;\\n  width: 100%;\\n  height: 98px;\\n  border: 1px solid gray;\\n  border-left: 0;\\n}\\n.editor-percentcomplete-buttons {\\n  float: right;\\n}\\n.editor-percentcomplete-buttons button {\\n  width: 80px;\\n}\\n.editor-percentcomplete-slider {\\n  float: left;\\n}\\n.editor-percentcomplete-picker:hover .editor-percentcomplete-helper {\\n  display: block;\\n}\\n.editor-percentcomplete-helper:hover {\\n  display: block;\\n}\\n/* Slick.Editors.YesNoSelect */\\nselect.editor-yesno {\\n  width: 100%;\\n  margin: 0;\\n  vertical-align: middle;\\n}\\n/* Slick.Editors.Checkbox */\\ninput.editor-checkbox {\\n  margin: 0;\\n  height: 100%;\\n  padding: 0;\\n  border: 0;\\n}\\n/*!\\n * SlickGrid custom styling for Bootstrap (https://github.com/ghiscoding/aurelia-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/aurelia-slickgrid/blob/master/LICENSE)\\n * @author: Ghislain B. (ghiscoding)\\n */\\n/*!\\n\\n/* Mixins for SlickGrid */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n@-webkit-keyframes highlight-start {\\n  to {\\n    background: #c8ddea;\\n  }\\n  from {\\n    background: none;\\n  }\\n}\\n@keyframes highlight-start {\\n  to {\\n    background: #c8ddea;\\n  }\\n  from {\\n    background: none;\\n  }\\n}\\n@-webkit-keyframes highlight-end {\\n  from {\\n    background: 0.3s ease 1;\\n  }\\n  to {\\n    background: none;\\n  }\\n}\\n@keyframes highlight-end {\\n  from {\\n    background: 0.3s ease 1;\\n  }\\n  to {\\n    background: none;\\n  }\\n}\\n.slickgrid-container {\\n  border-top: 0 none;\\n  border-bottom: 1px solid #dddddd;\\n  border-left: 0 none;\\n  border-right: 0 none;\\n  position: relative;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  /** Header Grouping **/\\n  /** Frozen/Pinned styling */\\n}\\n.slickgrid-container input[type=checkbox] {\\n  vertical-align: baseline;\\n  margin: 0;\\n}\\n.slickgrid-container .slick-viewport {\\n  border-top: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  border-right: 0 none;\\n}\\n.slickgrid-container .grid-canvas .slick-row {\\n  position: absolute;\\n  width: 100%;\\n  color: #000000;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-weight: normal;\\n}\\n.slickgrid-container .grid-canvas .slick-row:hover {\\n  background-color: #eff5fc;\\n  box-shadow: none;\\n  z-index: 5;\\n}\\n.slickgrid-container .grid-canvas .slick-row.active {\\n  padding: 5px 6px;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight {\\n  background-color: #c8ddea;\\n  -webkit-animation: highlight-start 1.5s ease 1;\\n          animation: highlight-start 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight.odd {\\n  background-color: #c8ddea;\\n  -webkit-animation: highlight-start 1.5s ease 1;\\n          animation: highlight-start 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight.odd .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight-end {\\n  background-color: #c8ddea;\\n  -webkit-animation: highlight-end 1.5s ease 1;\\n          animation: highlight-end 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight-end.odd {\\n  background-color: #c8ddea;\\n  -webkit-animation: highlight-end 1.5s ease 1;\\n          animation: highlight-end 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlighter {\\n  background: orange !important;\\n  transition-property: background;\\n  transition-duration: 3s;\\n  transition-timing-function: ease-in;\\n}\\n.slickgrid-container .grid-canvas .slick-row.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd {\\n  background-color: #f7f7f7;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd:hover {\\n  background-color: #eff5fc;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell {\\n  background: inherit;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.selected {\\n  background-color: #dae8f1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell {\\n  background: inherit;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.selected {\\n  background-color: #dae8f1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.slick-group-totals {\\n  color: gray;\\n  background: #fff;\\n}\\n.slickgrid-container .grid-canvas .slick-row.slick-group-totals .slick-cell {\\n  font-size: 14px;\\n}\\n.slickgrid-container .grid-canvas .slick-cell, .slickgrid-container .grid-canvas .slick-headerrow-column {\\n  border-top: 1px solid #dddddd;\\n  border-bottom: 1px transparent;\\n  border-left: 1px transparent;\\n  border-right: 1px transparent;\\n  box-shadow: inherit;\\n}\\n.slickgrid-container .grid-canvas .even {\\n  background-color: #ffffff;\\n}\\n.slickgrid-container .grid-canvas .slick-cell {\\n  padding: 5px 6px;\\n  font-size: 14px;\\n}\\n.slickgrid-container .grid-canvas .slick-cell td {\\n  font-size: 14px;\\n}\\nbody .slickgrid-container .grid-canvas .slick-cell {\\n  line-height: 20px;\\n}\\n.slickgrid-container .grid-canvas .slick-cell a, .slickgrid-container .grid-canvas .slick-cell a:visited, .slickgrid-container .grid-canvas .slick-cell .ui-widget-content a, .slickgrid-container .grid-canvas .slick-cell .ui-widget-content a:visited {\\n  color: #08c;\\n}\\n.slickgrid-container .grid-canvas .slick-cell a:hover, .slickgrid-container .grid-canvas .slick-cell .ui-widget-content a:hover {\\n  color: darker(#08c, 15%);\\n  border-bottom: none;\\n}\\n.slickgrid-container .grid-canvas .slick-cell table {\\n  height: 100%;\\n  padding: 0;\\n  background: none;\\n}\\n.slickgrid-container .grid-canvas .slick-cell td {\\n  padding: 0;\\n  vertical-align: middle;\\n  text-align: left;\\n}\\n.slickgrid-container .grid-canvas .slick-cell.selected {\\n  background-color: #dae8f1;\\n}\\n.slickgrid-container .grid-canvas .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-cell select:not([multiple]).form-control {\\n  height: 100%;\\n  padding: 0;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-title {\\n  height: 20px;\\n  line-height: 20px;\\n  vertical-align: none;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-toggle {\\n  color: #31708F;\\n  font-weight: bold;\\n  width: 14px;\\n  height: 20px;\\n  margin-right: 2px;\\n  cursor: pointer;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-toggle.expanded:before {\\n  display: inline-block;\\n  content: \\\"\\\";\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(14px + 4px);\\n  width: 14px;\\n  vertical-align: middle;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-toggle.collapsed:before {\\n  display: inline-block;\\n  content: \\\"\\\";\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(14px + 4px);\\n  width: 14px;\\n  vertical-align: middle;\\n}\\n.slickgrid-container .slick-header {\\n  border-top: 0 none;\\n  border-right: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  width: 100%;\\n  box-shadow: none !important;\\n}\\n.slickgrid-container .slick-headerrow {\\n  border-bottom: 0 none;\\n  border-top: 0 none;\\n  border-left: 0 none;\\n  border-right: 0 none;\\n}\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column {\\n  border: none;\\n  padding: 4px;\\n  background: #ffffff;\\n}\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column input,\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column select,\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column textarea {\\n  margin-right: 0;\\n  padding: 0 6px;\\n  width: none;\\n  height: 27px;\\n  box-sizing: border-box;\\n}\\n.slickgrid-container .slick-header-columns {\\n  background: none;\\n  background-color: #ffffff;\\n  width: calc(100% - 16px);\\n}\\n.slickgrid-container .slick-header-columns .slick-header-sortable .slick-column-name {\\n  margin-left: 0;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column {\\n  height: calc(17px * 2);\\n  line-height: 14px;\\n  margin: 0;\\n  border-top: 0 none;\\n  border-right: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  white-space: normal;\\n  /* like TH  */\\n  background: #ffffff;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  color: #000000;\\n  font-size: 14px;\\n  font-weight: bold;\\n  /* when sorting is possible and there's not yet a sort applied on the column\\n   we could display the sort ascending icon (with an opacity) as a hint */\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default {\\n  padding: 5px 6px;\\n  font-size: 14px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default td {\\n  font-size: 14px;\\n}\\nbody .slickgrid-container .slick-header-columns .slick-header-column.ui-state-default {\\n  line-height: 20px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column a, .slickgrid-container .slick-header-columns .slick-header-column a:visited {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column a:hover {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default {\\n  /* like TH  */\\n  background: #ffffff;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  color: #000000;\\n  font-size: 14px;\\n  font-weight: bold;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default a, .slickgrid-container .slick-header-columns .slick-header-column.ui-state-default a:visited {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default a:hover {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.slick-header-column-sorted {\\n  font-style: normal;\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column:hover {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-sortable-handle.ui-state-hover:not(.slick-header-column-sorted) .slick-sort-indicator:before {\\n  content: \\\"\\\";\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 14px;\\n  opacity: 0.5;\\n  display: inline-block;\\n  width: 14px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator {\\n  background: none;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 14px;\\n  position: absolute;\\n  display: inline-block;\\n  color: #31708F;\\n  width: 8px;\\n  height: 5px;\\n  left: auto;\\n  right: 10px;\\n  top: calc((15px * 2) - 15px);\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator-numbered {\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 10px;\\n  position: absolute;\\n  display: inline-block;\\n  color: #31708F;\\n  width: 8px;\\n  left: auto;\\n  right: 0px;\\n  top: calc(13px * 2);\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator-asc:before {\\n  content: \\\"\\\";\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 14px;\\n  opacity: 1;\\n  display: inline-block;\\n  width: 14px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator-desc:before {\\n  content: \\\"\\\";\\n  display: inline-block;\\n  opacity: 1;\\n  font-size: 14px;\\n  width: 14px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-resizable-handle {\\n  width: 7px;\\n  right: 0;\\n  z-index: 1;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-resizable-handle:hover {\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  border-right: 1px solid #d0d0d0;\\n  border-top: 0 none;\\n  width: 7px;\\n  border-radius: 8px;\\n  right: 0;\\n  height: 100%;\\n  top: 0;\\n  opacity: 1;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default {\\n  border-bottom: none;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns {\\n  border-top: none;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns .slick-header-column {\\n  height: 25px;\\n  border-left: none;\\n  border-right: none;\\n  font-size: calc(14px + 3px);\\n  justify-content: left;\\n  display: inline-grid;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns .slick-header-column:first-child {\\n  border-left: none;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns .slick-header-column:last-child {\\n  border-right: none;\\n}\\n.slickgrid-container .slick-row .slick-cell.frozen:last-child,\\n.slickgrid-container .slick-footerrow-column.frozen:last-child {\\n  border-right: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-header-column.frozen:last-child {\\n  border-right: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-pane-left .slick-preheader-panel .slick-header-column.frozen:last-child {\\n  border-right: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-headerrow-column.frozen:last-child {\\n  border-right: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-pane-bottom {\\n  border-top: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-viewport-bottom.slick-viewport-right {\\n  overflow-y: scroll !important;\\n}\\n.slickgrid-container .input-group > :not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback) {\\n  margin-left: 0;\\n}\\n.slickgrid-container .input-group > :not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback).ui-slider-horizontal {\\n  margin-left: 10px;\\n}\\n.slickgrid-container .input-group .input-group-addon .input-group-text {\\n  height: 100%;\\n}\\n.slickgrid-container .input-group .input-group-addon.input-group-append .input-group-text {\\n  margin-left: -1px;\\n  border-top-left-radius: 0;\\n  border-bottom-left-radius: 0;\\n}\\n.slickgrid-container .input-group .input-group-addon.input-group-prepend .input-group-text {\\n  margin-right: -1px;\\n  border-top-right-radius: 0;\\n  border-bottom-right-radius: 0;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.autocomplete-container {\\n  display: flex;\\n}\\n.ui-widget-content {\\n  background: none;\\n}\\n.ui-autocomplete .ui-menu-item {\\n  color: #333333;\\n}\\n.ui-autocomplete .ui-menu-item .ui-state-active {\\n  color: #333333;\\n}\\n.ui-autocomplete .ui-menu-item .ui-state-active:hover {\\n  margin: 0;\\n  border: 0;\\n  color: #333333;\\n}\\n.ui-autocomplete {\\n  background: none;\\n  position: absolute;\\n  z-index: 9999;\\n  padding: 0;\\n  margin-top: 2px;\\n  list-style: none;\\n  background-color: #ffffff;\\n  border: 1px solid rgba(0, 0, 0, 0.15);\\n  border-radius: 4px;\\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\\n  background-clip: padding-box;\\n  max-height: 25vh;\\n  min-height: 75px;\\n  min-width: 50px;\\n  overflow-y: auto;\\n  overflow-x: hidden;\\n  text-overflow: ellipsis;\\n}\\n.ui-autocomplete li div {\\n  display: block;\\n  color: #333333;\\n  padding: 3px 15px;\\n  font-weight: normal;\\n  line-height: 1.42857143;\\n  white-space: nowrap;\\n  list-style-image: none;\\n}\\n/* jquery ui loading spinner */\\n@-webkit-keyframes md-spin {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n@keyframes md-spin {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n.ui-autocomplete-loading + span:after {\\n  -webkit-animation: md-spin 2s infinite linear;\\n          animation: md-spin 2s infinite linear;\\n  display: inline-block;\\n  font-family: \\\"FontAwesome\\\";\\n  color: #4a4a4a;\\n  content: \\\"\\\" !important;\\n  /* important is required to override default jquery-ui styling */\\n  width: inherit;\\n  margin-left: -16px;\\n  line-height: 0px;\\n  vertical-align: inherit;\\n}\\n.ui-state-hover,\\n.ui-state-active,\\n.ui-state-focus {\\n  cursor: pointer;\\n  text-decoration: none;\\n  color: #262626;\\n  background-color: #e2edfa;\\n}\\n.ui-helper-hidden-accessible {\\n  border: 0;\\n  clip: rect(0 0 0 0);\\n  height: 1px;\\n  margin: -1px;\\n  overflow: hidden;\\n  position: absolute;\\n  padding: 0;\\n  width: 1px;\\n}\\n/* autocomplete custom styling */\\n.ui-autocomplete.autocomplete-custom-four-corners {\\n  width: 385px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list {\\n  width: calc(385px - 15px);\\n  padding: 3px 10px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list div {\\n  margin: 0;\\n  padding: 0;\\n  line-height: 16px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-left {\\n  float: left;\\n  height: 32px;\\n  width: 32px;\\n  padding-right: 3px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-left > img {\\n  height: 32px;\\n  width: 32px;\\n  margin-top: 0px;\\n  background-color: #ffffff;\\n  background-clip: content-box;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-bottom-left {\\n  color: #686868;\\n  font-size: calc(12px - 1px);\\n  font-style: italic;\\n  font-weight: normal;\\n  max-width: calc(calc(385px - 15px) - 32px - (10px * 2));\\n  display: inline-block;\\n  /*margin-left: 30px;*/\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-bottom-right {\\n  float: right;\\n  color: #686868;\\n  font-size: calc(12px - 1px);\\n  font-style: italic;\\n  font-weight: normal;\\n  /*margin-left: 30px;*/\\n  text-overflow: ellipsis;\\n  max-width: 250px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-top-left {\\n  color: #313131;\\n  font-style: normal;\\n  font-size: 12px;\\n  font-weight: bold;\\n  max-width: calc(calc(385px - 15px) - 32px - (10px * 2));\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  padding-left: 1px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-top-right {\\n  float: right;\\n  color: #3a85aa;\\n  font-style: normal;\\n  font-size: calc(12px - 1px);\\n  font-weight: bold;\\n  max-width: 100px;\\n}\\n/* autocomplete custom styling */\\n.ui-autocomplete.autocomplete-custom-two-rows {\\n  width: 285px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list {\\n  width: calc(285px - 15px);\\n  padding: 3px 10px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list div {\\n  margin: 0;\\n  padding: 0;\\n  line-height: 16px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-left {\\n  float: left;\\n  height: 32px;\\n  width: 32px;\\n  padding-right: 3px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-left > img {\\n  height: 32px;\\n  margin-top: 0px;\\n  background-color: #ffffff;\\n  background-clip: content-box;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-bottom-left {\\n  color: #686868;\\n  font-size: calc(12px - 1px);\\n  font-style: italic;\\n  font-weight: normal;\\n  max-width: calc(calc(285px - 15px) - 32px - (10px * 2));\\n  /*margin-left: 30px;*/\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-top-left {\\n  color: #313131;\\n  font-style: normal;\\n  font-size: 12px;\\n  font-weight: bold;\\n  max-width: calc(calc(285px - 15px) - 32px - (10px * 2));\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  padding-left: 1px;\\n}\\n.blue {\\n  color: #4949ff;\\n}\\n.orange {\\n  color: orange;\\n}\\n.red {\\n  color: red;\\n}\\n.bold {\\n  font-weight: bold;\\n}\\n.italic {\\n  font-style: italic;\\n}\";","import { Component, OnInit, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  FieldType,\r\n  Filters,\r\n  GridOdataService,\r\n  GridOption,\r\n  GridStateChange,\r\n  Metrics,\r\n  OdataOption,\r\n  OdataServiceApi,\r\n  OperatorType,\r\n  Pagination,\r\n} from './../modules/angular-slickgrid';\r\n\r\nconst defaultPageSize = 20;\r\nconst sampleDataRoot = 'assets/data';\r\n\r\n@Component({\r\n  templateUrl: './grid-odata.component.html'\r\n})\r\n@Injectable()\r\nexport class GridOdataComponent implements OnInit {\r\n  title = 'Example 5: Grid connected to Backend Server with OData';\r\n  subTitle = `\r\n    Sorting/Paging connected to a Backend OData Service (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/OData\" target=\"_blank\">Wiki docs</a>).\r\n    <br/>\r\n    <ul class=\"small\">\r\n      <li>Only \"Name\" field is sortable for the demo (because we use JSON files), however \"multiColumnSort: true\" is also supported</li>\r\n      <li>This example also demos the Grid State feature, open the console log to see the changes</li>\r\n      <li>String column also support operator (>, >=, <, <=, <>, !=, =, ==, *)\r\n      <ul>\r\n        <li>The (*) can be used as startsWith (ex.: \"abc*\" => startsWith \"abc\") / endsWith (ex.: \"*xyz\" => endsWith \"xyz\")</li>\r\n        <li>The other operators can be used on column type number for example: \">=100\" (bigger or equal than 100)</li>\r\n      </ul>\r\n      <li>OData Service could be replaced by other Service type in the future (GraphQL or whichever you provide)</li>\r\n      <li>You can also preload a grid with certain \"presets\" like Filters / Sorters / Pagination <a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Grid-State-&-Preset\" target=\"_blank\">Wiki - Grid Preset</a>\r\n    </ul>\r\n  `;\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions!: Column[];\r\n  gridOptions!: GridOption;\r\n  dataset = [];\r\n  metrics!: Metrics;\r\n  paginationOptions!: Pagination;\r\n\r\n  isCountEnabled = true;\r\n  odataVersion = 2;\r\n  odataQuery = '';\r\n  processing = true;\r\n  status = { text: 'processing...', class: 'alert alert-danger' };\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'name', name: 'Name', field: 'name', sortable: true,\r\n        type: FieldType.string,\r\n        filterable: true,\r\n        filter: {\r\n          model: Filters.compoundInput\r\n        }\r\n      },\r\n      {\r\n        id: 'gender', name: 'Gender', field: 'gender', filterable: true,\r\n        filter: {\r\n          model: Filters.singleSelect,\r\n          collection: [{ value: '', label: '' }, { value: 'male', label: 'male' }, { value: 'female', label: 'female' }]\r\n        }\r\n      },\r\n      { id: 'company', name: 'Company', field: 'company' },\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      enableAutoResize: true,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      checkboxSelector: {\r\n        // you can toggle these 2 properties to show the \"select all\" checkbox in different location\r\n        hideInFilterHeaderRow: false,\r\n        hideInColumnTitleRow: true\r\n      },\r\n      enableCellNavigation: true,\r\n      enableFiltering: true,\r\n      enableCheckboxSelector: true,\r\n      enableRowSelection: true,\r\n      enablePagination: true, // you could optionally disable the Pagination\r\n      pagination: {\r\n        pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\r\n        pageSize: defaultPageSize,\r\n        totalItems: 0\r\n      },\r\n      presets: {\r\n        // you can also type operator as string, e.g.: operator: 'EQ'\r\n        filters: [\r\n          { columnId: 'gender', searchTerms: ['male'], operator: OperatorType.equal },\r\n        ],\r\n        sorters: [\r\n          // direction can be written as 'asc' (uppercase or lowercase) and/or use the SortDirection type\r\n          { columnId: 'name', direction: 'asc' }\r\n        ],\r\n        pagination: { pageNumber: 2, pageSize: defaultPageSize }\r\n      },\r\n      backendServiceApi: {\r\n        service: new GridOdataService(),\r\n        options: {\r\n          enableCount: this.isCountEnabled, // add the count in the OData query, which will return a property named \"odata.count\" (v2) or \"@odata.count\" (v4)\r\n          version: this.odataVersion        // defaults to 2, the query string is slightly different between OData 2 and 4\r\n        },\r\n        preProcess: () => this.displaySpinner(true),\r\n        process: (query) => this.getCustomerApiCall(query),\r\n        postProcess: (response) => {\r\n          this.metrics = response.metrics;\r\n          this.displaySpinner(false);\r\n          this.getCustomerCallback(response);\r\n        }\r\n      } as OdataServiceApi\r\n    };\r\n  }\r\n\r\n  displaySpinner(isProcessing: boolean) {\r\n    this.processing = isProcessing;\r\n    this.status = (isProcessing)\r\n      ? { text: 'processing...', class: 'alert alert-danger' }\r\n      : { text: 'done', class: 'alert alert-success' };\r\n  }\r\n\r\n  getCustomerCallback(data: any) {\r\n    // totalItems property needs to be filled for pagination to work correctly\r\n    // however we need to force Angular to do a dirty check, doing a clone object will do just that\r\n    let countPropName = 'totalRecordCount'; // you can use \"totalRecordCount\" or any name or \"odata.count\" when \"enableCount\" is set\r\n    if (this.isCountEnabled) {\r\n      countPropName = (this.odataVersion === 4) ? '@odata.count' : 'odata.count';\r\n    }\r\n    this.paginationOptions = { ...this.gridOptions.pagination as Pagination, totalItems: data[countPropName] as number };\r\n    if (this.metrics) {\r\n      this.metrics.totalItemCount = data[countPropName];\r\n    }\r\n\r\n    // once pagination totalItems is filled, we can update the dataset\r\n    this.dataset = data['items'];\r\n    this.odataQuery = data['query'];\r\n  }\r\n\r\n  getCustomerApiCall(query: string) {\r\n    // in your case, you will call your WebAPI function (wich needs to return a Promise)\r\n    // for the demo purpose, we will call a mock WebAPI function\r\n    return this.getCustomerDataApiMock(query);\r\n  }\r\n\r\n  goToFirstPage() {\r\n    this.angularGrid.paginationService.goToFirstPage();\r\n  }\r\n\r\n  goToLastPage() {\r\n    this.angularGrid.paginationService.goToLastPage();\r\n  }\r\n\r\n  setFiltersDynamically() {\r\n    // we can Set Filters Dynamically (or different filters) afterward through the FilterService\r\n    this.angularGrid.filterService.updateFilters([\r\n      // { columnId: 'gender', searchTerms: ['male'], operator: OperatorType.equal },\r\n      { columnId: 'name', searchTerms: ['A'], operator: 'a*' },\r\n    ]);\r\n  }\r\n\r\n  setSortingDynamically() {\r\n    this.angularGrid.sortService.updateSorting([\r\n      { columnId: 'name', direction: 'DESC' },\r\n    ]);\r\n  }\r\n\r\n  /** This function is only here to mock a WebAPI call (since we are using a JSON file for the demo)\r\n   *  in your case the getCustomer() should be a WebAPI function returning a Promise\r\n   */\r\n  getCustomerDataApiMock(query: string) {\r\n    // the mock is returning a Promise, just like a WebAPI typically does\r\n    return new Promise((resolve, reject) => {\r\n      const queryParams = query.toLowerCase().split('&');\r\n      let top: number;\r\n      let skip = 0;\r\n      let orderBy = '';\r\n      let countTotalItems = 100;\r\n      const columnFilters = {};\r\n\r\n      for (const param of queryParams) {\r\n        if (param.includes('$top=')) {\r\n          top = +(param.substring('$top='.length));\r\n        }\r\n        if (param.includes('$skip=')) {\r\n          skip = +(param.substring('$skip='.length));\r\n        }\r\n        if (param.includes('$orderby=')) {\r\n          orderBy = param.substring('$orderby='.length);\r\n        }\r\n        if (param.includes('$filter=')) {\r\n          const filterBy = param.substring('$filter='.length).replace('%20', ' ');\r\n          if (filterBy.includes('contains')) {\r\n            const filterMatch = filterBy.match(/contains\\(([a-zA-Z\\/]+),\\s?'(.*?)'/);\r\n            const fieldName = filterMatch![1].trim();\r\n            (columnFilters as any)[fieldName] = { type: 'substring', term: filterMatch![2].trim() };\r\n          }\r\n          if (filterBy.includes('substringof')) {\r\n            const filterMatch = filterBy.match(/substringof\\('(.*?)',([a-zA-Z ]*)/);\r\n            const fieldName = filterMatch![2].trim();\r\n            (columnFilters as any)[fieldName] = { type: 'substring', term: filterMatch![1].trim() };\r\n          }\r\n          if (filterBy.includes('eq')) {\r\n            const filterMatch = filterBy.match(/([a-zA-Z ]*) eq '(.*?)'/);\r\n            if (Array.isArray(filterMatch)) {\r\n              const fieldName = filterMatch[1].trim();\r\n              (columnFilters as any)[fieldName] = { type: 'equal', term: filterMatch![2].trim() };\r\n            }\r\n          }\r\n          if (filterBy.includes('startswith')) {\r\n            const filterMatch = filterBy.match(/startswith\\(([a-zA-Z ]*),\\s?'(.*?)'/);\r\n            const fieldName = filterMatch![1].trim();\r\n            (columnFilters as any)[fieldName] = { type: 'starts', term: filterMatch![2].trim() };\r\n          }\r\n          if (filterBy.includes('endswith')) {\r\n            const filterMatch = filterBy.match(/endswith\\(([a-zA-Z ]*),\\s?'(.*?)'/);\r\n            const fieldName = filterMatch![1].trim();\r\n            (columnFilters as any)[fieldName] = { type: 'ends', term: filterMatch![2].trim() };\r\n          }\r\n        }\r\n      }\r\n\r\n      const sort = orderBy.includes('asc')\r\n        ? 'ASC'\r\n        : orderBy.includes('desc')\r\n          ? 'DESC'\r\n          : '';\r\n\r\n      let url;\r\n      switch (sort) {\r\n        case 'ASC':\r\n          url = `${sampleDataRoot}/customers_100_ASC.json`;\r\n          break;\r\n        case 'DESC':\r\n          url = `${sampleDataRoot}/customers_100_DESC.json`;\r\n          break;\r\n        default:\r\n          url = `${sampleDataRoot}/customers_100.json`;\r\n          break;\r\n      }\r\n\r\n      this.http.get(url).subscribe(data => {\r\n        const dataArray = <any[]>data;\r\n\r\n        // Read the result field from the JSON response.\r\n        const firstRow = skip;\r\n        let filteredData = dataArray;\r\n        if (columnFilters) {\r\n          for (const columnId in columnFilters) {\r\n            if (columnFilters.hasOwnProperty(columnId)) {\r\n              filteredData = filteredData.filter(column => {\r\n                const filterType = (columnFilters as any)[columnId].type;\r\n                const searchTerm = (columnFilters as any)[columnId].term;\r\n                let colId = columnId;\r\n                if (columnId && columnId.indexOf(' ') !== -1) {\r\n                  const splitIds = columnId.split(' ');\r\n                  colId = splitIds[splitIds.length - 1];\r\n                }\r\n                const filterTerm = column[colId];\r\n                if (filterTerm) {\r\n                  switch (filterType) {\r\n                    case 'equal': return filterTerm.toLowerCase() === searchTerm;\r\n                    case 'ends': return filterTerm.toLowerCase().endsWith(searchTerm);\r\n                    case 'starts': return filterTerm.toLowerCase().startsWith(searchTerm);\r\n                    case 'substring': return filterTerm.toLowerCase().includes(searchTerm);\r\n                  }\r\n                }\r\n              });\r\n            }\r\n          }\r\n          countTotalItems = filteredData.length;\r\n        }\r\n        const updatedData = filteredData.slice(firstRow, firstRow + top);\r\n\r\n        setTimeout(() => {\r\n          let countPropName = 'totalRecordCount';\r\n          if (this.isCountEnabled) {\r\n            countPropName = (this.odataVersion === 4) ? '@odata.count' : 'odata.count';\r\n          }\r\n          const backendResult = { items: updatedData, [countPropName]: countTotalItems, query };\r\n          // console.log('Backend Result', backendResult);\r\n          resolve(backendResult);\r\n        }, 100);\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Dispatched event of a Grid State Changed event */\r\n  gridStateChanged(gridStateChanges: GridStateChange) {\r\n    // console.log('Client sample, Grid State changed:: ', gridStateChanges);\r\n    console.log('Client sample, Grid State changed:: ', gridStateChanges.change);\r\n  }\r\n\r\n  // THE FOLLOWING METHODS ARE ONLY FOR DEMO PURPOSES DO NOT USE THIS CODE\r\n  // ---\r\n\r\n  changeCountEnableFlag() {\r\n    this.isCountEnabled = !this.isCountEnabled;\r\n    const odataService = this.gridOptions.backendServiceApi!.service as GridOdataService;\r\n    odataService.updateOptions({ enableCount: this.isCountEnabled } as OdataOption);\r\n    odataService.clearFilters();\r\n    this.angularGrid.filterService.clearFilters();\r\n    return true;\r\n  }\r\n\r\n  setOdataVersion(version: number) {\r\n    this.odataVersion = version;\r\n    const odataService = this.gridOptions.backendServiceApi!.service as GridOdataService;\r\n    odataService.updateOptions({ version: this.odataVersion } as OdataOption);\r\n    odataService.clearFilters();\r\n    this.angularGrid.filterService.clearFilters();\r\n    return true;\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-odata.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n      <div [class]=\\\"status.class\\\" role=\\\"alert\\\" data-test=\\\"status\\\">\\r\\n        <strong>Status: </strong> {{status.text}}\\r\\n        <span [hidden]=\\\"!processing\\\">\\r\\n          <i class=\\\"fa fa-refresh fa-spin fa-lg fa-fw\\\"></i>\\r\\n        </span>\\r\\n      </div>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"set-dynamic-filter\\\" (click)=\\\"setFiltersDynamically()\\\">\\r\\n        Set Filters Dynamically\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"set-dynamic-sorting\\\"\\r\\n              (click)=\\\"setSortingDynamically()\\\">\\r\\n        Set Sorting Dynamically\\r\\n      </button>\\r\\n      <br>\\r\\n      <span *ngIf=\\\"metrics\\\">\\r\\n        <b>Metrics:</b> {{metrics.endTime | date: 'yyyy-MM-dd hh:mm aaaaa\\\\'m\\\\''}} | {{metrics.executionTime}}ms\\r\\n        | {{metrics.totalItemCount}} items\\r\\n      </span>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-8\\\">\\r\\n      <div class=\\\"alert alert-info\\\" data-test=\\\"alert-odata-query\\\">\\r\\n        <strong>OData Query:</strong> <span data-test=\\\"odata-query-result\\\">{{odataQuery}}</span>\\r\\n      </div>\\r\\n\\r\\n      <label>OData Version: </label>\\r\\n      <span data-test=\\\"radioVersion\\\">\\r\\n        <label class=\\\"radio-inline control-label\\\" for=\\\"radio2\\\">\\r\\n          <input type=\\\"radio\\\" name=\\\"inlineRadioOptions\\\" data-test=\\\"version2\\\" id=\\\"radio2\\\" checked [value]=\\\"2\\\"\\r\\n                 (change)=\\\"setOdataVersion(2)\\\"> 2\\r\\n        </label>\\r\\n        <label class=\\\"radio-inline control-label\\\" for=\\\"radio4\\\">\\r\\n          <input type=\\\"radio\\\" name=\\\"inlineRadioOptions\\\" data-test=\\\"version4\\\" id=\\\"radio4\\\" [value]=\\\"4\\\"\\r\\n                 (change)=\\\"setOdataVersion(4)\\\"> 4\\r\\n        </label>\\r\\n      </span>\\r\\n      <label class=\\\"checkbox-inline control-label\\\" for=\\\"enableCount\\\" style=\\\"margin-left: 20px\\\">\\r\\n        <input type=\\\"checkbox\\\" id=\\\"enableCount\\\" data-test=\\\"enable-count\\\" [checked]=\\\"isCountEnabled\\\"\\r\\n               (click)=\\\"changeCountEnableFlag()\\\">\\r\\n        <span style=\\\"font-weight: bold\\\">Enable Count</span> (add to OData query)\\r\\n      </label>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n      <span>Programmatically go to first/last page:</span>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"goto-first-page\\\" (click)=\\\"goToFirstPage()\\\">\\r\\n        <i class=\\\"fa fa-caret-left fa-lg\\\"></i>\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"goto-last-page\\\" (click)=\\\"goToLastPage()\\\">\\r\\n        <i class=\\\"fa fa-caret-right fa-lg\\\"></i>\\r\\n      </button>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <angular-slickgrid gridId=\\\"grid5\\\"\\r\\n                     [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                     [gridOptions]=\\\"gridOptions\\\"\\r\\n                     [paginationOptions]=\\\"paginationOptions\\\"\\r\\n                     [dataset]=\\\"dataset\\\"\\r\\n                     (onGridStateChanged)=\\\"gridStateChanged($event)\\\"\\r\\n                     (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\r\\n  </angular-slickgrid>\\r\\n</div>\\r\\n\";","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CustomInputFilter } from './custom-inputFilter';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  FieldType,\r\n  Filters,\r\n  Formatter,\r\n  Formatters,\r\n  GridOption,\r\n  GridStateChange,\r\n  JQueryUiSliderOption,\r\n  Metrics,\r\n  MultipleSelectOption,\r\n  OperatorType,\r\n  unsubscribeAllObservables,\r\n} from '../modules/angular-slickgrid';\r\nimport * as moment from 'moment-mini';\r\nimport { Subscription } from 'rxjs';\r\n\r\nconst NB_ITEMS = 1500;\r\n\r\nfunction randomBetween(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n// create a custom translate Formatter (typically you would move that a separate file, for separation of concerns)\r\nconst taskTranslateFormatter: Formatter = (row: number, cell: number, value: any, columnDef: any, dataContext: any, grid: any) => {\r\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\r\n  const translate = gridOptions.i18n;\r\n\r\n  return translate.instant('TASK_X', { x: value });\r\n};\r\n\r\n@Component({\r\n  templateUrl: './grid-range.component.html'\r\n})\r\nexport class GridRangeComponent implements OnInit, OnDestroy {\r\n  title = 'Example 25: Filtering from Range of Search Values';\r\n  subTitle = `\r\n  This demo shows how to use Filters with Range of Search Values (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Range-Filters\" target=\"_blank\">Wiki docs</a>)\r\n  <br/>\r\n    <ul class=\"small\">\r\n      <li>All input filters support the following operators: (>, >=, <, <=, <>, !=, =, ==, *) and now also the (..) for an input range\r\n      <li>All filters (which support ranges) can be defined via the 2 dots (..) which represents a range, this also works for dates and slider in the \"presets\"</li>\r\n      <ul>\r\n        <li>For a numeric range defined in an input filter (must be of type text), you can use 2 dots (..) to represent a range</li>\r\n        <li>example: typing \"10..90\" will filter values between 10 and 90 (but excluding the number 10 and 90)</li>\r\n      </ul>\r\n      <ul>\r\n        <li>note that the examples shown below for the operator, are case sensitive</li>\r\n        <li>by default the range is inclusive which would be the same as defining the filter options to \"operator: 'RangeInclusive'\" or \"operator: OperatoryType.rangeInclusive\"</li>\r\n        <li>you can also set the inverse (exclusive) by defining the filter options to \"operator: 'RangeExclusive'\" or \"operator: OperatoryType.rangeExclusive\"</li>\r\n      </ul>\r\n      <li>Date Range with Flatpickr Date Picker, they will also use the locale, choose a start date then drag or click on the end date</li>\r\n    </ul>\r\n  `;\r\n  private subscriptions: Subscription[] = [];\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions!: Column[];\r\n  gridOptions!: GridOption;\r\n  dataset!: any[];\r\n  selectedLanguage: string;\r\n  metrics!: Metrics;\r\n  filterList = [\r\n    { value: '', label: '' },\r\n    { value: 'currentYearTasks', label: 'Current Year Completed Tasks' },\r\n    { value: 'nextYearTasks', label: 'Next Year Active Tasks' }\r\n  ];\r\n  selectedPredefinedFilter!: { value: string; label: string; };\r\n\r\n  constructor(private translate: TranslateService) {\r\n    // always start with English for Cypress E2E tests to be consistent\r\n    const defaultLang = 'en';\r\n    this.translate.use(defaultLang);\r\n    this.selectedLanguage = defaultLang;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // also unsubscribe all Angular Subscriptions\r\n    this.subscriptions = unsubscribeAllObservables(this.subscriptions);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'title', name: 'Title', field: 'id', nameKey: 'TITLE', minWidth: 100,\r\n        formatter: taskTranslateFormatter,\r\n        sortable: true,\r\n        filterable: true,\r\n        params: { useFormatterOuputToFilter: true }\r\n      },\r\n      {\r\n        id: 'description', name: 'Description', field: 'description', filterable: true, sortable: true, minWidth: 80,\r\n        type: FieldType.string,\r\n        filter: {\r\n          model: new CustomInputFilter(), // create a new instance to make each Filter independent from each other\r\n          enableTrimWhiteSpace: true // or use global \"enableFilterTrimWhiteSpace\" to trim on all Filters\r\n        }\r\n      },\r\n      {\r\n        id: 'percentComplete', name: '% Complete', field: 'percentComplete', nameKey: 'PERCENT_COMPLETE', minWidth: 120,\r\n        sortable: true,\r\n        formatter: Formatters.progressBar,\r\n        type: FieldType.number,\r\n        filterable: true,\r\n        filter: {\r\n          model: Filters.sliderRange,\r\n          maxValue: 100, // or you can use the filterOptions as well\r\n          operator: OperatorType.rangeInclusive, // defaults to inclusive\r\n          params: { hideSliderNumbers: false }, // you can hide/show the slider numbers on both side\r\n          filterOptions: { min: 0, step: 5 } as JQueryUiSliderOption // you can also optionally pass any option of the jQuery UI Slider\r\n        }\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start', nameKey: 'START', formatter: Formatters.dateIso, sortable: true, minWidth: 75, width: 100, exportWithFormatter: true,\r\n        type: FieldType.date, filterable: true, filter: { model: Filters.compoundDate }\r\n      },\r\n      {\r\n        id: 'finish', name: 'Finish', field: 'finish', nameKey: 'FINISH', formatter: Formatters.dateIso, sortable: true, minWidth: 75, width: 120, exportWithFormatter: true,\r\n        type: FieldType.date,\r\n        filterable: true,\r\n        filter: {\r\n          model: Filters.dateRange,\r\n        }\r\n      },\r\n      {\r\n        id: 'duration', field: 'duration', nameKey: 'DURATION', maxWidth: 90,\r\n        type: FieldType.number,\r\n        sortable: true,\r\n        filterable: true, filter: {\r\n          model: Filters.input,\r\n          operator: OperatorType.rangeExclusive // defaults to inclusive\r\n        }\r\n      },\r\n      {\r\n        id: 'completed', name: 'Completed', field: 'completed', nameKey: 'COMPLETED', minWidth: 85, maxWidth: 90,\r\n        formatter: Formatters.checkmark,\r\n        exportWithFormatter: true, // you can set this property in the column definition OR in the grid options, column def has priority over grid options\r\n        filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\r\n          model: Filters.singleSelect,\r\n          filterOptions: { autoDropWidth: true } as MultipleSelectOption\r\n        }\r\n      }\r\n    ];\r\n\r\n    const presetLowestDay = moment().add(-2, 'days').format('YYYY-MM-DD');\r\n    const presetHighestDay = moment().add(20, 'days').format('YYYY-MM-DD');\r\n\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableExcelCopyBuffer: true,\r\n      enableFiltering: true,\r\n      // enableFilterTrimWhiteSpace: true,\r\n      enableTranslate: true,\r\n      i18n: this.translate,\r\n\r\n      // use columnDef searchTerms OR use presets as shown below\r\n      presets: {\r\n        filters: [\r\n          //  you can use the 2 dots separator on all Filters which support ranges\r\n          { columnId: 'duration', searchTerms: ['4..88'] },\r\n          // { columnId: 'percentComplete', searchTerms: ['5..80'] }, // without operator will default to 'RangeExclusive'\r\n          // { columnId: 'finish', operator: 'RangeInclusive', searchTerms: [`${presetLowestDay}..${presetHighestDay}`] },\r\n\r\n          // or you could also use 2 searchTerms values, instead of using the 2 dots (only works with SliderRange & DateRange Filters)\r\n          // BUT make sure to provide the operator, else the filter service won't know that this is really a range\r\n          { columnId: 'percentComplete', operator: 'RangeInclusive', searchTerms: [5, 80] }, // same result with searchTerms: ['5..80']\r\n          { columnId: 'finish', operator: 'RangeInclusive', searchTerms: [presetLowestDay, presetHighestDay] },\r\n        ],\r\n        sorters: [\r\n          { columnId: 'percentComplete', direction: 'DESC' },\r\n          { columnId: 'duration', direction: 'ASC' },\r\n        ],\r\n      }\r\n    };\r\n\r\n    // mock a dataset\r\n    this.dataset = this.mockData(NB_ITEMS);\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  mockData(itemCount: number, startingIndex = 0): any[] {\r\n    // mock a dataset\r\n    const tempDataset = [];\r\n    for (let i = startingIndex; i < (startingIndex + itemCount); i++) {\r\n      const randomDuration = randomBetween(0, 365);\r\n      const randomYear = randomBetween(moment().year(), moment().year() + 1);\r\n      const randomMonth = randomBetween(0, 12);\r\n      const randomDay = randomBetween(10, 28);\r\n      const randomPercent = randomBetween(0, 100);\r\n\r\n      tempDataset.push({\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        description: (i % 5) ? 'desc ' + i : null, // also add some random to test NULL field\r\n        duration: randomDuration,\r\n        percentComplete: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: (i % 4) ? null : new Date(randomYear, randomMonth, randomDay),          // provide a Date format\r\n        finish: new Date(randomYear, randomMonth, randomDay),\r\n        completed: (randomPercent === 100) ? true : false,\r\n      });\r\n    }\r\n\r\n    return tempDataset;\r\n  }\r\n\r\n  clearFilters() {\r\n    this.selectedPredefinedFilter = { value: '', label: '' };\r\n    this.angularGrid.filterService.clearFilters();\r\n  }\r\n\r\n  /** Dispatched event of a Grid State Changed event */\r\n  gridStateChanged(gridState: GridStateChange) {\r\n    console.log('Client sample, Grid State changed:: ', gridState);\r\n  }\r\n\r\n  /** Save current Filters, Sorters in LocaleStorage or DB */\r\n  saveCurrentGridState() {\r\n    console.log('Client sample, last Grid State:: ', this.angularGrid.gridStateService.getCurrentGridState());\r\n  }\r\n\r\n  refreshMetrics(e: Event, args: any) {\r\n    if (args && args.current >= 0) {\r\n      setTimeout(() => {\r\n        this.metrics = {\r\n          startTime: new Date(),\r\n          itemCount: args && args.current || 0,\r\n          totalItemCount: this.dataset.length || 0\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  setFiltersDynamically() {\r\n    const presetLowestDay = moment().add(-5, 'days').format('YYYY-MM-DD');\r\n    const presetHighestDay = moment().add(25, 'days').format('YYYY-MM-DD');\r\n\r\n    // we can Set Filters Dynamically (or different filters) afterward through the FilterService\r\n    this.angularGrid.filterService.updateFilters([\r\n      { columnId: 'duration', searchTerms: ['14..78'], operator: 'RangeInclusive' },\r\n      { columnId: 'percentComplete', operator: 'RangeExclusive', searchTerms: [15, 85] },\r\n      { columnId: 'finish', operator: 'RangeInclusive', searchTerms: [presetLowestDay, presetHighestDay] },\r\n    ]);\r\n  }\r\n\r\n  setSortingDynamically() {\r\n    this.angularGrid.sortService.updateSorting([\r\n      // orders matter, whichever is first in array will be the first sorted column\r\n      { columnId: 'finish', direction: 'DESC' },\r\n      { columnId: 'percentComplete', direction: 'ASC' },\r\n    ]);\r\n  }\r\n\r\n  usePredefinedFilter(filterValue: string) {\r\n    let filters: any[] = [];\r\n    const currentYear = moment().year();\r\n\r\n    switch (filterValue) {\r\n      case 'currentYearTasks':\r\n        filters = [\r\n          { columnId: 'finish', operator: OperatorType.rangeInclusive, searchTerms: [`${currentYear}-01-01`, `${currentYear}-12-31`] },\r\n          { columnId: 'completed', operator: OperatorType.equal, searchTerms: [true] },\r\n        ];\r\n        break;\r\n      case 'nextYearTasks':\r\n        filters = [{ columnId: 'start', operator: '>=', searchTerms: [`${currentYear + 1}-01-01`] }];\r\n        break;\r\n    }\r\n    this.angularGrid.filterService.updateFilters(filters);\r\n  }\r\n\r\n  switchLanguage() {\r\n    const nextLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\r\n    this.subscriptions.push(\r\n      this.translate.use(nextLanguage).subscribe(() => {\r\n        this.selectedLanguage = nextLanguage;\r\n      })\r\n    );\r\n  }\r\n}\r\n","export default \"<div class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-range.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <br />\\r\\n  <span *ngIf=\\\"metrics\\\" style=\\\"margin-right: 10px\\\">\\r\\n    <b>Metrics:</b> {{metrics.startTime | date: 'yyyy-MM-dd hh:mm aaaaa\\\\'m\\\\''}} | {{metrics.itemCount}} of\\r\\n    {{metrics.totalItemCount}} items\\r\\n  </span>\\r\\n\\r\\n  <form class=\\\"row row-cols-lg-auto g-3 align-items-center\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"clear-filters\\\" (click)=\\\"clearFilters()\\\">\\r\\n        Clear Filters\\r\\n      </button>\\r\\n    </div>\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"clear-sorting\\\"\\r\\n              (click)=\\\"angularGrid.sortService.clearSorting()\\\">\\r\\n        Clear Sorting\\r\\n      </button>\\r\\n    </div>\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"set-dynamic-filter\\\" (click)=\\\"setFiltersDynamically()\\\">\\r\\n        Set Filters Dynamically\\r\\n      </button>\\r\\n    </div>\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"set-dynamic-sorting\\\"\\r\\n              (click)=\\\"setSortingDynamically()\\\">\\r\\n        Set Sorting Dynamically\\r\\n      </button>\\r\\n    </div>\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <label for=\\\"selectedFilter\\\" style=\\\"margin-left: 10px\\\">Predefined Filters</label>\\r\\n    </div>\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <select name=\\\"selectedFilter\\\" class=\\\"form-select\\\" [(ngModel)]=\\\"selectedPredefinedFilter\\\"\\r\\n              data-test=\\\"select-dynamic-filter\\\" (ngModelChange)=\\\"usePredefinedFilter($event)\\\">\\r\\n        <option [ngValue]=\\\"filter.value\\\" *ngFor=\\\"let filter of filterList\\\">{{filter.label}}</option>\\r\\n      </select>\\r\\n    </div>\\r\\n  </form>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"switchLanguage()\\\" data-test=\\\"language\\\">\\r\\n        <i class=\\\"fa fa-language\\\"></i>\\r\\n        Switch Language\\r\\n      </button>\\r\\n      <b>Locale:</b> <span style=\\\"font-style: italic\\\" data-test=\\\"selected-locale\\\">{{selectedLanguage + '.json'}}</span>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <angular-slickgrid gridId=\\\"grid25\\\"\\r\\n                     [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                     [gridOptions]=\\\"gridOptions\\\"\\r\\n                     [dataset]=\\\"dataset\\\"\\r\\n                     (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n                     (onGridStateChanged)=\\\"gridStateChanged($event)\\\"\\r\\n                     (onBeforeGridDestroy)=\\\"saveCurrentGridState()\\\"\\r\\n                     (sgOnRowCountChanged)=\\\"refreshMetrics($event.detail.eventData, $event.detail.args)\\\">\\r\\n  </angular-slickgrid>\\r\\n</div>\\r\\n\";","import 'slickgrid/lib/jquery.jsonp-2.4.min';\r\nimport 'slickgrid/slick.remotemodel'; // SlickGrid Remote Plugin\r\n\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { AngularGridInstance, Column, Formatter, GridOption } from './../modules/angular-slickgrid';\r\n\r\ndeclare const Slick: any;\r\n\r\nconst brandFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\r\n  return dataContext && dataContext.brand && dataContext.brand.name || '';\r\n};\r\n\r\nconst mpnFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\r\n  let link = '';\r\n  if (dataContext && dataContext.octopart_url && dataContext.mpn) {\r\n    link = `<a href=\"${dataContext.octopart_url}\" target=\"_blank\">${dataContext.mpn}</a>`;\r\n  }\r\n  return link;\r\n};\r\n\r\n@Component({\r\n  templateUrl: './grid-remote.component.html'\r\n})\r\nexport class GridRemoteComponent implements OnDestroy, OnInit {\r\n  private _eventHandler: any = new Slick.EventHandler();\r\n\r\n  title = 'Example 18: Octopart Catalog Search - Remote Model Plugin';\r\n  subTitle = `\r\n    This example demonstrates how to use \"slick.remotemodel.js\" or any Remote implementation through an external Remote Service\r\n    <ul>\r\n      <li>\r\n        Your browser (Chrome) might block access to the Octopart query, if you get \"block content\" then just unblock it\r\n        or try with different browser like Firefox or Edge\r\n      </li>\r\n      <li>If the demo throws some errors, try again later (there's a limit per day).</li>\r\n      <li>\r\n        Uses <a href=\"https://github.com/6pac/SlickGrid/blob/master/slick.remotemodel.js\" target=\"_blank\">slick.remotemodel.js</a>\r\n        which is hooked up to load search results from Octopart, but can easily be extended\r\n        to support any JSONP-compatible backend that accepts paging parameters.\r\n      </li>\r\n      <li>\r\n        This demo implements a custom DataView, however please note that you are on your own to implement all necessary DataView methods\r\n        for Sorting, Filtering, etc...\r\n      </li>\r\n      <li>\r\n        Soure code for this example is available <a href=\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-remote.component.ts\" target=\"_blank\">here</a>\r\n      </li>\r\n    </ul>\r\n  `;\r\n\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions!: Column[];\r\n  customDataView: any;\r\n  gridObj: any;\r\n  gridOptions!: GridOption;\r\n  dataset = [];\r\n  loaderDataView: any;\r\n  loading = false; // spinner when loading data\r\n  search = '';\r\n\r\n  constructor() {\r\n    this.loaderDataView = new Slick.Data.RemoteModel();\r\n    this.customDataView = this.loaderDataView && this.loaderDataView.data;\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n    this.gridObj = angularGrid.slickGrid; // grid object\r\n    this.loaderDataView.setSort('score', -1);\r\n    this.gridObj.setSortColumn('score', false);\r\n\r\n    // notify of a change to preload the first page\r\n    this.gridObj.onViewportChanged.notify();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.defineGrid();\r\n    this.hookAllLoaderEvents();\r\n\r\n    // set default search\r\n    // this.search = 'switch';\r\n    // this.loaderDataView.setSearch(this.search);\r\n  }\r\n\r\n  defineGrid() {\r\n    this.columnDefinitions = [\r\n      { id: 'mpn', name: 'MPN', field: 'mpn', formatter: mpnFormatter, width: 100, sortable: true },\r\n      { id: 'brand', name: 'Brand', field: 'brand.name', formatter: brandFormatter, width: 100, sortable: true },\r\n      { id: 'short_description', name: 'Description', field: 'short_description', width: 520 },\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      enableAutoResize: true,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableCellNavigation: true,\r\n      enableColumnReorder: false,\r\n      enableGridMenu: false,\r\n      multiColumnSort: false\r\n    };\r\n  }\r\n\r\n  hookAllLoaderEvents() {\r\n    if (this._eventHandler && this._eventHandler.subscribe && this.loaderDataView && this.loaderDataView.onDataLoading && this.loaderDataView.onDataLoaded) {\r\n      this._eventHandler.subscribe(this.loaderDataView.onDataLoading, (e: Event, args: any) => {\r\n        this.loading = true;\r\n      });\r\n\r\n      this._eventHandler.subscribe(this.loaderDataView.onDataLoaded, (e: Event, args: any) => {\r\n        if (args && this.gridObj && this.gridObj.invalidateRow && this.gridObj.updateRowCount && this.gridObj.render) {\r\n          for (let i = args.from; i <= args.to; i++) {\r\n            this.gridObj.invalidateRow(i);\r\n          }\r\n          this.gridObj.updateRowCount();\r\n          this.gridObj.render();\r\n          this.loading = false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onSort(e: Event, args: any) {\r\n    if (this.gridObj && this.gridObj.getViewport && this.loaderDataView && this.loaderDataView.ensureData && this.loaderDataView.setSort) {\r\n      const vp = this.gridObj.getViewport();\r\n      if (args && args.sortCol && args.sortCol.field) {\r\n        this.loaderDataView.setSort(args.sortCol.field, args.sortAsc ? 1 : -1);\r\n      }\r\n      this.loaderDataView.ensureData(vp.top, vp.bottom);\r\n    }\r\n  }\r\n\r\n  onViewportChanged(e: Event, args: any) {\r\n    if (this.gridObj && this.gridObj.getViewport && this.loaderDataView && this.loaderDataView.ensureData) {\r\n      const vp = this.gridObj.getViewport();\r\n      this.loaderDataView.ensureData(vp.top, vp.bottom);\r\n    }\r\n  }\r\n\r\n  searchChanged(newValue: string) {\r\n    if (newValue && this.gridObj && this.gridObj.getViewport && this.loaderDataView && this.loaderDataView.ensureData && this.loaderDataView.setSearch) {\r\n      const vp = this.gridObj.getViewport();\r\n      this.loaderDataView.setSearch(newValue);\r\n      this.loaderDataView.ensureData(vp.top, vp.bottom);\r\n    }\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-remote.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <div class=\\\"col-md-6\\\" style=\\\"margin-bottom: 15px\\\">\\r\\n    <label>Octopart Catalog Search <small>(type a word then press ENTER)</small></label>\\r\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" [value]=\\\"search\\\" (change)=\\\"searchChanged($event.target.value)\\\">\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"alert alert-danger col-md-7\\\" role=\\\"alert\\\">\\r\\n    <strong>Note:</strong>\\r\\n    this demo no longer displays any results because the WebAPI Key to connect and query the <b>Octopart Component\\r\\n      Search</b> is no longer valid. However the concept remains valid, which is to use your own Custom DataView\\r\\n    instead of the default SlickGrid DataView used by this library.\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"alert alert-warning col-md-6\\\" role=\\\"alert\\\" *ngIf=\\\"loading\\\">\\r\\n    <i class=\\\"fa fa-refresh fa-spin fa-lg fa-fw\\\"></i>\\r\\n    <span>Loading...</span>\\r\\n  </div>\\r\\n\\r\\n  <angular-slickgrid gridId=\\\"grid18\\\" [columnDefinitions]=\\\"columnDefinitions\\\" [gridOptions]=\\\"gridOptions\\\"\\r\\n                     [dataset]=\\\"dataset\\\" [customDataView]=\\\"customDataView\\\"\\r\\n                     (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n                     (sgOnViewportChanged)=\\\"onViewportChanged($event.detail.eventData, $event.detail.args)\\\"\\r\\n                     (sgOnSort)=\\\"onSort($event.detail.eventData, $event.detail.args)\\\">\\r\\n  </angular-slickgrid>\\r\\n</div>\\r\\n\";","import { Component, OnInit, Injectable, ViewEncapsulation } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AngularGridInstance, Column, GridOption, Filters, Formatter, LongTextEditorOption, FieldType, Editors, Formatters, AutocompleteOption, EditCommand, formatNumber, Sorters } from '../modules/angular-slickgrid';\r\n\r\nconst URL_COUNTRIES_COLLECTION = 'assets/data/countries.json';\r\ndeclare const Slick: any;\r\n\r\n/**\r\n * Check if the current item (cell) is editable or not\r\n * @param {*} dataContext - item data context object\r\n * @param {*} columnDef - column definition\r\n * @param {*} grid - slickgrid grid object\r\n * @returns {boolean} isEditable\r\n */\r\nfunction checkItemIsEditable(dataContext: any, columnDef: Column, grid: any) {\r\n  const gridOptions = grid && grid.getOptions && grid.getOptions();\r\n  const hasEditor = columnDef.editor;\r\n  const isGridEditable = gridOptions.editable;\r\n  let isEditable = !!(isGridEditable && hasEditor);\r\n\r\n  if (dataContext && columnDef && gridOptions && gridOptions.editable) {\r\n    switch (columnDef.id) {\r\n      case 'finish':\r\n        isEditable = !!dataContext?.completed;\r\n        break;\r\n    }\r\n  }\r\n  return isEditable;\r\n}\r\n\r\nconst customEditableInputFormatter: Formatter = (_row, _cell, value, columnDef, _dataContext, grid) => {\r\n  const gridOptions = grid && grid.getOptions && grid.getOptions();\r\n  const isEditableLine = gridOptions.editable && columnDef.editor;\r\n  value = (value === null || value === undefined) ? '' : value;\r\n  return isEditableLine ? { text: value, addClasses: 'editable-field', toolTip: 'Click to Edit' } : value;\r\n};\r\n\r\n// you can create custom validator to pass to an inline editor\r\nconst myCustomTitleValidator = (value: any, args: any) => {\r\n  if ((value === null || value === undefined || !value.length) && (args.compositeEditorOptions && args.compositeEditorOptions.modalType === 'create' || args.compositeEditorOptions.modalType === 'edit')) {\r\n    // we will only check if the field is supplied when it's an inline editing OR a composite editor of type create/edit\r\n    return { valid: false, msg: 'This is a required field.' };\r\n  } else if (!/^(task\\s\\d+)*$/i.test(value)) {\r\n    return { valid: false, msg: 'Your title is invalid, it must start with \"Task\" followed by a number.' };\r\n  }\r\n  return { valid: true, msg: '' };\r\n};\r\n\r\n@Component({\r\n  templateUrl: './grid-resize-by-content.component.html',\r\n  styleUrls: ['./grid-resize-by-content.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\n@Injectable()\r\nexport class GridResizeByContentComponent implements OnInit {\r\n  title = 'Example 30: Columns Resize by Content';\r\n  subTitle = `The grid below uses the optional resize by cell content (with a fixed 950px for demo purposes), you can click on the 2 buttons to see the difference. The \"autosizeColumns\" is really the default option used by Angular-SlickGrid, the resize by cell content is optional because it requires to read the first thousand rows and do extra width calculation.`;\r\n\r\n  angularGrid!: AngularGridInstance;\r\n  gridOptions!: GridOption;\r\n  columnDefinitions: Column[] = [];\r\n  dataset: any[] = [];\r\n  editQueue: any[] = [];\r\n  editedItems: any = {};\r\n  isUsingDefaultResize = false;\r\n  isGridEditable = true;\r\n  isCompositeDisabled = false;\r\n  isMassSelectionDisabled = true;\r\n  complexityLevelList = [\r\n    { value: 0, label: 'Very Simple' },\r\n    { value: 1, label: 'Simple' },\r\n    { value: 2, label: 'Straightforward' },\r\n    { value: 3, label: 'Complex' },\r\n    { value: 4, label: 'Very Complex' },\r\n  ];\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.defineGrid();\r\n    this.dataset = this.loadData(5000);\r\n  }\r\n\r\n  // Grid2 definition\r\n  defineGrid() {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'title', name: 'Title', field: 'title', sortable: true, type: FieldType.string, minWidth: 65,\r\n        // you can adjust the resize calculation via multiple options\r\n        resizeExtraWidthPadding: 4,\r\n        resizeCharWidthInPx: 7.6,\r\n        resizeCalcWidthRatio: 1,\r\n        resizeMaxWidthThreshold: 200,\r\n        filterable: true, columnGroup: 'Common Factor',\r\n        filter: { model: Filters.compoundInputText },\r\n        formatter: Formatters.multiple, params: { formatters: [Formatters.uppercase, Formatters.bold] },\r\n        editor: {\r\n          model: Editors.longText, required: true, alwaysSaveOnEnterKey: true,\r\n          maxLength: 12,\r\n          editorOptions: {\r\n            cols: 45,\r\n            rows: 6,\r\n            buttonTexts: {\r\n              cancel: 'Close',\r\n              save: 'Done'\r\n            }\r\n          } as LongTextEditorOption,\r\n          validator: myCustomTitleValidator,\r\n        },\r\n      },\r\n      {\r\n        id: 'duration', name: 'Duration', field: 'duration', sortable: true, filterable: true, minWidth: 65,\r\n        type: FieldType.number, columnGroup: 'Common Factor',\r\n        formatter: (_row, _cell, value) => {\r\n          if (value === null || value === undefined || value === '') {\r\n            return '';\r\n          }\r\n          return value > 1 ? `${value} days` : `${value} day`;\r\n        },\r\n        editor: { model: Editors.float, decimal: 2, valueStep: 1, minValue: 0, maxValue: 10000, alwaysSaveOnEnterKey: true, required: true },\r\n      },\r\n      {\r\n        id: 'cost', name: 'Cost', field: 'cost', minWidth: 65,\r\n        sortable: true, filterable: true, type: FieldType.number, columnGroup: 'Analysis',\r\n        filter: { model: Filters.compoundInputNumber },\r\n        formatter: Formatters.dollar,\r\n      },\r\n      {\r\n        id: 'percentComplete', name: '% Complete', field: 'percentComplete', minWidth: 100,\r\n        type: FieldType.number,\r\n        sortable: true, filterable: true, columnGroup: 'Analysis',\r\n        filter: { model: Filters.compoundSlider, operator: '>=' },\r\n        editor: {\r\n          model: Editors.slider,\r\n          minValue: 0, maxValue: 100,\r\n        },\r\n      },\r\n      {\r\n        id: 'complexity', name: 'Complexity', field: 'complexity',\r\n        resizeCalcWidthRatio: 0.82, // default calc ratio is 1 or 0.95 for field type of string\r\n        sortable: true, filterable: true, columnGroup: 'Analysis',\r\n        formatter: (_row, _cell, value) => this.complexityLevelList[value].label,\r\n        exportCustomFormatter: (_row, _cell, value) => this.complexityLevelList[value].label,\r\n        filter: {\r\n          model: Filters.multipleSelect,\r\n          collection: this.complexityLevelList\r\n        },\r\n        editor: {\r\n          model: Editors.singleSelect,\r\n          collection: this.complexityLevelList,\r\n        },\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start', sortable: true,\r\n        formatter: Formatters.dateUs, columnGroup: 'Period',\r\n        exportCustomFormatter: Formatters.dateUs,\r\n        type: FieldType.date, outputType: FieldType.dateUs, saveOutputType: FieldType.dateUtc,\r\n        filterable: true, filter: { model: Filters.compoundDate },\r\n        editor: { model: Editors.date, params: { hideClearButton: false } },\r\n      },\r\n      {\r\n        id: 'completed', name: 'Completed', field: 'completed', width: 80, minWidth: 75, maxWidth: 100,\r\n        sortable: true, filterable: true, columnGroup: 'Period',\r\n        formatter: Formatters.multiple,\r\n        params: { formatters: [Formatters.checkmark, Formatters.center] },\r\n        exportWithFormatter: false,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\r\n          model: Filters.singleSelect\r\n        },\r\n        editor: { model: Editors.checkbox, },\r\n        // editor: { model: Editors.singleSelect, collection: [{ value: true, label: 'Yes' }, { value: false, label: 'No' }], },\r\n      },\r\n      {\r\n        id: 'finish', name: 'Finish', field: 'finish', sortable: true,\r\n        formatter: Formatters.dateUs, columnGroup: 'Period',\r\n        type: FieldType.date, outputType: FieldType.dateUs, saveOutputType: FieldType.dateUtc,\r\n        filterable: true, filter: { model: Filters.compoundDate },\r\n        exportCustomFormatter: Formatters.dateUs,\r\n        editor: {\r\n          model: Editors.date,\r\n          editorOptions: { minDate: 'today' },\r\n          validator: (value, args) => {\r\n            const dataContext = args && args.item;\r\n            if (dataContext && (dataContext.completed && !value)) {\r\n              return { valid: false, msg: 'You must provide a \"Finish\" date when \"Completed\" is checked.' };\r\n            }\r\n            return { valid: true, msg: '' };\r\n          }\r\n        },\r\n      },\r\n      {\r\n        id: 'product', name: 'Product', field: 'product',\r\n        filterable: true, columnGroup: 'Item',\r\n        minWidth: 100,\r\n        resizeCharWidthInPx: 8,\r\n        exportWithFormatter: true,\r\n        dataKey: 'id',\r\n        labelKey: 'itemName',\r\n        formatter: Formatters.complexObject,\r\n        exportCustomFormatter: Formatters.complex, // without the Editing cell Formatter\r\n        type: FieldType.object,\r\n        sorter: Sorters.objectString,\r\n        editor: {\r\n          model: Editors.autoComplete,\r\n          alwaysSaveOnEnterKey: true,\r\n\r\n          // example with a Remote API call\r\n          editorOptions: {\r\n            minLength: 1,\r\n            source: (request, response) => {\r\n              // const items = require('c://TEMP/items.json');\r\n              const products = this.mockProducts();\r\n              response(products.filter(product => product.itemName.toLowerCase().includes(request.term.toLowerCase())));\r\n            },\r\n            renderItem: {\r\n              // layout: 'twoRows',\r\n              // templateCallback: (item: any) => this.renderItemCallbackWith2Rows(item),\r\n\r\n              layout: 'fourCorners',\r\n              templateCallback: (item: any) => this.renderItemCallbackWith4Corners(item),\r\n            },\r\n          } as AutocompleteOption,\r\n        },\r\n        filter: {\r\n          model: Filters.inputText,\r\n          // placeholder: '🔎︎ search city',\r\n          type: FieldType.string,\r\n          queryField: 'product.itemName',\r\n        }\r\n      },\r\n      {\r\n        id: 'origin', name: 'Country of Origin', field: 'origin',\r\n        formatter: Formatters.complexObject, columnGroup: 'Item',\r\n        exportCustomFormatter: Formatters.complex, // without the Editing cell Formatter\r\n        dataKey: 'code',\r\n        labelKey: 'name',\r\n        type: FieldType.object,\r\n        sorter: Sorters.objectString,\r\n        filterable: true,\r\n        sortable: true,\r\n        minWidth: 100,\r\n        editor: {\r\n          model: Editors.autoComplete,\r\n          customStructure: { label: 'name', value: 'code' },\r\n          collectionAsync: this.http.get(URL_COUNTRIES_COLLECTION),\r\n        },\r\n        filter: {\r\n          model: Filters.inputText,\r\n          type: FieldType.string,\r\n          queryField: 'origin.name',\r\n        }\r\n      },\r\n      {\r\n        id: 'action', name: 'Action', field: 'action', width: 70, minWidth: 70, maxWidth: 70,\r\n        excludeFromExport: true,\r\n        formatter: () => `<div class=\"button-style margin-auto\" style=\"width: 35px;\"><span class=\"fa fa-chevron-down text-primary\"></span></div>`,\r\n        cellMenu: {\r\n          hideCloseButton: false,\r\n          width: 175,\r\n          commandTitle: 'Commands',\r\n          commandItems: [\r\n            {\r\n              command: 'help',\r\n              title: 'Help!',\r\n              iconCssClass: 'fa fa-question-circle',\r\n              positionOrder: 66,\r\n              action: () => alert('Please Help!'),\r\n            },\r\n            'divider',\r\n            {\r\n              command: 'delete-row', title: 'Delete Row', positionOrder: 64,\r\n              iconCssClass: 'fa fa-times color-danger', cssClass: 'red', textCssClass: 'text-italic color-danger-light',\r\n              // only show command to 'Delete Row' when the task is not completed\r\n              itemVisibilityOverride: (args) => {\r\n                return !args.dataContext?.completed;\r\n              },\r\n              action: (_event, args) => {\r\n                const dataContext = args.dataContext;\r\n                const row = args?.row ?? 0;\r\n                if (confirm(`Do you really want to delete row (${row + 1}) with \"${dataContext.title}\"`)) {\r\n                  this.angularGrid.gridService.deleteItemById(dataContext.id);\r\n                }\r\n              }\r\n            },\r\n          ],\r\n        }\r\n      },\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      editable: true,\r\n      autoAddCustomEditorFormatter: customEditableInputFormatter,\r\n      enableCellNavigation: true,\r\n      autoEdit: true,\r\n      autoCommitEdit: true,\r\n      autoResize: {\r\n        containerId: 'smaller-container',\r\n        sidePadding: 10\r\n      },\r\n      enableAutoResize: true,\r\n\r\n      // resizing by cell content is opt-in\r\n      // we first need to disable the 2 default flags to autoFit/autosize\r\n      autoFitColumnsOnFirstLoad: false,\r\n      enableAutoSizeColumns: false,\r\n      // then enable resize by content with these 2 flags\r\n      autosizeColumnsByCellContentOnFirstLoad: true,\r\n      enableAutoResizeColumnsByCellContent: true,\r\n\r\n      resizeByContentOptions: {\r\n        // optional resize calculation options\r\n        defaultRatioForStringType: 0.92,\r\n        formatterPaddingWidthInPx: 8, // optional editor formatter padding for resize calculation\r\n      },\r\n\r\n      enableExcelExport: true,\r\n      excelExportOptions: {\r\n        exportWithFormatter: false\r\n      },\r\n      enableFiltering: true,\r\n      enableRowSelection: true,\r\n      enableCheckboxSelector: true,\r\n      checkboxSelector: {\r\n        hideInFilterHeaderRow: false,\r\n        hideInColumnTitleRow: true,\r\n      },\r\n      rowSelectionOptions: {\r\n        // True (Single Selection), False (Multiple Selections)\r\n        selectActiveRow: false\r\n      },\r\n      createPreHeaderPanel: true,\r\n      showPreHeaderPanel: true,\r\n      preHeaderPanelHeight: 28,\r\n      rowHeight: 33,\r\n      headerRowHeight: 35,\r\n      editCommandHandler: (item, column, editCommand) => {\r\n        // composite editors values are saved as array, so let's convert to array in any case and we'll loop through these values\r\n        const prevSerializedValues = Array.isArray(editCommand.prevSerializedValue) ? editCommand.prevSerializedValue : [editCommand.prevSerializedValue];\r\n        const serializedValues = Array.isArray(editCommand.serializedValue) ? editCommand.serializedValue : [editCommand.serializedValue];\r\n        const editorColumns = this.columnDefinitions.filter((col) => col.editor !== undefined);\r\n\r\n        const modifiedColumns: Column[] = [];\r\n        prevSerializedValues.forEach((_val, index) => {\r\n          const prevSerializedValue = prevSerializedValues[index];\r\n          const serializedValue = serializedValues[index];\r\n\r\n          if (prevSerializedValue !== serializedValue) {\r\n            const finalColumn = Array.isArray(editCommand.prevSerializedValue) ? editorColumns[index] : column;\r\n            this.editedItems[this.gridOptions.datasetIdPropertyName || 'id'] = item; // keep items by their row indexes, if the row got edited twice then we'll keep only the last change\r\n            this.angularGrid.slickGrid.invalidate();\r\n            editCommand.execute();\r\n\r\n            this.renderUnsavedCellStyling(item, finalColumn, editCommand);\r\n            modifiedColumns.push(finalColumn);\r\n          }\r\n        });\r\n\r\n        // queued editor only keeps 1 item object even when it's a composite editor,\r\n        // so we'll push only 1 change at the end but with all columns modified\r\n        // this way we can undo the entire row change (for example if user changes 3 field in the editor modal, then doing a undo last change will undo all 3 in 1 shot)\r\n        this.editQueue.push({ item, columns: modifiedColumns, editCommand });\r\n      },\r\n      // when using the cellMenu, you can change some of the default options and all use some of the callback methods\r\n      enableCellMenu: true,\r\n    };\r\n  }\r\n\r\n  loadData(count: number) {\r\n    // mock data\r\n    const tmpArray: any[] = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const randomItemId = Math.floor(Math.random() * this.mockProducts().length);\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomFinishYear = (new Date().getFullYear()) + Math.floor(Math.random() * 10); // use only years not lower than 3 years ago\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomTime = Math.floor((Math.random() * 59));\r\n      const randomFinish = new Date(randomFinishYear, (randomMonth + 1), randomDay, randomTime, randomTime, randomTime);\r\n      const randomPercentComplete = Math.floor(Math.random() * 100) + 15; // make it over 15 for E2E testing purposes\r\n      const percentCompletion = randomPercentComplete > 100 ? (i > 5 ? 100 : 88) : randomPercentComplete; // don't use 100 unless it's over index 5, for E2E testing purposes\r\n      const isCompleted = percentCompletion === 100;\r\n\r\n      tmpArray[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.floor(Math.random() * 100) + 10,\r\n        percentComplete: percentCompletion,\r\n        analysis: {\r\n          percentComplete: percentCompletion,\r\n        },\r\n        complexity: i % 3 ? 0 : 2,\r\n        start: new Date(randomYear, randomMonth, randomDay, randomDay, randomTime, randomTime, randomTime),\r\n        finish: (isCompleted || (i % 3 === 0 && (randomFinish > new Date() && i > 3)) ? (isCompleted ? new Date() : randomFinish) : ''), // make sure the random date is earlier than today and it's index is bigger than 3\r\n        cost: (i % 33 === 0) ? null : Math.round(Math.random() * 10000) / 100,\r\n        completed: (isCompleted || (i % 3 === 0 && (randomFinish > new Date() && i > 3))),\r\n        product: { id: this.mockProducts()[randomItemId]?.id, itemName: this.mockProducts()[randomItemId]?.itemName, },\r\n        origin: (i % 2) ? { code: 'CA', name: 'Canada' } : { code: 'US', name: 'United States' },\r\n      };\r\n\r\n      if (!(i % 8)) {\r\n        delete tmpArray[i].finish; // also test with undefined properties\r\n        delete tmpArray[i].percentComplete; // also test with undefined properties\r\n      }\r\n    }\r\n    return tmpArray;\r\n  }\r\n\r\n  handleValidationError(_e: Event, args: any) {\r\n    if (args.validationResults) {\r\n      let errorMsg = args.validationResults.msg || '';\r\n      if (args.editor && (args.editor instanceof Slick.CompositeEditor)) {\r\n        if (args.validationResults.errors) {\r\n          errorMsg += '\\n';\r\n          for (const error of args.validationResults.errors) {\r\n            const columnName = error.editor.args.column.name;\r\n            errorMsg += `${columnName.toUpperCase()}: ${error.msg}`;\r\n          }\r\n        }\r\n        console.log(errorMsg);\r\n      }\r\n    } else {\r\n      alert(args.validationResults.msg);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  handleItemDeleted(_e: Event, args: any) {\r\n    console.log('item deleted with id:', args.itemId);\r\n  }\r\n\r\n  handleOnBeforeEditCell(e: Event, args: any) {\r\n    const { column, item, grid } = args;\r\n\r\n    if (column && item) {\r\n      if (!checkItemIsEditable(item, column, grid)) {\r\n        // event.preventDefault();\r\n        e.stopImmediatePropagation();\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  handleOnCellChange(_e: Event, args: any) {\r\n    const dataContext = args?.item;\r\n\r\n    // when the field \"completed\" changes to false, we also need to blank out the \"finish\" date\r\n    if (dataContext && !dataContext.completed) {\r\n      dataContext.finish = null;\r\n      this.angularGrid.gridService.updateItem(dataContext);\r\n    }\r\n  }\r\n\r\n  handlePaginationChanged() {\r\n    this.removeAllUnsavedStylingFromCell();\r\n    this.renderUnsavedStylingOnAllVisibleCells();\r\n  }\r\n\r\n  handleDefaultResizeColumns() {\r\n    // just for demo purposes, set it back to its original width\r\n    const columns = this.angularGrid.slickGrid.getColumns() as Column[];\r\n    columns.forEach(col => col.width = col.originalWidth);\r\n    this.angularGrid.slickGrid.setColumns(columns);\r\n    this.angularGrid.slickGrid.autosizeColumns();\r\n    this.isUsingDefaultResize = true;\r\n  }\r\n\r\n  handleNewResizeColumns() {\r\n    this.angularGrid.resizerService.resizeColumnsByCellContent(true);\r\n    this.isUsingDefaultResize = false;\r\n  }\r\n\r\n  toggleGridEditReadonly() {\r\n    // first need undo all edits\r\n    this.undoAllEdits();\r\n\r\n    // then change a single grid options to make the grid non-editable (readonly)\r\n    this.isGridEditable = !this.isGridEditable;\r\n    this.isCompositeDisabled = !this.isGridEditable;\r\n    if (!this.isGridEditable) {\r\n      this.isMassSelectionDisabled = true;\r\n    }\r\n    // dynamically change SlickGrid editable grid option\r\n    this.angularGrid.slickGrid.setOptions({ editable: this.isGridEditable });\r\n  }\r\n\r\n  removeUnsavedStylingFromCell(_item: any, column: Column, row: number) {\r\n    // remove unsaved css class from that cell\r\n    this.angularGrid.slickGrid.removeCellCssStyles(`unsaved_highlight_${[column.id]}${row}`);\r\n  }\r\n\r\n  removeAllUnsavedStylingFromCell() {\r\n    for (const lastEdit of this.editQueue) {\r\n      const lastEditCommand = lastEdit?.editCommand;\r\n      if (lastEditCommand) {\r\n        // remove unsaved css class from that cell\r\n        for (const lastEditColumn of lastEdit.columns) {\r\n          this.removeUnsavedStylingFromCell(lastEdit.item, lastEditColumn, lastEditCommand.row);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  renderUnsavedStylingOnAllVisibleCells() {\r\n    for (const lastEdit of this.editQueue) {\r\n      if (lastEdit) {\r\n        const { item, columns, editCommand } = lastEdit;\r\n        if (Array.isArray(columns)) {\r\n          columns.forEach((col) => {\r\n            this.renderUnsavedCellStyling(item, col, editCommand);\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  renderUnsavedCellStyling(item: any, column: Column, editCommand: EditCommand) {\r\n    if (editCommand && item && column) {\r\n      const row = this.angularGrid.dataView.getRowByItem(item) as number;\r\n      if (row >= 0) {\r\n        const hash = { [row]: { [column.id]: 'unsaved-editable-field' } };\r\n        this.angularGrid.slickGrid.setCellCssStyles(`unsaved_highlight_${[column.id]}${row}`, hash);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  saveAll() {\r\n    // Edit Queue (array increases every time a cell is changed, regardless of item object)\r\n    console.log(this.editQueue);\r\n\r\n    // Edit Items only keeps the merged data (an object with row index as the row properties)\r\n    // if you change 2 different cells on 2 different cells then this editedItems will only contain 1 property\r\n    // example: editedItems = { 0: { title: task 0, duration: 50, ... }}\r\n    // ...means that row index 0 got changed and the final merged object is { title: task 0, duration: 50, ... }\r\n    console.log(this.editedItems);\r\n    // console.log(`We changed ${Object.keys(this.editedItems).length} rows`);\r\n\r\n    // since we saved, we can now remove all the unsaved color styling and reset our array/object\r\n    this.removeAllUnsavedStylingFromCell();\r\n    this.editQueue = [];\r\n    this.editedItems = {};\r\n  }\r\n\r\n  undoLastEdit(showLastEditor = false) {\r\n    const lastEdit = this.editQueue.pop();\r\n    const lastEditCommand = lastEdit?.editCommand;\r\n    if (lastEdit && lastEditCommand && Slick.GlobalEditorLock.cancelCurrentEdit()) {\r\n      lastEditCommand.undo();\r\n\r\n      // remove unsaved css class from that cell\r\n      for (const lastEditColumn of lastEdit.columns) {\r\n        this.removeUnsavedStylingFromCell(lastEdit.item, lastEditColumn, lastEditCommand.row);\r\n      }\r\n      this.angularGrid.slickGrid.invalidate();\r\n\r\n\r\n      // optionally open the last cell editor associated\r\n      if (showLastEditor) {\r\n        this.angularGrid?.slickGrid.gotoCell(lastEditCommand.row, lastEditCommand.cell, false);\r\n      }\r\n    }\r\n  }\r\n\r\n  undoAllEdits() {\r\n    for (const lastEdit of this.editQueue) {\r\n      const lastEditCommand = lastEdit?.editCommand;\r\n      if (lastEditCommand && Slick.GlobalEditorLock.cancelCurrentEdit()) {\r\n        lastEditCommand.undo();\r\n\r\n        // remove unsaved css class from that cell\r\n        for (const lastEditColumn of lastEdit.columns) {\r\n          this.removeUnsavedStylingFromCell(lastEdit.item, lastEditColumn, lastEditCommand.row);\r\n        }\r\n      }\r\n    }\r\n    this.angularGrid.slickGrid.invalidate(); // re-render the grid only after every cells got rolled back\r\n    this.editQueue = [];\r\n  }\r\n\r\n  mockProducts() {\r\n    return [\r\n      {\r\n        id: 0,\r\n        itemName: 'Sleek Metal Computer',\r\n        itemNameTranslated: 'some fantastic sleek metal computer description',\r\n        listPrice: 2100.23,\r\n        itemTypeName: 'I',\r\n        image: 'http://i.stack.imgur.com/pC1Tv.jpg',\r\n        icon: `mdi ${this.getRandomIcon(0)}`,\r\n      },\r\n      {\r\n        id: 1,\r\n        itemName: 'Tasty Granite Table',\r\n        itemNameTranslated: 'an extremely huge and heavy table',\r\n        listPrice: 3200.12,\r\n        itemTypeName: 'I',\r\n        image: 'https://i.imgur.com/Fnm7j6h.jpg',\r\n        icon: `mdi ${this.getRandomIcon(1)}`,\r\n      },\r\n      {\r\n        id: 2,\r\n        itemName: 'Awesome Wooden Mouse',\r\n        itemNameTranslated: 'super old mouse',\r\n        listPrice: 15.00,\r\n        itemTypeName: 'I',\r\n        image: 'https://i.imgur.com/RaVJuLr.jpg',\r\n        icon: `mdi ${this.getRandomIcon(2)}`,\r\n      },\r\n      {\r\n        id: 3,\r\n        itemName: 'Gorgeous Fresh Shirt',\r\n        itemNameTranslated: 'what a gorgeous shirt seriously',\r\n        listPrice: 25.76,\r\n        itemTypeName: 'I',\r\n        image: 'http://i.stack.imgur.com/pC1Tv.jpg',\r\n        icon: `mdi ${this.getRandomIcon(3)}`,\r\n      },\r\n      {\r\n        id: 4,\r\n        itemName: 'Refined Cotton Table',\r\n        itemNameTranslated: 'super light table that will fall apart amazingly fast',\r\n        listPrice: 13.35,\r\n        itemTypeName: 'I',\r\n        image: 'https://i.imgur.com/Fnm7j6h.jpg',\r\n        icon: `mdi ${this.getRandomIcon(4)}`,\r\n      },\r\n      {\r\n        id: 5,\r\n        itemName: 'Intelligent Wooden Pizza',\r\n        itemNameTranslated: 'wood not included',\r\n        listPrice: 23.33,\r\n        itemTypeName: 'I',\r\n        image: 'https://i.imgur.com/RaVJuLr.jpg',\r\n        icon: `mdi ${this.getRandomIcon(5)}`,\r\n      },\r\n      {\r\n        id: 6,\r\n        itemName: 'Licensed Cotton Chips',\r\n        itemNameTranslated: 'not sure what that is',\r\n        listPrice: 71.21,\r\n        itemTypeName: 'I',\r\n        image: 'http://i.stack.imgur.com/pC1Tv.jpg',\r\n        icon: `mdi ${this.getRandomIcon(6)}`,\r\n      },\r\n      {\r\n        id: 7,\r\n        itemName: 'Ergonomic Rubber Soap',\r\n        itemNameTranslated: `so good you'll want to use it every night`,\r\n        listPrice: 2.43,\r\n        itemTypeName: 'I',\r\n        image: 'https://i.imgur.com/Fnm7j6h.jpg',\r\n        icon: `mdi ${this.getRandomIcon(7)}`,\r\n      },\r\n      {\r\n        id: 8,\r\n        itemName: 'Handcrafted Steel Car',\r\n        itemNameTranslated: `aka tesla truck`,\r\n        listPrice: 31288.39,\r\n        itemTypeName: 'I',\r\n        image: 'https://i.imgur.com/RaVJuLr.jpg',\r\n        icon: `mdi ${this.getRandomIcon(8)}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  /** List of icons that are supported in this lib Material Design Icons */\r\n  getRandomIcon(iconIndex?: number) {\r\n    const icons = [\r\n      'fa-500px',\r\n      'fa-address-book',\r\n      'fa-address-book-o',\r\n      'fa-address-card',\r\n      'fa-address-card-o',\r\n      'fa-adjust',\r\n      'fa-adn',\r\n      'fa-align-center',\r\n      'fa-align-justify',\r\n      'fa-align-left',\r\n      'fa-align-right',\r\n      'fa-amazon',\r\n      'fa-ambulance',\r\n      'fa-american-sign-language-interpreting',\r\n      'fa-anchor',\r\n      'fa-android',\r\n      'fa-angellist',\r\n      'fa-angle-double-down',\r\n      'fa-angle-double-left',\r\n      'fa-angle-double-right',\r\n      'fa-angle-double-up',\r\n      'fa-angle-down',\r\n      'fa-angle-left',\r\n      'fa-angle-right',\r\n      'fa-angle-up',\r\n      'fa-apple',\r\n      'fa-archive',\r\n      'fa-area-chart',\r\n      'fa-arrow-circle-down',\r\n      'fa-arrow-circle-left',\r\n      'fa-arrow-circle-o-down',\r\n      'fa-arrow-circle-o-left',\r\n      'fa-arrow-circle-o-right',\r\n      'fa-arrow-circle-o-up',\r\n      'fa-arrow-circle-right',\r\n      'fa-arrow-circle-up',\r\n      'fa-arrow-down',\r\n      'fa-arrow-left',\r\n      'fa-arrow-right',\r\n      'fa-arrow-up',\r\n      'fa-arrows',\r\n      'fa-arrows-alt',\r\n      'fa-arrows-h',\r\n      'fa-arrows-v',\r\n      'fa-assistive-listening-systems',\r\n      'fa-asterisk',\r\n      'fa-at',\r\n      'fa-audio-description',\r\n      'fa-backward',\r\n      'fa-balance-scale',\r\n      'fa-ban',\r\n      'fa-bandcamp',\r\n      'fa-bank (alias)',\r\n      'fa-bar-chart',\r\n      'fa-barcode',\r\n      'fa-bars',\r\n      'fa-bath',\r\n      'fa-battery-empty',\r\n      'fa-battery-full',\r\n      'fa-battery-half',\r\n      'fa-battery-quarter',\r\n      'fa-battery-three-quarters',\r\n      'fa-bed',\r\n      'fa-beer',\r\n      'fa-behance',\r\n      'fa-behance-square',\r\n      'fa-bell',\r\n      'fa-bell-o',\r\n      'fa-bell-slash',\r\n      'fa-bell-slash-o',\r\n      'fa-bicycle',\r\n      'fa-binoculars',\r\n      'fa-birthday-cake',\r\n      'fa-bitbucket',\r\n      'fa-bitbucket-square',\r\n    ];\r\n    const randomNumber = Math.floor((Math.random() * icons.length - 1));\r\n    return icons[iconIndex ?? randomNumber];\r\n  }\r\n\r\n  renderItemCallbackWith2Rows(item: any): string {\r\n    return `<div class=\"autocomplete-container-list\">\r\n      <div class=\"autocomplete-left\">\r\n        <!--<img src=\"http://i.stack.imgur.com/pC1Tv.jpg\" width=\"50\" />-->\r\n        <span class=\"fa ${item.icon}\"></span>\r\n      </div>\r\n      <div>\r\n        <span class=\"autocomplete-top-left\">\r\n          <span class=\"mdfai ${item.itemTypeName === 'I' ? 'fa-info-circle' : 'fa-copy'}\"></span>\r\n          ${item.itemName}\r\n        </span>\r\n      <div>\r\n    </div>\r\n    <div>\r\n      <div class=\"autocomplete-bottom-left\">${item.itemNameTranslated}</div>\r\n    </div>`;\r\n  }\r\n\r\n  renderItemCallbackWith4Corners(item: any): string {\r\n    return `<div class=\"autocomplete-container-list\">\r\n          <div class=\"autocomplete-left\">\r\n            <!--<img src=\"http://i.stack.imgur.com/pC1Tv.jpg\" width=\"50\" />-->\r\n            <span class=\"fa ${item.icon}\"></span>\r\n          </div>\r\n          <div>\r\n            <span class=\"autocomplete-top-left\">\r\n              <span class=\"fa ${item.itemTypeName === 'I' ? 'fa-info-circle' : 'fa-copy'}\"></span>\r\n              ${item.itemName}\r\n            </span>\r\n            <span class=\"autocomplete-top-right\">${formatNumber(item.listPrice, 2, 2, false, '$')}</span>\r\n          <div>\r\n        </div>\r\n        <div>\r\n          <div class=\"autocomplete-bottom-left\">${item.itemNameTranslated}</div>\r\n          <span class=\"autocomplete-bottom-right\">Type: <b>${item.itemTypeName === 'I' ? 'Item' : item.itemTypeName === 'C' ? 'PdCat' : 'Cat'}</b></span>\r\n        </div>`;\r\n  }\r\n}\r\n","export default \"<div class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-resize-by-content.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <h4 class=\\\"ml-3\\\">Container Width (950px)</h4>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"ml-2 mb-2 mr-2\\\">\\r\\n      <div class=\\\"btn-group\\\" data-toggle=\\\"buttons\\\">\\r\\n        <label class=\\\"btn btn-sm btn-outline-secondary {{isUsingDefaultResize ? 'active' : ''}}\\\"\\r\\n               data-test=\\\"autosize-columns-btn\\\">\\r\\n          <input type=\\\"radio\\\" class=\\\"btn-check\\\" name=\\\"options\\\"\\r\\n                 [checked]=\\\"isUsingDefaultResize\\\"\\r\\n                 (click)=\\\"handleDefaultResizeColumns()\\\">\\r\\n          <i class=\\\"fa fa-expand\\\"></i> (default resize) by \\\"autosizeColumns\\\"\\r\\n        </label>\\r\\n        <label class=\\\"btn btn-sm btn-outline-secondary {{isUsingDefaultResize ? '' : 'active'}}\\\"\\r\\n               data-test=\\\"resize-by-content-btn\\\">\\r\\n          <input type=\\\"radio\\\" class=\\\"btn-check\\\" name=\\\"options\\\"\\r\\n                 [checked]=\\\"!isUsingDefaultResize\\\"\\r\\n                 (click)=\\\"handleNewResizeColumns()\\\">\\r\\n          <i class=\\\"fa fa-expand\\\"></i> Resize by Cell Content\\r\\n        </label>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"mb-2\\\">\\r\\n      <div class=\\\"btn-group btn-group-sm\\\" role=\\\"group\\\" aria-label=\\\"Basic Editing Commands\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary\\\" data-test=\\\"toggle-readonly-btn\\\"\\r\\n                (click)=\\\"toggleGridEditReadonly()\\\">\\r\\n          <i class=\\\"fa fa-table\\\"></i> Toggle Edit/Readonly Grid\\r\\n        </button>\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary\\\" data-test=\\\"undo-last-edit-btn\\\"\\r\\n                (click)=\\\"undoLastEdit()\\\">\\r\\n          <i class=\\\"fa fa-undo\\\"></i> Undo Last Edit\\r\\n        </button>\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary\\\" data-test=\\\"save-all-btn\\\"\\r\\n                (click)=\\\"saveAll()\\\">\\r\\n          <i class=\\\"fa fa-save\\\"></i> Save All\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div id=\\\"smaller-container\\\" style=\\\"width: 950px\\\">\\r\\n    <angular-slickgrid gridId=\\\"grid30\\\"\\r\\n                       [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                       [gridOptions]=\\\"gridOptions\\\"\\r\\n                       [dataset]=\\\"dataset\\\"\\r\\n                       (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\r\\n    </angular-slickgrid>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \".editable-field {\\n  background-color: rgba(227, 240, 251, 0.569) !important;\\n}\\n\\n.unsaved-editable-field {\\n  background-color: #fbfdd1 !important;\\n}\\n\\n.button-style {\\n  cursor: pointer;\\n  background-color: white;\\n  border: 1px solid #ababab;\\n  border-radius: 2px;\\n  justify-content: center;\\n  text-align: center;\\n}\\n\\n.button-style:hover {\\n  border-color: #929292;\\n}\";","import { Component } from '@angular/core';\r\nimport { GridRowDetailComponent } from './grid-rowdetail.component';\r\n\r\n@Component({\r\n  templateUrl: './rowdetail-view.component.html'\r\n})\r\nexport class RowDetailViewComponent {\r\n  model!: {\r\n    duration: Date;\r\n    percentComplete: number;\r\n    reporter: string;\r\n    start: Date;\r\n    finish: Date;\r\n    effortDriven: boolean;\r\n    assignee: string;\r\n    title: string;\r\n  };\r\n\r\n  // you also have access to the following objects (it must match the exact property names shown below)\r\n  addon: any; // row detail addon instance\r\n  grid: any;\r\n  dataView: any;\r\n\r\n  // you can also optionally use the Parent Component reference\r\n  // NOTE that you MUST provide it through the \"parent\" property in your \"rowDetail\" grid options\r\n  parent!: GridRowDetailComponent;\r\n\r\n  constructor() { }\r\n\r\n  alertAssignee(name: string) {\r\n    if (typeof name === 'string') {\r\n      alert(`Assignee on this task is: ${name.toUpperCase()}`);\r\n    } else {\r\n      alert('No one is assigned to this task.');\r\n    }\r\n  }\r\n\r\n  deleteRow(model: any) {\r\n    if (confirm(`Are you sure that you want to delete ${model.title}?`)) {\r\n      // you first need to collapse all rows (via the 3rd party addon instance)\r\n      this.addon.collapseAll();\r\n\r\n      // then you can delete the item from the dataView\r\n      this.dataView.deleteItem(model.rowId);\r\n\r\n      this.parent.showFlashMessage(`Deleted row with ${model.title}`, 'danger');\r\n    }\r\n  }\r\n\r\n  callParentMethod(model: any) {\r\n    this.parent.showFlashMessage(`We just called Parent Method from the Row Detail Child Component on ${model.title}`);\r\n  }\r\n}\r\n","export default \"<div class=\\\"container-fluid\\\">\\r\\n  <h3>{{model?.title}}</h3>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\"><label>Assignee:</label> <input class=\\\"form-control\\\" [(ngModel)]=\\\"model.assignee\\\" /></div>\\r\\n    <div class=\\\"col-3\\\"><label>Reporter:</label> <span>{{model?.reporter}}</span></div>\\r\\n    <div class=\\\"col-2\\\"><label>Duration:</label> <span>{{model?.duration}}</span></div>\\r\\n    <div class=\\\"col-2\\\"><label>% Complete:</label> <span>{{model?.percentComplete}}</span></div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\"><label>Start:</label> <span>{{model?.start | date: 'yyyy-MM-dd'}}</span></div>\\r\\n    <div class=\\\"col-3\\\"><label>Finish:</label> <span>{{model?.finish | date: 'yyyy-MM-dd'}}</span></div>\\r\\n    <div class=\\\"col-2\\\"><label>Effort Driven:</label> <i [class]=\\\"model?.effortDriven ? 'fa fa-check' : ''\\\"></i></div>\\r\\n  </div>\\r\\n\\r\\n  <hr>\\r\\n\\r\\n  <div class=\\\"col-sm-8\\\">\\r\\n    <h4>\\r\\n      Find out who is the Assignee\\r\\n      <small>\\r\\n        <button class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"alertAssignee(model?.assignee)\\\" data-test=\\\"assignee-btn\\\">\\r\\n          Click Me\\r\\n        </button>\\r\\n      </small>\\r\\n    </h4>\\r\\n  </div>\\r\\n  <div class=\\\"col-sm-4\\\">\\r\\n    <button class=\\\"btn btn-primary btn-danger btn-sm\\\" (click)=\\\"deleteRow(model)\\\" data-test=\\\"delete-btn\\\">\\r\\n      Delete Row\\r\\n    </button>\\r\\n    <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"callParentMethod(model)\\\" data-test=\\\"parent-btn\\\">\\r\\n      Call Parent Method\\r\\n    </button>\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  template:\r\n    `<h4>\r\n      <i class=\"fa fa-refresh fa-spin fa-2x fa-fw\"></i>\r\n      Loading...\r\n    </h4>`\r\n})\r\nexport class RowDetailPreloadComponent {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  FieldType,\r\n  Filters,\r\n  Formatters,\r\n  GridOption\r\n} from './../modules/angular-slickgrid';\r\nimport { RowDetailViewComponent } from './rowdetail-view.component';\r\nimport { RowDetailPreloadComponent } from './rowdetail-preload.component';\r\n\r\nconst NB_ITEMS = 500;\r\n\r\n@Component({\r\n  templateUrl: './grid-rowdetail.component.html'\r\n})\r\nexport class GridRowDetailComponent implements OnInit {\r\n  title = 'Example 21: Row Detail View';\r\n  subTitle = `\r\n    Add functionality to show extra information with a Row Detail View, (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Row-Detail\" target=\"_blank\">Wiki docs</a>)\r\n    <ul>\r\n      <li>Click on the row \"+\" icon or anywhere on the row to open it (the latter can be changed via property \"useRowClick: false\")</li>\r\n      <li>Pass a View/Model as a Template to the Row Detail</li>\r\n      <li>You can use \"expandableOverride()\" callback to override logic to display expand icon on every row (for example only show it every 2nd row)</li>\r\n    </ul>\r\n  `;\r\n\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions!: Column[];\r\n  gridOptions!: GridOption;\r\n  dataset!: any[];\r\n  detailViewRowCount = 9;\r\n  message = '';\r\n  flashAlertType = 'info';\r\n\r\n  constructor() { }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  get rowDetailInstance(): any {\r\n    // you can get the SlickGrid RowDetail plugin (addon) instance via 2 ways\r\n\r\n    // option 1\r\n    return this.angularGrid.extensions.rowDetailView.instance || {};\r\n\r\n    // OR options 2\r\n    // return this.angularGrid && this.angularGrid.extensionService.getSlickgridAddonInstance(ExtensionName.rowDetailView) || {};\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.defineGrid();\r\n  }\r\n\r\n  /* Define grid Options and Columns */\r\n  defineGrid() {\r\n    // prepare a multiple-select array to filter with\r\n    const multiSelectFilterArray = [];\r\n    for (let i = 0; i < NB_ITEMS; i++) {\r\n      multiSelectFilterArray.push({ value: i, label: i });\r\n    }\r\n\r\n    this.columnDefinitions = [\r\n      { id: 'title', name: 'Title', field: 'title', sortable: true, type: FieldType.string, width: 70, filterable: true },\r\n      { id: 'duration', name: 'Duration (days)', field: 'duration', formatter: Formatters.decimal, params: { minDecimal: 1, maxDecimal: 2 }, sortable: true, type: FieldType.number, minWidth: 90, filterable: true },\r\n      { id: 'percent2', name: '% Complete', field: 'percentComplete2', formatter: Formatters.progressBar, type: FieldType.number, sortable: true, minWidth: 100, filterable: true, filter: { model: Filters.slider, operator: '>' } },\r\n      { id: 'start', name: 'Start', field: 'start', formatter: Formatters.dateIso, sortable: true, type: FieldType.date, minWidth: 90, exportWithFormatter: true, filterable: true, filter: { model: Filters.compoundDate } },\r\n      { id: 'finish', name: 'Finish', field: 'finish', formatter: Formatters.dateIso, sortable: true, type: FieldType.date, minWidth: 90, exportWithFormatter: true, filterable: true, filter: { model: Filters.compoundDate } },\r\n      {\r\n        id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven',\r\n        minWidth: 100,\r\n        formatter: Formatters.checkmark, type: FieldType.boolean,\r\n        filterable: true, sortable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\r\n          model: Filters.singleSelect\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableFiltering: true,\r\n      enableRowDetailView: true,\r\n      rowSelectionOptions: {\r\n        selectActiveRow: true\r\n      },\r\n      datasetIdPropertyName: 'rowId', // optionally use a different \"id\"\r\n      rowDetailView: {\r\n        // optionally change the column index position of the icon (defaults to 0)\r\n        // columnIndexPosition: 1,\r\n\r\n        // We can load the \"process\" asynchronously in 2 different ways (httpClient OR even Promise)\r\n        process: (item) => this.simulateServerAsyncCall(item),\r\n        // process: (item) => this.http.get(`api/item/${item.id}`),\r\n\r\n        // load only once and reuse the same item detail without calling process method\r\n        loadOnce: true,\r\n\r\n        // limit expanded row to only 1 at a time\r\n        singleRowExpand: false,\r\n\r\n        // false by default, clicking anywhere on the row will open the detail view\r\n        // when set to false, only the \"+\" icon would open the row detail\r\n        // if you use editor or cell navigation you would want this flag set to false (default)\r\n        useRowClick: true,\r\n\r\n        // how many grid rows do we want to use for the row detail panel (this is only set once and will be used for all row detail)\r\n        // also note that the detail view adds an extra 1 row for padding purposes\r\n        // so if you choose 4 panelRows, the display will in fact use 5 rows\r\n        panelRows: this.detailViewRowCount,\r\n\r\n        // you can override the logic for showing (or not) the expand icon\r\n        // for example, display the expand icon only on every 2nd row\r\n        // expandableOverride: (row: number, dataContext: any, grid: any) => (dataContext.id % 2 === 1),\r\n\r\n        // Preload View Component\r\n        preloadComponent: RowDetailPreloadComponent,\r\n\r\n        // View Component to load when row detail data is ready\r\n        viewComponent: RowDetailViewComponent,\r\n\r\n        // Optionally pass your Parent Component reference to your Child Component (row detail component)\r\n        parent: this\r\n      }\r\n    };\r\n\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    // mock a dataset\r\n    this.dataset = [];\r\n    for (let i = 0; i < 1000; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n\r\n      this.dataset[i] = {\r\n        rowId: i,\r\n        title: 'Task ' + i,\r\n        duration: (i % 33 === 0) ? null : Math.random() * 100 + '',\r\n        percentComplete: randomPercent,\r\n        percentComplete2: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n  }\r\n\r\n  changeDetailViewRowCount() {\r\n    if (this.angularGrid && this.angularGrid.extensionService) {\r\n      const options = this.rowDetailInstance.getOptions();\r\n      if (options && options.panelRows) {\r\n        options.panelRows = this.detailViewRowCount; // change number of rows dynamically\r\n        this.rowDetailInstance.setOptions(options);\r\n      }\r\n    }\r\n  }\r\n\r\n  closeAllRowDetail() {\r\n    if (this.angularGrid && this.angularGrid.extensionService) {\r\n      this.rowDetailInstance.collapseAll();\r\n    }\r\n  }\r\n\r\n  showFlashMessage(message: string, alertType = 'info') {\r\n    this.message = message;\r\n    this.flashAlertType = alertType;\r\n  }\r\n\r\n  /** Just for demo purposes, we will simulate an async server call and return more details on the selected row item */\r\n  simulateServerAsyncCall(item: any) {\r\n    // random set of names to use for more item detail\r\n    const randomNames = ['John Doe', 'Jane Doe', 'Chuck Norris', 'Bumblebee', 'Jackie Chan', 'Elvis Presley', 'Bob Marley', 'Mohammed Ali', 'Bruce Lee', 'Rocky Balboa'];\r\n\r\n    // fill the template on async delay\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const itemDetail = item;\r\n\r\n        // let's add some extra properties to our item for a better async simulation\r\n        itemDetail.assignee = randomNames[this.randomNumber(0, 10)];\r\n        itemDetail.reporter = randomNames[this.randomNumber(0, 10)];\r\n\r\n        // resolve the data after delay specified\r\n        resolve(itemDetail);\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  private randomNumber(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n}\r\n","export default \"<div class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-rowdetail.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <div class=\\\"col-sm-6\\\">\\r\\n    <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"closeAllRowDetail()\\\" data-test=\\\"close-all-btn\\\">\\r\\n      Close All Row Details\\r\\n    </button>\\r\\n    &nbsp;&nbsp;\\r\\n    <label for=\\\"\\\">Detail View Rows Shown: </label>\\r\\n    <input type=\\\"number\\\" [(ngModel)]=\\\"detailViewRowCount\\\">\\r\\n    <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"changeDetailViewRowCount()\\\" data-test=\\\"set-count-btn\\\">\\r\\n      Set\\r\\n    </button>\\r\\n  </div>\\r\\n  <div class=\\\"alert alert-{{flashAlertType}} col-sm-6\\\" *ngIf=\\\"message\\\" data-test=\\\"flash-msg\\\">{{message}}</div>\\r\\n\\r\\n  <hr />\\r\\n\\r\\n  <angular-slickgrid gridId=\\\"grid21\\\" [columnDefinitions]=\\\"columnDefinitions\\\" [gridOptions]=\\\"gridOptions\\\"\\r\\n                     [dataset]=\\\"dataset\\\" (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\r\\n  </angular-slickgrid>\\r\\n</div>\\r\\n\";","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { AngularGridInstance, Column, ExtensionName, Filters, Formatters, GridOption } from './../modules/angular-slickgrid';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  templateUrl: './grid-rowmove.component.html'\r\n})\r\nexport class GridRowMoveComponent implements OnInit, OnDestroy {\r\n  title = 'Example 17: Row Move & Checkbox Selector';\r\n  subTitle = `This example demonstrates using the <b>Slick.Plugins.RowMoveManager</b> plugin to easily move a row in the grid.<br/>\r\n    <ul>\r\n      <li>Click to select, Ctrl+Click to toggle selection, Shift+Click to select a range.</li>\r\n      <li>Drag one or more rows by the handle (icon) to reorder</li>\r\n      <li>If you plan to use Row Selection + Row Move, then use \"singleRowMove: true\" and \"disableRowSelection: true\"</li>\r\n      <li>You can change \"columnIndexPosition\" to move the icon position of any extension (RowMove, RowDetail or RowSelector icon)</li>\r\n      <ul>\r\n        <li>You will also want to enable the DataView \"syncGridSelection: true\" to keep row selection even after a row move</li>\r\n      </ul>\r\n      <li>If you plan to use only Row Move, then you could keep default values (or omit them completely) of \"singleRowMove: false\" and \"disableRowSelection: false\"</li>\r\n      <ul>\r\n        <li>SingleRowMove has the name suggest will only move 1 row at a time, by default it will move any row(s) that are selected unless you disable the flag</li>\r\n      </ul>\r\n    </ul>\r\n  `;\r\n\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions!: Column[];\r\n  gridOptions!: GridOption;\r\n  dataset!: any[];\r\n  selectedLanguage: string;\r\n\r\n  constructor(private translate: TranslateService) {\r\n    this.selectedLanguage = this.translate.getDefaultLang();\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  get rowMoveInstance(): any {\r\n    return this.angularGrid && this.angularGrid.extensionService.getSlickgridAddonInstance(ExtensionName.rowMoveManager) || {};\r\n  }\r\n\r\n  ngOnDestroy() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      { id: 'title', name: 'Title', field: 'title', filterable: true, },\r\n      { id: 'duration', name: 'Duration', field: 'duration', filterable: true, sortable: true },\r\n      { id: '%', name: '% Complete', field: 'percentComplete', filterable: true, sortable: true },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start', filterable: true, sortable: true,\r\n        filter: { model: Filters.compoundDate },\r\n      },\r\n      {\r\n        id: 'finish', name: 'Finish', field: 'finish',\r\n        filterable: true, sortable: true,\r\n        filter: { model: Filters.compoundDate },\r\n      },\r\n      {\r\n        id: 'effort-driven', name: 'Completed', field: 'effortDriven',\r\n        formatter: Formatters.checkmark,\r\n        filterable: true, sortable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\r\n          model: Filters.singleSelect\r\n        },\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      enableAutoResize: true,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableCellNavigation: true,\r\n      enableFiltering: true,\r\n      enableCheckboxSelector: true,\r\n      checkboxSelector: {\r\n        // you can toggle these 2 properties to show the \"select all\" checkbox in different location\r\n        hideInFilterHeaderRow: false,\r\n        hideInColumnTitleRow: true\r\n      },\r\n      enableRowSelection: true,\r\n      rowSelectionOptions: {\r\n        // True (Single Selection), False (Multiple Selections)\r\n        selectActiveRow: false\r\n      },\r\n      dataView: {\r\n        syncGridSelection: true, // enable this flag so that the row selection follows the row even if we move it to another position\r\n      },\r\n      enableRowMoveManager: true,\r\n      rowMoveManager: {\r\n        // when using Row Move + Row Selection, you want to enable the following 2 flags so it doesn't cancel row selection\r\n        singleRowMove: true,\r\n        disableRowSelection: true,\r\n        cancelEditOnDrag: true,\r\n        width: 30,\r\n        onBeforeMoveRows: this.onBeforeMoveRow,\r\n        onMoveRows: this.onMoveRows.bind(this),\r\n\r\n        // you can change the move icon position of any extension (RowMove, RowDetail or RowSelector icon)\r\n        // note that you might have to play with the position when using multiple extension\r\n        // since it really depends on which extension get created first to know what their real position are\r\n        // columnIndexPosition: 1,\r\n\r\n        // you can also override the usability of the rows, for example make every 2nd row the only moveable rows,\r\n        // usabilityOverride: (row, dataContext, grid) => dataContext.id % 2 === 1\r\n      },\r\n      enableTranslate: true,\r\n      i18n: this.translate\r\n    };\r\n\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    // Set up some test columns.\r\n    const mockDataset = [];\r\n    for (let i = 0; i < 500; i++) {\r\n      mockDataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 25) + ' days',\r\n        percentComplete: Math.round(Math.random() * 100),\r\n        start: '01/01/2009',\r\n        finish: '01/05/2009',\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n    this.dataset = mockDataset;\r\n  }\r\n\r\n  onBeforeMoveRow(e: Event, data: any) {\r\n    for (let i = 0; i < data.rows.length; i++) {\r\n      // no point in moving before or after itself\r\n      if (data.rows[i] === data.insertBefore || data.rows[i] === data.insertBefore - 1) {\r\n        e.stopPropagation();\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  onMoveRows(e: Event, args: any) {\r\n    const extractedRows = [];\r\n    const rows = args.rows;\r\n    const insertBefore = args.insertBefore;\r\n    const left = this.dataset.slice(0, insertBefore);\r\n    const right = this.dataset.slice(insertBefore, this.dataset.length);\r\n    rows.sort((a: number, b: number) => a - b);\r\n    for (let i = 0; i < rows.length; i++) {\r\n      extractedRows.push(this.dataset[rows[i]]);\r\n    }\r\n    rows.reverse();\r\n    for (let i = 0; i < rows.length; i++) {\r\n      const row = rows[i];\r\n      if (row < insertBefore) {\r\n        left.splice(row, 1);\r\n      } else {\r\n        right.splice(row - insertBefore, 1);\r\n      }\r\n    }\r\n    const tmpDataset = left.concat(extractedRows.concat(right));\r\n    const selectedRows = [];\r\n    for (let i = 0; i < rows.length; i++) {\r\n      selectedRows.push(left.length + i);\r\n    }\r\n    args.grid.resetActiveCell();\r\n    this.dataset = tmpDataset;\r\n  }\r\n\r\n  hideDurationColumnDynamically() {\r\n    // -- you can hide by one Id or multiple Ids:\r\n    // hideColumnById(id, options), hideColumnByIds([ids], options)\r\n    // you can also provide options, defaults are: { autoResizeColumns: true, triggerEvent: true, hideFromColumnPicker: false, hideFromGridMenu: false }\r\n\r\n    this.angularGrid.gridService.hideColumnById('duration');\r\n\r\n    // or with multiple Ids and extra options\r\n    // this.angularGrid.gridService.hideColumnByIds(['duration', 'finish'], { hideFromColumnPicker: true, hideFromGridMenu: false });\r\n  }\r\n\r\n  // Disable/Enable Filtering/Sorting functionalities\r\n  // --------------------------------------------------\r\n\r\n  disableFilters() {\r\n    this.angularGrid.filterService.disableFilterFunctionality(true);\r\n  }\r\n\r\n  disableSorting() {\r\n    this.angularGrid.sortService.disableSortFunctionality(true);\r\n  }\r\n\r\n  // or Toggle Filtering/Sorting functionalities\r\n  // ---------------------------------------------\r\n\r\n  toggleFilter() {\r\n    this.angularGrid.filterService.toggleFilterFunctionality();\r\n  }\r\n\r\n  toggleSorting() {\r\n    this.angularGrid.sortService.toggleSortFunctionality();\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-rowmove.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <div class=\\\"row mb-2\\\">\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"hide-duration-btn\\\"\\r\\n              (click)=\\\"hideDurationColumnDynamically()\\\">\\r\\n        <i class=\\\"fa fa-eye-slash\\\"></i>\\r\\n        Dynamically Hide \\\"Duration\\\"\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"disable-filters-btn\\\" (click)=\\\"disableFilters()\\\">\\r\\n        <i class=\\\"fa fa-times\\\"></i>\\r\\n        Disable Filters\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"disable-sorting-btn\\\" (click)=\\\"disableSorting()\\\">\\r\\n        <i class=\\\"fa fa-times\\\"></i>\\r\\n        Disable Sorting\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"toggle-filtering-btn\\\" (click)=\\\"toggleFilter()\\\">\\r\\n        <i class=\\\"fa fa-random\\\"></i>\\r\\n        Toggle Filtering\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"toggle-sorting-btn\\\" (click)=\\\"toggleSorting()\\\">\\r\\n        <i class=\\\"fa fa-random\\\"></i>\\r\\n        Toggle Sorting\\r\\n      </button>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n      <angular-slickgrid gridId=\\\"grid17\\\"\\r\\n                         [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                         [gridOptions]=\\\"gridOptions\\\"\\r\\n                         [dataset]=\\\"dataset\\\"\\r\\n                         (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\r\\n      </angular-slickgrid>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { ChangeDetectorRef, Component, Injectable, OnInit } from '@angular/core';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  FieldType,\r\n  Filters,\r\n  Formatters,\r\n  GridOption,\r\n  GridStateChange\r\n} from './../modules/angular-slickgrid';\r\n\r\n@Component({\r\n  templateUrl: './grid-rowselection.component.html',\r\n  styles: ['.alert { padding: 8px; margin-bottom: 10px }', '.col-sm-1{ max-width: 70px }'],\r\n})\r\n@Injectable()\r\nexport class GridRowSelectionComponent implements OnInit {\r\n  title = 'Example 10: Multiple Grids with Row Selection';\r\n  subTitle = `\r\n    Row selection, single or multi-select (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Row-Selection\" target=\"_blank\">Wiki docs</a>).\r\n    <ul>\r\n      <li>Single Select, you can click on any cell to make the row active</li>\r\n      <li>Multiple Selections, you need to specifically click on the checkbox to make 1 or more selections</li>\r\n      <li>You can use \"selectableOverride()\" callback to override logic to display checkbox on every row (for example only show it every 2nd row)</li>\r\n      <li>NOTE: Any Row Selection(s) will be reset when using Pagination and changing Page (you will need to set it back manually if you want it back)</li>\r\n    </ul>\r\n  `;\r\n\r\n  angularGrid1!: AngularGridInstance;\r\n  angularGrid2!: AngularGridInstance;\r\n  columnDefinitions1!: Column[];\r\n  columnDefinitions2!: Column[];\r\n  gridOptions1!: GridOption;\r\n  gridOptions2!: GridOption;\r\n  dataset1!: any[];\r\n  dataset2!: any[];\r\n  gridObj1!: any;\r\n  gridObj2!: any;\r\n  isGrid2WithPagination = true;\r\n  selectedTitles!: any[];\r\n  selectedTitle!: any;\r\n  selectedGrid2IDs!: number[];\r\n\r\n  constructor(private cd: ChangeDetectorRef) { }\r\n\r\n  ngOnInit(): void {\r\n    this.prepareGrid();\r\n  }\r\n\r\n  angularGridReady1(angularGrid: AngularGridInstance) {\r\n    this.angularGrid1 = angularGrid;\r\n    this.gridObj1 = angularGrid && angularGrid.slickGrid || {};\r\n  }\r\n\r\n  angularGridReady2(angularGrid: AngularGridInstance) {\r\n    this.angularGrid2 = angularGrid;\r\n    this.gridObj2 = angularGrid && angularGrid.slickGrid || {};\r\n  }\r\n\r\n  prepareGrid() {\r\n    this.columnDefinitions1 = [\r\n      { id: 'title', name: 'Title', field: 'title', sortable: true, type: FieldType.string, filterable: true },\r\n      { id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true, type: FieldType.number, filterable: true },\r\n      { id: 'complete', name: '% Complete', field: 'percentComplete', formatter: Formatters.percentCompleteBar, type: FieldType.number, filterable: true, sortable: true },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start',\r\n        formatter: Formatters.dateIso, exportWithFormatter: true, type: FieldType.date,\r\n        filterable: true, sortable: true, filter: { model: Filters.compoundDate },\r\n      },\r\n      {\r\n        id: 'finish', name: 'Finish', field: 'finish',\r\n        formatter: Formatters.dateIso, exportWithFormatter: true, type: FieldType.date,\r\n        filterable: true, sortable: true, filter: { model: Filters.compoundDate },\r\n      },\r\n      {\r\n        id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven',\r\n        formatter: Formatters.checkmark, type: FieldType.boolean,\r\n        sortable: true, filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'true' }, { value: false, label: 'false' }],\r\n          model: Filters.singleSelect,\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.columnDefinitions2 = [\r\n      { id: 'title', name: 'Title', field: 'title', sortable: true, type: FieldType.string, filterable: true },\r\n      { id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true, type: FieldType.number, filterable: true },\r\n      { id: 'complete', name: '% Complete', field: 'percentComplete', formatter: Formatters.percentCompleteBar, type: FieldType.number, filterable: true, sortable: true },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start',\r\n        formatter: Formatters.dateIso, exportWithFormatter: true, type: FieldType.date,\r\n        filterable: true, sortable: true, filter: { model: Filters.compoundDate },\r\n      },\r\n      {\r\n        id: 'finish', name: 'Finish', field: 'finish',\r\n        formatter: Formatters.dateIso, exportWithFormatter: true, type: FieldType.date,\r\n        filterable: true, sortable: true, filter: { model: Filters.compoundDate },\r\n      },\r\n      {\r\n        id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven',\r\n        formatter: Formatters.checkmark, type: FieldType.boolean,\r\n        sortable: true, filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'true' }, { value: false, label: 'false' }],\r\n          model: Filters.singleSelect,\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions1 = {\r\n      enableAutoResize: false,\r\n      enableCellNavigation: true,\r\n      enableRowSelection: true,\r\n      enableCheckboxSelector: true,\r\n      enableFiltering: true,\r\n      checkboxSelector: {\r\n        // optionally change the column index position of the icon (defaults to 0)\r\n        // columnIndexPosition: 1,\r\n\r\n        // remove the unnecessary \"Select All\" checkbox in header when in single selection mode\r\n        hideSelectAllCheckbox: true,\r\n\r\n        // you can override the logic for showing (or not) the expand icon\r\n        // for example, display the expand icon only on every 2nd row\r\n        // selectableOverride: (row: number, dataContext: any, grid: any) => (dataContext.id % 2 === 1)\r\n      },\r\n      multiSelect: false,\r\n      rowSelectionOptions: {\r\n        // True (Single Selection), False (Multiple Selections)\r\n        selectActiveRow: true,\r\n      },\r\n      columnPicker: {\r\n        hideForceFitButton: true\r\n      },\r\n      gridMenu: {\r\n        hideForceFitButton: true\r\n      },\r\n      enablePagination: true,\r\n      pagination: {\r\n        pageSizes: [5, 10, 15, 20, 25, 50, 75, 100],\r\n        pageSize: 5\r\n      },\r\n      // we can use some Presets, for the example Pagination\r\n      presets: {\r\n        pagination: { pageNumber: 2, pageSize: 5 },\r\n      },\r\n    };\r\n\r\n    this.gridOptions2 = {\r\n      enableAutoResize: false,\r\n      enableCellNavigation: true,\r\n      enableFiltering: true,\r\n      checkboxSelector: {\r\n        // you can toggle these 2 properties to show the \"select all\" checkbox in different location\r\n        hideInFilterHeaderRow: false,\r\n        hideInColumnTitleRow: true\r\n      },\r\n      rowSelectionOptions: {\r\n        // True (Single Selection), False (Multiple Selections)\r\n        selectActiveRow: false\r\n      },\r\n      enableCheckboxSelector: true,\r\n      enableRowSelection: true,\r\n      enablePagination: true,\r\n      pagination: {\r\n        pageSizes: [5, 10, 15, 20, 25, 50, 75, 100],\r\n        pageSize: 5\r\n      },\r\n      // 1. pre-select some grid row indexes (less recommended, better use the Presets, see below)\r\n      // preselectedRows: [0, 2],\r\n\r\n      // 2. or use the Presets to pre-select some rows\r\n      presets: {\r\n        // you can presets row selection here as well, you can choose 1 of the following 2 ways of setting the selection\r\n        // by their index position in the grid (UI) or by the object IDs, the default is \"dataContextIds\" and if provided it will use it and disregard \"gridRowIndexes\"\r\n        // the RECOMMENDED is to use \"dataContextIds\" since that will always work even with Pagination, while \"gridRowIndexes\" is only good for 1 page\r\n        rowSelection: {\r\n          // gridRowIndexes: [2],           // the row position of what you see on the screen (UI)\r\n          dataContextIds: [3, 12, 13, 522]  // (recommended) select by your data object IDs\r\n        }\r\n      },\r\n    };\r\n\r\n    this.dataset1 = this.prepareData(495);\r\n    this.dataset2 = this.prepareData(525);\r\n  }\r\n\r\n  prepareData(count: number) {\r\n    // mock a dataset\r\n    const mockDataset = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n\r\n      mockDataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 100) + '',\r\n        percentComplete: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n    return mockDataset;\r\n  }\r\n\r\n  goToGrid1FirstPage() {\r\n    this.angularGrid1.paginationService.goToFirstPage();\r\n  }\r\n\r\n  goToGrid1LastPage() {\r\n    this.angularGrid1.paginationService.goToLastPage();\r\n  }\r\n\r\n  goToGrid2FirstPage() {\r\n    this.angularGrid2.paginationService.goToFirstPage();\r\n  }\r\n\r\n  goToGrid2LastPage() {\r\n    this.angularGrid2.paginationService.goToLastPage();\r\n  }\r\n\r\n  /** Dispatched event of a Grid State Changed event */\r\n  grid1StateChanged(gridStateChanges: GridStateChange) {\r\n    console.log('Grid State changed:: ', gridStateChanges);\r\n    console.log('Grid State changed:: ', gridStateChanges.change);\r\n  }\r\n\r\n  /** Dispatched event of a Grid State Changed event */\r\n  grid2StateChanged(gridStateChanges: GridStateChange) {\r\n    console.log('Grid State changed:: ', gridStateChanges);\r\n    console.log('Grid State changed:: ', gridStateChanges.change);\r\n\r\n    if (gridStateChanges!.gridState!.rowSelection) {\r\n      this.selectedGrid2IDs = (gridStateChanges!.gridState!.rowSelection.filteredDataContextIds || []) as number[];\r\n      this.selectedGrid2IDs = this.selectedGrid2IDs.sort((a, b) => a - b); // sort by ID\r\n      this.selectedTitles = this.selectedGrid2IDs.map(dataContextId => `Task ${dataContextId}`);\r\n      this.cd.detectChanges();\r\n    }\r\n  }\r\n\r\n  // Toggle the Pagination of Grid2\r\n  // IMPORTANT, the Pagination MUST BE CREATED on initial page load before you can start toggling it\r\n  // Basically you cannot toggle a Pagination that doesn't exist (must created at the time as the grid)\r\n  togglePaginationGrid2() {\r\n    this.isGrid2WithPagination = !this.isGrid2WithPagination;\r\n    this.angularGrid2.paginationService.togglePaginationVisibility(this.isGrid2WithPagination);\r\n  }\r\n\r\n  handleSelectedRowsChanged1(e: Event, args: any) {\r\n    if (Array.isArray(args.rows) && this.gridObj1) {\r\n      this.selectedTitle = args.rows.map((idx: number) => {\r\n        const item = this.gridObj1.getDataItem(idx);\r\n        return item.title || '';\r\n      });\r\n    }\r\n  }\r\n}\r\n","export default \"<div class=\\\"container-fluid\\\">\\n  <h2>\\n    {{title}}\\n    <span class=\\\"float-right\\\">\\n      <a style=\\\"font-size: 18px\\\"\\n         target=\\\"_blank\\\"\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-rowselection.component.ts\\\">\\n        <span class=\\\"fa fa-link\\\"></span> code\\n      </a>\\n    </span>\\n  </h2>\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-4\\\" style=\\\"max-width: 170px;\\\">\\n      Pagination\\n      <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"goto-first-page\\\" (click)=\\\"goToGrid1FirstPage()\\\">\\n        <i class=\\\"fa fa-caret-left fa-lg\\\"></i>\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"goto-last-page\\\" (click)=\\\"goToGrid1LastPage()\\\">\\n        <i class=\\\"fa fa-caret-right fa-lg\\\"></i>\\n      </button>\\n    </div>\\n    <div class=\\\"col-sm-8\\\">\\n      <div class=\\\"alert alert-success\\\">\\n        <strong>(single select) Selected Row:</strong>\\n        <span [innerHTML]=\\\"selectedTitle\\\" data-test=\\\"grid1-selections\\\"></span>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <angular-slickgrid gridId=\\\"grid1\\\" gridHeight=\\\"225\\\" gridWidth=\\\"800\\\" [columnDefinitions]=\\\"columnDefinitions1\\\"\\n                     [gridOptions]=\\\"gridOptions1\\\" [dataset]=\\\"dataset1\\\"\\n                     (onAngularGridCreated)=\\\"angularGridReady1($event)\\\"\\n                     (onGridStateChanged)=\\\"grid1StateChanged($event)\\\"\\n                     (sgOnSelectedRowsChanged)=\\\"handleSelectedRowsChanged1($event.detail.eventData, $event.detail.args)\\\">\\n  </angular-slickgrid>\\n\\n  <hr>\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-4 col-md-3\\\" style=\\\"max-width: 185px;\\\">\\n      Pagination: <input type=\\\"checkbox\\\" (change)=\\\"togglePaginationGrid2()\\\" [checked]=\\\"isGrid2WithPagination\\\"\\n             data-test=\\\"toggle-pagination-grid2\\\" />\\n      <span style=\\\"margin-left: 5px\\\" *ngIf=\\\"isGrid2WithPagination\\\">\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"goto-first-page\\\" (click)=\\\"goToGrid2FirstPage()\\\">\\n          <i class=\\\"fa fa-caret-left fa-lg\\\"></i>\\n        </button>\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" data-test=\\\"goto-last-page\\\" (click)=\\\"goToGrid2LastPage()\\\">\\n          <i class=\\\"fa fa-caret-right fa-lg\\\"></i>\\n        </button>\\n      </span>\\n    </div>\\n    <div class=\\\"col-sm-7\\\">\\n      <div class=\\\"alert alert-success\\\">\\n        <strong>(multi-select) Selected Row(s):</strong>\\n        <span [innerHTML]=\\\"selectedTitles\\\" data-test=\\\"grid2-selections\\\"></span>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <angular-slickgrid gridId=\\\"grid2\\\"\\n                     gridHeight=\\\"255\\\"\\n                     gridWidth=\\\"800\\\"\\n                     [columnDefinitions]=\\\"columnDefinitions2\\\"\\n                     [gridOptions]=\\\"gridOptions2\\\"\\n                     [dataset]=\\\"dataset2\\\"\\n                     (onAngularGridCreated)=\\\"angularGridReady2($event)\\\"\\n                     (onGridStateChanged)=\\\"grid2StateChanged($event)\\\">\\n  </angular-slickgrid>\\n</div>\\n\";","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Subscription } from 'rxjs';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  FieldType,\r\n  Filters,\r\n  Formatters,\r\n  GridOption,\r\n  GridState,\r\n  GridStateChange,\r\n  MultipleSelectOption,\r\n  unsubscribeAllObservables\r\n} from './../modules/angular-slickgrid';\r\n\r\nfunction randomBetween(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\nconst DEFAULT_PAGE_SIZE = 25;\r\nconst LOCAL_STORAGE_KEY = 'gridState';\r\nconst NB_ITEMS = 500;\r\n\r\n@Component({\r\n  templateUrl: './grid-state.component.html'\r\n})\r\nexport class GridStateComponent implements OnInit, OnDestroy {\r\n  title = 'Example 16: Grid State & Presets using Local Storage';\r\n  subTitle = `\r\n    Grid State & Preset (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Grid-State-&-Preset\" target=\"_blank\">Wiki docs</a>)\r\n    <br/>\r\n    <ul class=\"small\">\r\n      <li>Uses Local Storage to persist the Grid State and uses Grid Options \"presets\" to put the grid back to it's previous state</li>\r\n      <ul>\r\n        <li>to demo this, simply change any columns (position reorder, visibility, size, filter, sort), then refresh your browser with (F5)</li>\r\n      </ul>\r\n      <li>Local Storage is just one option, you can use whichever is more convenient for you (Local Storage, Session Storage, DB, ...)</li>\r\n    </ul>\r\n  `;\r\n  private subscriptions: Subscription[] = [];\r\n  angularGrid!: AngularGridInstance;\r\n  columnDefinitions!: Column[];\r\n  gridOptions!: GridOption;\r\n  dataset!: any[];\r\n  selectedLanguage: string;\r\n\r\n  constructor(private translate: TranslateService) {\r\n    this.selectedLanguage = this.translate.getDefaultLang();\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // also unsubscribe all Angular Subscriptions\r\n    this.subscriptions = unsubscribeAllObservables(this.subscriptions);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const presets = JSON.parse(localStorage[LOCAL_STORAGE_KEY] || null);\r\n\r\n    // use some Grid State preset defaults if you wish or just restore from Locale Storage\r\n    // presets = presets || this.useDefaultPresets();\r\n    this.defineGrid(presets);\r\n\r\n    // always start with English for Cypress E2E tests to be consistent\r\n    const defaultLang = 'en';\r\n    this.translate.use(defaultLang);\r\n    this.selectedLanguage = defaultLang;\r\n  }\r\n\r\n  /** Clear the Grid State from Local Storage and reset the grid to it's original state */\r\n  clearGridStateFromLocalStorage() {\r\n    localStorage[LOCAL_STORAGE_KEY] = null;\r\n    this.angularGrid.gridService.resetGrid(this.columnDefinitions);\r\n    this.angularGrid.paginationService.changeItemPerPage(DEFAULT_PAGE_SIZE);\r\n  }\r\n\r\n  /* Define grid Options and Columns */\r\n  defineGrid(gridStatePresets?: GridState) {\r\n    // prepare a multiple-select array to filter with\r\n    const multiSelectFilterArray = [];\r\n    for (let i = 0; i < NB_ITEMS; i++) {\r\n      multiSelectFilterArray.push({ value: i, label: i });\r\n    }\r\n\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'title',\r\n        name: 'Title',\r\n        field: 'title',\r\n        nameKey: 'TITLE',\r\n        filterable: true,\r\n        sortable: true,\r\n        type: FieldType.string,\r\n        minWidth: 45, width: 100,\r\n        filter: {\r\n          model: Filters.compoundInput\r\n        }\r\n      },\r\n      {\r\n        id: 'description', name: 'Description', field: 'description', filterable: true, sortable: true, minWidth: 80, width: 100,\r\n        type: FieldType.string,\r\n        filter: {\r\n          model: Filters.input\r\n        }\r\n      },\r\n      {\r\n        id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true, type: FieldType.number, exportCsvForceToKeepAsString: true,\r\n        minWidth: 55, width: 100,\r\n        nameKey: 'DURATION',\r\n        filterable: true,\r\n        filter: {\r\n          collection: multiSelectFilterArray,\r\n          model: Filters.multipleSelect,\r\n          // we could add certain option(s) to the \"multiple-select\" plugin\r\n          filterOptions: {\r\n            maxHeight: 250,\r\n            width: 175\r\n          } as MultipleSelectOption\r\n        }\r\n      },\r\n      {\r\n        id: 'complete', name: '% Complete', field: 'percentComplete', nameKey: 'PERCENT_COMPLETE', minWidth: 70, type: FieldType.number, sortable: true, width: 100,\r\n        formatter: Formatters.percentCompleteBar, filterable: true, filter: { model: Filters.slider, operator: '>' }\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start', nameKey: 'START', formatter: Formatters.dateIso, sortable: true, minWidth: 75, exportWithFormatter: true, width: 100,\r\n        type: FieldType.date, filterable: true, filter: { model: Filters.compoundDate }\r\n      },\r\n      {\r\n        id: 'completed', field: 'completed', nameKey: 'COMPLETED', minWidth: 85, maxWidth: 85, formatter: Formatters.checkmark, width: 100,\r\n        type: FieldType.boolean,\r\n        sortable: true,\r\n        filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\r\n          model: Filters.singleSelect,\r\n\r\n          // we could add certain option(s) to the \"multiple-select\" plugin\r\n          filterOptions: { autoDropWidth: true } as MultipleSelectOption,\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableCheckboxSelector: true,\r\n      enableFiltering: true,\r\n      enableTranslate: true,\r\n      i18n: this.translate,\r\n      columnPicker: {\r\n        hideForceFitButton: true\r\n      },\r\n      gridMenu: {\r\n        hideForceFitButton: true,\r\n        hideClearFrozenColumnsCommand: false,\r\n      },\r\n      headerMenu: {\r\n        hideFreezeColumnsCommand: false,\r\n      },\r\n      enablePagination: true,\r\n      pagination: {\r\n        pageSizes: [5, 10, 15, 20, 25, 30, 40, 50, 75, 100],\r\n        pageSize: DEFAULT_PAGE_SIZE\r\n      },\r\n    };\r\n\r\n    // reload the Grid State with the grid options presets\r\n    if (gridStatePresets) {\r\n      this.gridOptions.presets = gridStatePresets;\r\n    }\r\n\r\n    this.dataset = this.getData(NB_ITEMS);\r\n  }\r\n\r\n  getData(count: number) {\r\n    // mock a dataset\r\n    const tmpData = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const randomDuration = Math.round(Math.random() * 100);\r\n      const randomYear = randomBetween(2000, 2025);\r\n      const randomYearShort = randomBetween(10, 25);\r\n      const randomMonth = randomBetween(1, 12);\r\n      const randomMonthStr = (randomMonth < 10) ? `0${randomMonth}` : randomMonth;\r\n      const randomDay = randomBetween(10, 28);\r\n      const randomPercent = randomBetween(0, 100);\r\n      const randomHour = randomBetween(10, 23);\r\n      const randomTime = randomBetween(10, 59);\r\n\r\n      tmpData[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        etc: 'Something hidden ' + i,\r\n        description: (i % 5) ? 'desc ' + i : null, // also add some random to test NULL field\r\n        duration: randomDuration,\r\n        percentComplete: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: new Date(randomYear, randomMonth, randomDay),          // provide a Date format\r\n        usDateShort: `${randomMonth}/${randomDay}/${randomYearShort}`, // provide a date US Short in the dataset\r\n        utcDate: `${randomYear}-${randomMonthStr}-${randomDay}T${randomHour}:${randomTime}:${randomTime}Z`,\r\n        completed: (i % 3 === 0)\r\n      };\r\n    }\r\n    return tmpData;\r\n  }\r\n\r\n  /** Dispatched event of a Grid State Changed event */\r\n  gridStateChanged(gridStateChanges: GridStateChange) {\r\n    console.log('Client sample, Grid State changed:: ', gridStateChanges);\r\n    localStorage[LOCAL_STORAGE_KEY] = JSON.stringify(gridStateChanges.gridState);\r\n  }\r\n\r\n  /** Save current Filters, Sorters in LocaleStorage or DB */\r\n  saveCurrentGridState() {\r\n    const gridState: GridState = this.angularGrid.gridStateService.getCurrentGridState();\r\n    console.log('Client sample, last Grid State:: ', gridState);\r\n    localStorage[LOCAL_STORAGE_KEY] = JSON.stringify(gridState);\r\n  }\r\n\r\n  switchLanguage() {\r\n    const nextLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\r\n    this.subscriptions.push(\r\n      this.translate.use(nextLanguage).subscribe(() => {\r\n        this.selectedLanguage = nextLanguage;\r\n      })\r\n    );\r\n  }\r\n\r\n  useDefaultPresets() {\r\n    // use columnDef searchTerms OR use presets as shown below\r\n    return {\r\n      columns: [\r\n        { columnId: 'description', width: 170 }, // flip column position of Title/Description to Description/Title\r\n        { columnId: 'title', width: 55 },\r\n        { columnId: 'duration' },\r\n        { columnId: 'complete' },\r\n        { columnId: 'start' },\r\n        { columnId: 'usDateShort' },\r\n        { columnId: 'utcDate' },\r\n        // { columnId: 'completed' }, // to HIDE a column, simply ommit it from the preset array\r\n      ],\r\n      filters: [\r\n        { columnId: 'duration', searchTerms: [2, 22, 44] },\r\n        // { columnId: 'complete', searchTerms: ['5'], operator: '>' },\r\n        { columnId: 'usDateShort', operator: '<', searchTerms: ['4/20/25'] },\r\n        // { columnId: 'completed', searchTerms: [true] }\r\n      ],\r\n      sorters: [\r\n        { columnId: 'duration', direction: 'DESC' },\r\n        { columnId: 'complete', direction: 'ASC' }\r\n      ],\r\n    } as GridState;\r\n  }\r\n}\r\n","export default \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    {{title}}\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-state.component.ts\\\">\\r\\n        <span class=\\\"fa fa-link\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"reset-button\\\" (click)=\\\"clearGridStateFromLocalStorage()\\\">\\r\\n    <i class=\\\"fa fa-times\\\"></i>\\r\\n    Clear Grid State from Local Storage &amp; Reset Grid\\r\\n  </button>\\r\\n\\r\\n  <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"switchLanguage()\\\" data-test=\\\"language-button\\\">\\r\\n    <i class=\\\"fa fa-language\\\"></i>\\r\\n    Switch Language\\r\\n  </button>\\r\\n  <b>Locale:</b>\\r\\n  <span style=\\\"font-style: italic\\\" data-test=\\\"selected-locale\\\">\\r\\n    {{selectedLanguage + '.json'}}\\r\\n  </span>\\r\\n\\r\\n  <angular-slickgrid gridId=\\\"grid16\\\"\\r\\n                     [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                     [gridOptions]=\\\"gridOptions\\\"\\r\\n                     [dataset]=\\\"dataset\\\"\\r\\n                     (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n                     (onGridStateChanged)=\\\"gridStateChanged($event)\\\"\\r\\n                     (onBeforeGridDestroy)=\\\"saveCurrentGridState()\\\">\\r\\n  </angular-slickgrid>\\r\\n</div>\\r\\n\";","import { Component, OnInit, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AngularGridInstance, Column, GridOption, Filters } from '../modules/angular-slickgrid';\r\n\r\nconst URL_CUSTOMERS = 'assets/data/customers_100.json';\r\n\r\n@Component({\r\n  templateUrl: './grid-tabs.component.html'\r\n})\r\n@Injectable()\r\nexport class GridTabsComponent implements OnInit {\r\n  title = 'Example 24: Grids in Bootstrap Tabs';\r\n  subTitle = `This example demonstrate the creation of multiple grids in Bootstrap Tabs\r\n   <ol>\r\n    <li>Regular mocked data with javascript</li>\r\n    <li>Load dataset through Http-Client. Also note we need to call a \"resizeGrid()\" after focusing on this tab</li>\r\n  </ol>`;\r\n\r\n  angularGrid2!: AngularGridInstance;\r\n  columnDefinitions1!: Column[];\r\n  columnDefinitions2!: Column[];\r\n  gridOptions1!: GridOption;\r\n  gridOptions2!: GridOption;\r\n  dataset1!: any[];\r\n  dataset2!: any[];\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  angularGrid2Ready(angularGrid: AngularGridInstance) {\r\n    this.angularGrid2 = angularGrid;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.defineGrid1();\r\n    this.defineGrid2();\r\n\r\n    // mock some data (different in each dataset)\r\n    this.dataset1 = this.mockData();\r\n\r\n    // load data with Http-Client\r\n    this.http.get((URL_CUSTOMERS)).subscribe(((data: any[]) => this.dataset2 = data) as any);\r\n  }\r\n\r\n  // Grid2 definition\r\n  defineGrid1() {\r\n    this.columnDefinitions1 = [\r\n      { id: 'title', name: 'Title', field: 'title', sortable: true, minWidth: 100 },\r\n      { id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true, minWidth: 100 },\r\n      { id: '%', name: '% Complete', field: 'percentComplete', sortable: true, minWidth: 100 },\r\n      { id: 'start', name: 'Start', field: 'start', minWidth: 100 },\r\n      { id: 'finish', name: 'Finish', field: 'finish', minWidth: 100 },\r\n      { id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven', sortable: true, minWidth: 100 }\r\n    ];\r\n    this.gridOptions1 = {\r\n      enableAutoResize: true,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableSorting: true\r\n    };\r\n  }\r\n\r\n  // Grid2 definition\r\n  defineGrid2() {\r\n    this.columnDefinitions2 = [\r\n      { id: 'name', name: 'Name', field: 'name', filterable: true, sortable: true, },\r\n      {\r\n        id: 'gender', name: 'Gender', field: 'gender', filterable: true, sortable: true,\r\n        filter: {\r\n          model: Filters.singleSelect,\r\n          collection: [{ value: '', label: '' }, { value: 'male', label: 'male' }, { value: 'female', label: 'female' }]\r\n        }\r\n      },\r\n      { id: 'company', name: 'Company', field: 'company', filterable: true, sortable: true }\r\n    ];\r\n\r\n    this.gridOptions2 = {\r\n      enableAutoResize: true,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableFiltering: true,\r\n      enableSorting: true\r\n    };\r\n  }\r\n\r\n  mockData() {\r\n    // mock a dataset\r\n    const mockDataset = [];\r\n    for (let i = 0; i < 1000; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n\r\n      mockDataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 100) + '',\r\n        percentComplete: randomPercent,\r\n        start: `${randomMonth}/${randomDay}/${randomYear}`,\r\n        finish: `${randomMonth}/${randomDay}/${randomYear}`,\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n\r\n    return mockDataset;\r\n  }\r\n\r\n  resizeGrid2() {\r\n    this.angularGrid2.resizerService.resizeGrid();\r\n  }\r\n}\r\n","export default \"<div class=\\\"container-fluid\\\">\\n  <h2>\\n    {{title}}\\n    <span class=\\\"float-right\\\">\\n      <a style=\\\"font-size: 18px\\\"\\n         target=\\\"_blank\\\"\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-tabs.component.ts\\\">\\n        <span class=\\\"fa fa-link\\\"></span> code\\n      </a>\\n    </span>\\n  </h2>\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\n\\n  <div>\\n    <tabset>\\n      <tab heading=\\\"Javascript\\\" id=\\\"javascript\\\" data-test=\\\"javascript-tab\\\">\\n        <h4>Grid 1 - Load Local Data</h4>\\n        <angular-slickgrid gridId=\\\"grid1\\\"\\n                           [columnDefinitions]=\\\"columnDefinitions1\\\"\\n                           [gridOptions]=\\\"gridOptions1\\\"\\n                           [dataset]=\\\"dataset1\\\">\\n        </angular-slickgrid>\\n      </tab>\\n      <tab heading=\\\"Http-Client\\\" data-test=\\\"http-tab\\\" (selectTab)=\\\"resizeGrid2()\\\">\\n        <h4>Grid 2 - Load a JSON dataset through Http-Client</h4>\\n        <angular-slickgrid gridId=\\\"grid2\\\"\\n                           [columnDefinitions]=\\\"columnDefinitions2\\\"\\n                           [gridOptions]=\\\"gridOptions2\\\"\\n                           [dataset]=\\\"dataset2\\\"\\n                           (onAngularGridCreated)=\\\"angularGrid2Ready($event)\\\">\\n        </angular-slickgrid>\\n      </tab>\\n    </tabset>\\n  </div>\\n</div>\\n\";","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  FieldType,\r\n  Filters,\r\n  Formatters,\r\n  GridOption,\r\n  findItemInTreeStructure,\r\n  Formatter,\r\n} from './../modules/angular-slickgrid';\r\n\r\n@Component({\r\n  templateUrl: './grid-tree-data-hierarchical.component.html',\r\n  styleUrls: ['grid-tree-data-hierarchical.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class GridTreeDataHierarchicalComponent implements OnInit {\r\n  title = 'Example 29: Tree Data <small>(from a Hierarchical Dataset)</small>';\r\n  subTitle = `<ul>\r\n    <li><b>NOTE:</b> The grid will automatically sort Ascending with the column that has the Tree Data, you could add a \"sortByFieldId\" in your column \"treeData\" option if you wish to sort on a different column</li>\r\n    <li><b>Styling - Salesforce Theme</b></li>\r\n    <ul>\r\n      <li>The Salesforce Theme was created with SASS and compiled in CSS (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/modules/angular-slickgrid/styles/slickgrid-theme-salesforce.scss\" target=\"_blank\">slickgrid-theme-salesforce.scss</a>), you can override any of its SASS variables</li>\r\n      <li>We use a small subset of <a href=\"https://materialdesignicons.com/\" target=\"_blank\">Material Design Icons</a></li>\r\n      <li>you might need to refresh the page to clear the browser cache and see the correct theme</li>\r\n    </ul>\r\n  `;\r\n\r\n  angularGrid!: AngularGridInstance;\r\n  dataViewObj: any;\r\n  gridObj: any;\r\n  gridOptions!: GridOption;\r\n  columnDefinitions!: Column[];\r\n  datasetHierarchical: any[] = [];\r\n  searchString = '';\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    // define the grid options & columns and then create the grid itself\r\n    this.defineGrid();\r\n\r\n    // mock a dataset\r\n    this.datasetHierarchical = this.mockDataset();\r\n  }\r\n\r\n  defineGrid() {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'file', name: 'Files', field: 'file',\r\n        type: FieldType.string, width: 150, formatter: this.treeFormatter,\r\n        filterable: true, sortable: true,\r\n      },\r\n      {\r\n        id: 'dateModified', name: 'Date Modified', field: 'dateModified',\r\n        formatter: Formatters.dateIso, type: FieldType.dateUtc, outputType: FieldType.dateIso, minWidth: 90,\r\n        exportWithFormatter: true, filterable: true, filter: { model: Filters.compoundDate }\r\n      },\r\n      {\r\n        id: 'size', name: 'Size', field: 'size', minWidth: 90,\r\n        type: FieldType.number, exportWithFormatter: true,\r\n        filterable: true, filter: { model: Filters.compoundInputNumber },\r\n        formatter: (row, cell, value) => isNaN(value) ? '' : `${value} MB`,\r\n      },\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableAutoSizeColumns: true,\r\n      enableAutoResize: true,\r\n      enableExport: true,\r\n      enableFiltering: true,\r\n      enableTreeData: true, // you must enable this flag for the filtering & sorting to work as expected\r\n      treeDataOptions: {\r\n        columnId: 'file',\r\n        childrenPropName: 'files',\r\n        // you can optionally sort by a different column and/or sort direction\r\n        // initialSort: {\r\n        //   columnId: 'file',\r\n        //   direction: 'DESC'\r\n        // }\r\n      },\r\n      multiColumnSort: false, // multi-column sorting is not supported with Tree Data, so you need to disable it\r\n      // change header/cell row height for salesforce theme\r\n      headerRowHeight: 35,\r\n      rowHeight: 33,\r\n      showCustomFooter: true,\r\n\r\n      // use Material Design SVG icons\r\n      contextMenu: {\r\n        iconCollapseAllGroupsCommand: 'mdi mdi-arrow-collapse',\r\n        iconExpandAllGroupsCommand: 'mdi mdi-arrow-expand',\r\n        iconClearGroupingCommand: 'mdi mdi-close',\r\n        iconCopyCellValueCommand: 'mdi mdi-content-copy',\r\n        iconExportCsvCommand: 'mdi mdi-download',\r\n        iconExportExcelCommand: 'mdi mdi-file-excel-outline',\r\n        iconExportTextDelimitedCommand: 'mdi mdi-download',\r\n      },\r\n      gridMenu: {\r\n        iconCssClass: 'mdi mdi-menu',\r\n        iconClearAllFiltersCommand: 'mdi mdi-filter-remove-outline',\r\n        iconClearAllSortingCommand: 'mdi mdi-swap-vertical',\r\n        iconExportCsvCommand: 'mdi mdi-download',\r\n        iconExportExcelCommand: 'mdi mdi-file-excel-outline',\r\n        iconExportTextDelimitedCommand: 'mdi mdi-download',\r\n        iconRefreshDatasetCommand: 'mdi mdi-sync',\r\n        iconToggleFilterCommand: 'mdi mdi-flip-vertical',\r\n        iconTogglePreHeaderCommand: 'mdi mdi-flip-vertical',\r\n      },\r\n      headerMenu: {\r\n        iconClearFilterCommand: 'mdi mdi mdi-filter-remove-outline',\r\n        iconClearSortCommand: 'mdi mdi-swap-vertical',\r\n        iconSortAscCommand: 'mdi mdi-sort-ascending',\r\n        iconSortDescCommand: 'mdi mdi-flip-v mdi-sort-descending',\r\n        iconColumnHideCommand: 'mdi mdi-close',\r\n      }\r\n    };\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n    this.gridObj = angularGrid.slickGrid;\r\n    this.dataViewObj = angularGrid.dataView;\r\n  }\r\n\r\n  clearSearch() {\r\n    this.searchString = '';\r\n    this.updateFilter();\r\n  }\r\n\r\n  searchStringChanged() {\r\n    this.updateFilter();\r\n  }\r\n\r\n  updateFilter() {\r\n    this.angularGrid.filterService.updateFilters([{ columnId: 'file', searchTerms: [this.searchString] }], true, false, true);\r\n  }\r\n\r\n  treeFormatter: Formatter = (row, cell, value, columnDef, dataContext, grid) => {\r\n    const gridOptions = grid.getOptions() as GridOption;\r\n    const treeLevelPropName = gridOptions.treeDataOptions && gridOptions.treeDataOptions.levelPropName || '__treeLevel';\r\n    if (value === null || value === undefined || dataContext === undefined) {\r\n      return '';\r\n    }\r\n    const dataView = grid.getData();\r\n    const data = dataView.getItems();\r\n    const identifierPropName = dataView.getIdPropertyName() || 'id';\r\n    const idx = dataView.getIdxById(dataContext[identifierPropName]);\r\n    const prefix = this.getFileIcon(value);\r\n\r\n    value = value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n    const spacer = `<span style=\"display:inline-block; width:${(15 * dataContext[treeLevelPropName])}px;\"></span>`;\r\n\r\n    if (data[idx + 1] && data[idx + 1][treeLevelPropName] > data[idx][treeLevelPropName]) {\r\n      const folderPrefix = `<span class=\"mdi icon color-alt-warning ${dataContext.__collapsed ? 'mdi-folder' : 'mdi-folder-open'}\"></span>`;\r\n      if (dataContext.__collapsed) {\r\n        return `${spacer} <span class=\"slick-group-toggle collapsed\" level=\"${dataContext[treeLevelPropName]}\"></span>${folderPrefix} ${prefix}&nbsp;${value}`;\r\n      } else {\r\n        return `${spacer} <span class=\"slick-group-toggle expanded\" level=\"${dataContext[treeLevelPropName]}\"></span>${folderPrefix} ${prefix}&nbsp;${value}`;\r\n      }\r\n    } else {\r\n      return `${spacer} <span class=\"slick-group-toggle\" level=\"${dataContext[treeLevelPropName]}\"></span>${prefix}&nbsp;${value}`;\r\n    }\r\n  }\r\n\r\n  getFileIcon(value: string) {\r\n    let prefix = '';\r\n    if (value.includes('.pdf')) {\r\n      prefix = '<span class=\"mdi icon mdi-file-pdf-outline color-danger\"></span>';\r\n    } else if (value.includes('.txt')) {\r\n      prefix = '<span class=\"mdi icon mdi-file-document-outline color-muted-light\"></span>';\r\n    } else if (value.includes('.xls')) {\r\n      prefix = '<span class=\"mdi icon mdi-file-excel-outline color-success\"></span>';\r\n    } else if (value.includes('.mp3')) {\r\n      prefix = '<span class=\"mdi icon mdi-file-music-outline color-info\"></span>';\r\n    }\r\n    return prefix;\r\n  }\r\n\r\n  /**\r\n   * A simple method to add a new item inside the first group that we find.\r\n   * After adding the item, it will sort by parent/child recursively\r\n   */\r\n  addNewFile() {\r\n    const newId = this.dataViewObj.getLength() + 100;\r\n\r\n    // find first parent object and add the new item as a child\r\n    const tmpDatasetHierarchical = [...this.datasetHierarchical];\r\n    const popItem = findItemInTreeStructure(tmpDatasetHierarchical, x => x.file === 'pop', 'files');\r\n\r\n    if (popItem && Array.isArray(popItem.files)) {\r\n      popItem.files.push({\r\n        id: newId,\r\n        file: `pop-${newId}.mp3`,\r\n        dateModified: new Date(),\r\n        size: Math.round(Math.random() * 100),\r\n      });\r\n\r\n      // overwrite hierarchical dataset which will also trigger a grid sort and rendering\r\n      this.datasetHierarchical = tmpDatasetHierarchical;\r\n\r\n      // scroll into the position, after insertion cycle, where the item was added\r\n      setTimeout(() => {\r\n        const rowIndex = this.dataViewObj.getRowById(popItem.id);\r\n        this.gridObj.scrollRowIntoView(rowIndex + 3);\r\n      }, 10);\r\n    }\r\n  }\r\n\r\n  collapseAll() {\r\n    this.angularGrid.treeDataService.toggleTreeDataCollapse(true);\r\n  }\r\n\r\n  expandAll() {\r\n    this.angularGrid.treeDataService.toggleTreeDataCollapse(false);\r\n  }\r\n\r\n  logHierarchicalStructure() {\r\n    console.log('exploded array', this.angularGrid.treeDataService.datasetHierarchical);\r\n  }\r\n\r\n  logFlatStructure() {\r\n    console.log('flat array', this.angularGrid.treeDataService.dataset);\r\n  }\r\n\r\n  mockDataset() {\r\n    return [\r\n      { id: 24, file: 'bucket-list.txt', dateModified: '2012-03-05T12:44:00.123Z', size: 0.5 },\r\n      { id: 18, file: 'something.txt', dateModified: '2015-03-03T03:50:00.123Z', size: 90 },\r\n      {\r\n        id: 21, file: 'documents', files: [\r\n          { id: 2, file: 'txt', files: [{ id: 3, file: 'todo.txt', dateModified: '2015-05-12T14:50:00.123Z', size: 0.7, }] },\r\n          {\r\n            id: 4, file: 'pdf', files: [\r\n              { id: 22, file: 'map2.pdf', dateModified: '2015-07-21T08:22:00.123Z', size: 2.9, },\r\n              { id: 5, file: 'map.pdf', dateModified: '2015-05-21T10:22:00.123Z', size: 3.1, },\r\n              { id: 6, file: 'internet-bill.pdf', dateModified: '2015-05-12T14:50:00.123Z', size: 1.4, },\r\n              { id: 23, file: 'phone-bill.pdf', dateModified: '2015-05-01T07:50:00.123Z', size: 1.4, },\r\n            ]\r\n          },\r\n          { id: 9, file: 'misc', files: [{ id: 10, file: 'todo.txt', dateModified: '2015-02-26T16:50:00.123Z', size: 0.4, }] },\r\n          { id: 7, file: 'xls', files: [{ id: 8, file: 'compilation.xls', dateModified: '2014-10-02T14:50:00.123Z', size: 2.3, }] },\r\n        ]\r\n      },\r\n      {\r\n        id: 11, file: 'music', files: [{\r\n          id: 12, file: 'mp3', files: [\r\n            { id: 16, file: 'rock', files: [{ id: 17, file: 'soft.mp3', dateModified: '2015-05-13T13:50:00Z', size: 98, }] },\r\n            {\r\n              id: 14, file: 'pop', files: [\r\n                { id: 15, file: 'theme.mp3', dateModified: '2015-03-01T17:05:00Z', size: 47, },\r\n                { id: 25, file: 'song.mp3', dateModified: '2016-10-04T06:33:44Z', size: 6.3, }\r\n              ]\r\n            },\r\n          ]\r\n        }]\r\n      },\r\n    ];\r\n  }\r\n}\r\n","export default \"<div class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    <span [innerHTML]=\\\"title\\\"></span>\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-tree-data-hierarchical.component.ts\\\">\\r\\n        <span class=\\\"mdi mdi-link mdi-v-align-sub\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-7\\\">\\r\\n      <button (click)=\\\"addNewFile()\\\" data-test=\\\"add-item-btn\\\" class=\\\"btn btn-outline-info btn-sm\\\">\\r\\n        <span class=\\\"icon mdi mdi-plus\\\"></span>\\r\\n        <span>Add New Pop Song</span>\\r\\n      </button>\\r\\n      <button (click)=\\\"collapseAll()\\\" data-test=\\\"collapse-all-btn\\\" class=\\\"btn btn-outline-secondary btn-sm\\\">\\r\\n        <span class=\\\"icon mdi mdi-arrow-collapse\\\"></span>\\r\\n        <span>Collapse All</span>\\r\\n      </button>\\r\\n      <button (click)=\\\"expandAll()\\\" data-test=\\\"expand-all-btn\\\" class=\\\"btn btn-outline-secondary btn-sm\\\">\\r\\n        <span class=\\\"icon mdi mdi-arrow-expand\\\"></span>\\r\\n        <span>Expand All</span>\\r\\n      </button>\\r\\n      <button (click)=\\\"logFlatStructure()\\\" class=\\\"btn btn-outline-secondary btn-sm\\\">\\r\\n        <span>Log Flat Structure</span>\\r\\n      </button>\\r\\n      <button (click)=\\\"logHierarchicalStructure()\\\" class=\\\"btn btn-outline-secondary btn-sm\\\">\\r\\n        <span>Log Hierarchical Structure</span>\\r\\n      </button>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-md-5\\\">\\r\\n      <div class=\\\"input-group\\\">\\r\\n        <input type=\\\"text\\\" class=\\\"form-control search-string\\\" data-test=\\\"search-string\\\"\\r\\n               [(ngModel)]=\\\"searchString\\\" (ngModelChange)=\\\"searchStringChanged()\\\">\\r\\n        <button class=\\\"btn btn-outline-secondary\\\" data-test=\\\"clear-search-string\\\" (click)=\\\"clearSearch()\\\">\\r\\n          <span class=\\\"icon mdi mdi-close-thick\\\"></span>\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <br />\\r\\n\\r\\n  <angular-slickgrid gridId=\\\"grid29\\\"\\r\\n                     [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                     [gridOptions]=\\\"gridOptions\\\"\\r\\n                     [datasetHierarchical]=\\\"datasetHierarchical\\\"\\r\\n                     (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\r\\n  </angular-slickgrid>\\r\\n</div>\\r\\n\";","export default \"@charset \\\"UTF-8\\\";\\n/* make sure to add the @import the SlickGrid Theme AFTER the variables changes */\\n/*!\\n * SlickGrid custom styling for Salesforce (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n * @author: Ghislain B. (ghiscoding)\\n */\\n/*!\\n\\n/**\\n * SlickGrid Salesforce Theme\\n * (sames as `slickgrid-theme-salesforce.scss` but without Flatpickr & Multiple-Select styling)\\n */\\n/** Salesforce Theme (includes all external lib styling) */\\n/**\\n * This is a bare version of \\\"slickgrid-theme-salesforce.scss\\\",\\n * Few files were removed and aren't included in this styling theme (while they are in original theme)\\n * - (colors, extra-styling, material-svg-icons, material-svg-utilities, slick-without-bootstrap-min-styling)\\n */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.pointer {\\n  cursor: pointer;\\n}\\n.slickgrid-container .slick-header-columns,\\n.slickgrid-container .slick-header-column {\\n  background: rgba(255, 255, 255, 0.6);\\n  box-sizing: content-box !important;\\n  /* this here only for Firefox! */\\n}\\n.slickgrid-container .slick-header-columns {\\n  /*border-bottom: 1px solid $grid-border-color;*/\\n  background: linear-gradient(rgba(0, 0, 0, 0) 60%, rgba(0, 0, 0, 0.1));\\n}\\n.slickgrid-container .slick-header-column {\\n  border-right: 1px solid fade(black, 3%);\\n  border-bottom: 1px solid fade(black, 3%);\\n}\\n.slickgrid-container .slick-header-column:hover {\\n  background: rgba(250, 250, 250, 0.6);\\n}\\n.slickgrid-container .slick-header-column-active {\\n  background: rgba(242, 242, 242, 0.6) !important;\\n}\\n.slickgrid-container .slick-headerrow {\\n  background: rgba(255, 255, 255, 0.6);\\n}\\n.slickgrid-container .slick-headerrow-column {\\n  background: #fafafa;\\n  border-bottom: 0;\\n}\\n.slickgrid-container .grid-canvas {\\n  background: white;\\n}\\n.slickgrid-container .slick-row {\\n  background: inherit;\\n  border: 0;\\n  line-height: 20px;\\n}\\n.slickgrid-container .slick-row .slick-cell {\\n  background: inherit;\\n  border: 1px transparent;\\n  padding-top: 3px;\\n  padding-bottom: 4px;\\n  padding-left: 4px;\\n  padding-right: 4px;\\n  box-sizing: border-box;\\n}\\n.slickgrid-container .slick-row .slick-cell.invalid {\\n  border-color: red;\\n  -moz-animation-duration: 0.2s;\\n  -webkit-animation-duration: 0.2s;\\n  -moz-animation-name: slickgrid-invalid-hilite;\\n  -webkit-animation-name: slickgrid-invalid-hilite;\\n  animation-duration: 0.2s;\\n  animation-name: slickgrid-invalid-hilite;\\n}\\n.slickgrid-container .slick-row .slick-cell.selected {\\n  background-color: #e7e7c3;\\n}\\n.slickgrid-container .slick-row .slick-cell.selected .cell-selection {\\n  background-color: transparent;\\n  /* show default selected row background */\\n}\\n.slickgrid-container .slick-row .slick-cell.active {\\n  box-shadow: inset 0 0 0 1px #0070D2;\\n  border: none;\\n  z-index: 6;\\n  padding: 5px 6px;\\n}\\n.slickgrid-container .slick-row .slick-cell.active input.editor-text {\\n  width: calc(100% + 2px);\\n  height: 100%;\\n  outline: 0;\\n  transform: translate(0, -2px);\\n}\\n.slickgrid-container .slick-row .slick-cell.active input.dual-editor-text {\\n  width: calc(50% + 1px - 5px);\\n  height: 100%;\\n  outline: 0;\\n  transform: translate(0, -2px);\\n}\\n.slickgrid-container .slick-row.odd .slick-cell {\\n  background: #f3f2f2;\\n}\\n.slickgrid-container .slick-row.odd .slick-cell.selected {\\n  background-color: #d6d6b2;\\n}\\n.slickgrid-container .slick-row.active-row .slick-cell {\\n  background-color: #e2fffd;\\n}\\n.slickgrid-container .slick-row.active-row .slick-cell.selected {\\n  background-color: red;\\n}\\n.slickgrid-container .slick-row.active-row.odd .slick-cell {\\n  background-color: #f2f2f2;\\n}\\n.slickgrid-container .slick-row.active-row.odd .slick-cell.selected {\\n  background-color: green;\\n}\\n.slickgrid-container .slick-row.loading {\\n  opacity: 0.5;\\n}\\n.slickgrid-container .slick-group {\\n  border-bottom: 2px solid silver;\\n}\\n.slickgrid-container .slick-group-toggle {\\n  width: 9px;\\n  height: 9px;\\n  margin-right: 5px;\\n}\\n.slickgrid-container .slick-group-toggle.expanded {\\n  background: none;\\n}\\n.slickgrid-container .slick-group-toggle.collapsed {\\n  background: none;\\n}\\n.slickgrid-container .slick-group-totals {\\n  color: gray;\\n  background: white;\\n}\\n.slickgrid-container .slick-sortable-placeholder {\\n  background: silver !important;\\n}\\n@-webkit-keyframes slickgrid-invalid-hilite {\\n  from {\\n    box-shadow: 0 0 6px red;\\n  }\\n  to {\\n    box-shadow: none;\\n  }\\n}\\n@keyframes slickgrid-invalid-hilite {\\n  from {\\n    box-shadow: 0 0 6px red;\\n  }\\n  to {\\n    box-shadow: none;\\n  }\\n}\\n.slickgrid-container .header-overlay,\\n.slickgrid-container .cell-overlay,\\n.slickgrid-container .selection-cell-overlay {\\n  display: block;\\n  position: absolute;\\n  z-index: 999;\\n}\\n.slickgrid-container .slick-cell > .editor-select {\\n  position: absolute;\\n  left: 0;\\n  right: 0;\\n  width: auto;\\n  top: 0;\\n  bottom: 0;\\n  max-width: 100%;\\n  min-width: 0;\\n  margin: 0;\\n}\\n.slickgrid-container .slick-range-decorator {\\n  z-index: 100;\\n  pointer-events: none;\\n  background: transparent;\\n  border: none;\\n  outline: black;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slickgrid-container {\\n  overflow: hidden;\\n  outline: 0;\\n  position: relative;\\n  box-sizing: content-box;\\n}\\n.slickgrid-container .slick-group-header-columns {\\n  position: relative;\\n  white-space: nowrap;\\n  cursor: default;\\n  overflow: hidden;\\n}\\n.slickgrid-container .slick-group-header {\\n  width: 100%;\\n  overflow: hidden;\\n  border-left: 0px;\\n}\\n.slickgrid-container .slick-group-header-column.ui-state-default {\\n  position: relative;\\n  display: inline-block;\\n  box-sizing: content-box !important;\\n  /* this here only for Firefox! */\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  height: 16px;\\n  line-height: 16px;\\n  margin: 0;\\n  padding: 4px;\\n}\\n.slickgrid-container .slick-viewport,\\n.slickgrid-container .slick-top-panel-scroller,\\n.slickgrid-container .slick-header,\\n.slickgrid-container .slick-headerrow,\\n.slickgrid-container .slick-footerrow {\\n  position: relative;\\n  width: 100%;\\n  border: 1px solid fade(black, 3%);\\n  border-right-color: transparent;\\n  border-bottom-color: transparent;\\n  border-right-width: 0;\\n  border-bottom-width: 0;\\n  margin: 0;\\n  outline: 0;\\n}\\n.slickgrid-container .slick-top-panel-scroller {\\n  overflow: hidden;\\n}\\n.slickgrid-container .slick-pane {\\n  position: absolute;\\n  outline: 0;\\n  overflow: hidden;\\n  width: 100%;\\n}\\n.slickgrid-container .slick-pane-header {\\n  display: block;\\n  background-color: #fafaf9;\\n  border-bottom: transparent;\\n}\\n.slickgrid-container .slick-pane-top {\\n  box-sizing: border-box;\\n  border-top: 1px solid #d0d0d0;\\n}\\n.slickgrid-container .slick-viewport {\\n  overflow: auto;\\n}\\n.slickgrid-container .slick-viewport ::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n}\\n.slickgrid-container .slick-viewport ::-webkit-scrollbar-thumb {\\n  border-radius: 4px;\\n  border: 2px solid white;\\n  /* should match background, can't be transparent */\\n  background-color: rgba(0, 0, 0, 0.5);\\n}\\n.slickgrid-container .slick-header,\\n.slickgrid-container .slick-headerrow,\\n.slickgrid-container .slick-footerrow {\\n  overflow: hidden;\\n}\\n.slickgrid-container .slick-headerrow {\\n  border-top-color: transparent;\\n  border-top-width: 0;\\n}\\n.slickgrid-container .slick-top-panel,\\n.slickgrid-container .slick-header-columns,\\n.slickgrid-container .slick-headerrow-columns,\\n.slickgrid-container .slick-footerrow-columns {\\n  position: relative;\\n  white-space: nowrap;\\n  cursor: default;\\n  overflow: hidden;\\n  margin: 0;\\n  padding: 0;\\n  border: 0;\\n  outline: 0;\\n}\\n.slickgrid-container .slick-cell,\\n.slickgrid-container .slick-header-column,\\n.slickgrid-container .slick-headerrow-column,\\n.slickgrid-container .slick-footerrow-column {\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  border-top-color: transparent;\\n  border-left-color: transparent;\\n  border-top-width: 0;\\n  border-left-width: 0;\\n  margin: 0;\\n  padding: 0;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  vertical-align: middle;\\n  z-index: 1;\\n  white-space: nowrap;\\n  cursor: default;\\n}\\n.slickgrid-container .slick-cell.slick-header-is-leaf,\\n.slickgrid-container .slick-header-column.slick-header-is-leaf,\\n.slickgrid-container .slick-headerrow-column.slick-header-is-leaf,\\n.slickgrid-container .slick-footerrow-column.slick-header-is-leaf {\\n  border-bottom-color: transparent;\\n  border-bottom-width: 0;\\n}\\n.slickgrid-container .slick-header-column.ui-state-default {\\n  position: relative;\\n  display: inline-block;\\n  box-sizing: content-box !important;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  height: 16px;\\n  line-height: 16px;\\n  margin: 0;\\n  padding: 4px;\\n  border-right: 1px solid fade(black, 3%);\\n  border-left: 0px !important;\\n  border-top: 0px !important;\\n  border-bottom: 0px !important;\\n  float: left;\\n}\\n.slickgrid-container .slick-cell {\\n  box-sizing: border-box;\\n  border-style: solid;\\n  padding: 1px 2px 1px 2px;\\n}\\n.slickgrid-container .slick-header-column {\\n  padding: 4px 4px 4px 4px;\\n}\\n.slickgrid-container .grid-canvas {\\n  position: relative;\\n  outline: 0;\\n}\\n.slickgrid-container .slick-row {\\n  position: absolute;\\n  border: 0;\\n  width: 100%;\\n}\\n.slickgrid-container .slick-header-column-sorted {\\n  font-style: italic;\\n}\\n.slickgrid-container .slick-sort-indicator {\\n  display: inline-block;\\n  width: 8px;\\n  height: 5px;\\n  margin-left: 4px;\\n  margin-top: 6px;\\n  position: absolute;\\n  left: 0;\\n}\\n.slickgrid-container .slick-sort-indicator-desc:before {\\n  content: \\\"\\\";\\n}\\n.slickgrid-container .slick-sort-indicator-asc:before {\\n  content: \\\"\\\";\\n}\\n.slickgrid-container .slick-header-sortable .slick-column-name {\\n  margin-left: 10px;\\n}\\n.slickgrid-container .slick-header.ui-state-default {\\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\\n}\\n.slickgrid-container .slick-column-name {\\n  text-overflow: ellipsis;\\n}\\n.slickgrid-container .slick-resizable-handle {\\n  position: absolute;\\n  font-size: 0.1px;\\n  display: block;\\n  cursor: col-resize;\\n  width: 4px;\\n  right: 0;\\n  top: 0;\\n  height: 100%;\\n}\\n.slickgrid-container .slick-resizable-handle-hover {\\n  background-color: #ccc;\\n}\\n.slickgrid-container .slick-sortable-placeholder {\\n  background: silver;\\n}\\n.slickgrid-container .slick-group-toggle {\\n  display: inline-block;\\n}\\n.slickgrid-container .slick-cell.highlighted {\\n  background: lightskyblue;\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: all 0.5s;\\n}\\n.slickgrid-container .slick-cell.flashing {\\n  border: 1px solid red !important;\\n}\\n.slickgrid-container .slick-cell.editable {\\n  z-index: 11;\\n  overflow: visible;\\n  background: white;\\n  border-color: black;\\n  border-style: solid;\\n}\\n.slickgrid-container .slick-cell:focus {\\n  outline: none;\\n}\\n.slickgrid-container .slick-reorder-proxy {\\n  display: inline-block;\\n  background: blue;\\n  opacity: 0.15;\\n  cursor: move;\\n}\\n.slickgrid-container .slick-reorder-guide {\\n  display: inline-block;\\n  height: 2px;\\n  background: blue;\\n  opacity: 0.7;\\n}\\n.slickgrid-container .slick-selection {\\n  z-index: 10;\\n  position: absolute;\\n  border: 2px dashed black;\\n}\\n.slickgrid-container .slick-pane {\\n  position: absolute;\\n  outline: 0;\\n  overflow: hidden;\\n  width: 100%;\\n}\\n.flatpickr-wrapper {\\n  z-index: 10000;\\n}\\n.interact-placeholder {\\n  background: red !important;\\n  display: inline-block;\\n  float: left;\\n  transform: translate(0px, -100%);\\n}\\n.interact-drop-active {\\n  box-shadow: inset 0 0 8px rgba(7, 67, 128, 0.5);\\n}\\n.interact-can-drop {\\n  opacity: 0.9;\\n}\\n.scrollbar-fix::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n}\\n/* control variables */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-columnpicker {\\n  font-family: var(--lwc-fontFamily, \\\"Salesforce Sans\\\", \\\"SalesforceSans-Regular\\\", Arial, sans-serif);\\n  background-color: #ffffff;\\n  border: 1px solid #b8b8b8;\\n  border-radius: 2px;\\n  padding: 6px;\\n  box-shadow: 1px 1px 1px silver;\\n  min-width: 150px;\\n  cursor: default;\\n  position: absolute;\\n  z-index: 2000;\\n  overflow: auto;\\n  resize: both;\\n  width: auto;\\n  padding-right: 24px;\\n  /* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n}\\n.slick-columnpicker > .close {\\n  float: right;\\n  position: absolute;\\n  color: #c3c3c3;\\n  cursor: pointer;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 23px;\\n  background-color: #ffffff;\\n  border: 0px solid #9c9c9c;\\n  right: 5px;\\n  top: 0px;\\n}\\n.slick-columnpicker > .close:hover {\\n  color: #838383;\\n}\\n.slick-columnpicker > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-columnpicker li {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n  background: none;\\n}\\n.slick-columnpicker li a {\\n  display: block;\\n  padding: 4px;\\n  font-weight: bold;\\n}\\n.slick-columnpicker li a:hover {\\n  background-color: #ffffff;\\n}\\n.slick-columnpicker li label {\\n  font-weight: normal;\\n}\\n.slick-columnpicker li label input {\\n  margin: 4px;\\n}\\n.slick-columnpicker div.title {\\n  font-size: 18px;\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: 1px solid #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-columnpicker-list {\\n  /** make sure the hidden class exist, it was removed in BS4 */\\n  /* replace checkboxes by Font-Awesome icons */\\n}\\n.slick-columnpicker-list li.hidden {\\n  display: none;\\n}\\n.slick-columnpicker-list li {\\n  width: calc(100% + 24px - 6px);\\n  /* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-columnpicker-list li:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-columnpicker-list li label {\\n  cursor: pointer;\\n  width: 100%;\\n  margin-bottom: 0px;\\n}\\n.slick-columnpicker-list hr {\\n  margin: 6px 0;\\n  border: 0;\\n  border-top: 1px solid #d5d5d5;\\n  width: calc(100% + 24px - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-columnpicker-list input[type=checkbox] {\\n  display: none;\\n  /* to hide the checkbox itself */\\n  margin-left: 4px;\\n  margin-top: 3px;\\n}\\n.slick-columnpicker-list input[type=checkbox] + label:before {\\n  cursor: pointer;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23006DCC\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M8.8 19.6L1.2 12c-.3-.3-.3-.8 0-1.1l1-1c.3-.3.8-.3 1 0L9 15.7c.1.2.5.2.6 0L20.9 4.4c.2-.3.7-.3 1 0l1 1c.3.3.3.7 0 1L9.8 19.6c-.2.3-.7.3-1 0z\\\"></path></svg>');\\n  color: #006DCC;\\n  display: inline-block;\\n  font-weight: normal;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 18px;\\n  opacity: 0.15;\\n  /* unchecked icon */\\n  margin-right: 4px;\\n  width: 13px;\\n}\\n.slick-columnpicker-list input[type=checkbox] + label:hover:before {\\n  opacity: 0.35;\\n}\\n.slick-columnpicker-list input[type=checkbox]:checked + label:before {\\n  opacity: 1;\\n  /* checked icon */\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23006DCC\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M8.8 19.6L1.2 12c-.3-.3-.3-.8 0-1.1l1-1c.3-.3.8-.3 1 0L9 15.7c.1.2.5.2.6 0L20.9 4.4c.2-.3.7-.3 1 0l1 1c.3.3.3.7 0 1L9.8 19.6c-.2.3-.7.3-1 0z\\\"></path></svg>');\\n  width: 13px;\\n}\\n.slick-gridmenu {\\n  font-family: var(--lwc-fontFamily, \\\"Salesforce Sans\\\", \\\"SalesforceSans-Regular\\\", Arial, sans-serif);\\n  background-color: #ffffff;\\n  border: 1px solid #b8b8b8;\\n  border-radius: 2px;\\n  padding: 6px;\\n  box-shadow: 1px 1px 1px silver;\\n  min-width: 200px;\\n  cursor: default;\\n  position: absolute;\\n  z-index: 2000;\\n  overflow: auto;\\n  width: -webkit-max-content;\\n  width: -moz-max-content;\\n  width: max-content;\\n}\\n.slick-gridmenu > .close {\\n  float: right;\\n  position: absolute;\\n  color: #c3c3c3;\\n  cursor: pointer;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 23px;\\n  background-color: #ffffff;\\n  border: 0px solid #9c9c9c;\\n  right: 5px;\\n  top: 0px;\\n}\\n.slick-gridmenu > .close:hover {\\n  color: #838383;\\n}\\n.slick-gridmenu > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-gridmenu div.title {\\n  font-size: 18px;\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: solid 1px #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-gridmenu li {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n  background: none;\\n}\\n.slick-gridmenu li a {\\n  display: block;\\n  padding: 4px;\\n  font-weight: bold;\\n}\\n.slick-gridmenu li a:hover {\\n  background-color: #ffffff;\\n}\\n.slick-gridmenu li label {\\n  font-weight: normal;\\n}\\n.slick-gridmenu li label input {\\n  margin: 4px;\\n}\\n.slick-gridmenu input {\\n  margin: 4px;\\n}\\n.slick-gridmenu-button {\\n  position: absolute;\\n  cursor: pointer;\\n  right: 0;\\n  padding: 0 2px;\\n  margin-top: 5px;\\n  background-color: transparent;\\n  border: 0;\\n  width: 22px;\\n  font-size: 18px;\\n  z-index: 2;\\n}\\n.slick-gridmenu-custom {\\n  margin-bottom: 10px;\\n}\\n/* Menu items */\\n.slick-gridmenu-item {\\n  cursor: pointer;\\n  display: block;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-gridmenu-item:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-gridmenu-item.slick-gridmenu-item-divider {\\n  cursor: default;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 5px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-gridmenu-item.slick-gridmenu-item-divider:hover {\\n  border: none;\\n  background-color: silver;\\n}\\n.slick-gridmenu-item-divider.slick-gridmenu-item:hover {\\n  background-color: #e7e7e7;\\n}\\n.slick-gridmenu-item-disabled {\\n  cursor: inherit;\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n}\\n.slick-gridmenu-item-disabled .slick-gridmenu-icon, .slick-gridmenu-item-disabled .slick-gridmenu-content {\\n  color: silver;\\n}\\n.slick-gridmenu-item-hidden {\\n  display: none;\\n}\\n.slick-gridmenu-icon {\\n  display: inline-block;\\n  font-size: 18px;\\n  line-height: 14px;\\n  margin-right: 4px;\\n  width: 18px;\\n  vertical-align: middle;\\n  background-repeat: no-repeat;\\n  background-position: center center;\\n}\\n.slick-gridmenu-content {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.slick-gridmenu-list {\\n  /** make sure the hidden class exist, it was removed in BS4 */\\n  /* replace checkboxes by Font-Awesome icons */\\n}\\n.slick-gridmenu-list li.hidden {\\n  display: none;\\n}\\n.slick-gridmenu-list li {\\n  width: auto;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-gridmenu-list li:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-gridmenu-list li label {\\n  cursor: pointer;\\n  width: 100%;\\n  margin-bottom: 0px;\\n}\\n.slick-gridmenu-list hr {\\n  margin: 6px 0;\\n  border: 0;\\n  border-top: 1px solid #dddddd;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-gridmenu-list input[type=checkbox] {\\n  display: none;\\n  /* to hide the checkbox itself */\\n  margin-left: 4px;\\n  margin-top: 3px;\\n}\\n.slick-gridmenu-list input[type=checkbox] + label:before {\\n  cursor: pointer;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23006DCC\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M8.8 19.6L1.2 12c-.3-.3-.3-.8 0-1.1l1-1c.3-.3.8-.3 1 0L9 15.7c.1.2.5.2.6 0L20.9 4.4c.2-.3.7-.3 1 0l1 1c.3.3.3.7 0 1L9.8 19.6c-.2.3-.7.3-1 0z\\\"></path></svg>');\\n  color: #006DCC;\\n  display: inline-block;\\n  font-weight: normal;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 13px;\\n  opacity: 0.15;\\n  /* unchecked icon */\\n  margin-right: 5px;\\n  width: 13px;\\n}\\n.slick-gridmenu-list input[type=checkbox] + label:hover:before {\\n  opacity: 0.35;\\n}\\n.slick-gridmenu-list input[type=checkbox]:checked + label:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23006DCC\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M8.8 19.6L1.2 12c-.3-.3-.3-.8 0-1.1l1-1c.3-.3.8-.3 1 0L9 15.7c.1.2.5.2.6 0L20.9 4.4c.2-.3.7-.3 1 0l1 1c.3.3.3.7 0 1L9.8 19.6c-.2.3-.7.3-1 0z\\\"></path></svg>');\\n  opacity: 1;\\n  /* checked icon */\\n  width: 13px;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-cell input.dual-editor-text,\\n.slick-cell input.editor-text {\\n  border: 1px solid #e2e2e2;\\n  border-radius: 3px;\\n  background: #ffffff;\\n  padding-bottom: 0;\\n  padding-left: 2px;\\n  padding-right: 0;\\n  padding-top: 0;\\n  margin-left: -2px;\\n  margin-bottom: 2px;\\n  margin-right: 2px;\\n  margin-top: 2px;\\n  width: calc(100% + 2px);\\n  transform: translate(0, -2px);\\n  outline: 0;\\n  height: 100%;\\n}\\n.slick-cell input.dual-editor-text:focus,\\n.slick-cell input.editor-text:focus {\\n  outline: 0;\\n  border-color: #0088ff;\\n  box-shadow: 0 0 3px #006DCC;\\n}\\n.slick-cell input.dual-editor-text.right,\\n.slick-cell input.editor-text.right {\\n  margin-left: calc(-2px + 9px);\\n}\\n.slick-cell input.dual-editor-text[readonly],\\n.slick-cell input.editor-text[readonly] {\\n  background-color: #f0f0f0;\\n}\\n.slick-cell .slider-editor-input:focus {\\n  outline: 0;\\n  border-color: #0088ff;\\n  box-shadow: 0 0 3px #006DCC;\\n}\\n.slick-cell .flatpickr.input-group .input-group-btn .btn {\\n  background-color: #eeeeee;\\n  border: 1px solid #cccccc;\\n  padding: 1px 6px;\\n  border-top-right-radius: 3px;\\n  border-bottom-right-radius: 3px;\\n  cursor: pointer;\\n  height: 24px;\\n}\\n.slick-cell .flatpickr.input-group .input-group-btn .btn.icon-close:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(18px + 2px);\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\\\"></path></svg>');\\n  vertical-align: initial;\\n  display: inline-block;\\n  height: 14px;\\n  width: 14px;\\n  margin-top: unset;\\n}\\n.slick-cell .flatpickr-alt-input {\\n  cursor: pointer;\\n  height: 24px;\\n  border-top-left-radius: 3px !important;\\n  border-bottom-left-radius: 3px !important;\\n  padding: 6px 2px;\\n}\\n.slick-cell .flatpickr-alt-input.editor-text {\\n  cursor: pointer;\\n  background-color: #ffffff;\\n}\\n.slick-cell .flatpickr-alt-input.editor-text:focus {\\n  outline: 0;\\n  border-color: #0088ff;\\n  box-shadow: 0 0 3px #006DCC;\\n}\\n/* Long Text Editor */\\n.slick-large-editor-text {\\n  z-index: 10000;\\n  position: absolute;\\n  background: #ffffff;\\n  padding: 5px;\\n  border: 2px solid #a0a0a0;\\n  border-radius: 6px;\\n}\\n.slick-large-editor-text .editor-footer {\\n  text-align: right;\\n}\\n.slick-large-editor-text .editor-footer button {\\n  margin-left: 2px;\\n  border-radius: 2px;\\n}\\n.slick-large-editor-text textarea {\\n  background: #ffffff;\\n  border: 0;\\n  outline: 0;\\n}\\n.slick-large-editor-text .counter {\\n  float: left;\\n  font-size: 11px;\\n  margin-top: 8px;\\n}\\n.slick-large-editor-text .counter .separator {\\n  margin: 0 1px;\\n}\\n/* plugin variables */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-cell-menu {\\n  position: absolute;\\n  font-family: var(--lwc-fontFamily, \\\"Salesforce Sans\\\", \\\"SalesforceSans-Regular\\\", Arial, sans-serif);\\n  background: #ffffff;\\n  border: 1px solid #BFBDBD;\\n  border-radius: 2px;\\n  min-width: 175px;\\n  padding: 6px;\\n  z-index: 100000;\\n  cursor: default;\\n  display: inline-block;\\n  overflow: auto;\\n  resize: both;\\n  /* make sure that other UI frameworks aren't overriding our properties (Bulma was one of them affecting this) */\\n  /* resize cell menu item width when there's a close button on same line */\\n}\\n.slick-cell-menu.dropdown, .slick-cell-menu.dropup {\\n  display: inline-block;\\n  position: absolute;\\n}\\n.slick-cell-menu > .close {\\n  float: right;\\n  cursor: pointer;\\n  color: #c3c3c3;\\n  background-color: #ffffff;\\n  width: 15px;\\n  height: 14px;\\n  margin: -4px 1px 1px 1px;\\n  padding: 0px;\\n  border: 0px solid #9c9c9c;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 23px;\\n}\\n.slick-cell-menu > .close:hover {\\n  color: #838383;\\n}\\n.slick-cell-menu > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-cell-menu .slick-cell-menu-option-list .title,\\n.slick-cell-menu .slick-cell-menu-command-list .title {\\n  font-size: 18px;\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: 1px solid #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-cell-menu .slick-cell-menu-item {\\n  cursor: pointer;\\n  display: flex;\\n  align-items: center;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  font-size: 13px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n  width: 100%;\\n  height: 24px;\\n  /* Disabled item */\\n}\\n.slick-cell-menu .slick-cell-menu-item:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-divider {\\n  cursor: default;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 5px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-divider:hover {\\n  border: none;\\n  background-color: #e7e7e7;\\n}\\n.slick-cell-menu .slick-cell-menu-item .slick-cell-menu-icon {\\n  font-size: 18px;\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  display: inline-block;\\n  line-height: calc(18px + 2px);\\n  margin-right: 6px;\\n  vertical-align: middle;\\n  width: 16px;\\n}\\n.slick-cell-menu .slick-cell-menu-item .slick-cell-menu-content {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-disabled {\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n  cursor: inherit;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-disabled .slick-cell-menu-icon, .slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-disabled .slick-cell-menu-content {\\n  color: silver;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-hidden {\\n  display: none;\\n}\\n.slick-cell-menu .slick-cell-menu-option-list {\\n  margin-bottom: 10px;\\n}\\n.slick-cell-menu button + .slick-cell-menu-command-list .slick-cell-menu-item:first-child,\\n.slick-cell-menu button + .slick-cell-menu-option-list .slick-cell-menu-item:first-child {\\n  width: calc(100% - 15px - 3px);\\n}\\n.slick-context-menu {\\n  position: absolute;\\n  background: #ffffff;\\n  border: 1px solid #BFBDBD;\\n  border-radius: 2px;\\n  min-width: 175px;\\n  padding: 6px;\\n  z-index: 100000;\\n  cursor: default;\\n  display: inline-block;\\n  overflow: auto;\\n  resize: both;\\n  /* make sure that other UI frameworks aren't overriding our properties (Bulma was one of them affecting this) */\\n  /* resize context menu item width when there's a close button on same line */\\n}\\n.slick-context-menu.dropdown, .slick-context-menu.dropup {\\n  display: inline-block;\\n  position: absolute;\\n}\\n.slick-context-menu > .close {\\n  float: right;\\n  color: #c3c3c3;\\n  background-color: #ffffff;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  border: 0px solid #9c9c9c;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 23px;\\n}\\n.slick-context-menu > .close:hover {\\n  color: #838383;\\n}\\n.slick-context-menu > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-context-menu .title {\\n  font-size: calc(16px + 2px);\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: 1px solid #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-context-menu .slick-context-menu-item {\\n  cursor: pointer;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  font-size: 16px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n  width: 100%;\\n  /* Disabled item */\\n}\\n.slick-context-menu .slick-context-menu-item:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-divider {\\n  cursor: default;\\n  display: block;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 5px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-divider:hover {\\n  border: none;\\n  background-color: #e7e7e7;\\n}\\n.slick-context-menu .slick-context-menu-item .slick-context-menu-icon {\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  display: inline-block;\\n  font-size: 16px;\\n  height: 16px;\\n  line-height: 14px;\\n  margin-right: 5px;\\n  vertical-align: middle;\\n  width: 16px;\\n}\\n.slick-context-menu .slick-context-menu-item .slick-context-menu-content {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-disabled {\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n  cursor: inherit;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-disabled .slick-context-menu-icon, .slick-context-menu .slick-context-menu-item.slick-context-menu-item-disabled .slick-context-menu-content {\\n  color: silver;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-hidden {\\n  display: none;\\n}\\n.slick-context-menu .slick-context-menu-option-list {\\n  margin-bottom: 10px;\\n}\\n.slick-context-menu button + .slick-context-menu-command-list .slick-context-menu-item:first-child,\\n.slick-context-menu button + .slick-context-menu-option-list .slick-context-menu-item:first-child {\\n  width: calc(100% - 15px - 3px);\\n}\\n.slick-column-name,\\n.slick-sort-indicator {\\n  /**\\n   * This makes all \\\"float:right\\\" elements after it that spill over to the next line\\n   * display way below the lower boundary of the column thus hiding them.\\n   */\\n  float: left;\\n  margin-bottom: 100px;\\n}\\n.slick-header-button {\\n  /**\\n   * This makes all \\\"float:right\\\" elements after it that spill over to the next line\\n   * display way below the lower boundary of the column thus hiding them.\\n   */\\n  float: right;\\n  vertical-align: top;\\n  margin: 1px;\\n  margin-bottom: 100px;\\n  height: 15px;\\n  width: 15px;\\n  background-repeat: no-repeat;\\n  background-position: center center;\\n  cursor: pointer;\\n}\\n.slick-header-button-hidden {\\n  width: 0;\\n  margin-right: -8px;\\n  transition: 0.2s width;\\n}\\n.slick-header-column:hover > .slick-header-button {\\n  width: 15px;\\n}\\n.slick-header-menubutton {\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  cursor: pointer;\\n  display: none;\\n  position: absolute;\\n  height: 35px;\\n  border: 1px solid #BFBDBD;\\n  border-width: 0px;\\n  padding: 0px;\\n  color: #706e6b;\\n  bottom: 0;\\n  right: 8px;\\n  top: 0;\\n  width: 14px;\\n}\\n.slick-header-menubutton:before {\\n  display: inline-block;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23706E6B\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M22 8.2l-9.5 9.6c-.3.2-.7.2-1 0L2 8.2c-.2-.3-.2-.7 0-1l1-1c.3-.3.8-.3 1.1 0l7.4 7.5c.3.3.7.3 1 0l7.4-7.5c.3-.2.8-.2 1.1 0l1 1c.2.3.2.7 0 1z\\\"></path></svg>');\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 26px;\\n  font-weight: normal;\\n  width: 14px;\\n}\\n.slick-header-column .slick-header-menubutton {\\n  display: inline-block;\\n}\\n.slick-header-column:hover .slick-header-menubutton {\\n  display: inline-block;\\n}\\n.slick-header-menu {\\n  position: absolute;\\n  margin: 0;\\n  background: none repeat scroll 0 0 #ffffff;\\n  border: 1px solid #BFBDBD;\\n  border-radius: 2px;\\n  min-width: 175px;\\n  padding: 6px;\\n  z-index: 100000;\\n  cursor: default;\\n  display: inline-block;\\n}\\n.slick-header-menu .filter {\\n  border: 1px solid #BFBDBD;\\n  font-size: 8pt;\\n  height: 400px;\\n  margin-top: 6px;\\n  overflow: scroll;\\n  padding: 4px;\\n  white-space: nowrap;\\n  width: 200px;\\n}\\n.slick-header-menu .textfilter > label {\\n  display: inline-block;\\n  margin-left: 5px;\\n  margin-right: 10px;\\n}\\n.slick-header-menu .textfilter > input[type=text] {\\n  width: 70%;\\n}\\n.slick-header-menuitem {\\n  cursor: pointer;\\n  display: block;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-header-menuitem:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-header-menuitem.slick-header-menuitem-divider {\\n  cursor: default;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 3px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-header-menuitem.slick-header-menuitem-divider:hover {\\n  border: none;\\n  background-color: silver;\\n}\\n.slick-header-menuitem-divider.slick-header-menuitem:hover {\\n  background-color: #e7e7e7;\\n}\\n.slick-header-menuicon {\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  display: inline-block;\\n  color: #080707;\\n  font-size: 18px;\\n  font-weight: normal;\\n  line-height: 14px;\\n  height: 16px;\\n  margin-right: 6px;\\n  vertical-align: middle;\\n  width: 18px;\\n  /* Font Awesome sorting icons are not aligned in middle, let's align them ourselves */\\n}\\n.slick-header-menuicon.fa-sort-asc {\\n  transform: translateY(3px);\\n}\\n.slick-header-menuicon.fa-sort-desc {\\n  transform: translateY(-2px);\\n}\\n.slick-header-menucontent {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n/* Disabled */\\n.slick-header-menuitem-disabled {\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n  cursor: inherit;\\n}\\n.slick-header-menuitem-disabled .slick-header-menuicon, .slick-header-menuitem-disabled .slick-header-menucontent {\\n  color: silver;\\n}\\n.slick-header-menuitem-hidden {\\n  display: none;\\n}\\n.slick-cell.cell-reorder:before {\\n  display: inline-block;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 18px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23080707\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M10,13H22V11H10M10,19H22V17H10M10,7H22V5H10M6,7H8.5L5,3.5L1.5,7H4V17H1.5L5,20.5L8.5,17H6V7Z\\\"></path></svg>');\\n  width: 18px;\\n}\\n.slick-cell.cell-reorder {\\n  cursor: -webkit-grab;\\n  cursor: grab;\\n}\\n.slick-headerrow-column,\\n.slick-column-name,\\n.slick-cell-checkboxsel {\\n  text-align: center;\\n}\\n.slick-headerrow-column #filter-checkbox-selectall-container,\\n.slick-column-name #filter-checkbox-selectall-container,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  height: 100%;\\n}\\n.slick-headerrow-column input[type=checkbox],\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox],\\n.slick-column-name input[type=checkbox],\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox],\\n.slick-cell-checkboxsel input[type=checkbox],\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] {\\n  display: none;\\n  /* to hide the checkbox itself */\\n}\\n.slick-headerrow-column input[type=checkbox],\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox] + label,\\n.slick-column-name input[type=checkbox],\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox] + label,\\n.slick-cell-checkboxsel input[type=checkbox],\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] + label {\\n  margin: 0;\\n}\\n.slick-headerrow-column input[type=checkbox] + label:before,\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox] + label:before,\\n.slick-column-name input[type=checkbox] + label:before,\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox] + label:before,\\n.slick-cell-checkboxsel input[type=checkbox] + label:before,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] + label:before {\\n  cursor: pointer;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"transparent\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z\\\"></path></svg>');\\n  background-color: white;\\n  color: #b5b5b5;\\n  display: inline-block;\\n  font-weight: normal;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 12px;\\n  opacity: 1;\\n  /* unchecked icon */\\n  height: calc(12px + 4px);\\n  width: calc(12px + 4px);\\n  border: 1px solid #d6d4d4;\\n  border-radius: 0.125rem;\\n  margin: 2px 0 0 0;\\n}\\n.slick-headerrow-column input[type=checkbox] + label:hover:before,\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox] + label:hover:before,\\n.slick-column-name input[type=checkbox] + label:hover:before,\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox] + label:hover:before,\\n.slick-cell-checkboxsel input[type=checkbox] + label:hover:before,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] + label:hover:before {\\n  opacity: 0.9;\\n}\\n.slick-headerrow-column input[type=checkbox]:checked + label:before,\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox]:checked + label:before,\\n.slick-column-name input[type=checkbox]:checked + label:before,\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox]:checked + label:before,\\n.slick-cell-checkboxsel input[type=checkbox]:checked + label:before,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox]:checked + label:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%230070D2\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M9,20.42L2.79,14.21L5.62,11.38L9,14.77L18.88,4.88L21.71,7.71L9,20.42Z\\\"></path></svg>');\\n  color: #0070D2;\\n  opacity: 1;\\n  /* checked icon */\\n  height: calc(12px + 4px);\\n  width: calc(12px + 4px);\\n  border-radius: 1px solid #d6d4d4;\\n  border-radius: 0.125rem;\\n}\\n.slick-group .slick-cell-checkboxsel {\\n  text-align: left;\\n}\\n.search-filter :focus {\\n  outline-color: #73b3e5;\\n}\\n.ms-choice {\\n  border: 1px solid #ccc;\\n  background-color: transparent;\\n  font-size: 13px;\\n}\\n.ms-choice div:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(18px - 4px);\\n}\\n.ms-choice div.open:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(18px - 4px);\\n}\\n.ms-choice span {\\n  font-size: 12px;\\n  font-family: \\\"Helvetica Neue\\\", Helvetica, Arial;\\n}\\n.ms-choice .placeholder {\\n  font-family: \\\"Segoe UI Symbol\\\";\\n  font-size: 13px;\\n  color: #c9c9c9 !important;\\n}\\n.ms-filter.search-filter {\\n  width: 100% !important;\\n}\\n.ms-drop {\\n  max-width: 250px;\\n  border: 1px solid #bbb;\\n  z-index: 9999;\\n}\\n.ms-drop input[type=checkbox],\\n.ms-drop input[type=radio] {\\n  /* make input checkbox invisible but don't hide it since multiple-select uses hide for something else */\\n  opacity: 0;\\n  width: 0;\\n}\\n.ms-drop input[type=checkbox] + span:before,\\n.ms-drop input[type=radio] + span:before {\\n  cursor: pointer;\\n  color: #b5b5b5;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"transparent\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z\\\"></path></svg>');\\n  display: inline-block;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 10px;\\n  font-weight: normal;\\n  height: 15px;\\n  width: 15px;\\n  border: 1px solid #d6d4d4;\\n  border-radius: 0.125rem;\\n  margin: 0px 4px 2px 0;\\n  opacity: 0.8;\\n}\\n.ms-drop input[type=checkbox]:checked + span:before,\\n.ms-drop input[type=radio]:checked + span:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%230070D2\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M9,20.42L2.79,14.21L5.62,11.38L9,14.77L18.88,4.88L21.71,7.71L9,20.42Z\\\"></path></svg>');\\n  opacity: 1;\\n  height: 15px;\\n  width: 15px;\\n  border: 1px solid #d6d4d4;\\n  border-radius: 0.125rem;\\n  margin: 0px 4px 2px 0;\\n}\\n.ms-drop input[type=radio] + span:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"transparent\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M12 3.7c4.6 0 8.3 3.7 8.3 8.3s-3.7 8.3-8.3 8.3-8.3-3.7-8.3-8.3S7.4 3.7 12 3.7z\\\"></path></svg>');\\n  height: 15px;\\n  width: 15px;\\n  border: 1px solid #d6d4d4;\\n  border-radius: 50%;\\n  margin: 0px 4px 2px 0;\\n}\\n.ms-drop input[type=radio]:checked + span:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%230070D2\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M12 3.7c4.6 0 8.3 3.7 8.3 8.3s-3.7 8.3-8.3 8.3-8.3-3.7-8.3-8.3S7.4 3.7 12 3.7z\\\"></path></svg>');\\n  color: #0070D2;\\n  height: 15px;\\n  width: 15px;\\n  border: 1px solid #d6d4d4;\\n  border-radius: 50%;\\n  margin: 0px 4px 2px 0;\\n}\\n.ms-drop label {\\n  margin-bottom: 5px;\\n}\\n.ms-drop label span {\\n  cursor: pointer;\\n  margin-left: 4px;\\n  position: relative;\\n  top: 1px;\\n}\\n.ms-drop label:hover {\\n  cursor: pointer;\\n  background-color: #f3f2f2;\\n}\\n.ms-drop .ms-select-all {\\n  border-bottom: 1px solid #ddd;\\n}\\n.ms-drop .ms-select-all label {\\n  display: inline-block;\\n  font-weight: normal;\\n  padding: 5px 8px;\\n  color: #005fb3;\\n}\\n.ms-drop .ms-select-all label:hover {\\n  color: #005299;\\n}\\n.ms-drop .ms-ok-button {\\n  cursor: pointer;\\n  display: block;\\n  width: 100%;\\n  height: 26px;\\n  padding: 0;\\n  border: 1px solid #ccc;\\n  text-align: center;\\n  color: #006DCC;\\n  font-weight: 600;\\n  border-bottom-left-radius: 4px;\\n  border-bottom-right-radius: 4px;\\n  background-color: #fff;\\n}\\n.ms-drop .ms-ok-button:hover {\\n  background-color: #eceaea;\\n  color: #005fb3;\\n}\\n.ms-drop .ms-search:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 10px;\\n  right: 8px;\\n  position: absolute;\\n}\\n.search-filter .operator.input-group-addon {\\n  margin: 0;\\n  padding: 0;\\n  min-width: 25px;\\n  border: none;\\n}\\n.search-filter .operator.input-group-addon .form-control {\\n  border-radius: 4px 0 0 4px;\\n  padding: 0 0 0 2px !important;\\n  font-size: 13px;\\n  color: #333333;\\n  font-weight: bold;\\n  background-color: #ffffff;\\n}\\n.search-filter .operator.input-group-addon select {\\n  font-family: Consolas, \\\"Lucida Console\\\";\\n  font-size: 14px !important;\\n  border: 1px solid #6cb6ff;\\n  width: 25px;\\n}\\n.search-filter .operator.input-group-addon select.form-control {\\n  cursor: pointer;\\n  -moz-appearance: none;\\n  -webkit-appearance: none;\\n}\\n.search-filter .operator.input-group-addon select.form-control:-ms-expand {\\n  display: none;\\n}\\n.search-filter .operator.input-group-addon select.form-control .empty {\\n  color: #c0c0c0;\\n}\\n.search-filter .operator-char3.input-group-addon {\\n  min-width: 30px;\\n}\\ninput.search-filter {\\n  font-family: \\\"Segoe UI Symbol\\\";\\n}\\n.search-filter input {\\n  font-family: \\\"Segoe UI Symbol\\\";\\n}\\n.search-filter input.compound-input {\\n  border-radius: 0 4px 4px 0 !important;\\n  border-left: none;\\n}\\n.search-filter input.compound-input::-moz-placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter input.compound-input::placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter input.compound-slider {\\n  border-left: none !important;\\n}\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column .input-group-prepend + .flatpickr input.compound-input {\\n  border-top-left-radius: 0;\\n  border-bottom-left-radius: 0;\\n}\\n.search-filter .flatpickr input.form-control {\\n  border-left: none;\\n}\\n.search-filter .flatpickr input.form-control::-moz-placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter .flatpickr input.form-control::placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter.flatpickr,\\n.search-filter .flatpickr {\\n  flex: 1;\\n  cursor: pointer;\\n}\\n.search-filter.flatpickr input.flatpickr.form-control,\\n.search-filter.flatpickr .flatpickr-input.form-control,\\n.search-filter .flatpickr input.flatpickr.form-control,\\n.search-filter .flatpickr .flatpickr-input.form-control {\\n  background-color: #ffffff;\\n  font-family: \\\"Segoe UI Symbol\\\";\\n  font-size: 13px;\\n  border-radius: 0 4px 4px 0;\\n  width: 100%;\\n}\\n.search-filter.flatpickr input.flatpickr.form-control[readonly],\\n.search-filter.flatpickr .flatpickr-input.form-control[readonly],\\n.search-filter .flatpickr input.flatpickr.form-control[readonly],\\n.search-filter .flatpickr .flatpickr-input.form-control[readonly] {\\n  background-color: #ffffff;\\n}\\n.search-filter.flatpickr .form-control[readonly],\\n.search-filter.flatpickr .flatpickr.form-control[readonly],\\n.search-filter .flatpickr .form-control[readonly],\\n.search-filter .flatpickr .flatpickr.form-control[readonly] {\\n  cursor: pointer;\\n  background-color: #ffffff;\\n}\\ninput.flatpickr-input.form-control,\\ninput.flatpickr.form-control {\\n  cursor: pointer;\\n  font-family: \\\"Segoe UI Symbol\\\";\\n  font-size: 13px;\\n  border-radius: 4px;\\n}\\ninput.flatpickr-input.form-control[readonly],\\ninput.flatpickr.form-control[readonly] {\\n  background-color: #ffffff;\\n}\\n.slick-preheader-panel .ui-droppable, .slick-preheader-panel .ui-droppable-hover {\\n  padding: 5px 10px;\\n  height: 35px;\\n  border: 1px solid #e0e0e0 !important;\\n  width: 100% !important;\\n  border-radius: 0;\\n  background-color: #ffffff;\\n}\\n.slick-preheader-panel .ui-droppable .slick-placeholder, .slick-preheader-panel .ui-droppable-hover .slick-placeholder {\\n  font-style: italic;\\n  color: #616161;\\n}\\n.slick-preheader-panel .ui-droppable .slick-group-toggle-all, .slick-preheader-panel .ui-droppable-hover .slick-group-toggle-all {\\n  position: absolute;\\n  cursor: pointer;\\n  font-family: \\\"FontAwesome\\\";\\n  color: #006DCC;\\n  display: none !important;\\n  top: 7px;\\n  right: 40px;\\n}\\n.slick-preheader-panel .ui-droppable .slick-group-toggle-all.expanded:before, .slick-preheader-panel .ui-droppable-hover .slick-group-toggle-all.expanded:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23006DCC\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M22 8.2l-9.5 9.6c-.3.2-.7.2-1 0L2 8.2c-.2-.3-.2-.7 0-1l1-1c.3-.3.8-.3 1.1 0l7.4 7.5c.3.3.7.3 1 0l7.4-7.5c.3-.2.8-.2 1.1 0l1 1c.2.3.2.7 0 1z\\\"></path></svg>');\\n}\\n.slick-preheader-panel .ui-droppable .slick-group-toggle-all.collapsed:before, .slick-preheader-panel .ui-droppable-hover .slick-group-toggle-all.collapsed:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23006DCC\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M8.3 2l9.5 9.5c.3.3.3.7 0 1L8.3 22c-.3.2-.8.2-1.1 0l-1-1c-.2-.3-.2-.8 0-1.1l7.6-7.4c.2-.3.2-.7 0-1L6.3 4.1C6 3.8 6 3.3 6.3 3l1-1c.3-.2.7-.2 1 0z\\\"></path></svg>');\\n}\\n.slick-preheader-panel .ui-droppable .slick-dropped-grouping, .slick-preheader-panel .ui-droppable-hover .slick-dropped-grouping {\\n  display: inline-block;\\n  vertical-align: middle;\\n  cursor: move;\\n}\\n.slick-preheader-panel .ui-droppable .slick-groupby-remove, .slick-preheader-panel .ui-droppable-hover .slick-groupby-remove {\\n  cursor: pointer;\\n  display: inline-flex;\\n  color: pink;\\n  font-size: 16px;\\n  padding-left: 5px;\\n  padding-right: 7px;\\n  vertical-align: middle;\\n}\\n.slick-preheader-panel .ui-droppable .slick-groupby-remove:hover, .slick-preheader-panel .ui-droppable-hover .slick-groupby-remove:hover {\\n  color: red;\\n}\\n.slick-preheader-panel .ui-droppable-active {\\n  background-color: #fafafa;\\n}\\n.slick-preheader-panel .ui-droppable-hover {\\n  background-color: #ededed;\\n}\\n.slick-header .slick-header-columns .slick-column-groupable {\\n  display: inline-block;\\n  font-weight: normal;\\n  color: #707070;\\n  width: 9px;\\n  height: 9px;\\n  margin-left: 4px;\\n}\\n.ui-widget.ui-widget-content {\\n  border: 0;\\n}\\ninput.slider-editor-input[type=range],\\ninput.slider-filter-input[type=range] {\\n  /*removes default webkit styles*/\\n  -webkit-appearance: none;\\n  height: 27px;\\n  flex: 1;\\n  padding: 0 6px;\\n  /* change runnable track color while in focus on all browsers */\\n  /* WebKit specific (Opera/Chrome/Safari) */\\n  /* Mozilla Firefox specific */\\n  /*fix for FF unable to apply focus style bug */\\n  border: 1px solid #ccc;\\n  /*hide the outline behind the border*/\\n  /* Microsoft IE specific */\\n}\\ninput.slider-editor-input[type=range]:focus,\\ninput.slider-filter-input[type=range]:focus {\\n  outline: none;\\n}\\ninput.slider-editor-input[type=range]:focus::-webkit-slider-runnable-track,\\ninput.slider-filter-input[type=range]:focus::-webkit-slider-runnable-track {\\n  background: #ECEBEA;\\n}\\ninput.slider-editor-input[type=range]:focus::-moz-range-track,\\ninput.slider-filter-input[type=range]:focus::-moz-range-track {\\n  background: #ECEBEA;\\n}\\ninput.slider-editor-input[type=range]:focus::-ms-fill-lower,\\ninput.slider-filter-input[type=range]:focus::-ms-fill-lower {\\n  background: #aaa;\\n}\\ninput.slider-editor-input[type=range]:focus::-ms-fill-upper,\\ninput.slider-filter-input[type=range]:focus::-ms-fill-upper {\\n  background: #ECEBEA;\\n}\\ninput.slider-editor-input[type=range]::-webkit-slider-runnable-track,\\ninput.slider-filter-input[type=range]::-webkit-slider-runnable-track {\\n  height: 4px;\\n  background: #eee;\\n  border: none;\\n  border-radius: 3px;\\n}\\ninput.slider-editor-input[type=range]::-webkit-slider-thumb,\\ninput.slider-filter-input[type=range]::-webkit-slider-thumb {\\n  cursor: pointer;\\n  -webkit-appearance: none;\\n  border: none;\\n  height: 14px;\\n  width: 14px;\\n  border-radius: 50%;\\n  border: 1px solid #1e70ae;\\n  background: #3C97DD;\\n  margin-top: -4px;\\n}\\ninput.slider-editor-input[type=range]::-moz-range-track,\\ninput.slider-filter-input[type=range]::-moz-range-track {\\n  height: 4px;\\n  background: #eee;\\n  border: none;\\n  border-radius: 3px;\\n}\\ninput.slider-editor-input[type=range]::-moz-range-thumb,\\ninput.slider-filter-input[type=range]::-moz-range-thumb {\\n  border: none;\\n  cursor: pointer;\\n  height: calc(14px - 2px);\\n  width: calc(14px - 2px);\\n  border-radius: 50%;\\n  border: 1px solid #1e70ae;\\n  background: #3C97DD;\\n}\\ninput.slider-editor-input[type=range]:-moz-focusring,\\ninput.slider-filter-input[type=range]:-moz-focusring {\\n  outline: 1px solid white;\\n  outline-offset: -1px;\\n}\\ninput.slider-editor-input[type=range]::-ms-track,\\ninput.slider-filter-input[type=range]::-ms-track {\\n  height: 4px;\\n  /*remove bg colour from the track, we'll use ms-fill-lower and ms-fill-upper instead */\\n  background: transparent;\\n  /*leave room for the larger thumb to overflow with a transparent border */\\n  border-color: transparent;\\n  border-width: 6px 0;\\n  /*remove default tick marks*/\\n  color: transparent;\\n}\\ninput.slider-editor-input[type=range]::-ms-fill-lower,\\ninput.slider-filter-input[type=range]::-ms-fill-lower {\\n  background: #ddd;\\n  border-radius: 10px;\\n}\\ninput.slider-editor-input[type=range]::-ms-fill-upper,\\ninput.slider-filter-input[type=range]::-ms-fill-upper {\\n  background: #eee;\\n  border-radius: 10px;\\n}\\ninput.slider-editor-input[type=range]::-ms-thumb,\\ninput.slider-filter-input[type=range]::-ms-thumb {\\n  border: none;\\n  cursor: pointer;\\n  height: calc(14px - 2px);\\n  width: calc(14px - 2px);\\n  border-radius: 50%;\\n  border: 1px solid #1e70ae;\\n  background: #3C97DD;\\n  margin-top: 1px;\\n}\\ninput.slider-editor-input[type=range]::-ms-tooltip,\\ninput.slider-filter-input[type=range]::-ms-tooltip {\\n  display: none;\\n}\\n.search-filter {\\n  height: 27px;\\n}\\n.search-filter::-moz-placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter::placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter .slider-value {\\n  padding: 0;\\n  height: 100%;\\n}\\n.search-filter .slider-value .input-group-text {\\n  padding: 4px 8px;\\n  font-size: calc(13 - 1px);\\n}\\ninput.slider-filter-input[type=range] {\\n  padding: 0 6px;\\n  height: 27px;\\n}\\n/* Slider Editor */\\ninput.slider-editor-input[type=range] {\\n  padding: 0 6px;\\n  height: 24px;\\n}\\n.slider-editor .slider-value {\\n  padding: 0;\\n  height: 24px;\\n}\\n.slider-editor .slider-value .input-group-text {\\n  padding: 4px 6px;\\n  font-size: calc(13 - 1px);\\n  height: 24px;\\n}\\n.slider-range-container {\\n  height: 27px;\\n  padding: 0 12px;\\n}\\n.slider-range-container .ui-slider {\\n  position: relative;\\n}\\n.slider-range-container .ui-slider .ui-slider-handle {\\n  position: absolute;\\n  top: -5px;\\n  border-radius: 50%;\\n  cursor: pointer;\\n  border: 1px solid #1e70ae;\\n  height: 14px;\\n  width: 14px;\\n  background-color: #3C97DD;\\n}\\n.slider-range-container .ui-slider .ui-slider-handle:focus {\\n  outline: none;\\n}\\n.slider-range-container .ui-slider-horizontal {\\n  top: 45%;\\n  height: 4px;\\n  background-color: #eee;\\n}\\n.slider-range-container .input-group-text {\\n  border: 0;\\n}\\n.slider-range-container.slider-values {\\n  padding: 0;\\n}\\n.slider-range-container.slider-values .ui-slider-horizontal {\\n  flex: 1;\\n  width: calc(98% - 16px);\\n  top: 12px;\\n  margin: 0 10px;\\n}\\n.slider-range-container.slider-values .slider-range-value {\\n  padding: 0;\\n  border: 0;\\n  height: 100%;\\n}\\n.slider-range-container.slider-values .slider-range-value .input-group-text {\\n  padding: 4px 8px;\\n  font-size: calc(13 - 1px);\\n}\\n.slider-range-container.slider-values .input-group-prepend.slider-range-value {\\n  border-right: 1px solid #ccc;\\n}\\n.slider-range-container.slider-values .input-group-append.slider-range-value {\\n  border-left: 1px solid #ccc;\\n}\\n.slick-row .detail-view-toggle {\\n  display: inline-block;\\n  cursor: pointer;\\n}\\n.slick-row .detail-view-toggle.expand {\\n  display: inline-block;\\n  color: #006DCC;\\n}\\n.slick-row .detail-view-toggle.expand:hover {\\n  color: #005299;\\n}\\n.slick-row .detail-view-toggle.expand:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(18px + 2px);\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23006DCC\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M17,13H13V17H11V13H7V11H11V7H13V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z\\\"></path></svg>');\\n}\\n.slick-row .detail-view-toggle.collapse {\\n  display: inline-block;\\n  color: #006DCC;\\n}\\n.slick-row .detail-view-toggle.collapse:hover {\\n  color: #005299;\\n}\\n.slick-row .detail-view-toggle.collapse:before {\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(18px + 2px);\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23006DCC\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M17,13H7V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z\\\"></path></svg>');\\n}\\n.slick-row .dynamic-cell-detail {\\n  position: absolute;\\n  width: 100%;\\n  overflow: auto;\\n  border: 1px solid #c0c0c0;\\n  background-color: #f7f7f7;\\n  padding: 10px;\\n  z-index: 1000;\\n}\\n.slick-row .dynamic-cell-detail :first-child {\\n  vertical-align: middle;\\n  line-height: 13px;\\n}\\n/* pagination/pagination variables */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-custom-footer {\\n  color: #808080;\\n  padding: 5px 0;\\n  background-color: transparent;\\n  font-size: 13px;\\n  font-style: italic;\\n  font-weight: normal;\\n  height: 30px;\\n}\\n.slick-custom-footer .left-footer {\\n  color: #808080;\\n  font-style: italic;\\n  font-weight: normal;\\n  text-align: left;\\n  padding: 0px;\\n  width: 50%;\\n  float: left;\\n}\\n.slick-custom-footer .right-footer.metrics {\\n  color: #808080;\\n  text-align: right;\\n  font-style: italic;\\n  font-weight: normal;\\n  text-align: right;\\n  padding: 0px;\\n  width: 50%;\\n  float: right;\\n}\\n.slick-custom-footer .right-footer.metrics .separator {\\n  margin: 2px;\\n}\\n.slick-empty-data-warning {\\n  position: relative;\\n  color: #080707;\\n  font-family: var(--lwc-fontFamily, \\\"Salesforce Sans\\\", \\\"SalesforceSans-Regular\\\", Arial, sans-serif);\\n  font-size: calc(13px + 2px);\\n  font-style: italic;\\n  line-height: 18px;\\n  margin: 0px;\\n  padding: 8px;\\n  z-index: 10;\\n}\\n/* Pagination styling */\\n.slick-pagination {\\n  border-top: 0 none;\\n  border-right: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  width: 100%;\\n  height: 40px;\\n  padding-top: 4px;\\n  vertical-align: middle;\\n  font-family: var(--lwc-fontFamily, \\\"Salesforce Sans\\\", \\\"SalesforceSans-Regular\\\", Arial, sans-serif);\\n  font-size: calc(13px - 1px);\\n  font-weight: 400;\\n  color: #808080;\\n}\\n.slick-pagination .slick-pagination-status {\\n  display: inline-block;\\n  padding: 6px;\\n}\\n.slick-pagination .ui-icon-container {\\n  display: inline-block;\\n  border-color: #ddd;\\n}\\n.slick-pagination .slick-pagination-nav {\\n  display: inline-block;\\n  padding: 2px;\\n  height: 34px;\\n}\\n.slick-pagination .slick-pagination-nav nav {\\n  display: inline-block;\\n}\\n.slick-pagination .slick-pagination-nav .slick-page-number {\\n  vertical-align: top;\\n  margin-top: 6px;\\n  display: inline-block;\\n  padding: 0 5px;\\n}\\n.slick-pagination .slick-pagination-nav .slick-page-number input {\\n  background-color: #fafbed;\\n  height: 26px;\\n  width: 50px;\\n  padding: 2px;\\n  border-radius: 3px;\\n  display: inline-block;\\n}\\n.slick-pagination .slick-pagination-nav .pagination {\\n  margin: 0;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-link {\\n  font-size: calc(18px - 1px);\\n  border: 1px solid #acacac;\\n  height: 32px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item {\\n  cursor: pointer;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item a[class*=icon-seek-] {\\n  border-color: 1px solid #acacac;\\n  color: #006DCC;\\n  text-decoration: none;\\n  font-family: \\\"FontAwesome\\\";\\n  line-height: calc(18px + 4px);\\n  -webkit-text-stroke: 0.4px;\\n  padding: 6px 9px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item a[class*=icon-seek-]:hover {\\n  background-color: #E6E6E6;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item:first-child a, .slick-pagination .slick-pagination-nav .pagination .page-item:first-child span {\\n  border-top-left-radius: 2px;\\n  border-bottom-left-radius: 2px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item:last-child a, .slick-pagination .slick-pagination-nav .pagination .page-item:last-child span {\\n  border-top-right-radius: 2px;\\n  border-bottom-right-radius: 2px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-first:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23006DCC\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/><path d=\\\"M24 24H0V0h24v24z\\\" fill=\\\"none\\\"/></svg>');\\n  display: block;\\n  width: 18px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-prev:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23006DCC\\\" viewBox=\\\"0 0 24 24\\\"> <path d=\\\"M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z\\\"></path></svg>');\\n  display: block;\\n  width: 18px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-next:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23006DCC\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z\\\"></path></svg>');\\n  display: block;\\n  width: 18px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-end:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23006DCC\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M0 0h24v24H0V0z\\\" fill=\\\"none\\\"/><path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/></svg>');\\n  display: block;\\n  width: 18px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item.disabled {\\n  cursor: not-allowed;\\n  font-weight: normal;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item.disabled a[class*=icon-seek-] {\\n  color: #b8b8b8;\\n  background-color: #f9f9f9;\\n  border-color: #dedede;\\n}\\n.slick-pagination .slick-pagination-settings {\\n  display: block;\\n  float: right;\\n  padding: 2px;\\n}\\n.slick-pagination .slick-pagination-settings select {\\n  font-size: calc(13px - 2px);\\n  line-height: 1.5;\\n  height: 32px;\\n  width: 60px;\\n  padding: 0 0 2px 2px;\\n  border: 1px solid #acacac;\\n  border-radius: 3px;\\n}\\n.slick-pagination .slick-pagination-settings .slick-pagination-count {\\n  margin-left: 2px;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.full-height {\\n  height: 100%;\\n}\\n.gridPane {\\n  width: 100%;\\n}\\n.grid-header {\\n  border: 1px solid gray;\\n  border-bottom: 0;\\n  border-top: 0;\\n  color: black;\\n  height: 24px;\\n  line-height: 24px;\\n}\\n.grid-header label {\\n  display: inline-block;\\n  font-weight: bold;\\n  margin: auto auto auto 6px;\\n}\\n.grid-header .ui-icon {\\n  margin: 4px 4px auto 6px;\\n  background-color: transparent;\\n  border-color: transparent;\\n}\\n.grid-header .ui-icon.ui-state-hover {\\n  background-color: white;\\n}\\n.grid-header #txtSearch {\\n  margin: 0 4px 0 4px;\\n  padding: 2px 2px;\\n  border-radius: 2px;\\n  border: 1px solid silver;\\n}\\n.options-panel {\\n  border-radius: 6px;\\n  border: 1px solid silver;\\n  background: #f0f0f0;\\n  padding: 4px;\\n  margin-bottom: 20px;\\n  width: 320px;\\n  position: absolute;\\n  top: 0px;\\n  left: 650px;\\n}\\n/* Individual cell styles */\\n.slick-cell.task-name {\\n  font-weight: bold;\\n  text-align: right;\\n}\\n.slick-cell.task-percent {\\n  text-align: right;\\n}\\n.slick-cell.cell-move-handle {\\n  font-weight: bold;\\n  text-align: right;\\n  border-right: solid gray;\\n  background: #efefef;\\n  cursor: move;\\n}\\n.cell-move-handle:hover {\\n  background: #b6b9bd;\\n}\\n.slick-row.selected .cell-move-handle {\\n  background: #D5DC8D;\\n}\\n.slick-row .cell-actions {\\n  text-align: left;\\n}\\n.slick-row.complete {\\n  background-color: #DFD;\\n  color: #555;\\n}\\n.percent-complete-bar {\\n  display: inline-block;\\n  height: 6px;\\n  border-radius: 3px;\\n  background-color: transparent;\\n}\\n/* Slick.Editors.Text, Slick.Editors.Date */\\n.ui-datepicker-trigger {\\n  margin-top: 2px;\\n  padding: 0;\\n  vertical-align: top;\\n}\\n/* Slick.Editors.PercentComplete */\\ninput.editor-percentcomplete {\\n  width: 100%;\\n  height: 100%;\\n  border: 0;\\n  margin: 0;\\n  background: transparent;\\n  outline: 0;\\n  padding: 0;\\n  float: left;\\n}\\n.editor-percentcomplete-picker {\\n  position: relative;\\n  display: inline-block;\\n  width: 16px;\\n  height: 100%;\\n  overflow: visible;\\n  z-index: 1000;\\n  float: right;\\n}\\n.editor-percentcomplete-helper {\\n  border: 0 solid gray;\\n  position: absolute;\\n  top: -2px;\\n  left: -9px;\\n  padding-left: 9px;\\n  width: 120px;\\n  height: 140px;\\n  display: none;\\n  overflow: visible;\\n}\\n.editor-percentcomplete-wrapper {\\n  background: beige;\\n  padding: 20px 8px;\\n  width: 100%;\\n  height: 98px;\\n  border: 1px solid gray;\\n  border-left: 0;\\n}\\n.editor-percentcomplete-buttons {\\n  float: right;\\n}\\n.editor-percentcomplete-buttons button {\\n  width: 80px;\\n}\\n.editor-percentcomplete-slider {\\n  float: left;\\n}\\n.editor-percentcomplete-picker:hover .editor-percentcomplete-helper {\\n  display: block;\\n}\\n.editor-percentcomplete-helper:hover {\\n  display: block;\\n}\\n/* Slick.Editors.YesNoSelect */\\nselect.editor-yesno {\\n  width: 100%;\\n  margin: 0;\\n  vertical-align: middle;\\n}\\n/* Slick.Editors.Checkbox */\\ninput.editor-checkbox {\\n  margin: 0;\\n  height: 100%;\\n  padding: 0;\\n  border: 0;\\n}\\n/*!\\n * SlickGrid custom styling for Bootstrap (https://github.com/ghiscoding/aurelia-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/aurelia-slickgrid/blob/master/LICENSE)\\n * @author: Ghislain B. (ghiscoding)\\n */\\n/*!\\n\\n/* Mixins for SlickGrid */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n@-webkit-keyframes highlight-start {\\n  to {\\n    background: #e2dfdf;\\n  }\\n  from {\\n    background: none;\\n  }\\n}\\n@keyframes highlight-start {\\n  to {\\n    background: #e2dfdf;\\n  }\\n  from {\\n    background: none;\\n  }\\n}\\n@-webkit-keyframes highlight-end {\\n  from {\\n    background: 0.3s ease 1;\\n  }\\n  to {\\n    background: none;\\n  }\\n}\\n@keyframes highlight-end {\\n  from {\\n    background: 0.3s ease 1;\\n  }\\n  to {\\n    background: none;\\n  }\\n}\\n.slickgrid-container {\\n  border-top: 1px solid #ccc;\\n  border-bottom: 1px solid #ccc;\\n  border-left: 0px solid #ccc;\\n  border-right: 0px solid #ccc;\\n  position: relative;\\n  font-family: var(--lwc-fontFamily, \\\"Salesforce Sans\\\", \\\"SalesforceSans-Regular\\\", Arial, sans-serif);\\n  /** Header Grouping **/\\n  /** Frozen/Pinned styling */\\n}\\n.slickgrid-container input[type=checkbox] {\\n  vertical-align: baseline;\\n  margin: 0;\\n}\\n.slickgrid-container .slick-viewport {\\n  border-top: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  border-right: 0 none;\\n}\\n.slickgrid-container .grid-canvas .slick-row {\\n  position: absolute;\\n  width: 100%;\\n  color: #080707;\\n  font-family: var(--lwc-fontFamily, \\\"Salesforce Sans\\\", \\\"SalesforceSans-Regular\\\", Arial, sans-serif);\\n  font-weight: 400;\\n}\\n.slickgrid-container .grid-canvas .slick-row:hover {\\n  background-color: #f3f2f2;\\n  box-shadow: 0 0 0 2px #dddbda;\\n  z-index: 5;\\n}\\n.slickgrid-container .grid-canvas .slick-row.active {\\n  padding: 5px 6px;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight {\\n  background-color: #e2dfdf;\\n  -webkit-animation: highlight-start 1.5s ease 1;\\n          animation: highlight-start 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight.odd {\\n  background-color: #e2dfdf;\\n  -webkit-animation: highlight-start 1.5s ease 1;\\n          animation: highlight-start 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight.odd .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight-end {\\n  background-color: #e2dfdf;\\n  -webkit-animation: highlight-end 1.5s ease 1;\\n          animation: highlight-end 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight-end.odd {\\n  background-color: #e2dfdf;\\n  -webkit-animation: highlight-end 1.5s ease 1;\\n          animation: highlight-end 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlighter {\\n  background: orange !important;\\n  transition-property: background;\\n  transition-duration: 3s;\\n  transition-timing-function: ease-in;\\n}\\n.slickgrid-container .grid-canvas .slick-row.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd {\\n  background-color: #f3f2f2;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd:hover {\\n  background-color: #f3f2f2;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell {\\n  background: inherit;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.selected {\\n  background-color: #eeeded;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell {\\n  background: inherit;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.selected {\\n  background-color: #eeeded;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.slick-group-totals {\\n  color: #666666;\\n  background: #fff;\\n}\\n.slickgrid-container .grid-canvas .slick-row.slick-group-totals .slick-cell {\\n  font-size: 14px;\\n}\\n.slickgrid-container .grid-canvas .slick-cell, .slickgrid-container .grid-canvas .slick-headerrow-column {\\n  border-top: none;\\n  border-bottom: none;\\n  border-left: 1px transparent;\\n  border-right: 1px transparent;\\n  box-shadow: 0px 1px 0px #dddbda, 0px -1px 0px #dddbda;\\n}\\n.slickgrid-container .grid-canvas .even {\\n  background-color: #ffffff;\\n}\\n.slickgrid-container .grid-canvas .slick-cell {\\n  padding: 5px 6px;\\n  font-size: 13px;\\n}\\n.slickgrid-container .grid-canvas .slick-cell td {\\n  font-size: 13px;\\n}\\nbody .slickgrid-container .grid-canvas .slick-cell {\\n  line-height: 20px;\\n}\\n.slickgrid-container .grid-canvas .slick-cell a, .slickgrid-container .grid-canvas .slick-cell a:visited, .slickgrid-container .grid-canvas .slick-cell .ui-widget-content a, .slickgrid-container .grid-canvas .slick-cell .ui-widget-content a:visited {\\n  color: #08c;\\n}\\n.slickgrid-container .grid-canvas .slick-cell a:hover, .slickgrid-container .grid-canvas .slick-cell .ui-widget-content a:hover {\\n  color: darker(#08c, 15%);\\n  border-bottom: none;\\n}\\n.slickgrid-container .grid-canvas .slick-cell table {\\n  height: 100%;\\n  padding: 0;\\n  background: none;\\n}\\n.slickgrid-container .grid-canvas .slick-cell td {\\n  padding: 0;\\n  vertical-align: middle;\\n  text-align: left;\\n}\\n.slickgrid-container .grid-canvas .slick-cell.selected {\\n  background-color: #eeeded;\\n}\\n.slickgrid-container .grid-canvas .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-cell select:not([multiple]).form-control {\\n  height: 100%;\\n  padding: 0;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-title {\\n  height: 24px;\\n  line-height: 24px;\\n  vertical-align: top;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-toggle {\\n  color: #006DCC;\\n  font-weight: normal;\\n  width: 15px;\\n  height: 20px;\\n  margin-right: 4px;\\n  cursor: pointer;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-toggle.expanded:before {\\n  display: inline-block;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23006DCC\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M22 8.2l-9.5 9.6c-.3.2-.7.2-1 0L2 8.2c-.2-.3-.2-.7 0-1l1-1c.3-.3.8-.3 1.1 0l7.4 7.5c.3.3.7.3 1 0l7.4-7.5c.3-.2.8-.2 1.1 0l1 1c.2.3.2.7 0 1z\\\"></path></svg>');\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(18px + 4px);\\n  width: 15px;\\n  vertical-align: bottom;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-toggle.collapsed:before {\\n  display: inline-block;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23006DCC\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M8.3 2l9.5 9.5c.3.3.3.7 0 1L8.3 22c-.3.2-.8.2-1.1 0l-1-1c-.2-.3-.2-.8 0-1.1l7.6-7.4c.2-.3.2-.7 0-1L6.3 4.1C6 3.8 6 3.3 6.3 3l1-1c.3-.2.7-.2 1 0z\\\"></path></svg>');\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: calc(18px + 4px);\\n  width: 15px;\\n  vertical-align: bottom;\\n}\\n.slickgrid-container .slick-header {\\n  border-top: 0 none;\\n  border-right: 0 none;\\n  border-bottom: transparent;\\n  border-left: 0 none;\\n  width: 100%;\\n  box-shadow: none !important;\\n}\\n.slickgrid-container .slick-headerrow {\\n  border-bottom: 1px solid #d0d0d0;\\n  border-top: 0 none;\\n  border-left: 0 none;\\n  border-right: 0 none;\\n}\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column {\\n  border: none;\\n  padding: 4px;\\n  background: #ffffff;\\n}\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column input,\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column select,\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column textarea {\\n  margin-right: 0;\\n  padding: 0 6px;\\n  width: none;\\n  height: 27px;\\n  box-sizing: border-box;\\n}\\n.slickgrid-container .slick-header-columns {\\n  background: none;\\n  background-color: #fafaf9;\\n  width: calc(100% - 16px);\\n}\\n.slickgrid-container .slick-header-columns .slick-header-sortable .slick-column-name {\\n  margin-left: 0;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column {\\n  height: calc(17px * 2);\\n  line-height: 13px;\\n  margin: 0;\\n  border-top: 0 none;\\n  border-right: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  white-space: normal;\\n  /* like TH  */\\n  background: #fafaf9;\\n  font-family: var(--lwc-fontFamily, \\\"Salesforce Sans\\\", \\\"SalesforceSans-Regular\\\", Arial, sans-serif);\\n  color: #514f4d;\\n  font-size: 13px;\\n  font-weight: 700;\\n  /* when sorting is possible and there's not yet a sort applied on the column\\n   we could display the sort ascending icon (with an opacity) as a hint */\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default {\\n  padding: 5px 6px;\\n  font-size: 13px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default td {\\n  font-size: 13px;\\n}\\nbody .slickgrid-container .slick-header-columns .slick-header-column.ui-state-default {\\n  line-height: 20px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column a, .slickgrid-container .slick-header-columns .slick-header-column a:visited {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column a:hover {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default {\\n  /* like TH  */\\n  background: #fafaf9;\\n  font-family: var(--lwc-fontFamily, \\\"Salesforce Sans\\\", \\\"SalesforceSans-Regular\\\", Arial, sans-serif);\\n  color: #514f4d;\\n  font-size: 13px;\\n  font-weight: 700;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default a, .slickgrid-container .slick-header-columns .slick-header-column.ui-state-default a:visited {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default a:hover {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.slick-header-column-sorted {\\n  font-style: normal;\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column:hover {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-sortable-handle.ui-state-hover:not(.slick-header-column-sorted) .slick-sort-indicator:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%230070D2\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M19.1 9.7c.4-.4.4-.9 0-1.3l-6.9-6.7c-.4-.4-.9-.4-1.3 0L4 8.4c-.4.4-.4.9 0 1.3l1.3 1.2c.3.4.9.4 1.3 0l2.1-2.1c.4-.4 1-.1 1 .4v12.5c0 .5.5.9 1 .9h1.8c.5 0 .9-.5.9-.9V9.2c0-.5.7-.8 1-.4l2.2 2.1c.4.4.9.4 1.3 0l1.2-1.2z\\\"></path></svg>');\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 13px;\\n  opacity: 0.5;\\n  display: inline-block;\\n  width: 13px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator {\\n  background: none;\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 18px;\\n  position: absolute;\\n  display: inline-block;\\n  color: #0070D2;\\n  width: 8px;\\n  height: 5px;\\n  left: auto;\\n  right: 12px;\\n  top: calc((15px * 2) - 15px);\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator-numbered {\\n  font-family: var(--lwc-fontFamily, \\\"Salesforce Sans\\\", \\\"SalesforceSans-Regular\\\", Arial, sans-serif);\\n  font-size: 10px;\\n  position: absolute;\\n  display: inline-block;\\n  color: #0070D2;\\n  width: 8px;\\n  left: auto;\\n  right: 0px;\\n  top: calc(13px * 2);\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator-asc:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%230070D2\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M19.1 9.7c.4-.4.4-.9 0-1.3l-6.9-6.7c-.4-.4-.9-.4-1.3 0L4 8.4c-.4.4-.4.9 0 1.3l1.3 1.2c.3.4.9.4 1.3 0l2.1-2.1c.4-.4 1-.1 1 .4v12.5c0 .5.5.9 1 .9h1.8c.5 0 .9-.5.9-.9V9.2c0-.5.7-.8 1-.4l2.2 2.1c.4.4.9.4 1.3 0l1.2-1.2z\\\"></path></svg>');\\n  font-family: \\\"FontAwesome\\\";\\n  font-size: 13px;\\n  opacity: 1;\\n  display: inline-block;\\n  width: 13px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator-desc:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%230070D2\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M4.4 14.3c-.3.4-.3.9 0 1.3l7 6.7c.3.4.9.4 1.2 0l7-6.7c.4-.4.4-.9 0-1.3l-1.3-1.2c-.3-.4-.9-.4-1.3 0l-2.1 2.1c-.4.4-1.1.1-1.1-.4V2.3c0-.5-.4-.9-.9-.9h-1.8c-.5 0-.9.5-.9.9v12.5c0 .5-.7.8-1.1.4L7 13.1c-.4-.4-1-.4-1.3 0l-1.3 1.2z\\\"></path></svg>');\\n  display: inline-block;\\n  opacity: 1;\\n  font-size: 13px;\\n  width: 13px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-resizable-handle {\\n  width: 7px;\\n  right: 0;\\n  z-index: 1;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-resizable-handle:hover {\\n  border-bottom: 2px solid #0070D2;\\n  border-left: 2px solid #0070D2;\\n  border-right: 2px solid #0070D2;\\n  border-top: 2px solid #0070D2;\\n  width: 4px;\\n  border-radius: 8px;\\n  right: 0;\\n  height: 100%;\\n  top: 0;\\n  opacity: 0.5;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default {\\n  border-bottom: none;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns {\\n  border-top: none;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns .slick-header-column {\\n  height: 21px;\\n  border-left: none;\\n  border-right: 1px solid #e8e8e8;\\n  font-size: 14px;\\n  justify-content: center;\\n  display: inline-grid;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns .slick-header-column:first-child {\\n  border-left: none;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns .slick-header-column:last-child {\\n  border-right: none;\\n}\\n.slickgrid-container .slick-row .slick-cell.frozen:last-child,\\n.slickgrid-container .slick-footerrow-column.frozen:last-child {\\n  border-right: 2px solid #0070D2;\\n}\\n.slickgrid-container .slick-header-column.frozen:last-child {\\n  border-right: 2px solid #0070D2;\\n}\\n.slickgrid-container .slick-pane-left .slick-preheader-panel .slick-header-column.frozen:last-child {\\n  border-right: 2px solid #0070D2;\\n}\\n.slickgrid-container .slick-headerrow-column.frozen:last-child {\\n  border-right: 2px solid #0070D2;\\n}\\n.slickgrid-container .slick-pane-bottom {\\n  border-top: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-viewport-bottom.slick-viewport-right {\\n  overflow-y: scroll !important;\\n}\\n.slickgrid-container .input-group > :not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback) {\\n  margin-left: 0;\\n}\\n.slickgrid-container .input-group > :not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback).ui-slider-horizontal {\\n  margin-left: 10px;\\n}\\n.slickgrid-container .input-group .input-group-addon .input-group-text {\\n  height: 100%;\\n}\\n.slickgrid-container .input-group .input-group-addon.input-group-append .input-group-text {\\n  margin-left: -1px;\\n  border-top-left-radius: 0;\\n  border-bottom-left-radius: 0;\\n}\\n.slickgrid-container .input-group .input-group-addon.input-group-prepend .input-group-text {\\n  margin-right: -1px;\\n  border-top-right-radius: 0;\\n  border-bottom-right-radius: 0;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.autocomplete-container {\\n  display: flex;\\n}\\n.ui-widget-content {\\n  background: none;\\n}\\n.ui-autocomplete .ui-menu-item {\\n  color: #333333;\\n}\\n.ui-autocomplete .ui-menu-item .ui-state-active {\\n  color: #333333;\\n}\\n.ui-autocomplete .ui-menu-item .ui-state-active:hover {\\n  margin: 0;\\n  border: 0;\\n  color: #333333;\\n}\\n.ui-autocomplete {\\n  background: none;\\n  position: absolute;\\n  z-index: 9999;\\n  padding: 0;\\n  margin-top: 2px;\\n  list-style: none;\\n  background-color: #ffffff;\\n  border: 1px solid rgba(0, 0, 0, 0.15);\\n  border-radius: 4px;\\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\\n  background-clip: padding-box;\\n  max-height: 25vh;\\n  min-height: 75px;\\n  min-width: 50px;\\n  overflow-y: auto;\\n  overflow-x: hidden;\\n  text-overflow: ellipsis;\\n}\\n.ui-autocomplete li div {\\n  display: block;\\n  color: #333333;\\n  padding: 3px 15px;\\n  font-weight: normal;\\n  line-height: 1.42857143;\\n  white-space: nowrap;\\n  list-style-image: none;\\n}\\n/* jquery ui loading spinner */\\n@keyframes md-spin {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n.ui-autocomplete-loading + span:after {\\n  -webkit-animation: md-spin 2s infinite linear;\\n          animation: md-spin 2s infinite linear;\\n  display: inline-block;\\n  font-family: \\\"FontAwesome\\\";\\n  color: #514f4d;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M16,13V11H21V13H16M14.83,7.76L17.66,4.93L19.07,6.34L16.24,9.17L14.83,7.76M11,16H13V21H11V16M11,3H13V8H11V3M4.93,17.66L7.76,14.83L9.17,16.24L6.34,19.07L4.93,17.66M4.93,6.34L6.34,4.93L9.17,7.76L7.76,9.17L4.93,6.34M8,13H3V11H8V13M19.07,17.66L17.66,19.07L14.83,16.24L16.24,14.83L19.07,17.66Z\\\"></path></svg>') !important;\\n  /* important is required to override default jquery-ui styling */\\n  width: 22px;\\n  margin-left: -26px;\\n  line-height: 0px;\\n  vertical-align: sub;\\n}\\n.ui-state-hover,\\n.ui-state-active,\\n.ui-state-focus {\\n  cursor: pointer;\\n  text-decoration: none;\\n  color: #262626;\\n  background-color: #eceaea;\\n}\\n.ui-helper-hidden-accessible {\\n  border: 0;\\n  clip: rect(0 0 0 0);\\n  height: 1px;\\n  margin: -1px;\\n  overflow: hidden;\\n  position: absolute;\\n  padding: 0;\\n  width: 1px;\\n}\\n/* autocomplete custom styling */\\n.ui-autocomplete.autocomplete-custom-four-corners {\\n  width: 385px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list {\\n  width: calc(385px - 15px);\\n  padding: 3px 10px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list div {\\n  margin: 0;\\n  padding: 0;\\n  line-height: 16px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-left {\\n  float: left;\\n  height: 32px;\\n  width: 32px;\\n  padding-right: 3px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-left > img {\\n  height: 32px;\\n  width: 32px;\\n  margin-top: 0px;\\n  background-color: #ffffff;\\n  background-clip: content-box;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-bottom-left {\\n  color: #686868;\\n  font-size: calc(12px - 1px);\\n  font-style: italic;\\n  font-weight: normal;\\n  max-width: calc(calc(385px - 15px) - 32px - (10px * 2));\\n  display: inline-block;\\n  /*margin-left: 30px;*/\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-bottom-right {\\n  float: right;\\n  color: #686868;\\n  font-size: calc(12px - 1px);\\n  font-style: italic;\\n  font-weight: normal;\\n  /*margin-left: 30px;*/\\n  text-overflow: ellipsis;\\n  max-width: 250px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-top-left {\\n  color: #313131;\\n  font-style: normal;\\n  font-size: 12px;\\n  font-weight: bold;\\n  max-width: calc(calc(385px - 15px) - 32px - (10px * 2));\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  padding-left: 1px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-top-right {\\n  float: right;\\n  color: #0080f0;\\n  font-style: normal;\\n  font-size: calc(12px - 1px);\\n  font-weight: bold;\\n  max-width: 100px;\\n}\\n/* autocomplete custom styling */\\n.ui-autocomplete.autocomplete-custom-two-rows {\\n  width: 285px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list {\\n  width: calc(285px - 15px);\\n  padding: 3px 10px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list div {\\n  margin: 0;\\n  padding: 0;\\n  line-height: 16px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-left {\\n  float: left;\\n  height: 32px;\\n  width: 32px;\\n  padding-right: 3px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-left > img {\\n  height: 32px;\\n  margin-top: 0px;\\n  background-color: #ffffff;\\n  background-clip: content-box;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-bottom-left {\\n  color: #686868;\\n  font-size: calc(12px - 1px);\\n  font-style: italic;\\n  font-weight: normal;\\n  max-width: calc(calc(285px - 15px) - 32px - (10px * 2));\\n  /*margin-left: 30px;*/\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-top-left {\\n  color: #313131;\\n  font-style: normal;\\n  font-size: 12px;\\n  font-weight: bold;\\n  max-width: calc(calc(285px - 15px) - 32px - (10px * 2));\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  padding-left: 1px;\\n}\\n.mdi.mdi-alert-circle:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M13,13H11V7H13M13,17H11V15H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-alert-octagon:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M13 13H11V7H13M11 15H13V17H11M15.73 3H8.27L3 8.27V15.73L8.27 21H15.73L21 15.73V8.27L15.73 3Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-arrow-collapse:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19.5,3.09L15,7.59V4H13V11H20V9H16.41L20.91,4.5L19.5,3.09M4,13V15H7.59L3.09,19.5L4.5,20.91L9,16.41V20H11V13H4Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-arrow-down-bold-box:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M5,3H19A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5A2,2 0 0,1 3,19V5A2,2 0 0,1 5,3M12,17L17,12H14V8H10V12H7L12,17Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-arrow-down-bold-box-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M12,17L7,12H10V8H14V12H17L12,17M5,3H19A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5A2,2 0 0,1 3,19V5A2,2 0 0,1 5,3M5,5V19H19V5H5Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-arrow-expand:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M10,21V19H6.41L10.91,14.5L9.5,13.09L5,17.59V14H3V21H10M14.5,10.91L19,6.41V10H21V3H14V5H17.59L13.09,9.5L14.5,10.91Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-call-split:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M14,4L16.29,6.29L13.41,9.17L14.83,10.59L17.71,7.71L20,10V4M10,4H4V10L6.29,7.71L11,12.41V20H13V11.59L7.71,6.29\\\"></path>      </svg>');\\n}\\n.mdi.mdi-cancel:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M12 2C17.5 2 22 6.5 22 12S17.5 22 12 22 2 17.5 2 12 6.5 2 12 2M12 4C10.1 4 8.4 4.6 7.1 5.7L18.3 16.9C19.3 15.5 20 13.8 20 12C20 7.6 16.4 4 12 4M16.9 18.3L5.7 7.1C4.6 8.4 4 10.1 4 12C4 16.4 7.6 20 12 20C13.9 20 15.6 19.4 16.9 18.3Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-cash-check:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M3 6V18H13.32C13.1 17.33 13 16.66 13 16H7C7 14.9 6.11 14 5 14V10C6.11 10 7 9.11 7 8H17C17 9.11 17.9 10 19 10V10.06C19.67 10.06 20.34 10.18 21 10.4V6H3M12 9C10.3 9.03 9 10.3 9 12C9 13.7 10.3 14.94 12 15C12.38 15 12.77 14.92 13.14 14.77C13.41 13.67 13.86 12.63 14.97 11.61C14.85 10.28 13.59 8.97 12 9M21.63 12.27L17.76 16.17L16.41 14.8L15 16.22L17.75 19L23.03 13.68L21.63 12.27Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-cash-remove:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M15.46 18.12L16.88 19.54L19 17.41L21.12 19.54L22.54 18.12L20.41 16L22.54 13.88L21.12 12.46L19 14.59L16.88 12.46L15.46 13.88L17.59 16M14.97 11.62C14.86 10.28 13.58 8.97 12 9C10.3 9.04 9 10.3 9 12C9 13.7 10.3 14.94 12 15C12.39 15 12.77 14.92 13.14 14.77C13.41 13.67 13.86 12.63 14.97 11.62M13 16H7C7 14.9 6.1 14 5 14V10C6.1 10 7 9.1 7 8H17C17 9.1 17.9 10 19 10V10.05C19.67 10.06 20.34 10.18 21 10.4V6H3V18H13.32C13.1 17.33 13 16.66 13 16Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-check:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-checkbox-blank-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-check-box-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M19,5V19H5V5H19M10,17L6,13L7.41,11.58L10,14.17L16.59,7.58L18,9\\\"></path>      </svg>');\\n}\\n.mdi.mdi-checkbox-marked:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-check-circle:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-check-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19.78,2.2L24,6.42L8.44,22L0,13.55L4.22,9.33L8.44,13.55L19.78,2.2M19.78,5L8.44,16.36L4.22,12.19L2.81,13.55L8.44,19.17L21.19,6.42L19.78,5Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-chevron-down:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-chevron-down-box:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,3H5A2,2 0 0,0 3,5V19C3,20.11 3.9,21 5,21H19C20.11,21 21,20.11 21,19V5A2,2 0 0,0 19,3M12,15.71L6,9.71L7.41,8.29L12,12.88L16.59,8.29L18,9.71L12,15.71Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-chevron-down-box-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,3H5A2,2 0 0,0 3,5V19C3,20.11 3.9,21 5,21H19C20.11,21 21,20.11 21,19V5A2,2 0 0,0 19,3M19,19H5V5H19V19M7.41,8.29L12,12.88L16.59,8.29L18,9.71L12,15.71L6,9.71L7.41,8.29Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-chevron-down-circle:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2A10,10 0 0,1 22,12M6,10L12,16L18,10L16.6,8.6L12,13.2L7.4,8.6L6,10Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-chevron-down-circle-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2A10,10 0 0,1 22,12M20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,12M6,10L12,16L18,10L16.6,8.6L12,13.2L7.4,8.6L6,10Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-close:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-close-circle:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-close-circle-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2C6.47,2 2,6.47 2,12C2,17.53 6.47,22 12,22C17.53,22 22,17.53 22,12C22,6.47 17.53,2 12,2M14.59,8L12,10.59L9.41,8L8,9.41L10.59,12L8,14.59L9.41,16L12,13.41L14.59,16L16,14.59L13.41,12L16,9.41L14.59,8Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-close-thick:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M20 6.91L17.09 4L12 9.09L6.91 4L4 6.91L9.09 12L4 17.09L6.91 20L12 14.91L17.09 20L20 17.09L14.91 12L20 6.91Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-content-copy:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-currency-usd:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M7,15H9C9,16.08 10.37,17 12,17C13.63,17 15,16.08 15,15C15,13.9 13.96,13.5 11.76,12.97C9.64,12.44 7,11.78 7,9C7,7.21 8.47,5.69 10.5,5.18V3H13.5V5.18C15.53,5.69 17,7.21 17,9H15C15,7.92 13.63,7 12,7C10.37,7 9,7.92 9,9C9,10.1 10.04,10.5 12.24,11.03C14.36,11.56 17,12.22 17,15C17,16.79 15.53,18.31 13.5,18.82V21H10.5V18.82C8.47,18.31 7,16.79 7,15Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-currency-usd-off:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M3,4.27L4.28,3L21,19.72L19.73,21L16.06,17.33C15.44,18 14.54,18.55 13.5,18.82V21H10.5V18.82C8.47,18.31 7,16.79 7,15H9C9,16.08 10.37,17 12,17C13.13,17 14.14,16.56 14.65,15.92L11.68,12.95C9.58,12.42 7,11.75 7,9C7,8.77 7,8.55 7.07,8.34L3,4.27M10.5,5.18V3H13.5V5.18C15.53,5.69 17,7.21 17,9H15C15,7.92 13.63,7 12,7C11.63,7 11.28,7.05 10.95,7.13L9.4,5.58L10.5,5.18Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-database-refresh:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M12 3C16.42 3 20 4.79 20 7C20 9.21 16.42 11 12 11C7.58 11 4 9.21 4 7C4 4.79 7.58 3 12 3M4 9C4 11.21 7.58 13 12 13C13.11 13 14.18 12.89 15.14 12.68C14.19 13.54 13.5 14.67 13.18 15.96L12 16C7.58 16 4 14.21 4 12V9M20 9V11L19.5 11L18.9 11.03C19.6 10.43 20 9.74 20 9M4 14C4 16.21 7.58 18 12 18L13 17.97C13.09 19.03 13.42 20 13.95 20.88L12 21C7.58 21 4 19.21 4 17V14M19 13.5C20.11 13.5 21.11 13.95 21.83 14.67L23 13.5V17.5H19L20.77 15.73C20.32 15.28 19.69 15 19 15C17.62 15 16.5 16.12 16.5 17.5C16.5 18.88 17.62 20 19 20C19.82 20 20.54 19.61 21 19H22.71C22.12 20.47 20.68 21.5 19 21.5C16.79 21.5 15 19.71 15 17.5C15 15.29 16.79 13.5 19 13.5Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-download:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-file-document-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M6,2A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6M6,4H13V9H18V20H6V4M8,12V14H16V12H8M8,16V18H13V16H8Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-file-excel-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M14 2H6C4.89 2 4 2.9 4 4V20C4 21.11 4.89 22 6 22H18C19.11 22 20 21.11 20 20V8L14 2M18 20H6V4H13V9H18V20M12.9 14.5L15.8 19H14L12 15.6L10 19H8.2L11.1 14.5L8.2 10H10L12 13.4L14 10H15.8L12.9 14.5Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-file-music-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M14,2L20,8V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V4A2,2 0 0,1 6,2H14M18,20V9H13V4H6V20H18M13,10V12H11V17A2,2 0 0,1 9,19A2,2 0 0,1 7,17A2,2 0 0,1 9,15C9.4,15 9.7,15.1 10,15.3V10H13Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-file-pdf-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M14,2L20,8V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V4A2,2 0 0,1 6,2H14M18,20V9H13V4H6V20H18M10.92,12.31C10.68,11.54 10.15,9.08 11.55,9.04C12.95,9 12.03,12.16 12.03,12.16C12.42,13.65 14.05,14.72 14.05,14.72C14.55,14.57 17.4,14.24 17,15.72C16.57,17.2 13.5,15.81 13.5,15.81C11.55,15.95 10.09,16.47 10.09,16.47C8.96,18.58 7.64,19.5 7.1,18.61C6.43,17.5 9.23,16.07 9.23,16.07C10.68,13.72 10.9,12.35 10.92,12.31M11.57,13.15C11.17,14.45 10.37,15.84 10.37,15.84C11.22,15.5 13.08,15.11 13.08,15.11C11.94,14.11 11.59,13.16 11.57,13.15M14.71,15.32C14.71,15.32 16.46,15.97 16.5,15.71C16.57,15.44 15.17,15.2 14.71,15.32M9.05,16.81C8.28,17.11 7.54,18.39 7.72,18.39C7.9,18.4 8.63,17.79 9.05,16.81M11.57,11.26C11.57,11.21 12,9.58 11.57,9.53C11.27,9.5 11.56,11.22 11.57,11.26Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-filter-remove-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M14.73,20.83L17.58,18L14.73,15.17L16.15,13.76L19,16.57L21.8,13.76L23.22,15.17L20.41,18L23.22,20.83L21.8,22.24L19,19.4L16.15,22.24L14.73,20.83M13,19.88C13.04,20.18 12.94,20.5 12.71,20.71C12.32,21.1 11.69,21.1 11.3,20.71L7.29,16.7C7.06,16.47 6.96,16.16 7,15.87V10.75L2.21,4.62C1.87,4.19 1.95,3.56 2.38,3.22C2.57,3.08 2.78,3 3,3V3H17V3C17.22,3 17.43,3.08 17.62,3.22C18.05,3.56 18.13,4.19 17.79,4.62L13,10.75V19.88M5.04,5L9,10.06V15.58L11,17.58V10.05L14.96,5H5.04Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-flip-vertical:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M3 15V17H5V15M15 19V21H17V19M19 3H5C3.9 3 3 3.9 3 5V9H5V5H19V9H21V5C21 3.9 20.1 3 19 3M21 19H19V21C20.1 21 21 20.1 21 19M1 11V13H23V11M7 19V21H9V19M19 15V17H21V15M11 19V21H13V19M3 19C3 20.1 3.9 21 5 21V19Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-folder:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-folder-open:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,20H4C2.89,20 2,19.1 2,18V6C2,4.89 2.89,4 4,4H10L12,6H19A2,2 0 0,1 21,8H21L4,8V18L6.14,10H23.21L20.93,18.5C20.7,19.37 19.92,20 19,20Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-help-circle:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M15.07,11.25L14.17,12.17C13.45,12.89 13,13.5 13,15H11V14.5C11,13.39 11.45,12.39 12.17,11.67L13.41,10.41C13.78,10.05 14,9.55 14,9C14,7.89 13.1,7 12,7A2,2 0 0,0 10,9H8A4,4 0 0,1 12,5A4,4 0 0,1 16,9C16,9.88 15.64,10.67 15.07,11.25M13,19H11V17H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12C22,6.47 17.5,2 12,2Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-help-circle-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M11,18H13V16H11V18M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,6A4,4 0 0,0 8,10H10A2,2 0 0,1 12,8A2,2 0 0,1 14,10C14,12 11,11.75 11,15H13C13,12.75 16,12.5 16,10A4,4 0 0,0 12,6Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-history:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M13.5,8H12V13L16.28,15.54L17,14.33L13.5,12.25V8M13,3A9,9 0 0,0 4,12H1L4.96,16.03L9,12H6A7,7 0 0,1 13,5A7,7 0 0,1 20,12A7,7 0 0,1 13,19C11.07,19 9.32,18.21 8.06,16.94L6.64,18.36C8.27,20 10.5,21 13,21A9,9 0 0,0 22,12A9,9 0 0,0 13,3\\\"></path>      </svg>');\\n}\\n.mdi.mdi-information:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-information-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M11,17H13V11H11V17Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-link:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M3.9,12C3.9,10.29 5.29,8.9 7,8.9H11V7H7A5,5 0 0,0 2,12A5,5 0 0,0 7,17H11V15.1H7C5.29,15.1 3.9,13.71 3.9,12M8,13H16V11H8V13M17,7H13V8.9H17C18.71,8.9 20.1,10.29 20.1,12C20.1,13.71 18.71,15.1 17,15.1H13V17H17A5,5 0 0,0 22,12A5,5 0 0,0 17,7Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-link-variant:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M10.59,13.41C11,13.8 11,14.44 10.59,14.83C10.2,15.22 9.56,15.22 9.17,14.83C7.22,12.88 7.22,9.71 9.17,7.76V7.76L12.71,4.22C14.66,2.27 17.83,2.27 19.78,4.22C21.73,6.17 21.73,9.34 19.78,11.29L18.29,12.78C18.3,11.96 18.17,11.14 17.89,10.36L18.36,9.88C19.54,8.71 19.54,6.81 18.36,5.64C17.19,4.46 15.29,4.46 14.12,5.64L10.59,9.17C9.41,10.34 9.41,12.24 10.59,13.41M13.41,9.17C13.8,8.78 14.44,8.78 14.83,9.17C16.78,11.12 16.78,14.29 14.83,16.24V16.24L11.29,19.78C9.34,21.73 6.17,21.73 4.22,19.78C2.27,17.83 2.27,14.66 4.22,12.71L5.71,11.22C5.7,12.04 5.83,12.86 6.11,13.65L5.64,14.12C4.46,15.29 4.46,17.19 5.64,18.36C6.81,19.54 8.71,19.54 9.88,18.36L13.41,14.83C14.59,13.66 14.59,11.76 13.41,10.59C13,10.2 13,9.56 13.41,9.17Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-menu:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-microsoft-excel:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M21.17 3.25Q21.5 3.25 21.76 3.5 22 3.74 22 4.08V19.92Q22 20.26 21.76 20.5 21.5 20.75 21.17 20.75H7.83Q7.5 20.75 7.24 20.5 7 20.26 7 19.92V17H2.83Q2.5 17 2.24 16.76 2 16.5 2 16.17V7.83Q2 7.5 2.24 7.24 2.5 7 2.83 7H7V4.08Q7 3.74 7.24 3.5 7.5 3.25 7.83 3.25M7 13.06L8.18 15.28H9.97L8 12.06L9.93 8.89H8.22L7.13 10.9L7.09 10.96L7.06 11.03Q6.8 10.5 6.5 9.96 6.25 9.43 5.97 8.89H4.16L6.05 12.08L4 15.28H5.78M13.88 19.5V17H8.25V19.5M13.88 15.75V12.63H12V15.75M13.88 11.38V8.25H12V11.38M13.88 7V4.5H8.25V7M20.75 19.5V17H15.13V19.5M20.75 15.75V12.63H15.13V15.75M20.75 11.38V8.25H15.13V11.38M20.75 7V4.5H15.13V7Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-minus:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,13H5V11H19V13Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-page-first:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M18.41,16.59L13.82,12L18.41,7.41L17,6L11,12L17,18L18.41,16.59M6,6H8V18H6V6Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-page-last:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M5.59,7.41L10.18,12L5.59,16.59L7,18L13,12L7,6L5.59,7.41M16,6H18V18H16V6Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-paperclip:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M16.5,6V17.5A4,4 0 0,1 12.5,21.5A4,4 0 0,1 8.5,17.5V5A2.5,2.5 0 0,1 11,2.5A2.5,2.5 0 0,1 13.5,5V15.5A1,1 0 0,1 12.5,16.5A1,1 0 0,1 11.5,15.5V6H10V15.5A2.5,2.5 0 0,0 12.5,18A2.5,2.5 0 0,0 15,15.5V5A4,4 0 0,0 11,1A4,4 0 0,0 7,5V17.5A5.5,5.5 0 0,0 12.5,23A5.5,5.5 0 0,0 18,17.5V6H16.5Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-pin-off-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M8,6.2V4H7V2H17V4H16V12L18,14V16H17.8L14,12.2V4H10V8.2L8,6.2M20,20.7L18.7,22L12.8,16.1V22H11.2V16H6V14L8,12V11.3L2,5.3L3.3,4L20,20.7M8.8,14H10.6L9.7,13.1L8.8,14Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-pin-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M16,12V4H17V2H7V4H8V12L6,14V16H11.2V22H12.8V16H18V14L16,12M8.8,14L10,12.8V4H14V12.8L15.2,14H8.8Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-playlist-plus:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M2,16H10V14H2M18,14V10H16V14H12V16H16V20H18V16H22V14M14,6H2V8H14M14,10H2V12H14V10Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-playlist-remove:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M2,6V8H14V6H2M2,10V12H11V10H2M14.17,10.76L12.76,12.17L15.59,15L12.76,17.83L14.17,19.24L17,16.41L19.83,19.24L21.24,17.83L18.41,15L21.24,12.17L19.83,10.76L17,13.59L14.17,10.76M2,14V16H11V14H2Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-plus:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-redo:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M18.4,10.6C16.55,9 14.15,8 11.5,8C6.85,8 2.92,11.03 1.54,15.22L3.9,16C4.95,12.81 7.95,10.5 11.5,10.5C13.45,10.5 15.23,11.22 16.62,12.38L13,16H22V7L18.4,10.6Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-refresh:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M17.65,6.35C16.2,4.9 14.21,4 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20C15.73,20 18.84,17.45 19.73,14H17.65C16.83,16.33 14.61,18 12,18A6,6 0 0,1 6,12A6,6 0 0,1 12,6C13.66,6 15.14,6.69 16.22,7.78L13,11H20V4L17.65,6.35Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-shape-square-plus:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,5H22V7H19V10H17V7H14V5H17V2H19V5M17,19V13H19V21H3V5H11V7H5V19H17Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-sort-ascending:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19 17H22L18 21L14 17H17V3H19M2 17H12V19H2M6 5V7H2V5M2 11H9V13H2V11Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-sort-descending:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19 7H22L18 3L14 7H17V21H19M2 17H12V19H2M6 5V7H2V5M2 11H9V13H2V11Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-swap-horizontal:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M21,9L17,5V8H10V10H17V13M7,11L3,15L7,19V16H14V14H7V11Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-swap-vertical:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M9,3L5,7H8V14H10V7H13M16,17V10H14V17H11L15,21L19,17H16Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-sync:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M12,18A6,6 0 0,1 6,12C6,11 6.25,10.03 6.7,9.2L5.24,7.74C4.46,8.97 4,10.43 4,12A8,8 0 0,0 12,20V23L16,19L12,15M12,4V1L8,5L12,9V6A6,6 0 0,1 18,12C18,13 17.75,13.97 17.3,14.8L18.76,16.26C19.54,15.03 20,13.57 20,12A8,8 0 0,0 12,4Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-sync-circle:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M2 12A10 10 0 1 0 12 2A10 10 0 0 0 2 12M15.6 13.72A4 4 0 0 0 16 12A4 4 0 0 0 12 8V10L8.88 7L12 4V6A6 6 0 0 1 18 12A5.9 5.9 0 0 1 17.07 15.19M6 12A5.9 5.9 0 0 1 6.93 8.81L8.4 10.28A4 4 0 0 0 8 12A4 4 0 0 0 12 16V14L15 17L12 20V18A6 6 0 0 1 6 12Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-table-edit:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M21.7,13.35L20.7,14.35L18.65,12.3L19.65,11.3C19.86,11.08 20.21,11.08 20.42,11.3L21.7,12.58C21.92,12.79 21.92,13.14 21.7,13.35M12,18.94L18.07,12.88L20.12,14.93L14.06,21H12V18.94M4,2H18A2,2 0 0,1 20,4V8.17L16.17,12H12V16.17L10.17,18H4A2,2 0 0,1 2,16V4A2,2 0 0,1 4,2M4,6V10H10V6H4M12,6V10H18V6H12M4,12V16H10V12H4Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-table-refresh:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M18 14.5C19.11 14.5 20.11 14.95 20.83 15.67L22 14.5V18.5H18L19.77 16.73C19.32 16.28 18.69 16 18 16C16.62 16 15.5 17.12 15.5 18.5C15.5 19.88 16.62 21 18 21C18.82 21 19.55 20.61 20 20H21.71C21.12 21.47 19.68 22.5 18 22.5C15.79 22.5 14 20.71 14 18.5C14 16.29 15.79 14.5 18 14.5M4 3H18C19.11 3 20 3.9 20 5V12.17C19.5 12.06 19 12 18.5 12C17.23 12 16.04 12.37 15.04 13H12V17H12.18C12.06 17.5 12 18 12 18.5L12 19H4C2.9 19 2 18.11 2 17V5C2 3.9 2.9 3 4 3M4 7V11H10V7H4M12 7V11H18V7H12M4 13V17H10V13H4Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-undo:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23514F4D\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M12.5,8C9.85,8 7.45,9 5.6,10.6L2,7V16H11L7.38,12.38C8.77,11.22 10.54,10.5 12.5,10.5C16.04,10.5 19.05,12.81 20.1,16L22.47,15.22C21.08,11.03 17.15,8 12.5,8Z\\\"></path>      </svg>');\\n}\\n@-webkit-keyframes md-spin {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n@keyframes md-spin {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n.mdi.mdi-flip-h {\\n  transform: scaleX(-1);\\n}\\n.mdi.mdi-flip-v {\\n  transform: scaleY(-1);\\n}\\n.mdi.mdi-pulse {\\n  -webkit-animation: md-spin 1s infinite steps(8);\\n          animation: md-spin 1s infinite steps(8);\\n}\\n.mdi.mdi-spin {\\n  -webkit-animation: md-spin 2s infinite linear;\\n          animation: md-spin 2s infinite linear;\\n}\\n.mdi.mdi-rotate-45 {\\n  transform: rotate(45deg);\\n}\\n.mdi.mdi-rotate-90 {\\n  transform: rotate(90deg);\\n}\\n.mdi.mdi-rotate-135 {\\n  transform: rotate(135deg);\\n}\\n.mdi.mdi-rotate-180 {\\n  transform: rotate(180deg);\\n}\\n.mdi.mdi-rotate-220 {\\n  transform: rotate(220deg);\\n}\\n.mdi.mdi-rotate-270 {\\n  transform: rotate(270deg);\\n}\\n.mdi.mdi-rotate-315 {\\n  transform: rotate(315deg);\\n}\\n.mdi.mdi-rotate-45, .mdi .mdi-rotate-90, .mdi .mdi-rotate-135, .mdi .mdi-rotate-180, .mdi .mdi-rotate-220 .mdi-rotate-270, .mdi .mdi-rotate-315 {\\n  filter: none;\\n}\\n.mdi.mdi-5px:before {\\n  height: 5px;\\n  width: 5px;\\n}\\n.mdi.mdi-6px:before {\\n  height: 6px;\\n  width: 6px;\\n}\\n.mdi.mdi-7px:before {\\n  height: 7px;\\n  width: 7px;\\n}\\n.mdi.mdi-8px:before {\\n  height: 8px;\\n  width: 8px;\\n}\\n.mdi.mdi-9px:before {\\n  height: 9px;\\n  width: 9px;\\n}\\n.mdi.mdi-10px:before {\\n  height: 10px;\\n  width: 10px;\\n}\\n.mdi.mdi-11px:before {\\n  height: 11px;\\n  width: 11px;\\n}\\n.mdi.mdi-12px:before {\\n  height: 12px;\\n  width: 12px;\\n}\\n.mdi.mdi-13px:before {\\n  height: 13px;\\n  width: 13px;\\n}\\n.mdi.mdi-14px:before {\\n  height: 14px;\\n  width: 14px;\\n}\\n.mdi.mdi-15px:before {\\n  height: 15px;\\n  width: 15px;\\n}\\n.mdi.mdi-16px:before {\\n  height: 16px;\\n  width: 16px;\\n}\\n.mdi.mdi-17px:before {\\n  height: 17px;\\n  width: 17px;\\n}\\n.mdi.mdi-18px:before {\\n  height: 18px;\\n  width: 18px;\\n}\\n.mdi.mdi-19px:before {\\n  height: 19px;\\n  width: 19px;\\n}\\n.mdi.mdi-20px:before {\\n  height: 20px;\\n  width: 20px;\\n}\\n.mdi.mdi-21px:before {\\n  height: 21px;\\n  width: 21px;\\n}\\n.mdi.mdi-22px:before {\\n  height: 22px;\\n  width: 22px;\\n}\\n.mdi.mdi-23px:before {\\n  height: 23px;\\n  width: 23px;\\n}\\n.mdi.mdi-24px:before {\\n  height: 24px;\\n  width: 24px;\\n}\\n.mdi.mdi-25px:before {\\n  height: 25px;\\n  width: 25px;\\n}\\n.mdi.mdi-26px:before {\\n  height: 26px;\\n  width: 26px;\\n}\\n.mdi.mdi-27px:before {\\n  height: 27px;\\n  width: 27px;\\n}\\n.mdi.mdi-28px:before {\\n  height: 28px;\\n  width: 28px;\\n}\\n.mdi.mdi-29px:before {\\n  height: 29px;\\n  width: 29px;\\n}\\n.mdi.mdi-30px:before {\\n  height: 30px;\\n  width: 30px;\\n}\\n.mdi.mdi-31px:before {\\n  height: 31px;\\n  width: 31px;\\n}\\n.mdi.mdi-32px:before {\\n  height: 32px;\\n  width: 32px;\\n}\\n.mdi.mdi-33px:before {\\n  height: 33px;\\n  width: 33px;\\n}\\n.mdi.mdi-34px:before {\\n  height: 34px;\\n  width: 34px;\\n}\\n.mdi.mdi-35px:before {\\n  height: 35px;\\n  width: 35px;\\n}\\n.mdi.mdi-36px:before {\\n  height: 36px;\\n  width: 36px;\\n}\\n.mdi.mdi-37px:before {\\n  height: 37px;\\n  width: 37px;\\n}\\n.mdi.mdi-38px:before {\\n  height: 38px;\\n  width: 38px;\\n}\\n.mdi.mdi-39px:before {\\n  height: 39px;\\n  width: 39px;\\n}\\n.mdi.mdi-40px:before {\\n  height: 40px;\\n  width: 40px;\\n}\\n.mdi.mdi-41px:before {\\n  height: 41px;\\n  width: 41px;\\n}\\n.mdi.mdi-42px:before {\\n  height: 42px;\\n  width: 42px;\\n}\\n.mdi.mdi-43px:before {\\n  height: 43px;\\n  width: 43px;\\n}\\n.mdi.mdi-44px:before {\\n  height: 44px;\\n  width: 44px;\\n}\\n.mdi.mdi-45px:before {\\n  height: 45px;\\n  width: 45px;\\n}\\n.mdi.mdi-46px:before {\\n  height: 46px;\\n  width: 46px;\\n}\\n.mdi.mdi-47px:before {\\n  height: 47px;\\n  width: 47px;\\n}\\n.mdi.mdi-48px:before {\\n  height: 48px;\\n  width: 48px;\\n}\\n.mdi.mdi-49px:before {\\n  height: 49px;\\n  width: 49px;\\n}\\n.mdi.mdi-50px:before {\\n  height: 50px;\\n  width: 50px;\\n}\\n/* icon/text colors */\\n.color-primary {\\n  filter: saturate(0%) brightness(0%) invert(40%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0          0 0 0 0 0.4274509804          0 0 0 0 0.8          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-secondary {\\n  filter: saturate(0%) brightness(0%) invert(45.6862745098%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.4235294118          0 0 0 0 0.4588235294          0 0 0 0 0.4901960784          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-success {\\n  filter: saturate(0%) brightness(0%) invert(40.5882352941%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1568627451          0 0 0 0 0.6549019608          0 0 0 0 0.2705882353          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-danger {\\n  filter: saturate(0%) brightness(0%) invert(53.5294117647%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.862745098          0 0 0 0 0.2078431373          0 0 0 0 0.2705882353          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-warning {\\n  filter: saturate(0%) brightness(0%) invert(51.3725490196%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 1          0 0 0 0 0.7568627451          0 0 0 0 0.0274509804          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-info {\\n  filter: saturate(0%) brightness(0%) invert(40.5882352941%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.0901960784          0 0 0 0 0.6352941176          0 0 0 0 0.7215686275          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-light {\\n  filter: saturate(0%) brightness(0%) invert(97.6470588235%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.9725490196          0 0 0 0 0.9764705882          0 0 0 0 0.9803921569          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-dark {\\n  filter: saturate(0%) brightness(0%) invert(22.7450980392%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.2039215686          0 0 0 0 0.2274509804          0 0 0 0 0.2509803922          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-body {\\n  filter: saturate(0%) brightness(0%) invert(14.5098039216%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1294117647          0 0 0 0 0.1450980392          0 0 0 0 0.1607843137          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-muted {\\n  filter: saturate(0%) brightness(0%) invert(45.6862745098%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.4235294118          0 0 0 0 0.4588235294          0 0 0 0 0.4901960784          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-white {\\n  filter: saturate(0%) brightness(0%) invert(100%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 1          0 0 0 0 1          0 0 0 0 1          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-default {\\n  filter: saturate(0%) brightness(0%) invert(52.9411764706%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1176470588          0 0 0 0 0.5294117647          0 0 0 0 0.9411764706          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-warning {\\n  filter: saturate(0%) brightness(0%) invert(66.6666666667%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.9803921569          0 0 0 0 0.6274509804          0 0 0 0 0.3529411765          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-danger {\\n  filter: saturate(0%) brightness(0%) invert(62.7450980392%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.9411764706          0 0 0 0 0.3137254902          0 0 0 0 0.431372549          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-success {\\n  filter: saturate(0%) brightness(0%) invert(50.9803921569%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1960784314          0 0 0 0 0.8235294118          0 0 0 0 0.5882352941          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-primary-light {\\n  filter: saturate(0%) brightness(0%) invert(46%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0          0 0 0 0 0.4901960784          0 0 0 0 0.9215686275          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-primary-dark {\\n  filter: saturate(0%) brightness(0%) invert(34%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0          0 0 0 0 0.3647058824          0 0 0 0 0.6784313725          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-secondary-light {\\n  filter: saturate(0%) brightness(0%) invert(51.6862745098%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.4823529412          0 0 0 0 0.5176470588          0 0 0 0 0.5529411765          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-secondary-dark {\\n  filter: saturate(0%) brightness(0%) invert(39.6862745098%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.368627451          0 0 0 0 0.4          0 0 0 0 0.4274509804          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-success-light {\\n  filter: saturate(0%) brightness(0%) invert(46.5882352941%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1803921569          0 0 0 0 0.7529411765          0 0 0 0 0.3098039216          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-success-dark {\\n  filter: saturate(0%) brightness(0%) invert(34.5882352941%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1333333333          0 0 0 0 0.5568627451          0 0 0 0 0.231372549          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-danger-light {\\n  filter: saturate(0%) brightness(0%) invert(59.5294117647%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.8823529412          0 0 0 0 0.3098039216          0 0 0 0 0.3647058824          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-danger-dark {\\n  filter: saturate(0%) brightness(0%) invert(47.5294117647%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.8117647059          0 0 0 0 0.1411764706          0 0 0 0 0.2039215686          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-warning-light {\\n  filter: saturate(0%) brightness(0%) invert(57.3725490196%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 1          0 0 0 0 0.7882352941          0 0 0 0 0.1490196078          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-warning-dark {\\n  filter: saturate(0%) brightness(0%) invert(45.3725490196%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.9058823529          0 0 0 0 0.6823529412          0 0 0 0 0          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-info-light {\\n  filter: saturate(0%) brightness(0%) invert(46.5882352941%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1019607843          0 0 0 0 0.7294117647          0 0 0 0 0.8274509804          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-info-dark {\\n  filter: saturate(0%) brightness(0%) invert(34.5882352941%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.0784313725          0 0 0 0 0.5411764706          0 0 0 0 0.6156862745          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-body-light {\\n  filter: saturate(0%) brightness(0%) invert(20.5098039216%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1843137255          0 0 0 0 0.2039215686          0 0 0 0 0.2274509804          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-body-dark {\\n  filter: saturate(0%) brightness(0%) invert(8.5098039216%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.0745098039          0 0 0 0 0.0862745098          0 0 0 0 0.0941176471          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-muted-light {\\n  filter: saturate(0%) brightness(0%) invert(51.6862745098%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.4823529412          0 0 0 0 0.5176470588          0 0 0 0 0.5529411765          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-muted-dark {\\n  filter: saturate(0%) brightness(0%) invert(39.6862745098%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.368627451          0 0 0 0 0.4          0 0 0 0 0.4274509804          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-warning-light {\\n  filter: saturate(0%) brightness(0%) invert(72.6666666667%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.9843137255          0 0 0 0 0.6941176471          0 0 0 0 0.4705882353          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-warning-dark {\\n  filter: saturate(0%) brightness(0%) invert(60.6666666667%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.9764705882          0 0 0 0 0.5607843137          0 0 0 0 0.2352941176          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-default-light {\\n  filter: saturate(0%) brightness(0%) invert(58.9411764706%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.231372549          0 0 0 0 0.5882352941          0 0 0 0 0.9490196078          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-default-dark {\\n  filter: saturate(0%) brightness(0%) invert(46.9411764706%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.0588235294          0 0 0 0 0.4705882353          0 0 0 0 0.8784313725          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-danger-light {\\n  filter: saturate(0%) brightness(0%) invert(68.7450980392%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.9490196078          0 0 0 0 0.4235294118          0 0 0 0 0.5215686275          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-danger-dark {\\n  filter: saturate(0%) brightness(0%) invert(56.7450980392%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.9333333333          0 0 0 0 0.2039215686          0 0 0 0 0.3411764706          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-success-light {\\n  filter: saturate(0%) brightness(0%) invert(56.9803921569%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.2941176471          0 0 0 0 0.8470588235          0 0 0 0 0.6392156863          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-success-dark {\\n  filter: saturate(0%) brightness(0%) invert(44.9803921569%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1607843137          0 0 0 0 0.737254902          0 0 0 0 0.5215686275          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.pointer {\\n  cursor: pointer;\\n}\\n.bold {\\n  font-weight: bold;\\n}\\n.unsaved-editable-field {\\n  background-color: #fbfdd1 !important;\\n}\\n.fake-hyperlink {\\n  cursor: pointer;\\n  color: #08c;\\n}\\n.fake-hyperlink:hover {\\n  text-decoration: underline;\\n}\\n.button-style {\\n  cursor: pointer;\\n  background-color: white;\\n  border: 1px solid #dbdbdb;\\n  border-radius: 2px;\\n  justify-content: center;\\n  text-align: center;\\n}\\n.button-style:hover {\\n  border-color: #b5b5b5;\\n}\\n.delete-icon:hover {\\n  color: #b14c4a;\\n}\\n.edit-icon:hover,\\n.info-icon:hover {\\n  color: #0099ff;\\n}\\n.padding-0px {\\n  padding: 0px;\\n}\\n.padding-1px {\\n  padding: 1px;\\n}\\n.padding-2px {\\n  padding: 2px;\\n}\\n.padding-3px {\\n  padding: 3px;\\n}\\n.padding-4px {\\n  padding: 4px;\\n}\\n.padding-5px {\\n  padding: 5px;\\n}\\n.padding-6px {\\n  padding: 6px;\\n}\\n.padding-7px {\\n  padding: 7px;\\n}\\n.padding-8px {\\n  padding: 8px;\\n}\\n.padding-9px {\\n  padding: 9px;\\n}\\n.padding-10px {\\n  padding: 10px;\\n}\\n.padding-11px {\\n  padding: 11px;\\n}\\n.padding-12px {\\n  padding: 12px;\\n}\\n.padding-13px {\\n  padding: 13px;\\n}\\n.padding-14px {\\n  padding: 14px;\\n}\\n.padding-15px {\\n  padding: 15px;\\n}\\n.padding-16px {\\n  padding: 16px;\\n}\\n.padding-17px {\\n  padding: 17px;\\n}\\n.padding-18px {\\n  padding: 18px;\\n}\\n.padding-19px {\\n  padding: 19px;\\n}\\n.padding-20px {\\n  padding: 20px;\\n}\\n.padding-21px {\\n  padding: 21px;\\n}\\n.padding-22px {\\n  padding: 22px;\\n}\\n.padding-23px {\\n  padding: 23px;\\n}\\n.padding-24px {\\n  padding: 24px;\\n}\\n.padding-25px {\\n  padding: 25px;\\n}\\n.padding-26px {\\n  padding: 26px;\\n}\\n.padding-27px {\\n  padding: 27px;\\n}\\n.padding-28px {\\n  padding: 28px;\\n}\\n.padding-29px {\\n  padding: 29px;\\n}\\n.padding-30px {\\n  padding: 30px;\\n}\\n.font-5px {\\n  font-size: 5px;\\n}\\n.font-6px {\\n  font-size: 6px;\\n}\\n.font-7px {\\n  font-size: 7px;\\n}\\n.font-8px {\\n  font-size: 8px;\\n}\\n.font-9px {\\n  font-size: 9px;\\n}\\n.font-10px {\\n  font-size: 10px;\\n}\\n.font-11px {\\n  font-size: 11px;\\n}\\n.font-12px {\\n  font-size: 12px;\\n}\\n.font-13px {\\n  font-size: 13px;\\n}\\n.font-14px {\\n  font-size: 14px;\\n}\\n.font-15px {\\n  font-size: 15px;\\n}\\n.font-16px {\\n  font-size: 16px;\\n}\\n.font-17px {\\n  font-size: 17px;\\n}\\n.font-18px {\\n  font-size: 18px;\\n}\\n.font-19px {\\n  font-size: 19px;\\n}\\n.font-20px {\\n  font-size: 20px;\\n}\\n.font-21px {\\n  font-size: 21px;\\n}\\n.font-22px {\\n  font-size: 22px;\\n}\\n.font-23px {\\n  font-size: 23px;\\n}\\n.font-24px {\\n  font-size: 24px;\\n}\\n.font-25px {\\n  font-size: 25px;\\n}\\n.font-26px {\\n  font-size: 26px;\\n}\\n.font-27px {\\n  font-size: 27px;\\n}\\n.font-28px {\\n  font-size: 28px;\\n}\\n.font-29px {\\n  font-size: 29px;\\n}\\n.font-30px {\\n  font-size: 30px;\\n}\\n.font-31px {\\n  font-size: 31px;\\n}\\n.font-32px {\\n  font-size: 32px;\\n}\\n.font-33px {\\n  font-size: 33px;\\n}\\n.font-34px {\\n  font-size: 34px;\\n}\\n.font-35px {\\n  font-size: 35px;\\n}\\n.font-36px {\\n  font-size: 36px;\\n}\\n.font-37px {\\n  font-size: 37px;\\n}\\n.font-38px {\\n  font-size: 38px;\\n}\\n.font-39px {\\n  font-size: 39px;\\n}\\n.font-40px {\\n  font-size: 40px;\\n}\\n.font-41px {\\n  font-size: 41px;\\n}\\n.font-42px {\\n  font-size: 42px;\\n}\\n.font-43px {\\n  font-size: 43px;\\n}\\n.font-44px {\\n  font-size: 44px;\\n}\\n.font-45px {\\n  font-size: 45px;\\n}\\n.font-46px {\\n  font-size: 46px;\\n}\\n.font-47px {\\n  font-size: 47px;\\n}\\n.font-48px {\\n  font-size: 48px;\\n}\\n.font-49px {\\n  font-size: 49px;\\n}\\n.font-50px {\\n  font-size: 50px;\\n}\\n.margin-auto {\\n  margin: auto;\\n}\\n/* Text and Alignment Utilities */\\n.text-center {\\n  text-align: center;\\n}\\n.text-left {\\n  text-align: left;\\n}\\n.text-right {\\n  text-align: right;\\n}\\n.text-uppercase {\\n  text-transform: uppercase;\\n}\\n.text-underline {\\n  text-decoration: underline;\\n}\\n.vertical-align-bottom {\\n  display: inline-block;\\n  vertical-align: bottom;\\n}\\n.vertical-align-middle {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.vertical-align-top {\\n  display: inline-block;\\n  vertical-align: top;\\n}\\n/*\\n  www.OnlineWebFonts.Com\\n  You must credit the author Copy this link on your web\\n  <div>Font made from <a href=\\\"http://www.onlinewebfonts.com\\\">oNline Web Fonts</a>is licensed by CC BY 3.0</div>\\n*/\\n@font-face {\\n  font-family: \\\"SalesforceSans-Regular\\\";\\n  src: url(\\\"https://db.onlinewebfonts.com/t/0fadaa21fcac88ceee0bb8da992c221b.eot\\\");\\n  /* IE9*/\\n  src: url(\\\"https://db.onlinewebfonts.com/t/0fadaa21fcac88ceee0bb8da992c221b.eot?#iefix\\\") format(\\\"embedded-opentype\\\"), url(\\\"https://db.onlinewebfonts.com/t/0fadaa21fcac88ceee0bb8da992c221b.woff2\\\") format(\\\"woff2\\\"), url(\\\"https://db.onlinewebfonts.com/t/0fadaa21fcac88ceee0bb8da992c221b.woff\\\") format(\\\"woff\\\"), url(\\\"https://db.onlinewebfonts.com/t/0fadaa21fcac88ceee0bb8da992c221b.ttf\\\") format(\\\"truetype\\\"), url(\\\"https://db.onlinewebfonts.com/t/0fadaa21fcac88ceee0bb8da992c221b.svg#SalesforceSans-Regular\\\") format(\\\"svg\\\");\\n  /* iOS 4.1- */\\n}\\n.icon {\\n  align-items: center;\\n  display: inline-flex;\\n  justify-content: center;\\n  height: 1rem;\\n  width: 1rem;\\n}\\n/** You can use the following code OR use the .color-x CSS classes */\";","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  FieldType,\r\n  Filters,\r\n  Formatters,\r\n  GridOption,\r\n} from './../modules/angular-slickgrid';\r\n\r\nconst NB_ITEMS = 500;\r\n\r\n@Component({\r\n  templateUrl: './grid-tree-data-parent-child.component.html',\r\n  styleUrls: ['grid-tree-data-parent-child.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class GridTreeDataParentChildComponent implements OnInit {\r\n  title = 'Example 28: Tree Data <small>(from a flat dataset with <code>parentId</code> references)</small>';\r\n  subTitle = `<ul>\r\n    <li>It is assumed that your dataset will have Parent/Child references AND also Tree Level (indent) property.</li>\r\n    <ul>\r\n      <li>If you do not have the Tree Level (indent), you could call \"convertParentChildArrayToHierarchicalView()\" then call \"convertHierarchicalViewToParentChildArray()\"</li>\r\n      <li>You could also pass the result of \"convertParentChildArrayToHierarchicalView()\" to \"dataset-hierarchical.bind\" as defined in the next Hierarchical Example</li>\r\n    </ul>\r\n    <li><b>Styling - Material Theme</b></li>\r\n    <ul>\r\n      <li>The Material Theme was created with SASS and compiled in CSS (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/modules/angular-slickgrid/styles/slickgrid-theme-material.scss\" target=\"_blank\">slickgrid-theme-material.scss</a>), you can override any of its SASS variables</li>\r\n      <li>We use a small subset of <a href=\"https://materialdesignicons.com/\" target=\"_blank\">Material Design Icons</a></li>\r\n      <li>you might need to refresh the page to clear the browser cache and see the correct theme</li>\r\n    </ul>\r\n  </ul>`;\r\n\r\n  angularGrid!: AngularGridInstance;\r\n  dataViewObj: any;\r\n  gridObj: any;\r\n  gridOptions!: GridOption;\r\n  columnDefinitions!: Column[];\r\n  dataset!: any[];\r\n  datasetHierarchical: any[] = [];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    // define the grid options & columns and then create the grid itself\r\n    this.defineGrid();\r\n\r\n    // mock a dataset\r\n    this.dataset = this.loadData(NB_ITEMS);\r\n  }\r\n\r\n  defineGrid() {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'title', name: 'Title', field: 'title', width: 220, cssClass: 'cell-title',\r\n        filterable: true, sortable: true, exportWithFormatter: false,\r\n        queryFieldSorter: 'id', type: FieldType.string,\r\n        formatter: Formatters.tree, exportCustomFormatter: Formatters.treeExport\r\n\r\n      },\r\n      { id: 'duration', name: 'Duration', field: 'duration', minWidth: 90, filterable: true },\r\n      {\r\n        id: 'percentComplete', name: '% Complete', field: 'percentComplete',\r\n        minWidth: 120, maxWidth: 200, exportWithFormatter: false,\r\n        sortable: true, filterable: true, filter: { model: Filters.compoundSlider, operator: '>=' },\r\n        formatter: Formatters.percentCompleteBar, type: FieldType.number,\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start', minWidth: 60,\r\n        type: FieldType.dateIso, filterable: true, sortable: true,\r\n        filter: { model: Filters.compoundDate },\r\n        formatter: Formatters.dateIso,\r\n      },\r\n      {\r\n        id: 'finish', name: 'Finish', field: 'finish', minWidth: 60,\r\n        type: FieldType.dateIso, filterable: true, sortable: true,\r\n        filter: { model: Filters.compoundDate },\r\n        formatter: Formatters.dateIso,\r\n      },\r\n      {\r\n        id: 'effortDriven', name: 'Effort Driven', width: 80, minWidth: 20, maxWidth: 80, cssClass: 'cell-effort-driven', field: 'effortDriven',\r\n        exportWithFormatter: false,\r\n        formatter: Formatters.checkmark, cannotTriggerInsert: true,\r\n        filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\r\n          model: Filters.singleSelect\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 10\r\n      },\r\n      enableAutoSizeColumns: true,\r\n      enableAutoResize: true,\r\n      enableExcelExport: true,\r\n      exportOptions: { exportWithFormatter: true },\r\n      excelExportOptions: { exportWithFormatter: true },\r\n      enableFiltering: true,\r\n      showCustomFooter: true, // display some metrics in the bottom custom footer\r\n      enableTreeData: true, // you must enable this flag for the filtering & sorting to work as expected\r\n      treeDataOptions: {\r\n        columnId: 'title',\r\n        parentPropName: 'parentId',\r\n        // this is optional, you can define the tree level property name that will be used for the sorting/indentation, internally it will use \"__treeLevel\"\r\n        levelPropName: 'treeLevel',\r\n        indentMarginLeft: 15,\r\n\r\n        // you can optionally sort by a different column and/or sort direction\r\n        // this is the recommend approach, unless you are 100% that your original array is already sorted (in most cases it's not)\r\n        initialSort: {\r\n          columnId: 'title',\r\n          direction: 'ASC'\r\n        },\r\n        // we can also add a custom Formatter just for the title text portion\r\n        titleFormatter: (_row, _cell, value, _def, dataContext) => {\r\n          let prefix = '';\r\n          if (dataContext.treeLevel > 0) {\r\n            prefix = `<span class=\"mdi mdi-subdirectory-arrow-right mdi-v-align-sub color-se-secondary\"></span>`;\r\n          }\r\n          return `${prefix}<span class=\"bold\">${value}</span> <span style=\"font-size:11px; margin-left: 15px;\">(parentId: ${dataContext.parentId})</span>`;\r\n        },\r\n      },\r\n      multiColumnSort: false, // multi-column sorting is not supported with Tree Data, so you need to disable it\r\n      presets: {\r\n        filters: [{ columnId: 'percentComplete', searchTerms: [25], operator: '>=' }]\r\n      },\r\n      // change header/cell row height for material design theme\r\n      headerRowHeight: 45,\r\n      rowHeight: 40,\r\n      // if you're dealing with lots of data, it is recommended to use the filter debounce\r\n      filterTypingDebounce: 250,\r\n\r\n      // use Material Design SVG icons\r\n      contextMenu: {\r\n        iconCollapseAllGroupsCommand: 'mdi mdi-arrow-collapse',\r\n        iconExpandAllGroupsCommand: 'mdi mdi-arrow-expand',\r\n        iconClearGroupingCommand: 'mdi mdi-close',\r\n        iconCopyCellValueCommand: 'mdi mdi-content-copy',\r\n        iconExportCsvCommand: 'mdi mdi-download',\r\n        iconExportExcelCommand: 'mdi mdi-file-excel-outline',\r\n        iconExportTextDelimitedCommand: 'mdi mdi-download',\r\n      },\r\n      gridMenu: {\r\n        iconCssClass: 'mdi mdi-menu',\r\n        iconClearAllFiltersCommand: 'mdi mdi-filter-remove-outline',\r\n        iconClearAllSortingCommand: 'mdi mdi-swap-vertical',\r\n        iconExportCsvCommand: 'mdi mdi-download',\r\n        iconExportExcelCommand: 'mdi mdi-file-excel-outline',\r\n        iconExportTextDelimitedCommand: 'mdi mdi-download',\r\n        iconRefreshDatasetCommand: 'mdi mdi-sync',\r\n        iconToggleFilterCommand: 'mdi mdi-flip-vertical',\r\n        iconTogglePreHeaderCommand: 'mdi mdi-flip-vertical',\r\n      },\r\n      headerMenu: {\r\n        iconClearFilterCommand: 'mdi mdi mdi-filter-remove-outline',\r\n        iconClearSortCommand: 'mdi mdi-swap-vertical',\r\n        iconSortAscCommand: 'mdi mdi-sort-ascending',\r\n        iconSortDescCommand: 'mdi mdi-flip-v mdi-sort-descending',\r\n        iconColumnHideCommand: 'mdi mdi-close',\r\n      }\r\n    };\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n    this.gridObj = angularGrid.slickGrid;\r\n    this.dataViewObj = angularGrid.dataView;\r\n  }\r\n\r\n  /**\r\n   * A simple method to add a new item inside the first group that we find (it's random and is only for demo purposes).\r\n   * After adding the item, it will sort by parent/child recursively\r\n   */\r\n  addNewRow() {\r\n    const newId = this.dataViewObj.getItemCount();\r\n    const parentPropName = 'parentId';\r\n    const treeLevelPropName = 'treeLevel'; // if undefined in your options, the default prop name is \"__treeLevel\"\r\n    const newTreeLevel = 1;\r\n\r\n    // find first parent object and add the new item as a child\r\n    const childItemFound = this.dataViewObj.getItems().find((item: any) => item[treeLevelPropName] === newTreeLevel);\r\n    const parentItemFound = this.dataViewObj.getItemByIdx(childItemFound[parentPropName]);\r\n\r\n    if (childItemFound && parentItemFound) {\r\n      const newItem = {\r\n        id: newId,\r\n        parentId: parentItemFound.id,\r\n        title: `Task ${newId}`,\r\n        duration: '1 day',\r\n        percentComplete: 99,\r\n        start: new Date(),\r\n        finish: new Date(),\r\n        effortDriven: false\r\n      };\r\n\r\n      // use the Grid Service to insert the item,\r\n      // it will also internally take care of updating & resorting the hierarchical dataset\r\n      this.angularGrid.gridService.addItem(newItem);\r\n    }\r\n  }\r\n\r\n  collapseAll() {\r\n    this.angularGrid.treeDataService.toggleTreeDataCollapse(true);\r\n  }\r\n\r\n  expandAll() {\r\n    this.angularGrid.treeDataService.toggleTreeDataCollapse(false);\r\n  }\r\n\r\n  dynamicallyChangeFilter() {\r\n    // const randomPercentage = Math.floor((Math.random() * 99));\r\n    this.angularGrid.filterService.updateFilters([{ columnId: 'percentComplete', operator: '<', searchTerms: [40] }]);\r\n  }\r\n\r\n  logHierarchicalStructure() {\r\n    console.log('exploded array', this.angularGrid.treeDataService.datasetHierarchical);\r\n  }\r\n\r\n  logFlatStructure() {\r\n    console.log('flat array', this.angularGrid.treeDataService.dataset);\r\n  }\r\n\r\n  loadData(rowCount: number) {\r\n    let indent = 0;\r\n    const parents = [];\r\n    const data = [];\r\n\r\n    // prepare the data\r\n    for (let i = 0; i < rowCount; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const item: any = (data[i] = {});\r\n      let parentId;\r\n\r\n      // for implementing filtering/sorting, don't go over indent of 2\r\n      if (Math.random() > 0.8 && i > 0 && indent < 3) {\r\n        indent++;\r\n        parents.push(i - 1);\r\n      } else if (Math.random() < 0.3 && indent > 0) {\r\n        indent--;\r\n        parents.pop();\r\n      }\r\n\r\n      if (parents.length > 0) {\r\n        parentId = parents[parents.length - 1];\r\n      } else {\r\n        parentId = null;\r\n      }\r\n\r\n      item['id'] = i;\r\n      item['parentId'] = parentId;\r\n      item['title'] = `Task ${i}`;\r\n      item['duration'] = '5 days';\r\n      item['percentComplete'] = Math.round(Math.random() * 100);\r\n      item['start'] = new Date(randomYear, randomMonth, randomDay);\r\n      item['finish'] = new Date(randomYear, (randomMonth + 1), randomDay);\r\n      item['effortDriven'] = (i % 5 === 0);\r\n    }\r\n    this.dataset = data;\r\n\r\n    return data;\r\n  }\r\n}\r\n","export default \"<div class=\\\"container-fluid\\\">\\r\\n  <h2>\\r\\n    <span [innerHTML]=\\\"title\\\"></span>\\r\\n    <span class=\\\"float-right\\\">\\r\\n      <a style=\\\"font-size: 18px\\\"\\r\\n         target=\\\"_blank\\\"\\r\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-tree-data-parent-child.component.ts\\\">\\r\\n        <span class=\\\"mdi mdi-link mdi-v-align-sub\\\"></span> code\\r\\n      </a>\\r\\n    </span>\\r\\n  </h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <div class=\\\"row\\\" style=\\\"margin-bottom: 4px;\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"add-500-rows-btn\\\" (click)=\\\"loadData(500)\\\">\\r\\n        500 rows\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"add-50k-rows-btn\\\" (click)=\\\"loadData(25000)\\\">\\r\\n        25k rows\\r\\n      </button>\\r\\n      <button (click)=\\\"dynamicallyChangeFilter()\\\" class=\\\"btn btn-outline-secondary btn-sm\\\"\\r\\n              data-test=\\\"change-filter-dynamically\\\">\\r\\n        <span class=\\\"mdi mdi-filter-outline\\\"></span>\\r\\n        <span>Dynamically Change Filter (% complete &lt; 40)</span>\\r\\n      </button>\\r\\n      <div class.bind=\\\"loadingClass\\\"></div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n      <button (click)=\\\"addNewRow()\\\" data-test=\\\"add-item-btn\\\" class=\\\"btn btn-outline-info btn-sm\\\">\\r\\n        <span class=\\\"icon mdi mdi-plus\\\"></span>\\r\\n        <span>Add New Item (in 1st group)</span>\\r\\n      </button>\\r\\n      <button (click)=\\\"collapseAll()\\\" data-test=\\\"collapse-all-btn\\\" class=\\\"btn btn-outline-secondary btn-sm\\\">\\r\\n        <span class=\\\"icon mdi mdi-arrow-collapse\\\"></span>\\r\\n        <span>Collapse All</span>\\r\\n      </button>\\r\\n      <button (click)=\\\"expandAll()\\\" data-test=\\\"expand-all-btn\\\" class=\\\"btn btn-outline-secondary btn-sm\\\">\\r\\n        <span class=\\\"icon mdi mdi-arrow-expand\\\"></span>\\r\\n        <span>Expand All</span>\\r\\n      </button>\\r\\n      <button (click)=\\\"logFlatStructure()\\\" class=\\\"btn btn-outline-secondary btn-sm\\\">\\r\\n        <span>Log Flat Structure</span>\\r\\n      </button>\\r\\n      <button (click)=\\\"logHierarchicalStructure()\\\" class=\\\"btn btn-outline-secondary btn-sm\\\">\\r\\n        <span>Log Hierarchical Structure</span>\\r\\n      </button>\\r\\n      <button (click)=\\\"dynamicallyChangeFilter()\\\" class=\\\"btn btn-outline-secondary btn-sm\\\">\\r\\n        <span>Dynamically Change Filter (% complete &lt; 40)</span>\\r\\n      </button>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <br />\\r\\n\\r\\n  <angular-slickgrid gridId=\\\"grid28\\\"\\r\\n                     [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n                     [gridOptions]=\\\"gridOptions\\\"\\r\\n                     [dataset]=\\\"dataset\\\"\\r\\n                     (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\r\\n  </angular-slickgrid>\\r\\n</div>\\r\\n\";","export default \"@charset \\\"UTF-8\\\";\\n/* make sure to add the @import the SlickGrid Theme AFTER the variables changes */\\n/*!\\n * SlickGrid custom styling for Material (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n * @author: Ghislain B. (ghiscoding)\\n */\\n/*!\\n\\n/** SlickGrid Material Theme */\\n/**\\n * This is a bare version of \\\"slickgrid-theme-material.scss\\\",\\n * Few files were removed and aren't included in this styling theme (while they are in original theme)\\n * - (colors, extra-styling, material-svg-icons, material-svg-utilities, slick-without-bootstrap-min-styling)\\n */\\n/* cyrillic-ext */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: italic;\\n  font-weight: 400;\\n  font-display: swap;\\n  src: local(\\\"Roboto Italic\\\"), local(\\\"Roboto-Italic\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOkCnqEu92Fr1Mu51xFIzIFKw.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\\n}\\n/* cyrillic */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: italic;\\n  font-weight: 400;\\n  font-display: swap;\\n  src: local(\\\"Roboto Italic\\\"), local(\\\"Roboto-Italic\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOkCnqEu92Fr1Mu51xMIzIFKw.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\\n}\\n/* greek-ext */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: italic;\\n  font-weight: 400;\\n  font-display: swap;\\n  src: local(\\\"Roboto Italic\\\"), local(\\\"Roboto-Italic\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOkCnqEu92Fr1Mu51xEIzIFKw.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+1F00-1FFF;\\n}\\n/* greek */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: italic;\\n  font-weight: 400;\\n  font-display: swap;\\n  src: local(\\\"Roboto Italic\\\"), local(\\\"Roboto-Italic\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOkCnqEu92Fr1Mu51xLIzIFKw.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0370-03FF;\\n}\\n/* vietnamese */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: italic;\\n  font-weight: 400;\\n  font-display: swap;\\n  src: local(\\\"Roboto Italic\\\"), local(\\\"Roboto-Italic\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOkCnqEu92Fr1Mu51xHIzIFKw.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\\n}\\n/* latin-ext */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: italic;\\n  font-weight: 400;\\n  font-display: swap;\\n  src: local(\\\"Roboto Italic\\\"), local(\\\"Roboto-Italic\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOkCnqEu92Fr1Mu51xGIzIFKw.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: italic;\\n  font-weight: 400;\\n  font-display: swap;\\n  src: local(\\\"Roboto Italic\\\"), local(\\\"Roboto-Italic\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOkCnqEu92Fr1Mu51xIIzI.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n/* cyrillic-ext */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: italic;\\n  font-weight: 700;\\n  font-display: swap;\\n  src: local(\\\"Roboto Bold Italic\\\"), local(\\\"Roboto-BoldItalic\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOjCnqEu92Fr1Mu51TzBic3CsTKlA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\\n}\\n/* cyrillic */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: italic;\\n  font-weight: 700;\\n  font-display: swap;\\n  src: local(\\\"Roboto Bold Italic\\\"), local(\\\"Roboto-BoldItalic\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOjCnqEu92Fr1Mu51TzBic-CsTKlA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\\n}\\n/* greek-ext */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: italic;\\n  font-weight: 700;\\n  font-display: swap;\\n  src: local(\\\"Roboto Bold Italic\\\"), local(\\\"Roboto-BoldItalic\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOjCnqEu92Fr1Mu51TzBic2CsTKlA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+1F00-1FFF;\\n}\\n/* greek */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: italic;\\n  font-weight: 700;\\n  font-display: swap;\\n  src: local(\\\"Roboto Bold Italic\\\"), local(\\\"Roboto-BoldItalic\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOjCnqEu92Fr1Mu51TzBic5CsTKlA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0370-03FF;\\n}\\n/* vietnamese */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: italic;\\n  font-weight: 700;\\n  font-display: swap;\\n  src: local(\\\"Roboto Bold Italic\\\"), local(\\\"Roboto-BoldItalic\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOjCnqEu92Fr1Mu51TzBic1CsTKlA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\\n}\\n/* latin-ext */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: italic;\\n  font-weight: 700;\\n  font-display: swap;\\n  src: local(\\\"Roboto Bold Italic\\\"), local(\\\"Roboto-BoldItalic\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOjCnqEu92Fr1Mu51TzBic0CsTKlA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: italic;\\n  font-weight: 700;\\n  font-display: swap;\\n  src: local(\\\"Roboto Bold Italic\\\"), local(\\\"Roboto-BoldItalic\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOjCnqEu92Fr1Mu51TzBic6CsQ.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n/* cyrillic-ext */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 400;\\n  font-display: swap;\\n  src: local(\\\"Roboto\\\"), local(\\\"Roboto-Regular\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu72xKOzY.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\\n}\\n/* cyrillic */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 400;\\n  font-display: swap;\\n  src: local(\\\"Roboto\\\"), local(\\\"Roboto-Regular\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu5mxKOzY.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\\n}\\n/* greek-ext */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 400;\\n  font-display: swap;\\n  src: local(\\\"Roboto\\\"), local(\\\"Roboto-Regular\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7mxKOzY.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+1F00-1FFF;\\n}\\n/* greek */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 400;\\n  font-display: swap;\\n  src: local(\\\"Roboto\\\"), local(\\\"Roboto-Regular\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu4WxKOzY.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0370-03FF;\\n}\\n/* vietnamese */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 400;\\n  font-display: swap;\\n  src: local(\\\"Roboto\\\"), local(\\\"Roboto-Regular\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7WxKOzY.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\\n}\\n/* latin-ext */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 400;\\n  font-display: swap;\\n  src: local(\\\"Roboto\\\"), local(\\\"Roboto-Regular\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7GxKOzY.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 400;\\n  font-display: swap;\\n  src: local(\\\"Roboto\\\"), local(\\\"Roboto-Regular\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu4mxK.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n/* cyrillic-ext */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 500;\\n  font-display: swap;\\n  src: local(\\\"Roboto Medium\\\"), local(\\\"Roboto-Medium\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmEU9fCRc4EsA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\\n}\\n/* cyrillic */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 500;\\n  font-display: swap;\\n  src: local(\\\"Roboto Medium\\\"), local(\\\"Roboto-Medium\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmEU9fABc4EsA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\\n}\\n/* greek-ext */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 500;\\n  font-display: swap;\\n  src: local(\\\"Roboto Medium\\\"), local(\\\"Roboto-Medium\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmEU9fCBc4EsA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+1F00-1FFF;\\n}\\n/* greek */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 500;\\n  font-display: swap;\\n  src: local(\\\"Roboto Medium\\\"), local(\\\"Roboto-Medium\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmEU9fBxc4EsA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0370-03FF;\\n}\\n/* vietnamese */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 500;\\n  font-display: swap;\\n  src: local(\\\"Roboto Medium\\\"), local(\\\"Roboto-Medium\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmEU9fCxc4EsA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\\n}\\n/* latin-ext */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 500;\\n  font-display: swap;\\n  src: local(\\\"Roboto Medium\\\"), local(\\\"Roboto-Medium\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmEU9fChc4EsA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 500;\\n  font-display: swap;\\n  src: local(\\\"Roboto Medium\\\"), local(\\\"Roboto-Medium\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmEU9fBBc4.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n/* cyrillic-ext */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 700;\\n  font-display: swap;\\n  src: local(\\\"Roboto Bold\\\"), local(\\\"Roboto-Bold\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmWUlfCRc4EsA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\\n}\\n/* cyrillic */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 700;\\n  font-display: swap;\\n  src: local(\\\"Roboto Bold\\\"), local(\\\"Roboto-Bold\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmWUlfABc4EsA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\\n}\\n/* greek-ext */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 700;\\n  font-display: swap;\\n  src: local(\\\"Roboto Bold\\\"), local(\\\"Roboto-Bold\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmWUlfCBc4EsA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+1F00-1FFF;\\n}\\n/* greek */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 700;\\n  font-display: swap;\\n  src: local(\\\"Roboto Bold\\\"), local(\\\"Roboto-Bold\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmWUlfBxc4EsA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0370-03FF;\\n}\\n/* vietnamese */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 700;\\n  font-display: swap;\\n  src: local(\\\"Roboto Bold\\\"), local(\\\"Roboto-Bold\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmWUlfCxc4EsA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\\n}\\n/* latin-ext */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 700;\\n  font-display: swap;\\n  src: local(\\\"Roboto Bold\\\"), local(\\\"Roboto-Bold\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmWUlfChc4EsA.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: \\\"Roboto\\\";\\n  font-style: normal;\\n  font-weight: 700;\\n  font-display: swap;\\n  src: local(\\\"Roboto Bold\\\"), local(\\\"Roboto-Bold\\\"), url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmWUlfBBc4.woff2) format(\\\"woff2\\\");\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.pointer {\\n  cursor: pointer;\\n}\\n.slickgrid-container .slick-header-columns,\\n.slickgrid-container .slick-header-column {\\n  background: rgba(255, 255, 255, 0.6);\\n  box-sizing: content-box !important;\\n  /* this here only for Firefox! */\\n}\\n.slickgrid-container .slick-header-columns {\\n  /*border-bottom: 1px solid $grid-border-color;*/\\n  background: linear-gradient(rgba(0, 0, 0, 0) 60%, rgba(0, 0, 0, 0.1));\\n}\\n.slickgrid-container .slick-header-column {\\n  border-right: 1px solid fade(black, 3%);\\n  border-bottom: 1px solid fade(black, 3%);\\n}\\n.slickgrid-container .slick-header-column:hover {\\n  background: rgba(250, 250, 250, 0.6);\\n}\\n.slickgrid-container .slick-header-column-active {\\n  background: rgba(242, 242, 242, 0.6) !important;\\n}\\n.slickgrid-container .slick-headerrow {\\n  background: rgba(255, 255, 255, 0.6);\\n}\\n.slickgrid-container .slick-headerrow-column {\\n  background: #fafafa;\\n  border-bottom: 0;\\n}\\n.slickgrid-container .grid-canvas {\\n  background: white;\\n}\\n.slickgrid-container .slick-row {\\n  background: inherit;\\n  border: 0;\\n  line-height: 20px;\\n}\\n.slickgrid-container .slick-row .slick-cell {\\n  background: inherit;\\n  border: 1px transparent;\\n  padding-top: 3px;\\n  padding-bottom: 4px;\\n  padding-left: 4px;\\n  padding-right: 4px;\\n  box-sizing: border-box;\\n}\\n.slickgrid-container .slick-row .slick-cell.invalid {\\n  border-color: red;\\n  -moz-animation-duration: 0.2s;\\n  -webkit-animation-duration: 0.2s;\\n  -moz-animation-name: slickgrid-invalid-hilite;\\n  -webkit-animation-name: slickgrid-invalid-hilite;\\n  animation-duration: 0.2s;\\n  animation-name: slickgrid-invalid-hilite;\\n}\\n.slickgrid-container .slick-row .slick-cell.selected {\\n  background-color: #e7e7c3;\\n}\\n.slickgrid-container .slick-row .slick-cell.selected .cell-selection {\\n  background-color: transparent;\\n  /* show default selected row background */\\n}\\n.slickgrid-container .slick-row .slick-cell.active {\\n  box-shadow: inset 0 0 0 1px #aaaaaa;\\n  border: none;\\n  z-index: 6;\\n  padding: 8px 7px;\\n}\\n.slickgrid-container .slick-row .slick-cell.active input.editor-text {\\n  width: calc(100% + 2px);\\n  height: 100%;\\n  outline: 0;\\n  transform: translate(0, -2px);\\n}\\n.slickgrid-container .slick-row .slick-cell.active input.dual-editor-text {\\n  width: calc(50% + 1px - 5px);\\n  height: 100%;\\n  outline: 0;\\n  transform: translate(0, -2px);\\n}\\n.slickgrid-container .slick-row.odd .slick-cell {\\n  background: #f5f5f5;\\n}\\n.slickgrid-container .slick-row.odd .slick-cell.selected {\\n  background-color: #d6d6b2;\\n}\\n.slickgrid-container .slick-row.active-row .slick-cell {\\n  background-color: #e2fffd;\\n}\\n.slickgrid-container .slick-row.active-row .slick-cell.selected {\\n  background-color: red;\\n}\\n.slickgrid-container .slick-row.active-row.odd .slick-cell {\\n  background-color: #f2f2f2;\\n}\\n.slickgrid-container .slick-row.active-row.odd .slick-cell.selected {\\n  background-color: green;\\n}\\n.slickgrid-container .slick-row.loading {\\n  opacity: 0.5;\\n}\\n.slickgrid-container .slick-group {\\n  border-bottom: 2px solid silver;\\n}\\n.slickgrid-container .slick-group-toggle {\\n  width: 9px;\\n  height: 9px;\\n  margin-right: 5px;\\n}\\n.slickgrid-container .slick-group-toggle.expanded {\\n  background: none;\\n}\\n.slickgrid-container .slick-group-toggle.collapsed {\\n  background: none;\\n}\\n.slickgrid-container .slick-group-totals {\\n  color: gray;\\n  background: white;\\n}\\n.slickgrid-container .slick-sortable-placeholder {\\n  background: silver !important;\\n}\\n@-webkit-keyframes slickgrid-invalid-hilite {\\n  from {\\n    box-shadow: 0 0 6px red;\\n  }\\n  to {\\n    box-shadow: none;\\n  }\\n}\\n@keyframes slickgrid-invalid-hilite {\\n  from {\\n    box-shadow: 0 0 6px red;\\n  }\\n  to {\\n    box-shadow: none;\\n  }\\n}\\n.slickgrid-container .header-overlay,\\n.slickgrid-container .cell-overlay,\\n.slickgrid-container .selection-cell-overlay {\\n  display: block;\\n  position: absolute;\\n  z-index: 999;\\n}\\n.slickgrid-container .slick-cell > .editor-select {\\n  position: absolute;\\n  left: 0;\\n  right: 0;\\n  width: auto;\\n  top: 0;\\n  bottom: 0;\\n  max-width: 100%;\\n  min-width: 0;\\n  margin: 0;\\n}\\n.slickgrid-container .slick-range-decorator {\\n  z-index: 100;\\n  pointer-events: none;\\n  background: transparent;\\n  border: none;\\n  outline: black;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slickgrid-container {\\n  overflow: hidden;\\n  outline: 0;\\n  position: relative;\\n  box-sizing: content-box;\\n}\\n.slickgrid-container .slick-group-header-columns {\\n  position: relative;\\n  white-space: nowrap;\\n  cursor: default;\\n  overflow: hidden;\\n}\\n.slickgrid-container .slick-group-header {\\n  width: 100%;\\n  overflow: hidden;\\n  border-left: 0px;\\n}\\n.slickgrid-container .slick-group-header-column.ui-state-default {\\n  position: relative;\\n  display: inline-block;\\n  box-sizing: content-box !important;\\n  /* this here only for Firefox! */\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  height: 16px;\\n  line-height: 16px;\\n  margin: 0;\\n  padding: 4px;\\n}\\n.slickgrid-container .slick-viewport,\\n.slickgrid-container .slick-top-panel-scroller,\\n.slickgrid-container .slick-header,\\n.slickgrid-container .slick-headerrow,\\n.slickgrid-container .slick-footerrow {\\n  position: relative;\\n  width: 100%;\\n  border: 1px solid fade(black, 3%);\\n  border-right-color: transparent;\\n  border-bottom-color: transparent;\\n  border-right-width: 0;\\n  border-bottom-width: 0;\\n  margin: 0;\\n  outline: 0;\\n}\\n.slickgrid-container .slick-top-panel-scroller {\\n  overflow: hidden;\\n}\\n.slickgrid-container .slick-pane {\\n  position: absolute;\\n  outline: 0;\\n  overflow: hidden;\\n  width: 100%;\\n}\\n.slickgrid-container .slick-pane-header {\\n  display: block;\\n  background-color: #ffffff;\\n  border-bottom: transparent;\\n}\\n.slickgrid-container .slick-pane-top {\\n  box-sizing: border-box;\\n  border-top: 1px solid #d0d0d0;\\n}\\n.slickgrid-container .slick-viewport {\\n  overflow: auto;\\n}\\n.slickgrid-container .slick-viewport ::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n}\\n.slickgrid-container .slick-viewport ::-webkit-scrollbar-thumb {\\n  border-radius: 4px;\\n  border: 2px solid white;\\n  /* should match background, can't be transparent */\\n  background-color: rgba(0, 0, 0, 0.5);\\n}\\n.slickgrid-container .slick-header,\\n.slickgrid-container .slick-headerrow,\\n.slickgrid-container .slick-footerrow {\\n  overflow: hidden;\\n}\\n.slickgrid-container .slick-headerrow {\\n  border-top-color: transparent;\\n  border-top-width: 0;\\n}\\n.slickgrid-container .slick-top-panel,\\n.slickgrid-container .slick-header-columns,\\n.slickgrid-container .slick-headerrow-columns,\\n.slickgrid-container .slick-footerrow-columns {\\n  position: relative;\\n  white-space: nowrap;\\n  cursor: default;\\n  overflow: hidden;\\n  margin: 0;\\n  padding: 0;\\n  border: 0;\\n  outline: 0;\\n}\\n.slickgrid-container .slick-cell,\\n.slickgrid-container .slick-header-column,\\n.slickgrid-container .slick-headerrow-column,\\n.slickgrid-container .slick-footerrow-column {\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  border-top-color: transparent;\\n  border-left-color: transparent;\\n  border-top-width: 0;\\n  border-left-width: 0;\\n  margin: 0;\\n  padding: 0;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  vertical-align: middle;\\n  z-index: 1;\\n  white-space: nowrap;\\n  cursor: default;\\n}\\n.slickgrid-container .slick-cell.slick-header-is-leaf,\\n.slickgrid-container .slick-header-column.slick-header-is-leaf,\\n.slickgrid-container .slick-headerrow-column.slick-header-is-leaf,\\n.slickgrid-container .slick-footerrow-column.slick-header-is-leaf {\\n  border-bottom-color: transparent;\\n  border-bottom-width: 0;\\n}\\n.slickgrid-container .slick-header-column.ui-state-default {\\n  position: relative;\\n  display: inline-block;\\n  box-sizing: content-box !important;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  height: 16px;\\n  line-height: 16px;\\n  margin: 0;\\n  padding: 4px;\\n  border-right: 1px solid fade(black, 3%);\\n  border-left: 0px !important;\\n  border-top: 0px !important;\\n  border-bottom: 0px !important;\\n  float: left;\\n}\\n.slickgrid-container .slick-cell {\\n  box-sizing: border-box;\\n  border-style: solid;\\n  padding: 1px 2px 1px 2px;\\n}\\n.slickgrid-container .slick-header-column {\\n  padding: 4px 4px 4px 4px;\\n}\\n.slickgrid-container .grid-canvas {\\n  position: relative;\\n  outline: 0;\\n}\\n.slickgrid-container .slick-row {\\n  position: absolute;\\n  border: 0;\\n  width: 100%;\\n}\\n.slickgrid-container .slick-header-column-sorted {\\n  font-style: italic;\\n}\\n.slickgrid-container .slick-sort-indicator {\\n  display: inline-block;\\n  width: 8px;\\n  height: 5px;\\n  margin-left: 4px;\\n  margin-top: 6px;\\n  position: absolute;\\n  left: 0;\\n}\\n.slickgrid-container .slick-sort-indicator-desc:before {\\n  content: \\\"\\\";\\n}\\n.slickgrid-container .slick-sort-indicator-asc:before {\\n  content: \\\"\\\";\\n}\\n.slickgrid-container .slick-header-sortable .slick-column-name {\\n  margin-left: 10px;\\n}\\n.slickgrid-container .slick-header.ui-state-default {\\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\\n}\\n.slickgrid-container .slick-column-name {\\n  text-overflow: ellipsis;\\n}\\n.slickgrid-container .slick-resizable-handle {\\n  position: absolute;\\n  font-size: 0.1px;\\n  display: block;\\n  cursor: col-resize;\\n  width: 4px;\\n  right: 0;\\n  top: 0;\\n  height: 100%;\\n}\\n.slickgrid-container .slick-resizable-handle-hover {\\n  background-color: #ccc;\\n}\\n.slickgrid-container .slick-sortable-placeholder {\\n  background: silver;\\n}\\n.slickgrid-container .slick-group-toggle {\\n  display: inline-block;\\n}\\n.slickgrid-container .slick-cell.highlighted {\\n  background: lightskyblue;\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: all 0.5s;\\n}\\n.slickgrid-container .slick-cell.flashing {\\n  border: 1px solid red !important;\\n}\\n.slickgrid-container .slick-cell.editable {\\n  z-index: 11;\\n  overflow: visible;\\n  background: white;\\n  border-color: black;\\n  border-style: solid;\\n}\\n.slickgrid-container .slick-cell:focus {\\n  outline: none;\\n}\\n.slickgrid-container .slick-reorder-proxy {\\n  display: inline-block;\\n  background: blue;\\n  opacity: 0.15;\\n  cursor: move;\\n}\\n.slickgrid-container .slick-reorder-guide {\\n  display: inline-block;\\n  height: 2px;\\n  background: blue;\\n  opacity: 0.7;\\n}\\n.slickgrid-container .slick-selection {\\n  z-index: 10;\\n  position: absolute;\\n  border: 2px dashed black;\\n}\\n.slickgrid-container .slick-pane {\\n  position: absolute;\\n  outline: 0;\\n  overflow: hidden;\\n  width: 100%;\\n}\\n.flatpickr-wrapper {\\n  z-index: 10000;\\n}\\n.interact-placeholder {\\n  background: red !important;\\n  display: inline-block;\\n  float: left;\\n  transform: translate(0px, -100%);\\n}\\n.interact-drop-active {\\n  box-shadow: inset 0 0 8px rgba(7, 67, 128, 0.5);\\n}\\n.interact-can-drop {\\n  opacity: 0.9;\\n}\\n.scrollbar-fix::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n}\\n/* control variables */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-columnpicker {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  background-color: #ffffff;\\n  border: 1px solid #b8b8b8;\\n  border-radius: 2px;\\n  padding: 6px;\\n  box-shadow: 1px 1px 1px silver;\\n  min-width: 150px;\\n  cursor: default;\\n  position: absolute;\\n  z-index: 2000;\\n  overflow: auto;\\n  resize: both;\\n  width: auto;\\n  padding-right: 24px;\\n  /* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n}\\n.slick-columnpicker > .close {\\n  float: right;\\n  position: absolute;\\n  color: #c3c3c3;\\n  cursor: pointer;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 23px;\\n  background-color: #ffffff;\\n  border: 0px solid #9c9c9c;\\n  right: 5px;\\n  top: 0px;\\n}\\n.slick-columnpicker > .close:hover {\\n  color: #838383;\\n}\\n.slick-columnpicker > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-columnpicker li {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n  background: none;\\n}\\n.slick-columnpicker li a {\\n  display: block;\\n  padding: 4px;\\n  font-weight: bold;\\n}\\n.slick-columnpicker li a:hover {\\n  background-color: #ffffff;\\n}\\n.slick-columnpicker li label {\\n  font-weight: normal;\\n}\\n.slick-columnpicker li label input {\\n  margin: 4px;\\n}\\n.slick-columnpicker div.title {\\n  font-size: 18px;\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: 1px solid #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-columnpicker-list {\\n  /** make sure the hidden class exist, it was removed in BS4 */\\n  /* replace checkboxes by Font-Awesome icons */\\n}\\n.slick-columnpicker-list li.hidden {\\n  display: none;\\n}\\n.slick-columnpicker-list li {\\n  width: calc(100% + 24px - 6px);\\n  /* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-columnpicker-list li:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-columnpicker-list li label {\\n  cursor: pointer;\\n  width: 100%;\\n  margin-bottom: 0px;\\n}\\n.slick-columnpicker-list hr {\\n  margin: 6px 0;\\n  border: 0;\\n  border-top: 1px solid #d5d5d5;\\n  width: calc(100% + 24px - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-columnpicker-list input[type=checkbox] {\\n  display: none;\\n  /* to hide the checkbox itself */\\n  margin-left: 4px;\\n  margin-top: 3px;\\n}\\n.slick-columnpicker-list input[type=checkbox] + label:before {\\n  cursor: pointer;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\\\"></path></svg>');\\n  color: #009530;\\n  display: inline-block;\\n  font-weight: normal;\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: 18px;\\n  opacity: 0.15;\\n  /* unchecked icon */\\n  margin-right: 4px;\\n  width: 18px;\\n}\\n.slick-columnpicker-list input[type=checkbox] + label:hover:before {\\n  opacity: 0.35;\\n}\\n.slick-columnpicker-list input[type=checkbox]:checked + label:before {\\n  opacity: 1;\\n  /* checked icon */\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\\\"></path></svg>');\\n  width: 18px;\\n}\\n.slick-gridmenu {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  background-color: #ffffff;\\n  border: 1px solid #b8b8b8;\\n  border-radius: 2px;\\n  padding: 6px;\\n  box-shadow: 1px 1px 1px silver;\\n  min-width: 200px;\\n  cursor: default;\\n  position: absolute;\\n  z-index: 2000;\\n  overflow: auto;\\n  width: -webkit-max-content;\\n  width: -moz-max-content;\\n  width: max-content;\\n}\\n.slick-gridmenu > .close {\\n  float: right;\\n  position: absolute;\\n  color: #c3c3c3;\\n  cursor: pointer;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 23px;\\n  background-color: #ffffff;\\n  border: 0px solid #9c9c9c;\\n  right: 5px;\\n  top: 0px;\\n}\\n.slick-gridmenu > .close:hover {\\n  color: #838383;\\n}\\n.slick-gridmenu > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-gridmenu div.title {\\n  font-size: 18px;\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: solid 1px #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-gridmenu li {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n  background: none;\\n}\\n.slick-gridmenu li a {\\n  display: block;\\n  padding: 4px;\\n  font-weight: bold;\\n}\\n.slick-gridmenu li a:hover {\\n  background-color: #ffffff;\\n}\\n.slick-gridmenu li label {\\n  font-weight: normal;\\n}\\n.slick-gridmenu li label input {\\n  margin: 4px;\\n}\\n.slick-gridmenu input {\\n  margin: 4px;\\n}\\n.slick-gridmenu-button {\\n  position: absolute;\\n  cursor: pointer;\\n  right: 0;\\n  padding: 0 2px;\\n  margin-top: 8px;\\n  background-color: transparent;\\n  border: 0;\\n  width: 22px;\\n  font-size: 18px;\\n  z-index: 2;\\n}\\n.slick-gridmenu-custom {\\n  margin-bottom: 10px;\\n}\\n/* Menu items */\\n.slick-gridmenu-item {\\n  cursor: pointer;\\n  display: block;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-gridmenu-item:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-gridmenu-item.slick-gridmenu-item-divider {\\n  cursor: default;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 5px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-gridmenu-item.slick-gridmenu-item-divider:hover {\\n  border: none;\\n  background-color: silver;\\n}\\n.slick-gridmenu-item-divider.slick-gridmenu-item:hover {\\n  background-color: #e7e7e7;\\n}\\n.slick-gridmenu-item-disabled {\\n  cursor: inherit;\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n}\\n.slick-gridmenu-item-disabled .slick-gridmenu-icon, .slick-gridmenu-item-disabled .slick-gridmenu-content {\\n  color: silver;\\n}\\n.slick-gridmenu-item-hidden {\\n  display: none;\\n}\\n.slick-gridmenu-icon {\\n  display: inline-block;\\n  font-size: 18px;\\n  line-height: 14px;\\n  margin-right: 4px;\\n  width: 18px;\\n  vertical-align: middle;\\n  background-repeat: no-repeat;\\n  background-position: center center;\\n}\\n.slick-gridmenu-content {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.slick-gridmenu-list {\\n  /** make sure the hidden class exist, it was removed in BS4 */\\n  /* replace checkboxes by Font-Awesome icons */\\n}\\n.slick-gridmenu-list li.hidden {\\n  display: none;\\n}\\n.slick-gridmenu-list li {\\n  width: auto;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-gridmenu-list li:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-gridmenu-list li label {\\n  cursor: pointer;\\n  width: 100%;\\n  margin-bottom: 0px;\\n}\\n.slick-gridmenu-list hr {\\n  margin: 6px 0;\\n  border: 0;\\n  border-top: 1px solid #dddddd;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-gridmenu-list input[type=checkbox] {\\n  display: none;\\n  /* to hide the checkbox itself */\\n  margin-left: 4px;\\n  margin-top: 3px;\\n}\\n.slick-gridmenu-list input[type=checkbox] + label:before {\\n  cursor: pointer;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\\\"></path></svg>');\\n  color: #009530;\\n  display: inline-block;\\n  font-weight: normal;\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: 18px;\\n  opacity: 0.15;\\n  /* unchecked icon */\\n  margin-right: 4px;\\n  width: 18px;\\n}\\n.slick-gridmenu-list input[type=checkbox] + label:hover:before {\\n  opacity: 0.35;\\n}\\n.slick-gridmenu-list input[type=checkbox]:checked + label:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\\\"></path></svg>');\\n  opacity: 1;\\n  /* checked icon */\\n  width: 18px;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-cell input.dual-editor-text,\\n.slick-cell input.editor-text {\\n  border: 1px solid #e2e2e2;\\n  border-radius: 3px;\\n  background: #ffffff;\\n  padding-bottom: 0;\\n  padding-left: 2px;\\n  padding-right: 0;\\n  padding-top: 0;\\n  margin-left: -2px;\\n  margin-bottom: 2px;\\n  margin-right: 2px;\\n  margin-top: 2px;\\n  width: calc(100% + 2px);\\n  transform: translate(0, -2px);\\n  outline: 0;\\n  height: 100%;\\n}\\n.slick-cell input.dual-editor-text:focus,\\n.slick-cell input.editor-text:focus {\\n  outline: 0;\\n  border-color: #00c840;\\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px rgba(0, 164, 53, 0.3);\\n}\\n.slick-cell input.dual-editor-text.right,\\n.slick-cell input.editor-text.right {\\n  margin-left: calc(-2px + 9px);\\n}\\n.slick-cell input.dual-editor-text[readonly],\\n.slick-cell input.editor-text[readonly] {\\n  background-color: #f0f0f0;\\n}\\n.slick-cell .slider-editor-input:focus {\\n  outline: 0;\\n  border-color: #00c840;\\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px rgba(0, 164, 53, 0.3);\\n}\\n.slick-cell .flatpickr.input-group .input-group-btn .btn {\\n  background-color: #eeeeee;\\n  border: 1px solid #cccccc;\\n  padding: 1px 6px;\\n  border-top-right-radius: 3px;\\n  border-bottom-right-radius: 3px;\\n  cursor: pointer;\\n  height: 24px;\\n}\\n.slick-cell .flatpickr.input-group .input-group-btn .btn.icon-close:before {\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: calc(18px + 2px);\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\\\"></path></svg>');\\n  vertical-align: initial;\\n  display: inline-block;\\n  height: 14px;\\n  width: 14px;\\n  margin-top: unset;\\n}\\n.slick-cell .flatpickr-alt-input {\\n  cursor: pointer;\\n  height: 24px;\\n  border-top-left-radius: 3px !important;\\n  border-bottom-left-radius: 3px !important;\\n  padding: 6px 2px;\\n}\\n.slick-cell .flatpickr-alt-input.editor-text {\\n  cursor: pointer;\\n  background-color: #ffffff;\\n}\\n.slick-cell .flatpickr-alt-input.editor-text:focus {\\n  outline: 0;\\n  border-color: #00c840;\\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px rgba(0, 164, 53, 0.3);\\n}\\n/* Long Text Editor */\\n.slick-large-editor-text {\\n  z-index: 10000;\\n  position: absolute;\\n  background: #ffffff;\\n  padding: 5px;\\n  border: 2px solid #a0a0a0;\\n  border-radius: 6px;\\n}\\n.slick-large-editor-text .editor-footer {\\n  text-align: right;\\n}\\n.slick-large-editor-text .editor-footer button {\\n  margin-left: 2px;\\n  border-radius: 3px;\\n}\\n.slick-large-editor-text textarea {\\n  background: #ffffff;\\n  border: 0;\\n  outline: 0;\\n}\\n.slick-large-editor-text .counter {\\n  float: left;\\n  font-size: 11px;\\n  margin-top: 8px;\\n}\\n.slick-large-editor-text .counter .separator {\\n  margin: 0 1px;\\n}\\n/* plugin variables */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-cell-menu {\\n  position: absolute;\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  background: #ffffff;\\n  border: 1px solid #BFBDBD;\\n  border-radius: 2px;\\n  min-width: 175px;\\n  padding: 6px;\\n  z-index: 100000;\\n  cursor: default;\\n  display: inline-block;\\n  overflow: auto;\\n  resize: both;\\n  /* make sure that other UI frameworks aren't overriding our properties (Bulma was one of them affecting this) */\\n  /* resize cell menu item width when there's a close button on same line */\\n}\\n.slick-cell-menu.dropdown, .slick-cell-menu.dropup {\\n  display: inline-block;\\n  position: absolute;\\n}\\n.slick-cell-menu > .close {\\n  float: right;\\n  cursor: pointer;\\n  color: #c3c3c3;\\n  background-color: #ffffff;\\n  width: 15px;\\n  height: 21px;\\n  margin: -4px 1px 1px 1px;\\n  padding: 0px;\\n  border: 0px solid #9c9c9c;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 23px;\\n}\\n.slick-cell-menu > .close:hover {\\n  color: #838383;\\n}\\n.slick-cell-menu > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-cell-menu .slick-cell-menu-option-list .title,\\n.slick-cell-menu .slick-cell-menu-command-list .title {\\n  font-size: 18px;\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: 1px solid #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-cell-menu .slick-cell-menu-item {\\n  cursor: pointer;\\n  display: flex;\\n  align-items: center;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  font-size: 14px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n  width: 100%;\\n  height: 24px;\\n  /* Disabled item */\\n}\\n.slick-cell-menu .slick-cell-menu-item:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-divider {\\n  cursor: default;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 5px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-divider:hover {\\n  border: none;\\n  background-color: #e7e7e7;\\n}\\n.slick-cell-menu .slick-cell-menu-item .slick-cell-menu-icon {\\n  font-size: 18px;\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  display: inline-block;\\n  line-height: calc(18px + 2px);\\n  margin-right: 6px;\\n  vertical-align: middle;\\n  width: 16px;\\n}\\n.slick-cell-menu .slick-cell-menu-item .slick-cell-menu-content {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-disabled {\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n  cursor: inherit;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-disabled .slick-cell-menu-icon, .slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-disabled .slick-cell-menu-content {\\n  color: silver;\\n}\\n.slick-cell-menu .slick-cell-menu-item.slick-cell-menu-item-hidden {\\n  display: none;\\n}\\n.slick-cell-menu .slick-cell-menu-option-list {\\n  margin-bottom: 10px;\\n}\\n.slick-cell-menu button + .slick-cell-menu-command-list .slick-cell-menu-item:first-child,\\n.slick-cell-menu button + .slick-cell-menu-option-list .slick-cell-menu-item:first-child {\\n  width: calc(100% - 15px - 3px);\\n}\\n.slick-context-menu {\\n  position: absolute;\\n  background: #ffffff;\\n  border: 1px solid #BFBDBD;\\n  border-radius: 2px;\\n  min-width: 175px;\\n  padding: 6px;\\n  z-index: 100000;\\n  cursor: default;\\n  display: inline-block;\\n  overflow: auto;\\n  resize: both;\\n  /* make sure that other UI frameworks aren't overriding our properties (Bulma was one of them affecting this) */\\n  /* resize context menu item width when there's a close button on same line */\\n}\\n.slick-context-menu.dropdown, .slick-context-menu.dropup {\\n  display: inline-block;\\n  position: absolute;\\n}\\n.slick-context-menu > .close {\\n  float: right;\\n  color: #c3c3c3;\\n  background-color: #ffffff;\\n  width: 15px;\\n  height: 21px;\\n  margin: 1px;\\n  padding: 0px;\\n  border: 0px solid #9c9c9c;\\n  font-family: \\\"Calibri Light\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  font-size: 23px;\\n}\\n.slick-context-menu > .close:hover {\\n  color: #838383;\\n}\\n.slick-context-menu > .close > span {\\n  opacity: 0.9;\\n}\\n.slick-context-menu .title {\\n  font-size: calc(16px + 2px);\\n  font-weight: normal;\\n  width: calc(100% - 15px - 10px);\\n  border-bottom: 1px solid #d6d6d6;\\n  margin-bottom: 10px;\\n}\\n.slick-context-menu .slick-context-menu-item {\\n  cursor: pointer;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  font-size: 16px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n  width: 100%;\\n  /* Disabled item */\\n}\\n.slick-context-menu .slick-context-menu-item:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-divider {\\n  cursor: default;\\n  display: block;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 5px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-divider:hover {\\n  border: none;\\n  background-color: #e7e7e7;\\n}\\n.slick-context-menu .slick-context-menu-item .slick-context-menu-icon {\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  display: inline-block;\\n  font-size: 18px;\\n  height: 16px;\\n  line-height: 14px;\\n  margin-right: 4px;\\n  vertical-align: middle;\\n  width: 16px;\\n}\\n.slick-context-menu .slick-context-menu-item .slick-context-menu-content {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-disabled {\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n  cursor: inherit;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-disabled .slick-context-menu-icon, .slick-context-menu .slick-context-menu-item.slick-context-menu-item-disabled .slick-context-menu-content {\\n  color: silver;\\n}\\n.slick-context-menu .slick-context-menu-item.slick-context-menu-item-hidden {\\n  display: none;\\n}\\n.slick-context-menu .slick-context-menu-option-list {\\n  margin-bottom: 10px;\\n}\\n.slick-context-menu button + .slick-context-menu-command-list .slick-context-menu-item:first-child,\\n.slick-context-menu button + .slick-context-menu-option-list .slick-context-menu-item:first-child {\\n  width: calc(100% - 15px - 3px);\\n}\\n.slick-column-name,\\n.slick-sort-indicator {\\n  /**\\n   * This makes all \\\"float:right\\\" elements after it that spill over to the next line\\n   * display way below the lower boundary of the column thus hiding them.\\n   */\\n  float: left;\\n  margin-bottom: 100px;\\n}\\n.slick-header-button {\\n  /**\\n   * This makes all \\\"float:right\\\" elements after it that spill over to the next line\\n   * display way below the lower boundary of the column thus hiding them.\\n   */\\n  float: right;\\n  vertical-align: top;\\n  margin: 1px;\\n  margin-bottom: 100px;\\n  height: 15px;\\n  width: 15px;\\n  background-repeat: no-repeat;\\n  background-position: center center;\\n  cursor: pointer;\\n}\\n.slick-header-button-hidden {\\n  width: 0;\\n  margin-right: -8px;\\n  transition: 0.2s width;\\n}\\n.slick-header-column:hover > .slick-header-button {\\n  width: 15px;\\n}\\n.slick-header-menubutton {\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  cursor: pointer;\\n  display: none;\\n  position: absolute;\\n  height: 35px;\\n  border: 1px solid #BFBDBD;\\n  border-width: 0px;\\n  padding: 0px;\\n  color: #3f3e3e;\\n  bottom: 0;\\n  right: 8px;\\n  top: 0;\\n  width: 14px;\\n}\\n.slick-header-menubutton:before {\\n  display: inline-block;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z\\\"></path></svg>');\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: 24px;\\n  font-weight: normal;\\n  width: 24px;\\n}\\n.slick-header-column .slick-header-menubutton {\\n  display: inline-block;\\n}\\n.slick-header-column:hover .slick-header-menubutton {\\n  display: inline-block;\\n}\\n.slick-header-menu {\\n  position: absolute;\\n  margin: 0;\\n  background: none repeat scroll 0 0 #ffffff;\\n  border: 1px solid #BFBDBD;\\n  border-radius: 2px;\\n  min-width: 175px;\\n  padding: 6px;\\n  z-index: 100000;\\n  cursor: default;\\n  display: inline-block;\\n}\\n.slick-header-menu .filter {\\n  border: 1px solid #BFBDBD;\\n  font-size: 8pt;\\n  height: 400px;\\n  margin-top: 6px;\\n  overflow: scroll;\\n  padding: 4px;\\n  white-space: nowrap;\\n  width: 200px;\\n}\\n.slick-header-menu .textfilter > label {\\n  display: inline-block;\\n  margin-left: 5px;\\n  margin-right: 10px;\\n}\\n.slick-header-menu .textfilter > input[type=text] {\\n  width: 70%;\\n}\\n.slick-header-menuitem {\\n  cursor: pointer;\\n  display: block;\\n  border: 1px solid transparent;\\n  border-radius: 0px;\\n  padding: 2px 4px;\\n  list-style: none outside none;\\n  margin: 0;\\n}\\n.slick-header-menuitem:hover {\\n  border: 1px solid #BFBDBD;\\n  background-color: #fafafa;\\n}\\n.slick-header-menuitem.slick-header-menuitem-divider {\\n  cursor: default;\\n  border: none;\\n  overflow: hidden;\\n  padding: 0;\\n  height: 1px;\\n  margin: 8px 3px;\\n  background-color: #e7e7e7;\\n  width: calc(100% - 10px);\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n.slick-header-menuitem.slick-header-menuitem-divider:hover {\\n  border: none;\\n  background-color: silver;\\n}\\n.slick-header-menuitem-divider.slick-header-menuitem:hover {\\n  background-color: #e7e7e7;\\n}\\n.slick-header-menuicon {\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  display: inline-block;\\n  color: rgba(0, 0, 0, 0.87);\\n  font-size: 18px;\\n  font-weight: normal;\\n  line-height: 14px;\\n  height: 16px;\\n  margin-right: 6px;\\n  vertical-align: middle;\\n  width: 18px;\\n  /* Font Awesome sorting icons are not aligned in middle, let's align them ourselves */\\n}\\n.slick-header-menuicon.fa-sort-asc {\\n  transform: translateY(3px);\\n}\\n.slick-header-menuicon.fa-sort-desc {\\n  transform: translateY(-2px);\\n}\\n.slick-header-menucontent {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n/* Disabled */\\n.slick-header-menuitem-disabled {\\n  border-color: transparent !important;\\n  background: inherit !important;\\n  color: silver;\\n  cursor: inherit;\\n}\\n.slick-header-menuitem-disabled .slick-header-menuicon, .slick-header-menuitem-disabled .slick-header-menucontent {\\n  color: silver;\\n}\\n.slick-header-menuitem-hidden {\\n  display: none;\\n}\\n.slick-cell.cell-reorder:before {\\n  display: inline-block;\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: 18px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M10,13H22V11H10M10,19H22V17H10M10,7H22V5H10M6,7H8.5L5,3.5L1.5,7H4V17H1.5L5,20.5L8.5,17H6V7Z\\\"></path></svg>');\\n  width: 18px;\\n}\\n.slick-cell.cell-reorder {\\n  cursor: -webkit-grab;\\n  cursor: grab;\\n}\\n.slick-headerrow-column,\\n.slick-column-name,\\n.slick-cell-checkboxsel {\\n  text-align: center;\\n}\\n.slick-headerrow-column #filter-checkbox-selectall-container,\\n.slick-column-name #filter-checkbox-selectall-container,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  height: 100%;\\n}\\n.slick-headerrow-column input[type=checkbox],\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox],\\n.slick-column-name input[type=checkbox],\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox],\\n.slick-cell-checkboxsel input[type=checkbox],\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] {\\n  display: none;\\n  /* to hide the checkbox itself */\\n}\\n.slick-headerrow-column input[type=checkbox],\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox] + label,\\n.slick-column-name input[type=checkbox],\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox] + label,\\n.slick-cell-checkboxsel input[type=checkbox],\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] + label {\\n  margin: 0;\\n}\\n.slick-headerrow-column input[type=checkbox] + label:before,\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox] + label:before,\\n.slick-column-name input[type=checkbox] + label:before,\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox] + label:before,\\n.slick-cell-checkboxsel input[type=checkbox] + label:before,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] + label:before {\\n  cursor: pointer;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z\\\"></path></svg>');\\n  background-color: inherit;\\n  color: #009530;\\n  display: inline-block;\\n  font-weight: bold;\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: 22px;\\n  opacity: 1;\\n  /* unchecked icon */\\n  height: 18px;\\n  width: 22px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0;\\n}\\n.slick-headerrow-column input[type=checkbox] + label:hover:before,\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox] + label:hover:before,\\n.slick-column-name input[type=checkbox] + label:hover:before,\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox] + label:hover:before,\\n.slick-cell-checkboxsel input[type=checkbox] + label:hover:before,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox] + label:hover:before {\\n  opacity: 0.9;\\n}\\n.slick-headerrow-column input[type=checkbox]:checked + label:before,\\n.slick-headerrow-column #filter-checkbox-selectall-container > input[type=checkbox]:checked + label:before,\\n.slick-column-name input[type=checkbox]:checked + label:before,\\n.slick-column-name #filter-checkbox-selectall-container > input[type=checkbox]:checked + label:before,\\n.slick-cell-checkboxsel input[type=checkbox]:checked + label:before,\\n.slick-cell-checkboxsel #filter-checkbox-selectall-container > input[type=checkbox]:checked + label:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z\\\"></path></svg>');\\n  color: #009530;\\n  opacity: 1;\\n  /* checked icon */\\n  height: 18px;\\n  width: 22px;\\n  border-radius: none;\\n  border-radius: none;\\n}\\n.slick-group .slick-cell-checkboxsel {\\n  text-align: left;\\n}\\n.search-filter :focus {\\n  outline-color: #73b3e5;\\n}\\n.ms-choice {\\n  border: 1px solid #ccc;\\n  background-color: transparent;\\n  font-size: 12px;\\n}\\n.ms-choice div:before {\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: 16px;\\n}\\n.ms-choice div.open:before {\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: 16px;\\n}\\n.ms-choice span {\\n  font-size: 12px;\\n  font-family: \\\"Helvetica Neue\\\", Helvetica, Arial;\\n}\\n.ms-choice .placeholder {\\n  font-family: \\\"Segoe UI Symbol\\\";\\n  font-size: 12px;\\n  color: #c9c9c9 !important;\\n}\\n.ms-filter.search-filter {\\n  width: 100% !important;\\n}\\n.ms-drop {\\n  max-width: 250px;\\n  border: 1px solid #bbb;\\n  z-index: 9999;\\n}\\n.ms-drop input[type=checkbox],\\n.ms-drop input[type=radio] {\\n  /* make input checkbox invisible but don't hide it since multiple-select uses hide for something else */\\n  opacity: 0;\\n  width: 0;\\n}\\n.ms-drop input[type=checkbox] + span:before,\\n.ms-drop input[type=radio] + span:before {\\n  cursor: pointer;\\n  color: #009530;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z\\\"></path></svg>');\\n  display: inline-block;\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: 16px;\\n  font-weight: normal;\\n  height: 16px;\\n  width: 16px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0px 4px 0 0;\\n  opacity: 0.8;\\n}\\n.ms-drop input[type=checkbox]:checked + span:before,\\n.ms-drop input[type=radio]:checked + span:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z\\\"></path></svg>');\\n  opacity: 1;\\n  height: 16px;\\n  width: 16px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0px 4px 0 0;\\n}\\n.ms-drop input[type=radio] + span:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z\\\"></path></svg>');\\n  height: 16px;\\n  width: 16px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0px 4px 0 0;\\n}\\n.ms-drop input[type=radio]:checked + span:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7Z\\\"></path></svg>');\\n  color: #009530;\\n  height: 16px;\\n  width: 16px;\\n  border: none;\\n  border-radius: none;\\n  margin: 0px 4px 0 0;\\n}\\n.ms-drop label {\\n  margin-bottom: 5px;\\n}\\n.ms-drop label span {\\n  cursor: pointer;\\n  margin-left: 4px;\\n  position: relative;\\n  top: 1px;\\n}\\n.ms-drop label:hover {\\n  cursor: pointer;\\n  background-color: #ebfaef;\\n}\\n.ms-drop .ms-select-all {\\n  border-bottom: 1px solid #ddd;\\n}\\n.ms-drop .ms-select-all label {\\n  display: inline-block;\\n  font-weight: normal;\\n  padding: 5px 8px;\\n  color: #007c28;\\n}\\n.ms-drop .ms-select-all label:hover {\\n  color: #006220;\\n}\\n.ms-drop .ms-ok-button {\\n  cursor: pointer;\\n  display: block;\\n  width: 100%;\\n  height: 26px;\\n  padding: 0;\\n  border: 1px solid #ccc;\\n  text-align: center;\\n  color: #009530;\\n  font-weight: 600;\\n  border-bottom-left-radius: 4px;\\n  border-bottom-right-radius: 4px;\\n  background-color: #fff;\\n}\\n.ms-drop .ms-ok-button:hover {\\n  background-color: #dff7e5;\\n  color: #007c28;\\n}\\n.ms-drop .ms-search:before {\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: 16px;\\n  right: 8px;\\n  position: absolute;\\n}\\n.search-filter .operator.input-group-addon {\\n  margin: 0;\\n  padding: 0;\\n  min-width: 25px;\\n  border: none;\\n}\\n.search-filter .operator.input-group-addon .form-control {\\n  border-radius: 4px 0 0 4px;\\n  padding: 0 0 0 2px !important;\\n  font-size: 13px;\\n  color: #333333;\\n  font-weight: bold;\\n  background-color: #ffffff;\\n}\\n.search-filter .operator.input-group-addon select {\\n  font-family: Consolas, \\\"Lucida Console\\\";\\n  font-size: 14px !important;\\n  border: 1px solid #00c840;\\n  width: 25px;\\n}\\n.search-filter .operator.input-group-addon select.form-control {\\n  cursor: pointer;\\n  -moz-appearance: none;\\n  -webkit-appearance: none;\\n}\\n.search-filter .operator.input-group-addon select.form-control:-ms-expand {\\n  display: none;\\n}\\n.search-filter .operator.input-group-addon select.form-control .empty {\\n  color: #c0c0c0;\\n}\\n.search-filter .operator-char3.input-group-addon {\\n  min-width: 30px;\\n}\\ninput.search-filter {\\n  font-family: \\\"Segoe UI Symbol\\\";\\n}\\n.search-filter input {\\n  font-family: \\\"Segoe UI Symbol\\\";\\n}\\n.search-filter input.compound-input {\\n  border-radius: 0 4px 4px 0 !important;\\n  border-left: none;\\n}\\n.search-filter input.compound-input::-moz-placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter input.compound-input::placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter input.compound-slider {\\n  border-left: none !important;\\n}\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column .input-group-prepend + .flatpickr input.compound-input {\\n  border-top-left-radius: 0;\\n  border-bottom-left-radius: 0;\\n}\\n.search-filter .flatpickr input.form-control {\\n  border-left: none;\\n}\\n.search-filter .flatpickr input.form-control::-moz-placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter .flatpickr input.form-control::placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter.flatpickr,\\n.search-filter .flatpickr {\\n  flex: 1;\\n  cursor: pointer;\\n}\\n.search-filter.flatpickr input.flatpickr.form-control,\\n.search-filter.flatpickr .flatpickr-input.form-control,\\n.search-filter .flatpickr input.flatpickr.form-control,\\n.search-filter .flatpickr .flatpickr-input.form-control {\\n  background-color: #ffffff;\\n  font-family: \\\"Segoe UI Symbol\\\";\\n  font-size: 14px;\\n  border-radius: 0 4px 4px 0;\\n  width: 100%;\\n}\\n.search-filter.flatpickr input.flatpickr.form-control[readonly],\\n.search-filter.flatpickr .flatpickr-input.form-control[readonly],\\n.search-filter .flatpickr input.flatpickr.form-control[readonly],\\n.search-filter .flatpickr .flatpickr-input.form-control[readonly] {\\n  background-color: #ffffff;\\n}\\n.search-filter.flatpickr .form-control[readonly],\\n.search-filter.flatpickr .flatpickr.form-control[readonly],\\n.search-filter .flatpickr .form-control[readonly],\\n.search-filter .flatpickr .flatpickr.form-control[readonly] {\\n  cursor: pointer;\\n  background-color: #ffffff;\\n}\\ninput.flatpickr-input.form-control,\\ninput.flatpickr.form-control {\\n  cursor: pointer;\\n  font-family: \\\"Segoe UI Symbol\\\";\\n  font-size: 14px;\\n  border-radius: 4px;\\n}\\ninput.flatpickr-input.form-control[readonly],\\ninput.flatpickr.form-control[readonly] {\\n  background-color: #ffffff;\\n}\\n.slick-preheader-panel .ui-droppable, .slick-preheader-panel .ui-droppable-hover {\\n  padding: 5px 10px;\\n  height: 35px;\\n  border: 1px solid #e0e0e0 !important;\\n  width: 100% !important;\\n  border-radius: 0;\\n  background-color: #ffffff;\\n}\\n.slick-preheader-panel .ui-droppable .slick-placeholder, .slick-preheader-panel .ui-droppable-hover .slick-placeholder {\\n  font-style: italic;\\n  color: #616161;\\n}\\n.slick-preheader-panel .ui-droppable .slick-group-toggle-all, .slick-preheader-panel .ui-droppable-hover .slick-group-toggle-all {\\n  position: absolute;\\n  cursor: pointer;\\n  font-family: \\\"Material Design Icons\\\";\\n  color: #009530;\\n  display: none !important;\\n  top: 7px;\\n  right: 40px;\\n}\\n.slick-preheader-panel .ui-droppable .slick-group-toggle-all.expanded:before, .slick-preheader-panel .ui-droppable-hover .slick-group-toggle-all.expanded:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z\\\"></path></svg>');\\n}\\n.slick-preheader-panel .ui-droppable .slick-group-toggle-all.collapsed:before, .slick-preheader-panel .ui-droppable-hover .slick-group-toggle-all.collapsed:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z\\\"></path></svg>');\\n}\\n.slick-preheader-panel .ui-droppable .slick-dropped-grouping, .slick-preheader-panel .ui-droppable-hover .slick-dropped-grouping {\\n  display: inline-block;\\n  vertical-align: middle;\\n  cursor: move;\\n}\\n.slick-preheader-panel .ui-droppable .slick-groupby-remove, .slick-preheader-panel .ui-droppable-hover .slick-groupby-remove {\\n  cursor: pointer;\\n  display: inline-flex;\\n  color: pink;\\n  font-size: 16px;\\n  padding-left: 5px;\\n  padding-right: 7px;\\n  vertical-align: middle;\\n}\\n.slick-preheader-panel .ui-droppable .slick-groupby-remove:hover, .slick-preheader-panel .ui-droppable-hover .slick-groupby-remove:hover {\\n  color: red;\\n}\\n.slick-preheader-panel .ui-droppable-active {\\n  background-color: #fafafa;\\n}\\n.slick-preheader-panel .ui-droppable-hover {\\n  background-color: #ededed;\\n}\\n.slick-header .slick-header-columns .slick-column-groupable {\\n  display: inline-block;\\n  font-weight: normal;\\n  color: #707070;\\n  width: 9px;\\n  height: 9px;\\n  margin-left: 4px;\\n}\\n.ui-widget.ui-widget-content {\\n  border: 0;\\n}\\ninput.slider-editor-input[type=range],\\ninput.slider-filter-input[type=range] {\\n  /*removes default webkit styles*/\\n  -webkit-appearance: none;\\n  height: 27px;\\n  flex: 1;\\n  padding: 0 6px;\\n  /* change runnable track color while in focus on all browsers */\\n  /* WebKit specific (Opera/Chrome/Safari) */\\n  /* Mozilla Firefox specific */\\n  /*fix for FF unable to apply focus style bug */\\n  border: 1px solid #ccc;\\n  /*hide the outline behind the border*/\\n  /* Microsoft IE specific */\\n}\\ninput.slider-editor-input[type=range]:focus,\\ninput.slider-filter-input[type=range]:focus {\\n  outline: none;\\n}\\ninput.slider-editor-input[type=range]:focus::-webkit-slider-runnable-track,\\ninput.slider-filter-input[type=range]:focus::-webkit-slider-runnable-track {\\n  background: #ddd;\\n}\\ninput.slider-editor-input[type=range]:focus::-moz-range-track,\\ninput.slider-filter-input[type=range]:focus::-moz-range-track {\\n  background: #ddd;\\n}\\ninput.slider-editor-input[type=range]:focus::-ms-fill-lower,\\ninput.slider-filter-input[type=range]:focus::-ms-fill-lower {\\n  background: #aaa;\\n}\\ninput.slider-editor-input[type=range]:focus::-ms-fill-upper,\\ninput.slider-filter-input[type=range]:focus::-ms-fill-upper {\\n  background: #ddd;\\n}\\ninput.slider-editor-input[type=range]::-webkit-slider-runnable-track,\\ninput.slider-filter-input[type=range]::-webkit-slider-runnable-track {\\n  height: 4px;\\n  background: #eee;\\n  border: none;\\n  border-radius: 3px;\\n}\\ninput.slider-editor-input[type=range]::-webkit-slider-thumb,\\ninput.slider-filter-input[type=range]::-webkit-slider-thumb {\\n  cursor: pointer;\\n  -webkit-appearance: none;\\n  border: none;\\n  height: 14px;\\n  width: 14px;\\n  border-radius: 50%;\\n  border: 1px solid #9bbc9f;\\n  background: #c9dbcb;\\n  margin-top: -4px;\\n}\\ninput.slider-editor-input[type=range]::-moz-range-track,\\ninput.slider-filter-input[type=range]::-moz-range-track {\\n  height: 4px;\\n  background: #eee;\\n  border: none;\\n  border-radius: 3px;\\n}\\ninput.slider-editor-input[type=range]::-moz-range-thumb,\\ninput.slider-filter-input[type=range]::-moz-range-thumb {\\n  border: none;\\n  cursor: pointer;\\n  height: calc(14px - 2px);\\n  width: calc(14px - 2px);\\n  border-radius: 50%;\\n  border: 1px solid #9bbc9f;\\n  background: #c9dbcb;\\n}\\ninput.slider-editor-input[type=range]:-moz-focusring,\\ninput.slider-filter-input[type=range]:-moz-focusring {\\n  outline: 1px solid white;\\n  outline-offset: -1px;\\n}\\ninput.slider-editor-input[type=range]::-ms-track,\\ninput.slider-filter-input[type=range]::-ms-track {\\n  height: 4px;\\n  /*remove bg colour from the track, we'll use ms-fill-lower and ms-fill-upper instead */\\n  background: transparent;\\n  /*leave room for the larger thumb to overflow with a transparent border */\\n  border-color: transparent;\\n  border-width: 6px 0;\\n  /*remove default tick marks*/\\n  color: transparent;\\n}\\ninput.slider-editor-input[type=range]::-ms-fill-lower,\\ninput.slider-filter-input[type=range]::-ms-fill-lower {\\n  background: #ddd;\\n  border-radius: 10px;\\n}\\ninput.slider-editor-input[type=range]::-ms-fill-upper,\\ninput.slider-filter-input[type=range]::-ms-fill-upper {\\n  background: #eee;\\n  border-radius: 10px;\\n}\\ninput.slider-editor-input[type=range]::-ms-thumb,\\ninput.slider-filter-input[type=range]::-ms-thumb {\\n  border: none;\\n  cursor: pointer;\\n  height: calc(14px - 2px);\\n  width: calc(14px - 2px);\\n  border-radius: 50%;\\n  border: 1px solid #9bbc9f;\\n  background: #c9dbcb;\\n  margin-top: 1px;\\n}\\ninput.slider-editor-input[type=range]::-ms-tooltip,\\ninput.slider-filter-input[type=range]::-ms-tooltip {\\n  display: none;\\n}\\n.search-filter {\\n  height: 27px;\\n}\\n.search-filter::-moz-placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter::placeholder {\\n  color: #c9c9c9;\\n}\\n.search-filter .slider-value {\\n  padding: 0;\\n  height: 100%;\\n}\\n.search-filter .slider-value .input-group-text {\\n  padding: 4px 8px;\\n  font-size: calc(14 - 1px);\\n}\\ninput.slider-filter-input[type=range] {\\n  padding: 0 6px;\\n  height: 27px;\\n}\\n/* Slider Editor */\\ninput.slider-editor-input[type=range] {\\n  padding: 0 6px;\\n  height: 26px;\\n}\\n.slider-editor .slider-value {\\n  padding: 0;\\n  height: 26px;\\n}\\n.slider-editor .slider-value .input-group-text {\\n  padding: 4px 6px;\\n  font-size: calc(14 - 1px);\\n  height: 26px;\\n}\\n.slider-range-container {\\n  height: 27px;\\n  padding: 0 12px;\\n}\\n.slider-range-container .ui-slider {\\n  position: relative;\\n}\\n.slider-range-container .ui-slider .ui-slider-handle {\\n  position: absolute;\\n  top: -5px;\\n  border-radius: 50%;\\n  cursor: pointer;\\n  border: 1px solid #9bbc9f;\\n  height: 14px;\\n  width: 14px;\\n  background-color: #c9dbcb;\\n}\\n.slider-range-container .ui-slider .ui-slider-handle:focus {\\n  outline: none;\\n}\\n.slider-range-container .ui-slider-horizontal {\\n  top: 45%;\\n  height: 4px;\\n  background-color: #eee;\\n}\\n.slider-range-container .input-group-text {\\n  border: 0;\\n}\\n.slider-range-container.slider-values {\\n  padding: 0;\\n}\\n.slider-range-container.slider-values .ui-slider-horizontal {\\n  flex: 1;\\n  width: calc(98% - 16px);\\n  top: 12px;\\n  margin: 0 10px;\\n}\\n.slider-range-container.slider-values .slider-range-value {\\n  padding: 0;\\n  border: 0;\\n  height: 100%;\\n}\\n.slider-range-container.slider-values .slider-range-value .input-group-text {\\n  padding: 4px 8px;\\n  font-size: calc(14 - 1px);\\n}\\n.slider-range-container.slider-values .input-group-prepend.slider-range-value {\\n  border-right: 1px solid #ccc;\\n}\\n.slider-range-container.slider-values .input-group-append.slider-range-value {\\n  border-left: 1px solid #ccc;\\n}\\n.slick-row .detail-view-toggle {\\n  display: inline-block;\\n  cursor: pointer;\\n}\\n.slick-row .detail-view-toggle.expand {\\n  display: inline-block;\\n  color: #009530;\\n}\\n.slick-row .detail-view-toggle.expand:hover {\\n  color: #006220;\\n}\\n.slick-row .detail-view-toggle.expand:before {\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: calc(18px + 2px);\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M17,13H13V17H11V13H7V11H11V7H13V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z\\\"></path></svg>');\\n}\\n.slick-row .detail-view-toggle.collapse {\\n  display: inline-block;\\n  color: #009530;\\n}\\n.slick-row .detail-view-toggle.collapse:hover {\\n  color: #006220;\\n}\\n.slick-row .detail-view-toggle.collapse:before {\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: calc(18px + 2px);\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M17,13H7V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z\\\"></path></svg>');\\n}\\n.slick-row .dynamic-cell-detail {\\n  position: absolute;\\n  width: 100%;\\n  overflow: auto;\\n  border: 1px solid #c0c0c0;\\n  background-color: #f7f7f7;\\n  padding: 10px;\\n  z-index: 1000;\\n}\\n.slick-row .dynamic-cell-detail :first-child {\\n  vertical-align: middle;\\n  line-height: 13px;\\n}\\n/* pagination/pagination variables */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.slick-custom-footer {\\n  color: #808080;\\n  padding: 5px 0;\\n  background-color: transparent;\\n  font-size: 14px;\\n  font-style: italic;\\n  font-weight: normal;\\n  height: 30px;\\n}\\n.slick-custom-footer .left-footer {\\n  color: #808080;\\n  font-style: italic;\\n  font-weight: normal;\\n  text-align: left;\\n  padding: 0px;\\n  width: 50%;\\n  float: left;\\n}\\n.slick-custom-footer .right-footer.metrics {\\n  color: #808080;\\n  text-align: right;\\n  font-style: italic;\\n  font-weight: normal;\\n  text-align: right;\\n  padding: 0px;\\n  width: 50%;\\n  float: right;\\n}\\n.slick-custom-footer .right-footer.metrics .separator {\\n  margin: 2px;\\n}\\n.slick-empty-data-warning {\\n  position: relative;\\n  color: rgba(0, 0, 0, 0.87);\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: calc(14px + 2px);\\n  font-style: italic;\\n  line-height: 18px;\\n  margin: 0px;\\n  padding: 8px;\\n  z-index: 10;\\n}\\n/* Pagination styling */\\n.slick-pagination {\\n  border-top: 0 none;\\n  border-right: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  width: 100%;\\n  height: 40px;\\n  padding-top: 4px;\\n  vertical-align: middle;\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: calc(14px - 1px);\\n  font-weight: 400;\\n  color: #808080;\\n}\\n.slick-pagination .slick-pagination-status {\\n  display: inline-block;\\n  padding: 6px;\\n}\\n.slick-pagination .ui-icon-container {\\n  display: inline-block;\\n  border-color: #ddd;\\n}\\n.slick-pagination .slick-pagination-nav {\\n  display: inline-block;\\n  padding: 2px;\\n  height: 34px;\\n}\\n.slick-pagination .slick-pagination-nav nav {\\n  display: inline-block;\\n}\\n.slick-pagination .slick-pagination-nav .slick-page-number {\\n  vertical-align: top;\\n  margin-top: 6px;\\n  display: inline-block;\\n  padding: 0 5px;\\n}\\n.slick-pagination .slick-pagination-nav .slick-page-number input {\\n  background-color: #fafbed;\\n  height: 26px;\\n  width: 50px;\\n  padding: 2px;\\n  border-radius: 3px;\\n  display: inline-block;\\n}\\n.slick-pagination .slick-pagination-nav .pagination {\\n  margin: 0;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-link {\\n  font-size: calc(18px - 1px);\\n  border: 1px solid #acacac;\\n  height: 32px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item {\\n  cursor: pointer;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item a[class*=icon-seek-] {\\n  border-color: 1px solid #acacac;\\n  color: #009530;\\n  text-decoration: none;\\n  font-family: \\\"Material Design Icons\\\";\\n  line-height: calc(18px + 4px);\\n  -webkit-text-stroke: 0.4px;\\n  padding: 6px 9px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item a[class*=icon-seek-]:hover {\\n  background-color: #E6E6E6;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item:first-child a, .slick-pagination .slick-pagination-nav .pagination .page-item:first-child span {\\n  border-top-left-radius: 2px;\\n  border-bottom-left-radius: 2px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item:last-child a, .slick-pagination .slick-pagination-nav .pagination .page-item:last-child span {\\n  border-top-right-radius: 2px;\\n  border-bottom-right-radius: 2px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-first:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/><path d=\\\"M24 24H0V0h24v24z\\\" fill=\\\"none\\\"/></svg>');\\n  display: block;\\n  width: 18px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-prev:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"> <path d=\\\"M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z\\\"></path></svg>');\\n  display: block;\\n  width: 18px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-next:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z\\\"></path></svg>');\\n  display: block;\\n  width: 18px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item .icon-seek-end:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M0 0h24v24H0V0z\\\" fill=\\\"none\\\"/><path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/></svg>');\\n  display: block;\\n  width: 18px;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item.disabled {\\n  cursor: not-allowed;\\n  font-weight: normal;\\n}\\n.slick-pagination .slick-pagination-nav .pagination .page-item.disabled a[class*=icon-seek-] {\\n  color: #b8b8b8;\\n  background-color: #f9f9f9;\\n  border-color: #dedede;\\n}\\n.slick-pagination .slick-pagination-settings {\\n  display: block;\\n  float: right;\\n  padding: 2px;\\n}\\n.slick-pagination .slick-pagination-settings select {\\n  font-size: calc(14px - 2px);\\n  line-height: 1.5;\\n  height: 32px;\\n  width: 60px;\\n  padding: 0 0 2px 2px;\\n  border: 1px solid #acacac;\\n  border-radius: 3px;\\n}\\n.slick-pagination .slick-pagination-settings .slick-pagination-count {\\n  margin-left: 2px;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.full-height {\\n  height: 100%;\\n}\\n.gridPane {\\n  width: 100%;\\n}\\n.grid-header {\\n  border: 1px solid gray;\\n  border-bottom: 0;\\n  border-top: 0;\\n  color: black;\\n  height: 24px;\\n  line-height: 24px;\\n}\\n.grid-header label {\\n  display: inline-block;\\n  font-weight: bold;\\n  margin: auto auto auto 6px;\\n}\\n.grid-header .ui-icon {\\n  margin: 4px 4px auto 6px;\\n  background-color: transparent;\\n  border-color: transparent;\\n}\\n.grid-header .ui-icon.ui-state-hover {\\n  background-color: white;\\n}\\n.grid-header #txtSearch {\\n  margin: 0 4px 0 4px;\\n  padding: 2px 2px;\\n  border-radius: 2px;\\n  border: 1px solid silver;\\n}\\n.options-panel {\\n  border-radius: 6px;\\n  border: 1px solid silver;\\n  background: #f0f0f0;\\n  padding: 4px;\\n  margin-bottom: 20px;\\n  width: 320px;\\n  position: absolute;\\n  top: 0px;\\n  left: 650px;\\n}\\n/* Individual cell styles */\\n.slick-cell.task-name {\\n  font-weight: bold;\\n  text-align: right;\\n}\\n.slick-cell.task-percent {\\n  text-align: right;\\n}\\n.slick-cell.cell-move-handle {\\n  font-weight: bold;\\n  text-align: right;\\n  border-right: solid gray;\\n  background: #efefef;\\n  cursor: move;\\n}\\n.cell-move-handle:hover {\\n  background: #b6b9bd;\\n}\\n.slick-row.selected .cell-move-handle {\\n  background: #D5DC8D;\\n}\\n.slick-row .cell-actions {\\n  text-align: left;\\n}\\n.slick-row.complete {\\n  background-color: #DFD;\\n  color: #555;\\n}\\n.percent-complete-bar {\\n  display: inline-block;\\n  height: 6px;\\n  border-radius: 3px;\\n  background-color: transparent;\\n}\\n/* Slick.Editors.Text, Slick.Editors.Date */\\n.ui-datepicker-trigger {\\n  margin-top: 2px;\\n  padding: 0;\\n  vertical-align: top;\\n}\\n/* Slick.Editors.PercentComplete */\\ninput.editor-percentcomplete {\\n  width: 100%;\\n  height: 100%;\\n  border: 0;\\n  margin: 0;\\n  background: transparent;\\n  outline: 0;\\n  padding: 0;\\n  float: left;\\n}\\n.editor-percentcomplete-picker {\\n  position: relative;\\n  display: inline-block;\\n  width: 16px;\\n  height: 100%;\\n  overflow: visible;\\n  z-index: 1000;\\n  float: right;\\n}\\n.editor-percentcomplete-helper {\\n  border: 0 solid gray;\\n  position: absolute;\\n  top: -2px;\\n  left: -9px;\\n  padding-left: 9px;\\n  width: 120px;\\n  height: 140px;\\n  display: none;\\n  overflow: visible;\\n}\\n.editor-percentcomplete-wrapper {\\n  background: beige;\\n  padding: 20px 8px;\\n  width: 100%;\\n  height: 98px;\\n  border: 1px solid gray;\\n  border-left: 0;\\n}\\n.editor-percentcomplete-buttons {\\n  float: right;\\n}\\n.editor-percentcomplete-buttons button {\\n  width: 80px;\\n}\\n.editor-percentcomplete-slider {\\n  float: left;\\n}\\n.editor-percentcomplete-picker:hover .editor-percentcomplete-helper {\\n  display: block;\\n}\\n.editor-percentcomplete-helper:hover {\\n  display: block;\\n}\\n/* Slick.Editors.YesNoSelect */\\nselect.editor-yesno {\\n  width: 100%;\\n  margin: 0;\\n  vertical-align: middle;\\n}\\n/* Slick.Editors.Checkbox */\\ninput.editor-checkbox {\\n  margin: 0;\\n  height: 100%;\\n  padding: 0;\\n  border: 0;\\n}\\n/*!\\n * SlickGrid custom styling for Bootstrap (https://github.com/ghiscoding/aurelia-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/aurelia-slickgrid/blob/master/LICENSE)\\n * @author: Ghislain B. (ghiscoding)\\n */\\n/*!\\n\\n/* Mixins for SlickGrid */\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n@-webkit-keyframes highlight-start {\\n  to {\\n    background: #bff2c3;\\n  }\\n  from {\\n    background: none;\\n  }\\n}\\n@keyframes highlight-start {\\n  to {\\n    background: #bff2c3;\\n  }\\n  from {\\n    background: none;\\n  }\\n}\\n@-webkit-keyframes highlight-end {\\n  from {\\n    background: 0.3s ease 1;\\n  }\\n  to {\\n    background: none;\\n  }\\n}\\n@keyframes highlight-end {\\n  from {\\n    background: 0.3s ease 1;\\n  }\\n  to {\\n    background: none;\\n  }\\n}\\n.slickgrid-container {\\n  border-top: 1px solid #ccc;\\n  border-bottom: 1px solid #ccc;\\n  border-left: 1px solid #ccc;\\n  border-right: 1px solid #ccc;\\n  position: relative;\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  /** Header Grouping **/\\n  /** Frozen/Pinned styling */\\n}\\n.slickgrid-container input[type=checkbox] {\\n  vertical-align: baseline;\\n  margin: 0;\\n}\\n.slickgrid-container .slick-viewport {\\n  border-top: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  border-right: 0 none;\\n}\\n.slickgrid-container .grid-canvas .slick-row {\\n  position: absolute;\\n  width: 100%;\\n  color: rgba(0, 0, 0, 0.87);\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-weight: 400;\\n}\\n.slickgrid-container .grid-canvas .slick-row:hover {\\n  background-color: #ebfaef;\\n  box-shadow: none;\\n  z-index: 5;\\n}\\n.slickgrid-container .grid-canvas .slick-row.active {\\n  padding: 8px 7px;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight {\\n  background-color: #bff2c3;\\n  -webkit-animation: highlight-start 1.5s ease 1;\\n          animation: highlight-start 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight.odd {\\n  background-color: #bff2c3;\\n  -webkit-animation: highlight-start 1.5s ease 1;\\n          animation: highlight-start 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight.odd .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight-end {\\n  background-color: #bff2c3;\\n  -webkit-animation: highlight-end 1.5s ease 1;\\n          animation: highlight-end 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlight-end.odd {\\n  background-color: #bff2c3;\\n  -webkit-animation: highlight-end 1.5s ease 1;\\n          animation: highlight-end 1.5s ease 1;\\n}\\n.slickgrid-container .grid-canvas .slick-row.highlighter {\\n  background: orange !important;\\n  transition-property: background;\\n  transition-duration: 3s;\\n  transition-timing-function: ease-in;\\n}\\n.slickgrid-container .grid-canvas .slick-row.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd {\\n  background-color: #f5f5f5;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd:hover {\\n  background-color: #ebfaef;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell {\\n  background: inherit;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.selected {\\n  background-color: #d4f6d7;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell {\\n  background: inherit;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.selected {\\n  background-color: #d4f6d7;\\n}\\n.slickgrid-container .grid-canvas .slick-row.odd .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-row.slick-group-totals {\\n  color: #666666;\\n  background: #fff;\\n}\\n.slickgrid-container .grid-canvas .slick-row.slick-group-totals .slick-cell {\\n  font-size: 14px;\\n}\\n.slickgrid-container .grid-canvas .slick-cell, .slickgrid-container .grid-canvas .slick-headerrow-column {\\n  border-top: none;\\n  border-bottom: 1px transparent;\\n  border-left: 1px transparent;\\n  border-right: 1px transparent;\\n  box-shadow: inherit;\\n}\\n.slickgrid-container .grid-canvas .even {\\n  background-color: #ffffff;\\n}\\n.slickgrid-container .grid-canvas .slick-cell {\\n  padding: 8px 7px;\\n  font-size: 14px;\\n}\\n.slickgrid-container .grid-canvas .slick-cell td {\\n  font-size: 14px;\\n}\\nbody .slickgrid-container .grid-canvas .slick-cell {\\n  line-height: 20px;\\n}\\n.slickgrid-container .grid-canvas .slick-cell a, .slickgrid-container .grid-canvas .slick-cell a:visited, .slickgrid-container .grid-canvas .slick-cell .ui-widget-content a, .slickgrid-container .grid-canvas .slick-cell .ui-widget-content a:visited {\\n  color: #08c;\\n}\\n.slickgrid-container .grid-canvas .slick-cell a:hover, .slickgrid-container .grid-canvas .slick-cell .ui-widget-content a:hover {\\n  color: darker(#08c, 15%);\\n  border-bottom: none;\\n}\\n.slickgrid-container .grid-canvas .slick-cell table {\\n  height: 100%;\\n  padding: 0;\\n  background: none;\\n}\\n.slickgrid-container .grid-canvas .slick-cell td {\\n  padding: 0;\\n  vertical-align: middle;\\n  text-align: left;\\n}\\n.slickgrid-container .grid-canvas .slick-cell.selected {\\n  background-color: #d4f6d7;\\n}\\n.slickgrid-container .grid-canvas .slick-cell.copied {\\n  background: rgba(0, 0, 255, 0.2);\\n  transition: 0.5s background;\\n}\\n.slickgrid-container .grid-canvas .slick-cell select:not([multiple]).form-control {\\n  height: 100%;\\n  padding: 0;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-title {\\n  height: 24px;\\n  line-height: 24px;\\n  vertical-align: top;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-toggle {\\n  color: #009530;\\n  font-weight: normal;\\n  width: 22px;\\n  height: 20px;\\n  margin-right: 0;\\n  cursor: pointer;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-toggle.expanded:before {\\n  display: inline-block;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z\\\"></path></svg>');\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: calc(18px + 4px);\\n  width: 22px;\\n  vertical-align: bottom;\\n}\\n.slickgrid-container .grid-canvas .slick-cell .slick-group-toggle.collapsed:before {\\n  display: inline-block;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z\\\"></path></svg>');\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: calc(18px + 4px);\\n  width: 22px;\\n  vertical-align: bottom;\\n}\\n.slickgrid-container .slick-header {\\n  border-top: 0 none;\\n  border-right: 0 none;\\n  border-bottom: transparent;\\n  border-left: 0 none;\\n  width: 100%;\\n  box-shadow: none !important;\\n}\\n.slickgrid-container .slick-headerrow {\\n  border-bottom: 1px solid #d0d0d0;\\n  border-top: 0 none;\\n  border-left: 0 none;\\n  border-right: 0 none;\\n}\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column {\\n  border: none;\\n  padding: 8px 4px;\\n  background: #ffffff;\\n}\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column input,\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column select,\\n.slickgrid-container .slick-headerrow .slick-headerrow-columns .slick-headerrow-column textarea {\\n  margin-right: 0;\\n  padding: 0 6px;\\n  width: none;\\n  height: 27px;\\n  box-sizing: border-box;\\n}\\n.slickgrid-container .slick-header-columns {\\n  background: none;\\n  background-color: #ffffff;\\n  width: calc(100% - 16px);\\n}\\n.slickgrid-container .slick-header-columns .slick-header-sortable .slick-column-name {\\n  margin-left: 0;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column {\\n  height: calc(17px * 2);\\n  line-height: 14px;\\n  margin: 0;\\n  border-top: 0 none;\\n  border-right: 0 none;\\n  border-bottom: 0 none;\\n  border-left: 0 none;\\n  white-space: normal;\\n  /* like TH  */\\n  background: #ffffff;\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  color: rgba(0, 0, 0, 0.87);\\n  font-size: 12px;\\n  font-weight: 700;\\n  /* when sorting is possible and there's not yet a sort applied on the column\\n   we could display the sort ascending icon (with an opacity) as a hint */\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default {\\n  padding: 8px 7px;\\n  font-size: 14px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default td {\\n  font-size: 14px;\\n}\\nbody .slickgrid-container .slick-header-columns .slick-header-column.ui-state-default {\\n  line-height: 20px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column a, .slickgrid-container .slick-header-columns .slick-header-column a:visited {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column a:hover {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default {\\n  /* like TH  */\\n  background: #ffffff;\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  color: rgba(0, 0, 0, 0.87);\\n  font-size: 12px;\\n  font-weight: 700;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default a, .slickgrid-container .slick-header-columns .slick-header-column.ui-state-default a:visited {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-state-default a:hover {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.slick-header-column-sorted {\\n  font-style: normal;\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column:hover {\\n  color: #333;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column.ui-sortable-handle.ui-state-hover:not(.slick-header-column-sorted) .slick-sort-indicator:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z\\\"></path></svg>');\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: 18px;\\n  opacity: 0.5;\\n  display: inline-block;\\n  width: 18px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator {\\n  background: none;\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: 18px;\\n  position: absolute;\\n  display: inline-block;\\n  color: #009530;\\n  width: 8px;\\n  height: 5px;\\n  left: auto;\\n  right: 14px;\\n  top: calc((15px * 2) - 15px);\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator-numbered {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: 10px;\\n  position: absolute;\\n  display: inline-block;\\n  color: #009530;\\n  width: 8px;\\n  left: auto;\\n  right: 0px;\\n  top: calc(13px * 2);\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator-asc:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z\\\"></path></svg>');\\n  font-family: \\\"Material Design Icons\\\";\\n  font-size: 18px;\\n  opacity: 1;\\n  display: inline-block;\\n  width: 18px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-sort-indicator-desc:before {\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%23009530\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z\\\"></path></svg>');\\n  display: inline-block;\\n  opacity: 1;\\n  font-size: 18px;\\n  width: 18px;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-resizable-handle {\\n  width: 7px;\\n  right: 0;\\n  z-index: 1;\\n}\\n.slickgrid-container .slick-header-columns .slick-header-column .slick-resizable-handle:hover {\\n  border-bottom: 2px solid #83d9a0;\\n  border-left: 2px solid #83d9a0;\\n  border-right: 2px solid #83d9a0;\\n  border-top: 2px solid #83d9a0;\\n  width: 4px;\\n  border-radius: 8px;\\n  right: 0;\\n  height: 100%;\\n  top: 0;\\n  opacity: 0.4;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default {\\n  border-bottom: none;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns {\\n  border-top: none;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns .slick-header-column {\\n  height: 25px;\\n  border-left: none;\\n  border-right: 1px solid #e2e2e2;\\n  font-size: calc(14px + 3px);\\n  justify-content: left;\\n  display: inline-grid;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns .slick-header-column:first-child {\\n  border-left: none;\\n}\\n.slickgrid-container .slick-preheader-panel.ui-state-default .slick-header-columns .slick-header-column:last-child {\\n  border-right: none;\\n}\\n.slickgrid-container .slick-row .slick-cell.frozen:last-child,\\n.slickgrid-container .slick-footerrow-column.frozen:last-child {\\n  border-right: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-header-column.frozen:last-child {\\n  border-right: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-pane-left .slick-preheader-panel .slick-header-column.frozen:last-child {\\n  border-right: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-headerrow-column.frozen:last-child {\\n  border-right: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-pane-bottom {\\n  border-top: 1px solid #a5a5a5;\\n}\\n.slickgrid-container .slick-viewport-bottom.slick-viewport-right {\\n  overflow-y: scroll !important;\\n}\\n.slickgrid-container .input-group > :not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback) {\\n  margin-left: 0;\\n}\\n.slickgrid-container .input-group > :not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback).ui-slider-horizontal {\\n  margin-left: 10px;\\n}\\n.slickgrid-container .input-group .input-group-addon .input-group-text {\\n  height: 100%;\\n}\\n.slickgrid-container .input-group .input-group-addon.input-group-append .input-group-text {\\n  margin-left: -1px;\\n  border-top-left-radius: 0;\\n  border-bottom-left-radius: 0;\\n}\\n.slickgrid-container .input-group .input-group-addon.input-group-prepend .input-group-text {\\n  margin-right: -1px;\\n  border-top-right-radius: 0;\\n  border-bottom-right-radius: 0;\\n}\\n/*\\n * Angular-SlickGrid theming variables, used by all Themes\\n * Lib Website (https://github.com/ghiscoding/angular-slickgrid)\\n * Licensed under MIT (https://github.com/ghiscoding/angular-slickgrid/blob/master/LICENSE)\\n */\\n/* Slickgrid container, including headers but excluding pagination */\\n/* grid */\\n/* cell */\\n/** 4x available slick-pane (top, bottom, left, right) */\\n/* row */\\n/* Pre-Header - Header Grouping colspan */\\n/* full height is calculated with cell padding + borders (25px + 5px + 0px + 0px) = 30px must be set as preHeaderPanelHeight */\\n/* header */\\n/* Frozen pinned rows/columns */\\n/* icon font is using Font-Awesome by default but could be changed to any other icon package like Glyphicons, ... */\\n/* AutoComplete */\\n/** AutoComplte with Custom Styling (2 rows) */\\n/* left/right */\\n/* top/bottom */\\n/** AutoComplte with Custom Styling (4 corners) */\\n/* left/right */\\n/* top/bottom */\\n/* Sorting */\\n/* Grouping Totals Formatter */\\n/* Column picker */\\n/* trick to cheat the width to include extra scrollbar width in addition to auto width */\\n/** Detail View Plugin */\\n/* Excel copy plugin */\\n/* Grid Menu - hamburger menu */\\n/* (Action) Cell Menu Plugin */\\n/* Context Menu Plugin */\\n/* Header Menu Plugin */\\n/* can be none or inline-block */\\n/* Checkbox Selector / Row Selection */\\n/* Editors */\\n/* negative number to cancel inside padding */\\n/* Compound Filters */\\n/** Date Range Filters */\\n/* Draggable Grouping Plugin */\\n/* Input Slider Filter (vanilla html) */\\n/* ms only */\\n/* ms only */\\n/* Input Range Slider Filter (with jQuery UI) */\\n/* Multiple-Select Filter */\\n/* pagination variables */\\n/* Row Move Manager Plugin */\\n/* selector plugin */\\n/* Viewport */\\n/* Custom Footer */\\n/** Empty Data Warning element */\\n.autocomplete-container {\\n  display: flex;\\n}\\n.ui-widget-content {\\n  background: none;\\n}\\n.ui-autocomplete .ui-menu-item {\\n  color: #333333;\\n}\\n.ui-autocomplete .ui-menu-item .ui-state-active {\\n  color: #333333;\\n}\\n.ui-autocomplete .ui-menu-item .ui-state-active:hover {\\n  margin: 0;\\n  border: 0;\\n  color: #333333;\\n}\\n.ui-autocomplete {\\n  background: none;\\n  position: absolute;\\n  z-index: 9999;\\n  padding: 0;\\n  margin-top: 2px;\\n  list-style: none;\\n  background-color: #ffffff;\\n  border: 1px solid rgba(0, 0, 0, 0.15);\\n  border-radius: 4px;\\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\\n  background-clip: padding-box;\\n  max-height: 25vh;\\n  min-height: 75px;\\n  min-width: 50px;\\n  overflow-y: auto;\\n  overflow-x: hidden;\\n  text-overflow: ellipsis;\\n}\\n.ui-autocomplete li div {\\n  display: block;\\n  color: #333333;\\n  padding: 3px 15px;\\n  font-weight: normal;\\n  line-height: 1.42857143;\\n  white-space: nowrap;\\n  list-style-image: none;\\n}\\n/* jquery ui loading spinner */\\n@keyframes md-spin {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n.ui-autocomplete-loading + span:after {\\n  -webkit-animation: md-spin 2s infinite linear;\\n          animation: md-spin 2s infinite linear;\\n  display: inline-block;\\n  font-family: \\\"Material Design Icons\\\";\\n  color: #3f3e3e;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M16,13V11H21V13H16M14.83,7.76L17.66,4.93L19.07,6.34L16.24,9.17L14.83,7.76M11,16H13V21H11V16M11,3H13V8H11V3M4.93,17.66L7.76,14.83L9.17,16.24L6.34,19.07L4.93,17.66M4.93,6.34L6.34,4.93L9.17,7.76L7.76,9.17L4.93,6.34M8,13H3V11H8V13M19.07,17.66L17.66,19.07L14.83,16.24L16.24,14.83L19.07,17.66Z\\\"></path></svg>') !important;\\n  /* important is required to override default jquery-ui styling */\\n  width: 22px;\\n  margin-left: -26px;\\n  line-height: 0px;\\n  vertical-align: sub;\\n}\\n.ui-state-hover,\\n.ui-state-active,\\n.ui-state-focus {\\n  cursor: pointer;\\n  text-decoration: none;\\n  color: #262626;\\n  background-color: #dff7e5;\\n}\\n.ui-helper-hidden-accessible {\\n  border: 0;\\n  clip: rect(0 0 0 0);\\n  height: 1px;\\n  margin: -1px;\\n  overflow: hidden;\\n  position: absolute;\\n  padding: 0;\\n  width: 1px;\\n}\\n/* autocomplete custom styling */\\n.ui-autocomplete.autocomplete-custom-four-corners {\\n  width: 385px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list {\\n  width: calc(385px - 15px);\\n  padding: 3px 10px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list div {\\n  margin: 0;\\n  padding: 0;\\n  line-height: 16px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-left {\\n  float: left;\\n  height: 32px;\\n  width: 32px;\\n  padding-right: 3px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-left > img {\\n  height: 32px;\\n  width: 32px;\\n  margin-top: 0px;\\n  background-color: #ffffff;\\n  background-clip: content-box;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-bottom-left {\\n  color: #686868;\\n  font-size: calc(12px - 1px);\\n  font-style: italic;\\n  font-weight: normal;\\n  max-width: calc(calc(385px - 15px) - 32px - (10px * 2));\\n  display: inline-block;\\n  /*margin-left: 30px;*/\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-bottom-right {\\n  float: right;\\n  color: #686868;\\n  font-size: calc(12px - 1px);\\n  font-style: italic;\\n  font-weight: normal;\\n  /*margin-left: 30px;*/\\n  text-overflow: ellipsis;\\n  max-width: 250px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-top-left {\\n  color: #313131;\\n  font-style: normal;\\n  font-size: 12px;\\n  font-weight: bold;\\n  max-width: calc(calc(385px - 15px) - 32px - (10px * 2));\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  padding-left: 1px;\\n}\\n.ui-autocomplete.autocomplete-custom-four-corners li div.autocomplete-container-list .autocomplete-top-right {\\n  float: right;\\n  color: #00b93c;\\n  font-style: normal;\\n  font-size: calc(12px - 1px);\\n  font-weight: bold;\\n  max-width: 100px;\\n}\\n/* autocomplete custom styling */\\n.ui-autocomplete.autocomplete-custom-two-rows {\\n  width: 285px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list {\\n  width: calc(285px - 15px);\\n  padding: 3px 10px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list div {\\n  margin: 0;\\n  padding: 0;\\n  line-height: 16px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-left {\\n  float: left;\\n  height: 32px;\\n  width: 32px;\\n  padding-right: 3px;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-left > img {\\n  height: 32px;\\n  margin-top: 0px;\\n  background-color: #ffffff;\\n  background-clip: content-box;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-bottom-left {\\n  color: #686868;\\n  font-size: calc(12px - 1px);\\n  font-style: italic;\\n  font-weight: normal;\\n  max-width: calc(calc(285px - 15px) - 32px - (10px * 2));\\n  /*margin-left: 30px;*/\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n.ui-autocomplete.autocomplete-custom-two-rows li div.autocomplete-container-list .autocomplete-top-left {\\n  color: #313131;\\n  font-style: normal;\\n  font-size: 12px;\\n  font-weight: bold;\\n  max-width: calc(calc(285px - 15px) - 32px - (10px * 2));\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  padding-left: 1px;\\n}\\n.mdi.mdi-alert-circle:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M13,13H11V7H13M13,17H11V15H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-alert-octagon:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M13 13H11V7H13M11 15H13V17H11M15.73 3H8.27L3 8.27V15.73L8.27 21H15.73L21 15.73V8.27L15.73 3Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-arrow-collapse:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19.5,3.09L15,7.59V4H13V11H20V9H16.41L20.91,4.5L19.5,3.09M4,13V15H7.59L3.09,19.5L4.5,20.91L9,16.41V20H11V13H4Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-arrow-down-bold-box:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M5,3H19A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5A2,2 0 0,1 3,19V5A2,2 0 0,1 5,3M12,17L17,12H14V8H10V12H7L12,17Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-arrow-down-bold-box-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M12,17L7,12H10V8H14V12H17L12,17M5,3H19A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5A2,2 0 0,1 3,19V5A2,2 0 0,1 5,3M5,5V19H19V5H5Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-arrow-expand:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M10,21V19H6.41L10.91,14.5L9.5,13.09L5,17.59V14H3V21H10M14.5,10.91L19,6.41V10H21V3H14V5H17.59L13.09,9.5L14.5,10.91Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-call-split:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M14,4L16.29,6.29L13.41,9.17L14.83,10.59L17.71,7.71L20,10V4M10,4H4V10L6.29,7.71L11,12.41V20H13V11.59L7.71,6.29\\\"></path>      </svg>');\\n}\\n.mdi.mdi-cancel:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M12 2C17.5 2 22 6.5 22 12S17.5 22 12 22 2 17.5 2 12 6.5 2 12 2M12 4C10.1 4 8.4 4.6 7.1 5.7L18.3 16.9C19.3 15.5 20 13.8 20 12C20 7.6 16.4 4 12 4M16.9 18.3L5.7 7.1C4.6 8.4 4 10.1 4 12C4 16.4 7.6 20 12 20C13.9 20 15.6 19.4 16.9 18.3Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-cash-check:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M3 6V18H13.32C13.1 17.33 13 16.66 13 16H7C7 14.9 6.11 14 5 14V10C6.11 10 7 9.11 7 8H17C17 9.11 17.9 10 19 10V10.06C19.67 10.06 20.34 10.18 21 10.4V6H3M12 9C10.3 9.03 9 10.3 9 12C9 13.7 10.3 14.94 12 15C12.38 15 12.77 14.92 13.14 14.77C13.41 13.67 13.86 12.63 14.97 11.61C14.85 10.28 13.59 8.97 12 9M21.63 12.27L17.76 16.17L16.41 14.8L15 16.22L17.75 19L23.03 13.68L21.63 12.27Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-cash-remove:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M15.46 18.12L16.88 19.54L19 17.41L21.12 19.54L22.54 18.12L20.41 16L22.54 13.88L21.12 12.46L19 14.59L16.88 12.46L15.46 13.88L17.59 16M14.97 11.62C14.86 10.28 13.58 8.97 12 9C10.3 9.04 9 10.3 9 12C9 13.7 10.3 14.94 12 15C12.39 15 12.77 14.92 13.14 14.77C13.41 13.67 13.86 12.63 14.97 11.62M13 16H7C7 14.9 6.1 14 5 14V10C6.1 10 7 9.1 7 8H17C17 9.1 17.9 10 19 10V10.05C19.67 10.06 20.34 10.18 21 10.4V6H3V18H13.32C13.1 17.33 13 16.66 13 16Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-check:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-checkbox-blank-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-check-box-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M19,5V19H5V5H19M10,17L6,13L7.41,11.58L10,14.17L16.59,7.58L18,9\\\"></path>      </svg>');\\n}\\n.mdi.mdi-checkbox-marked:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-check-circle:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-check-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19.78,2.2L24,6.42L8.44,22L0,13.55L4.22,9.33L8.44,13.55L19.78,2.2M19.78,5L8.44,16.36L4.22,12.19L2.81,13.55L8.44,19.17L21.19,6.42L19.78,5Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-chevron-down:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-chevron-down-box:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,3H5A2,2 0 0,0 3,5V19C3,20.11 3.9,21 5,21H19C20.11,21 21,20.11 21,19V5A2,2 0 0,0 19,3M12,15.71L6,9.71L7.41,8.29L12,12.88L16.59,8.29L18,9.71L12,15.71Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-chevron-down-box-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,3H5A2,2 0 0,0 3,5V19C3,20.11 3.9,21 5,21H19C20.11,21 21,20.11 21,19V5A2,2 0 0,0 19,3M19,19H5V5H19V19M7.41,8.29L12,12.88L16.59,8.29L18,9.71L12,15.71L6,9.71L7.41,8.29Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-chevron-down-circle:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2A10,10 0 0,1 22,12M6,10L12,16L18,10L16.6,8.6L12,13.2L7.4,8.6L6,10Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-chevron-down-circle-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2A10,10 0 0,1 22,12M20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,12M6,10L12,16L18,10L16.6,8.6L12,13.2L7.4,8.6L6,10Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-close:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-close-circle:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-close-circle-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2C6.47,2 2,6.47 2,12C2,17.53 6.47,22 12,22C17.53,22 22,17.53 22,12C22,6.47 17.53,2 12,2M14.59,8L12,10.59L9.41,8L8,9.41L10.59,12L8,14.59L9.41,16L12,13.41L14.59,16L16,14.59L13.41,12L16,9.41L14.59,8Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-close-thick:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M20 6.91L17.09 4L12 9.09L6.91 4L4 6.91L9.09 12L4 17.09L6.91 20L12 14.91L17.09 20L20 17.09L14.91 12L20 6.91Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-content-copy:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-currency-usd:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M7,15H9C9,16.08 10.37,17 12,17C13.63,17 15,16.08 15,15C15,13.9 13.96,13.5 11.76,12.97C9.64,12.44 7,11.78 7,9C7,7.21 8.47,5.69 10.5,5.18V3H13.5V5.18C15.53,5.69 17,7.21 17,9H15C15,7.92 13.63,7 12,7C10.37,7 9,7.92 9,9C9,10.1 10.04,10.5 12.24,11.03C14.36,11.56 17,12.22 17,15C17,16.79 15.53,18.31 13.5,18.82V21H10.5V18.82C8.47,18.31 7,16.79 7,15Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-currency-usd-off:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M3,4.27L4.28,3L21,19.72L19.73,21L16.06,17.33C15.44,18 14.54,18.55 13.5,18.82V21H10.5V18.82C8.47,18.31 7,16.79 7,15H9C9,16.08 10.37,17 12,17C13.13,17 14.14,16.56 14.65,15.92L11.68,12.95C9.58,12.42 7,11.75 7,9C7,8.77 7,8.55 7.07,8.34L3,4.27M10.5,5.18V3H13.5V5.18C15.53,5.69 17,7.21 17,9H15C15,7.92 13.63,7 12,7C11.63,7 11.28,7.05 10.95,7.13L9.4,5.58L10.5,5.18Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-database-refresh:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M12 3C16.42 3 20 4.79 20 7C20 9.21 16.42 11 12 11C7.58 11 4 9.21 4 7C4 4.79 7.58 3 12 3M4 9C4 11.21 7.58 13 12 13C13.11 13 14.18 12.89 15.14 12.68C14.19 13.54 13.5 14.67 13.18 15.96L12 16C7.58 16 4 14.21 4 12V9M20 9V11L19.5 11L18.9 11.03C19.6 10.43 20 9.74 20 9M4 14C4 16.21 7.58 18 12 18L13 17.97C13.09 19.03 13.42 20 13.95 20.88L12 21C7.58 21 4 19.21 4 17V14M19 13.5C20.11 13.5 21.11 13.95 21.83 14.67L23 13.5V17.5H19L20.77 15.73C20.32 15.28 19.69 15 19 15C17.62 15 16.5 16.12 16.5 17.5C16.5 18.88 17.62 20 19 20C19.82 20 20.54 19.61 21 19H22.71C22.12 20.47 20.68 21.5 19 21.5C16.79 21.5 15 19.71 15 17.5C15 15.29 16.79 13.5 19 13.5Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-download:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-file-document-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M6,2A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6M6,4H13V9H18V20H6V4M8,12V14H16V12H8M8,16V18H13V16H8Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-file-excel-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M14 2H6C4.89 2 4 2.9 4 4V20C4 21.11 4.89 22 6 22H18C19.11 22 20 21.11 20 20V8L14 2M18 20H6V4H13V9H18V20M12.9 14.5L15.8 19H14L12 15.6L10 19H8.2L11.1 14.5L8.2 10H10L12 13.4L14 10H15.8L12.9 14.5Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-file-music-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M14,2L20,8V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V4A2,2 0 0,1 6,2H14M18,20V9H13V4H6V20H18M13,10V12H11V17A2,2 0 0,1 9,19A2,2 0 0,1 7,17A2,2 0 0,1 9,15C9.4,15 9.7,15.1 10,15.3V10H13Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-file-pdf-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M14,2L20,8V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V4A2,2 0 0,1 6,2H14M18,20V9H13V4H6V20H18M10.92,12.31C10.68,11.54 10.15,9.08 11.55,9.04C12.95,9 12.03,12.16 12.03,12.16C12.42,13.65 14.05,14.72 14.05,14.72C14.55,14.57 17.4,14.24 17,15.72C16.57,17.2 13.5,15.81 13.5,15.81C11.55,15.95 10.09,16.47 10.09,16.47C8.96,18.58 7.64,19.5 7.1,18.61C6.43,17.5 9.23,16.07 9.23,16.07C10.68,13.72 10.9,12.35 10.92,12.31M11.57,13.15C11.17,14.45 10.37,15.84 10.37,15.84C11.22,15.5 13.08,15.11 13.08,15.11C11.94,14.11 11.59,13.16 11.57,13.15M14.71,15.32C14.71,15.32 16.46,15.97 16.5,15.71C16.57,15.44 15.17,15.2 14.71,15.32M9.05,16.81C8.28,17.11 7.54,18.39 7.72,18.39C7.9,18.4 8.63,17.79 9.05,16.81M11.57,11.26C11.57,11.21 12,9.58 11.57,9.53C11.27,9.5 11.56,11.22 11.57,11.26Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-filter-remove-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M14.73,20.83L17.58,18L14.73,15.17L16.15,13.76L19,16.57L21.8,13.76L23.22,15.17L20.41,18L23.22,20.83L21.8,22.24L19,19.4L16.15,22.24L14.73,20.83M13,19.88C13.04,20.18 12.94,20.5 12.71,20.71C12.32,21.1 11.69,21.1 11.3,20.71L7.29,16.7C7.06,16.47 6.96,16.16 7,15.87V10.75L2.21,4.62C1.87,4.19 1.95,3.56 2.38,3.22C2.57,3.08 2.78,3 3,3V3H17V3C17.22,3 17.43,3.08 17.62,3.22C18.05,3.56 18.13,4.19 17.79,4.62L13,10.75V19.88M5.04,5L9,10.06V15.58L11,17.58V10.05L14.96,5H5.04Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-flip-vertical:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M3 15V17H5V15M15 19V21H17V19M19 3H5C3.9 3 3 3.9 3 5V9H5V5H19V9H21V5C21 3.9 20.1 3 19 3M21 19H19V21C20.1 21 21 20.1 21 19M1 11V13H23V11M7 19V21H9V19M19 15V17H21V15M11 19V21H13V19M3 19C3 20.1 3.9 21 5 21V19Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-folder:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-folder-open:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,20H4C2.89,20 2,19.1 2,18V6C2,4.89 2.89,4 4,4H10L12,6H19A2,2 0 0,1 21,8H21L4,8V18L6.14,10H23.21L20.93,18.5C20.7,19.37 19.92,20 19,20Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-help-circle:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M15.07,11.25L14.17,12.17C13.45,12.89 13,13.5 13,15H11V14.5C11,13.39 11.45,12.39 12.17,11.67L13.41,10.41C13.78,10.05 14,9.55 14,9C14,7.89 13.1,7 12,7A2,2 0 0,0 10,9H8A4,4 0 0,1 12,5A4,4 0 0,1 16,9C16,9.88 15.64,10.67 15.07,11.25M13,19H11V17H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12C22,6.47 17.5,2 12,2Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-help-circle-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M11,18H13V16H11V18M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,6A4,4 0 0,0 8,10H10A2,2 0 0,1 12,8A2,2 0 0,1 14,10C14,12 11,11.75 11,15H13C13,12.75 16,12.5 16,10A4,4 0 0,0 12,6Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-history:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M13.5,8H12V13L16.28,15.54L17,14.33L13.5,12.25V8M13,3A9,9 0 0,0 4,12H1L4.96,16.03L9,12H6A7,7 0 0,1 13,5A7,7 0 0,1 20,12A7,7 0 0,1 13,19C11.07,19 9.32,18.21 8.06,16.94L6.64,18.36C8.27,20 10.5,21 13,21A9,9 0 0,0 22,12A9,9 0 0,0 13,3\\\"></path>      </svg>');\\n}\\n.mdi.mdi-information:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-information-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M11,17H13V11H11V17Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-link:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M3.9,12C3.9,10.29 5.29,8.9 7,8.9H11V7H7A5,5 0 0,0 2,12A5,5 0 0,0 7,17H11V15.1H7C5.29,15.1 3.9,13.71 3.9,12M8,13H16V11H8V13M17,7H13V8.9H17C18.71,8.9 20.1,10.29 20.1,12C20.1,13.71 18.71,15.1 17,15.1H13V17H17A5,5 0 0,0 22,12A5,5 0 0,0 17,7Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-link-variant:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M10.59,13.41C11,13.8 11,14.44 10.59,14.83C10.2,15.22 9.56,15.22 9.17,14.83C7.22,12.88 7.22,9.71 9.17,7.76V7.76L12.71,4.22C14.66,2.27 17.83,2.27 19.78,4.22C21.73,6.17 21.73,9.34 19.78,11.29L18.29,12.78C18.3,11.96 18.17,11.14 17.89,10.36L18.36,9.88C19.54,8.71 19.54,6.81 18.36,5.64C17.19,4.46 15.29,4.46 14.12,5.64L10.59,9.17C9.41,10.34 9.41,12.24 10.59,13.41M13.41,9.17C13.8,8.78 14.44,8.78 14.83,9.17C16.78,11.12 16.78,14.29 14.83,16.24V16.24L11.29,19.78C9.34,21.73 6.17,21.73 4.22,19.78C2.27,17.83 2.27,14.66 4.22,12.71L5.71,11.22C5.7,12.04 5.83,12.86 6.11,13.65L5.64,14.12C4.46,15.29 4.46,17.19 5.64,18.36C6.81,19.54 8.71,19.54 9.88,18.36L13.41,14.83C14.59,13.66 14.59,11.76 13.41,10.59C13,10.2 13,9.56 13.41,9.17Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-menu:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-microsoft-excel:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M21.17 3.25Q21.5 3.25 21.76 3.5 22 3.74 22 4.08V19.92Q22 20.26 21.76 20.5 21.5 20.75 21.17 20.75H7.83Q7.5 20.75 7.24 20.5 7 20.26 7 19.92V17H2.83Q2.5 17 2.24 16.76 2 16.5 2 16.17V7.83Q2 7.5 2.24 7.24 2.5 7 2.83 7H7V4.08Q7 3.74 7.24 3.5 7.5 3.25 7.83 3.25M7 13.06L8.18 15.28H9.97L8 12.06L9.93 8.89H8.22L7.13 10.9L7.09 10.96L7.06 11.03Q6.8 10.5 6.5 9.96 6.25 9.43 5.97 8.89H4.16L6.05 12.08L4 15.28H5.78M13.88 19.5V17H8.25V19.5M13.88 15.75V12.63H12V15.75M13.88 11.38V8.25H12V11.38M13.88 7V4.5H8.25V7M20.75 19.5V17H15.13V19.5M20.75 15.75V12.63H15.13V15.75M20.75 11.38V8.25H15.13V11.38M20.75 7V4.5H15.13V7Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-minus:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,13H5V11H19V13Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-page-first:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M18.41,16.59L13.82,12L18.41,7.41L17,6L11,12L17,18L18.41,16.59M6,6H8V18H6V6Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-page-last:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M5.59,7.41L10.18,12L5.59,16.59L7,18L13,12L7,6L5.59,7.41M16,6H18V18H16V6Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-paperclip:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M16.5,6V17.5A4,4 0 0,1 12.5,21.5A4,4 0 0,1 8.5,17.5V5A2.5,2.5 0 0,1 11,2.5A2.5,2.5 0 0,1 13.5,5V15.5A1,1 0 0,1 12.5,16.5A1,1 0 0,1 11.5,15.5V6H10V15.5A2.5,2.5 0 0,0 12.5,18A2.5,2.5 0 0,0 15,15.5V5A4,4 0 0,0 11,1A4,4 0 0,0 7,5V17.5A5.5,5.5 0 0,0 12.5,23A5.5,5.5 0 0,0 18,17.5V6H16.5Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-pin-off-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M8,6.2V4H7V2H17V4H16V12L18,14V16H17.8L14,12.2V4H10V8.2L8,6.2M20,20.7L18.7,22L12.8,16.1V22H11.2V16H6V14L8,12V11.3L2,5.3L3.3,4L20,20.7M8.8,14H10.6L9.7,13.1L8.8,14Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-pin-outline:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M16,12V4H17V2H7V4H8V12L6,14V16H11.2V22H12.8V16H18V14L16,12M8.8,14L10,12.8V4H14V12.8L15.2,14H8.8Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-playlist-plus:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M2,16H10V14H2M18,14V10H16V14H12V16H16V20H18V16H22V14M14,6H2V8H14M14,10H2V12H14V10Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-playlist-remove:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M2,6V8H14V6H2M2,10V12H11V10H2M14.17,10.76L12.76,12.17L15.59,15L12.76,17.83L14.17,19.24L17,16.41L19.83,19.24L21.24,17.83L18.41,15L21.24,12.17L19.83,10.76L17,13.59L14.17,10.76M2,14V16H11V14H2Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-plus:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-redo:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M18.4,10.6C16.55,9 14.15,8 11.5,8C6.85,8 2.92,11.03 1.54,15.22L3.9,16C4.95,12.81 7.95,10.5 11.5,10.5C13.45,10.5 15.23,11.22 16.62,12.38L13,16H22V7L18.4,10.6Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-refresh:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M17.65,6.35C16.2,4.9 14.21,4 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20C15.73,20 18.84,17.45 19.73,14H17.65C16.83,16.33 14.61,18 12,18A6,6 0 0,1 6,12A6,6 0 0,1 12,6C13.66,6 15.14,6.69 16.22,7.78L13,11H20V4L17.65,6.35Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-shape-square-plus:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19,5H22V7H19V10H17V7H14V5H17V2H19V5M17,19V13H19V21H3V5H11V7H5V19H17Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-sort-ascending:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19 17H22L18 21L14 17H17V3H19M2 17H12V19H2M6 5V7H2V5M2 11H9V13H2V11Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-sort-descending:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M19 7H22L18 3L14 7H17V21H19M2 17H12V19H2M6 5V7H2V5M2 11H9V13H2V11Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-swap-horizontal:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M21,9L17,5V8H10V10H17V13M7,11L3,15L7,19V16H14V14H7V11Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-swap-vertical:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M9,3L5,7H8V14H10V7H13M16,17V10H14V17H11L15,21L19,17H16Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-sync:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M12,18A6,6 0 0,1 6,12C6,11 6.25,10.03 6.7,9.2L5.24,7.74C4.46,8.97 4,10.43 4,12A8,8 0 0,0 12,20V23L16,19L12,15M12,4V1L8,5L12,9V6A6,6 0 0,1 18,12C18,13 17.75,13.97 17.3,14.8L18.76,16.26C19.54,15.03 20,13.57 20,12A8,8 0 0,0 12,4Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-sync-circle:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M2 12A10 10 0 1 0 12 2A10 10 0 0 0 2 12M15.6 13.72A4 4 0 0 0 16 12A4 4 0 0 0 12 8V10L8.88 7L12 4V6A6 6 0 0 1 18 12A5.9 5.9 0 0 1 17.07 15.19M6 12A5.9 5.9 0 0 1 6.93 8.81L8.4 10.28A4 4 0 0 0 8 12A4 4 0 0 0 12 16V14L15 17L12 20V18A6 6 0 0 1 6 12Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-table-edit:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M21.7,13.35L20.7,14.35L18.65,12.3L19.65,11.3C19.86,11.08 20.21,11.08 20.42,11.3L21.7,12.58C21.92,12.79 21.92,13.14 21.7,13.35M12,18.94L18.07,12.88L20.12,14.93L14.06,21H12V18.94M4,2H18A2,2 0 0,1 20,4V8.17L16.17,12H12V16.17L10.17,18H4A2,2 0 0,1 2,16V4A2,2 0 0,1 4,2M4,6V10H10V6H4M12,6V10H18V6H12M4,12V16H10V12H4Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-table-refresh:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M18 14.5C19.11 14.5 20.11 14.95 20.83 15.67L22 14.5V18.5H18L19.77 16.73C19.32 16.28 18.69 16 18 16C16.62 16 15.5 17.12 15.5 18.5C15.5 19.88 16.62 21 18 21C18.82 21 19.55 20.61 20 20H21.71C21.12 21.47 19.68 22.5 18 22.5C15.79 22.5 14 20.71 14 18.5C14 16.29 15.79 14.5 18 14.5M4 3H18C19.11 3 20 3.9 20 5V12.17C19.5 12.06 19 12 18.5 12C17.23 12 16.04 12.37 15.04 13H12V17H12.18C12.06 17.5 12 18 12 18.5L12 19H4C2.9 19 2 18.11 2 17V5C2 3.9 2.9 3 4 3M4 7V11H10V7H4M12 7V11H18V7H12M4 13V17H10V13H4Z\\\"></path>      </svg>');\\n}\\n.mdi.mdi-undo:before {\\n  height: 18px;\\n  width: 18px;\\n  display: inline-block;\\n  vertical-align: bottom;\\n  margin-top: -1px;\\n  content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"%233F3E3E\\\" viewBox=\\\"0 0 24 24\\\">        <path d=\\\"M12.5,8C9.85,8 7.45,9 5.6,10.6L2,7V16H11L7.38,12.38C8.77,11.22 10.54,10.5 12.5,10.5C16.04,10.5 19.05,12.81 20.1,16L22.47,15.22C21.08,11.03 17.15,8 12.5,8Z\\\"></path>      </svg>');\\n}\\n@-webkit-keyframes md-spin {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n@keyframes md-spin {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n.mdi.mdi-flip-h {\\n  transform: scaleX(-1);\\n}\\n.mdi.mdi-flip-v {\\n  transform: scaleY(-1);\\n}\\n.mdi.mdi-pulse {\\n  -webkit-animation: md-spin 1s infinite steps(8);\\n          animation: md-spin 1s infinite steps(8);\\n}\\n.mdi.mdi-spin {\\n  -webkit-animation: md-spin 2s infinite linear;\\n          animation: md-spin 2s infinite linear;\\n}\\n.mdi.mdi-rotate-45 {\\n  transform: rotate(45deg);\\n}\\n.mdi.mdi-rotate-90 {\\n  transform: rotate(90deg);\\n}\\n.mdi.mdi-rotate-135 {\\n  transform: rotate(135deg);\\n}\\n.mdi.mdi-rotate-180 {\\n  transform: rotate(180deg);\\n}\\n.mdi.mdi-rotate-220 {\\n  transform: rotate(220deg);\\n}\\n.mdi.mdi-rotate-270 {\\n  transform: rotate(270deg);\\n}\\n.mdi.mdi-rotate-315 {\\n  transform: rotate(315deg);\\n}\\n.mdi.mdi-rotate-45, .mdi .mdi-rotate-90, .mdi .mdi-rotate-135, .mdi .mdi-rotate-180, .mdi .mdi-rotate-220 .mdi-rotate-270, .mdi .mdi-rotate-315 {\\n  filter: none;\\n}\\n.mdi.mdi-5px:before {\\n  height: 5px;\\n  width: 5px;\\n}\\n.mdi.mdi-6px:before {\\n  height: 6px;\\n  width: 6px;\\n}\\n.mdi.mdi-7px:before {\\n  height: 7px;\\n  width: 7px;\\n}\\n.mdi.mdi-8px:before {\\n  height: 8px;\\n  width: 8px;\\n}\\n.mdi.mdi-9px:before {\\n  height: 9px;\\n  width: 9px;\\n}\\n.mdi.mdi-10px:before {\\n  height: 10px;\\n  width: 10px;\\n}\\n.mdi.mdi-11px:before {\\n  height: 11px;\\n  width: 11px;\\n}\\n.mdi.mdi-12px:before {\\n  height: 12px;\\n  width: 12px;\\n}\\n.mdi.mdi-13px:before {\\n  height: 13px;\\n  width: 13px;\\n}\\n.mdi.mdi-14px:before {\\n  height: 14px;\\n  width: 14px;\\n}\\n.mdi.mdi-15px:before {\\n  height: 15px;\\n  width: 15px;\\n}\\n.mdi.mdi-16px:before {\\n  height: 16px;\\n  width: 16px;\\n}\\n.mdi.mdi-17px:before {\\n  height: 17px;\\n  width: 17px;\\n}\\n.mdi.mdi-18px:before {\\n  height: 18px;\\n  width: 18px;\\n}\\n.mdi.mdi-19px:before {\\n  height: 19px;\\n  width: 19px;\\n}\\n.mdi.mdi-20px:before {\\n  height: 20px;\\n  width: 20px;\\n}\\n.mdi.mdi-21px:before {\\n  height: 21px;\\n  width: 21px;\\n}\\n.mdi.mdi-22px:before {\\n  height: 22px;\\n  width: 22px;\\n}\\n.mdi.mdi-23px:before {\\n  height: 23px;\\n  width: 23px;\\n}\\n.mdi.mdi-24px:before {\\n  height: 24px;\\n  width: 24px;\\n}\\n.mdi.mdi-25px:before {\\n  height: 25px;\\n  width: 25px;\\n}\\n.mdi.mdi-26px:before {\\n  height: 26px;\\n  width: 26px;\\n}\\n.mdi.mdi-27px:before {\\n  height: 27px;\\n  width: 27px;\\n}\\n.mdi.mdi-28px:before {\\n  height: 28px;\\n  width: 28px;\\n}\\n.mdi.mdi-29px:before {\\n  height: 29px;\\n  width: 29px;\\n}\\n.mdi.mdi-30px:before {\\n  height: 30px;\\n  width: 30px;\\n}\\n.mdi.mdi-31px:before {\\n  height: 31px;\\n  width: 31px;\\n}\\n.mdi.mdi-32px:before {\\n  height: 32px;\\n  width: 32px;\\n}\\n.mdi.mdi-33px:before {\\n  height: 33px;\\n  width: 33px;\\n}\\n.mdi.mdi-34px:before {\\n  height: 34px;\\n  width: 34px;\\n}\\n.mdi.mdi-35px:before {\\n  height: 35px;\\n  width: 35px;\\n}\\n.mdi.mdi-36px:before {\\n  height: 36px;\\n  width: 36px;\\n}\\n.mdi.mdi-37px:before {\\n  height: 37px;\\n  width: 37px;\\n}\\n.mdi.mdi-38px:before {\\n  height: 38px;\\n  width: 38px;\\n}\\n.mdi.mdi-39px:before {\\n  height: 39px;\\n  width: 39px;\\n}\\n.mdi.mdi-40px:before {\\n  height: 40px;\\n  width: 40px;\\n}\\n.mdi.mdi-41px:before {\\n  height: 41px;\\n  width: 41px;\\n}\\n.mdi.mdi-42px:before {\\n  height: 42px;\\n  width: 42px;\\n}\\n.mdi.mdi-43px:before {\\n  height: 43px;\\n  width: 43px;\\n}\\n.mdi.mdi-44px:before {\\n  height: 44px;\\n  width: 44px;\\n}\\n.mdi.mdi-45px:before {\\n  height: 45px;\\n  width: 45px;\\n}\\n.mdi.mdi-46px:before {\\n  height: 46px;\\n  width: 46px;\\n}\\n.mdi.mdi-47px:before {\\n  height: 47px;\\n  width: 47px;\\n}\\n.mdi.mdi-48px:before {\\n  height: 48px;\\n  width: 48px;\\n}\\n.mdi.mdi-49px:before {\\n  height: 49px;\\n  width: 49px;\\n}\\n.mdi.mdi-50px:before {\\n  height: 50px;\\n  width: 50px;\\n}\\n/* icon/text colors */\\n.color-primary {\\n  filter: saturate(0%) brightness(0%) invert(29.2156862745%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0          0 0 0 0 0.5843137255          0 0 0 0 0.1882352941          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-secondary {\\n  filter: saturate(0%) brightness(0%) invert(45.6862745098%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.4235294118          0 0 0 0 0.4588235294          0 0 0 0 0.4901960784          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-success {\\n  filter: saturate(0%) brightness(0%) invert(40.5882352941%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1568627451          0 0 0 0 0.6549019608          0 0 0 0 0.2705882353          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-danger {\\n  filter: saturate(0%) brightness(0%) invert(53.5294117647%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.862745098          0 0 0 0 0.2078431373          0 0 0 0 0.2705882353          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-warning {\\n  filter: saturate(0%) brightness(0%) invert(51.3725490196%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 1          0 0 0 0 0.7568627451          0 0 0 0 0.0274509804          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-info {\\n  filter: saturate(0%) brightness(0%) invert(40.5882352941%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.0901960784          0 0 0 0 0.6352941176          0 0 0 0 0.7215686275          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-light {\\n  filter: saturate(0%) brightness(0%) invert(97.6470588235%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.9725490196          0 0 0 0 0.9764705882          0 0 0 0 0.9803921569          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-dark {\\n  filter: saturate(0%) brightness(0%) invert(22.7450980392%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.2039215686          0 0 0 0 0.2274509804          0 0 0 0 0.2509803922          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-body {\\n  filter: saturate(0%) brightness(0%) invert(14.5098039216%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1294117647          0 0 0 0 0.1450980392          0 0 0 0 0.1607843137          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-muted {\\n  filter: saturate(0%) brightness(0%) invert(45.6862745098%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.4235294118          0 0 0 0 0.4588235294          0 0 0 0 0.4901960784          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-white {\\n  filter: saturate(0%) brightness(0%) invert(100%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 1          0 0 0 0 1          0 0 0 0 1          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-default {\\n  filter: saturate(0%) brightness(0%) invert(52.9411764706%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1176470588          0 0 0 0 0.5294117647          0 0 0 0 0.9411764706          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-warning {\\n  filter: saturate(0%) brightness(0%) invert(66.6666666667%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.9803921569          0 0 0 0 0.6274509804          0 0 0 0 0.3529411765          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-danger {\\n  filter: saturate(0%) brightness(0%) invert(62.7450980392%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.9411764706          0 0 0 0 0.3137254902          0 0 0 0 0.431372549          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-success {\\n  filter: saturate(0%) brightness(0%) invert(50.9803921569%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1960784314          0 0 0 0 0.8235294118          0 0 0 0 0.5882352941          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-primary-light {\\n  filter: saturate(0%) brightness(0%) invert(35.2156862745%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0          0 0 0 0 0.7058823529          0 0 0 0 0.2274509804          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-primary-dark {\\n  filter: saturate(0%) brightness(0%) invert(23.2156862745%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0          0 0 0 0 0.462745098          0 0 0 0 0.1490196078          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-secondary-light {\\n  filter: saturate(0%) brightness(0%) invert(51.6862745098%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.4823529412          0 0 0 0 0.5176470588          0 0 0 0 0.5529411765          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-secondary-dark {\\n  filter: saturate(0%) brightness(0%) invert(39.6862745098%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.368627451          0 0 0 0 0.4          0 0 0 0 0.4274509804          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-success-light {\\n  filter: saturate(0%) brightness(0%) invert(46.5882352941%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1803921569          0 0 0 0 0.7529411765          0 0 0 0 0.3098039216          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-success-dark {\\n  filter: saturate(0%) brightness(0%) invert(34.5882352941%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1333333333          0 0 0 0 0.5568627451          0 0 0 0 0.231372549          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-danger-light {\\n  filter: saturate(0%) brightness(0%) invert(59.5294117647%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.8823529412          0 0 0 0 0.3098039216          0 0 0 0 0.3647058824          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-danger-dark {\\n  filter: saturate(0%) brightness(0%) invert(47.5294117647%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.8117647059          0 0 0 0 0.1411764706          0 0 0 0 0.2039215686          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-warning-light {\\n  filter: saturate(0%) brightness(0%) invert(57.3725490196%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 1          0 0 0 0 0.7882352941          0 0 0 0 0.1490196078          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-warning-dark {\\n  filter: saturate(0%) brightness(0%) invert(45.3725490196%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.9058823529          0 0 0 0 0.6823529412          0 0 0 0 0          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-info-light {\\n  filter: saturate(0%) brightness(0%) invert(46.5882352941%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1019607843          0 0 0 0 0.7294117647          0 0 0 0 0.8274509804          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-info-dark {\\n  filter: saturate(0%) brightness(0%) invert(34.5882352941%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.0784313725          0 0 0 0 0.5411764706          0 0 0 0 0.6156862745          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-body-light {\\n  filter: saturate(0%) brightness(0%) invert(20.5098039216%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1843137255          0 0 0 0 0.2039215686          0 0 0 0 0.2274509804          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-body-dark {\\n  filter: saturate(0%) brightness(0%) invert(8.5098039216%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.0745098039          0 0 0 0 0.0862745098          0 0 0 0 0.0941176471          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-muted-light {\\n  filter: saturate(0%) brightness(0%) invert(51.6862745098%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.4823529412          0 0 0 0 0.5176470588          0 0 0 0 0.5529411765          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-muted-dark {\\n  filter: saturate(0%) brightness(0%) invert(39.6862745098%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.368627451          0 0 0 0 0.4          0 0 0 0 0.4274509804          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-warning-light {\\n  filter: saturate(0%) brightness(0%) invert(72.6666666667%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.9843137255          0 0 0 0 0.6941176471          0 0 0 0 0.4705882353          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-warning-dark {\\n  filter: saturate(0%) brightness(0%) invert(60.6666666667%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.9764705882          0 0 0 0 0.5607843137          0 0 0 0 0.2352941176          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-default-light {\\n  filter: saturate(0%) brightness(0%) invert(58.9411764706%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.231372549          0 0 0 0 0.5882352941          0 0 0 0 0.9490196078          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-default-dark {\\n  filter: saturate(0%) brightness(0%) invert(46.9411764706%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.0588235294          0 0 0 0 0.4705882353          0 0 0 0 0.8784313725          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-danger-light {\\n  filter: saturate(0%) brightness(0%) invert(68.7450980392%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.9490196078          0 0 0 0 0.4235294118          0 0 0 0 0.5215686275          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-danger-dark {\\n  filter: saturate(0%) brightness(0%) invert(56.7450980392%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.9333333333          0 0 0 0 0.2039215686          0 0 0 0 0.3411764706          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-success-light {\\n  filter: saturate(0%) brightness(0%) invert(56.9803921569%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.2941176471          0 0 0 0 0.8470588235          0 0 0 0 0.6392156863          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.color-alt-success-dark {\\n  filter: saturate(0%) brightness(0%) invert(44.9803921569%) opacity(1);\\n  filter: url('data:image/svg+xml;utf8,    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\">      <filter id=\\\"recolor\\\" color-interpolation-filters=\\\"sRGB\\\">        <feColorMatrix type=\\\"matrix\\\" values=\\\"          0 0 0 0 0.1607843137          0 0 0 0 0.737254902          0 0 0 0 0.5215686275          0 0 0 1 0        \\\"/>      </filter>    </svg>    #recolor');\\n}\\n.pointer {\\n  cursor: pointer;\\n}\\n.bold {\\n  font-weight: bold;\\n}\\n.unsaved-editable-field {\\n  background-color: #fbfdd1 !important;\\n}\\n.fake-hyperlink {\\n  cursor: pointer;\\n  color: #08c;\\n}\\n.fake-hyperlink:hover {\\n  text-decoration: underline;\\n}\\n.button-style {\\n  cursor: pointer;\\n  background-color: white;\\n  border: 1px solid #dbdbdb;\\n  border-radius: 2px;\\n  justify-content: center;\\n  text-align: center;\\n}\\n.button-style:hover {\\n  border-color: #b5b5b5;\\n}\\n.delete-icon:hover {\\n  color: #b14c4a;\\n}\\n.edit-icon:hover,\\n.info-icon:hover {\\n  color: #0099ff;\\n}\\n.padding-0px {\\n  padding: 0px;\\n}\\n.padding-1px {\\n  padding: 1px;\\n}\\n.padding-2px {\\n  padding: 2px;\\n}\\n.padding-3px {\\n  padding: 3px;\\n}\\n.padding-4px {\\n  padding: 4px;\\n}\\n.padding-5px {\\n  padding: 5px;\\n}\\n.padding-6px {\\n  padding: 6px;\\n}\\n.padding-7px {\\n  padding: 7px;\\n}\\n.padding-8px {\\n  padding: 8px;\\n}\\n.padding-9px {\\n  padding: 9px;\\n}\\n.padding-10px {\\n  padding: 10px;\\n}\\n.padding-11px {\\n  padding: 11px;\\n}\\n.padding-12px {\\n  padding: 12px;\\n}\\n.padding-13px {\\n  padding: 13px;\\n}\\n.padding-14px {\\n  padding: 14px;\\n}\\n.padding-15px {\\n  padding: 15px;\\n}\\n.padding-16px {\\n  padding: 16px;\\n}\\n.padding-17px {\\n  padding: 17px;\\n}\\n.padding-18px {\\n  padding: 18px;\\n}\\n.padding-19px {\\n  padding: 19px;\\n}\\n.padding-20px {\\n  padding: 20px;\\n}\\n.padding-21px {\\n  padding: 21px;\\n}\\n.padding-22px {\\n  padding: 22px;\\n}\\n.padding-23px {\\n  padding: 23px;\\n}\\n.padding-24px {\\n  padding: 24px;\\n}\\n.padding-25px {\\n  padding: 25px;\\n}\\n.padding-26px {\\n  padding: 26px;\\n}\\n.padding-27px {\\n  padding: 27px;\\n}\\n.padding-28px {\\n  padding: 28px;\\n}\\n.padding-29px {\\n  padding: 29px;\\n}\\n.padding-30px {\\n  padding: 30px;\\n}\\n.font-5px {\\n  font-size: 5px;\\n}\\n.font-6px {\\n  font-size: 6px;\\n}\\n.font-7px {\\n  font-size: 7px;\\n}\\n.font-8px {\\n  font-size: 8px;\\n}\\n.font-9px {\\n  font-size: 9px;\\n}\\n.font-10px {\\n  font-size: 10px;\\n}\\n.font-11px {\\n  font-size: 11px;\\n}\\n.font-12px {\\n  font-size: 12px;\\n}\\n.font-13px {\\n  font-size: 13px;\\n}\\n.font-14px {\\n  font-size: 14px;\\n}\\n.font-15px {\\n  font-size: 15px;\\n}\\n.font-16px {\\n  font-size: 16px;\\n}\\n.font-17px {\\n  font-size: 17px;\\n}\\n.font-18px {\\n  font-size: 18px;\\n}\\n.font-19px {\\n  font-size: 19px;\\n}\\n.font-20px {\\n  font-size: 20px;\\n}\\n.font-21px {\\n  font-size: 21px;\\n}\\n.font-22px {\\n  font-size: 22px;\\n}\\n.font-23px {\\n  font-size: 23px;\\n}\\n.font-24px {\\n  font-size: 24px;\\n}\\n.font-25px {\\n  font-size: 25px;\\n}\\n.font-26px {\\n  font-size: 26px;\\n}\\n.font-27px {\\n  font-size: 27px;\\n}\\n.font-28px {\\n  font-size: 28px;\\n}\\n.font-29px {\\n  font-size: 29px;\\n}\\n.font-30px {\\n  font-size: 30px;\\n}\\n.font-31px {\\n  font-size: 31px;\\n}\\n.font-32px {\\n  font-size: 32px;\\n}\\n.font-33px {\\n  font-size: 33px;\\n}\\n.font-34px {\\n  font-size: 34px;\\n}\\n.font-35px {\\n  font-size: 35px;\\n}\\n.font-36px {\\n  font-size: 36px;\\n}\\n.font-37px {\\n  font-size: 37px;\\n}\\n.font-38px {\\n  font-size: 38px;\\n}\\n.font-39px {\\n  font-size: 39px;\\n}\\n.font-40px {\\n  font-size: 40px;\\n}\\n.font-41px {\\n  font-size: 41px;\\n}\\n.font-42px {\\n  font-size: 42px;\\n}\\n.font-43px {\\n  font-size: 43px;\\n}\\n.font-44px {\\n  font-size: 44px;\\n}\\n.font-45px {\\n  font-size: 45px;\\n}\\n.font-46px {\\n  font-size: 46px;\\n}\\n.font-47px {\\n  font-size: 47px;\\n}\\n.font-48px {\\n  font-size: 48px;\\n}\\n.font-49px {\\n  font-size: 49px;\\n}\\n.font-50px {\\n  font-size: 50px;\\n}\\n.margin-auto {\\n  margin: auto;\\n}\\n/* Text and Alignment Utilities */\\n.text-center {\\n  text-align: center;\\n}\\n.text-left {\\n  text-align: left;\\n}\\n.text-right {\\n  text-align: right;\\n}\\n.text-uppercase {\\n  text-transform: uppercase;\\n}\\n.text-underline {\\n  text-decoration: underline;\\n}\\n.vertical-align-bottom {\\n  display: inline-block;\\n  vertical-align: bottom;\\n}\\n.vertical-align-middle {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n.vertical-align-top {\\n  display: inline-block;\\n  vertical-align: top;\\n}\\n.icon {\\n  align-items: center;\\n  display: inline-flex;\\n  justify-content: center;\\n  height: 1rem;\\n  width: 1rem;\\n}\";","export default \"<div class=\\\"container-fluid\\\" style=\\\"margin-top: 10px\\\">\\n  <h2>\\n    <span [innerHTML]=\\\"title\\\"></span>\\n    <span class=\\\"float-right\\\">\\n      <a style=\\\"font-size: 18px\\\"\\n         target=\\\"_blank\\\"\\n         href=\\\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/swt-common-grid-test.component.ts\\\">\\n        <span class=\\\"fa fa-link\\\"></span> code\\n      </a>\\n    </span>\\n  </h2>\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-8\\\">\\n      <div class=\\\"alert alert-info\\\">\\n        <strong>Custom Pagination URL:</strong>\\n        <div [innerHTML]=\\\"currentUrl\\\" data-test=\\\"query-string\\\"></div>\\n      </div>\\n    </div>\\n    <div class=\\\"col-sm-4\\\">\\n      <swt-common-grid-pagination #commonGridPag1></swt-common-grid-pagination>\\n    </div>\\n  </div>\\n  <swt-common-grid #commonGrid1\\n                   (onFilterChanged)=\\\"filterChanged($event)\\\"\\n                   (onPaginationChanged)=\\\"paginationChanged($event)\\\"\\n                   (onSortChanged)=\\\"sortChanged($event)\\\"></swt-common-grid>\\n</div>\\n\";","/**\r\n * This is a \"ngx-logger\" branch (https://www.npmjs.com/package/ngx-logger)\r\n * Customized logging template + Simplified into our needs\r\n *\r\n * @author Saber Chebka, saber.chebka@gmail.com\r\n */\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nexport class Logger {\r\n  private _clientLogLevel: LoggerLevel = LoggerLevel.INFO;\r\n\r\n  private _serverLogLevel: LoggerLevel = LoggerLevel.OFF;\r\n\r\n  private _isIE = true;\r\n\r\n  private options: LoggerConfig = {\r\n    level: this._clientLogLevel,\r\n    serverLogLevel: this._serverLogLevel,\r\n    serverLoggingUrl: '/remotelog.do'\r\n  };\r\n\r\n  constructor(private _class: string, private http?: HttpClient) {\r\n    this._isIE = !!(navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.match(/Trident\\//) || navigator.userAgent.match(/Edge\\//));\r\n  }\r\n\r\n  trace(message: string, ...additional: any[]) {\r\n    this._log(LoggerLevel.TRACE, true, message, additional);\r\n  }\r\n\r\n  debug(message: string, ...additional: any[]) {\r\n    this._log(LoggerLevel.DEBUG, true, message, additional);\r\n  }\r\n\r\n  info(message: string, ...additional: any[]) {\r\n    this._log(LoggerLevel.INFO, true, message, additional);\r\n  }\r\n\r\n  log(message: string, ...additional: any[]) {\r\n    this._log(LoggerLevel.LOG, true, message, additional);\r\n  }\r\n\r\n  warn(message: string, ...additional: any[]) {\r\n    this._log(LoggerLevel.WARN, true, message, additional);\r\n  }\r\n\r\n  error(message: string, ...additional: any[]) {\r\n    this._log(LoggerLevel.ERROR, true, message, additional);\r\n  }\r\n\r\n  private _timestamp() {\r\n    return new Date().toISOString();\r\n  }\r\n\r\n  private _logOnServer(level: LoggerLevel, message: string, additional: any[]) {\r\n    if (!this.options.serverLoggingUrl) {\r\n      return;\r\n    }\r\n\r\n    // if the user provides a serverLogLevel and the current level is than that do not log\r\n    if (level < this._serverLogLevel) {\r\n      return;\r\n    }\r\n\r\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n\r\n    this.http!.post(this.options.serverLoggingUrl, {\r\n      level: Levels[level],\r\n      message,\r\n      additional,\r\n      timestamp: this._timestamp()\r\n    }, { headers })\r\n      .subscribe(\r\n        res => null,\r\n        error => this._log(LoggerLevel.ERROR, false, 'FAILED TO LOG ON SERVER')\r\n      );\r\n  }\r\n\r\n  private _logIE(level: LoggerLevel, message: string, additional: any[]) {\r\n    switch (level) {\r\n      case LoggerLevel.WARN:\r\n        console.warn(`${this._timestamp()} [${Levels[level]}]  -${this._class}-`, message, ...additional);\r\n        break;\r\n      case LoggerLevel.ERROR:\r\n        console.error(`${this._timestamp()} [${Levels[level]}]  -${this._class}-`, message, ...additional);\r\n        break;\r\n      case LoggerLevel.INFO:\r\n        console.info(`${this._timestamp()} [${Levels[level]}]  -${this._class}-`, message, ...additional);\r\n        break;\r\n      default:\r\n        console.log(`${this._timestamp()} [${Levels[level]}]  -${this._class}-`, message, ...additional);\r\n    }\r\n  }\r\n\r\n  private _log(level: LoggerLevel, logOnServer: boolean, message: string, additional: any[] = []) {\r\n    if (!message) {\r\n      return;\r\n    }\r\n\r\n    // Allow logging on server even if client log level is off\r\n    if (logOnServer) {\r\n      this._logOnServer(level, message, additional);\r\n    }\r\n\r\n    // if no message or the log level is less than the environ\r\n    if (level < this._clientLogLevel) {\r\n      return;\r\n    }\r\n\r\n    if (typeof message === 'object') {\r\n      try {\r\n        message = JSON.stringify(message, null, 2);\r\n      } catch (e) {\r\n        additional = [message, ...additional];\r\n        message = 'circular object in message. ';\r\n      }\r\n    }\r\n\r\n    // Coloring doesn't work in IE\r\n    if (this._isIE) {\r\n      return this._logIE(level, message, additional);\r\n    }\r\n\r\n    const color = this._getColor(level);\r\n\r\n    console.log(`%c${this._timestamp()} [${Levels[level]}] - ${this._class} -`, `color:${color}`, message, ...additional);\r\n  }\r\n\r\n  private _getColor(level: LoggerLevel) {\r\n    switch (level) {\r\n      case LoggerLevel.TRACE:\r\n        return 'blue';\r\n      case LoggerLevel.DEBUG:\r\n        return 'teal';\r\n      case LoggerLevel.INFO:\r\n      case LoggerLevel.LOG:\r\n        return 'gray';\r\n      case LoggerLevel.WARN:\r\n      case LoggerLevel.ERROR:\r\n        return 'red';\r\n      case LoggerLevel.OFF:\r\n      default:\r\n        return 'black';\r\n    }\r\n  }\r\n}\r\n\r\nexport class LoggerConfig {\r\n  level!: LoggerLevel;\r\n  serverLogLevel!: LoggerLevel;\r\n  serverLoggingUrl?: string;\r\n}\r\n\r\nexport enum LoggerLevel {\r\n  TRACE = 0, DEBUG, INFO, LOG, WARN, ERROR, OFF\r\n}\r\n\r\nconst Levels = [\r\n  'TRACE',\r\n  'DEBUG',\r\n  'INFO',\r\n  'LOG',\r\n  'WARN',\r\n  'ERROR',\r\n  'OFF'\r\n];\r\n","import { Component, OnInit, Injectable, AfterViewInit, Input, EventEmitter, Output, ViewChild, ElementRef, Renderer2 } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {\r\n  AngularSlickgridComponent, Column, FieldType, Formatters,\r\n  GridOption, BackendService,\r\n  BackendServiceOption, FilterChangedArgs, PaginationChangedArgs, SortChangedArgs, Pagination\r\n} from '../modules/angular-slickgrid';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Logger } from './swt-logger.service';\r\nimport { SwtCommonGridPaginationComponent } from './swt-common-grid-pagination.component';\r\n\r\n/**\r\n * Custom wrapper of angular-slickgrid components, allows easily interacting with SwtCommonGridPaginationComponent\r\n *\r\n * @author Saber Chebka, saber.chebka@gmail.com\r\n */\r\n\r\nlet timer: any;\r\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\r\n\r\n@Component({\r\n  selector: 'swt-common-grid',\r\n  template: `<angular-slickgrid gridId='common-grid'\r\n                      #angularSlickGrid\r\n                      [gridHeight]=\"200\"\r\n                      (onDataviewCreated)=\"dataviewReady($event)\"\r\n                      (onGridCreated)=\"gridReady($event)\"\r\n                      [columnDefinitions]=\"columnDefinitions\"\r\n                      [gridOptions]=\"gridOptions\"\r\n                      [dataset]=\"dataset\">\r\n              </angular-slickgrid>`,\r\n  styles: [`\r\n       :host ::ng-deep .gridPane{\r\n            width: 100%!important;\r\n        }\r\n        :host ::ng-deep .slickgrid-container{\r\n            width: 100%!important;\r\n         }\r\n    `]\r\n})\r\n\r\n@Injectable()\r\nexport class SwtCommonGridComponent implements OnInit, AfterViewInit, BackendService {\r\n\r\n  private logger: Logger;\r\n  private defaultPageSize = 20;\r\n\r\n  @Input() gridHeight = 100;\r\n  @Input() gridWidth = 600;\r\n\r\n  gridHeightString!: string;\r\n  gridWidthString!: string;\r\n\r\n  @ViewChild('angularSlickGrid', { static: true }) angularSlickGrid!: AngularSlickgridComponent;\r\n\r\n  columnDefinitions: Column[] = [];\r\n  dataset!: any[];\r\n  gridObj: any;\r\n  dataviewObj: any;\r\n  isAutoEdit = false;\r\n  updatedObject: any;\r\n  isMultiSelect = true;\r\n  selectedObjects!: any[];\r\n  selectedObject: any;\r\n\r\n  // Slick grid\r\n  metaData: any;\r\n  columnData: any;\r\n  rowsData: any;\r\n  selects: any;\r\n  id: any;\r\n\r\n  options!: BackendServiceOption;\r\n  pagination?: Pagination;\r\n\r\n\r\n  @Output('onFilterChanged') onFilterChanged_: EventEmitter<FilterChangedArgs> = new EventEmitter<FilterChangedArgs>();\r\n  @Output('onPaginationChanged') onPaginationChanged_: EventEmitter<PaginationChangedArgs> = new EventEmitter<PaginationChangedArgs>();\r\n  @Output('onSortChanged') onSortChanged_: EventEmitter<SortChangedArgs> = new EventEmitter<SortChangedArgs>();\r\n\r\n  sortedGridColumn = '';\r\n  currentPage = 1;\r\n  filteredGridColumns = '';\r\n\r\n  // Data\r\n\r\n\r\n  // Injected functions\r\n  private _onRowDoubleClick: Function = new Function();\r\n  private _onRowClick: Function = new Function();\r\n\r\n\r\n  private _selectedRow: any;\r\n\r\n\r\n  gridOptions: GridOption = {\r\n    asyncEditorLoading: false,\r\n    autoEdit: this.isAutoEdit,\r\n    autoResize: {\r\n      containerId: 'common-grid-container',\r\n      sidePadding: 10\r\n    },\r\n    // locale: 'fr',\r\n    enableColumnPicker: true,\r\n    enableCellNavigation: true,\r\n    enableRowSelection: true,\r\n    enableCheckboxSelector: false,\r\n    enableFiltering: true,\r\n    rowHeight: 23,\r\n    forceFitColumns: true,\r\n    enableAutoTooltip: true,\r\n    enableGridMenu: true,\r\n    enablePagination: false\r\n  };\r\n\r\n  // Initialized to a fake pagination object\r\n  private _paginationComponent: any = {\r\n    processing: false,\r\n    realPagination: false\r\n  };\r\n\r\n  @Input('pagination')\r\n  set paginationComponent(value: SwtCommonGridPaginationComponent) {\r\n    this.logger!.info('method [pagination] - START, assigned datagrid pagination object: ', value.realPagination);\r\n    if (value.realPagination) {\r\n      this._paginationComponent = value;\r\n      this.gridOptions.backendServiceApi = {\r\n        service: this,\r\n        preProcess: () => { },\r\n        process: () => {\r\n          return null;\r\n        },\r\n        postProcess: () => { }\r\n      } as any;\r\n      this._paginationComponent.gridPaginationOptions = this.gridOptions;\r\n      this.angularSlickGrid.createBackendApiInternalPostProcessCallback(this.gridOptions);\r\n    }\r\n    this.logger!.info('method [pagination] - START');\r\n  }\r\n\r\n  get paginationComponent(): SwtCommonGridPaginationComponent {\r\n    return this._paginationComponent;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param gridService\r\n   * @param resizer\r\n   * @param httpClient\r\n   */\r\n  constructor(private httpClient: HttpClient, private translate: TranslateService,\r\n    private el: ElementRef, private renderer: Renderer2) {\r\n    this.logger = new Logger('grid', httpClient);\r\n\r\n    this.logger.info('method [constructor] - START/END');\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   *\r\n   */\r\n  ngOnInit() {\r\n    this.logger.info('method [ngOnInit] - START/END');\r\n    // this.gridHeightString = `${this.gridHeight}px`;\r\n    // this.gridWidthString = `${this.gridWidth}px`;\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   */\r\n  ngAfterViewInit() {\r\n    this.logger.info('method [ngAfterViewInit] - START/END');\r\n  }\r\n\r\n  /**\r\n  * CustomGrid constructor\r\n  * @param columnData\r\n  */\r\n  CustomGrid(columnData: any) {\r\n    this.logger.info('method [CustomGrid] - START');\r\n\r\n    this.id = 'grid' + Math.floor(Math.random() * Math.floor(100));\r\n\r\n    // get metadata from input JSON\r\n    this.metaData = columnData;\r\n\r\n    // COLUMNS DATA\r\n    const rowData: any = [];\r\n\r\n    // check if allcolumns tag contains any children\r\n    if (this.metaData.columns.column) {\r\n\r\n      // set columnsData and columnDefinitions\r\n      this.columnData = this.metaData.columns.column;\r\n\r\n      for (let index = 0; index < this.columnData.length; index++) {\r\n\r\n        const type = FieldType.string;\r\n        const editor = null;\r\n        const formatter = null;\r\n        const filter = null;\r\n        const outputType = null;\r\n        const params = null;\r\n\r\n        const col: any = {\r\n          id: this.columnData[index].dataelement,\r\n          name: this.columnData[index].heading,\r\n          field: this.columnData[index].dataelement,\r\n          sortable: this.columnData[index].sort,\r\n          filterable: this.columnData[index].filterable,\r\n          type,\r\n          editor: editor,\r\n          formatter,\r\n          filter,\r\n          outputType,\r\n          params,\r\n          width: this.columnData[index].width\r\n        };\r\n\r\n        this.columnDefinitions.push(col);\r\n        rowData[col.id] = '';\r\n      }\r\n\r\n      // Columns are not visible, seems to be a bug ? next line fixed it..\r\n      this.gridObj.setColumns(this.columnDefinitions);\r\n      this.angularSlickGrid.showPagination = false;\r\n\r\n      // Show filters when grid starts; this could be parametrized\r\n      // this.gridObj.setHeaderRowVisibility(false);\r\n      // this.gridObj.setTopPanelVisibility(false);\r\n    }\r\n\r\n    // Dummy dataset\r\n    this.dataset = rowData;\r\n\r\n    this.logger.info('method [CustomGrid] - END, this.columnDefinitions=', this.columnDefinitions);\r\n  }\r\n\r\n  /**\r\n   * CommonGrid constructor\r\n   * @param columnsData\r\n   * @param lockedColumnCount\r\n   * @param uniqueColumn\r\n   * @param baseURL\r\n   * @param programId\r\n   * @param componentId\r\n   * @param enableRenders\r\n   * @param colValidationMap\r\n   * @param checkHeader\r\n   * @param cboLinked\r\n   */\r\n  CommonGrid(columnsData: any, lockedColumnCount: number, uniqueColumn: string, baseURL: string, programId: string, componentId: string, enableRenders: boolean = true, colValidationMap: any = null, checkHeader: boolean = false, cboLinked: boolean = false) {\r\n  }\r\n\r\n\r\n  set gridData(rawData: any) {\r\n    this.logger.info('method [gridData] - START');\r\n    const dataProvider: any = [];\r\n\r\n    for (let index = 0; rawData.row && index < rawData.row.length; index++) {\r\n      const row = <Object>rawData.row[index];\r\n      const idObj = {\r\n        id: index\r\n      };\r\n\r\n      let key: string;\r\n      const rowData: any = [];\r\n      for (key in row) {\r\n        if (row.hasOwnProperty(key)) {\r\n          rowData[key] = (row as any)[key].content;\r\n        }\r\n      }\r\n      dataProvider[index] = Object.assign(rowData, idObj);\r\n    }\r\n\r\n    this.dataset = dataProvider;\r\n    this.paginationComponent.processing = false;\r\n    this.logger.info('method [gridData] - END, all data size=' + (rawData && rawData.hasOwnProperty('size') ? rawData.size : 0));\r\n\r\n    // this.gridObj.setSortColumn('excludeType', true);\r\n    // this.dataviewObj.reSort();\r\n    // this.gridObj.setSortColumns([{'columnId':'excludeType','sortAsc':true}]);\r\n\r\n    // this.gridObj.invalidate();\r\n    // this.gridObj.render();\r\n  }\r\n\r\n  get gridData(): any {\r\n    return this.dataset;\r\n  }\r\n\r\n  gridReady(grid: any) {\r\n    this.logger.info('method [gridReady] - START');\r\n    this.gridObj = grid;\r\n    this.logger.info('method [gridReady] - END');\r\n  }\r\n\r\n  dataviewReady(dataview: any) {\r\n    this.logger.info('method [dataviewReady] - START/END', dataview);\r\n    this.dataviewObj = dataview;\r\n  }\r\n\r\n\r\n\r\n\r\n  /********************************************************/\r\n  /******** Pagination+Sot+Filter service : START *********/\r\n  /********************************************************/\r\n  buildQuery(): string {\r\n    return 'buildQuery...';\r\n  }\r\n\r\n  init(serviceOptions: BackendServiceOption, pagination?: Pagination): void {\r\n    this.options = serviceOptions;\r\n    this.pagination = pagination;\r\n  }\r\n\r\n\r\n  resetPaginationOptions() {\r\n\r\n  }\r\n\r\n  updateOptions(serviceOptions?: Partial<BackendServiceOption>) {\r\n    this.options = { ...this.options, ...serviceOptions };\r\n  }\r\n\r\n\r\n  /**\r\n   * FILTERING EMIT EVENT\r\n   * @param event\r\n   * @param args\r\n   */\r\n  processOnFilterChanged(event: Event | undefined, args: FilterChangedArgs): Promise<string> | string {\r\n    this.logger.info('method [onFilterChanged] - START', args);\r\n    this.filteredGridColumns = '';\r\n    let timing = 0;\r\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\r\n      timing = DEFAULT_FILTER_TYPING_DEBOUNCE;\r\n      clearTimeout(timer);\r\n    }\r\n    timer = setTimeout(() => {\r\n      this.filteredGridColumns = '';\r\n      for (let idx = 0; idx < this.columnDefinitions.length; idx++) {\r\n        if (args.columnFilters.hasOwnProperty(this.columnDefinitions[idx].field)) {\r\n          this.filteredGridColumns += args.columnFilters[this.columnDefinitions[idx].field].searchTerms[0] + '|';\r\n        } else {\r\n          this.filteredGridColumns += 'All|';\r\n        }\r\n      }\r\n\r\n      // Reset to the first page\r\n      this.paginationComponent.pageNumber = 1;\r\n      this.currentPage = 1;\r\n\r\n      // dispatch event\r\n      this.onFilterChanged_.emit(args);\r\n      this.logger.info('method [onFilterChanged] - onFilterChanged_.emit(args) performed, filteredGridColumns=' + this.filteredGridColumns);\r\n    }, timing);\r\n\r\n    this.logger.info('method [onFilterChanged] - END');\r\n    return '';\r\n  }\r\n\r\n\r\n  /**\r\n   * PAGINATION EMIT EVENT\r\n   * @param event\r\n   * @param args\r\n   */\r\n  processOnPaginationChanged(event: Event | undefined, args: PaginationChangedArgs) {\r\n    this.logger.info('method [onPaginationChanged] - START');\r\n    this.currentPage = args.newPage;\r\n    this.onPaginationChanged_.emit(args);\r\n    this.logger.info('method [onPaginationChanged] - END, currentPage=' + this.currentPage);\r\n    return 'onPaginationChanged';\r\n  }\r\n\r\n  /**\r\n   * SORT EMIT EVENT\r\n   * @param event\r\n   * @param args\r\n   */\r\n  processOnSortChanged(event: Event | undefined, args: SortChangedArgs) {\r\n    this.logger.info('method [onSortChanged] - START');\r\n    this.sortedGridColumn = '';\r\n    const sortDirection = '|' + args!.sortCols![0].sortAsc + '|';\r\n    for (let idx = 0; idx < this.columnDefinitions.length; idx++) {\r\n      if (this.columnDefinitions[idx].field === args!.sortCols![0].sortCol.field) {\r\n        this.sortedGridColumn = '' + idx + sortDirection;\r\n      }\r\n    }\r\n    this.onSortChanged_.emit(args);\r\n    this.logger.info('method [onSortChanged] - END, sortedGridColumn=' + this.sortedGridColumn);\r\n    return 'onSortChanged';\r\n  }\r\n\r\n\r\n\r\n  getFilteredGridColumns() {\r\n    return this.filteredGridColumns;\r\n  }\r\n\r\n  getSortedGridColumn() {\r\n    return this.sortedGridColumn;\r\n  }\r\n\r\n  /******** Pagination+Sot+Filter service: END *****************/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // Getters and Setters\r\n  get selectedRow() {\r\n    return this._selectedRow;\r\n  }\r\n  set selectedRow(row: any) {\r\n    this._selectedRow = row;\r\n  }\r\n\r\n  get onRowDoubleClick() {\r\n    return this._onRowDoubleClick;\r\n  }\r\n  set onRowDoubleClick(event: Function) {\r\n    this._onRowDoubleClick = event;\r\n  }\r\n\r\n  get onRowClick() {\r\n    return this._onRowClick;\r\n  }\r\n  set onRowClick(event: Function) {\r\n    this._onRowClick = event;\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\r\nimport { SwtCommonGridComponent } from './swt-common-grid.component';\r\nimport { Logger } from './swt-logger.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { GridOption } from '../modules/angular-slickgrid';\r\n/**\r\n * Custom pagination component: It allows editing the page number manually\r\n *  << < Page [1] of 5 > >>\r\n *\r\n * @author Saber Chebka, saber.chebka@gmail.com\r\n */\r\n@Component({\r\n  selector: 'swt-common-grid-pagination',\r\n  template: `\r\n    <div class=\"slick-pagination\">\r\n    <div class=\"slick-pagination-nav\">\r\n        <nav aria-label=\"Page navigation\">\r\n            <ul class=\"pagination\">\r\n                <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n                    <a class=\"page-link icon-seek-first fa fa-angle-double-left\"\r\n                    aria-label=\"First\" (click)=\"changeToFirstPage($event)\"> </a>\r\n                </li>\r\n                <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n                    <a class=\"page-link icon-seek-prev fa fa-angle-left\"\r\n                    aria-label=\"Previous\" (click)=\"changeToPreviousPage($event)\"> </a>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n\r\n        <div class=\"slick-page-number\">\r\n            <span [translate]=\"'PAGE'\"></span>\r\n            <input type=\"text\" value=\"{{pageNumber}}\" size=\"1\"  (change)=\"changeToCurrentPage($event)\">\r\n            <span [translate]=\"'OF'\"></span><span> {{pageCount}}</span>\r\n        </div>\r\n\r\n        <nav aria-label=\"Page navigation\">\r\n            <ul class=\"pagination\">\r\n                <li class=\"page-item\"\r\n                    [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\"><a\r\n                    class=\"page-link icon-seek-next text-center fa fa-lg fa-angle-right\"\r\n                    aria-label=\"Next\" (click)=\"changeToNextPage($event)\"> </a></li>\r\n                <li class=\"page-item\"\r\n                    [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\"><a\r\n                    class=\"page-link icon-seek-end fa fa-lg fa-angle-double-right\"\r\n                    aria-label=\"Last\" (click)=\"changeToLastPage($event)\"> </a></li>\r\n            </ul>\r\n        </nav>\r\n        <nav>\r\n            <ul class=\"pagination\">\r\n                <li class=\"\">\r\n                    <span [hidden]=\"!processing\" class=\"page-spin\">\r\n                        <i class=\"fa fa-refresh fa-spin fa-lg fa-fw\"></i>\r\n                    </span>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    </div>\r\n</div>\r\n  `,\r\n  styles: [`.page-spin {\r\n              border: none;\r\n              height: 32px;\r\n              background-color: transparent;\r\n              cursor: default;\r\n              animation: fa-spin 1.2s infinite linear !important;\r\n            }\r\n            .page-spin:hover {\r\n                background-color: transparent;\r\n            }\r\n  `]\r\n})\r\nexport class SwtCommonGridPaginationComponent implements OnInit {\r\n  private logger: Logger;\r\n\r\n  @Input('pageCount') pageCount = 1;\r\n  @Input('pageNumber') pageNumber = 1;\r\n\r\n  totalItems = 0;\r\n  processing = false;\r\n\r\n  // Reference to the real pagination component\r\n  realPagination = true;\r\n  _gridPaginationOptions!: GridOption;\r\n  commonGrid!: SwtCommonGridComponent;\r\n\r\n  @Input()\r\n  set gridPaginationOptions(gridPaginationOptions: GridOption) {\r\n    this._gridPaginationOptions = gridPaginationOptions;\r\n\r\n    // The backendServiceApi is itself the SwtCommonGridComponent (This is a hack)\r\n    this.commonGrid = <SwtCommonGridComponent>this.gridPaginationOptions!.backendServiceApi!.service;\r\n  }\r\n  get gridPaginationOptions(): GridOption {\r\n    return this._gridPaginationOptions;\r\n  }\r\n\r\n\r\n\r\n  constructor(private httpClient: HttpClient) {\r\n    this.logger = new Logger('grid-pagination', httpClient);\r\n    this.logger.info('method [constructor] - START/END');\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n    this.logger.info('init: ');\r\n  }\r\n\r\n\r\n\r\n  changeToFirstPage(event: any) {\r\n    this.logger.info('method [changeToFirstPage] - START/END');\r\n    this.pageNumber = 1;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToLastPage(event: any) {\r\n    this.logger.info('method [changeToLastPage] - START/END');\r\n    this.pageNumber = this.pageCount;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToNextPage(event: any) {\r\n    this.logger.info('method [changeToNextPage] - START/END');\r\n    if (this.pageNumber < this.pageCount) {\r\n      this.pageNumber++;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToPreviousPage(event: any) {\r\n    this.logger.info('method [changeToNextPage] - START/END');\r\n    if (this.pageNumber > 1) {\r\n      this.pageNumber--;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n\r\n  changeToCurrentPage(event: any) {\r\n    this.logger.info('method [changeToCurrentPage] - START/END');\r\n    this.pageNumber = event.currentTarget.value;\r\n    if (this.pageNumber < 1) {\r\n      this.pageNumber = 1;\r\n    } else if (this.pageNumber > this.pageCount) {\r\n      this.pageNumber = this.pageCount;\r\n    }\r\n\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  onPageChanged(event?: Event, pageNumber?: number) {\r\n    this.logger.info('method [onPageChanged] - START/END', this.commonGrid);\r\n    this.commonGrid.processOnPaginationChanged(event, { newPage: pageNumber as number, pageSize: -1 });\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Component,\r\n  ComponentFactoryResolver,\r\n  Injectable,\r\n  OnInit,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { SwtCommonGridComponent } from './swt-common-grid.component';\r\nimport { SwtCommonGridPaginationComponent } from './swt-common-grid-pagination.component';\r\nimport { FilterChangedArgs, PaginationChangedArgs, SortChangedArgs } from '../modules/angular-slickgrid';\r\n\r\nimport { Logger } from './swt-logger.service';\r\n/**\r\n * Main test Component\r\n *\r\n * @author Saber Chebka, saber.chebka@gmail.com\r\n */\r\n@Component({\r\n  selector: 'swt-common-grid-test',\r\n  templateUrl: './swt-common-grid-test.component.html'\r\n})\r\n@Injectable()\r\nexport class SwtCommonGridTestComponent implements OnInit, AfterViewInit {\r\n  title = 'Example 13: Custom Backend Server Pagination';\r\n  subTitle = `A simple component to show that it is possible to create a custom Backend Service for any other backend querying, the example below is for Oracle.`;\r\n  componentFactory: any;\r\n  testurl = 'http://127.0.0.1:8080/grid!display.do?';\r\n  currentUrl = this.testurl;\r\n\r\n  @ViewChild('commonGrid1', { static: true }) commonGrid!: SwtCommonGridComponent;\r\n  @ViewChild('commonGridPag1', { static: true }) commonGridPag!: SwtCommonGridPaginationComponent;\r\n\r\n  private logger: Logger;\r\n\r\n  constructor(private httpClient: HttpClient,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private componentFactoryResolver: ComponentFactoryResolver) {\r\n    this.logger = new Logger('test', undefined);\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Link pagination component into the current Grid\r\n    if (this.commonGridPag) {\r\n      this.commonGrid.paginationComponent = this.commonGridPag;\r\n    }\r\n\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.logger.info('method [ngAfterViewInit] - START');\r\n\r\n    setTimeout(() => {\r\n      // Init datagrid example:\r\n      this.commonGridPag.processing = true;\r\n\r\n      // Real HTTP call\r\n      this.currentUrl = this.testurl + '&currentPage=1';\r\n      /*\r\n      this.httpClient.get(this.currentUrl).subscribe(\r\n          (data: any) => {\r\n              this.commonGrid.CustomGrid(data.suspectManagement.grid.metadata);\r\n              this.commonGrid.gridData = data.suspectManagement.grid.rows;\r\n              this.commonGridPag.pageCount = data.suspectManagement.singletons.maxpage;\r\n              this.commonGridPag.processing = false;\r\n          }\r\n      );\r\n      */\r\n      this.commonGrid.CustomGrid(data_sample.pagination_samples.grid.metadata);\r\n      this.commonGrid.gridData = data_sample.pagination_samples.grid.rows;\r\n      this.commonGridPag.pageCount = data_sample.pagination_samples.grid.rows.maxpage;\r\n\r\n      this.commonGridPag.processing = false;\r\n    }, 0);\r\n    this.logger.info('method [ngAfterViewInit] - END');\r\n  }\r\n\r\n  filterChanged(event: FilterChangedArgs) {\r\n    this.commonGridPag.processing = true;\r\n    this.updateGridData();\r\n  }\r\n\r\n  paginationChanged(event: PaginationChangedArgs) {\r\n    this.commonGridPag.processing = true;\r\n    this.updateGridData();\r\n  }\r\n\r\n  sortChanged(event: SortChangedArgs) {\r\n    this.commonGridPag.processing = true;\r\n    this.updateGridData();\r\n  }\r\n\r\n\r\n  updateGridData() {\r\n    this.currentUrl = this.testurl + '&currentPage=' + this.commonGrid.currentPage + '&selectedSort=' + this.commonGrid.sortedGridColumn + '&selectedFilter=' + this.commonGrid.filteredGridColumns;\r\n    // Real HTTP call\r\n    /*this.httpClient.get(this.currentUrl).subscribe(\r\n        (data: any) => {\r\n            this.commonGrid.gridData = data.suspectManagement?data.suspectManagement.grid.rows:[];\r\n            this.commonGridPag.pageCount = data.suspectManagement?data.suspectManagement.singletons.maxpage:1;\r\n            this.commonGridPag.processing = false;\r\n        }\r\n    );*/\r\n    setTimeout(() => {\r\n      this.commonGrid.gridData = data_sample.pagination_samples.grid.rows;\r\n      this.commonGridPag.pageCount = data_sample.pagination_samples.grid.rows.maxpage;\r\n    }, 750);\r\n  }\r\n}\r\n\r\n\r\nexport const data_sample = {\r\n  'pagination_samples': {\r\n    'grid': {\r\n      'metadata': {\r\n        'columns': {\r\n          'column': [{\r\n            'sort': true,\r\n            'filterable': false,\r\n            'width': 60,\r\n            'dataelement': 'hasNote',\r\n            'heading': 'Note'\r\n          },\r\n          {\r\n            'sort': true,\r\n            'filterable': true,\r\n            'width': 125,\r\n            'dataelement': 'status',\r\n            'heading': 'Status'\r\n          },\r\n          {\r\n            'sort': true,\r\n            'visible': true,\r\n            'filterable': true,\r\n            'width': 125,\r\n            'dataelement': 'currency',\r\n            'heading': 'Currency'\r\n          },\r\n          {\r\n            'sort': true,\r\n            'visible': true,\r\n            'filterable': true,\r\n            'width': 125,\r\n            'dataelement': 'amount',\r\n            'heading': 'Amount'\r\n          },\r\n          {\r\n            'sort': true,\r\n            'visible': true,\r\n            'filterable': true,\r\n            'width': 125,\r\n            'dataelement': 'inputDate',\r\n            'heading': 'Input Date'\r\n          },\r\n          {\r\n            'sort': true,\r\n            'visible': true,\r\n            'filterable': true,\r\n            'width': 125,\r\n            'dataelement': 'inputTime',\r\n            'heading': 'Input Time'\r\n          }]\r\n        }\r\n      },\r\n      'rows': {\r\n        'row': [{\r\n          'currency': {\r\n            'content': 'EUR'\r\n          },\r\n          'amount': {\r\n            'content': '2 203 677,000'\r\n          },\r\n          'startTime': {\r\n            'content': '06/19/2017 11:52:51'\r\n          },\r\n          'inputDate': {\r\n            'content': '06/19/2017'\r\n          },\r\n          'status': {\r\n            'content': 'New'\r\n          },\r\n          'inputTime': {\r\n            'content': '11:52:51'\r\n          },\r\n          'hasNote': {\r\n            'content': 'False'\r\n          }\r\n        },\r\n        {\r\n          'currency': {\r\n            'content': 'USD'\r\n          },\r\n          'amount': {\r\n            'content': '6 203 677,000'\r\n          },\r\n          'startTime': {\r\n            'content': '06/28/2017 10:42:00'\r\n          },\r\n          'inputDate': {\r\n            'content': '06/28/2017'\r\n          },\r\n          'status': {\r\n            'content': 'New'\r\n          },\r\n          'inputTime': {\r\n            'content': '10:40:12'\r\n          },\r\n          'hasNote': {\r\n            'content': 'True'\r\n          }\r\n        }\r\n        ],\r\n        'maxpage': 5\r\n      }\r\n    }\r\n  }\r\n};\r\n","import { HomeComponent } from './examples/home.component';\r\nimport { GridAddItemComponent } from './examples/grid-additem.component';\r\nimport { GridAngularComponent } from './examples/grid-angular.component';\r\nimport { GridAutoHeightComponent } from './examples/grid-autoheight.component';\r\nimport { GridBasicComponent } from './examples/grid-basic.component';\r\nimport { GridClientSideComponent } from './examples/grid-clientside.component';\r\nimport { GridColspanComponent } from './examples/grid-colspan.component';\r\nimport { GridContextMenuComponent } from './examples/grid-contextmenu.component';\r\nimport { GridDraggableGroupingComponent } from './examples/grid-draggrouping.component';\r\nimport { GridEditorComponent } from './examples/grid-editor.component';\r\nimport { GridFormatterComponent } from './examples/grid-formatter.component';\r\nimport { GridFrozenComponent } from './examples/grid-frozen.component';\r\nimport { GridGraphqlComponent } from './examples/grid-graphql.component';\r\nimport { GridGraphqlWithoutPaginationComponent } from './examples/grid-graphql-nopage.component';\r\nimport { GridGroupingComponent } from './examples/grid-grouping.component';\r\nimport { GridHeaderButtonComponent } from './examples/grid-headerbutton.component';\r\nimport { GridHeaderMenuComponent } from './examples/grid-headermenu.component';\r\nimport { GridLocalizationComponent } from './examples/grid-localization.component';\r\nimport { GridMenuComponent } from './examples/grid-menu.component';\r\nimport { GridOdataComponent } from './examples/grid-odata.component';\r\nimport { GridRangeComponent } from './examples/grid-range.component';\r\nimport { GridRemoteComponent } from './examples/grid-remote.component';\r\nimport { GridResizeByContentComponent } from './examples/grid-resize-by-content.component';\r\nimport { GridRowDetailComponent } from './examples/grid-rowdetail.component';\r\nimport { GridRowMoveComponent } from './examples/grid-rowmove.component';\r\nimport { GridRowSelectionComponent } from './examples/grid-rowselection.component';\r\nimport { GridStateComponent } from './examples/grid-state.component';\r\nimport { GridTabsComponent } from './examples/grid-tabs.component';\r\nimport { GridTreeDataHierarchicalComponent } from './examples/grid-tree-data-hierarchical.component';\r\nimport { GridTreeDataParentChildComponent } from './examples/grid-tree-data-parent-child.component';\r\nimport { SwtCommonGridTestComponent } from './examples/swt-common-grid-test.component';\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nconst routes: Routes = [\r\n  { path: 'home', component: HomeComponent },\r\n  { path: 'angular-components', component: GridAngularComponent },\r\n  { path: 'additem', component: GridAddItemComponent },\r\n  { path: 'autoheight', component: GridAutoHeightComponent },\r\n  { path: 'basic', component: GridBasicComponent },\r\n  { path: 'colspan', component: GridColspanComponent },\r\n  { path: 'context', component: GridContextMenuComponent },\r\n  { path: 'editor', component: GridEditorComponent },\r\n  { path: 'formatter', component: GridFormatterComponent },\r\n  { path: 'frozen', component: GridFrozenComponent },\r\n  { path: 'headerbutton', component: GridHeaderButtonComponent },\r\n  { path: 'headermenu', component: GridHeaderMenuComponent },\r\n  { path: 'gridgraphql', component: GridGraphqlComponent },\r\n  { path: 'graphql-nopage', component: GridGraphqlWithoutPaginationComponent },\r\n  { path: 'gridmenu', component: GridMenuComponent },\r\n  { path: 'gridstate', component: GridStateComponent },\r\n  { path: 'gridtabs', component: GridTabsComponent },\r\n  { path: 'draggrouping', component: GridDraggableGroupingComponent },\r\n  { path: 'grouping', component: GridGroupingComponent },\r\n  { path: 'localization', component: GridLocalizationComponent },\r\n  { path: 'clientside', component: GridClientSideComponent },\r\n  { path: 'odata', component: GridOdataComponent },\r\n  { path: 'range', component: GridRangeComponent },\r\n  { path: 'remote', component: GridRemoteComponent },\r\n  { path: 'resize-by-content', component: GridResizeByContentComponent },\r\n  { path: 'rowdetail', component: GridRowDetailComponent },\r\n  { path: 'rowmove', component: GridRowMoveComponent },\r\n  { path: 'selection', component: GridRowSelectionComponent },\r\n  { path: 'tree-data-parent-child', component: GridTreeDataParentChildComponent },\r\n  { path: 'tree-data-hierarchical', component: GridTreeDataHierarchicalComponent },\r\n  { path: 'swt', component: SwtCommonGridTestComponent },\r\n  { path: '', redirectTo: '/basic', pathMatch: 'full' },\r\n  { path: '**', redirectTo: '/basic', pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, { useHash: true, relativeLinkResolution: 'legacy' }), TranslateModule],\r\n  exports: [RouterModule, TranslateModule],\r\n})\r\nexport class AppRoutingRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'Angular SlickGrid Demo';\r\n}\r\n","export default \"<nav class=\\\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\\\">\\r\\n  <a class=\\\"navbar-brand\\\" href=\\\"https://github.com/ghiscoding/Angular-Slickgrid\\\">\\r\\n    <i class=\\\"fa fa-github\\\"></i>\\r\\n    <span>{{title}}</span>\\r\\n  </a>\\r\\n  <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarContent\\\"\\r\\n          aria-controls=\\\"navbarContent\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\r\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n  </button>\\r\\n\\r\\n  <div class=\\\"navbar-collapse collapse\\\" id=\\\"navbarContent\\\">\\r\\n    <ul class=\\\"navbar-nav mr-auto\\\">\\r\\n      <li>\\r\\n        <span class=\\\"github-button-container\\\">\\r\\n          <a href=\\\"https://github.com/ghiscoding/angular-slickgrid\\\">\\r\\n            <img src=\\\"https://img.shields.io/github/stars/ghiscoding/angular-slickgrid?style=social\\\">\\r\\n          </a>\\r\\n        </span>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/home']\\\">\\r\\n          <i class=\\\"fa fa-lg fa-home\\\"></i> Home\\r\\n        </a>\\r\\n      </li>\\r\\n    </ul>\\r\\n  </div>\\r\\n</nav>\\r\\n\\r\\n<div class=\\\"container-fluid\\\">\\r\\n  <div class=\\\"panel-wm\\\">\\r\\n    <section id=\\\"panel-left\\\" class=\\\"panel-wm-left\\\">\\r\\n      <ul class=\\\"well nav nav-pills nav-stacked\\\">\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/basic']\\\">1- Basic Grid / 2 Grids</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/formatter']\\\">2- Formatters</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/editor']\\\">3- Editors</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/clientside']\\\">4- Client Side Sort/Filter</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/odata']\\\">5- Backend Server with OData</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/gridgraphql']\\\">6- Backend Server with\\r\\n            GraphQL</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/headerbutton']\\\">7- Header Button Plugin</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/headermenu']\\\">8- Header Menu Plugin</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/gridmenu']\\\">9- Grid Menu (hamburger menu)</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/selection']\\\">10- Row Selection / 2 Grids</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/additem']\\\">11- Add/Update/Highlight Datagrid\\r\\n            Item</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/localization']\\\">12- Localization (i18n)</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/swt']\\\">13- Backend Server Custom Paging</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/grouping']\\\">14- Grouping &amp; Aggregator</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/colspan']\\\">15- Column Span</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/gridstate']\\\">16- Grid State &amp; Local\\r\\n            Storage</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/rowmove']\\\">17- Row Move</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/remote']\\\">18- Remote Model</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/draggrouping']\\\">19- Draggable Grouping</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/frozen']\\\">20- Frozen Columns/Rows</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/rowdetail']\\\">21- Row Detail View</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/angular-components']\\\">22- Use of Angular\\r\\n            Components</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/autoheight']\\\">23- Grid AutoHeight (full\\r\\n            height)</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/gridtabs']\\\">24- within Bootstrap Tabs</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/range']\\\">25- Filter by Range of Values</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/context']\\\">26- Cell & Context Menu</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/graphql-nopage']\\\">\\r\\n            27- GraphQL without Pagination\\r\\n          </a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/tree-data-parent-child']\\\">\\r\\n            28- Tree Data (Parent/Child)\\r\\n          </a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/tree-data-hierarchical']\\\">\\r\\n            29- Tree Data (Hierarchical)\\r\\n          </a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/resize-by-content']\\\">\\r\\n            30- Resize by Cell Content\\r\\n          </a>\\r\\n        </li>\\r\\n      </ul>\\r\\n    </section>\\r\\n\\r\\n    <section class=\\\"panel-wm-content\\\">\\r\\n      <div id=\\\"demo-container\\\">\\r\\n        <router-outlet></router-outlet>\\r\\n      </div>\\r\\n    </section>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \".body-content {\\n  margin-top: 56px;\\n}\\n\\n.lightblue {\\n  color: lightblue;\\n}\\n\\n.red {\\n  color: red;\\n}\\n\\n.faded {\\n  opacity: 0.2;\\n}\\n\\n.faded:hover {\\n  opacity: 0.5;\\n}\\n\\nsection {\\n  margin: 0;\\n}\\n\\n/** Sidebar (left) and Content (right) */\\n\\n@media (min-width: 1200px) {\\n  .panel-wm-content .container {\\n    width: calc(1170px - 250px);\\n  }\\n}\\n\\n.panel-wm {\\n  padding-top: 56px;\\n}\\n\\n.panel-wm .nav-stacked {\\n  padding-bottom: 30px;\\n}\\n\\n.panel-wm .nav-stacked .nav-item {\\n  width: 100%;\\n}\\n\\n.panel-wm .nav > li > a {\\n  padding: 10px 15px;\\n  border-radius: 0;\\n}\\n\\n.panel-wm .panel-wm-content {\\n  padding-left: 255px;\\n  padding-right: 15px;\\n}\\n\\n.panel-wm .panel-wm-left {\\n  position: fixed;\\n  z-index: 400;\\n  transition: left 0.15s;\\n  top: calc(56px);\\n  bottom: 0;\\n  left: 0;\\n  background-color: #f5f5f5;\\n  transform: translate3d(0, 0, 0);\\n  border-right: 1px solid #d0d0d0;\\n  overflow-y: auto;\\n  width: 250px;\\n}\";","import { AppRoutingRoutingModule } from './app-routing.module';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { Injector, APP_INITIALIZER, NgModule } from '@angular/core';\r\nimport { LOCATION_INITIALIZED } from '@angular/common';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { TabsModule } from 'ngx-bootstrap/tabs';\r\nimport { TranslateModule, TranslateLoader, TranslateService } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { CustomActionFormatterComponent } from './examples/custom-actionFormatter.component';\r\nimport { CustomTitleFormatterComponent } from './examples/custom-titleFormatter.component';\r\nimport { EditorNgSelectComponent } from './examples/editor-ng-select.component';\r\nimport { FilterNgSelectComponent } from './examples/filter-ng-select.component';\r\nimport { GridAddItemComponent } from './examples/grid-additem.component';\r\nimport { GridAutoHeightComponent } from './examples/grid-autoheight.component';\r\nimport { GridBasicComponent } from './examples/grid-basic.component';\r\nimport { GridClientSideComponent } from './examples/grid-clientside.component';\r\nimport { GridColspanComponent } from './examples/grid-colspan.component';\r\nimport { GridContextMenuComponent } from './examples/grid-contextmenu.component';\r\nimport { GridDraggableGroupingComponent } from './examples/grid-draggrouping.component';\r\nimport { GridEditorComponent } from './examples/grid-editor.component';\r\nimport { GridAngularComponent } from './examples/grid-angular.component';\r\nimport { GridFormatterComponent } from './examples/grid-formatter.component';\r\nimport { GridFrozenComponent } from './examples/grid-frozen.component';\r\nimport { GridGraphqlComponent } from './examples/grid-graphql.component';\r\nimport { GridGraphqlWithoutPaginationComponent } from './examples/grid-graphql-nopage.component';\r\nimport { GridGroupingComponent } from './examples/grid-grouping.component';\r\nimport { GridHeaderButtonComponent } from './examples/grid-headerbutton.component';\r\nimport { GridHeaderMenuComponent } from './examples/grid-headermenu.component';\r\nimport { GridLocalizationComponent } from './examples/grid-localization.component';\r\nimport { GridMenuComponent } from './examples/grid-menu.component';\r\nimport { GridOdataComponent } from './examples/grid-odata.component';\r\nimport { GridRangeComponent } from './examples/grid-range.component';\r\nimport { GridRemoteComponent } from './examples/grid-remote.component';\r\nimport { GridResizeByContentComponent } from './examples/grid-resize-by-content.component';\r\nimport { GridRowDetailComponent } from './examples/grid-rowdetail.component';\r\nimport { GridRowMoveComponent } from './examples/grid-rowmove.component';\r\nimport { GridRowSelectionComponent } from './examples/grid-rowselection.component';\r\nimport { GridStateComponent } from './examples/grid-state.component';\r\nimport { GridTabsComponent } from './examples/grid-tabs.component';\r\nimport { GridTreeDataHierarchicalComponent } from './examples/grid-tree-data-hierarchical.component';\r\nimport { GridTreeDataParentChildComponent } from './examples/grid-tree-data-parent-child.component';\r\nimport { HomeComponent } from './examples/home.component';\r\nimport { RowDetailPreloadComponent } from './examples/rowdetail-preload.component';\r\nimport { RowDetailViewComponent } from './examples/rowdetail-view.component';\r\n\r\nimport { SwtCommonGridTestComponent } from './examples/swt-common-grid-test.component';\r\nimport { SwtCommonGridPaginationComponent } from './examples/swt-common-grid-pagination.component';\r\nimport { SwtCommonGridComponent } from './examples/swt-common-grid.component';\r\n\r\n// import our custom module, library created using this article\r\n// https://medium.com/@ngl817/building-an-angular-4-component-library-with-the-angular-cli-and-ng-packagr-53b2ade0701e\r\nimport { AngularSlickgridModule } from './modules/angular-slickgrid/modules/angular-slickgrid.module';\r\n// import { SlickgridModule } from 'angular-slickgrid';\r\n\r\n// load necessary Flatpickr Locale(s), but make sure it's imported AFTER the SlickgridModule import\r\nimport 'flatpickr/dist/l10n/fr';\r\n\r\n// AoT requires an exported function for factories\r\nexport function createTranslateLoader(http: HttpClient) {\r\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\r\n}\r\n\r\n// use an Initializer Factory as describe here: https://github.com/ngx-translate/core/issues/517#issuecomment-299637956\r\nexport function appInitializerFactory(translate: TranslateService, injector: Injector) {\r\n  return () => new Promise<any>((resolve: any) => {\r\n    const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\r\n    locationInitialized.then(() => {\r\n      const langToSet = 'en';\r\n      translate.setDefaultLang('en');\r\n      translate.use(langToSet).subscribe(() => {\r\n        // console.info(`Successfully initialized '${langToSet}' language.'`);\r\n      }, err => {\r\n        console.error(`Problem with '${langToSet}' language initialization.'`);\r\n      }, () => {\r\n        resolve(null);\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\n// @dynamic\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    CustomActionFormatterComponent,\r\n    CustomTitleFormatterComponent,\r\n    EditorNgSelectComponent,\r\n    FilterNgSelectComponent,\r\n    GridAddItemComponent,\r\n    GridAngularComponent,\r\n    GridAutoHeightComponent,\r\n    GridBasicComponent,\r\n    GridClientSideComponent,\r\n    GridColspanComponent,\r\n    GridContextMenuComponent,\r\n    GridDraggableGroupingComponent,\r\n    GridEditorComponent,\r\n    GridFormatterComponent,\r\n    GridFrozenComponent,\r\n    GridGraphqlComponent,\r\n    GridGraphqlWithoutPaginationComponent,\r\n    GridGroupingComponent,\r\n    GridHeaderButtonComponent,\r\n    GridHeaderMenuComponent,\r\n    GridLocalizationComponent,\r\n    GridMenuComponent,\r\n    GridOdataComponent,\r\n    GridRangeComponent,\r\n    GridRemoteComponent,\r\n    GridResizeByContentComponent,\r\n    GridRowDetailComponent,\r\n    GridRowMoveComponent,\r\n    GridRowSelectionComponent,\r\n    GridStateComponent,\r\n    GridTabsComponent,\r\n    GridTreeDataParentChildComponent,\r\n    GridTreeDataHierarchicalComponent,\r\n    RowDetailPreloadComponent,\r\n    RowDetailViewComponent,\r\n    SwtCommonGridTestComponent,\r\n    SwtCommonGridPaginationComponent,\r\n    SwtCommonGridComponent,\r\n    HomeComponent\r\n  ],\r\n  imports: [\r\n    AppRoutingRoutingModule,\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    NgSelectModule,\r\n    TabsModule.forRoot(),\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: (createTranslateLoader),\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n    AngularSlickgridModule.forRoot({\r\n      // add any Global Grid Options/Config you might want\r\n      // to avoid passing the same options over and over in each grids of your App\r\n      enableAutoResize: true,\r\n      autoResize: {\r\n        containerId: 'grid-container',\r\n        sidePadding: 10\r\n      }\r\n    })\r\n  ],\r\n  entryComponents: [\r\n    // dynamically created components\r\n    CustomActionFormatterComponent,\r\n    CustomTitleFormatterComponent,\r\n    EditorNgSelectComponent,\r\n    FilterNgSelectComponent,\r\n    RowDetailPreloadComponent,\r\n    RowDetailViewComponent,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: APP_INITIALIZER,\r\n      useFactory: appInitializerFactory,\r\n      deps: [TranslateService, Injector],\r\n      multi: true\r\n    }\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic()\r\n  .bootstrapModule(AppModule, { preserveWhitespaces: true }) // preserveWhitespaces is now default to False since Angular 6\r\n  .catch(err => console.log(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}