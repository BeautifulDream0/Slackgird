{
  "version": 3,
  "file": "angular-slickgrid.umd.min.js",
  "sources": [
    "ng://angular-slickgrid/node_modules/tslib/tslib.es6.js",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/delimiterType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/fileType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/gridStateType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/operatorType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/sortDirection.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/compareDateUtility.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsShortSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateIsoSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/numericSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/stringSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/sorterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/collection.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/booleanFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/filterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateIsoFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsShortFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUtcFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/collectionSearchFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/numberFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/stringFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/executeMappedCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundDateFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundInputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundSliderFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/inputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/selectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/multipleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/nativeSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/singleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/sliderFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/global-grid-options.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/slickgrid-config.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/filterFactory.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/filter.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/export.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/sort.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/constants.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/controlAndPlugin.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphqlQueryBuilder.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphql.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/global-utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid-odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridEvent.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridState.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/groupingAndColspan.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/resizer.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/avgAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/minAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/maxAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/sumAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/checkboxEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/dateEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/floatEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/integerEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/longTextEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/selectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/multipleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/singleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/sliderEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/textEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/arrayObjectToCsvFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/arrayToCsvFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/boldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkboxFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkmarkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionEditorFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/complexObjectFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeShortIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeShortUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/decimalFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/deleteIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/editIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkUriPrefixFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/infoIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/lowercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/maskFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/multipleFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentSymbolFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/progressBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateBooleanFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/uppercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/yesNoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsPercentageFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/minTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/maxTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/slick-pagination.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/angular-slickgrid.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/modules/angular-slickgrid.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n",
    "export enum DelimiterType {\r\n  colon = ':',\r\n  comma = ',',\r\n  equalSign = '=',\r\n  pipe = '|',\r\n  semicolon = ';',\r\n  space = ' ',\r\n  tab = '\\t',\r\n\r\n  doubleColon = '::',\r\n  doublePipe = '||',\r\n  doubleSemicolon = ';;',\r\n}\r\n\r\n",
    "export enum FileType {\r\n  csv = 'csv',\r\n  doc = 'doc',\r\n  docx = 'docx',\r\n  pdf = 'pdf',\r\n  txt = 'txt',\r\n  xls = 'xls',\r\n  xlsx = 'xlsx'\r\n}\r\n",
    "export enum GridStateType {\r\n  columns = 'columns',\r\n  filter = 'filter',\r\n  pagination = 'pagination',\r\n  sorter = 'sorter'\r\n}\r\n",
    "export enum OperatorType {\n  /** value is empty */\n  empty = '',\n\n  /** value contains x */\n  contains = 'Contains',\n\n  /** value less than x */\n  lessThan = 'LT',\n\n  /** value less than or equal to x */\n  lessThanOrEqual = 'LE',\n\n  /** value greater than x */\n  greaterThan = 'GT',\n\n  /** value great than or equal to x */\n  greaterThanOrEqual = 'GE',\n\n  /** value not equal to x */\n  notEqual = 'NE',\n\n  /** value equal to x */\n  equal = 'EQ',\n\n  /** String ends with value */\n  endsWith = 'EndsWith',\n\n  /** String starts with value */\n  startsWith = 'StartsWith',\n\n  /** Find an equal match inside a collection */\n  in = 'IN',\n\n  /** Inverse (Not In) of an equal match inside a collection */\n  notIn = 'NOT_IN',\n\n  /**\n   * Find a substring contained inside a collection\n   * For example, this condition would return True with \"IN_CONTAINS\":: value='Task2,Task3', collection=['Task2','Task3']\n   * This would have returned False with \"IN\" because 'Task2' does not equal 'Task2,Task3'. However 'Task2' is contained in 'Task2,Task3'\n   */\n  inContains = 'IN_CONTAINS',\n\n  /** Inversed (Not In) of substring contained inside a collection */\n  notInContains = 'NOT_IN_CONTAINS',\n}\n",
    "export enum SortDirection {\r\n  asc = 'asc',\r\n  ASC = 'ASC',\r\n  desc = 'desc',\r\n  DESC = 'DESC'\r\n}\r\n",
    "import { FieldType, OperatorType } from '../models/index';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport 'rxjs/add/operator/first';\nimport 'rxjs/add/operator/take';\nimport 'rxjs/add/operator/toPromise';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n/** Simple function to which will loop and create as demanded the number of white spaces,\n * this will be used in the Excel export\n * @param int nbSpaces: number of white spaces to create\n */\nexport function addWhiteSpaces(nbSpaces): string {\n  let result = '';\n\n  for (let i = 0; i < nbSpaces; i++) {\n    result += ' ';\n  }\n  return result;\n}\n\n/** HTML encode using jQuery */\nexport function htmlEncode(value) {\n  // create a in-memory div, set it's inner text(which jQuery automatically encodes)\n  // then grab the encoded contents back out.  The div never exists on the page.\n  return $('<div/>').text(value).html();\n}\n\n/** HTML decode using jQuery */\nexport function htmlDecode(value) {\n  return $('<div/>').html(value).text();\n}\n\n/** decode text into html entity\n * @param string text: input text\n * @param string text: output text\n */\nexport function htmlEntityDecode(input: string): string {\n  return input.replace(/&#(\\d+);/g, function (match, dec) {\n    return String.fromCharCode(dec);\n  });\n}\n\n/** decode text into html entity\n * @param string text: input text\n * @param string text: output text\n */\nexport function htmlEntityEncode(input: any): string {\n  const buf = [];\n  for (let i = input.length - 1; i >= 0; i--) {\n    buf.unshift(['&#', input[i].charCodeAt(), ';'].join(''));\n  }\n  return buf.join('');\n}\n\n/**\n * Compares two arrays to determine if all the items are equal\n * @param a first array\n * @param b second array to compare with a\n * @param [orderMatters=false] flag if the order matters, if not arrays will be sorted\n * @return boolean true if equal, else false\n */\nexport function arraysEqual(a: any[], b: any[], orderMatters: boolean = false): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (!a || !b) {\n    return false;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  if (!orderMatters) {\n    a.sort();\n    b.sort();\n  }\n\n  for (let i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Try casting an input of type Promise | Observable into a Promise type.\n * @param object which could be of type Promise or Observable\n * @param fromServiceName string representing the caller service name and will be used if we throw a casting problem error\n */\nexport function castToPromise<T>(input: Promise<T> | Observable<T>, fromServiceName: string = ''): Promise<T> {\n  let promise: any = input;\n\n  if (input instanceof Promise) {\n    // if it's already a Promise then return it\n    return input;\n  } else if (input instanceof Observable) {\n    promise = input.first().toPromise();\n    if (!(promise instanceof Promise)) {\n      promise = input.take(1).toPromise();\n    }\n    if (!(promise instanceof Promise)) {\n      throw new Error(\n        `Something went wrong, Angular-Slickgrid ${fromServiceName} is not able to convert the Observable into a Promise.\n        If you are using Angular HttpClient, you could try converting your http call to a Promise with \".toPromise()\"\n        for example::  this.http.post('graphql', { query: graphqlQuery }).toPromise()\n        `);\n    }\n  }\n\n  return promise;\n}\n\n/**\n * Uses the logic function to find an item in an array or returns the default\n * value provided (empty object by default)\n * @param any[] array the array to filter\n * @param function logic the logic to find the item\n * @param any [defaultVal={}] the default value to return\n * @return object the found object or default value\n */\nexport function findOrDefault(array: any[], logic: (item: any) => boolean, defaultVal = {}): any {\n  return array.find(logic) || defaultVal;\n}\n\n/**\n  * Take a number (or a string) and display it as a formatted decimal string with defined minimum and maximum decimals\n  * @param input\n  * @param minDecimal\n  * @param maxDecimal\n  */\nexport function decimalFormatted(input: number | string, minDecimal?: number, maxDecimal?: number) {\n  if (isNaN(+input)) {\n    return input;\n  }\n\n  const minDec = (minDecimal === undefined) ? 2 : minDecimal;\n  const maxDec = (maxDecimal === undefined) ? 2 : maxDecimal;\n  let amount = String(Math.round(+input * Math.pow(10, maxDec)) / Math.pow(10, maxDec));\n\n  if (amount.indexOf('.') < 0) {\n    amount += '.';\n  }\n  while ((amount.length - amount.indexOf('.')) <= minDec) {\n    amount += '0';\n  }\n  return amount;\n}\n\n/** From a dot (.) notation find and return a property within an object given a path */\nexport function getDescendantProperty(obj: any, path: string) {\n  return path.split('.').reduce((acc, part) => acc && acc[part], obj);\n}\n\n/** Get the browser's scrollbar width, this is different to each browser */\nexport function getScrollBarWidth() {\n  const $outer = $('<div>').css({ visibility: 'hidden', width: 100, overflow: 'scroll' }).appendTo('body');\n  const widthWithScroll = $('<div>').css({ width: '100%' }).appendTo($outer).outerWidth();\n  $outer.remove();\n  return Math.ceil(100 - widthWithScroll);\n}\n\n/**\n * From a Date FieldType, return it's equivalent moment.js format\n * refer to moment.js for the format standard used: https://momentjs.com/docs/#/parsing/string-format/\n * @param fieldType\n */\nexport function mapMomentDateFormatWithFieldType(fieldType: FieldType): string {\n  let map: string;\n  switch (fieldType) {\n    case FieldType.dateTime:\n    case FieldType.dateTimeIso:\n      map = 'YYYY-MM-DD HH:mm:ss';\n      break;\n    case FieldType.dateTimeShortIso:\n      map = 'YYYY-MM-DD HH:mm';\n      break;\n    case FieldType.dateTimeIsoAmPm:\n      map = 'YYYY-MM-DD hh:mm:ss a';\n      break;\n    case FieldType.dateTimeIsoAM_PM:\n      map = 'YYYY-MM-DD hh:mm:ss A';\n      break;\n    case FieldType.dateUs:\n      map = 'MM/DD/YYYY';\n      break;\n    case FieldType.dateUsShort:\n      map = 'M/D/YY';\n      break;\n    case FieldType.dateTimeUs:\n      map = 'MM/DD/YYYY HH:mm:ss';\n      break;\n    case FieldType.dateTimeShortUs:\n      map = 'MM/DD/YYYY HH:mm';\n      break;\n    case FieldType.dateTimeUsAmPm:\n      map = 'MM/DD/YYYY hh:mm:ss a';\n      break;\n    case FieldType.dateTimeUsAM_PM:\n      map = 'MM/DD/YYYY hh:mm:ss A';\n      break;\n    case FieldType.dateTimeUsShort:\n      map = 'M/D/YY H:m:s';\n      break;\n    case FieldType.dateTimeUsShortAmPm:\n      map = 'M/D/YY h:m:s a';\n      break;\n    case FieldType.dateUtc:\n      map = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\n      break;\n    case FieldType.date:\n    case FieldType.dateIso:\n    default:\n      map = 'YYYY-MM-DD';\n      break;\n  }\n  return map;\n}\n\n/**\n * From a Date FieldType, return it's equivalent Flatpickr format\n * refer to Flatpickr for the format standard used: https://chmln.github.io/flatpickr/formatting/#date-formatting-tokens\n * also note that they seem very similar to PHP format (except for am/pm): http://php.net/manual/en/function.date.php\n * @param fieldType\n */\nexport function mapFlatpickrDateFormatWithFieldType(fieldType: FieldType): string {\n  /*\n    d: Day of the month, 2 digits with leading zeros\t01 to 31\n    D: A textual representation of a day\tMon through Sun\n    l: (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday\n    j: Day of the month without leading zeros\t1 to 31\n    J: Day of the month without leading zeros and ordinal suffix\t1st, 2nd, to 31st\n    w: Numeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday)\n    F: A full textual representation of a month\tJanuary through December\n    m: Numeric representation of a month, with leading zero\t01 through 12\n    n: Numeric representation of a month, without leading zeros\t1 through 12\n    M: A short textual representation of a month\tJan through Dec\n    U: The number of seconds since the Unix Epoch\t1413704993\n    y: A two digit representation of a year\t99 or 03\n    Y: A full numeric representation of a year, 4 digits\t1999 or 2003\n    H: Hours (24 hours)\t00 to 23\n    h: Hours\t1 to 12\n    i: Minutes\t00 to 59\n    S: Seconds, 2 digits\t00 to 59\n    s: Seconds\t0, 1 to 59\n    K: AM/PM\tAM or PM\n  */\n  let map: string;\n  switch (fieldType) {\n    case FieldType.dateTime:\n    case FieldType.dateTimeIso:\n      map = 'Y-m-d H:i:S';\n      break;\n    case FieldType.dateTimeIsoAmPm:\n      map = 'Y-m-d h:i:S K'; // there is no lowercase in Flatpickr :(\n      break;\n    case FieldType.dateTimeIsoAM_PM:\n      map = 'Y-m-d h:i:S K';\n      break;\n    case FieldType.dateUs:\n      map = 'm/d/Y';\n      break;\n    case FieldType.dateUsShort:\n      map = 'm/d/y';\n      break;\n    case FieldType.dateTimeUs:\n      map = 'm/d/Y H:i:S';\n      break;\n    case FieldType.dateTimeUsAmPm:\n      map = 'm/d/Y h:i:S K'; // there is no lowercase in Flatpickr :(\n      break;\n    case FieldType.dateTimeUsAM_PM:\n      map = 'm/d/Y h:i:s K';\n      break;\n    case FieldType.dateTimeUsShort:\n      map = 'm/d/y H:i:s';\n      break;\n    case FieldType.dateTimeUsShortAmPm:\n      map = 'm/d/y h:i:s K'; // there is no lowercase in Flatpickr :(\n      break;\n    case FieldType.dateUtc:\n      map = 'Z';\n      break;\n    case FieldType.date:\n    case FieldType.dateIso:\n    default:\n      map = 'Y-m-d';\n      break;\n  }\n  return map;\n}\n\n/**\n * Mapper for query operators (ex.: <= is \"le\", > is \"gt\")\n * @param string operator\n * @returns string map\n */\nexport function mapOperatorType(operator: string): OperatorType {\n  let map: OperatorType;\n\n  switch (operator) {\n    case '<':\n      map = OperatorType.lessThan;\n      break;\n    case '<=':\n      map = OperatorType.lessThanOrEqual;\n      break;\n    case '>':\n      map = OperatorType.greaterThan;\n      break;\n    case '>=':\n      map = OperatorType.greaterThanOrEqual;\n      break;\n    case '<>':\n    case '!=':\n    case 'neq':\n    case 'NEQ':\n      map = OperatorType.notEqual;\n      break;\n    case '*':\n    case '.*':\n    case 'startsWith':\n      map = OperatorType.startsWith;\n      break;\n    case '*.':\n    case 'endsWith':\n      map = OperatorType.endsWith;\n      break;\n    case '=':\n    case '==':\n    case 'eq':\n    case 'EQ':\n      map = OperatorType.equal;\n      break;\n    case 'in':\n    case 'IN':\n      map = OperatorType.in;\n      break;\n    case 'notIn':\n    case 'NIN':\n    case 'NOT_IN':\n      map = OperatorType.notIn;\n      break;\n    default:\n      map = OperatorType.contains;\n      break;\n  }\n\n  return map;\n}\n\n/**\n * Mapper for query operator by a Filter Type\n * For example a multiple-select typically uses 'IN' operator\n * @param operator\n * @returns string map\n */\nexport function mapOperatorByFieldType(fieldType: FieldType | string): OperatorType {\n  let map: OperatorType;\n\n  switch (fieldType) {\n    case FieldType.string:\n    case FieldType.unknown:\n      map = OperatorType.contains;\n      break;\n    case FieldType.float:\n    case FieldType.number:\n    case FieldType.date:\n    case FieldType.dateIso:\n    case FieldType.date:\n    case FieldType.dateUtc:\n    case FieldType.dateTime:\n    case FieldType.dateTimeIso:\n    case FieldType.dateTimeIsoAmPm:\n    case FieldType.dateTimeIsoAM_PM:\n    case FieldType.dateUs:\n    case FieldType.dateUsShort:\n    case FieldType.dateTimeUs:\n    case FieldType.dateTimeUsAmPm:\n    case FieldType.dateTimeUsAM_PM:\n    case FieldType.dateTimeUsShort:\n    case FieldType.dateTimeUsShortAmPm:\n    case FieldType.dateTimeUsShortAM_PM:\n    default:\n      map = OperatorType.equal;\n      break;\n  }\n\n  return map;\n}\n\n/**\n * Parse a date passed as a string and return a Date object (if valid)\n * @param inputDateString\n * @returns string date formatted\n */\nexport function parseUtcDate(inputDateString: string, useUtc: boolean): string | null {\n  let date = null;\n\n  if (/^[0-9\\-\\/]*$/.test(inputDateString)) {\n    // get the UTC datetime with moment.js but we need to decode the value so that it's valid text\n    const dateString = decodeURIComponent(inputDateString);\n    const dateMoment = moment(new Date(dateString));\n    if (dateMoment.isValid() && dateMoment.year().toString().length === 4) {\n      date = (useUtc) ? dateMoment.utc().format() : dateMoment.format();\n    }\n  }\n\n  return date;\n}\n\n/**\n * Sanitize, return only the text without HTML tags\n * @input htmlString\n * @return text\n */\nexport function sanitizeHtmlToText(htmlString: string) {\n  const temp = document.createElement('div');\n  temp.innerHTML = htmlString;\n  return temp.textContent || temp.innerText;\n}\n\n/**\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\n * @param string\n * @returns string\n */\nexport function titleCase(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Converts a string to camel case\n * @param str the string to convert\n * @return the string in camel case\n */\nexport function toCamelCase(str: string): string {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w|[\\s+\\-_\\/])/g, (match: string, offset: number) => {\n    // remove white space or hypens or underscores\n    if (/[\\s+\\-_\\/]/.test(match)) {\n      return '';\n    }\n\n    return offset === 0 ? match.toLowerCase() : match.toUpperCase();\n  });\n}\n\n/**\n * Converts a string to kebab (hypen) case\n * @param str the string to convert\n * @return the string in kebab case\n */\nexport function toKebabCase(str: string): string {\n  return toCamelCase(str).replace(/([A-Z])/g, '-$1').toLowerCase();\n}\n\n/**\n * Unsubscribe all Observables Subscriptions\n * It will return an empty array if it all went well\n * @param subscriptions\n */\nexport function unsubscribeAllObservables(subscriptions: Subscription[]): Subscription[] {\n  if (Array.isArray(subscriptions)) {\n    subscriptions.forEach((subscription: Subscription) => {\n      if (subscription && subscription.unsubscribe) {\n        subscription.unsubscribe();\n      }\n    });\n    subscriptions = [];\n  }\n\n  return subscriptions;\n}\n",
    "import * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport function compareDates(value1, value2, format, sortDirection, strict?: boolean) {\r\n  let diff = 0;\r\n\r\n  if (value1 === null || value1 === '' || !moment(value1, format, strict).isValid()) {\r\n    diff = -1;\r\n  } else if (value2 === null || value2 === '' || !moment(value2, format, strict).isValid()) {\r\n    diff = 1;\r\n  } else {\r\n    const date1 = moment(value1, format, strict);\r\n    const date2 = moment(value2, format, strict);\r\n    diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);\r\n  }\r\n\r\n  return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));\r\n}\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nimport { compareDates } from './compareDateUtility';\r\n\r\nexport const dateSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, moment.ISO_8601, sortDirection);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const numericSorter: Sorter = (value1, value2, sortDirection) => {\r\n  const x = (isNaN(value1) || value1 === '' || value1 === null) ? -99e+10 : parseFloat(value1);\r\n  const y = (isNaN(value2) || value2 === '' || value2 === null) ? -99e+10 : parseFloat(value2);\r\n  return sortDirection * (x === y ? 0 : (x > y ? 1 : -1));\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const stringSorter: Sorter = (value1, value2, sortDirection) => {\r\n  let position;\r\n  if (value1 === null) {\r\n    position = -1;\r\n  } else if (value2 === null) {\r\n    position = 1;\r\n  } else if (value1 === value2) {\r\n    position = 0;\r\n  } else if (sortDirection) {\r\n    position = value1 < value2 ? -1 : 1;\r\n  } else if (!sortDirection) {\r\n    position = value1 < value2 ? 1 : -1;\r\n  }\r\n  return sortDirection * position;\r\n};\r\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\nimport { dateUsShortSorter } from './dateUsShortSorter';\nimport { dateSorter } from './dateSorter';\nimport { dateIsoSorter } from './dateIsoSorter';\nimport { dateUsSorter } from './dateUsSorter';\nimport { numericSorter } from './numericSorter';\nimport { stringSorter } from './stringSorter';\n\nexport const Sorters = {\n  date: dateSorter,\n  dateIso: dateIsoSorter,\n  dateUs: dateUsSorter,\n  dateUsShort: dateUsShortSorter,\n  numeric: numericSorter,\n  string: stringSorter\n};\n",
    "import { FieldType } from './../models/index';\r\nimport { Sorters } from './index';\r\n\r\nexport function sortByFieldType(value1: any, value2: any, fieldType: FieldType, sortDirection: number) {\r\n  let sortResult = 0;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.number:\r\n      sortResult = Sorters.numeric(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.date:\r\n      sortResult = Sorters.date(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateIso:\r\n      sortResult = Sorters.dateIso(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUs:\r\n      sortResult = Sorters.dateUs(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      sortResult = Sorters.dateUsShort(value1, value2, sortDirection);\r\n      break;\r\n    default:\r\n      sortResult = Sorters.string(value1, value2, sortDirection);\r\n      break;\r\n  }\r\n\r\n  return sortResult;\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  CollectionFilterBy,\r\n  CollectionSortBy,\r\n  FieldType,\r\n  OperatorType,\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\n\r\n@Injectable()\r\nexport class CollectionService {\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /**\r\n   * Filter items from a collection\r\n   * @param collection\r\n   * @param filterBy\r\n   */\r\n  filterCollection(collection: any[], filterBy: CollectionFilterBy): any[] {\r\n    let filteredCollection: any[] = [];\r\n\r\n    if (filterBy) {\r\n      const property = filterBy.property || '';\r\n      const operator = filterBy.operator || OperatorType.equal;\r\n      // just check for undefined since the filter value could be null, 0, '', false etc\r\n      const value = typeof filterBy.value === 'undefined' ? '' : filterBy.value;\r\n\r\n      switch (operator) {\r\n        case OperatorType.equal:\r\n          filteredCollection = collection.filter((item) => item[property] === value);\r\n          break;\r\n        case OperatorType.in:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) !== -1);\r\n          break;\r\n        case OperatorType.notIn:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) === -1);\r\n          break;\r\n        case OperatorType.contains:\r\n          filteredCollection = collection.filter((item) => value.indexOf(item[property]) !== -1);\r\n          break;\r\n        default:\r\n          filteredCollection = collection.filter((item) => item[property] !== value);\r\n      }\r\n    }\r\n\r\n    return filteredCollection;\r\n  }\r\n\r\n  /**\r\n   * Sort items in a collection\r\n   * @param collection\r\n   * @param sortBy\r\n   * @param enableTranslateLabel\r\n   */\r\n  sortCollection(collection: any[], sortBy: CollectionSortBy, enableTranslateLabel?: boolean): any[] {\r\n    let sortedCollection: any[] = [];\r\n\r\n    if (sortBy) {\r\n      const property = sortBy.property || '';\r\n      const sortDirection = sortBy.hasOwnProperty('sortDesc') ? (sortBy.sortDesc ? -1 : 1) : 1;\r\n      const fieldType = sortBy.fieldType || FieldType.string;\r\n\r\n      sortedCollection = collection.sort((dataRow1: any, dataRow2: any) => {\r\n        const value1 = (enableTranslateLabel) ? this.translate.instant(dataRow1[property] || ' ') : dataRow1[property];\r\n        const value2 = (enableTranslateLabel) ? this.translate.instant(dataRow2[property] || ' ') : dataRow2[property];\r\n        const result = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n        return result;\r\n      });\r\n    }\r\n\r\n    return sortedCollection;\r\n  }\r\n}\r\n",
    "import { FilterCondition, FilterConditionOption } from './../models/index';\r\n\r\nfunction parseBoolean(str: number | string) {\r\n  return /(true|1)/i.test(str + '');\r\n}\r\n\r\nexport const booleanFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  return parseBoolean(options.cellValue) === parseBoolean(searchTerm);\r\n};\r\n",
    "export const testFilterCondition = (operator: string, value1: any, value2: any): boolean => {\n  switch (operator) {\n    case '<':\n    case 'LT': return (value1 < value2);\n    case '<=':\n    case 'LE': return (value1 <= value2);\n    case '>':\n    case 'GT': return (value1 > value2);\n    case '>=':\n    case 'GE': return (value1 >= value2);\n    case '!=':\n    case '<>':\n    case 'NE': return (value1 !== value2);\n    case '=':\n    case '==':\n    case 'EQ': return (value1 === value2);\n    case 'IN': return ((value2 && value2.includes) ? (value2.includes(value1)) : false);\n    case 'NIN':\n    case 'NOT_IN':\n      return ((value2 && value2.includes) ? (!value2.includes(value1)) : false);\n    case 'IN_CONTAINS':\n      if (value2 && Array.isArray(value2) && value2.findIndex) {\n        return ((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);\n      }\n      return false;\n    case 'NIN_CONTAINS':\n    case 'NOT_IN_CONTAINS':\n    if (value2 && Array.isArray(value2) && value2.findIndex) {\n      return !((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);\n    }\n    return false;\n}\nreturn true;\n};\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  const filterSearchType = options.filterSearchType || FieldType.dateIso;\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(filterSearchType);\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerm, searchDateFormat, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue);\r\n  const dateSearch = moment(searchTerm);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateUtcFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerms = Array.isArray(options.searchTerms) && options.searchTerms[0] || [];\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(options.filterSearchType || options.fieldType);\r\n  if (!moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerms[0], searchDateFormat, true).isValid()) {\r\n    return true;\r\n  }\r\n  const dateCell = moment(options.cellValue, moment.ISO_8601, true);\r\n  const dateSearch = moment(searchTerms[0], searchDateFormat, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const collectionSearchFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // multiple-select will always return text, so we should make our cell values text as well\r\n  const cellValue = options.cellValue + '';\r\n\r\n  return testFilterCondition(options.operator || 'IN', cellValue, options.searchTerms || []);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const numberFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const cellValue = parseFloat(options.cellValue);\r\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || 0;\r\n  if (typeof searchTerm === 'string') {\r\n    searchTerm = parseFloat(searchTerm);\r\n  }\r\n\r\n  if (!searchTerm && (!options.operator || options.operator === '')) {\r\n    return true;\r\n  }\r\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption, OperatorType } from '../models/index';\nimport { testFilterCondition } from './filterUtilities';\n\nexport const stringFilterCondition: FilterCondition = (options: FilterConditionOption) => {\n  // make sure the cell value is a string by casting it when possible\n  options.cellValue = (options.cellValue === undefined || options.cellValue === null) ? '' : options.cellValue.toString();\n\n  // make both the cell value and search value lower for case insensitive comparison\n  const cellValue = options.cellValue.toLowerCase();\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || '';\n  if (typeof searchTerm === 'string') {\n    searchTerm = searchTerm.toLowerCase();\n  }\n\n  if (options.operator === '*' || options.operator === OperatorType.endsWith) {\n    return cellValue.endsWith(searchTerm);\n  } else if ((options.operator === '' && options.cellValueLastChar === '*') || options.operator === OperatorType.startsWith) {\n    return cellValue.startsWith(searchTerm);\n  } else if (options.operator === '') {\n    return cellValue.includes(searchTerm);\n  }\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\n};\n",
    "import { booleanFilterCondition } from './booleanFilterCondition';\nimport { dateFilterCondition } from './dateFilterCondition';\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\nimport { FilterConditionOption } from './../models/filterConditionOption.interface';\nimport { FilterCondition } from '../models/filterCondition.interface';\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\nimport { numberFilterCondition } from './numberFilterCondition';\nimport { stringFilterCondition } from './stringFilterCondition';\nimport { FieldType } from '../models/index';\n\nexport const executeMappedCondition: FilterCondition = (options: FilterConditionOption) => {\n  // when using a multi-select ('IN' operator) we will not use the field type but instead go directly with a collection search\n  const operator = options.operator && options.operator.toUpperCase();\n  if (options && options.operator && (operator === 'IN' || operator === 'NIN' || operator === 'IN_CONTAINS' || operator === 'NIN_CONTAINS')) {\n    return collectionSearchFilterCondition(options);\n  }\n\n  // execute the mapped type, or default to String condition check\n  switch (options.fieldType) {\n    case FieldType.boolean:\n      return booleanFilterCondition(options);\n    case FieldType.date:\n      return dateFilterCondition(options);\n    case FieldType.dateUtc:\n      return dateUtcFilterCondition(options);\n    case FieldType.dateIso:\n      return dateIsoFilterCondition(options);\n    case FieldType.dateUs:\n    case FieldType.dateTimeUs:\n      return dateUsFilterCondition(options);\n    case FieldType.dateUsShort:\n    case FieldType.dateTimeUsShort:\n      return dateUsShortFilterCondition(options);\n    case FieldType.number:\n      return numberFilterCondition(options);\n    case FieldType.string:\n    default:\n      return stringFilterCondition(options);\n  }\n};\n",
    "import { FilterConditionOption } from './../models/filterConditionOption.interface';\r\nimport { booleanFilterCondition } from './booleanFilterCondition';\r\nimport { dateFilterCondition } from './dateFilterCondition';\r\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\r\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\r\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\r\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\r\nimport { executeMappedCondition } from './executeMappedCondition';\r\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { numberFilterCondition } from './numberFilterCondition';\r\nimport { stringFilterCondition } from './stringFilterCondition';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const FilterConditions = {\r\n  executeMappedCondition,\r\n  booleanFilter: booleanFilterCondition,\r\n  collectionSearchFilter: collectionSearchFilterCondition,\r\n  dateFilter: dateFilterCondition,\r\n  dateIsoFilter: dateIsoFilterCondition,\r\n  dateUtcFilter: dateUtcFilterCondition,\r\n  dateUsFilter: dateUsFilterCondition,\r\n  dateUsShortFilter: dateUsShortFilterCondition,\r\n  numberFilter: numberFilterCondition,\r\n  stringFilter: stringFilterCondition,\r\n  testFilter: testFilterCondition\r\n};\r\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport { mapFlatpickrDateFormatWithFieldType } from '../services/utilities';\nimport { Column, Filter, FilterArguments, FilterCallback, FieldType, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\n\n// importing Flatpickr works better with a 'require'\ndeclare function require(name: string);\nrequire('flatpickr');\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class CompoundDateFilter implements Filter {\n  private _clearFilterTriggered = false;\n  private $filterElm: any;\n  private $filterInputElm: any;\n  private $selectOperatorElm: any;\n  private _currentValue: string;\n  private _operator: OperatorType | OperatorString;\n  flatInstance: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor(private translate: TranslateService) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  set operator(op: OperatorType | OperatorString) {\n    this._operator = op;\n  }\n  get operator(): OperatorType | OperatorString {\n    return this._operator || OperatorType.empty;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    if (args) {\n      this.grid = args.grid;\n      this.callback = args.callback;\n      this.columnDef = args.columnDef;\n      this.operator = args.operator || '';\n      this.searchTerms = args.searchTerms || [];\n\n      // date input can only have 1 search term, so we will use the 1st array index if it exist\n      const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n      // step 1, create the DOM Element of the filter which contain the compound Operator+Input\n      // and initialize it if searchTerm is filled\n      this.$filterElm = this.createDomElement(searchTerm);\n\n      // step 3, subscribe to the keyup event and run the callback when that happens\n      // also add/remove \"filled\" class for styling purposes\n      this.$filterInputElm.keyup((e: any) => {\n        this.onTriggerEvent(e);\n      });\n      this.$selectOperatorElm.change((e: any) => {\n        this.onTriggerEvent(e);\n      });\n    }\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.flatInstance && this.$selectOperatorElm) {\n      this._clearFilterTriggered = true;\n      this.searchTerms = [];\n      this.$selectOperatorElm.val(0);\n      this.flatInstance.clear();\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('keyup').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values && Array.isArray(values)) {\n      this.flatInstance.setDate(values[0]);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n  private buildDatePickerInput(searchTerm?: SearchTerm) {\n    const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\n    const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnDef.type || FieldType.dateUtc);\n    let currentLocale = this.translate.currentLang || 'en';\n    if (currentLocale.length > 2) {\n      currentLocale = currentLocale.substring(0, 2);\n    }\n\n    const pickerOptions: any = {\n      defaultDate: searchTerm || '',\n      altInput: true,\n      altFormat: outputFormat,\n      dateFormat: inputFormat,\n      wrap: true,\n      closeOnSelect: true,\n      locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\n      onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\n        this._currentValue = dateStr;\n\n        // when using the time picker, we can simulate a keyup event to avoid multiple backend request\n        // since backend request are only executed after user start typing, changing the time should be treated the same way\n        if (pickerOptions.enableTime) {\n          this.onTriggerEvent(new CustomEvent('keyup'));\n        } else {\n          this.onTriggerEvent(undefined);\n        }\n      }\n    };\n\n    // add the time picker when format is UTC (Z) or has the 'h' (meaning hours)\n    if (outputFormat && (outputFormat === 'Z' || outputFormat.toLowerCase().includes('h'))) {\n      pickerOptions.enableTime = true;\n    }\n\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\n    const $filterInputElm: any = $(`<div class=\"flatpickr\"><input type=\"text\" class=\"form-control\" data-input placeholder=\"${placeholder}\"></div>`);\n    this.flatInstance = ($filterInputElm[0] && typeof $filterInputElm[0].flatpickr === 'function') ? $filterInputElm[0].flatpickr(pickerOptions) : null;\n    return $filterInputElm;\n  }\n\n  private buildSelectOperatorHtmlString() {\n    const optionValues = this.getOptionValues();\n    let optionValueString = '';\n    optionValues.forEach((option) => {\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\n    });\n\n    return `<select class=\"form-control\">${optionValueString}</select>`;\n  }\n\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\n    return [\n      { operator: '' as OperatorString, description: '' },\n      { operator: '=' as OperatorString, description: '' },\n      { operator: '<' as OperatorString, description: '' },\n      { operator: '<=' as OperatorString, description: '' },\n      { operator: '>' as OperatorString, description: '' },\n      { operator: '>=' as OperatorString, description: '' },\n      { operator: '<>' as OperatorString, description: '' }\n    ];\n  }\n\n  /**\n   * Create the DOM element\n   */\n  private createDomElement(searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM Select dropdown for the Operator\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\n    this.$filterInputElm = this.buildDatePickerInput(searchTerm);\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\n    const $containerInputGroup = $(`<div class=\"input-group flatpickr\"></div>`);\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon input-group-prepend operator\"></div>`);\n\n    /* the DOM element final structure will be\n      <div class=\"input-group\">\n        <div class=\"input-group-addon input-group-prepend operator\">\n          <select class=\"form-control\"></select>\n        </div>\n        <div class=flatpickr>\n          <input type=\"text\" class=\"form-control\" data-input>\n        </div>\n      </div>\n    */\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\n    $containerInputGroup.append($operatorInputGroupAddon);\n    $containerInputGroup.append(this.$filterInputElm);\n\n    // create the DOM element & add an ID and filter class\n    $filterContainerElm.append($containerInputGroup);\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterInputElm.data('columnId', this.columnDef.id);\n\n    if (this.operator) {\n      this.$selectOperatorElm.val(this.operator);\n    }\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterContainerElm.addClass('filled');\n      this._currentValue = searchTerm as string;\n    }\n\n    // append the new DOM element to the header row\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\n      $filterContainerElm.appendTo($headerElm);\n    }\n\n    return $filterContainerElm;\n  }\n\n  private loadFlatpickrLocale(locale: string) {\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\n    if (locale !== 'en') {\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\n    }\n    return 'en';\n  }\n\n  private onTriggerEvent(e: Event | undefined) {\n    if (this._clearFilterTriggered) {\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\n      this._clearFilterTriggered = false; // reset flag for next use\n    } else {\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\n      (this._currentValue) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (this._currentValue ? [this._currentValue] : null), operator: selectedOperator || '' });\n    }\n  }\n\n  private hide() {\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\n      this.flatInstance.close();\n    }\n  }\n\n  private show() {\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\n      this.flatInstance.open();\n    }\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport { FieldType } from './../models/index';\nimport { Column, Filter, FilterArguments, FilterCallback, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class CompoundInputFilter implements Filter {\n  private _clearFilterTriggered = false;\n  private $filterElm: any;\n  private $filterInputElm: any;\n  private $selectOperatorElm: any;\n  private _operator: OperatorType | OperatorString;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor(private translate: TranslateService) {}\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  set operator(op: OperatorType | OperatorString) {\n    this._operator = op;\n  }\n  get operator(): OperatorType | OperatorString {\n    return this._operator || OperatorType.empty;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.operator = args.operator;\n    this.searchTerms = args.searchTerms || [];\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\n    // and initialize it if searchTerms is filled\n    this.$filterElm = this.createDomElement(searchTerm);\n\n    // step 3, subscribe to the keyup event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterInputElm.keyup((e: any) => {\n      this.onTriggerEvent(e);\n    });\n    this.$selectOperatorElm.change((e: any) => {\n      this.onTriggerEvent(e);\n    });\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm && this.$selectOperatorElm) {\n      this._clearFilterTriggered = true;\n      this.searchTerms = [];\n      this.$selectOperatorElm.val(0);\n      this.$filterInputElm.val('');\n      this.onTriggerEvent(null);\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('keyup').remove();\n      this.$selectOperatorElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values && Array.isArray(values)) {\n      this.$filterElm.val(values[0]);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  private buildInputHtmlString() {\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\n    return `<input class=\"form-control\" type=\"text\" placeholder=\"${placeholder}\" />`;\n  }\n\n  private buildSelectOperatorHtmlString() {\n    const optionValues = this.getOptionValues();\n    let optionValueString = '';\n    optionValues.forEach((option) => {\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\n    });\n\n    return `<select class=\"form-control\">${optionValueString}</select>`;\n  }\n\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\n    const type = (this.columnDef.type && this.columnDef.type) ? this.columnDef.type : FieldType.string;\n    let optionValues = [];\n\n    switch (type) {\n      case FieldType.string:\n        optionValues = [\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\n          { operator: '=' as OperatorString, description: this.translate.instant('EQUALS') },\n          { operator: 'a*' as OperatorString, description: this.translate.instant('STARTS_WITH') },\n          { operator: '*z' as OperatorString, description: this.translate.instant('ENDS_WITH') },\n          /*\n          { operator: 'IN' as OperatorString, description: this.translate.instant('IN_COLLECTION_SEPERATED_BY_COMMA') },\n          { operator: 'NIN' as OperatorString, description: this.translate.instant('NOT_IN_COLLECTION_SEPERATED_BY_COMMA') },\n          */\n        ];\n        break;\n      default:\n        optionValues = [\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\n          { operator: '=' as OperatorString, description: '' },\n          { operator: '<' as OperatorString, description: '' },\n          { operator: '<=' as OperatorString, description: '' },\n          { operator: '>' as OperatorString, description: '' },\n          { operator: '>=' as OperatorString, description: '' },\n          { operator: '<>' as OperatorString, description: '' }];\n        break;\n    }\n\n    return optionValues;\n  }\n\n  /**\n   * Create the DOM element\n   */\n  private createDomElement(searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM Select dropdown for the Operator\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\n    this.$filterInputElm = $(this.buildInputHtmlString());\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\n    const $containerInputGroup = $(`<div class=\"input-group\"></div>`);\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon input-group-prepend operator\"></div>`);\n\n    /* the DOM element final structure will be\n      <div class=\"input-group\">\n        <div class=\"input-group-addon input-group-prepend operator\">\n          <select class=\"form-control\"></select>\n        </div>\n        <input class=\"form-control\" type=\"text\" />\n      </div>\n    */\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\n    $containerInputGroup.append($operatorInputGroupAddon);\n    $containerInputGroup.append(this.$filterInputElm);\n\n    // create the DOM element & add an ID and filter class\n    $filterContainerElm.append($containerInputGroup);\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\n\n    this.$filterInputElm.val(searchTerm);\n    this.$filterInputElm.data('columnId', this.columnDef.id);\n\n    if (this.operator) {\n      this.$selectOperatorElm.val(this.operator);\n    }\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterContainerElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\n      $filterContainerElm.appendTo($headerElm);\n    }\n\n    return $filterContainerElm;\n  }\n\n  private onTriggerEvent(e: Event | undefined) {\n    if (this._clearFilterTriggered) {\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\n      this._clearFilterTriggered = false; // reset flag for next use\n    } else {\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\n      const value = this.$filterInputElm.val();\n      (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (value ? [value] : null), operator: selectedOperator || '' });\n    }\n  }\n}\n",
    "import {\n  Column,\n  ColumnFilter,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  OperatorString,\n  OperatorType,\n  SearchTerm\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP = 1;\n\nexport class CompoundSliderFilter implements Filter {\n  private _clearFilterTriggered = false;\n  private _elementRangeInputId: string;\n  private _elementRangeOutputId: string;\n  private _operator: OperatorType | OperatorString;\n  private $containerInputGroupElm: any;\n  private $filterElm: any;\n  private $filterInputElm: any;\n  private $selectOperatorElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor() { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  /** Getter for the Filter Generic Params */\n  private get filterParams(): any {\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};\n  }\n\n  /** Getter for the `filter` properties */\n  private get filterProperties(): ColumnFilter {\n    return this.columnDef && this.columnDef.filter;\n  }\n\n  set operator(op: OperatorType | OperatorString) {\n    this._operator = op;\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return this._operator || OperatorType.empty;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    if (args) {\n      this.grid = args.grid;\n      this.callback = args.callback;\n      this.columnDef = args.columnDef;\n      this.operator = args.operator || '';\n      this.searchTerms = args.searchTerms || [];\n\n      // define the input & slider number IDs\n      this._elementRangeInputId = `rangeInput_${this.columnDef.field}`;\n      this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}`;\n\n      // filter input can only have 1 search term, so we will use the 1st array index if it exist\n      const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n      // step 1, create the DOM Element of the filter which contain the compound Operator+Input\n      // and initialize it if searchTerm is filled\n      this.$filterElm = this.createDomElement(searchTerm);\n\n      // step 3, subscribe to the keyup event and run the callback when that happens\n      // also add/remove \"filled\" class for styling purposes\n      this.$filterInputElm.change((e: any) => {\n        this.onTriggerEvent(e);\n      });\n      this.$selectOperatorElm.change((e: any) => {\n        this.onTriggerEvent(e);\n      });\n\n      // if user chose to display the slider number on the right side, then update it every time it changes\n      // we need to use both \"input\" and \"change\" event to be all cross-browser\n      if (!this.filterParams.hideSliderNumber) {\n        this.$filterInputElm.on('input change', (e: { target: HTMLInputElement }) => {\n          const value = e && e.target && e.target.value || '';\n          if (value) {\n            document.getElementById(this._elementRangeOutputId).innerHTML = value;\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm && this.$selectOperatorElm) {\n      this._clearFilterTriggered = true;\n      this.searchTerms = [];\n      const clearedValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;\n      this.$selectOperatorElm.val(0);\n      this.$filterInputElm.val(clearedValue);\n      if (!this.filterParams.hideSliderNumber) {\n        this.$containerInputGroupElm.children('div.input-group-addon.input-group-append').children().last().html(clearedValue);\n      }\n      this.onTriggerEvent(undefined);\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values && Array.isArray(values)) {\n      this.$filterInputElm.val(values[0]);\n      this.$containerInputGroupElm.children('div.input-group-addon.input-group-append').children().last().html(values[0]);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /** Build HTML Template for the input range (slider) */\n  private buildTemplateHtmlString() {\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\n    const maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\n    const step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;\n\n    return `<input type=\"range\" id=\"${this._elementRangeInputId}\"\n              name=\"${this._elementRangeInputId}\"\n              defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n              class=\"form-control slider-filter-input range compound-slider\" />`;\n  }\n\n  /** Build HTML Template for the text (number) that is shown appended to the slider */\n  private buildTemplateSliderTextHtmlString() {\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\n\n    return `<div class=\"input-group-addon input-group-append slider-value\"><span class=\"input-group-text\" id=\"${this._elementRangeOutputId}\">${defaultValue}</span></div>`;\n  }\n\n  /** Build HTML Template select dropdown (operator) */\n  private buildSelectOperatorHtmlString() {\n    const optionValues = this.getOptionValues();\n    let optionValueString = '';\n    optionValues.forEach((option) => {\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\n    });\n\n    return `<select class=\"form-control\">${optionValueString}</select>`;\n  }\n\n  /** Get the available operator option values */\n  private getOptionValues(): { operator: OperatorString, description: string }[] {\n    return [\n      { operator: '' as OperatorString, description: '' },\n      { operator: '=' as OperatorString, description: '' },\n      { operator: '<' as OperatorString, description: '' },\n      { operator: '<=' as OperatorString, description: '' },\n      { operator: '>' as OperatorString, description: '' },\n      { operator: '>=' as OperatorString, description: '' },\n      { operator: '<>' as OperatorString, description: '' }\n    ];\n  }\n\n  /**\n   * Create the DOM element\n   */\n  private createDomElement(searchTerm?: SearchTerm) {\n    const searchTermInput = (searchTerm || '0') as string;\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM Select dropdown for the Operator\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\n    this.$filterInputElm = $(this.buildTemplateHtmlString());\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\n    this.$containerInputGroupElm = $(`<div class=\"input-group search-filter\"></div>`);\n    const $operatorInputGroupAddon = $(`<span class=\"input-group-addon input-group-prepend operator\"></span>`);\n\n    /* the DOM element final structure will be\n      <div class=\"input-group\">\n        <div class=\"input-group-addon input-group-prepend operator\">\n          <select class=\"form-control\"></select>\n        </div>\n        <input class=\"form-control\" type=\"text\" />\n        <div class=\"input-group-addon input-group-prepend\" id=\"rangeOuput_percentComplete\"><span class=\"input-group-text\">0</span></div>\n      </div>\n    */\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\n    this.$containerInputGroupElm.append($operatorInputGroupAddon);\n    this.$containerInputGroupElm.append(this.$filterInputElm);\n    if (!this.filterParams.hideSliderNumber) {\n      const $sliderTextInputAppendAddon = $(this.buildTemplateSliderTextHtmlString());\n      $sliderTextInputAppendAddon.children().html(searchTermInput);\n      this.$containerInputGroupElm.append($sliderTextInputAppendAddon);\n    }\n\n    // create the DOM element & add an ID and filter class\n    $filterContainerElm.append(this.$containerInputGroupElm);\n    $filterContainerElm.attr('id', `filter-${this.columnDef.field}`);\n\n    this.$filterInputElm.val(searchTermInput);\n    this.$filterInputElm.data('columnId', this.columnDef.field);\n\n    if (this.operator) {\n      this.$selectOperatorElm.val(this.operator);\n    }\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterContainerElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\n      $filterContainerElm.appendTo($headerElm);\n    }\n\n    return $filterContainerElm;\n  }\n\n  private onTriggerEvent(e: Event | undefined) {\n    if (this._clearFilterTriggered) {\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\n      this._clearFilterTriggered = false; // reset flag for next use\n    } else {\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\n      const value = this.$filterInputElm.val();\n      (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (value ? [value] : null), operator: selectedOperator || '' });\n    }\n  }\n}\n",
    "import {\r\n  Column,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class InputFilter implements Filter {\r\n  private _clearFilterTriggered = false;\r\n  private $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor() {}\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.operator || '';\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.keyup((e: any) => {\r\n      const value = e && e.target && e.target.value || '';\r\n      if (this._clearFilterTriggered) {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\r\n        this._clearFilterTriggered = false; // reset flag for next use\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.$filterElm) {\r\n      this._clearFilterTriggered = true;\r\n      this.searchTerms = [];\r\n      this.$filterElm.val('');\r\n      this.$filterElm.trigger('keyup');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString() {\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    return `<input type=\"text\" class=\"form-control search-filter\" placeholder=\"${placeholder}\">`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n\r\n    $filterElm.val(searchTerm);\r\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport {\n  CollectionCustomStructure,\n  CollectionOption,\n  Column,\n  ColumnFilter,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  MultipleSelectOption,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n  SelectOption,\n} from './../models/index';\nimport { CollectionService } from './../services/collection.service';\nimport { castToPromise, getDescendantProperty, htmlEncode, unsubscribeAllObservables } from '../services/utilities';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport * as DOMPurify_ from 'dompurify';\nconst DOMPurify = DOMPurify_; // patch to fix rollup to work\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class SelectFilter implements Filter {\n  /** DOM Element Name, useful for auto-detecting positioning (dropup / dropdown) */\n  elementName: string;\n\n  /** Filter Multiple-Select options */\n  filterElmOptions: MultipleSelectOption;\n\n  /** The JQuery DOM element */\n  $filterElm: any;\n\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n  defaultOptions: MultipleSelectOption;\n  isFilled = false;\n  labelName: string;\n  labelPrefixName: string;\n  labelSuffixName: string;\n  valueName: string;\n  enableTranslateLabel = false;\n  subscriptions: Subscription[] = [];\n\n  /**\n   * Initialize the Filter\n   */\n  constructor(protected translate: TranslateService, protected collectionService: CollectionService, protected isMultipleSelect = true) {\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\n    const options: MultipleSelectOption = {\n      autoAdjustDropHeight: true,\n      autoAdjustDropPosition: true,\n      autoAdjustDropWidthByTextSize: true,\n      container: 'body',\n      filter: false,  // input search term on top of the select option list\n      maxHeight: 275,\n      single: true,\n\n      textTemplate: ($elm) => {\n        // render HTML code or not, by default it is sanitized and won't be rendered\n        const isRenderHtmlEnabled = this.columnDef && this.columnDef.filter && this.columnDef.filter.enableRenderHtml || false;\n        return isRenderHtmlEnabled ? $elm.text() : $elm.html();\n      },\n      onClose: () => {\n        // we will subscribe to the onClose event for triggering our callback\n        // also add/remove \"filled\" class for styling purposes\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\n          this.isFilled = true;\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\n        } else {\n          this.isFilled = false;\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\n        }\n\n        this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: selectedItems });\n      }\n    };\n\n    if (this.isMultipleSelect) {\n      options.single = false;\n      options.okButton = true;\n      options.addTitle = true; // show tooltip of all selected items while hovering the filter\n      options.countSelected = this.translate.instant('X_OF_Y_SELECTED');\n      options.allSelected = this.translate.instant('ALL_SELECTED');\n      options.selectAllText = this.translate.instant('SELECT_ALL');\n      options.selectAllDelimiter = ['', '']; // remove default square brackets of default text \"[Select All]\" => \"Select All\"\n    }\n\n    this.defaultOptions = options;\n  }\n\n  /** Getter for the Column Filter itself */\n  protected get columnFilter(): ColumnFilter {\n    return this.columnDef && this.columnDef.filter;\n  }\n\n  /** Getter for the Collection Options */\n  protected get collectionOptions(): CollectionOption {\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.collectionOptions;\n  }\n\n  /** Getter for the Custom Structure if exist */\n  protected get customStructure(): CollectionCustomStructure {\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.customStructure;\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  protected get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  /** Getter for the filter operator */\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.in;\n  }\n\n  /**\n   * Initialize the filter template\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    if (!this.grid || !this.columnDef || !this.columnFilter || (!this.columnFilter.collection && !this.columnFilter.collectionAsync)) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" (or \"collectionAsync\") for the MultipleSelect/SingleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    this.enableTranslateLabel = this.columnFilter.enableTranslateLabel;\n    this.labelName = (this.customStructure) ? this.customStructure.label : 'label';\n    this.labelPrefixName = (this.customStructure) ? this.customStructure.labelPrefix : 'labelPrefix';\n    this.labelSuffixName = (this.customStructure) ? this.customStructure.labelSuffix : 'labelSuffix';\n    this.valueName = (this.customStructure) ? this.customStructure.value : 'value';\n\n    // always render the Select (dropdown) DOM element, even if user passed a \"collectionAsync\",\n    // if that is the case, the Select will simply be without any options but we still have to render it (else SlickGrid would throw an error)\n    const newCollection = this.columnFilter.collection || [];\n    this.renderDomElement(newCollection);\n\n    // on every Filter which have a \"collection\" or a \"collectionAsync\"\n    // we will add (or replace) a Subject to the \"collectionAsync\" property so that user has possibility to change the collection\n    // if \"collectionAsync\" is already set by the user, it will resolve it first then after it will replace it with a Subject\n    const collectionAsync = this.columnFilter && this.columnFilter.collectionAsync;\n    if (collectionAsync) {\n      this.renderOptionsAsync(collectionAsync); // create Subject after resolve (createCollectionAsyncSubject)\n    } else if (this.columnFilter && this.columnFilter.collection) {\n      this.createCollectionAsyncSubject();\n    }\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\n      this.$filterElm.multipleSelect('setSelects', []);\n      this.$filterElm.removeClass('filled');\n      this.searchTerms = [];\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      // close the drop\n      if (this.$filterElm.multipleSelect) {\n        this.$filterElm.multipleSelect('close');\n      }\n\n      // remove event watcher\n      this.$filterElm.off().remove();\n    }\n\n    // also dispose of all Subscriptions\n    this.subscriptions = unsubscribeAllObservables(this.subscriptions);\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm | SearchTerm[]) {\n    if (values) {\n      values = Array.isArray(values) ? values : [values];\n      this.$filterElm.multipleSelect('setSelects', values);\n    }\n  }\n\n  //\n  // protected functions\n  // ------------------\n\n  /**\n   * user might want to filter certain items of the collection\n   * @param inputCollection\n   * @return outputCollection filtered and/or sorted collection\n   */\n  protected filterCollection(inputCollection) {\n    let outputCollection = inputCollection;\n\n    // user might want to filter certain items of the collection\n    if (this.columnDef && this.columnFilter && this.columnFilter.collectionFilterBy) {\n      const filterBy = this.columnFilter.collectionFilterBy;\n      outputCollection = this.collectionService.filterCollection(outputCollection, filterBy);\n    }\n\n    return outputCollection;\n  }\n\n  /**\n   * user might want to sort the collection in a certain way\n   * @param inputCollection\n   * @return outputCollection filtered and/or sorted collection\n   */\n  protected sortCollection(inputCollection) {\n    let outputCollection = inputCollection;\n\n    // user might want to sort the collection\n    if (this.columnDef && this.columnFilter && this.columnFilter.collectionSortBy) {\n      const sortBy = this.columnFilter.collectionSortBy;\n      outputCollection = this.collectionService.sortCollection(outputCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    return outputCollection;\n  }\n\n  protected async renderOptionsAsync(collectionAsync: Promise<any> | Observable<any> | Subject<any>) {\n    let awaitedCollection: any = [];\n\n    if (collectionAsync) {\n      awaitedCollection = await castToPromise(collectionAsync);\n      this.renderDomElementFromCollectionAsync(awaitedCollection);\n\n      // because we accept Promises & HttpClient Observable only execute once\n      // we will re-create an RxJs Subject which will replace the \"collectionAsync\" which got executed once anyway\n      // doing this provide the user a way to call a \"collectionAsync.next()\"\n      this.createCollectionAsyncSubject();\n    }\n  }\n\n  /** Create or recreate an Observable Subject and reassign it to the \"collectionAsync\" object so user can call a \"collectionAsync.next()\" on it */\n  protected createCollectionAsyncSubject() {\n    const newCollectionAsync = new Subject<any>();\n    this.columnFilter.collectionAsync = newCollectionAsync;\n    this.subscriptions.push(\n      newCollectionAsync.subscribe(collection => this.renderDomElementFromCollectionAsync(collection))\n    );\n  }\n\n  /**\n   * When user use a CollectionAsync we will use the returned collection to render the filter DOM element\n   * and reinitialize filter collection with this new collection\n   */\n  protected renderDomElementFromCollectionAsync(collection) {\n    if (this.collectionOptions && this.collectionOptions.collectionInObjectProperty) {\n      collection = getDescendantProperty(collection, this.collectionOptions.collectionInObjectProperty);\n    }\n    if (!Array.isArray(collection)) {\n      throw new Error('Something went wrong while trying to pull the collection from the \"collectionAsync\" call in the Select Filter, the collection is not a valid array.');\n    }\n\n    // copy over the array received from the async call to the \"collection\" as the new collection to use\n    // this has to be BEFORE the `collectionObserver().subscribe` to avoid going into an infinite loop\n    this.columnFilter.collection = collection;\n\n    // recreate Multiple Select after getting async collection\n    this.renderDomElement(collection);\n  }\n\n  protected renderDomElement(collection) {\n    if (!Array.isArray(collection) && this.collectionOptions && this.collectionOptions.collectionInObjectProperty) {\n      collection = getDescendantProperty(collection, this.collectionOptions.collectionInObjectProperty);\n    }\n    if (!Array.isArray(collection)) {\n      throw new Error('The \"collection\" passed to the Select Filter is not a valid array');\n    }\n\n    // user can optionally add a blank entry at the beginning of the collection\n    if (this.collectionOptions && this.collectionOptions.addBlankEntry) {\n      collection.unshift(this.createBlankEntry());\n    }\n\n    let newCollection = collection;\n\n    // user might want to filter and/or sort certain items of the collection\n    newCollection = this.filterCollection(newCollection);\n    newCollection = this.sortCollection(newCollection);\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString(newCollection, this.searchTerms);\n\n    // step 2, create the DOM Element of the filter & pre-load search terms\n    // also subscribe to the onClose event\n    this.createDomElement(filterTemplate);\n  }\n\n  /**\n   * Create the HTML template as a string\n   */\n  protected buildTemplateHtmlString(optionCollection: any[], searchTerms: SearchTerm[]) {\n    let options = '';\n    const separatorBetweenLabels = this.collectionOptions && this.collectionOptions.separatorBetweenTextLabels || '';\n    const isRenderHtmlEnabled = this.columnFilter && this.columnFilter.enableRenderHtml || false;\n    const sanitizedOptions = this.gridOptions && this.gridOptions.sanitizeHtmlOptions || {};\n\n    optionCollection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.multipleSelect, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const selected = (searchTerms.findIndex((term) => term === option[this.valueName]) >= 0) ? 'selected' : '';\n      const labelText = ((option.labelKey || this.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n      const prefixText = option[this.labelPrefixName] || '';\n      const suffixText = option[this.labelSuffixName] || '';\n      let optionText = (prefixText + separatorBetweenLabels + labelText + separatorBetweenLabels + suffixText);\n\n      // if user specifically wants to render html text, he needs to opt-in else it will stripped out by default\n      // also, the 3rd party lib will saninitze any html code unless it's encoded, so we'll do that\n      if (isRenderHtmlEnabled) {\n        // sanitize any unauthorized html tags like script and others\n        // for the remaining allowed tags we'll permit all attributes\n        const sanitizedText = DOMPurify.sanitize(optionText, sanitizedOptions);\n        optionText = htmlEncode(sanitizedText);\n      }\n\n      // html text of each select option\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${optionText}</option>`;\n\n      // if there's a search term, we will add the \"filled\" class for styling purposes\n      if (selected) {\n        this.isFilled = true;\n      }\n    });\n\n    return `<select class=\"ms-filter search-filter\" ${this.isMultipleSelect ? 'multiple=\"multiple\"' : ''}>${options}</select>`;\n  }\n\n  /** Create a blank entry that can be added to the collection. It will also reuse the same customStructure if need be */\n  protected createBlankEntry() {\n    const blankEntry = {\n      [this.labelName]: '',\n      [this.valueName]: ''\n    };\n    if (this.labelPrefixName) {\n      blankEntry[this.labelPrefixName] = '';\n    }\n    if (this.labelSuffixName) {\n      blankEntry[this.labelSuffixName] = '';\n    }\n    return blankEntry;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * Subscribe to the onClose event and run the callback when that happens\n   * @param filterTemplate\n   */\n  protected createDomElement(filterTemplate: string) {\n    const fieldId = this.columnDef && this.columnDef.field || this.columnDef && this.columnDef.id;\n\n    // provide the name attribute to the DOM element which will be needed to auto-adjust drop position (dropup / dropdown)\n    this.elementName = `filter_${fieldId}`;\n    this.defaultOptions.name = this.elementName;\n\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    this.$filterElm = $(filterTemplate);\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\n    }\n    this.$filterElm.attr('id', this.elementName);\n    this.$filterElm.data('columnId', fieldId);\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (this.isFilled) {\n      this.$filterElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\n      this.$filterElm.appendTo($headerElm);\n    }\n\n    // merge options & attach multiSelect\n    const elementOptions: MultipleSelectOption = { ...this.defaultOptions, ...this.columnFilter.filterOptions };\n    this.filterElmOptions = { ...this.defaultOptions, ...elementOptions };\n    this.$filterElm = this.$filterElm.multipleSelect(this.filterElmOptions);\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport { SelectFilter } from './selectFilter';\r\n\r\nexport class MultipleSelectFilter extends SelectFilter {\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  constructor(protected translate: TranslateService, protected collectionService: CollectionService) {\r\n    super(translate, collectionService, true);\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Column,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class NativeSelectFilter implements Filter {\r\n  private _clearFilterTriggered = false;\r\n  $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\r\n      searchTerm = `${searchTerm}`;\r\n    }\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the change event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.change((e: any) => {\r\n      const value = e && e.target && e.target.value || '';\r\n      if (this._clearFilterTriggered) {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\r\n        this._clearFilterTriggered = false; // reset flag for next use\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter values\r\n   */\r\n  clear() {\r\n    if (this.$filterElm) {\r\n      this._clearFilterTriggered = true;\r\n      this.searchTerms = [];\r\n      this.$filterElm.val('');\r\n      this.$filterElm.trigger('change');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm | SearchTerm[]) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  private buildTemplateHtmlString() {\r\n    if (!this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the Select Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.select, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\r\n    }\r\n\r\n    const optionCollection = this.columnDef.filter.collection || [];\r\n    const labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\r\n    const valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\r\n\r\n    let options = '';\r\n    optionCollection.forEach((option: any) => {\r\n      if (!option || (option[labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.select, collection: [ { value: '1', label: 'One' } ]')`);\r\n      }\r\n      const labelKey = option.labelKey || option[labelName];\r\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\r\n      options += `<option value=\"${option[valueName]}\">${textLabel}</option>`;\r\n    });\r\n    return `<select class=\"form-control search-filter\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n    const searchTermInput = (searchTerm || '') as string;\r\n\r\n    $filterElm.val(searchTermInput);\r\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport { SelectFilter } from './selectFilter';\r\n\r\nexport class SingleSelectFilter extends SelectFilter {\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  constructor(protected translate: TranslateService, protected collectionService: CollectionService) {\r\n    super(translate, collectionService, false);\r\n  }\r\n}\r\n",
    "import {\n  Column,\n  ColumnFilter,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP = 1;\n\nexport class SliderFilter implements Filter {\n  private _clearFilterTriggered = false;\n  private _elementRangeInputId: string;\n  private _elementRangeOutputId: string;\n  private $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  /** Getter for the Filter Generic Params */\n  private get filterParams(): any {\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};\n  }\n\n  /** Getter for the `filter` properties */\n  private get filterProperties(): ColumnFilter {\n    return this.columnDef && this.columnDef.filter;\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    if (!args) {\n      throw new Error('[Aurelia-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\n    }\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    // define the input & slider number IDs\n    this._elementRangeInputId = `rangeInput_${this.columnDef.field}`;\n    this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}`;\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString();\n\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\n\n    // step 3, subscribe to the change event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterElm.change((e: any) => {\n      const value = e && e.target && e.target.value || '';\n      if (this._clearFilterTriggered) {\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\n        this._clearFilterTriggered = false; // reset flag for next use\n        this.$filterElm.removeClass('filled');\n      } else {\n        this.$filterElm.addClass('filled');\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\n      }\n    });\n\n    // if user chose to display the slider number on the right side, then update it every time it changes\n    // we need to use both \"input\" and \"change\" event to be all cross-browser\n    if (!this.filterParams.hideSliderNumber) {\n      this.$filterElm.on('input change', (e: { target: HTMLInputElement }) => {\n        const value = e && e.target && e.target.value || '';\n        if (value) {\n          document.getElementById(this._elementRangeOutputId).innerHTML = value;\n        }\n      });\n    }\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm) {\n      this._clearFilterTriggered = true;\n      this.searchTerms = [];\n      const clearedValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;\n      this.$filterElm.children('input').val(clearedValue);\n      this.$filterElm.children('div.input-group-addon.input-group-append').children().html(clearedValue);\n      this.$filterElm.trigger('change');\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm) {\n    if (values) {\n      this.$filterElm.val(values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString() {\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\n    const maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\n    const step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;\n\n    if (this.filterParams.hideSliderNumber) {\n      return `\n      <div class=\"search-filter\">\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\n          name=\"${this._elementRangeInputId}\"\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n          class=\"form-control slider-filter-input range\" />\n      </div>`;\n    }\n\n    return `\n      <div class=\"input-group search-filter\">\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\n          name=\"${this._elementRangeInputId}\"\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n          class=\"form-control slider-filter-input range\" />\n        <div class=\"input-group-addon input-group-append slider-value\">\n          <span class=\"input-group-text\" id=\"${this._elementRangeOutputId}\">${defaultValue}</span>\n        </div>\n      </div>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    const $filterElm = $(filterTemplate);\n    const searchTermInput = (searchTerm || '0') as string;\n\n    $filterElm.children('input').val(searchTermInput);\n    $filterElm.children('div.input-group-addon.input-group-append').children().html(searchTermInput);\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\n    $filterElm.data('columnId', this.columnDef.id);\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\n      $filterElm.appendTo($headerElm);\n    }\n\n    return $filterElm;\n  }\n}\n",
    "import { Column, Filter } from './../models/index';\r\nimport { CompoundDateFilter } from './compoundDateFilter';\r\nimport { CompoundInputFilter } from './compoundInputFilter';\r\nimport { CompoundSliderFilter } from './compoundSliderFilter';\r\nimport { InputFilter } from './inputFilter';\r\nimport { MultipleSelectFilter } from './multipleSelectFilter';\r\nimport { NativeSelectFilter } from './nativeSelectFilter';\r\nimport { SingleSelectFilter } from './singleSelectFilter';\r\nimport { SliderFilter } from './sliderFilter';\r\n\r\nexport const Filters = {\r\n  /** Compound Date Filter (compound of Operator + Date picker) */\r\n  compoundDate: CompoundDateFilter,\r\n\r\n  /** Compound Input Filter (compound of Operator + Input) */\r\n  compoundInput: CompoundInputFilter,\r\n\r\n  /** Compound Slider Filter (compound of Operator + Slider) */\r\n  compoundSlider: CompoundSliderFilter,\r\n\r\n  /** Default Filter, input type text filter */\r\n  input: InputFilter,\r\n\r\n  /** Slider Filter */\r\n  slider: SliderFilter,\r\n\r\n  /** Multiple Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  multipleSelect: MultipleSelectFilter,\r\n\r\n  /** Single Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  singleSelect: SingleSelectFilter,\r\n\r\n  /** Select filter, which uses native DOM element select */\r\n  select: NativeSelectFilter\r\n};\r\n",
    "import { DelimiterType, FileType, GridOption } from './models/index';\nimport { Filters } from './filters/index';\n\n/**\n * Options that can be passed to the Bootstrap-Datetimepicker directly\n */\nexport const GlobalGridOptions: GridOption = {\n  alwaysShowVerticalScroll: true,\n  autoEdit: false,\n  asyncEditorLoading: false,\n  autoFitColumnsOnFirstLoad: true,\n  autoResize: {\n    bottomPadding: 20,\n    minHeight: 180,\n    minWidth: 300,\n    sidePadding: 0\n  },\n  cellHighlightCssClass: 'slick-cell-modified',\n  checkboxSelector: {\n    cssClass: 'slick-cell-checkboxsel'\n  },\n  columnPicker: {\n    hideForceFitButton: false,\n    hideSyncResizeButton: true\n  },\n  datasetIdPropertyName: 'id',\n  defaultFilterPlaceholder: '&#128269;',\n  defaultFilter: Filters.input,\n  editable: false,\n  enableAutoResize: true,\n  enableAutoSizeColumns: true,\n  enableCellNavigation: false,\n  enableColumnPicker: true,\n  enableColumnReorder: true,\n  enableExport: true,\n  enableGridMenu: true,\n  enableHeaderMenu: true,\n  enableMouseHoverHighlightRow: true,\n  enableSorting: true,\n  enableTextSelectionOnCells: true,\n  explicitInitialization: true,\n  exportOptions: {\n    delimiter: DelimiterType.comma,\n    exportWithFormatter: false,\n    filename: 'export',\n    format: FileType.csv,\n    groupingAggregatorRowText: '',\n    sanitizeDataExport: false,\n    useUtf8WithBom: true\n  },\n  forceFitColumns: false,\n  gridMenu: {\n    hideClearAllFiltersCommand: false,\n    hideClearAllSortingCommand: false,\n    hideExportCsvCommand: false,\n    hideExportTextDelimitedCommand: true,\n    hideForceFitButton: false,\n    hideRefreshDatasetCommand: false,\n    hideSyncResizeButton: true,\n    hideToggleFilterCommand: false,\n    iconCssClass: 'fa fa-bars',\n    iconClearAllFiltersCommand: 'fa fa-filter text-danger',\n    iconClearAllSortingCommand: 'fa fa-unsorted text-danger',\n    iconExportCsvCommand: 'fa fa-download',\n    iconExportTextDelimitedCommand: 'fa fa-download',\n    iconRefreshDatasetCommand: 'fa fa-refresh',\n    iconToggleFilterCommand: 'fa fa-random',\n    menuWidth: 16,\n    resizeOnShowHeaderRow: true\n  },\n  headerMenu: {\n    autoAlign: true,\n    autoAlignOffset: 12,\n    minWidth: 140,\n    iconSortAscCommand: 'fa fa-sort-asc',\n    iconSortDescCommand: 'fa fa-sort-desc',\n    iconColumnHideCommand: 'fa fa-times',\n    hideColumnHideCommand: false,\n    hideSortCommands: false\n  },\n  headerRowHeight: 35,\n  multiColumnSort: true,\n  numberedMultiColumnSort: true,\n  tristateMultiColumnSort: false,\n  sortColNumberInSeparateSpan: true,\n  suppressActiveCellChangeOnEdit: true,\n  pagination: {\n    pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\n    pageSize: 25,\n    totalItems: 0\n  },\n  rowHeight: 35,\n  showHeaderRow: false,\n  topPanelHeight: 35\n};\n",
    "import { GlobalGridOptions } from './global-grid-options';\r\n\r\nexport class SlickgridConfig {\r\n  options: any;\r\n\r\n  constructor() {\r\n    this.options = GlobalGridOptions;\r\n  }\r\n}\r\n",
    "import { Injector, Injectable } from '@angular/core';\r\nimport { Filter } from '../models/filter.interface';\r\nimport { ColumnFilter } from '../models';\r\nimport { SlickgridConfig } from '../slickgrid-config';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CollectionService } from '../services/collection.service';\r\n\r\n@Injectable()\r\nexport class FilterFactory {\r\n  /**\r\n   * The options from the SlickgridConfig\r\n   */\r\n  private _options: any;\r\n\r\n  constructor(private config: SlickgridConfig, private translate: TranslateService, private collectionService: CollectionService) {\r\n    this._options = this.config.options;\r\n  }\r\n\r\n  // Uses the User model to create a new User\r\n  createFilter(columnFilter: ColumnFilter | undefined): Filter | undefined {\r\n    let filter: Filter | undefined;\r\n\r\n    if (columnFilter && columnFilter.model) {\r\n      filter = typeof columnFilter.model === 'function' ? new columnFilter.model(this.translate, this.collectionService) : columnFilter.model;\r\n    }\r\n\r\n    // fallback to the default filter\r\n    if (!filter && this._options.defaultFilter) {\r\n      filter = new this._options.defaultFilter(this.translate, this.collectionService);\r\n    }\r\n\r\n    return filter;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport { FilterConditions } from './../filter-conditions';\nimport {\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  Filter,\n  FilterArguments,\n  FilterCallbackArg,\n  FieldType,\n  GridOption,\n  OperatorType,\n  CurrentFilter,\n  SearchTerm,\n  SlickEvent,\n  OperatorString\n} from './../models/index';\nimport { castToPromise } from './utilities';\nimport { FilterFactory } from '../filters/filterFactory';\nimport { Subject } from 'rxjs/Subject';\nimport * as isequal_ from 'lodash.isequal';\nconst isequal = isequal_; // patch to fix rollup to work\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class FilterService {\n  private _eventHandler = new Slick.EventHandler();\n  private _slickSubscriber: SlickEvent;\n  private _filters: any[] = [];\n  private _columnFilters: ColumnFilters = {};\n  private _dataView: any;\n  private _grid: any;\n  private _onFilterChangedOptions: any;\n  onFilterChanged = new Subject<CurrentFilter[]>();\n  onFilterCleared = new Subject<boolean>();\n\n  constructor(private filterFactory: FilterFactory) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any): void {\n    this._grid = grid;\n  }\n\n  /**\n   * Attach a backend filter hook to the grid\n   * @param grid SlickGrid Grid object\n   */\n  attachBackendOnFilter(grid: any) {\n    this._filters = [];\n    this._slickSubscriber = new Slick.Event();\n\n    // subscribe to the SlickGrid event and call the backend execution\n    this._slickSubscriber.subscribe(this.attachBackendOnFilterSubscribe.bind(this));\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  async attachBackendOnFilterSubscribe(event: Event, args: any) {\n    if (!args || !args.grid) {\n      throw new Error('Something went wrong when trying to attach the \"attachBackendOnFilterSubscribe(event, args)\" function, it seems that \"args\" is not populated correctly');\n    }\n    const backendApi = this._gridOptions.backendServiceApi;\n    if (!backendApi || !backendApi.process || !backendApi.service) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    // keep start time & end timestamps & return it after process execution\n    const startTime = new Date();\n\n    // run a preProcess callback if defined\n    if (backendApi.preProcess) {\n      backendApi.preProcess();\n    }\n\n    // call the service to get a query back\n    const query = await backendApi.service.processOnFilterChanged(event, args);\n\n    // emit an onFilterChanged event\n    if (args && !args.clearFilterTriggered) {\n      this.emitFilterChanged('remote');\n    }\n\n    // the process could be an Observable (like HttpClient) or a Promise\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n    const observableOrPromise = backendApi.process(query);\n    const processResult = await castToPromise(observableOrPromise);\n    const endTime = new Date();\n\n    // from the result, call our internal post process to update the Dataset and Pagination info\n    if (processResult && backendApi.internalPostProcess) {\n      backendApi.internalPostProcess(processResult);\n    }\n\n    // send the response process to the postProcess callback\n    if (backendApi.postProcess !== undefined) {\n      if (processResult instanceof Object) {\n        processResult.statistics = {\n          startTime,\n          endTime,\n          executionTime: endTime.valueOf() - startTime.valueOf(),\n          totalItemCount: this._gridOptions && this._gridOptions.pagination && this._gridOptions.pagination.totalItems\n        };\n      }\n      backendApi.postProcess(processResult);\n    }\n  }\n\n  /**\n   * Attach a local filter hook to the grid\n   * @param grid SlickGrid Grid object\n   * @param dataView\n   */\n  attachLocalOnFilter(grid: any, dataView: any) {\n    this._filters = [];\n    this._dataView = dataView;\n    this._slickSubscriber = new Slick.Event();\n\n    dataView.setFilterArgs({ columnFilters: this._columnFilters, grid: this._grid });\n    dataView.setFilter(this.customLocalFilter.bind(this, dataView));\n\n    this._slickSubscriber.subscribe((e: any, args: any) => {\n      const columnId = args.columnId;\n      if (columnId != null) {\n        dataView.refresh();\n      }\n      if (args && !args.clearFilterTriggered) {\n        this.emitFilterChanged('local');\n      }\n    });\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  /** Clear the search filters (below the column titles) */\n  clearFilters() {\n    this._filters.forEach((filter: Filter) => {\n      if (filter && filter.clear) {\n        // clear element and trigger a change\n        filter.clear();\n      }\n    });\n\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to clear columnFilter (without looping through) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // we also need to refresh the dataView and optionally the grid (it's optional since we use DataView)\n    if (this._dataView) {\n      this._dataView.refresh();\n      this._grid.invalidate();\n      this._grid.render();\n    }\n\n    // emit an event when filters are all cleared\n    this.onFilterCleared.next(true);\n  }\n\n  customLocalFilter(dataView: any, item: any, args: any) {\n    for (const columnId of Object.keys(args.columnFilters)) {\n      const columnFilter = args.columnFilters[columnId];\n      const columnIndex = args.grid.getColumnIndex(columnId);\n      const columnDef = args.grid.getColumns()[columnIndex];\n      if (!columnDef) {\n        return false;\n      }\n      const fieldType = columnDef.type || FieldType.string;\n      const filterSearchType = (columnDef.filterSearchType) ? columnDef.filterSearchType : null;\n\n      let cellValue = item[columnDef.queryField || columnDef.queryFieldFilter || columnDef.field];\n\n      // if we find searchTerms use them but make a deep copy so that we don't affect original array\n      // we might have to overwrite the value(s) locally that are returned\n      // e.g: we don't want to operator within the search value, since it will fail filter condition check trigger afterward\n      const searchValues = (columnFilter && columnFilter.searchTerms) ? [...columnFilter.searchTerms] : null;\n\n      let fieldSearchValue = (Array.isArray(searchValues) && searchValues.length === 1) ? searchValues[0] : '';\n      fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n\n      const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n      let operator = columnFilter.operator || ((matches) ? matches[1] : '');\n      const searchTerm = (!!matches) ? matches[2] : '';\n      const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n\n      if (searchValues && searchValues.length > 1) {\n        fieldSearchValue = searchValues.join(',');\n      } else if (typeof fieldSearchValue === 'string') {\n        // escaping the search value\n        fieldSearchValue = fieldSearchValue.replace(`'`, `''`); // escape single quotes by doubling them\n        if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\n          operator = (operator === '*' || operator === '*z') ? OperatorType.endsWith : OperatorType.startsWith;\n        }\n      }\n\n      // no need to query if search value is empty\n      if (searchTerm === '' && (!searchValues || (Array.isArray(searchValues) && searchValues.length === 0))) {\n        return true;\n      }\n\n      // if search value has a regex match we will only keep the value without the operator\n      // in this case we need to overwrite the returned search values to truncate operator from the string search\n      if (Array.isArray(matches) && matches.length >= 1 && (Array.isArray(searchValues) && searchValues.length === 1)) {\n        searchValues[0] = searchTerm;\n      }\n\n      // filter search terms should always be string type (even though we permit the end user to input numbers)\n      // so make sure each term are strings, if user has some default search terms, we will cast them to string\n      if (searchValues && Array.isArray(searchValues)) {\n        for (let k = 0, ln = searchValues.length; k < ln; k++) {\n          // make sure all search terms are strings\n          searchValues[k] = ((searchValues[k] === undefined || searchValues[k] === null) ? '' : searchValues[k]) + '';\n        }\n      }\n\n      // when using localization (i18n), we should use the formatter output to search as the new cell value\n      if (columnDef && columnDef.params && columnDef.params.useFormatterOuputToFilter) {\n        const rowIndex = (dataView && typeof dataView.getIdxById === 'function') ? dataView.getIdxById(item.id) : 0;\n        cellValue = columnDef.formatter(rowIndex, columnIndex, cellValue, columnDef, item, this._grid);\n      }\n\n      // make sure cell value is always a string\n      if (typeof cellValue === 'number') {\n        cellValue = cellValue.toString();\n      }\n\n      const conditionOptions = {\n        fieldType,\n        searchTerms: searchValues,\n        cellValue,\n        operator,\n        cellValueLastChar: lastValueChar,\n        filterSearchType\n      };\n\n      if (!FilterConditions.executeMappedCondition(conditionOptions)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  dispose() {\n    this.disposeColumnFilters();\n\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n\n    // unsubscribe local event\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\n      this._slickSubscriber.unsubscribe();\n    }\n  }\n\n  /**\n   * Dispose of the filters, since it's a singleton, we don't want to affect other grids with same columns\n   */\n  disposeColumnFilters() {\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to make columnFilter an empty (without looping) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // also destroy each Filter instances\n    this._filters.forEach((filter, index) => {\n      if (filter && filter.destroy) {\n        filter.destroy(true);\n      }\n    });\n  }\n\n  getColumnFilters() {\n    return this._columnFilters;\n  }\n\n  getCurrentLocalFilters(): CurrentFilter[] {\n    const currentFilters: CurrentFilter[] = [];\n    if (this._columnFilters) {\n      for (const colId of Object.keys(this._columnFilters)) {\n        const columnFilter = this._columnFilters[colId];\n        const columnDef = columnFilter.columnDef;\n        const filter = { columnId: colId || '' } as CurrentFilter;\n\n        if (columnFilter && columnFilter.searchTerms) {\n          filter.searchTerms = columnFilter.searchTerms;\n        }\n        if (columnFilter.operator) {\n          filter.operator = columnFilter.operator;\n        }\n        if (Array.isArray(filter.searchTerms) && filter.searchTerms.length > 0 && filter.searchTerms[0] !== '') {\n          currentFilters.push(filter);\n        }\n      }\n    }\n    return currentFilters;\n  }\n\n  callbackSearchEvent(e: Event | undefined, args: FilterCallbackArg) {\n    if (args) {\n      const searchTerm = ((e && e.target) ? (e.target as HTMLInputElement).value : undefined);\n      const searchTerms = (args.searchTerms && Array.isArray(args.searchTerms)) ? args.searchTerms : (searchTerm ? [searchTerm] : undefined);\n      const columnDef = args.columnDef || null;\n      const columnId = columnDef ? (columnDef.id || '') : '';\n      const operator = args.operator || undefined;\n      const hasSearchTerms = searchTerms && Array.isArray(searchTerms);\n      const termsCount = hasSearchTerms && searchTerms.length;\n      const oldColumnFilters = { ...this._columnFilters };\n\n      if (!hasSearchTerms || termsCount === 0 || (termsCount === 1 && searchTerms[0] === '')) {\n        // delete the property from the columnFilters when it becomes empty\n        // without doing this, it would leave an incorrect state of the previous column filters when filtering on another column\n        delete this._columnFilters[columnId];\n      } else {\n        const colId = '' + columnId as string;\n        const colFilter: ColumnFilter = {\n          columnId: colId,\n          columnDef,\n          searchTerms,\n        };\n        if (operator) {\n          colFilter.operator = operator;\n        }\n        this._columnFilters[colId] = colFilter;\n      }\n\n      // trigger an event only if Filters changed\n      if (!isequal(oldColumnFilters, this._columnFilters)) {\n        this.triggerEvent(this._slickSubscriber, {\n          clearFilterTriggered: args && args.clearFilterTriggered,\n          columnId,\n          columnDef: args.columnDef || null,\n          columnFilters: this._columnFilters,\n          operator,\n          searchTerms,\n          serviceOptions: this._onFilterChangedOptions,\n          grid: this._grid\n        }, e);\n      }\n    }\n  }\n\n  addFilterTemplateToHeaderRow(args: { column: Column; grid: any; node: any }) {\n    const columnDef = args.column;\n    const columnId = columnDef.id || '';\n\n    if (columnDef && columnId !== 'selector' && columnDef.filterable) {\n      let searchTerms: SearchTerm[] | undefined;\n      let operator: OperatorString | OperatorType;\n      const filter: Filter | undefined = this.filterFactory.createFilter(args.column.filter);\n      operator = (columnDef && columnDef.filter && columnDef.filter.operator) || (filter && filter.operator) || undefined;\n\n      if (this._columnFilters[columnDef.id]) {\n        searchTerms = this._columnFilters[columnDef.id].searchTerms || undefined;\n        operator = this._columnFilters[columnDef.id].operator || undefined;\n      } else if (columnDef.filter) {\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // because of that we need to first get searchTerm(s) from the columnFilters (that is what the user last entered)\n        searchTerms = columnDef.filter.searchTerms || undefined;\n        this.updateColumnFilters(searchTerms, columnDef, operator);\n      }\n\n      const filterArguments: FilterArguments = {\n        grid: this._grid,\n        operator,\n        searchTerms,\n        columnDef,\n        callback: this.callbackSearchEvent.bind(this)\n      };\n\n      if (filter) {\n        filter.init(filterArguments);\n        const filterExistIndex = this._filters.findIndex((filt) => filter.columnDef.name === filt.columnDef.name);\n\n        // add to the filters arrays or replace it when found\n        if (filterExistIndex === -1) {\n          this._filters.push(filter);\n        } else {\n          this._filters[filterExistIndex] = filter;\n        }\n\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // we need to also set again the values in the DOM elements if the values were set by a searchTerm(s)\n        if (searchTerms && filter.setValues) {\n          filter.setValues(searchTerms);\n        }\n      }\n    }\n  }\n\n  /**\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\n   * Other services, like Pagination, can then subscribe to it.\n   * @param sender\n   */\n  emitFilterChanged(sender: 'local' | 'remote') {\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\n      let currentFilters: CurrentFilter[] = [];\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentFilters) {\n        currentFilters = backendService.getCurrentFilters() as CurrentFilter[];\n      }\n      this.onFilterChanged.next(currentFilters);\n    } else if (sender === 'local') {\n      this.onFilterChanged.next(this.getCurrentLocalFilters());\n    }\n  }\n\n  /**\n   * When user passes an array of preset filters, we need to pre-populate each column filter searchTerm(s)\n   * The process is to loop through the preset filters array, find the associated column from columnDefinitions and fill in the filter object searchTerm(s)\n   * This is basically the same as if we would manually add searchTerm(s) to a column filter object in the column definition, but we do it programmatically.\n   * At the end of the day, when creating the Filter (DOM Element), it will use these searchTerm(s) so we can take advantage of that without recoding each Filter type (DOM element)\n   */\n  populateColumnFilterSearchTerms() {\n    if (this._gridOptions.presets && Array.isArray(this._gridOptions.presets.filters) && this._gridOptions.presets.filters.length > 0) {\n      const filters = this._gridOptions.presets.filters;\n      this._columnDefinitions.forEach((columnDef: Column) =>  {\n        // clear any columnDef searchTerms before applying Presets\n        if (columnDef.filter && columnDef.filter.searchTerms) {\n          delete columnDef.filter.searchTerms;\n        }\n\n        // from each presets, we will find the associated columnDef and apply the preset searchTerms & operator if there is\n        const columnPreset = filters.find((presetFilter: CurrentFilter) => {\n          return presetFilter.columnId === columnDef.id;\n        });\n        if (columnPreset && columnPreset.searchTerms && Array.isArray(columnPreset.searchTerms)) {\n          columnDef.filter = columnDef.filter || {};\n          columnDef.filter.operator = columnPreset.operator || columnDef.filter.operator || '';\n          columnDef.filter.searchTerms = columnPreset.searchTerms;\n        }\n      });\n    }\n  }\n\n  private updateColumnFilters(searchTerms: SearchTerm[] | undefined, columnDef: any, operator?: OperatorType | OperatorString) {\n    if (searchTerms && columnDef) {\n      // this._columnFilters.searchTerms = searchTerms;\n      this._columnFilters[columnDef.id] = {\n        columnId: columnDef.id,\n        columnDef,\n        searchTerms,\n        operator\n      };\n    }\n  }\n\n  private triggerEvent(slickEvent: any, args: any, e: any) {\n    slickEvent = slickEvent || new Slick.Event();\n\n    // event might have been created as a CustomEvent (e.g. CompoundDateFilter), without being a valid Slick.EventData.\n    // if so we will create a new Slick.EventData and merge it with that CustomEvent to avoid having SlickGrid errors\n    let event = e;\n    if (e && typeof e.isPropagationStopped !== 'function') {\n      event = $.extend({}, new Slick.EventData(), e);\n    }\n    slickEvent.notify(args, event, args.grid);\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  ExportOption,\n  FileType,\n  Formatter,\n  GridOption\n} from './../models/index';\nimport { addWhiteSpaces, htmlEntityDecode, sanitizeHtmlToText } from './../services/utilities';\nimport { Subject } from 'rxjs/Subject';\nimport { TextEncoder } from 'text-encoding-utf-8';\n\n// using external non-typed js libraries\ndeclare let Slick: any;\ndeclare let $: any;\n\nexport interface ExportColumnHeader {\n  key: string;\n  title: string;\n}\n\n@Injectable()\nexport class ExportService {\n  private _lineCarriageReturn = '\\n';\n  private _dataView: any;\n  private _grid: any;\n  private _exportQuoteWrapper: string;\n  private _columnHeaders: ExportColumnHeader[];\n  private _groupedHeaders: ExportColumnHeader[];\n  private _hasGroupedItems = false;\n  private _exportOptions: ExportOption;\n  onGridBeforeExportToFile = new Subject<boolean>();\n  onGridAfterExportToFile = new Subject<{ options: any }>();\n\n  constructor(private translate: TranslateService) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Export Service\n   * @param grid\n   * @param gridOptions\n   * @param dataView\n   */\n  init(grid: any, dataView: any): void {\n    this._grid = grid;\n    this._dataView = dataView;\n  }\n\n  /**\n   * Function to export the Grid result to an Excel CSV format using javascript for it to produce the CSV file.\n   * This is a WYSIWYG export to file output (What You See is What You Get)\n   *\n   * NOTES: The column position needs to match perfectly the JSON Object position because of the way we are pulling the data,\n   * which means that if any column(s) got moved in the UI, it has to be reflected in the JSON array output as well\n   *\n   * Example: exportToFile({ format: FileType.csv, delimiter: DelimiterType.comma })\n   */\n  exportToFile(options: ExportOption) {\n    this.onGridBeforeExportToFile.next(true);\n    this._exportOptions = $.extend(true, {}, this._gridOptions.exportOptions, options);\n\n    // get the CSV output from the grid data\n    const dataOutput = this.getDataOutput();\n\n    // trigger a download file\n    // wrap it into a setTimeout so that the EventAggregator has enough time to start a pre-process like showing a spinner\n    setTimeout(() => {\n      const downloadOptions = {\n        filename: `${this._exportOptions.filename}.${this._exportOptions.format}`,\n        csvContent: dataOutput,\n        format: this._exportOptions.format,\n        useUtf8WithBom: this._exportOptions.useUtf8WithBom\n      };\n      this.startDownloadFile(downloadOptions);\n      this.onGridAfterExportToFile.next({ options: downloadOptions });\n    }, 0);\n  }\n\n  // -----------------------\n  // Private functions\n  // -----------------------\n\n  getDataOutput(): string {\n    const columns = this._grid.getColumns() || [];\n    const delimiter = this._exportOptions.delimiter || '';\n    const format = this._exportOptions.format || '';\n    const groupByColumnHeader = this._exportOptions.groupingColumnHeaderTitle || this.translate.instant('GROUP_BY');\n\n    // a CSV needs double quotes wrapper, the other types do not need any wrapper\n    this._exportQuoteWrapper = (format === FileType.csv) ? '\"' : '';\n\n    // data variable which will hold all the fields data of a row\n    let outputDataString = '';\n\n    // get grouped column titles and if found, we will add a \"Group by\" column at the first column index\n    const grouping = this._dataView.getGrouping();\n    if (grouping && Array.isArray(grouping) && grouping.length > 0) {\n      this._hasGroupedItems = true;\n      outputDataString += `${groupByColumnHeader}` + delimiter;\n    } else {\n      this._hasGroupedItems = false;\n    }\n\n    // get all column headers\n    this._columnHeaders = this.getColumnHeaders(columns) || [];\n    if (this._columnHeaders && Array.isArray(this._columnHeaders) && this._columnHeaders.length > 0) {\n      // add the header row + add a new line at the end of the row\n      const outputHeaderTitles = this._columnHeaders.map((header) => {\n        return this._exportQuoteWrapper + header.title + this._exportQuoteWrapper;\n      });\n      outputDataString += (outputHeaderTitles.join(delimiter) + this._lineCarriageReturn);\n    }\n\n    // Populate the rest of the Grid Data\n    outputDataString += this.getAllGridRowData(columns, this._lineCarriageReturn);\n\n    return outputDataString;\n  }\n\n  /**\n   * Get all the grid row data and return that as an output string\n   */\n  getAllGridRowData(columns: Column[], lineCarriageReturn: string): string {\n    let outputDataString = '';\n    const lineCount = this._dataView.getLength();\n\n    // loop through all the grid rows of data\n    for (let rowNumber = 0; rowNumber < lineCount; rowNumber++) {\n      const itemObj = this._dataView.getItem(rowNumber);\n\n      if (itemObj != null) {\n        // Normal row (not grouped by anything) would have an ID which was predefined in the Grid Columns definition\n        if (itemObj.id != null) {\n          // get regular row item data\n          outputDataString += this.readRegularRowData(columns, rowNumber, itemObj);\n        } else if (this._hasGroupedItems && itemObj.__groupTotals === undefined) {\n          // get the group row\n          outputDataString += this.readGroupedTitleRow(itemObj) + this._exportOptions.delimiter;\n        } else if (itemObj.__groupTotals) {\n          // else if the row is a Group By and we have agreggators, then a property of '__groupTotals' would exist under that object\n          outputDataString += this.readGroupedTotalRow(columns, itemObj) + this._exportOptions.delimiter;\n        }\n        outputDataString += lineCarriageReturn;\n      }\n    }\n\n    return outputDataString;\n  }\n\n  /**\n   * Get all header titles and their keys, translate the title when required.\n   * @param columns of the grid\n   */\n  getColumnHeaders(columns: Column[]): ExportColumnHeader[] {\n    if (!columns || !Array.isArray(columns) || columns.length === 0) {\n      return null;\n    }\n    const columnHeaders = [];\n\n    // Populate the Column Header, pull the name defined\n    columns.forEach((columnDef) => {\n      const fieldName = (columnDef.headerKey) ? this.translate.instant(columnDef.headerKey) : columnDef.name;\n      const skippedField = columnDef.excludeFromExport || false;\n\n      // if column width is 0 then it's not evaluated since that field is considered hidden should not be part of the export\n      if ((columnDef.width ===  undefined || columnDef.width > 0) && !skippedField) {\n        columnHeaders.push({\n          key: columnDef.field || columnDef.id,\n          title: fieldName\n        });\n      }\n    });\n\n    return columnHeaders;\n  }\n\n  /**\n   * Get the data of a regular row (a row without grouping)\n   * @param row\n   * @param itemObj\n   */\n  readRegularRowData(columns: Column[], row: number, itemObj: any) {\n    let idx = 0;\n    let rowOutputString = '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n\n    for (let col = 0, ln = columns.length; col < ln; col++) {\n      const columnDef = columns[col];\n      const fieldId = columnDef.field || columnDef.id || '';\n\n      // skip excluded column\n      if (columnDef.excludeFromExport) {\n          continue;\n      }\n\n      // if we are grouping and are on 1st column index, we need to skip this column since it will be used later by the grouping text:: Group by [columnX]\n      if (this._hasGroupedItems && idx === 0) {\n        rowOutputString += `\"\"` + delimiter;\n      }\n\n      // does the user want to evaluate current column Formatter?\n      const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._exportOptions.exportWithFormatter;\n\n      // did the user provide a Custom Formatter for the export\n      const exportCustomFormatter: Formatter = (columnDef.exportCustomFormatter !== undefined) ? columnDef.exportCustomFormatter : undefined;\n\n      let itemData = '';\n\n      if (exportCustomFormatter) {\n        itemData = exportCustomFormatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\n      } else if (isEvaluatingFormatter && !!columnDef.formatter) {\n        itemData = columnDef.formatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\n      } else {\n        itemData = (itemObj[fieldId] === null || itemObj[fieldId] === undefined) ? '' : itemObj[fieldId];\n      }\n\n      // does the user want to sanitize the output data (remove HTML tags)?\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n        itemData = sanitizeHtmlToText(itemData);\n      }\n\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n      if (format === FileType.csv) {\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n      }\n\n      // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n      // to cancel that effect we can had = in front, ex: =\"1E06\"\n      const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\n\n      rowOutputString += keepAsStringWrapper + exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\n      idx++;\n    }\n\n    return rowOutputString;\n  }\n\n  /**\n   * Get the grouped title(s), for example if we grouped by salesRep, the returned result would be:: 'Sales Rep'\n   * @param itemObj\n   */\n  readGroupedTitleRow(itemObj: any) {\n    let groupName = sanitizeHtmlToText(itemObj.title);\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n\n    groupName = addWhiteSpaces(5 * itemObj.level) + groupName;\n\n    if (format === FileType.csv) {\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n      groupName = groupName.toString().replace(/\"/gi, `\"\"`);\n    }\n\n    // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n    // to cancel that effect we can had = in front, ex: =\"1E06\"\n    // const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\n\n    return /*keepAsStringWrapper +*/ exportQuoteWrapper + ' ' + groupName + exportQuoteWrapper + delimiter;\n  }\n\n  /**\n   * Get the grouped totals, these are set by Slick Aggregators.\n   * For example if we grouped by \"salesRep\" and we have a Sum Aggregator on \"sales\", then the returned output would be:: [\"Sum 123$\"]\n   * @param itemObj\n   */\n  readGroupedTotalRow(columns: Column[], itemObj: any) {\n    let exportExponentialWrapper = '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n    const groupingAggregatorRowText = this._exportOptions.groupingAggregatorRowText || '';\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n    let output = `${exportQuoteWrapper}${groupingAggregatorRowText}${exportQuoteWrapper}${delimiter}`;\n\n    columns.forEach((columnDef) => {\n      let itemData = '';\n\n      // if there's a groupTotalsFormatter, we will re-run it to get the exact same output as what is shown in UI\n      if (columnDef.groupTotalsFormatter) {\n        itemData = columnDef.groupTotalsFormatter(itemObj, columnDef);\n      }\n\n      // does the user want to sanitize the output data (remove HTML tags)?\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n        itemData = sanitizeHtmlToText(itemData);\n      }\n\n      if (format === FileType.csv) {\n        // when CSV we also need to escape double quotes twice, so a double quote \" becomes 2x double quotes \"\"\n        // and if we have a text of (number)E(number),\n        // we don't want excel to transform it into exponential (1.0E06) to cancel that effect we can had = in front, ex: =\"1E06\"\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n        exportExponentialWrapper = (itemData.match(/^\\s*\\d+E\\d+\\s*$/i)) ? '=' : '';\n      }\n      output += exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\n    });\n\n    return output;\n  }\n\n  /**\n   * Triggers download file with file format.\n   * IE(6-10) are not supported\n   * All other browsers will use plain javascript on client side to produce a file download.\n   * @param options\n   */\n  startDownloadFile(options: { filename: string, csvContent: any, format: FileType | string, useUtf8WithBom: boolean }): void {\n    // IE(6-10) don't support javascript download and our service doesn't support either so throw an error, we have to make a round trip to the Web Server for exporting\n    if (navigator.appName === 'Microsoft Internet Explorer') {\n      throw new Error('Microsoft Internet Explorer 6 to 10 do not support javascript export to CSV. Please upgrade your browser.');\n    }\n\n    // set the correct MIME type\n    const mimeType = (options.format === FileType.csv) ? 'text/csv' : 'text/plain';\n\n    // make sure no html entities exist in the data\n    const csvContent = htmlEntityDecode(options.csvContent);\n\n    // dealing with Excel CSV export and UTF-8 is a little tricky.. We will use Option #2 to cover older Excel versions\n    // Option #1: we need to make Excel knowing that it's dealing with an UTF-8, A correctly formatted UTF8 file can have a Byte Order Mark as its first three octets\n    // reference: http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\n    // Option#2: use a 3rd party extension to javascript encode into UTF-16\n    let outputData: Uint8Array | string;\n    if (options.format === FileType.csv) {\n      outputData = new TextEncoder('utf-8').encode(csvContent);\n    } else {\n      outputData = csvContent;\n    }\n\n    // create a Blob object for the download\n    const blob = new Blob([options.useUtf8WithBom ? '\\uFEFF' : '', outputData], {\n      type: `${mimeType};charset=utf-8;`\n    });\n\n    // when using IE/Edge, then use different download call\n    if (typeof navigator.msSaveOrOpenBlob === 'function') {\n      navigator.msSaveOrOpenBlob(blob, options.filename);\n    } else {\n      // this trick will generate a temp <a /> tag\n      // the code will then trigger a hidden click for it to start downloading\n      const link = document.createElement('a');\n      const csvUrl = URL.createObjectURL(blob);\n\n      link.textContent = 'download';\n      link.href = csvUrl;\n      link.setAttribute('download', options.filename);\n\n      // set the visibility to hidden so there is no effect on your web-layout\n      link.style.visibility = 'hidden';\n\n      // this part will append the anchor tag, trigger a click (for download to start) and finally remove the tag once completed\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n}\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\r\nimport { castToPromise } from './utilities';\r\nimport {\r\n  CellArgs,\r\n  Column,\r\n  ColumnSort,\r\n  CurrentSorter,\r\n  FieldType,\r\n  GridOption,\r\n  SlickEvent,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\nimport { Sorters } from './../sorters';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// using external non-typed js libraries\r\ndeclare var Slick: any;\r\n\r\nexport class SortService {\r\n  private _currentLocalSorters: CurrentSorter[] = [];\r\n  private _eventHandler: any = new Slick.EventHandler();\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _slickSubscriber: SlickEvent;\r\n  private _isBackendGrid = false;\r\n  onSortChanged = new Subject<CurrentSorter[]>();\r\n  onSortCleared = new Subject<boolean>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  /**\r\n   * Attach a backend sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param dataView SlickGrid DataView object\r\n   */\r\n  attachBackendOnSort(grid: any, dataView: any) {\r\n    this._isBackendGrid = true;\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = grid.onSort;\r\n\r\n    // subscribe to the SlickGrid event and call the backend execution\r\n    this._slickSubscriber.subscribe(this.onBackendSortChanged.bind(this));\r\n  }\r\n\r\n  async onBackendSortChanged(event: Event, args: any) {\r\n    if (!args || !args.grid) {\r\n      throw new Error('Something went wrong when trying to attach the \"onBackendSortChanged(event, args)\" function, it seems that \"args\" is not populated correctly');\r\n    }\r\n    const gridOptions: GridOption = args.grid.getOptions() || {};\r\n    const backendApi = gridOptions.backendServiceApi;\r\n\r\n    if (!backendApi || !backendApi.process || !backendApi.service) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    // keep start time & end timestamps & return it after process execution\r\n    const startTime = new Date();\r\n\r\n    if (backendApi.preProcess) {\r\n      backendApi.preProcess();\r\n    }\r\n\r\n    const query = backendApi.service.processOnSortChanged(event, args);\r\n    this.emitSortChanged('remote');\r\n\r\n    // the process could be an Observable (like HttpClient) or a Promise\r\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n    const observableOrPromise = backendApi.process(query);\r\n    const processResult = await castToPromise(observableOrPromise);\r\n    const endTime = new Date();\r\n\r\n    // from the result, call our internal post process to update the Dataset and Pagination info\r\n    if (processResult && backendApi.internalPostProcess) {\r\n      backendApi.internalPostProcess(processResult);\r\n    }\r\n\r\n    // send the response process to the postProcess callback\r\n    if (backendApi.postProcess) {\r\n      if (processResult instanceof Object) {\r\n        processResult.statistics = {\r\n          startTime,\r\n          endTime,\r\n          executionTime: endTime.valueOf() - startTime.valueOf(),\r\n          totalItemCount: this._gridOptions && this._gridOptions.pagination && this._gridOptions.pagination.totalItems\r\n        };\r\n      }\r\n      backendApi.postProcess(processResult);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attach a local sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param gridOptions Grid Options object\r\n   * @param dataView\r\n   */\r\n  attachLocalOnSort(grid: any, dataView: any) {\r\n    this._isBackendGrid = false;\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = grid.onSort;\r\n\r\n    this._slickSubscriber.subscribe((e: any, args: any) => {\r\n      // multiSort and singleSort are not exactly the same, but we want to structure it the same for the (for loop) after\r\n      // also to avoid having to rewrite the for loop in the sort, we will make the singleSort an array of 1 object\r\n      const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({sortAsc: args.sortAsc, sortCol: args.sortCol});\r\n\r\n      // keep current sorters\r\n      this._currentLocalSorters = []; // reset current local sorters\r\n      if (Array.isArray(sortColumns)) {\r\n        sortColumns.forEach((sortColumn: { sortCol: Column, sortAsc: number }) => {\r\n          if (sortColumn.sortCol) {\r\n            this._currentLocalSorters.push({\r\n              columnId: sortColumn.sortCol.id,\r\n              direction: sortColumn.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      this.onLocalSortChanged(grid, dataView, sortColumns);\r\n      this.emitSortChanged('local');\r\n    });\r\n  }\r\n\r\n  clearSorting() {\r\n    if (this._grid && this._gridOptions && this._dataView) {\r\n      // remove any sort icons (this setSortColumns function call really does only that)\r\n      this._grid.setSortColumns([]);\r\n\r\n      // we also need to trigger a sort change\r\n      // for a backend grid, we will trigger a backend sort changed with an empty sort columns array\r\n      // however for a local grid, we need to pass a sort column and so we will sort by the 1st column\r\n      if (this._isBackendGrid) {\r\n        this.onBackendSortChanged(undefined, { grid: this._grid, sortCols: [] });\r\n      } else {\r\n        if (this._columnDefinitions && Array.isArray(this._columnDefinitions)) {\r\n          this.onLocalSortChanged(this._grid, this._dataView, new Array({sortAsc: true, sortCol: this._columnDefinitions[0] }));\r\n        }\r\n      }\r\n    }\r\n    // set current sorter to empty & emit a sort changed event\r\n    this._currentLocalSorters = [];\r\n\r\n    // emit an event when filters are all cleared\r\n    this.onSortCleared.next(true);\r\n  }\r\n\r\n  getCurrentLocalSorters(): CurrentSorter[] {\r\n    return this._currentLocalSorters;\r\n  }\r\n\r\n  /**\r\n   * Get column sorts,\r\n   * If a column is passed as an argument, we won't add this column to our output array since it is already in the array\r\n   * We want to know the sort prior to calling the next sorting command\r\n   */\r\n  getPreviousColumnSorts(columnId?: string) {\r\n    // getSortColumns() only returns sortAsc & columnId, we want the entire column definition\r\n    const oldSortColumns = this._grid.getSortColumns();\r\n\r\n    // get the column definition but only keep column which are not equal to our current column\r\n    const sortedCols = oldSortColumns.reduce((cols, col) => {\r\n      if (!columnId || col.columnId !== columnId) {\r\n        cols.push({ sortCol: this._columnDefinitions[this._grid.getColumnIndex(col.columnId)], sortAsc: col.sortAsc });\r\n      }\r\n      return cols;\r\n    }, []);\r\n\r\n    return sortedCols;\r\n  }\r\n\r\n  /**\r\n   * load any presets if there are any\r\n   * @param grid\r\n   * @param dataView\r\n   */\r\n  loadLocalPresets(grid: any, dataView: any) {\r\n    const sortCols: ColumnSort[] = [];\r\n    this._currentLocalSorters = []; // reset current local sorters\r\n    if (this._gridOptions && this._gridOptions.presets && this._gridOptions.presets.sorters) {\r\n      const sorters = this._gridOptions.presets.sorters;\r\n\r\n      sorters.forEach((presetSorting: CurrentSorter) => {\r\n        const gridColumn = this._columnDefinitions.find((col: Column) => col.id === presetSorting.columnId);\r\n        if (gridColumn) {\r\n          sortCols.push({\r\n            columnId: gridColumn.id,\r\n            sortAsc: ((presetSorting.direction.toUpperCase() === SortDirection.ASC) ? true : false),\r\n            sortCol: gridColumn\r\n          });\r\n\r\n          // keep current sorters\r\n          this._currentLocalSorters.push({\r\n            columnId: gridColumn.id + '',\r\n            direction: presetSorting.direction.toUpperCase() as SortDirectionString\r\n          });\r\n        }\r\n      });\r\n\r\n      if (sortCols.length > 0) {\r\n        this.onLocalSortChanged(grid, dataView, sortCols);\r\n        grid.setSortColumns(sortCols); // use this to add sort icon(s) in UI\r\n      }\r\n    }\r\n  }\r\n\r\n  onLocalSortChanged(grid: any, dataView: any, sortColumns: ColumnSort[]) {\r\n    dataView.sort((dataRow1: any, dataRow2: any) => {\r\n      for (let i = 0, l = sortColumns.length; i < l; i++) {\r\n        const columnSortObj = sortColumns[i];\r\n        if (columnSortObj && columnSortObj.sortCol) {\r\n          const sortDirection = columnSortObj.sortAsc ? SortDirectionNumber.asc : SortDirectionNumber.desc;\r\n          const sortField = columnSortObj.sortCol.queryField || columnSortObj.sortCol.queryFieldFilter || columnSortObj.sortCol.field;\r\n          const fieldType = columnSortObj.sortCol.type || FieldType.string;\r\n          const value1 = dataRow1[sortField];\r\n          const value2 = dataRow2[sortField];\r\n          const sortResult = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n          if (sortResult !== SortDirectionNumber.neutral) {\r\n            return sortResult;\r\n          }\r\n        }\r\n      }\r\n      return 0;\r\n    });\r\n    grid.invalidate();\r\n    grid.render();\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe local event\r\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\r\n      this._slickSubscriber.unsubscribe();\r\n    }\r\n\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n  }\r\n\r\n  /**\r\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\r\n   * Other services, like Pagination, can then subscribe to it.\r\n   * @param sender\r\n   */\r\n  emitSortChanged(sender: 'local' | 'remote') {\r\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      let currentSorters: CurrentSorter[] = [];\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        currentSorters = backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n      this.onSortChanged.next(currentSorters);\r\n    } else if (sender === 'local') {\r\n      this.onSortChanged.next(this.getCurrentLocalSorters());\r\n    }\r\n  }\r\n}\r\n",
    "export class Constants {\r\n  static TEXT_CANCEL = 'Cancel';\r\n  static TEXT_CLEAR_ALL_FILTERS = 'Clear All Filters';\r\n  static TEXT_CLEAR_ALL_SORTING = 'Clear All Sorting';\r\n  static TEXT_COLUMNS = 'Columns';\r\n  static TEXT_COMMANDS = 'Commands';\r\n  static TEXT_EXPORT_IN_CSV_FORMAT = 'Export in CSV format';\r\n  static TEXT_EXPORT_IN_TEXT_FORMAT = 'Export in Text format (Tab delimited)';\r\n  static TEXT_FORCE_FIT_COLUMNS = 'Force fit columns';\r\n  static TEXT_HIDE_COLUMN = 'Hide Column';\r\n  static TEXT_REFRESH_DATASET = 'Refresh Dataset';\r\n  static TEXT_SAVE = 'Save';\r\n  static TEXT_SYNCHRONOUS_RESIZE = 'Synchronous resize';\r\n  static TEXT_SORT_ASCENDING = 'Sort Ascending';\r\n  static TEXT_SORT_DESCENDING = 'Sort Descending';\r\n  static TEXT_TOGGLE_FILTER_ROW = 'Toggle Filter Row';\r\n  static VALIDATION_EDITOR_VALID_NUMBER = 'Please enter a valid number';\r\n  static VALIDATION_EDITOR_VALID_INTEGER = 'Please enter a valid integer number';\r\n  static VALIDATION_EDITOR_NUMBER_BETWEEN = 'Please enter a valid number between {{minValue}} and {{maxValue}}';\r\n  static VALIDATION_EDITOR_DECIMAL_BETWEEN = 'Please enter a valid number with a maximum of {{maxDecimal}} decimals';\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport {\n  CellArgs,\n  ColumnSort,\n  Column,\n  DelimiterType,\n  Extension,\n  FileType,\n  GraphqlResult,\n  GridMenu,\n  GridMenuItem,\n  GridOption,\n  HeaderButtonOnCommandArgs,\n  HeaderMenu,\n  HeaderMenuItem,\n  HeaderMenuOnCommandArgs,\n  HeaderMenuOnBeforeMenuShowArgs,\n} from './../models/index';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, sanitizeHtmlToText } from './../services/utilities';\nimport { FilterService } from './filter.service';\nimport { ExportService } from './export.service';\nimport { SortService } from './sort.service';\nimport { Constants } from '../constants';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class ControlAndPluginService {\n  private _dataView: any;\n  private _grid: any;\n  allColumns: Column[];\n  visibleColumns: Column[];\n  areVisibleColumnDifferent = false;\n  extensionList: Extension[] = [];\n  undoRedoBuffer: any;\n  userOriginalGridMenu: GridMenu;\n\n  // controls & plugins\n  autoTooltipPlugin: any;\n  cellExternalCopyManagerPlugin: any;\n  checkboxSelectorPlugin: any;\n  columnPickerControl: any;\n  gridMenuControl: any;\n  groupItemMetaProviderPlugin: any;\n  headerButtonsPlugin: any;\n  headerMenuPlugin: any;\n  rowSelectionPlugin: any;\n\n  constructor(\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private sortService: SortService,\n    private translate: TranslateService,\n  ) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Setter for the Grid Options pulled through the Grid Object */\n  private set _gridOptions(gridOptions: GridOption) {\n    this._gridOptions = gridOptions;\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  /** Get all columns (includes visible and non-visible) */\n  getAllColumns(): Column[] {\n    return this.allColumns || [];\n  }\n\n  /** Get only visible columns */\n  getVisibleColumns(): Column[] {\n    return this.visibleColumns || [];\n  }\n\n  /** Get all Extensions */\n  getAllExtensions(): Extension[] {\n    return this.extensionList;\n  }\n\n  /**\n   * Get an Extension by it's name\n   *  @param name\n   */\n  getExtensionByName(name: string): Extension | undefined {\n    return this.extensionList.find((p) => p.name === name);\n  }\n\n  /** Auto-resize all the column in the grid to fit the grid width */\n  autoResizeColumns() {\n    this._grid.autosizeColumns();\n  }\n\n  /**\n   * Attach/Create different Controls or Plugins after the Grid is created\n   * @param grid\n   * @param dataView\n   * @param groupItemMetadataProvider\n   */\n  attachDifferentControlOrPlugins(grid: any, dataView: any, groupItemMetadataProvider: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n    this.allColumns = this._columnDefinitions;\n    this.visibleColumns = this._columnDefinitions;\n\n    // make sure all columns are translated before creating ColumnPicker/GridMenu Controls\n    // this is to avoid having hidden columns not being translated on first load\n    if (this._gridOptions.enableTranslate) {\n      this.translateItems(this.allColumns, 'headerKey', 'name');\n    }\n\n    // Column Picker Control\n    if (this._gridOptions.enableColumnPicker) {\n      this.columnPickerControl = this.createColumnPicker(this._grid, this._columnDefinitions);\n      this.extensionList.push({ name: 'ColumnPicker', service: this.columnPickerControl });\n    }\n\n    // Grid Menu Control\n    if (this._gridOptions.enableGridMenu) {\n      // keep original user grid menu, useful when switching locale to translate\n      this.userOriginalGridMenu = { ...this._gridOptions.gridMenu };\n\n      this.gridMenuControl = this.createGridMenu(this._grid, this._columnDefinitions);\n      this.extensionList.push({ name: 'GridMenu', service: this.gridMenuControl });\n    }\n\n    // Auto Tooltip Plugin\n    if (this._gridOptions.enableAutoTooltip) {\n      this.autoTooltipPlugin = new Slick.AutoTooltips(this._gridOptions.autoTooltipOptions || {});\n      this._grid.registerPlugin(this.autoTooltipPlugin);\n      this.extensionList.push({ name: 'AutoTooltip', service: this.autoTooltipPlugin });\n    }\n\n    // Grouping Plugin\n    // register the group item metadata provider to add expand/collapse group handlers\n    if (this._gridOptions.enableGrouping) {\n      this.groupItemMetaProviderPlugin = groupItemMetadataProvider || {};\n      this._grid.registerPlugin(this.groupItemMetaProviderPlugin);\n      this.extensionList.push({ name: 'GroupItemMetaProvider', service: this.groupItemMetaProviderPlugin });\n    }\n\n    // Checkbox Selector Plugin\n    if (this._gridOptions.enableCheckboxSelector) {\n      // when enabling the Checkbox Selector Plugin, we need to also watch onClick events to perform certain actions\n      // the selector column has to be created BEFORE the grid (else it behaves oddly), but we can only watch grid events AFTER the grid is created\n      this._grid.registerPlugin(this.checkboxSelectorPlugin);\n      this.extensionList.push({ name: 'CheckboxSelector', service: this.checkboxSelectorPlugin });\n\n      // this also requires the Row Selection Model to be registered as well\n      if (!this.rowSelectionPlugin || !this._grid.getSelectionModel()) {\n        this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n        this._grid.setSelectionModel(this.rowSelectionPlugin);\n      }\n\n      // user might want to pre-select some rows\n      // the setTimeout is because of timing issue with styling (row selection happen but rows aren't highlighted properly)\n      if (this._gridOptions.preselectedRows && this.rowSelectionPlugin && this._grid.getSelectionModel()) {\n        setTimeout(() => this.checkboxSelectorPlugin.selectRows(this._gridOptions.preselectedRows), 0);\n      }\n    }\n\n    // Row Selection Plugin\n    if (!this._gridOptions.enableCheckboxSelector && this._gridOptions.enableRowSelection) {\n      this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n      this._grid.setSelectionModel(this.rowSelectionPlugin);\n    }\n\n    // Header Button Plugin\n    if (this._gridOptions.enableHeaderButton) {\n      this.headerButtonsPlugin = new Slick.Plugins.HeaderButtons(this._gridOptions.headerButton || {});\n      this._grid.registerPlugin(this.headerButtonsPlugin);\n      this.extensionList.push({ name: 'HeaderButtons', service: this.headerButtonsPlugin });\n      this.headerButtonsPlugin.onCommand.subscribe((e: Event, args: HeaderButtonOnCommandArgs) => {\n        if (this._gridOptions.headerButton && typeof this._gridOptions.headerButton.onCommand === 'function') {\n          this._gridOptions.headerButton.onCommand(e, args);\n        }\n      });\n    }\n\n    // Header Menu Plugin\n    if (this._gridOptions.enableHeaderMenu) {\n      this.headerMenuPlugin = this.createHeaderMenu(this._grid, this._dataView, this._columnDefinitions);\n    }\n\n    // Cell External Copy Manager Plugin (Excel Like)\n    if (this._gridOptions.enableExcelCopyBuffer) {\n      this.createUndoRedoBuffer();\n      this.hookUndoShortcutKey();\n      this.createCellExternalCopyManagerPlugin(this._grid);\n    }\n\n    // manually register other plugins\n    if (this._gridOptions.registerPlugins !== undefined) {\n      if (Array.isArray(this._gridOptions.registerPlugins)) {\n        this._gridOptions.registerPlugins.forEach((plugin) => {\n          this._grid.registerPlugin(plugin);\n          this.extensionList.push({ name: 'generic', service: plugin });\n        });\n      } else {\n        this._grid.registerPlugin(this._gridOptions.registerPlugins);\n        this.extensionList.push({ name: 'generic', service: this._gridOptions.registerPlugins });\n      }\n    }\n  }\n\n  /**\n   * Attach/Create different plugins before the Grid creation.\n   * For example the multi-select have to be added to the column definition before the grid is created to work properly\n   * @param columnDefinitions\n   * @param options\n   */\n  createCheckboxPluginBeforeGridCreation(columnDefinitions: Column[], options: GridOption) {\n    if (options.enableCheckboxSelector) {\n      if (!this.checkboxSelectorPlugin) {\n        this.checkboxSelectorPlugin = new Slick.CheckboxSelectColumn(options.checkboxSelector || {});\n      }\n      const selectionColumn: Column = this.checkboxSelectorPlugin.getColumnDefinition();\n      selectionColumn.excludeFromExport = true;\n      selectionColumn.excludeFromQuery = true;\n      selectionColumn.excludeFromHeaderMenu = true;\n      columnDefinitions.unshift(selectionColumn);\n    }\n  }\n\n  /** Create the Excel like copy manager */\n  createCellExternalCopyManagerPlugin(grid: any) {\n    let newRowIds = 0;\n    const pluginOptions = {\n      clipboardCommandHandler: (editCommand: any) => {\n        this.undoRedoBuffer.queueAndExecuteCommand.call(this.undoRedoBuffer, editCommand);\n      },\n      dataItemColumnValueExtractor: (item: any, columnDef: Column) => {\n        // when grid or cell is not editable, we will possibly evaluate the Formatter if it was passed\n        // to decide if we evaluate the Formatter, we will use the same flag from Export which is \"exportWithFormatter\"\n        if (!this._gridOptions.editable || !columnDef.editor) {\n          const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._gridOptions.exportOptions.exportWithFormatter;\n          if (columnDef.formatter && isEvaluatingFormatter) {\n            const formattedOutput = columnDef.formatter(0, 0, item[columnDef.field], columnDef, item, this._grid);\n            if (columnDef.sanitizeDataExport || (this._gridOptions.exportOptions && this._gridOptions.exportOptions.sanitizeDataExport)) {\n              return sanitizeHtmlToText(formattedOutput);\n            }\n            return formattedOutput;\n          }\n        }\n\n        // else use the default \"dataItemColumnValueExtractor\" from the plugin itself\n        // we can do that by setting back the getter with null\n        return null;\n      },\n      readOnlyMode: false,\n      includeHeaderWhenCopying: false,\n      newRowCreator: (count: number) => {\n        for (let i = 0; i < count; i++) {\n          const item = {\n            id: 'newRow_' + newRowIds++\n          };\n          grid.getData().addItem(item);\n        }\n      }\n    };\n\n    grid.setSelectionModel(new Slick.CellSelectionModel());\n    this.cellExternalCopyManagerPlugin = new Slick.CellExternalCopyManager(pluginOptions);\n    grid.registerPlugin(this.cellExternalCopyManagerPlugin);\n    this.extensionList.push({ name: 'CellExternalCopyManager', service: this.cellExternalCopyManagerPlugin });\n  }\n\n  /**\n   * Create the Column Picker and expose all the available hooks that user can subscribe (onColumnsChanged)\n   * @param grid\n   * @param columnDefinitions\n   */\n  createColumnPicker(grid: any, columnDefinitions: Column[]) {\n    // localization support for the picker\n    const columnTitle = this.getPickerTitleOutputString('columnTitle', 'columnPicker');\n    const forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'columnPicker');\n    const syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');\n\n    this._gridOptions.columnPicker = this._gridOptions.columnPicker || {};\n    this._gridOptions.columnPicker.columnTitle = this._gridOptions.columnPicker.columnTitle || columnTitle;\n    this._gridOptions.columnPicker.forceFitTitle = this._gridOptions.columnPicker.forceFitTitle || forceFitTitle;\n    this._gridOptions.columnPicker.syncResizeTitle = this._gridOptions.columnPicker.syncResizeTitle || syncResizeTitle;\n\n    this.columnPickerControl = new Slick.Controls.ColumnPicker(columnDefinitions, grid, this._gridOptions);\n    if (grid && this._gridOptions.enableColumnPicker) {\n      this.columnPickerControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\n        if (this._gridOptions.columnPicker && typeof this._gridOptions.columnPicker.onColumnsChanged === 'function') {\n          this._gridOptions.columnPicker.onColumnsChanged(e, args);\n        }\n      });\n    }\n\n    return this.columnPickerControl;\n  }\n\n  /**\n   * Create (or re-create) Grid Menu and expose all the available hooks that user can subscribe (onCommand, onMenuClose, ...)\n   * @param grid\n   * @param columnDefinitions\n   */\n  createGridMenu(grid: any, columnDefinitions: Column[]) {\n    if (this._gridOptions && this._gridOptions.gridMenu) {\n      this._gridOptions.gridMenu = { ...this.getDefaultGridMenuOptions(), ...this._gridOptions.gridMenu };\n\n      // merge original user grid menu items with internal items\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\n      this._gridOptions.gridMenu.customItems = [...this.userOriginalGridMenu.customItems || [], ...this.addGridMenuCustomCommands()];\n      this.translateItems(this._gridOptions.gridMenu.customItems, 'titleKey', 'title');\n      this.sortItems(this._gridOptions.gridMenu.customItems, 'positionOrder');\n\n      const gridMenuControl = new Slick.Controls.GridMenu(columnDefinitions, grid, this._gridOptions);\n      if (grid && this._gridOptions.gridMenu) {\n        gridMenuControl.onBeforeMenuShow.subscribe((e: Event, args: CellArgs) => {\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onBeforeMenuShow === 'function') {\n            this._gridOptions.gridMenu.onBeforeMenuShow(e, args);\n          }\n        });\n        gridMenuControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\n          this.areVisibleColumnDifferent = true;\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onColumnsChanged === 'function') {\n            this._gridOptions.gridMenu.onColumnsChanged(e, args);\n          }\n        });\n        gridMenuControl.onCommand.subscribe((e: Event, args: GridMenuItem) => {\n          this.executeGridMenuInternalCustomCommands(e, args);\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onCommand === 'function') {\n            this._gridOptions.gridMenu.onCommand(e, args);\n          }\n        });\n        gridMenuControl.onMenuClose.subscribe((e: Event, args: CellArgs) => {\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onMenuClose === 'function') {\n            this._gridOptions.gridMenu.onMenuClose(e, args);\n          }\n\n          // we also want to resize the columns if the user decided to hide certain column(s)\n          if (grid && typeof grid.autosizeColumns === 'function') {\n            // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree)\n            const gridUid = grid.getUID();\n            if (this.areVisibleColumnDifferent && gridUid && $(`.${gridUid}`).length > 0) {\n              if (this._gridOptions && this._gridOptions.enableAutoSizeColumns) {\n                grid.autosizeColumns();\n              }\n              this.areVisibleColumnDifferent = false;\n            }\n          }\n        });\n      }\n      return gridMenuControl;\n    }\n    return null;\n  }\n\n  /**\n   * Create the Header Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)\n   * @param grid\n   * @param dataView\n   * @param columnDefinitions\n   */\n  createHeaderMenu(grid: any, dataView: any, columnDefinitions: Column[]) {\n    this._gridOptions.headerMenu = { ...this.getDefaultHeaderMenuOptions(), ...this._gridOptions.headerMenu };\n    if (this._gridOptions.enableHeaderMenu) {\n      this._gridOptions.headerMenu = this.addHeaderMenuCustomCommands(this._gridOptions, columnDefinitions);\n    }\n\n    const headerMenuPlugin = new Slick.Plugins.HeaderMenu(this._gridOptions.headerMenu);\n\n    grid.registerPlugin(headerMenuPlugin);\n    headerMenuPlugin.onCommand.subscribe((e: Event, args: HeaderMenuOnCommandArgs) => {\n      this.executeHeaderMenuInternalCommands(e, args);\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onCommand === 'function') {\n        this._gridOptions.headerMenu.onCommand(e, args);\n      }\n    });\n    headerMenuPlugin.onBeforeMenuShow.subscribe((e: Event, args: HeaderMenuOnBeforeMenuShowArgs) => {\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onBeforeMenuShow === 'function') {\n        this._gridOptions.headerMenu.onBeforeMenuShow(e, args);\n      }\n    });\n\n    return headerMenuPlugin;\n  }\n\n  /** Create an undo redo buffer used by the Excel like copy */\n  createUndoRedoBuffer() {\n    const commandQueue: any[] = [];\n    let commandCtr = 0;\n\n    this.undoRedoBuffer = {\n      queueAndExecuteCommand: (editCommand: any) => {\n        commandQueue[commandCtr] = editCommand;\n        commandCtr++;\n        editCommand.execute();\n      },\n      undo: () => {\n        if (commandCtr === 0) { return; }\n        commandCtr--;\n        const command = commandQueue[commandCtr];\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\n          command.undo();\n        }\n      },\n      redo: () => {\n        if (commandCtr >= commandQueue.length) { return; }\n        const command = commandQueue[commandCtr];\n        commandCtr++;\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\n          command.execute();\n        }\n      }\n    };\n  }\n\n  /** Hide a column from the grid */\n  hideColumn(column: Column) {\n    if (this._grid && this._grid.getColumns && this._grid.setColumns) {\n      const columnIndex = this._grid.getColumnIndex(column.id);\n      this.visibleColumns = this.removeColumnByIndex(this._grid.getColumns(), columnIndex);\n      this._grid.setColumns(this.visibleColumns);\n    }\n  }\n\n  /** Attach an undo shortcut key hook that will redo/undo the copy buffer */\n  hookUndoShortcutKey() {\n    // undo shortcut\n    $(document).keydown((e) => {\n      if (e.which === 90 && (e.ctrlKey || e.metaKey)) {    // CTRL + (shift) + Z\n        if (e.shiftKey) {\n          this.undoRedoBuffer.redo();\n        } else {\n          this.undoRedoBuffer.undo();\n        }\n      }\n    });\n  }\n\n  /** Dispose of all the controls & plugins */\n  dispose() {\n    this._grid = null;\n    this._dataView = null;\n    this.visibleColumns = [];\n\n    // dispose of each control/plugin if it has a destroy method\n    this.extensionList.forEach((item) => {\n      if (item && item.service && item.service.destroy) {\n        item.service.destroy();\n      }\n    });\n    this.extensionList = [];\n  }\n\n  /** Create Grid Menu with Custom Commands if user has enabled Filters and/or uses a Backend Service (OData, GraphQL) */\n  private addGridMenuCustomCommands() {\n    const backendApi = this._gridOptions.backendServiceApi || null;\n    const gridMenuCustomItems: GridMenuItem[] = [];\n\n    if (this._gridOptions && this._gridOptions.enableFiltering) {\n      // show grid menu: clear all filters\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllFiltersCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllFiltersCommand || 'fa fa-filter text-danger',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_FILTERS') : Constants.TEXT_CLEAR_ALL_FILTERS,\n            disabled: false,\n            command: 'clear-filter',\n            positionOrder: 50\n          }\n        );\n      }\n\n      // show grid menu: toggle filter row\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideToggleFilterCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconToggleFilterCommand || 'fa fa-random',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('TOGGLE_FILTER_ROW') : Constants.TEXT_TOGGLE_FILTER_ROW,\n            disabled: false,\n            command: 'toggle-filter',\n            positionOrder: 52\n          }\n        );\n      }\n\n      // show grid menu: refresh dataset\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideRefreshDatasetCommand && backendApi) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconRefreshDatasetCommand || 'fa fa-refresh',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('REFRESH_DATASET') : Constants.TEXT_REFRESH_DATASET,\n            disabled: false,\n            command: 'refresh-dataset',\n            positionOrder: 54\n          }\n        );\n      }\n    }\n\n    if (this._gridOptions.enableSorting) {\n      // show grid menu: clear all sorting\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllSortingCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllSortingCommand || 'fa fa-unsorted text-danger',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_SORTING') : Constants.TEXT_CLEAR_ALL_SORTING,\n            disabled: false,\n            command: 'clear-sorting',\n            positionOrder: 51\n          }\n        );\n      }\n    }\n\n    // show grid menu: export to file\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportCsvCommand) {\n      gridMenuCustomItems.push(\n        {\n          iconCssClass: this._gridOptions.gridMenu.iconExportCsvCommand || 'fa fa-download',\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_CSV') : Constants.TEXT_EXPORT_IN_CSV_FORMAT,\n          disabled: false,\n          command: 'export-csv',\n          positionOrder: 53\n        }\n      );\n    }\n    // show grid menu: export to text file as tab delimited\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportTextDelimitedCommand) {\n      gridMenuCustomItems.push(\n        {\n          iconCssClass: this._gridOptions.gridMenu.iconExportTextDelimitedCommand || 'fa fa-download',\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_TAB_DELIMITED') : Constants.TEXT_EXPORT_IN_TEXT_FORMAT,\n          disabled: false,\n          command: 'export-text-delimited',\n          positionOrder: 54\n        }\n      );\n    }\n\n    // add the custom \"Commands\" title if there are any commands\n    if (this._gridOptions && this._gridOptions.gridMenu && (gridMenuCustomItems.length > 0 || this._gridOptions.gridMenu.customItems.length > 0)) {\n      this._gridOptions.gridMenu.customTitle = this._gridOptions.gridMenu.customTitle || this.getPickerTitleOutputString('customTitle', 'gridMenu');\n    }\n\n    return gridMenuCustomItems;\n  }\n\n  /**\n   * Create Header Menu with Custom Commands if user has enabled Header Menu\n   * @param options\n   * @param columnDefinitions\n   * @return header menu\n   */\n  private addHeaderMenuCustomCommands(options: GridOption, columnDefinitions: Column[]): HeaderMenu {\n    const headerMenuOptions = options.headerMenu;\n\n    if (columnDefinitions && Array.isArray(columnDefinitions) && options.enableHeaderMenu) {\n      columnDefinitions.forEach((columnDef: Column) => {\n        if (columnDef && !columnDef.excludeFromHeaderMenu) {\n          if (!columnDef.header || !columnDef.header.menu) {\n            columnDef.header = {\n              menu: {\n                items: []\n              }\n            };\n          }\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\n\n          // Sorting Commands\n          if (options.enableSorting && columnDef.sortable && !headerMenuOptions.hideSortCommands) {\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-asc').length === 0) {\n              columnHeaderMenuItems.push({\n                iconCssClass: headerMenuOptions.iconSortAscCommand || 'fa fa-sort-asc',\n                title: options.enableTranslate ? this.translate.instant('SORT_ASCENDING') : Constants.TEXT_SORT_ASCENDING,\n                command: 'sort-asc',\n                positionOrder: 50\n              });\n            }\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-desc').length === 0) {\n              columnHeaderMenuItems.push({\n                iconCssClass: headerMenuOptions.iconSortDescCommand || 'fa fa-sort-desc',\n                title: options.enableTranslate ? this.translate.instant('SORT_DESCENDING') : Constants.TEXT_SORT_DESCENDING,\n                command: 'sort-desc',\n                positionOrder: 51\n              });\n            }\n          }\n\n          // Hide Column Command\n          if (!headerMenuOptions.hideColumnHideCommand && columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'hide').length === 0) {\n            columnHeaderMenuItems.push({\n              iconCssClass: headerMenuOptions.iconColumnHideCommand || 'fa fa-times',\n              title: options.enableTranslate ? this.translate.instant('HIDE_COLUMN') : Constants.TEXT_HIDE_COLUMN,\n              command: 'hide',\n              positionOrder: 52\n            });\n          }\n\n          this.translateItems(columnHeaderMenuItems, 'titleKey', 'title');\n\n          // sort the custom items by their position in the list\n          columnHeaderMenuItems.sort((itemA, itemB) => {\n            if (itemA && itemB && itemA.hasOwnProperty('positionOrder') && itemB.hasOwnProperty('positionOrder')) {\n              return itemA.positionOrder - itemB.positionOrder;\n            }\n            return 0;\n          });\n        }\n      });\n\n    }\n\n    return headerMenuOptions;\n  }\n\n  /** Execute the Header Menu Commands that was triggered by the onCommand subscribe */\n  executeHeaderMenuInternalCommands(e: Event, args: HeaderMenuOnCommandArgs) {\n    if (args && args.command) {\n      switch (args.command) {\n        case 'hide':\n          this.hideColumn(args.column);\n          if (this._gridOptions && this._gridOptions.enableAutoSizeColumns) {\n            this._grid.autosizeColumns();\n          }\n          break;\n        case 'sort-asc':\n        case 'sort-desc':\n          // get previously sorted columns\n          const cols: ColumnSort[] = this.sortService.getPreviousColumnSorts(args.column.id + '');\n\n          // add to the column array, the column sorted by the header menu\n          cols.push({ sortCol: args.column, sortAsc: (args.command === 'sort-asc') });\n          if (this._gridOptions.backendServiceApi) {\n            this.sortService.onBackendSortChanged(e, { multiColumnSort: true, sortCols: cols, grid: this._grid });\n          } else {\n            this.sortService.onLocalSortChanged(this._grid, this._dataView, cols);\n          }\n\n          // update the this.gridObj sortColumns array which will at the same add the visual sort icon(s) on the UI\n          const newSortColumns: ColumnSort[] = cols.map((col) => {\n            return { columnId: col.sortCol.id, sortAsc: col.sortAsc };\n          });\n          this._grid.setSortColumns(newSortColumns); // add sort icon in UI\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /**\n   * Execute the Grid Menu Custom command callback that was triggered by the onCommand subscribe\n   * These are the default internal custom commands\n   * @param event\n   * @param GridMenuItem args\n   */\n  executeGridMenuInternalCustomCommands(e: Event, args: GridMenuItem) {\n    if (args && args.command) {\n      switch (args.command) {\n        case 'clear-filter':\n          this.filterService.clearFilters();\n          this._dataView.refresh();\n          break;\n        case 'clear-sorting':\n          this.sortService.clearSorting();\n          this._dataView.refresh();\n          break;\n        case 'export-csv':\n          this.exportService.exportToFile({\n            delimiter: DelimiterType.comma,\n            filename: 'export',\n            format: FileType.csv,\n            useUtf8WithBom: true\n          });\n          break;\n        case 'export-text-delimited':\n          this.exportService.exportToFile({\n            delimiter: DelimiterType.tab,\n            filename: 'export',\n            format: FileType.txt,\n            useUtf8WithBom: true\n          });\n          break;\n        case 'toggle-filter':\n          this._grid.setHeaderRowVisibility(!this._grid.getOptions().showHeaderRow);\n          break;\n        case 'toggle-toppanel':\n          this._grid.setTopPanelVisibility(!this._grid.getOptions().showTopPanel);\n          break;\n        case 'refresh-dataset':\n          this.refreshBackendDataset();\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /** Refresh the dataset through the Backend Service */\n  refreshBackendDataset(gridOptions?: GridOption) {\n    let query = '';\n\n    // user can pass new set of grid options which will override current ones\n    if (gridOptions) {\n      this._gridOptions = { ...this._gridOptions, ...gridOptions };\n    }\n\n    const backendApi = this._gridOptions.backendServiceApi;\n    if (!backendApi || !backendApi.service || !backendApi.process) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    if (backendApi.service) {\n      query = backendApi.service.buildQuery();\n    }\n\n    if (query && query !== '') {\n      // keep start time & end timestamps & return it after process execution\n      const startTime = new Date();\n\n      if (backendApi.preProcess) {\n        backendApi.preProcess();\n      }\n\n      // the process could be an Observable (like HttpClient) or a Promise\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n      const observableOrPromise = backendApi.process(query);\n\n      castToPromise(observableOrPromise).then((processResult: GraphqlResult | any) => {\n        const endTime = new Date();\n\n        // from the result, call our internal post process to update the Dataset and Pagination info\n        if (processResult && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          if (processResult instanceof Object) {\n            processResult.statistics = {\n              startTime,\n              endTime,\n              executionTime: endTime.valueOf() - startTime.valueOf(),\n              totalItemCount: this._gridOptions && this._gridOptions.pagination && this._gridOptions.pagination.totalItems\n            };\n          }\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  /**\n   * Remove a column from the grid by it's index in the grid\n   * @param array input\n   * @param index\n   */\n  removeColumnByIndex(array: any[], index: number) {\n    return array.filter((el: any, i: number) => {\n      return index !== i;\n    });\n  }\n\n  /** Translate the Column Picker and it's last 2 checkboxes */\n  translateColumnPicker() {\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\n    if (this._gridOptions && this._gridOptions.columnPicker) {\n      this.emptyColumnPickerTitles();\n\n      this._gridOptions.columnPicker.columnTitle = this.getPickerTitleOutputString('columnTitle', 'columnPicker');\n      this._gridOptions.columnPicker.forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'columnPicker');\n      this._gridOptions.columnPicker.syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');\n    }\n\n    // translate all columns (including non-visible)\n    this.translateItems(this.allColumns, 'headerKey', 'name');\n\n    // re-initialize the Column Picker, that will recreate all the list\n    // doing an \"init()\" won't drop any existing command attached\n    if (this.columnPickerControl.init) {\n      this.columnPickerControl.init(this._grid);\n    }\n  }\n\n  /** Translate the Grid Menu titles and column picker */\n  translateGridMenu() {\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\n    // we also need to call the control init so that it takes the new Grid object with latest values\n    if (this._gridOptions && this._gridOptions.gridMenu) {\n      this._gridOptions.gridMenu.customItems = [];\n      this.emptyGridMenuTitles();\n\n      // merge original user grid menu items with internal items\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\n      this._gridOptions.gridMenu.customItems = [...this.userOriginalGridMenu.customItems || [], ...this.addGridMenuCustomCommands()];\n      this.translateItems(this._gridOptions.gridMenu.customItems, 'titleKey', 'title');\n      this.sortItems(this._gridOptions.gridMenu.customItems, 'positionOrder');\n\n      this._gridOptions.gridMenu.columnTitle = this.getPickerTitleOutputString('columnTitle', 'gridMenu');\n      this._gridOptions.gridMenu.forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'gridMenu');\n      this._gridOptions.gridMenu.syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'gridMenu');\n\n      // translate all columns (including non-visible)\n      this.translateItems(this.allColumns, 'headerKey', 'name');\n\n      // re-initialize the Grid Menu, that will recreate all the menus & list\n      // doing an \"init()\" won't drop any existing command attached\n      if (this.gridMenuControl.init) {\n        this.gridMenuControl.init(this._grid);\n      }\n    }\n  }\n\n  /**\n   * Translate the Header Menu titles, we need to loop through all column definition to re-translate them\n   */\n  translateHeaderMenu() {\n    if (this._gridOptions && this._gridOptions.headerMenu) {\n      this.resetHeaderMenuTranslations(this.visibleColumns);\n    }\n  }\n\n  /**\n   * Translate manually the header titles.\n   * We could optionally pass a locale (that will change currently loaded locale), else it will use current locale\n   * @param locale to use\n   * @param new column definitions (optional)\n   */\n  translateColumnHeaders(locale?: boolean | string, newColumnDefinitions?: Column[]) {\n    if (locale) {\n      this.translate.use(locale as string);\n    }\n\n    const columnDefinitions = newColumnDefinitions || this._columnDefinitions;\n\n    this.translateItems(columnDefinitions, 'headerKey', 'name');\n    this.translateItems(this.allColumns, 'headerKey', 'name');\n\n    // re-render the column headers\n    this.renderColumnHeaders(columnDefinitions);\n  }\n\n  /**\n   * Render (or re-render) the column headers from column definitions.\n   * calling setColumns() will trigger a grid re-render\n   */\n  renderColumnHeaders(newColumnDefinitions?: Column[]) {\n    const collection = newColumnDefinitions || this._columnDefinitions;\n    if (Array.isArray(collection) && this._grid && this._grid.setColumns) {\n      this._grid.setColumns(collection);\n    }\n  }\n\n  private emptyColumnPickerTitles() {\n    this._gridOptions.columnPicker.columnTitle = '';\n    this._gridOptions.columnPicker.forceFitTitle = '';\n    this._gridOptions.columnPicker.syncResizeTitle = '';\n  }\n\n  private emptyGridMenuTitles() {\n    this._gridOptions.gridMenu.customTitle = '';\n    this._gridOptions.gridMenu.columnTitle = '';\n    this._gridOptions.gridMenu.forceFitTitle = '';\n    this._gridOptions.gridMenu.syncResizeTitle = '';\n  }\n\n  /**\n   * @return default Grid Menu options\n   */\n  private getDefaultGridMenuOptions(): GridMenu {\n    return {\n      customTitle: undefined,\n      columnTitle: this.getPickerTitleOutputString('columnTitle', 'gridMenu'),\n      forceFitTitle: this.getPickerTitleOutputString('forceFitTitle', 'gridMenu'),\n      syncResizeTitle: this.getPickerTitleOutputString('syncResizeTitle', 'gridMenu'),\n      iconCssClass: 'fa fa-bars',\n      menuWidth: 18,\n      customItems: [],\n      hideClearAllFiltersCommand: false,\n      hideRefreshDatasetCommand: false,\n      hideToggleFilterCommand: false,\n    };\n  }\n\n  /**\n   * @return default Header Menu options\n   */\n  private getDefaultHeaderMenuOptions(): HeaderMenu {\n    return {\n      autoAlignOffset: 12,\n      minWidth: 140,\n      hideColumnHideCommand: false,\n      hideSortCommands: false,\n      title: ''\n    };\n  }\n\n  /**\n   * From a Grid Menu object property name, we will return the correct title output string following this order\n   * 1- if user provided a title, use it as the output title\n   * 2- else if user provided a title key, use it to translate the output title\n   * 3- else if nothing is provided use\n   */\n  private getPickerTitleOutputString(propName: string, pickerName: 'gridMenu' | 'columnPicker') {\n    let output = '';\n    const picker = this._gridOptions && this._gridOptions[pickerName] || {};\n    const enableTranslate = this._gridOptions && this._gridOptions.enableTranslate || false;\n\n    const title = picker && picker[propName];\n    const titleKey = picker && picker[`${propName}Key`];\n\n    if (titleKey) {\n      output = this.translate.instant(titleKey || ' ');\n    } else {\n      switch (propName) {\n        case 'customTitle':\n          output = title || (enableTranslate ? this.translate.instant('COMMANDS') : Constants.TEXT_COMMANDS);\n          break;\n        case 'columnTitle':\n          output = title || (enableTranslate ? this.translate.instant('COLUMNS') : Constants.TEXT_COLUMNS);\n          break;\n        case 'forceFitTitle':\n          output = title || (enableTranslate ? this.translate.instant('FORCE_FIT_COLUMNS') : Constants.TEXT_FORCE_FIT_COLUMNS);\n          break;\n        case 'syncResizeTitle':\n          output = title || (enableTranslate ? this.translate.instant('SYNCHRONOUS_RESIZE') : Constants.TEXT_SYNCHRONOUS_RESIZE);\n          break;\n        default:\n          output = title;\n          break;\n      }\n    }\n    return output;\n  }\n\n  /**\n   * Reset all the Grid Menu options which have text to translate\n   * @param grid menu object\n   */\n  private resetHeaderMenuTranslations(columnDefinitions: Column[]) {\n    columnDefinitions.forEach((columnDef: Column) => {\n      if (columnDef && columnDef.header && columnDef.header && columnDef.header.menu && columnDef.header.menu.items) {\n        if (!columnDef.excludeFromHeaderMenu) {\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\n\n          columnHeaderMenuItems.forEach((item) => {\n            switch (item.command) {\n              case 'sort-asc':\n                item.title = this.translate.instant('SORT_ASCENDING') || Constants.TEXT_SORT_ASCENDING;\n                break;\n              case 'sort-desc':\n                item.title = this.translate.instant('SORT_DESCENDING') || Constants.TEXT_SORT_DESCENDING;\n                break;\n              case 'hide':\n                item.title = this.translate.instant('HIDE_COLUMN') || Constants.TEXT_HIDE_COLUMN;\n                break;\n            }\n\n            // re-translate if there's a \"titleKey\"\n            if (this._gridOptions && this._gridOptions.enableTranslate) {\n              this.translateItems(columnHeaderMenuItems, 'titleKey', 'title');\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Sort items in an array by a property name\n   * @params items array\n   * @param property name to sort with\n   * @return sorted array\n   */\n  private sortItems(items: any[], propertyName: string) {\n    // sort the custom items by their position in the list\n    items.sort((itemA, itemB) => {\n      if (itemA && itemB && itemA.hasOwnProperty(propertyName) && itemB.hasOwnProperty(propertyName)) {\n        return itemA[propertyName] - itemB[propertyName];\n      }\n      return 0;\n    });\n  }\n\n  /** Translate the an array of items from an input key and assign to the output key */\n  private translateItems(items: any[], inputKey: string, outputKey: string) {\n    for (const item of items) {\n      if (item[inputKey]) {\n        item[outputKey] = this.translate.instant(item[inputKey]);\n      }\n    }\n  }\n}\n",
    "/**\r\n * This GraphqlQueryBuilder class is a lib that already exist\r\n * but was causing issues with TypeScript, RequireJS and other bundler/packagers\r\n * and so I rewrote it in pure TypeScript.\r\n *\r\n * The previous lib can be viewed here at this Github\r\n * https://github.com/codemeasandwich/graphql-query-builder\r\n */\r\nexport default class GraphqlQueryBuilder {\r\n  alias: string;\r\n  head: any[] = [];\r\n  body: any;\r\n\r\n  /* Constructor, query/mutator you wish to use, and an alias or filter arguments. */\r\n  constructor(private queryFnName: string, aliasOrFilter?: string | object) {\r\n    if (typeof aliasOrFilter === 'function') {\r\n      this.alias = aliasOrFilter;\r\n    } else if (typeof aliasOrFilter === 'object') {\r\n      this.filter(aliasOrFilter);\r\n    } else if (undefined === aliasOrFilter && 2 === arguments.length) {\r\n      throw new TypeError(`You have passed undefined as Second argument to \"Query\"`);\r\n    } else if (undefined !== aliasOrFilter) {\r\n      throw new TypeError(`Second argument to \"Query\" should be an alias name(String) or filter arguments(Object). was passed ${aliasOrFilter}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The parameters to run the query against.\r\n   * @param filters An object mapping attribute to values\r\n   */\r\n  filter(filters: any) {\r\n    for (const prop of Object.keys(filters)) {\r\n      if (typeof filters[prop] === 'function') {\r\n        continue;\r\n      }\r\n      const val = this.getGraphQLValue(filters[prop]);\r\n      if (val === '{}') {\r\n        continue;\r\n      }\r\n      this.head.push(`${prop}:${val}`);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Outlines the properties you wish to be returned from the query.\r\n   * @param properties representing each attribute you want Returned\r\n   */\r\n  find(...searches: any[]) { // THIS NEED TO BE A \"FUNCTION\" to scope 'arguments'\r\n    if (!searches) {\r\n      throw new TypeError(`find value can not be >>falsy<<`);\r\n    }\r\n    // if its a string.. it may have other values\r\n    // else it sould be an Object or Array of maped values\r\n    const searchKeys = (searches.length === 1 && Array.isArray(searches[0])) ? searches[0] : searches;\r\n    this.body = this.parceFind(searchKeys);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set an alias for this result.\r\n   * @param alias\r\n   */\r\n  setAlias(alias: string) {\r\n    this.alias = alias;\r\n  }\r\n\r\n  /**\r\n   * Return to the formatted query string\r\n   * @return\r\n   */\r\n  toString() {\r\n    if (this.body === undefined) {\r\n      throw new ReferenceError(`return properties are not defined. use the 'find' function to defined them`);\r\n    }\r\n\r\n    return `${(this.alias) ? (this.alias + ':') : ''} ${this.queryFnName} ${(this.head.length > 0) ? '(' + this.head.join(',') + ')' : ''}  { ${this.body} }`;\r\n  }\r\n\r\n  // --\r\n  // PRIVATE FUNCTIONS\r\n  // -----------------\r\n\r\n  private parceFind(_levelA: any[]) {\r\n    const propsA = _levelA.map((currentValue, index) => {\r\n      const itemX = _levelA[index];\r\n\r\n      if (itemX instanceof GraphqlQueryBuilder) {\r\n        return itemX.toString();\r\n      } else if (!Array.isArray(itemX) && typeof itemX === 'object') {\r\n        const propsAA = Object.keys(itemX);\r\n        if (1 !== propsAA.length) {\r\n          throw new RangeError(`Alias objects should only have one value. was passed: ${JSON.stringify(itemX)}`);\r\n        }\r\n        const propS = propsAA[0];\r\n        const item = itemX[propS];\r\n\r\n        if (Array.isArray(item)) {\r\n          return new GraphqlQueryBuilder(propS).find(item);\r\n        }\r\n        return `${propS} : ${item} `;\r\n      } else if (typeof itemX === 'string') {\r\n        return itemX;\r\n      } else {\r\n        throw new RangeError(`cannot handle Find value of ${itemX}`);\r\n      }\r\n    });\r\n\r\n    return propsA.join(',');\r\n  }\r\n\r\n  private getGraphQLValue(value: any) {\r\n    if (typeof value === 'string') {\r\n      value = JSON.stringify(value);\r\n    } else if (Array.isArray(value)) {\r\n      value = value.map(item => {\r\n        return this.getGraphQLValue(item);\r\n      }).join();\r\n      value = `[${value}]`;\r\n    } else if (value instanceof Date) {\r\n      value = JSON.stringify(value);\r\n    } else if (value !== null && typeof value === 'object') {\r\n      value = this.objectToString(value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private objectToString(obj: any) {\r\n    const sourceA = [];\r\n\r\n    for (const prop of Object.keys(obj)) {\r\n      if (typeof obj[prop] === 'function') {\r\n        continue;\r\n      }\r\n      sourceA.push(`${prop}:${this.getGraphQLValue(obj[prop])}`);\r\n    }\r\n    return `{${sourceA.join()}}`;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { mapOperatorType, mapOperatorByFieldType } from './utilities';\r\nimport {\r\n  BackendService,\r\n  Column,\r\n  ColumnFilter,\r\n  ColumnFilters,\r\n  ColumnSort,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  FieldType,\r\n  FilterChangedArgs,\r\n  GraphqlCursorPaginationOption,\r\n  GraphqlDatasetFilter,\r\n  GraphqlFilteringOption,\r\n  GraphqlPaginationOption,\r\n  GraphqlServiceOption,\r\n  GraphqlSortingOption,\r\n  GridOption,\r\n  Pagination,\r\n  PaginationChangedArgs,\r\n  SortChangedArgs,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport QueryBuilder from './graphqlQueryBuilder';\r\n\r\n// timer for keeping track of user typing waits\r\nlet timer: any;\r\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\r\nconst DEFAULT_ITEMS_PER_PAGE = 25;\r\nconst DEFAULT_PAGE_SIZE = 20;\r\n\r\nexport class GraphqlService implements BackendService {\r\n  private _currentFilters: ColumnFilters | CurrentFilter[];\r\n  private _currentPagination: CurrentPagination;\r\n  private _currentSorters: CurrentSorter[];\r\n  private _columnDefinitions: Column[];\r\n  private _grid: any;\r\n  options: GraphqlServiceOption;\r\n  pagination: Pagination | undefined;\r\n  defaultOrderBy: GraphqlSortingOption = { field: 'id', direction: SortDirection.ASC };\r\n  defaultPaginationOptions: GraphqlPaginationOption | GraphqlCursorPaginationOption = {\r\n    first: DEFAULT_ITEMS_PER_PAGE,\r\n    offset: 0\r\n  };\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Build the GraphQL query, since the service include/exclude cursor, the output query will be different.\r\n   * @param serviceOptions GraphqlServiceOption\r\n   */\r\n  buildQuery() {\r\n    if (!this.options || !this.options.datasetName || (!this._columnDefinitions && !this.options.columnDefinitions)) {\r\n      throw new Error('GraphQL Service requires \"datasetName\" & \"columnDefinitions\" properties for it to work');\r\n    }\r\n\r\n    // get the column definitions and exclude some if they were tagged as excluded\r\n    let columnDefinitions = this._columnDefinitions || this.options.columnDefinitions;\r\n    columnDefinitions = columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\r\n\r\n    const queryQb = new QueryBuilder('query');\r\n    const datasetQb = new QueryBuilder(this.options.datasetName);\r\n    const dataQb = (this.options.isWithCursor) ? new QueryBuilder('edges') : new QueryBuilder('nodes');\r\n\r\n    // get all the columnds Ids for the filters to work\r\n    let columnIds: string[] = [];\r\n    if (columnDefinitions && Array.isArray(columnDefinitions)) {\r\n      for (const column of columnDefinitions) {\r\n        columnIds.push(column.field);\r\n\r\n        // if extra \"fields\" are passed, also push them to columnIds\r\n        if (column.fields) {\r\n          columnIds.push(...column.fields);\r\n        }\r\n      }\r\n      // columnIds = columnDefinitions.map((column) => column.field);\r\n    } else {\r\n      columnIds = this.options.columnIds || [];\r\n    }\r\n\r\n    // Slickgrid also requires the \"id\" field to be part of DataView\r\n    // add it to the GraphQL query if it wasn't already part of the list\r\n    if (columnIds.indexOf('id') === -1) {\r\n      columnIds.unshift('id');\r\n    }\r\n\r\n    const filters = this.buildFilterQuery(columnIds);\r\n\r\n    if (this.options.isWithCursor) {\r\n      // ...pageInfo { hasNextPage, endCursor }, edges { cursor, node { _filters_ } }\r\n      const pageInfoQb = new QueryBuilder('pageInfo');\r\n      pageInfoQb.find('hasNextPage', 'endCursor');\r\n      dataQb.find(['cursor', { node: filters }]);\r\n      datasetQb.find(['totalCount', pageInfoQb, dataQb]);\r\n    } else {\r\n      // ...nodes { _filters_ }\r\n      dataQb.find(filters);\r\n      datasetQb.find(['totalCount', dataQb]);\r\n    }\r\n\r\n    // add dataset filters, could be Pagination and SortingFilters and/or FieldFilters\r\n    const datasetFilters: GraphqlDatasetFilter = {\r\n      ...this.options.paginationOptions,\r\n      first: ((this.options.paginationOptions && this.options.paginationOptions.first) ? this.options.paginationOptions.first : ((this.pagination && this.pagination.pageSize) ? this.pagination.pageSize : null)) || this.defaultPaginationOptions.first\r\n    };\r\n\r\n    if (!this.options.isWithCursor) {\r\n      datasetFilters.offset = ((this.options.paginationOptions && this.options.paginationOptions.hasOwnProperty('offset')) ? +this.options.paginationOptions['offset'] : 0);\r\n    }\r\n\r\n    if (this.options.sortingOptions && Array.isArray(this.options.sortingOptions) && this.options.sortingOptions.length > 0) {\r\n      // orderBy: [{ field:x, direction: 'ASC' }]\r\n      datasetFilters.orderBy = this.options.sortingOptions;\r\n    }\r\n    if (this.options.filteringOptions && Array.isArray(this.options.filteringOptions) && this.options.filteringOptions.length > 0) {\r\n      // filterBy: [{ field: date, operator: '>', value: '2000-10-10' }]\r\n      datasetFilters.filterBy = this.options.filteringOptions;\r\n    }\r\n    if (this.options.addLocaleIntoQuery) {\r\n      // first: 20, ... locale: \"en-CA\"\r\n      datasetFilters.locale = this._gridOptions && this._gridOptions.i18n && this._gridOptions.i18n.currentLang || 'en';\r\n    }\r\n    if (this.options.extraQueryArguments) {\r\n      // first: 20, ... userId: 123\r\n      for (const queryArgument of this.options.extraQueryArguments) {\r\n        datasetFilters[queryArgument.field] = queryArgument.value;\r\n      }\r\n    }\r\n\r\n    // query { users(first: 20, orderBy: [], filterBy: [])}\r\n    datasetQb.filter(datasetFilters);\r\n    queryQb.find(datasetQb);\r\n\r\n    const enumSearchProperties = ['direction:', 'field:', 'operator:'];\r\n    return this.trimDoubleQuotesOnEnumField(queryQb.toString(), enumSearchProperties, this.options.keepArgumentFieldDoubleQuotes || false);\r\n  }\r\n\r\n  /**\r\n   * From an input array of strings, we want to build a GraphQL query string.\r\n   * The process has to take the dot notation and parse it into a valid GraphQL query\r\n   * Following this SO answer https://stackoverflow.com/a/47705476/1212166\r\n   *\r\n   * INPUT\r\n   *  ['firstName', 'lastName', 'billing.address.street', 'billing.address.zip']\r\n   * OUTPUT\r\n   * firstName, lastName, billing{address{street, zip}}\r\n   * @param inputArray\r\n   */\r\n  buildFilterQuery(inputArray: string[]) {\r\n\r\n    const set = (o: any = {}, a: any) => {\r\n      const k = a.shift();\r\n      o[k] = a.length ? set(o[k], a) : null;\r\n      return o;\r\n    };\r\n\r\n    const output = inputArray.reduce((o: any, a: string) => set(o, a.split('.')), {});\r\n\r\n    return JSON.stringify(output)\r\n      .replace(/\\\"|\\:|null/g, '')\r\n      .replace(/^\\{/, '')\r\n      .replace(/\\}$/, '');\r\n  }\r\n\r\n  init(serviceOptions?: GraphqlServiceOption, pagination?: Pagination, grid?: any): void {\r\n    this._grid = grid;\r\n    this.options = serviceOptions || {};\r\n    this.pagination = pagination;\r\n\r\n    if (grid && grid.getColumns) {\r\n      this._columnDefinitions = serviceOptions.columnDefinitions || grid.getColumns();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get an initialization of Pagination options\r\n   * @return Pagination Options\r\n   */\r\n  getInitPaginationOptions(): GraphqlDatasetFilter {\r\n    return (this.options.isWithCursor) ? { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE) } : { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE), offset: 0 };\r\n  }\r\n\r\n  /** Get the GraphQL dataset name */\r\n  getDatasetName(): string {\r\n    return this.options.datasetName || '';\r\n  }\r\n\r\n  /** Get the Filters that are currently used by the grid */\r\n  getCurrentFilters(): ColumnFilters | CurrentFilter[] {\r\n    return this._currentFilters;\r\n  }\r\n\r\n  /** Get the Pagination that is currently used by the grid */\r\n  getCurrentPagination(): CurrentPagination {\r\n    return this._currentPagination;\r\n  }\r\n\r\n  /** Get the Sorters that are currently used by the grid */\r\n  getCurrentSorters(): CurrentSorter[] {\r\n    return this._currentSorters;\r\n  }\r\n\r\n  /*\r\n   * Reset the pagination options\r\n   */\r\n  resetPaginationOptions() {\r\n    let paginationOptions;\r\n    if (this.options.isWithCursor) {\r\n      // first, last, after, before\r\n      paginationOptions = {\r\n        after: '',\r\n        before: undefined,\r\n        last: undefined\r\n      } as GraphqlCursorPaginationOption;\r\n    } else {\r\n      // first, last, offset\r\n      paginationOptions = (this.options.paginationOptions || this.getInitPaginationOptions()) as GraphqlPaginationOption;\r\n      paginationOptions.offset = 0;\r\n    }\r\n\r\n    // save current pagination as Page 1 and page size as \"first\" set size\r\n    this._currentPagination = {\r\n      pageNumber: 1,\r\n      pageSize: paginationOptions.first\r\n    };\r\n\r\n    this.updateOptions({ paginationOptions });\r\n  }\r\n\r\n  updateOptions(serviceOptions?: GraphqlServiceOption) {\r\n    this.options = { ...this.options, ...serviceOptions };\r\n  }\r\n\r\n  /*\r\n   * FILTERING\r\n   */\r\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\r\n    const gridOptions: GridOption = this._gridOptions || args.grid.getOptions();\r\n    const backendApi = gridOptions.backendServiceApi;\r\n\r\n    if (backendApi === undefined) {\r\n      throw new Error('Something went wrong in the GraphqlService, \"backendServiceApi\" is not initialized');\r\n    }\r\n\r\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\r\n    let debounceTypingDelay = 0;\r\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\r\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\r\n    }\r\n\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    this._currentFilters = this.castFilterToColumnFilter(args.columnFilters);\r\n\r\n    const promise = new Promise<string>((resolve, reject) => {\r\n      if (!args || !args.grid) {\r\n        throw new Error('Something went wrong when trying create the GraphQL Backend Service, it seems that \"args\" is not populated correctly');\r\n      }\r\n\r\n      // reset Pagination, then build the GraphQL query which we will use in the WebAPI callback\r\n      // wait a minimum user typing inactivity before processing any query\r\n      clearTimeout(timer);\r\n      timer = setTimeout(() => {\r\n        // loop through all columns to inspect filters & set the query\r\n        this.updateFilters(args.columnFilters, false);\r\n\r\n        this.resetPaginationOptions();\r\n        resolve(this.buildQuery());\r\n      }, debounceTypingDelay);\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  /*\r\n   * PAGINATION\r\n   * With cursor, the query can have 4 arguments (first, after, last, before), for example:\r\n   *   users (first:20, after:\"YXJyYXljb25uZWN0aW9uOjM=\") {\r\n   *     totalCount\r\n   *     pageInfo {\r\n   *       hasNextPage\r\n   *       endCursor\r\n   *     }\r\n   *     edges {\r\n   *       cursor\r\n   *       node {\r\n   *         name\r\n   *         gender\r\n   *       }\r\n   *     }\r\n   *   }\r\n   * Without cursor, the query can have 3 arguments (first, last, offset), for example:\r\n   *   users (first:20, offset: 10) {\r\n   *     totalCount\r\n   *     nodes {\r\n   *       name\r\n   *       gender\r\n   *     }\r\n   *   }\r\n   */\r\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\r\n    const pageSize = +(args.pageSize || ((this.pagination) ? this.pagination.pageSize : DEFAULT_PAGE_SIZE));\r\n    this.updatePagination(args.newPage, pageSize);\r\n\r\n    // build the GraphQL query which we will use in the WebAPI callback\r\n    return this.buildQuery();\r\n  }\r\n\r\n  /*\r\n   * SORTING\r\n   * we will use sorting as per a Facebook suggestion on a Github issue (with some small changes)\r\n   * https://github.com/graphql/graphql-relay-js/issues/20#issuecomment-220494222\r\n   */\r\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\r\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\r\n\r\n    // loop through all columns to inspect sorters & set the query\r\n    this.updateSorters(sortColumns);\r\n\r\n    // build the GraphQL query which we will use in the WebAPI callback\r\n    return this.buildQuery();\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect filters & update backend service filteringOptions\r\n   * @param columnFilters\r\n   */\r\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset: boolean) {\r\n    const searchByArray: GraphqlFilteringOption[] = [];\r\n    let searchValue: string | string[];\r\n\r\n    for (const columnId in columnFilters) {\r\n      if (columnFilters.hasOwnProperty(columnId)) {\r\n        const columnFilter = columnFilters[columnId];\r\n\r\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\r\n        let columnDef: Column | undefined;\r\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\r\n          columnDef = this._columnDefinitions.find((column: Column) => column.id === columnFilter.columnId);\r\n        } else {\r\n          columnDef = columnFilter.columnDef;\r\n        }\r\n        if (!columnDef) {\r\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\r\n        }\r\n\r\n        const fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\r\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\r\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\r\n        if (typeof fieldSearchValue === 'undefined') {\r\n          fieldSearchValue = '';\r\n        }\r\n\r\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\r\n          throw new Error(`GraphQL filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {model: Filters.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\r\n        }\r\n\r\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\r\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n        let operator = columnFilter.operator || ((matches) ? matches[1] : '');\r\n        searchValue = (!!matches) ? matches[2] : '';\r\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\r\n\r\n        // no need to query if search value is empty\r\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\r\n          continue;\r\n        }\r\n\r\n        // when having more than 1 search term (we need to create a CSV string for GraphQL \"IN\" or \"NOT IN\" filter search)\r\n        if (searchTerms && searchTerms.length > 1) {\r\n          searchValue = searchTerms.join(',');\r\n        } else if (typeof searchValue === 'string') {\r\n          // escaping the search value\r\n          searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\r\n          if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\r\n            operator = (operator === '*' || operator === '*z') ? 'endsWith' : 'startsWith';\r\n          }\r\n        }\r\n\r\n        // if we didn't find an Operator but we have a Filter Type, we should use default Operator\r\n        // multipleSelect is \"IN\", while singleSelect is \"EQ\", else don't map any operator\r\n        if (!operator && columnDef.filter) {\r\n          operator = columnDef.filter.operator;\r\n        }\r\n\r\n        // if we still don't have an operator find the proper Operator to use by it's field type\r\n        if (!operator) {\r\n          operator = mapOperatorByFieldType(columnDef.type || FieldType.string);\r\n        }\r\n\r\n        searchByArray.push({\r\n          field: fieldName,\r\n          operator: mapOperatorType(operator),\r\n          value: searchValue\r\n        });\r\n      }\r\n    }\r\n\r\n    // update the service options with filters for the buildQuery() to work later\r\n    this.updateOptions({ filteringOptions: searchByArray });\r\n  }\r\n\r\n  /**\r\n   * Update the pagination component with it's new page number and size\r\n   * @param newPage\r\n   * @param pageSize\r\n   */\r\n  updatePagination(newPage: number, pageSize: number) {\r\n    this._currentPagination = {\r\n      pageNumber: newPage,\r\n      pageSize\r\n    };\r\n\r\n    let paginationOptions;\r\n    if (this.options.isWithCursor) {\r\n      paginationOptions = {\r\n        first: pageSize\r\n      };\r\n    } else {\r\n      paginationOptions = {\r\n        first: pageSize,\r\n        offset: (newPage - 1) * pageSize\r\n      };\r\n    }\r\n\r\n    this.updateOptions({ paginationOptions });\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect sorters & update backend service sortingOptions\r\n   * @param columnFilters\r\n   */\r\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\r\n    let currentSorters: CurrentSorter[] = [];\r\n    let graphqlSorters: GraphqlSortingOption[] = [];\r\n\r\n    if (!sortColumns && presetSorters) {\r\n      // make the presets the current sorters, also make sure that all direction are in uppercase for GraphQL\r\n      currentSorters = presetSorters;\r\n      currentSorters.forEach((sorter) => sorter.direction = sorter.direction.toUpperCase() as SortDirectionString);\r\n\r\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\r\n      const tmpSorterArray = currentSorters.map((sorter) => {\r\n        const columnDef = this._columnDefinitions.find((column: Column) => column.id === sorter.columnId);\r\n        if (columnDef) {\r\n          graphqlSorters.push({\r\n            field: (columnDef.queryField || columnDef.queryFieldSorter || columnDef.field || columnDef.id) + '',\r\n            direction: sorter.direction\r\n          });\r\n        }\r\n        return {\r\n          columnId: sorter.columnId,\r\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\r\n        };\r\n      });\r\n      this._grid.setSortColumns(tmpSorterArray);\r\n    } else if (sortColumns && !presetSorters) {\r\n      // build the orderBy array, it could be multisort, example\r\n      // orderBy:[{field: lastName, direction: ASC}, {field: firstName, direction: DESC}]\r\n      if (sortColumns && sortColumns.length === 0) {\r\n        graphqlSorters = new Array(this.defaultOrderBy); // when empty, use the default sort\r\n        currentSorters = new Array({ columnId: this.defaultOrderBy.field, direction: this.defaultOrderBy.direction });\r\n      } else {\r\n        if (sortColumns) {\r\n          for (const column of sortColumns) {\r\n            if (column && column.sortCol) {\r\n              currentSorters.push({\r\n                columnId: column.sortCol.id + '',\r\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n              });\r\n\r\n              graphqlSorters.push({\r\n                field: (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '',\r\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // keep current Sorters and update the service options with the new sorting\r\n    this._currentSorters = currentSorters;\r\n    this.updateOptions({ sortingOptions: graphqlSorters });\r\n  }\r\n\r\n  /**\r\n   * A function which takes an input string and removes double quotes only\r\n   * on certain fields are identified as GraphQL enums (except fields with dot notation)\r\n   * For example let say we identified (\"direction:\", \"sort\") as word which are GraphQL enum fields\r\n   * then the result will be:\r\n   * FROM\r\n   * query { users (orderBy:[{field:\"firstName\", direction:\"ASC\"} }]) }\r\n   * TO\r\n   * query { users (orderBy:[{field: firstName, direction: ASC}})}\r\n   *\r\n   * EXCEPTIONS (fields with dot notation \".\" which are inside a \"field:\")\r\n   * these fields will keep double quotes while everything else will be stripped of double quotes\r\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: \"ASC\"} }\r\n   * TO\r\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: ASC}}\r\n   * @param inputStr input string\r\n   * @param enumSearchWords array of enum words to filter\r\n   * @returns outputStr output string\r\n   */\r\n  trimDoubleQuotesOnEnumField(inputStr: string, enumSearchWords: string[], keepArgumentFieldDoubleQuotes: boolean) {\r\n    const patternWordInQuotes = `\\s?((field:\\s*)?\".*?\")`;\r\n    let patternRegex = enumSearchWords.join(patternWordInQuotes + '|');\r\n    patternRegex += patternWordInQuotes; // the last one should also have the pattern but without the pipe \"|\"\r\n    // example with (field: & direction:):  /field:s?(\".*?\")|direction:s?(\".*?\")/\r\n    const reg = new RegExp(patternRegex, 'g');\r\n\r\n    return inputStr.replace(reg, (group1, group2, group3) => {\r\n      // remove double quotes except when the string starts with a \"field:\"\r\n      let removeDoubleQuotes = true;\r\n      if (group1.startsWith('field:') && keepArgumentFieldDoubleQuotes) {\r\n        removeDoubleQuotes = false;\r\n      }\r\n      const rep = removeDoubleQuotes ? group1.replace(/\"/g, '') : group1;\r\n      return rep;\r\n    });\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // -------------------\r\n  /**\r\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\r\n   * @param columnFilters\r\n   */\r\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    const filtersArray: ColumnFilter[] = (typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters;\r\n\r\n    return filtersArray.map((filter) => {\r\n      const columnDef = filter.columnDef;\r\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\r\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\r\n      if (filter.operator) {\r\n        tmpFilter.operator = filter.operator;\r\n      }\r\n      if (Array.isArray(filter.searchTerms)) {\r\n        tmpFilter.searchTerms = filter.searchTerms;\r\n      }\r\n      return tmpFilter;\r\n    });\r\n  }\r\n}\r\n",
    "declare interface StringConstructor {\r\n  allTitleCase(inputStr: string): string;\r\n  format(inputStr: string, args: any): string;\r\n  padZero(length: number): string;\r\n  trim(inputStr: string): string;\r\n  titleCase(inputStr: string): string;\r\n}\r\n\r\n\r\nString.format = function(format: string, args): string {\r\n  // const args = (Array.isArray(arguments[1])) ? arguments[1] : Array.prototype.slice.call(arguments, 1);\r\n\r\n  return format.replace(/{(\\d+)}/g, function (match, number) {\r\n    return (typeof args[number] !== 'undefined') ? args[number] : match;\r\n  });\r\n};\r\n\r\nString.padZero = function (this: string, length: number) {\r\n  let s = this;\r\n  while (s.length < length) {\r\n    s = '0' + s;\r\n  }\r\n  return s;\r\n};\r\n\r\n/**\r\n * Trim any extra white space from the string\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.trim = function(inputStr: string): string {\r\n  return inputStr ? inputStr.replace(/\\s+/g, ' ') : inputStr;\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.allTitleCase = function(inputStr: string): string {\r\n  return inputStr.replace(/\\w\\S*/g, function(outputStr) {\r\n     return outputStr.charAt(0).toUpperCase() + outputStr.substr(1).toLowerCase();\r\n  });\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n*/\r\nString.titleCase = function(inputStr: string): string {\r\n  return inputStr.charAt(0).toUpperCase() + inputStr.slice(1);\r\n};\r\n",
    "import './global-utilities';\r\nimport { CaseType, OdataOption } from './../models/index';\r\n\r\nexport class OdataService {\r\n  _columnFilters: any;\r\n  _defaultSortBy: string;\r\n  _odataOptions: OdataOption;\r\n\r\n  constructor() {\r\n    this._odataOptions = {\r\n      filterQueue: [],\r\n      orderBy: ''\r\n    };\r\n    this._defaultSortBy = '';\r\n    this._columnFilters = {};\r\n  }\r\n\r\n  /*\r\n    * Build the OData query string from all the options provided\r\n    * @return string OData query\r\n    */\r\n  buildQuery(): string {\r\n    this._odataOptions.filterQueue = [];\r\n    const queryTmpArray = [];\r\n\r\n    if (this._odataOptions.top) {\r\n      queryTmpArray.push(`$top=${this._odataOptions.top}`);\r\n    }\r\n    if (this._odataOptions.skip) {\r\n      queryTmpArray.push(`$skip=${this._odataOptions.skip}`);\r\n    }\r\n    if (this._odataOptions.orderBy) {\r\n      let argument = '';\r\n      if (Array.isArray(this._odataOptions.orderBy)) {\r\n        argument = this._odataOptions.orderBy.join(','); // csv, that will form a query example like: $orderby=RoleName asc, Id desc\r\n      } else {\r\n        argument = this._odataOptions.orderBy;\r\n      }\r\n      queryTmpArray.push(`$orderby=${argument}`);\r\n    }\r\n    if (this._odataOptions.filterBy || this._odataOptions.filter) {\r\n      if (this._odataOptions.filter) {\r\n        this._odataOptions.filterQueue = [];\r\n        let filterStr = this._odataOptions.filter;\r\n        if (Array.isArray(this._odataOptions.filter)) {\r\n          filterStr = this._odataOptions.filter.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n        }\r\n        this._odataOptions.filterQueue.push(`(${filterStr})`);\r\n      }\r\n      // filterBy are passed manually by the user, however we will only add it if the column wasn't yet filtered\r\n      if (!!this._odataOptions.filterBy && !!this._odataOptions.filterBy.fieldName && !this._columnFilters[this._odataOptions.filterBy.fieldName.toLowerCase()]) {\r\n        if (this._odataOptions.filterBy.searchTerm !== '') {\r\n          this.saveColumnFilter(this._odataOptions.filterBy.fieldName.toLowerCase(), this._odataOptions.filterBy.searchTerm, this._odataOptions.filterBy.searchTerms);\r\n          this.updateFilterFromListTerms(this._odataOptions.filterBy);\r\n        }\r\n      }\r\n    }\r\n    if (this._odataOptions.filterQueue.length > 0) {\r\n      const query = this._odataOptions.filterQueue.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n      this._odataOptions.filter = query; // overwrite with\r\n      queryTmpArray.push(`$filter=${query}`);\r\n    }\r\n\r\n    // join all the odata functions by a '&'\r\n    return queryTmpArray.join('&');\r\n  }\r\n\r\n  getFilterByColumn(columnName: string): string {\r\n    return (!!this._columnFilters[columnName]) ? this._columnFilters[columnName] : null;\r\n  }\r\n\r\n  getFilterCount(): number {\r\n    return (this._odataOptions.filterQueue) ? this._odataOptions.filterQueue.length : 0;\r\n  }\r\n\r\n  get columnFilters(): any[] {\r\n    return this._columnFilters;\r\n  }\r\n\r\n  get options(): OdataOption {\r\n    return this._odataOptions;\r\n  }\r\n\r\n  set options(options: OdataOption) {\r\n    this._odataOptions = options;\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string) {\r\n    delete this._columnFilters[fieldName];\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: any, searchTerms?: any[]) {\r\n    this._columnFilters[fieldName] = {\r\n      search: searchTerms,\r\n      value\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update the filter by a list of terms usually passed manually by the user as default filters\r\n   * @param filterOptions\r\n   * @returns\r\n   */\r\n  updateFilterFromListTerms(filterOptions: any) {\r\n    // build the filter query\r\n    if (Array.isArray(filterOptions)) {\r\n      filterOptions.forEach((filterOptionObject) => {\r\n        this.updateFilterFromTerm(filterOptionObject);\r\n      });\r\n    } else {\r\n      this.updateFilterFromTerm(filterOptions);\r\n    }\r\n  }\r\n\r\n  updateFilterFromTerm(filterOptions: any) {\r\n    let searchBy = '';\r\n    const tmpSearchByArray = [];\r\n    const fieldName = filterOptions.fieldName;\r\n    const fieldSearchTerms = filterOptions.searchTerms;\r\n    const operator = filterOptions.operator;\r\n\r\n    // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n    if (!!fieldSearchTerms && fieldSearchTerms.length > 0) {\r\n      const tmpSearchTerms = [];\r\n\r\n      if (operator === 'IN') {\r\n        // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n        for (let j = 0, lnj = fieldSearchTerms.length; j < lnj; j++) {\r\n          tmpSearchTerms.push(`${fieldName} eq '${fieldSearchTerms[j]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' or ');\r\n        searchBy = `$(${searchBy})`;\r\n      } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n        // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n        for (let k = 0, lnk = fieldSearchTerms.length; k < lnk; k++) {\r\n          tmpSearchTerms.push(`${fieldName} ne '${fieldSearchTerms[k]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' and ');\r\n        searchBy = `$(${searchBy})`;\r\n      }\r\n    }\r\n\r\n    // push to our temp array and also trim white spaces\r\n    tmpSearchByArray.push(String.trim(searchBy));\r\n\r\n    // add to the filter queue only if it doesn't exist in the queue\r\n    const filter = (tmpSearchByArray.length > 0) ? tmpSearchByArray.join(' and ') : '';\r\n    if (this._odataOptions.filterQueue && this._odataOptions.filterQueue.indexOf(filter) === -1) {\r\n      this._odataOptions.filterQueue.push(filter);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change any OData options that will be used to build the query\r\n   * @param object options\r\n   */\r\n  updateOptions(options: OdataOption) {\r\n    for (const property of Object.keys(options)) {\r\n      if (options.hasOwnProperty(property)) {\r\n        this._odataOptions[property] = options[property]; // replace of the property\r\n      }\r\n\r\n      // we need to keep the defaultSortBy for references whenever the user removes his Sorting\r\n      // then we would revert to the defaultSortBy and the only way is to keep a hard copy here\r\n      if (property === 'orderBy' || property === 'sortBy') {\r\n        let sortBy = options[property];\r\n\r\n        // make sure first char of each orderBy field is capitalize\r\n        if (this._odataOptions.caseType === CaseType.pascalCase) {\r\n          if (Array.isArray(sortBy)) {\r\n            sortBy.forEach((field, index, inputArray) => {\r\n              inputArray[index] = String.titleCase(field);\r\n            });\r\n          } else {\r\n            sortBy = String.titleCase(options[property]);\r\n          }\r\n        }\r\n        this._odataOptions.orderBy = sortBy;\r\n        this._defaultSortBy = sortBy;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
    "import './global-utilities';\r\nimport { parseUtcDate } from './utilities';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  BackendService,\r\n  CaseType,\r\n  Column,\r\n  ColumnFilter,\r\n  ColumnFilters,\r\n  ColumnSort,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  FilterChangedArgs,\r\n  FieldType,\r\n  GridOption,\r\n  OdataOption,\r\n  Pagination,\r\n  PaginationChangedArgs,\r\n  SearchTerm,\r\n  SortChangedArgs,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport { OdataService } from './odata.service';\r\n\r\nlet timer: any;\r\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\r\nconst DEFAULT_ITEMS_PER_PAGE = 25;\r\nconst DEFAULT_PAGE_SIZE = 20;\r\n\r\n@Injectable()\r\nexport class GridOdataService implements BackendService {\r\n  private _currentFilters: CurrentFilter[];\r\n  private _currentPagination: CurrentPagination;\r\n  private _currentSorters: CurrentSorter[];\r\n  private _columnDefinitions: Column[];\r\n  private _grid: any;\r\n  odataService: OdataService;\r\n  options: OdataOption;\r\n  pagination: Pagination | undefined;\r\n  defaultOptions: OdataOption = {\r\n    top: DEFAULT_ITEMS_PER_PAGE,\r\n    orderBy: '',\r\n    caseType: CaseType.pascalCase\r\n  };\r\n\r\n  constructor() {\r\n    this.odataService = new OdataService();\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  buildQuery(): string {\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  init(options: OdataOption, pagination?: Pagination, grid?: any): void {\r\n    this._grid = grid;\r\n    const mergedOptions = { ...this.defaultOptions, ...options };\r\n    if (pagination && pagination.pageSize) {\r\n      mergedOptions.top = pagination.pageSize;\r\n    }\r\n    this.odataService.options = { ...mergedOptions, top: mergedOptions.top || this.defaultOptions.top };\r\n    this.options = this.odataService.options;\r\n    this.pagination = pagination;\r\n\r\n    // save current pagination as Page 1 and page size as \"top\"\r\n    this._currentPagination = {\r\n      pageNumber: 1,\r\n      pageSize: this.odataService.options.top || this.defaultOptions.top\r\n    };\r\n\r\n    if (grid && grid.getColumns) {\r\n      this._columnDefinitions = (options && options.columnDefinitions) || grid.getColumns();\r\n      this._columnDefinitions = this._columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\r\n    }\r\n  }\r\n\r\n  updateOptions(serviceOptions?: OdataOption) {\r\n    this.options = { ...this.options, ...serviceOptions };\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string): void {\r\n    this.odataService.removeColumnFilter(fieldName);\r\n  }\r\n\r\n  /** Get the Filters that are currently used by the grid */\r\n  getCurrentFilters(): CurrentFilter[] {\r\n    return this._currentFilters;\r\n  }\r\n\r\n  /** Get the Pagination that is currently used by the grid */\r\n  getCurrentPagination(): CurrentPagination {\r\n    return this._currentPagination;\r\n  }\r\n\r\n  /** Get the Sorters that are currently used by the grid */\r\n  getCurrentSorters(): CurrentSorter[] {\r\n    return this._currentSorters;\r\n  }\r\n\r\n  /*\r\n   * Reset the pagination options\r\n   */\r\n  resetPaginationOptions() {\r\n    this.odataService.updateOptions({\r\n      skip: 0\r\n    });\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: string, terms?: any[]) {\r\n    this.odataService.saveColumnFilter(fieldName, value, terms);\r\n  }\r\n\r\n  /*\r\n   * FILTERING\r\n   */\r\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\r\n    const serviceOptions: GridOption = args.grid.getOptions();\r\n    const backendApi = serviceOptions.backendServiceApi;\r\n\r\n    if (backendApi === undefined) {\r\n      throw new Error('Something went wrong in the GridOdataService, \"backendServiceApi\" is not initialized');\r\n    }\r\n\r\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\r\n    let debounceTypingDelay = 0;\r\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\r\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\r\n    }\r\n\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    this._currentFilters = this.castFilterToColumnFilter(args.columnFilters);\r\n\r\n    const promise = new Promise<string>((resolve, reject) => {\r\n      // reset Pagination, then build the OData query which we will use in the WebAPI callback\r\n      // wait a minimum user typing inactivity before processing any query\r\n      clearTimeout(timer);\r\n      timer = setTimeout(() => {\r\n        // loop through all columns to inspect filters & set the query\r\n        this.updateFilters(args.columnFilters);\r\n\r\n        this.resetPaginationOptions();\r\n        resolve(this.odataService.buildQuery());\r\n      }, debounceTypingDelay);\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  /*\r\n   * PAGINATION\r\n   */\r\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\r\n    const pageSize = +(args.pageSize || DEFAULT_PAGE_SIZE);\r\n    this.updatePagination(args.newPage, pageSize);\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  /*\r\n   * SORTING\r\n   */\r\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\r\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\r\n\r\n    // loop through all columns to inspect sorters & set the query\r\n    this.updateSorters(sortColumns);\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect filters & update backend service filteringOptions\r\n   * @param columnFilters\r\n   */\r\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset?: boolean) {\r\n    let searchBy = '';\r\n    const searchByArray: string[] = [];\r\n\r\n    // loop through all columns to inspect filters\r\n    for (const columnId in columnFilters) {\r\n      if (columnFilters.hasOwnProperty(columnId)) {\r\n        const columnFilter = columnFilters[columnId];\r\n\r\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\r\n        let columnDef: Column | undefined;\r\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\r\n          columnDef = this._columnDefinitions.find((column: Column) => {\r\n            return column.id === columnFilter.columnId;\r\n          });\r\n        } else {\r\n          columnDef = columnFilter.columnDef;\r\n        }\r\n        if (!columnDef) {\r\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\r\n        }\r\n\r\n        let fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\r\n        const fieldType = columnDef.type || 'string';\r\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\r\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\r\n        if (typeof fieldSearchValue === 'undefined') {\r\n          fieldSearchValue = '';\r\n        }\r\n\r\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\r\n          throw new Error(`ODdata filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {model: Filters.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\r\n        }\r\n\r\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\r\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n        const operator = columnFilter.operator || ((matches) ? matches[1] : '');\r\n        let searchValue = (!!matches) ? matches[2] : '';\r\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\r\n        const bypassOdataQuery = columnFilter.bypassBackendQuery || false;\r\n\r\n        // no need to query if search value is empty\r\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\r\n          this.removeColumnFilter(fieldName);\r\n          continue;\r\n        }\r\n\r\n        // escaping the search value\r\n        searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\r\n        searchValue = encodeURIComponent(searchValue); // encode URI of the final search value\r\n\r\n        // extra query arguments\r\n        if (bypassOdataQuery) {\r\n          // push to our temp array and also trim white spaces\r\n          if (fieldName) {\r\n            this.saveColumnFilter(fieldName, fieldSearchValue, searchTerms);\r\n          }\r\n        } else {\r\n          searchBy = '';\r\n\r\n          // titleCase the fieldName so that it matches the WebApi names\r\n          if (this.odataService.options.caseType === CaseType.pascalCase) {\r\n            fieldName = String.titleCase(fieldName || '');\r\n          }\r\n\r\n          // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n          if (searchTerms && searchTerms.length > 1) {\r\n            const tmpSearchTerms = [];\r\n\r\n            if (operator === 'IN') {\r\n              // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n              for (let j = 0, lnj = searchTerms.length; j < lnj; j++) {\r\n                tmpSearchTerms.push(`${fieldName} eq '${searchTerms[j]}'`);\r\n              }\r\n              searchBy = tmpSearchTerms.join(' or ');\r\n              searchBy = `(${searchBy})`;\r\n            } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n              // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n              for (let k = 0, lnk = searchTerms.length; k < lnk; k++) {\r\n                tmpSearchTerms.push(`${fieldName} ne '${searchTerms[k]}'`);\r\n              }\r\n              searchBy = tmpSearchTerms.join(' and ');\r\n              searchBy = `(${searchBy})`;\r\n            }\r\n          } else if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar !== '') {\r\n            // first/last character is a '*' will be a startsWith or endsWith\r\n            searchBy = (operator === '*' || operator === '*z')\r\n              ? `endswith(${fieldName}, '${searchValue}')`\r\n              : `startswith(${fieldName}, '${searchValue}')`;\r\n          } else if (fieldType === FieldType.date) {\r\n            // date field needs to be UTC and within DateTime function\r\n            const dateFormatted = parseUtcDate(searchValue, true);\r\n            if (dateFormatted) {\r\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} DateTime'${dateFormatted}'`;\r\n            }\r\n          } else if (fieldType === FieldType.string) {\r\n            // string field needs to be in single quotes\r\n            if (operator === '') {\r\n              searchBy = `substringof('${searchValue}', ${fieldName})`;\r\n            } else {\r\n              // searchBy = `substringof('${searchValue}', ${fieldNameCased}) ${this.mapOdataOperator(operator)} true`;\r\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} '${searchValue}'`;\r\n            }\r\n          } else {\r\n            // any other field type (or undefined type)\r\n            searchValue = fieldType === FieldType.number ? searchValue : `'${searchValue}'`;\r\n            searchBy = `${fieldName} ${this.mapOdataOperator(operator)} ${searchValue}`;\r\n          }\r\n\r\n          // push to our temp array and also trim white spaces\r\n          if (searchBy !== '') {\r\n            searchByArray.push(String.trim(searchBy));\r\n            this.saveColumnFilter(fieldName || '', fieldSearchValue, searchTerms);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // update the service options with filters for the buildQuery() to work later\r\n    this.odataService.updateOptions({\r\n      filter: (searchByArray.length > 0) ? searchByArray.join(' and ') : '',\r\n      skip: undefined\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the pagination component with it's new page number and size\r\n   * @param newPage\r\n   * @param pageSize\r\n   */\r\n  updatePagination(newPage: number, pageSize: number) {\r\n    this._currentPagination = {\r\n      pageNumber: newPage,\r\n      pageSize\r\n    };\r\n\r\n    this.odataService.updateOptions({\r\n      top: pageSize,\r\n      skip: (newPage - 1) * pageSize\r\n    });\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect sorters & update backend service orderBy\r\n   * @param columnFilters\r\n   */\r\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\r\n    let sortByArray: any[] = [];\r\n    const sorterArray: CurrentSorter[] = [];\r\n\r\n    if (!sortColumns && presetSorters) {\r\n      // make the presets the current sorters, also make sure that all direction are in lowercase for OData\r\n      sortByArray = presetSorters;\r\n      sortByArray.forEach((sorter) => sorter.direction = sorter.direction.toLowerCase() as SortDirectionString);\r\n\r\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\r\n      const tmpSorterArray = sortByArray.map((sorter) => {\r\n        sorterArray.push({\r\n          columnId: sorter.columnId + '',\r\n          direction: sorter.direction\r\n        });\r\n        return {\r\n          columnId: sorter.columnId,\r\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\r\n        };\r\n      });\r\n      this._grid.setSortColumns(tmpSorterArray);\r\n    } else if (sortColumns && !presetSorters) {\r\n      // build the SortBy string, it could be multisort, example: customerNo asc, purchaserName desc\r\n      if (sortColumns && sortColumns.length === 0) {\r\n        sortByArray = new Array(this.defaultOptions.orderBy); // when empty, use the default sort\r\n      } else {\r\n        if (sortColumns) {\r\n          for (const column of sortColumns) {\r\n            if (column.sortCol) {\r\n              let fieldName = (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '';\r\n              let columnFieldName = (column.sortCol.field || column.sortCol.id) + '';\r\n              if (this.odataService.options.caseType === CaseType.pascalCase) {\r\n                fieldName = String.titleCase(fieldName);\r\n                columnFieldName = String.titleCase(columnFieldName);\r\n              }\r\n\r\n              sorterArray.push({\r\n                columnId: columnFieldName,\r\n                direction: column.sortAsc ? 'asc' : 'desc'\r\n              });\r\n            }\r\n          }\r\n          sortByArray = sorterArray;\r\n        }\r\n      }\r\n    }\r\n\r\n    // transform the sortby array into a CSV string for OData\r\n    sortByArray = sortByArray as CurrentSorter[];\r\n    const csvString = sortByArray.map((sorter) => `${sorter.columnId} ${sorter.direction.toLowerCase()}`).join(',');\r\n    this.odataService.updateOptions({\r\n      orderBy: (this.odataService.options.caseType === CaseType.pascalCase) ? String.titleCase(csvString) : csvString\r\n    });\r\n\r\n    // keep current Sorters and update the service options with the new sorting\r\n    this._currentSorters = sortByArray as CurrentSorter[];\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // -------------------\r\n  /**\r\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\r\n   * @param columnFilters\r\n   */\r\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    const filtersArray: ColumnFilter[] = ((typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters) as CurrentFilter[];\r\n\r\n    return filtersArray.map((filter) => {\r\n      const columnDef = filter.columnDef;\r\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\r\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\r\n      if (filter.operator) {\r\n        tmpFilter.operator = filter.operator;\r\n      }\r\n      if (Array.isArray(filter.searchTerms)) {\r\n        tmpFilter.searchTerms = filter.searchTerms;\r\n      }\r\n      return tmpFilter;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Mapper for mathematical operators (ex.: <= is \"le\", > is \"gt\")\r\n   * @param string operator\r\n   * @returns string map\r\n   */\r\n  private mapOdataOperator(operator: string) {\r\n    let map = '';\r\n    switch (operator) {\r\n      case '<':\r\n        map = 'lt';\r\n        break;\r\n      case '<=':\r\n        map = 'le';\r\n        break;\r\n      case '>':\r\n        map = 'gt';\r\n        break;\r\n      case '>=':\r\n        map = 'ge';\r\n        break;\r\n      case '<>':\r\n      case '!=':\r\n        map = 'ne';\r\n        break;\r\n      case '=':\r\n      case '==':\r\n      default:\r\n        map = 'eq';\r\n        break;\r\n    }\r\n\r\n    return map;\r\n  }\r\n}\r\n",
    "import { OnEventArgs, CellArgs, GridOption } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GridEventService {\n  private _eventHandler: any = new Slick.EventHandler();\n\n  /* OnCellChange Event */\n  attachOnCellChange(grid: any, dataView: any) {\n    // subscribe to this Slickgrid event of onCellChange\n    this._eventHandler.subscribe(grid.onCellChange, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellChange property (a callback function), then run it\n      if (typeof column.onCellChange === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onCellChange\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellChanges.... function\n        column.onCellChange(e, returnedArgs);\n      }\n    });\n  }\n  /* OnClick Event */\n  attachOnClick(grid: any, dataView: any) {\n    this._eventHandler.subscribe(grid.onClick, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellClick property (a callback function), then run it\n      if (typeof column.onCellClick === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onClick\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellClick.... function\n        column.onCellClick(e, returnedArgs);\n      }\n    });\n  }\n\n  dispose() {\n    this._eventHandler.unsubscribeAll();\n  }\n}\n",
    "import {\n  Column,\n  CurrentColumn,\n  CurrentFilter,\n  CurrentPagination,\n  CurrentSorter,\n  GridOption,\n  GridState,\n  GridStateChange,\n  GridStateType\n} from './../models/index';\nimport { ControlAndPluginService, FilterService, SortService } from './../services/index';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\n\n// using external non-typed js libraries\ndeclare var $: any;\ndeclare var Slick: any;\n\nexport class GridStateService {\n  private _eventHandler = new Slick.EventHandler();\n  private _columns: Column[] = [];\n  private _currentColumns: CurrentColumn[] = [];\n  private _grid: any;\n  private controlAndPluginService: ControlAndPluginService;\n  private filterService: FilterService;\n  private sortService: SortService;\n  private subscriptions: Subscription[] = [];\n  onGridStateChanged = new Subject<GridStateChange>();\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Export Service\n   * @param grid\n   * @param filterService\n   * @param sortService\n   * @param dataView\n   */\n  init(grid: any, controlAndPluginService: ControlAndPluginService, filterService: FilterService, sortService: SortService): void {\n    this._grid = grid;\n    this.controlAndPluginService = controlAndPluginService;\n    this.filterService = filterService;\n    this.sortService = sortService;\n\n    this.subscribeToAllGridChanges(grid);\n  }\n\n  /** Dispose of all the SlickGrid & Aurelia subscriptions */\n  dispose() {\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n\n    // also unsubscribe all Aurelia Subscriptions\n    this.subscriptions.forEach((subscription: Subscription) => {\n      if (subscription && subscription.unsubscribe) {\n        subscription.unsubscribe();\n      }\n    });\n    this.subscriptions = [];\n  }\n\n  /**\n   * Get the current grid state (filters/sorters/pagination)\n   * @return grid state\n   */\n  getCurrentGridState(): GridState {\n    const gridState: GridState = {\n      columns: this.getCurrentColumns(),\n      filters: this.getCurrentFilters(),\n      sorters: this.getCurrentSorters()\n    };\n\n    const currentPagination = this.getCurrentPagination();\n    if (currentPagination) {\n      gridState.pagination = currentPagination;\n    }\n    return gridState;\n  }\n\n  /**\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\n   * @return current columns\n   */\n  getColumns(): Column[] {\n    return this._columns || this._grid.getColumns();\n  }\n\n  /**\n   * From an array of Grid Column Definitions, get the associated Current Columns\n   * @param gridColumns\n   */\n  getAssociatedCurrentColumns(gridColumns: Column[]): CurrentColumn[] {\n    const currentColumns: CurrentColumn[] = [];\n\n    if (gridColumns && Array.isArray(gridColumns)) {\n      gridColumns.forEach((column: Column, index: number) => {\n        if (column && column.id) {\n          currentColumns.push({\n            columnId: column.id as string,\n            cssClass: column.cssClass || '',\n            headerCssClass: column.headerCssClass || '',\n            width: column.width || 0\n          });\n        }\n      });\n    }\n    this._currentColumns = currentColumns;\n    return currentColumns;\n  }\n\n  /**\n   * From an array of Current Columns, get the associated Grid Column Definitions\n   * @param grid\n   * @param currentColumns\n   */\n  getAssociatedGridColumns(grid: any, currentColumns: CurrentColumn[]): Column[] {\n    const columns: Column[] = [];\n    const gridColumns: Column[] = grid.getColumns();\n\n    if (currentColumns && Array.isArray(currentColumns)) {\n      currentColumns.forEach((currentColumn: CurrentColumn, index: number) => {\n        const gridColumn: Column = gridColumns.find((c: Column) => c.id === currentColumn.columnId);\n        if (gridColumn && gridColumn.id) {\n          columns.push({\n            ...gridColumn,\n            cssClass: currentColumn.cssClass,\n            headerCssClass: currentColumn.headerCssClass,\n            width: currentColumn.width\n          });\n        }\n      });\n    }\n    this._columns = columns;\n    return columns;\n  }\n\n  /**\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\n   * @return current columns\n   */\n  getCurrentColumns(): CurrentColumn[] {\n    let currentColumns: CurrentColumn[] = [];\n    if (this._currentColumns && Array.isArray(this._currentColumns) && this._currentColumns.length > 0) {\n      currentColumns = this._currentColumns;\n    } else {\n      currentColumns = this.getAssociatedCurrentColumns(this._grid.getColumns());\n    }\n\n    return currentColumns;\n  }\n\n  /**\n   * Get the Filters (and their state, columnId, searchTerm(s)) that are currently applied in the grid\n   * @return current filters\n   */\n  getCurrentFilters(): CurrentFilter[] | null {\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentFilters) {\n        return backendService.getCurrentFilters() as CurrentFilter[];\n      }\n    } else if (this.filterService && this.filterService.getCurrentLocalFilters) {\n      return this.filterService.getCurrentLocalFilters();\n    }\n    return null;\n  }\n\n  /**\n   * Get current Pagination (and it's state, pageNumber, pageSize) that are currently applied in the grid\n   * @return current pagination state\n   */\n  getCurrentPagination(): CurrentPagination | null {\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentPagination) {\n        return backendService.getCurrentPagination();\n      }\n    } else {\n      // TODO implement this whenever local pagination gets implemented\n    }\n    return null;\n  }\n\n  /**\n   * Get the current Sorters (and their state, columnId, direction) that are currently applied in the grid\n   * @return current sorters\n   */\n  getCurrentSorters(): CurrentSorter[] | null {\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentSorters) {\n        return backendService.getCurrentSorters() as CurrentSorter[];\n      }\n    } else if (this.sortService && this.sortService.getCurrentLocalSorters) {\n      return this.sortService.getCurrentLocalSorters();\n    }\n    return null;\n  }\n\n  /**\n   * Hook a SlickGrid Extension Event to a Grid State change event\n   * @param extension name\n   * @param grid\n   */\n  hookExtensionEventToGridStateChange(extensionName: string, eventName: string) {\n    const extension = this.controlAndPluginService && this.controlAndPluginService.getExtensionByName(extensionName);\n\n    if (extension && extension.service && extension.service[eventName] && extension.service[eventName].subscribe) {\n      this._eventHandler.subscribe(extension.service[eventName], (e: Event, args: any) => {\n        const columns: Column[] = args && args.columns;\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\n      });\n    }\n  }\n\n  /**\n   * Hook a Grid Event to a Grid State change event\n   * @param event name\n   * @param grid\n   */\n  hookSlickGridEventToGridStateChange(eventName: string, grid: any) {\n    if (grid && grid[eventName] && grid[eventName].subscribe) {\n      this._eventHandler.subscribe(grid[eventName], (e: Event, args: any) => {\n        const columns: Column[] = grid.getColumns();\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\n      });\n    }\n  }\n\n  resetColumns(columnDefinitions?: Column[]) {\n    const columns: Column[] = columnDefinitions || this._columns;\n    const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\n    this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\n  }\n\n  /** if we use Row Selection or the Checkbox Selector, we need to reset any selection */\n  resetRowSelection() {\n    if (this._gridOptions.enableRowSelection || this._gridOptions.enableCheckboxSelector) {\n      this._grid.setSelectedRows([]);\n    }\n  }\n\n  /**\n   * Subscribe to all necessary SlickGrid or Service Events that deals with a Grid change,\n   * when triggered, we will publish a Grid State Event with current Grid State\n   */\n  subscribeToAllGridChanges(grid: any) {\n    // Subscribe to Event Emitter of Filter changed\n    this.subscriptions.push(\n      this.filterService.onFilterChanged.subscribe((currentFilters: CurrentFilter[]) => {\n        this.resetRowSelection();\n        this.onGridStateChanged.next({ change: { newValues: currentFilters, type: GridStateType.filter }, gridState: this.getCurrentGridState() });\n      })\n    );\n    // Subscribe to Event Emitter of Filter cleared\n      this.subscriptions.push(\n        this.filterService.onFilterCleared.subscribe(() => {\n          this.resetRowSelection();\n          this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.filter }, gridState: this.getCurrentGridState() });\n        })\n      );\n\n    // Subscribe to Event Emitter of Sort changed\n    this.subscriptions.push(\n      this.sortService.onSortChanged.subscribe((currentSorters: CurrentSorter[]) => {\n        this.resetRowSelection();\n        this.onGridStateChanged.next({ change: { newValues: currentSorters, type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\n      })\n    );\n\n    // Subscribe to Event Emitter of Sort cleared\n    this.subscriptions.push(\n      this.sortService.onSortCleared.subscribe(() => {\n        this.resetRowSelection();\n        this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\n      })\n    );\n\n    // Subscribe to ColumnPicker and/or GridMenu for show/hide Columns visibility changes\n    this.hookExtensionEventToGridStateChange('ColumnPicker', 'onColumnsChanged');\n    this.hookExtensionEventToGridStateChange('GridMenu', 'onColumnsChanged');\n\n    // subscribe to Column Resize & Reordering\n    this.hookSlickGridEventToGridStateChange('onColumnsReordered', grid);\n    this.hookSlickGridEventToGridStateChange('onColumnsResized', grid);\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport { Injectable } from '@angular/core';\nimport { CellArgs, Column, GridOption, OnEventArgs } from './../models/index';\nimport { ControlAndPluginService } from './controlAndPlugin.service';\nimport { FilterService } from './filter.service';\nimport { GridStateService } from './gridState.service';\nimport { SortService } from './sort.service';\n\n// using external non-typed js libraries\ndeclare var $: any;\ndeclare var Slick: any;\n\n@Injectable()\nexport class GridService {\n  private _grid: any;\n  private _dataView: any;\n\n  constructor(private controlAndPluginService: ControlAndPluginService, private filterService: FilterService, private gridStateService: GridStateService, private sortService: SortService, private translate: TranslateService) { }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  init(grid: any, dataView: any): void {\n    this._grid = grid;\n    this._dataView = dataView;\n  }\n\n  /**\n   * From a SlickGrid Event triggered get the Column Definition and Item Data Context\n   *\n   * For example the SlickGrid onClick will return cell arguments when subscribing to it.\n   * From these cellArgs, we want to get the Column Definition and Item Data\n   * @param cell event args\n   * @return object with columnDef and dataContext\n   */\n  getColumnFromEventArguments(args: CellArgs): OnEventArgs {\n    if (!args || !args.grid || !args.grid.getColumns || !args.grid.getDataItem) {\n      throw new Error('To get the column definition and data, we need to have these arguments passed as objects (row, cell, grid)');\n    }\n\n    return {\n      row: args.row,\n      cell: args.cell,\n      columnDef: args.grid.getColumns()[args.cell],\n      dataContext: args.grid.getDataItem(args.row),\n      dataView: this._dataView,\n      grid: this._grid,\n      gridDefinition: this._gridOptions\n    };\n  }\n\n  /** Get data item by it's row index number */\n  getDataItemByRowNumber(rowNumber: number) {\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\n      throw new Error('We could not find SlickGrid Grid object');\n    }\n    return this._grid.getDataItem(rowNumber);\n  }\n\n  /** Chain the item Metadata with our implementation of Metadata at given row index */\n  getItemRowMetadataToHighlight(previousItemMetadata: any) {\n    return (rowNumber: number) => {\n      const item = this._dataView.getItem(rowNumber);\n      let meta = {\n        cssClasses: ''\n      };\n      if (typeof previousItemMetadata === 'function') {\n        meta = previousItemMetadata(rowNumber);\n      }\n\n      if (item && item._dirty) {\n        meta.cssClasses = (meta.cssClasses || '') + ' dirty';\n      }\n      if (item && item.rowClass) {\n        meta.cssClasses += ` ${item.rowClass}`;\n        meta.cssClasses += ` row${rowNumber}`;\n      }\n\n      return meta;\n    };\n  }\n\n  /**\n   * Highlight then fade a row for x seconds.\n   * The implementation follows this SO answer: https://stackoverflow.com/a/19985148/1212166\n   * @param rowNumber\n   * @param fadeDelay\n   */\n  highlightRow(rowNumber: number, fadeDelay: number = 1500) {\n    // create a SelectionModel if there's not one yet\n    if (!this._grid.getSelectionModel()) {\n      const rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n      this._grid.setSelectionModel(rowSelectionPlugin);\n    }\n\n    this._grid.setSelectedRows([rowNumber]);\n    this._dataView.getItemMetadata = this.getItemRowMetadataToHighlight(this._dataView.getItemMetadata);\n\n    const item = this._dataView.getItem(rowNumber);\n    if (item && item.id) {\n      item.rowClass = 'highlight';\n      this._dataView.updateItem(item.id, item);\n      const gridOptions = this._grid.getOptions() as GridOption;\n\n      // highlight the row for a user defined timeout\n      $(`#${gridOptions.gridId}`)\n          .find(`.highlight.row${rowNumber}`)\n          .first();\n\n      // delete the row's CSS that was attached for highlighting\n      setTimeout(() => {\n        if (item && item.id) {\n          delete item.rowClass;\n          const gridIdx = this._dataView.getIdxById(item.id);\n          if (gridIdx !== undefined) {\n            this._dataView.updateItem(item.id, item);\n          }\n        }\n      }, fadeDelay + 10);\n    }\n  }\n\n  /** Get the Data Item from a grid row index */\n  getDataItemByRowIndex(index: number) {\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\n      throw new Error('We could not find SlickGrid Grid object');\n    }\n\n    return this._grid.getDataItem(index);\n  }\n\n  /** Get the Data Item from an array of grid row indexes */\n  getDataItemByRowIndexes(indexes: number[]) {\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\n      throw new Error('We could not find SlickGrid Grid object');\n    }\n\n    const dataItems = [];\n\n    if (Array.isArray(indexes)) {\n      indexes.forEach((idx) => {\n        dataItems.push(this._grid.getDataItem(idx));\n      });\n    }\n\n    return dataItems;\n  }\n\n  /** Get the currently selected row indexes */\n  getSelectedRows() {\n    return this._grid.getSelectedRows();\n  }\n\n  /** Get the currently selected rows item data */\n  getSelectedRowsDataItem() {\n    if (!this._grid || typeof this._grid.getSelectedRows !== 'function') {\n      throw new Error('We could not find SlickGrid Grid object');\n    }\n\n    const selectedRowIndexes = this._grid.getSelectedRows();\n    return this.getDataItemByRowIndexes(selectedRowIndexes);\n  }\n\n  /** Select the selected row by a row index */\n  setSelectedRow(rowIndex: number) {\n    this._grid.setSelectedRows([rowIndex]);\n  }\n\n  /** Set selected rows with provided array of row indexes */\n  setSelectedRows(rowIndexes: number[]) {\n    this._grid.setSelectedRows(rowIndexes);\n  }\n\n  /** Re-Render the Grid */\n  renderGrid() {\n    if (this._grid && typeof this._grid.invalidate === 'function') {\n      this._grid.invalidate();\n      this._grid.render();\n    }\n  }\n\n  /**\n   * Reset the grid to it's original state (clear any filters, sorting & pagination if exists) .\n   * The column definitions could be passed as argument to reset (this can be used after a Grid State reset)\n   * The reset will clear the Filters & Sort, then will reset the Columns to their original state\n   */\n  resetGrid(columnDefinitions?: Column[]) {\n    // reset columns to original states & refresh the grid\n    if (this._grid && this._dataView) {\n      const originalColumns = this.controlAndPluginService.getAllColumns();\n      // const originalColumns = columnDefinitions || this._columnDefinitions;\n      if (Array.isArray(originalColumns) && originalColumns.length > 0) {\n        // set the grid columns to it's original column definitions\n        this._grid.setColumns(originalColumns);\n        this._dataView.refresh();\n        if (this._gridOptions && this._gridOptions.enableAutoSizeColumns) {\n          this._grid.autosizeColumns();\n        }\n        this.gridStateService.resetColumns(columnDefinitions);\n      }\n    }\n    if (this.filterService && this.filterService.clearFilters) {\n      this.filterService.clearFilters();\n    }\n    if (this.sortService && this.sortService.clearSorting) {\n      this.sortService.clearSorting();\n    }\n  }\n\n  /**\n   * Add an item (data item) to the datagrid, by default it will highlight (flashing) the inserted row but we can disable it too\n   * @param object dataItem: item object holding all properties of that row\n   * @param shouldHighlightRow do we want to highlight the row after adding item\n   */\n  addItemToDatagrid(item: any, shouldHighlightRow = true) {\n    if (!this._grid || !this._gridOptions || !this._dataView) {\n      throw new Error('We could not find SlickGrid Grid, DataView objects');\n    }\n\n    const row = 0;\n    this._dataView.insertItem(row, item);\n    this._grid.scrollRowIntoView(0); // scroll to row 0\n\n    // highlight the row we just added, if defined\n    if (shouldHighlightRow) {\n      this.highlightRow(0, 1500);\n    }\n\n    // refresh dataview & grid\n    this._dataView.refresh();\n  }\n\n  /**\n   * Add item array (data item) to the datagrid, by default it will highlight (flashing) the inserted row but we can disable it too\n   * @param dataItem array: item object holding all properties of that row\n   * @param shouldHighlightRow do we want to highlight the row after adding item\n   */\n  addItemsToDatagrid(items: any[], shouldHighlightRow = true) {\n    if (Array.isArray(items)) {\n      items.forEach((item: any) => this.addItemToDatagrid(item, shouldHighlightRow));\n    }\n  }\n\n  /**\n   * Delete an existing item from the datagrid (dataView)\n   * @param object item: item object holding all properties of that row\n   */\n  deleteDataGridItem(item: any) {\n    if (!item || !item.hasOwnProperty('id')) {\n      throw new Error(`deleteDataGridItem() requires an item object which includes the \"id\" property`);\n    }\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\n    this.deleteDataGridItemById(itemId);\n  }\n\n  /**\n   * Delete an existing item from the datagrid (dataView) by it's id\n   * @param itemId: item unique id\n   */\n  deleteDataGridItemById(itemId: string | number) {\n    if (itemId === undefined) {\n      throw new Error(`Cannot delete a row without a valid \"id\"`);\n    }\n\n    // delete the item from the dataView\n    this._dataView.deleteItem(itemId);\n    this._dataView.refresh();\n  }\n\n  /**\n   * Update an existing item with new properties inside the datagrid\n   * @param object item: item object holding all properties of that row\n   */\n  updateDataGridItem(item: any) {\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\n\n    if (itemId === undefined) {\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\n    }\n\n    this.updateDataGridItemById(itemId, item);\n  }\n\n  /**\n   * Update an existing item in the datagrid by it's id and new properties\n   * @param itemId: item unique id\n   * @param object item: item object holding all properties of that row\n   * @param shouldHighlightRow do we want to highlight the row after update\n   */\n  updateDataGridItemById(itemId: number | string, item: any, shouldHighlightRow = true) {\n    if (itemId === undefined) {\n      throw new Error(`Cannot update a row without a valid \"id\"`);\n    }\n    const row = this._dataView.getRowById(itemId);\n\n    if (!item || row === undefined) {\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\n    }\n\n    const gridIdx = this._dataView.getIdxById(itemId);\n    if (gridIdx !== undefined) {\n      // Update the item itself inside the dataView\n      this._dataView.updateItem(itemId, item);\n\n      // highlight the row we just updated, if defined\n      if (shouldHighlightRow) {\n        this.highlightRow(row, 1500);\n      }\n\n      // refresh dataview & grid\n      this._dataView.refresh();\n    }\n  }\n}\n",
    "\nimport {\n  Column,\n  GridOption\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare let $: any;\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GroupingAndColspanService {\n  private _eventHandler = new Slick.EventHandler();\n  private _dataView: any;\n  private _grid: any;\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any, dataView: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n\n    if (grid && this._gridOptions) {\n      // When dealing with Pre-Header Grouping colspan, we need to re-create the pre-header in multiple occasions\n      // for all these occasions, we have to trigger a re-create\n      if (this._gridOptions.createPreHeaderPanel) {\n        this._eventHandler.subscribe(grid.onSort, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(grid.onColumnsResized, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(dataView.onRowCountChanged, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n\n        // also not sure why at this point, but it seems that I need to call the 1st create in a delayed execution\n        // probably some kind of timing issues and delaying it until the grid is fully ready does help\n        setTimeout(() => {\n          this.createPreHeaderRowGroupingTitle();\n        }, 50);\n      }\n    }\n  }\n\n  dispose() {\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n  }\n\n  createPreHeaderRowGroupingTitle() {\n    const $preHeaderPanel = $(this._grid.getPreHeaderPanel())\n      .empty()\n      .addClass('slick-header-columns')\n      .css('left', '-1000px')\n      .width(this._grid.getHeadersWidth());\n    $preHeaderPanel.parent().addClass('slick-header');\n    const headerColumnWidthDiff = this._grid.getHeaderColumnWidthDiff();\n    let m;\n    let header;\n    let lastColumnGroup = '';\n    let widthTotal = 0;\n\n    for (let i = 0; i < this._columnDefinitions.length; i++) {\n      m = this._columnDefinitions[i];\n      if (lastColumnGroup === m.columnGroup && i > 0) {\n        widthTotal += m.width;\n        header.width(widthTotal - headerColumnWidthDiff);\n      } else {\n        widthTotal = m.width;\n        header = $(`<div class=\"ui-state-default slick-header-column\" />`)\n          .html(`<span class=\"slick-column-name\">${m.columnGroup || ''}</span>`)\n          .width(m.width - headerColumnWidthDiff)\n          .appendTo($preHeaderPanel);\n      }\n      lastColumnGroup = m.columnGroup;\n    }\n  }\n}\n",
    "import { GridOption } from './../models/index';\nimport { getScrollBarWidth } from './utilities';\nimport { Subject } from 'rxjs/Subject';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n// global constants, height/width are in pixels\nconst DATAGRID_MIN_HEIGHT = 180;\nconst DATAGRID_MIN_WIDTH = 300;\nconst DATAGRID_BOTTOM_PADDING = 20;\nconst DATAGRID_PAGINATION_HEIGHT = 35;\nlet timer: any;\n\nexport interface GridDimension {\n  height: number;\n  width: number;\n  heightWithPagination?: number;\n}\n\nexport class ResizerService {\n  private _grid: any;\n  private _lastDimensions: GridDimension;\n  onGridBeforeResize = new Subject<boolean>();\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  private get _gridUid(): string {\n    return (this._grid && this._grid.getUID) ? this._grid.getUID() : this._gridOptions.gridId;\n  }\n\n  init(grid: any): void {\n    this._grid = grid;\n  }\n\n  /** Attach an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space\n   * Options: we could also provide a % factor to resize on each height/width independently\n   */\n  attachAutoResizeDataGrid(newSizes?: GridDimension) {\n    // if we can't find the grid to resize, return without attaching anything\n    const gridDomElm = $(`#${this._gridOptions && this._gridOptions.gridId ? this._gridOptions.gridId : 'grid1'}`);\n    if (gridDomElm === undefined || gridDomElm.offset() === undefined) {\n      return null;\n    }\n\n    // -- 1st resize the datagrid size at first load (we need this because the .on event is not triggered on first load)\n    this.resizeGrid(0, newSizes);\n\n    // -- 2nd attach a trigger on the Window DOM element, so that it happens also when resizing after first load\n    // -- attach auto-resize to Window object only if it exist\n    $(window).on(`resize.grid.${this._gridUid}`, () => {\n      this.onGridBeforeResize.next(true);\n      // for some yet unknown reason, calling the resize twice removes any stuttering/flickering when changing the height and makes it much smoother\n      this.resizeGrid(0, newSizes);\n      this.resizeGrid(0, newSizes);\n    });\n  }\n\n  /**\n   * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation\n   * object gridOptions\n   */\n  calculateGridNewDimensions(gridOptions: GridOption): GridDimension | null {\n    const gridDomElm = $(`#${gridOptions.gridId}`);\n    const containerElm = (gridOptions.autoResize && gridOptions.autoResize.containerId) ? $(`#${gridOptions.autoResize.containerId}`) : $(`#${gridOptions.gridContainerId}`);\n    const windowElm = $(window);\n    if (windowElm === undefined || containerElm === undefined || gridDomElm === undefined) {\n      return null;\n    }\n\n    // calculate bottom padding\n    // if using pagination, we need to add the pagination height to this bottom padding\n    let bottomPadding = (gridOptions.autoResize && gridOptions.autoResize.bottomPadding) ? gridOptions.autoResize.bottomPadding : DATAGRID_BOTTOM_PADDING;\n    if (bottomPadding && (gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\n      bottomPadding += DATAGRID_PAGINATION_HEIGHT;\n    }\n\n    const gridHeight = windowElm.height() || 0;\n    const coordOffsetTop = gridDomElm.offset();\n    const gridOffsetTop = (coordOffsetTop !== undefined) ? coordOffsetTop.top : 0;\n    const availableHeight = gridHeight - gridOffsetTop - bottomPadding;\n    const availableWidth = containerElm.width() || 0;\n    const minHeight = (gridOptions.autoResize && gridOptions.autoResize.minHeight < 0) ? gridOptions.autoResize.minHeight : DATAGRID_MIN_HEIGHT;\n    const minWidth = (gridOptions.autoResize && gridOptions.autoResize.minWidth < 0) ? gridOptions.autoResize.minWidth : DATAGRID_MIN_WIDTH;\n\n    let newHeight = availableHeight;\n    let newWidth = (gridOptions.autoResize && gridOptions.autoResize.sidePadding) ? availableWidth - gridOptions.autoResize.sidePadding : availableWidth;\n    if (newHeight < minHeight) {\n      newHeight = minHeight;\n    }\n    if (newWidth < minWidth) {\n      newWidth = minWidth;\n    }\n\n    return {\n      height: newHeight,\n      width: newWidth\n    };\n  }\n\n  /**\n   * Dispose function when element is destroyed\n   */\n  dispose() {\n    $(window).off(`resize.grid.${this._gridUid}`);\n  }\n\n  /**\n   * For some reason this only seems to happen in Chrome and is sometime miscalculated by SlickGrid measureSrollbar() method\n   * When that happens we will compensate and resize the Grid Viewport to avoid seeing horizontal scrollbar\n   * Most of the time it happens, it's a tiny offset calculation of usually 3px (enough to show scrollbar)\n   * GitHub issue reference: https://github.com/6pac/SlickGrid/issues/275\n   */\n  compensateHorizontalScroll(grid: any, gridOptions: GridOption) {\n    const gridElm = $(`#${gridOptions.gridId}`);\n\n    const scrollbarDimensions = grid && grid.getScrollbarDimensions();\n    const slickGridScrollbarWidth = scrollbarDimensions && scrollbarDimensions.width;\n    const calculatedScrollbarWidth = getScrollBarWidth();\n\n     // if scrollbar width is different from SlickGrid calculation to our custom calculation\n    // then resize the grid with the missing pixels to remove scroll (usually only 3px)\n    if (slickGridScrollbarWidth < calculatedScrollbarWidth) {\n      gridElm.width(gridElm.width() + (calculatedScrollbarWidth - slickGridScrollbarWidth));\n    }\n  }\n\n  /**\n   * Return the last resize dimensions used by the service\n   * @return last dimensions\n   */\n  getLastResizeDimensions(): GridDimension {\n    return this._lastDimensions;\n  }\n\n  /** Resize the datagrid to fit the browser height & width */\n  resizeGrid(delay?: number, newSizes?: GridDimension): Promise<GridDimension> {\n    if (!this._grid || !this._gridOptions) {\n      throw new Error(`\n      Angular-Slickgrid resizer requires a valid Grid object and Grid Options defined.\n      You can fix this by setting your gridOption to use \"enableAutoResize\" or create an instance of the ResizerService by calling attachAutoResizeDataGrid()`);\n    }\n\n    return new Promise((resolve) => {\n      // because of the javascript async nature, we might want to delay the resize a little bit\n      delay = delay || 0;\n\n      clearTimeout(timer);\n\n      timer = setTimeout(() => {\n        // calculate the available sizes with minimum height defined as a constant\n        const availableDimensions = this.calculateGridNewDimensions(this._gridOptions);\n        const gridElm = $(`#${this._gridOptions.gridId}`) || {};\n        const gridContainerElm = $(`#${this._gridOptions.gridContainerId}`) || {};\n\n        if ((newSizes || availableDimensions) && gridElm.length > 0) {\n          // get the new sizes, if new sizes are passed (not 0), we will use them else use available space\n          // basically if user passes 1 of the dimension, let say he passes just the height,\n          // we will use the height as a fixed height but the width will be resized by it's available space\n          const newHeight = (newSizes && newSizes.height) ? newSizes.height : availableDimensions.height;\n          const newWidth = (newSizes && newSizes.width) ? newSizes.width : availableDimensions.width;\n\n          // apply these new height/width to the datagrid\n          gridElm.height(newHeight);\n          gridElm.width(newWidth);\n          gridContainerElm.height(newHeight);\n          gridContainerElm.width(newWidth);\n\n          // resize the slickgrid canvas on all browser except some IE versions\n          // exclude all IE below IE11\n          // IE11 wants to be a better standard (W3C) follower (finally) they even changed their appName output to also have 'Netscape'\n          if (new RegExp('MSIE [6-8]').exec(navigator.userAgent) === null && this._grid) {\n            this._grid.resizeCanvas();\n          }\n\n          // also call the grid auto-size columns so that it takes available when going bigger\n          if (this._gridOptions && this._gridOptions.enableAutoSizeColumns) {\n            this._grid.autosizeColumns();\n\n            // compensate anytime SlickGrid measureScrollbar is incorrect\n            this.compensateHorizontalScroll(this._grid, this._gridOptions);\n          }\n\n          // keep last resized dimensions & resolve them to the Promise\n          this._lastDimensions = {\n            height: newHeight,\n            width: newWidth\n          };\n\n          if ((this._gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\n            this._lastDimensions.heightWithPagination = newHeight + DATAGRID_PAGINATION_HEIGHT;\n          }\n\n          resolve(this._lastDimensions);\n        }\n      }, delay);\n    });\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class AvgAggregator implements Aggregator {\n  private _count: number;\n  private _nonNullCount: number;\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._count = 0;\n    this._nonNullCount = 0;\n    this._sum = 0;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    this._count++;\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._nonNullCount++;\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.avg) {\n      groupTotals.avg = {};\n    }\n    if (this._nonNullCount !== 0) {\n      groupTotals.avg[this._field] = this._sum / this._nonNullCount;\n    }\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MinAggregator implements Aggregator {\n  private _min: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._min = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._min == null || val < this._min) {\n        this._min = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.min) {\n      groupTotals.min = {};\n    }\n    groupTotals.min[this._field] = this._min;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MaxAggregator implements Aggregator {\n  private _max: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._max = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._max == null || val > this._max) {\n        this._max = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.max) {\n      groupTotals.max = {};\n    }\n    groupTotals.max[this._field] = this._max;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class SumAggregator implements Aggregator {\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._sum = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.sum) {\n      groupTotals.sum = {};\n    }\n    groupTotals.sum[this._field] = this._sum;\n  }\n}\n",
    "import { AvgAggregator } from './avgAggregator';\nimport { MinAggregator } from './minAggregator';\nimport { MaxAggregator } from './maxAggregator';\nimport { SumAggregator } from './sumAggregator';\n\n/** Provides a list of different Aggregators for the Group Formatter */\nexport const Aggregators = {\n  Avg: AvgAggregator,\n  Min: MinAggregator,\n  Max: MaxAggregator,\n  Sum: SumAggregator\n};\n",
    "import { Column, Editor, EditorValidator, EditorValidatorOutput } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class CheckboxEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: boolean;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"checkbox\" value=\"true\" class=\"editor-checkbox\" />`);\r\n    this.$input.appendTo(this.args.container);\r\n    this.$input.focus();\r\n  }\r\n\r\n  destroy(): void {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus(): void {\r\n    this.$input.focus();\r\n  }\r\n\r\n  hide() {\r\n    this.$input.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$input.show();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = !!item[this.columnDef.field];\r\n    if (this.defaultValue) {\r\n      this.$input.prop('checked', true);\r\n    } else {\r\n      this.$input.prop('checked', false);\r\n    }\r\n  }\r\n\r\n  preClick() {\r\n    this.$input.prop('checked', !this.$input.prop('checked'));\r\n  }\r\n\r\n  serializeValue(): boolean {\r\n    return this.$input.prop('checked');\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (this.serializeValue() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, FieldType, GridOption } from './../models/index';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a date picker editor using Flatpickr\r\n * https://chmln.github.io/flatpickr\r\n */\r\nexport class DateEditor implements Editor {\r\n  $input: any;\r\n  flatInstance: any;\r\n  defaultDate: string;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    if (this.args && this.args.column) {\r\n      const gridOptions = this.args.grid.getOptions() as GridOption;\r\n      this.defaultDate = (this.args.item) ? this.args.item[this.args.column.field] : null;\r\n      const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\r\n      const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || FieldType.dateUtc);\r\n      let currentLocale = this.getCurrentLocale(this.columnDef, gridOptions);\r\n      if (currentLocale.length > 2) {\r\n        currentLocale = currentLocale.substring(0, 2);\r\n      }\r\n\r\n      const pickerOptions: any = {\r\n        defaultDate: this.defaultDate,\r\n        altInput: true,\r\n        altFormat: inputFormat,\r\n        dateFormat: outputFormat,\r\n        closeOnSelect: false,\r\n        locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n        onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n          this.save();\r\n        },\r\n      };\r\n\r\n\r\n      this.$input = $(`<input type=\"text\" data-defaultDate=\"${this.defaultDate}\" class=\"editor-text flatpickr\" />`);\r\n      this.$input.appendTo(this.args.container);\r\n      this.flatInstance = (this.$input[0] && typeof this.$input[0].flatpickr === 'function') ? this.$input[0].flatpickr(pickerOptions) : null;\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  getCurrentLocale(columnDef: Column, gridOptions: GridOption) {\r\n    const options = gridOptions || columnDef.params || {};\r\n    if (options.i18n && options.i18n instanceof TranslateService) {\r\n      return options.i18n.currentLang;\r\n    }\r\n\r\n    return 'en';\r\n  }\r\n\r\n  loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  destroy() {\r\n    this.hide();\r\n    // this.flatInstance.destroy();\r\n    this.$input.remove();\r\n  }\r\n\r\n  show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultDate = item[this.args.column.field];\r\n    this.flatInstance.setDate(item[this.args.column.field]);\r\n  }\r\n\r\n  serializeValue() {\r\n    const domValue: string = this.$input.val();\r\n\r\n    if (!domValue) {\r\n      return '';\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n    const value = moment(domValue).format(outputFormat);\r\n\r\n    return value;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    if (!state) {\r\n      return;\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n    item[this.args.column.field] = moment(state, outputFormat).toDate();\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultDate == null)) && (this.$input.val() !== this.defaultDate);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Constants } from '../constants';\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst defaultDecimalPlaces = 0;\n\n/*\n * An example of a 'detached' editor.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class FloatEditor implements Editor {\n  $input: any;\n  defaultValue: any;\n\n  constructor(private args: any) {\n    this.init();\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args && this.args.column || {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): any {\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\n  }\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator {\n    return this.columnEditor.validator || this.columnDef.validator;\n  }\n\n  init(): void {\n    this.$input = $(`<input type=\"number\" class=\"editor-text\" step=\"${this.getInputDecimalSteps()}\" />`)\n      .appendTo(this.args.container)\n      .on('keydown.nav', (e) => {\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\n          e.stopImmediatePropagation();\n        }\n      });\n\n    setTimeout(() => {\n      this.$input.focus().select();\n    }, 50);\n  }\n\n  destroy() {\n    this.$input.remove();\n  }\n\n  focus() {\n    this.$input.focus();\n  }\n\n  getColumnEditor() {\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\n  }\n\n  getDecimalPlaces(): number {\n    // returns the number of fixed decimal places or null\n    let rtn = (this.columnEditor.params && this.columnEditor.params.hasOwnProperty('decimalPlaces')) ? this.columnEditor.params.decimalPlaces : undefined;\n\n    if (rtn === undefined) {\n      rtn = defaultDecimalPlaces;\n    }\n    return (!rtn && rtn !== 0 ? null : rtn);\n  }\n\n  getInputDecimalSteps(): string {\n    const decimals = this.getDecimalPlaces();\n    let zeroString = '';\n    for (let i = 1; i < decimals; i++) {\n      zeroString += '0';\n    }\n\n    if (decimals > 0) {\n      return `0.${zeroString}1`;\n    }\n    return '1';\n  }\n\n  loadValue(item: any) {\n    this.defaultValue = item[this.columnDef.field];\n\n    const decPlaces = this.getDecimalPlaces();\n    if (decPlaces !== null\n      && (this.defaultValue || this.defaultValue === 0)\n      && this.defaultValue.toFixed) {\n      this.defaultValue = this.defaultValue.toFixed(decPlaces);\n    }\n\n    this.$input.val(this.defaultValue);\n    this.$input[0].defaultValue = this.defaultValue;\n    this.$input.select();\n  }\n\n  serializeValue() {\n    let rtn = parseFloat(this.$input.val()) || 0;\n    const decPlaces = this.getDecimalPlaces();\n    if (decPlaces !== null\n      && (rtn || rtn === 0)\n      && rtn.toFixed) {\n      rtn = parseFloat(rtn.toFixed(decPlaces));\n    }\n\n    return rtn;\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.columnDef.field] = state;\n  }\n\n  isValueChanged() {\n    const elmValue = this.$input.val();\n    return (!(elmValue === '' && this.defaultValue === null)) && (elmValue !== this.defaultValue);\n  }\n\n  validate(): EditorValidatorOutput {\n    const elmValue = this.$input.val();\n    const decPlaces = this.getDecimalPlaces();\n    const minValue = this.columnEditor.minValue;\n    const maxValue = this.columnEditor.maxValue;\n    const errorMsg = this.columnEditor.errorMessage;\n    const mapValidation = {\n      '{{minValue}}': minValue,\n      '{{maxValue}}': maxValue,\n      '{{minDecimal}}': 0,\n      '{{maxDecimal}}': decPlaces\n    };\n\n    if (this.validator) {\n      const validationResults = this.validator(elmValue);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    } else if (isNaN(elmValue as number) || (decPlaces === 0 && !/^(\\d+(\\.)?(\\d)*)$/.test(elmValue))) {\n      // when decimal value is 0 (which is the default), we accept 0 or more decimal values\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_VALID_NUMBER\n      };\n    } else if (minValue !== undefined && (elmValue < minValue || elmValue > maxValue)) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    } else if ((decPlaces > 0 && !new RegExp(`^(\\\\d+(\\\\.)?(\\\\d){0,${decPlaces}})$`).test(elmValue))) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_DECIMAL_BETWEEN.replace(/{{minDecimal}}|{{maxDecimal}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n",
    "import { Constants } from './../constants';\r\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class IntegerEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"number\" class='editor-text' />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = parseInt(item[this.args.column.field], 10);\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return parseInt(this.$input.val() as string, 10) || 0;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    const elmValue = this.$input.val();\r\n    const value = isNaN(elmValue) ? elmValue : parseInt(elmValue, 10);\r\n    return (!(value === '' && this.defaultValue === null)) && (value !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    const elmValue = this.$input.val();\r\n    const errorMsg = this.columnEditor.params && this.columnEditor.errorMessage;\r\n\r\n    if (this.validator) {\r\n      const validationResults = this.validator(elmValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    } else if (isNaN(elmValue as number) || !/^[+-]?\\d+$/.test(elmValue)) {\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || Constants.VALIDATION_EDITOR_VALID_INTEGER\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport { Constants } from './../constants';\nimport {\n  Column,\n  Editor,\n  EditorValidator,\n  EditorValidatorOutput,\n  GridOption,\n  HtmlElementPosition,\n  KeyCode\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n/*\n * An example of a 'detached' editor.\n * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class LongTextEditor implements Editor {\n  $input: any;\n  $wrapper: any;\n  defaultValue: any;\n\n  /** Grid options */\n  gridOptions: GridOption;\n\n  /** The i18n aurelia library */\n  private _translate: TranslateService;\n\n  constructor(private args: any) {\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\n    const options = this.gridOptions || this.args.column.params || {};\n    this._translate = options.i18n;\n\n    this.init();\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args && this.args.column || {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): any {\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\n  }\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator {\n    return this.columnEditor.validator || this.columnDef.validator;\n  }\n\n  init(): void {\n    const cancelText = this._translate && this._translate.instant('CANCEL') || Constants.TEXT_CANCEL;\n    const saveText = this._translate && this._translate.instant('SAVE') || Constants.TEXT_SAVE;\n    const $container = $('body');\n\n    this.$wrapper = $(`<div class=\"slick-large-editor-text\" />`).appendTo($container);\n    this.$input = $(`<textarea hidefocus rows=\"5\">`).appendTo(this.$wrapper);\n\n    $(`<div class=\"editor-footer\">\n          <button class=\"btn btn-primary btn-xs\">${saveText}</button>\n          <button class=\"btn btn-default btn-xs\">${cancelText}</button>\n      </div>`).appendTo(this.$wrapper);\n\n    this.$wrapper.find('button:first').on('click', () => this.save());\n    this.$wrapper.find('button:last').on('click', () => this.cancel());\n    this.$input.on('keydown', this.handleKeyDown.bind(this));\n\n    this.position(this.args && this.args.position);\n    this.$input.focus().select();\n  }\n\n  handleKeyDown(e: any) {\n    if (e.which === KeyCode.ENTER && e.ctrlKey) {\n      this.save();\n    } else if (e.which === KeyCode.ESCAPE) {\n      e.preventDefault();\n      this.cancel();\n    } else if (e.which === KeyCode.TAB && e.shiftKey) {\n      e.preventDefault();\n      if (this.args && this.args.grid) {\n        this.args.grid.navigatePrev();\n      }\n    } else if (e.which === KeyCode.TAB) {\n      e.preventDefault();\n      if (this.args && this.args.grid) {\n        this.args.grid.navigateNext();\n      }\n    }\n  }\n\n  save() {\n    if (this.args && this.args.commitChanges) {\n      this.args.commitChanges();\n    }\n  }\n\n  cancel() {\n    this.$input.val(this.defaultValue);\n    if (this.args && this.args.cancelChanges) {\n      this.args.cancelChanges();\n    }\n  }\n\n  hide() {\n    this.$wrapper.hide();\n  }\n\n  show() {\n    this.$wrapper.show();\n  }\n\n  position(position: HtmlElementPosition) {\n    this.$wrapper\n      .css('top', (position.top || 0) - 5)\n      .css('left', (position.left || 0) - 5);\n  }\n\n  destroy() {\n    this.$wrapper.remove();\n  }\n\n  focus() {\n    this.$input.focus();\n  }\n\n  getColumnEditor() {\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\n  }\n\n  loadValue(item: any) {\n    this.$input.val(this.defaultValue = item[this.columnDef.field]);\n    this.$input.select();\n  }\n\n  serializeValue() {\n    return this.$input.val();\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.columnDef.field] = state;\n  }\n\n  isValueChanged() {\n    return (!(this.$input.val() === '' && this.defaultValue == null)) && (this.$input.val() !== this.defaultValue);\n  }\n\n  validate(): EditorValidatorOutput {\n    if (this.validator) {\n      const validationResults = this.validator(this.$input.val());\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    }\n\n    // by default the editor is always valid\n    // if user want it to be a required checkbox, he would have to provide his own validator\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport {\n  CollectionCustomStructure,\n  CollectionOption,\n  Column,\n  Editor,\n  EditorValidator,\n  EditorValidatorOutput,\n  GridOption,\n  MultipleSelectOption,\n  SelectOption,\n} from './../models/index';\nimport { CollectionService } from '../services/index';\nimport { arraysEqual, findOrDefault, getDescendantProperty, htmlEncode, unsubscribeAllObservables } from '../services/utilities';\nimport { Subscription } from 'rxjs/Subscription';\nimport * as DOMPurify_ from 'dompurify';\nconst DOMPurify = DOMPurify_; // patch to fix rollup to work\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n/**\n * Slickgrid editor class for multiple/single select lists\n */\nexport class SelectEditor implements Editor {\n  /** The JQuery DOM element */\n  $editorElm: any;\n\n  /** Editor Multiple-Select options */\n  editorElmOptions: MultipleSelectOption;\n\n  /** DOM Element Name, useful for auto-detecting positioning (dropup / dropdown) */\n  elementName: string;\n\n  /** The multiple-select options for a multiple select list */\n  defaultOptions: MultipleSelectOption;\n\n  /** The default item values that are set */\n  defaultValue: any[];\n\n  /** The property name for values in the collection */\n  valueName: string;\n\n  /** The property name for labels in the collection */\n  labelName: string;\n\n  /** The property name for a prefix that can be added to the labels in the collection */\n  labelPrefixName: string;\n\n  /** The property name for a suffix that can be added to the labels in the collection */\n  labelSuffixName: string;\n\n  /** Grid options */\n  gridOptions: GridOption;\n\n  /** Do we translate the label? */\n  enableTranslateLabel: boolean;\n\n  /** Observable Subscriptions */\n  _subscriptions: Subscription[] = [];\n\n  /** Collection Service */\n  protected _collectionService: CollectionService;\n\n  /** The i18n aurelia library */\n  protected _translate: TranslateService;\n\n  constructor(protected args: any, protected isMultipleSelect) {\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\n    const gridOptions = this.gridOptions || this.args.column.params || {};\n    this._translate = gridOptions.i18n;\n\n    // provide the name attribute to the DOM element which will be needed to auto-adjust drop position (dropup / dropdown)\n    const fieldId = this.columnDef && this.columnDef.field || this.columnDef && this.columnDef.id;\n    this.elementName = `editor_${fieldId}`;\n\n    const libOptions: MultipleSelectOption = {\n      autoAdjustDropHeight: true,\n      autoAdjustDropPosition: true,\n      autoAdjustDropWidthByTextSize: true,\n      container: 'body',\n      filter: false,\n      maxHeight: 275,\n      name: this.elementName,\n      single: true,\n      textTemplate: ($elm) => {\n        // render HTML code or not, by default it is sanitized and won't be rendered\n        const isRenderHtmlEnabled = this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.enableRenderHtml || false;\n        return isRenderHtmlEnabled ? $elm.text() : $elm.html();\n      },\n      onBlur: () => this.destroy()\n    };\n\n    if (isMultipleSelect) {\n      libOptions.single = false;\n      libOptions.addTitle = true;\n      libOptions.okButton = true;\n      libOptions.selectAllDelimiter = ['', ''];\n\n      if (this._translate) {\n        libOptions.countSelected = this._translate.instant('X_OF_Y_SELECTED');\n        libOptions.allSelected = this._translate.instant('ALL_SELECTED');\n        libOptions.selectAllText = this._translate.instant('SELECT_ALL');\n      }\n    }\n\n    // assign the multiple select lib options\n    this.defaultOptions = libOptions;\n\n    this.init();\n  }\n\n  /** Get the Collection */\n  get collection(): any[] {\n    return this.columnDef && this.columnDef && this.columnDef.internalColumnEditor.collection || [];\n  }\n\n  /** Getter for the Collection Options */\n  get collectionOptions(): CollectionOption {\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.collectionOptions;\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args && this.args.column || {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): any {\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\n  }\n\n  /** Getter for the Custom Structure if exist */\n  protected get customStructure(): CollectionCustomStructure {\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.customStructure;\n  }\n\n  /**\n   * The current selected values (multiple select) from the collection\n   */\n  get currentValues() {\n    const separatorBetweenLabels = this.collectionOptions && this.collectionOptions.separatorBetweenTextLabels || '';\n    const isIncludingPrefixSuffix = this.collectionOptions && this.collectionOptions.includePrefixSuffixToSelectedValues || false;\n\n    return this.collection\n      .filter(c => this.$editorElm.val().indexOf(c[this.valueName].toString()) !== -1)\n      .map(c => {\n        const labelText = c[this.valueName];\n        const prefixText = c[this.labelPrefixName] || '';\n        const suffixText = c[this.labelSuffixName] || '';\n\n        if (isIncludingPrefixSuffix) {\n          return (prefixText + separatorBetweenLabels + labelText + separatorBetweenLabels + suffixText);\n        }\n        return labelText;\n      });\n  }\n\n\n  /**\n   * The current selected values (single select) from the collection\n   */\n  get currentValue() {\n    const separatorBetweenLabels = this.collectionOptions && this.collectionOptions.separatorBetweenTextLabels || '';\n    const isIncludingPrefixSuffix = this.collectionOptions && this.collectionOptions.includePrefixSuffixToSelectedValues || false;\n    const itemFound = findOrDefault(this.collection, (c: any) => c[this.valueName].toString() === this.$editorElm.val());\n\n    if (itemFound) {\n      const labelText = itemFound[this.valueName];\n\n      if (isIncludingPrefixSuffix) {\n        const prefixText = itemFound[this.labelPrefixName] || '';\n        const suffixText = itemFound[this.labelSuffixName] || '';\n        return (prefixText + separatorBetweenLabels + labelText + separatorBetweenLabels + suffixText);\n      }\n\n      return labelText;\n    }\n\n    return '';\n  }\n\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator {\n    return this.columnEditor.validator || this.columnDef.validator;\n  }\n\n  init() {\n    if (!this.args) {\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\n    }\n\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || (!this.columnDef.internalColumnEditor.collection && !this.columnDef.internalColumnEditor.collectionAsync)) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" (or \"collectionAsync\") inside Column Definition Editor for the MultipleSelect/SingleSelect Editor to work correctly.\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\n    }\n\n    this._collectionService = new CollectionService(this._translate);\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\n    this.labelName = (this.customStructure) ? this.customStructure.label : 'label';\n    this.labelPrefixName = (this.customStructure) ? this.customStructure.labelPrefix : 'labelPrefix';\n    this.labelSuffixName = (this.customStructure) ? this.customStructure.labelSuffix : 'labelSuffix';\n    this.valueName = (this.customStructure) ? this.customStructure.value : 'value';\n\n    // always render the Select (dropdown) DOM element, even if user passed a \"collectionAsync\",\n    // if that is the case, the Select will simply be without any options but we still have to render it (else SlickGrid would throw an error)\n    this.renderDomElement(this.collection);\n  }\n\n  applyValue(item: any, state: any): void {\n    item[this.columnDef.field] = state;\n  }\n\n  destroy() {\n    if (this.$editorElm && this.$editorElm.multipleSelect) {\n      this.$editorElm.multipleSelect('close');\n      this.$editorElm.remove();\n    }\n    this._subscriptions = unsubscribeAllObservables(this._subscriptions);\n  }\n\n  loadValue(item: any): void {\n    if (this.isMultipleSelect) {\n      // convert to string because that is how the DOM will return these values\n      this.defaultValue = item[this.columnDef.field].map((i: any) => i.toString());\n\n      this.$editorElm.find('option').each((i: number, $e: any) => {\n        if (this.defaultValue.indexOf($e.value) !== -1) {\n          $e.selected = true;\n        } else {\n          $e.selected = false;\n        }\n      });\n    } else {\n      this.loadSingleValue(item);\n    }\n\n    this.refresh();\n  }\n\n  loadSingleValue(item: any) {\n    // convert to string because that is how the DOM will return these values\n    // make sure the prop exists first\n    this.defaultValue = item[this.columnDef.field] && item[this.columnDef.field].toString();\n\n    this.$editorElm.find('option').each((i: number, $e: any) => {\n      if (this.defaultValue === $e.value) {\n        $e.selected = true;\n      } else {\n        $e.selected = false;\n      }\n    });\n  }\n\n  serializeValue(): any {\n    return (this.isMultipleSelect) ? this.currentValues : this.currentValue;\n  }\n\n  focus() {\n    if (this.$editorElm && this.$editorElm.multipleSelect) {\n      this.$editorElm.multipleSelect('focus');\n    }\n  }\n\n  isValueChanged(): boolean {\n    if (this.isMultipleSelect) {\n      return !arraysEqual(this.$editorElm.val(), this.defaultValue);\n    }\n    return this.$editorElm.val() !== this.defaultValue;\n  }\n\n  validate(): EditorValidatorOutput {\n    if (this.validator) {\n      const validationResults = this.validator(this.isMultipleSelect ? this.currentValues : this.currentValue);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    }\n\n    // by default the editor is always valid\n    // if user want it to be a required checkbox, he would have to provide his own validator\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n\n  //\n  // protected functions\n  // ------------------\n\n  /**\n   * user might want to filter certain items of the collection\n   * @param inputCollection\n   * @return outputCollection filtered and/or sorted collection\n   */\n  protected filterCollection(inputCollection) {\n    let outputCollection = inputCollection;\n\n    // user might want to filter certain items of the collection\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionFilterBy) {\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\n      outputCollection = this._collectionService.filterCollection(outputCollection, filterBy);\n    }\n\n    return outputCollection;\n  }\n\n  /**\n   * user might want to sort the collection in a certain way\n   * @param inputCollection\n   * @return outputCollection sorted collection\n   */\n  protected sortCollection(inputCollection) {\n    let outputCollection = inputCollection;\n\n    // user might want to sort the collection\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\n      outputCollection = this._collectionService.sortCollection(outputCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    return outputCollection;\n  }\n\n  protected renderDomElement(collection: any[]) {\n    if (!Array.isArray(collection) && this.collectionOptions && this.collectionOptions.collectionInObjectProperty) {\n      collection = getDescendantProperty(collection, this.collectionOptions.collectionInObjectProperty);\n    }\n    if (!Array.isArray(collection)) {\n      throw new Error('The \"collection\" passed to the Select Editor is not a valid array');\n    }\n\n    // user can optionally add a blank entry at the beginning of the collection\n    if (this.collectionOptions && this.collectionOptions.addBlankEntry) {\n      collection.unshift(this.createBlankEntry());\n    }\n\n    let newCollection = collection || [];\n\n    // user might want to filter and/or sort certain items of the collection\n    newCollection = this.filterCollection(newCollection);\n    newCollection = this.sortCollection(newCollection);\n\n    // step 1, create HTML string template\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\n\n    // step 2, create the DOM Element of the editor\n    // also subscribe to the onClose event\n    this.createDomElement(editorTemplate);\n  }\n\n  protected buildTemplateHtmlString(collection: any[]) {\n    let options = '';\n    const separatorBetweenLabels = this.collectionOptions && this.collectionOptions.separatorBetweenTextLabels || '';\n    const isRenderHtmlEnabled = this.columnDef.internalColumnEditor.enableRenderHtml || false;\n    const sanitizedOptions = this.gridOptions && this.gridOptions.sanitizeHtmlOptions || {};\n\n    collection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example: { collection: [ { value: '1', label: 'One' } ])`);\n      }\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const labelText = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\n      const prefixText = option[this.labelPrefixName] || '';\n      const suffixText = option[this.labelSuffixName] || '';\n      let optionText = (prefixText + separatorBetweenLabels + labelText + separatorBetweenLabels + suffixText);\n\n      // if user specifically wants to render html text, he needs to opt-in else it will stripped out by default\n      // also, the 3rd party lib will saninitze any html code unless it's encoded, so we'll do that\n      if (isRenderHtmlEnabled) {\n        // sanitize any unauthorized html tags like script and others\n        // for the remaining allowed tags we'll permit all attributes\n        const sanitizedText = DOMPurify.sanitize(optionText, sanitizedOptions);\n        optionText = htmlEncode(sanitizedText);\n      }\n\n      options += `<option value=\"${option[this.valueName]}\">${optionText}</option>`;\n    });\n\n    return `<select id=\"${this.elementName}\" class=\"ms-filter search-filter\" ${this.isMultipleSelect ? 'multiple=\"multiple\"' : ''}>${options}</select>`;\n  }\n\n  /** Create a blank entry that can be added to the collection. It will also reuse the same customStructure if need be */\n  protected createBlankEntry() {\n    const blankEntry = {\n      [this.labelName]: '',\n      [this.valueName]: ''\n    };\n    if (this.labelPrefixName) {\n      blankEntry[this.labelPrefixName] = '';\n    }\n    if (this.labelSuffixName) {\n      blankEntry[this.labelSuffixName] = '';\n    }\n    return blankEntry;\n  }\n\n  /** Build the template HTML string */\n  protected createDomElement(editorTemplate: string) {\n    this.$editorElm = $(editorTemplate);\n\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\n      this.$editorElm.appendTo(this.args.container);\n    }\n\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\n      // fallback to bootstrap\n      this.$editorElm.addClass('form-control');\n    } else {\n      const elementOptions = (this.columnDef.internalColumnEditor) ? this.columnDef.internalColumnEditor.elementOptions : {};\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\n    }\n  }\n\n  // refresh the jquery object because the selected checkboxes were already set\n  // prior to this method being called\n  protected refresh() {\n    if (typeof this.$editorElm.multipleSelect === 'function') {\n      this.$editorElm.multipleSelect('refresh');\n    }\n  }\n}\n",
    "import { SelectEditor } from './selectEditor';\r\n\r\nexport class MultipleSelectEditor extends SelectEditor {\r\n  /**\r\n   * Initialize the Editor\r\n   */\r\n  constructor(protected args: any) {\r\n    super(args, true);\r\n  }\r\n}\r\n",
    "import { SelectEditor } from './selectEditor';\r\n\r\nexport class SingleSelectEditor extends SelectEditor {\r\n  /**\r\n   * Initialize the Editor\r\n   */\r\n  constructor(protected args: any) {\r\n    super(args, false);\r\n  }\r\n}\r\n",
    "import { Constants } from '../constants';\nimport { Column, Editor, EditorValidator, EditorValidatorOutput } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP = 1;\n\nexport class SliderEditor implements Editor {\n  private _elementRangeInputId: string;\n  private _elementRangeOutputId: string;\n  $editorElm: any;\n  $input: any;\n  $sliderNumber: any;\n  defaultValue: any;\n\n  constructor(private args: any) {\n    this.init();\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args && this.args.column || {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): any {\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\n  }\n\n  /** Getter for the Editor Generic Params */\n  private get editorParams(): any {\n    return this.columnEditor.params || {};\n  }\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator {\n    return this.columnEditor.validator || this.columnDef.validator;\n  }\n\n  init(): void {\n    const container = this.args.container;\n\n    // define the input & slider number IDs\n    const itemId = this.args && this.args.item && this.args.item.id;\n    this._elementRangeInputId = `rangeInput_${this.columnDef.field}_${itemId}`;\n    this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}_${itemId}`;\n\n    // create HTML string template\n    const editorTemplate = this.buildTemplateHtmlString();\n    this.$editorElm = $(editorTemplate);\n    this.$input = this.$editorElm.children('input');\n    this.$sliderNumber = this.$editorElm.children('div.input-group-addon.input-group-append').children();\n\n    // watch on change event\n    this.$editorElm\n      .appendTo(this.args.container)\n      .on('mouseup', (event: Event) => this.save());\n\n    // if user chose to display the slider number on the right side, then update it every time it changes\n    // we need to use both \"input\" and \"change\" event to be all cross-browser\n    if (!this.editorParams.hideSliderNumber) {\n      this.$editorElm.on('input change', (e: { target: HTMLInputElement }) => {\n        const value = e && e.target && e.target.value || '';\n        if (value) {\n          document.getElementById(this._elementRangeOutputId).innerHTML = e.target.value;\n        }\n      });\n    }\n  }\n\n  destroy() {\n    this.$editorElm.remove();\n  }\n\n  focus() {\n    this.$editorElm.focus();\n  }\n\n  save() {\n    this.args.commitChanges();\n  }\n\n  cancel() {\n    this.$input.val(this.defaultValue);\n    this.args.cancelChanges();\n  }\n\n  loadValue(item: any) {\n    // this.$input.val(this.defaultValue = item[this.columnDef.field]);\n    this.defaultValue = item[this.columnDef.field];\n    this.$input.val(this.defaultValue);\n    this.$input[0].defaultValue = this.defaultValue;\n    this.$sliderNumber.html(this.defaultValue);\n  }\n\n  serializeValue() {\n    return parseInt(this.$input.val() as string, 10) || 0;\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.columnDef.field] = state;\n  }\n\n  isValueChanged() {\n    const elmValue = this.$input.val();\n    return (!(elmValue === '' && this.defaultValue === null)) && (elmValue !== this.defaultValue);\n  }\n\n  validate(): EditorValidatorOutput {\n    const elmValue = this.$input.val();\n    const minValue = this.columnEditor.minValue;\n    const maxValue = this.columnEditor.maxValue;\n    const errorMsg = this.columnEditor.errorMessage;\n    const mapValidation = {\n      '{{minValue}}': minValue,\n      '{{maxValue}}': maxValue\n    };\n\n    if (this.validator) {\n      const validationResults = this.validator(elmValue);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    } else if (minValue !== undefined && (elmValue < minValue || elmValue > maxValue)) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString() {\n    const minValue = this.columnEditor.hasOwnProperty('minValue') ? this.columnEditor.minValue : DEFAULT_MIN_VALUE;\n    const maxValue = this.columnEditor.hasOwnProperty('maxValue') ? this.columnEditor.maxValue : DEFAULT_MAX_VALUE;\n    const defaultValue = this.editorParams.hasOwnProperty('sliderStartValue') ? this.editorParams.sliderStartValue : minValue;\n    const step = this.columnEditor.hasOwnProperty('valueStep') ? this.columnEditor.valueStep : DEFAULT_STEP;\n    const itemId = this.args && this.args.item && this.args.item.id;\n\n    if (this.editorParams.hideSliderNumber) {\n      return `\n      <div class=\"slider-editor\">\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\n          name=\"${this._elementRangeInputId}\"\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n          class=\"form-control slider-editor-input range\" />\n      </div>`;\n    }\n\n    return `\n      <div class=\"input-group slider-editor\">\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\n          name=\"${this._elementRangeInputId}\"\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n          class=\"form-control slider-editor-input range\" />\n        <div class=\"input-group-addon input-group-append slider-value\"><span class=\"input-group-text\" id=\"${this._elementRangeOutputId}\">${defaultValue}</span></div>\n      </div>`;\n  }\n}\n",
    "import { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class TextEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"text\" class=\"editor-text\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this.$input.val(val);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field] || '';\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue === null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { CheckboxEditor } from './checkboxEditor';\r\nimport { DateEditor } from './dateEditor';\r\nimport { FloatEditor } from './floatEditor';\r\nimport { IntegerEditor } from './integerEditor';\r\nimport { LongTextEditor } from './longTextEditor';\r\nimport { MultipleSelectEditor } from './multipleSelectEditor';\r\nimport { SingleSelectEditor } from './singleSelectEditor';\r\nimport { SliderEditor } from './sliderEditor';\r\nimport { TextEditor } from './textEditor';\r\n\r\nexport const Editors = {\r\n  /** Checkbox Editor (uses native checkbox DOM element) */\r\n  checkbox: CheckboxEditor,\r\n\r\n  /** Date Picker Editor (which uses 3rd party lib \"flatpickr\") */\r\n  date: DateEditor,\r\n\r\n  /** Float Number Editor */\r\n  float: FloatEditor,\r\n\r\n  /** Integer Editor */\r\n  integer: IntegerEditor,\r\n\r\n  /** Long Text Editor (uses a textarea) */\r\n  longText: LongTextEditor,\r\n\r\n  /** Multiple Select editor (which uses 3rd party lib \"multiple-select.js\") */\r\n  multipleSelect: MultipleSelectEditor,\r\n\r\n  /** Single Select editor (which uses 3rd party lib \"multiple-select.js\") */\r\n  singleSelect: SingleSelectEditor,\r\n\r\n  /** Slider Editor */\r\n  slider: SliderEditor,\r\n\r\n  /** Text Editor */\r\n  text: TextEditor\r\n};\r\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const arrayObjectToCsvFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\r\n  const propertyNames = columnDef && columnDef.params && columnDef.params.propertyNames;\r\n  const parentObjectKeyName = columnDef && columnDef.field && columnDef.field.split('.')[0]; // e.g. \"users.roles\" would be \"users\"\r\n\r\n  if (!propertyNames || !Array.isArray(propertyNames) || !parentObjectKeyName) {\r\n    throw new Error(`Formatters.arrayObjectToCsv requires you to pass an array of \"propertyNames\" (declared in \"params\") that you want to pull the data from.\r\n      For example, if we have an array of user objects that have the property of firstName & lastName then we need to pass in your column definition:: { params: { propertyNames: ['firtName'] }}`);\r\n  }\r\n\r\n  // the dataContext holds all the data, so we can find the values we want even when \"value\" argument might be null\r\n  // e.g. if we want to use the propertyNames of ['firstName', 'lastName'] from the \"users\" array of objects\r\n  if (dataContext[parentObjectKeyName] && Array.isArray(dataContext[parentObjectKeyName])) {\r\n    // we will 1st get the object from the dataContext, then\r\n    if (Array.isArray(dataContext[parentObjectKeyName])) {\r\n      const outputStrings = [];\r\n      dataContext[parentObjectKeyName].forEach((data) => {\r\n        const strings = [];\r\n\r\n        // 2nd from that data loop through all propertyNames we want to use (e.g.: ['firstName', 'lastName'])\r\n        propertyNames.forEach((prop) => {\r\n          strings.push(data[prop]);\r\n        });\r\n        // we will join these strings with spaces (e.g. 'John Doe' where 'John' was firstName and 'Doe' was lastName)\r\n        outputStrings.push(strings.join(' '));\r\n      });\r\n\r\n      // finally join all the output strings by CSV (e.g.: 'John Doe, Jane Doe')\r\n      const output = outputStrings.join(', ');\r\n      return `<span title=\"${output}\">${output}</span>`;\r\n    }\r\n  }\r\n  return '';\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const arrayToCsvFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && Array.isArray(value)) {\n    const values = value.join(', ');\n    return `<span title=\"${values}\">${values}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const boldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isNumber = (value === null || value === undefined) ? false : !isNaN(+value);\n  if (!isNumber) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  } else {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkboxFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? '&#x2611;' : '';\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkmarkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? `<i class=\"fa fa-check checkmark-icon\" aria-hidden=\"true\"></i>` : '';\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of a params collection\n */\nexport const collectionFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.params || !columnDef.params.collection\n    || !columnDef.params.collection.length) {\n    return '';\n  }\n\n  const { params, params: { collection } } = columnDef;\n  const labelName = (params.customStructure) ? params.customStructure.label : 'label';\n  const valueName = (params.customStructure) ? params.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of an editor collection\n */\nexport const collectionEditorFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.internalColumnEditor || !columnDef.internalColumnEditor.collection\n    || !columnDef.internalColumnEditor.collection.length) {\n    return '';\n  }\n\n  const { internalColumnEditor, internalColumnEditor: { collection } } = columnDef;\n  const labelName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.label : 'label';\n  const valueName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const complexObjectFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!columnDef) {\n    return '';\n  }\n  const complexField = columnDef.field || '';\n  return complexField.split('.').reduce((obj, i) => (obj ? obj[i] : ''), dataContext);\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\n\nexport const dateIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIso);\n\nexport const dateTimeIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIsoAmPm);\n\nexport const dateTimeIsoAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUsAmPm);\n\nexport const dateTimeUsAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUs);\n\nexport const dateTimeUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeShortIso);\r\n\r\nexport const dateTimeShortIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\r\n  const isDateValid = moment(value, FORMAT, false).isValid();\r\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\r\n};\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeShortUs);\r\n\r\nexport const dateTimeShortUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\r\n  const isDateValid = moment(value, FORMAT, false).isValid();\r\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\r\n};\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\n\nexport const dateUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const decimalFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const params = columnDef.params || {};\n  const minDecimalPlaces = params.minDecimalPlaces || params.decimalPlaces || 2;\n  const maxDecimalPlaces = params.maxDecimalPlaces || 2;\n  const isNumber = (value === null || value === undefined) ? false : !isNaN(+value);\n\n  return !isNumber ? value : `${decimalFormatted(value, minDecimalPlaces, maxDecimalPlaces)}`;\n};\n\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const deleteIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-trash pointer delete-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredBoldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isNumber = (value === null || value === undefined) ? false : !isNaN(+value);\n  const params = columnDef && columnDef.params || {};\n  const minDecimal = params.minDecimal || 2;\n  const maxDecimal = params.minDecimal || 4;\n  const outputValue = (isNumber && (params.minDecimal || params.maxDecimal)) ? decimalFormatted(value, minDecimal, maxDecimal) : value;\n\n  if (!isNumber) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">$${outputValue}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">$${outputValue}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isNumber = (value === null || value === undefined) ? false : !isNaN(+value);\n  const params = columnDef && columnDef.params || {};\n  const minDecimal = params.minDecimal || 2;\n  const maxDecimal = params.minDecimal || 4;\n  const outputValue = (isNumber && (params.minDecimal || params.maxDecimal)) ? decimalFormatted(value, minDecimal, maxDecimal) : value;\n\n  if (!isNumber) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green;\">$${outputValue}</span>`;\n  } else {\n    return `<span style=\"color:red;\">$${outputValue}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isNumber = (value === null || value === undefined) ? false : !isNaN(+value);\n  const params = columnDef && columnDef.params || {};\n  const minDecimal = params.minDecimal || 2;\n  const maxDecimal = params.minDecimal || 4;\n  const outputValue = (isNumber && (params.minDecimal || params.maxDecimal)) ? decimalFormatted(value, minDecimal, maxDecimal) : value;\n\n  return !isNumber ? '' : `$${outputValue}`;\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const editIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-pencil pointer edit-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const hyperlinkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && typeof value === 'string') {\n    const matchUrl = value.match(/^(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:\\/~\\+#]*[\\w\\-\\@?^=%&amp;\\/~\\+#])?/i);\n    if (matchUrl && Array.isArray(matchUrl)) {\n      return `<a href=\"${matchUrl[0]}\">' + value + '</a>`;\n    }\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\nexport const hyperlinkUriPrefixFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  let uriPrefix = (columnDef && columnDef.params && columnDef.params.uriPrefix) ? columnDef.params.uriPrefix : '';\n  if (!uriPrefix) {\n    throw new Error(`HyperlinkUriPrefix Formatter require a \"uriPrefix\" that can be passed through params. e.g.:: formatter: Formatters.hyperlinkUriPrefix, params: { uriPrefix: '/users/' }`);\n  }\n  if (value && uriPrefix && typeof uriPrefix === 'string' && !uriPrefix.includes('<script>')) {\n    uriPrefix += value;\n    return '<a href=\"' + uriPrefix + '\">' + value + '</a>';\n  }\n  return '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const infoIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-info-circle pointer info-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const lowercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toLowerCase() : '';\n};\n",
    "\nimport { Column, Formatter } from './../models/index';\n\n/**\n * Takes a value display it according to a mask provided\n * e.: 1234567890 with mask \"(000) 000-0000\" will display \"(123) 456-7890\"\n */\nexport const maskFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const params = columnDef.params || {};\n  const mask = params.mask;\n\n  if (!mask) {\n    throw new Error(`You must provide a \"mask\" via the generic \"params\" options (e.g.: { formatter: Formatters.mask, params: { mask: '000-000' }}`);\n  }\n\n  if (value && mask) {\n    let i = 0;\n    const v = value.toString();\n    return mask.replace(/[09A]/g, () => v[i++] || '');\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\nexport const multipleFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const params = columnDef.params || {};\n  if (!params.formatters || !Array.isArray(params.formatters)) {\n    throw new Error(`The multiple formatter requires the \"formatters\" to be provided as a column params.\n    For example: this.columnDefinitions = [{ id: title, field: title, formatter: Formatters.multiple, params: { formatters: [Formatters.lowercase, Formatters.uppercase] }`);\n  }\n  const formatters: Formatter[] = params.formatters;\n\n  // loop through all Formatters, the value of 1st formatter will be used by 2nd formatter and so on.\n  // they are piped and executed in sequences\n  let currentValue = value;\n  for (const formatter of formatters) {\n    currentValue = formatter(row, cell, currentValue, columnDef, dataContext, grid);\n  }\n  return currentValue;\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  if (value === null || value === '') {\r\n    return '';\r\n  }\r\n\r\n  const outputValue = value > 0 ? value / 100 : 0;\r\n  return `<span>${outputValue}%</span>`;\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'red';\n  } else if (value < 70) {\n    color = 'silver';\n  } else {\n    color = 'green';\n  }\n\n  return `<span class=\"percent-complete-bar\" style=\"background:${color}; width:${value}%\"></span>`;\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '-';\n  } else if (value < 50) {\n    return `<span style='color:red;font-weight:bold;'>${value}%</span>`;\n  } else {\n    return `<span style='color:green'>${value}%</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentSymbolFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  return value ? `<span>${value}%</span>` : '';\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const progressBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'danger';\n  } else if (value < 70) {\n    color = 'warning';\n  } else {\n    color = 'success';\n  }\n\n  return `<div class=\"progress\">\n    <div class=\"progress-bar progress-bar-${color} bg-${color}\" role=\"progressbar\" aria-valuenow=\"${value}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"min-width: 2em; width: ${value}%;\">\n    ${value}%\n    </div>\n  </div>`;\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a cell value and translates it with the \"ngx-translate\" service */\nexport const translateFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? translate.instant(value) : '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a boolean value, cast it to upperCase string and finally translates it with the \"ngx-translate\" service */\nexport const translateBooleanFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n  return value ? translate.instant(value.toUpperCase() as string) : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const uppercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toUpperCase() : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const yesNoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string =>\n  value ? 'Yes' : 'No';\n",
    "import { Column } from './../models/index';\r\nimport { arrayObjectToCsvFormatter } from './arrayObjectToCsvFormatter';\r\nimport { arrayToCsvFormatter } from './arrayToCsvFormatter';\r\nimport { boldFormatter } from './boldFormatter';\r\nimport { checkboxFormatter } from './checkboxFormatter';\r\nimport { checkmarkFormatter } from './checkmarkFormatter';\r\nimport { collectionFormatter } from './collectionFormatter';\r\nimport { collectionEditorFormatter } from './collectionEditorFormatter';\r\nimport { complexObjectFormatter } from './complexObjectFormatter';\r\nimport { dateIsoFormatter } from './dateIsoFormatter';\r\nimport { dateTimeIsoFormatter } from './dateTimeIsoFormatter';\r\nimport { dateTimeIsoAmPmFormatter } from './dateTimeIsoAmPmFormatter';\r\nimport { dateTimeUsAmPmFormatter } from './dateTimeUsAmPmFormatter';\r\nimport { dateTimeUsFormatter } from './dateTimeUsFormatter';\r\nimport { dateTimeShortIsoFormatter } from './dateTimeShortIsoFormatter';\r\nimport { dateTimeShortUsFormatter } from './dateTimeShortUsFormatter';\r\nimport { dateUsFormatter } from './dateUsFormatter';\r\nimport { decimalFormatter } from './decimalFormatter';\r\nimport { deleteIconFormatter } from './deleteIconFormatter';\r\nimport { dollarColoredBoldFormatter } from './dollarColoredBoldFormatter';\r\nimport { dollarColoredFormatter } from './dollarColoredFormatter';\r\nimport { dollarFormatter } from './dollarFormatter';\r\nimport { editIconFormatter } from './editIconFormatter';\r\nimport { hyperlinkFormatter } from './hyperlinkFormatter';\r\nimport { hyperlinkUriPrefixFormatter } from './hyperlinkUriPrefixFormatter';\r\nimport { infoIconFormatter } from './infoIconFormatter';\r\nimport { lowercaseFormatter } from './lowercaseFormatter';\r\nimport { maskFormatter } from './maskFormatter';\r\nimport { multipleFormatter } from './multipleFormatter';\r\nimport { percentFormatter } from './percentFormatter';\r\nimport { percentCompleteBarFormatter } from './percentCompleteBarFormatter';\r\nimport { percentCompleteFormatter } from './percentCompleteFormatter';\r\nimport { percentSymbolFormatter } from './percentSymbolFormatter';\r\nimport { progressBarFormatter } from './progressBarFormatter';\r\nimport { translateFormatter } from './translateFormatter';\r\nimport { translateBooleanFormatter } from './translateBooleanFormatter';\r\nimport { uppercaseFormatter } from './uppercaseFormatter';\r\nimport { yesNoFormatter } from './yesNoFormatter';\r\n\r\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\r\nexport const Formatters = {\r\n  /**\r\n   * Takes an array of complex objects converts it to a comma delimited string.\r\n   * Requires to pass an array of \"propertyNames\" in the column definition the generic \"params\" property\r\n   * For example, if we have an array of user objects that have the property of firstName & lastName then we need to pass in your column definition::\r\n   * { params: { propertyNames: ['firtName'] }}\r\n   */\r\n  arrayObjectToCsv: arrayObjectToCsvFormatter,\r\n\r\n  /** Takes an array of string and converts it to a comma delimited string */\r\n  arrayToCsv: arrayToCsvFormatter,\r\n\r\n  /** show value in bold font weight as well */\r\n  bold: boldFormatter,\r\n\r\n  /** When value is filled (true), it will display a checkbox Unicode icon */\r\n  checkbox: checkboxFormatter,\r\n\r\n  /** When value is filled (true), it will display a Font-Awesome icon (fa-check) */\r\n  checkmark: checkmarkFormatter,\r\n\r\n  /** Takes a complex data object and return the data under that property (for example: \"user.firstName\" will return the first name \"John\") */\r\n  complexObject: complexObjectFormatter,\r\n\r\n  /**\r\n   * Looks up values from the columnDefinition.params.collection property and displays the label in CSV or string format\r\n   * @example\r\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\r\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\r\n   * const dataset = [{ value: 1 },{ value: 2 }];\r\n   */\r\n  collection: collectionFormatter,\r\n\r\n  /**\r\n   * Looks up values from the columnDefinition.editor.collection property and displays the label in CSV or string format\r\n   * @example\r\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\r\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\r\n   * const dataset = [{ value: 1 },{ value: 2 }];\r\n   */\r\n  collectionEditor: collectionEditorFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date format */\r\n  dateIso: dateIsoFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date+Time format */\r\n  dateTimeIso: dateTimeIsoFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date+Time (without seconds) format */\r\n  dateTimeShortIso: dateTimeShortIsoFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date+Time+(am/pm) format */\r\n  dateTimeIsoAmPm: dateTimeIsoAmPmFormatter,\r\n\r\n  /** Takes a Date object and displays it as an US Date format */\r\n  dateUs: dateUsFormatter,\r\n\r\n  /** Takes a Date object and displays it as an US Date+Time format */\r\n  dateTimeUs: dateTimeUsFormatter,\r\n\r\n  /** Takes a Date object and displays it as an US Date+Time (without seconds) format */\r\n  dateTimeShortUs: dateTimeShortUsFormatter,\r\n\r\n  /** Takes a Date object and displays it as an US Date+Time+(am/pm) format */\r\n  dateTimeUsAmPm: dateTimeUsAmPmFormatter,\r\n\r\n  /** Displays a Font-Awesome delete icon (fa-trash) */\r\n  deleteIcon: deleteIconFormatter,\r\n\r\n  /**\r\n   * Display the value as x decimals formatted, defaults to 2 decimals.\r\n   * You can pass \"decimalPlaces\" or \"minDecimalPlaces\" and/or \"maxDecimalPlaces\" to the \"params\" property.\r\n   * For example:: `{ formatter: Formatters.decimal, params: { decimalPlaces: 3 }}`\r\n   * The property \"decimalPlaces\" is an alias of \"minDecimalPlaces\"\r\n   */\r\n  decimal: decimalFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value */\r\n  dollar: dollarFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value */\r\n  dollarColored: dollarColoredFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value, show it in bold font weight as well */\r\n  dollarColoredBold: dollarColoredBoldFormatter,\r\n\r\n  /** Displays a Font-Awesome edit icon (fa-pencil) */\r\n  editIcon: editIconFormatter,\r\n\r\n  /** Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https). The structure will be \"<a href=\"hyperlink\">hyperlink</a>\" */\r\n  hyperlink: hyperlinkFormatter,\r\n\r\n  /** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\r\n  hyperlinkUriPrefix: hyperlinkUriPrefixFormatter,\r\n\r\n  /** Displays a Font-Awesome edit icon (fa-info-circle) */\r\n  infoIcon: infoIconFormatter,\r\n\r\n  /** Takes a value and displays it all lowercase */\r\n  lowercase: lowercaseFormatter,\r\n\r\n  /**\r\n   * Takes a value display it according to a mask provided\r\n   * e.: 1234567890 with mask \"(000) 000-0000\" will display \"(123) 456-7890\"\r\n   */\r\n  mask: maskFormatter,\r\n\r\n  /**\r\n   * You can pipe multiple formatters (executed in sequence), use params to pass the list of formatters.\r\n   * Requires to pass an array of \"formatters\" in the column definition the generic \"params\" property\r\n   * For example::\r\n   * { field: 'title', formatter: Formatters.multiple, params: { formatters: [ Formatters.lowercase, Formatters.uppercase ] }\r\n   */\r\n  multiple: multipleFormatter,\r\n\r\n  /** Takes a cell value number (between 0.0-1.0) and displays a red (<50) or green (>=50) bar */\r\n  percent: percentFormatter,\r\n\r\n  /** Takes a cell value number (between 0.0-100) and displays a red (<50) or green (>=50) bar */\r\n  percentComplete: percentCompleteFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"percent-complete-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\r\n  percentCompleteBar: percentCompleteBarFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and add the \"%\" after the number */\r\n  percentSymbol: percentSymbolFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"progress-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\r\n  progressBar: progressBarFormatter,\r\n\r\n  /** Takes a cell value and translates it (i18n). Requires an instance of the Translate Service:: `i18n: this.translate */\r\n  translate: translateFormatter,\r\n\r\n  /** Takes a boolean value, cast it to upperCase string and finally translates it (i18n). */\r\n  translateBoolean: translateBooleanFormatter,\r\n\r\n  /** Takes a value and displays it all uppercase */\r\n  uppercase: uppercaseFormatter,\r\n\r\n  /** Takes a boolean value and display a string 'Yes' or 'No' */\r\n  yesNo: yesNoFormatter\r\n};\r\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsPercentageFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + '%' + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const avgTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 4) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const minTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.min && totals.min[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const maxTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.max && totals.max[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 4) + suffix}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 2) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}`;\n  }\n  return '';\n};\n",
    "import { Column } from './../models/index';\nimport { avgTotalsPercentageFormatter } from './avgTotalsPercentageFormatter';\nimport { avgTotalsDollarFormatter } from './avgTotalsDollarFormatter';\nimport { avgTotalsFormatter } from './avgTotalsFormatter';\nimport { minTotalsFormatter } from './minTotalsFormatter';\nimport { maxTotalsFormatter } from './maxTotalsFormatter';\nimport { sumTotalsColoredFormatter } from './sumTotalsColoredFormatter';\nimport { sumTotalsDollarColoredBoldFormatter } from './sumTotalsDollarColoredBoldFormatter';\nimport { sumTotalsDollarColoredFormatter } from './sumTotalsDollarColoredFormatter';\nimport { sumTotalsDollarBoldFormatter } from './sumTotalsDollarBoldFormatter';\nimport { sumTotalsDollarFormatter } from './sumTotalsDollarFormatter';\nimport { sumTotalsFormatter } from './sumTotalsFormatter';\nimport { sumTotalsBoldFormatter } from './sumTotalsBoldFormatter';\n\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const GroupTotalFormatters = {\n  /**\n   * Average all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotals: avgTotalsFormatter,\n\n  /**\n   * Average all the column totals and display '$' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsDollar: avgTotalsDollarFormatter,\n\n  /**\n   * Average all the column totals and display '%' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsPercentage: avgTotalsPercentageFormatter,\n\n  /**\n   * Show max value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  maxTotals: maxTotalsFormatter,\n\n  /**\n   * Show min value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  minTotals: minTotalsFormatter,\n\n  /**\n   * Sums up all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotals: sumTotalsFormatter,\n\n  /**\n   * Sums up all the column totals and display it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsBold: sumTotalsBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsColored: sumTotalsColoredFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollar: sumTotalsDollarFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign and show it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarBold: sumTotalsDollarBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColored: sumTotalsDollarColoredFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value, show it in bold font weight as well\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColoredBold: sumTotalsDollarColoredBoldFormatter,\n};\n",
    "import { Pagination } from './../models/pagination.interface';\r\nimport { AfterViewInit, Component, EventEmitter, Injectable, Input, OnDestroy, Output } from '@angular/core';\r\nimport { castToPromise } from './../services/utilities';\r\nimport { GridOption } from './../models/index';\r\nimport { FilterService } from './../services/index';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n@Component({\r\n  selector: 'slick-pagination',\r\n  template: `<div class=\"slick-pagination\">\r\n    <div class=\"slick-pagination-nav\">\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-first fa fa-angle-double-left\" aria-label=\"First\" (click)=\"changeToFirstPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-prev fa fa-angle-left\" aria-label=\"Previous\" (click)=\"changeToPreviousPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n\r\n        <div class=\"slick-page-number\">\r\n            <span [translate]=\"'PAGE'\"></span>\r\n            <input type=\"text\" class=\"form-control\" value=\"{{pageNumber}}\" size=\"1\"  (change)=\"changeToCurrentPage($event)\">\r\n            <span [translate]=\"'OF'\"></span><span> {{pageCount}}</span>\r\n        </div>\r\n\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-next text-center fa fa-lg fa-angle-right\" aria-label=\"Next\" (click)=\"changeToNextPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-end fa fa-lg fa-angle-double-right\" aria-label=\"Last\" (click)=\"changeToLastPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n    </div>\r\n    <span class=\"slick-pagination-settings\">\r\n        <select id=\"items-per-page-label\" [value]=\"itemsPerPage\" (change)=\"onChangeItemPerPage($event)\">\r\n        <option value=\"{{pageSize}}\" *ngFor=\"let pageSize of paginationPageSizes;\">{{pageSize}}</option>\r\n        </select>\r\n        <span [translate]=\"'ITEMS_PER_PAGE'\"></span>,\r\n        <span class=\"slick-pagination-count\">\r\n            <span [translate]=\"'FROM_TO_OF_TOTAL_ITEMS'\" [translateParams]=\"{ from: dataFrom, to: dataTo, totalItems: totalItems }\"></span>\r\n        </span>\r\n    </span>\r\n    </div>\r\n`\r\n})\r\n@Injectable()\r\nexport class SlickPaginationComponent implements AfterViewInit, OnDestroy {\r\n  private _filterSubcription: Subscription;\r\n  private _gridPaginationOptions: GridOption;\r\n  private _isFirstRender = true;\r\n  @Output() onPaginationChanged = new EventEmitter<Pagination>();\r\n\r\n  @Input()\r\n  set gridPaginationOptions(gridPaginationOptions: GridOption) {\r\n    this._gridPaginationOptions = gridPaginationOptions;\r\n    if (this._isFirstRender || !gridPaginationOptions || !gridPaginationOptions.pagination || (gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n      this._isFirstRender = false;\r\n    }\r\n  }\r\n  get gridPaginationOptions(): GridOption {\r\n    return this._gridPaginationOptions;\r\n  }\r\n  @Input() grid: any;\r\n  dataFrom = 1;\r\n  dataTo = 1;\r\n  itemsPerPage: number;\r\n  pageCount = 0;\r\n  pageNumber = 1;\r\n  totalItems = 0;\r\n  paginationCallback: Function;\r\n  paginationPageSizes = [25, 75, 100];\r\n  fromToParams: any = { from: this.dataFrom, to: this.dataTo, totalItems: this.totalItems };\r\n\r\n  /** Constructor */\r\n  constructor(private filterService: FilterService) { }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._gridPaginationOptions = this._gridPaginationOptions;\r\n    if (!this._gridPaginationOptions || !this._gridPaginationOptions.pagination || (this._gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n    }\r\n\r\n    // Subscribe to Event Emitter of Filter & Sort changed, go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterChanged.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n    // Subscribe to Filter clear and go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterCleared.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n  }\r\n\r\n  ceil(number: number) {\r\n    return Math.ceil(number);\r\n  }\r\n\r\n  changeToFirstPage(event: any) {\r\n    this.pageNumber = 1;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToLastPage(event: any) {\r\n    this.pageNumber = this.pageCount;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToNextPage(event: any) {\r\n    if (this.pageNumber < this.pageCount) {\r\n      this.pageNumber++;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToPreviousPage(event: any) {\r\n    if (this.pageNumber > 0) {\r\n      this.pageNumber--;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToCurrentPage(event: any) {\r\n    this.pageNumber = event.currentTarget.value;\r\n    if (this.pageNumber < 1) {\r\n          this.pageNumber = 1;\r\n    } else if (this.pageNumber > this.pageCount) {\r\n          this.pageNumber = this.pageCount;\r\n    }\r\n\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  dispose() {\r\n    this.onPaginationChanged.unsubscribe();\r\n    if (this._filterSubcription) {\r\n      this._filterSubcription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  onChangeItemPerPage(event: any) {\r\n    const itemsPerPage = +event.target.value;\r\n    this.pageCount = Math.ceil(this.totalItems / itemsPerPage);\r\n    this.pageNumber = 1;\r\n    this.itemsPerPage = itemsPerPage;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  refreshPagination(isPageNumberReset: boolean = false) {\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this._gridPaginationOptions && this._gridPaginationOptions.pagination) {\r\n      const pagination = this._gridPaginationOptions.pagination;\r\n      // set the number of items per page if not already set\r\n      if (!this.itemsPerPage) {\r\n        this.itemsPerPage = +((backendApi && backendApi.options && backendApi.options.paginationOptions && backendApi.options.paginationOptions.first) ? backendApi.options.paginationOptions.first : this._gridPaginationOptions.pagination.pageSize);\r\n      }\r\n\r\n      // if totalItems changed, we should always go back to the first page and recalculation the From-To indexes\r\n      if (isPageNumberReset || this.totalItems !== pagination.totalItems) {\r\n        if (this._isFirstRender && pagination.pageNumber && pagination.pageNumber > 1) {\r\n          this.pageNumber = pagination.pageNumber || 1;\r\n        } else {\r\n          this.pageNumber = 1;\r\n        }\r\n\r\n        // when page number is set to 1 then also reset the \"offset\" of backend service\r\n        if (this.pageNumber === 1) {\r\n          backendApi.service.resetPaginationOptions();\r\n        }\r\n      }\r\n\r\n      // calculate and refresh the multiple properties of the pagination UI\r\n      this.paginationPageSizes = this._gridPaginationOptions.pagination.pageSizes;\r\n      this.totalItems = this._gridPaginationOptions.pagination.totalItems;\r\n      this.recalculateFromToIndexes();\r\n    }\r\n    this.pageCount = Math.ceil(this.totalItems / this.itemsPerPage);\r\n  }\r\n\r\n  async onPageChanged(event: Event | undefined, pageNumber: number) {\r\n    this.recalculateFromToIndexes();\r\n\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this.dataTo > this.totalItems) {\r\n      this.dataTo = this.totalItems;\r\n    } else if (this.totalItems < this.itemsPerPage) {\r\n      this.dataTo = this.totalItems;\r\n    }\r\n    if (backendApi) {\r\n      const itemsPerPage = +this.itemsPerPage;\r\n\r\n      // keep start time & end timestamps & return it after process execution\r\n      const startTime = new Date();\r\n\r\n      if (backendApi.preProcess) {\r\n        backendApi.preProcess();\r\n      }\r\n\r\n      const query = backendApi.service.processOnPaginationChanged(event, { newPage: pageNumber, pageSize: itemsPerPage });\r\n\r\n      // the process could be an Observable (like HttpClient) or a Promise\r\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n      const observableOrPromise = backendApi.process(query);\r\n      const processResult = await castToPromise(observableOrPromise);\r\n      const endTime = new Date();\r\n\r\n      // from the result, call our internal post process to update the Dataset and Pagination info\r\n      if (processResult && backendApi.internalPostProcess) {\r\n        backendApi.internalPostProcess(processResult);\r\n      }\r\n\r\n      // send the response process to the postProcess callback\r\n      if (backendApi.postProcess) {\r\n        if (processResult instanceof Object) {\r\n          processResult.statistics = {\r\n            startTime,\r\n            endTime,\r\n            executionTime: endTime.valueOf() - startTime.valueOf(),\r\n            itemCount: this.totalItems,\r\n            totalItemCount: this.totalItems\r\n          };\r\n        }\r\n        backendApi.postProcess(processResult);\r\n      }\r\n    } else {\r\n      throw new Error('Pagination with a backend service requires \"BackendServiceApi\" to be defined in your grid options');\r\n    }\r\n\r\n    // emit the changes to the parent component\r\n    this.onPaginationChanged.emit({\r\n      pageNumber: this.pageNumber,\r\n      pageSizes: this.paginationPageSizes,\r\n      pageSize: this.itemsPerPage,\r\n      totalItems: this.totalItems\r\n    });\r\n  }\r\n\r\n  recalculateFromToIndexes() {\r\n    this.dataFrom = (this.pageNumber * this.itemsPerPage) - this.itemsPerPage + 1;\r\n    this.dataTo = (this.totalItems < this.itemsPerPage) ? this.totalItems : (this.pageNumber * this.itemsPerPage);\r\n  }\r\n}\r\n",
    "// import 3rd party vendor libs\nimport 'jquery-ui-dist/jquery-ui';\nimport 'slickgrid/lib/jquery.event.drag-2.3.0';\nimport 'slickgrid/slick.core';\nimport 'slickgrid/slick.grid';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.groupitemmetadataprovider';\nimport 'slickgrid/controls/slick.columnpicker';\nimport 'slickgrid/controls/slick.gridmenu';\nimport 'slickgrid/controls/slick.pager';\nimport 'slickgrid/plugins/slick.autotooltips';\nimport 'slickgrid/plugins/slick.cellexternalcopymanager';\nimport 'slickgrid/plugins/slick.cellrangedecorator';\nimport 'slickgrid/plugins/slick.cellrangeselector';\nimport 'slickgrid/plugins/slick.cellselectionmodel';\nimport 'slickgrid/plugins/slick.checkboxselectcolumn';\nimport 'slickgrid/plugins/slick.headerbuttons';\nimport 'slickgrid/plugins/slick.headermenu';\nimport 'slickgrid/plugins/slick.rowmovemanager';\nimport 'slickgrid/plugins/slick.rowselectionmodel';\nimport { AfterViewInit, Component, EventEmitter, Inject, Injectable, Input, Output, OnDestroy, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, titleCase, unsubscribeAllObservables } from './../services/utilities';\nimport { GlobalGridOptions } from './../global-grid-options';\nimport {\n  AngularGridInstance,\n  BackendServiceOption,\n  Column,\n  GraphqlResult,\n  GridOption,\n  GridStateChange,\n  GridStateType,\n  Pagination,\n} from './../models/index';\nimport { ControlAndPluginService } from './../services/controlAndPlugin.service';\nimport { ExportService } from './../services/export.service';\nimport { FilterService } from './../services/filter.service';\nimport { GraphqlService } from './../services/graphql.service';\nimport { GridEventService } from './../services/gridEvent.service';\nimport { GridService } from './../services/grid.service';\nimport { GridStateService } from './../services/gridState.service';\nimport { GroupingAndColspanService } from './../services/groupingAndColspan.service';\nimport { ResizerService } from './../services/resizer.service';\nimport { SortService } from './../services/sort.service';\nimport { FilterFactory } from '../filters/filterFactory';\nimport { SlickgridConfig } from '../slickgrid-config';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\nconst slickgridEventPrefix = 'sg';\n\n@Injectable()\n@Component({\n  selector: 'angular-slickgrid',\n  template: `<div id=\"slickGridContainer-{{gridId}}\" class=\"gridPane\" [style.width]=\"gridWidthString\">\r\n    <div attr.id='{{gridId}}' class=\"slickgrid-container\" style=\"width: 100%\" [style.height]=\"gridHeightString\">\r\n    </div>\r\n\r\n    <slick-pagination id=\"slickPagingContainer-{{gridId}}\"\r\n        *ngIf=\"showPagination\"\r\n        (onPaginationChanged)=\"paginationChanged($event)\"\r\n        [gridPaginationOptions]=\"gridPaginationOptions\">\r\n    </slick-pagination>\r\n</div>\r\n`,\n  providers: [\n    ControlAndPluginService,\n    ExportService,\n    FilterFactory,\n    FilterService,\n    GraphqlService,\n    GridEventService,\n    GridService,\n    GridStateService,\n    GroupingAndColspanService,\n    ResizerService,\n    SortService,\n    SlickgridConfig\n  ]\n})\nexport class AngularSlickgridComponent implements AfterViewInit, OnDestroy, OnInit {\n  private _dataset: any[];\n  private _columnDefinitions: Column[];\n  private _dataView: any;\n  private _eventHandler: any = new Slick.EventHandler();\n  grid: any;\n  gridPaginationOptions: GridOption;\n  gridHeightString: string;\n  gridWidthString: string;\n  groupingDefinition: any = {};\n  groupItemMetadataProvider: any;\n  showPagination = false;\n  isGridInitialized = false;\n  subscriptions: Subscription[] = [];\n\n  @Output() onAngularGridCreated = new EventEmitter<AngularGridInstance>();\n  @Output() onDataviewCreated = new EventEmitter<any>();\n  @Output() onGridCreated = new EventEmitter<any>();\n  @Output() onGridInitialized = new EventEmitter<any>();\n  @Output() onBeforeGridCreate = new EventEmitter<boolean>();\n  @Output() onBeforeGridDestroy = new EventEmitter<any>();\n  @Output() onAfterGridDestroyed = new EventEmitter<boolean>();\n  @Output() onGridStateChanged = new EventEmitter<GridStateChange>();\n  @Input() gridId: string;\n  @Input() gridOptions: GridOption;\n  @Input() gridHeight = 0;\n  @Input() gridWidth = 0;\n\n  @Input()\n  set columnDefinitions(columnDefinitions: Column[]) {\n    this._columnDefinitions = columnDefinitions;\n    if (this.isGridInitialized) {\n      this.updateColumnDefinitionsList(columnDefinitions);\n    }\n  }\n  get columnDefinitions(): Column[] {\n    return this._columnDefinitions;\n  }\n  @Input()\n  set dataset(dataset: any[]) {\n    this._dataset = dataset;\n    this.refreshGridData(dataset);\n  }\n  get dataset(): any[] {\n    return this._dataView.getItems();\n  }\n\n\n  constructor(\n    private controlAndPluginService: ControlAndPluginService,\n    private elm: ElementRef,\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private gridService: GridService,\n    private gridEventService: GridEventService,\n    private gridStateService: GridStateService,\n    private groupingAndColspanService: GroupingAndColspanService,\n    private resizer: ResizerService,\n    private sortService: SortService,\n    private translate: TranslateService,\n    @Inject('config') private forRootConfig: GridOption\n  ) {}\n\n  ngOnInit(): void {\n    this.onBeforeGridCreate.emit(true);\n    if (!this.gridOptions.enableAutoResize && !this.gridOptions.autoResize) {\n      this.gridHeightString = `${this.gridHeight}px`;\n      this.gridWidthString = `${this.gridWidth}px`;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.onBeforeGridDestroy.emit(this.grid);\n    this.destroy();\n    this.onAfterGridDestroyed.emit(true);\n  }\n\n  destroy(emptyDomElementContainer = false) {\n    this._dataView = [];\n    this.gridOptions = {};\n    this._eventHandler.unsubscribeAll();\n    this.controlAndPluginService.dispose();\n    this.filterService.dispose();\n    this.gridEventService.dispose();\n    this.gridStateService.dispose();\n    this.groupingAndColspanService.dispose();\n    this.resizer.dispose();\n    this.sortService.dispose();\n    this.grid.destroy();\n\n    if (emptyDomElementContainer) {\n      $(this.gridOptions.gridContainerId).empty();\n    }\n\n    // also unsubscribe all RxJS subscriptions\n    this.subscriptions = unsubscribeAllObservables(this.subscriptions);\n  }\n\n  ngAfterViewInit() {\n    this.initialization();\n    this.isGridInitialized = true;\n  }\n\n  initialization() {\n    // make sure the dataset is initialized (if not it will throw an error that it cannot getLength of null)\n    this._dataset = this._dataset || [];\n    this.gridOptions = this.mergeGridOptions(this.gridOptions);\n    this.createBackendApiInternalPostProcessCallback(this.gridOptions);\n\n    if (this.gridOptions.enableGrouping) {\n      this.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\n      this._dataView = new Slick.Data.DataView({ groupItemMetadataProvider: this.groupItemMetadataProvider });\n    } else {\n      this._dataView = new Slick.Data.DataView();\n    }\n\n    // for convenience, we provide the property \"editor\" as an Angular-Slickgrid editor complex object\n    // however \"editor\" is used internally by SlickGrid for it's own Editor Factory\n    // so in our lib we will swap \"editor\" and copy it into a new property called \"internalColumnEditor\"\n    // then take back \"editor.model\" and make it the new \"editor\" so that SlickGrid Editor Factory still works\n    this._columnDefinitions = this._columnDefinitions.map((column: Column | any) => {\n      // on every Editor that have a \"collectionAsync\", resolve the data and assign it to the \"collection\" property\n      if (column.editor && column.editor.collectionAsync) {\n        this.loadEditorCollectionAsync(column);\n      }\n      return { ...column, editor: column.editor && column.editor.model, internalColumnEditor: { ...column.editor  }};\n    });\n\n    this.controlAndPluginService.createCheckboxPluginBeforeGridCreation(this._columnDefinitions, this.gridOptions);\n    this.grid = new Slick.Grid(`#${this.gridId}`, this._dataView, this._columnDefinitions, this.gridOptions);\n\n    this.controlAndPluginService.attachDifferentControlOrPlugins(this.grid, this._dataView, this.groupItemMetadataProvider);\n    this.attachDifferentHooks(this.grid, this.gridOptions, this._dataView);\n\n    // emit the Grid & DataView object to make them available in parent component\n    this.onGridCreated.emit(this.grid);\n    this.onDataviewCreated.emit(this._dataView);\n\n    this.grid.init();\n    this._dataView.beginUpdate();\n    this._dataView.setItems(this._dataset, this.gridOptions.datasetIdPropertyName);\n    this._dataView.endUpdate();\n\n    // after the DataView is created & updated execute some processes\n    this.executeAfterDataviewCreated(this.grid, this.gridOptions, this._dataView);\n\n    // attach resize ONLY after the dataView is ready\n    this.attachResizeHook(this.grid, this.gridOptions);\n\n    // attach grouping and header grouping colspan service\n    if (this.gridOptions.createPreHeaderPanel) {\n      this.groupingAndColspanService.init(this.grid, this._dataView);\n    }\n\n    // attach grid  service\n    this.gridService.init(this.grid, this._dataView);\n\n    // when user enables translation, we need to translate Headers on first pass & subsequently in the attachDifferentHooks\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders();\n    }\n\n    // if Export is enabled, initialize the service with the necessary grid and other objects\n    if (this.gridOptions.enableExport) {\n      this.exportService.init(this.grid, this._dataView);\n    }\n\n    // once all hooks are in placed and the grid is initialized, we can emit an event\n    this.onGridInitialized.emit(this.grid);\n\n    // attach the Backend Service API callback functions only after the grid is initialized\n    // because the preProcess() and onInit() might get triggered\n    if (this.gridOptions && this.gridOptions.backendServiceApi) {\n      this.attachBackendCallbackFunctions(this.gridOptions);\n    }\n\n    this.gridStateService.init(this.grid, this.controlAndPluginService, this.filterService, this.sortService);\n\n    this.onAngularGridCreated.emit({\n      // Slick Grid & DataView objects\n      dataView: this._dataView,\n      slickGrid: this.grid,\n\n      // public methods\n      destroy: this.destroy.bind(this),\n\n      // return all available Services (non-singleton)\n      backendService: this.gridOptions && this.gridOptions.backendServiceApi && this.gridOptions.backendServiceApi.service,\n      exportService: this.exportService,\n      filterService: this.filterService,\n      gridEventService: this.gridEventService,\n      gridStateService: this.gridStateService,\n      gridService: this.gridService,\n      groupingService: this.groupingAndColspanService,\n      pluginService: this.controlAndPluginService,\n      resizerService: this.resizer,\n      sortService: this.sortService,\n    });\n  }\n\n  /**\n   * Define what our internal Post Process callback, it will execute internally after we get back result from the Process backend call\n   * For now, this is GraphQL Service only feature and it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n   */\n  createBackendApiInternalPostProcessCallback(gridOptions: GridOption) {\n    if (gridOptions && gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      // internalPostProcess only works with a GraphQL Service, so make sure it is that type\n      if (backendApi && backendApi.service && backendApi.service instanceof GraphqlService) {\n        backendApi.internalPostProcess = (processResult: any) => {\n          const datasetName = (backendApi && backendApi.service && typeof backendApi.service.getDatasetName === 'function') ? backendApi.service.getDatasetName() : '';\n          if (processResult && processResult.data && processResult.data[datasetName]) {\n            this._dataset = processResult.data[datasetName].nodes;\n            this.refreshGridData(this._dataset, processResult.data[datasetName].totalCount);\n          } else {\n            this._dataset = [];\n          }\n        };\n      }\n    }\n  }\n\n  attachDifferentHooks(grid: any, gridOptions: GridOption, dataView: any) {\n    // on locale change, we have to manually translate the Headers, GridMenu\n    this.subscriptions.push(\n      this.translate.onLangChange.subscribe((event) => {\n        if (gridOptions.enableTranslate) {\n          this.controlAndPluginService.translateColumnHeaders();\n          this.controlAndPluginService.translateColumnPicker();\n          this.controlAndPluginService.translateGridMenu();\n          this.controlAndPluginService.translateHeaderMenu();\n        }\n      })\n    );\n\n    // if user entered some Columns \"presets\", we need to reflect them all in the grid\n    if (gridOptions.presets && Array.isArray(gridOptions.presets.columns) && gridOptions.presets.columns.length > 0) {\n      const gridColumns: Column[] = this.gridStateService.getAssociatedGridColumns(grid, gridOptions.presets.columns);\n      if (gridColumns && Array.isArray(gridColumns) && gridColumns.length > 0) {\n        // make sure that the checkbox selector is also visible if it is enabled\n        if (gridOptions.enableCheckboxSelector) {\n          const checkboxColumn = (Array.isArray(this._columnDefinitions) && this._columnDefinitions.length > 0) ? this._columnDefinitions[0] : null;\n          if (checkboxColumn && checkboxColumn.id === '_checkbox_selector' && gridColumns[0].id !== '_checkbox_selector') {\n            gridColumns.unshift(checkboxColumn);\n          }\n        }\n\n        // finally set the new presets columns (including checkbox selector if need be)\n        grid.setColumns(gridColumns);\n      }\n    }\n\n    // attach external sorting (backend) when available or default onSort (dataView)\n    if (gridOptions.enableSorting) {\n      gridOptions.backendServiceApi ? this.sortService.attachBackendOnSort(grid, dataView) : this.sortService.attachLocalOnSort(grid, dataView);\n    }\n\n    // attach external filter (backend) when available or default onFilter (dataView)\n    if (gridOptions.enableFiltering) {\n      this.filterService.init(grid);\n\n      // if user entered some \"presets\", we need to reflect them all in the DOM\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n        this.filterService.populateColumnFilterSearchTerms();\n      }\n      gridOptions.backendServiceApi ? this.filterService.attachBackendOnFilter(grid) : this.filterService.attachLocalOnFilter(grid, this._dataView);\n    }\n\n    // if user set an onInit Backend, we'll run it right away (and if so, we also need to run preProcess, internalPostProcess & postProcess)\n    if (gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      if (backendApi && backendApi.service && backendApi.service.init) {\n        backendApi.service.init(backendApi.options, gridOptions.pagination, this.grid);\n      }\n    }\n\n    // expose all Slick Grid Events through dispatch\n    for (const prop in grid) {\n      if (grid.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(grid[prop], (e: any, args: any) => {\n          return this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\n        });\n      }\n    }\n\n    // expose all Slick DataView Events through dispatch\n    for (const prop in dataView) {\n      if (dataView.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(dataView[prop], (e: any, args: any) => {\n          return this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\n        });\n      }\n    }\n\n    // expose GridState Service changes event through dispatch\n    this.subscriptions.push(\n      this.gridStateService.onGridStateChanged.subscribe((gridStateChange: GridStateChange) => {\n        this.onGridStateChanged.emit(gridStateChange);\n      })\n    );\n\n\n    // on cell click, mainly used with the columnDef.action callback\n    this.gridEventService.attachOnCellChange(grid, dataView);\n    this.gridEventService.attachOnClick(grid, dataView);\n\n    this._eventHandler.subscribe(dataView.onRowCountChanged, (e: any, args: any) => {\n      grid.updateRowCount();\n      grid.render();\n    });\n    this._eventHandler.subscribe(dataView.onRowsChanged, (e: any, args: any) => {\n      grid.invalidateRows(args.rows);\n      grid.render();\n    });\n\n    // does the user have a colspan callback?\n    if (gridOptions.colspanCallback) {\n      this._dataView.getItemMetadata = (rowNumber: number) => {\n        const item = this._dataView.getItem(rowNumber);\n        return gridOptions.colspanCallback(item);\n      };\n    }\n  }\n\n  attachBackendCallbackFunctions(gridOptions: GridOption) {\n    const backendApi = gridOptions.backendServiceApi;\n    const serviceOptions: BackendServiceOption = (backendApi && backendApi.service && backendApi.service.options) ? backendApi.service.options : {};\n    const isExecuteCommandOnInit = (!serviceOptions) ? false : ((serviceOptions && serviceOptions.hasOwnProperty('executeProcessCommandOnInit')) ? serviceOptions['executeProcessCommandOnInit'] : true);\n\n    // update backend filters (if need be) before the query runs\n    if (backendApi) {\n      const backendService = backendApi.service;\n\n      // if user entered some any \"presets\", we need to reflect them all in the grid\n      if (gridOptions && gridOptions.presets) {\n         // Filters \"presets\"\n         if (backendService && backendService.updateFilters && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n          backendService.updateFilters(gridOptions.presets.filters, true);\n        }\n        // Sorters \"presets\"\n        if (backendService && backendService.updateSorters && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n          backendService.updateSorters(undefined, gridOptions.presets.sorters);\n        }\n        // Pagination \"presets\"\n        if (backendService && backendService.updatePagination && gridOptions.presets.pagination) {\n          backendService.updatePagination(gridOptions.presets.pagination.pageNumber, gridOptions.presets.pagination.pageSize);\n        }\n      } else {\n        const columnFilters = this.filterService.getColumnFilters();\n        if (columnFilters && backendService && backendService.updateFilters) {\n          backendService.updateFilters(columnFilters, false);\n        }\n      }\n    }\n\n    if (backendApi && backendApi.service && (backendApi.onInit || isExecuteCommandOnInit)) {\n      const query = (typeof backendApi.service.buildQuery === 'function') ? backendApi.service.buildQuery() : '';\n      const observableOrPromise = (isExecuteCommandOnInit) ? backendApi.process(query) : backendApi.onInit(query);\n\n      // wrap this inside a setTimeout to avoid timing issue since the gridOptions needs to be ready before running this onInit\n      setTimeout(async () => {\n        // keep start time & end timestamps & return it after process execution\n        const startTime = new Date();\n\n        if (backendApi.preProcess) {\n          backendApi.preProcess();\n        }\n\n        // the process could be an Observable (like HttpClient) or a Promise\n        // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n        const processResult: GraphqlResult | any = await castToPromise(observableOrPromise);\n        const endTime = new Date();\n\n        // define what our internal Post Process callback, only available for GraphQL Service for now\n        // it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n        if (processResult && backendApi && backendApi.service instanceof GraphqlService && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          const datasetName = (backendApi && backendApi.service && typeof backendApi.service.getDatasetName === 'function') ? backendApi.service.getDatasetName() : '';\n          if (processResult instanceof Object) {\n            processResult.statistics = {\n              startTime,\n              endTime,\n              executionTime: endTime.valueOf() - startTime.valueOf(),\n              totalItemCount: this.gridOptions && this.gridOptions.pagination && this.gridOptions.pagination.totalItems\n            };\n          }\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  attachResizeHook(grid: any, options: GridOption) {\n    // expand/autofit columns on first page load\n    if (grid && options.autoFitColumnsOnFirstLoad && options.enableAutoSizeColumns) {\n      grid.autosizeColumns();\n\n      // compensate anytime SlickGrid measureScrollbar is incorrect (only seems to happen in Chrome 1/5 computers)\n      this.resizer.compensateHorizontalScroll(this.grid, this.gridOptions);\n    }\n\n    // auto-resize grid on browser resize\n    this.resizer.init(grid);\n    if (options.enableAutoResize) {\n      this.resizer.attachAutoResizeDataGrid({ height: this.gridHeight, width: this.gridWidth });\n      if (grid && options.autoFitColumnsOnFirstLoad && options.enableAutoSizeColumns) {\n        grid.autosizeColumns();\n      }\n    }\n  }\n\n  executeAfterDataviewCreated(grid: any, gridOptions: GridOption, dataView: any) {\n    // if user entered some Sort \"presets\", we need to reflect them all in the DOM\n    if (gridOptions.enableSorting) {\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n        this.sortService.loadLocalPresets(grid, dataView);\n      }\n    }\n  }\n\n  mergeGridOptions(gridOptions): GridOption {\n    gridOptions.gridId = this.gridId;\n    gridOptions.gridContainerId = `slickGridContainer-${this.gridId}`;\n\n    // use jquery extend to deep merge & copy to avoid immutable properties being changed in GlobalGridOptions after a route change\n    const options = $.extend(true, {}, GlobalGridOptions, this.forRootConfig, gridOptions);\n\n    // also make sure to show the header row if user have enabled filtering\n    if (options.enableFiltering && !options.showHeaderRow) {\n      options.showHeaderRow = true;\n    }\n    return options;\n  }\n\n  /**\n   * On a Pagination changed, we will trigger a Grid State changed with the new pagination info\n   * Also if we use Row Selection or the Checkbox Selector, we need to reset any selection\n   */\n  paginationChanged(pagination: Pagination) {\n    if (this.gridOptions.enableRowSelection || this.gridOptions.enableCheckboxSelector) {\n      this.gridService.setSelectedRows([]);\n    }\n\n    this.gridStateService.onGridStateChanged.next({\n      change: { newValues: pagination, type: GridStateType.pagination },\n      gridState: this.gridStateService.getCurrentGridState()\n    });\n  }\n\n  /**\n   * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well\n   * @param dataset\n   */\n  refreshGridData(dataset: any[], totalCount?: number) {\n    if (dataset && this.grid && this._dataView && typeof this._dataView.setItems === 'function') {\n      this._dataView.setItems(dataset, this.gridOptions.datasetIdPropertyName);\n      if (!this.gridOptions.backendServiceApi) {\n        this._dataView.reSort();\n      }\n\n      // this.grid.setData(dataset);\n      this.grid.invalidate();\n      this.grid.render();\n\n      if (this.gridOptions.backendServiceApi) {\n        // do we want to show pagination?\n        // if we have a backendServiceApi and the enablePagination is undefined, we'll assume that we do want to see it, else get that defined value\n        this.showPagination = ((this.gridOptions.backendServiceApi && this.gridOptions.enablePagination === undefined) ? true : this.gridOptions.enablePagination) || false;\n\n        // before merging the grid options, make sure that it has the totalItems count\n        // once we have that, we can merge and pass all these options to the pagination component\n        if (!this.gridOptions.pagination) {\n          this.gridOptions.pagination = (this.gridOptions.pagination) ? this.gridOptions.pagination : undefined;\n        }\n        if (this.gridOptions.pagination && totalCount) {\n          this.gridOptions.pagination.totalItems = totalCount;\n        }\n        if (this.gridOptions.presets && this.gridOptions.presets.pagination && this.gridOptions.pagination) {\n          this.gridOptions.pagination.pageSize = this.gridOptions.presets.pagination.pageSize;\n          this.gridOptions.pagination.pageNumber = this.gridOptions.presets.pagination.pageNumber;\n        }\n        this.gridPaginationOptions = this.mergeGridOptions(this.gridOptions);\n      }\n\n      // resize the grid inside a slight timeout, in case other DOM element changed prior to the resize (like a filter/pagination changed)\n      if (this.grid && this.gridOptions.enableAutoResize) {\n        const delay = this.gridOptions.autoResize && this.gridOptions.autoResize.delay;\n        this.resizer.resizeGrid(delay || 10, { height: this.gridHeight, width: this.gridWidth });\n      }\n    }\n  }\n\n  /**\n   * Dynamically change or update the column definitions list.\n   * We will re-render the grid so that the new header and data shows up correctly.\n   * If using i18n, we also need to trigger a re-translate of the column headers\n   */\n  updateColumnDefinitionsList(newColumnDefinitions) {\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders(false, newColumnDefinitions);\n    } else {\n      this.controlAndPluginService.renderColumnHeaders(newColumnDefinitions);\n    }\n\n    if (this.gridOptions && this.gridOptions.enableAutoSizeColumns) {\n      this.grid.autosizeColumns();\n    }\n  }\n\n  /** Toggle the filter row displayed on first row\n   * @param isShowing\n   */\n  showHeaderRow(isShowing: boolean) {\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  /** Toggle the filter row displayed on first row */\n  toggleHeaderRow() {\n    const isShowing = !this.grid.getOptions().showHeaderRow;\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /** Dispatch of Custom Event, which by default will bubble & is cancelable */\n  private dispatchCustomEvent(eventName: string, data?: any, isBubbling: boolean = true, isCancelable: boolean = true) {\n    const eventInit: CustomEventInit = { bubbles: isBubbling, cancelable: isCancelable };\n    if (data) {\n      eventInit.detail = data;\n    }\n    return this.elm.nativeElement.dispatchEvent(new CustomEvent(eventName, eventInit));\n  }\n\n  /** Load the Editor Collection asynchronously and replace the \"collection\" property when Observable resolves */\n  private loadEditorCollectionAsync(column: Column) {\n    const collectionAsync = column && column.editor && column.editor.collectionAsync;\n    if (collectionAsync instanceof Observable) {\n      this.subscriptions.push(\n        collectionAsync.subscribe((resolvedCollection) => this.updateEditorCollection(column, resolvedCollection))\n      );\n    }\n  }\n\n  /**\n   * Update the Editor \"collection\" property from an async call resolved\n   * Since this is called after the async call resolves, the pointer will not be the same as the \"column\" argument passed.\n   * Once we found the new pointer, we will reassign the \"editor\" and \"collection\" to the \"internalColumnEditor\" so it has newest collection\n   */\n  private updateEditorCollection(column: Column, newCollection: any[]) {\n    column.editor.collection = newCollection;\n\n    // find the new column reference pointer\n    const columns = this.grid.getColumns();\n    if (Array.isArray(columns)) {\n      const columnRef: Column = columns.find((col: Column) => col.id === column.id);\n      columnRef.internalColumnEditor = column.editor;\n    }\n  }\n}\n",
    "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AngularSlickgridComponent } from './../components/angular-slickgrid.component';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport { FilterFactory } from '../filters/filterFactory';\r\nimport { GraphqlService } from './../services/graphql.service';\r\nimport { GridOdataService } from './../services/grid-odata.service';\r\nimport { GridOption } from './../models/gridOption.interface';\r\nimport { SlickPaginationComponent } from './../components/slick-pagination.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TranslateModule\r\n  ],\r\n  declarations: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  exports: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  entryComponents: [AngularSlickgridComponent]\r\n})\r\nexport class AngularSlickgridModule {\r\n  static forRoot(config: GridOption = {}) {\r\n    return {\r\n      ngModule: AngularSlickgridModule,\r\n      providers: [\r\n        { provide: 'config', useValue: config },\r\n        CollectionService,\r\n        FilterFactory,\r\n        GraphqlService,\r\n        GridOdataService\r\n      ]\r\n    };\r\n  }\r\n}\r\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "__awaiter",
    "thisArg",
    "_arguments",
    "P",
    "generator",
    "Promise",
    "resolve",
    "reject",
    "fulfilled",
    "value",
    "step",
    "next",
    "e",
    "rejected",
    "result",
    "done",
    "then",
    "apply",
    "__generator",
    "body",
    "f",
    "y",
    "t",
    "g",
    "_",
    "label",
    "sent",
    "trys",
    "ops",
    "verb",
    "throw",
    "return",
    "Symbol",
    "iterator",
    "n",
    "v",
    "op",
    "TypeError",
    "call",
    "pop",
    "length",
    "push",
    "__values",
    "o",
    "m",
    "i",
    "__read",
    "r",
    "ar",
    "error",
    "__spread",
    "arguments",
    "concat",
    "colon",
    "comma",
    "equalSign",
    "pipe",
    "semicolon",
    "space",
    "tab",
    "doubleColon",
    "doublePipe",
    "doubleSemicolon",
    "csv",
    "doc",
    "docx",
    "pdf",
    "txt",
    "xls",
    "xlsx",
    "columns",
    "filter",
    "pagination",
    "sorter",
    "empty",
    "contains",
    "lessThan",
    "lessThanOrEqual",
    "greaterThan",
    "greaterThanOrEqual",
    "notEqual",
    "equal",
    "endsWith",
    "startsWith",
    "in",
    "notIn",
    "inContains",
    "notInContains",
    "asc",
    "ASC",
    "desc",
    "DESC",
    "moment",
    "moment_",
    "addWhiteSpaces",
    "nbSpaces",
    "htmlEncode",
    "$",
    "text",
    "html",
    "htmlEntityDecode",
    "input",
    "replace",
    "match",
    "dec",
    "String",
    "fromCharCode",
    "arraysEqual",
    "a",
    "orderMatters",
    "sort",
    "castToPromise",
    "fromServiceName",
    "promise",
    "Observable",
    "first",
    "toPromise",
    "take",
    "Error",
    "findOrDefault",
    "array",
    "logic",
    "defaultVal",
    "find",
    "decimalFormatted",
    "minDecimal",
    "maxDecimal",
    "isNaN",
    "minDec",
    "undefined",
    "maxDec",
    "amount",
    "Math",
    "round",
    "pow",
    "indexOf",
    "getDescendantProperty",
    "obj",
    "path",
    "split",
    "reduce",
    "acc",
    "part",
    "getScrollBarWidth",
    "$outer",
    "css",
    "visibility",
    "width",
    "overflow",
    "appendTo",
    "widthWithScroll",
    "outerWidth",
    "remove",
    "ceil",
    "mapMomentDateFormatWithFieldType",
    "fieldType",
    "map",
    "FieldType",
    "dateTime",
    "dateTimeIso",
    "dateTimeShortIso",
    "dateTimeIsoAmPm",
    "dateTimeIsoAM_PM",
    "dateUs",
    "dateUsShort",
    "dateTimeUs",
    "dateTimeShortUs",
    "dateTimeUsAmPm",
    "dateTimeUsAM_PM",
    "dateTimeUsShort",
    "dateTimeUsShortAmPm",
    "dateUtc",
    "date",
    "dateIso",
    "mapFlatpickrDateFormatWithFieldType",
    "mapOperatorType",
    "operator",
    "OperatorType",
    "mapOperatorByFieldType",
    "string",
    "unknown",
    "float",
    "number",
    "dateTimeUsShortAM_PM",
    "parseUtcDate",
    "inputDateString",
    "useUtc",
    "test",
    "dateString",
    "decodeURIComponent",
    "dateMoment",
    "Date",
    "isValid",
    "year",
    "toString",
    "utc",
    "format",
    "sanitizeHtmlToText",
    "htmlString",
    "temp",
    "document",
    "createElement",
    "innerHTML",
    "textContent",
    "innerText",
    "titleCase",
    "charAt",
    "toUpperCase",
    "slice",
    "toCamelCase",
    "str",
    "offset",
    "toLowerCase",
    "unsubscribeAllObservables",
    "subscriptions",
    "isArray",
    "forEach",
    "subscription",
    "unsubscribe",
    "compareDates",
    "value1",
    "value2",
    "sortDirection",
    "strict",
    "diff",
    "date1",
    "date2",
    "parseInt",
    "FORMAT",
    "dateUsShortSorter",
    "dateSorter",
    "ISO_8601",
    "dateIsoSorter",
    "dateUsSorter",
    "numericSorter",
    "x",
    "parseFloat",
    "stringSorter",
    "position",
    "Sorters",
    "numeric",
    "sortByFieldType",
    "sortResult",
    "CollectionService",
    "translate",
    "filterCollection",
    "collection",
    "filterBy",
    "filteredCollection",
    "property_1",
    "property",
    "value_1",
    "item",
    "sortCollection",
    "sortBy",
    "enableTranslateLabel",
    "_this",
    "sortedCollection",
    "property_2",
    "sortDirection_1",
    "sortDesc",
    "fieldType_1",
    "dataRow1",
    "dataRow2",
    "instant",
    "parseBoolean",
    "type",
    "Injectable",
    "TranslateService",
    "booleanFilterCondition",
    "options",
    "searchTerm",
    "searchTerms",
    "cellValue",
    "testFilterCondition",
    "includes",
    "findIndex",
    "val",
    "dateFilterCondition",
    "searchDateFormat",
    "filterSearchType",
    "dateCell",
    "dateSearch",
    "dateIsoFilterCondition",
    "dateUsFilterCondition",
    "dateUsShortFilterCondition",
    "dateUtcFilterCondition",
    "collectionSearchFilterCondition",
    "numberFilterCondition",
    "stringFilterCondition",
    "cellValueLastChar",
    "executeMappedCondition",
    "boolean",
    "FilterConditions",
    "booleanFilter",
    "collectionSearchFilter",
    "dateFilter",
    "dateIsoFilter",
    "dateUtcFilter",
    "dateUsFilter",
    "dateUsShortFilter",
    "numberFilter",
    "stringFilter",
    "testFilter",
    "require",
    "CompoundDateFilter",
    "_clearFilterTriggered",
    "defineProperty",
    "get",
    "grid",
    "getOptions",
    "_operator",
    "set",
    "init",
    "args",
    "callback",
    "columnDef",
    "$filterElm",
    "createDomElement",
    "$filterInputElm",
    "keyup",
    "onTriggerEvent",
    "$selectOperatorElm",
    "change",
    "clear",
    "flatInstance",
    "destroy",
    "off",
    "setValues",
    "values",
    "setDate",
    "buildDatePickerInput",
    "inputFormat",
    "outputFormat",
    "outputType",
    "currentLocale",
    "currentLang",
    "substring",
    "pickerOptions",
    "defaultDate",
    "altInput",
    "altFormat",
    "dateFormat",
    "wrap",
    "closeOnSelect",
    "locale",
    "loadFlatpickrLocale",
    "onChange",
    "selectedDates",
    "dateStr",
    "instance",
    "_currentValue",
    "enableTime",
    "CustomEvent",
    "placeholder",
    "gridOptions",
    "defaultFilterPlaceholder",
    "flatpickr",
    "buildSelectOperatorHtmlString",
    "optionValues",
    "getOptionValues",
    "optionValueString",
    "option",
    "description",
    "$headerElm",
    "getHeaderRowColumn",
    "id",
    "$filterContainerElm",
    "$containerInputGroup",
    "$operatorInputGroupAddon",
    "append",
    "attr",
    "data",
    "addClass",
    "localeDefault",
    "default",
    "clearFilterTriggered",
    "selectedOperator",
    "removeClass",
    "hide",
    "close",
    "show",
    "open",
    "CompoundInputFilter",
    "buildInputHtmlString",
    "CompoundSliderFilter",
    "params",
    "_elementRangeInputId",
    "field",
    "_elementRangeOutputId",
    "filterParams",
    "hideSliderNumber",
    "on",
    "target",
    "getElementById",
    "clearedValue",
    "sliderStartValue",
    "$containerInputGroupElm",
    "children",
    "last",
    "buildTemplateHtmlString",
    "minValue",
    "filterProperties",
    "maxValue",
    "defaultValue",
    "valueStep",
    "buildTemplateSliderTextHtmlString",
    "searchTermInput",
    "$sliderTextInputAppendAddon",
    "InputFilter",
    "filterTemplate",
    "trigger",
    "DOMPurify",
    "DOMPurify_",
    "SelectFilter",
    "collectionService",
    "isMultipleSelect",
    "isFilled",
    "autoAdjustDropHeight",
    "autoAdjustDropPosition",
    "autoAdjustDropWidthByTextSize",
    "container",
    "maxHeight",
    "single",
    "textTemplate",
    "$elm",
    "enableRenderHtml",
    "onClose",
    "selectedItems",
    "multipleSelect",
    "siblings",
    "okButton",
    "addTitle",
    "countSelected",
    "allSelected",
    "selectAllText",
    "selectAllDelimiter",
    "defaultOptions",
    "collectionOptions",
    "customStructure",
    "columnFilter",
    "collectionAsync",
    "labelName",
    "labelPrefixName",
    "labelPrefix",
    "labelSuffixName",
    "labelSuffix",
    "valueName",
    "newCollection",
    "renderDomElement",
    "renderOptionsAsync",
    "createCollectionAsyncSubject",
    "inputCollection",
    "outputCollection",
    "collectionFilterBy",
    "collectionSortBy",
    "awaitedCollection",
    "_a",
    "renderDomElementFromCollectionAsync",
    "newCollectionAsync",
    "Subject",
    "subscribe",
    "collectionInObjectProperty",
    "addBlankEntry",
    "unshift",
    "createBlankEntry",
    "optionCollection",
    "separatorBetweenLabels",
    "separatorBetweenTextLabels",
    "isRenderHtmlEnabled",
    "sanitizedOptions",
    "sanitizeHtmlOptions",
    "labelKey",
    "selected",
    "term",
    "labelText",
    "prefixText",
    "suffixText",
    "optionText",
    "sanitize",
    "blankEntry",
    "fieldId",
    "elementName",
    "name",
    "elementOptions",
    "assign",
    "filterOptions",
    "filterElmOptions",
    "MultipleSelectFilter",
    "_super",
    "tslib_1.__extends",
    "NativeSelectFilter",
    "textLabel",
    "SingleSelectFilter",
    "SliderFilter",
    "Filters",
    "compoundDate",
    "compoundInput",
    "compoundSlider",
    "slider",
    "singleSelect",
    "select",
    "GlobalGridOptions",
    "alwaysShowVerticalScroll",
    "autoEdit",
    "asyncEditorLoading",
    "autoFitColumnsOnFirstLoad",
    "autoResize",
    "bottomPadding",
    "minHeight",
    "minWidth",
    "sidePadding",
    "cellHighlightCssClass",
    "checkboxSelector",
    "cssClass",
    "columnPicker",
    "hideForceFitButton",
    "hideSyncResizeButton",
    "datasetIdPropertyName",
    "defaultFilter",
    "editable",
    "enableAutoResize",
    "enableAutoSizeColumns",
    "enableCellNavigation",
    "enableColumnPicker",
    "enableColumnReorder",
    "enableExport",
    "enableGridMenu",
    "enableHeaderMenu",
    "enableMouseHoverHighlightRow",
    "enableSorting",
    "enableTextSelectionOnCells",
    "explicitInitialization",
    "exportOptions",
    "delimiter",
    "DelimiterType",
    "exportWithFormatter",
    "filename",
    "FileType",
    "groupingAggregatorRowText",
    "sanitizeDataExport",
    "useUtf8WithBom",
    "forceFitColumns",
    "gridMenu",
    "hideClearAllFiltersCommand",
    "hideClearAllSortingCommand",
    "hideExportCsvCommand",
    "hideExportTextDelimitedCommand",
    "hideRefreshDatasetCommand",
    "hideToggleFilterCommand",
    "iconCssClass",
    "iconClearAllFiltersCommand",
    "iconClearAllSortingCommand",
    "iconExportCsvCommand",
    "iconExportTextDelimitedCommand",
    "iconRefreshDatasetCommand",
    "iconToggleFilterCommand",
    "menuWidth",
    "resizeOnShowHeaderRow",
    "headerMenu",
    "autoAlign",
    "autoAlignOffset",
    "iconSortAscCommand",
    "iconSortDescCommand",
    "iconColumnHideCommand",
    "hideColumnHideCommand",
    "hideSortCommands",
    "headerRowHeight",
    "multiColumnSort",
    "numberedMultiColumnSort",
    "tristateMultiColumnSort",
    "sortColNumberInSeparateSpan",
    "suppressActiveCellChangeOnEdit",
    "pageSizes",
    "pageSize",
    "totalItems",
    "rowHeight",
    "showHeaderRow",
    "topPanelHeight",
    "SlickgridConfig",
    "FilterFactory",
    "config",
    "_options",
    "createFilter",
    "model",
    "isequal",
    "isequal_",
    "FilterService",
    "filterFactory",
    "_eventHandler",
    "Slick",
    "EventHandler",
    "_filters",
    "_columnFilters",
    "onFilterChanged",
    "onFilterCleared",
    "_grid",
    "getColumns",
    "attachBackendOnFilter",
    "_slickSubscriber",
    "Event",
    "attachBackendOnFilterSubscribe",
    "bind",
    "onHeaderRowCellRendered",
    "addFilterTemplateToHeaderRow",
    "event",
    "backendApi",
    "_gridOptions",
    "backendServiceApi",
    "process",
    "service",
    "startTime",
    "preProcess",
    "processOnFilterChanged",
    "query",
    "emitFilterChanged",
    "processResult",
    "endTime",
    "internalPostProcess",
    "postProcess",
    "statistics",
    "executionTime",
    "valueOf",
    "totalItemCount",
    "attachLocalOnFilter",
    "dataView",
    "_dataView",
    "setFilterArgs",
    "columnFilters",
    "setFilter",
    "customLocalFilter",
    "columnId",
    "refresh",
    "clearFilters",
    "invalidate",
    "render",
    "tslib_1.__values",
    "keys",
    "_b",
    "columnIndex",
    "getColumnIndex",
    "queryField",
    "queryFieldFilter",
    "searchValues",
    "fieldSearchValue",
    "matches",
    "lastValueChar",
    "join",
    "k",
    "ln",
    "useFormatterOuputToFilter",
    "rowIndex",
    "getIdxById",
    "formatter",
    "dispose",
    "disposeColumnFilters",
    "unsubscribeAll",
    "index",
    "getColumnFilters",
    "getCurrentLocalFilters",
    "currentFilters",
    "colId",
    "callbackSearchEvent",
    "hasSearchTerms",
    "termsCount",
    "oldColumnFilters",
    "colFilter",
    "triggerEvent",
    "serviceOptions",
    "_onFilterChangedOptions",
    "column",
    "filterable",
    "filter_1",
    "updateColumnFilters",
    "filterArguments",
    "filterExistIndex",
    "filt",
    "sender",
    "backendService",
    "getCurrentFilters",
    "populateColumnFilterSearchTerms",
    "presets",
    "filters",
    "filters_1",
    "_columnDefinitions",
    "columnPreset",
    "presetFilter",
    "slickEvent",
    "isPropagationStopped",
    "extend",
    "EventData",
    "notify",
    "ExportService",
    "_lineCarriageReturn",
    "_hasGroupedItems",
    "onGridBeforeExportToFile",
    "onGridAfterExportToFile",
    "exportToFile",
    "_exportOptions",
    "dataOutput",
    "getDataOutput",
    "setTimeout",
    "downloadOptions",
    "csvContent",
    "startDownloadFile",
    "groupByColumnHeader",
    "groupingColumnHeaderTitle",
    "_exportQuoteWrapper",
    "outputDataString",
    "grouping",
    "getGrouping",
    "_columnHeaders",
    "getColumnHeaders",
    "header",
    "title",
    "getAllGridRowData",
    "lineCarriageReturn",
    "lineCount",
    "getLength",
    "rowNumber",
    "itemObj",
    "getItem",
    "readRegularRowData",
    "__groupTotals",
    "readGroupedTitleRow",
    "readGroupedTotalRow",
    "columnHeaders",
    "fieldName",
    "headerKey",
    "skippedField",
    "excludeFromExport",
    "key",
    "row",
    "idx",
    "rowOutputString",
    "exportQuoteWrapper",
    "col",
    "isEvaluatingFormatter",
    "exportCustomFormatter",
    "itemData",
    "exportCsvForceToKeepAsString",
    "groupName",
    "level",
    "output",
    "groupTotalsFormatter",
    "navigator",
    "appName",
    "outputData",
    "mimeType",
    "TextEncoder",
    "encode",
    "blob",
    "Blob",
    "msSaveOrOpenBlob",
    "link",
    "csvUrl",
    "URL",
    "createObjectURL",
    "href",
    "setAttribute",
    "style",
    "appendChild",
    "click",
    "removeChild",
    "SortService",
    "_currentLocalSorters",
    "_isBackendGrid",
    "onSortChanged",
    "onSortCleared",
    "attachBackendOnSort",
    "onSort",
    "onBackendSortChanged",
    "processOnSortChanged",
    "emitSortChanged",
    "attachLocalOnSort",
    "sortColumns",
    "sortCols",
    "sortAsc",
    "sortCol",
    "sortColumn",
    "direction",
    "SortDirection",
    "onLocalSortChanged",
    "clearSorting",
    "setSortColumns",
    "getCurrentLocalSorters",
    "getPreviousColumnSorts",
    "getSortColumns",
    "cols",
    "loadLocalPresets",
    "sorters",
    "presetSorting",
    "gridColumn",
    "l",
    "columnSortObj",
    "SortDirectionNumber",
    "sortField",
    "neutral",
    "currentSorters",
    "getCurrentSorters",
    "Constants",
    "TEXT_CANCEL",
    "TEXT_CLEAR_ALL_FILTERS",
    "TEXT_CLEAR_ALL_SORTING",
    "TEXT_COLUMNS",
    "TEXT_COMMANDS",
    "TEXT_EXPORT_IN_CSV_FORMAT",
    "TEXT_EXPORT_IN_TEXT_FORMAT",
    "TEXT_FORCE_FIT_COLUMNS",
    "TEXT_HIDE_COLUMN",
    "TEXT_REFRESH_DATASET",
    "TEXT_SAVE",
    "TEXT_SYNCHRONOUS_RESIZE",
    "TEXT_SORT_ASCENDING",
    "TEXT_SORT_DESCENDING",
    "TEXT_TOGGLE_FILTER_ROW",
    "VALIDATION_EDITOR_VALID_NUMBER",
    "VALIDATION_EDITOR_VALID_INTEGER",
    "VALIDATION_EDITOR_NUMBER_BETWEEN",
    "VALIDATION_EDITOR_DECIMAL_BETWEEN",
    "ControlAndPluginService",
    "exportService",
    "filterService",
    "sortService",
    "areVisibleColumnDifferent",
    "extensionList",
    "getAllColumns",
    "allColumns",
    "getVisibleColumns",
    "visibleColumns",
    "getAllExtensions",
    "getExtensionByName",
    "autoResizeColumns",
    "autosizeColumns",
    "attachDifferentControlOrPlugins",
    "groupItemMetadataProvider",
    "enableTranslate",
    "translateItems",
    "columnPickerControl",
    "createColumnPicker",
    "userOriginalGridMenu",
    "gridMenuControl",
    "createGridMenu",
    "enableAutoTooltip",
    "autoTooltipPlugin",
    "AutoTooltips",
    "autoTooltipOptions",
    "registerPlugin",
    "enableGrouping",
    "groupItemMetaProviderPlugin",
    "enableCheckboxSelector",
    "checkboxSelectorPlugin",
    "rowSelectionPlugin",
    "getSelectionModel",
    "RowSelectionModel",
    "rowSelectionOptions",
    "setSelectionModel",
    "preselectedRows",
    "selectRows",
    "enableRowSelection",
    "enableHeaderButton",
    "headerButtonsPlugin",
    "Plugins",
    "HeaderButtons",
    "headerButton",
    "onCommand",
    "headerMenuPlugin",
    "createHeaderMenu",
    "enableExcelCopyBuffer",
    "createUndoRedoBuffer",
    "hookUndoShortcutKey",
    "createCellExternalCopyManagerPlugin",
    "registerPlugins",
    "plugin",
    "createCheckboxPluginBeforeGridCreation",
    "columnDefinitions",
    "CheckboxSelectColumn",
    "selectionColumn",
    "getColumnDefinition",
    "excludeFromQuery",
    "excludeFromHeaderMenu",
    "newRowIds",
    "pluginOptions",
    "clipboardCommandHandler",
    "editCommand",
    "undoRedoBuffer",
    "queueAndExecuteCommand",
    "dataItemColumnValueExtractor",
    "editor",
    "formattedOutput",
    "readOnlyMode",
    "includeHeaderWhenCopying",
    "newRowCreator",
    "count",
    "getData",
    "addItem",
    "CellSelectionModel",
    "cellExternalCopyManagerPlugin",
    "CellExternalCopyManager",
    "columnTitle",
    "getPickerTitleOutputString",
    "forceFitTitle",
    "syncResizeTitle",
    "Controls",
    "ColumnPicker",
    "onColumnsChanged",
    "getDefaultGridMenuOptions",
    "customItems",
    "addGridMenuCustomCommands",
    "sortItems",
    "GridMenu",
    "onBeforeMenuShow",
    "executeGridMenuInternalCustomCommands",
    "onMenuClose",
    "gridUid",
    "getUID",
    "getDefaultHeaderMenuOptions",
    "addHeaderMenuCustomCommands",
    "HeaderMenu",
    "executeHeaderMenuInternalCommands",
    "commandQueue",
    "commandCtr",
    "execute",
    "undo",
    "command",
    "GlobalEditorLock",
    "cancelCurrentEdit",
    "redo",
    "hideColumn",
    "setColumns",
    "removeColumnByIndex",
    "keydown",
    "which",
    "ctrlKey",
    "metaKey",
    "shiftKey",
    "gridMenuCustomItems",
    "enableFiltering",
    "disabled",
    "positionOrder",
    "customTitle",
    "headerMenuOptions",
    "menu",
    "items",
    "columnHeaderMenuItems",
    "sortable",
    "itemA",
    "itemB",
    "newSortColumns",
    "setHeaderRowVisibility",
    "setTopPanelVisibility",
    "showTopPanel",
    "refreshBackendDataset",
    "buildQuery",
    "startTime_1",
    "el",
    "translateColumnPicker",
    "emptyColumnPickerTitles",
    "translateGridMenu",
    "emptyGridMenuTitles",
    "translateHeaderMenu",
    "resetHeaderMenuTranslations",
    "translateColumnHeaders",
    "newColumnDefinitions",
    "use",
    "renderColumnHeaders",
    "propName",
    "pickerName",
    "picker",
    "titleKey",
    "columnHeaderMenuItems_1",
    "propertyName",
    "inputKey",
    "outputKey",
    "items_1",
    "items_1_1",
    "timer",
    "GraphqlQueryBuilder",
    "queryFnName",
    "aliasOrFilter",
    "head",
    "alias",
    "prop",
    "getGraphQLValue",
    "searches",
    "_i",
    "searchKeys",
    "parceFind",
    "setAlias",
    "ReferenceError",
    "_levelA",
    "currentValue",
    "itemX",
    "RangeError",
    "propsAA",
    "JSON",
    "stringify",
    "propS",
    "objectToString",
    "sourceA",
    "DEFAULT_ITEMS_PER_PAGE",
    "GraphqlService",
    "defaultOrderBy",
    "defaultPaginationOptions",
    "datasetName",
    "queryQb",
    "QueryBuilder",
    "datasetQb",
    "dataQb",
    "columnIds",
    "columnDefinitions_1",
    "columnDefinitions_1_1",
    "fields",
    "buildFilterQuery",
    "isWithCursor",
    "pageInfoQb",
    "node",
    "datasetFilters",
    "paginationOptions",
    "sortingOptions",
    "orderBy",
    "filteringOptions",
    "addLocaleIntoQuery",
    "i18n",
    "extraQueryArguments",
    "_c",
    "queryArgument",
    "trimDoubleQuotesOnEnumField",
    "keepArgumentFieldDoubleQuotes",
    "inputArray",
    "shift",
    "getInitPaginationOptions",
    "getDatasetName",
    "_currentFilters",
    "getCurrentPagination",
    "_currentPagination",
    "_currentSorters",
    "resetPaginationOptions",
    "after",
    "before",
    "pageNumber",
    "updateOptions",
    "debounceTypingDelay",
    "filterTypingDebounce",
    "castFilterToColumnFilter",
    "clearTimeout",
    "updateFilters",
    "processOnPaginationChanged",
    "updatePagination",
    "newPage",
    "updateSorters",
    "isUpdatedByPreset",
    "searchValue",
    "searchByArray",
    "_loop_1",
    "columnFilter_1",
    "this_1",
    "presetSorters",
    "graphqlSorters",
    "tmpSorterArray",
    "queryFieldSorter",
    "sortColumns_1",
    "sortColumns_1_1",
    "inputStr",
    "enumSearchWords",
    "patternWordInQuotes",
    "patternRegex",
    "reg",
    "RegExp",
    "group1",
    "group2",
    "group3",
    "removeDoubleQuotes",
    "tmpFilter",
    "padZero",
    "s",
    "trim",
    "allTitleCase",
    "outputStr",
    "substr",
    "OdataService",
    "_odataOptions",
    "filterQueue",
    "_defaultSortBy",
    "queryTmpArray",
    "top",
    "skip",
    "argument",
    "filterStr",
    "filterBySeparator",
    "saveColumnFilter",
    "updateFilterFromListTerms",
    "getFilterByColumn",
    "columnName",
    "getFilterCount",
    "removeColumnFilter",
    "search",
    "filterOptionObject",
    "updateFilterFromTerm",
    "searchBy",
    "tmpSearchByArray",
    "fieldSearchTerms",
    "tmpSearchTerms",
    "j",
    "lnj",
    "lnk",
    "caseType",
    "CaseType",
    "pascalCase",
    "GridOdataService",
    "odataService",
    "mergedOptions",
    "terms",
    "_loop_2",
    "columnFilter_2",
    "this_2",
    "bypassOdataQuery",
    "bypassBackendQuery",
    "encodeURIComponent",
    "dateFormatted",
    "mapOdataOperator",
    "sortByArray",
    "sorterArray",
    "sortColumns_2",
    "sortColumns_2_1",
    "columnFieldName",
    "csvString",
    "GridEventService",
    "attachOnCellChange",
    "onCellChange",
    "cell",
    "getDataItem",
    "returnedArgs",
    "gridDefinition",
    "dataContext",
    "attachOnClick",
    "onClick",
    "onCellClick",
    "GridStateService",
    "_columns",
    "_currentColumns",
    "onGridStateChanged",
    "controlAndPluginService",
    "subscribeToAllGridChanges",
    "getCurrentGridState",
    "gridState",
    "getCurrentColumns",
    "currentPagination",
    "getAssociatedCurrentColumns",
    "gridColumns",
    "currentColumns",
    "headerCssClass",
    "getAssociatedGridColumns",
    "currentColumn",
    "c",
    "hookExtensionEventToGridStateChange",
    "extensionName",
    "eventName",
    "extension",
    "newValues",
    "GridStateType",
    "hookSlickGridEventToGridStateChange",
    "resetColumns",
    "resetRowSelection",
    "setSelectedRows",
    "GridService",
    "gridStateService",
    "getColumnFromEventArguments",
    "getDataItemByRowNumber",
    "getItemRowMetadataToHighlight",
    "previousItemMetadata",
    "meta",
    "cssClasses",
    "_dirty",
    "rowClass",
    "highlightRow",
    "fadeDelay",
    "getItemMetadata",
    "updateItem",
    "gridId",
    "getDataItemByRowIndex",
    "getDataItemByRowIndexes",
    "indexes",
    "dataItems",
    "getSelectedRows",
    "getSelectedRowsDataItem",
    "selectedRowIndexes",
    "setSelectedRow",
    "rowIndexes",
    "renderGrid",
    "resetGrid",
    "originalColumns",
    "addItemToDatagrid",
    "shouldHighlightRow",
    "insertItem",
    "scrollRowIntoView",
    "addItemsToDatagrid",
    "deleteDataGridItem",
    "itemId",
    "deleteDataGridItemById",
    "deleteItem",
    "updateDataGridItem",
    "updateDataGridItemById",
    "getRowById",
    "GroupingAndColspanService",
    "createPreHeaderPanel",
    "createPreHeaderRowGroupingTitle",
    "onColumnsResized",
    "onRowCountChanged",
    "$preHeaderPanel",
    "getPreHeaderPanel",
    "getHeadersWidth",
    "parent",
    "headerColumnWidthDiff",
    "getHeaderColumnWidthDiff",
    "lastColumnGroup",
    "widthTotal",
    "columnGroup",
    "ResizerService",
    "onGridBeforeResize",
    "attachAutoResizeDataGrid",
    "newSizes",
    "gridDomElm",
    "resizeGrid",
    "window",
    "_gridUid",
    "calculateGridNewDimensions",
    "containerElm",
    "containerId",
    "gridContainerId",
    "windowElm",
    "enablePagination",
    "gridHeight",
    "height",
    "coordOffsetTop",
    "availableHeight",
    "availableWidth",
    "newHeight",
    "newWidth",
    "compensateHorizontalScroll",
    "gridElm",
    "scrollbarDimensions",
    "getScrollbarDimensions",
    "slickGridScrollbarWidth",
    "calculatedScrollbarWidth",
    "getLastResizeDimensions",
    "_lastDimensions",
    "delay",
    "availableDimensions",
    "gridContainerElm",
    "exec",
    "userAgent",
    "resizeCanvas",
    "heightWithPagination",
    "AvgAggregator",
    "_field",
    "_count",
    "_nonNullCount",
    "_sum",
    "accumulate",
    "storeResult",
    "groupTotals",
    "avg",
    "MinAggregator",
    "_min",
    "min",
    "MaxAggregator",
    "_max",
    "max",
    "SumAggregator",
    "sum",
    "Aggregators",
    "Avg",
    "Min",
    "Max",
    "Sum",
    "CheckboxEditor",
    "internalColumnEditor",
    "columnEditor",
    "validator",
    "$input",
    "focus",
    "loadValue",
    "preClick",
    "serializeValue",
    "applyValue",
    "state",
    "isValueChanged",
    "validate",
    "validationResults",
    "valid",
    "msg",
    "DateEditor",
    "getCurrentLocale",
    "save",
    "commitChanges",
    "getColumnEditor",
    "domValue",
    "toDate",
    "FloatEditor",
    "getInputDecimalSteps",
    "keyCode",
    "KeyCode",
    "LEFT",
    "RIGHT",
    "stopImmediatePropagation",
    "getDecimalPlaces",
    "rtn",
    "decimalPlaces",
    "decimals",
    "zeroString",
    "decPlaces",
    "toFixed",
    "elmValue",
    "errorMsg",
    "errorMessage",
    "mapValidation",
    "{{minValue}}",
    "{{maxValue}}",
    "{{minDecimal}}",
    "{{maxDecimal}}",
    "matched",
    "IntegerEditor",
    "LongTextEditor",
    "_translate",
    "cancelText",
    "saveText",
    "$container",
    "$wrapper",
    "cancel",
    "handleKeyDown",
    "ENTER",
    "ESCAPE",
    "preventDefault",
    "TAB",
    "navigatePrev",
    "navigateNext",
    "cancelChanges",
    "left",
    "SelectEditor",
    "_subscriptions",
    "libOptions",
    "onBlur",
    "isIncludingPrefixSuffix",
    "includePrefixSuffixToSelectedValues",
    "$editorElm",
    "itemFound",
    "_collectionService",
    "each",
    "$e",
    "loadSingleValue",
    "currentValues",
    "editorTemplate",
    "editorElmOptions",
    "MultipleSelectEditor",
    "SingleSelectEditor",
    "SliderEditor",
    "$sliderNumber",
    "editorParams",
    "TextEditor",
    "getValue",
    "setValue",
    "Editors",
    "checkbox",
    "integer",
    "longText",
    "arrayObjectToCsvFormatter",
    "propertyNames",
    "parentObjectKeyName",
    "outputStrings_1",
    "strings",
    "arrayToCsvFormatter",
    "boldFormatter",
    "checkboxFormatter",
    "checkmarkFormatter",
    "collectionFormatter",
    "collectionEditorFormatter",
    "complexObjectFormatter",
    "dateIsoFormatter",
    "isDateValid",
    "dateTimeIsoFormatter",
    "dateTimeIsoAmPmFormatter",
    "dateTimeUsAmPmFormatter",
    "dateTimeUsFormatter",
    "dateTimeShortIsoFormatter",
    "dateTimeShortUsFormatter",
    "dateUsFormatter",
    "decimalFormatter",
    "minDecimalPlaces",
    "maxDecimalPlaces",
    "deleteIconFormatter",
    "dollarColoredBoldFormatter",
    "isNumber",
    "outputValue",
    "dollarColoredFormatter",
    "dollarFormatter",
    "editIconFormatter",
    "hyperlinkFormatter",
    "matchUrl",
    "hyperlinkUriPrefixFormatter",
    "uriPrefix",
    "infoIconFormatter",
    "lowercaseFormatter",
    "maskFormatter",
    "mask",
    "i_1",
    "v_1",
    "multipleFormatter",
    "formatters",
    "formatters_1",
    "formatters_1_1",
    "percentFormatter",
    "percentCompleteBarFormatter",
    "percentCompleteFormatter",
    "percentSymbolFormatter",
    "progressBarFormatter",
    "color",
    "translateFormatter",
    "translateBooleanFormatter",
    "uppercaseFormatter",
    "yesNoFormatter",
    "Formatters",
    "arrayObjectToCsv",
    "arrayToCsv",
    "bold",
    "checkmark",
    "complexObject",
    "collectionEditor",
    "deleteIcon",
    "decimal",
    "dollar",
    "dollarColored",
    "dollarColoredBold",
    "editIcon",
    "hyperlink",
    "hyperlinkUriPrefix",
    "infoIcon",
    "lowercase",
    "multiple",
    "percent",
    "percentComplete",
    "percentCompleteBar",
    "percentSymbol",
    "progressBar",
    "translateBoolean",
    "uppercase",
    "yesNo",
    "avgTotalsPercentageFormatter",
    "totals",
    "prefix",
    "groupFormatterPrefix",
    "suffix",
    "groupFormatterSuffix",
    "avgTotalsDollarFormatter",
    "avgTotalsFormatter",
    "minTotalsFormatter",
    "maxTotalsFormatter",
    "sumTotalsColoredFormatter",
    "sumTotalsDollarColoredBoldFormatter",
    "sumTotalsDollarColoredFormatter",
    "sumTotalsDollarBoldFormatter",
    "sumTotalsDollarFormatter",
    "sumTotalsFormatter",
    "sumTotalsBoldFormatter",
    "GroupTotalFormatters",
    "avgTotals",
    "avgTotalsDollar",
    "avgTotalsPercentage",
    "maxTotals",
    "minTotals",
    "sumTotals",
    "sumTotalsBold",
    "sumTotalsColored",
    "sumTotalsDollar",
    "sumTotalsDollarBold",
    "sumTotalsDollarColored",
    "sumTotalsDollarColoredBold",
    "SlickPaginationComponent",
    "_isFirstRender",
    "onPaginationChanged",
    "EventEmitter",
    "dataFrom",
    "dataTo",
    "pageCount",
    "paginationPageSizes",
    "fromToParams",
    "from",
    "to",
    "_gridPaginationOptions",
    "gridPaginationOptions",
    "refreshPagination",
    "ngOnDestroy",
    "ngAfterViewInit",
    "_filterSubcription",
    "changeToFirstPage",
    "onPageChanged",
    "changeToLastPage",
    "changeToNextPage",
    "changeToPreviousPage",
    "changeToCurrentPage",
    "currentTarget",
    "onChangeItemPerPage",
    "itemsPerPage",
    "isPageNumberReset",
    "recalculateFromToIndexes",
    "itemCount",
    "emit",
    "Component",
    "selector",
    "template",
    "Output",
    "Input",
    "AngularSlickgridComponent",
    "elm",
    "gridService",
    "gridEventService",
    "groupingAndColspanService",
    "resizer",
    "forRootConfig",
    "groupingDefinition",
    "showPagination",
    "isGridInitialized",
    "onAngularGridCreated",
    "onDataviewCreated",
    "onGridCreated",
    "onGridInitialized",
    "onBeforeGridCreate",
    "onBeforeGridDestroy",
    "onAfterGridDestroyed",
    "gridWidth",
    "updateColumnDefinitionsList",
    "getItems",
    "dataset",
    "_dataset",
    "refreshGridData",
    "ngOnInit",
    "gridHeightString",
    "gridWidthString",
    "emptyDomElementContainer",
    "initialization",
    "mergeGridOptions",
    "createBackendApiInternalPostProcessCallback",
    "Data",
    "GroupItemMetadataProvider",
    "DataView",
    "loadEditorCollectionAsync",
    "Grid",
    "attachDifferentHooks",
    "beginUpdate",
    "setItems",
    "endUpdate",
    "executeAfterDataviewCreated",
    "attachResizeHook",
    "attachBackendCallbackFunctions",
    "slickGrid",
    "groupingService",
    "pluginService",
    "resizerService",
    "backendApi_1",
    "nodes",
    "totalCount",
    "onLangChange",
    "checkboxColumn",
    "_loop_3",
    "this_3",
    "dispatchCustomEvent",
    "eventData",
    "_loop_4",
    "this_4",
    "gridStateChange",
    "updateRowCount",
    "onRowsChanged",
    "invalidateRows",
    "rows",
    "colspanCallback",
    "isExecuteCommandOnInit",
    "onInit",
    "observableOrPromise_1",
    "tslib_1.__awaiter",
    "paginationChanged",
    "reSort",
    "isShowing",
    "toggleHeaderRow",
    "isBubbling",
    "isCancelable",
    "eventInit",
    "bubbles",
    "cancelable",
    "detail",
    "nativeElement",
    "dispatchEvent",
    "resolvedCollection",
    "updateEditorCollection",
    "providers",
    "ElementRef",
    "decorators",
    "Inject",
    "AngularSlickgridModule",
    "forRoot",
    "ngModule",
    "provide",
    "useValue",
    "NgModule",
    "imports",
    "CommonModule",
    "TranslateModule",
    "declarations",
    "exports",
    "entryComponents",
    "buf",
    "charCodeAt"
  ],
  "mappings": "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"
}
