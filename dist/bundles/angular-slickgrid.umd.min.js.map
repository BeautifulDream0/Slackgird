{
  "version": 3,
  "file": "angular-slickgrid.umd.min.js",
  "sources": [
    "ng://angular-slickgrid/node_modules/tslib/tslib.es6.js",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/delimiterType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/fileType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/gridStateType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/operatorType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/sortDirection.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/compareDateUtility.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsShortSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateIsoSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/numericSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/stringSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/sorterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/collection.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/booleanFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/filterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateIsoFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsShortFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUtcFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/collectionSearchFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/numberFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/stringFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/executeMappedCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundDateFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundInputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/inputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/multipleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/selectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/singleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/filter.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/export.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/sort.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/controlAndPlugin.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphqlQueryBuilder.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphql.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/global-utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid-odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridEvent.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridState.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/groupingAndColspan.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/resizer.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/avgAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/minAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/maxAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/sumAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/checkboxEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/dateEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/floatEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/integerEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/longTextEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/multipleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/singleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/textEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/arrayToCsvFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/boldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkboxFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkmarkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionEditorFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/complexObjectFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/deleteIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/editIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkUriPrefixFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/infoIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/lowercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/multipleFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentSymbolFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/progressBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateBooleanFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/uppercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/yesNoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsPercentageFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/minTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/maxTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/slick-pagination.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/global-grid-options.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/angular-slickgrid.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/modules/angular-slickgrid.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n",
    "export enum DelimiterType {\r\n  colon = ':',\r\n  comma = ',',\r\n  equalSign = '=',\r\n  pipe = '|',\r\n  semicolon = ';',\r\n  space = ' ',\r\n  tab = '\\t',\r\n\r\n  doubleColon = '::',\r\n  doublePipe = '||',\r\n  doubleSemicolon = ';;',\r\n}\r\n\r\n",
    "export enum FileType {\r\n  csv = 'csv',\r\n  doc = 'doc',\r\n  docx = 'docx',\r\n  pdf = 'pdf',\r\n  txt = 'txt',\r\n  xls = 'xls',\r\n  xlsx = 'xlsx'\r\n}\r\n",
    "export enum GridStateType {\n  columns = 'columns',\n  filter = 'filter',\n  pagination = 'pagination',\n  sorter = 'sorter'\n}\n",
    "export enum OperatorType {\r\n  contains = 'Contains',\r\n  lessThan = 'LT',\r\n  lessThanOrEqual = 'LE',\r\n  greaterThan = 'GT',\r\n  greaterThanOrEqual = 'GE',\r\n  notEqual = 'NE',\r\n  equal = 'EQ',\r\n  endsWith = 'EndsWith',\r\n  startsWith = 'StartsWith',\r\n  in = 'IN',\r\n  notIn = 'NIN'\r\n}\r\n",
    "export enum SortDirection {\r\n  asc = 'asc',\r\n  ASC = 'ASC',\r\n  desc = 'desc',\r\n  DESC = 'DESC'\r\n}\r\n",
    "import { FieldType, OperatorType, FilterType } from '../models/index';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/first';\r\nimport 'rxjs/add/operator/take';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\n/** Simple function to which will loop and create as demanded the number of white spaces,\r\n * this will be used in the Excel export\r\n * @param int nbSpaces: number of white spaces to create\r\n */\r\nexport function addWhiteSpaces(nbSpaces): string {\r\n  let result = '';\r\n\r\n  for (let i = 0; i < nbSpaces; i++) {\r\n    result += ' ';\r\n  }\r\n  return result;\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityDecode(input: string): string {\r\n  return input.replace(/&#(\\d+);/g, function (match, dec) {\r\n    return String.fromCharCode(dec);\r\n  });\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityEncode(input: any): string {\r\n  const buf = [];\r\n  for (let i = input.length - 1; i >= 0; i--) {\r\n    buf.unshift(['&#', input[i].charCodeAt(), ';'].join(''));\r\n  }\r\n  return buf.join('');\r\n}\r\n\r\n/**\r\n * Compares two arrays to determine if all the items are equal\r\n * @param a first array\r\n * @param b second array to compare with a\r\n * @param [orderMatters=false] flag if the order matters, if not arrays will be sorted\r\n * @return boolean true if equal, else false\r\n */\r\nexport function arraysEqual(a: any[], b: any[], orderMatters: boolean = false): boolean {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n\r\n  if (a === null || b === null) {\r\n    return false;\r\n  }\r\n\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n\r\n  if (!orderMatters) {\r\n    a.sort();\r\n    b.sort();\r\n  }\r\n\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Try casting an input of type Promise | Observable into a Promise type.\r\n * @param object which could be of type Promise or Observable\r\n * @param fromServiceName string representing the caller service name and will be used if we throw a casting problem error\r\n */\r\nexport function castToPromise<T>(input: Promise<T> | Observable<T>, fromServiceName: string = ''): Promise<T> {\r\n  let promise: any = input;\r\n\r\n  if (input instanceof Promise) {\r\n    // if it's already a Promise then return it\r\n    return input;\r\n  } else if (input instanceof Observable) {\r\n    promise = input.first().toPromise();\r\n    if (!(promise instanceof Promise)) {\r\n      promise = input.take(1).toPromise();\r\n    }\r\n    if (!(promise instanceof Promise)) {\r\n      throw new Error(\r\n        `Something went wrong, Angular-Slickgrid ${fromServiceName} is not able to convert the Observable into a Promise.\r\n        If you are using Angular HttpClient, you could try converting your http call to a Promise with \".toPromise()\"\r\n        for example::  this.http.post('graphql', { query: graphqlQuery }).toPromise()\r\n        `);\r\n    }\r\n  }\r\n\r\n  return promise;\r\n}\r\n\r\n/**\r\n * Uses the logic function to find an item in an array or returns the default\r\n * value provided (empty object by default)\r\n * @param any[] array the array to filter\r\n * @param function logic the logic to find the item\r\n * @param any [defaultVal={}] the default value to return\r\n * @return object the found object or deafult value\r\n */\r\nexport function findOrDefault(array: any[], logic: (item: any) => boolean, defaultVal = {}): any {\r\n  return array.find(logic) || defaultVal;\r\n}\r\n\r\n/**\r\n  * Take a number (or a string) and display it as a formatted decimal string with defined minimum and maximum decimals\r\n  * @param input\r\n  * @param minDecimal\r\n  * @param maxDecimal\r\n  */\r\nexport function decimalFormatted(input: number | string, minDecimal?: number, maxDecimal?: number) {\r\n  if (isNaN(+input)) {\r\n    return input;\r\n  }\r\n\r\n  const minDec = (minDecimal === undefined) ? 2 : minDecimal;\r\n  const maxDec = (maxDecimal === undefined) ? 2 : maxDecimal;\r\n  let amount = String(Math.round(+input * Math.pow(10, maxDec)) / Math.pow(10, maxDec));\r\n\r\n  if (amount.indexOf('.') < 0) {\r\n    amount += '.';\r\n  }\r\n  while ((amount.length - amount.indexOf('.')) <= minDec) {\r\n    amount += '0';\r\n  }\r\n  return amount;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent moment.js format\r\n * refer to moment.js for the format standard used: https://momentjs.com/docs/#/parsing/string-format/\r\n * @param fieldType\r\n */\r\nexport function mapMomentDateFormatWithFieldType(fieldType: FieldType): string {\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'YYYY-MM-DD HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'YYYY-MM-DD hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'YYYY-MM-DD hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'MM/DD/YYYY';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'M/D/YY';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'MM/DD/YYYY HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'MM/DD/YYYY hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'MM/DD/YYYY hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'M/D/YY H:m:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'M/D/YY h:m:s a';\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'YYYY-MM-DD';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent Flatpickr format\r\n * refer to Flatpickr for the format standard used: https://chmln.github.io/flatpickr/formatting/#date-formatting-tokens\r\n * also note that they seem very similar to PHP format (except for am/pm): http://php.net/manual/en/function.date.php\r\n * @param fieldType\r\n */\r\nexport function mapFlatpickrDateFormatWithFieldType(fieldType: FieldType): string {\r\n  /*\r\n    d: Day of the month, 2 digits with leading zeros\t01 to 31\r\n    D: A textual representation of a day\tMon through Sun\r\n    l: (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday\r\n    j: Day of the month without leading zeros\t1 to 31\r\n    J: Day of the month without leading zeros and ordinal suffix\t1st, 2nd, to 31st\r\n    w: Numeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday)\r\n    F: A full textual representation of a month\tJanuary through December\r\n    m: Numeric representation of a month, with leading zero\t01 through 12\r\n    n: Numeric representation of a month, without leading zeros\t1 through 12\r\n    M: A short textual representation of a month\tJan through Dec\r\n    U: The number of seconds since the Unix Epoch\t1413704993\r\n    y: A two digit representation of a year\t99 or 03\r\n    Y: A full numeric representation of a year, 4 digits\t1999 or 2003\r\n    H: Hours (24 hours)\t00 to 23\r\n    h: Hours\t1 to 12\r\n    i: Minutes\t00 to 59\r\n    S: Seconds, 2 digits\t00 to 59\r\n    s: Seconds\t0, 1 to 59\r\n    K: AM/PM\tAM or PM\r\n  */\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'Y-m-d H:i:S';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'Y-m-d h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'Y-m-d h:i:S K';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'm/d/Y';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'm/d/y';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'm/d/Y H:i:S';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'm/d/Y h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'm/d/Y h:i:s K';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'm/d/y H:i:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'm/d/y h:i:s K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'Z';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'Y-m-d';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operators (ex.: <= is \"le\", > is \"gt\")\r\n * @param string operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorType(operator: string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (operator) {\r\n    case '<':\r\n      map = OperatorType.lessThan;\r\n      break;\r\n    case '<=':\r\n      map = OperatorType.lessThanOrEqual;\r\n      break;\r\n    case '>':\r\n      map = OperatorType.greaterThan;\r\n      break;\r\n    case '>=':\r\n      map = OperatorType.greaterThanOrEqual;\r\n      break;\r\n    case '<>':\r\n    case '!=':\r\n    case 'neq':\r\n    case 'NEQ':\r\n      map = OperatorType.notEqual;\r\n      break;\r\n    case '*':\r\n    case '.*':\r\n    case 'startsWith':\r\n      map = OperatorType.startsWith;\r\n      break;\r\n    case '*.':\r\n    case 'endsWith':\r\n      map = OperatorType.endsWith;\r\n      break;\r\n    case '=':\r\n    case '==':\r\n    case 'eq':\r\n    case 'EQ':\r\n      map = OperatorType.equal;\r\n      break;\r\n    case 'in':\r\n    case 'IN':\r\n      map = OperatorType.in;\r\n      break;\r\n    case 'notIn':\r\n    case 'NIN':\r\n    case 'NOT_IN':\r\n      map = OperatorType.notIn;\r\n      break;\r\n    default:\r\n      map = OperatorType.contains;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operator by a Filter Type\r\n * For example a multiple-select typically uses 'IN' operator\r\n * @param operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorByFieldType(fieldType: FieldType | string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.string:\r\n    case FieldType.unknown:\r\n      map = OperatorType.contains;\r\n      break;\r\n    case FieldType.float:\r\n    case FieldType.number:\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    case FieldType.date:\r\n    case FieldType.dateUtc:\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n    case FieldType.dateTimeIsoAmPm:\r\n    case FieldType.dateTimeIsoAM_PM:\r\n    case FieldType.dateUs:\r\n    case FieldType.dateUsShort:\r\n    case FieldType.dateTimeUs:\r\n    case FieldType.dateTimeUsAmPm:\r\n    case FieldType.dateTimeUsAM_PM:\r\n    case FieldType.dateTimeUsShort:\r\n    case FieldType.dateTimeUsShortAmPm:\r\n    case FieldType.dateTimeUsShortAM_PM:\r\n    default:\r\n      map = OperatorType.equal;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operator by a Filter Type\r\n * For example a multiple-select typically uses 'IN' operator\r\n * @param operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorByFilterType(filterType: FilterType | string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (filterType) {\r\n    case FilterType.multipleSelect:\r\n      map = OperatorType.in;\r\n      break;\r\n    case FilterType.singleSelect:\r\n      map = OperatorType.equal;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Parse a date passed as a string and return a Date object (if valid)\r\n * @param inputDateString\r\n * @returns string date formatted\r\n */\r\nexport function parseUtcDate(inputDateString: string, useUtc: boolean): string | null {\r\n  let date = null;\r\n\r\n  if (/^[0-9\\-\\/]*$/.test(inputDateString)) {\r\n    // get the UTC datetime with moment.js but we need to decode the value so that it's valid text\r\n    const dateString = decodeURIComponent(inputDateString);\r\n    const dateMoment = moment(new Date(dateString));\r\n    if (dateMoment.isValid() && dateMoment.year().toString().length === 4) {\r\n      date = (useUtc) ? dateMoment.utc().format() : dateMoment.format();\r\n    }\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\n/**\r\n * Sanitize, return only the text without HTML tags\r\n * @input htmlString\r\n * @return text\r\n */\r\nexport function sanitizeHtmlToText(htmlString: string) {\r\n  const temp = document.createElement('div');\r\n  temp.innerHTML = htmlString;\r\n  return temp.textContent || temp.innerText;\r\n}\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string\r\n * @returns string\r\n */\r\nexport function titleCase(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Converts a string to camel case\r\n * @param str the string to convert\r\n * @return the string in camel case\r\n */\r\nexport function toCamelCase(str: string): string {\r\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w|[\\s+\\-_\\/])/g, (match: string, offset: number) => {\r\n    // remove white space or hypens or underscores\r\n    if (/[\\s+\\-_\\/]/.test(match)) {\r\n      return '';\r\n    }\r\n\r\n    return offset === 0 ? match.toLowerCase() : match.toUpperCase();\r\n  });\r\n}\r\n\r\n/**\r\n * Converts a string to kebab (hypen) case\r\n * @param str the string to convert\r\n * @return the string in kebab case\r\n */\r\nexport function toKebabCase(str: string): string {\r\n  return toCamelCase(str).replace(/([A-Z])/g, '-$1').toLowerCase();\r\n}\r\n",
    "import * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport function compareDates(value1, value2, format, sortDirection, strict?: boolean) {\r\n  let diff = 0;\r\n\r\n  if (value1 === null || value1 === '' || !moment(value1, format, strict).isValid()) {\r\n    diff = -1;\r\n  } else if (value2 === null || value2 === '' || !moment(value2, format, strict).isValid()) {\r\n    diff = 1;\r\n  } else {\r\n    const date1 = moment(value1, format, strict);\r\n    const date2 = moment(value2, format, strict);\r\n    diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);\r\n  }\r\n\r\n  return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));\r\n}\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nimport { compareDates } from './compareDateUtility';\r\n\r\nexport const dateSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, moment.ISO_8601, sortDirection);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const numericSorter: Sorter = (value1, value2, sortDirection) => {\r\n  const x = (isNaN(value1) || value1 === '' || value1 === null) ? -99e+10 : parseFloat(value1);\r\n  const y = (isNaN(value2) || value2 === '' || value2 === null) ? -99e+10 : parseFloat(value2);\r\n  return sortDirection * (x === y ? 0 : (x > y ? 1 : -1));\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const stringSorter: Sorter = (value1, value2, sortDirection) => {\r\n  let position;\r\n  if (value1 === null) {\r\n    position = -1;\r\n  } else if (value2 === null) {\r\n    position = 1;\r\n  } else if (value1 === value2) {\r\n    position = 0;\r\n  } else if (sortDirection) {\r\n    position = value1 < value2 ? -1 : 1;\r\n  } else if (!sortDirection) {\r\n    position = value1 < value2 ? 1 : -1;\r\n  }\r\n  return sortDirection * position;\r\n};\r\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\nimport { dateUsShortSorter } from './dateUsShortSorter';\nimport { dateSorter } from './dateSorter';\nimport { dateIsoSorter } from './dateIsoSorter';\nimport { dateUsSorter } from './dateUsSorter';\nimport { numericSorter } from './numericSorter';\nimport { stringSorter } from './stringSorter';\n\nexport const Sorters = {\n  date: dateSorter,\n  dateIso: dateIsoSorter,\n  dateUs: dateUsSorter,\n  dateUsShort: dateUsShortSorter,\n  numeric: numericSorter,\n  string: stringSorter\n};\n",
    "import { FieldType } from './../models/index';\r\nimport { Sorters } from './index';\r\n\r\nexport function sortByFieldType(value1: any, value2: any, fieldType: FieldType, sortDirection: number) {\r\n  let sortResult = 0;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.number:\r\n      sortResult = Sorters.numeric(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.date:\r\n      sortResult = Sorters.date(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateIso:\r\n      sortResult = Sorters.dateIso(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUs:\r\n      sortResult = Sorters.dateUs(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      sortResult = Sorters.dateUsShort(value1, value2, sortDirection);\r\n      break;\r\n    default:\r\n      sortResult = Sorters.string(value1, value2, sortDirection);\r\n      break;\r\n  }\r\n\r\n  return sortResult;\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  CollectionFilterBy,\r\n  CollectionSortBy,\r\n  FieldType,\r\n  OperatorType,\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\n\r\n@Injectable()\r\nexport class CollectionService {\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /**\r\n   * Filter items from a collection\r\n   * @param collection\r\n   * @param filterBy\r\n   */\r\n  filterCollection(collection: any[], filterBy: CollectionFilterBy): any[] {\r\n    let filteredCollection: any[] = [];\r\n\r\n    if (filterBy) {\r\n      const property = filterBy.property || '';\r\n      const operator = filterBy.operator || OperatorType.equal;\r\n      // just check for undefined since the filter value could be null, 0, '', false etc\r\n      const value = typeof filterBy.value === 'undefined' ? '' : filterBy.value;\r\n\r\n      switch (operator) {\r\n        case OperatorType.equal:\r\n          filteredCollection = collection.filter((item) => item[property] === value);\r\n          break;\r\n        case OperatorType.in:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) !== -1);\r\n          break;\r\n        case OperatorType.notIn:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) === -1);\r\n          break;\r\n        case OperatorType.contains:\r\n          filteredCollection = collection.filter((item) => value.indexOf(item[property]) !== -1);\r\n          break;\r\n        default:\r\n          filteredCollection = collection.filter((item) => item[property] !== value);\r\n      }\r\n    }\r\n\r\n    return filteredCollection;\r\n  }\r\n\r\n  /**\r\n   * Sort items in a collection\r\n   * @param collection\r\n   * @param sortBy\r\n   * @param enableTranslateLabel\r\n   */\r\n  sortCollection(collection: any[], sortBy: CollectionSortBy, enableTranslateLabel?: boolean): any[] {\r\n    let sortedCollection: any[] = [];\r\n\r\n    if (sortBy) {\r\n      const property = sortBy.property || '';\r\n      const sortDirection = sortBy.hasOwnProperty('sortDesc') ? (sortBy.sortDesc ? -1 : 1) : 1;\r\n      const fieldType = sortBy.fieldType || FieldType.string;\r\n\r\n      sortedCollection = collection.sort((dataRow1: any, dataRow2: any) => {\r\n        const value1 = (enableTranslateLabel) ? this.translate.instant(dataRow1[property] || ' ') : dataRow1[property];\r\n        const value2 = (enableTranslateLabel) ? this.translate.instant(dataRow2[property] || ' ') : dataRow2[property];\r\n        const result = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n        return result;\r\n      });\r\n    }\r\n\r\n    return sortedCollection;\r\n  }\r\n}\r\n",
    "import { FilterCondition, FilterConditionOption } from './../models/index';\r\n\r\nfunction parseBoolean(str: number | string) {\r\n  return /(true|1)/i.test(str + '');\r\n}\r\n\r\nexport const booleanFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  return parseBoolean(options.cellValue) === parseBoolean(searchTerm);\r\n};\r\n",
    "export const testFilterCondition = (operator: string, value1: any, value2: any): boolean => {\r\n  switch (operator) {\r\n    case '<':\r\n    case 'LT': return (value1 < value2);\r\n    case '<=':\r\n    case 'LE': return (value1 <= value2);\r\n    case '>':\r\n    case 'GT': return (value1 > value2);\r\n    case '>=':\r\n    case 'GE': return (value1 >= value2);\r\n    case '!=':\r\n    case '<>':\r\n    case 'NE': return (value1 !== value2);\r\n    case '=':\r\n    case '==':\r\n    case 'EQ': return (value1 === value2);\r\n    case 'IN': return ((value2 && value2.includes) ? (value2.includes(value1)) : false);\r\n  }\r\n  return true;\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  const filterSearchType = options.filterSearchType || FieldType.dateIso;\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(filterSearchType);\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerm, searchDateFormat, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue);\r\n  const dateSearch = moment(searchTerm);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateUtcFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerms = Array.isArray(options.searchTerms) && options.searchTerms[0] || [];\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(options.filterSearchType || options.fieldType);\r\n  if (!moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerms[0], searchDateFormat, true).isValid()) {\r\n    return true;\r\n  }\r\n  const dateCell = moment(options.cellValue, moment.ISO_8601, true);\r\n  const dateSearch = moment(searchTerms[0], searchDateFormat, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const collectionSearchFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // multiple-select will always return text, so we should make our cell values text as well\r\n  const cellValue = options.cellValue + '';\r\n\r\n  return testFilterCondition(options.operator || 'IN', cellValue, options.searchTerms || []);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\nimport { testFilterCondition } from './filterUtilities';\n\nexport const numberFilterCondition: FilterCondition = (options: FilterConditionOption) => {\n  const cellValue = parseFloat(options.cellValue);\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || 0;\n  if (typeof searchTerm === 'string') {\n    searchTerm = parseFloat(searchTerm);\n  }\n\n  if (!searchTerm && (!options.operator || options.operator === '')) {\n    return true;\n  }\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\n};\n",
    "import { FilterCondition, FilterConditionOption, OperatorType } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const stringFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // make sure the cell value is a string by casting it when possible\r\n  options.cellValue = (options.cellValue === undefined || options.cellValue === null) ? '' : options.cellValue.toString();\r\n\r\n  // make both the cell value and search value lower for case insensitive comparison\r\n  const cellValue = options.cellValue.toLowerCase();\r\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || '';\r\n  if (typeof searchTerm === 'string') {\r\n    searchTerm = searchTerm.toLowerCase();\r\n  }\r\n\r\n  if (options.operator === '*' || options.operator === OperatorType.endsWith) {\r\n    return cellValue.endsWith(searchTerm);\r\n  } else if ((options.operator === '' && options.cellValueLastChar === '*') || options.operator === OperatorType.startsWith) {\r\n    return cellValue.startsWith(searchTerm);\r\n  } else if (options.operator === '') {\r\n    return cellValue.includes(searchTerm);\r\n  }\r\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\r\n};\r\n",
    "import { booleanFilterCondition } from './booleanFilterCondition';\r\nimport { dateFilterCondition } from './dateFilterCondition';\r\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\r\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\r\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\r\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\r\nimport { FilterConditionOption } from './../models/filterConditionOption.interface';\r\nimport { FilterCondition } from '../models/filterCondition.interface';\r\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { numberFilterCondition } from './numberFilterCondition';\r\nimport { stringFilterCondition } from './stringFilterCondition';\r\nimport { FieldType } from '../models/index';\r\n\r\nexport const executeMappedCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // when using a multi-select ('IN' operator) we will not use the field type but instead go directly with a collection search\r\n  if (options && options.operator && options.operator.toUpperCase() === 'IN') {\r\n    return collectionSearchFilterCondition(options);\r\n  }\r\n\r\n  // execute the mapped type, or default to String condition check\r\n  switch (options.fieldType) {\r\n    case FieldType.boolean:\r\n      return booleanFilterCondition(options);\r\n    case FieldType.date:\r\n      return dateFilterCondition(options);\r\n    case FieldType.dateUtc:\r\n      return dateUtcFilterCondition(options);\r\n    case FieldType.dateIso:\r\n      return dateIsoFilterCondition(options);\r\n    case FieldType.dateUs:\r\n    case FieldType.dateTimeUs:\r\n      return dateUsFilterCondition(options);\r\n    case FieldType.dateUsShort:\r\n    case FieldType.dateTimeUsShort:\r\n      return dateUsShortFilterCondition(options);\r\n    case FieldType.number:\r\n      return numberFilterCondition(options);\r\n    case FieldType.string:\r\n    default:\r\n      return stringFilterCondition(options);\r\n  }\r\n};\r\n",
    "import { FilterConditionOption } from './../models/filterConditionOption.interface';\r\nimport { booleanFilterCondition } from './booleanFilterCondition';\r\nimport { dateFilterCondition } from './dateFilterCondition';\r\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\r\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\r\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\r\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\r\nimport { executeMappedCondition } from './executeMappedCondition';\r\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { numberFilterCondition } from './numberFilterCondition';\r\nimport { stringFilterCondition } from './stringFilterCondition';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const FilterConditions = {\r\n  executeMappedCondition,\r\n  booleanFilter: booleanFilterCondition,\r\n  collectionSearchFilter: collectionSearchFilterCondition,\r\n  dateFilter: dateFilterCondition,\r\n  dateIsoFilter: dateIsoFilterCondition,\r\n  dateUtcFilter: dateUtcFilterCondition,\r\n  dateUsFilter: dateUsFilterCondition,\r\n  dateUsShortFilter: dateUsShortFilterCondition,\r\n  numberFilter: numberFilterCondition,\r\n  stringFilter: stringFilterCondition,\r\n  testFilter: testFilterCondition\r\n};\r\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { mapFlatpickrDateFormatWithFieldType } from '../services/utilities';\nimport { Column, Filter, FilterArguments, FilterCallback, FieldType, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\n\n// importing Flatpickr works better with a 'require'\ndeclare function require(name: string);\nrequire('flatpickr');\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n@Injectable()\nexport class CompoundDateFilter implements Filter {\n  private $filterElm: any;\n  private $filterInputElm: any;\n  private $selectOperatorElm: any;\n  private _currentValue: string;\n  flatInstance: any;\n  grid: any;\n  operator: OperatorType | OperatorString;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor(private translate: TranslateService) {}\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.operator = args.operator;\n    this.searchTerms = args.searchTerms || [];\n\n    // date input can only have 1 search term, so we will use the 1st array index if it exist\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\n    // and initialize it if searchTerms is filled\n    this.$filterElm = this.createDomElement(searchTerm);\n\n    // step 3, subscribe to the keyup event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterInputElm.keyup((e: any) => {\n      this.onTriggerEvent(e);\n    });\n    this.$selectOperatorElm.change((e: any) => {\n      this.onTriggerEvent(e);\n    });\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.flatInstance && this.$selectOperatorElm) {\n      this.$selectOperatorElm.val(0);\n      this.flatInstance.clear();\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('keyup').remove();\n      this.$selectOperatorElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values && Array.isArray(values)) {\n      this.flatInstance.setDate(values[0]);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  private buildDatePickerInput(searchTerm?: SearchTerm) {\n    const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\n    const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnDef.type || FieldType.dateUtc);\n    let currentLocale = this.getCurrentLocale(this.columnDef, this.gridOptions) || '';\n    if (currentLocale.length > 2) {\n      currentLocale = currentLocale.substring(0, 2);\n    }\n\n    const pickerOptions: any = {\n      defaultDate: searchTerm || '',\n      altInput: true,\n      altFormat: outputFormat,\n      dateFormat: inputFormat,\n      wrap: true,\n      closeOnSelect: true,\n      locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\n      onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\n        this._currentValue = dateStr;\n\n        // when using the time picker, we can simulate a keyup event to avoid multiple backend request\n        // since backend request are only executed after user start typing, changing the time should be treated the same way\n        if (pickerOptions.enableTime) {\n          this.onTriggerEvent(new CustomEvent('keyup'), dateStr === '');\n        } else {\n          this.onTriggerEvent(undefined, dateStr === '');\n        }\n      },\n    };\n\n    // add the time picker when format is UTC (Z) or has the 'h' (meaning hours)\n    if (outputFormat && (outputFormat === 'Z' || outputFormat.toLowerCase().includes('h'))) {\n      pickerOptions.enableTime = true;\n    }\n\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\n    const $filterInputElm = $(`<div class=flatpickr><input type=\"text\" class=\"form-control\" data-input placeholder=\"${placeholder}\"></div>`);\n    this.flatInstance = ($filterInputElm[0] && typeof $filterInputElm[0].flatpickr === 'function') ? $filterInputElm[0].flatpickr(pickerOptions) : null;\n    return $filterInputElm;\n  }\n\n  private buildSelectOperatorHtmlString() {\n    const optionValues = this.getOptionValues();\n    let optionValueString = '';\n    optionValues.forEach((option) => {\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\n    });\n\n    return `<select class=\"form-control\">${optionValueString}</select>`;\n  }\n\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\n    return [\n      { operator: '' as OperatorString, description: '' },\n      { operator: '=' as OperatorString, description: '' },\n      { operator: '<' as OperatorString, description: '' },\n      { operator: '<=' as OperatorString, description: '' },\n      { operator: '>' as OperatorString, description: '' },\n      { operator: '>=' as OperatorString, description: '' },\n      { operator: '<>' as OperatorString, description: '' }\n    ];\n  }\n\n  /**\n   * Create the DOM element\n   */\n  private createDomElement(searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    if (searchTerm) {\n      this._currentValue = searchTerm as string;\n    }\n\n    // create the DOM Select dropdown for the Operator\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\n    this.$filterInputElm = this.buildDatePickerInput(searchTerm);\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\n    const $containerInputGroup = $(`<div class=\"input-group flatpickr\"></div>`);\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon operator\"></div>`);\n\n    /* the DOM element final structure will be\n      <div class=\"input-group\">\n        <div class=\"input-group-addon operator\">\n          <select class=\"form-control\"></select>\n        </div>\n        <div class=flatpickr>\n          <input type=\"text\" class=\"form-control\" data-input>\n        </div>\n      </div>\n    */\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\n    $containerInputGroup.append($operatorInputGroupAddon);\n    $containerInputGroup.append(this.$filterInputElm);\n\n    // create the DOM element & add an ID and filter class\n    $filterContainerElm.append($containerInputGroup);\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterInputElm.data('columnId', this.columnDef.id);\n\n    if (this.operator) {\n      this.$selectOperatorElm.val(this.operator);\n    }\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterContainerElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\n      $filterContainerElm.appendTo($headerElm);\n    }\n\n    return $filterContainerElm;\n  }\n\n  private getCurrentLocale(columnDef: Column, gridOptions: GridOption) {\n    const options = gridOptions || columnDef.params || {};\n    if (options.i18n && options.i18n instanceof TranslateService) {\n      return options.i18n.currentLang;\n    }\n\n    return 'en';\n  }\n\n  private loadFlatpickrLocale(locale: string) {\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\n    if (locale !== 'en') {\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\n    }\n    return 'en';\n  }\n\n  private onTriggerEvent(e: Event | undefined, clearFilterTriggered?: boolean) {\n    if (clearFilterTriggered) {\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\n    } else {\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\n      (this._currentValue) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\n      this.callback(e, { columnDef: this.columnDef, searchTerms: [this._currentValue], operator: selectedOperator || '' });\n    }\n  }\n\n  private hide() {\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\n      this.flatInstance.close();\n    }\n  }\n\n  private show() {\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\n      this.flatInstance.open();\n    }\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FieldType } from './../models/index';\nimport { Column, Filter, FilterArguments, FilterCallback, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\nimport { htmlEntityEncode } from '..';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n@Injectable()\nexport class CompoundInputFilter implements Filter {\n  private $filterElm: any;\n  private $filterInputElm: any;\n  private $selectOperatorElm: any;\n  grid: any;\n  operator: OperatorType | OperatorString;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor(private translate: TranslateService) {}\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.operator = args.operator;\n    this.searchTerms = args.searchTerms || [];\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\n    // and initialize it if searchTerms is filled\n    this.$filterElm = this.createDomElement(searchTerm);\n\n    // step 3, subscribe to the keyup event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterInputElm.keyup((e: any) => {\n      this.onTriggerEvent(e);\n    });\n    this.$selectOperatorElm.change((e: any) => {\n      this.onTriggerEvent(e);\n    });\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm && this.$selectOperatorElm) {\n      this.$selectOperatorElm.val(0);\n      this.$filterInputElm.val('');\n      this.onTriggerEvent(null, true);\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('keyup').remove();\n      this.$selectOperatorElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values && Array.isArray(values)) {\n      this.$filterElm.val(values[0]);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  private buildInputHtmlString() {\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\n    return `<input class=\"form-control\" type=\"text\" placeholder=\"${placeholder}\" />`;\n  }\n\n  private buildSelectOperatorHtmlString() {\n    const optionValues = this.getOptionValues();\n    let optionValueString = '';\n    optionValues.forEach((option) => {\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\n    });\n\n    return `<select class=\"form-control\">${optionValueString}</select>`;\n  }\n\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\n    const type = (this.columnDef.type && this.columnDef.type) ? this.columnDef.type : FieldType.string;\n    let optionValues = [];\n\n    switch (type) {\n      case FieldType.string:\n        optionValues = [\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\n          { operator: '=' as OperatorString, description: this.translate.instant('EQUALS') },\n          { operator: 'a*' as OperatorString, description: this.translate.instant('STARTS_WITH') },\n          { operator: '*z' as OperatorString, description: this.translate.instant('ENDS_WITH') },\n          /*\n          { operator: 'IN' as OperatorString, description: this.translate.instant('IN_COLLECTION_SEPERATED_BY_COMMA') },\n          { operator: 'NIN' as OperatorString, description: this.translate.instant('NOT_IN_COLLECTION_SEPERATED_BY_COMMA') },\n          */\n        ];\n        break;\n      default:\n        optionValues = [\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\n          { operator: '=' as OperatorString, description: '' },\n          { operator: '<' as OperatorString, description: '' },\n          { operator: '<=' as OperatorString, description: '' },\n          { operator: '>' as OperatorString, description: '' },\n          { operator: '>=' as OperatorString, description: '' },\n          { operator: '<>' as OperatorString, description: '' }];\n        break;\n    }\n\n    return optionValues;\n  }\n\n  /**\n   * Create the DOM element\n   */\n  private createDomElement(searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM Select dropdown for the Operator\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\n    this.$filterInputElm = $(this.buildInputHtmlString());\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\n    const $containerInputGroup = $(`<div class=\"input-group\"></div>`);\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon operator\"></div>`);\n\n    /* the DOM element final structure will be\n      <div class=\"input-group\">\n        <div class=\"input-group-addon operator\">\n          <select class=\"form-control\"></select>\n        </div>\n        <input class=\"form-control\" type=\"text\" />\n      </div>\n    */\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\n    $containerInputGroup.append($operatorInputGroupAddon);\n    $containerInputGroup.append(this.$filterInputElm);\n\n    // create the DOM element & add an ID and filter class\n    $filterContainerElm.append($containerInputGroup);\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\n\n    this.$filterInputElm.val(searchTerm);\n    this.$filterInputElm.data('columnId', this.columnDef.id);\n\n    if (this.operator) {\n      this.$selectOperatorElm.val(this.operator);\n    }\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterContainerElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\n      $filterContainerElm.appendTo($headerElm);\n    }\n\n    return $filterContainerElm;\n  }\n\n  private onTriggerEvent(e: Event | undefined, clearFilterTriggered?: boolean) {\n    if (clearFilterTriggered) {\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\n    } else {\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\n      const value = this.$filterInputElm.val();\n      (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\n      this.callback(e, { columnDef: this.columnDef, searchTerms: [value], operator: selectedOperator || '' });\n    }\n  }\n}\n",
    "import { Column, Filter, FilterArguments, FilterCallback, GridOption, SearchTerm } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class InputFilter implements Filter {\n  private $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor() {}\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString();\n\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\n\n    // step 3, subscribe to the keyup event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterElm.keyup((e: any) => {\n      const value = e && e.target && e.target.value || '';\n      if (!value || value === '') {\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\n        this.$filterElm.removeClass('filled');\n      } else {\n        this.$filterElm.addClass('filled');\n        this.callback(e, { columnDef: this.columnDef, searchTerms: [value] });\n      }\n    });\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm) {\n      this.$filterElm.val('');\n      this.$filterElm.trigger('keyup');\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('keyup').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm) {\n    if (values) {\n      this.$filterElm.val(values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString() {\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\n    return `<input type=\"text\" class=\"form-control search-filter\" placeholder=\"${placeholder}\">`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    const $filterElm = $(filterTemplate);\n\n    $filterElm.val(searchTerm);\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\n    $filterElm.data('columnId', this.columnDef.id);\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\n      $filterElm.appendTo($headerElm);\n    }\n\n    return $filterElm;\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CollectionService } from './../services/collection.service';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  MultipleSelectOption,\n  SearchTerm,\n  SelectOption,\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n@Injectable()\nexport class MultipleSelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n  defaultOptions: MultipleSelectOption;\n  isFilled = false;\n  labelName: string;\n  valueName: string;\n  enableTranslateLabel = false;\n\n  /**\n   * Initialize the Filter\n   */\n  constructor(private collectionService: CollectionService, private translate: TranslateService) {\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,  // input search term on top of the select option list\n      maxHeight: 200,\n      okButton: true,\n      addTitle: true, // show tooltip of all selected items while hovering the filter\n      countSelected: this.translate.instant('X_OF_Y_SELECTED'),\n      allSelected: this.translate.instant('ALL_SELECTED'),\n      selectAllText: this.translate.instant('SELECT_ALL'),\n      selectAllDelimiter: ['', ''], // remove default square brackets of default text \"[Select All]\" => \"Select All\"\n\n      // we will subscribe to the onClose event for triggering our callback\n      // also add/remove \"filled\" class for styling purposes\n      onClose: () => {\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\n          this.isFilled = true;\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\n        } else {\n          this.isFilled = false;\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\n        }\n        this.callback(undefined, { columnDef: this.columnDef, operator: 'IN', searchTerms: selectedItems });\n      }\n    };\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the filter template\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: type: FilterType.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let newCollection = this.columnDef.filter.collection || [];\n\n    // user might want to filter certain items of the collection\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\n      const filterBy = this.columnDef.filter.collectionFilterBy;\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\n      const sortBy = this.columnDef.filter.collectionSortBy;\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString(newCollection);\n\n    // step 2, create the DOM Element of the filter & pre-load search terms\n    // also subscribe to the onClose event\n    this.createDomElement(filterTemplate);\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\n      // this.$filterElm = $(`#${this.$filterElm[0].id}`);\n      this.$filterElm.multipleSelect('setSelects', []);\n\n      this.$filterElm.removeClass('filled');\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off().remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values) {\n      this.$filterElm.multipleSelect('setSelects', values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString(optionCollection: any[]) {\n    let options = '';\n    optionCollection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: type: FilterType.multipleSelect, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const selected = (this.findValueInSearchTerms(option[this.valueName]) >= 0) ? 'selected' : '';\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n\n      // html text of each select option\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\n\n      // if there's a search term, we will add the \"filled\" class for styling purposes\n      if (selected) {\n        this.isFilled = true;\n      }\n    });\n\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * Subscribe to the onClose event and run the callback when that happens\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    this.$filterElm = $(filterTemplate);\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\n    }\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterElm.data('columnId', this.columnDef.id);\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (this.isFilled) {\n      this.$filterElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\n      this.$filterElm.appendTo($headerElm);\n    }\n\n    // merge options & attach multiSelect\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\n    this.$filterElm = this.$filterElm.multipleSelect(options);\n  }\n\n  private findValueInSearchTerms(value: number | string): number {\n    if (this.searchTerms && Array.isArray(this.searchTerms)) {\n      for (let i = 0; i < this.searchTerms.length; i++) {\n        if (this.searchTerms[i] && this.searchTerms[i] === value) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport { Column, Filter, FilterArguments, FilterCallback, SearchTerm } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class SelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor(private translate: TranslateService) {}\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\n      searchTerm = `${searchTerm}`;\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString();\n\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\n\n    // step 3, subscribe to the change event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterElm.change((e: any) => {\n      const value = e && e.target && e.target.value || '';\n      if (!value || value === '') {\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\n        this.$filterElm.removeClass('filled');\n      } else {\n        this.$filterElm.addClass('filled');\n        this.callback(e, { columnDef: this.columnDef, searchTerms: [value], operator: 'EQ' });\n      }\n    });\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm) {\n      this.$filterElm.val('');\n      this.$filterElm.trigger('change');\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm | SearchTerm[]) {\n    if (values) {\n      this.$filterElm.val(values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  private buildTemplateHtmlString() {\n    if (!this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the Select Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: type: FilterType.select, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    const optionCollection = this.columnDef.filter.collection || [];\n    const labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    const valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let options = '';\n    optionCollection.forEach((option: any) => {\n      if (!option || (option[labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: type: FilterType.select, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n      const labelKey = option.labelKey || option[labelName];\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n      options += `<option value=\"${option[valueName]}\">${textLabel}</option>`;\n    });\n    return `<select class=\"form-control search-filter\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    const $filterElm = $(filterTemplate);\n    const searchTermInput = (searchTerm || '') as string;\n\n    $filterElm.val(searchTermInput);\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\n    $filterElm.data('columnId', this.columnDef.id);\n\n    // append the new DOM element to the header row\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\n      $filterElm.appendTo($headerElm);\n    }\n\n    return $filterElm;\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport { Injectable } from '@angular/core';\nimport { CollectionService } from './../services/collection.service';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  MultipleSelectOption,\n  SearchTerm,\n  SelectOption,\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n@Injectable()\nexport class SingleSelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n  defaultOptions: MultipleSelectOption;\n  isFilled = false;\n  labelName: string;\n  valueName: string;\n  enableTranslateLabel = false;\n\n  constructor(private collectionService: CollectionService, private translate: TranslateService) {\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,  // input search term on top of the select option list\n      maxHeight: 200,\n      single: true,\n      onClose: () => {\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\n        let selectedItem = '';\n\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\n          selectedItem = selectedItems[0];\n          this.isFilled = true;\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\n        } else {\n          this.isFilled = false;\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\n        }\n        this.callback(undefined, { columnDef: this.columnDef, operator: 'EQ', searchTerms: [selectedItem] });\n      }\n    };\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms;\n\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: type: FilterType.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let newCollection = this.columnDef.filter.collection || [];\n\n    // user might want to filter certain items of the collection\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\n      const filterBy = this.columnDef.filter.collectionFilterBy;\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\n      const sortBy = this.columnDef.filter.collectionSortBy;\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    // also when the search term is a boolean or a number, we will convert it to a string\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\n      searchTerm = `${searchTerm}`;\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString(newCollection || [], searchTerm);\n\n    // step 2, create the DOM Element of the filter & pre-load search term\n    this.createDomElement(filterTemplate);\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\n      // this.$filterElm = $(`#${this.$filterElm[0].id}`);\n      this.$filterElm.multipleSelect('setSelects', []);\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off().remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm | SearchTerm[]) {\n    if (values) {\n      values = Array.isArray(values) ? values : [values];\n      this.$filterElm.multipleSelect('setSelects', values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString(optionCollection: any[], searchTerm?: SearchTerm) {\n    let options = '';\n    optionCollection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: type: FilterType.singleSelect, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const selected = (option[this.valueName] === searchTerm) ? 'selected' : '';\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n\n      // html text of each select option\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\n\n      // if there's a search term, we will add the \"filled\" class for styling purposes\n      if (selected) {\n        this.isFilled = true;\n      }\n    });\n\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * Subscribe to the onClose event and run the callback when that happens\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    this.$filterElm = $(filterTemplate);\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\n    }\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterElm.data('columnId', this.columnDef.id);\n\n    // append the new DOM element to the header row\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\n      this.$filterElm.appendTo($headerElm);\n    }\n\n    // merge options & attach multiSelect\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\n    this.$filterElm = this.$filterElm.multipleSelect(options);\n  }\n}\n",
    "import { Column, Filter } from './../models/index';\r\nimport { CompoundDateFilter } from './compoundDateFilter';\r\nimport { CompoundInputFilter } from './compoundInputFilter';\r\nimport { InputFilter } from './inputFilter';\r\nimport { MultipleSelectFilter } from './multipleSelectFilter';\r\nimport { SelectFilter } from './selectFilter';\r\nimport { SingleSelectFilter } from './singleSelectFilter';\r\n\r\nexport const Filters = {\r\n  /** Default Filter, input type text filter with a magnifying glass placeholder */\r\n  input: InputFilter,\r\n\r\n  /** Multiple Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  multipleSelect: MultipleSelectFilter,\r\n\r\n  /** Single Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  singleSelect: SingleSelectFilter,\r\n\r\n  /** Select filter, which uses native DOM element select */\r\n  select: SelectFilter,\r\n\r\n  /** Compound Date Filter (compound of Operator + Date picker) */\r\n  compoundDate: CompoundDateFilter,\r\n\r\n  /** Compound Input Filter (compound of Operator + Input) */\r\n  compoundInput: CompoundInputFilter,\r\n};\r\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CollectionService } from './collection.service';\nimport { castToPromise } from './utilities';\nimport { FilterConditions } from './../filter-conditions';\nimport { Filters } from './../filters';\nimport {\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  Filter,\n  FilterArguments,\n  FilterCallbackArg,\n  FieldType,\n  FilterType,\n  GridOption,\n  OperatorType,\n  CurrentFilter,\n  SearchTerm,\n  SlickEvent,\n  OperatorString\n} from './../models/index';\nimport { Subject } from 'rxjs/Subject';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class FilterService {\n  private _eventHandler = new Slick.EventHandler();\n  private _slickSubscriber: SlickEvent;\n  private _filters: any[] = [];\n  private _columnFilters: ColumnFilters = {};\n  private _dataView: any;\n  private _grid: any;\n  private _onFilterChangedOptions: any;\n  private _isFirstQuery = true;\n  onFilterChanged = new Subject<CurrentFilter[]>();\n  onFilterCleared = new Subject<boolean>();\n\n  constructor(private collectionService: CollectionService, private translate: TranslateService) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any): void {\n    this._grid = grid;\n  }\n\n  /**\n   * Attach a backend filter hook to the grid\n   * @param grid SlickGrid Grid object\n   */\n  attachBackendOnFilter(grid: any) {\n    this._filters = [];\n    this._slickSubscriber = new Slick.Event();\n\n    // subscribe to the SlickGrid event and call the backend execution\n    this._slickSubscriber.subscribe(this.attachBackendOnFilterSubscribe.bind(this));\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  async attachBackendOnFilterSubscribe(event: Event, args: any) {\n    if (!args || !args.grid) {\n      throw new Error('Something went wrong when trying to attach the \"attachBackendOnFilterSubscribe(event, args)\" function, it seems that \"args\" is not populated correctly');\n    }\n    const backendApi = this._gridOptions.backendServiceApi;\n    if (!backendApi || !backendApi.process || !backendApi.service) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    // run a preProcess callback if defined\n    if (backendApi.preProcess) {\n      backendApi.preProcess();\n    }\n\n    // call the service to get a query back\n    const query = await backendApi.service.processOnFilterChanged(event, args);\n\n    // emit an onFilterChanged event\n    if (args && !args.clearFilterTriggered) {\n      this.emitFilterChanged('remote');\n    } else {\n      console.log('clear triggered', args);\n    }\n\n    // the process could be an Observable (like HttpClient) or a Promise\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n    const observableOrPromise = backendApi.process(query);\n    const processResult = await castToPromise(observableOrPromise);\n\n    // from the result, call our internal post process to update the Dataset and Pagination info\n    if (processResult && backendApi.internalPostProcess) {\n      backendApi.internalPostProcess(processResult);\n    }\n\n    // send the response process to the postProcess callback\n    if (backendApi.postProcess !== undefined) {\n      backendApi.postProcess(processResult);\n    }\n  }\n\n  /**\n   * Attach a local filter hook to the grid\n   * @param grid SlickGrid Grid object\n   * @param dataView\n   */\n  attachLocalOnFilter(grid: any, dataView: any) {\n    this._filters = [];\n    this._dataView = dataView;\n    this._slickSubscriber = new Slick.Event();\n\n    dataView.setFilterArgs({ columnFilters: this._columnFilters, grid: this._grid });\n    dataView.setFilter(this.customLocalFilter.bind(this, dataView));\n\n    this._slickSubscriber.subscribe((e: any, args: any) => {\n      const columnId = args.columnId;\n      if (columnId != null) {\n        dataView.refresh();\n      }\n      if (args && !args.clearFilterTriggered) {\n        this.emitFilterChanged('local');\n      }\n    });\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  /** Clear the search filters (below the column titles) */\n  clearFilters() {\n    this._filters.forEach((filter: Filter) => {\n      if (filter && filter.clear) {\n        // clear element and trigger a change\n        filter.clear();\n      }\n    });\n\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to clear columnFilter (without looping through) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n    this._columnFilters = {};\n\n    // we also need to refresh the dataView and optionally the grid (it's optional since we use DataView)\n    if (this._dataView) {\n      this._dataView.refresh();\n      this._grid.invalidate();\n      this._grid.render();\n    }\n\n    // emit an event when filters are all cleared\n    this.onFilterCleared.next(true);\n  }\n\n  customLocalFilter(dataView: any, item: any, args: any) {\n    for (const columnId of Object.keys(args.columnFilters)) {\n      const columnFilter = args.columnFilters[columnId];\n      const columnIndex = args.grid.getColumnIndex(columnId);\n      const columnDef = args.grid.getColumns()[columnIndex];\n      if (!columnDef) {\n        return false;\n      }\n      const fieldType = columnDef.type || FieldType.string;\n      const filterSearchType = (columnDef.filterSearchType) ? columnDef.filterSearchType : null;\n\n      let cellValue = item[columnDef.queryField || columnDef.queryFieldFilter || columnDef.field];\n      const searchTerms = (columnFilter && columnFilter.searchTerms) ? columnFilter.searchTerms : null;\n\n      let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\n      if (typeof fieldSearchValue === 'undefined') {\n        fieldSearchValue = '';\n      }\n      fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n\n      const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n      let operator = columnFilter.operator || ((matches) ? matches[1] : '');\n      const searchTerm = (!!matches) ? matches[2] : '';\n      const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n\n      if (searchTerms && searchTerms.length > 1) {\n        fieldSearchValue = searchTerms.join(',');\n      } else if (typeof fieldSearchValue === 'string') {\n        // escaping the search value\n        fieldSearchValue = fieldSearchValue.replace(`'`, `''`); // escape single quotes by doubling them\n        if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\n          operator = (operator === '*' || operator === '*z') ? OperatorType.endsWith : OperatorType.startsWith;\n        }\n      }\n\n      // when using a Filter that is not a custom type, we want to make sure that we have a default operator type\n      // for example a multiple-select should always be using IN, while a single select will use an EQ\n      const filterType = (columnDef.filter && columnDef.filter.type) ? columnDef.filter.type : FilterType.input;\n      if (!operator && filterType !== FilterType.custom) {\n        switch (filterType) {\n          case FilterType.select:\n          case FilterType.multipleSelect:\n            operator = 'IN';\n            break;\n          case FilterType.singleSelect:\n            operator = 'EQ';\n            break;\n          default:\n            operator = operator;\n            break;\n        }\n      }\n\n      // no need to query if search value is empty\n      if (searchTerm === '' && !searchTerms) {\n        return true;\n      }\n\n      // filter search terms should always be string type (even though we permit the end user to input numbers)\n      // so make sure each term are strings, if user has some default search terms, we will cast them to string\n      if (searchTerms && Array.isArray(searchTerms)) {\n        for (let k = 0, ln = searchTerms.length; k < ln; k++) {\n          // make sure all search terms are strings\n          searchTerms[k] = ((searchTerms[k] === undefined || searchTerms[k] === null) ? '' : searchTerms[k]) + '';\n        }\n      }\n\n      // when using localization (i18n), we should use the formatter output to search as the new cell value\n      if (columnDef && columnDef.params && columnDef.params.useFormatterOuputToFilter) {\n        const rowIndex = (dataView && typeof dataView.getIdxById === 'function') ? dataView.getIdxById(item.id) : 0;\n        cellValue = columnDef.formatter(rowIndex, columnIndex, cellValue, columnDef, item, this._grid);\n      }\n\n      // make sure cell value is always a string\n      if (typeof cellValue === 'number') {\n        cellValue = cellValue.toString();\n      }\n\n      const conditionOptions = {\n        fieldType,\n        searchTerms,\n        cellValue,\n        operator,\n        cellValueLastChar: lastValueChar,\n        filterSearchType\n      };\n\n      if (!FilterConditions.executeMappedCondition(conditionOptions)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  dispose() {\n    this.disposeColumnFilters();\n\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n\n    // unsubscribe local event\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\n      this._slickSubscriber.unsubscribe();\n    }\n  }\n\n  /**\n   * Dispose of the filters, since it's a singleton, we don't want to affect other grids with same columns\n   */\n  disposeColumnFilters() {\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to make columnFilter an empty (without looping) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // also destroy each Filter instances\n    this._filters.forEach((filter, index) => {\n      if (filter && filter.destroy) {\n        filter.destroy(true);\n      }\n    });\n  }\n\n  getColumnFilters() {\n    return this._columnFilters;\n  }\n\n  getCurrentLocalFilters(): CurrentFilter[] {\n    const currentFilters: CurrentFilter[] = [];\n    if (this._columnFilters) {\n      for (const colId of Object.keys(this._columnFilters)) {\n        const columnFilter = this._columnFilters[colId];\n        const columnDef = columnFilter.columnDef;\n        const filter = { columnId: colId || '' } as CurrentFilter;\n\n        if (columnFilter && columnFilter.searchTerms) {\n          filter.searchTerms = columnFilter.searchTerms;\n        }\n        if (columnFilter.operator) {\n          filter.operator = columnFilter.operator;\n        }\n        if (Array.isArray(filter.searchTerms) && filter.searchTerms.length > 0 && filter.searchTerms[0] !== '') {\n          currentFilters.push(filter);\n        }\n      }\n    }\n    return currentFilters;\n  }\n\n  callbackSearchEvent(e: Event | undefined, args: FilterCallbackArg) {\n    if (args) {\n      const searchTerm = ((e && e.target) ? (e.target as HTMLInputElement).value : undefined);\n      const searchTerms = (args.searchTerms && Array.isArray(args.searchTerms)) ? args.searchTerms : searchTerm ? [searchTerm] : undefined;\n      const columnDef = args.columnDef || null;\n      const columnId = columnDef ? (columnDef.id || '') : '';\n      const operator = args.operator || undefined;\n\n      if (!searchTerms || (Array.isArray(searchTerms) && searchTerms.length === 0)) {\n        // delete the property from the columnFilters when it becomes empty\n        // without doing this, it would leave an incorrect state of the previous column filters when filtering on another column\n        delete this._columnFilters[columnId];\n      } else {\n        const colId = '' + columnId as string;\n        const colFilter: ColumnFilter = {\n          columnId: colId,\n          columnDef,\n          searchTerms,\n        };\n        if (operator) {\n          colFilter.operator = operator;\n        }\n        this._columnFilters[colId] = colFilter;\n      }\n\n      this.triggerEvent(this._slickSubscriber, {\n        clearFilterTriggered: args && args.clearFilterTriggered,\n        columnId,\n        columnDef: args.columnDef || null,\n        columnFilters: this._columnFilters,\n        operator,\n        searchTerms,\n        serviceOptions: this._onFilterChangedOptions,\n        grid: this._grid\n      }, e);\n    }\n  }\n\n  addFilterTemplateToHeaderRow(args: { column: Column; grid: any; node: any }) {\n    const columnDef = args.column;\n    const columnId = columnDef.id || '';\n\n    if (columnDef && columnId !== 'selector' && columnDef.filterable) {\n      let searchTerms: SearchTerm[] | undefined;\n      let operator: OperatorString | OperatorType;\n\n      if (this._columnFilters[columnDef.id]) {\n        searchTerms = this._columnFilters[columnDef.id].searchTerms || undefined;\n        operator = this._columnFilters[columnDef.id].operator || undefined;\n      } else if (columnDef.filter) {\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // because of that we need to first get searchTerm(s) from the columnFilters (that is what the user last entered)\n        searchTerms = columnDef.filter.searchTerms || undefined;\n        operator = columnDef.filter.operator || undefined;\n        this.updateColumnFilters(searchTerms, columnDef);\n      }\n\n      const filterArguments: FilterArguments = {\n        grid: this._grid,\n        operator,\n        searchTerms,\n        columnDef,\n        callback: this.callbackSearchEvent.bind(this)\n      };\n\n      // depending on the Filter type, we will watch the correct event\n      // or use the global default when no filter type is provided\n      let filterType = (columnDef.filter && columnDef.filter.type) ? columnDef.filter.type : FilterType.input;\n      if (!filterType) {\n        filterType = this._gridOptions.defaultFilterType;\n      }\n\n      let filter: Filter;\n      switch (filterType) {\n        case FilterType.custom:\n          if (columnDef && columnDef.filter && columnDef.filter.customFilter) {\n            filter = columnDef.filter.customFilter;\n          }\n          break;\n        case FilterType.select:\n          filter = new Filters.select(this.translate);\n          break;\n        case FilterType.multipleSelect:\n          filter = new Filters.multipleSelect(this.collectionService, this.translate);\n          break;\n        case FilterType.singleSelect:\n          filter = new Filters.singleSelect(this.collectionService, this.translate);\n          break;\n        case FilterType.compoundDate:\n          filter = new Filters.compoundDate(this.translate);\n          break;\n        case FilterType.compoundInput:\n          filter = new Filters.compoundInput(this.translate);\n          break;\n        case FilterType.input:\n        default:\n          filter = new Filters.input();\n          break;\n      }\n\n      if (filter) {\n        filter.init(filterArguments);\n        const filterExistIndex = this._filters.findIndex((filt) => filter.columnDef.name === filt.columnDef.name);\n\n        // add to the filters arrays or replace it when found\n        if (filterExistIndex === -1) {\n          this._filters.push(filter);\n        } else {\n          this._filters[filterExistIndex] = filter;\n        }\n\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // we need to also set again the values in the DOM elements if the values were set by a searchTerm(s)\n        if (searchTerms && filter.setValues) {\n          filter.setValues(searchTerms);\n        }\n      }\n    }\n  }\n\n  /**\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\n   * Other services, like Pagination, can then subscribe to it.\n   * @param sender\n   */\n  emitFilterChanged(sender: 'local' | 'remote') {\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\n      let currentFilters: CurrentFilter[] = [];\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentFilters) {\n        currentFilters = backendService.getCurrentFilters() as CurrentFilter[];\n      }\n      this.onFilterChanged.next(currentFilters);\n    } else if (sender === 'local') {\n      this.onFilterChanged.next(this.getCurrentLocalFilters());\n    }\n  }\n\n  /**\n   * When user passes an array of preset filters, we need to pre-populate each column filter searchTerm(s)\n   * The process is to loop through the preset filters array, find the associated column from columnDefinitions and fill in the filter object searchTerm(s)\n   * This is basically the same as if we would manually add searchTerm(s) to a column filter object in the column definition, but we do it programmatically.\n   * At the end of the day, when creating the Filter (DOM Element), it will use these searchTerm(s) so we can take advantage of that without recoding each Filter type (DOM element)\n   */\n  populateColumnFilterSearchTerms() {\n    if (this._gridOptions.presets && Array.isArray(this._gridOptions.presets.filters) && this._gridOptions.presets.filters.length > 0) {\n      const filters = this._gridOptions.presets.filters;\n      this._columnDefinitions.forEach((columnDef: Column) =>  {\n        // clear any columnDef searchTerms before applying Presets\n        if (columnDef.filter && columnDef.filter.searchTerms) {\n          delete columnDef.filter.searchTerms;\n        }\n\n        // from each presets, we will find the associated columnDef and apply the preset searchTerms & operator if there is\n        const columnPreset = filters.find((presetFilter: CurrentFilter) => {\n          return presetFilter.columnId === columnDef.id;\n        });\n        if (columnPreset && columnPreset.searchTerms && Array.isArray(columnPreset.searchTerms)) {\n          columnDef.filter = columnDef.filter || {};\n          columnDef.filter.operator = columnPreset.operator || columnDef.filter.operator || '';\n          columnDef.filter.searchTerms = columnPreset.searchTerms;\n        }\n      });\n    }\n    return this._columnDefinitions;\n  }\n\n  private updateColumnFilters(searchTerms: SearchTerm[] | undefined, columnDef: any) {\n    if (searchTerms) {\n      // this._columnFilters.searchTerms = searchTerms;\n      this._columnFilters[columnDef.id] = {\n        columnId: columnDef.id,\n        columnDef,\n        searchTerms,\n        operator: (columnDef && columnDef.filter && columnDef.filter.operator) ? columnDef.filter.operator : null,\n        type: (columnDef && columnDef.filter && columnDef.filter.type) ? columnDef.filter.type : FilterType.input\n      };\n    }\n  }\n\n  private triggerEvent(slickEvent: any, args: any, e: any) {\n    slickEvent = slickEvent || new Slick.Event();\n\n    // event might have been created as a CustomEvent (e.g. CompoundDateFilter), without being a valid Slick.EventData.\n    // if so we will create a new Slick.EventData and merge it with that CustomEvent to avoid having SlickGrid errors\n    let event = e;\n    if (e && typeof e.isPropagationStopped !== 'function') {\n      event = $.extend({}, new Slick.EventData(), e);\n    }\n    slickEvent.notify(args, event, args.grid);\n  }\n}\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  CellArgs,\r\n  CustomGridMenu,\r\n  Column,\r\n  DelimiterType,\r\n  ExportOption,\r\n  FileType,\r\n  Formatter,\r\n  GraphqlResult,\r\n  GridMenu,\r\n  GridOption,\r\n  HeaderButtonOnCommandArgs,\r\n  HeaderMenuOnCommandArgs,\r\n  HeaderMenuOnBeforeMenuShowArgs\r\n} from './../models/index';\r\nimport { addWhiteSpaces, htmlEntityDecode, sanitizeHtmlToText } from './../services/utilities';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { TextEncoder } from 'text-encoding-utf-8';\r\n\r\n// using external non-typed js libraries\r\ndeclare let Slick: any;\r\ndeclare let $: any;\r\n\r\nexport interface ExportColumnHeader {\r\n  key: string;\r\n  title: string;\r\n}\r\n\r\n@Injectable()\r\nexport class ExportService {\r\n  private _lineCarriageReturn = '\\n';\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _exportQuoteWrapper: string;\r\n  private _columnHeaders: ExportColumnHeader[];\r\n  private _groupedHeaders: ExportColumnHeader[];\r\n  private _hasGroupedItems = false;\r\n  private _exportOptions: ExportOption;\r\n  onGridBeforeExportToFile = new Subject<boolean>();\r\n  onGridAfterExportToFile = new Subject<{ options: any }>();\r\n\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Export Service\r\n   * @param grid\r\n   * @param gridOptions\r\n   * @param dataView\r\n   */\r\n  init(grid: any, dataView: any): void {\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n  }\r\n\r\n  /**\r\n   * Function to export the Grid result to an Excel CSV format using javascript for it to produce the CSV file.\r\n   * This is a WYSIWYG export to file output (What You See is What You Get)\r\n   *\r\n   * NOTES: The column position needs to match perfectly the JSON Object position because of the way we are pulling the data,\r\n   * which means that if any column(s) got moved in the UI, it has to be reflected in the JSON array output as well\r\n   *\r\n   * Example: exportToFile({ format: FileType.csv, delimiter: DelimiterType.comma })\r\n   */\r\n  exportToFile(options: ExportOption) {\r\n    this.onGridBeforeExportToFile.next(true);\r\n    this._exportOptions = $.extend(true, {}, this._gridOptions.exportOptions, options);\r\n\r\n    // get the CSV output from the grid data\r\n    const dataOutput = this.getDataOutput();\r\n\r\n    // trigger a download file\r\n    // wrap it into a setTimeout so that the EventAggregator has enough time to start a pre-process like showing a spinner\r\n    setTimeout(() => {\r\n      const downloadOptions = {\r\n        filename: `${this._exportOptions.filename}.${this._exportOptions.format}`,\r\n        csvContent: dataOutput,\r\n        format: this._exportOptions.format,\r\n        useUtf8WithBom: this._exportOptions.useUtf8WithBom\r\n      };\r\n      this.startDownloadFile(downloadOptions);\r\n      this.onGridAfterExportToFile.next({ options: downloadOptions });\r\n    }, 0);\r\n  }\r\n\r\n  // -----------------------\r\n  // Private functions\r\n  // -----------------------\r\n\r\n  getDataOutput(): string {\r\n    const columns = this._grid.getColumns() || [];\r\n    const delimiter = this._exportOptions.delimiter || '';\r\n    const format = this._exportOptions.format || '';\r\n    const groupByColumnHeader = this._exportOptions.groupingColumnHeaderTitle || this.translate.instant('GROUP_BY');\r\n\r\n    // a CSV needs double quotes wrapper, the other types do not need any wrapper\r\n    this._exportQuoteWrapper = (format === FileType.csv) ? '\"' : '';\r\n\r\n    // data variable which will hold all the fields data of a row\r\n    let outputDataString = '';\r\n\r\n    // get grouped column titles and if found, we will add a \"Group by\" column at the first column index\r\n    const grouping = this._dataView.getGrouping();\r\n    if (grouping && Array.isArray(grouping) && grouping.length > 0) {\r\n      this._hasGroupedItems = true;\r\n      outputDataString += `${groupByColumnHeader}` + delimiter;\r\n    } else {\r\n      this._hasGroupedItems = false;\r\n    }\r\n\r\n    // get all column headers\r\n    this._columnHeaders = this.getColumnHeaders(columns) || [];\r\n    if (this._columnHeaders && Array.isArray(this._columnHeaders) && this._columnHeaders.length > 0) {\r\n      // add the header row + add a new line at the end of the row\r\n      const outputHeaderTitles = this._columnHeaders.map((header) => {\r\n        return this._exportQuoteWrapper + header.title + this._exportQuoteWrapper;\r\n      });\r\n      outputDataString += (outputHeaderTitles.join(delimiter) + this._lineCarriageReturn);\r\n    }\r\n\r\n    // Populate the rest of the Grid Data\r\n    outputDataString += this.getAllGridRowData(columns, this._lineCarriageReturn);\r\n\r\n    return outputDataString;\r\n  }\r\n\r\n  /**\r\n   * Get all the grid row data and return that as an output string\r\n   */\r\n  getAllGridRowData(columns: Column[], lineCarriageReturn: string): string {\r\n    let outputDataString = '';\r\n    const lineCount = this._dataView.getLength();\r\n\r\n    // loop through all the grid rows of data\r\n    for (let rowNumber = 0; rowNumber < lineCount; rowNumber++) {\r\n      const itemObj = this._dataView.getItem(rowNumber);\r\n\r\n      if (itemObj != null) {\r\n        // Normal row (not grouped by anything) would have an ID which was predefined in the Grid Columns definition\r\n        if (itemObj.id != null) {\r\n          // get regular row item data\r\n          outputDataString += this.readRegularRowData(columns, rowNumber, itemObj);\r\n        } else if (this._hasGroupedItems && itemObj.__groupTotals === undefined) {\r\n          // get the group row\r\n          outputDataString += this.readGroupedTitleRow(itemObj) + this._exportOptions.delimiter;\r\n        } else if (itemObj.__groupTotals) {\r\n          // else if the row is a Group By and we have agreggators, then a property of '__groupTotals' would exist under that object\r\n          outputDataString += this.readGroupedTotalRow(columns, itemObj) + this._exportOptions.delimiter;\r\n        }\r\n        outputDataString += lineCarriageReturn;\r\n      }\r\n    }\r\n\r\n    return outputDataString;\r\n  }\r\n\r\n  /**\r\n   * Get all header titles and their keys, translate the title when required.\r\n   * @param columns of the grid\r\n   */\r\n  getColumnHeaders(columns: Column[]): ExportColumnHeader[] {\r\n    if (!columns || !Array.isArray(columns) || columns.length === 0) {\r\n      return null;\r\n    }\r\n    const columnHeaders = [];\r\n\r\n    // Populate the Column Header, pull the name defined\r\n    columns.forEach((columnDef) => {\r\n      const fieldName = (columnDef.headerKey) ? this.translate.instant(columnDef.headerKey) : columnDef.name;\r\n      const skippedField = columnDef.excludeFromExport || false;\r\n\r\n      // if column width is 0 then it's not evaluated since that field is considered hidden should not be part of the export\r\n      if ((columnDef.width ===  undefined || columnDef.width > 0) && !skippedField) {\r\n        columnHeaders.push({\r\n          key: columnDef.field || columnDef.id,\r\n          title: fieldName\r\n        });\r\n      }\r\n    });\r\n\r\n    return columnHeaders;\r\n  }\r\n\r\n  /**\r\n   * Get the data of a regular row (a row without grouping)\r\n   * @param row\r\n   * @param itemObj\r\n   */\r\n  readRegularRowData(columns: Column[], row: number, itemObj: any) {\r\n    let idx = 0;\r\n    let rowOutputString = '';\r\n    const delimiter = this._exportOptions.delimiter;\r\n    const format = this._exportOptions.format;\r\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\r\n\r\n    for (let col = 0, ln = columns.length; col < ln; col++) {\r\n      const columnDef = columns[col];\r\n      const fieldId = columnDef.field || columnDef.id || '';\r\n\r\n      // skip excluded column\r\n      if (columnDef.excludeFromExport) {\r\n          continue;\r\n      }\r\n\r\n      // if we are grouping and are on 1st column index, we need to skip this column since it will be used later by the grouping text:: Group by [columnX]\r\n      if (this._hasGroupedItems && idx === 0) {\r\n        rowOutputString += `\"\"` + delimiter;\r\n      }\r\n\r\n      // does the user want to evaluate current column Formatter?\r\n      const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._exportOptions.exportWithFormatter;\r\n\r\n      // did the user provide a Custom Formatter for the export\r\n      const exportCustomFormatter: Formatter = (columnDef.exportCustomFormatter !== undefined) ? columnDef.exportCustomFormatter : undefined;\r\n\r\n      let itemData = '';\r\n\r\n      if (exportCustomFormatter) {\r\n        itemData = exportCustomFormatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\r\n      } else if (isEvaluatingFormatter && !!columnDef.formatter) {\r\n        itemData = columnDef.formatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\r\n      } else {\r\n        itemData = (itemObj[fieldId] === null || itemObj[fieldId] === undefined) ? '' : itemObj[fieldId];\r\n      }\r\n\r\n      // does the user want to sanitize the output data (remove HTML tags)?\r\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\r\n        itemData = sanitizeHtmlToText(itemData);\r\n      }\r\n\r\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\r\n      if (format === FileType.csv) {\r\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\r\n      }\r\n\r\n      // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\r\n      // to cancel that effect we can had = in front, ex: =\"1E06\"\r\n      const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\r\n\r\n      rowOutputString += keepAsStringWrapper + exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\r\n      idx++;\r\n    }\r\n\r\n    return rowOutputString;\r\n  }\r\n\r\n  /**\r\n   * Get the grouped title(s), for example if we grouped by salesRep, the returned result would be:: 'Sales Rep'\r\n   * @param itemObj\r\n   */\r\n  readGroupedTitleRow(itemObj: any) {\r\n    let groupName = sanitizeHtmlToText(itemObj.title);\r\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\r\n    const delimiter = this._exportOptions.delimiter;\r\n    const format = this._exportOptions.format;\r\n\r\n    groupName = addWhiteSpaces(5 * itemObj.level) + groupName;\r\n\r\n    if (format === FileType.csv) {\r\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\r\n      groupName = groupName.toString().replace(/\"/gi, `\"\"`);\r\n    }\r\n\r\n    // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\r\n    // to cancel that effect we can had = in front, ex: =\"1E06\"\r\n    // const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\r\n\r\n    return /*keepAsStringWrapper +*/ exportQuoteWrapper + ' ' + groupName + exportQuoteWrapper + delimiter;\r\n  }\r\n\r\n  /**\r\n   * Get the grouped totals, these are set by Slick Aggregators.\r\n   * For example if we grouped by \"salesRep\" and we have a Sum Aggregator on \"sales\", then the returned output would be:: [\"Sum 123$\"]\r\n   * @param itemObj\r\n   */\r\n  readGroupedTotalRow(columns: Column[], itemObj: any) {\r\n    let exportExponentialWrapper = '';\r\n    const delimiter = this._exportOptions.delimiter;\r\n    const format = this._exportOptions.format;\r\n    const groupingAggregatorRowText = this._exportOptions.groupingAggregatorRowText || '';\r\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\r\n    let output = `${exportQuoteWrapper}${groupingAggregatorRowText}${exportQuoteWrapper}${delimiter}`;\r\n\r\n    columns.forEach((columnDef) => {\r\n      let itemData = '';\r\n\r\n      // if there's a groupTotalsFormatter, we will re-run it to get the exact same output as what is shown in UI\r\n      if (columnDef.groupTotalsFormatter) {\r\n        itemData = columnDef.groupTotalsFormatter(itemObj, columnDef);\r\n      }\r\n\r\n      // does the user want to sanitize the output data (remove HTML tags)?\r\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\r\n        itemData = sanitizeHtmlToText(itemData);\r\n      }\r\n\r\n      if (format === FileType.csv) {\r\n        // when CSV we also need to escape double quotes twice, so a double quote \" becomes 2x double quotes \"\"\r\n        // and if we have a text of (number)E(number),\r\n        // we don't want excel to transform it into exponential (1.0E06) to cancel that effect we can had = in front, ex: =\"1E06\"\r\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\r\n        exportExponentialWrapper = (itemData.match(/^\\s*\\d+E\\d+\\s*$/i)) ? '=' : '';\r\n      }\r\n      output += exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\r\n    });\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Triggers download file with file format.\r\n   * IE(6-10) are not supported\r\n   * All other browsers will use plain javascript on client side to produce a file download.\r\n   * @param options\r\n   */\r\n  startDownloadFile(options: { filename: string, csvContent: any, format: FileType | string, useUtf8WithBom: boolean }): void {\r\n    // IE(6-10) don't support javascript download and our service doesn't support either so throw an error, we have to make a round trip to the Web Server for exporting\r\n    if (navigator.appName === 'Microsoft Internet Explorer') {\r\n      throw new Error('Microsoft Internet Explorer 6 to 10 do not support javascript export to CSV. Please upgrade your browser.');\r\n    }\r\n\r\n    // set the correct MIME type\r\n    const mimeType = (options.format === FileType.csv) ? 'text/csv' : 'text/plain';\r\n\r\n    // make sure no html entities exist in the data\r\n    const csvContent = htmlEntityDecode(options.csvContent);\r\n\r\n    // dealing with Excel CSV export and UTF-8 is a little tricky.. We will use Option #2 to cover older Excel versions\r\n    // Option #1: we need to make Excel knowing that it's dealing with an UTF-8, A correctly formatted UTF8 file can have a Byte Order Mark as its first three octets\r\n    // reference: http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\r\n    // Option#2: use a 3rd party extension to javascript encode into UTF-16\r\n    let outputData: Uint8Array | string;\r\n    if (options.format === FileType.csv) {\r\n      outputData = new TextEncoder('utf-8').encode(csvContent);\r\n    } else {\r\n      outputData = csvContent;\r\n    }\r\n\r\n    // create a Blob object for the download\r\n    const blob = new Blob([options.useUtf8WithBom ? '\\uFEFF' : '', outputData], {\r\n      type: `${mimeType};charset=utf-8;`\r\n    });\r\n\r\n    // when using IE/Edge, then use different download call\r\n    if (typeof navigator.msSaveOrOpenBlob === 'function') {\r\n      navigator.msSaveOrOpenBlob(blob, options.filename);\r\n    } else {\r\n      // this trick will generate a temp <a /> tag\r\n      // the code will then trigger a hidden click for it to start downloading\r\n      const link = document.createElement('a');\r\n      const csvUrl = URL.createObjectURL(blob);\r\n\r\n      link.textContent = 'download';\r\n      link.href = csvUrl;\r\n      link.setAttribute('download', options.filename);\r\n\r\n      // set the visibility to hidden so there is no effect on your web-layout\r\n      link.style.visibility = 'hidden';\r\n\r\n      // this part will append the anchor tag, trigger a click (for download to start) and finally remove the tag once completed\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    }\r\n  }\r\n}\r\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\nimport { castToPromise } from './utilities';\nimport {\n  CellArgs,\n  Column,\n  ColumnSort,\n  CurrentSorter,\n  FieldType,\n  GridOption,\n  SlickEvent,\n  SortDirection,\n  SortDirectionString\n} from './../models/index';\nimport { sortByFieldType } from '../sorters/sorterUtilities';\nimport { Sorters } from './../sorters';\nimport { Subject } from 'rxjs/Subject';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class SortService {\n  private _currentLocalSorters: CurrentSorter[] = [];\n  private _eventHandler: any = new Slick.EventHandler();\n  private _dataView: any;\n  private _grid: any;\n  private _slickSubscriber: SlickEvent;\n  private _isBackendGrid = false;\n  onSortChanged = new Subject<CurrentSorter[]>();\n  onSortCleared = new Subject<boolean>();\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  /**\n   * Attach a backend sort (single/multi) hook to the grid\n   * @param grid SlickGrid Grid object\n   * @param dataView SlickGrid DataView object\n   */\n  attachBackendOnSort(grid: any, dataView: any) {\n    this._isBackendGrid = true;\n    this._grid = grid;\n    this._dataView = dataView;\n    this._slickSubscriber = grid.onSort;\n\n    // subscribe to the SlickGrid event and call the backend execution\n    this._slickSubscriber.subscribe(this.onBackendSortChanged.bind(this));\n  }\n\n  async onBackendSortChanged(event: Event, args: any) {\n    if (!args || !args.grid) {\n      throw new Error('Something went wrong when trying to attach the \"onBackendSortChanged(event, args)\" function, it seems that \"args\" is not populated correctly');\n    }\n    const gridOptions: GridOption = args.grid.getOptions() || {};\n    const backendApi = gridOptions.backendServiceApi;\n\n    if (!backendApi || !backendApi.process || !backendApi.service) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n    if (backendApi.preProcess) {\n      backendApi.preProcess();\n    }\n    const query = backendApi.service.processOnSortChanged(event, args);\n    this.emitSortChanged('remote');\n\n    // the process could be an Observable (like HttpClient) or a Promise\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n    const observableOrPromise = backendApi.process(query);\n    const processResult = await castToPromise(observableOrPromise);\n\n    // from the result, call our internal post process to update the Dataset and Pagination info\n    if (processResult && backendApi.internalPostProcess) {\n      backendApi.internalPostProcess(processResult);\n    }\n\n    // send the response process to the postProcess callback\n    if (backendApi.postProcess) {\n      backendApi.postProcess(processResult);\n    }\n  }\n\n  /**\n   * Attach a local sort (single/multi) hook to the grid\n   * @param grid SlickGrid Grid object\n   * @param gridOptions Grid Options object\n   * @param dataView\n   */\n  attachLocalOnSort(grid: any, dataView: any) {\n    this._isBackendGrid = false;\n    this._grid = grid;\n    this._dataView = dataView;\n    this._slickSubscriber = grid.onSort;\n\n    this._slickSubscriber.subscribe((e: any, args: any) => {\n      // multiSort and singleSort are not exactly the same, but we want to structure it the same for the (for loop) after\n      // also to avoid having to rewrite the for loop in the sort, we will make the singleSort an array of 1 object\n      const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({sortAsc: args.sortAsc, sortCol: args.sortCol});\n\n      // keep current sorters\n      this._currentLocalSorters = []; // reset current local sorters\n      if (Array.isArray(sortColumns)) {\n        sortColumns.forEach((sortColumn: { sortCol: Column, sortAsc: number }) => {\n          if (sortColumn.sortCol) {\n            this._currentLocalSorters.push({\n              columnId: sortColumn.sortCol.id,\n              direction: sortColumn.sortAsc ? SortDirection.ASC : SortDirection.DESC\n            });\n          }\n        });\n      }\n\n      this.onLocalSortChanged(grid, dataView, sortColumns);\n      this.emitSortChanged('local');\n    });\n\n    if (dataView && dataView.onRowCountChanged) {\n      this._eventHandler.subscribe(dataView.onRowCountChanged, (e: Event, args: any) => {\n        // load any presets if there are any\n        if (args.current > 0) {\n          this.loadLocalPresets(grid, dataView);\n        }\n      });\n    }\n  }\n\n  clearSorting() {\n    if (this._grid && this._gridOptions && this._dataView) {\n      // remove any sort icons (this setSortColumns function call really does only that)\n      this._grid.setSortColumns([]);\n\n      // we also need to trigger a sort change\n      // for a backend grid, we will trigger a backend sort changed with an empty sort columns array\n      // however for a local grid, we need to pass a sort column and so we will sort by the 1st column\n      if (this._isBackendGrid) {\n        this.onBackendSortChanged(undefined, { grid: this._grid, sortCols: [] });\n      } else {\n        if (this._columnDefinitions && Array.isArray(this._columnDefinitions)) {\n          this.onLocalSortChanged(this._grid, this._dataView, new Array({sortAsc: true, sortCol: this._columnDefinitions[0] }));\n        }\n      }\n    }\n    // set current sorter to empty & emit a sort changed event\n    this._currentLocalSorters = [];\n    const sender = (this._gridOptions && this._gridOptions.backendServiceApi) ? 'remote' : 'local';\n\n    // emit an event when filters are all cleared\n    this.onSortCleared.next(true);\n  }\n\n  getCurrentLocalSorters(): CurrentSorter[] {\n    return this._currentLocalSorters;\n  }\n\n  /**\n   * Get column sorts,\n   * If a column is passed as an argument, we won't add this column to our output array since it is already in the array\n   * We want to know the sort prior to calling the next sorting command\n   */\n  getPreviousColumnSorts(columnId?: string) {\n    // getSortColumns() only returns sortAsc & columnId, we want the entire column definition\n    const oldSortColumns = this._grid.getSortColumns();\n\n    // get the column definition but only keep column which are not equal to our current column\n    const sortedCols = oldSortColumns.reduce((cols, col) => {\n      if (!columnId || col.columnId !== columnId) {\n        cols.push({ sortCol: this._columnDefinitions[this._grid.getColumnIndex(col.columnId)], sortAsc: col.sortAsc });\n      }\n      return cols;\n    }, []);\n\n    return sortedCols;\n  }\n\n  /**\n   * load any presets if there are any\n   * @param grid\n   * @param dataView\n   */\n  loadLocalPresets(grid: any, dataView: any) {\n    const sortCols: ColumnSort[] = [];\n    this._currentLocalSorters = []; // reset current local sorters\n    if (this._gridOptions && this._gridOptions.presets && this._gridOptions.presets.sorters) {\n      const sorters = this._gridOptions.presets.sorters;\n\n      sorters.forEach((presetSorting: CurrentSorter) => {\n        const gridColumn = this._columnDefinitions.find((col: Column) => col.id === presetSorting.columnId);\n        if (gridColumn) {\n          sortCols.push({\n            columnId: gridColumn.id,\n            sortAsc: ((presetSorting.direction.toUpperCase() === SortDirection.ASC) ? true : false),\n            sortCol: gridColumn\n          });\n\n          // keep current sorters\n          this._currentLocalSorters.push({\n            columnId: gridColumn.id + '',\n            direction: presetSorting.direction.toUpperCase() as SortDirectionString\n          });\n        }\n      });\n\n      if (sortCols.length > 0) {\n        this.onLocalSortChanged(grid, dataView, sortCols);\n        grid.setSortColumns(sortCols); // use this to add sort icon(s) in UI\n      }\n    }\n  }\n\n  onLocalSortChanged(grid: any, dataView: any, sortColumns: ColumnSort[]) {\n    dataView.sort((dataRow1: any, dataRow2: any) => {\n      for (let i = 0, l = sortColumns.length; i < l; i++) {\n        const columnSortObj = sortColumns[i];\n        if (columnSortObj && columnSortObj.sortCol) {\n          const sortDirection = columnSortObj.sortAsc ? SortDirectionNumber.asc : SortDirectionNumber.desc;\n          const sortField = columnSortObj.sortCol.queryField || columnSortObj.sortCol.queryFieldFilter || columnSortObj.sortCol.field;\n          const fieldType = columnSortObj.sortCol.type || FieldType.string;\n          const value1 = dataRow1[sortField];\n          const value2 = dataRow2[sortField];\n          const sortResult = sortByFieldType(value1, value2, fieldType, sortDirection);\n          if (sortResult !== SortDirectionNumber.neutral) {\n            return sortResult;\n          }\n        }\n      }\n      return 0;\n    });\n    grid.invalidate();\n    grid.render();\n  }\n\n  dispose() {\n    // unsubscribe local event\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\n      this._slickSubscriber.unsubscribe();\n    }\n\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n  }\n\n  /**\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\n   * Other services, like Pagination, can then subscribe to it.\n   * @param sender\n   */\n  emitSortChanged(sender: 'local' | 'remote') {\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\n      let currentSorters: CurrentSorter[] = [];\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentSorters) {\n        currentSorters = backendService.getCurrentSorters() as CurrentSorter[];\n      }\n      this.onSortChanged.next(currentSorters);\n    } else if (sender === 'local') {\n      this.onSortChanged.next(this.getCurrentLocalSorters());\n    }\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport {\n  CellArgs,\n  ColumnSort,\n  CustomGridMenu,\n  Column,\n  DelimiterType,\n  Extension,\n  FileType,\n  GraphqlResult,\n  GridMenu,\n  GridOption,\n  HeaderButtonOnCommandArgs,\n  HeaderMenu,\n  HeaderMenuItem,\n  HeaderMenuOnCommandArgs,\n  HeaderMenuOnBeforeMenuShowArgs,\n} from './../models/index';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, sanitizeHtmlToText } from './../services/utilities';\nimport { FilterService } from './filter.service';\nimport { ExportService } from './export.service';\nimport { SortService } from './sort.service';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class ControlAndPluginService {\n  private _dataView: any;\n  private _grid: any;\n  visibleColumns: Column[];\n  areVisibleColumnDifferent = false;\n  extensionList: Extension[] = [];\n\n  // controls & plugins\n  autoTooltipPlugin: any;\n  cellExternalCopyManagerPlugin: any;\n  checkboxSelectorPlugin: any;\n  columnPickerControl: any;\n  groupItemMetaProviderPlugin: any;\n  headerButtonsPlugin: any;\n  headerMenuPlugin: any;\n  gridMenuControl: any;\n  rowSelectionPlugin: any;\n  undoRedoBuffer: any;\n\n  constructor(\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private sortService: SortService,\n    private translate: TranslateService\n  ) {}\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  getAllExtensions(): Extension[] {\n    return this.extensionList;\n  }\n\n  getExtensionByName(name: string): Extension | undefined {\n    return this.extensionList.find((p) => p.name === name);\n  }\n\n  /** Auto-resize all the column in the grid to fit the grid width */\n  autoResizeColumns() {\n    this._grid.autosizeColumns();\n  }\n\n  /**\n   * Attach/Create different Controls or Plugins after the Grid is created\n   * @param grid\n   * @param options\n   * @param dataView\n   */\n  attachDifferentControlOrPlugins(grid: any, dataView: any, groupItemMetadataProvider: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n    this.visibleColumns = this._columnDefinitions;\n\n    // Column Picker Control\n    if (this._gridOptions.enableColumnPicker) {\n      this.columnPickerControl = this.createColumnPicker(this._grid, this._columnDefinitions);\n      this.extensionList.push({ name: 'ColumnPicker', service: this.columnPickerControl });\n    }\n\n    // Grid Menu Control\n    if (this._gridOptions.enableGridMenu) {\n      this.gridMenuControl = this.createGridMenu(this._grid, this._columnDefinitions);\n      this.extensionList.push({ name: 'GridMenu', service: this.gridMenuControl });\n    }\n\n    // Auto Tooltip Plugin\n    if (this._gridOptions.enableAutoTooltip) {\n      this.autoTooltipPlugin = new Slick.AutoTooltips(this._gridOptions.autoTooltipOptions || {});\n      this._grid.registerPlugin(this.autoTooltipPlugin);\n      this.extensionList.push({ name: 'AutoTooltip', service: this.autoTooltipPlugin });\n    }\n\n    // Grouping Plugin\n    // register the group item metadata provider to add expand/collapse group handlers\n    if (this._gridOptions.enableGrouping) {\n      this.groupItemMetaProviderPlugin = groupItemMetadataProvider || {};\n      this._grid.registerPlugin(this.groupItemMetaProviderPlugin);\n      this.extensionList.push({ name: 'GroupItemMetaProvider', service: this.groupItemMetaProviderPlugin });\n    }\n\n    // Checkbox Selector Plugin\n    if (this._gridOptions.enableCheckboxSelector) {\n      // when enabling the Checkbox Selector Plugin, we need to also watch onClick events to perform certain actions\n      // the selector column has to be created BEFORE the grid (else it behaves oddly), but we can only watch grid events AFTER the grid is created\n      this._grid.registerPlugin(this.checkboxSelectorPlugin);\n      this.extensionList.push({ name: 'CheckboxSelector', service: this.checkboxSelectorPlugin });\n\n      // this also requires the Row Selection Model to be registered as well\n      if (!this.rowSelectionPlugin || !this._grid.getSelectionModel()) {\n        this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n        this._grid.setSelectionModel(this.rowSelectionPlugin);\n      }\n\n      // user might want to pre-select some rows\n      // the setTimeout is because of timing issue with styling (row selection happen but rows aren't highlighted properly)\n      if (this._gridOptions.preselectedRows && this.rowSelectionPlugin && this._grid.getSelectionModel()) {\n        setTimeout(() => this.checkboxSelectorPlugin.selectRows(this._gridOptions.preselectedRows), 0);\n      }\n    }\n\n    // Row Selection Plugin\n    if (!this._gridOptions.enableCheckboxSelector && this._gridOptions.enableRowSelection) {\n      this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n      this._grid.setSelectionModel(this.rowSelectionPlugin);\n    }\n\n    // Header Button Plugin\n    if (this._gridOptions.enableHeaderButton) {\n      this.headerButtonsPlugin = new Slick.Plugins.HeaderButtons(this._gridOptions.headerButton || {});\n      this._grid.registerPlugin(this.headerButtonsPlugin);\n      this.extensionList.push({ name: 'HeaderButtons', service: this.headerButtonsPlugin });\n      this.headerButtonsPlugin.onCommand.subscribe((e: Event, args: HeaderButtonOnCommandArgs) => {\n        if (this._gridOptions.headerButton && typeof this._gridOptions.headerButton.onCommand === 'function') {\n          this._gridOptions.headerButton.onCommand(e, args);\n        }\n      });\n    }\n\n    // Header Menu Plugin\n    if (this._gridOptions.enableHeaderMenu) {\n      this.headerMenuPlugin = this.createHeaderMenu(this._grid, this._dataView, this._columnDefinitions);\n    }\n\n    // Cell External Copy Manager Plugin (Excel Like)\n    if (this._gridOptions.enableExcelCopyBuffer) {\n      this.createUndoRedoBuffer();\n      this.hookUndoShortcutKey();\n      this.createCellExternalCopyManagerPlugin(this._grid);\n    }\n\n    // manually register other plugins\n    if (this._gridOptions.registerPlugins !== undefined) {\n      if (Array.isArray(this._gridOptions.registerPlugins)) {\n        this._gridOptions.registerPlugins.forEach((plugin) => {\n          this._grid.registerPlugin(plugin);\n          this.extensionList.push({ name: 'generic', service: plugin });\n        });\n      } else {\n        this._grid.registerPlugin(this._gridOptions.registerPlugins);\n        this.extensionList.push({ name: 'generic', service: this._gridOptions.registerPlugins });\n      }\n    }\n  }\n\n  /**\n   * Attach/Create different plugins before the Grid creation.\n   * For example the multi-select have to be added to the column definition before the grid is created to work properly\n   * @param columnDefinitions\n   * @param options\n   */\n  createPluginBeforeGridCreation(columnDefinitions: Column[], options: GridOption) {\n    if (options.enableCheckboxSelector) {\n      this.checkboxSelectorPlugin = new Slick.CheckboxSelectColumn(options.checkboxSelector || {});\n      const selectionColumn: Column = this.checkboxSelectorPlugin.getColumnDefinition();\n      selectionColumn.excludeFromExport = true;\n      selectionColumn.excludeFromQuery = true;\n      selectionColumn.excludeFromHeaderMenu = true;\n      columnDefinitions.unshift(selectionColumn);\n    }\n  }\n\n  /** Create the Excel like copy manager */\n  createCellExternalCopyManagerPlugin(grid: any) {\n    let newRowIds = 0;\n    const pluginOptions = {\n      clipboardCommandHandler: (editCommand) => {\n        this.undoRedoBuffer.queueAndExecuteCommand.call(this.undoRedoBuffer, editCommand);\n      },\n      dataItemColumnValueExtractor: (item, columnDef) => {\n        // when grid or cell is not editable, we will possibly evaluate the Formatter if it was passed\n        // to decide if we evaluate the Formatter, we will use the same flag from Export which is \"exportWithFormatter\"\n        if (!this._gridOptions.editable || !columnDef.editor) {\n          const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._gridOptions.exportOptions.exportWithFormatter;\n          if (columnDef.formatter && isEvaluatingFormatter) {\n            const formattedOutput = columnDef.formatter(0, 0, item[columnDef.field], columnDef, item, this._grid);\n            if (columnDef.sanitizeDataExport || (this._gridOptions.exportOptions && this._gridOptions.exportOptions.sanitizeDataExport)) {\n              return sanitizeHtmlToText(formattedOutput);\n            }\n            return formattedOutput;\n          }\n        }\n\n        // else use the default \"dataItemColumnValueExtractor\" from the plugin itself\n        // we can do that by setting back the getter with null\n        return null;\n      },\n      readOnlyMode: false,\n      includeHeaderWhenCopying: false,\n      newRowCreator: (count) => {\n        for (let i = 0; i < count; i++) {\n          const item = {\n            id: 'newRow_' + newRowIds++\n          };\n          grid.getData().addItem(item);\n        }\n      }\n    };\n\n    grid.setSelectionModel(new Slick.CellSelectionModel());\n    this.cellExternalCopyManagerPlugin = new Slick.CellExternalCopyManager(pluginOptions);\n    grid.registerPlugin(this.cellExternalCopyManagerPlugin);\n    this.extensionList.push({ name: 'CellExternalCopyManager', service: this.cellExternalCopyManagerPlugin });\n  }\n\n  /**\n   * Create the Column Picker and expose all the available hooks that user can subscribe (onColumnsChanged)\n   * @param grid\n   * @param columnDefinitions\n   * @param gridOptions\n   */\n  createColumnPicker(grid: any, columnDefinitions: Column[]) {\n    // localization support for the picker\n    const forceFitTitle = this._gridOptions.enableTranslate ? this.translate.instant('FORCE_FIT_COLUMNS') : 'Force fit columns';\n    const syncResizeTitle = this._gridOptions.enableTranslate ? this.translate.instant('SYNCHRONOUS_RESIZE') : 'Synchronous resize';\n\n    this._gridOptions.columnPicker = this._gridOptions.columnPicker || {};\n    this._gridOptions.columnPicker.forceFitTitle = this._gridOptions.columnPicker.forceFitTitle || forceFitTitle;\n    this._gridOptions.columnPicker.syncResizeTitle = this._gridOptions.columnPicker.syncResizeTitle || syncResizeTitle;\n\n    this.columnPickerControl = new Slick.Controls.ColumnPicker(columnDefinitions, grid, this._gridOptions);\n    if (grid && this._gridOptions.enableColumnPicker) {\n      this.columnPickerControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\n        if (this._gridOptions.columnPicker && typeof this._gridOptions.columnPicker.onColumnsChanged === 'function') {\n          this._gridOptions.columnPicker.onColumnsChanged(e, args);\n        }\n      });\n    }\n\n    return this.columnPickerControl;\n  }\n\n  /**\n   * Create (or re-create) Grid Menu and expose all the available hooks that user can subscribe (onCommand, onMenuClose, ...)\n   * @param grid\n   * @param columnDefinitions\n   * @param _gridOptions\n   */\n  createGridMenu(grid: any, columnDefinitions: Column[]) {\n    this._gridOptions.gridMenu = { ...this.getDefaultGridMenuOptions(), ...this._gridOptions.gridMenu };\n    this.addGridMenuCustomCommands(grid, this._gridOptions);\n\n    const gridMenuControl = new Slick.Controls.GridMenu(columnDefinitions, grid, this._gridOptions);\n    if (grid && this._gridOptions.gridMenu) {\n      gridMenuControl.onBeforeMenuShow.subscribe((e: Event, args: CellArgs) => {\n        if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onBeforeMenuShow === 'function') {\n          this._gridOptions.gridMenu.onBeforeMenuShow(e, args);\n        }\n      });\n      gridMenuControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\n        this.areVisibleColumnDifferent = true;\n        if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onColumnsChanged === 'function') {\n          this._gridOptions.gridMenu.onColumnsChanged(e, args);\n        }\n      });\n      gridMenuControl.onCommand.subscribe((e: Event, args: CellArgs) => {\n        if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onCommand === 'function') {\n          this._gridOptions.gridMenu.onCommand(e, args);\n        }\n      });\n      gridMenuControl.onMenuClose.subscribe((e: Event, args: CellArgs) => {\n        if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onMenuClose === 'function') {\n          this._gridOptions.gridMenu.onMenuClose(e, args);\n        }\n\n        // we also want to resize the columns if the user decided to hide certain column(s)\n        if (grid && typeof grid.autosizeColumns === 'function') {\n          // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree)\n          const gridUid = grid.getUID();\n          if (this.areVisibleColumnDifferent && gridUid && $(`.${gridUid}`).length > 0) {\n            grid.autosizeColumns();\n          }\n        }\n      });\n    }\n    return gridMenuControl;\n  }\n\n  /**\n   * Create the Header Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)\n   * @param grid\n   * @param columnDefinitions\n   * @param options\n   */\n  createHeaderMenu(grid: any, dataView: any, columnDefinitions: Column[]) {\n    this._gridOptions.headerMenu = { ...this.getDefaultHeaderMenuOptions(), ...this._gridOptions.headerMenu };\n    if (this._gridOptions.enableHeaderMenu) {\n      this._gridOptions.headerMenu = this.addHeaderMenuCustomCommands(grid, dataView, this._gridOptions, columnDefinitions);\n    }\n\n    const headerMenuPlugin = new Slick.Plugins.HeaderMenu(this._gridOptions.headerMenu);\n\n    grid.registerPlugin(headerMenuPlugin);\n    headerMenuPlugin.onCommand.subscribe((e: Event, args: HeaderMenuOnCommandArgs) => {\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onCommand === 'function') {\n        this._gridOptions.headerMenu.onCommand(e, args);\n      }\n    });\n    headerMenuPlugin.onCommand.subscribe((e: Event, args: HeaderMenuOnBeforeMenuShowArgs) => {\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onBeforeMenuShow === 'function') {\n        this._gridOptions.headerMenu.onBeforeMenuShow(e, args);\n      }\n    });\n\n    return headerMenuPlugin;\n  }\n\n  /** Create an undo redo buffer used by the Excel like copy */\n  createUndoRedoBuffer() {\n    const commandQueue = [];\n    let commandCtr = 0;\n\n    this.undoRedoBuffer = {\n      queueAndExecuteCommand: (editCommand) => {\n        commandQueue[commandCtr] = editCommand;\n        commandCtr++;\n        editCommand.execute();\n      },\n      undo: () => {\n        if (commandCtr === 0) { return; }\n        commandCtr--;\n        const command = commandQueue[commandCtr];\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\n          command.undo();\n        }\n      },\n      redo: () => {\n        if (commandCtr >= commandQueue.length) { return; }\n        const command = commandQueue[commandCtr];\n        commandCtr++;\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\n          command.execute();\n        }\n      }\n    };\n  }\n\n  /** Hide a column from the grid */\n  hideColumn(column: Column) {\n    if (this._grid && this.visibleColumns) {\n      const columnIndex = this._grid.getColumnIndex(column.id);\n      this.visibleColumns = this.removeColumnByIndex(this.visibleColumns, columnIndex);\n      this._grid.setColumns(this.visibleColumns);\n    }\n  }\n\n  /** Attach an undo shortcut key hook that will redo/undo the copy buffer */\n  hookUndoShortcutKey() {\n    // undo shortcut\n    $(document).keydown((e) => {\n      if (e.which === 90 && (e.ctrlKey || e.metaKey)) {    // CTRL + (shift) + Z\n        if (e.shiftKey) {\n          this.undoRedoBuffer.redo();\n        } else {\n          this.undoRedoBuffer.undo();\n        }\n      }\n    });\n  }\n\n  /** Dispose of all the controls & plugins */\n  dispose() {\n    this._grid = null;\n    this._dataView = null;\n    this.visibleColumns = [];\n\n    // destroy the control/plugin if it has that method\n    this.extensionList.forEach((item) => {\n      if (item && item.service && item.service.destroy) {\n        item.service.destroy();\n      }\n    });\n    this.extensionList = [];\n  }\n\n  /**\n   * Create Grid Menu with Custom Commands if user has enabled Filters and/or uses a Backend Service (OData, GraphQL)\n   * @param grid\n   * @param options\n   * @return gridMenu\n   */\n  private addGridMenuCustomCommands(grid: any, options: GridOption) {\n    const backendApi = options.backendServiceApi || null;\n\n    if (options.enableFiltering) {\n      // show grid menu: clear all filters\n      if (options && options.gridMenu && !options.gridMenu.hideClearAllFiltersCommand && options.gridMenu.customItems && options.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'clear-filter').length === 0) {\n        options.gridMenu.customItems.push(\n          {\n            iconCssClass: options.gridMenu.iconClearAllFiltersCommand || 'fa fa-filter text-danger',\n            title: options.enableTranslate ? this.translate.instant('CLEAR_ALL_FILTERS') : 'Clear All Filters',\n            disabled: false,\n            command: 'clear-filter',\n            positionOrder: 50\n          }\n        );\n      }\n\n      // show grid menu: toggle filter row\n      if (options && options.gridMenu && !options.gridMenu.hideToggleFilterCommand && options.gridMenu.customItems && options.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'toggle-filter').length === 0) {\n        options.gridMenu.customItems.push(\n          {\n            iconCssClass: options.gridMenu.iconToggleFilterCommand || 'fa fa-random',\n            title: options.enableTranslate ? this.translate.instant('TOGGLE_FILTER_ROW') : 'Toggle Filter Row',\n            disabled: false,\n            command: 'toggle-filter',\n            positionOrder: 52\n          }\n        );\n      }\n\n      // show grid menu: refresh dataset\n      if (options && options.gridMenu && !options.gridMenu.hideRefreshDatasetCommand && backendApi && options.gridMenu.customItems && options.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'refresh-dataset').length === 0) {\n        options.gridMenu.customItems.push(\n          {\n            iconCssClass: options.gridMenu.iconRefreshDatasetCommand || 'fa fa-refresh',\n            title: options.enableTranslate ? this.translate.instant('REFRESH_DATASET') : 'Refresh Dataset',\n            disabled: false,\n            command: 'refresh-dataset',\n            positionOrder: 54\n          }\n        );\n      }\n    }\n\n    if (options.enableSorting) {\n      // show grid menu: clear all sorting\n      if (options && options.gridMenu && !options.gridMenu.hideClearAllSortingCommand && options.gridMenu.customItems && options.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'clear-sorting').length === 0) {\n        options.gridMenu.customItems.push(\n          {\n            iconCssClass: options.gridMenu.iconClearAllSortingCommand || 'fa fa-unsorted text-danger',\n            title: options.enableTranslate ? this.translate.instant('CLEAR_ALL_SORTING') : 'Clear All Sorting',\n            disabled: false,\n            command: 'clear-sorting',\n            positionOrder: 51\n          }\n        );\n      }\n    }\n\n    // show grid menu: export to file\n    if (options && options.enableExport && options.gridMenu && !options.gridMenu.hideExportCsvCommand && options.gridMenu.customItems && options.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'export-csv').length === 0) {\n      options.gridMenu.customItems.push(\n        {\n          iconCssClass: options.gridMenu.iconExportCsvCommand || 'fa fa-download',\n          title: options.enableTranslate ? this.translate.instant('EXPORT_TO_CSV') : 'Export in CSV format',\n          disabled: false,\n          command: 'export-csv',\n          positionOrder: 53\n        }\n      );\n    }\n    // show grid menu: export to text file as tab delimited\n    if (options && options.enableExport && options.gridMenu && !options.gridMenu.hideExportTextDelimitedCommand && options.gridMenu.customItems && options.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'export-text-delimited').length === 0) {\n      options.gridMenu.customItems.push(\n        {\n          iconCssClass: options.gridMenu.iconExportTextDelimitedCommand || 'fa fa-download',\n          title: options.enableTranslate ? this.translate.instant('EXPORT_TO_TAB_DELIMITED') : 'Export in Text format (Tab delimited)',\n          disabled: false,\n          command: 'export-text-delimited',\n          positionOrder: 54\n        }\n      );\n    }\n\n    // Command callback, what will be executed after command is clicked\n    if (options.gridMenu && options.gridMenu.customItems.length > 0) {\n      options.gridMenu.onCommand = (e, args) => {\n        if (args && args.command) {\n          switch (args.command) {\n            case 'clear-filter':\n              this.filterService.clearFilters();\n              this._dataView.refresh();\n              break;\n            case 'clear-sorting':\n              this.sortService.clearSorting();\n              this._dataView.refresh();\n              break;\n            case 'export-csv':\n              this.exportService.exportToFile({\n                delimiter: DelimiterType.comma,\n                filename: 'export',\n                format: FileType.csv,\n                useUtf8WithBom: true\n              });\n              break;\n            case 'export-text-delimited':\n              this.exportService.exportToFile({\n                delimiter: DelimiterType.tab,\n                filename: 'export',\n                format: FileType.txt,\n                useUtf8WithBom: true\n              });\n              break;\n            case 'toggle-filter':\n              grid.setHeaderRowVisibility(!grid.getOptions().showHeaderRow);\n              break;\n            case 'toggle-toppanel':\n              grid.setTopPanelVisibility(!grid.getOptions().showTopPanel);\n              break;\n            case 'refresh-dataset':\n              this.refreshBackendDataset();\n              break;\n            default:\n              alert('Command: ' + args.command);\n              break;\n          }\n        }\n      };\n    }\n\n    // add the custom \"Commands\" title if there are any commands\n    if (options && options.gridMenu && options.gridMenu.customItems && options.gridMenu.customItems.length > 0) {\n      const customTitle = options.enableTranslate ? this.translate.instant('COMMANDS') : 'Commands';\n      options.gridMenu.customTitle = options.gridMenu.customTitle || customTitle;\n\n      // sort the custom items by their position in the list\n      options.gridMenu.customItems.sort((itemA, itemB) => {\n        if (itemA && itemB && itemA.hasOwnProperty('positionOrder') && itemB.hasOwnProperty('positionOrder')) {\n          return itemA.positionOrder - itemB.positionOrder;\n        }\n        return 0;\n      });\n    }\n  }\n\n  /**\n   * Create Header Menu with Custom Commands if user has enabled Header Menu\n   * @param grid\n   * @param dataView\n   * @param options\n   * @param columnDefinitions\n   * @return header menu\n   */\n  private addHeaderMenuCustomCommands(grid: any, dataView: any, options: GridOption, columnDefinitions: Column[]): HeaderMenu {\n    const headerMenuOptions = options.headerMenu;\n\n    if (columnDefinitions && Array.isArray(columnDefinitions) && options.enableHeaderMenu) {\n      columnDefinitions.forEach((columnDef: Column) => {\n        if (columnDef && !columnDef.excludeFromHeaderMenu) {\n          if (!columnDef.header || !columnDef.header.menu) {\n            columnDef.header = {\n              menu: {\n                items: []\n              }\n            };\n          }\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\n\n          // Sorting Commands\n          if (options.enableSorting && columnDef.sortable && headerMenuOptions.showSortCommands) {\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-asc').length === 0) {\n              columnHeaderMenuItems.push({\n                iconCssClass: headerMenuOptions.iconSortAscCommand || 'fa fa-sort-asc',\n                title: options.enableTranslate ? this.translate.instant('SORT_ASCENDING') : 'Sort Ascending',\n                command: 'sort-asc'\n              });\n            }\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-desc').length === 0) {\n              columnHeaderMenuItems.push({\n                iconCssClass: headerMenuOptions.iconSortDescCommand || 'fa fa-sort-desc',\n                title: options.enableTranslate ? this.translate.instant('SORT_DESCENDING') : 'Sort Descending',\n                command: 'sort-desc'\n              });\n            }\n          }\n\n          // Hide Column Command\n          if (headerMenuOptions.showColumnHideCommand && columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'hide').length === 0) {\n            columnHeaderMenuItems.push({\n              iconCssClass: headerMenuOptions.iconColumnHideCommand || 'fa fa-times',\n              title: options.enableTranslate ? this.translate.instant('HIDE_COLUMN') : 'Hide Column',\n              command: 'hide'\n            });\n          }\n        }\n      });\n\n      // Command callback, what will be executed after command is clicked\n      if (headerMenuOptions) {\n        headerMenuOptions.onCommand = (e, args) => {\n          if (args && args.command) {\n            switch (args.command) {\n              case 'hide':\n              this.hideColumn(args.column);\n              this.autoResizeColumns();\n                break;\n              case 'sort-asc':\n              case 'sort-desc':\n                // get previously sorted columns\n                const cols: ColumnSort[] = this.sortService.getPreviousColumnSorts(args.column.id + '');\n\n                // add to the column array, the column sorted by the header menu\n                cols.push({ sortCol: args.column, sortAsc: (args.command === 'sort-asc') });\n                if (options.backendServiceApi) {\n                  this.sortService.onBackendSortChanged(e, { multiColumnSort: true, sortCols: cols, grid });\n                } else {\n                  this.sortService.onLocalSortChanged(grid, dataView, cols);\n                }\n\n                // update the this.gridObj sortColumns array which will at the same add the visual sort icon(s) on the UI\n                const newSortColumns: ColumnSort[] = cols.map((col) => {\n                  return { columnId: col.sortCol.id, sortAsc: col.sortAsc };\n                });\n                grid.setSortColumns(newSortColumns); // add sort icon in UI\n                break;\n              default:\n                alert('Command: ' + args.command);\n                break;\n            }\n          }\n        };\n      }\n    }\n\n    return headerMenuOptions;\n  }\n\n  /** Refresh the dataset through the Backend Service */\n  refreshBackendDataset() {\n    let query;\n    const backendApi = this._gridOptions.backendServiceApi;\n    if (!backendApi || !backendApi.service || !backendApi.process) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    if (backendApi.service) {\n      query = backendApi.service.buildQuery();\n    }\n\n    if (query && query !== '') {\n      if (backendApi.preProcess) {\n        backendApi.preProcess();\n      }\n\n      // the process could be an Observable (like HttpClient) or a Promise\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n      const observableOrPromise = backendApi.process(query);\n\n      castToPromise(observableOrPromise).then((processResult: GraphqlResult | any) => {\n        // from the result, call our internal post process to update the Dataset and Pagination info\n        if (processResult && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  /** Remove a column from the grid by it's index in the grid */\n  removeColumnByIndex(array: any[], index: number) {\n    return array.filter((el: any, i: number) => {\n      return index !== i;\n    });\n  }\n\n  /**\n   * Translate the Column Picker and it's last 2 checkboxes\n   * Note that the only way that seems to work is to destroy and re-create the Column Picker\n   * Changing only the columnPicker.columnTitle with i18n translate was not enough.\n   */\n  translateColumnPicker() {\n    // destroy and re-create the Column Picker which seems to be the only way to translate properly\n    if (this.columnPickerControl) {\n      this.columnPickerControl.destroy();\n      this.columnPickerControl = null;\n    }\n\n    const tempHideForceFit = this._gridOptions.columnPicker.hideForceFitButton;\n    const tempSyncResize = this._gridOptions.columnPicker.hideSyncResizeButton;\n    this._gridOptions.columnPicker = undefined;\n    this._gridOptions.columnPicker = {\n      hideForceFitButton: tempHideForceFit,\n      hideSyncResizeButton: tempSyncResize\n    };\n    this.createColumnPicker(this._grid, this.visibleColumns);\n  }\n\n  /**\n   * Translate the Grid Menu ColumnTitle and CustomTitle.\n   * Note that the only way that seems to work is to destroy and re-create the Grid Menu\n   * Changing only the gridMenu.columnTitle with i18n translate was not enough.\n   */\n  translateGridMenu() {\n    // destroy and re-create the Grid Menu which seems to be the only way to translate properly\n    this.gridMenuControl.destroy();\n\n    // reset all Grid Menu options that have translation text & then re-create the Grid Menu and also the custom items array\n    if (this._gridOptions && this._gridOptions.gridMenu) {\n      this._gridOptions.gridMenu = this.resetGridMenuTranslations(this._gridOptions.gridMenu);\n    }\n    this.createGridMenu(this._grid, this.visibleColumns);\n  }\n\n  /**\n   * Translate the Header Menu titles, we need to loop through all column definition to re-translate them\n   */\n  translateHeaderMenu() {\n    // reset all Grid Menu options that have translation text & then re-create the Grid Menu and also the custom items array\n    if (this._gridOptions && this._gridOptions.headerMenu) {\n      this.resetHeaderMenuTranslations(this.visibleColumns);\n    }\n  }\n\n  /**\n   * Translate manually the header titles.\n   * We could optionally pass a locale (that will change currently loaded locale), else it will use current locale\n   * @param locale locale to use\n   */\n  translateColumnHeaders(locale?: boolean | string, newColumnDefinitions?: Column[]) {\n    if (locale) {\n      this.translate.use(locale as string);\n    }\n\n    const columnDefinitions = newColumnDefinitions || this._columnDefinitions;\n    for (const column of columnDefinitions) {\n      if (column.headerKey) {\n        column.name = this.translate.instant(column.headerKey);\n      }\n    }\n\n    // re-render the column headers\n    this.renderColumnHeaders(columnDefinitions);\n  }\n\n  /**\n   * Render (or re-render) the column headers from column definitions.\n   * calling setColumns() will trigger a grid re-render\n   */\n  renderColumnHeaders(newColumnDefinitions?: Column[]) {\n    const collection = newColumnDefinitions || this._columnDefinitions;\n    if (Array.isArray(collection) && this._grid && this._grid.setColumns) {\n      this._grid.setColumns(collection);\n    }\n  }\n\n  /**\n   * @return default Grid Menu options\n   */\n  private getDefaultGridMenuOptions(): GridMenu {\n    return {\n      columnTitle: this.translate.instant('COLUMNS') || 'Columns',\n      forceFitTitle: this.translate.instant('FORCE_FIT_COLUMNS') || 'Force fit columns',\n      syncResizeTitle: this.translate.instant('SYNCHRONOUS_RESIZE') || 'Synchronous resize',\n      iconCssClass: 'fa fa-bars',\n      menuWidth: 18,\n      customTitle: undefined,\n      customItems: [],\n      hideClearAllFiltersCommand: false,\n      hideRefreshDatasetCommand: false,\n      hideToggleFilterCommand: false\n    };\n  }\n\n  /**\n   * @return default Header Menu options\n   */\n  private getDefaultHeaderMenuOptions(): HeaderMenu {\n    return {\n      autoAlignOffset: 12,\n      minWidth: 140,\n      showColumnHideCommand: true,\n      showSortCommands: true\n    };\n  }\n\n  /**\n   * Reset all the Grid Menu options which have text to translate\n   * @param grid menu object\n   */\n  private resetGridMenuTranslations(gridMenu: GridMenu): GridMenu {\n    // we will reset the custom items array since the commands title have to be translated too (no worries, we will re-create it later)\n    gridMenu.customItems = [];\n    delete gridMenu.customTitle;\n\n    gridMenu.columnTitle = this.translate.instant('COLUMNS') || 'Columns';\n    gridMenu.forceFitTitle = this.translate.instant('FORCE_FIT_COLUMNS') || 'Force fit columns';\n    gridMenu.syncResizeTitle = this.translate.instant('SYNCHRONOUS_RESIZE') || 'Synchronous resize';\n\n    return gridMenu;\n  }\n\n  /**\n   * Reset all the Grid Menu options which have text to translate\n   * @param grid menu object\n   */\n  private resetHeaderMenuTranslations(columnDefinitions: Column[]) {\n    columnDefinitions.forEach((columnDef: Column) => {\n      if (columnDef && columnDef.header && columnDef.header && columnDef.header.menu && columnDef.header.menu.items) {\n        if (!columnDef.excludeFromHeaderMenu) {\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\n\n          columnHeaderMenuItems.forEach((item) => {\n            switch (item.command) {\n              case 'sort-asc':\n                item.title = this.translate.instant('SORT_ASCENDING') || 'Sort Ascending';\n                break;\n              case 'sort-desc':\n                item.title = this.translate.instant('SORT_DESCENDING') || 'Sort Ascending';\n                break;\n              case 'hide':\n                item.title = this.translate.instant('HIDE_COLUMN') || 'Sort Ascending';\n                break;\n            }\n          });\n        }\n      }\n    });\n  }\n}\n",
    "/**\r\n * This GraphqlQueryBuilder class is a lib that already exist\r\n * but was causing issues with TypeScript, RequireJS and other bundler/packagers\r\n * and so I rewrote it in pure TypeScript.\r\n *\r\n * The previous lib can be viewed here at this Github\r\n * https://github.com/codemeasandwich/graphql-query-builder\r\n */\r\nexport default class GraphqlQueryBuilder {\r\n  alias: string;\r\n  head: any[] = [];\r\n  body: any;\r\n\r\n  /* Constructor, query/mutator you wish to use, and an alias or filter arguments. */\r\n  constructor(private queryFnName: string, aliasOrFilter?: string | object) {\r\n    if (typeof aliasOrFilter === 'function') {\r\n      this.alias = aliasOrFilter;\r\n    } else if (typeof aliasOrFilter === 'object') {\r\n      this.filter(aliasOrFilter);\r\n    } else if (undefined === aliasOrFilter && 2 === arguments.length) {\r\n      throw new TypeError(`You have passed undefined as Second argument to \"Query\"`);\r\n    } else if (undefined !== aliasOrFilter) {\r\n      throw new TypeError(`Second argument to \"Query\" should be an alias name(String) or filter arguments(Object). was passed ${aliasOrFilter}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The parameters to run the query against.\r\n   * @param filters An object mapping attribute to values\r\n   */\r\n  filter(filters: any) {\r\n    for (const prop of Object.keys(filters)) {\r\n      if (typeof filters[prop] === 'function') {\r\n        continue;\r\n      }\r\n      const val = this.getGraphQLValue(filters[prop]);\r\n      if (val === '{}') {\r\n        continue;\r\n      }\r\n      this.head.push(`${prop}:${val}`);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Outlines the properties you wish to be returned from the query.\r\n   * @param properties representing each attribute you want Returned\r\n   */\r\n  find(...searches: any[]) { // THIS NEED TO BE A \"FUNCTION\" to scope 'arguments'\r\n    if (!searches) {\r\n      throw new TypeError(`find value can not be >>falsy<<`);\r\n    }\r\n    // if its a string.. it may have other values\r\n    // else it sould be an Object or Array of maped values\r\n    const searchKeys = (searches.length === 1 && Array.isArray(searches[0])) ? searches[0] : searches;\r\n    this.body = this.parceFind(searchKeys);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set an alias for this result.\r\n   * @param alias\r\n   */\r\n  setAlias(alias: string) {\r\n    this.alias = alias;\r\n  }\r\n\r\n  /**\r\n   * Return to the formatted query string\r\n   * @return\r\n   */\r\n  toString() {\r\n    if (this.body === undefined) {\r\n      throw new ReferenceError(`return properties are not defined. use the 'find' function to defined them`);\r\n    }\r\n\r\n    return `${(this.alias) ? (this.alias + ':') : ''} ${this.queryFnName} ${(this.head.length > 0) ? '(' + this.head.join(',') + ')' : ''}  { ${this.body} }`;\r\n  }\r\n\r\n  // --\r\n  // PRIVATE FUNCTIONS\r\n  // -----------------\r\n\r\n  private parceFind(_levelA: any[]) {\r\n    const propsA = _levelA.map((currentValue, index) => {\r\n      const itemX = _levelA[index];\r\n\r\n      if (itemX instanceof GraphqlQueryBuilder) {\r\n        return itemX.toString();\r\n      } else if (!Array.isArray(itemX) && typeof itemX === 'object') {\r\n        const propsAA = Object.keys(itemX);\r\n        if (1 !== propsAA.length) {\r\n          throw new RangeError(`Alias objects should only have one value. was passed: ${JSON.stringify(itemX)}`);\r\n        }\r\n        const propS = propsAA[0];\r\n        const item = itemX[propS];\r\n\r\n        if (Array.isArray(item)) {\r\n          return new GraphqlQueryBuilder(propS).find(item);\r\n        }\r\n        return `${propS} : ${item} `;\r\n      } else if (typeof itemX === 'string') {\r\n        return itemX;\r\n      } else {\r\n        throw new RangeError(`cannot handle Find value of ${itemX}`);\r\n      }\r\n    });\r\n\r\n    return propsA.join(',');\r\n  }\r\n\r\n  private getGraphQLValue(value: any) {\r\n    if (typeof value === 'string') {\r\n      value = JSON.stringify(value);\r\n    } else if (Array.isArray(value)) {\r\n      value = value.map(item => {\r\n        return this.getGraphQLValue(item);\r\n      }).join();\r\n      value = `[${value}]`;\r\n    } else if (value instanceof Date) {\r\n      value = JSON.stringify(value);\r\n    } else if (value !== null && typeof value === 'object') {\r\n      value = this.objectToString(value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private objectToString(obj: any) {\r\n    const sourceA = [];\r\n\r\n    for (const prop of Object.keys(obj)) {\r\n      if (typeof obj[prop] === 'function') {\r\n        continue;\r\n      }\r\n      sourceA.push(`${prop}:${this.getGraphQLValue(obj[prop])}`);\r\n    }\r\n    return `{${sourceA.join()}}`;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport { mapOperatorType, mapOperatorByFilterType, mapOperatorByFieldType } from './utilities';\nimport {\n  BackendService,\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  ColumnSort,\n  CurrentFilter,\n  CurrentPagination,\n  CurrentSorter,\n  FieldType,\n  FilterChangedArgs,\n  GraphqlCursorPaginationOption,\n  GraphqlDatasetFilter,\n  GraphqlFilteringOption,\n  GraphqlPaginationOption,\n  GraphqlServiceOption,\n  GraphqlSortingOption,\n  GridOption,\n  Pagination,\n  PaginationChangedArgs,\n  SortChangedArgs,\n  SortDirection,\n  SortDirectionString\n} from './../models/index';\nimport QueryBuilder from './graphqlQueryBuilder';\n\n// timer for keeping track of user typing waits\nlet timer: any;\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\nconst DEFAULT_ITEMS_PER_PAGE = 25;\nconst DEFAULT_PAGE_SIZE = 20;\n\nexport class GraphqlService implements BackendService {\n  private _currentFilters: ColumnFilters | CurrentFilter[];\n  private _currentPagination: CurrentPagination;\n  private _currentSorters: CurrentSorter[];\n  private _columnDefinitions: Column[];\n  private _grid: any;\n  options: GraphqlServiceOption;\n  pagination: Pagination | undefined;\n  defaultOrderBy: GraphqlSortingOption = { field: 'id', direction: SortDirection.ASC };\n  defaultPaginationOptions: GraphqlPaginationOption | GraphqlCursorPaginationOption = {\n    first: DEFAULT_ITEMS_PER_PAGE,\n    offset: 0\n  };\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Build the GraphQL query, since the service include/exclude cursor, the output query will be different.\n   * @param serviceOptions GraphqlServiceOption\n   */\n  buildQuery() {\n    if (!this.options || !this.options.datasetName || (!this._columnDefinitions && !this.options.columnDefinitions)) {\n      throw new Error('GraphQL Service requires \"datasetName\" & \"columnDefinitions\" properties for it to work');\n    }\n\n    // get the column definitions and exclude some if they were tagged as excluded\n    let columnDefinitions = this._columnDefinitions || this.options.columnDefinitions;\n    columnDefinitions = columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\n\n    const queryQb = new QueryBuilder('query');\n    const datasetQb = new QueryBuilder(this.options.datasetName);\n    const dataQb = (this.options.isWithCursor) ? new QueryBuilder('edges') : new QueryBuilder('nodes');\n\n    // get all the columnds Ids for the filters to work\n    let columnIds: string[] = [];\n    if (columnDefinitions && Array.isArray(columnDefinitions)) {\n      for (const column of columnDefinitions) {\n        columnIds.push(column.field);\n\n        // if extra \"fields\" are passed, also push them to columnIds\n        if (column.fields) {\n          columnIds.push(...column.fields);\n        }\n      }\n      // columnIds = columnDefinitions.map((column) => column.field);\n    } else {\n      columnIds = this.options.columnIds || [];\n    }\n\n    // Slickgrid also requires the \"id\" field to be part of DataView\n    // add it to the GraphQL query if it wasn't already part of the list\n    if (columnIds.indexOf('id') === -1) {\n      columnIds.unshift('id');\n    }\n\n    const filters = this.buildFilterQuery(columnIds);\n\n    if (this.options.isWithCursor) {\n      // ...pageInfo { hasNextPage, endCursor }, edges { cursor, node { _filters_ } }\n      const pageInfoQb = new QueryBuilder('pageInfo');\n      pageInfoQb.find('hasNextPage', 'endCursor');\n      dataQb.find(['cursor', { node: filters }]);\n      datasetQb.find(['totalCount', pageInfoQb, dataQb]);\n    } else {\n      // ...nodes { _filters_ }\n      dataQb.find(filters);\n      datasetQb.find(['totalCount', dataQb]);\n    }\n\n    // add dataset filters, could be Pagination and SortingFilters and/or FieldFilters\n    const datasetFilters: GraphqlDatasetFilter = {\n      ...this.options.paginationOptions,\n      first: ((this.options.paginationOptions && this.options.paginationOptions.first) ? this.options.paginationOptions.first : ((this.pagination && this.pagination.pageSize) ? this.pagination.pageSize : null)) || this.defaultPaginationOptions.first\n    };\n\n    if (!this.options.isWithCursor) {\n      datasetFilters.offset = ((this.options.paginationOptions && this.options.paginationOptions.hasOwnProperty('offset')) ? +this.options.paginationOptions['offset'] : 0);\n    }\n\n    if (this.options.sortingOptions && Array.isArray(this.options.sortingOptions) && this.options.sortingOptions.length > 0) {\n      // orderBy: [{ field:x, direction: 'ASC' }]\n      datasetFilters.orderBy = this.options.sortingOptions;\n    }\n    if (this.options.filteringOptions && Array.isArray(this.options.filteringOptions) && this.options.filteringOptions.length > 0) {\n      // filterBy: [{ field: date, operator: '>', value: '2000-10-10' }]\n      datasetFilters.filterBy = this.options.filteringOptions;\n    }\n    if (this.options.addLocaleIntoQuery) {\n      // first: 20, ... locale: \"en-CA\"\n      datasetFilters.locale = this._gridOptions && this._gridOptions.i18n && this._gridOptions.i18n.currentLang || 'en';\n    }\n    if (this.options.extraQueryArguments) {\n      // first: 20, ... userId: 123\n      for (const queryArgument of this.options.extraQueryArguments) {\n        datasetFilters[queryArgument.field] = queryArgument.value;\n      }\n    }\n\n    // query { users(first: 20, orderBy: [], filterBy: [])}\n    datasetQb.filter(datasetFilters);\n    queryQb.find(datasetQb);\n\n    const enumSearchProperties = ['direction:', 'field:', 'operator:'];\n    return this.trimDoubleQuotesOnEnumField(queryQb.toString(), enumSearchProperties, this.options.keepArgumentFieldDoubleQuotes || false);\n  }\n\n  /**\n   * From an input array of strings, we want to build a GraphQL query string.\n   * The process has to take the dot notation and parse it into a valid GraphQL query\n   * Following this SO answer https://stackoverflow.com/a/47705476/1212166\n   *\n   * INPUT\n   *  ['firstName', 'lastName', 'billing.address.street', 'billing.address.zip']\n   * OUTPUT\n   * firstName, lastName, billing{address{street, zip}}\n   * @param inputArray\n   */\n  buildFilterQuery(inputArray: string[]) {\n\n    const set = (o: any = {}, a: any) => {\n      const k = a.shift();\n      o[k] = a.length ? set(o[k], a) : null;\n      return o;\n    };\n\n    const output = inputArray.reduce((o: any, a: string) => set(o, a.split('.')), {});\n\n    return JSON.stringify(output)\n      .replace(/\\\"|\\:|null/g, '')\n      .replace(/^\\{/, '')\n      .replace(/\\}$/, '');\n  }\n\n  init(serviceOptions?: GraphqlServiceOption, pagination?: Pagination, grid?: any): void {\n    this._grid = grid;\n    this.options = serviceOptions || {};\n    this.pagination = pagination;\n\n    if (grid && grid.getColumns && grid.getOptions) {\n      this._columnDefinitions = grid.getColumns();\n    }\n  }\n\n  /**\n   * Get an initialization of Pagination options\n   * @return Pagination Options\n   */\n  getInitPaginationOptions(): GraphqlDatasetFilter {\n    return (this.options.isWithCursor) ? { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE) } : { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE), offset: 0 };\n  }\n\n  /** Get the GraphQL dataset name */\n  getDatasetName(): string {\n    return this.options.datasetName || '';\n  }\n\n  /** Get the Filters that are currently used by the grid */\n  getCurrentFilters(): ColumnFilters | CurrentFilter[] {\n    return this._currentFilters;\n  }\n\n  /** Get the Pagination that is currently used by the grid */\n  getCurrentPagination(): CurrentPagination {\n    return this._currentPagination;\n  }\n\n  /** Get the Sorters that are currently used by the grid */\n  getCurrentSorters(): CurrentSorter[] {\n    return this._currentSorters;\n  }\n\n  /*\n   * Reset the pagination options\n   */\n  resetPaginationOptions() {\n    let paginationOptions;\n    if (this.options.isWithCursor) {\n      // first, last, after, before\n      paginationOptions = {\n        after: '',\n        before: undefined,\n        last: undefined\n      } as GraphqlCursorPaginationOption;\n    } else {\n      // first, last, offset\n      paginationOptions = (this.options.paginationOptions || this.getInitPaginationOptions()) as GraphqlPaginationOption;\n      paginationOptions.offset = 0;\n    }\n\n    // save current pagination as Page 1 and page size as \"first\" set size\n    this._currentPagination = {\n      pageNumber: 1,\n      pageSize: paginationOptions.first\n    };\n\n    this.updateOptions({ paginationOptions });\n  }\n\n  updateOptions(serviceOptions?: GraphqlServiceOption) {\n    this.options = { ...this.options, ...serviceOptions };\n  }\n\n  /*\n   * FILTERING\n   */\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\n    const gridOptions: GridOption = this._gridOptions || args.grid.getOptions();\n    const backendApi = gridOptions.backendServiceApi;\n\n    if (backendApi === undefined) {\n      throw new Error('Something went wrong in the GraphqlService, \"backendServiceApi\" is not initialized');\n    }\n\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\n    let debounceTypingDelay = 0;\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\n    }\n\n    const promise = new Promise<string>((resolve, reject) => {\n      if (!args || !args.grid) {\n        throw new Error('Something went wrong when trying create the GraphQL Backend Service, it seems that \"args\" is not populated correctly');\n      }\n\n      // reset Pagination, then build the GraphQL query which we will use in the WebAPI callback\n      // wait a minimum user typing inactivity before processing any query\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        // loop through all columns to inspect filters & set the query\n        this.updateFilters(args.columnFilters, false);\n\n        this.resetPaginationOptions();\n        resolve(this.buildQuery());\n      }, debounceTypingDelay);\n    });\n\n    return promise;\n  }\n\n  /*\n   * PAGINATION\n   * With cursor, the query can have 4 arguments (first, after, last, before), for example:\n   *   users (first:20, after:\"YXJyYXljb25uZWN0aW9uOjM=\") {\n   *     totalCount\n   *     pageInfo {\n   *       hasNextPage\n   *       endCursor\n   *     }\n   *     edges {\n   *       cursor\n   *       node {\n   *         name\n   *         gender\n   *       }\n   *     }\n   *   }\n   * Without cursor, the query can have 3 arguments (first, last, offset), for example:\n   *   users (first:20, offset: 10) {\n   *     totalCount\n   *     nodes {\n   *       name\n   *       gender\n   *     }\n   *   }\n   */\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\n    const pageSize = +(args.pageSize || ((this.pagination) ? this.pagination.pageSize : DEFAULT_PAGE_SIZE));\n    this.updatePagination(args.newPage, pageSize);\n\n    // build the GraphQL query which we will use in the WebAPI callback\n    return this.buildQuery();\n  }\n\n  /*\n   * SORTING\n   * we will use sorting as per a Facebook suggestion on a Github issue (with some small changes)\n   * https://github.com/graphql/graphql-relay-js/issues/20#issuecomment-220494222\n   */\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\n\n    // loop through all columns to inspect sorters & set the query\n    this.updateSorters(sortColumns);\n\n    // build the GraphQL query which we will use in the WebAPI callback\n    return this.buildQuery();\n  }\n\n  /**\n   * loop through all columns to inspect filters & update backend service filteringOptions\n   * @param columnFilters\n   */\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset: boolean) {\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    this._currentFilters = this.castFilterToColumnFilter(columnFilters);\n\n    const searchByArray: GraphqlFilteringOption[] = [];\n    let searchValue: string | string[];\n\n    for (const columnId in columnFilters) {\n      if (columnFilters.hasOwnProperty(columnId)) {\n        const columnFilter = columnFilters[columnId];\n\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\n        let columnDef: Column | undefined;\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\n          columnDef = this._columnDefinitions.find((column: Column) => column.id === columnFilter.columnId);\n        } else {\n          columnDef = columnFilter.columnDef;\n        }\n        if (!columnDef) {\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\n        }\n\n        const fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\n        if (typeof fieldSearchValue === 'undefined') {\n          fieldSearchValue = '';\n        }\n\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\n          throw new Error(`GraphQL filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {type: FilterType.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\n        }\n\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n        let operator = columnFilter.operator || ((matches) ? matches[1] : '');\n        searchValue = (!!matches) ? matches[2] : '';\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n\n        // no need to query if search value is empty\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\n          continue;\n        }\n\n        // when having more than 1 search term (we need to create a CSV string for GraphQL \"IN\" or \"NOT IN\" filter search)\n        if (searchTerms && searchTerms.length > 1) {\n          searchValue = searchTerms.join(',');\n        } else if (typeof searchValue === 'string') {\n          // escaping the search value\n          searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\n          if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\n            operator = (operator === '*' || operator === '*z') ? 'endsWith' : 'startsWith';\n          }\n        }\n\n        // if we didn't find an Operator but we have a Filter Type, we should use default Operator\n        // multipleSelect is \"IN\", while singleSelect is \"EQ\", else don't map any operator\n        if (!operator && columnDef.filter) {\n          operator = mapOperatorByFilterType(columnDef.filter.type || '');\n        }\n\n        // if we still don't have an operator find the proper Operator to use by it's field type\n        if (!operator) {\n          operator = mapOperatorByFieldType(columnDef.type || FieldType.string);\n        }\n\n        searchByArray.push({\n          field: fieldName,\n          operator: mapOperatorType(operator),\n          value: searchValue\n        });\n      }\n    }\n\n    // update the service options with filters for the buildQuery() to work later\n    this.updateOptions({ filteringOptions: searchByArray });\n  }\n\n  /**\n   * Update the pagination component with it's new page number and size\n   * @param newPage\n   * @param pageSize\n   */\n  updatePagination(newPage: number, pageSize: number) {\n    this._currentPagination = {\n      pageNumber: newPage,\n      pageSize\n    };\n\n    let paginationOptions;\n    if (this.options.isWithCursor) {\n      paginationOptions = {\n        first: pageSize\n      };\n    } else {\n      paginationOptions = {\n        first: pageSize,\n        offset: (newPage - 1) * pageSize\n      };\n    }\n\n    this.updateOptions({ paginationOptions });\n  }\n\n  /**\n   * loop through all columns to inspect sorters & update backend service sortingOptions\n   * @param columnFilters\n   */\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\n    let currentSorters: CurrentSorter[] = [];\n    let graphqlSorters: GraphqlSortingOption[] = [];\n\n    if (!sortColumns && presetSorters) {\n      // make the presets the current sorters, also make sure that all direction are in uppercase for GraphQL\n      currentSorters = presetSorters;\n      currentSorters.forEach((sorter) => sorter.direction = sorter.direction.toUpperCase() as SortDirectionString);\n\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\n      const tmpSorterArray = currentSorters.map((sorter) => {\n        const columnDef = this._columnDefinitions.find((column: Column) => column.id === sorter.columnId);\n        if (columnDef) {\n          graphqlSorters.push({\n            field: (columnDef.queryField || columnDef.queryFieldSorter || columnDef.field || columnDef.id) + '',\n            direction: sorter.direction\n          });\n        }\n        return {\n          columnId: sorter.columnId,\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\n        };\n      });\n      this._grid.setSortColumns(tmpSorterArray);\n    } else if (sortColumns && !presetSorters) {\n      // build the orderBy array, it could be multisort, example\n      // orderBy:[{field: lastName, direction: ASC}, {field: firstName, direction: DESC}]\n      if (sortColumns && sortColumns.length === 0) {\n        graphqlSorters = new Array(this.defaultOrderBy); // when empty, use the default sort\n        currentSorters = new Array({ columnId: this.defaultOrderBy.field, direction: this.defaultOrderBy.direction });\n      } else {\n        if (sortColumns) {\n          for (const column of sortColumns) {\n            if (column && column.sortCol) {\n              currentSorters.push({\n                columnId: column.sortCol.id + '',\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\n              });\n\n              graphqlSorters.push({\n                field: (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '',\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\n              });\n            }\n          }\n        }\n      }\n    }\n\n    // keep current Sorters and update the service options with the new sorting\n    this._currentSorters = currentSorters;\n    this.updateOptions({ sortingOptions: graphqlSorters });\n  }\n\n  /**\n   * A function which takes an input string and removes double quotes only\n   * on certain fields are identified as GraphQL enums (except fields with dot notation)\n   * For example let say we identified (\"direction:\", \"sort\") as word which are GraphQL enum fields\n   * then the result will be:\n   * FROM\n   * query { users (orderBy:[{field:\"firstName\", direction:\"ASC\"} }]) }\n   * TO\n   * query { users (orderBy:[{field: firstName, direction: ASC}})}\n   *\n   * EXCEPTIONS (fields with dot notation \".\" which are inside a \"field:\")\n   * these fields will keep double quotes while everything else will be stripped of double quotes\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: \"ASC\"} }\n   * TO\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: ASC}}\n   * @param inputStr input string\n   * @param enumSearchWords array of enum words to filter\n   * @returns outputStr output string\n   */\n  trimDoubleQuotesOnEnumField(inputStr: string, enumSearchWords: string[], keepArgumentFieldDoubleQuotes: boolean) {\n    const patternWordInQuotes = `\\s?((field:\\s*)?\".*?\")`;\n    let patternRegex = enumSearchWords.join(patternWordInQuotes + '|');\n    patternRegex += patternWordInQuotes; // the last one should also have the pattern but without the pipe \"|\"\n    // example with (field: & direction:):  /field:s?(\".*?\")|direction:s?(\".*?\")/\n    const reg = new RegExp(patternRegex, 'g');\n\n    return inputStr.replace(reg, (group1, group2, group3) => {\n      // remove double quotes except when the string starts with a \"field:\"\n      let removeDoubleQuotes = true;\n      if (group1.startsWith('field:') && keepArgumentFieldDoubleQuotes) {\n        removeDoubleQuotes = false;\n      }\n      const rep = removeDoubleQuotes ? group1.replace(/\"/g, '') : group1;\n      return rep;\n    });\n  }\n\n  //\n  // private functions\n  // -------------------\n  /**\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\n   * @param columnFilters\n   */\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    const filtersArray: ColumnFilter[] = (typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters;\n\n    return filtersArray.map((filter) => {\n      const columnDef = filter.columnDef;\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\n      if (filter.operator) {\n        tmpFilter.operator = filter.operator;\n      }\n      if (Array.isArray(filter.searchTerms)) {\n        tmpFilter.searchTerms = filter.searchTerms;\n      }\n      return tmpFilter;\n    });\n  }\n}\n",
    "declare interface StringConstructor {\r\n  allTitleCase(inputStr: string): string;\r\n  format(inputStr: string, args: any): string;\r\n  padZero(length: number): string;\r\n  trim(inputStr: string): string;\r\n  titleCase(inputStr: string): string;\r\n}\r\n\r\n\r\nString.format = function(format: string, args): string {\r\n  // const args = (Array.isArray(arguments[1])) ? arguments[1] : Array.prototype.slice.call(arguments, 1);\r\n\r\n  return format.replace(/{(\\d+)}/g, function (match, number) {\r\n    return (typeof args[number] !== 'undefined') ? args[number] : match;\r\n  });\r\n};\r\n\r\nString.padZero = function (this: string, length: number) {\r\n  let s = this;\r\n  while (s.length < length) {\r\n    s = '0' + s;\r\n  }\r\n  return s;\r\n};\r\n\r\n/**\r\n * Trim any extra white space from the string\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.trim = function(inputStr: string): string {\r\n  return inputStr ? inputStr.replace(/\\s+/g, ' ') : inputStr;\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.allTitleCase = function(inputStr: string): string {\r\n  return inputStr.replace(/\\w\\S*/g, function(outputStr) {\r\n     return outputStr.charAt(0).toUpperCase() + outputStr.substr(1).toLowerCase();\r\n  });\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n*/\r\nString.titleCase = function(inputStr: string): string {\r\n  return inputStr.charAt(0).toUpperCase() + inputStr.slice(1);\r\n};\r\n",
    "import './global-utilities';\r\nimport { CaseType, OdataOption } from './../models/index';\r\n\r\nexport class OdataService {\r\n  _columnFilters: any;\r\n  _defaultSortBy: string;\r\n  _odataOptions: OdataOption;\r\n\r\n  constructor() {\r\n    this._odataOptions = {\r\n      filterQueue: [],\r\n      orderBy: ''\r\n    };\r\n    this._defaultSortBy = '';\r\n    this._columnFilters = {};\r\n  }\r\n\r\n  /*\r\n    * Build the OData query string from all the options provided\r\n    * @return string OData query\r\n    */\r\n  buildQuery(): string {\r\n    this._odataOptions.filterQueue = [];\r\n    const queryTmpArray = [];\r\n\r\n    if (this._odataOptions.top) {\r\n      queryTmpArray.push(`$top=${this._odataOptions.top}`);\r\n    }\r\n    if (this._odataOptions.skip) {\r\n      queryTmpArray.push(`$skip=${this._odataOptions.skip}`);\r\n    }\r\n    if (this._odataOptions.orderBy) {\r\n      let argument = '';\r\n      if (Array.isArray(this._odataOptions.orderBy)) {\r\n        argument = this._odataOptions.orderBy.join(','); // csv, that will form a query example like: $orderby=RoleName asc, Id desc\r\n      } else {\r\n        argument = this._odataOptions.orderBy;\r\n      }\r\n      queryTmpArray.push(`$orderby=${argument}`);\r\n    }\r\n    if (this._odataOptions.filterBy || this._odataOptions.filter) {\r\n      if (this._odataOptions.filter) {\r\n        this._odataOptions.filterQueue = [];\r\n        let filterStr = this._odataOptions.filter;\r\n        if (Array.isArray(this._odataOptions.filter)) {\r\n          filterStr = this._odataOptions.filter.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n        }\r\n        this._odataOptions.filterQueue.push(`(${filterStr})`);\r\n      }\r\n      // filterBy are passed manually by the user, however we will only add it if the column wasn't yet filtered\r\n      if (!!this._odataOptions.filterBy && !!this._odataOptions.filterBy.fieldName && !this._columnFilters[this._odataOptions.filterBy.fieldName.toLowerCase()]) {\r\n        if (this._odataOptions.filterBy.searchTerm !== '') {\r\n          this.saveColumnFilter(this._odataOptions.filterBy.fieldName.toLowerCase(), this._odataOptions.filterBy.searchTerm, this._odataOptions.filterBy.searchTerms);\r\n          this.updateFilterFromListTerms(this._odataOptions.filterBy);\r\n        }\r\n      }\r\n    }\r\n    if (this._odataOptions.filterQueue.length > 0) {\r\n      const query = this._odataOptions.filterQueue.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n      this._odataOptions.filter = query; // overwrite with\r\n      queryTmpArray.push(`$filter=${query}`);\r\n    }\r\n\r\n    // join all the odata functions by a '&'\r\n    return queryTmpArray.join('&');\r\n  }\r\n\r\n  getFilterByColumn(columnName: string): string {\r\n    return (!!this._columnFilters[columnName]) ? this._columnFilters[columnName] : null;\r\n  }\r\n\r\n  getFilterCount(): number {\r\n    return (this._odataOptions.filterQueue) ? this._odataOptions.filterQueue.length : 0;\r\n  }\r\n\r\n  get columnFilters(): any[] {\r\n    return this._columnFilters;\r\n  }\r\n\r\n  get options(): OdataOption {\r\n    return this._odataOptions;\r\n  }\r\n\r\n  set options(options: OdataOption) {\r\n    this._odataOptions = options;\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string) {\r\n    delete this._columnFilters[fieldName];\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: any, searchTerms?: any[]) {\r\n    this._columnFilters[fieldName] = {\r\n      search: searchTerms,\r\n      value\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update the filter by a list of terms usually passed manually by the user as default filters\r\n   * @param filterOptions\r\n   * @returns\r\n   */\r\n  updateFilterFromListTerms(filterOptions: any) {\r\n    // build the filter query\r\n    if (Array.isArray(filterOptions)) {\r\n      filterOptions.forEach((filterOptionObject) => {\r\n        this.updateFilterFromTerm(filterOptionObject);\r\n      });\r\n    } else {\r\n      this.updateFilterFromTerm(filterOptions);\r\n    }\r\n  }\r\n\r\n  updateFilterFromTerm(filterOptions: any) {\r\n    let searchBy = '';\r\n    const tmpSearchByArray = [];\r\n    const fieldName = filterOptions.fieldName;\r\n    const fieldSearchTerms = filterOptions.searchTerms;\r\n    const operator = filterOptions.operator;\r\n\r\n    // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n    if (!!fieldSearchTerms && fieldSearchTerms.length > 0) {\r\n      const tmpSearchTerms = [];\r\n\r\n      if (operator === 'IN') {\r\n        // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n        for (let j = 0, lnj = fieldSearchTerms.length; j < lnj; j++) {\r\n          tmpSearchTerms.push(`${fieldName} eq '${fieldSearchTerms[j]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' or ');\r\n        searchBy = `$(${searchBy})`;\r\n      } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n        // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n        for (let k = 0, lnk = fieldSearchTerms.length; k < lnk; k++) {\r\n          tmpSearchTerms.push(`${fieldName} ne '${fieldSearchTerms[k]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' and ');\r\n        searchBy = `$(${searchBy})`;\r\n      }\r\n    }\r\n\r\n    // push to our temp array and also trim white spaces\r\n    tmpSearchByArray.push(String.trim(searchBy));\r\n\r\n    // add to the filter queue only if it doesn't exist in the queue\r\n    const filter = (tmpSearchByArray.length > 0) ? tmpSearchByArray.join(' and ') : '';\r\n    if (this._odataOptions.filterQueue && this._odataOptions.filterQueue.indexOf(filter) === -1) {\r\n      this._odataOptions.filterQueue.push(filter);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change any OData options that will be used to build the query\r\n   * @param object options\r\n   */\r\n  updateOptions(options: OdataOption) {\r\n    for (const property of Object.keys(options)) {\r\n      if (options.hasOwnProperty(property)) {\r\n        this._odataOptions[property] = options[property]; // replace of the property\r\n      }\r\n\r\n      // we need to keep the defaultSortBy for references whenever the user removes his Sorting\r\n      // then we would revert to the defaultSortBy and the only way is to keep a hard copy here\r\n      if (property === 'orderBy' || property === 'sortBy') {\r\n        let sortBy = options[property];\r\n\r\n        // make sure first char of each orderBy field is capitalize\r\n        if (this._odataOptions.caseType === CaseType.pascalCase) {\r\n          if (Array.isArray(sortBy)) {\r\n            sortBy.forEach((field, index, inputArray) => {\r\n              inputArray[index] = String.titleCase(field);\r\n            });\r\n          } else {\r\n            sortBy = String.titleCase(options[property]);\r\n          }\r\n        }\r\n        this._odataOptions.orderBy = sortBy;\r\n        this._defaultSortBy = sortBy;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
    "import './global-utilities';\r\nimport { parseUtcDate } from './utilities';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  BackendService,\r\n  CaseType,\r\n  Column,\r\n  ColumnFilter,\r\n  ColumnFilters,\r\n  ColumnSort,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  FilterChangedArgs,\r\n  FieldType,\r\n  GridOption,\r\n  OdataOption,\r\n  Pagination,\r\n  PaginationChangedArgs,\r\n  SearchTerm,\r\n  SortChangedArgs,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport { OdataService } from './odata.service';\r\n\r\nlet timer: any;\r\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\r\nconst DEFAULT_ITEMS_PER_PAGE = 25;\r\nconst DEFAULT_PAGE_SIZE = 20;\r\n\r\n@Injectable()\r\nexport class GridOdataService implements BackendService {\r\n  private _currentFilters: CurrentFilter[];\r\n  private _currentPagination: CurrentPagination;\r\n  private _currentSorters: CurrentSorter[];\r\n  private _columnDefinitions: Column[];\r\n  private _grid: any;\r\n  odataService: OdataService;\r\n  options: OdataOption;\r\n  pagination: Pagination | undefined;\r\n  defaultOptions: OdataOption = {\r\n    top: DEFAULT_ITEMS_PER_PAGE,\r\n    orderBy: '',\r\n    caseType: CaseType.pascalCase\r\n  };\r\n\r\n  constructor() {\r\n    this.odataService = new OdataService();\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  buildQuery(): string {\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  init(options: OdataOption, pagination?: Pagination, grid?: any): void {\r\n    this._grid = grid;\r\n    const mergedOptions = { ...this.defaultOptions, ...options };\r\n    if (pagination && pagination.pageSize) {\r\n      mergedOptions.top = pagination.pageSize;\r\n    }\r\n    this.odataService.options = { ...mergedOptions, top: mergedOptions.top || this.defaultOptions.top };\r\n    this.options = this.odataService.options;\r\n    this.pagination = pagination;\r\n\r\n    // save current pagination as Page 1 and page size as \"top\"\r\n    this._currentPagination = {\r\n      pageNumber: 1,\r\n      pageSize: this.odataService.options.top || this.defaultOptions.top\r\n    };\r\n\r\n    if (grid && grid.getColumns && grid.getOptions) {\r\n      this._columnDefinitions = grid.getColumns() || options.columnDefinitions;\r\n      this._columnDefinitions = this._columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\r\n    }\r\n  }\r\n\r\n  updateOptions(serviceOptions?: OdataOption) {\r\n    this.options = { ...this.options, ...serviceOptions };\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string): void {\r\n    this.odataService.removeColumnFilter(fieldName);\r\n  }\r\n\r\n  /** Get the Filters that are currently used by the grid */\r\n  getCurrentFilters(): CurrentFilter[] {\r\n    return this._currentFilters;\r\n  }\r\n\r\n  /** Get the Pagination that is currently used by the grid */\r\n  getCurrentPagination(): CurrentPagination {\r\n    return this._currentPagination;\r\n  }\r\n\r\n  /** Get the Sorters that are currently used by the grid */\r\n  getCurrentSorters(): CurrentSorter[] {\r\n    return this._currentSorters;\r\n  }\r\n\r\n  /*\r\n   * Reset the pagination options\r\n   */\r\n  resetPaginationOptions() {\r\n    this.odataService.updateOptions({\r\n      skip: 0\r\n    });\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: string, terms?: any[]) {\r\n    this.odataService.saveColumnFilter(fieldName, value, terms);\r\n  }\r\n\r\n  /*\r\n   * FILTERING\r\n   */\r\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\r\n    const serviceOptions: GridOption = args.grid.getOptions();\r\n    const backendApi = serviceOptions.backendServiceApi;\r\n\r\n    if (backendApi === undefined) {\r\n      throw new Error('Something went wrong in the GridOdataService, \"backendServiceApi\" is not initialized');\r\n    }\r\n\r\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\r\n    let debounceTypingDelay = 0;\r\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\r\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\r\n    }\r\n\r\n    const promise = new Promise<string>((resolve, reject) => {\r\n      // reset Pagination, then build the OData query which we will use in the WebAPI callback\r\n      // wait a minimum user typing inactivity before processing any query\r\n      clearTimeout(timer);\r\n      timer = setTimeout(() => {\r\n        // loop through all columns to inspect filters & set the query\r\n        this.updateFilters(args.columnFilters);\r\n\r\n        this.resetPaginationOptions();\r\n        resolve(this.odataService.buildQuery());\r\n      }, debounceTypingDelay);\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  /*\r\n   * PAGINATION\r\n   */\r\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\r\n    const pageSize = +(args.pageSize || DEFAULT_PAGE_SIZE);\r\n    this.updatePagination(args.newPage, pageSize);\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  /*\r\n   * SORTING\r\n   */\r\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\r\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\r\n\r\n    // loop through all columns to inspect sorters & set the query\r\n    this.updateSorters(sortColumns);\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect filters & update backend service filteringOptions\r\n   * @param columnFilters\r\n   */\r\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset?: boolean) {\r\n    this._currentFilters = this.castFilterToColumnFilter(columnFilters);\r\n    let searchBy = '';\r\n    const searchByArray: string[] = [];\r\n\r\n    // loop through all columns to inspect filters\r\n    for (const columnId in columnFilters) {\r\n      if (columnFilters.hasOwnProperty(columnId)) {\r\n        const columnFilter = columnFilters[columnId];\r\n\r\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\r\n        let columnDef: Column | undefined;\r\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\r\n          columnDef = this._columnDefinitions.find((column: Column) => {\r\n            return column.id === columnFilter.columnId;\r\n          });\r\n        } else {\r\n          columnDef = columnFilter.columnDef;\r\n        }\r\n        if (!columnDef) {\r\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\r\n        }\r\n\r\n        let fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\r\n        const fieldType = columnDef.type || 'string';\r\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\r\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\r\n        if (typeof fieldSearchValue === 'undefined') {\r\n          fieldSearchValue = '';\r\n        }\r\n\r\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\r\n          throw new Error(`ODdata filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {type: FilterType.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\r\n        }\r\n\r\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\r\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n        const operator = columnFilter.operator || ((matches) ? matches[1] : '');\r\n        let searchValue = (!!matches) ? matches[2] : '';\r\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\r\n        const bypassOdataQuery = columnFilter.bypassBackendQuery || false;\r\n\r\n        // no need to query if search value is empty\r\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\r\n          this.removeColumnFilter(fieldName);\r\n          continue;\r\n        }\r\n\r\n        // escaping the search value\r\n        searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\r\n        searchValue = encodeURIComponent(searchValue); // encode URI of the final search value\r\n\r\n        // extra query arguments\r\n        if (bypassOdataQuery) {\r\n          // push to our temp array and also trim white spaces\r\n          if (fieldName) {\r\n            this.saveColumnFilter(fieldName, fieldSearchValue, searchTerms);\r\n          }\r\n        } else {\r\n          searchBy = '';\r\n\r\n          // titleCase the fieldName so that it matches the WebApi names\r\n          if (this.odataService.options.caseType === CaseType.pascalCase) {\r\n            fieldName = String.titleCase(fieldName || '');\r\n          }\r\n\r\n          // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n          if (searchTerms && searchTerms.length > 1) {\r\n            const tmpSearchTerms = [];\r\n\r\n            if (operator === 'IN') {\r\n              // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n              for (let j = 0, lnj = searchTerms.length; j < lnj; j++) {\r\n                tmpSearchTerms.push(`${fieldName} eq '${searchTerms[j]}'`);\r\n              }\r\n              searchBy = tmpSearchTerms.join(' or ');\r\n              searchBy = `(${searchBy})`;\r\n            } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n              // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n              for (let k = 0, lnk = searchTerms.length; k < lnk; k++) {\r\n                tmpSearchTerms.push(`${fieldName} ne '${searchTerms[k]}'`);\r\n              }\r\n              searchBy = tmpSearchTerms.join(' and ');\r\n              searchBy = `(${searchBy})`;\r\n            }\r\n          } else if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar !== '') {\r\n            // first/last character is a '*' will be a startsWith or endsWith\r\n            searchBy = (operator === '*' || operator === '*z')\r\n              ? `endswith(${fieldName}, '${searchValue}')`\r\n              : `startswith(${fieldName}, '${searchValue}')`;\r\n          } else if (fieldType === FieldType.date) {\r\n            // date field needs to be UTC and within DateTime function\r\n            const dateFormatted = parseUtcDate(searchValue, true);\r\n            if (dateFormatted) {\r\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} DateTime'${dateFormatted}'`;\r\n            }\r\n          } else if (fieldType === FieldType.string) {\r\n            // string field needs to be in single quotes\r\n            if (operator === '') {\r\n              searchBy = `substringof('${searchValue}', ${fieldName})`;\r\n            } else {\r\n              // searchBy = `substringof('${searchValue}', ${fieldNameCased}) ${this.mapOdataOperator(operator)} true`;\r\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} '${searchValue}'`;\r\n            }\r\n          } else {\r\n            // any other field type (or undefined type)\r\n            searchValue = fieldType === FieldType.number ? searchValue : `'${searchValue}'`;\r\n            searchBy = `${fieldName} ${this.mapOdataOperator(operator)} ${searchValue}`;\r\n          }\r\n\r\n          // push to our temp array and also trim white spaces\r\n          if (searchBy !== '') {\r\n            searchByArray.push(String.trim(searchBy));\r\n            this.saveColumnFilter(fieldName || '', fieldSearchValue, searchTerms);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // update the service options with filters for the buildQuery() to work later\r\n    this.odataService.updateOptions({\r\n      filter: (searchByArray.length > 0) ? searchByArray.join(' and ') : '',\r\n      skip: undefined\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the pagination component with it's new page number and size\r\n   * @param newPage\r\n   * @param pageSize\r\n   */\r\n  updatePagination(newPage: number, pageSize: number) {\r\n    this._currentPagination = {\r\n      pageNumber: newPage,\r\n      pageSize\r\n    };\r\n\r\n    this.odataService.updateOptions({\r\n      top: pageSize,\r\n      skip: (newPage - 1) * pageSize\r\n    });\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect sorters & update backend service orderBy\r\n   * @param columnFilters\r\n   */\r\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\r\n    let sortByArray: any[] = [];\r\n    const sorterArray: CurrentSorter[] = [];\r\n\r\n    if (!sortColumns && presetSorters) {\r\n      // make the presets the current sorters, also make sure that all direction are in lowercase for OData\r\n      sortByArray = presetSorters;\r\n      sortByArray.forEach((sorter) => sorter.direction = sorter.direction.toLowerCase() as SortDirectionString);\r\n\r\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\r\n      const tmpSorterArray = sortByArray.map((sorter) => {\r\n        sorterArray.push({\r\n          columnId: sorter.columnId + '',\r\n          direction: sorter.direction\r\n        });\r\n        return {\r\n          columnId: sorter.columnId,\r\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\r\n        };\r\n      });\r\n      this._grid.setSortColumns(tmpSorterArray);\r\n    } else if (sortColumns && !presetSorters) {\r\n      // build the SortBy string, it could be multisort, example: customerNo asc, purchaserName desc\r\n      if (sortColumns && sortColumns.length === 0) {\r\n        sortByArray = new Array(this.defaultOptions.orderBy); // when empty, use the default sort\r\n      } else {\r\n        if (sortColumns) {\r\n          for (const column of sortColumns) {\r\n            if (column.sortCol) {\r\n              let fieldName = (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '';\r\n              let columnFieldName = (column.sortCol.field || column.sortCol.id) + '';\r\n              if (this.odataService.options.caseType === CaseType.pascalCase) {\r\n                fieldName = String.titleCase(fieldName);\r\n                columnFieldName = String.titleCase(columnFieldName);\r\n              }\r\n\r\n              sorterArray.push({\r\n                columnId: columnFieldName,\r\n                direction: column.sortAsc ? 'asc' : 'desc'\r\n              });\r\n            }\r\n          }\r\n          sortByArray = sorterArray;\r\n        }\r\n      }\r\n    }\r\n\r\n    // transform the sortby array into a CSV string for OData\r\n    sortByArray = sortByArray as CurrentSorter[];\r\n    const csvString = sortByArray.map((sorter) => `${sorter.columnId} ${sorter.direction.toLowerCase()}`).join(',');\r\n    this.odataService.updateOptions({\r\n      orderBy: (this.odataService.options.caseType === CaseType.pascalCase) ? String.titleCase(csvString) : csvString\r\n    });\r\n\r\n    // keep current Sorters and update the service options with the new sorting\r\n    this._currentSorters = sortByArray as CurrentSorter[];\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // -------------------\r\n  /**\r\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\r\n   * @param columnFilters\r\n   */\r\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    const filtersArray: ColumnFilter[] = ((typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters) as CurrentFilter[];\r\n\r\n    return filtersArray.map((filter) => {\r\n      const columnDef = filter.columnDef;\r\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\r\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\r\n      if (filter.operator) {\r\n        tmpFilter.operator = filter.operator;\r\n      }\r\n      if (Array.isArray(filter.searchTerms)) {\r\n        tmpFilter.searchTerms = filter.searchTerms;\r\n      }\r\n      return tmpFilter;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Mapper for mathematical operators (ex.: <= is \"le\", > is \"gt\")\r\n   * @param string operator\r\n   * @returns string map\r\n   */\r\n  private mapOdataOperator(operator: string) {\r\n    let map = '';\r\n    switch (operator) {\r\n      case '<':\r\n        map = 'lt';\r\n        break;\r\n      case '<=':\r\n        map = 'le';\r\n        break;\r\n      case '>':\r\n        map = 'gt';\r\n        break;\r\n      case '>=':\r\n        map = 'ge';\r\n        break;\r\n      case '<>':\r\n      case '!=':\r\n        map = 'ne';\r\n        break;\r\n      case '=':\r\n      case '==':\r\n      default:\r\n        map = 'eq';\r\n        break;\r\n    }\r\n\r\n    return map;\r\n  }\r\n}\r\n",
    "import { OnEventArgs, CellArgs, GridOption } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GridEventService {\n  private _eventHandler: any = new Slick.EventHandler();\n\n  /* OnCellChange Event */\n  attachOnCellChange(grid: any, dataView: any) {\n    // subscribe to this Slickgrid event of onCellChange\n    this._eventHandler.subscribe(grid.onCellChange, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellChange property (a callback function), then run it\n      if (typeof column.onCellChange === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onCellChange\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellChanges.... function\n        column.onCellChange(e, returnedArgs);\n      }\n    });\n  }\n  /* OnClick Event */\n  attachOnClick(grid: any, dataView: any) {\n    this._eventHandler.subscribe(grid.onClick, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellClick property (a callback function), then run it\n      if (typeof column.onCellClick === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onClick\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellClick.... function\n        column.onCellClick(e, returnedArgs);\n      }\n    });\n  }\n\n  dispose() {\n    this._eventHandler.unsubscribeAll();\n  }\n}\n",
    "import {\n  Column,\n  CurrentColumn,\n  CurrentFilter,\n  CurrentPagination,\n  CurrentSorter,\n  GridOption,\n  GridState,\n  GridStateChange,\n  GridStateType\n} from './../models/index';\nimport { ControlAndPluginService, FilterService, SortService } from './../services/index';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\n\n// using external non-typed js libraries\ndeclare var $: any;\ndeclare var Slick: any;\n\nexport class GridStateService {\n  private _eventHandler = new Slick.EventHandler();\n  private _columns: Column[] = [];\n  private _currentColumns: CurrentColumn[] = [];\n  private _grid: any;\n  private controlAndPluginService: ControlAndPluginService;\n  private filterService: FilterService;\n  private sortService: SortService;\n  private subscriptions: Subscription[] = [];\n  onGridStateChanged = new Subject<GridStateChange>();\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Export Service\n   * @param grid\n   * @param filterService\n   * @param sortService\n   * @param dataView\n   */\n  init(grid: any, controlAndPluginService: ControlAndPluginService, filterService: FilterService, sortService: SortService): void {\n    this._grid = grid;\n    this.controlAndPluginService = controlAndPluginService;\n    this.filterService = filterService;\n    this.sortService = sortService;\n\n    this.subscribeToAllGridChanges(grid);\n  }\n\n  /** Dispose of all the SlickGrid & Aurelia subscriptions */\n  dispose() {\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n\n    // also unsubscribe all Aurelia Subscriptions\n    this.subscriptions.forEach((subscription: Subscription) => {\n      if (subscription && subscription.unsubscribe) {\n        subscription.unsubscribe();\n      }\n    });\n    this.subscriptions = [];\n  }\n\n  /**\n   * Get the current grid state (filters/sorters/pagination)\n   * @return grid state\n   */\n  getCurrentGridState(): GridState {\n    const gridState: GridState = {\n      columns: this.getCurrentColumns(),\n      filters: this.getCurrentFilters(),\n      sorters: this.getCurrentSorters()\n    };\n\n    const currentPagination = this.getCurrentPagination();\n    if (currentPagination) {\n      gridState.pagination = currentPagination;\n    }\n    return gridState;\n  }\n\n  /**\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\n   * @return current columns\n   */\n  getColumns(): Column[] {\n    return this._columns || this._grid.getColumns();\n  }\n\n  /**\n   * From an array of Grid Column Definitions, get the associated Current Columns\n   * @param gridColumns\n   */\n  getAssociatedCurrentColumns(gridColumns: Column[]): CurrentColumn[] {\n    const currentColumns: CurrentColumn[] = [];\n\n    if (gridColumns && Array.isArray(gridColumns)) {\n      gridColumns.forEach((column: Column, index: number) => {\n        if (column && column.id) {\n          currentColumns.push({\n            columnId: column.id as string,\n            cssClass: column.cssClass || '',\n            headerCssClass: column.headerCssClass || '',\n            width: column.width || 0\n          });\n        }\n      });\n    }\n    this._currentColumns = currentColumns;\n    return currentColumns;\n  }\n\n  /**\n   * From an array of Current Columns, get the associated Grid Column Definitions\n   * @param grid\n   * @param currentColumns\n   */\n  getAssociatedGridColumns(grid: any, currentColumns: CurrentColumn[]): Column[] {\n    const columns: Column[] = [];\n    const gridColumns: Column[] = grid.getColumns();\n\n    if (currentColumns && Array.isArray(currentColumns)) {\n      currentColumns.forEach((currentColumn: CurrentColumn, index: number) => {\n        const gridColumn: Column = gridColumns.find((c: Column) => c.id === currentColumn.columnId);\n        if (gridColumn && gridColumn.id) {\n          columns.push({\n            ...gridColumn,\n            cssClass: currentColumn.cssClass,\n            headerCssClass: currentColumn.headerCssClass,\n            width: currentColumn.width\n          });\n        }\n      });\n    }\n    this._columns = columns;\n    return columns;\n  }\n\n  /**\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\n   * @return current columns\n   */\n  getCurrentColumns(): CurrentColumn[] {\n    let currentColumns: CurrentColumn[] = [];\n    if (this._currentColumns && Array.isArray(this._currentColumns) && this._currentColumns.length > 0) {\n      currentColumns = this._currentColumns;\n    } else {\n      currentColumns = this.getAssociatedCurrentColumns(this._grid.getColumns());\n    }\n\n    return currentColumns;\n  }\n\n  /**\n   * Get the Filters (and their state, columnId, searchTerm(s)) that are currently applied in the grid\n   * @return current filters\n   */\n  getCurrentFilters(): CurrentFilter[] | null {\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentFilters) {\n        return backendService.getCurrentFilters() as CurrentFilter[];\n      }\n    } else if (this.filterService && this.filterService.getCurrentLocalFilters) {\n      return this.filterService.getCurrentLocalFilters();\n    }\n    return null;\n  }\n\n  /**\n   * Get current Pagination (and it's state, pageNumber, pageSize) that are currently applied in the grid\n   * @return current pagination state\n   */\n  getCurrentPagination(): CurrentPagination | null {\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentPagination) {\n        return backendService.getCurrentPagination();\n      }\n    } else {\n      // TODO implement this whenever local pagination gets implemented\n    }\n    return null;\n  }\n\n  /**\n   * Get the current Sorters (and their state, columnId, direction) that are currently applied in the grid\n   * @return current sorters\n   */\n  getCurrentSorters(): CurrentSorter[] | null {\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentSorters) {\n        return backendService.getCurrentSorters() as CurrentSorter[];\n      }\n    } else if (this.sortService && this.sortService.getCurrentLocalSorters) {\n      return this.sortService.getCurrentLocalSorters();\n    }\n    return null;\n  }\n\n  /**\n   * Hook a SlickGrid Extension Event to a Grid State change event\n   * @param extension name\n   * @param grid\n   */\n  hookExtensionEventToGridStateChange(extensionName: string, eventName: string) {\n    const extension = this.controlAndPluginService && this.controlAndPluginService.getExtensionByName(extensionName);\n\n    if (extension && extension.service && extension.service[eventName] && extension.service[eventName].subscribe) {\n      this._eventHandler.subscribe(extension.service[eventName], (e: Event, args: any) => {\n        const columns: Column[] = args && args.columns;\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\n      });\n    }\n  }\n\n  /**\n   * Hook a Grid Event to a Grid State change event\n   * @param event name\n   * @param grid\n   */\n  hookSlickGridEventToGridStateChange(eventName: string, grid: any) {\n    if (grid && grid[eventName] && grid[eventName].subscribe) {\n      this._eventHandler.subscribe(grid[eventName], (e: Event, args: any) => {\n        const columns: Column[] = grid.getColumns();\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\n      });\n    }\n  }\n\n  resetColumns(columnDefinitions?: Column[]) {\n    const columns: Column[] = columnDefinitions || this._columns;\n    const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\n    this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\n  }\n\n  /**\n   * Subscribe to all necessary SlickGrid or Service Events that deals with a Grid change,\n   * when triggered, we will publish a Grid State Event with current Grid State\n   */\n  subscribeToAllGridChanges(grid: any) {\n    // Subscribe to Event Emitter of Filter changed\n    this.subscriptions.push(\n      this.filterService.onFilterChanged.subscribe((currentFilters: CurrentFilter[]) => {\n        this.onGridStateChanged.next({ change: { newValues: currentFilters, type: GridStateType.filter }, gridState: this.getCurrentGridState() });\n      })\n    );\n    // Subscribe to Event Emitter of Filter cleared\n      this.subscriptions.push(\n        this.filterService.onFilterCleared.subscribe(() => {\n          this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.filter }, gridState: this.getCurrentGridState() });\n        })\n      );\n\n    // Subscribe to Event Emitter of Sort changed\n    this.subscriptions.push(\n      this.sortService.onSortChanged.subscribe((currentSorters: CurrentSorter[]) => {\n        this.onGridStateChanged.next({ change: { newValues: currentSorters, type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\n      })\n    );\n\n    // Subscribe to Event Emitter of Sort cleared\n    this.subscriptions.push(\n      this.sortService.onSortCleared.subscribe(() => {\n        this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\n      })\n    );\n\n    // Subscribe to ColumnPicker and/or GridMenu for show/hide Columns visibility changes\n    this.hookExtensionEventToGridStateChange('ColumnPicker', 'onColumnsChanged');\n    this.hookExtensionEventToGridStateChange('GridMenu', 'onColumnsChanged');\n\n    // subscribe to Column Resize & Reordering\n    this.hookSlickGridEventToGridStateChange('onColumnsReordered', grid);\n    this.hookSlickGridEventToGridStateChange('onColumnsResized', grid);\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { CellArgs, Column, GridOption, OnEventArgs } from './../models/index';\nimport { FilterService } from './filter.service';\nimport { GridStateService } from './gridState.service';\nimport { SortService } from './sort.service';\n\n// using external non-typed js libraries\ndeclare var $: any;\ndeclare var Slick: any;\n\n@Injectable()\nexport class GridService {\n  private _grid: any;\n  private _dataView: any;\n\n  constructor(private filterService: FilterService, private gridStateService: GridStateService, private sortService: SortService) { }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  init(grid: any, dataView: any): void {\n    this._grid = grid;\n    this._dataView = dataView;\n  }\n\n  /**\n   * From a SlickGrid Event triggered get the Column Definition and Item Data Context\n   *\n   * For example the SlickGrid onClick will return cell arguments when subscribing to it.\n   * From these cellArgs, we want to get the Column Definition and Item Data\n   * @param cell event args\n   * @return object with columnDef and dataContext\n   */\n  getColumnFromEventArguments(args: CellArgs): OnEventArgs {\n    if (!args || !args.grid || !args.grid.getColumns || !args.grid.getDataItem) {\n      throw new Error('To get the column definition and data, we need to have these arguments passed as objects (row, cell, grid)');\n    }\n\n    return {\n      row: args.row,\n      cell: args.cell,\n      columnDef: args.grid.getColumns()[args.cell],\n      dataContext: args.grid.getDataItem(args.row),\n      dataView: this._dataView,\n      grid: this._grid,\n      gridDefinition: this._gridOptions\n    };\n  }\n\n  getDataItemByRowNumber(rowNumber: number) {\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\n      throw new Error('We could not find SlickGrid Grid object');\n    }\n    return this._grid.getDataItem(rowNumber);\n  }\n\n  /** Chain the item Metadata with our implementation of Metadata at given row index */\n  getItemRowMetadata(previousItemMetadata: any) {\n    return (rowNumber: number) => {\n      const item = this._dataView.getItem(rowNumber);\n      let meta = {\n        cssClasses: ''\n      };\n      if (typeof previousItemMetadata === 'object' && !$.isEmptyObject(previousItemMetadata)) {\n        meta = previousItemMetadata(rowNumber);\n      }\n\n      if (item && item._dirty) {\n        meta.cssClasses = (meta.cssClasses || '') + ' dirty';\n      }\n      if (item && item.rowClass) {\n        meta.cssClasses += ` ${item.rowClass}`;\n        meta.cssClasses += ` row${rowNumber}`;\n      }\n\n      return meta;\n    };\n  }\n\n  /**\n   * Highlight then fade a row for x seconds.\n   * The implementation follows this SO answer: https://stackoverflow.com/a/19985148/1212166\n   * @param rowNumber\n   * @param fadeDelay\n   */\n  highlightRow(rowNumber: number, fadeDelay: number = 1500) {\n    // create a SelectionModel if there's not one yet\n    if (!this._grid.getSelectionModel()) {\n      const rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n      this._grid.setSelectionModel(rowSelectionPlugin);\n    }\n\n    this._grid.setSelectedRows([rowNumber]);\n    this._dataView.getItemMetadata = this.getItemRowMetadata(this._dataView.getItemMetadata);\n\n    const item = this._dataView.getItem(rowNumber);\n    if (item && item.id) {\n      item.rowClass = 'highlight';\n      this._dataView.updateItem(item.id, item);\n      const gridOptions = this._grid.getOptions() as GridOption;\n\n      // highlight the row for a user defined timeout\n      $(`#${gridOptions.gridId}`)\n          .find(`.highlight.row${rowNumber}`)\n          .first();\n\n      // delete the row's CSS that was attached for highlighting\n      setTimeout(() => {\n        if (item && item.id) {\n          delete item.rowClass;\n          const gridIdx = this._dataView.getIdxById(item.id);\n          if (gridIdx !== undefined) {\n            this._dataView.updateItem(item.id, item);\n          }\n        }\n      }, fadeDelay + 10);\n    }\n  }\n\n  /** Get the currently selected rows */\n  getSelectedRows() {\n    return this._grid.getSelectedRows();\n  }\n\n  /** Select the selected row by a row index */\n  setSelectedRow(rowIndex: number) {\n    this._grid.setSelectedRows([rowIndex]);\n  }\n\n  /** Set selected rows with provided array of row indexes */\n  setSelectedRows(rowIndexes: number[]) {\n    this._grid.setSelectedRows(rowIndexes);\n  }\n\n  /** Re-Render the Grid */\n  renderGrid() {\n    if (this._grid && typeof this._grid.invalidate === 'function') {\n      this._grid.invalidate();\n      this._grid.render();\n    }\n  }\n\n  /**\n   * Reset the grid to it's original state (clear any filters, sorting & pagination if exists) .\n   * The column definitions could be passed as argument to reset (this can be used after a Grid State reset)\n   * The reset will clear the Filters & Sort, then will reset the Columns to their original state\n   */\n  resetGrid(columnDefinitions?: Column[]) {\n    if (this.filterService && this.filterService.clearFilters) {\n      this.filterService.clearFilters();\n    }\n    if (this.sortService && this.sortService.clearSorting) {\n      this.sortService.clearSorting();\n    }\n\n    // reset columns to original states & refresh the grid\n    if (this._grid && this._dataView) {\n      const originalColumns = columnDefinitions || this._columnDefinitions;\n      if (Array.isArray(originalColumns) && originalColumns.length > 0) {\n        this._grid.setColumns(originalColumns);\n        this._dataView.refresh();\n        this._grid.autosizeColumns();\n        this.gridStateService.resetColumns(columnDefinitions);\n      }\n    }\n  }\n\n  /**\n   * Add an item (data item) to the datagrid\n   * @param object dataItem: item object holding all properties of that row\n   */\n  addItemToDatagrid(item) {\n    if (!this._grid || !this._gridOptions || !this._dataView) {\n      throw new Error('We could not find SlickGrid Grid, DataView objects');\n    }\n    if (!this._gridOptions || (!this._gridOptions.enableCheckboxSelector && !this._gridOptions.enableRowSelection)) {\n      throw new Error('addItemToDatagrid() requires to have a valid Slickgrid Selection Model. You can overcome this issue by enabling enableCheckboxSelector or enableRowSelection to True');\n    }\n\n    const row = 0;\n    this._dataView.insertItem(row, item);\n    this._grid.scrollRowIntoView(0); // scroll to row 0\n    this.highlightRow(0, 1500);\n\n    // refresh dataview & grid\n    this._dataView.refresh();\n  }\n\n  /**\n   * Delete an existing item from the datagrid (dataView)\n   * @param object item: item object holding all properties of that row\n   */\n  deleteDataGridItem(item: any) {\n    if (!item || !item.hasOwnProperty('id')) {\n      throw new Error(`deleteDataGridItem() requires an item object which includes the \"id\" property`);\n    }\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\n    this.deleteDataGridItemById(itemId);\n  }\n\n  /**\n   * Delete an existing item from the datagrid (dataView) by it's id\n   * @param itemId: item unique id\n   */\n  deleteDataGridItemById(itemId: string | number) {\n    if (itemId === undefined) {\n      throw new Error(`Cannot delete a row without a valid \"id\"`);\n    }\n    if (this._dataView.getRowById(itemId) === undefined) {\n      throw new Error(`Could not find the item in the grid by it's associated \"id\"`);\n    }\n\n    // delete the item from the dataView\n    this._dataView.deleteItem(itemId);\n    this._dataView.refresh();\n  }\n\n  /**\n   * Update an existing item with new properties inside the datagrid\n   * @param object item: item object holding all properties of that row\n   */\n  updateDataGridItem(item: any) {\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\n\n    if (itemId === undefined) {\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\n    }\n\n    this.updateDataGridItemById(itemId, item);\n  }\n\n  /**\n   * Update an existing item in the datagrid by it's id and new properties\n   * @param itemId: item unique id\n   * @param object item: item object holding all properties of that row\n   */\n  updateDataGridItemById(itemId: number | string, item: any) {\n    if (itemId === undefined) {\n      throw new Error(`Cannot update a row without a valid \"id\"`);\n    }\n    const row = this._dataView.getRowById(itemId);\n\n    if (!item || !row) {\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\n    }\n\n    const gridIdx = this._dataView.getIdxById(itemId);\n    if (gridIdx !== undefined) {\n      // Update the item itself inside the dataView\n      this._dataView.updateItem(itemId, item);\n\n      // highlight the row we just updated\n      this.highlightRow(row, 1500);\n\n      // refresh dataview & grid\n      this._dataView.refresh();\n    }\n  }\n}\n",
    "\nimport {\n  Column,\n  GridOption\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare let $: any;\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GroupingAndColspanService {\n  private _eventHandler = new Slick.EventHandler();\n  private _dataView: any;\n  private _grid: any;\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any, dataView: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n\n    if (grid && this._gridOptions) {\n      // When dealing with Pre-Header Grouping colspan, we need to re-create the pre-header in multiple occasions\n      // for all these occasions, we have to trigger a re-create\n      if (this._gridOptions.createPreHeaderPanel) {\n        this._eventHandler.subscribe(grid.onSort, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(grid.onColumnsResized, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(dataView.onRowCountChanged, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n\n        // also not sure why at this point, but it seems that I need to call the 1st create in a delayed execution\n        // probably some kind of timing issues and delaying it until the grid is fully ready does help\n        setTimeout(() => {\n          this.createPreHeaderRowGroupingTitle();\n        }, 50);\n      }\n    }\n  }\n\n  dispose() {\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n  }\n\n  createPreHeaderRowGroupingTitle() {\n    const $preHeaderPanel = $(this._grid.getPreHeaderPanel())\n      .empty()\n      .addClass('slick-header-columns')\n      .css('left', '-1000px')\n      .width(this._grid.getHeadersWidth());\n    $preHeaderPanel.parent().addClass('slick-header');\n    const headerColumnWidthDiff = this._grid.getHeaderColumnWidthDiff();\n    let m;\n    let header;\n    let lastColumnGroup = '';\n    let widthTotal = 0;\n\n    for (let i = 0; i < this._columnDefinitions.length; i++) {\n      m = this._columnDefinitions[i];\n      if (lastColumnGroup === m.columnGroup && i > 0) {\n        widthTotal += m.width;\n        header.width(widthTotal - headerColumnWidthDiff);\n      } else {\n        widthTotal = m.width;\n        header = $(`<div class=\"ui-state-default slick-header-column\" />`)\n          .html(`<span class=\"slick-column-name\">${m.columnGroup || ''}</span>`)\n          .width(m.width - headerColumnWidthDiff)\n          .appendTo($preHeaderPanel);\n      }\n      lastColumnGroup = m.columnGroup;\n    }\n  }\n}\n",
    "import { Column, GridOption } from './../models/index';\nimport { Subject } from 'rxjs/Subject';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n// global constants, height/width are in pixels\nconst DATAGRID_MIN_HEIGHT = 180;\nconst DATAGRID_MIN_WIDTH = 300;\nconst DATAGRID_BOTTOM_PADDING = 20;\nconst DATAGRID_PAGINATION_HEIGHT = 35;\nlet timer: any;\n\nexport interface GridDimension {\n  height: number;\n  width: number;\n  heightWithPagination?: number;\n}\n\nexport class ResizerService {\n  private _grid: any;\n  private _lastDimensions: GridDimension;\n  onGridBeforeResize = new Subject<boolean>();\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  private get _gridUid(): string {\n    return (this._grid && this._grid.getUID) ? this._grid.getUID() : this._gridOptions.gridId;\n  }\n\n  init(grid: any): void {\n    this._grid = grid;\n  }\n\n  /** Attach an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space\n   * Options: we could also provide a % factor to resize on each height/width independently\n   */\n  attachAutoResizeDataGrid(newSizes?: GridDimension) {\n    // if we can't find the grid to resize, return without attaching anything\n    const gridDomElm = $(`#${this._gridOptions && this._gridOptions.gridId ? this._gridOptions.gridId : 'grid1'}`);\n    if (gridDomElm === undefined || gridDomElm.offset() === undefined) {\n      return null;\n    }\n\n    // -- 1st resize the datagrid size at first load (we need this because the .on event is not triggered on first load)\n    this.resizeGrid(0, newSizes);\n\n    // -- 2nd attach a trigger on the Window DOM element, so that it happens also when resizing after first load\n    // -- attach auto-resize to Window object only if it exist\n    $(window).on(`resize.grid.${this._gridUid}`, () => {\n      this.onGridBeforeResize.next(true);\n      // for some yet unknown reason, calling the resize twice removes any stuttering/flickering when changing the height and makes it much smoother\n      this.resizeGrid(0, newSizes);\n      this.resizeGrid(0, newSizes);\n    });\n  }\n\n  /**\n   * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation\n   * object gridOptions\n   */\n  calculateGridNewDimensions(gridOptions: GridOption): any {\n    const gridDomElm = $(`#${gridOptions.gridId}`);\n    const containerElm = (gridOptions.autoResize && gridOptions.autoResize.containerId) ? $(`#${gridOptions.autoResize.containerId}`) : $(`#${gridOptions.gridContainerId}`);\n    const windowElm = $(window);\n    if (windowElm === undefined || containerElm === undefined || gridDomElm === undefined) {\n      return null;\n    }\n\n    // calculate bottom padding\n    // if using pagination, we need to add the pagination height to this bottom padding\n    let bottomPadding = (gridOptions.autoResize && gridOptions.autoResize.bottomPadding) ? gridOptions.autoResize.bottomPadding : DATAGRID_BOTTOM_PADDING;\n    if (bottomPadding && (gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\n      bottomPadding += DATAGRID_PAGINATION_HEIGHT;\n    }\n\n    const gridHeight = windowElm.height() || 0;\n    const coordOffsetTop = gridDomElm.offset();\n    const gridOffsetTop = (coordOffsetTop !== undefined) ? coordOffsetTop.top : 0;\n    const availableHeight = gridHeight - gridOffsetTop - bottomPadding;\n    const availableWidth = containerElm.width() || 0;\n    const minHeight = (gridOptions.autoResize && gridOptions.autoResize.minHeight < 0) ? gridOptions.autoResize.minHeight : DATAGRID_MIN_HEIGHT;\n    const minWidth = (gridOptions.autoResize && gridOptions.autoResize.minWidth < 0) ? gridOptions.autoResize.minWidth : DATAGRID_MIN_WIDTH;\n\n    let newHeight = availableHeight;\n    let newWidth = (gridOptions.autoResize && gridOptions.autoResize.sidePadding) ? availableWidth - gridOptions.autoResize.sidePadding : availableWidth;\n    if (newHeight < minHeight) {\n      newHeight = minHeight;\n    }\n    if (newWidth < minWidth) {\n      newWidth = minWidth;\n    }\n\n    return {\n      height: newHeight,\n      width: newWidth\n    };\n  }\n\n  /**\n   * Dispose function when element is destroyed\n   */\n  dispose() {\n    $(window).off(`resize.grid.${this._gridUid}`);\n  }\n\n  getLastResizeDimensions(): GridDimension {\n    return this._lastDimensions;\n  }\n\n  /** Resize the datagrid to fit the browser height & width */\n  resizeGrid(delay?: number, newSizes?: GridDimension): void {\n    if (!this._grid || !this._gridOptions) {\n      throw new Error(`\n      Angular-Slickgrid resizer requires a valid Grid object and Grid Options defined.\n      You can fix this by setting your gridOption to use \"enableAutoResize\" or create an instance of the ResizerService by calling attachAutoResizeDataGrid()`);\n    }\n\n    // because of the javascript async nature, we might want to delay the resize a little bit\n    delay = delay || 0;\n\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      // calculate the available sizes with minimum height defined as a constant\n      const availableDimensions = this.calculateGridNewDimensions(this._gridOptions);\n      const gridElm = $(`#${this._gridOptions.gridId}`) || {};\n      const gridContainerElm = $(`#${this._gridOptions.gridContainerId}`) || {};\n\n      if ((newSizes || availableDimensions) && gridElm.length > 0) {\n        // get the new sizes, if new sizes are passed (not 0), we will use them else use available space\n        // basically if user passes 1 of the dimension, let say he passes just the height,\n        // we will use the height as a fixed height but the width will be resized by it's available space\n        const newHeight = (newSizes && newSizes.height) ? newSizes.height : availableDimensions.height;\n        const newWidth = (newSizes && newSizes.width) ? newSizes.width : availableDimensions.width;\n\n        // apply these new height/width to the datagrid\n        gridElm.height(newHeight);\n        gridElm.width(newWidth);\n        gridContainerElm.height(newHeight);\n        gridContainerElm.width(newWidth);\n\n        // keep last resized dimensions\n        this._lastDimensions = {\n          height: newHeight,\n          width: newWidth\n        };\n        if ((this._gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\n          this._lastDimensions.heightWithPagination = newHeight + DATAGRID_PAGINATION_HEIGHT;\n        }\n\n        // resize the slickgrid canvas on all browser except some IE versions\n        // exclude all IE below IE11\n        // IE11 wants to be a better standard (W3C) follower (finally) they even changed their appName output to also have 'Netscape'\n        if (new RegExp('MSIE [6-8]').exec(navigator.userAgent) === null && this._grid) {\n          this._grid.resizeCanvas();\n        }\n\n        // also call the grid auto-size columns so that it takes available when going bigger\n        this._grid.autosizeColumns();\n      }\n    }, delay);\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class AvgAggregator implements Aggregator {\n  private _count: number;\n  private _nonNullCount: number;\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._count = 0;\n    this._nonNullCount = 0;\n    this._sum = 0;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    this._count++;\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._nonNullCount++;\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.avg) {\n      groupTotals.avg = {};\n    }\n    if (this._nonNullCount !== 0) {\n      groupTotals.avg[this._field] = this._sum / this._nonNullCount;\n    }\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MinAggregator implements Aggregator {\n  private _min: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._min = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._min == null || val < this._min) {\n        this._min = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.min) {\n      groupTotals.min = {};\n    }\n    groupTotals.min[this._field] = this._min;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MaxAggregator implements Aggregator {\n  private _max: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._max = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._max == null || val > this._max) {\n        this._max = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.max) {\n      groupTotals.max = {};\n    }\n    groupTotals.max[this._field] = this._max;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class SumAggregator implements Aggregator {\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._sum = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.sum) {\n      groupTotals.sum = {};\n    }\n    groupTotals.sum[this._field] = this._sum;\n  }\n}\n",
    "import { AvgAggregator } from './avgAggregator';\nimport { MinAggregator } from './minAggregator';\nimport { MaxAggregator } from './maxAggregator';\nimport { SumAggregator } from './sumAggregator';\n\n/** Provides a list of different Aggregators for the Group Formatter */\nexport const Aggregators = {\n  Avg: AvgAggregator,\n  Min: MinAggregator,\n  Max: MaxAggregator,\n  Sum: SumAggregator\n};\n",
    "import { Editor } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class CheckboxEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: boolean;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"checkbox\" value=\"true\" class=\"editor-checkbox\" />`);\r\n    this.$input.appendTo(this.args.container);\r\n    this.$input.focus();\r\n  }\r\n\r\n  destroy(): void {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus(): void {\r\n    this.$input.focus();\r\n  }\r\n\r\n  hide() {\r\n    this.$input.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$input.show();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = !!item[this.args.column.field];\r\n    if (this.defaultValue) {\r\n      this.$input.prop('checked', true);\r\n    } else {\r\n      this.$input.prop('checked', false);\r\n    }\r\n  }\r\n\r\n  preClick() {\r\n    this.$input.prop('checked', !this.$input.prop('checked'));\r\n  }\r\n\r\n  serializeValue(): boolean {\r\n    return this.$input.prop('checked');\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (this.serializeValue() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport { Column, Editor, FieldType, GridOption } from './../models/index';\nimport { TranslateService } from '@ngx-translate/core';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\n\ndeclare function require(name: string);\nrequire('flatpickr');\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n/*\n * An example of a date picker editor using Flatpickr\n * https://chmln.github.io/flatpickr\n */\nexport class DateEditor implements Editor {\n  $input: any;\n  flatInstance: any;\n  defaultDate: string;\n\n  constructor(private args: any) {\n    this.init();\n  }\n\n  init(): void {\n    if (this.args && this.args.column) {\n      const columnDef = this.args.column;\n      const gridOptions = this.args.grid.getOptions() as GridOption;\n      this.defaultDate = (this.args.item) ? this.args.item[this.args.column.field] : null;\n      const inputFormat = mapFlatpickrDateFormatWithFieldType(columnDef.type || FieldType.dateIso);\n      const outputFormat = mapFlatpickrDateFormatWithFieldType(columnDef.outputType || FieldType.dateUtc);\n      let currentLocale = this.getCurrentLocale(columnDef, gridOptions);\n      if (currentLocale.length > 2) {\n        currentLocale = currentLocale.substring(0, 2);\n      }\n\n      const pickerOptions: any = {\n        defaultDate: this.defaultDate,\n        altInput: true,\n        altFormat: inputFormat,\n        dateFormat: outputFormat,\n        closeOnSelect: false,\n        locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\n        onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\n          this.save();\n        },\n      };\n\n\n      this.$input = $(`<input type=\"text\" data-defaultDate=\"${this.defaultDate}\" class=\"editor-text flatpickr\" />`);\n      this.$input.appendTo(this.args.container);\n      this.flatInstance = (this.$input[0] && typeof this.$input[0].flatpickr === 'function') ? this.$input[0].flatpickr(pickerOptions) : null;\n      this.show();\n    }\n  }\n\n  getCurrentLocale(columnDef: Column, gridOptions: GridOption) {\n    const options = gridOptions || columnDef.params || {};\n    if (options.i18n && options.i18n instanceof TranslateService) {\n      return options.i18n.currentLang;\n    }\n\n    return 'en';\n  }\n\n  loadFlatpickrLocale(locale: string) {\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\n    if (locale !== 'en') {\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\n    }\n    return 'en';\n  }\n\n  destroy() {\n    this.hide();\n    // this.flatInstance.destroy();\n    this.$input.remove();\n  }\n\n  show() {\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\n      this.flatInstance.open();\n    }\n  }\n\n  hide() {\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\n      this.flatInstance.close();\n    }\n  }\n\n  focus() {\n    this.$input.focus();\n  }\n\n  save() {\n    this.args.commitChanges();\n  }\n\n  loadValue(item: any) {\n    this.defaultDate = item[this.args.column.field];\n    this.flatInstance.setDate(item[this.args.column.field]);\n  }\n\n  serializeValue() {\n    const domValue: string = this.$input.val();\n\n    if (!domValue) {\n      return '';\n    }\n\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\n    const value = moment(domValue).format(outputFormat);\n\n    return value;\n  }\n\n  applyValue(item: any, state: any) {\n    if (!state) {\n      return;\n    }\n\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\n\n    item[this.args.column.field] = moment(state, outputFormat).toDate();\n  }\n\n  isValueChanged() {\n    return (!(this.$input.val() === '' && this.defaultDate == null)) && (this.$input.val() !== this.defaultDate);\n  }\n\n  validate() {\n    if (this.args.column.validator) {\n      const validationResults = this.args.column.validator(this.$input.val(), this.args);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n",
    "import { Editor, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nconst defaultDecimalPlaces = 2;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class FloatEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"number\" class='editor-text' />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getDecimalPlaces() {\r\n    // returns the number of fixed decimal places or null\r\n    const columnEditor = this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n    let rtn = (columnEditor && columnEditor.params && columnEditor.params.hasOwnProperty('decimalPlaces')) ? columnEditor.params.decimalPlaces : undefined;\r\n    if (rtn === undefined) {\r\n      rtn = defaultDecimalPlaces;\r\n    }\r\n    return (!rtn && rtn !== 0 ? null : rtn);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field];\r\n\r\n    const decPlaces = this.getDecimalPlaces();\r\n    if (decPlaces !== null\r\n      && (this.defaultValue || this.defaultValue === 0)\r\n      && this.defaultValue.toFixed) {\r\n      this.defaultValue = this.defaultValue.toFixed(decPlaces);\r\n    }\r\n\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    let rtn = parseFloat(this.$input.val()) || 0;\r\n    const decPlaces = this.getDecimalPlaces();\r\n    if (decPlaces !== null\r\n      && (rtn || rtn === 0)\r\n      && rtn.toFixed) {\r\n      rtn = parseFloat(rtn.toFixed(decPlaces));\r\n    }\r\n\r\n    return rtn;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    const elmValue = this.$input.val();\r\n    return (!(elmValue === '' && this.defaultValue === null)) && (elmValue !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const elmValue = this.$input.val();\r\n    if (isNaN(elmValue as number)) {\r\n      return {\r\n        valid: false,\r\n        msg: 'Please enter a valid number'\r\n      };\r\n    }\r\n\r\n    if (this.args.column.validator) {\r\n      const validationResults = this.args.column.validator(elmValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Editor, KeyCode } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n/*\n * An example of a 'detached' editor.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class IntegerEditor implements Editor {\n  $input: any;\n  defaultValue: any;\n\n  constructor(private args: any) {\n    this.init();\n  }\n\n  init(): void {\n    this.$input = $(`<input type=\"number\" class='editor-text' />`)\n      .appendTo(this.args.container)\n      .on('keydown.nav', (e) => {\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\n          e.stopImmediatePropagation();\n        }\n      });\n\n    setTimeout(() => {\n      this.$input.focus().select();\n    }, 50);\n  }\n\n  destroy() {\n    this.$input.remove();\n  }\n\n  focus() {\n    this.$input.focus();\n  }\n\n  loadValue(item: any) {\n    this.defaultValue = parseInt(item[this.args.column.field], 10);\n    this.$input.val(this.defaultValue);\n    this.$input[0].defaultValue = this.defaultValue;\n    this.$input.select();\n  }\n\n  serializeValue() {\n    return parseInt(this.$input.val() as string, 10) || 0;\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.args.column.field] = state;\n  }\n\n  isValueChanged() {\n    const elmValue = this.$input.val();\n    const value = isNaN(elmValue) ? elmValue : parseInt(elmValue, 10);\n    return (!(value === '' && this.defaultValue === null)) && (value !== this.defaultValue);\n  }\n\n  validate() {\n    const elmValue = this.$input.val();\n    if (isNaN(elmValue as number)) {\n      return {\n        valid: false,\n        msg: 'Please enter a valid integer'\n      };\n    }\n\n    if (this.args.column.validator) {\n      const validationResults = this.args.column.validator(elmValue);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n",
    "import { Editor, HtmlElementPosition, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class LongTextEditor implements Editor {\r\n  $input: any;\r\n  $wrapper: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    const $container = $('body');\r\n\r\n    this.$wrapper = $(`<div class=\"slick-large-editor-text\" />`).appendTo($container);\r\n    this.$input = $(`<textarea hidefocus rows=\"5\">`).appendTo(this.$wrapper);\r\n\r\n    $(`<div class=\"editor-footer\">\r\n        <button class=\"btn btn-primary btn-xs\">Save</button>\r\n        <button class=\"btn btn-default btn-xs\">Cancel</button>\r\n      </div>`).appendTo(this.$wrapper);\r\n\r\n    this.$wrapper.find('button:first').on('click', (event: Event) => this.save());\r\n    this.$wrapper.find('button:last').on('click', (event: Event) => this.cancel());\r\n    this.$input.on('keydown', this.handleKeyDown);\r\n\r\n    this.position(this.args.position);\r\n    this.$input.focus().select();\r\n  }\r\n\r\n  handleKeyDown(e: any) {\r\n    if (e.which === KeyCode.ENTER && e.ctrlKey) {\r\n      this.save();\r\n    } else if (e.which === KeyCode.ESCAPE) {\r\n      e.preventDefault();\r\n      this.cancel();\r\n    } else if (e.which === KeyCode.TAB && e.shiftKey) {\r\n      e.preventDefault();\r\n      this.args.grid.navigatePrev();\r\n    } else if (e.which === KeyCode.TAB) {\r\n      e.preventDefault();\r\n      this.args.grid.navigateNext();\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  cancel() {\r\n    this.$input.val(this.defaultValue);\r\n    this.args.cancelChanges();\r\n  }\r\n\r\n  hide() {\r\n    this.$wrapper.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$wrapper.show();\r\n  }\r\n\r\n  position(position: HtmlElementPosition) {\r\n    this.$wrapper\r\n      .css('top', (position.top || 0) - 5)\r\n      .css('left', (position.left || 0) - 5);\r\n  }\r\n\r\n  destroy() {\r\n    this.$wrapper.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.$input.val(this.defaultValue = item[this.args.column.field]);\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue == null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    let valid = true;\r\n    let msg = null;\r\n    if (this.args.column.validator) {\r\n      const validationResults = this.args.column.validator(this.$input.val(), this.args);\r\n      valid = validationResults.valid;\r\n      msg = validationResults.msg;\r\n    }\r\n\r\n    return {\r\n      valid,\r\n      msg\r\n    };\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport {\n  Editor,\n  Column,\n  GridOption,\n  MultipleSelectOption,\n  SelectOption\n} from './../models/index';\nimport { arraysEqual, CollectionService } from '../services/index';\n\n// height in pixel of the multiple-select DOM element\nconst SELECT_ELEMENT_HEIGHT = 26;\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n/**\n * Slickgrid editor class for multiple select lists\n */\nexport class MultipleSelectEditor implements Editor {\n  /** The JQuery DOM element */\n  $editorElm: any;\n\n  /** Editor Multiple-Select options */\n  editorElmOptions: MultipleSelectOption;\n\n  /** The slick grid column being edited */\n  columnDef: Column;\n\n  /** The multiple-select options for a multiple select list */\n  defaultOptions: MultipleSelectOption;\n\n  /** The default item values that are set */\n  defaultValue: any[];\n\n  /** The options label/value object to use in the select list */\n  collection: SelectOption[] = [];\n\n  /** The property name for values in the collection */\n  valueName: string;\n\n  /** The property name for labels in the collection */\n  labelName: string;\n\n  /** Grid options */\n  gridOptions: GridOption;\n\n  /** Do we translate the label? */\n  enableTranslateLabel: boolean;\n\n  /** The i18n aurelia library */\n  private _translate: TranslateService;\n\n  constructor(private args: any) {\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\n    const options = this.gridOptions || this.args.column.params || {};\n    this._translate = options.i18n;\n\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,\n      maxHeight: 200,\n      addTitle: true,\n      okButton: true,\n      selectAllDelimiter: ['', ''],\n      width: 150,\n      offsetLeft: 20,\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\n    };\n\n    if (this._translate) {\n      this.defaultOptions.countSelected = this._translate.instant('X_OF_Y_SELECTED');\n      this.defaultOptions.allSelected = this._translate.instant('ALL_SELECTED');\n      this.defaultOptions.selectAllText = this._translate.instant('SELECT_ALL');\n    }\n\n    this.init();\n  }\n\n  /**\n   * The current selected values from the collection\n   */\n  get currentValues() {\n    return this.collection\n      .filter(c => this.$editorElm.val().indexOf(c[this.valueName].toString()) !== -1)\n      .map(c => c[this.valueName]);\n  }\n\n  init() {\n    if (!this.args) {\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\n    }\n\n    this.columnDef = this.args.column as Column;\n\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the MultipleSelect Editor to work correctly.\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\n    }\n\n    const collectionService = new CollectionService(this._translate);\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\n\n    // user might want to filter certain items of the collection\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    this.collection = newCollection;\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\n\n    this.createDomElement(editorTemplate);\n  }\n\n  applyValue(item: any, state: any): void {\n    item[this.args.column.field] = state;\n  }\n\n  destroy() {\n    this.$editorElm.remove();\n  }\n\n  loadValue(item: any): void {\n    // convert to string because that is how the DOM will return these values\n    this.defaultValue = item[this.columnDef.field].map((i: any) => i.toString());\n\n    this.$editorElm.find('option').each((i: number, $e: any) => {\n      if (this.defaultValue.indexOf($e.value) !== -1) {\n        $e.selected = true;\n      } else {\n        $e.selected = false;\n      }\n    });\n\n    this.refresh();\n  }\n\n  serializeValue(): any {\n    return this.currentValues;\n  }\n\n  focus() {\n    this.$editorElm.focus();\n  }\n\n  isValueChanged(): boolean {\n    return !arraysEqual(this.$editorElm.val(), this.defaultValue);\n  }\n\n  validate() {\n    if (this.args.column.validator) {\n      const validationResults = this.args.column.validator(this.currentValues, this.args);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n\n  private buildTemplateHtmlString(collection: any[]) {\n    let options = '';\n    collection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example: { collection: [ { value: '1', label: 'One' } ])`);\n      }\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\n\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\n    });\n\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\n  }\n\n  /**\n   * Automatically adjust the multiple-select dropup or dropdown by available space\n   */\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\n    // height in pixel of the multiple-select element\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\n\n    const windowHeight = $(window).innerHeight() || 300;\n    const pageScroll = $('body').scrollTop() || 0;\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\n    const $msDrop = $msDropContainer.find('.ms-drop');\n    const msDropHeight = $msDrop.height() || 0;\n    const msDropOffsetTop = $msDrop.offset().top;\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\n\n    if (space < msDropHeight) {\n      if (multipleSelectOptions.container) {\n        // when using a container, we need to offset the drop ourself\n        // and also make sure there's space available on top before doing so\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\n        if (newOffsetTop > 0) {\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\n        }\n      } else {\n        // without container, we simply need to add the \"top\" class to the drop\n        $msDrop.addClass('top');\n      }\n      $msDrop.removeClass('bottom');\n    } else {\n      $msDrop.addClass('bottom');\n      $msDrop.removeClass('top');\n    }\n  }\n\n  /** Build the template HTML string */\n  private createDomElement(editorTemplate: string) {\n    this.$editorElm = $(editorTemplate);\n\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\n      this.$editorElm.appendTo(this.args.container);\n    }\n\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\n      // fallback to bootstrap\n      this.$editorElm.addClass('form-control');\n    } else {\n      const elementOptions = (this.columnDef.internalColumnEditor) ? this.columnDef.internalColumnEditor.elementOptions : {};\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\n    }\n  }\n\n  // refresh the jquery object because the selected checkboxes were already set\n  // prior to this method being called\n  private refresh() {\n    if (typeof this.$editorElm.multipleSelect === 'function') {\n      this.$editorElm.multipleSelect('refresh');\n    }\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport {\n  Editor,\n  Column,\n  GridOption,\n  MultipleSelectOption,\n  SelectOption\n} from './../models/index';\nimport { findOrDefault, CollectionService } from '../services/index';\n\n// height in pixel of the multiple-select DOM element\nconst SELECT_ELEMENT_HEIGHT = 26;\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n/**\n * Slickgrid editor class for single select lists\n */\nexport class SingleSelectEditor implements Editor {\n  /** The JQuery DOM element */\n  $editorElm: any;\n\n  /** Editor Multiple-Select options */\n  editorElmOptions: MultipleSelectOption;\n\n  /** The slick grid column being edited */\n  columnDef: Column;\n\n  /** The multiple-select options for a single select */\n  defaultOptions: any;\n\n  /** The default item value that is set */\n  defaultValue: any;\n\n  /** The options label/value object to use in the select list */\n  collection: SelectOption[] = [];\n\n  /** The property name for values in the collection */\n  valueName: string;\n\n  /** The property name for labels in the collection */\n  labelName: string;\n\n  /** Grid options */\n  gridOptions: GridOption;\n\n  /** Do we translate the label? */\n  enableTranslateLabel: boolean;\n\n  /** The i18n aurelia library */\n  private _translate: TranslateService;\n\n  constructor(private args: any) {\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\n    const options = this.gridOptions || this.args.column.params || {};\n    this._translate = options.i18n;\n\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,\n      maxHeight: 200,\n      width: 150,\n      offsetLeft: 20,\n      single: true,\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\n    };\n\n    this.init();\n  }\n\n  /**\n   * The current selected value from the collection\n   */\n  get currentValue() {\n    return findOrDefault(this.collection, (c: any) =>\n      c[this.valueName].toString() === this.$editorElm.val())[this.valueName];\n  }\n\n  init() {\n    if (!this.args) {\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\n    }\n\n    this.columnDef = this.args.column;\n\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the SingleSelect Editor to work correctly.\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\n    }\n\n    const collectionService = new CollectionService(this._translate);\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\n\n    // user might want to filter certain items of the collection\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionFilterBy) {\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    this.collection = newCollection;\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\n\n    this.createDomElement(editorTemplate);\n  }\n\n  applyValue(item: any, state: any): void {\n    item[this.args.column.field] = state;\n  }\n\n  destroy() {\n    this.$editorElm.remove();\n  }\n\n  loadValue(item: any): void {\n    // convert to string because that is how the DOM will return these values\n    // make sure the prop exists first\n    this.defaultValue = item[this.columnDef.field] && item[this.columnDef.field].toString();\n\n\n    this.$editorElm.find('option').each((i: number, $e: any) => {\n      if (this.defaultValue === $e.value) {\n        $e.selected = true;\n      } else {\n        $e.selected = false;\n      }\n    });\n\n    this.refresh();\n  }\n\n  serializeValue(): any {\n    return this.currentValue;\n  }\n\n  focus() {\n    this.$editorElm.focus();\n  }\n\n  isValueChanged(): boolean {\n    return this.$editorElm.val() !== this.defaultValue;\n  }\n\n  validate() {\n    if (this.args.column.validator) {\n      const validationResults = this.args.column.validator(this.currentValue, this.args);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n\n  private buildTemplateHtmlString(collection: any[]) {\n    let options = '';\n    collection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error('A collection with value/label (or value/labelKey when using ' +\n          'Locale) is required to populate the Select list, for example: { params: { ' +\n          '{ collection: [ { value: \\'1\\', label: \\'One\\' } ] } } }');\n      }\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\n\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\n    });\n\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\n  }\n\n    /**\n   * Automatically adjust the multiple-select dropup or dropdown by available space\n   */\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\n    // height in pixel of the multiple-select element\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\n\n    const windowHeight = $(window).innerHeight() || 300;\n    const pageScroll = $('body').scrollTop() || 0;\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\n    const $msDrop = $msDropContainer.find('.ms-drop');\n    const msDropHeight = $msDrop.height() || 0;\n    const msDropOffsetTop = $msDrop.offset().top;\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\n\n    if (space < msDropHeight) {\n      if (multipleSelectOptions.container) {\n        // when using a container, we need to offset the drop ourself\n        // and also make sure there's space available on top before doing so\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\n        if (newOffsetTop > 0) {\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\n        }\n      } else {\n        // without container, we simply need to add the \"top\" class to the drop\n        $msDrop.addClass('top');\n      }\n      $msDrop.removeClass('bottom');\n    } else {\n      $msDrop.addClass('bottom');\n      $msDrop.removeClass('top');\n    }\n  }\n\n  /** Build the template HTML string */\n  private createDomElement(editorTemplate: string) {\n    this.$editorElm = $(editorTemplate);\n\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\n      this.$editorElm.appendTo(this.args.container);\n    }\n\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\n      // fallback to bootstrap\n      this.$editorElm.addClass('form-control');\n    } else {\n      const elementOptions = (this.columnDef.params) ? this.columnDef.params.elementOptions : {};\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\n    }\n  }\n\n  // refresh the jquery object because the selected checkboxes were already set\n  // prior to this method being called\n  private refresh() {\n    if (typeof this.$editorElm.multipleSelect === 'function') {\n      this.$editorElm.multipleSelect('refresh');\n    }\n  }\n}\n",
    "import { Editor, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class TextEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"text\" class=\"editor-text\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this.$input.val(val);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field] || '';\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue === null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    if (this.args.column.validator) {\r\n      const validationResults = this.args.column.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { EditorType } from './../models/editorType.enum';\r\nimport { CheckboxEditor } from './checkboxEditor';\r\nimport { DateEditor } from './dateEditor';\r\nimport { FloatEditor } from './floatEditor';\r\nimport { IntegerEditor } from './integerEditor';\r\nimport { LongTextEditor } from './longTextEditor';\r\nimport { MultipleSelectEditor } from './multipleSelectEditor';\r\nimport { SingleSelectEditor } from './singleSelectEditor';\r\nimport { TextEditor } from './textEditor';\r\nimport { Editor } from '../models';\r\n\r\nexport class AvailableEditor {\r\n  constructor(public type: EditorType, public editor: any) {}\r\n}\r\n\r\nexport const Editors = {\r\n  checkbox: CheckboxEditor,\r\n  date: DateEditor,\r\n  float: FloatEditor,\r\n  integer: IntegerEditor,\r\n  longText: LongTextEditor,\r\n  multipleSelect: MultipleSelectEditor,\r\n  singleSelect: SingleSelectEditor,\r\n  text: TextEditor\r\n};\r\n\r\nexport const AVAILABLE_EDITORS: AvailableEditor[] = [\r\n  { type: EditorType.checkbox, editor: CheckboxEditor },\r\n  { type: EditorType.date, editor: DateEditor },\r\n  { type: EditorType.float, editor: FloatEditor },\r\n  { type: EditorType.integer, editor: IntegerEditor },\r\n  { type: EditorType.longText, editor: LongTextEditor },\r\n  { type: EditorType.multipleSelect, editor: MultipleSelectEditor },\r\n  { type: EditorType.singleSelect, editor: SingleSelectEditor },\r\n  { type: EditorType.text, editor: TextEditor },\r\n];\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const arrayToCsvFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && Array.isArray(value)) {\n    const values = value.join(', ');\n    return `<span title=\"${values}\">${values}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const boldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  } else {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkboxFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? '&#x2611;' : '';\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkmarkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? `<i class=\"fa fa-check checkmark-icon\" aria-hidden=\"true\"></i>` : '';\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of a params collection\n */\nexport const collectionFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.params || !columnDef.params.collection\n    || !columnDef.params.collection.length) {\n    return '';\n  }\n\n  const { params, params: { collection } } = columnDef;\n  const labelName = (params.customStructure) ? params.customStructure.label : 'label';\n  const valueName = (params.customStructure) ? params.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of an editor collection\n */\nexport const collectionEditorFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.internalColumnEditor || !columnDef.internalColumnEditor.collection\n    || !columnDef.internalColumnEditor.collection.length) {\n    return '';\n  }\n\n  const { internalColumnEditor, internalColumnEditor: { collection } } = columnDef;\n  const labelName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.label : 'label';\n  const valueName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const complexObjectFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!columnDef) {\n    return '';\n  }\n  const complexField = columnDef.field || '';\n  return complexField.split('.').reduce((obj, i) => (obj ? obj[i] : ''), dataContext);\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\n\nexport const dateIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? moment(value).format(FORMAT) : '';\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIso);\n\nexport const dateTimeIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? moment(value).format(FORMAT) : '';\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIsoAmPm);\r\n\r\nexport const dateTimeIsoAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUsAmPm);\r\n\r\nexport const dateTimeUsAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUs);\r\n\r\nexport const dateTimeUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const deleteIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-trash pointer delete-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredBoldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  } else {\n    return `<span style=\"color:red;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  isNaN(+value) ? '' : `$${decimalFormatted(value, 2, 4)}`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const editIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-pencil pointer edit-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const hyperlinkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && typeof value === 'string') {\n    const matchUrl = value.match(/^(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:\\/~\\+#]*[\\w\\-\\@?^=%&amp;\\/~\\+#])?/i);\n    if (matchUrl && Array.isArray(matchUrl)) {\n      return `<a href=\"${matchUrl[0]}\">' + value + '</a>`;\n    }\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\nexport const hyperlinkUriPrefixFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  let uriPrefix = (columnDef && columnDef.params && columnDef.params.uriPrefix) ? columnDef.params.uriPrefix : '';\n  if (!uriPrefix) {\n    throw new Error(`HyperlinkUriPrefix Formatter require a \"uriPrefix\" that can be passed through params. e.g.:: formatter: Formatters.hyperlinkUriPrefix, params: { uriPrefix: '/users/' }`);\n  }\n  if (value && uriPrefix && typeof uriPrefix === 'string' && !uriPrefix.includes('<script>')) {\n    uriPrefix += value;\n    return '<a href=\"' + uriPrefix + '\">' + value + '</a>';\n  }\n  return '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const infoIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-info-circle pointer info-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const lowercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toLowerCase() : '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\nexport const multipleFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const params = columnDef.params || {};\n  if (!params.formatters || !Array.isArray(params.formatters)) {\n    throw new Error(`The multiple formatter requires the \"formatters\" to be provided as a column params.\n    For example: this.columnDefinitions = [{ id: title, field: title, formatter: Formatters.multiple, params: { formatters: [Formatters.lowercase, Formatters.uppercase] }`);\n  }\n  const formatters: Formatter[] = params.formatters;\n\n  // loop through all Formatters, the value of 1st formatter will be used by 2nd formatter and so on.\n  // they are piped and executed in sequences\n  let currentValue = value;\n  for (const formatter of formatters) {\n    currentValue = formatter(row, cell, currentValue, columnDef, dataContext, grid);\n  }\n  return currentValue;\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  if (value === null || value === '') {\r\n    return '';\r\n  }\r\n\r\n  const outputValue = value > 0 ? value / 100 : 0;\r\n  return `<span>${outputValue}%</span>`;\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'red';\n  } else if (value < 70) {\n    color = 'silver';\n  } else {\n    color = 'green';\n  }\n\n  return `<span class=\"percent-complete-bar\" style=\"background:${color}; width:${value}%\"></span>`;\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '-';\n  } else if (value < 50) {\n    return `<span style='color:red;font-weight:bold;'>${value}%</span>`;\n  } else {\n    return `<span style='color:green'>${value}%</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentSymbolFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  return value ? `<span>${value}%</span>` : '';\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const progressBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'danger';\n  } else if (value < 70) {\n    color = 'warning';\n  } else {\n    color = 'success';\n  }\n\n  return `<div class=\"progress\">\n    <div class=\"progress-bar progress-bar-${color}\" role=\"progressbar\" aria-valuenow=\"${value}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"min-width: 2em; width: ${value}%;\">\n    ${value}%\n    </div>\n  </div>`;\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a cell value and translates it with the \"ngx-translate\" service */\nexport const translateFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? translate.instant(value) : '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a boolean value, cast it to upperCase string and finally translates it with the \"ngx-translate\" service */\nexport const translateBooleanFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n  return value ? translate.instant(value.toUpperCase() as string) : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const uppercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toUpperCase() : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const yesNoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string =>\n  value ? 'Yes' : 'No';\n",
    "import { Column } from './../models/index';\r\nimport { arrayToCsvFormatter } from './arrayToCsvFormatter';\r\nimport { boldFormatter } from './boldFormatter';\r\nimport { checkboxFormatter } from './checkboxFormatter';\r\nimport { checkmarkFormatter } from './checkmarkFormatter';\r\nimport { collectionFormatter } from './collectionFormatter';\r\nimport { collectionEditorFormatter } from './collectionEditorFormatter';\r\nimport { complexObjectFormatter } from './complexObjectFormatter';\r\nimport { dateIsoFormatter } from './dateIsoFormatter';\r\nimport { dateTimeIsoFormatter } from './dateTimeIsoFormatter';\r\nimport { dateTimeIsoAmPmFormatter } from './dateTimeIsoAmPmFormatter';\r\nimport { dateTimeUsAmPmFormatter } from './dateTimeUsAmPmFormatter';\r\nimport { dateTimeUsFormatter } from './dateTimeUsFormatter';\r\nimport { dateUsFormatter } from './dateUsFormatter';\r\nimport { deleteIconFormatter } from './deleteIconFormatter';\r\nimport { dollarColoredBoldFormatter } from './dollarColoredBoldFormatter';\r\nimport { dollarColoredFormatter } from './dollarColoredFormatter';\r\nimport { dollarFormatter } from './dollarFormatter';\r\nimport { editIconFormatter } from './editIconFormatter';\r\nimport { hyperlinkFormatter } from './hyperlinkFormatter';\r\nimport { hyperlinkUriPrefixFormatter } from './hyperlinkUriPrefixFormatter';\r\nimport { infoIconFormatter } from './infoIconFormatter';\r\nimport { lowercaseFormatter } from './lowercaseFormatter';\r\nimport { multipleFormatter } from './multipleFormatter';\r\nimport { percentFormatter } from './percentFormatter';\r\nimport { percentCompleteBarFormatter } from './percentCompleteBarFormatter';\r\nimport { percentCompleteFormatter } from './percentCompleteFormatter';\r\nimport { percentSymbolFormatter } from './percentSymbolFormatter';\r\nimport { progressBarFormatter } from './progressBarFormatter';\r\nimport { translateFormatter } from './translateFormatter';\r\nimport { translateBooleanFormatter } from './translateBooleanFormatter';\r\nimport { uppercaseFormatter } from './uppercaseFormatter';\r\nimport { yesNoFormatter } from './yesNoFormatter';\r\n\r\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\r\nexport const Formatters = {\r\n  /** Takes an array of string and converts it to a comma delimited string */\r\n  arrayToCsv: arrayToCsvFormatter,\r\n\r\n  /** show value in bold font weight as well */\r\n  bold: boldFormatter,\r\n\r\n  /** When value is filled (true), it will display a checkbox Unicode icon */\r\n  checkbox: checkboxFormatter,\r\n\r\n  /** When value is filled (true), it will display a Font-Awesome icon (fa-check) */\r\n  checkmark: checkmarkFormatter,\r\n\r\n  /** Takes a complex data object and return the data under that property (for example: \"user.firstName\" will return the first name \"John\") */\r\n  complexObject: complexObjectFormatter,\r\n\r\n  /**\r\n   * Looks up values from the columnDefinition.params.collection property and displays the label in CSV or string format\r\n   * @example\r\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\r\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\r\n   * const dataset = [{ value: 1 },{ value: 2 }];\r\n   */\r\n  collection: collectionFormatter,\r\n\r\n  /**\r\n   * Looks up values from the columnDefinition.editor.collection property and displays the label in CSV or string format\r\n   * @example\r\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\r\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\r\n   * const dataset = [{ value: 1 },{ value: 2 }];\r\n   */\r\n  collectionEditor: collectionEditorFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date format */\r\n  dateIso: dateIsoFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date+Time format */\r\n  dateTimeIso: dateTimeIsoFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date+Time+(am/pm) format */\r\n  dateTimeIsoAmPm: dateTimeIsoAmPmFormatter,\r\n\r\n  /** Takes a Date object and displays it as an US Date format */\r\n  dateUs: dateUsFormatter,\r\n\r\n  /** Takes a Date object and displays it as an US Date+Time format */\r\n  dateTimeUs: dateTimeUsFormatter,\r\n\r\n  /** Takes a Date object and displays it as an US Date+Time+(am/pm) format */\r\n  dateTimeUsAmPm: dateTimeUsAmPmFormatter,\r\n\r\n  /** Displays a Font-Awesome delete icon (fa-trash) */\r\n  deleteIcon: deleteIconFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value */\r\n  dollar: dollarFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value */\r\n  dollarColored: dollarColoredFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value, show it in bold font weight as well */\r\n  dollarColoredBold: dollarColoredBoldFormatter,\r\n\r\n  /** Displays a Font-Awesome edit icon (fa-pencil) */\r\n  editIcon: editIconFormatter,\r\n\r\n  /** Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https). The structure will be \"<a href=\"hyperlink\">hyperlink</a>\" */\r\n  hyperlink: hyperlinkFormatter,\r\n\r\n  /** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\r\n  hyperlinkUriPrefix: hyperlinkUriPrefixFormatter,\r\n\r\n  /** Displays a Font-Awesome edit icon (fa-info-circle) */\r\n  infoIcon: infoIconFormatter,\r\n\r\n  /** Takes a value and displays it all lowercase */\r\n  lowercase: lowercaseFormatter,\r\n\r\n  /**\r\n   * You can pipe multiple formatters (executed in sequence), use params to pass the list of formatters. For example::\r\n   * { field: 'title', formatter: Formatters.multiple, params: { formatters: [ Formatters.lowercase, Formatters.uppercase ] }\r\n   */\r\n  multiple: multipleFormatter,\r\n\r\n  /** Takes a cell value number (between 0.0-1.0) and displays a red (<50) or green (>=50) bar */\r\n  percent: percentFormatter,\r\n\r\n  /** Takes a cell value number (between 0.0-100) and displays a red (<50) or green (>=50) bar */\r\n  percentComplete: percentCompleteFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"percent-complete-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\r\n  percentCompleteBar: percentCompleteBarFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and add the \"%\" after the number */\r\n  percentSymbol: percentSymbolFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"progress-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\r\n  progressBar: progressBarFormatter,\r\n\r\n  /** Takes a cell value and translates it (i18n). Requires an instance of the Translate Service:: `i18n: this.translate */\r\n  translate: translateFormatter,\r\n\r\n  /** Takes a boolean value, cast it to upperCase string and finally translates it (i18n). */\r\n  translateBoolean: translateBooleanFormatter,\r\n\r\n  /** Takes a value and displays it all uppercase */\r\n  uppercase: uppercaseFormatter,\r\n\r\n  /** Takes a boolean value and display a string 'Yes' or 'No' */\r\n  yesNo: yesNoFormatter\r\n};\r\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsPercentageFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + '%' + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const avgTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 4) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const minTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.min && totals.min[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const maxTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.max && totals.max[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 4) + suffix}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 2) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}`;\n  }\n  return '';\n};\n",
    "import { Column } from './../models/index';\nimport { avgTotalsPercentageFormatter } from './avgTotalsPercentageFormatter';\nimport { avgTotalsDollarFormatter } from './avgTotalsDollarFormatter';\nimport { avgTotalsFormatter } from './avgTotalsFormatter';\nimport { minTotalsFormatter } from './minTotalsFormatter';\nimport { maxTotalsFormatter } from './maxTotalsFormatter';\nimport { sumTotalsColoredFormatter } from './sumTotalsColoredFormatter';\nimport { sumTotalsDollarColoredBoldFormatter } from './sumTotalsDollarColoredBoldFormatter';\nimport { sumTotalsDollarColoredFormatter } from './sumTotalsDollarColoredFormatter';\nimport { sumTotalsDollarBoldFormatter } from './sumTotalsDollarBoldFormatter';\nimport { sumTotalsDollarFormatter } from './sumTotalsDollarFormatter';\nimport { sumTotalsFormatter } from './sumTotalsFormatter';\nimport { sumTotalsBoldFormatter } from './sumTotalsBoldFormatter';\n\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const GroupTotalFormatters = {\n  /**\n   * Average all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotals: avgTotalsFormatter,\n\n  /**\n   * Average all the column totals and display '$' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsDollar: avgTotalsDollarFormatter,\n\n  /**\n   * Average all the column totals and display '%' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsPercentage: avgTotalsPercentageFormatter,\n\n  /**\n   * Show max value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  maxTotals: maxTotalsFormatter,\n\n  /**\n   * Show min value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  minTotals: minTotalsFormatter,\n\n  /**\n   * Sums up all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotals: sumTotalsFormatter,\n\n  /**\n   * Sums up all the column totals and display it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsBold: sumTotalsBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsColored: sumTotalsColoredFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollar: sumTotalsDollarFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign and show it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarBold: sumTotalsDollarBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColored: sumTotalsDollarColoredFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value, show it in bold font weight as well\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColoredBold: sumTotalsDollarColoredBoldFormatter,\n};\n",
    "import { Pagination } from './../models/pagination.interface';\nimport { AfterViewInit, Component, EventEmitter, Injectable, Input, OnDestroy, Output } from '@angular/core';\nimport { castToPromise } from './../services/utilities';\nimport { GridOption } from './../models/index';\nimport { FilterService, SortService } from './../services/index';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n  selector: 'slick-pagination',\n  template: `<div class=\"slick-pagination\">\r\n    <div class=\"slick-pagination-nav\">\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-first fa fa-angle-double-left\" aria-label=\"First\" (click)=\"changeToFirstPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-prev fa fa-angle-left\" aria-label=\"Previous\" (click)=\"changeToPreviousPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n\r\n        <div class=\"slick-page-number\">\r\n            <span [translate]=\"'PAGE'\"></span>\r\n            <input type=\"text\" class=\"form-control\" value=\"{{pageNumber}}\" size=\"1\"  (change)=\"changeToCurrentPage($event)\">\r\n            <span [translate]=\"'OF'\"></span><span> {{pageCount}}</span>\r\n        </div>\r\n\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-next text-center fa fa-lg fa-angle-right\" aria-label=\"Next\" (click)=\"changeToNextPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-end fa fa-lg fa-angle-double-right\" aria-label=\"Last\" (click)=\"changeToLastPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n    </div>\r\n    <span class=\"slick-pagination-settings\">\r\n        <select id=\"items-per-page-label\" [value]=\"itemsPerPage\" (change)=\"onChangeItemPerPage($event)\">\r\n        <option value=\"{{pageSize}}\" *ngFor=\"let pageSize of paginationPageSizes;\">{{pageSize}}</option>\r\n        </select>\r\n        <span [translate]=\"'ITEMS_PER_PAGE'\"></span>,\r\n        <span class=\"slick-pagination-count\">\r\n            <span [translate]=\"'FROM_TO_OF_TOTAL_ITEMS'\" [translateParams]=\"{ from: dataFrom, to: dataTo, totalItems: totalItems }\"></span>\r\n        </span>\r\n    </span>\r\n    </div>\r\n`\n})\n@Injectable()\nexport class SlickPaginationComponent implements AfterViewInit, OnDestroy {\n  private _filterSubcription: Subscription;\n  private _gridPaginationOptions: GridOption;\n  private _isFirstRender = true;\n  @Output() onPaginationChanged = new EventEmitter<Pagination>();\n\n  @Input()\n  set gridPaginationOptions(gridPaginationOptions: GridOption) {\n    this._gridPaginationOptions = gridPaginationOptions;\n    if (this._isFirstRender || !gridPaginationOptions || !gridPaginationOptions.pagination || (gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\n      this.refreshPagination();\n      this._isFirstRender = false;\n    }\n  }\n  get gridPaginationOptions(): GridOption {\n    return this._gridPaginationOptions;\n  }\n  @Input() grid: any;\n  dataFrom = 1;\n  dataTo = 1;\n  itemsPerPage: number;\n  pageCount = 0;\n  pageNumber = 1;\n  totalItems = 0;\n  paginationCallback: Function;\n  paginationPageSizes = [25, 75, 100];\n  fromToParams: any = { from: this.dataFrom, to: this.dataTo, totalItems: this.totalItems };\n\n  /** Constructor */\n  constructor(private filterService: FilterService, private sortService: SortService) { }\n\n  ngOnDestroy() {\n    this.dispose();\n  }\n\n  ngAfterViewInit() {\n    this._gridPaginationOptions = this._gridPaginationOptions;\n    if (!this._gridPaginationOptions || !this._gridPaginationOptions.pagination || (this._gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\n      this.refreshPagination();\n    }\n\n    // Subscribe to Event Emitter of Filter & Sort changed, go back to page 1 when that happen\n    this._filterSubcription = this.filterService.onFilterChanged.subscribe((data) => {\n      this.refreshPagination(true);\n    });\n    // Subscribe to Filter clear and go back to page 1 when that happen\n    this._filterSubcription = this.filterService.onFilterCleared.subscribe((data) => {\n      this.refreshPagination(true);\n    });\n  }\n\n  ceil(number: number) {\n    return Math.ceil(number);\n  }\n\n  changeToFirstPage(event: any) {\n    this.pageNumber = 1;\n    this.onPageChanged(event, this.pageNumber);\n  }\n\n  changeToLastPage(event: any) {\n    this.pageNumber = this.pageCount;\n    this.onPageChanged(event, this.pageNumber);\n  }\n\n  changeToNextPage(event: any) {\n    if (this.pageNumber < this.pageCount) {\n      this.pageNumber++;\n      this.onPageChanged(event, this.pageNumber);\n    }\n  }\n\n  changeToPreviousPage(event: any) {\n    if (this.pageNumber > 0) {\n      this.pageNumber--;\n      this.onPageChanged(event, this.pageNumber);\n    }\n  }\n\n  changeToCurrentPage(event: any) {\n    this.pageNumber = event.currentTarget.value;\n    if (this.pageNumber < 1) {\n          this.pageNumber = 1;\n    } else if (this.pageNumber > this.pageCount) {\n          this.pageNumber = this.pageCount;\n    }\n\n    this.onPageChanged(event, this.pageNumber);\n  }\n\n  dispose() {\n    this.onPaginationChanged.unsubscribe();\n    if (this._filterSubcription) {\n      this._filterSubcription.unsubscribe();\n    }\n  }\n\n  onChangeItemPerPage(event: any) {\n    const itemsPerPage = +event.target.value;\n    this.pageCount = Math.ceil(this.totalItems / itemsPerPage);\n    this.pageNumber = 1;\n    this.itemsPerPage = itemsPerPage;\n    this.onPageChanged(event, this.pageNumber);\n  }\n\n  refreshPagination(isPageNumberReset: boolean = false) {\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\n    if (!backendApi || !backendApi.service || !backendApi.process) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    if (this._gridPaginationOptions && this._gridPaginationOptions.pagination) {\n      const pagination = this._gridPaginationOptions.pagination;\n      // set the number of items per page if not already set\n      if (!this.itemsPerPage) {\n        this.itemsPerPage = +((backendApi && backendApi.options && backendApi.options.paginationOptions && backendApi.options.paginationOptions.first) ? backendApi.options.paginationOptions.first : this._gridPaginationOptions.pagination.pageSize);\n      }\n\n      // if totalItems changed, we should always go back to the first page and recalculation the From-To indexes\n      if (isPageNumberReset || this.totalItems !== pagination.totalItems) {\n        if (this._isFirstRender && pagination.pageNumber && pagination.pageNumber > 1) {\n          this.pageNumber = pagination.pageNumber || 1;\n        } else {\n          this.pageNumber = 1;\n        }\n\n        // when page number is set to 1 then also reset the \"offset\" of backend service\n        if (this.pageNumber === 1) {\n          backendApi.service.resetPaginationOptions();\n        }\n      }\n\n      // calculate and refresh the multiple properties of the pagination UI\n      this.paginationPageSizes = this._gridPaginationOptions.pagination.pageSizes;\n      this.totalItems = this._gridPaginationOptions.pagination.totalItems;\n      this.recalculateFromToIndexes();\n    }\n    this.pageCount = Math.ceil(this.totalItems / this.itemsPerPage);\n  }\n\n  async onPageChanged(event: Event | undefined, pageNumber: number) {\n    this.recalculateFromToIndexes();\n\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\n    if (!backendApi || !backendApi.service || !backendApi.process) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    if (this.dataTo > this.totalItems) {\n      this.dataTo = this.totalItems;\n    } else if (this.totalItems < this.itemsPerPage) {\n      this.dataTo = this.totalItems;\n    }\n    if (backendApi) {\n      const itemsPerPage = +this.itemsPerPage;\n\n      if (backendApi.preProcess) {\n        backendApi.preProcess();\n      }\n\n      const query = backendApi.service.processOnPaginationChanged(event, { newPage: pageNumber, pageSize: itemsPerPage });\n\n      // the process could be an Observable (like HttpClient) or a Promise\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n      const observableOrPromise = backendApi.process(query);\n      const processResult = await castToPromise(observableOrPromise);\n\n      // from the result, call our internal post process to update the Dataset and Pagination info\n      if (processResult && backendApi.internalPostProcess) {\n        backendApi.internalPostProcess(processResult);\n      }\n\n      // send the response process to the postProcess callback\n      if (backendApi.postProcess) {\n        backendApi.postProcess(processResult);\n      }\n    } else {\n      throw new Error('Pagination with a backend service requires \"BackendServiceApi\" to be defined in your grid options');\n    }\n\n    // emit the changes to the parent component\n    this.onPaginationChanged.emit({\n      pageNumber: this.pageNumber,\n      pageSizes: this.paginationPageSizes,\n      pageSize: this.itemsPerPage,\n      totalItems: this.totalItems\n    });\n  }\n\n  recalculateFromToIndexes() {\n    this.dataFrom = (this.pageNumber * this.itemsPerPage) - this.itemsPerPage + 1;\n    this.dataTo = (this.totalItems < this.itemsPerPage) ? this.totalItems : (this.pageNumber * this.itemsPerPage);\n  }\n}\n",
    "import { DelimiterType, FileType, FilterType, GridOption } from './models/index';\r\n\r\n/**\r\n * Options that can be passed to the Bootstrap-Datetimepicker directly\r\n */\r\nexport const GlobalGridOptions: GridOption = {\r\n  alwaysShowVerticalScroll: true,\r\n  autoEdit: false,\r\n  asyncEditorLoading: false,\r\n  autoFitColumnsOnFirstLoad: true,\r\n  autoResize: {\r\n    bottomPadding: 20,\r\n    minHeight: 180,\r\n    minWidth: 300,\r\n    sidePadding: 0\r\n  },\r\n  cellHighlightCssClass: 'slick-cell-modified',\r\n  checkboxSelector: {\r\n    cssClass: 'slick-cell-checkboxsel'\r\n  },\r\n  columnPicker: {\r\n    hideForceFitButton: false,\r\n    hideSyncResizeButton: true\r\n  },\r\n  datasetIdPropertyName: 'id',\r\n  defaultFilterPlaceholder: '&#128269;',\r\n  defaultFilterType: FilterType.input,\r\n  editable: false,\r\n  enableAutoResize: true,\r\n  enableCellNavigation: false,\r\n  enableColumnPicker: true,\r\n  enableColumnReorder: true,\r\n  enableExport: true,\r\n  enableGridMenu: true,\r\n  enableHeaderMenu: true,\r\n  enableMouseHoverHighlightRow: true,\r\n  enableSorting: true,\r\n  enableTextSelectionOnCells: true,\r\n  explicitInitialization: true,\r\n  exportOptions: {\r\n    delimiter: DelimiterType.comma,\r\n    exportWithFormatter: false,\r\n    filename: 'export',\r\n    format: FileType.csv,\r\n    groupingAggregatorRowText: '',\r\n    sanitizeDataExport: false,\r\n    useUtf8WithBom: true\r\n  },\r\n  forceFitColumns: false,\r\n  gridMenu: {\r\n    hideClearAllFiltersCommand: false,\r\n    hideClearAllSortingCommand: false,\r\n    hideExportCsvCommand: false,\r\n    hideExportTextDelimitedCommand: true,\r\n    hideForceFitButton: false,\r\n    hideRefreshDatasetCommand: false,\r\n    hideSyncResizeButton: true,\r\n    hideToggleFilterCommand: false,\r\n    iconCssClass: 'fa fa-bars',\r\n    iconClearAllFiltersCommand: 'fa fa-filter text-danger',\r\n    iconClearAllSortingCommand: 'fa fa-unsorted text-danger',\r\n    iconExportCsvCommand: 'fa fa-download',\r\n    iconExportTextDelimitedCommand: 'fa fa-download',\r\n    iconRefreshDatasetCommand: 'fa fa-refresh',\r\n    iconToggleFilterCommand: 'fa fa-random',\r\n    menuWidth: 16,\r\n    resizeOnShowHeaderRow: true\r\n  },\r\n  headerMenu: {\r\n    autoAlign: true,\r\n    autoAlignOffset: 12,\r\n    minWidth: 140,\r\n    iconSortAscCommand: 'fa fa-sort-asc',\r\n    iconSortDescCommand: 'fa fa-sort-desc',\r\n    iconColumnHideCommand: 'fa fa-times',\r\n    showColumnHideCommand: true,\r\n    showSortCommands: true\r\n  },\r\n  headerRowHeight: 35,\r\n  multiColumnSort: true,\r\n  numberedMultiColumnSort: true,\r\n  tristateMultiColumnSort: false,\r\n  sortColNumberInSeparateSpan: true,\r\n  suppressActiveCellChangeOnEdit: true,\r\n  pagination: {\r\n    pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\r\n    pageSize: 25,\r\n    totalItems: 0\r\n  },\r\n  rowHeight: 35,\r\n  showHeaderRow: false,\r\n  topPanelHeight: 35\r\n};\r\n",
    "// import 3rd party vendor libs\nimport 'jquery-ui-dist/jquery-ui';\nimport 'slickgrid/lib/jquery.event.drag-2.3.0';\nimport 'slickgrid/slick.core';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.grid';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.groupitemmetadataprovider';\nimport 'slickgrid/controls/slick.columnpicker';\nimport 'slickgrid/controls/slick.gridmenu';\nimport 'slickgrid/controls/slick.pager';\nimport 'slickgrid/plugins/slick.autotooltips';\nimport 'slickgrid/plugins/slick.cellexternalcopymanager';\nimport 'slickgrid/plugins/slick.cellrangedecorator';\nimport 'slickgrid/plugins/slick.cellrangeselector';\nimport 'slickgrid/plugins/slick.cellselectionmodel';\nimport 'slickgrid/plugins/slick.checkboxselectcolumn';\nimport 'slickgrid/plugins/slick.headerbuttons';\nimport 'slickgrid/plugins/slick.headermenu';\nimport 'slickgrid/plugins/slick.rowmovemanager';\nimport 'slickgrid/plugins/slick.rowselectionmodel';\nimport { AfterViewInit, Component, EventEmitter, Inject, Injectable, Input, Output, OnDestroy, OnInit, ViewChildren, ElementRef, ViewChild, ReflectiveInjector } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, titleCase } from './../services/utilities';\nimport { GlobalGridOptions } from './../global-grid-options';\nimport {\n  AngularGridInstance,\n  BackendServiceOption,\n  Column,\n  Editor,\n  EditorType,\n  GridOption,\n  GridStateChange,\n  GridStateType,\n  Pagination\n} from './../models/index';\nimport { Editors, AVAILABLE_EDITORS } from './../editors/index';\nimport { ControlAndPluginService } from './../services/controlAndPlugin.service';\nimport { ExportService } from './../services/export.service';\nimport { FilterService } from './../services/filter.service';\nimport { GraphqlService } from './../services/graphql.service';\nimport { GridEventService } from './../services/gridEvent.service';\nimport { GridService } from './../services/grid.service';\nimport { GridStateService } from './../services/gridState.service';\nimport { GroupingAndColspanService } from './../services/groupingAndColspan.service';\nimport { ResizerService } from './../services/resizer.service';\nimport { SortService } from './../services/sort.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\nconst slickgridEventPrefix = 'sg';\n\n@Injectable()\n@Component({\n  selector: 'angular-slickgrid',\n  template: `<div id=\"slickGridContainer-{{gridId}}\" #customElm class=\"gridPane\" [style.width]=\"gridWidthString\">\r\n    <div attr.id='{{gridId}}' class=\"slickgrid-container\" style=\"width: 100%\" [style.height]=\"gridHeightString\">\r\n    </div>\r\n\r\n    <slick-pagination id=\"slickPagingContainer-{{gridId}}\"\r\n        *ngIf=\"showPagination\"\r\n        (onPaginationChanged)=\"paginationChanged($event)\"\r\n        [gridPaginationOptions]=\"gridPaginationOptions\">\r\n    </slick-pagination>\r\n</div>\r\n`,\n  providers: [\n    ControlAndPluginService,\n    ExportService,\n    FilterService,\n    GraphqlService,\n    GridEventService,\n    GridService,\n    GridStateService,\n    GroupingAndColspanService,\n    ResizerService,\n    SortService\n  ]\n})\nexport class AngularSlickgridComponent implements AfterViewInit, OnDestroy, OnInit {\n  @ViewChild('customElm', {read: ElementRef}) customElm: ElementRef;\n  private _dataset: any[];\n  private _columnDefinitions: Column[];\n  private _dataView: any;\n  private _eventHandler: any = new Slick.EventHandler();\n  grid: any;\n  gridPaginationOptions: GridOption;\n  gridHeightString: string;\n  gridWidthString: string;\n  groupingDefinition: any = {};\n  groupItemMetadataProvider: any;\n  showPagination = false;\n  isGridInitialized = false;\n  subscriptions: Subscription[] = [];\n\n  @Output() onAngularGridCreated = new EventEmitter<AngularGridInstance>();\n  @Output() onDataviewCreated = new EventEmitter<any>();\n  @Output() onGridCreated = new EventEmitter<any>();\n  @Output() onGridInitialized = new EventEmitter<any>();\n  @Output() onBeforeGridCreate = new EventEmitter<boolean>();\n  @Output() onBeforeGridDestroy = new EventEmitter<any>();\n  @Output() onAfterGridDestroyed = new EventEmitter<boolean>();\n  @Output() onGridStateChanged = new EventEmitter<GridStateChange>();\n  @Input() gridId: string;\n  @Input() gridOptions: GridOption;\n  @Input() gridHeight = 0;\n  @Input() gridWidth = 0;\n\n  @Input()\n  set columnDefinitions(columnDefinitions: Column[]) {\n    this._columnDefinitions = columnDefinitions;\n    if (this.isGridInitialized) {\n      this.updateColumnDefinitionsList(columnDefinitions);\n    }\n  }\n  get columnDefinitions(): Column[] {\n    return this._columnDefinitions;\n  }\n  @Input()\n  set dataset(dataset: any[]) {\n    this._dataset = dataset;\n    this.refreshGridData(dataset);\n  }\n  get dataset(): any[] {\n    return this._dataView.getItems();\n  }\n\n\n  constructor(\n    private controlAndPluginService: ControlAndPluginService,\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private gridService: GridService,\n    private gridEventService: GridEventService,\n    private gridStateService: GridStateService,\n    private groupingAndColspanService: GroupingAndColspanService,\n    private resizer: ResizerService,\n    private sortService: SortService,\n    private translate: TranslateService,\n    @Inject('config') private forRootConfig: GridOption\n  ) {}\n\n  ngOnInit(): void {\n    this.onBeforeGridCreate.emit(true);\n    if (!this.gridOptions.enableAutoResize && !this.gridOptions.autoResize) {\n      this.gridHeightString = `${this.gridHeight}px`;\n      this.gridWidthString = `${this.gridWidth}px`;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.onBeforeGridDestroy.emit(this.grid);\n    this.destroy();\n    this.onAfterGridDestroyed.emit(true);\n  }\n\n  destroy() {\n    this._dataView = [];\n    this.gridOptions = {};\n    this._eventHandler.unsubscribeAll();\n    this.controlAndPluginService.dispose();\n    this.filterService.dispose();\n    this.gridEventService.dispose();\n    this.gridStateService.dispose();\n    this.groupingAndColspanService.dispose();\n    this.resizer.dispose();\n    this.sortService.dispose();\n    this.grid.destroy();\n\n    // also unsubscribe all RxJS subscriptions\n    this.subscriptions.forEach((subscription: Subscription) => {\n      if (subscription && subscription.unsubscribe) {\n        subscription.unsubscribe();\n      }\n    });\n    this.subscriptions = [];\n  }\n\n  ngAfterViewInit() {\n    this.initialization();\n    this.isGridInitialized = true;\n  }\n\n  initialization() {\n    // make sure the dataset is initialized (if not it will throw an error that it cannot getLength of null)\n    this._dataset = this._dataset || [];\n    this.gridOptions = this.mergeGridOptions(this.gridOptions);\n    this.createBackendApiInternalPostProcessCallback(this.gridOptions);\n\n    if (this.gridOptions.enableGrouping) {\n      this.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\n      this._dataView = new Slick.Data.DataView({\n        groupItemMetadataProvider: this.groupItemMetadataProvider,\n        inlineFilters: true\n      });\n    } else {\n      this._dataView = new Slick.Data.DataView();\n    }\n\n    // for convenience, we provide the property \"editor\" as an Angular-Slickgrid editor complex object\n    // however \"editor\" is used internally by SlickGrid for it's Editor Factory\n    // so in our lib we will swap \"editor\" and copy it into \"internalColumnEditor\"\n    // then take back \"editor.type\" and make it the new \"editor\" so that SlickGrid Editor Factory still works\n    this._columnDefinitions = this._columnDefinitions.map((c: Column | any) => ({ ...c, editor: this.getEditor((c.editor && c.editor.type), c), internalColumnEditor: { ...c.editor } })),\n\n    this.controlAndPluginService.createPluginBeforeGridCreation(this._columnDefinitions, this.gridOptions);\n    this.grid = new Slick.Grid(`#${this.gridId}`, this._dataView, this._columnDefinitions, this.gridOptions);\n\n    this.controlAndPluginService.attachDifferentControlOrPlugins(this.grid, this._dataView, this.groupItemMetadataProvider);\n    this.attachDifferentHooks(this.grid, this.gridOptions, this._dataView);\n\n    // emit the Grid & DataView object to make them available in parent component\n    this.onGridCreated.emit(this.grid);\n    this.onDataviewCreated.emit(this._dataView);\n\n    this.grid.init();\n    this._dataView.beginUpdate();\n    this._dataView.setItems(this._dataset, this.gridOptions.datasetIdPropertyName);\n    this._dataView.endUpdate();\n\n    // attach resize ONLY after the dataView is ready\n    this.attachResizeHook(this.grid, this.gridOptions);\n\n    // attach grouping and header grouping colspan service\n    if (this.gridOptions.createPreHeaderPanel) {\n      this.groupingAndColspanService.init(this.grid, this._dataView);\n    }\n\n    // attach grid  service\n    this.gridService.init(this.grid, this._dataView);\n\n    // when user enables translation, we need to translate Headers on first pass & subsequently in the attachDifferentHooks\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders();\n    }\n\n    // if Export is enabled, initialize the service with the necessary grid and other objects\n    if (this.gridOptions.enableExport) {\n      this.exportService.init(this.grid, this._dataView);\n    }\n\n    // once all hooks are in placed and the grid is initialized, we can emit an event\n    this.onGridInitialized.emit(this.grid);\n\n    // attach the Backend Service API callback functions only after the grid is initialized\n    // because the preProcess() and onInit() might get triggered\n    if (this.gridOptions && this.gridOptions.backendServiceApi) {\n      this.attachBackendCallbackFunctions(this.gridOptions);\n    }\n\n    this.gridStateService.init(this.grid, this.controlAndPluginService, this.filterService, this.sortService);\n\n    this.onAngularGridCreated.emit({\n      // Slick Grid & DataView objects\n      dataView: this._dataView,\n      slickGrid: this.grid,\n\n      // return all available Services (non-singleton)\n      backendService: this.gridOptions && this.gridOptions.backendServiceApi && this.gridOptions.backendServiceApi.service,\n      exportService: this.exportService,\n      filterService: this.filterService,\n      gridEventService: this.gridEventService,\n      gridStateService: this.gridStateService,\n      gridService: this.gridService,\n      groupingService: this.groupingAndColspanService,\n      pluginService: this.controlAndPluginService,\n      resizerService: this.resizer,\n      sortService: this.sortService,\n    });\n  }\n\n  /**\n   * From the list of available editors, find the editor associated to it's type\n   * and if it's a custom one, return the \"customEditor\" from the column\n   * @param type\n   * @param column\n   */\n  getEditor(type: EditorType, column: Column) {\n    if (type === EditorType.custom && column && column.editor && column.editor.hasOwnProperty('customEditor')) {\n      return column.editor['customEditor'];\n    }\n\n    const editorFound = AVAILABLE_EDITORS.find(editor => editor.type === type);\n    if (editorFound && editorFound.editor) {\n      return editorFound.editor;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Define what our internal Post Process callback, it will execute internally after we get back result from the Process backend call\n   * For now, this is GraphQL Service only feautre and it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n   */\n  createBackendApiInternalPostProcessCallback(gridOptions: GridOption) {\n    if (gridOptions && gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      // internalPostProcess only works with a GraphQL Service, so make sure it is that type\n      if (backendApi && backendApi.service && backendApi.service instanceof GraphqlService) {\n        backendApi.internalPostProcess = (processResult: any) => {\n          const datasetName = (backendApi && backendApi.service && typeof backendApi.service.getDatasetName === 'function') ? backendApi.service.getDatasetName() : '';\n          if (processResult && processResult.data && processResult.data[datasetName]) {\n            this._dataset = processResult.data[datasetName].nodes;\n            this.refreshGridData(this._dataset, processResult.data[datasetName].totalCount);\n          } else {\n            this._dataset = [];\n          }\n        };\n      }\n    }\n  }\n\n  attachDifferentHooks(grid: any, gridOptions: GridOption, dataView: any) {\n    // on locale change, we have to manually translate the Headers, GridMenu\n    this.subscriptions.push(\n      this.translate.onLangChange.subscribe((event) => {\n        if (gridOptions.enableTranslate) {\n          this.controlAndPluginService.translateColumnHeaders();\n          this.controlAndPluginService.translateColumnPicker();\n          this.controlAndPluginService.translateGridMenu();\n          this.controlAndPluginService.translateHeaderMenu();\n        }\n      })\n    );\n\n    // if user entered some Columns \"presets\", we need to reflect them all in the grid\n    if (gridOptions.presets && Array.isArray(gridOptions.presets.columns) && gridOptions.presets.columns.length > 0) {\n      const gridColumns: Column[] = this.gridStateService.getAssociatedGridColumns(grid, gridOptions.presets.columns);\n      if (gridColumns && Array.isArray(gridColumns)) {\n        grid.setColumns(gridColumns);\n      }\n    }\n\n    // attach external sorting (backend) when available or default onSort (dataView)\n    if (gridOptions.enableSorting) {\n      gridOptions.backendServiceApi ? this.sortService.attachBackendOnSort(grid, dataView) : this.sortService.attachLocalOnSort(grid, dataView);\n    }\n\n    // attach external filter (backend) when available or default onFilter (dataView)\n    if (gridOptions.enableFiltering) {\n      this.filterService.init(grid);\n\n      // if user entered some \"presets\", we need to reflect them all in the DOM\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n        this.filterService.populateColumnFilterSearchTerms();\n      }\n      gridOptions.backendServiceApi ? this.filterService.attachBackendOnFilter(grid) : this.filterService.attachLocalOnFilter(grid, this._dataView);\n    }\n\n    // if user set an onInit Backend, we'll run it right away (and if so, we also need to run preProcess, internalPostProcess & postProcess)\n    if (gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      if (backendApi && backendApi.service && backendApi.service.init) {\n        backendApi.service.init(backendApi.options, gridOptions.pagination, this.grid);\n      }\n    }\n\n    // expose all Slick Grid Events through dispatch\n    for (const prop in grid) {\n      if (grid.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(grid[prop], (e: any, args: any) => {\n          this.customElm.nativeElement.dispatchEvent(new CustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, {\n            bubbles: true,\n            detail: {\n              eventData: e,\n              args\n            }\n          }));\n        });\n      }\n    }\n\n    // expose all Slick DataView Events through dispatch\n    for (const prop in dataView) {\n      if (dataView.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(dataView[prop], (e: any, args: any) => {\n          this.customElm.nativeElement.dispatchEvent(new CustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, {\n            bubbles: true,\n            detail: {\n              eventData: e,\n              args\n            }\n          }));\n        });\n      }\n    }\n\n    // expose GridState Service changes event through dispatch\n    this.subscriptions.push(\n      this.gridStateService.onGridStateChanged.subscribe((gridStateChange: GridStateChange) => {\n        this.onGridStateChanged.emit(gridStateChange);\n      })\n    );\n\n\n    // on cell click, mainly used with the columnDef.action callback\n    this.gridEventService.attachOnCellChange(grid, dataView);\n    this.gridEventService.attachOnClick(grid, dataView);\n\n    this._eventHandler.subscribe(dataView.onRowCountChanged, (e: any, args: any) => {\n      grid.updateRowCount();\n      grid.render();\n    });\n    this._eventHandler.subscribe(dataView.onRowsChanged, (e: any, args: any) => {\n      grid.invalidateRows(args.rows);\n      grid.render();\n    });\n\n    // does the user have a colspan callback?\n    if (gridOptions.colspanCallback) {\n      this._dataView.getItemMetadata = (rowNumber: number) => {\n        const item = this._dataView.getItem(rowNumber);\n        return gridOptions.colspanCallback(item);\n      };\n    }\n  }\n\n  attachBackendCallbackFunctions(gridOptions: GridOption) {\n    const backendApi = gridOptions.backendServiceApi;\n    const serviceOptions: BackendServiceOption = (backendApi && backendApi.service && backendApi.service.options) ? backendApi.service.options : {};\n    const isExecuteCommandOnInit = (!serviceOptions) ? false : ((serviceOptions && serviceOptions.hasOwnProperty('executeProcessCommandOnInit')) ? serviceOptions['executeProcessCommandOnInit'] : true);\n\n    // update backend filters (if need be) before the query runs\n    if (backendApi) {\n      const backendService = backendApi.service;\n\n      // if user entered some any \"presets\", we need to reflect them all in the grid\n      if (gridOptions && gridOptions.presets) {\n         // Filters \"presets\"\n         if (backendService && backendService.updateFilters && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n          backendService.updateFilters(gridOptions.presets.filters, true);\n        }\n        // Sorters \"presets\"\n        if (backendService && backendService.updateSorters && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n          backendService.updateSorters(undefined, gridOptions.presets.sorters);\n        }\n        // Pagination \"presets\"\n        if (backendService && backendService.updatePagination && gridOptions.presets.pagination) {\n          backendService.updatePagination(gridOptions.presets.pagination.pageNumber, gridOptions.presets.pagination.pageSize);\n        }\n      } else {\n        const columnFilters = this.filterService.getColumnFilters();\n        if (columnFilters && backendService && backendService.updateFilters) {\n          backendService.updateFilters(columnFilters, false);\n        }\n      }\n    }\n\n    if (backendApi && backendApi.service && (backendApi.onInit || isExecuteCommandOnInit)) {\n      const query = (typeof backendApi.service.buildQuery === 'function') ? backendApi.service.buildQuery() : '';\n      const observableOrPromise = (isExecuteCommandOnInit) ? backendApi.process(query) : backendApi.onInit(query);\n\n      // wrap this inside a setTimeout to avoid timing issue since the gridOptions needs to be ready before running this onInit\n      setTimeout(async () => {\n        if (backendApi.preProcess) {\n          backendApi.preProcess();\n        }\n\n        // the process could be an Observable (like HttpClient) or a Promise\n        // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n        const processResult = await castToPromise(observableOrPromise);\n\n        // define what our internal Post Process callback, only available for GraphQL Service for now\n        // it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n        if (processResult && backendApi && backendApi.service instanceof GraphqlService && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  attachResizeHook(grid: any, options: GridOption) {\n    // expand/autofit columns on first page load\n    if (grid && options.autoFitColumnsOnFirstLoad) {\n      grid.autosizeColumns();\n    }\n\n    // auto-resize grid on browser resize\n    this.resizer.init(grid);\n    if (options.enableAutoResize) {\n      this.resizer.attachAutoResizeDataGrid({ height: this.gridHeight, width: this.gridWidth });\n      if (grid && options.autoFitColumnsOnFirstLoad) {\n        grid.autosizeColumns();\n      }\n    }\n  }\n\n  mergeGridOptions(gridOptions): GridOption {\n    gridOptions.gridId = this.gridId;\n    gridOptions.gridContainerId = `slickGridContainer-${this.gridId}`;\n    if (gridOptions.enableFiltering || this.forRootConfig.enableFiltering) {\n      gridOptions.showHeaderRow = true;\n    }\n    // use jquery extend to deep merge and avoid immutable properties changed in GlobalGridOptions after route change\n    return $.extend(true, {}, GlobalGridOptions, this.forRootConfig, gridOptions);\n  }\n\n  paginationChanged(pagination: Pagination) {\n    this.gridStateService.onGridStateChanged.next({\n      change: { newValues: pagination, type: GridStateType.pagination },\n      gridState: this.gridStateService.getCurrentGridState()\n    });\n  }\n\n  /**\n   * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well\n   * @param dataset\n   */\n  refreshGridData(dataset: any[], totalCount?: number) {\n    if (dataset && this.grid && this._dataView && typeof this._dataView.setItems === 'function') {\n      this._dataView.setItems(dataset, this.gridOptions.datasetIdPropertyName);\n      this._dataView.reSort();\n\n      // this.grid.setData(dataset);\n      this.grid.invalidate();\n      this.grid.render();\n\n      if (this.gridOptions.enablePagination || this.gridOptions.backendServiceApi) {\n        // do we want to show pagination?\n        // if we have a backendServiceApi and the enablePagination is undefined, we'll assume that we do want to see it, else get that defined value\n        this.showPagination = ((this.gridOptions.backendServiceApi && this.gridOptions.enablePagination === undefined) ? true : this.gridOptions.enablePagination) || false;\n\n        // before merging the grid options, make sure that it has the totalItems count\n        // once we have that, we can merge and pass all these options to the pagination component\n        if (!this.gridOptions.pagination) {\n          this.gridOptions.pagination = (this.gridOptions.pagination) ? this.gridOptions.pagination : undefined;\n        }\n        if (this.gridOptions.pagination && totalCount) {\n          this.gridOptions.pagination.totalItems = totalCount;\n        }\n        if (this.gridOptions.presets && this.gridOptions.presets.pagination && this.gridOptions.pagination) {\n          this.gridOptions.pagination.pageSize = this.gridOptions.presets.pagination.pageSize;\n          this.gridOptions.pagination.pageNumber = this.gridOptions.presets.pagination.pageNumber;\n        }\n        this.gridPaginationOptions = this.mergeGridOptions(this.gridOptions);\n      }\n      if (this.grid &&  this.gridOptions.enableAutoResize) {\n        // resize the grid inside a slight timeout, in case other DOM element changed prior to the resize (like a filter/pagination changed)\n        this.resizer.resizeGrid(10, { height: this.gridHeight, width: this.gridWidth });\n      }\n    }\n  }\n\n  /**\n   * Dynamically change or update the column definitions list.\n   * We will re-render the grid so that the new header and data shows up correctly.\n   * If using i18n, we also need to trigger a re-translate of the column headers\n   */\n  updateColumnDefinitionsList(newColumnDefinitions) {\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders(false, newColumnDefinitions);\n    } else {\n      this.controlAndPluginService.renderColumnHeaders(newColumnDefinitions);\n    }\n    this.grid.autosizeColumns();\n  }\n\n  /** Toggle the filter row displayed on first row\n   * @param isShowing\n   */\n  showHeaderRow(isShowing: boolean) {\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  /** Toggle the filter row displayed on first row */\n  toggleHeaderRow() {\n    const isShowing = !this.grid.getOptions().showHeaderRow;\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n}\n",
    "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AngularSlickgridComponent } from './../components/angular-slickgrid.component';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport { GraphqlService } from './../services/graphql.service';\r\nimport { GridOdataService } from './../services/grid-odata.service';\r\nimport { GridOption } from './../models/gridOption.interface';\r\nimport { SlickPaginationComponent } from './../components/slick-pagination.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TranslateModule\r\n  ],\r\n  declarations: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  exports: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  entryComponents: [AngularSlickgridComponent]\r\n})\r\nexport class AngularSlickgridModule {\r\n  static forRoot(config: GridOption = {}) {\r\n    return {\r\n      ngModule: AngularSlickgridModule,\r\n      providers: [\r\n        { provide: 'config', useValue: config },\r\n        CollectionService,\r\n        GraphqlService,\r\n        GridOdataService\r\n      ]\r\n    };\r\n  }\r\n}\r\n"
  ],
  "names": [
    "__awaiter",
    "thisArg",
    "_arguments",
    "P",
    "generator",
    "Promise",
    "resolve",
    "reject",
    "fulfilled",
    "value",
    "step",
    "next",
    "e",
    "rejected",
    "result",
    "done",
    "then",
    "apply",
    "__generator",
    "body",
    "f",
    "y",
    "t",
    "g",
    "_",
    "label",
    "sent",
    "trys",
    "ops",
    "verb",
    "throw",
    "return",
    "Symbol",
    "iterator",
    "this",
    "n",
    "v",
    "op",
    "TypeError",
    "call",
    "pop",
    "length",
    "push",
    "__values",
    "o",
    "m",
    "i",
    "__read",
    "r",
    "ar",
    "error",
    "__spread",
    "arguments",
    "concat",
    "colon",
    "comma",
    "equalSign",
    "pipe",
    "semicolon",
    "space",
    "tab",
    "doubleColon",
    "doublePipe",
    "doubleSemicolon",
    "csv",
    "doc",
    "docx",
    "pdf",
    "txt",
    "xls",
    "xlsx",
    "columns",
    "filter",
    "pagination",
    "sorter",
    "contains",
    "lessThan",
    "lessThanOrEqual",
    "greaterThan",
    "greaterThanOrEqual",
    "notEqual",
    "equal",
    "endsWith",
    "startsWith",
    "in",
    "notIn",
    "asc",
    "ASC",
    "desc",
    "DESC",
    "moment",
    "moment_",
    "addWhiteSpaces",
    "nbSpaces",
    "htmlEntityDecode",
    "input",
    "replace",
    "match",
    "dec",
    "String",
    "fromCharCode",
    "arraysEqual",
    "a",
    "b",
    "orderMatters",
    "sort",
    "castToPromise",
    "fromServiceName",
    "promise",
    "Observable",
    "first",
    "toPromise",
    "take",
    "Error",
    "findOrDefault",
    "array",
    "logic",
    "defaultVal",
    "find",
    "decimalFormatted",
    "minDecimal",
    "maxDecimal",
    "isNaN",
    "minDec",
    "undefined",
    "maxDec",
    "amount",
    "Math",
    "round",
    "pow",
    "indexOf",
    "mapMomentDateFormatWithFieldType",
    "fieldType",
    "map",
    "FieldType",
    "dateTime",
    "dateTimeIso",
    "dateTimeIsoAmPm",
    "dateTimeIsoAM_PM",
    "dateUs",
    "dateUsShort",
    "dateTimeUs",
    "dateTimeUsAmPm",
    "dateTimeUsAM_PM",
    "dateTimeUsShort",
    "dateTimeUsShortAmPm",
    "dateUtc",
    "date",
    "dateIso",
    "mapFlatpickrDateFormatWithFieldType",
    "mapOperatorType",
    "operator",
    "OperatorType",
    "mapOperatorByFieldType",
    "string",
    "unknown",
    "float",
    "number",
    "dateTimeUsShortAM_PM",
    "mapOperatorByFilterType",
    "filterType",
    "FilterType",
    "multipleSelect",
    "singleSelect",
    "parseUtcDate",
    "inputDateString",
    "useUtc",
    "test",
    "dateString",
    "decodeURIComponent",
    "dateMoment",
    "Date",
    "isValid",
    "year",
    "toString",
    "utc",
    "format",
    "sanitizeHtmlToText",
    "htmlString",
    "temp",
    "document",
    "createElement",
    "innerHTML",
    "textContent",
    "innerText",
    "titleCase",
    "charAt",
    "toUpperCase",
    "slice",
    "toCamelCase",
    "str",
    "offset",
    "toLowerCase",
    "compareDates",
    "value1",
    "value2",
    "sortDirection",
    "strict",
    "diff",
    "date1",
    "date2",
    "parseInt",
    "FORMAT",
    "dateUsShortSorter",
    "dateSorter",
    "ISO_8601",
    "dateIsoSorter",
    "dateUsSorter",
    "numericSorter",
    "x",
    "parseFloat",
    "stringSorter",
    "position",
    "Sorters",
    "numeric",
    "sortByFieldType",
    "sortResult",
    "CollectionService",
    "translate",
    "prototype",
    "filterCollection",
    "collection",
    "filterBy",
    "filteredCollection",
    "property_1",
    "property",
    "value_1",
    "item",
    "sortCollection",
    "sortBy",
    "enableTranslateLabel",
    "_this",
    "sortedCollection",
    "property_2",
    "sortDirection_1",
    "hasOwnProperty",
    "sortDesc",
    "fieldType_1",
    "dataRow1",
    "dataRow2",
    "instant",
    "parseBoolean",
    "type",
    "Injectable",
    "TranslateService",
    "booleanFilterCondition",
    "options",
    "searchTerm",
    "Array",
    "isArray",
    "searchTerms",
    "cellValue",
    "testFilterCondition",
    "includes",
    "dateFilterCondition",
    "searchDateFormat",
    "filterSearchType",
    "dateCell",
    "dateSearch",
    "dateIsoFilterCondition",
    "dateUsFilterCondition",
    "dateUsShortFilterCondition",
    "dateUtcFilterCondition",
    "collectionSearchFilterCondition",
    "numberFilterCondition",
    "stringFilterCondition",
    "cellValueLastChar",
    "executeMappedCondition",
    "boolean",
    "FilterConditions",
    "booleanFilter",
    "collectionSearchFilter",
    "dateFilter",
    "dateIsoFilter",
    "dateUtcFilter",
    "dateUsFilter",
    "dateUsShortFilter",
    "numberFilter",
    "stringFilter",
    "testFilter",
    "require",
    "CompoundDateFilter",
    "Object",
    "defineProperty",
    "get",
    "grid",
    "getOptions",
    "init",
    "args",
    "callback",
    "columnDef",
    "$filterElm",
    "createDomElement",
    "$filterInputElm",
    "keyup",
    "onTriggerEvent",
    "$selectOperatorElm",
    "change",
    "clear",
    "flatInstance",
    "val",
    "destroy",
    "off",
    "remove",
    "setValues",
    "values",
    "setDate",
    "buildDatePickerInput",
    "inputFormat",
    "outputFormat",
    "outputType",
    "currentLocale",
    "getCurrentLocale",
    "gridOptions",
    "substring",
    "pickerOptions",
    "defaultDate",
    "altInput",
    "altFormat",
    "dateFormat",
    "wrap",
    "closeOnSelect",
    "locale",
    "loadFlatpickrLocale",
    "onChange",
    "selectedDates",
    "dateStr",
    "instance",
    "_currentValue",
    "enableTime",
    "CustomEvent",
    "placeholder",
    "defaultFilterPlaceholder",
    "$",
    "flatpickr",
    "buildSelectOperatorHtmlString",
    "optionValues",
    "getOptionValues",
    "optionValueString",
    "forEach",
    "option",
    "description",
    "$headerElm",
    "getHeaderRowColumn",
    "id",
    "empty",
    "$filterContainerElm",
    "$containerInputGroup",
    "$operatorInputGroupAddon",
    "append",
    "attr",
    "data",
    "addClass",
    "appendTo",
    "params",
    "i18n",
    "currentLang",
    "localeDefault",
    "default",
    "clearFilterTriggered",
    "selectedOperator",
    "text",
    "removeClass",
    "hide",
    "close",
    "show",
    "open",
    "CompoundInputFilter",
    "buildInputHtmlString",
    "InputFilter",
    "filterTemplate",
    "buildTemplateHtmlString",
    "target",
    "trigger",
    "MultipleSelectFilter",
    "collectionService",
    "isFilled",
    "defaultOptions",
    "container",
    "maxHeight",
    "okButton",
    "addTitle",
    "countSelected",
    "allSelected",
    "selectAllText",
    "selectAllDelimiter",
    "onClose",
    "selectedItems",
    "siblings",
    "labelName",
    "customStructure",
    "valueName",
    "newCollection",
    "collectionFilterBy",
    "collectionSortBy",
    "optionCollection",
    "labelKey",
    "selected",
    "findValueInSearchTerms",
    "textLabel",
    "assign",
    "filterOptions",
    "SelectFilter",
    "searchTermInput",
    "SingleSelectFilter",
    "single",
    "selectedItem",
    "Filters",
    "select",
    "compoundDate",
    "compoundInput",
    "FilterService",
    "_eventHandler",
    "Slick",
    "EventHandler",
    "_filters",
    "_columnFilters",
    "_isFirstQuery",
    "onFilterChanged",
    "Subject",
    "onFilterCleared",
    "_grid",
    "getColumns",
    "attachBackendOnFilter",
    "_slickSubscriber",
    "Event",
    "subscribe",
    "attachBackendOnFilterSubscribe",
    "bind",
    "onHeaderRowCellRendered",
    "addFilterTemplateToHeaderRow",
    "event",
    "backendApi",
    "_gridOptions",
    "backendServiceApi",
    "process",
    "service",
    "preProcess",
    "processOnFilterChanged",
    "query",
    "_a",
    "emitFilterChanged",
    "console",
    "log",
    "processResult",
    "internalPostProcess",
    "postProcess",
    "attachLocalOnFilter",
    "dataView",
    "_dataView",
    "setFilterArgs",
    "columnFilters",
    "setFilter",
    "customLocalFilter",
    "columnId",
    "refresh",
    "clearFilters",
    "invalidate",
    "render",
    "tslib_1.__values",
    "keys",
    "_b",
    "columnFilter",
    "columnIndex",
    "getColumnIndex",
    "queryField",
    "queryFieldFilter",
    "field",
    "fieldSearchValue",
    "matches",
    "lastValueChar",
    "join",
    "custom",
    "k",
    "ln",
    "useFormatterOuputToFilter",
    "rowIndex",
    "getIdxById",
    "formatter",
    "dispose",
    "disposeColumnFilters",
    "unsubscribeAll",
    "unsubscribe",
    "index",
    "getColumnFilters",
    "getCurrentLocalFilters",
    "currentFilters",
    "colId",
    "callbackSearchEvent",
    "colFilter",
    "triggerEvent",
    "serviceOptions",
    "_onFilterChangedOptions",
    "column",
    "filterable",
    "updateColumnFilters",
    "filter_1",
    "filterArguments",
    "defaultFilterType",
    "customFilter",
    "filterExistIndex",
    "findIndex",
    "filt",
    "name",
    "sender",
    "backendService",
    "getCurrentFilters",
    "populateColumnFilterSearchTerms",
    "presets",
    "filters",
    "filters_1",
    "_columnDefinitions",
    "columnPreset",
    "presetFilter",
    "slickEvent",
    "isPropagationStopped",
    "extend",
    "EventData",
    "notify",
    "ExportService",
    "_lineCarriageReturn",
    "_hasGroupedItems",
    "onGridBeforeExportToFile",
    "onGridAfterExportToFile",
    "exportToFile",
    "_exportOptions",
    "exportOptions",
    "dataOutput",
    "getDataOutput",
    "setTimeout",
    "downloadOptions",
    "filename",
    "csvContent",
    "useUtf8WithBom",
    "startDownloadFile",
    "delimiter",
    "groupByColumnHeader",
    "groupingColumnHeaderTitle",
    "_exportQuoteWrapper",
    "FileType",
    "outputDataString",
    "grouping",
    "getGrouping",
    "_columnHeaders",
    "getColumnHeaders",
    "header",
    "title",
    "getAllGridRowData",
    "lineCarriageReturn",
    "lineCount",
    "getLength",
    "rowNumber",
    "itemObj",
    "getItem",
    "readRegularRowData",
    "__groupTotals",
    "readGroupedTitleRow",
    "readGroupedTotalRow",
    "columnHeaders",
    "fieldName",
    "headerKey",
    "skippedField",
    "excludeFromExport",
    "width",
    "key",
    "row",
    "idx",
    "rowOutputString",
    "exportQuoteWrapper",
    "col",
    "fieldId",
    "isEvaluatingFormatter",
    "exportWithFormatter",
    "exportCustomFormatter",
    "itemData",
    "sanitizeDataExport",
    "exportCsvForceToKeepAsString",
    "groupName",
    "level",
    "groupingAggregatorRowText",
    "output",
    "groupTotalsFormatter",
    "navigator",
    "appName",
    "outputData",
    "mimeType",
    "TextEncoder",
    "encode",
    "blob",
    "Blob",
    "msSaveOrOpenBlob",
    "link",
    "csvUrl",
    "URL",
    "createObjectURL",
    "href",
    "setAttribute",
    "style",
    "visibility",
    "appendChild",
    "click",
    "removeChild",
    "SortService",
    "_currentLocalSorters",
    "_isBackendGrid",
    "onSortChanged",
    "onSortCleared",
    "attachBackendOnSort",
    "onSort",
    "onBackendSortChanged",
    "processOnSortChanged",
    "emitSortChanged",
    "attachLocalOnSort",
    "sortColumns",
    "sortCols",
    "sortAsc",
    "sortCol",
    "sortColumn",
    "direction",
    "SortDirection",
    "onLocalSortChanged",
    "onRowCountChanged",
    "current",
    "loadLocalPresets",
    "clearSorting",
    "setSortColumns",
    "getCurrentLocalSorters",
    "getPreviousColumnSorts",
    "getSortColumns",
    "reduce",
    "cols",
    "sorters",
    "presetSorting",
    "gridColumn",
    "l",
    "columnSortObj",
    "SortDirectionNumber",
    "sortField",
    "neutral",
    "currentSorters",
    "getCurrentSorters",
    "ControlAndPluginService",
    "exportService",
    "filterService",
    "sortService",
    "areVisibleColumnDifferent",
    "extensionList",
    "getAllExtensions",
    "getExtensionByName",
    "p",
    "autoResizeColumns",
    "autosizeColumns",
    "attachDifferentControlOrPlugins",
    "groupItemMetadataProvider",
    "visibleColumns",
    "enableColumnPicker",
    "columnPickerControl",
    "createColumnPicker",
    "enableGridMenu",
    "gridMenuControl",
    "createGridMenu",
    "enableAutoTooltip",
    "autoTooltipPlugin",
    "AutoTooltips",
    "autoTooltipOptions",
    "registerPlugin",
    "enableGrouping",
    "groupItemMetaProviderPlugin",
    "enableCheckboxSelector",
    "checkboxSelectorPlugin",
    "rowSelectionPlugin",
    "getSelectionModel",
    "RowSelectionModel",
    "rowSelectionOptions",
    "setSelectionModel",
    "preselectedRows",
    "selectRows",
    "enableRowSelection",
    "enableHeaderButton",
    "headerButtonsPlugin",
    "Plugins",
    "HeaderButtons",
    "headerButton",
    "onCommand",
    "enableHeaderMenu",
    "headerMenuPlugin",
    "createHeaderMenu",
    "enableExcelCopyBuffer",
    "createUndoRedoBuffer",
    "hookUndoShortcutKey",
    "createCellExternalCopyManagerPlugin",
    "registerPlugins",
    "plugin",
    "createPluginBeforeGridCreation",
    "columnDefinitions",
    "CheckboxSelectColumn",
    "checkboxSelector",
    "selectionColumn",
    "getColumnDefinition",
    "excludeFromQuery",
    "excludeFromHeaderMenu",
    "unshift",
    "newRowIds",
    "pluginOptions",
    "clipboardCommandHandler",
    "editCommand",
    "undoRedoBuffer",
    "queueAndExecuteCommand",
    "dataItemColumnValueExtractor",
    "editable",
    "editor",
    "formattedOutput",
    "readOnlyMode",
    "includeHeaderWhenCopying",
    "newRowCreator",
    "count",
    "getData",
    "addItem",
    "CellSelectionModel",
    "cellExternalCopyManagerPlugin",
    "CellExternalCopyManager",
    "forceFitTitle",
    "enableTranslate",
    "syncResizeTitle",
    "columnPicker",
    "Controls",
    "ColumnPicker",
    "onColumnsChanged",
    "gridMenu",
    "getDefaultGridMenuOptions",
    "addGridMenuCustomCommands",
    "GridMenu",
    "onBeforeMenuShow",
    "onMenuClose",
    "gridUid",
    "getUID",
    "headerMenu",
    "getDefaultHeaderMenuOptions",
    "addHeaderMenuCustomCommands",
    "HeaderMenu",
    "commandQueue",
    "commandCtr",
    "execute",
    "undo",
    "command",
    "GlobalEditorLock",
    "cancelCurrentEdit",
    "redo",
    "hideColumn",
    "removeColumnByIndex",
    "setColumns",
    "keydown",
    "which",
    "ctrlKey",
    "metaKey",
    "shiftKey",
    "enableFiltering",
    "hideClearAllFiltersCommand",
    "customItems",
    "iconCssClass",
    "iconClearAllFiltersCommand",
    "disabled",
    "positionOrder",
    "hideToggleFilterCommand",
    "iconToggleFilterCommand",
    "hideRefreshDatasetCommand",
    "iconRefreshDatasetCommand",
    "enableSorting",
    "hideClearAllSortingCommand",
    "iconClearAllSortingCommand",
    "enableExport",
    "hideExportCsvCommand",
    "iconExportCsvCommand",
    "hideExportTextDelimitedCommand",
    "iconExportTextDelimitedCommand",
    "DelimiterType",
    "setHeaderRowVisibility",
    "showHeaderRow",
    "setTopPanelVisibility",
    "showTopPanel",
    "refreshBackendDataset",
    "alert",
    "customTitle",
    "itemA",
    "itemB",
    "headerMenuOptions",
    "menu",
    "items",
    "columnHeaderMenuItems",
    "sortable",
    "showSortCommands",
    "iconSortAscCommand",
    "iconSortDescCommand",
    "showColumnHideCommand",
    "iconColumnHideCommand",
    "multiColumnSort",
    "newSortColumns",
    "buildQuery",
    "el",
    "translateColumnPicker",
    "tempHideForceFit",
    "hideForceFitButton",
    "tempSyncResize",
    "hideSyncResizeButton",
    "translateGridMenu",
    "resetGridMenuTranslations",
    "translateHeaderMenu",
    "resetHeaderMenuTranslations",
    "translateColumnHeaders",
    "newColumnDefinitions",
    "use",
    "columnDefinitions_1",
    "columnDefinitions_1_1",
    "renderColumnHeaders",
    "columnTitle",
    "menuWidth",
    "autoAlignOffset",
    "minWidth",
    "timer",
    "GraphqlQueryBuilder",
    "queryFnName",
    "aliasOrFilter",
    "head",
    "alias",
    "prop",
    "getGraphQLValue",
    "searches",
    "_i",
    "searchKeys",
    "parceFind",
    "setAlias",
    "ReferenceError",
    "_levelA",
    "currentValue",
    "itemX",
    "RangeError",
    "propsAA",
    "JSON",
    "stringify",
    "propS",
    "objectToString",
    "obj",
    "sourceA",
    "DEFAULT_ITEMS_PER_PAGE",
    "GraphqlService",
    "defaultOrderBy",
    "defaultPaginationOptions",
    "datasetName",
    "queryQb",
    "QueryBuilder",
    "datasetQb",
    "dataQb",
    "columnIds",
    "columnDefinitions_2",
    "columnDefinitions_2_1",
    "fields",
    "buildFilterQuery",
    "isWithCursor",
    "pageInfoQb",
    "node",
    "datasetFilters",
    "paginationOptions",
    "pageSize",
    "sortingOptions",
    "orderBy",
    "filteringOptions",
    "addLocaleIntoQuery",
    "extraQueryArguments",
    "_c",
    "queryArgument",
    "trimDoubleQuotesOnEnumField",
    "keepArgumentFieldDoubleQuotes",
    "inputArray",
    "set",
    "shift",
    "split",
    "getInitPaginationOptions",
    "getDatasetName",
    "_currentFilters",
    "getCurrentPagination",
    "_currentPagination",
    "_currentSorters",
    "resetPaginationOptions",
    "after",
    "before",
    "last",
    "pageNumber",
    "updateOptions",
    "debounceTypingDelay",
    "filterTypingDebounce",
    "clearTimeout",
    "updateFilters",
    "processOnPaginationChanged",
    "updatePagination",
    "newPage",
    "updateSorters",
    "isUpdatedByPreset",
    "castFilterToColumnFilter",
    "searchValue",
    "searchByArray",
    "_loop_1",
    "columnFilter_1",
    "this_1",
    "presetSorters",
    "graphqlSorters",
    "tmpSorterArray",
    "queryFieldSorter",
    "sortColumns_1",
    "sortColumns_1_1",
    "inputStr",
    "enumSearchWords",
    "patternWordInQuotes",
    "patternRegex",
    "reg",
    "RegExp",
    "group1",
    "group2",
    "group3",
    "removeDoubleQuotes",
    "tmpFilter",
    "padZero",
    "s",
    "trim",
    "allTitleCase",
    "outputStr",
    "substr",
    "OdataService",
    "_odataOptions",
    "filterQueue",
    "_defaultSortBy",
    "queryTmpArray",
    "top",
    "skip",
    "argument",
    "filterStr",
    "filterBySeparator",
    "saveColumnFilter",
    "updateFilterFromListTerms",
    "getFilterByColumn",
    "columnName",
    "getFilterCount",
    "removeColumnFilter",
    "search",
    "filterOptionObject",
    "updateFilterFromTerm",
    "searchBy",
    "tmpSearchByArray",
    "fieldSearchTerms",
    "tmpSearchTerms",
    "j",
    "lnj",
    "lnk",
    "caseType",
    "CaseType",
    "pascalCase",
    "GridOdataService",
    "odataService",
    "mergedOptions",
    "terms",
    "_loop_2",
    "columnFilter_2",
    "this_2",
    "bypassOdataQuery",
    "bypassBackendQuery",
    "encodeURIComponent",
    "dateFormatted",
    "mapOdataOperator",
    "sortByArray",
    "sorterArray",
    "sortColumns_2",
    "sortColumns_2_1",
    "columnFieldName",
    "csvString",
    "GridEventService",
    "attachOnCellChange",
    "onCellChange",
    "cell",
    "getDataItem",
    "returnedArgs",
    "gridDefinition",
    "dataContext",
    "attachOnClick",
    "onClick",
    "onCellClick",
    "GridStateService",
    "_columns",
    "_currentColumns",
    "subscriptions",
    "onGridStateChanged",
    "controlAndPluginService",
    "subscribeToAllGridChanges",
    "subscription",
    "getCurrentGridState",
    "gridState",
    "getCurrentColumns",
    "currentPagination",
    "getAssociatedCurrentColumns",
    "gridColumns",
    "currentColumns",
    "cssClass",
    "headerCssClass",
    "getAssociatedGridColumns",
    "currentColumn",
    "c",
    "hookExtensionEventToGridStateChange",
    "extensionName",
    "eventName",
    "extension",
    "newValues",
    "GridStateType",
    "hookSlickGridEventToGridStateChange",
    "resetColumns",
    "GridService",
    "gridStateService",
    "getColumnFromEventArguments",
    "getDataItemByRowNumber",
    "getItemRowMetadata",
    "previousItemMetadata",
    "meta",
    "cssClasses",
    "isEmptyObject",
    "_dirty",
    "rowClass",
    "highlightRow",
    "fadeDelay",
    "setSelectedRows",
    "getItemMetadata",
    "updateItem",
    "gridId",
    "getSelectedRows",
    "setSelectedRow",
    "rowIndexes",
    "renderGrid",
    "resetGrid",
    "originalColumns",
    "addItemToDatagrid",
    "insertItem",
    "scrollRowIntoView",
    "deleteDataGridItem",
    "itemId",
    "deleteDataGridItemById",
    "getRowById",
    "deleteItem",
    "updateDataGridItem",
    "updateDataGridItemById",
    "GroupingAndColspanService",
    "createPreHeaderPanel",
    "createPreHeaderRowGroupingTitle",
    "onColumnsResized",
    "$preHeaderPanel",
    "getPreHeaderPanel",
    "css",
    "getHeadersWidth",
    "parent",
    "headerColumnWidthDiff",
    "getHeaderColumnWidthDiff",
    "lastColumnGroup",
    "widthTotal",
    "columnGroup",
    "html",
    "ResizerService",
    "onGridBeforeResize",
    "attachAutoResizeDataGrid",
    "newSizes",
    "gridDomElm",
    "resizeGrid",
    "window",
    "on",
    "_gridUid",
    "calculateGridNewDimensions",
    "containerElm",
    "autoResize",
    "containerId",
    "gridContainerId",
    "windowElm",
    "bottomPadding",
    "enablePagination",
    "gridHeight",
    "height",
    "coordOffsetTop",
    "availableHeight",
    "availableWidth",
    "minHeight",
    "newHeight",
    "newWidth",
    "sidePadding",
    "getLastResizeDimensions",
    "_lastDimensions",
    "delay",
    "availableDimensions",
    "gridElm",
    "gridContainerElm",
    "heightWithPagination",
    "exec",
    "userAgent",
    "resizeCanvas",
    "AvgAggregator",
    "_field",
    "_count",
    "_nonNullCount",
    "_sum",
    "accumulate",
    "storeResult",
    "groupTotals",
    "avg",
    "MinAggregator",
    "_min",
    "min",
    "MaxAggregator",
    "_max",
    "max",
    "SumAggregator",
    "sum",
    "Aggregators",
    "Avg",
    "Min",
    "Max",
    "Sum",
    "CheckboxEditor",
    "$input",
    "focus",
    "loadValue",
    "defaultValue",
    "preClick",
    "serializeValue",
    "applyValue",
    "state",
    "isValueChanged",
    "validate",
    "valid",
    "msg",
    "DateEditor",
    "save",
    "commitChanges",
    "domValue",
    "toDate",
    "validator",
    "validationResults",
    "FloatEditor",
    "keyCode",
    "KeyCode",
    "LEFT",
    "RIGHT",
    "stopImmediatePropagation",
    "getDecimalPlaces",
    "columnEditor",
    "internalColumnEditor",
    "rtn",
    "decimalPlaces",
    "decPlaces",
    "toFixed",
    "elmValue",
    "IntegerEditor",
    "LongTextEditor",
    "$container",
    "$wrapper",
    "cancel",
    "handleKeyDown",
    "ENTER",
    "ESCAPE",
    "preventDefault",
    "TAB",
    "navigatePrev",
    "navigateNext",
    "cancelChanges",
    "left",
    "MultipleSelectEditor",
    "_translate",
    "offsetLeft",
    "onOpen",
    "autoAdjustDropPosition",
    "$editorElm",
    "editorElmOptions",
    "editorTemplate",
    "each",
    "$e",
    "currentValues",
    "multipleSelectDomElement",
    "multipleSelectOptions",
    "windowHeight",
    "innerHeight",
    "pageScroll",
    "scrollTop",
    "$msDrop",
    "msDropHeight",
    "msDropOffsetTop",
    "newOffsetTop",
    "elementOptions",
    "SingleSelectEditor",
    "TextEditor",
    "getValue",
    "setValue",
    "AvailableEditor",
    "Editors",
    "checkbox",
    "integer",
    "longText",
    "AVAILABLE_EDITORS",
    "EditorType",
    "arrayToCsvFormatter",
    "boldFormatter",
    "checkboxFormatter",
    "checkmarkFormatter",
    "collectionFormatter",
    "collectionEditorFormatter",
    "complexObjectFormatter",
    "dateIsoFormatter",
    "dateTimeIsoFormatter",
    "dateTimeIsoAmPmFormatter",
    "dateTimeUsAmPmFormatter",
    "dateTimeUsFormatter",
    "dateUsFormatter",
    "deleteIconFormatter",
    "dollarColoredBoldFormatter",
    "dollarColoredFormatter",
    "dollarFormatter",
    "editIconFormatter",
    "hyperlinkFormatter",
    "matchUrl",
    "hyperlinkUriPrefixFormatter",
    "uriPrefix",
    "infoIconFormatter",
    "lowercaseFormatter",
    "multipleFormatter",
    "formatters",
    "formatters_1",
    "formatters_1_1",
    "percentFormatter",
    "percentCompleteBarFormatter",
    "percentCompleteFormatter",
    "percentSymbolFormatter",
    "progressBarFormatter",
    "translateFormatter",
    "translateBooleanFormatter",
    "uppercaseFormatter",
    "yesNoFormatter",
    "Formatters",
    "arrayToCsv",
    "bold",
    "checkmark",
    "complexObject",
    "collectionEditor",
    "deleteIcon",
    "dollar",
    "dollarColored",
    "dollarColoredBold",
    "editIcon",
    "hyperlink",
    "hyperlinkUriPrefix",
    "infoIcon",
    "lowercase",
    "multiple",
    "percent",
    "percentComplete",
    "percentCompleteBar",
    "percentSymbol",
    "progressBar",
    "translateBoolean",
    "uppercase",
    "yesNo",
    "avgTotalsPercentageFormatter",
    "totals",
    "prefix",
    "groupFormatterPrefix",
    "suffix",
    "groupFormatterSuffix",
    "avgTotalsDollarFormatter",
    "avgTotalsFormatter",
    "minTotalsFormatter",
    "maxTotalsFormatter",
    "sumTotalsColoredFormatter",
    "sumTotalsDollarColoredBoldFormatter",
    "sumTotalsDollarColoredFormatter",
    "sumTotalsDollarBoldFormatter",
    "sumTotalsDollarFormatter",
    "sumTotalsFormatter",
    "sumTotalsBoldFormatter",
    "GroupTotalFormatters",
    "avgTotals",
    "avgTotalsDollar",
    "avgTotalsPercentage",
    "maxTotals",
    "minTotals",
    "sumTotals",
    "sumTotalsBold",
    "sumTotalsColored",
    "sumTotalsDollar",
    "sumTotalsDollarBold",
    "sumTotalsDollarColored",
    "sumTotalsDollarColoredBold",
    "SlickPaginationComponent",
    "_isFirstRender",
    "onPaginationChanged",
    "EventEmitter",
    "dataFrom",
    "dataTo",
    "pageCount",
    "totalItems",
    "paginationPageSizes",
    "fromToParams",
    "from",
    "to",
    "_gridPaginationOptions",
    "gridPaginationOptions",
    "refreshPagination",
    "ngOnDestroy",
    "ngAfterViewInit",
    "_filterSubcription",
    "ceil",
    "changeToFirstPage",
    "onPageChanged",
    "changeToLastPage",
    "changeToNextPage",
    "changeToPreviousPage",
    "changeToCurrentPage",
    "currentTarget",
    "onChangeItemPerPage",
    "itemsPerPage",
    "isPageNumberReset",
    "pageSizes",
    "recalculateFromToIndexes",
    "emit",
    "Component",
    "selector",
    "template",
    "GlobalGridOptions",
    "alwaysShowVerticalScroll",
    "autoEdit",
    "Output",
    "Input",
    "asyncEditorLoading",
    "autoFitColumnsOnFirstLoad",
    "cellHighlightCssClass",
    "datasetIdPropertyName",
    "enableAutoResize",
    "enableCellNavigation",
    "enableColumnReorder",
    "enableMouseHoverHighlightRow",
    "enableTextSelectionOnCells",
    "explicitInitialization",
    "forceFitColumns",
    "resizeOnShowHeaderRow",
    "autoAlign",
    "headerRowHeight",
    "numberedMultiColumnSort",
    "tristateMultiColumnSort",
    "sortColNumberInSeparateSpan",
    "suppressActiveCellChangeOnEdit",
    "rowHeight",
    "topPanelHeight",
    "AngularSlickgridComponent",
    "gridService",
    "gridEventService",
    "groupingAndColspanService",
    "resizer",
    "forRootConfig",
    "groupingDefinition",
    "showPagination",
    "isGridInitialized",
    "onAngularGridCreated",
    "onDataviewCreated",
    "onGridCreated",
    "onGridInitialized",
    "onBeforeGridCreate",
    "onBeforeGridDestroy",
    "onAfterGridDestroyed",
    "gridWidth",
    "updateColumnDefinitionsList",
    "getItems",
    "dataset",
    "_dataset",
    "refreshGridData",
    "ngOnInit",
    "gridHeightString",
    "gridWidthString",
    "initialization",
    "mergeGridOptions",
    "createBackendApiInternalPostProcessCallback",
    "Data",
    "GroupItemMetadataProvider",
    "DataView",
    "inlineFilters",
    "getEditor",
    "Grid",
    "attachDifferentHooks",
    "beginUpdate",
    "setItems",
    "endUpdate",
    "attachResizeHook",
    "attachBackendCallbackFunctions",
    "slickGrid",
    "groupingService",
    "pluginService",
    "resizerService",
    "editorFound",
    "backendApi_1",
    "nodes",
    "totalCount",
    "onLangChange",
    "_loop_3",
    "this_3",
    "customElm",
    "nativeElement",
    "dispatchEvent",
    "bubbles",
    "detail",
    "eventData",
    "_loop_4",
    "this_4",
    "gridStateChange",
    "updateRowCount",
    "onRowsChanged",
    "invalidateRows",
    "rows",
    "colspanCallback",
    "isExecuteCommandOnInit",
    "onInit",
    "observableOrPromise_1",
    "tslib_1.__awaiter",
    "paginationChanged",
    "reSort",
    "isShowing",
    "toggleHeaderRow",
    "providers",
    "decorators",
    "Inject",
    "ViewChild",
    "read",
    "ElementRef",
    "AngularSlickgridModule",
    "forRoot",
    "config",
    "ngModule",
    "provide",
    "useValue",
    "NgModule",
    "imports",
    "CommonModule",
    "TranslateModule",
    "declarations",
    "exports",
    "entryComponents",
    "buf",
    "charCodeAt"
  ],
  "mappings": "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"
}
