{
  "version": 3,
  "file": "angular-slickgrid.umd.min.js",
  "sources": [
    "ng://angular-slickgrid/node_modules/tslib/tslib.es6.js",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/utilities.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/sorters/sorterUtilities.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filter-conditions/booleanFilterCondition.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/models/delimiterType.enum.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/models/fileType.enum.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/models/gridStateType.enum.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/models/operatorType.enum.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/models/sortDirection.enum.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/sorters/dateUsShortSorter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/sorters/dateSorter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/sorters/dateIsoSorter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/sorters/dateUsSorter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/sorters/numericSorter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/sorters/stringSorter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/sorters/index.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/collection.service.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/export.service.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filter-conditions/filterUtilities.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filter-conditions/dateFilterCondition.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filter-conditions/dateIsoFilterCondition.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filter-conditions/dateUsFilterCondition.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filter-conditions/dateUsShortFilterCondition.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filter-conditions/dateUtcFilterCondition.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filter-conditions/collectionSearchFilterCondition.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filter-conditions/numberFilterCondition.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filter-conditions/stringFilterCondition.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filter-conditions/executeMappedCondition.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filter-conditions/index.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filters/compoundDateFilter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filters/compoundInputFilter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filters/inputFilter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filters/multipleSelectFilter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filters/selectFilter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filters/singleSelectFilter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/filters/index.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/filter.service.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/shared.service.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/controlAndPlugin.service.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/graphqlQueryBuilder.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/graphql.service.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/global-utilities.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/odata.service.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/grid-odata.service.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/gridEvent.service.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/resizer.service.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/gridExtra.service.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/gridExtraUtils.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/gridState.service.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/services/sort.service.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/editors/checkboxEditor.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/editors/dateEditor.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/editors/floatEditor.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/editors/integerEditor.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/editors/longTextEditor.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/editors/multipleSelectEditor.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/editors/singleSelectEditor.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/editors/textEditor.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/editors/index.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/arrayToCsvFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/checkboxFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/checkmarkFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/collectionFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/complexObjectFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/dateIsoFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/dateTimeIsoFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/dateTimeIsoAmPmFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/dateTimeUsAmPmFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/dateTimeUsFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/dateUsFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/deleteIconFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/editIconFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/hyperlinkFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/hyperlinkUriPrefixFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/infoIconFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/lowercaseFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/multipleFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/percentCompleteFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/percentCompleteBarFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/progressBarFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/translateFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/translateBooleanFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/uppercaseFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/yesNoFormatter.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/formatters/index.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/components/slick-pagination.component.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/global-grid-options.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/components/angular-slickgrid.component.ts",
    "ng://angular-slickgrid/out/src/app/modules/angular-slickgrid/modules/angular-slickgrid.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n",
    "import { FieldType, OperatorType, FilterType, FormElementType } from '../models/index';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/first';\r\nimport 'rxjs/add/operator/take';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\n/** Simple function to which will loop and create as demanded the number of white spaces,\r\n * this will be used in the Excel export\r\n * @param int nbSpaces: number of white spaces to create\r\n */\r\nexport function addWhiteSpaces(nbSpaces): string {\r\n  let result = '';\r\n\r\n  for (let i = 0; i < nbSpaces; i++) {\r\n    result += ' ';\r\n  }\r\n  return result;\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityDecode(input: string): string {\r\n  return input.replace(/&#(\\d+);/g, function (match, dec) {\r\n    return String.fromCharCode(dec);\r\n  });\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityEncode(input: any): string {\r\n  const buf = [];\r\n  for (let i = input.length - 1; i >= 0; i--) {\r\n    buf.unshift(['&#', input[i].charCodeAt(), ';'].join(''));\r\n  }\r\n  return buf.join('');\r\n}\r\n\r\n/**\r\n * Compares two arrays to determine if all the items are equal\r\n * @param a first array\r\n * @param b second array to compare with a\r\n * @param [orderMatters=false] flag if the order matters, if not arrays will be sorted\r\n * @return boolean true if equal, else false\r\n */\r\nexport function arraysEqual(a: any[], b: any[], orderMatters: boolean = false): boolean {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n\r\n  if (a === null || b === null) {\r\n    return false;\r\n  }\r\n\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n\r\n  if (!orderMatters) {\r\n    a.sort();\r\n    b.sort();\r\n  }\r\n\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Try casting an input of type Promise | Observable into a Promise type.\r\n * @param object which could be of type Promise or Observable\r\n * @param fromServiceName string representing the caller service name and will be used if we throw a casting problem error\r\n */\r\nexport function castToPromise<T>(input: Promise<T> | Observable<T>, fromServiceName: string = ''): Promise<T> {\r\n  let promise: any = input;\r\n\r\n  if (input instanceof Promise) {\r\n    // if it's already a Promise then return it\r\n    return input;\r\n  } else if (input instanceof Observable) {\r\n    promise = input.first().toPromise();\r\n    if (!(promise instanceof Promise)) {\r\n      promise = input.take(1).toPromise();\r\n    }\r\n    if (!(promise instanceof Promise)) {\r\n      throw new Error(\r\n        `Something went wrong, Angular-Slickgrid ${fromServiceName} is not able to convert the Observable into a Promise.\r\n        If you are using Angular HttpClient, you could try converting your http call to a Promise with \".toPromise()\"\r\n        for example::  this.http.post('graphql', { query: graphqlQuery }).toPromise()\r\n        `);\r\n    }\r\n  }\r\n\r\n  return promise;\r\n}\r\n\r\n/**\r\n * Uses the logic function to find an item in an array or returns the default\r\n * value provided (empty object by default)\r\n * @param any[] array the array to filter\r\n * @param function logic the logic to find the item\r\n * @param any [defaultVal={}] the default value to return\r\n * @return object the found object or deafult value\r\n */\r\nexport function findOrDefault(array: any[], logic: (item: any) => boolean, defaultVal = {}): any {\r\n  return array.find(logic) || defaultVal;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent moment.js format\r\n * refer to moment.js for the format standard used: https://momentjs.com/docs/#/parsing/string-format/\r\n * @param fieldType\r\n */\r\nexport function mapMomentDateFormatWithFieldType(fieldType: FieldType): string {\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'YYYY-MM-DD HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'YYYY-MM-DD hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'YYYY-MM-DD hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'MM/DD/YYYY';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'M/D/YY';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'MM/DD/YYYY HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'MM/DD/YYYY hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'MM/DD/YYYY hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'M/D/YY H:m:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'M/D/YY h:m:s a';\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'YYYY-MM-DD';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent Flatpickr format\r\n * refer to Flatpickr for the format standard used: https://chmln.github.io/flatpickr/formatting/#date-formatting-tokens\r\n * also note that they seem very similar to PHP format (except for am/pm): http://php.net/manual/en/function.date.php\r\n * @param fieldType\r\n */\r\nexport function mapFlatpickrDateFormatWithFieldType(fieldType: FieldType): string {\r\n  /*\r\n    d: Day of the month, 2 digits with leading zeros\t01 to 31\r\n    D: A textual representation of a day\tMon through Sun\r\n    l: (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday\r\n    j: Day of the month without leading zeros\t1 to 31\r\n    J: Day of the month without leading zeros and ordinal suffix\t1st, 2nd, to 31st\r\n    w: Numeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday)\r\n    F: A full textual representation of a month\tJanuary through December\r\n    m: Numeric representation of a month, with leading zero\t01 through 12\r\n    n: Numeric representation of a month, without leading zeros\t1 through 12\r\n    M: A short textual representation of a month\tJan through Dec\r\n    U: The number of seconds since the Unix Epoch\t1413704993\r\n    y: A two digit representation of a year\t99 or 03\r\n    Y: A full numeric representation of a year, 4 digits\t1999 or 2003\r\n    H: Hours (24 hours)\t00 to 23\r\n    h: Hours\t1 to 12\r\n    i: Minutes\t00 to 59\r\n    S: Seconds, 2 digits\t00 to 59\r\n    s: Seconds\t0, 1 to 59\r\n    K: AM/PM\tAM or PM\r\n  */\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'Y-m-d H:i:S';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'Y-m-d h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'Y-m-d h:i:S K';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'm/d/Y';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'm/d/y';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'm/d/Y H:i:S';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'm/d/Y h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'm/d/Y h:i:s K';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'm/d/y H:i:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'm/d/y h:i:s K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'Z';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'Y-m-d';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operators (ex.: <= is \"le\", > is \"gt\")\r\n * @param string operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorType(operator: string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (operator) {\r\n    case '<':\r\n      map = OperatorType.lessThan;\r\n      break;\r\n    case '<=':\r\n      map = OperatorType.lessThanOrEqual;\r\n      break;\r\n    case '>':\r\n      map = OperatorType.greaterThan;\r\n      break;\r\n    case '>=':\r\n      map = OperatorType.greaterThanOrEqual;\r\n      break;\r\n    case '<>':\r\n    case '!=':\r\n    case 'neq':\r\n    case 'NEQ':\r\n      map = OperatorType.notEqual;\r\n      break;\r\n    case '*':\r\n    case '.*':\r\n    case 'startsWith':\r\n      map = OperatorType.startsWith;\r\n      break;\r\n    case '*.':\r\n    case 'endsWith':\r\n      map = OperatorType.endsWith;\r\n      break;\r\n    case '=':\r\n    case '==':\r\n    case 'eq':\r\n    case 'EQ':\r\n      map = OperatorType.equal;\r\n      break;\r\n    case 'in':\r\n    case 'IN':\r\n      map = OperatorType.in;\r\n      break;\r\n    case 'notIn':\r\n    case 'NIN':\r\n    case 'NOT_IN':\r\n      map = OperatorType.notIn;\r\n      break;\r\n    default:\r\n      map = OperatorType.contains;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operator by a Filter Type\r\n * For example a multiple-select typically uses 'IN' operator\r\n * @param operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorByFieldType(fieldType: FieldType | string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.string:\r\n    case FieldType.unknown:\r\n      map = OperatorType.contains;\r\n      break;\r\n    case FieldType.float:\r\n    case FieldType.number:\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    case FieldType.date:\r\n    case FieldType.dateUtc:\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n    case FieldType.dateTimeIsoAmPm:\r\n    case FieldType.dateTimeIsoAM_PM:\r\n    case FieldType.dateUs:\r\n    case FieldType.dateUsShort:\r\n    case FieldType.dateTimeUs:\r\n    case FieldType.dateTimeUsAmPm:\r\n    case FieldType.dateTimeUsAM_PM:\r\n    case FieldType.dateTimeUsShort:\r\n    case FieldType.dateTimeUsShortAmPm:\r\n    case FieldType.dateTimeUsShortAM_PM:\r\n    default:\r\n      map = OperatorType.equal;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operator by a Filter Type\r\n * For example a multiple-select typically uses 'IN' operator\r\n * @param operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorByFilterType(filterType: FilterType | FormElementType | string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (filterType) {\r\n    case FilterType.multipleSelect:\r\n      map = OperatorType.in;\r\n      break;\r\n    case FilterType.singleSelect:\r\n      map = OperatorType.equal;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Parse a date passed as a string and return a Date object (if valid)\r\n * @param inputDateString\r\n * @returns string date formatted\r\n */\r\nexport function parseUtcDate(inputDateString: string, useUtc: boolean): string | null {\r\n  let date = null;\r\n\r\n  if (/^[0-9\\-\\/]*$/.test(inputDateString)) {\r\n    // get the UTC datetime with moment.js but we need to decode the value so that it's valid text\r\n    const dateString = decodeURIComponent(inputDateString);\r\n    const dateMoment = moment(new Date(dateString));\r\n    if (dateMoment.isValid() && dateMoment.year().toString().length === 4) {\r\n      date = (useUtc) ? dateMoment.utc().format() : dateMoment.format();\r\n    }\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\n/**\r\n * Converts a string to camel case\r\n * @param str the string to convert\r\n * @return the string in camel case\r\n */\r\nexport function toCamelCase(str: string): string {\r\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w|[\\s+\\-_\\/])/g, (match: string, offset: number) => {\r\n    // remove white space or hypens or underscores\r\n    if (/[\\s+\\-_\\/]/.test(match)) {\r\n      return '';\r\n    }\r\n\r\n    return offset === 0 ? match.toLowerCase() : match.toUpperCase();\r\n  });\r\n}\r\n\r\n/**\r\n * Converts a string to kebab (hypen) case\r\n * @param str the string to convert\r\n * @return the string in kebab case\r\n */\r\nexport function toKebabCase(str: string): string {\r\n  return toCamelCase(str).replace(/([A-Z])/g, '-$1').toLowerCase();\r\n}\r\n",
    "import { FieldType } from './../models/fieldType';\nimport { Sorters } from './index';\n\nexport function sortByFieldType(value1: any, value2: any, fieldType: FieldType, sortDirection: number) {\n  let sortResult = 0;\n\n  switch (fieldType) {\n    case FieldType.number:\n      sortResult = Sorters.numeric(value1, value2, sortDirection);\n      break;\n    case FieldType.date:\n      sortResult = Sorters.date(value1, value2, sortDirection);\n      break;\n    case FieldType.dateIso:\n      sortResult = Sorters.dateIso(value1, value2, sortDirection);\n      break;\n    case FieldType.dateUs:\n      sortResult = Sorters.dateUs(value1, value2, sortDirection);\n      break;\n    case FieldType.dateUsShort:\n      sortResult = Sorters.dateUsShort(value1, value2, sortDirection);\n      break;\n    default:\n      sortResult = Sorters.string(value1, value2, sortDirection);\n      break;\n  }\n\n  return sortResult;\n}\n",
    "import { FilterCondition, FilterConditionOption } from './../models/index';\r\n\r\nfunction parseBoolean(str: number | string) {\r\n  return /(true|1)/i.test(str + '');\r\n}\r\n\r\nexport const booleanFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  return parseBoolean(options.cellValue) === parseBoolean(options.searchTerm);\r\n};\r\n",
    "export enum DelimiterType {\r\n  colon = ':',\r\n  comma = ',',\r\n  equalSign = '=',\r\n  pipe = '|',\r\n  semicolon = ';',\r\n  space = ' ',\r\n  tab = '\\t',\r\n\r\n  doubleColon = '::',\r\n  doublePipe = '||',\r\n  doubleSemicolon = ';;',\r\n}\r\n\r\n",
    "export enum FileType {\r\n  csv = 'csv',\r\n  doc = 'doc',\r\n  docx = 'docx',\r\n  pdf = 'pdf',\r\n  txt = 'txt',\r\n  xls = 'xls',\r\n  xlsx = 'xlsx'\r\n}\r\n",
    "export enum GridStateType {\r\n  filter = 'filter',\r\n  pagination = 'pagination',\r\n  sorter = 'sorter'\r\n}\r\n",
    "export enum OperatorType {\r\n  contains = 'Contains',\r\n  lessThan = 'LT',\r\n  lessThanOrEqual = 'LE',\r\n  greaterThan = 'GT',\r\n  greaterThanOrEqual = 'GE',\r\n  notEqual = 'NE',\r\n  equal = 'EQ',\r\n  endsWith = 'EndsWith',\r\n  startsWith = 'StartsWith',\r\n  in = 'IN',\r\n  notIn = 'NIN'\r\n}\r\n",
    "export enum SortDirection {\r\n  asc = 'asc',\r\n  ASC = 'ASC',\r\n  desc = 'desc',\r\n  DESC = 'DESC'\r\n}\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortSorter: Sorter = (value1, value2, sortDirection) => {\r\n  if (!moment(value1, FORMAT, true).isValid() || !moment(value2, FORMAT, true).isValid()) {\r\n    return 0;\r\n  }\r\n  const date1 = moment(value1, FORMAT, true);\r\n  const date2 = moment(value2, FORMAT, true);\r\n  const diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);\r\n\r\n  return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateSorter: Sorter = (value1, value2, sortDirection) => {\r\n  if (!moment(value1, moment.ISO_8601).isValid() || !moment(value2, moment.ISO_8601, true).isValid()) {\r\n    return 0;\r\n  }\r\n  const date1 = moment(value1);\r\n  const date2 = moment(value2);\r\n  const diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);\r\n\r\n  return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoSorter: Sorter = (value1, value2, sortDirection) => {\r\n  if (!moment(value1, FORMAT, true).isValid() || !moment(value2, FORMAT, true).isValid()) {\r\n    return 0;\r\n  }\r\n  const date1 = moment(value1, FORMAT, true);\r\n  const date2 = moment(value2, FORMAT, true);\r\n  const diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);\r\n\r\n  return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsSorter: Sorter = (value1, value2, sortDirection) => {\r\n  if (!moment(value1, FORMAT, true).isValid() || !moment(value2, FORMAT, true).isValid()) {\r\n    return 0;\r\n  }\r\n  const date1 = moment(value1, FORMAT, true);\r\n  const date2 = moment(value2, FORMAT, true);\r\n  const diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);\r\n\r\n  return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const numericSorter: Sorter = (value1, value2, sortDirection) => {\r\n  const x = (isNaN(value1) || value1 === '' || value1 === null) ? -99e+10 : parseFloat(value1);\r\n  const y = (isNaN(value2) || value2 === '' || value2 === null) ? -99e+10 : parseFloat(value2);\r\n  return sortDirection * (x === y ? 0 : (x > y ? 1 : -1));\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const stringSorter: Sorter = (value1, value2, sortDirection) => {\r\n  let position;\r\n  if (value1 === null) {\r\n    position = -1;\r\n  } else if (value2 === null) {\r\n    position = 1;\r\n  } else if (value1 === value2) {\r\n    position = 0;\r\n  } else if (sortDirection) {\r\n    position = value1 < value2 ? -1 : 1;\r\n  } else if (!sortDirection) {\r\n    position = value1 < value2 ? 1 : -1;\r\n  }\r\n  return sortDirection * position;\r\n};\r\n",
    "import { dateUsShortSorter } from './dateUsShortSorter';\r\nimport { dateSorter } from './dateSorter';\r\nimport { dateIsoSorter } from './dateIsoSorter';\r\nimport { dateUsSorter } from './dateUsSorter';\r\nimport { numericSorter } from './numericSorter';\r\nimport { stringSorter } from './stringSorter';\r\n\r\nexport const Sorters = {\r\n  date: dateSorter,\r\n  dateIso: dateIsoSorter,\r\n  dateUs: dateUsSorter,\r\n  dateUsShort: dateUsShortSorter,\r\n  numeric: numericSorter,\r\n  string: stringSorter\r\n};\r\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  CollectionFilterBy,\n  CollectionSortBy,\n  FieldType,\n  OperatorType,\n} from './../models/index';\nimport { sortByFieldType } from '../sorters/sorterUtilities';\n\n@Injectable()\nexport class CollectionService {\n  constructor(private translate: TranslateService) { }\n\n  /**\n   * Filter items from a collection\n   * @param collection\n   * @param filterBy\n   */\n  filterCollection(collection: any[], filterBy: CollectionFilterBy): any[] {\n    let filteredCollection: any[];\n\n    if (filterBy) {\n      const property = filterBy.property || '';\n      const operator = filterBy.operator || OperatorType.equal;\n      const value = filterBy.value || '';\n\n      if (operator === OperatorType.equal) {\n        filteredCollection = collection.filter((item) => item[property] !== value);\n      } else {\n        filteredCollection = collection.filter((item) => item[property] === value);\n      }\n    }\n\n    return filteredCollection;\n  }\n\n  /**\n   * Sort items in a collection\n   * @param collection\n   * @param sortBy\n   * @param columnDef\n   * @param translate\n   */\n  sortCollection(collection: any[], sortBy: CollectionSortBy, enableTranslateLabel?: boolean): any[] {\n    let sortedCollection: any[];\n\n    if (sortBy) {\n      const property = sortBy.property || '';\n      const sortDirection = sortBy.hasOwnProperty('sortDesc') ? (sortBy.sortDesc ? -1 : 1) : 1;\n      const fieldType = sortBy.fieldType || FieldType.string;\n\n      sortedCollection = collection.sort((dataRow1: any, dataRow2: any) => {\n        const value1 = (enableTranslateLabel) ? this.translate.instant(dataRow1[property] || ' ') : dataRow1[property];\n        const value2 = (enableTranslateLabel) ? this.translate.instant(dataRow2[property] || ' ') : dataRow2[property];\n        const result = sortByFieldType(value1, value2, fieldType, sortDirection);\n        return result;\n      });\n    }\n\n    return sortedCollection;\n  }\n}\n",
    "import { Injectable } from '@angular/core';\r\nimport {\r\n  CellArgs,\r\n  CustomGridMenu,\r\n  Column,\r\n  DelimiterType,\r\n  ExportOption,\r\n  FileType,\r\n  Formatter,\r\n  GraphqlResult,\r\n  GridMenu,\r\n  GridOption,\r\n  HeaderButtonOnCommandArgs,\r\n  HeaderMenuOnCommandArgs,\r\n  HeaderMenuOnBeforeMenuShowArgs\r\n} from './../models/index';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { addWhiteSpaces, htmlEntityDecode } from './../services/utilities';\r\nimport { TextEncoder } from 'text-encoding-utf-8';\r\n\r\n// using external non-typed js libraries\r\ndeclare let Slick: any;\r\ndeclare let $: any;\r\n\r\nexport interface ExportColumnHeader {\r\n  key: string;\r\n  title: string;\r\n}\r\n\r\n@Injectable()\r\nexport class ExportService {\r\n  private _lineCarriageReturn = '\\n';\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _exportQuoteWrapper: string;\r\n  private _existingSlickAggregators: string[] = [];\r\n  private _columnHeaders: ExportColumnHeader[];\r\n  private _groupedHeaders: ExportColumnHeader[];\r\n  private _gridOptions: GridOption;\r\n  private _groupingDefinition: any;\r\n  private _hasGroupedItems = false;\r\n  private _exportOptions: ExportOption;\r\n  defaultExportOptions: ExportOption = {\r\n    delimiter: DelimiterType.comma,\r\n    filename: 'export',\r\n    format: FileType.csv,\r\n    useUtf8WithBom: true\r\n  };\r\n\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /**\r\n   * Initialize the Export Service\r\n   * @param grid\r\n   * @param gridOptions\r\n   * @param dataView\r\n   */\r\n  init(grid: any, gridOptions: GridOption, dataView: any): void {\r\n    this._grid = grid;\r\n    this._gridOptions = gridOptions;\r\n    this._dataView = dataView;\r\n  }\r\n\r\n  /**\r\n   * Function to export the Grid result to an Excel CSV format using javascript for it to produce the CSV file.\r\n   * This is a WYSIWYG export to file output (What You See is What You Get)\r\n   *\r\n   * NOTES: The column position needs to match perfectly the JSON Object position because of the way we are pulling the data,\r\n   * which means that if any column(s) got moved in the UI, it has to be reflected in the JSON array output as well\r\n   *\r\n   * Example: exportToFile({ format: FileType.csv, delimiter: DelimiterType.comma })\r\n   */\r\n  exportToFile(options: ExportOption) {\r\n    this._exportOptions = $.extend(true, {}, this.defaultExportOptions, options);\r\n\r\n    // get the CSV output from the grid data\r\n    const dataOutput = this.getDataOutput();\r\n\r\n    // trigger a download file\r\n    this.startDownloadFile({\r\n      filename: `${this._exportOptions.filename}.${this._exportOptions.format}`,\r\n      csvContent: dataOutput,\r\n      format: this._exportOptions.format,\r\n      useUtf8WithBom: this._exportOptions.useUtf8WithBom\r\n    });\r\n  }\r\n\r\n  // -----------------------\r\n  // Private functions\r\n  // -----------------------\r\n\r\n  getDataOutput(): string {\r\n    const columns = this._grid.getColumns() || [];\r\n    const delimiter = this._exportOptions.delimiter || '';\r\n    const format = this._exportOptions.format || '';\r\n\r\n    // find all the Aggregators that exist inside SlickGrid\r\n    this._existingSlickAggregators = this.getAllSlickGridAggregators() || [];\r\n\r\n    // a CSV needs double quotes wrapper, the other types do not need any wrapper\r\n    this._exportQuoteWrapper = (format === FileType.csv) ? '\"' : '';\r\n\r\n    // data variable which will hold all the fields data of a row\r\n    let outputDataString = '';\r\n\r\n    // get grouped column titles and if found, we will add a \"Group by\" column at the first column index\r\n    this._groupedHeaders = this.getGroupedColumnTitles(columns) || [];\r\n    if (this._groupedHeaders && Array.isArray(this._groupedHeaders)) {\r\n      this._hasGroupedItems = (this._groupedHeaders.length > 0);\r\n      outputDataString += this._groupedHeaders\r\n        .map((header) => `${this.translate.instant('GROUP_BY')} [${header.title}]`)\r\n        .join(delimiter);\r\n    }\r\n\r\n    // get all column headers\r\n    this._columnHeaders = this.getColumnHeaders(columns) || [];\r\n    if (this._columnHeaders && Array.isArray(this._columnHeaders)) {\r\n      // add the header row + add a new line at the end of the row\r\n      const outputHeaderTitles = this._columnHeaders\r\n        .map((header) => this._exportQuoteWrapper + header.title + this._exportQuoteWrapper);\r\n      outputDataString += (outputHeaderTitles.join(delimiter) + this._lineCarriageReturn);\r\n    }\r\n\r\n    // Populate the rest of the Grid Data\r\n    outputDataString += this.getAllGridRowData(columns, this._lineCarriageReturn);\r\n\r\n    return outputDataString;\r\n  }\r\n\r\n  /**\r\n   * Get all the grid row data and return that as an output string\r\n   */\r\n  getAllGridRowData(columns: Column[], lineCarriageReturn: string): string {\r\n    let outputDataString = '';\r\n    const lineCount = this._dataView.getLength();\r\n\r\n    // loop through all the grid rows of data\r\n    for (let rowNumber = 0; rowNumber < lineCount; rowNumber++) {\r\n      const itemObj = this._dataView.getItem(rowNumber);\r\n\r\n      if (itemObj != null) {\r\n        // Normal row (not grouped by anything) would have an ID which was predefined in the Grid Columns definition\r\n        if (itemObj.id != null) {\r\n          // get regular row item data\r\n          outputDataString += this.readRegularRowData(columns, rowNumber, itemObj);\r\n        } else if (this._hasGroupedItems && itemObj.__groupTotals === undefined) {\r\n          // get the group row\r\n          outputDataString += this.readGroupedTitleRow(itemObj);\r\n        } else if (itemObj.__groupTotals) {\r\n          // else if the row is a Group By and we have agreggators, then a property of '__groupTotals' would exist under that object\r\n          outputDataString += this.readGroupedTotalRow(itemObj);\r\n        }\r\n        outputDataString += lineCarriageReturn;\r\n      }\r\n    }\r\n\r\n    return outputDataString;\r\n  }\r\n\r\n  /**\r\n   * Get all the Slick Aggregators that are defined in SlickGrid\r\n   */\r\n  getAllSlickGridAggregators(): string[] {\r\n    let slickAggregatorCount = 0;\r\n    const existingSlickAggregators = [];\r\n\r\n    for (const key in Slick.Data.Aggregators) {\r\n      if (Slick.Data.Aggregators.hasOwnProperty(key)) {\r\n        slickAggregatorCount++;\r\n        existingSlickAggregators.push(key.toLowerCase());\r\n      }\r\n    }\r\n\r\n    return existingSlickAggregators;\r\n  }\r\n\r\n  /**\r\n   * Get all header titles and their keys, translate the title when required.\r\n   * @param columns of the grid\r\n   */\r\n  getColumnHeaders(columns: Column[]): ExportColumnHeader[] {\r\n    if (!columns || !Array.isArray(columns) || columns.length === 0) {\r\n      return null;\r\n    }\r\n    const columnHeaders = [];\r\n\r\n    // Populate the Column Header, pull the name defined\r\n    columns.forEach((columnDef) => {\r\n      const fieldName = (columnDef.headerKey) ? this.translate.instant(columnDef.headerKey) : columnDef.name;\r\n      const skippedField = columnDef.excludeFromExport || false;\r\n\r\n      // if column width is 0 then it's not evaluated since that field is considered hidden should not be part of the export\r\n      if ((columnDef.width ===  undefined || columnDef.width > 0) && !skippedField) {\r\n        columnHeaders.push({\r\n          key: columnDef.field || columnDef.id,\r\n          title: fieldName\r\n        });\r\n      }\r\n    });\r\n\r\n    return columnHeaders;\r\n  }\r\n\r\n  /**\r\n   * Get the data of a regular row (a row without grouping)\r\n   * @param row\r\n   * @param itemObj\r\n   */\r\n  readRegularRowData(columns: Column[], row: number, itemObj: any) {\r\n    let idx = 0;\r\n    let rowOutputString = '';\r\n    const delimiter = this._exportOptions.delimiter;\r\n    const format = this._exportOptions.format;\r\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\r\n\r\n    for (let col = 0, ln = columns.length; col < ln; col++) {\r\n      const columnDef = columns[col];\r\n      const fieldId = columnDef.field || columnDef.id || '';\r\n\r\n      // skip excluded column\r\n      if (columnDef.excludeFromExport) {\r\n          continue;\r\n      }\r\n\r\n      // if we are grouping and are on 1st column index, we need to skip this column since it will be used later by the grouping text:: Group by [columnX]\r\n      if (this._hasGroupedItems && idx === 0) {\r\n        rowOutputString += `\"\"` + delimiter;\r\n      }\r\n\r\n      // does the user want to evaluate current column Formatter?\r\n      const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._gridOptions.exportWithFormatter;\r\n\r\n      // did the user provide a Custom Formatter for the export\r\n      const exportCustomFormatter: Formatter = (columnDef.exportCustomFormatter !== undefined) ? columnDef.exportCustomFormatter : undefined;\r\n\r\n      let itemData = '';\r\n\r\n      if (exportCustomFormatter) {\r\n        itemData = exportCustomFormatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\r\n      } else if (isEvaluatingFormatter && !!columnDef.formatter) {\r\n        itemData = columnDef.formatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\r\n      } else {\r\n        itemData = (itemObj[fieldId] === null || itemObj[fieldId] === undefined) ? '' : itemObj[fieldId];\r\n      }\r\n\r\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\r\n      if (format === FileType.csv) {\r\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\r\n      }\r\n\r\n      // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\r\n      // to cancel that effect we can had = in front, ex: =\"1E06\"\r\n      const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\r\n\r\n      rowOutputString += keepAsStringWrapper + exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\r\n      idx++;\r\n    }\r\n\r\n    return rowOutputString;\r\n  }\r\n\r\n  /**\r\n   * Get the grouped title(s), for example if we grouped by salesRep, the returned result would be:: 'Sales Rep'\r\n   * @param itemObj\r\n   */\r\n  readGroupedTitleRow(itemObj: any) {\r\n    let groupName = itemObj.value;\r\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\r\n    const delimiter = this._exportOptions.delimiter;\r\n    const format = this._exportOptions.format;\r\n\r\n    groupName = addWhiteSpaces(5 * itemObj.level) + groupName;\r\n\r\n    if (format === FileType.csv) {\r\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\r\n      groupName = groupName.toString().replace(/\"/gi, `\"\"`);\r\n    }\r\n\r\n    // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\r\n    // to cancel that effect we can had = in front, ex: =\"1E06\"\r\n    // const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\r\n\r\n    return /*keepAsStringWrapper +*/ exportQuoteWrapper + ' ' + groupName + exportQuoteWrapper + delimiter;\r\n  }\r\n\r\n  /**\r\n   * Get the grouped totals, these are set by Slick Aggregators.\r\n   * For example if we grouped by \"salesRep\" and we have a Sum Aggregator on \"sales\", then the returned output would be:: [\"Sum 123$\"]\r\n   * @param itemObj\r\n   */\r\n  readGroupedTotalRow(itemObj: any) {\r\n    let exportExponentialWrapper = '';\r\n    const delimiter = this._exportOptions.delimiter;\r\n    const format = this._exportOptions.format;\r\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\r\n    const existingSlickAggregators = this._existingSlickAggregators || [];\r\n    const columnCount = this._grid.getColumns().length;\r\n    let output = `${exportQuoteWrapper}..${exportQuoteWrapper}${delimiter}`;\r\n\r\n    for (let j = 0; j < columnCount; j++) {\r\n      const fieldId = this._grid.getColumns()[j].id;\r\n      let itemData = '';\r\n\r\n      // cycle through all possible SlickGrid Aggregators and get their values\r\n      for (let k = 0; k < existingSlickAggregators.length; k++) {\r\n        if (itemObj[existingSlickAggregators[k]] !== undefined) {\r\n          if (fieldId in itemObj[existingSlickAggregators[k]]) {\r\n            const aggregatorName = existingSlickAggregators[k];\r\n            const val = itemObj[existingSlickAggregators[k]][fieldId];\r\n            if (aggregatorName.toLowerCase() === 'avg') {\r\n              itemData = aggregatorName + ': ' + Math.round(val);\r\n            } else if (aggregatorName.toLowerCase() === 'min' || aggregatorName.toLowerCase() === 'max' || aggregatorName.toLowerCase() === 'sum') {\r\n              itemData = aggregatorName + ': ' + Math.round(parseFloat(val) * 1000000) / 1000000;\r\n            } else {\r\n              itemData = val;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (format === FileType.csv) {\r\n        // when CSV we also need to escape double quotes twice, so a double quote \" becomes 2x double quotes \"\"\r\n        // and if we have a text of (number)E(number),\r\n        // we don't want excel to transform it into exponential (1.0E06) to cancel that effect we can had = in front, ex: =\"1E06\"\r\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\r\n        exportExponentialWrapper = (itemData.match(/^\\s*\\d+E\\d+\\s*$/i)) ? '=' : '';\r\n      }\r\n      output += exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Get all grouped column titles, translate them when required.\r\n   * For example if the grid is grouped by salesRep and then customerName, we will return their title, something like:: ['Sales Rep', 'Customer Name']\r\n   * @param columns of the grid\r\n   */\r\n  getGroupedColumnTitles(columns: Column[]): ExportColumnHeader[] {\r\n    if (!columns || !Array.isArray(columns) || columns.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    let groupItemId = '';\r\n    const groupedHeaders = [];\r\n\r\n    let hasGroupedItems = false;\r\n    if ($.isEmptyObject(this._groupingDefinition)) {\r\n      hasGroupedItems = false;\r\n    } else {\r\n      hasGroupedItems = true;\r\n      groupItemId = $(`#${this._groupingDefinition.dropdownOptionsIds[0]}`).val();\r\n    }\r\n\r\n    // If we are Grouping, then pull the name of the grouped item and display it as 1st column\r\n    columns.forEach((columnDef) => {\r\n      // the column might be a complex object and have a '.' (ex.: person.name)\r\n      // if so we want just the object (ex.: person.name => we want 'person')\r\n      if (groupItemId.indexOf('.') >= 0) {\r\n        groupItemId = groupItemId.split('.')[0];\r\n      }\r\n\r\n      if (hasGroupedItems && columnDef.id === groupItemId) {\r\n        const fieldName = (columnDef.headerKey) ? this.translate.instant(columnDef.headerKey) : columnDef.name;\r\n        groupedHeaders.push({\r\n          key: columnDef.field || columnDef.id,\r\n          title: fieldName\r\n        });\r\n      }\r\n    });\r\n\r\n    return groupedHeaders;\r\n  }\r\n\r\n  /**\r\n   * Triggers download file with file format.\r\n   * IE(6-10) are not supported\r\n   * All other browsers will use plain javascript on client side to produce a file download.\r\n   * @param options\r\n   */\r\n  startDownloadFile(options: { filename: string, csvContent: any, format: FileType | string, useUtf8WithBom: boolean }): void {\r\n    // IE(6-10) don't support javascript download and our service doesn't support either so throw an error, we have to make a round trip to the Web Server for exporting\r\n    if (navigator.appName === 'Microsoft Internet Explorer') {\r\n      throw new Error('Microsoft Internet Explorer 6 to 10 do not support javascript export to CSV. Please upgrade your browser.');\r\n    }\r\n\r\n    // set the correct MIME type\r\n    const mimeType = (options.format === FileType.csv) ? 'text/csv' : 'text/plain';\r\n\r\n    // make sure no html entities exist in the data\r\n    const csvContent = htmlEntityDecode(options.csvContent);\r\n\r\n    // dealing with Excel CSV export and UTF-8 is a little tricky.. We will use Option #2 to cover older Excel versions\r\n    // Option #1: we need to make Excel knowing that it's dealing with an UTF-8, A correctly formatted UTF8 file can have a Byte Order Mark as its first three octets\r\n    // reference: http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\r\n    // Option#2: use a 3rd party extension to javascript encode into UTF-16\r\n    let outputData: Uint8Array | string;\r\n    if (options.format === FileType.csv) {\r\n      outputData = new TextEncoder('utf-8').encode(csvContent);\r\n    } else {\r\n      outputData = csvContent;\r\n    }\r\n\r\n    // create a Blob object for the download\r\n    const blob = new Blob([options.useUtf8WithBom ? '\\uFEFF' : '', outputData], {\r\n      type: `${mimeType};charset=utf-8;`\r\n    });\r\n\r\n    // when using IE/Edge, then use different download call\r\n    if (typeof navigator.msSaveOrOpenBlob === 'function') {\r\n      navigator.msSaveOrOpenBlob(blob, options.filename);\r\n    } else {\r\n      // this trick will generate a temp <a /> tag\r\n      // the code will then trigger a hidden click for it to start downloading\r\n      const link = document.createElement('a');\r\n      const csvUrl = URL.createObjectURL(blob);\r\n\r\n      link.textContent = 'download';\r\n      link.href = csvUrl;\r\n      link.setAttribute('download', options.filename);\r\n\r\n      // set the visibility to hidden so there is no effect on your web-layout\r\n      link.style.visibility = 'hidden';\r\n\r\n      // this part will append the anchor tag, trigger a click (for download to start) and finally remove the tag once completed\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    }\r\n  }\r\n}\r\n",
    "export const testFilterCondition = (operator: string, value1: any, value2: any): boolean => {\r\n  switch (operator) {\r\n    case '<':\r\n    case 'LT': return (value1 < value2);\r\n    case '<=':\r\n    case 'LE': return (value1 <= value2);\r\n    case '>':\r\n    case 'GT': return (value1 > value2);\r\n    case '>=':\r\n    case 'GE': return (value1 >= value2);\r\n    case '!=':\r\n    case '<>':\r\n    case 'NE': return (value1 !== value2);\r\n    case '=':\r\n    case '==':\r\n    case 'EQ': return (value1 === value2);\r\n    case 'IN': return ((value2 && value2.includes) ? (value2.includes(value1)) : false);\r\n  }\r\n  return true;\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const filterSearchType = options.filterSearchType || FieldType.dateIso;\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(filterSearchType);\r\n  if (!moment(options.cellValue, moment.ISO_8601).isValid() || !moment(options.searchTerm, searchDateFormat, true).isValid()) {\r\n    return true;\r\n  }\r\n  const dateCell = moment(options.cellValue);\r\n  const dateSearch = moment(options.searchTerm);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  if (!moment(options.cellValue, FORMAT, true).isValid() || !moment(options.searchTerm, FORMAT, true).isValid()) {\r\n    return true;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(options.searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  if (!moment(options.cellValue, FORMAT, true).isValid() || !moment(options.searchTerm, FORMAT, true).isValid()) {\r\n    return true;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(options.searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  if (!moment(options.cellValue, FORMAT, true).isValid() || !moment(options.searchTerm, FORMAT, true).isValid()) {\r\n    return true;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(options.searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateUtcFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(options.filterSearchType || options.fieldType);\r\n  if (!moment(options.cellValue, moment.ISO_8601).isValid() || !moment(options.searchTerm, searchDateFormat, true).isValid()) {\r\n    return true;\r\n  }\r\n  const dateCell = moment(options.cellValue, moment.ISO_8601, true);\r\n  const dateSearch = moment(options.searchTerm, searchDateFormat, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const collectionSearchFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // multiple-select will always return text, so we should make our cell values text as well\r\n  const cellValue = options.cellValue + '';\r\n\r\n  return testFilterCondition(options.operator || 'IN', cellValue, options.searchTerms || []);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const numberFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const cellValue = parseFloat(options.cellValue);\r\n  const searchTerm = (typeof options.searchTerm === 'string') ? parseFloat(options.searchTerm) : options.searchTerm;\r\n\r\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption, OperatorType } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const stringFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // make sure the cell value is a string by casting it when possible\r\n  options.cellValue = (options.cellValue === undefined || options.cellValue === null) ? '' : options.cellValue.toString();\r\n\r\n  // make both the cell value and search value lower for case insensitive comparison\r\n  const cellValue = options.cellValue.toLowerCase();\r\n  const searchTerm = (typeof options.searchTerm === 'string') ? options.searchTerm.toLowerCase() : options.searchTerm;\r\n\r\n  if (options.operator === '*' || options.operator === OperatorType.endsWith) {\r\n    return cellValue.endsWith(searchTerm);\r\n  } else if ((options.operator === '' && options.cellValueLastChar === '*') || options.operator === OperatorType.startsWith) {\r\n    return cellValue.startsWith(searchTerm);\r\n  } else if (options.operator === '') {\r\n    return cellValue.includes(searchTerm);\r\n  }\r\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\r\n};\r\n",
    "import { booleanFilterCondition } from './booleanFilterCondition';\r\nimport { dateFilterCondition } from './dateFilterCondition';\r\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\r\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\r\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\r\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\r\nimport { FilterConditionOption } from './../models/filterConditionOption.interface';\r\nimport { FilterCondition } from '../models/filterCondition.interface';\r\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { numberFilterCondition } from './numberFilterCondition';\r\nimport { stringFilterCondition } from './stringFilterCondition';\r\nimport { FieldType } from '../models/index';\r\n\r\nexport const executeMappedCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // when using a multi-select ('IN' operator) we will not use the field type but instead go directly with a collection search\r\n  if (options && options.operator && options.operator.toUpperCase() === 'IN') {\r\n    return collectionSearchFilterCondition(options);\r\n  }\r\n\r\n  // execute the mapped type, or default to String condition check\r\n  switch (options.fieldType) {\r\n    case FieldType.boolean:\r\n      return booleanFilterCondition(options);\r\n    case FieldType.date:\r\n      return dateFilterCondition(options);\r\n    case FieldType.dateUtc:\r\n      return dateUtcFilterCondition(options);\r\n    case FieldType.dateIso:\r\n      return dateIsoFilterCondition(options);\r\n    case FieldType.dateUs:\r\n    case FieldType.dateTimeUs:\r\n      return dateUsFilterCondition(options);\r\n    case FieldType.dateUsShort:\r\n    case FieldType.dateTimeUsShort:\r\n      return dateUsShortFilterCondition(options);\r\n    case FieldType.number:\r\n      return numberFilterCondition(options);\r\n    case FieldType.string:\r\n    default:\r\n      return stringFilterCondition(options);\r\n  }\r\n};\r\n",
    "import { FilterConditionOption } from './../models/filterConditionOption.interface';\r\nimport { booleanFilterCondition } from './booleanFilterCondition';\r\nimport { dateFilterCondition } from './dateFilterCondition';\r\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\r\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\r\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\r\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\r\nimport { executeMappedCondition } from './executeMappedCondition';\r\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { numberFilterCondition } from './numberFilterCondition';\r\nimport { stringFilterCondition } from './stringFilterCondition';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const FilterConditions = {\r\n  executeMappedCondition,\r\n  booleanFilter: booleanFilterCondition,\r\n  collectionSearchFilter: collectionSearchFilterCondition,\r\n  dateFilter: dateFilterCondition,\r\n  dateIsoFilter: dateIsoFilterCondition,\r\n  dateUtcFilter: dateUtcFilterCondition,\r\n  dateUsFilter: dateUsFilterCondition,\r\n  dateUsShortFilter: dateUsShortFilterCondition,\r\n  numberFilter: numberFilterCondition,\r\n  stringFilter: stringFilterCondition,\r\n  testFilter: testFilterCondition\r\n};\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { mapFlatpickrDateFormatWithFieldType } from '../services/utilities';\r\nimport { Column, Filter, FilterArguments, FilterCallback, FieldType, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\r\n\r\n// importing Flatpickr works better with a 'require'\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class CompoundDateFilter implements Filter {\r\n  private $filterElm: any;\r\n  private $filterInputElm: any;\r\n  private $selectOperatorElm: any;\r\n  private _currentValue: string;\r\n  flatInstance: any;\r\n  grid: any;\r\n  gridOptions: GridOption;\r\n  operator: OperatorType | OperatorString;\r\n  searchTerm: SearchTerm;\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.operator = args.operator;\r\n    this.searchTerm = args.searchTerm;\r\n    if (this.grid && typeof this.grid.getOptions === 'function') {\r\n      this.gridOptions = this.grid.getOptions();\r\n    }\r\n\r\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n    // and initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement();\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterInputElm.keyup((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n    this.$selectOperatorElm.change((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear(triggerFilterKeyup = true) {\r\n    if (this.flatInstance && this.$selectOperatorElm) {\r\n      this.$selectOperatorElm.val(0);\r\n      this.flatInstance.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n      this.$selectOperatorElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm) {\r\n    if (values) {\r\n      this.flatInstance.setDate(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  private buildDatePickerInput(searchTerm: SearchTerm) {\r\n    const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\r\n    const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnDef.type || FieldType.dateUtc);\r\n    let currentLocale = this.getCurrentLocale(this.columnDef, this.gridOptions) || '';\r\n    if (currentLocale.length > 2) {\r\n      currentLocale = currentLocale.substring(0, 2);\r\n    }\r\n\r\n    const pickerOptions: any = {\r\n      defaultDate: searchTerm || '',\r\n      altInput: true,\r\n      altFormat: outputFormat,\r\n      dateFormat: inputFormat,\r\n      wrap: true,\r\n      closeOnSelect: true,\r\n      locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n      onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n        this._currentValue = dateStr;\r\n\r\n        // when using the time picker, we can simulate a keyup event to avoid multiple backend request\r\n        // since backend request are only executed after user start typing, changing the time should be treated the same way\r\n        if (pickerOptions.enableTime) {\r\n          this.onTriggerEvent(new CustomEvent('keyup'));\r\n        } else {\r\n          this.onTriggerEvent(undefined);\r\n        }\r\n      },\r\n    };\r\n\r\n    // add the time picker when format is UTC (Z) or has the 'h' (meaning hours)\r\n    if (outputFormat && (outputFormat === 'Z' || outputFormat.toLowerCase().includes('h'))) {\r\n      pickerOptions.enableTime = true;\r\n    }\r\n\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    const $filterInputElm = $(`<div class=flatpickr><input type=\"text\" class=\"form-control\" data-input placeholder=\"${placeholder}\"></div>`);\r\n    this.flatInstance = ($filterInputElm[0] && typeof $filterInputElm[0].flatpickr === 'function') ? $filterInputElm[0].flatpickr(pickerOptions) : null;\r\n    return $filterInputElm;\r\n  }\r\n\r\n  private buildSelectOperatorHtmlString() {\r\n    const optionValues = this.getOptionValues();\r\n    let optionValueString = '';\r\n    optionValues.forEach((option) => {\r\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\r\n    });\r\n\r\n    return `<select class=\"form-control\">${optionValueString}</select>`;\r\n  }\r\n\r\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\r\n    return [\r\n      { operator: '' as OperatorString, description: '' },\r\n      { operator: '=' as OperatorString, description: '' },\r\n      { operator: '<' as OperatorString, description: '' },\r\n      { operator: '<=' as OperatorString, description: '' },\r\n      { operator: '>' as OperatorString, description: '' },\r\n      { operator: '>=' as OperatorString, description: '' },\r\n      { operator: '<>' as OperatorString, description: '' }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  private createDomElement() {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    const searchTerm = (this.searchTerm || '') as string;\r\n    if (searchTerm) {\r\n      this._currentValue = searchTerm;\r\n    }\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\r\n    this.$filterInputElm = this.buildDatePickerInput(searchTerm);\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\r\n    const $containerInputGroup = $(`<div class=\"input-group flatpickr\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon operator\"></div>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <div class=flatpickr>\r\n          <input type=\"text\" class=\"form-control\" data-input>\r\n        </div>\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    $containerInputGroup.append($operatorInputGroupAddon);\r\n    $containerInputGroup.append(this.$filterInputElm);\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append($containerInputGroup);\r\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\r\n    this.$filterInputElm.data('columnId', this.columnDef.id);\r\n\r\n    if (this.operator) {\r\n      this.$selectOperatorElm.val(this.operator);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (this.searchTerm) {\r\n      $filterContainerElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  private getCurrentLocale(columnDef: Column, gridOptions: GridOption) {\r\n    const params = gridOptions.params || columnDef.params || {};\r\n    if (params.i18n && params.i18n instanceof TranslateService) {\r\n      return params.i18n.currentLang;\r\n    }\r\n\r\n    return 'en';\r\n  }\r\n\r\n  private loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  private onTriggerEvent(e: Event | undefined) {\r\n    const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\r\n    (this._currentValue) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n    this.callback(e, { columnDef: this.columnDef, searchTerm: this._currentValue, operator: selectedOperator || '=' });\r\n  }\r\n\r\n  private hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  private show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { FieldType } from './../models/fieldType';\r\nimport { Column, Filter, FilterArguments, FilterCallback, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\r\nimport { htmlEntityEncode } from '..';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class CompoundInputFilter implements Filter {\r\n  private $filterElm: any;\r\n  private $filterInputElm: any;\r\n  private $selectOperatorElm: any;\r\n  grid: any;\r\n  gridOptions: GridOption;\r\n  operator: OperatorType | OperatorString;\r\n  searchTerm: SearchTerm;\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.operator = args.operator;\r\n    this.searchTerm = args.searchTerm;\r\n    if (this.grid && typeof this.grid.getOptions === 'function') {\r\n      this.gridOptions = this.grid.getOptions();\r\n    }\r\n\r\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n    // and initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement();\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterInputElm.keyup((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n    this.$selectOperatorElm.change((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear(triggerFilterKeyup = true) {\r\n    if (this.$filterElm && this.$selectOperatorElm) {\r\n      this.$selectOperatorElm.val(0);\r\n      this.$filterInputElm.val('');\r\n      if (triggerFilterKeyup) {\r\n        this.$filterElm.trigger('keyup');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n      this.$selectOperatorElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  private buildInputHtmlString() {\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    return `<input class=\"form-control\" type=\"text\" placeholder=\"${placeholder}\" />`;\r\n  }\r\n\r\n  private buildSelectOperatorHtmlString() {\r\n    const optionValues = this.getOptionValues();\r\n    let optionValueString = '';\r\n    optionValues.forEach((option) => {\r\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\r\n    });\r\n\r\n    return `<select class=\"form-control\">${optionValueString}</select>`;\r\n  }\r\n\r\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\r\n    const type = (this.columnDef.type && this.columnDef.type) ? this.columnDef.type : FieldType.string;\r\n    let optionValues = [];\r\n\r\n    switch (type) {\r\n      case FieldType.string:\r\n        optionValues = [\r\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\r\n          { operator: '=' as OperatorString, description: this.translate.instant('EQUALS') },\r\n          { operator: 'a*' as OperatorString, description: this.translate.instant('STARTS_WITH') },\r\n          { operator: '*z' as OperatorString, description: this.translate.instant('ENDS_WITH') },\r\n          /*\r\n          { operator: 'IN' as OperatorString, description: this.translate.instant('IN_COLLECTION_SEPERATED_BY_COMMA') },\r\n          { operator: 'NIN' as OperatorString, description: this.translate.instant('NOT_IN_COLLECTION_SEPERATED_BY_COMMA') },\r\n          */\r\n        ];\r\n        break;\r\n      default:\r\n        optionValues = [\r\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\r\n          { operator: '=' as OperatorString, description: '' },\r\n          { operator: '<' as OperatorString, description: '' },\r\n          { operator: '<=' as OperatorString, description: '' },\r\n          { operator: '>' as OperatorString, description: '' },\r\n          { operator: '>=' as OperatorString, description: '' },\r\n          { operator: '<>' as OperatorString, description: '' }];\r\n        break;\r\n    }\r\n\r\n    return optionValues;\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  private createDomElement() {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\r\n    this.$filterInputElm = $(this.buildInputHtmlString());\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\r\n    const $containerInputGroup = $(`<div class=\"input-group\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon operator\"></div>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <input class=\"form-control\" type=\"text\" />\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    $containerInputGroup.append($operatorInputGroupAddon);\r\n    $containerInputGroup.append(this.$filterInputElm);\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append($containerInputGroup);\r\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\r\n\r\n    const searchTerm = (typeof this.searchTerm === 'boolean') ? `${this.searchTerm}` : this.searchTerm;\r\n    this.$filterInputElm.val(searchTerm);\r\n    this.$filterInputElm.data('columnId', this.columnDef.id);\r\n\r\n    if (this.operator) {\r\n      this.$selectOperatorElm.val(this.operator);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (this.searchTerm) {\r\n      $filterContainerElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  private onTriggerEvent(e: Event | undefined) {\r\n    const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\r\n    const value = this.$filterInputElm.val();\r\n    (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n    this.callback(e, { columnDef: this.columnDef, searchTerm: value, operator: selectedOperator || '' });\r\n  }\r\n}\r\n",
    "import { Column, Filter, FilterArguments, FilterCallback, GridOption, SearchTerm } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class InputFilter implements Filter {\r\n  private $filterElm: any;\r\n  grid: any;\r\n  gridOptions: GridOption;\r\n  searchTerm: SearchTerm;\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerm = args.searchTerm;\r\n    if (this.grid && typeof this.grid.getOptions === 'function') {\r\n      this.gridOptions = this.grid.getOptions();\r\n    }\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.keyup((e: any) => {\r\n      (e && e.target && e.target.value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear(triggerFilterKeyup = true) {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.val('');\r\n      if (triggerFilterKeyup) {\r\n        this.$filterElm.trigger('keyup');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString() {\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    return `<input type=\"text\" class=\"form-control search-filter\" placeholder=\"${placeholder}\">`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n    const searchTerm = (typeof this.searchTerm === 'boolean') ? `${this.searchTerm}` : this.searchTerm;\r\n    $filterElm.val(searchTerm);\r\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (this.searchTerm) {\r\n      $filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CollectionService } from './../services/collection.service';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  MultipleSelectOption,\n  SearchTerm,\n  SelectOption,\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n@Injectable()\nexport class MultipleSelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  gridOptions: GridOption;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n  defaultOptions: MultipleSelectOption;\n  isFilled = false;\n  labelName: string;\n  valueName: string;\n  enableTranslateLabel = false;\n\n  /**\n   * Initialize the Filter\n   */\n  constructor(private collectionService: CollectionService, private translate: TranslateService) {\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,  // input search term on top of the select option list\n      maxHeight: 200,\n      okButton: true,\n      addTitle: true, // show tooltip of all selected items while hovering the filter\n      countSelected: this.translate.instant('X_OF_Y_SELECTED'),\n      allSelected: this.translate.instant('ALL_SELECTED'),\n      selectAllText: this.translate.instant('SELECT_ALL'),\n      selectAllDelimiter: ['', ''], // remove default square brackets of default text \"[Select All]\" => \"Select All\"\n\n      // we will subscribe to the onClose event for triggering our callback\n      // also add/remove \"filled\" class for styling purposes\n      onClose: () => {\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\n          this.isFilled = true;\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\n        } else {\n          this.isFilled = false;\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\n        }\n        this.callback(undefined, { columnDef: this.columnDef, operator: 'IN', searchTerms: selectedItems });\n      }\n    };\n  }\n\n  /**\n   * Initialize the filter template\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: type: FilterType.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let newCollection = this.columnDef.filter.collection || [];\n    this.gridOptions = this.grid.getOptions();\n\n    // user might want to filter certain items of the collection\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\n      const filterBy = this.columnDef.filter.collectionFilterBy;\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.gridOptions.params && this.columnDef.filter.collectionSortBy) {\n      const sortBy = this.columnDef.filter.collectionSortBy;\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString(newCollection);\n\n    // step 2, create the DOM Element of the filter & pre-load search terms\n    // also subscribe to the onClose event\n    this.createDomElement(filterTemplate);\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear(triggerFilterChange = true) {\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\n      // this.$filterElm = $(`#${this.$filterElm[0].id}`);\n      this.$filterElm.multipleSelect('setSelects', []);\n\n      if (triggerFilterChange) {\n        this.$filterElm.removeClass('filled');\n        this.callback(undefined, { columnDef: this.columnDef, operator: 'IN', searchTerms: [] });\n      }\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off().remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values) {\n      this.$filterElm.multipleSelect('setSelects', values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString(optionCollection: any[]) {\n    let options = '';\n    optionCollection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: type: FilterType.multipleSelect, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const selected = (this.findValueInSearchTerms(option[this.valueName]) >= 0) ? 'selected' : '';\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n\n      // html text of each select option\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\n\n      // if there's a search term, we will add the \"filled\" class for styling purposes\n      if (selected) {\n        this.isFilled = true;\n      }\n    });\n\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * Subscribe to the onClose event and run the callback when that happens\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    this.$filterElm = $(filterTemplate);\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\n    }\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterElm.data('columnId', this.columnDef.id);\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (this.isFilled) {\n      this.$filterElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\n      this.$filterElm.appendTo($headerElm);\n    }\n\n    // merge options & attach multiSelect\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\n    this.$filterElm = this.$filterElm.multipleSelect(options);\n  }\n\n  private findValueInSearchTerms(value: number | string): number {\n    if (this.searchTerms && Array.isArray(this.searchTerms)) {\n      for (let i = 0; i < this.searchTerms.length; i++) {\n        if (this.searchTerms[i] && this.searchTerms[i] === value) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport { Column, Filter, FilterArguments, FilterCallback, SearchTerm } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class SelectFilter implements Filter {\r\n  $filterElm: any;\r\n  grid: any;\r\n  searchTerm: SearchTerm;\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerm = args.searchTerm;\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate);\r\n\r\n    // step 3, subscribe to the change event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.change((e: any) => {\r\n      (e && e.target && e.target.value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, operator: 'EQ' });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter values\r\n   */\r\n  clear(triggerFilterChange = true) {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.val('');\r\n      if (triggerFilterChange) {\r\n        this.$filterElm.trigger('change');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm | SearchTerm[]) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  private buildTemplateHtmlString() {\r\n    if (!this.columnDef || !this.columnDef.filter || (!this.columnDef.filter.collection && !this.columnDef.filter.selectOptions)) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the Select Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: type: FilterType.select, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\r\n    }\r\n    if (!this.columnDef.filter.collection && this.columnDef.filter.selectOptions) {\r\n      console.warn(`[Angular-SlickGrid] The Select Filter \"selectOptions\" property will de deprecated in future version. Please use the new \"collection\" property which is more generic and can be used with other Filters (not just Select).`);\r\n    }\r\n\r\n    const optionCollection = this.columnDef.filter.collection || this.columnDef.filter.selectOptions || [];\r\n    const labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\r\n    const valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\r\n\r\n    let options = '';\r\n    optionCollection.forEach((option: any) => {\r\n      if (!option || (option[labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: type: FilterType.select, collection: [ { value: '1', label: 'One' } ]')`);\r\n      }\r\n      const labelKey = option.labelKey || option[labelName];\r\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\r\n      options += `<option value=\"${option[valueName]}\">${textLabel}</option>`;\r\n    });\r\n    return `<select class=\"form-control search-filter\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n    const searchTerm = (typeof this.searchTerm === 'boolean') ? `${this.searchTerm}` : this.searchTerm;\r\n    $filterElm.val(searchTerm);\r\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport { Injectable } from '@angular/core';\nimport { CollectionService } from './../services/collection.service';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  MultipleSelectOption,\n  SearchTerm,\n  SelectOption,\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n@Injectable()\nexport class SingleSelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  gridOptions: GridOption;\n  searchTerm: SearchTerm;\n  columnDef: Column;\n  callback: FilterCallback;\n  defaultOptions: MultipleSelectOption;\n  isFilled = false;\n  labelName: string;\n  valueName: string;\n  enableTranslateLabel = false;\n\n  constructor(private collectionService: CollectionService, private translate: TranslateService) {\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,  // input search term on top of the select option list\n      maxHeight: 200,\n      single: true,\n      onClose: () => {\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\n        let selectedItem = '';\n\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\n          selectedItem = selectedItems[0];\n          this.isFilled = true;\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\n        } else {\n          this.isFilled = false;\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\n        }\n        this.callback(undefined, { columnDef: this.columnDef, operator: 'EQ', searchTerm: selectedItem });\n      }\n    };\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerm = args.searchTerm;\n\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: type: FilterType.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let newCollection = this.columnDef.filter.collection || [];\n    this.gridOptions = this.grid.getOptions();\n\n    // user might want to filter certain items of the collection\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\n      const filterBy = this.columnDef.filter.collectionFilterBy;\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.gridOptions.params && this.columnDef.filter.collectionSortBy) {\n      const sortBy = this.columnDef.filter.collectionSortBy;\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString(newCollection || []);\n\n    // step 2, create the DOM Element of the filter & pre-load search term\n    this.createDomElement(filterTemplate);\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear(triggerFilterChange = true) {\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\n      // this.$filterElm = $(`#${this.$filterElm[0].id}`);\n      this.$filterElm.multipleSelect('setSelects', []);\n\n      if (triggerFilterChange) {\n        this.callback(undefined, { columnDef: this.columnDef, operator: 'IN', searchTerm: undefined });\n      }\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off().remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm | SearchTerm[]) {\n    if (values) {\n      values = Array.isArray(values) ? values : [values];\n      this.$filterElm.multipleSelect('setSelects', values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString(optionCollection: any[]) {\n    let options = '';\n    optionCollection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: type: FilterType.singleSelect, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const selected = (option[this.valueName] === this.searchTerm) ? 'selected' : '';\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n\n      // html text of each select option\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\n\n      // if there's a search term, we will add the \"filled\" class for styling purposes\n      if (selected) {\n        this.isFilled = true;\n      }\n    });\n\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * Subscribe to the onClose event and run the callback when that happens\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    this.$filterElm = $(filterTemplate);\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\n    }\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterElm.data('columnId', this.columnDef.id);\n\n    // append the new DOM element to the header row\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\n      this.$filterElm.appendTo($headerElm);\n    }\n\n    // merge options & attach multiSelect\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\n    this.$filterElm = this.$filterElm.multipleSelect(options);\n  }\n}\n",
    "import { Column, Filter } from './../models/index';\r\nimport { CompoundDateFilter } from './compoundDateFilter';\r\nimport { CompoundInputFilter } from './compoundInputFilter';\r\nimport { InputFilter } from './inputFilter';\r\nimport { MultipleSelectFilter } from './multipleSelectFilter';\r\nimport { SelectFilter } from './selectFilter';\r\nimport { SingleSelectFilter } from './singleSelectFilter';\r\n\r\nexport const Filters = {\r\n  /** Default Filter, input type text filter with a magnifying glass placeholder */\r\n  input: InputFilter,\r\n\r\n  /** Multiple Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  multipleSelect: MultipleSelectFilter,\r\n\r\n  /** Single Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  singleSelect: SingleSelectFilter,\r\n\r\n  /** Select filter, which uses native DOM element select */\r\n  select: SelectFilter,\r\n\r\n  /** Compound Date Filter (compound of Operator + Date picker) */\r\n  compoundDate: CompoundDateFilter,\r\n\r\n  /** Compound Input Filter (compound of Operator + Input) */\r\n  compoundInput: CompoundInputFilter,\r\n};\r\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CollectionService } from './collection.service';\nimport { castToPromise } from './utilities';\nimport { FilterConditions } from './../filter-conditions';\nimport { Filters } from './../filters';\nimport {\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  Filter,\n  FilterArguments,\n  FilterCallbackArg,\n  FieldType,\n  FilterType,\n  GridOption,\n  OperatorType,\n  CurrentFilter,\n  SearchTerm,\n  SlickEvent,\n  OperatorString\n} from './../models/index';\nimport { Subject } from 'rxjs/Subject';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class FilterService {\n  private _eventHandler = new Slick.EventHandler();\n  private _slickSubscriber: SlickEvent;\n  private _filters: any[] = [];\n  private _columnFilters: ColumnFilters = {};\n  private _dataView: any;\n  private _grid: any;\n  private _gridOptions: GridOption;\n  private _onFilterChangedOptions: any;\n  private _isFirstQuery = true;\n  onFilterChanged = new Subject<CurrentFilter[]>();\n\n  constructor(private collectionService: CollectionService, private translate: TranslateService) { }\n\n  init(grid: any, gridOptions: GridOption, columnDefinitions: Column[]): void {\n    this._grid = grid;\n    this._gridOptions = gridOptions;\n  }\n\n  /**\n   * Attach a backend filter hook to the grid\n   * @param grid SlickGrid Grid object\n   * @param gridOptions Grid Options object\n   */\n  attachBackendOnFilter(grid: any, options: GridOption) {\n    this._filters = [];\n    this._slickSubscriber = new Slick.Event();\n\n    // subscribe to the SlickGrid event and call the backend execution\n    this._slickSubscriber.subscribe(this.attachBackendOnFilterSubscribe.bind(this));\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  async attachBackendOnFilterSubscribe(event: Event, args: any) {\n    if (!args || !args.grid) {\n      throw new Error('Something went wrong when trying to attach the \"attachBackendOnFilterSubscribe(event, args)\" function, it seems that \"args\" is not populated correctly');\n    }\n    const gridOptions: GridOption = args.grid.getOptions() || {};\n\n    const backendApi = gridOptions.backendServiceApi || gridOptions.onBackendEventApi;\n    if (!backendApi || !backendApi.process || !backendApi.service) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    // run a preProcess callback if defined\n    if (backendApi.preProcess) {\n      backendApi.preProcess();\n    }\n\n    // call the service to get a query back\n    const query = await backendApi.service.onFilterChanged(event, args);\n\n    // emit an onFilterChanged event\n    this.emitFilterChanged('remote');\n\n    // the process could be an Observable (like HttpClient) or a Promise\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n    const observableOrPromise = backendApi.process(query);\n    const processResult = await castToPromise(observableOrPromise);\n\n    // from the result, call our internal post process to update the Dataset and Pagination info\n    if (processResult && backendApi.internalPostProcess) {\n      backendApi.internalPostProcess(processResult);\n    }\n\n    // send the response process to the postProcess callback\n    if (backendApi.postProcess !== undefined) {\n      backendApi.postProcess(processResult);\n    }\n  }\n\n  /**\n   * Attach a local filter hook to the grid\n   * @param grid SlickGrid Grid object\n   * @param gridOptions Grid Options object\n   * @param dataView\n   */\n  attachLocalOnFilter(grid: any, options: GridOption, dataView: any) {\n    this._filters = [];\n    this._dataView = dataView;\n    this._slickSubscriber = new Slick.Event();\n\n    dataView.setFilterArgs({ columnFilters: this._columnFilters, grid: this._grid });\n    dataView.setFilter(this.customLocalFilter.bind(this, dataView));\n\n    this._slickSubscriber.subscribe((e: any, args: any) => {\n      const columnId = args.columnId;\n      if (columnId != null) {\n        dataView.refresh();\n      }\n      this.emitFilterChanged('local');\n    });\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  /** Clear the search filters (below the column titles) */\n  clearFilters() {\n    this._filters.forEach((filter, index) => {\n      if (filter && filter.clear) {\n        // clear element and trigger a change\n        filter.clear(true);\n      }\n    });\n\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to clear columnFilter (without looping through) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // we also need to refresh the dataView and optionally the grid (it's optional since we use DataView)\n    if (this._dataView) {\n      this._dataView.refresh();\n      this._grid.invalidate();\n      this._grid.render();\n    }\n  }\n\n  customLocalFilter(dataView: any, item: any, args: any) {\n    for (const columnId of Object.keys(args.columnFilters)) {\n      const columnFilter = args.columnFilters[columnId];\n      const columnIndex = args.grid.getColumnIndex(columnId);\n      const columnDef = args.grid.getColumns()[columnIndex];\n      if (!columnDef) {\n        return false;\n      }\n      const fieldType = columnDef.type || FieldType.string;\n      const filterSearchType = (columnDef.filterSearchType) ? columnDef.filterSearchType : null;\n\n      let cellValue = item[columnDef.queryField || columnDef.queryFieldFilter || columnDef.field];\n      const searchTerms = (columnFilter && columnFilter.searchTerms) ? columnFilter.searchTerms : null;\n      let fieldSearchValue = (columnFilter && (columnFilter.searchTerm !== undefined || columnFilter.searchTerm !== null)) ? columnFilter.searchTerm : undefined;\n\n      if (typeof fieldSearchValue === 'undefined') {\n        fieldSearchValue = '';\n      }\n      fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n\n      const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n      let operator = columnFilter.operator || ((matches) ? matches[1] : '');\n      const searchTerm = (!!matches) ? matches[2] : '';\n      const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n\n      if (searchTerms && searchTerms.length > 0) {\n        fieldSearchValue = searchTerms.join(',');\n      } else if (typeof fieldSearchValue === 'string') {\n        // escaping the search value\n        fieldSearchValue = fieldSearchValue.replace(`'`, `''`); // escape single quotes by doubling them\n        if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\n          operator = (operator === '*' || operator === '*z') ? OperatorType.endsWith : OperatorType.startsWith;\n        }\n      }\n\n      // when using a Filter that is not a custom type, we want to make sure that we have a default operator type\n      // for example a multiple-select should always be using IN, while a single select will use an EQ\n      const filterType = (columnDef.filter && columnDef.filter.type) ? columnDef.filter.type : FilterType.input;\n      if (!operator && filterType !== FilterType.custom) {\n        switch (filterType) {\n          case FilterType.select:\n          case FilterType.multipleSelect:\n            operator = 'IN';\n            break;\n          case FilterType.singleSelect:\n            operator = 'EQ';\n            break;\n          default:\n            operator = operator;\n            break;\n        }\n      }\n\n      // no need to query if search value is empty\n      if (searchTerm === '' && !searchTerms) {\n        return true;\n      }\n\n      // filter search terms should always be string type (even though we permit the end user to input numbers)\n      // so make sure each term are strings, if user has some default search terms, we will cast them to string\n      if (searchTerms && Array.isArray(searchTerms)) {\n        for (let k = 0, ln = searchTerms.length; k < ln; k++) {\n          // make sure all search terms are strings\n          searchTerms[k] = ((searchTerms[k] === undefined || searchTerms[k] === null) ? '' : searchTerms[k]) + '';\n        }\n      }\n\n      // when using localization (i18n), we should use the formatter output to search as the new cell value\n      if (columnDef && columnDef.params && columnDef.params.useFormatterOuputToFilter) {\n        const rowIndex = (dataView && typeof dataView.getIdxById === 'function') ? dataView.getIdxById(item.id) : 0;\n        cellValue = columnDef.formatter(rowIndex, columnIndex, cellValue, columnDef, item, this._grid);\n      }\n\n      // make sure cell value is always a string\n      if (typeof cellValue === 'number') {\n        cellValue = cellValue.toString();\n      }\n\n      const conditionOptions = {\n        fieldType,\n        searchTerms,\n        searchTerm,\n        cellValue,\n        operator,\n        cellValueLastChar: lastValueChar,\n        filterSearchType\n      };\n\n      if (!FilterConditions.executeMappedCondition(conditionOptions)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  dispose() {\n    this.disposeColumnFilters();\n\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n\n    // unsubscribe local event\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\n      this._slickSubscriber.unsubscribe();\n    }\n  }\n\n  /**\n   * Dispose of the filters, since it's a singleton, we don't want to affect other grids with same columns\n   */\n  disposeColumnFilters() {\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to make columnFilter an empty (without looping) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // also destroy each Filter instances\n    this._filters.forEach((filter, index) => {\n      if (filter && filter.destroy) {\n        filter.destroy(true);\n      }\n    });\n  }\n\n  getColumnFilters() {\n    return this._columnFilters;\n  }\n\n  getCurrentLocalFilters(): CurrentFilter[] {\n    const currentFilters: CurrentFilter[] = [];\n    if (this._columnFilters) {\n      for (const colId of Object.keys(this._columnFilters)) {\n        const columnFilter = this._columnFilters[colId];\n        const columnDef = columnFilter.columnDef;\n        const filter = { columnId: colId || '' } as CurrentFilter;\n\n        if (columnFilter && columnFilter.searchTerms) {\n          filter.searchTerms = columnFilter.searchTerms;\n        } else {\n          filter.searchTerm = (columnFilter && (columnFilter.searchTerm !== undefined || columnFilter.searchTerm !== null)) ? columnFilter.searchTerm : undefined;\n        }\n        if (columnFilter.operator) {\n          filter.operator = columnFilter.operator;\n        }\n        currentFilters.push(filter);\n      }\n    }\n    return currentFilters;\n  }\n\n  callbackSearchEvent(e: Event | undefined, args: FilterCallbackArg) {\n    if (args) {\n      const searchTerm = args.searchTerm ? args.searchTerm : ((e && e.target) ? (e.target as HTMLInputElement).value : undefined);\n      const searchTerms = (args.searchTerms && Array.isArray(args.searchTerms)) ? args.searchTerms : undefined;\n      const columnDef = args.columnDef || null;\n      const columnId = columnDef ? (columnDef.id || '') : '';\n      const operator = args.operator || undefined;\n\n      if (!searchTerm && (!searchTerms || (Array.isArray(searchTerms) && searchTerms.length === 0))) {\n        // delete the property from the columnFilters when it becomes empty\n        // without doing this, it would leave an incorrect state of the previous column filters when filtering on another column\n        delete this._columnFilters[columnId];\n      } else {\n        const colId = '' + columnId as string;\n        const colFilter: ColumnFilter = {\n          columnId: colId,\n          columnDef,\n          searchTerm,\n          searchTerms,\n        };\n        if (operator) {\n          colFilter.operator = operator;\n        }\n        this._columnFilters[colId] = colFilter;\n      }\n\n      this.triggerEvent(this._slickSubscriber, {\n        columnId,\n        columnDef: args.columnDef || null,\n        columnFilters: this._columnFilters,\n        operator,\n        searchTerm,\n        searchTerms,\n        serviceOptions: this._onFilterChangedOptions,\n        grid: this._grid\n      }, e);\n    }\n  }\n\n  addFilterTemplateToHeaderRow(args: { column: Column; grid: any; node: any }) {\n    const columnDef = args.column;\n    const columnId = columnDef.id || '';\n\n    if (columnDef && columnId !== 'selector' && columnDef.filterable) {\n      let searchTerms: SearchTerm[] | undefined;\n      let searchTerm: SearchTerm | undefined;\n      let operator: OperatorString | OperatorType;\n\n      if (this._columnFilters[columnDef.id]) {\n        searchTerm = this._columnFilters[columnDef.id].searchTerm || undefined;\n        searchTerms = this._columnFilters[columnDef.id].searchTerms || undefined;\n        operator = this._columnFilters[columnDef.id].operator || undefined;\n      } else if (columnDef.filter) {\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // because of that we need to first get searchTerm(s) from the columnFilters (that is what the user last entered)\n        searchTerms = columnDef.filter.searchTerms || undefined;\n        searchTerm = columnDef.filter.searchTerm || undefined;\n        operator = columnDef.filter.operator || undefined;\n        this.updateColumnFilters(searchTerm, searchTerms, columnDef);\n      }\n\n      const filterArguments: FilterArguments = {\n        grid: this._grid,\n        operator,\n        searchTerm,\n        searchTerms,\n        columnDef,\n        callback: this.callbackSearchEvent.bind(this)\n      };\n\n      // depending on the Filter type, we will watch the correct event\n      // or use the global default when no filter type is provided\n      let filterType = (columnDef.filter && columnDef.filter.type) ? columnDef.filter.type : FilterType.input;\n      if (!filterType) {\n        filterType = this._gridOptions.defaultFilterType;\n      }\n\n      let filter: Filter;\n      switch (filterType) {\n        case FilterType.custom:\n          if (columnDef && columnDef.filter && columnDef.filter.customFilter) {\n            filter = columnDef.filter.customFilter;\n          }\n          break;\n        case FilterType.select:\n          filter = new Filters.select(this.translate);\n          break;\n        case FilterType.multipleSelect:\n          filter = new Filters.multipleSelect(this.collectionService, this.translate);\n          break;\n        case FilterType.singleSelect:\n          filter = new Filters.singleSelect(this.collectionService, this.translate);\n          break;\n        case FilterType.compoundDate:\n          filter = new Filters.compoundDate(this.translate);\n          break;\n        case FilterType.compoundInput:\n          filter = new Filters.compoundInput(this.translate);\n          break;\n        case FilterType.input:\n        default:\n          filter = new Filters.input();\n          break;\n      }\n\n      if (filter) {\n        filter.init(filterArguments);\n        const filterExistIndex = this._filters.findIndex((filt) => filter.columnDef.name === filt.columnDef.name);\n\n        // add to the filters arrays or replace it when found\n        if (filterExistIndex === -1) {\n          this._filters.push(filter);\n        } else {\n          this._filters[filterExistIndex] = filter;\n        }\n\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // we need to also set again the values in the DOM elements if the values were set by a searchTerm(s)\n        if ((searchTerm || searchTerms) && filter.setValues) {\n          filter.setValues(searchTerm || searchTerms);\n        }\n      }\n    }\n  }\n\n  /**\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\n   * Other services, like Pagination, can then subscribe to it.\n   * @param sender\n   */\n  emitFilterChanged(sender: 'local' | 'remote') {\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\n      let currentFilters: CurrentFilter[] = [];\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentFilters) {\n        currentFilters = backendService.getCurrentFilters() as CurrentFilter[];\n      }\n      this.onFilterChanged.next(currentFilters);\n    } else if (sender === 'local') {\n      this.onFilterChanged.next(this.getCurrentLocalFilters());\n    }\n  }\n\n  /**\n   * When user passes an array of preset filters, we need to pre-polulate each column filter searchTerm(s)\n   * The process is to loop through the preset filters array, find the associated column from columnDefinitions and fill in the filter object searchTerm(s)\n   * This is basically the same as if we would manually add searchTerm(s) to a column filter object in the column definition, but we do it programmatically.\n   * At the end of the day, when creating the Filter (DOM Element), it will use these searchTerm(s) so we can take advantage of that without recoding each Filter type (DOM element)\n   * @param gridOptions\n   * @param columnDefinitions\n   */\n  populateColumnFilterSearchTerms(gridOptions: GridOption, columnDefinitions: Column[]) {\n    if (gridOptions.presets && gridOptions.presets.filters) {\n      const filters = gridOptions.presets.filters;\n      columnDefinitions.forEach((columnDef: Column) =>  {\n        const columnPreset = filters.find((presetFilter: CurrentFilter) => {\n          return presetFilter.columnId === columnDef.id;\n        });\n        if (columnPreset && columnPreset.searchTerm) {\n          columnDef.filter = columnDef.filter || {};\n          columnDef.filter.operator = columnPreset.operator;\n          columnDef.filter.searchTerm = columnPreset.searchTerm;\n        }\n        if (columnPreset && columnPreset.searchTerms) {\n          columnDef.filter = columnDef.filter || {};\n          columnDef.filter.operator = columnPreset.operator || columnDef.filter.operator || OperatorType.in;\n          columnDef.filter.searchTerms = columnPreset.searchTerms;\n        }\n      });\n    }\n    return columnDefinitions;\n  }\n\n  private updateColumnFilters(searchTerm: SearchTerm | undefined, searchTerms: SearchTerm[] | undefined, columnDef: any) {\n    if (searchTerm !== undefined && searchTerm !== null && searchTerm !== '') {\n      this._columnFilters[columnDef.id] = {\n        columnId: columnDef.id,\n        columnDef,\n        searchTerm,\n        operator: (columnDef && columnDef.filter && columnDef.filter.operator) ? columnDef.filter.operator : null,\n        type: (columnDef && columnDef.filter && columnDef.filter.type) ? columnDef.filter.type : FilterType.input\n      };\n    }\n    if (searchTerms) {\n      // this._columnFilters.searchTerms = searchTerms;\n      this._columnFilters[columnDef.id] = {\n        columnId: columnDef.id,\n        columnDef,\n        searchTerms,\n        operator: (columnDef && columnDef.filter && columnDef.filter.operator) ? columnDef.filter.operator : null,\n        type: (columnDef && columnDef.filter && columnDef.filter.type) ? columnDef.filter.type : FilterType.input\n      };\n    }\n  }\n\n  private triggerEvent(slickEvent: any, args: any, e: any) {\n    slickEvent = slickEvent || new Slick.Event();\n\n    // event might have been created as a CustomEvent (e.g. CompoundDateFilter), without being a valid Slick.EventData.\n    // if so we will create a new Slick.EventData and merge it with that CustomEvent to avoid having SlickGrid errors\n    let event = e;\n    if (e && typeof e.isPropagationStopped !== 'function') {\n      event = $.extend({}, new Slick.EventData(), e);\n    }\n    slickEvent.notify(args, event, args.grid);\n  }\n}\n",
    "import { GridOption, Column } from './../models/index';\r\n\r\nexport class SharedService {\r\n  dataView: any;\r\n  grid: any;\r\n  gridOptions: GridOption;\r\n  columnDefinitions: Column[];\r\n  groupItemMetadataProvider: any;\r\n\r\n  init(grid: any, dataView: any, gridOptions: GridOption, columnDefinitions: Column[]) {\r\n    this.grid = grid;\r\n    this.dataView = dataView;\r\n    this.gridOptions = gridOptions;\r\n    this.columnDefinitions = columnDefinitions;\r\n  }\r\n}\r\n",
    "import { DelimiterType } from './../models/delimiterType.enum';\r\nimport { ExportService } from './export.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { FilterService } from './filter.service';\r\nimport {\r\n  CellArgs,\r\n  CustomGridMenu,\r\n  Column,\r\n  GraphqlResult,\r\n  GridMenu,\r\n  GridOption,\r\n  HeaderButtonOnCommandArgs,\r\n  HeaderMenuOnCommandArgs,\r\n  HeaderMenuOnBeforeMenuShowArgs,\r\n  FileType\r\n} from './../models/index';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { castToPromise } from './../services/utilities';\r\nimport { SharedService } from './shared.service';\r\n\r\n// using external non-typed js libraries\r\ndeclare var Slick: any;\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class ControlAndPluginService {\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _gridOptions: GridOption;\r\n  private _columnDefinitions: Column[];\r\n  visibleColumns: Column[];\r\n\r\n  // controls & plugins\r\n  autoTooltipPlugin: any;\r\n  checkboxSelectorPlugin: any;\r\n  columnPickerControl: any;\r\n  headerButtonsPlugin: any;\r\n  headerMenuPlugin: any;\r\n  gridMenuControl: any;\r\n  rowSelectionPlugin: any;\r\n\r\n  constructor(private exportService: ExportService, private filterService: FilterService, private sharedService: SharedService, private translate: TranslateService) { }\r\n\r\n  /**\r\n   * Attach/Create different Controls or Plugins after the Grid is created\r\n   * @param grid\r\n   * @param columnDefinitions\r\n   * @param options\r\n   * @param dataView\r\n   */\r\n  attachDifferentControlOrPlugins() {\r\n    this._grid = this.sharedService.grid;\r\n    this._gridOptions = this.sharedService.gridOptions;\r\n    this._dataView = this.sharedService.dataView;\r\n    this._columnDefinitions = this.sharedService.columnDefinitions;\r\n    this.visibleColumns = this.sharedService.columnDefinitions;\r\n\r\n    if (this._gridOptions.enableColumnPicker) {\r\n      this.columnPickerControl = this.createColumnPicker(this._grid, this._columnDefinitions, this._gridOptions);\r\n    }\r\n    if (this._gridOptions.enableGridMenu) {\r\n      this.gridMenuControl = this.createGridMenu(this._grid, this._columnDefinitions, this._gridOptions);\r\n    }\r\n    if (this._gridOptions.enableAutoTooltip) {\r\n      this.autoTooltipPlugin = new Slick.AutoTooltips(this._gridOptions.autoTooltipOptions || {});\r\n      this._grid.registerPlugin(this.autoTooltipPlugin);\r\n    }\r\n\r\n    // register the group item metadata provider to add expand/collapse group handlers\r\n    if (this._gridOptions.enableGrouping) {\r\n      const groupItemMetaProvider = this.sharedService.groupItemMetadataProvider || {};\r\n      this._grid.registerPlugin(groupItemMetaProvider);\r\n    }\r\n\r\n    if (this._gridOptions.enableCheckboxSelector) {\r\n      // when enabling the Checkbox Selector Plugin, we need to also watch onClick events to perform certain actions\r\n      // the selector column has to be create BEFORE the grid (else it behaves oddly), but we can only watch grid events AFTER the grid is created\r\n      this._grid.registerPlugin(this.checkboxSelectorPlugin);\r\n\r\n      // this also requires the Row Selection Model to be registered as well\r\n      if (!this.rowSelectionPlugin) {\r\n        this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\r\n        this._grid.setSelectionModel(this.rowSelectionPlugin);\r\n      }\r\n    }\r\n    if (this._gridOptions.enableRowSelection) {\r\n      this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\r\n      this._grid.setSelectionModel(this.rowSelectionPlugin);\r\n    }\r\n    if (this._gridOptions.enableHeaderButton) {\r\n      this.headerButtonsPlugin = new Slick.Plugins.HeaderButtons(this._gridOptions.headerButton || {});\r\n      this._grid.registerPlugin(this.headerButtonsPlugin);\r\n      this.headerButtonsPlugin.onCommand.subscribe((e: Event, args: HeaderButtonOnCommandArgs) => {\r\n        if (this._gridOptions.headerButton && typeof this._gridOptions.headerButton.onCommand === 'function') {\r\n          this._gridOptions.headerButton.onCommand(e, args);\r\n        }\r\n      });\r\n    }\r\n    if (this._gridOptions.enableHeaderMenu) {\r\n      const headerMenuOptions = this._gridOptions.headerMenu || {};\r\n      headerMenuOptions.minWidth = headerMenuOptions.minWidth || 140;\r\n      headerMenuOptions.autoAlignOffset = headerMenuOptions.autoAlignOffset || 12;\r\n      this.headerMenuPlugin = new Slick.Plugins.HeaderMenu(headerMenuOptions);\r\n      this._grid.registerPlugin(this.headerMenuPlugin);\r\n      this.headerMenuPlugin.onCommand.subscribe((e: Event, args: HeaderMenuOnCommandArgs) => {\r\n        if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onCommand === 'function') {\r\n          this._gridOptions.headerMenu.onCommand(e, args);\r\n        }\r\n      });\r\n      this.headerMenuPlugin.onCommand.subscribe((e: Event, args: HeaderMenuOnBeforeMenuShowArgs) => {\r\n        if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onBeforeMenuShow === 'function') {\r\n          this._gridOptions.headerMenu.onBeforeMenuShow(e, args);\r\n        }\r\n      });\r\n    }\r\n    if (this._gridOptions.registerPlugins !== undefined) {\r\n      if (Array.isArray(this._gridOptions.registerPlugins)) {\r\n        this._gridOptions.registerPlugins.forEach((plugin) => {\r\n          this._grid.registerPlugin(plugin);\r\n        });\r\n      } else {\r\n        this._grid.registerPlugin(this._gridOptions.registerPlugins);\r\n      }\r\n    }\r\n  }\r\n\r\n  createColumnPicker(grid: any, columnDefinitions: Column[], options: GridOption) {\r\n    // localization support for the picker\r\n    const forceFitTitle = options.enableTranslate ? this.translate.instant('FORCE_FIT_COLUMNS') : 'Force fit columns';\r\n    const syncResizeTitle = options.enableTranslate ? this.translate.instant('SYNCHRONOUS_RESIZE') : 'Synchronous resize';\r\n\r\n    options.columnPicker = options.columnPicker || {};\r\n    options.columnPicker.forceFitTitle = options.columnPicker.forceFitTitle || forceFitTitle;\r\n    options.columnPicker.syncResizeTitle = options.columnPicker.syncResizeTitle || syncResizeTitle;\r\n\r\n    this.columnPickerControl = new Slick.Controls.ColumnPicker(columnDefinitions, grid, options);\r\n    if (grid && options.enableColumnPicker) {\r\n      this.columnPickerControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\r\n        if (options.columnPicker && typeof options.columnPicker.onColumnsChanged === 'function') {\r\n          options.columnPicker.onColumnsChanged(e, args);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create (or re-create) Grid Menu and expose all the available hooks that user can subscribe (onCommand, onMenuClose, ...)\r\n   * @param grid\r\n   * @param columnDefinitions\r\n   * @param options\r\n   */\r\n  createGridMenu(grid: any, columnDefinitions: Column[], options: GridOption) {\r\n    options.gridMenu = { ...this.getDefaultGridMenuOptions(), ...options.gridMenu };\r\n    this.addGridMenuCustomCommands(grid, options);\r\n\r\n    const gridMenuControl = new Slick.Controls.GridMenu(columnDefinitions, grid, options);\r\n    if (grid && options.gridMenu) {\r\n      gridMenuControl.onBeforeMenuShow.subscribe((e: Event, args: CellArgs) => {\r\n        if (options.gridMenu && typeof options.gridMenu.onBeforeMenuShow === 'function') {\r\n          options.gridMenu.onBeforeMenuShow(e, args);\r\n        }\r\n      });\r\n      gridMenuControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\r\n        if (options.gridMenu && typeof options.gridMenu.onColumnsChanged === 'function') {\r\n          options.gridMenu.onColumnsChanged(e, args);\r\n        }\r\n      });\r\n      gridMenuControl.onCommand.subscribe((e: Event, args: CellArgs) => {\r\n        if (options.gridMenu && typeof options.gridMenu.onCommand === 'function') {\r\n          options.gridMenu.onCommand(e, args);\r\n        }\r\n      });\r\n      gridMenuControl.onMenuClose.subscribe((e: Event, args: CellArgs) => {\r\n        if (options.gridMenu && typeof options.gridMenu.onMenuClose === 'function') {\r\n          options.gridMenu.onMenuClose(e, args);\r\n        }\r\n\r\n        // we also want to resize the columns if the user decided to hide certain column(s)\r\n        if (grid && typeof grid.autosizeColumns === 'function') {\r\n          // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree)\r\n          const gridUid = grid.getUID();\r\n          if (gridUid && $(`.${gridUid}`).length > 0) {\r\n            grid.autosizeColumns();\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return gridMenuControl;\r\n  }\r\n\r\n  hideColumn(column: Column) {\r\n    if (this._grid && this.visibleColumns) {\r\n      const columnIndex = this._grid.getColumnIndex(column.id);\r\n      this.visibleColumns = this.removeColumnByIndex(this.visibleColumns, columnIndex);\r\n      this._grid.setColumns(this.visibleColumns);\r\n    }\r\n  }\r\n\r\n  removeColumnByIndex(array: any[], index: number) {\r\n    return array.filter((el: any, i: number) => {\r\n      return index !== i;\r\n    });\r\n  }\r\n\r\n  autoResizeColumns() {\r\n    this._grid.autosizeColumns();\r\n  }\r\n\r\n  dispose() {\r\n    this._grid = null;\r\n    this._dataView = null;\r\n    this.visibleColumns = [];\r\n\r\n    if (this.columnPickerControl) {\r\n      this.columnPickerControl.destroy();\r\n      this.columnPickerControl = null;\r\n    }\r\n    if (this.gridMenuControl) {\r\n      this.gridMenuControl.destroy();\r\n      this.gridMenuControl = null;\r\n    }\r\n    if (this.rowSelectionPlugin) {\r\n      this.rowSelectionPlugin.destroy();\r\n      this.rowSelectionPlugin = null;\r\n    }\r\n    if (this.checkboxSelectorPlugin) {\r\n      this.checkboxSelectorPlugin.destroy();\r\n      this.checkboxSelectorPlugin = null;\r\n    }\r\n    if (this.autoTooltipPlugin) {\r\n      this.autoTooltipPlugin.destroy();\r\n      this.autoTooltipPlugin = null;\r\n    }\r\n    if (this.headerButtonsPlugin) {\r\n      this.headerButtonsPlugin.destroy();\r\n      this.headerButtonsPlugin = null;\r\n    }\r\n    if (this.headerMenuPlugin) {\r\n      this.headerMenuPlugin.destroy();\r\n      this.headerMenuPlugin = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create Grid Menu with Custom Commands if user has enabled Filters and/or uses a Backend Service (OData, GraphQL)\r\n   * @param grid\r\n   * @param options\r\n   */\r\n  private addGridMenuCustomCommands(grid: any, options: GridOption) {\r\n    const backendApi = options.backendServiceApi || options.onBackendEventApi || null;\r\n\r\n    if (options.enableFiltering) {\r\n      // show grid menu: clear all filters\r\n      if (options && options.gridMenu && options.gridMenu.showClearAllFiltersCommand && options.gridMenu.customItems && options.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'clear-filter').length === 0) {\r\n        options.gridMenu.customItems.push(\r\n          {\r\n            iconCssClass: 'fa fa-filter text-danger',\r\n            title: options.enableTranslate ? this.translate.instant('CLEAR_ALL_FILTERS') : 'Clear All Filters',\r\n            disabled: false,\r\n            command: 'clear-filter',\r\n            positionOrder: 50\r\n          }\r\n        );\r\n      }\r\n      // show grid menu: toggle filter row\r\n      if (options && options.gridMenu && options.gridMenu.showToggleFilterCommand && options.gridMenu.customItems && options.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'toggle-filter').length === 0) {\r\n        options.gridMenu.customItems.push(\r\n          {\r\n            iconCssClass: 'fa fa-random',\r\n            title: options.enableTranslate ? this.translate.instant('TOGGLE_FILTER_ROW') : 'Toggle Filter Row',\r\n            disabled: false,\r\n            command: 'toggle-filter',\r\n            positionOrder: 51\r\n          }\r\n        );\r\n      }\r\n\r\n      // show grid menu: refresh dataset\r\n      if (options && options.gridMenu && options.gridMenu.showRefreshDatasetCommand && backendApi && options.gridMenu.customItems && options.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'refresh-dataset').length === 0) {\r\n        options.gridMenu.customItems.push(\r\n          {\r\n            iconCssClass: 'fa fa-refresh',\r\n            title: options.enableTranslate ? this.translate.instant('REFRESH_DATASET') : 'Refresh Dataset',\r\n            disabled: false,\r\n            command: 'refresh-dataset',\r\n            positionOrder: 54\r\n          }\r\n        );\r\n      }\r\n\r\n    }\r\n\r\n    // show grid menu: export to file\r\n    if (options && options.enableExport && options.gridMenu && options.gridMenu.showExportCsvCommand && options.gridMenu.customItems && options.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'export-csv').length === 0) {\r\n      options.gridMenu.customItems.push(\r\n        {\r\n          iconCssClass: 'fa fa-download',\r\n          title: options.enableTranslate ? this.translate.instant('EXPORT_TO_CSV') : 'Export in CSV format',\r\n          disabled: false,\r\n          command: 'export-csv',\r\n          positionOrder: 52\r\n        }\r\n      );\r\n    }\r\n    // show grid menu: export to text file as tab delimited\r\n    if (options && options.enableExport && options.gridMenu && options.gridMenu.showExportTextDelimitedCommand && options.gridMenu.customItems && options.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'export-text-delimited').length === 0) {\r\n      options.gridMenu.customItems.push(\r\n        {\r\n          iconCssClass: 'fa fa-download',\r\n          title: options.enableTranslate ? this.translate.instant('EXPORT_TO_TAB_DELIMITED') : 'Export in Text format (Tab delimited)',\r\n          disabled: false,\r\n          command: 'export-text-delimited',\r\n          positionOrder: 53\r\n        }\r\n      );\r\n    }\r\n\r\n    // Command callback, what will be executed after command is clicked\r\n    if (options.gridMenu && options.gridMenu.customItems.length > 0) {\r\n      options.gridMenu.onCommand = (e, args) => {\r\n        if (args && args.command) {\r\n          switch (args.command) {\r\n            case 'clear-filter':\r\n              this.filterService.clearFilters();\r\n              this._dataView.refresh();\r\n              break;\r\n            case 'export-csv':\r\n              this.exportService.exportToFile({\r\n                delimiter: DelimiterType.comma,\r\n                filename: 'export',\r\n                format: FileType.csv,\r\n                useUtf8WithBom: true\r\n              });\r\n              break;\r\n            case 'export-text-delimited':\r\n              this.exportService.exportToFile({\r\n                delimiter: DelimiterType.tab,\r\n                filename: 'export',\r\n                format: FileType.txt,\r\n                useUtf8WithBom: true\r\n              });\r\n              break;\r\n            case 'toggle-filter':\r\n              grid.setHeaderRowVisibility(!grid.getOptions().showHeaderRow);\r\n              break;\r\n            case 'toggle-toppanel':\r\n              grid.setTopPanelVisibility(!grid.getOptions().showTopPanel);\r\n              break;\r\n            case 'clear-filter':\r\n              this.filterService.clearFilters();\r\n              this._dataView.refresh();\r\n              break;\r\n            case 'refresh-dataset':\r\n              this.refreshBackendDataset(options);\r\n              break;\r\n            default:\r\n              alert('Command: ' + args.command);\r\n              break;\r\n          }\r\n        }\r\n      };\r\n    }\r\n\r\n\r\n\r\n    // add the custom \"Commands\" title if there are any commands\r\n    if (options && options.gridMenu && options.gridMenu.customItems && options.gridMenu.customItems.length > 0) {\r\n      const customTitle = options.enableTranslate ? this.translate.instant('COMMANDS') : 'Commands';\r\n      options.gridMenu.customTitle = options.gridMenu.customTitle || customTitle;\r\n\r\n      // sort the custom items by their position in the list\r\n      options.gridMenu.customItems.sort((itemA, itemB) => {\r\n        if (itemA && itemB && itemA.hasOwnProperty('positionOrder') && itemB.hasOwnProperty('positionOrder')) {\r\n          return itemA.positionOrder - itemB.positionOrder;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return default Grid Menu options\r\n   */\r\n  private getDefaultGridMenuOptions(): GridMenu {\r\n    return {\r\n      columnTitle: this.translate.instant('COLUMNS') || 'Columns',\r\n      forceFitTitle: this.translate.instant('FORCE_FIT_COLUMNS') || 'Force fit columns',\r\n      syncResizeTitle: this.translate.instant('SYNCHRONOUS_RESIZE') || 'Synchronous resize',\r\n      iconCssClass: 'fa fa-bars',\r\n      menuWidth: 18,\r\n      customTitle: undefined,\r\n      customItems: [],\r\n      showClearAllFiltersCommand: true,\r\n      showRefreshDatasetCommand: true,\r\n      showToggleFilterCommand: true\r\n    };\r\n  }\r\n\r\n  refreshBackendDataset(gridOptions: GridOption) {\r\n    let query;\r\n    const backendApi = gridOptions.backendServiceApi || gridOptions.onBackendEventApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (backendApi.service) {\r\n      query = backendApi.service.buildQuery();\r\n    }\r\n\r\n    if (query && query !== '') {\r\n      if (backendApi.preProcess) {\r\n        backendApi.preProcess();\r\n      }\r\n\r\n      // the process could be an Observable (like HttpClient) or a Promise\r\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n      const observableOrPromise = backendApi.process(query);\r\n\r\n      castToPromise(observableOrPromise).then((processResult: GraphqlResult | any) => {\r\n        // from the result, call our internal post process to update the Dataset and Pagination info\r\n        if (processResult && backendApi.internalPostProcess) {\r\n          backendApi.internalPostProcess(processResult);\r\n        }\r\n\r\n        // send the response process to the postProcess callback\r\n        if (backendApi.postProcess) {\r\n          backendApi.postProcess(processResult);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset all the Grid Menu options which have text to translate\r\n   * @param grid menu object\r\n   */\r\n  private resetGridMenuTranslations(gridMenu: GridMenu): GridMenu {\r\n    // we will reset the custom items array since the commands title have to be translated too (no worries, we will re-create it later)\r\n    gridMenu.customItems = [];\r\n    delete gridMenu.customTitle;\r\n\r\n    gridMenu.columnTitle = this.translate.instant('COLUMNS') || 'Columns';\r\n    gridMenu.forceFitTitle = this.translate.instant('FORCE_FIT_COLUMNS') || 'Force fit columns';\r\n    gridMenu.syncResizeTitle = this.translate.instant('SYNCHRONOUS_RESIZE') || 'Synchronous resize';\r\n\r\n    return gridMenu;\r\n  }\r\n\r\n  /**\r\n   * Translate the Column Picker and it's last 2 checkboxes\r\n   * Note that the only way that seems to work is to destroy and re-create the Column Picker\r\n   * Changing only the columnPicker.columnTitle with i18n translate was not enough.\r\n   */\r\n  translateColumnPicker() {\r\n    // destroy and re-create the Column Picker which seems to be the only way to translate properly\r\n    if (this.columnPickerControl) {\r\n      this.columnPickerControl.destroy();\r\n      this.columnPickerControl = null;\r\n    }\r\n\r\n    this._gridOptions.columnPicker = undefined;\r\n    this.createColumnPicker(this._grid, this.visibleColumns, this._gridOptions);\r\n  }\r\n\r\n  /**\r\n   * Translate the Grid Menu ColumnTitle and CustomTitle.\r\n   * Note that the only way that seems to work is to destroy and re-create the Grid Menu\r\n   * Changing only the gridMenu.columnTitle with i18n translate was not enough.\r\n   */\r\n  translateGridMenu() {\r\n    // destroy and re-create the Grid Menu which seems to be the only way to translate properly\r\n    this.gridMenuControl.destroy();\r\n\r\n    // reset all Grid Menu options that have translation text & then re-create the Grid Menu and also the custom items array\r\n    if (this._gridOptions && this._gridOptions.gridMenu) {\r\n      this._gridOptions.gridMenu = this.resetGridMenuTranslations(this._gridOptions.gridMenu);\r\n    }\r\n    this.createGridMenu(this._grid, this.visibleColumns, this._gridOptions);\r\n  }\r\n\r\n  /**\r\n   * Translate manually the header titles.\r\n   * We could optionally pass a locale (that will change currently loaded locale), else it will use current locale\r\n   * @param locale locale to use\r\n   */\r\n  translateHeaders(locale?: string) {\r\n    if (locale) {\r\n      this.translate.use(locale);\r\n    }\r\n\r\n    for (const column of this._columnDefinitions) {\r\n      if (column.headerKey) {\r\n        column.name = this.translate.instant(column.headerKey);\r\n      }\r\n    }\r\n\r\n    // calling setColumns() will trigger a grid re-render\r\n    this._grid.setColumns(this._columnDefinitions);\r\n  }\r\n\r\n  /**\r\n   * Attach/Create different plugins before the Grid creation.\r\n   * For example the multi-select have to be added to the column definition before the grid is created to work properly\r\n   * @param columnDefinitions\r\n   * @param options\r\n   */\r\n  createPluginBeforeGridCreation(columnDefinitions: Column[], options: GridOption) {\r\n    if (options.enableCheckboxSelector) {\r\n      this.checkboxSelectorPlugin = new Slick.CheckboxSelectColumn(options.checkboxSelector || {});\r\n      const selectionColumn: Column = this.checkboxSelectorPlugin.getColumnDefinition();\r\n      selectionColumn.excludeFromExport = true;\r\n      selectionColumn.excludeFromQuery = true;\r\n      columnDefinitions.unshift(selectionColumn);\r\n    }\r\n  }\r\n}\r\n",
    "/**\r\n * This GraphqlQueryBuilder class is a lib that already exist\r\n * but was causing issues with TypeScript, RequireJS and other bundler/packagers\r\n * and so I rewrote it in pure TypeScript.\r\n *\r\n * The previous lib can be viewed here at this Github\r\n * https://github.com/codemeasandwich/graphql-query-builder\r\n */\r\nexport default class GraphqlQueryBuilder {\r\n  alias: string;\r\n  head: any[] = [];\r\n  body: any;\r\n\r\n  /* Constructor, query/mutator you wish to use, and an alias or filter arguments. */\r\n  constructor(private queryFnName: string, aliasOrFilter?: string | object) {\r\n    if (typeof aliasOrFilter === 'function') {\r\n      this.alias = aliasOrFilter;\r\n    } else if (typeof aliasOrFilter === 'object') {\r\n      this.filter(aliasOrFilter);\r\n    } else if (undefined === aliasOrFilter && 2 === arguments.length) {\r\n      throw new TypeError(`You have passed undefined as Second argument to \"Query\"`);\r\n    } else if (undefined !== aliasOrFilter) {\r\n      throw new TypeError(`Second argument to \"Query\" should be an alias name(String) or filter arguments(Object). was passed ${aliasOrFilter}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The parameters to run the query against.\r\n   * @param filters An object mapping attribute to values\r\n   */\r\n  filter(filters: any) {\r\n    for (const prop of Object.keys(filters)) {\r\n      if (typeof filters[prop] === 'function') {\r\n        continue;\r\n      }\r\n      const val = this.getGraphQLValue(filters[prop]);\r\n      if (val === '{}') {\r\n        continue;\r\n      }\r\n      this.head.push(`${prop}:${val}`);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Outlines the properties you wish to be returned from the query.\r\n   * @param properties representing each attribute you want Returned\r\n   */\r\n  find(...searches: any[]) { // THIS NEED TO BE A \"FUNCTION\" to scope 'arguments'\r\n    if (!searches) {\r\n      throw new TypeError(`find value can not be >>falsy<<`);\r\n    }\r\n    // if its a string.. it may have other values\r\n    // else it sould be an Object or Array of maped values\r\n    const searchKeys = (searches.length === 1 && Array.isArray(searches[0])) ? searches[0] : searches;\r\n    this.body = this.parceFind(searchKeys);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set an alias for this result.\r\n   * @param alias\r\n   */\r\n  setAlias(alias: string) {\r\n    this.alias = alias;\r\n  }\r\n\r\n  /**\r\n   * Return to the formatted query string\r\n   * @return\r\n   */\r\n  toString() {\r\n    if (this.body === undefined) {\r\n      throw new ReferenceError(`return properties are not defined. use the 'find' function to defined them`);\r\n    }\r\n\r\n    return `${(this.alias) ? (this.alias + ':') : ''} ${this.queryFnName} ${(this.head.length > 0) ? '(' + this.head.join(',') + ')' : ''}  { ${this.body} }`;\r\n  }\r\n\r\n  // --\r\n  // PRIVATE FUNCTIONS\r\n  // -----------------\r\n\r\n  private parceFind(_levelA: any[]) {\r\n    const propsA = _levelA.map((currentValue, index) => {\r\n      const itemX = _levelA[index];\r\n\r\n      if (itemX instanceof GraphqlQueryBuilder) {\r\n        return itemX.toString();\r\n      } else if (!Array.isArray(itemX) && typeof itemX === 'object') {\r\n        const propsAA = Object.keys(itemX);\r\n        if (1 !== propsAA.length) {\r\n          throw new RangeError(`Alias objects should only have one value. was passed: ${JSON.stringify(itemX)}`);\r\n        }\r\n        const propS = propsAA[0];\r\n        const item = itemX[propS];\r\n\r\n        if (Array.isArray(item)) {\r\n          return new GraphqlQueryBuilder(propS).find(item);\r\n        }\r\n        return `${propS} : ${item} `;\r\n      } else if (typeof itemX === 'string') {\r\n        return itemX;\r\n      } else {\r\n        throw new RangeError(`cannot handle Find value of ${itemX}`);\r\n      }\r\n    });\r\n\r\n    return propsA.join(',');\r\n  }\r\n\r\n  private getGraphQLValue(value: any) {\r\n    if (typeof value === 'string') {\r\n      value = JSON.stringify(value);\r\n    } else if (Array.isArray(value)) {\r\n      value = value.map(item => {\r\n        return this.getGraphQLValue(item);\r\n      }).join();\r\n      value = `[${value}]`;\r\n    } else if (value instanceof Date) {\r\n      value = JSON.stringify(value);\r\n    } else if (value !== null && typeof value === 'object') {\r\n      value = this.objectToString(value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private objectToString(obj: any) {\r\n    const sourceA = [];\r\n\r\n    for (const prop of Object.keys(obj)) {\r\n      if (typeof obj[prop] === 'function') {\r\n        continue;\r\n      }\r\n      sourceA.push(`${prop}:${this.getGraphQLValue(obj[prop])}`);\r\n    }\r\n    return `{${sourceA.join()}}`;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { mapOperatorType, mapOperatorByFilterType, mapOperatorByFieldType } from './utilities';\r\nimport {\r\n  BackendService,\r\n  Column,\r\n  ColumnFilter,\r\n  ColumnFilters,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  FieldType,\r\n  FilterChangedArgs,\r\n  GraphqlCursorPaginationOption,\r\n  GraphqlDatasetFilter,\r\n  GraphqlFilteringOption,\r\n  GraphqlPaginationOption,\r\n  GraphqlServiceOption,\r\n  GraphqlSortingOption,\r\n  GridOption,\r\n  Pagination,\r\n  PaginationChangedArgs,\r\n  SortChanged,\r\n  SortChangedArgs,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport QueryBuilder from './graphqlQueryBuilder';\r\n\r\n// timer for keeping track of user typing waits\r\nlet timer: any;\r\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\r\nconst DEFAULT_ITEMS_PER_PAGE = 25;\r\nconst DEFAULT_PAGE_SIZE = 20;\r\n\r\n@Injectable()\r\nexport class GraphqlService implements BackendService {\r\n  private _currentFilters: ColumnFilters | CurrentFilter[];\r\n  private _currentPagination: CurrentPagination;\r\n  private _currentSorters: CurrentSorter[];\r\n  private _columnDefinitions: Column[];\r\n  private _gridOptions: GridOption;\r\n  private _grid: any;\r\n  options: GraphqlServiceOption;\r\n  pagination: Pagination | undefined;\r\n  defaultOrderBy: GraphqlSortingOption = { field: 'id', direction: SortDirection.ASC };\r\n  defaultPaginationOptions: GraphqlPaginationOption | GraphqlCursorPaginationOption = {\r\n    first: DEFAULT_ITEMS_PER_PAGE,\r\n    offset: 0\r\n  };\r\n\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  /**\r\n   * Build the GraphQL query, since the service include/exclude cursor, the output query will be different.\r\n   * @param serviceOptions GraphqlServiceOption\r\n   */\r\n  buildQuery() {\r\n    if (!this.options || !this.options.datasetName || (!this._columnDefinitions && !this.options.columnDefinitions)) {\r\n      throw new Error('GraphQL Service requires \"datasetName\" & \"columnDefinitions\" properties for it to work');\r\n    }\r\n\r\n    // get the column definitions and exclude some if they were tagged as excluded\r\n    let columnDefinitions = this._columnDefinitions || this.options.columnDefinitions;\r\n    columnDefinitions = columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\r\n\r\n    const queryQb = new QueryBuilder('query');\r\n    const datasetQb = new QueryBuilder(this.options.datasetName);\r\n    const pageInfoQb = new QueryBuilder('pageInfo');\r\n    const dataQb = (this.options.isWithCursor) ? new QueryBuilder('edges') : new QueryBuilder('nodes');\r\n\r\n    // get all the columnds Ids for the filters to work\r\n    let columnIds: string[] = [];\r\n    if (columnDefinitions && Array.isArray(columnDefinitions)) {\r\n      for (const column of columnDefinitions) {\r\n        columnIds.push(column.field);\r\n\r\n        // if extra \"fields\" are passed, also push them to columnIds\r\n        if (column.fields) {\r\n          columnIds.push(...column.fields);\r\n        }\r\n      }\r\n      // columnIds = columnDefinitions.map((column) => column.field);\r\n    } else {\r\n      columnIds = this.options.columnIds || [];\r\n    }\r\n\r\n    // Slickgrid also requires the \"id\" field to be part of DataView\r\n    // add it to the GraphQL query if it wasn't already part of the list\r\n    if (columnIds.indexOf('id') === -1) {\r\n      columnIds.unshift('id');\r\n    }\r\n\r\n    const filters = this.buildFilterQuery(columnIds);\r\n\r\n    if (this.options.isWithCursor) {\r\n      // ...pageInfo { hasNextPage, endCursor }, edges { cursor, node { _filters_ } }\r\n      pageInfoQb.find('hasNextPage', 'endCursor');\r\n      dataQb.find(['cursor', { node: filters }]);\r\n    } else {\r\n      // ...pageInfo { hasNextPage }, nodes { _filters_ }\r\n      pageInfoQb.find('hasNextPage');\r\n      dataQb.find(filters);\r\n    }\r\n\r\n    datasetQb.find(['totalCount', pageInfoQb, dataQb]);\r\n\r\n    // add dataset filters, could be Pagination and SortingFilters and/or FieldFilters\r\n    const datasetFilters: GraphqlDatasetFilter = {\r\n      ...this.options.paginationOptions,\r\n      first: ((this.options.paginationOptions && this.options.paginationOptions.first) ? this.options.paginationOptions.first : ((this.pagination && this.pagination.pageSize) ? this.pagination.pageSize : null)) || this.defaultPaginationOptions.first\r\n    };\r\n\r\n    if (!this.options.isWithCursor) {\r\n      datasetFilters.offset = ((this.options.paginationOptions && this.options.paginationOptions.hasOwnProperty('offset')) ? +this.options.paginationOptions['offset'] : 0);\r\n    }\r\n\r\n    if (this.options.sortingOptions && Array.isArray(this.options.sortingOptions) && this.options.sortingOptions.length > 0) {\r\n      // orderBy: [{ field:x, direction: 'ASC' }]\r\n      datasetFilters.orderBy = this.options.sortingOptions;\r\n    }\r\n    if (this.options.filteringOptions && Array.isArray(this.options.filteringOptions) && this.options.filteringOptions.length > 0) {\r\n      // filterBy: [{ field: date, operator: '>', value: '2000-10-10' }]\r\n      datasetFilters.filterBy = this.options.filteringOptions;\r\n    }\r\n    if (this.options.addLocaleIntoQuery) {\r\n      // first: 20, ... locale: \"en-CA\"\r\n      datasetFilters.locale = this.translate.currentLang || 'en';\r\n    }\r\n\r\n    // query { users(first: 20, orderBy: [], filterBy: [])}\r\n    datasetQb.filter(datasetFilters);\r\n    queryQb.find(datasetQb);\r\n\r\n    const enumSearchProperties = ['direction:', 'field:', 'operator:'];\r\n    return this.trimDoubleQuotesOnEnumField(queryQb.toString(), enumSearchProperties, this.options.keepArgumentFieldDoubleQuotes || false);\r\n  }\r\n\r\n  /**\r\n   * From an input array of strings, we want to build a GraphQL query string.\r\n   * The process has to take the dot notation and parse it into a valid GraphQL query\r\n   * Following this SO answer https://stackoverflow.com/a/47705476/1212166\r\n   *\r\n   * INPUT\r\n   *  ['firstName', 'lastName', 'billing.address.street', 'billing.address.zip']\r\n   * OUTPUT\r\n   * firstName, lastName, billing{address{street, zip}}\r\n   * @param inputArray\r\n   */\r\n  buildFilterQuery(inputArray: string[]) {\r\n\r\n    const set = (o: any = {}, a: any) => {\r\n      const k = a.shift();\r\n      o[k] = a.length ? set(o[k], a) : null;\r\n      return o;\r\n    };\r\n\r\n    const output = inputArray.reduce((o: any, a: string) => set(o, a.split('.')), {});\r\n\r\n    return JSON.stringify(output)\r\n      .replace(/\\\"|\\:|null/g, '')\r\n      .replace(/^\\{/, '')\r\n      .replace(/\\}$/, '');\r\n  }\r\n\r\n  init(serviceOptions?: GraphqlServiceOption, pagination?: Pagination, grid?: any): void {\r\n    this._grid = grid;\r\n    this.options = serviceOptions || {};\r\n    this.pagination = pagination;\r\n\r\n    if (grid && grid.getColumns && grid.getOptions) {\r\n      this._columnDefinitions = grid.getColumns();\r\n      this._gridOptions = grid.getOptions();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get an initialization of Pagination options\r\n   * @return Pagination Options\r\n   */\r\n  getInitPaginationOptions(): GraphqlDatasetFilter {\r\n    return (this.options.isWithCursor) ? { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE) } : { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE), offset: 0 };\r\n  }\r\n\r\n  /** Get the GraphQL dataset name */\r\n  getDatasetName(): string {\r\n    return this.options.datasetName || '';\r\n  }\r\n\r\n  /** Get the Filters that are currently used by the grid */\r\n  getCurrentFilters(): ColumnFilters | CurrentFilter[] {\r\n    return this._currentFilters;\r\n  }\r\n\r\n  /** Get the Pagination that is currently used by the grid */\r\n  getCurrentPagination(): CurrentPagination {\r\n    return this._currentPagination;\r\n  }\r\n\r\n  /** Get the Sorters that are currently used by the grid */\r\n  getCurrentSorters(): CurrentSorter[] {\r\n    return this._currentSorters;\r\n  }\r\n\r\n  /*\r\n   * Reset the pagination options\r\n   */\r\n  resetPaginationOptions() {\r\n    let paginationOptions;\r\n    if (this.options.isWithCursor) {\r\n      // first, last, after, before\r\n      paginationOptions = {\r\n        after: '',\r\n        before: undefined,\r\n        last: undefined\r\n      } as GraphqlCursorPaginationOption;\r\n    } else {\r\n      // first, last, offset\r\n      paginationOptions = (this.options.paginationOptions || this.getInitPaginationOptions()) as GraphqlPaginationOption;\r\n      paginationOptions.offset = 0;\r\n    }\r\n\r\n    // save current pagination as Page 1 and page size as \"first\" set size\r\n    this._currentPagination = {\r\n      pageNumber: 1,\r\n      pageSize: paginationOptions.first\r\n    };\r\n\r\n    this.updateOptions({ paginationOptions });\r\n  }\r\n\r\n  updateOptions(serviceOptions?: GraphqlServiceOption) {\r\n    this.options = { ...this.options, ...serviceOptions };\r\n  }\r\n\r\n  /*\r\n   * FILTERING\r\n   */\r\n  onFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\r\n    const gridOptions: GridOption = this._gridOptions || args.grid.getOptions();\r\n    const backendApi = gridOptions.backendServiceApi || gridOptions.onBackendEventApi;\r\n\r\n    if (backendApi === undefined) {\r\n      throw new Error('Something went wrong in the GraphqlService, \"backendServiceApi\" is not initialized');\r\n    }\r\n\r\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\r\n    let debounceTypingDelay = 0;\r\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\r\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\r\n    }\r\n\r\n    const promise = new Promise<string>((resolve, reject) => {\r\n      if (!args || !args.grid) {\r\n        throw new Error('Something went wrong when trying create the GraphQL Backend Service, it seems that \"args\" is not populated correctly');\r\n      }\r\n\r\n      // reset Pagination, then build the GraphQL query which we will use in the WebAPI callback\r\n      // wait a minimum user typing inactivity before processing any query\r\n      clearTimeout(timer);\r\n      timer = setTimeout(() => {\r\n        // loop through all columns to inspect filters & set the query\r\n        this.updateFilters(args.columnFilters, false);\r\n\r\n        this.resetPaginationOptions();\r\n        resolve(this.buildQuery());\r\n      }, debounceTypingDelay);\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  /*\r\n   * PAGINATION\r\n   * With cursor, the query can have 4 arguments (first, after, last, before), for example:\r\n   *   users (first:20, after:\"YXJyYXljb25uZWN0aW9uOjM=\") {\r\n   *     totalCount\r\n   *     pageInfo {\r\n   *       hasNextPage\r\n   *       endCursor\r\n   *     }\r\n   *     edges {\r\n   *       cursor\r\n   *       node {\r\n   *         name\r\n   *         gender\r\n   *       }\r\n   *     }\r\n   *   }\r\n   * Without cursor, the query can have 3 arguments (first, last, offset), for example:\r\n   *   users (first:20, offset: 10) {\r\n   *     totalCount\r\n   *     pageInfo {\r\n   *       hasNextPage\r\n   *     }\r\n   *     nodes {\r\n   *       name\r\n   *       gender\r\n   *     }\r\n   *   }\r\n   */\r\n  onPaginationChanged(event: Event, args: PaginationChangedArgs) {\r\n    const pageSize = +(args.pageSize || ((this.pagination) ? this.pagination.pageSize : DEFAULT_PAGE_SIZE));\r\n    this.updatePagination(args.newPage, pageSize);\r\n\r\n    // build the GraphQL query which we will use in the WebAPI callback\r\n    return this.buildQuery();\r\n  }\r\n\r\n  /*\r\n   * SORTING\r\n   * we will use sorting as per a Facebook suggestion on a Github issue (with some small changes)\r\n   * https://github.com/graphql/graphql-relay-js/issues/20#issuecomment-220494222\r\n   */\r\n  onSortChanged(event: Event, args: SortChangedArgs) {\r\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\r\n\r\n    // loop through all columns to inspect sorters & set the query\r\n    this.updateSorters(sortColumns);\r\n\r\n    // build the GraphQL query which we will use in the WebAPI callback\r\n    return this.buildQuery();\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect filters & update backend service filteringOptions\r\n   * @param columnFilters\r\n   */\r\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset: boolean) {\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    this._currentFilters = this.castFilterToColumnFilter(columnFilters);\r\n\r\n    const searchByArray: GraphqlFilteringOption[] = [];\r\n    let searchValue: string | string[];\r\n\r\n    for (const columnId in columnFilters) {\r\n      if (columnFilters.hasOwnProperty(columnId)) {\r\n        const columnFilter = columnFilters[columnId];\r\n\r\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\r\n        let columnDef: Column | undefined;\r\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\r\n          columnDef = this._columnDefinitions.find((column: Column) => {\r\n            return column.id === columnFilter.columnId;\r\n          });\r\n        } else {\r\n          columnDef = columnFilter.columnDef;\r\n        }\r\n        if (!columnDef) {\r\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\r\n        }\r\n\r\n        const fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\r\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\r\n        let fieldSearchValue = columnFilter.searchTerm;\r\n        if (typeof fieldSearchValue === 'undefined') {\r\n          fieldSearchValue = '';\r\n        }\r\n\r\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\r\n          throw new Error(`GraphQL filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {type: FilterType.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\r\n        }\r\n\r\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\r\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n        let operator = columnFilter.operator || ((matches) ? matches[1] : '');\r\n        searchValue = (!!matches) ? matches[2] : '';\r\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\r\n\r\n        // no need to query if search value is empty\r\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\r\n          continue;\r\n        }\r\n\r\n        // when having more than 1 search term (we need to create a CSV string for GraphQL \"IN\" or \"NOT IN\" filter search)\r\n        if (searchTerms && searchTerms.length > 0) {\r\n          searchValue = searchTerms.join(',');\r\n        } else if (typeof searchValue === 'string') {\r\n          // escaping the search value\r\n          searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\r\n          if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\r\n            operator = (operator === '*' || operator === '*z') ? 'endsWith' : 'startsWith';\r\n          }\r\n        }\r\n\r\n        // if we didn't find an Operator but we have a Filter Type, we should use default Operator\r\n        // multipleSelect is \"IN\", while singleSelect is \"EQ\", else don't map any operator\r\n        if (!operator && columnDef.filter) {\r\n          operator = mapOperatorByFilterType(columnDef.filter.type || '');\r\n        }\r\n\r\n        // if we still don't have an operator find the proper Operator to use by it's field type\r\n        if (!operator) {\r\n          operator = mapOperatorByFieldType(columnDef.type || FieldType.string);\r\n        }\r\n\r\n        searchByArray.push({\r\n          field: fieldName,\r\n          operator: mapOperatorType(operator),\r\n          value: searchValue\r\n        });\r\n      }\r\n    }\r\n\r\n    // update the service options with filters for the buildQuery() to work later\r\n    this.updateOptions({ filteringOptions: searchByArray });\r\n  }\r\n\r\n  /**\r\n   * Update the pagination component with it's new page number and size\r\n   * @param newPage\r\n   * @param pageSize\r\n   */\r\n  updatePagination(newPage: number, pageSize: number) {\r\n    this._currentPagination = {\r\n      pageNumber: newPage,\r\n      pageSize\r\n    };\r\n\r\n    let paginationOptions;\r\n    if (this.options.isWithCursor) {\r\n      paginationOptions = {\r\n        first: pageSize\r\n      };\r\n    } else {\r\n      paginationOptions = {\r\n        first: pageSize,\r\n        offset: (newPage - 1) * pageSize\r\n      };\r\n    }\r\n\r\n    this.updateOptions({ paginationOptions });\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect sorters & update backend service sortingOptions\r\n   * @param columnFilters\r\n   */\r\n  updateSorters(sortColumns?: SortChanged[], presetSorters?: CurrentSorter[]) {\r\n    let currentSorters: CurrentSorter[] = [];\r\n    let graphqlSorters: GraphqlSortingOption[] = [];\r\n\r\n    if (!sortColumns && presetSorters) {\r\n      // make the presets the current sorters, also make sure that all direction are in uppercase for GraphQL\r\n      currentSorters = presetSorters;\r\n      currentSorters.forEach((sorter) => sorter.direction = sorter.direction.toUpperCase() as SortDirectionString);\r\n\r\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\r\n      const tmpSorterArray = currentSorters.map((sorter) => {\r\n        graphqlSorters.push({\r\n          field: sorter.columnId + '',\r\n          direction: sorter.direction\r\n        });\r\n        return {\r\n          columnId: sorter.columnId,\r\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\r\n        };\r\n      });\r\n      this._grid.setSortColumns(tmpSorterArray);\r\n    } else if (sortColumns && !presetSorters) {\r\n      // build the orderBy array, it could be multisort, example\r\n      // orderBy:[{field: lastName, direction: ASC}, {field: firstName, direction: DESC}]\r\n      if (sortColumns && sortColumns.length === 0) {\r\n        graphqlSorters = new Array(this.defaultOrderBy); // when empty, use the default sort\r\n        currentSorters = new Array({ columnId: this.defaultOrderBy.direction, direction: this.defaultOrderBy.direction });\r\n      } else {\r\n        if (sortColumns) {\r\n          for (const column of sortColumns) {\r\n            if (column && column.sortCol) {\r\n              currentSorters.push({\r\n                columnId: (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '',\r\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n              });\r\n\r\n              graphqlSorters.push({\r\n                field: (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '',\r\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // keep current Sorters and update the service options with the new sorting\r\n    this._currentSorters = currentSorters;\r\n    this.updateOptions({ sortingOptions: graphqlSorters });\r\n  }\r\n\r\n  /**\r\n   * A function which takes an input string and removes double quotes only\r\n   * on certain fields are identified as GraphQL enums (except fields with dot notation)\r\n   * For example let say we identified (\"direction:\", \"sort\") as word which are GraphQL enum fields\r\n   * then the result will be:\r\n   * FROM\r\n   * query { users (orderBy:[{field:\"firstName\", direction:\"ASC\"} }]) }\r\n   * TO\r\n   * query { users (orderBy:[{field: firstName, direction: ASC}})}\r\n   *\r\n   * EXCEPTIONS (fields with dot notation \".\" which are inside a \"field:\")\r\n   * these fields will keep double quotes while everything else will be stripped of double quotes\r\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: \"ASC\"} }\r\n   * TO\r\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: ASC}}\r\n   * @param inputStr input string\r\n   * @param enumSearchWords array of enum words to filter\r\n   * @returns outputStr output string\r\n   */\r\n  trimDoubleQuotesOnEnumField(inputStr: string, enumSearchWords: string[], keepArgumentFieldDoubleQuotes: boolean) {\r\n    const patternWordInQuotes = `\\s?((field:\\s*)?\".*?\")`;\r\n    let patternRegex = enumSearchWords.join(patternWordInQuotes + '|');\r\n    patternRegex += patternWordInQuotes; // the last one should also have the pattern but without the pipe \"|\"\r\n    // example with (field: & direction:):  /field:s?(\".*?\")|direction:s?(\".*?\")/\r\n    const reg = new RegExp(patternRegex, 'g');\r\n\r\n    return inputStr.replace(reg, (group1, group2, group3) => {\r\n      // remove double quotes except when the string starts with a \"field:\"\r\n      let removeDoubleQuotes = true;\r\n      if (group1.startsWith('field:') && keepArgumentFieldDoubleQuotes) {\r\n        removeDoubleQuotes = false;\r\n      }\r\n      const rep = removeDoubleQuotes ? group1.replace(/\"/g, '') : group1;\r\n      return rep;\r\n    });\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // -------------------\r\n  /**\r\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\r\n   * @param columnFilters\r\n   */\r\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    const filtersArray: ColumnFilter[] = (typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters;\r\n\r\n    return filtersArray.map((filter) => {\r\n      const columnDef = filter.columnDef;\r\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\r\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\r\n      if (filter.operator) {\r\n        tmpFilter.operator = filter.operator;\r\n      }\r\n      if (Array.isArray(filter.searchTerms)) {\r\n        tmpFilter.searchTerms = filter.searchTerms;\r\n      } else {\r\n        tmpFilter.searchTerm = filter.searchTerm;\r\n      }\r\n      return tmpFilter;\r\n    });\r\n  }\r\n}\r\n",
    "declare interface StringConstructor {\r\n  allTitleCase(inputStr: string): string;\r\n  format(inputStr: string, args: any): string;\r\n  padZero(length: number): string;\r\n  trim(inputStr: string): string;\r\n  titleCase(inputStr: string): string;\r\n}\r\n\r\n\r\nString.format = function(format: string, args): string {\r\n  // const args = (Array.isArray(arguments[1])) ? arguments[1] : Array.prototype.slice.call(arguments, 1);\r\n\r\n  return format.replace(/{(\\d+)}/g, function (match, number) {\r\n    return (typeof args[number] !== 'undefined') ? args[number] : match;\r\n  });\r\n};\r\n\r\nString.padZero = function (this: string, length: number) {\r\n  let s = this;\r\n  while (s.length < length) {\r\n    s = '0' + s;\r\n  }\r\n  return s;\r\n};\r\n\r\n/**\r\n * Trim any extra white space from the string\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.trim = function(inputStr: string): string {\r\n  return inputStr ? inputStr.replace(/\\s+/g, ' ') : inputStr;\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.allTitleCase = function(inputStr: string): string {\r\n  return inputStr.replace(/\\w\\S*/g, function(outputStr) {\r\n     return outputStr.charAt(0).toUpperCase() + outputStr.substr(1).toLowerCase();\r\n  });\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n*/\r\nString.titleCase = function(inputStr: string): string {\r\n  return inputStr.charAt(0).toUpperCase() + inputStr.slice(1);\r\n};\r\n",
    "import './global-utilities';\r\nimport { CaseType, OdataOption } from './../models/index';\r\n\r\nexport class OdataService {\r\n  _columnFilters: any;\r\n  _defaultSortBy: string;\r\n  _odataOptions: OdataOption;\r\n\r\n  constructor() {\r\n    this._odataOptions = {\r\n      filterQueue: [],\r\n      orderBy: ''\r\n    };\r\n    this._defaultSortBy = '';\r\n    this._columnFilters = {};\r\n  }\r\n\r\n  /*\r\n    * Build the OData query string from all the options provided\r\n    * @return string OData query\r\n    */\r\n  buildQuery(): string {\r\n    this._odataOptions.filterQueue = [];\r\n    const queryTmpArray = [];\r\n\r\n    if (this._odataOptions.top) {\r\n      queryTmpArray.push(`$top=${this._odataOptions.top}`);\r\n    }\r\n    if (this._odataOptions.skip) {\r\n      queryTmpArray.push(`$skip=${this._odataOptions.skip}`);\r\n    }\r\n    if (this._odataOptions.orderBy) {\r\n      let argument = '';\r\n      if (Array.isArray(this._odataOptions.orderBy)) {\r\n        argument = this._odataOptions.orderBy.join(','); // csv, that will form a query example like: $orderby=RoleName asc, Id desc\r\n      } else {\r\n        argument = this._odataOptions.orderBy;\r\n      }\r\n      queryTmpArray.push(`$orderby=${argument}`);\r\n    }\r\n    if (this._odataOptions.filterBy || this._odataOptions.filter) {\r\n      if (this._odataOptions.filter) {\r\n        this._odataOptions.filterQueue = [];\r\n        let filterStr = this._odataOptions.filter;\r\n        if (Array.isArray(this._odataOptions.filter)) {\r\n          filterStr = this._odataOptions.filter.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n        }\r\n        this._odataOptions.filterQueue.push(`(${filterStr})`);\r\n      }\r\n      // filterBy are passed manually by the user, however we will only add it if the column wasn't yet filtered\r\n      if (!!this._odataOptions.filterBy && !!this._odataOptions.filterBy.fieldName && !this._columnFilters[this._odataOptions.filterBy.fieldName.toLowerCase()]) {\r\n        if (this._odataOptions.filterBy.searchTerm !== '') {\r\n          this.saveColumnFilter(this._odataOptions.filterBy.fieldName.toLowerCase(), this._odataOptions.filterBy.searchTerm, this._odataOptions.filterBy.searchTerms);\r\n          this.updateFilterFromListTerms(this._odataOptions.filterBy);\r\n        }\r\n      }\r\n    }\r\n    if (this._odataOptions.filterQueue.length > 0) {\r\n      const query = this._odataOptions.filterQueue.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n      this._odataOptions.filter = query; // overwrite with\r\n      queryTmpArray.push(`$filter=${query}`);\r\n    }\r\n\r\n    // join all the odata functions by a '&'\r\n    return queryTmpArray.join('&');\r\n  }\r\n\r\n  getFilterByColumn(columnName: string): string {\r\n    return (!!this._columnFilters[columnName]) ? this._columnFilters[columnName] : null;\r\n  }\r\n\r\n  getFilterCount(): number {\r\n    return (this._odataOptions.filterQueue) ? this._odataOptions.filterQueue.length : 0;\r\n  }\r\n\r\n  get columnFilters(): any[] {\r\n    return this._columnFilters;\r\n  }\r\n\r\n  get options(): OdataOption {\r\n    return this._odataOptions;\r\n  }\r\n\r\n  set options(options: OdataOption) {\r\n    this._odataOptions = options;\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string) {\r\n    delete this._columnFilters[fieldName];\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: any, searchTerms?: any[]) {\r\n    this._columnFilters[fieldName] = {\r\n      search: searchTerms,\r\n      value\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update the filter by a list of terms usually passed manually by the user as default filters\r\n   * @param filterOptions\r\n   * @returns\r\n   */\r\n  updateFilterFromListTerms(filterOptions: any) {\r\n    // build the filter query\r\n    if (Array.isArray(filterOptions)) {\r\n      filterOptions.forEach((filterOptionObject) => {\r\n        this.updateFilterFromTerm(filterOptionObject);\r\n      });\r\n    } else {\r\n      this.updateFilterFromTerm(filterOptions);\r\n    }\r\n  }\r\n\r\n  updateFilterFromTerm(filterOptions: any) {\r\n    let searchBy = '';\r\n    const tmpSearchByArray = [];\r\n    const fieldName = filterOptions.fieldName;\r\n    const fieldSearchTerms = filterOptions.searchTerms;\r\n    const operator = filterOptions.operator;\r\n\r\n    // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n    if (!!fieldSearchTerms && fieldSearchTerms.length > 0) {\r\n      const tmpSearchTerms = [];\r\n\r\n      if (operator === 'IN') {\r\n        // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n        for (let j = 0, lnj = fieldSearchTerms.length; j < lnj; j++) {\r\n          tmpSearchTerms.push(`${fieldName} eq '${fieldSearchTerms[j]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' or ');\r\n        searchBy = `$(${searchBy})`;\r\n      } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n        // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n        for (let k = 0, lnk = fieldSearchTerms.length; k < lnk; k++) {\r\n          tmpSearchTerms.push(`${fieldName} ne '${fieldSearchTerms[k]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' and ');\r\n        searchBy = `$(${searchBy})`;\r\n      }\r\n    }\r\n\r\n    // push to our temp array and also trim white spaces\r\n    tmpSearchByArray.push(String.trim(searchBy));\r\n\r\n    // add to the filter queue only if it doesn't exist in the queue\r\n    const filter = (tmpSearchByArray.length > 0) ? tmpSearchByArray.join(' and ') : '';\r\n    if (this._odataOptions.filterQueue && this._odataOptions.filterQueue.indexOf(filter) === -1) {\r\n      this._odataOptions.filterQueue.push(filter);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change any OData options that will be used to build the query\r\n   * @param object options\r\n   */\r\n  updateOptions(options: OdataOption) {\r\n    for (const property of Object.keys(options)) {\r\n      if (options.hasOwnProperty(property)) {\r\n        this._odataOptions[property] = options[property]; // replace of the property\r\n      }\r\n\r\n      // we need to keep the defaultSortBy for references whenever the user removes his Sorting\r\n      // then we would revert to the defaultSortBy and the only way is to keep a hard copy here\r\n      if (property === 'orderBy' || property === 'sortBy') {\r\n        let sortBy = options[property];\r\n\r\n        // make sure first char of each orderBy field is capitalize\r\n        if (this._odataOptions.caseType === CaseType.pascalCase) {\r\n          if (Array.isArray(sortBy)) {\r\n            sortBy.forEach((field, index, inputArray) => {\r\n              inputArray[index] = String.titleCase(field);\r\n            });\r\n          } else {\r\n            sortBy = String.titleCase(options[property]);\r\n          }\r\n        }\r\n        this._odataOptions.orderBy = sortBy;\r\n        this._defaultSortBy = sortBy;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
    "import './global-utilities';\r\nimport { parseUtcDate } from './utilities';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  BackendService,\r\n  CaseType,\r\n  Column,\r\n  ColumnFilter,\r\n  ColumnFilters,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  FilterChangedArgs,\r\n  FieldType,\r\n  GridOption,\r\n  OdataOption,\r\n  Pagination,\r\n  PaginationChangedArgs,\r\n  SearchTerm,\r\n  SortChanged,\r\n  SortChangedArgs,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport { OdataService } from './odata.service';\r\n\r\nlet timer: any;\r\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\r\nconst DEFAULT_ITEMS_PER_PAGE = 25;\r\nconst DEFAULT_PAGE_SIZE = 20;\r\n\r\n@Injectable()\r\nexport class GridOdataService implements BackendService {\r\n  private _currentFilters: CurrentFilter[];\r\n  private _currentPagination: CurrentPagination;\r\n  private _currentSorters: CurrentSorter[];\r\n  private _columnDefinitions: Column[];\r\n  private _gridOptions: GridOption;\r\n  private _grid: any;\r\n  options: OdataOption;\r\n  pagination: Pagination | undefined;\r\n  defaultOptions: OdataOption = {\r\n    top: DEFAULT_ITEMS_PER_PAGE,\r\n    orderBy: '',\r\n    caseType: CaseType.pascalCase\r\n  };\r\n\r\n  constructor(private odataService: OdataService) { }\r\n\r\n  buildQuery(): string {\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  init(options: OdataOption, pagination?: Pagination, grid?: any): void {\r\n    this._grid = grid;\r\n    const mergedOptions = { ...this.defaultOptions, ...options };\r\n    if (pagination && pagination.pageSize) {\r\n      mergedOptions.top = pagination.pageSize;\r\n    }\r\n    this.odataService.options = { ...mergedOptions, top: mergedOptions.top || this.defaultOptions.top };\r\n    this.options = this.odataService.options;\r\n    this.pagination = pagination;\r\n\r\n    // save current pagination as Page 1 and page size as \"top\"\r\n    this._currentPagination = {\r\n      pageNumber: 1,\r\n      pageSize: this.odataService.options.top || this.defaultOptions.top\r\n    };\r\n\r\n    if (grid && grid.getColumns && grid.getOptions) {\r\n      this._columnDefinitions = grid.getColumns() || options.columnDefinitions;\r\n      this._columnDefinitions = this._columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\r\n\r\n      this._gridOptions = grid.getOptions();\r\n    }\r\n  }\r\n\r\n  updateOptions(serviceOptions?: OdataOption) {\r\n    this.options = { ...this.options, ...serviceOptions };\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string): void {\r\n    this.odataService.removeColumnFilter(fieldName);\r\n  }\r\n\r\n  /** Get the Filters that are currently used by the grid */\r\n  getCurrentFilters(): CurrentFilter[] {\r\n    return this._currentFilters;\r\n  }\r\n\r\n  /** Get the Pagination that is currently used by the grid */\r\n  getCurrentPagination(): CurrentPagination {\r\n    return this._currentPagination;\r\n  }\r\n\r\n  /** Get the Sorters that are currently used by the grid */\r\n  getCurrentSorters(): CurrentSorter[] {\r\n    return this._currentSorters;\r\n  }\r\n\r\n  /*\r\n   * Reset the pagination options\r\n   */\r\n  resetPaginationOptions() {\r\n    this.odataService.updateOptions({\r\n      skip: 0\r\n    });\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: string, terms?: any[]) {\r\n    this.odataService.saveColumnFilter(fieldName, value, terms);\r\n  }\r\n\r\n  /*\r\n   * FILTERING\r\n   */\r\n  onFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\r\n    const serviceOptions: GridOption = args.grid.getOptions();\r\n    const backendApi = serviceOptions.backendServiceApi || serviceOptions.onBackendEventApi;\r\n\r\n    if (backendApi === undefined) {\r\n      throw new Error('Something went wrong in the GridOdataService, \"backendServiceApi\" is not initialized');\r\n    }\r\n\r\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\r\n    let debounceTypingDelay = 0;\r\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\r\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\r\n    }\r\n\r\n    const promise = new Promise<string>((resolve, reject) => {\r\n      // reset Pagination, then build the OData query which we will use in the WebAPI callback\r\n      // wait a minimum user typing inactivity before processing any query\r\n      clearTimeout(timer);\r\n      timer = setTimeout(() => {\r\n        // loop through all columns to inspect filters & set the query\r\n        this.updateFilters(args.columnFilters);\r\n\r\n        this.resetPaginationOptions();\r\n        resolve(this.odataService.buildQuery());\r\n      }, debounceTypingDelay);\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  /*\r\n   * PAGINATION\r\n   */\r\n  onPaginationChanged(event: Event, args: PaginationChangedArgs) {\r\n    const pageSize = +(args.pageSize || DEFAULT_PAGE_SIZE);\r\n    this.updatePagination(args.newPage, pageSize);\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  /*\r\n   * SORTING\r\n   */\r\n  onSortChanged(event: Event, args: SortChangedArgs) {\r\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\r\n\r\n    // loop through all columns to inspect sorters & set the query\r\n    this.updateSorters(sortColumns);\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect filters & update backend service filteringOptions\r\n   * @param columnFilters\r\n   */\r\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset?: boolean) {\r\n    this._currentFilters = this.castFilterToColumnFilter(columnFilters);\r\n    let searchBy = '';\r\n    const searchByArray: string[] = [];\r\n\r\n    // loop through all columns to inspect filters\r\n    for (const columnId in columnFilters) {\r\n      if (columnFilters.hasOwnProperty(columnId)) {\r\n        const columnFilter = columnFilters[columnId];\r\n\r\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\r\n        let columnDef: Column | undefined;\r\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\r\n          columnDef = this._columnDefinitions.find((column: Column) => {\r\n            return column.id === columnFilter.columnId;\r\n          });\r\n        } else {\r\n          columnDef = columnFilter.columnDef;\r\n        }\r\n        if (!columnDef) {\r\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\r\n        }\r\n\r\n        let fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\r\n        const fieldType = columnDef.type || 'string';\r\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\r\n        let fieldSearchValue = columnFilter.searchTerm;\r\n        if (typeof fieldSearchValue === 'undefined') {\r\n          fieldSearchValue = '';\r\n        }\r\n\r\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\r\n          throw new Error(`ODdata filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {type: FilterType.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\r\n        }\r\n\r\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\r\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n        const operator = columnFilter.operator || ((matches) ? matches[1] : '');\r\n        let searchValue = (!!matches) ? matches[2] : '';\r\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\r\n        const bypassOdataQuery = columnFilter.bypassBackendQuery || false;\r\n\r\n        // no need to query if search value is empty\r\n        if (fieldName && searchValue === '') {\r\n          this.removeColumnFilter(fieldName);\r\n          continue;\r\n        }\r\n\r\n        // escaping the search value\r\n        searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\r\n        searchValue = encodeURIComponent(searchValue); // encode URI of the final search value\r\n\r\n        // extra query arguments\r\n        if (bypassOdataQuery) {\r\n          // push to our temp array and also trim white spaces\r\n          if (fieldName) {\r\n            this.saveColumnFilter(fieldName, fieldSearchValue, searchTerms);\r\n          }\r\n        } else {\r\n          searchBy = '';\r\n\r\n          // titleCase the fieldName so that it matches the WebApi names\r\n          if (this.odataService.options.caseType === CaseType.pascalCase) {\r\n            fieldName = String.titleCase(fieldName || '');\r\n          }\r\n\r\n          // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n          if (searchTerms && searchTerms.length > 0) {\r\n            const tmpSearchTerms = [];\r\n\r\n            if (operator === 'IN') {\r\n              // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n              for (let j = 0, lnj = searchTerms.length; j < lnj; j++) {\r\n                tmpSearchTerms.push(`${fieldName} eq '${searchTerms[j]}'`);\r\n              }\r\n              searchBy = tmpSearchTerms.join(' or ');\r\n              searchBy = `(${searchBy})`;\r\n            } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n              // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n              for (let k = 0, lnk = searchTerms.length; k < lnk; k++) {\r\n                tmpSearchTerms.push(`${fieldName} ne '${searchTerms[k]}'`);\r\n              }\r\n              searchBy = tmpSearchTerms.join(' and ');\r\n              searchBy = `(${searchBy})`;\r\n            }\r\n          } else if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar !== '') {\r\n            // first/last character is a '*' will be a startsWith or endsWith\r\n            searchBy = (operator === '*' || operator === '*z')\r\n              ? `endswith(${fieldName}, '${searchValue}')`\r\n              : `startswith(${fieldName}, '${searchValue}')`;\r\n          } else if (fieldType === FieldType.date) {\r\n            // date field needs to be UTC and within DateTime function\r\n            const dateFormatted = parseUtcDate(searchValue, true);\r\n            if (dateFormatted) {\r\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} DateTime'${dateFormatted}'`;\r\n            }\r\n          } else if (fieldType === FieldType.string) {\r\n            // string field needs to be in single quotes\r\n            if (operator === '') {\r\n              searchBy = `substringof('${searchValue}', ${fieldName})`;\r\n            } else {\r\n              // searchBy = `substringof('${searchValue}', ${fieldNameCased}) ${this.mapOdataOperator(operator)} true`;\r\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} '${searchValue}'`;\r\n            }\r\n          } else {\r\n            // any other field type (or undefined type)\r\n            searchValue = fieldType === FieldType.number ? searchValue : `'${searchValue}'`;\r\n            searchBy = `${fieldName} ${this.mapOdataOperator(operator)} ${searchValue}`;\r\n          }\r\n\r\n          // push to our temp array and also trim white spaces\r\n          if (searchBy !== '') {\r\n            searchByArray.push(String.trim(searchBy));\r\n            this.saveColumnFilter(fieldName || '', fieldSearchValue, searchTerms);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // update the service options with filters for the buildQuery() to work later\r\n    this.odataService.updateOptions({\r\n      filter: (searchByArray.length > 0) ? searchByArray.join(' and ') : '',\r\n      skip: undefined\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the pagination component with it's new page number and size\r\n   * @param newPage\r\n   * @param pageSize\r\n   */\r\n  updatePagination(newPage: number, pageSize: number) {\r\n    this._currentPagination = {\r\n      pageNumber: newPage,\r\n      pageSize\r\n    };\r\n\r\n    this.odataService.updateOptions({\r\n      top: pageSize,\r\n      skip: (newPage - 1) * pageSize\r\n    });\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect sorters & update backend service orderBy\r\n   * @param columnFilters\r\n   */\r\n  updateSorters(sortColumns?: SortChanged[], presetSorters?: CurrentSorter[]) {\r\n    let sortByArray: any[] = [];\r\n    const sorterArray: CurrentSorter[] = [];\r\n\r\n    if (!sortColumns && presetSorters) {\r\n      // make the presets the current sorters, also make sure that all direction are in lowercase for OData\r\n      sortByArray = presetSorters;\r\n      sortByArray.forEach((sorter) => sorter.direction = sorter.direction.toLowerCase() as SortDirectionString);\r\n\r\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\r\n      const tmpSorterArray = sortByArray.map((sorter) => {\r\n        sorterArray.push({\r\n          columnId: sorter.columnId + '',\r\n          direction: sorter.direction\r\n        });\r\n        return {\r\n          columnId: sorter.columnId,\r\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\r\n        };\r\n      });\r\n      this._grid.setSortColumns(tmpSorterArray);\r\n    } else if (sortColumns && !presetSorters) {\r\n      // build the SortBy string, it could be multisort, example: customerNo asc, purchaserName desc\r\n      if (sortColumns && sortColumns.length === 0) {\r\n        sortByArray = new Array(this.defaultOptions.orderBy); // when empty, use the default sort\r\n      } else {\r\n        if (sortColumns) {\r\n          for (const column of sortColumns) {\r\n            if (column.sortCol) {\r\n              let fieldName = (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '';\r\n              if (this.odataService.options.caseType === CaseType.pascalCase) {\r\n                fieldName = String.titleCase(fieldName);\r\n              }\r\n\r\n              sorterArray.push({\r\n                columnId: fieldName,\r\n                direction: column.sortAsc ? 'asc' : 'desc'\r\n              });\r\n            }\r\n          }\r\n          sortByArray = sorterArray;\r\n        }\r\n      }\r\n    }\r\n\r\n    // transform the sortby array into a CSV string for OData\r\n    sortByArray = sortByArray as CurrentSorter[];\r\n    const csvString = sortByArray.map((sorter) => `${sorter.columnId} ${sorter.direction.toLowerCase()}`).join(',');\r\n    this.odataService.updateOptions({\r\n      orderBy: (this.odataService.options.caseType === CaseType.pascalCase) ? String.titleCase(csvString) : csvString\r\n    });\r\n\r\n    // keep current Sorters and update the service options with the new sorting\r\n    this._currentSorters = sortByArray as CurrentSorter[];\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // -------------------\r\n  /**\r\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\r\n   * @param columnFilters\r\n   */\r\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    const filtersArray: ColumnFilter[] = ((typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters) as CurrentFilter[];\r\n\r\n    return filtersArray.map((filter) => {\r\n      const columnDef = filter.columnDef;\r\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\r\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\r\n      if (filter.operator) {\r\n        tmpFilter.operator = filter.operator;\r\n      }\r\n      if (Array.isArray(filter.searchTerms)) {\r\n        tmpFilter.searchTerms = filter.searchTerms;\r\n      } else {\r\n        tmpFilter.searchTerm = filter.searchTerm;\r\n      }\r\n      return tmpFilter;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Mapper for mathematical operators (ex.: <= is \"le\", > is \"gt\")\r\n   * @param string operator\r\n   * @returns string map\r\n   */\r\n  private mapOdataOperator(operator: string) {\r\n    let map = '';\r\n    switch (operator) {\r\n      case '<':\r\n        map = 'lt';\r\n        break;\r\n      case '<=':\r\n        map = 'le';\r\n        break;\r\n      case '>':\r\n        map = 'gt';\r\n        break;\r\n      case '>=':\r\n        map = 'ge';\r\n        break;\r\n      case '<>':\r\n      case '!=':\r\n        map = 'ne';\r\n        break;\r\n      case '=':\r\n      case '==':\r\n      default:\r\n        map = 'eq';\r\n        break;\r\n    }\r\n\r\n    return map;\r\n  }\r\n}\r\n",
    "import { OnEventArgs, CellArgs, GridOption } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var Slick: any;\r\n\r\nexport class GridEventService {\r\n  private _eventHandler: any = new Slick.EventHandler();\r\n\r\n  /* OnCellChange Event */\r\n  attachOnCellChange(grid: any, gridOptions: GridOption, dataView: any) {\r\n    // subscribe to this Slickgrid event of onCellChange\r\n    this._eventHandler.subscribe(grid.onCellChange, (e: Event, args: CellArgs) => {\r\n      if (!e || !args || !args.grid || args.cell === undefined || !args.grid.getColumns || !args.grid.getDataItem) {\r\n        return;\r\n      }\r\n      const column = args.grid.getColumns()[args.cell];\r\n\r\n      // if the column definition has a onCellChange property (a callback function), then run it\r\n      if (typeof column.onCellChange === 'function') {\r\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onCellChange\r\n        const returnedArgs: OnEventArgs = {\r\n          row: args.row,\r\n          cell: args.cell,\r\n          dataView,\r\n          gridDefinition: gridOptions,\r\n          grid,\r\n          columnDef: column,\r\n          dataContext: args.grid.getDataItem(args.row)\r\n        };\r\n\r\n        // finally call up the Slick.column.onCellChanges.... function\r\n        column.onCellChange(returnedArgs);\r\n        // e.stopImmediatePropagation();\r\n      }\r\n    });\r\n  }\r\n  /* OnClick Event */\r\n  attachOnClick(grid: any, gridOptions: GridOption, dataView: any) {\r\n    this._eventHandler.subscribe(grid.onClick, (e: Event, args: CellArgs) => {\r\n      if (!e || !args || !args.grid || args.cell === undefined || !args.grid.getColumns || !args.grid.getDataItem) {\r\n        return;\r\n      }\r\n      const column = args.grid.getColumns()[args.cell];\r\n\r\n      // if the column definition has a onCellClick property (a callback function), then run it\r\n      if (typeof column.onCellClick === 'function') {\r\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onClick\r\n        const returnedArgs: OnEventArgs = {\r\n          row: args.row,\r\n          cell: args.cell,\r\n          dataView,\r\n          gridDefinition: gridOptions,\r\n          grid,\r\n          columnDef: column,\r\n          dataContext: args.grid.getDataItem(args.row)\r\n        };\r\n\r\n        // finally call up the Slick.column.onCellClick.... function\r\n        column.onCellClick(returnedArgs);\r\n        e.stopImmediatePropagation();\r\n      }\r\n\r\n      // stop the click event bubbling\r\n      // NOTE: We don't want to stop bubbling when doing an input edit, if we do the autoEdit which has intent of doing singleClick edit will become doubleClick edit\r\n      if (grid.getOptions && !grid.getOptions().autoEdit) {\r\n        // e.stopImmediatePropagation();\r\n      }\r\n    });\r\n  }\r\n\r\n  dispose() {\r\n    this._eventHandler.unsubscribeAll();\r\n  }\r\n}\r\n",
    "import { GridOption } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n// global constants, height/width are in pixels\r\nconst DATAGRID_MIN_HEIGHT = 180;\r\nconst DATAGRID_MIN_WIDTH = 300;\r\nconst DATAGRID_BOTTOM_PADDING = 20;\r\nconst DATAGRID_PAGINATION_HEIGHT = 35;\r\nlet timer: any;\r\n\r\nexport class ResizerService {\r\n  private _grid: any;\r\n  private _gridOptions: GridOption;\r\n\r\n  init(grid: any, gridOptions: GridOption): void {\r\n    this._grid = grid;\r\n    this._gridOptions = gridOptions;\r\n  }\r\n\r\n  /** Attach an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space\r\n   * Options: we could also provide a % factor to resize on each height/width independently\r\n   */\r\n  attachAutoResizeDataGrid() {\r\n    // if we can't find the grid to resize, return without attaching anything\r\n    const gridDomElm = $(`#${this._gridOptions && this._gridOptions.gridId ? this._gridOptions.gridId : 'grid1'}`);\r\n    if (gridDomElm === undefined || gridDomElm.offset() === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // -- 1st resize the datagrid size at first load (we need this because the .on event is not triggered on first load)\r\n    this.resizeGrid();\r\n\r\n    // -- 2nd attach a trigger on the Window DOM element, so that it happens also when resizing after first load\r\n    // -- attach auto-resize to Window object only if it exist\r\n    $(window).on('resize.grid', () => {\r\n      // for some yet unknown reason, calling the resize twice removes any stuttering/flickering when changing the height and makes it much smoother\r\n      this.resizeGrid();\r\n      this.resizeGrid();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation\r\n   * object gridOptions\r\n   */\r\n  calculateGridNewDimensions(gridOptions: GridOption): any {\r\n    const gridDomElm = $(`#${gridOptions.gridId}`);\r\n    const containerElm = (gridOptions.autoResize && gridOptions.autoResize.containerId) ? $(`#${gridOptions.autoResize.containerId}`) : $(`#${gridOptions.gridContainerId}`);\r\n    const windowElm = $(window);\r\n    if (windowElm === undefined || containerElm === undefined || gridDomElm === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // calculate bottom padding\r\n    // if using pagination, we need to add the pagination height to this bottom padding\r\n    let bottomPadding = (gridOptions.autoResize && gridOptions.autoResize.bottomPadding) ? gridOptions.autoResize.bottomPadding : DATAGRID_BOTTOM_PADDING;\r\n    if (bottomPadding && (gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\r\n      bottomPadding += DATAGRID_PAGINATION_HEIGHT;\r\n    }\r\n\r\n    const gridHeight = windowElm.height() || 0;\r\n    const coordOffsetTop = gridDomElm.offset();\r\n    const gridOffsetTop = (coordOffsetTop !== undefined) ? coordOffsetTop.top : 0;\r\n    const availableHeight = gridHeight - gridOffsetTop - bottomPadding;\r\n    const availableWidth = containerElm.width() || 0;\r\n    const minHeight = (gridOptions.autoResize && gridOptions.autoResize.minHeight < 0) ? gridOptions.autoResize.minHeight : DATAGRID_MIN_HEIGHT;\r\n    const minWidth = (gridOptions.autoResize && gridOptions.autoResize.minWidth < 0) ? gridOptions.autoResize.minWidth : DATAGRID_MIN_WIDTH;\r\n\r\n    let newHeight = availableHeight;\r\n    let newWidth = (gridOptions.autoResize && gridOptions.autoResize.sidePadding) ? availableWidth - gridOptions.autoResize.sidePadding : availableWidth;\r\n    if (newHeight < minHeight) {\r\n      newHeight = minHeight;\r\n    }\r\n    if (newWidth < minWidth) {\r\n      newWidth = minWidth;\r\n    }\r\n\r\n    return {\r\n      height: newHeight,\r\n      width: newWidth\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Dispose function when element is destroyed\r\n   */\r\n  dispose() {\r\n    $(window).off('resize.grid');\r\n  }\r\n\r\n  /** Resize the datagrid to fit the browser height & width */\r\n  resizeGrid(delay?: number, newSizes?: { height: number, width: number }): void {\r\n    if (!this._grid || !this._gridOptions) {\r\n      throw new Error(`\r\n      Angular-Slickgrid resizer requires a valid Grid object and Grid Options defined.\r\n      You can fix this by setting your gridOption to use \"enableAutoResize\" or create an instance of the ResizerService by calling attachAutoResizeDataGrid()`);\r\n    }\r\n\r\n    // because of the javascript async nature, we might want to delay the resize a little bit\r\n    delay = delay || 0;\r\n\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      // calculate new available sizes but with minimum height of 220px\r\n      newSizes = newSizes || this.calculateGridNewDimensions(this._gridOptions);\r\n      const gridElm = $(`#${this._gridOptions.gridId}`) || {};\r\n      const gridContainerElm = $(`#${this._gridOptions.gridContainerId}`) || {};\r\n\r\n      if (newSizes && gridElm.length > 0) {\r\n        // apply these new height/width to the datagrid\r\n        gridElm.height(newSizes.height);\r\n        gridElm.width(newSizes.width);\r\n        gridContainerElm.height(newSizes.height);\r\n        gridContainerElm.width(newSizes.width);\r\n\r\n        // resize the slickgrid canvas on all browser except some IE versions\r\n        // exclude all IE below IE11\r\n        // IE11 wants to be a better standard (W3C) follower (finally) they even changed their appName output to also have 'Netscape'\r\n        if (new RegExp('MSIE [6-8]').exec(navigator.userAgent) === null && this._grid) {\r\n          this._grid.resizeCanvas();\r\n        }\r\n\r\n        // also call the grid auto-size columns so that it takes available when going bigger\r\n        this._grid.autosizeColumns();\r\n      }\r\n    }, delay);\r\n  }\r\n}\r\n",
    "import { GridOption } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\ndeclare var Slick: any;\r\n\r\nexport class GridExtraService {\r\n  private _grid: any;\r\n  private _dataView: any;\r\n  private _gridOptions: GridOption;\r\n\r\n  init(grid, columnDefinition, gridOptions, dataView) {\r\n    this._grid = grid;\r\n    this._gridOptions = gridOptions;\r\n    this._dataView = dataView;\r\n  }\r\n\r\n  getDataItemByRowNumber(rowNumber: number) {\r\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object');\r\n    }\r\n    return this._grid.getDataItem(rowNumber);\r\n  }\r\n\r\n  /** Chain the item Metadata with our implementation of Metadata at given row index */\r\n  getItemRowMetadata(previousItemMetadata: any) {\r\n    return (rowNumber: number) => {\r\n      const item = this._dataView.getItem(rowNumber);\r\n      let meta = {\r\n        cssClasses: ''\r\n      };\r\n      if (typeof previousItemMetadata === 'object' && !$.isEmptyObject(previousItemMetadata)) {\r\n        meta = previousItemMetadata(rowNumber);\r\n      }\r\n\r\n      if (item && item._dirty) {\r\n        meta.cssClasses = (meta.cssClasses || '') + ' dirty';\r\n      }\r\n      if (item && item.rowClass) {\r\n        meta.cssClasses += ` ${item.rowClass}`;\r\n        meta.cssClasses += ` row${rowNumber}`;\r\n      }\r\n\r\n      return meta;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Highlight then fade a row for x seconds.\r\n   * The implementation follows this SO answer: https://stackoverflow.com/a/19985148/1212166\r\n   * @param rowNumber\r\n   * @param fadeDelay\r\n   */\r\n  highlightRow(rowNumber: number, fadeDelay: number = 1500) {\r\n    // create a SelectionModel if there's not one yet\r\n    if (!this._grid.getSelectionModel()) {\r\n      const rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\r\n      this._grid.setSelectionModel(rowSelectionPlugin);\r\n    }\r\n\r\n    this._grid.setSelectedRows([rowNumber]);\r\n    this._dataView.getItemMetadata = this.getItemRowMetadata(this._dataView.getItemMetadata);\r\n\r\n    const item = this._dataView.getItem(rowNumber);\r\n    if (item && item.id) {\r\n      item.rowClass = 'highlight';\r\n      this._dataView.updateItem(item.id, item);\r\n      const gridOptions = this._grid.getOptions() as GridOption;\r\n\r\n      // highlight the row for a user defined timeout\r\n      $(`#${gridOptions.gridId}`)\r\n          .find(`.highlight.row${rowNumber}`)\r\n          .first();\r\n\r\n      // delete the row's CSS that was attached for highlighting\r\n      setTimeout(() => {\r\n        if (item && item.id) {\r\n          delete item.rowClass;\r\n          const gridIdx = this._dataView.getIdxById(item.id);\r\n          if (gridIdx !== undefined) {\r\n            this._dataView.updateItem(item.id, item);\r\n          }\r\n        }\r\n      }, fadeDelay + 10);\r\n    }\r\n  }\r\n\r\n  getSelectedRows() {\r\n    return this._grid.getSelectedRows();\r\n  }\r\n  setSelectedRow(rowIndex: number) {\r\n    this._grid.setSelectedRows([rowIndex]);\r\n  }\r\n  setSelectedRows(rowIndexes: number[]) {\r\n    this._grid.setSelectedRows(rowIndexes);\r\n  }\r\n\r\n  renderGrid() {\r\n    if (this._grid && typeof this._grid.invalidate === 'function') {\r\n      this._grid.invalidate();\r\n      this._grid.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add an item (data item) to the datagrid\r\n   * @param object dataItem: item object holding all properties of that row\r\n   */\r\n  addItemToDatagrid(item) {\r\n    if (!this._grid || !this._gridOptions || !this._dataView) {\r\n      throw new Error('We could not find SlickGrid Grid, DataView objects');\r\n    }\r\n    if (!this._gridOptions || (!this._gridOptions.enableCheckboxSelector && !this._gridOptions.enableRowSelection)) {\r\n      throw new Error('addItemToDatagrid() requires to have a valid Slickgrid Selection Model. You can overcome this issue by enabling enableCheckboxSelector or enableRowSelection to True');\r\n    }\r\n\r\n    const row = 0;\r\n    this._dataView.insertItem(row, item);\r\n    this._grid.scrollRowIntoView(0); // scroll to row 0\r\n    this.highlightRow(0, 1500);\r\n\r\n    // refresh dataview & grid\r\n    this._dataView.refresh();\r\n  }\r\n\r\n  /**\r\n   * Update an existing item with new properties inside the datagrid\r\n   * @param object item: item object holding all properties of that row\r\n   */\r\n  updateDataGridItem(item: any) {\r\n    const row = this._dataView.getRowById(item.id);\r\n    const itemId = (!item || !item.hasOwnProperty('id')) ? -1 : item.id;\r\n\r\n    if (itemId === -1) {\r\n      throw new Error(`Could not find the item in the item in the grid or it's associated \"id\"`);\r\n    }\r\n\r\n    const gridIdx = this._dataView.getIdxById(itemId);\r\n    if (gridIdx !== undefined) {\r\n      // Update the item itself inside the dataView\r\n      this._dataView.updateItem(itemId, item);\r\n\r\n      // highlight the row we just updated\r\n      this.highlightRow(row, 1500);\r\n\r\n      // refresh dataview & grid\r\n      this._dataView.refresh();\r\n    }\r\n  }\r\n}\r\n",
    "import { CellArgs } from './../models/index';\r\n\r\nexport class GridExtraUtils {\r\n  static getColumnDefinitionAndData(args: CellArgs) {\r\n    if (!args || !args.grid || !args.grid.getColumns || !args.grid.getDataItem) {\r\n      throw new Error('To get the column definition and data, we need to have these arguments passed (row, cell, grid)');\r\n    }\r\n    return {\r\n      columnDef: args.grid.getColumns()[args.cell],\r\n      dataContext: args.grid.getDataItem(args.row)\r\n    };\r\n  }\r\n}\r\n",
    "import {\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  GridOption,\r\n  GridState,\r\n  GridStateChange,\r\n  GridStateType\r\n} from './../models/index';\r\nimport { FilterService, SortService } from './../services/index';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class GridStateService {\r\n  private _grid: any;\r\n  private _gridOptions: GridOption;\r\n  private _preset: GridState;\r\n  private filterService: FilterService;\r\n  private _filterSubcription: Subscription;\r\n  private _sorterSubcription: Subscription;\r\n  private sortService: SortService;\r\n  onGridStateChanged = new Subject<GridStateChange>();\r\n\r\n  /**\r\n   * Initialize the Export Service\r\n   * @param grid\r\n   * @param gridOptions\r\n   * @param dataView\r\n   */\r\n  init(grid: any, filterService: FilterService, sortService: SortService): void {\r\n    this._grid = grid;\r\n    this.filterService = filterService;\r\n    this.sortService = sortService;\r\n    this._gridOptions = (grid && grid.getOptions) ? grid.getOptions() : {};\r\n\r\n    // Subscribe to Event Emitter of Filter & Sort changed, go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterChanged.subscribe((currentFilters: CurrentFilter[]) => {\r\n      this.onGridStateChanged.next({ change: { newValues: currentFilters, type: GridStateType.filter }, gridState: this.getCurrentGridState() });\r\n    });\r\n    this._sorterSubcription = this.sortService.onSortChanged.subscribe((currentSorters: CurrentSorter[]) => {\r\n      this.onGridStateChanged.next({ change: { newValues: currentSorters, type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n    });\r\n  }\r\n\r\n  dispose() {\r\n    this._filterSubcription.unsubscribe();\r\n    this._sorterSubcription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Get the current grid state (filters/sorters/pagination)\r\n   * @return grid state\r\n   */\r\n  getCurrentGridState(): GridState {\r\n    const gridState: GridState = {\r\n      filters: this.getCurrentFilters(),\r\n      sorters: this.getCurrentSorters()\r\n    };\r\n\r\n    const currentPagination = this.getCurrentPagination();\r\n    if (currentPagination) {\r\n      gridState.pagination = currentPagination;\r\n    }\r\n    return gridState;\r\n  }\r\n\r\n  /**\r\n   * Get the Filters (and their state, columnId, searchTerm(s)) that are currently applied in the grid\r\n   * @return current filters\r\n   */\r\n  getCurrentFilters(): CurrentFilter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentFilters) {\r\n        return backendService.getCurrentFilters() as CurrentFilter[];\r\n      }\r\n    } else if (this.filterService && this.filterService.getCurrentLocalFilters) {\r\n      return this.filterService.getCurrentLocalFilters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get current Pagination (and it's state, pageNumber, pageSize) that are currently applied in the grid\r\n   * @return current pagination state\r\n   */\r\n  getCurrentPagination(): CurrentPagination | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentPagination) {\r\n        return backendService.getCurrentPagination();\r\n      }\r\n    } else {\r\n      // TODO implement this whenever local pagination gets implemented\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get the current Sorters (and their state, columnId, direction) that are currently applied in the grid\r\n   * @return current sorters\r\n   */\r\n  getCurrentSorters(): CurrentSorter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        return backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n    } else if (this.sortService && this.sortService.getCurrentLocalSorters) {\r\n      return this.sortService.getCurrentLocalSorters();\r\n    }\r\n    return null;\r\n  }\r\n}\r\n",
    "import { castToPromise } from './utilities';\nimport { Column, FieldType, GridOption, SlickEvent, SortChanged, SortDirection, CurrentSorter, CellArgs, SortDirectionString } from './../models/index';\nimport { sortByFieldType } from '../sorters/sorterUtilities';\nimport { Sorters } from './../sorters';\nimport { Subject } from 'rxjs/Subject';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class SortService {\n  private _currentLocalSorters: CurrentSorter[] = [];\n  private _eventHandler: any = new Slick.EventHandler();\n  private _grid: any;\n  private _gridOptions: GridOption;\n  private _slickSubscriber: SlickEvent;\n  onSortChanged = new Subject<CurrentSorter[]>();\n\n  /**\n   * Attach a backend sort (single/multi) hook to the grid\n   * @param grid SlickGrid Grid object\n   * @param gridOptions Grid Options object\n   */\n  attachBackendOnSort(grid: any, gridOptions: GridOption) {\n    this._grid = grid;\n    this._gridOptions = gridOptions;\n    this._slickSubscriber = grid.onSort;\n\n    // subscribe to the SlickGrid event and call the backend execution\n    this._slickSubscriber.subscribe(this.attachBackendOnSortSubscribe.bind(this));\n  }\n\n  async attachBackendOnSortSubscribe(event: Event, args: any) {\n    if (!args || !args.grid) {\n      throw new Error('Something went wrong when trying to attach the \"attachBackendOnSortSubscribe(event, args)\" function, it seems that \"args\" is not populated correctly');\n    }\n    const gridOptions: GridOption = args.grid.getOptions() || {};\n    const backendApi = gridOptions.backendServiceApi || gridOptions.onBackendEventApi;\n\n    if (!backendApi || !backendApi.process || !backendApi.service) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n    if (backendApi.preProcess) {\n      backendApi.preProcess();\n    }\n    const query = backendApi.service.onSortChanged(event, args);\n    this.emitSortChanged('remote');\n\n    // the process could be an Observable (like HttpClient) or a Promise\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n    const observableOrPromise = backendApi.process(query);\n    const processResult = await castToPromise(observableOrPromise);\n\n    // from the result, call our internal post process to update the Dataset and Pagination info\n    if (processResult && backendApi.internalPostProcess) {\n      backendApi.internalPostProcess(processResult);\n    }\n\n    // send the response process to the postProcess callback\n    if (backendApi.postProcess) {\n      backendApi.postProcess(processResult);\n    }\n  }\n\n  /**\n   * Attach a local sort (single/multi) hook to the grid\n   * @param grid SlickGrid Grid object\n   * @param gridOptions Grid Options object\n   * @param dataView\n   */\n  attachLocalOnSort(grid: any, gridOptions: GridOption, dataView: any, columnDefinitions: Column[]) {\n    this._grid = grid;\n    this._gridOptions = gridOptions;\n    this._slickSubscriber = grid.onSort;\n\n    this._slickSubscriber.subscribe((e: any, args: any) => {\n      // multiSort and singleSort are not exactly the same, but we want to structure it the same for the (for loop) after\n      // also to avoid having to rewrite the for loop in the sort, we will make the singleSort an array of 1 object\n      const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({sortAsc: args.sortAsc, sortCol: args.sortCol});\n\n      // keep current sorters\n      this._currentLocalSorters = []; // reset current local sorters\n      if (Array.isArray(sortColumns)) {\n        sortColumns.forEach((sortColumn) => {\n          if (sortColumn.sortCol) {\n            this._currentLocalSorters.push({\n              columnId: sortColumn.sortCol.id,\n              direction: sortColumn.sortAsc ? SortDirection.ASC : SortDirection.DESC\n            });\n          }\n        });\n      }\n\n      this.onLocalSortChanged(grid, gridOptions, dataView, sortColumns);\n      this.emitSortChanged('local');\n    });\n\n    this._eventHandler.subscribe(dataView.onRowCountChanged, (e: Event, args: any) => {\n      // load any presets if there are any\n      if (args.current > 0) {\n        this.loadLocalPresets(grid, gridOptions, dataView, columnDefinitions);\n      }\n    });\n  }\n\n  getCurrentLocalSorters(): CurrentSorter[] {\n    return this._currentLocalSorters;\n  }\n\n  /**\n   * load any presets if there are any\n   * @param grid\n   * @param gridOptions\n   * @param dataView\n   * @param columnDefinitions\n   */\n  loadLocalPresets(grid: any, gridOptions: GridOption, dataView: any, columnDefinitions: Column[]) {\n    const sortCols: SortChanged[] = [];\n    this._currentLocalSorters = []; // reset current local sorters\n    if (gridOptions && gridOptions.presets && gridOptions.presets.sorters) {\n      const sorters = gridOptions.presets.sorters;\n      columnDefinitions.forEach((columnDef: Column) =>  {\n        const columnPreset = sorters.find((currentSorter: CurrentSorter) => {\n          return currentSorter.columnId === columnDef.id;\n        });\n        if (columnPreset) {\n          sortCols.push({\n            columnId: columnDef.id,\n            sortAsc: ((columnPreset.direction.toUpperCase() === SortDirection.ASC) ? true : false),\n            sortCol: columnDef\n          });\n\n          // keep current sorters\n          this._currentLocalSorters.push({\n            columnId: columnDef.id + '',\n            direction: columnPreset.direction.toUpperCase() as SortDirectionString\n          });\n        }\n      });\n\n      if (sortCols.length > 0) {\n        this.onLocalSortChanged(grid, gridOptions, dataView, sortCols);\n        grid.setSortColumns(sortCols);\n      }\n    }\n  }\n\n  onLocalSortChanged(grid: any, gridOptions: GridOption, dataView: any, sortColumns: SortChanged[]) {\n    dataView.sort((dataRow1: any, dataRow2: any) => {\n      for (let i = 0, l = sortColumns.length; i < l; i++) {\n        const columnSortObj = sortColumns[i];\n        if (columnSortObj && columnSortObj.sortCol) {\n          const sortDirection = columnSortObj.sortAsc ? 1 : -1;\n          const sortField = columnSortObj.sortCol.queryField || columnSortObj.sortCol.queryFieldFilter || columnSortObj.sortCol.field;\n          const fieldType = columnSortObj.sortCol.type || FieldType.string;\n          const value1 = dataRow1[sortField];\n          const value2 = dataRow2[sortField];\n          return sortByFieldType(value1, value2, fieldType, sortDirection);\n        }\n      }\n      return 0;\n    });\n    grid.invalidate();\n    grid.render();\n  }\n\n  dispose() {\n    // unsubscribe local event\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\n      this._slickSubscriber.unsubscribe();\n    }\n\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n  }\n\n  /**\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\n   * Other services, like Pagination, can then subscribe to it.\n   * @param sender\n   */\n  emitSortChanged(sender: 'local' | 'remote') {\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\n      let currentSorters: CurrentSorter[] = [];\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentSorters) {\n        currentSorters = backendService.getCurrentSorters() as CurrentSorter[];\n      }\n      this.onSortChanged.next(currentSorters);\n    } else if (sender === 'local') {\n      this.onSortChanged.next(this.getCurrentLocalSorters());\n    }\n  }\n}\n",
    "import { Editor } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class CheckboxEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: boolean;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"checkbox\" value=\"true\" class=\"editor-checkbox\" />`);\r\n    this.$input.appendTo(this.args.container);\r\n    this.$input.focus();\r\n  }\r\n\r\n  destroy(): void {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus(): void {\r\n    this.$input.focus();\r\n  }\r\n\r\n  hide() {\r\n    this.$input.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$input.show();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = !!item[this.args.column.field];\r\n    if (this.defaultValue) {\r\n      this.$input.prop('checked', true);\r\n    } else {\r\n      this.$input.prop('checked', false);\r\n    }\r\n  }\r\n\r\n  preClick() {\r\n    this.$input.prop('checked', !this.$input.prop('checked'));\r\n  }\r\n\r\n  serializeValue(): boolean {\r\n    return this.$input.prop('checked');\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (this.serializeValue() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { mapFlatpickrDateFormatWithFieldType } from './../services/utilities';\r\nimport { Column, Editor, FieldType, GridOption } from './../models/index';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a date picker editor using Flatpickr\r\n * https://chmln.github.io/flatpickr\r\n */\r\nexport class DateEditor implements Editor {\r\n  $input: any;\r\n  flatInstance: any;\r\n  defaultDate: string;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    const gridOptions = this.args.grid.getOptions() as GridOption;\r\n    this.defaultDate = this.args.item[this.args.column.field] || null;\r\n    const inputFormat = mapFlatpickrDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n    const outputFormat = mapFlatpickrDateFormatWithFieldType(this.args.column.outputType || FieldType.dateUtc);\r\n    let currentLocale = this.getCurrentLocale(this.args.column, gridOptions);\r\n    if (currentLocale.length > 2) {\r\n      currentLocale = currentLocale.substring(0, 2);\r\n    }\r\n\r\n    const pickerOptions: any = {\r\n      defaultDate: this.defaultDate,\r\n      altInput: true,\r\n      altFormat: inputFormat,\r\n      dateFormat: outputFormat,\r\n      closeOnSelect: false,\r\n      locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n      onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n        this.save();\r\n      },\r\n    };\r\n\r\n\r\n    this.$input = $(`<input type=\"text\" data-defaultDate=\"${this.defaultDate}\" class=\"editor-text flatpickr\" />`);\r\n    this.$input.appendTo(this.args.container);\r\n    this.flatInstance = (this.$input[0] && typeof this.$input[0].flatpickr === 'function') ? this.$input[0].flatpickr(pickerOptions) : null;\r\n    this.show();\r\n  }\r\n\r\n  getCurrentLocale(columnDef: Column, gridOptions: GridOption) {\r\n    const params = gridOptions.params || columnDef.params || {};\r\n    if (params.i18n && params.i18n instanceof TranslateService) {\r\n      return params.i18n.currentLang;\r\n    }\r\n\r\n    return 'en';\r\n  }\r\n\r\n  loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  destroy() {\r\n    this.hide();\r\n    // this.flatInstance.destroy();\r\n    this.$input.remove();\r\n  }\r\n\r\n  show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultDate = item[this.args.column.field];\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultDate == null)) && (this.$input.val() !== this.defaultDate);\r\n  }\r\n\r\n  validate() {\r\n    if (this.args.column.validator) {\r\n      const validationResults = this.args.column.validator(this.$input.val(), this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Editor, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nconst defaultDecimalPlaces = 0;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class FloatEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"text\" class='editor-text' />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      })\r\n      .focus()\r\n      .select();\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getDecimalPlaces() {\r\n    // returns the number of fixed decimal places or null\r\n    let rtn = this.args.column.editorFixedDecimalPlaces;\r\n    if (rtn === undefined) {\r\n      rtn = defaultDecimalPlaces;\r\n    }\r\n    return (!rtn && rtn !== 0 ? null : rtn);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field];\r\n\r\n    const decPlaces = this.getDecimalPlaces();\r\n    if (decPlaces !== null\r\n      && (this.defaultValue || this.defaultValue === 0)\r\n      && this.defaultValue.toFixed) {\r\n      this.defaultValue = this.defaultValue.toFixed(decPlaces);\r\n    }\r\n\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    let rtn = parseFloat(this.$input.val()) || 0;\r\n    const decPlaces = this.getDecimalPlaces();\r\n    if (decPlaces !== null\r\n      && (rtn || rtn === 0)\r\n      && rtn.toFixed) {\r\n      rtn = parseFloat(rtn.toFixed(decPlaces));\r\n    }\r\n\r\n    return rtn;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue === null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    if (isNaN(this.$input.val())) {\r\n      return {\r\n        valid: false,\r\n        msg: 'Please enter a valid number'\r\n      };\r\n    }\r\n\r\n    if (this.args.column.validator) {\r\n      const validationResults = this.args.column.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Editor, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class IntegerEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"text\" class='editor-text' />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      })\r\n      .focus()\r\n      .select();\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field];\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return parseInt(this.$input.val() as string, 10) || 0;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue === null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    if (isNaN(this.$input.val() as number)) {\r\n      return {\r\n        valid: false,\r\n        msg: 'Please enter a valid integer'\r\n      };\r\n    }\r\n\r\n    if (this.args.column.validator) {\r\n      const validationResults = this.args.column.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Editor, HtmlElementPosition, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class LongTextEditor implements Editor {\r\n  $input: any;\r\n  $wrapper: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    const $container = $('body');\r\n\r\n    this.$wrapper = $(`<div class=\"slick-large-editor-text\" />`).appendTo($container);\r\n    this.$input = $(`<textarea hidefocus rows=\"5\">`).appendTo(this.$wrapper);\r\n\r\n    $(`<div class=\"editor-footer\">\r\n        <button class=\"btn btn-primary btn-xs\">Save</button>\r\n        <button class=\"btn btn-default btn-xs\">Cancel</button>\r\n      </div>`).appendTo(this.$wrapper);\r\n\r\n    this.$wrapper.find('button:first').on('click', (event: Event) => this.save());\r\n    this.$wrapper.find('button:last').on('click', (event: Event) => this.cancel());\r\n    this.$input.on('keydown', this.handleKeyDown);\r\n\r\n    this.position(this.args.position);\r\n    this.$input.focus().select();\r\n  }\r\n\r\n  handleKeyDown(e: any) {\r\n    if (e.which === KeyCode.ENTER && e.ctrlKey) {\r\n      this.save();\r\n    } else if (e.which === KeyCode.ESCAPE) {\r\n      e.preventDefault();\r\n      this.cancel();\r\n    } else if (e.which === KeyCode.TAB && e.shiftKey) {\r\n      e.preventDefault();\r\n      this.args.grid.navigatePrev();\r\n    } else if (e.which === KeyCode.TAB) {\r\n      e.preventDefault();\r\n      this.args.grid.navigateNext();\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  cancel() {\r\n    this.$input.val(this.defaultValue);\r\n    this.args.cancelChanges();\r\n  }\r\n\r\n  hide() {\r\n    this.$wrapper.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$wrapper.show();\r\n  }\r\n\r\n  position(position: HtmlElementPosition) {\r\n    this.$wrapper\r\n      .css('top', (position.top || 0) - 5)\r\n      .css('left', (position.left || 0) - 5);\r\n  }\r\n\r\n  destroy() {\r\n    this.$wrapper.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.$input.val(this.defaultValue = item[this.args.column.field]);\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue == null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    let valid = true;\r\n    let msg = null;\r\n    if (this.args.column.validator) {\r\n      const validationResults = this.args.column.validator(this.$input.val(), this.args);\r\n      valid = validationResults.valid;\r\n      msg = validationResults.msg;\r\n    }\r\n\r\n    return {\r\n      valid,\r\n      msg\r\n    };\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport {\n  Editor,\n  Column,\n  GridOption,\n  MultipleSelectOption,\n  SelectOption\n} from './../models/index';\nimport { arraysEqual, CollectionService } from '../services/index';\n\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n/**\n * Slickgrid editor class for multiple select lists\n */\nexport class MultipleSelectEditor implements Editor {\n  /** The JQuery DOM element */\n  $editorElm: any;\n\n  /** The slick grid column being edited */\n  columnDef: Column;\n\n  /** The multiple-select options for a multiple select list */\n  defaultOptions: MultipleSelectOption;\n\n  /** The default item values that are set */\n  defaultValue: any[];\n\n  /** The options label/value object to use in the select list */\n  collection: SelectOption[] = [];\n\n  /** The property name for values in the collection */\n  valueName: string;\n\n  /** The property name for labels in the collection */\n  labelName: string;\n\n  /** Grid options */\n  gridOptions: GridOption;\n\n  /** Do we translate the label? */\n  enableTranslateLabel: boolean;\n\n  /** The i18n aurelia library */\n  private _translate: TranslateService;\n\n  constructor(private args: any) {\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\n    const params = this.gridOptions.params || this.args.column.params || {};\n    this._translate = params.i18n;\n\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,\n      maxHeight: 200,\n      addTitle: true,\n      okButton: true,\n      selectAllDelimiter: ['', ''],\n      width: 150,\n      offsetLeft: 20\n    };\n\n    if (this._translate) {\n      this.defaultOptions.countSelected = this._translate.instant('X_OF_Y_SELECTED');\n      this.defaultOptions.allSelected = this._translate.instant('ALL_SELECTED');\n      this.defaultOptions.selectAllText = this._translate.instant('SELECT_ALL');\n    }\n\n    this.init();\n  }\n\n  /**\n   * The current selected values from the collection\n   */\n  get currentValues() {\n    return this.collection\n      .filter(c => this.$editorElm.val().indexOf(c[this.valueName].toString()) !== -1)\n      .map(c => c[this.valueName]);\n  }\n\n  init() {\n    if (!this.args) {\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\n    }\n\n    this.columnDef = this.args.column;\n\n    if (!this.columnDef || !this.columnDef.params || !this.columnDef.params.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" on the params property in the column definition for the MultipleSelect Editor to work correctly.\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\n      For example: { params: { { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } } }`);\n    }\n\n    const collectionService = new CollectionService(this._translate);\n    this.enableTranslateLabel = (this.columnDef.params.enableTranslateLabel) ? this.columnDef.params.enableTranslateLabel : false;\n    let newCollection =  this.columnDef.params.collection || [];\n    this.labelName = (this.columnDef.params.customStructure) ? this.columnDef.params.customStructure.label : 'label';\n    this.valueName = (this.columnDef.params.customStructure) ? this.columnDef.params.customStructure.value : 'value';\n\n    // user might want to filter certain items of the collection\n    if (this.gridOptions.params && this.columnDef.params.collectionFilterBy) {\n      const filterBy = this.columnDef.params.collectionFilterBy;\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.gridOptions.params && this.columnDef.params.collectionSortBy) {\n      const sortBy = this.columnDef.params.collectionSortBy;\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\n\n    this.createDomElement(editorTemplate);\n  }\n\n  applyValue(item: any, state: any): void {\n    item[this.args.column.field] = state;\n  }\n\n  destroy() {\n    this.$editorElm.remove();\n  }\n\n  loadValue(item: any): void {\n    // convert to string because that is how the DOM will return these values\n    this.defaultValue = item[this.columnDef.field].map((i: any) => i.toString());\n\n    this.$editorElm.find('option').each((i: number, $e: any) => {\n      if (this.defaultValue.indexOf($e.value) !== -1) {\n        $e.selected = true;\n      } else {\n        $e.selected = false;\n      }\n    });\n\n    this.refresh();\n  }\n\n  serializeValue(): any {\n    return this.currentValues;\n  }\n\n  focus() {\n    this.$editorElm.focus();\n  }\n\n  isValueChanged(): boolean {\n    return !arraysEqual(this.$editorElm.val(), this.defaultValue);\n  }\n\n  validate() {\n    if (this.args.column.validator) {\n      const validationResults = this.args.column.validator(this.currentValues, this.args);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n\n  private buildTemplateHtmlString(collection: any[]) {\n    let options = '';\n    collection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example: { collection: [ { value: '1', label: 'One' } ])`);\n      }\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\n\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\n    });\n\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\n  }\n\n  private createDomElement(editorTemplate: string) {\n    this.$editorElm = $(editorTemplate);\n\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\n      this.$editorElm.appendTo(this.args.container);\n    }\n\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\n      // fallback to bootstrap\n      this.$editorElm.addClass('form-control');\n    } else {\n      const elementOptions = (this.columnDef.params) ? this.columnDef.params.elementOptions : {};\n      const options: MultipleSelectOption = { ...this.defaultOptions, ...elementOptions };\n      this.$editorElm = this.$editorElm.multipleSelect(options);\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\n    }\n  }\n\n  // refresh the jquery object because the selected checkboxes were already set\n  // prior to this method being called\n  private refresh() {\n    if (typeof this.$editorElm.multipleSelect === 'function') {\n      this.$editorElm.multipleSelect('refresh');\n    }\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport {\n  Editor,\n  Column,\n  GridOption,\n  MultipleSelectOption,\n  SelectOption\n} from './../models/index';\nimport { findOrDefault, CollectionService } from '../services/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n/**\n * Slickgrid editor class for single select lists\n */\nexport class SingleSelectEditor implements Editor {\n  /** The JQuery DOM element */\n  $editorElm: any;\n\n  /** The slick grid column being edited */\n  columnDef: Column;\n\n  /** The multiple-select options for a single select */\n  defaultOptions: any;\n\n  /** The default item value that is set */\n  defaultValue: any;\n\n  /** The options label/value object to use in the select list */\n  collection: SelectOption[] = [];\n\n  /** The property name for values in the collection */\n  valueName: string;\n\n  /** The property name for labels in the collection */\n  labelName: string;\n\n  /** Grid options */\n  gridOptions: GridOption;\n\n  /** Do we translate the label? */\n  enableTranslateLabel: boolean;\n\n  /** The i18n aurelia library */\n  private _translate: TranslateService;\n\n  constructor(private args: any) {\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\n    const params = this.gridOptions.params || this.args.column.params || {};\n    this._translate = params.i18n;\n\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,\n      maxHeight: 200,\n      width: 150,\n      offsetLeft: 20,\n      single: true\n    };\n\n    this.init();\n  }\n\n  /**\n   * The current selected value from the collection\n   */\n  get currentValue() {\n    return findOrDefault(this.collection, (c: any) =>\n      c[this.valueName].toString() === this.$editorElm.val())[this.valueName];\n  }\n\n  init() {\n    if (!this.args) {\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\n    }\n\n    this.columnDef = this.args.column;\n\n    if (!this.columnDef || !this.columnDef.params || !this.columnDef.params.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" on the params property in the column definition for the MultipleSelect Editor to work correctly.\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\n      For example: { params: { { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } } }`);\n    }\n\n    const collectionService = new CollectionService(this._translate);\n    this.enableTranslateLabel = (this.columnDef.params.enableTranslateLabel) ? this.columnDef.params.enableTranslateLabel : false;\n    let newCollection =  this.columnDef.params.collection || [];\n    this.labelName = (this.columnDef.params.customStructure) ? this.columnDef.params.customStructure.label : 'label';\n    this.valueName = (this.columnDef.params.customStructure) ? this.columnDef.params.customStructure.value : 'value';\n\n    // user might want to filter certain items of the collection\n    if (this.gridOptions.params && this.columnDef.params.collectionFilterBy) {\n      const filterBy = this.columnDef.params.collectionFilterBy;\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.gridOptions.params && this.columnDef.params.collectionSortBy) {\n      const sortBy = this.columnDef.params.collectionSortBy;\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\n\n    this.createDomElement(editorTemplate);\n  }\n\n  applyValue(item: any, state: any): void {\n    item[this.args.column.field] = state;\n  }\n\n  destroy() {\n    this.$editorElm.remove();\n  }\n\n  loadValue(item: any): void {\n    // convert to string because that is how the DOM will return these values\n    this.defaultValue = item[this.columnDef.field].toString();\n\n    this.$editorElm.find('option').each((i: number, $e: any) => {\n      if (this.defaultValue.indexOf($e.value) !== -1) {\n        $e.selected = true;\n      } else {\n        $e.selected = false;\n      }\n    });\n\n    this.refresh();\n  }\n\n  serializeValue(): any {\n    return this.currentValue;\n  }\n\n  focus() {\n    this.$editorElm.focus();\n  }\n\n  isValueChanged(): boolean {\n    return this.$editorElm.val() !== this.defaultValue;\n  }\n\n  validate() {\n    if (this.args.column.validator) {\n      const validationResults = this.args.column.validator(this.currentValue, this.args);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n\n  private buildTemplateHtmlString(collection: any[]) {\n    let options = '';\n    collection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error('A collection with value/label (or value/labelKey when using ' +\n          'Locale) is required to populate the Select list, for example: { params: { ' +\n          '{ collection: [ { value: \\'1\\', label: \\'One\\' } ] } } }');\n      }\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\n\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\n    });\n\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\n  }\n\n  private createDomElement(editorTemplate: string) {\n    this.$editorElm = $(editorTemplate);\n\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\n      this.$editorElm.appendTo(this.args.container);\n    }\n\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\n      // fallback to bootstrap\n      this.$editorElm.addClass('form-control');\n    } else {\n      const elementOptions = (this.columnDef.params) ? this.columnDef.params.elementOptions : {};\n      const options: MultipleSelectOption = { ...this.defaultOptions, ...elementOptions };\n      this.$editorElm = this.$editorElm.multipleSelect(options);\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\n    }\n  }\n\n  // refresh the jquery object because the selected checkboxes were already set\n  // prior to this method being called\n  private refresh() {\n    if (typeof this.$editorElm.multipleSelect === 'function') {\n      this.$editorElm.multipleSelect('refresh');\n    }\n  }\n}\n",
    "import { Editor, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class TextEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"text\" class='editor-text' />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      })\r\n      .focus()\r\n      .select();\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this.$input.val(val);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field] || '';\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue === null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    if (this.args.column.validator) {\r\n      const validationResults = this.args.column.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { CheckboxEditor } from './checkboxEditor';\nimport { DateEditor } from './dateEditor';\nimport { FloatEditor } from './floatEditor';\nimport { IntegerEditor } from './integerEditor';\nimport { LongTextEditor } from './longTextEditor';\nimport { MultipleSelectEditor } from './multipleSelectEditor';\nimport { SingleSelectEditor } from './singleSelectEditor';\nimport { TextEditor } from './textEditor';\n\nexport const Editors = {\n  checkbox: CheckboxEditor,\n  date: DateEditor,\n  float: FloatEditor,\n  integer: IntegerEditor,\n  longText: LongTextEditor,\n  multipleSelect: MultipleSelectEditor,\n  singleSelect: SingleSelectEditor,\n  text: TextEditor\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const arrayToCsvFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && Array.isArray(value)) {\n    const values = value.join(', ');\n    return `<span title=\"${values}\">${values}</span>`;\n  }\n  return '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkboxFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? '&#x2611;' : '';\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkmarkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? `<i class=\"fa fa-check checkmark-icon\" aria-hidden=\"true\"></i>` : '';\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\r\nimport { Column, Formatter } from './../models/index';\r\nimport { findOrDefault } from '../services/utilities';\r\n\r\n/**\r\n * A formatter to show the label property value of a params collection\r\n */\r\nexport const collectionFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\r\n  if (!value || !columnDef || !columnDef.params || !columnDef.params.collection\r\n    || !columnDef.params.collection.length) {\r\n    return '';\r\n  }\r\n\r\n  const { params, params: { collection } } = columnDef;\r\n  const labelName = (params.customStructure) ? params.customStructure.label : 'label';\r\n  const valueName = (params.customStructure) ? params.customStructure.value : 'value';\r\n\r\n  if (Array.isArray(value)) {\r\n    return arrayToCsvFormatter(row,\r\n      cell,\r\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\r\n      columnDef,\r\n      dataContext);\r\n  }\r\n\r\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const complexObjectFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!columnDef) {\n    return '';\n  }\n  const complexField = columnDef.field || '';\n  return complexField.split('.').reduce((obj, i) => obj[i], dataContext);\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIso);\n\nexport const dateTimeIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? moment(value).format(FORMAT) : '';\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIsoAmPm);\r\n\r\nexport const dateTimeIsoAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUsAmPm);\r\n\r\nexport const dateTimeUsAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUs);\r\n\r\nexport const dateTimeUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const deleteIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-trash pointer delete-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const editIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-pencil pointer edit-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const hyperlinkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && typeof value === 'string') {\n    const matchUrl = value.match(/^(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:\\/~\\+#]*[\\w\\-\\@?^=%&amp;\\/~\\+#])?/i);\n    if (matchUrl && Array.isArray(matchUrl)) {\n      return `<a href=\"${matchUrl[0]}\">' + value + '</a>`;\n    }\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\nexport const hyperlinkUriPrefixFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  let uriPrefix = (columnDef && columnDef.params && columnDef.params.uriPrefix) ? columnDef.params.uriPrefix : '';\n  if (!uriPrefix) {\n    throw new Error(`HyperlinkUriPrefix Formatter require a \"uriPrefix\" that can be passed through params. e.g.:: formatter: Formatters.hyperlinkUriPrefix, params: { uriPrefix: '/users/' }`);\n  }\n  if (value && uriPrefix && typeof uriPrefix === 'string' && !uriPrefix.includes('<script>')) {\n    uriPrefix += value;\n    return '<a href=\"' + uriPrefix + '\">' + value + '</a>';\n  }\n  return '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const infoIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-info-circle pointer info-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const lowercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toLowerCase() : '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\nexport const multipleFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const params = columnDef.params || {};\n  if (!params.formatters || !Array.isArray(params.formatters)) {\n    throw new Error(`The multiple formatter requires the \"formatters\" to be provided as a column params.\n    For example: this.columnDefinitions = [{ id: title, field: title, formatter: Formatters.multiple, params: { formatters: [Formatters.lowercase, Formatters.uppercase] }`);\n  }\n  const formatters: Formatter[] = params.formatters;\n\n  // loop through all Formatters, the value of 1st formatter will be used by 2nd formatter and so on.\n  // they are piped and executed in sequences\n  let currentValue = value;\n  for (const formatter of formatters) {\n    currentValue = formatter(row, cell, currentValue, columnDef, dataContext, grid);\n  }\n  return currentValue;\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '-';\n  } else if (value < 50) {\n    return `<span style='color:red;font-weight:bold;'>${value}%</span>`;\n  } else {\n    return `<span style='color:green'>${value}%</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'red';\n  } else if (value < 70) {\n    color = 'silver';\n  } else {\n    color = 'green';\n  }\n\n  return `<span class=\"percent-complete-bar\" style=\"background:${color}; width:${value}%\"></span>`;\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const progressBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'danger';\n  } else if (value < 70) {\n    color = 'warning';\n  } else {\n    color = 'success';\n  }\n\n  return `<div class=\"progress\">\n    <div class=\"progress-bar progress-bar-${color}\" role=\"progressbar\" aria-valuenow=\"${value}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"min-width: 2em; width: ${value}%;\">\n    ${value}%\n    </div>\n  </div>`;\n};\n",
    "import { Column, Formatter } from './../models/index';\r\n\r\n/** Takes a cell value and translates it with the \"ngx-translate\" service */\r\nexport const translateFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\r\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\r\n  const columnParams = columnDef.params || {};\r\n  const gridParams = gridOptions.params || {};\r\n  const translate = gridParams.i18n || columnParams.i18n;\r\n\r\n  if (!translate || typeof translate.instant !== 'function') {\r\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"params\".\r\n    For example: this.gridOptions = { enableTranslate: true, params: { i18n: this.translate }}`);\r\n  }\r\n\r\n  // make sure the value is a string (for example a boolean value would throw an error)\r\n  if (value !== undefined && typeof value !== 'string') {\r\n    value = value + '';\r\n  }\r\n\r\n  return value ? translate.instant(value) : '';\r\n};\r\n",
    "import { Column, Formatter } from './../models/index';\r\n\r\n/** Takes a boolean value, cast it to upperCase string and finally translates it with the \"ngx-translate\" service */\r\nexport const translateBooleanFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\r\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\r\n  const columnParams = columnDef.params || {};\r\n  const gridParams = gridOptions.params || {};\r\n  const translate = gridParams.i18n || columnParams.i18n;\r\n\r\n  if (!translate || typeof translate.instant !== 'function') {\r\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"params\".\r\n    For example: this.gridOptions = { enableTranslate: true, params: { i18n: this.translate }}`);\r\n  }\r\n\r\n  // make sure the value is a string (for example a boolean value would throw an error)\r\n  if (value !== undefined && typeof value !== 'string') {\r\n    value = value + '';\r\n  }\r\n  return value ? translate.instant(value.toUpperCase() as string) : '';\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const uppercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toUpperCase() : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const yesNoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string =>\n  value ? 'Yes' : 'No';\n",
    "import { Column } from './../models/index';\n// import { Group, GroupTotals } from '../core'\n// import { Item } from '../dataview'\nimport { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { checkboxFormatter } from './checkboxFormatter';\nimport { checkmarkFormatter } from './checkmarkFormatter';\nimport { collectionFormatter } from './collectionFormatter';\nimport { complexObjectFormatter } from './complexObjectFormatter';\nimport { dateIsoFormatter } from './dateIsoFormatter';\nimport { dateTimeIsoFormatter } from './dateTimeIsoFormatter';\nimport { dateTimeIsoAmPmFormatter } from './dateTimeIsoAmPmFormatter';\nimport { dateTimeUsAmPmFormatter } from './dateTimeUsAmPmFormatter';\nimport { dateTimeUsFormatter } from './dateTimeUsFormatter';\nimport { dateUsFormatter } from './dateUsFormatter';\nimport { deleteIconFormatter } from './deleteIconFormatter';\nimport { editIconFormatter } from './editIconFormatter';\nimport { hyperlinkFormatter } from './hyperlinkFormatter';\nimport { hyperlinkUriPrefixFormatter } from './hyperlinkUriPrefixFormatter';\nimport { infoIconFormatter } from './infoIconFormatter';\nimport { lowercaseFormatter } from './lowercaseFormatter';\nimport { multipleFormatter } from './multipleFormatter';\nimport { percentCompleteFormatter } from './percentCompleteFormatter';\nimport { percentCompleteBarFormatter } from './percentCompleteBarFormatter';\nimport { progressBarFormatter } from './progressBarFormatter';\nimport { translateFormatter } from './translateFormatter';\nimport { translateBooleanFormatter } from './translateBooleanFormatter';\nimport { uppercaseFormatter } from './uppercaseFormatter';\nimport { yesNoFormatter } from './yesNoFormatter';\n\n/*\nexport interface GroupFormatter {\n  (row: number, cell: number, value: any, columnDef: Column, dataContext: Group): string\n}\nexport interface GroupTotalsFormatter {\n  (row: number, cell: number, value: any, columnDef: Column, dataContext: GroupTotals): string\n}\n*/\n\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const Formatters = {\n  /** Takes an array of string and converts it to a comma delimited string */\n  arrayToCsv: arrayToCsvFormatter,\n\n  /** When value is filled (true), it will display a checkbox Unicode icon */\n  checkbox: checkboxFormatter,\n\n  /** When value is filled (true), it will display a Font-Awesome icon (fa-check) */\n  checkmark: checkmarkFormatter,\n\n  /** Takes a complex data object and return the data under that property (for example: \"user.firstName\" will return the first name \"John\") */\n  complexObject: complexObjectFormatter,\n\n  /**\n   * Looks up values from the columnDefinition.params.collection property and displays the label in CSV or string format\n   * @example\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\n   * const dataset = [{ value: 1 },{ value: 2 }];\n   */\n  collection: collectionFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date format */\n  dateIso: dateIsoFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date+Time format */\n  dateTimeIso: dateTimeIsoFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date+Time+(am/pm) format */\n  dateTimeIsoAmPm: dateTimeIsoAmPmFormatter,\n\n  /** Takes a Date object and displays it as an US Date format */\n  dateUs: dateUsFormatter,\n\n  /** Takes a Date object and displays it as an US Date+Time format */\n  dateTimeUs: dateTimeUsFormatter,\n\n  /** Takes a Date object and displays it as an US Date+Time+(am/pm) format */\n  dateTimeUsAmPm: dateTimeUsAmPmFormatter,\n\n  /** Displays a Font-Awesome delete icon (fa-trash) */\n  deleteIcon: deleteIconFormatter,\n\n  /** Displays a Font-Awesome edit icon (fa-pencil) */\n  editIcon: editIconFormatter,\n\n  /** Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https). The structure will be \"<a href=\"hyperlink\">hyperlink</a>\" */\n  hyperlink: hyperlinkFormatter,\n\n  /** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\n  hyperlinkUriPrefix: hyperlinkUriPrefixFormatter,\n\n  /** Displays a Font-Awesome edit icon (fa-info-circle) */\n  infoIcon: infoIconFormatter,\n\n  /** Takes a value and displays it all lowercase */\n  lowercase: lowercaseFormatter,\n\n  /**\n   * You can pipe multiple formatters (executed in sequence), use params to pass the list of formatters. For example::\n   * { field: 'title', formatter: Formatters.multiple, params: { formatters: [ Formatters.lowercase, Formatters.uppercase ] }\n   */\n  multiple: multipleFormatter,\n\n  /** Takes a cell value number (between 0-100) and displays a red (<50) or green (>=50) bar */\n  percentComplete: percentCompleteFormatter,\n\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"percent-complete-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\n  percentCompleteBar: percentCompleteBarFormatter,\n\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"progress-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\n  progressBar: progressBarFormatter,\n\n  /** Takes a cell value and translates it (i18n). Requires an instance of the Translate Service:: `params: { i18n: this.translate } */\n  translate: translateFormatter,\n\n  /** Takes a boolean value, cast it to upperCase string and finally translates it (i18n). */\n  translateBoolean: translateBooleanFormatter,\n\n  /** Takes a value and displays it all uppercase */\n  uppercase: uppercaseFormatter,\n\n  /** Takes a boolean value and display a string 'Yes' or 'No' */\n  yesNo: yesNoFormatter\n};\n",
    "import { Pagination } from './../models/pagination.interface';\r\nimport { AfterViewInit, Component, EventEmitter, Injectable, Input, OnDestroy, Output } from '@angular/core';\r\nimport { castToPromise } from './../services/utilities';\r\nimport { GridOption } from './../models/index';\r\nimport { FilterService, SortService } from './../services/index';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n@Component({\r\n  selector: 'slick-pagination',\r\n  template: `<div class=\"slick-pagination\">\r\n    <div class=\"slick-pagination-nav\">\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-first fa fa-angle-double-left\" aria-label=\"First\" (click)=\"changeToFirstPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-prev fa fa-angle-left\" aria-label=\"Previous\" (click)=\"changeToPreviousPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n\r\n        <div class=\"slick-page-number\">\r\n            <span [translate]=\"'PAGE'\"></span>\r\n            <input type=\"text\" class=\"form-control\" value=\"{{pageNumber}}\" size=\"1\"  (change)=\"changeToCurrentPage($event)\">\r\n            <span [translate]=\"'OF'\"></span><span> {{pageCount}}</span>\r\n        </div>\r\n\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-next text-center fa fa-lg fa-angle-right\" aria-label=\"Next\" (click)=\"changeToNextPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-end fa fa-lg fa-angle-double-right\" aria-label=\"Last\" (click)=\"changeToLastPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n    </div>\r\n    <span class=\"slick-pagination-settings\">\r\n        <select id=\"items-per-page-label\" [value]=\"itemsPerPage\" (change)=\"onChangeItemPerPage($event)\">\r\n        <option value=\"{{pageSize}}\" *ngFor=\"let pageSize of paginationPageSizes;\">{{pageSize}}</option>\r\n        </select>\r\n        <span [translate]=\"'ITEMS_PER_PAGE'\"></span>,\r\n        <span class=\"slick-pagination-count\">\r\n            <span [translate]=\"'FROM_TO_OF_TOTAL_ITEMS'\" [translateParams]=\"{ from: dataFrom, to: dataTo, totalItems: totalItems }\"></span>\r\n        </span>\r\n    </span>\r\n    </div>\r\n`\r\n})\r\n@Injectable()\r\nexport class SlickPaginationComponent implements AfterViewInit, OnDestroy {\r\n  private _filterSubcription: Subscription;\r\n  private _gridPaginationOptions: GridOption;\r\n  private _isFirstRender = true;\r\n  @Output() onPaginationChanged = new EventEmitter<Pagination>();\r\n\r\n  @Input()\r\n  set gridPaginationOptions(gridPaginationOptions: GridOption) {\r\n    this._gridPaginationOptions = gridPaginationOptions;\r\n    if (this._isFirstRender || !gridPaginationOptions || !gridPaginationOptions.pagination || (gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n      this._isFirstRender = false;\r\n    }\r\n  }\r\n  get gridPaginationOptions(): GridOption {\r\n    return this._gridPaginationOptions;\r\n  }\r\n  @Input() grid: any;\r\n  dataFrom = 1;\r\n  dataTo = 1;\r\n  itemsPerPage: number;\r\n  pageCount = 0;\r\n  pageNumber = 1;\r\n  totalItems = 0;\r\n  paginationCallback: Function;\r\n  paginationPageSizes = [25, 75, 100];\r\n  fromToParams: any = { from: this.dataFrom, to: this.dataTo, totalItems: this.totalItems };\r\n\r\n  /** Constructor */\r\n  constructor(private filterService: FilterService, private sortService: SortService) { }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._gridPaginationOptions = this._gridPaginationOptions;\r\n    if (!this._gridPaginationOptions || !this._gridPaginationOptions.pagination || (this._gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n    }\r\n\r\n    // Subscribe to Event Emitter of Filter & Sort changed, go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterChanged.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n  }\r\n\r\n  ceil(number: number) {\r\n    return Math.ceil(number);\r\n  }\r\n\r\n  changeToFirstPage(event: any) {\r\n    this.pageNumber = 1;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToLastPage(event: any) {\r\n    this.pageNumber = this.pageCount;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToNextPage(event: any) {\r\n    if (this.pageNumber < this.pageCount) {\r\n      this.pageNumber++;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToPreviousPage(event: any) {\r\n    if (this.pageNumber > 0) {\r\n      this.pageNumber--;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToCurrentPage(event: any) {\r\n    this.pageNumber = event.currentTarget.value;\r\n    if (this.pageNumber < 1) {\r\n          this.pageNumber = 1;\r\n    } else if (this.pageNumber > this.pageCount) {\r\n          this.pageNumber = this.pageCount;\r\n    }\r\n\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  dispose() {\r\n    this.onPaginationChanged.unsubscribe();\r\n    if (this._filterSubcription) {\r\n      this._filterSubcription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  onChangeItemPerPage(event: any) {\r\n    const itemsPerPage = +event.target.value;\r\n    this.pageCount = Math.ceil(this.totalItems / itemsPerPage);\r\n    this.pageNumber = 1;\r\n    this.itemsPerPage = itemsPerPage;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  refreshPagination(isPageNumberReset: boolean = false) {\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi || this._gridPaginationOptions.onBackendEventApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this._gridPaginationOptions && this._gridPaginationOptions.pagination) {\r\n      const pagination = this._gridPaginationOptions.pagination;\r\n      // set the number of items per page if not already set\r\n      if (!this.itemsPerPage) {\r\n        this.itemsPerPage = +((backendApi && backendApi.options && backendApi.options.paginationOptions && backendApi.options.paginationOptions.first) ? backendApi.options.paginationOptions.first : this._gridPaginationOptions.pagination.pageSize);\r\n      }\r\n\r\n      // if totalItems changed, we should always go back to the first page and recalculation the From-To indexes\r\n      if (isPageNumberReset || this.totalItems !== pagination.totalItems) {\r\n        if (this._isFirstRender && pagination.pageNumber && pagination.pageNumber > 1) {\r\n          this.pageNumber = pagination.pageNumber || 1;\r\n        } else {\r\n          this.pageNumber = 1;\r\n        }\r\n\r\n        // when page number is set to 1 then also reset the \"offset\" of backend service\r\n        if (this.pageNumber === 1) {\r\n          backendApi.service.resetPaginationOptions();\r\n        }\r\n      }\r\n\r\n      // calculate and refresh the multiple properties of the pagination UI\r\n      this.paginationPageSizes = this._gridPaginationOptions.pagination.pageSizes;\r\n      this.totalItems = this._gridPaginationOptions.pagination.totalItems;\r\n      this.recalculateFromToIndexes();\r\n    }\r\n    this.pageCount = Math.ceil(this.totalItems / this.itemsPerPage);\r\n  }\r\n\r\n  async onPageChanged(event: Event | undefined, pageNumber: number) {\r\n    this.recalculateFromToIndexes();\r\n\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi || this._gridPaginationOptions.onBackendEventApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this.dataTo > this.totalItems) {\r\n      this.dataTo = this.totalItems;\r\n    } else if (this.totalItems < this.itemsPerPage) {\r\n      this.dataTo = this.totalItems;\r\n    }\r\n    if (backendApi) {\r\n      const itemsPerPage = +this.itemsPerPage;\r\n\r\n      if (backendApi.preProcess) {\r\n        backendApi.preProcess();\r\n      }\r\n\r\n      const query = backendApi.service.onPaginationChanged(event, { newPage: pageNumber, pageSize: itemsPerPage });\r\n\r\n      // the process could be an Observable (like HttpClient) or a Promise\r\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n      const observableOrPromise = backendApi.process(query);\r\n      const processResult = await castToPromise(observableOrPromise);\r\n\r\n      // from the result, call our internal post process to update the Dataset and Pagination info\r\n      if (processResult && backendApi.internalPostProcess) {\r\n        backendApi.internalPostProcess(processResult);\r\n      }\r\n\r\n      // send the response process to the postProcess callback\r\n      if (backendApi.postProcess) {\r\n        backendApi.postProcess(processResult);\r\n      }\r\n    } else {\r\n      throw new Error('Pagination with a backend service requires \"BackendServiceApi\" to be defined in your grid options');\r\n    }\r\n\r\n    // emit the changes to the parent component\r\n    this.onPaginationChanged.emit({\r\n      pageNumber: this.pageNumber,\r\n      pageSizes: this.paginationPageSizes,\r\n      pageSize: this.itemsPerPage,\r\n      totalItems: this.totalItems\r\n    });\r\n  }\r\n\r\n  recalculateFromToIndexes() {\r\n    this.dataFrom = (this.pageNumber * this.itemsPerPage) - this.itemsPerPage + 1;\r\n    this.dataTo = (this.totalItems < this.itemsPerPage) ? this.totalItems : (this.pageNumber * this.itemsPerPage);\r\n  }\r\n}\r\n",
    "import { DelimiterType, FileType, FilterType, GridOption } from './models/index';\r\n\r\n/**\r\n * Options that can be passed to the Bootstrap-Datetimepicker directly\r\n */\r\nexport const GlobalGridOptions: GridOption = {\r\n  autoEdit: false,\r\n  asyncEditorLoading: false,\r\n  autoFitColumnsOnFirstLoad: true,\r\n  autoResize: {\r\n    bottomPadding: 20,\r\n    minHeight: 180,\r\n    minWidth: 300,\r\n    sidePadding: 0\r\n  },\r\n  cellHighlightCssClass: 'slick-cell-modified',\r\n  checkboxSelector: {\r\n    cssClass: 'slick-cell-checkboxsel'\r\n  },\r\n  columnPicker: {\r\n    hideForceFitButton: false,\r\n    hideSyncResizeButton: true\r\n  },\r\n  datasetIdPropertyName: 'id',\r\n  defaultFilterPlaceholder: '&#128269;',\r\n  defaultFilterType: FilterType.input,\r\n  editable: false,\r\n  enableAutoResize: true,\r\n  enableCellNavigation: false,\r\n  enableColumnPicker: true,\r\n  enableColumnReorder: true,\r\n  enableExport: true,\r\n  enableGridMenu: true,\r\n  enableMouseHoverHighlightRow: true,\r\n  enableSorting: true,\r\n  enableTextSelectionOnCells: true,\r\n  explicitInitialization: true,\r\n  exportWithFormatter: false,\r\n  forceFitColumns: false,\r\n  gridMenu: {\r\n    hideForceFitButton: false,\r\n    hideSyncResizeButton: true,\r\n    iconCssClass: 'fa fa-bars',\r\n    menuWidth: 16,\r\n    resizeOnShowHeaderRow: false,\r\n    showClearAllFiltersCommand: true,\r\n    showExportCsvCommand: true,\r\n    showRefreshDatasetCommand: true,\r\n    showToggleFilterCommand: true\r\n  },\r\n  headerRowHeight: 35,\r\n  multiColumnSort: true,\r\n  pagination: {\r\n    pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\r\n    pageSize: 25,\r\n    totalItems: 0\r\n  },\r\n  rowHeight: 35,\r\n  showHeaderRow: false,\r\n  topPanelHeight: 35\r\n};\r\n",
    "// import 3rd party vendor libs\nimport 'jquery-ui-dist/jquery-ui';\nimport 'slickgrid/lib/jquery.event.drag-2.3.0';\nimport 'slickgrid/slick.core';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.grid';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.groupitemmetadataprovider.js';\nimport 'slickgrid/controls/slick.columnpicker';\nimport 'slickgrid/controls/slick.gridmenu';\nimport 'slickgrid/controls/slick.pager';\nimport 'slickgrid/plugins/slick.autotooltips';\nimport 'slickgrid/plugins/slick.cellcopymanager';\nimport 'slickgrid/plugins/slick.cellexternalcopymanager';\nimport 'slickgrid/plugins/slick.cellrangedecorator';\nimport 'slickgrid/plugins/slick.cellrangeselector';\nimport 'slickgrid/plugins/slick.cellselectionmodel';\nimport 'slickgrid/plugins/slick.checkboxselectcolumn';\nimport 'slickgrid/plugins/slick.headerbuttons';\nimport 'slickgrid/plugins/slick.headermenu';\nimport 'slickgrid/plugins/slick.rowmovemanager';\nimport 'slickgrid/plugins/slick.rowselectionmodel';\nimport { AfterViewInit, Component, EventEmitter, Inject, Injectable, Input, Output, OnDestroy, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise } from './../services/utilities';\nimport { GlobalGridOptions } from './../global-grid-options';\nimport { BackendServiceOption, Column, GridOption, GridStateChange, GridStateType, Pagination } from './../models/index';\nimport { ControlAndPluginService } from './../services/controlAndPlugin.service';\nimport { ExportService } from './../services/export.service';\nimport { FilterService } from './../services/filter.service';\nimport { GraphqlService } from './../services/graphql.service';\nimport { GridEventService } from './../services/gridEvent.service';\nimport { GridExtraService } from './../services/gridExtra.service';\nimport { GridStateService } from './../services/gridState.service';\nimport { ResizerService } from './../services/resizer.service';\nimport { SharedService } from '../services/shared.service';\nimport { SortService } from './../services/sort.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\nconst eventPrefix = 'sg';\n\n@Injectable()\n@Component({\n  selector: 'angular-slickgrid',\n  template: `<div id=\"slickGridContainer-{{gridId}}\" class=\"gridPane\">\r\n    <div attr.id='{{gridId}}' class=\"slickgrid-container\" [style.height]=\"gridHeightString\" [style.width]=\"gridWidthString\">\r\n    </div>\r\n\r\n    <slick-pagination id=\"slickPagingContainer-{{gridId}}\"\r\n        *ngIf=\"showPagination\"\r\n        (onPaginationChanged)=\"paginationChanged($event)\"\r\n        [gridPaginationOptions]=\"gridPaginationOptions\">\r\n    </slick-pagination>\r\n</div>\r\n`\n})\nexport class AngularSlickgridComponent implements AfterViewInit, OnDestroy, OnInit {\n  private _dataset: any[];\n  private _columnDefinitions: Column[];\n  private _dataView: any;\n  private _eventHandler: any = new Slick.EventHandler();\n  private _translateSubscriber: Subscription;\n  private _gridStateSubscriber: Subscription;\n  grid: any;\n  gridPaginationOptions: GridOption;\n  gridHeightString: string;\n  gridWidthString: string;\n  groupingDefinition: any = {};\n  groupItemMetadataProvider: any;\n  showPagination = false;\n  isGridInitialized = false;\n\n  @Output() onDataviewCreated = new EventEmitter<any>();\n  @Output() onGridCreated = new EventEmitter<any>();\n  @Output() onGridInitialized = new EventEmitter<any>();\n  @Output() onBeforeGridCreate = new EventEmitter<boolean>();\n  @Output() onBeforeGridDestroy = new EventEmitter<any>();\n  @Output() onAfterGridDestroyed = new EventEmitter<boolean>();\n  @Output() onGridStateServiceChanged = new EventEmitter<GridStateChange>();\n  @Input() gridId: string;\n  @Input() gridOptions: GridOption;\n  @Input() gridHeight = 100;\n  @Input() gridWidth = 600;\n\n  @Input()\n  set columnDefinitions(columnDefinitions: Column[]) {\n    this._columnDefinitions = columnDefinitions;\n    if (this.isGridInitialized) {\n      this.updateColumnDefinitionsList(columnDefinitions);\n    }\n  }\n  get columnDefinitions(): Column[] {\n    return this._columnDefinitions;\n  }\n  @Input()\n  set dataset(dataset: any[]) {\n    this._dataset = dataset;\n    this.refreshGridData(dataset);\n  }\n  get dataset(): any[] {\n    return this._dataView.getItems();\n  }\n\n  constructor(\n    private controlAndPluginService: ControlAndPluginService,\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private gridExtraService: GridExtraService,\n    private gridEventService: GridEventService,\n    private gridStateService: GridStateService,\n    private resizer: ResizerService,\n    private sharedService: SharedService,\n    private sortService: SortService,\n    private translate: TranslateService,\n    @Inject('config') private forRootConfig: GridOption\n  ) {}\n\n  ngOnInit(): void {\n    this.onBeforeGridCreate.emit(true);\n    this.gridHeightString = `${this.gridHeight}px`;\n    this.gridWidthString = `${this.gridWidth}px`;\n  }\n\n  ngOnDestroy(): void {\n    this.onBeforeGridDestroy.emit(this.grid);\n    this.destroy();\n    this.onAfterGridDestroyed.emit(true);\n  }\n\n  destroy() {\n    this._dataView = [];\n    this.gridOptions = {};\n    this._eventHandler.unsubscribeAll();\n    this.controlAndPluginService.dispose();\n    this.filterService.dispose();\n    this.gridEventService.dispose();\n    this.gridStateService.dispose();\n    this.resizer.dispose();\n    this.sortService.dispose();\n    this.grid.destroy();\n    if (this._translateSubscriber) {\n      this._translateSubscriber.unsubscribe();\n    }\n    if (this._gridStateSubscriber) {\n      this._gridStateSubscriber.unsubscribe();\n    }\n  }\n\n  ngAfterViewInit() {\n    this.initialization();\n    this.isGridInitialized = true;\n  }\n\n  initialization() {\n    // make sure the dataset is initialized (if not it will throw an error that it cannot getLength of null)\n    this._dataset = this._dataset || [];\n    this.gridOptions = this.mergeGridOptions(this.gridOptions);\n    this.createBackendApiInternalPostProcessCallback(this.gridOptions);\n\n    if (this.gridOptions.enableGrouping) {\n      this.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\n      this.sharedService.groupItemMetadataProvider = this.groupItemMetadataProvider;\n      this._dataView = new Slick.Data.DataView({\n        groupItemMetadataProvider: this.groupItemMetadataProvider,\n        inlineFilters: true\n      });\n    } else {\n      this._dataView = new Slick.Data.DataView();\n    }\n    this.controlAndPluginService.createPluginBeforeGridCreation(this._columnDefinitions, this.gridOptions);\n    this.grid = new Slick.Grid(`#${this.gridId}`, this._dataView, this._columnDefinitions, this.gridOptions);\n\n    // pass all necessary options to the shared service\n    this.sharedService.init(this.grid, this._dataView, this.gridOptions, this._columnDefinitions);\n\n    this.controlAndPluginService.attachDifferentControlOrPlugins();\n    this.attachDifferentHooks(this.grid, this.gridOptions, this._dataView);\n\n    // emit the Grid & DataView object to make them available in parent component\n    this.onGridCreated.emit(this.grid);\n    this.onDataviewCreated.emit(this._dataView);\n\n    this.grid.init();\n    this._dataView.beginUpdate();\n    this._dataView.setItems(this._dataset, this.gridOptions.datasetIdPropertyName);\n    this._dataView.endUpdate();\n\n    // attach resize ONLY after the dataView is ready\n    this.attachResizeHook(this.grid, this.gridOptions);\n\n    // attach grid extra service\n    this.gridExtraService.init(this.grid, this._columnDefinitions, this.gridOptions, this._dataView);\n\n    // when user enables translation, we need to translate Headers on first pass & subsequently in the attachDifferentHooks\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateHeaders();\n    }\n\n    // if Export is enabled, initialize the service with the necessary grid and other objects\n    if (this.gridOptions.enableExport) {\n      this.exportService.init(this.grid, this.gridOptions, this._dataView);\n    }\n\n    // once all hooks are in placed and the grid is initialized, we can emit an event\n    this.onGridInitialized.emit(this.grid);\n\n    // attach the Backend Service API callback functions only after the grid is initialized\n    // because the preProcess() and onInit() might get triggered\n    if (this.gridOptions && (this.gridOptions.backendServiceApi || this.gridOptions.onBackendEventApi)) {\n      this.attachBackendCallbackFunctions(this.gridOptions);\n    }\n\n    this.gridStateService.init(this.grid, this.filterService, this.sortService);\n  }\n\n  /**\n   * Define what our internal Post Process callback, it will execute internally after we get back result from the Process backend call\n   * For now, this is GraphQL Service only feautre and it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n   */\n  createBackendApiInternalPostProcessCallback(gridOptions: GridOption) {\n    if (gridOptions && (gridOptions.backendServiceApi || gridOptions.onBackendEventApi)) {\n      const backendApi = gridOptions.backendServiceApi || gridOptions.onBackendEventApi;\n\n      // internalPostProcess only works with a GraphQL Service, so make sure it is that type\n      if (backendApi && backendApi.service && backendApi.service instanceof GraphqlService) {\n        backendApi.internalPostProcess = (processResult: any) => {\n          const datasetName = (backendApi && backendApi.service && typeof backendApi.service.getDatasetName === 'function') ? backendApi.service.getDatasetName() : '';\n          if (processResult && processResult.data && processResult.data[datasetName]) {\n            this._dataset = processResult.data[datasetName].nodes;\n            this.refreshGridData(this._dataset, processResult.data[datasetName].totalCount);\n          } else {\n            this._dataset = [];\n          }\n        };\n      }\n    }\n  }\n\n  attachDifferentHooks(grid: any, gridOptions: GridOption, dataView: any) {\n    // on locale change, we have to manually translate the Headers, GridMenu\n    this._translateSubscriber = this.translate.onLangChange.subscribe((event) => {\n      if (gridOptions.enableTranslate) {\n        this.controlAndPluginService.translateHeaders();\n        this.controlAndPluginService.translateColumnPicker();\n        this.controlAndPluginService.translateGridMenu();\n      }\n    });\n\n    // attach external sorting (backend) when available or default onSort (dataView)\n    if (gridOptions.enableSorting) {\n      (gridOptions.backendServiceApi || gridOptions.onBackendEventApi) ? this.sortService.attachBackendOnSort(grid, gridOptions) : this.sortService.attachLocalOnSort(grid, gridOptions, this._dataView, this._columnDefinitions);\n    }\n\n    // attach external filter (backend) when available or default onFilter (dataView)\n    if (gridOptions.enableFiltering) {\n      this.filterService.init(grid, gridOptions, this._columnDefinitions);\n\n      // if user entered some \"presets\", we need to reflect them all in the DOM\n      if (gridOptions.presets && gridOptions.presets.filters) {\n        this.filterService.populateColumnFilterSearchTerms(gridOptions, this._columnDefinitions);\n      }\n      (gridOptions.backendServiceApi || gridOptions.onBackendEventApi) ? this.filterService.attachBackendOnFilter(grid, gridOptions) : this.filterService.attachLocalOnFilter(grid, gridOptions, this._dataView);\n    }\n\n    // if user set an onInit Backend, we'll run it right away (and if so, we also need to run preProcess, internalPostProcess & postProcess)\n    if (gridOptions.backendServiceApi || gridOptions.onBackendEventApi) {\n      const backendApi = gridOptions.backendServiceApi || gridOptions.onBackendEventApi;\n      if (gridOptions.onBackendEventApi) {\n        console.warn(`\"onBackendEventApi\" has been DEPRECATED, please consider using \"backendServiceApi\" in the short term since \"onBackendEventApi\" will be removed in future versions. You can take look at the Angular-Slickgrid Wikis for OData/GraphQL Services implementation`);\n      }\n\n      if (backendApi && backendApi.service && backendApi.service.init) {\n        backendApi.service.init(backendApi.options, gridOptions.pagination, this.grid);\n      }\n    }\n\n    // expose GridState Service changes event through dispatch\n    this._gridStateSubscriber = this.gridStateService.onGridStateChanged.subscribe((gridStateChange: GridStateChange) => {\n      this.onGridStateServiceChanged.emit(gridStateChange);\n    });\n\n\n    // on cell click, mainly used with the columnDef.action callback\n    this.gridEventService.attachOnCellChange(grid, this.gridOptions, dataView);\n    this.gridEventService.attachOnClick(grid, this.gridOptions, dataView);\n\n    this._eventHandler.subscribe(dataView.onRowCountChanged, (e: any, args: any) => {\n      grid.updateRowCount();\n      grid.render();\n    });\n    this._eventHandler.subscribe(dataView.onRowsChanged, (e: any, args: any) => {\n      grid.invalidateRows(args.rows);\n      grid.render();\n    });\n  }\n\n  attachBackendCallbackFunctions(gridOptions: GridOption) {\n    const backendApi = gridOptions.backendServiceApi || gridOptions.onBackendEventApi;\n    const serviceOptions: BackendServiceOption = (backendApi && backendApi.service && backendApi.service.options) ? backendApi.service.options : {};\n    const isExecuteCommandOnInit = (!serviceOptions) ? false : ((serviceOptions && serviceOptions.hasOwnProperty('executeProcessCommandOnInit')) ? serviceOptions['executeProcessCommandOnInit'] : true);\n\n    // update backend filters (if need be) before the query runs\n    if (backendApi) {\n      const backendService = backendApi.service;\n      if (gridOptions && gridOptions.presets) {\n        if (backendService && backendService.updateFilters && gridOptions.presets.filters) {\n          backendService.updateFilters(gridOptions.presets.filters, true);\n        }\n        if (backendService && backendService.updateSorters && gridOptions.presets.sorters) {\n          backendService.updateSorters(undefined, gridOptions.presets.sorters);\n        }\n        if (backendService && backendService.updatePagination && gridOptions.presets.pagination) {\n          backendService.updatePagination(gridOptions.presets.pagination.pageNumber, gridOptions.presets.pagination.pageSize);\n        }\n      } else {\n        const columnFilters = this.filterService.getColumnFilters();\n        if (columnFilters && backendService && backendService.updateFilters) {\n          backendService.updateFilters(columnFilters, false);\n        }\n      }\n    }\n\n    if (backendApi && backendApi.service && (backendApi.onInit || isExecuteCommandOnInit)) {\n      const query = (typeof backendApi.service.buildQuery === 'function') ? backendApi.service.buildQuery() : '';\n      const observableOrPromise = (isExecuteCommandOnInit) ? backendApi.process(query) : backendApi.onInit(query);\n\n      // wrap this inside a setTimeout to avoid timing issue since the gridOptions needs to be ready before running this onInit\n      setTimeout(async () => {\n        if (backendApi.preProcess) {\n          backendApi.preProcess();\n        }\n\n        // the process could be an Observable (like HttpClient) or a Promise\n        // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n        const processResult = await castToPromise(observableOrPromise);\n\n        // define what our internal Post Process callback, only available for GraphQL Service for now\n        // it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n        if (processResult && backendApi && backendApi.service instanceof GraphqlService && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  attachResizeHook(grid: any, options: GridOption) {\n    // expand/autofit columns on first page load\n    if (grid && options.autoFitColumnsOnFirstLoad) {\n      grid.autosizeColumns();\n    }\n\n    // auto-resize grid on browser resize\n    this.resizer.init(grid, options);\n    if (options.enableAutoResize) {\n      this.resizer.attachAutoResizeDataGrid();\n      if (grid && options.autoFitColumnsOnFirstLoad) {\n        grid.autosizeColumns();\n      }\n    } else {\n      this.resizer.resizeGrid(0, { height: this.gridHeight, width: this.gridWidth });\n    }\n  }\n\n  mergeGridOptions(gridOptions): GridOption {\n    gridOptions.gridId = this.gridId;\n    gridOptions.gridContainerId = `slickGridContainer-${this.gridId}`;\n    if (gridOptions.enableFiltering || this.forRootConfig.enableFiltering) {\n      gridOptions.showHeaderRow = true;\n    }\n    // use jquery extend to deep merge and avoid immutable properties changed in GlobalGridOptions after route change\n    return $.extend(true, {}, GlobalGridOptions, this.forRootConfig, gridOptions);\n  }\n\n  paginationChanged(pagination: Pagination) {\n    this.gridStateService.onGridStateChanged.next({\n      change: { newValues: pagination, type: GridStateType.pagination },\n      gridState: this.gridStateService.getCurrentGridState()\n    });\n  }\n\n  /**\n   * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well\n   * @param dataset\n   */\n  refreshGridData(dataset: any[], totalCount?: number) {\n    if (dataset && this.grid && this._dataView && typeof this._dataView.setItems === 'function') {\n      this._dataView.setItems(dataset, this.gridOptions.datasetIdPropertyName);\n\n      // this.grid.setData(dataset);\n      this.grid.invalidate();\n      this.grid.render();\n\n      if (this.gridOptions.enablePagination || this.gridOptions.backendServiceApi) {\n        // do we want to show pagination?\n        // if we have a backendServiceApi and the enablePagination is undefined, we'll assume that we do want to see it, else get that defined value\n        this.showPagination = ((this.gridOptions.backendServiceApi && this.gridOptions.enablePagination === undefined) ? true : this.gridOptions.enablePagination) || false;\n\n        // before merging the grid options, make sure that it has the totalItems count\n        // once we have that, we can merge and pass all these options to the pagination component\n        if (!this.gridOptions.pagination) {\n          this.gridOptions.pagination = (this.gridOptions.pagination) ? this.gridOptions.pagination : undefined;\n        }\n        if (this.gridOptions.pagination && totalCount) {\n          this.gridOptions.pagination.totalItems = totalCount;\n        }\n        if (this.gridOptions.presets && this.gridOptions.presets.pagination && this.gridOptions.pagination) {\n          this.gridOptions.pagination.pageSize = this.gridOptions.presets.pagination.pageSize;\n          this.gridOptions.pagination.pageNumber = this.gridOptions.presets.pagination.pageNumber;\n        }\n        this.gridPaginationOptions = this.mergeGridOptions(this.gridOptions);\n      }\n      if (this.grid &&  this.gridOptions.enableAutoResize) {\n        // resize the grid inside a slight timeout, in case other DOM element changed prior to the resize (like a filter/pagination changed)\n        this.resizer.resizeGrid(10);\n        // this.grid.autosizeColumns();\n      }\n    }\n  }\n\n  updateColumnDefinitionsList(dynamicColumns) {\n    this.grid.setColumns(dynamicColumns);\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateHeaders();\n    }\n  }\n\n  /** Toggle the filter row displayed on first row\n   * @param isShowing\n   */\n  showHeaderRow(isShowing: boolean) {\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  /** Toggle the filter row displayed on first row */\n  toggleHeaderRow() {\n    const isShowing = !this.grid.getOptions().showHeaderRow;\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n}\n",
    "import { SharedService } from './../services/shared.service';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AngularSlickgridComponent } from './../components/angular-slickgrid.component';\nimport { CollectionService } from './../services/collection.service';\nimport { ControlAndPluginService } from '../services/controlAndPlugin.service';\nimport { ExportService } from '../services/export.service';\nimport { FilterService } from './../services/filter.service';\nimport { GridOdataService } from './../services/grid-odata.service';\nimport { GridOption } from './../models/gridOption.interface';\nimport { GridEventService } from './../services/gridEvent.service';\nimport { GridExtraService } from './../services/gridExtra.service';\nimport { GridStateService } from './../services/gridState.service';\nimport { GraphqlService } from './../services/graphql.service';\nimport { OdataService } from './../services/odata.service';\nimport { ResizerService } from './../services/resizer.service';\nimport { SlickPaginationComponent } from './../components/slick-pagination.component';\nimport { SortService } from './../services/sort.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TranslateModule\n  ],\n  declarations: [\n    AngularSlickgridComponent,\n    SlickPaginationComponent\n  ],\n  exports: [\n    AngularSlickgridComponent,\n    SlickPaginationComponent\n  ]\n})\nexport class AngularSlickgridModule {\n  static forRoot(config: GridOption = {}) {\n    return {\n      ngModule: AngularSlickgridModule,\n      providers: [\n        {provide: 'config', useValue: config},\n        CollectionService,\n        ControlAndPluginService,\n        ExportService,\n        FilterService,\n        GraphqlService,\n        GridEventService,\n        GridExtraService,\n        GridOdataService,\n        GridStateService,\n        OdataService,\n        ResizerService,\n        SharedService,\n        SortService\n      ]\n    };\n  }\n}\n"
  ],
  "names": [
    "__awaiter",
    "thisArg",
    "_arguments",
    "P",
    "generator",
    "Promise",
    "resolve",
    "reject",
    "fulfilled",
    "value",
    "step",
    "next",
    "e",
    "rejected",
    "result",
    "done",
    "then",
    "apply",
    "__generator",
    "body",
    "verb",
    "n",
    "v",
    "op",
    "f",
    "TypeError",
    "_",
    "y",
    "t",
    "call",
    "label",
    "ops",
    "pop",
    "trys",
    "length",
    "push",
    "g",
    "sent",
    "throw",
    "return",
    "Symbol",
    "iterator",
    "this",
    "__values",
    "o",
    "m",
    "i",
    "__read",
    "r",
    "ar",
    "error",
    "__spread",
    "arguments",
    "concat",
    "addWhiteSpaces",
    "nbSpaces",
    "htmlEntityDecode",
    "input",
    "replace",
    "match",
    "dec",
    "String",
    "fromCharCode",
    "arraysEqual",
    "a",
    "b",
    "orderMatters",
    "sort",
    "castToPromise",
    "fromServiceName",
    "promise",
    "Observable",
    "first",
    "toPromise",
    "take",
    "Error",
    "findOrDefault",
    "array",
    "logic",
    "defaultVal",
    "find",
    "mapMomentDateFormatWithFieldType",
    "fieldType",
    "map",
    "FieldType",
    "dateTime",
    "dateTimeIso",
    "dateTimeIsoAmPm",
    "dateTimeIsoAM_PM",
    "dateUs",
    "dateUsShort",
    "dateTimeUs",
    "dateTimeUsAmPm",
    "dateTimeUsAM_PM",
    "dateTimeUsShort",
    "dateTimeUsShortAmPm",
    "dateUtc",
    "date",
    "dateIso",
    "mapFlatpickrDateFormatWithFieldType",
    "mapOperatorType",
    "operator",
    "OperatorType",
    "lessThan",
    "lessThanOrEqual",
    "greaterThan",
    "greaterThanOrEqual",
    "notEqual",
    "startsWith",
    "endsWith",
    "equal",
    "in",
    "notIn",
    "contains",
    "mapOperatorByFieldType",
    "string",
    "unknown",
    "float",
    "number",
    "dateTimeUsShortAM_PM",
    "mapOperatorByFilterType",
    "filterType",
    "FilterType",
    "multipleSelect",
    "singleSelect",
    "parseUtcDate",
    "inputDateString",
    "useUtc",
    "test",
    "dateString",
    "decodeURIComponent",
    "dateMoment",
    "moment",
    "Date",
    "isValid",
    "year",
    "toString",
    "utc",
    "format",
    "toCamelCase",
    "str",
    "offset",
    "toLowerCase",
    "toUpperCase",
    "sortByFieldType",
    "value1",
    "value2",
    "sortDirection",
    "sortResult",
    "Sorters",
    "numeric",
    "parseBoolean",
    "colon",
    "comma",
    "equalSign",
    "pipe",
    "semicolon",
    "space",
    "tab",
    "doubleColon",
    "doublePipe",
    "doubleSemicolon",
    "csv",
    "doc",
    "docx",
    "pdf",
    "txt",
    "xls",
    "xlsx",
    "filter",
    "pagination",
    "sorter",
    "asc",
    "ASC",
    "desc",
    "DESC",
    "moment_",
    "FORMAT",
    "dateUsShortSorter",
    "date1",
    "date2",
    "diff",
    "parseInt",
    "dateSorter",
    "ISO_8601",
    "dateIsoSorter",
    "dateUsSorter",
    "numericSorter",
    "x",
    "isNaN",
    "parseFloat",
    "stringSorter",
    "position",
    "CollectionService",
    "translate",
    "prototype",
    "filterCollection",
    "collection",
    "filterBy",
    "filteredCollection",
    "property_1",
    "property",
    "value_1",
    "item",
    "sortCollection",
    "sortBy",
    "enableTranslateLabel",
    "sortedCollection",
    "_this",
    "property_2",
    "sortDirection_1",
    "hasOwnProperty",
    "sortDesc",
    "fieldType_1",
    "dataRow1",
    "dataRow2",
    "instant",
    "type",
    "Injectable",
    "TranslateService",
    "ExportService",
    "_lineCarriageReturn",
    "_existingSlickAggregators",
    "_hasGroupedItems",
    "defaultExportOptions",
    "delimiter",
    "DelimiterType",
    "filename",
    "FileType",
    "useUtf8WithBom",
    "init",
    "grid",
    "gridOptions",
    "dataView",
    "_grid",
    "_gridOptions",
    "_dataView",
    "exportToFile",
    "options",
    "_exportOptions",
    "$",
    "extend",
    "dataOutput",
    "getDataOutput",
    "startDownloadFile",
    "csvContent",
    "columns",
    "getColumns",
    "getAllSlickGridAggregators",
    "_exportQuoteWrapper",
    "outputDataString",
    "_groupedHeaders",
    "getGroupedColumnTitles",
    "Array",
    "isArray",
    "header",
    "title",
    "join",
    "_columnHeaders",
    "getColumnHeaders",
    "getAllGridRowData",
    "lineCarriageReturn",
    "lineCount",
    "getLength",
    "rowNumber",
    "itemObj",
    "getItem",
    "id",
    "readRegularRowData",
    "__groupTotals",
    "undefined",
    "readGroupedTitleRow",
    "readGroupedTotalRow",
    "existingSlickAggregators",
    "key",
    "Slick",
    "Data",
    "Aggregators",
    "columnHeaders",
    "forEach",
    "columnDef",
    "fieldName",
    "headerKey",
    "name",
    "skippedField",
    "excludeFromExport",
    "width",
    "field",
    "row",
    "idx",
    "rowOutputString",
    "exportQuoteWrapper",
    "col",
    "ln",
    "fieldId",
    "isEvaluatingFormatter",
    "exportWithFormatter",
    "exportCustomFormatter",
    "itemData",
    "formatter",
    "exportCsvForceToKeepAsString",
    "groupName",
    "level",
    "columnCount",
    "output",
    "j",
    "k",
    "aggregatorName",
    "val",
    "Math",
    "round",
    "groupItemId",
    "groupedHeaders",
    "hasGroupedItems",
    "isEmptyObject",
    "_groupingDefinition",
    "dropdownOptionsIds",
    "indexOf",
    "split",
    "navigator",
    "appName",
    "outputData",
    "mimeType",
    "TextEncoder",
    "encode",
    "blob",
    "Blob",
    "msSaveOrOpenBlob",
    "link",
    "document",
    "createElement",
    "csvUrl",
    "URL",
    "createObjectURL",
    "textContent",
    "href",
    "setAttribute",
    "style",
    "visibility",
    "appendChild",
    "click",
    "removeChild",
    "booleanFilterCondition",
    "cellValue",
    "searchTerm",
    "testFilterCondition",
    "includes",
    "dateFilterCondition",
    "searchDateFormat",
    "filterSearchType",
    "dateCell",
    "dateSearch",
    "dateIsoFilterCondition",
    "dateUsFilterCondition",
    "dateUsShortFilterCondition",
    "dateUtcFilterCondition",
    "collectionSearchFilterCondition",
    "searchTerms",
    "numberFilterCondition",
    "stringFilterCondition",
    "cellValueLastChar",
    "executeMappedCondition",
    "boolean",
    "FilterConditions",
    "booleanFilter",
    "collectionSearchFilter",
    "dateFilter",
    "dateIsoFilter",
    "dateUtcFilter",
    "dateUsFilter",
    "dateUsShortFilter",
    "numberFilter",
    "stringFilter",
    "testFilter",
    "require",
    "CompoundDateFilter",
    "args",
    "callback",
    "getOptions",
    "$filterElm",
    "createDomElement",
    "$filterInputElm",
    "keyup",
    "onTriggerEvent",
    "$selectOperatorElm",
    "change",
    "clear",
    "triggerFilterKeyup",
    "flatInstance",
    "destroy",
    "off",
    "remove",
    "setValues",
    "values",
    "setDate",
    "buildDatePickerInput",
    "inputFormat",
    "outputFormat",
    "outputType",
    "currentLocale",
    "getCurrentLocale",
    "substring",
    "pickerOptions",
    "defaultDate",
    "altInput",
    "altFormat",
    "dateFormat",
    "wrap",
    "closeOnSelect",
    "locale",
    "loadFlatpickrLocale",
    "onChange",
    "selectedDates",
    "dateStr",
    "instance",
    "_currentValue",
    "enableTime",
    "CustomEvent",
    "placeholder",
    "defaultFilterPlaceholder",
    "flatpickr",
    "buildSelectOperatorHtmlString",
    "optionValueString",
    "getOptionValues",
    "option",
    "description",
    "$headerElm",
    "getHeaderRowColumn",
    "empty",
    "$filterContainerElm",
    "$containerInputGroup",
    "$operatorInputGroupAddon",
    "append",
    "attr",
    "data",
    "addClass",
    "appendTo",
    "params",
    "i18n",
    "currentLang",
    "localeDefault",
    "default",
    "selectedOperator",
    "text",
    "removeClass",
    "hide",
    "close",
    "show",
    "open",
    "CompoundInputFilter",
    "trigger",
    "buildInputHtmlString",
    "optionValues",
    "InputFilter",
    "filterTemplate",
    "buildTemplateHtmlString",
    "target",
    "MultipleSelectFilter",
    "collectionService",
    "isFilled",
    "defaultOptions",
    "container",
    "maxHeight",
    "okButton",
    "addTitle",
    "countSelected",
    "allSelected",
    "selectAllText",
    "selectAllDelimiter",
    "onClose",
    "selectedItems",
    "siblings",
    "labelName",
    "customStructure",
    "valueName",
    "newCollection",
    "collectionFilterBy",
    "collectionSortBy",
    "triggerFilterChange",
    "optionCollection",
    "labelKey",
    "selected",
    "findValueInSearchTerms",
    "textLabel",
    "Object",
    "assign",
    "filterOptions",
    "SelectFilter",
    "selectOptions",
    "console",
    "warn",
    "SingleSelectFilter",
    "single",
    "selectedItem",
    "Filters",
    "select",
    "compoundDate",
    "compoundInput",
    "FilterService",
    "_eventHandler",
    "EventHandler",
    "_filters",
    "_columnFilters",
    "_isFirstQuery",
    "onFilterChanged",
    "Subject",
    "columnDefinitions",
    "attachBackendOnFilter",
    "_slickSubscriber",
    "Event",
    "subscribe",
    "attachBackendOnFilterSubscribe",
    "bind",
    "onHeaderRowCellRendered",
    "addFilterTemplateToHeaderRow",
    "event",
    "backendApi",
    "backendServiceApi",
    "onBackendEventApi",
    "process",
    "service",
    "preProcess",
    "query",
    "_a",
    "emitFilterChanged",
    "observableOrPromise",
    "processResult",
    "internalPostProcess",
    "postProcess",
    "attachLocalOnFilter",
    "setFilterArgs",
    "columnFilters",
    "setFilter",
    "customLocalFilter",
    "columnId",
    "refresh",
    "clearFilters",
    "index",
    "invalidate",
    "render",
    "tslib_1.__values",
    "keys",
    "_b",
    "columnFilter",
    "columnIndex",
    "getColumnIndex",
    "queryField",
    "queryFieldFilter",
    "fieldSearchValue",
    "matches",
    "lastValueChar",
    "custom",
    "useFormatterOuputToFilter",
    "rowIndex",
    "getIdxById",
    "dispose",
    "disposeColumnFilters",
    "unsubscribeAll",
    "unsubscribe",
    "getColumnFilters",
    "getCurrentLocalFilters",
    "currentFilters",
    "colId",
    "callbackSearchEvent",
    "colFilter",
    "triggerEvent",
    "serviceOptions",
    "_onFilterChangedOptions",
    "column",
    "filterable",
    "updateColumnFilters",
    "filterArguments",
    "defaultFilterType",
    "filter_1",
    "customFilter",
    "filterExistIndex",
    "findIndex",
    "filt",
    "sender",
    "backendService",
    "getCurrentFilters",
    "populateColumnFilterSearchTerms",
    "presets",
    "filters",
    "filters_1",
    "columnPreset",
    "presetFilter",
    "slickEvent",
    "isPropagationStopped",
    "EventData",
    "notify",
    "SharedService",
    "ControlAndPluginService",
    "exportService",
    "filterService",
    "sharedService",
    "attachDifferentControlOrPlugins",
    "_columnDefinitions",
    "visibleColumns",
    "enableColumnPicker",
    "columnPickerControl",
    "createColumnPicker",
    "enableGridMenu",
    "gridMenuControl",
    "createGridMenu",
    "enableAutoTooltip",
    "autoTooltipPlugin",
    "AutoTooltips",
    "autoTooltipOptions",
    "registerPlugin",
    "enableGrouping",
    "groupItemMetaProvider",
    "groupItemMetadataProvider",
    "enableCheckboxSelector",
    "checkboxSelectorPlugin",
    "rowSelectionPlugin",
    "RowSelectionModel",
    "rowSelectionOptions",
    "setSelectionModel",
    "enableRowSelection",
    "enableHeaderButton",
    "headerButtonsPlugin",
    "Plugins",
    "HeaderButtons",
    "headerButton",
    "onCommand",
    "enableHeaderMenu",
    "headerMenuOptions",
    "headerMenu",
    "minWidth",
    "autoAlignOffset",
    "headerMenuPlugin",
    "HeaderMenu",
    "onBeforeMenuShow",
    "registerPlugins",
    "plugin",
    "forceFitTitle",
    "enableTranslate",
    "syncResizeTitle",
    "columnPicker",
    "Controls",
    "ColumnPicker",
    "onColumnsChanged",
    "gridMenu",
    "getDefaultGridMenuOptions",
    "addGridMenuCustomCommands",
    "GridMenu",
    "onMenuClose",
    "autosizeColumns",
    "gridUid",
    "getUID",
    "hideColumn",
    "removeColumnByIndex",
    "setColumns",
    "el",
    "autoResizeColumns",
    "enableFiltering",
    "showClearAllFiltersCommand",
    "customItems",
    "command",
    "iconCssClass",
    "disabled",
    "positionOrder",
    "showToggleFilterCommand",
    "showRefreshDatasetCommand",
    "enableExport",
    "showExportCsvCommand",
    "showExportTextDelimitedCommand",
    "setHeaderRowVisibility",
    "showHeaderRow",
    "setTopPanelVisibility",
    "showTopPanel",
    "refreshBackendDataset",
    "alert",
    "customTitle",
    "itemA",
    "itemB",
    "columnTitle",
    "menuWidth",
    "buildQuery",
    "resetGridMenuTranslations",
    "translateColumnPicker",
    "translateGridMenu",
    "translateHeaders",
    "use",
    "createPluginBeforeGridCreation",
    "CheckboxSelectColumn",
    "checkboxSelector",
    "selectionColumn",
    "getColumnDefinition",
    "excludeFromQuery",
    "unshift",
    "timer",
    "GraphqlQueryBuilder",
    "queryFnName",
    "aliasOrFilter",
    "head",
    "alias",
    "prop",
    "getGraphQLValue",
    "searches",
    "_i",
    "searchKeys",
    "parceFind",
    "setAlias",
    "ReferenceError",
    "_levelA",
    "currentValue",
    "itemX",
    "RangeError",
    "propsAA",
    "JSON",
    "stringify",
    "propS",
    "objectToString",
    "obj",
    "sourceA",
    "DEFAULT_ITEMS_PER_PAGE",
    "GraphqlService",
    "defaultOrderBy",
    "direction",
    "SortDirection",
    "defaultPaginationOptions",
    "datasetName",
    "queryQb",
    "QueryBuilder",
    "datasetQb",
    "pageInfoQb",
    "dataQb",
    "columnIds",
    "columnDefinitions_1",
    "columnDefinitions_1_1",
    "fields",
    "buildFilterQuery",
    "isWithCursor",
    "node",
    "datasetFilters",
    "paginationOptions",
    "pageSize",
    "sortingOptions",
    "orderBy",
    "filteringOptions",
    "addLocaleIntoQuery",
    "trimDoubleQuotesOnEnumField",
    "keepArgumentFieldDoubleQuotes",
    "inputArray",
    "set",
    "shift",
    "reduce",
    "getInitPaginationOptions",
    "getDatasetName",
    "_currentFilters",
    "getCurrentPagination",
    "_currentPagination",
    "getCurrentSorters",
    "_currentSorters",
    "resetPaginationOptions",
    "after",
    "before",
    "last",
    "pageNumber",
    "updateOptions",
    "debounceTypingDelay",
    "filterTypingDebounce",
    "clearTimeout",
    "setTimeout",
    "updateFilters",
    "onPaginationChanged",
    "updatePagination",
    "newPage",
    "onSortChanged",
    "sortColumns",
    "sortCols",
    "sortCol",
    "sortAsc",
    "updateSorters",
    "isUpdatedByPreset",
    "castFilterToColumnFilter",
    "searchValue",
    "searchByArray",
    "_loop_1",
    "columnFilter_1",
    "this_1",
    "presetSorters",
    "currentSorters",
    "graphqlSorters",
    "tmpSorterArray",
    "setSortColumns",
    "sortColumns_1",
    "sortColumns_1_1",
    "queryFieldSorter",
    "inputStr",
    "enumSearchWords",
    "patternRegex",
    "patternWordInQuotes",
    "reg",
    "RegExp",
    "group1",
    "group2",
    "group3",
    "removeDoubleQuotes",
    "tmpFilter",
    "padZero",
    "s",
    "trim",
    "allTitleCase",
    "outputStr",
    "charAt",
    "substr",
    "titleCase",
    "slice",
    "OdataService",
    "_odataOptions",
    "filterQueue",
    "_defaultSortBy",
    "queryTmpArray",
    "top",
    "skip",
    "argument",
    "filterStr",
    "filterBySeparator",
    "saveColumnFilter",
    "updateFilterFromListTerms",
    "getFilterByColumn",
    "columnName",
    "getFilterCount",
    "defineProperty",
    "get",
    "removeColumnFilter",
    "search",
    "filterOptionObject",
    "updateFilterFromTerm",
    "searchBy",
    "tmpSearchByArray",
    "fieldSearchTerms",
    "tmpSearchTerms",
    "lnj",
    "lnk",
    "caseType",
    "CaseType",
    "pascalCase",
    "GridOdataService",
    "odataService",
    "mergedOptions",
    "terms",
    "_loop_2",
    "columnFilter_2",
    "this_2",
    "bypassOdataQuery",
    "bypassBackendQuery",
    "encodeURIComponent",
    "dateFormatted",
    "mapOdataOperator",
    "sortByArray",
    "sorterArray",
    "sortColumns_2",
    "sortColumns_2_1",
    "csvString",
    "GridEventService",
    "attachOnCellChange",
    "onCellChange",
    "cell",
    "getDataItem",
    "returnedArgs",
    "gridDefinition",
    "dataContext",
    "attachOnClick",
    "onClick",
    "onCellClick",
    "stopImmediatePropagation",
    "autoEdit",
    "GridExtraService",
    "columnDefinition",
    "getDataItemByRowNumber",
    "getItemRowMetadata",
    "previousItemMetadata",
    "meta",
    "cssClasses",
    "_dirty",
    "rowClass",
    "highlightRow",
    "fadeDelay",
    "getSelectionModel",
    "setSelectedRows",
    "getItemMetadata",
    "updateItem",
    "gridId",
    "getSelectedRows",
    "setSelectedRow",
    "rowIndexes",
    "renderGrid",
    "addItemToDatagrid",
    "insertItem",
    "scrollRowIntoView",
    "updateDataGridItem",
    "getRowById",
    "itemId",
    "GridExtraUtils",
    "getColumnDefinitionAndData",
    "GridStateService",
    "onGridStateChanged",
    "sortService",
    "_filterSubcription",
    "newValues",
    "GridStateType",
    "gridState",
    "getCurrentGridState",
    "_sorterSubcription",
    "sorters",
    "currentPagination",
    "getCurrentLocalSorters",
    "ResizerService",
    "attachAutoResizeDataGrid",
    "gridDomElm",
    "resizeGrid",
    "window",
    "on",
    "calculateGridNewDimensions",
    "containerElm",
    "autoResize",
    "containerId",
    "gridContainerId",
    "windowElm",
    "bottomPadding",
    "enablePagination",
    "gridHeight",
    "height",
    "coordOffsetTop",
    "availableHeight",
    "availableWidth",
    "minHeight",
    "newHeight",
    "newWidth",
    "sidePadding",
    "delay",
    "newSizes",
    "gridElm",
    "gridContainerElm",
    "exec",
    "userAgent",
    "resizeCanvas",
    "SortService",
    "_currentLocalSorters",
    "attachBackendOnSort",
    "onSort",
    "attachBackendOnSortSubscribe",
    "emitSortChanged",
    "attachLocalOnSort",
    "sortColumn",
    "onLocalSortChanged",
    "onRowCountChanged",
    "current",
    "loadLocalPresets",
    "sorters_1",
    "currentSorter",
    "l",
    "columnSortObj",
    "sortField",
    "CheckboxEditor",
    "$input",
    "focus",
    "loadValue",
    "defaultValue",
    "preClick",
    "serializeValue",
    "applyValue",
    "state",
    "isValueChanged",
    "validate",
    "valid",
    "msg",
    "DateEditor",
    "save",
    "commitChanges",
    "validator",
    "validationResults",
    "FloatEditor",
    "keyCode",
    "KeyCode",
    "LEFT",
    "RIGHT",
    "getDecimalPlaces",
    "rtn",
    "editorFixedDecimalPlaces",
    "decPlaces",
    "toFixed",
    "IntegerEditor",
    "LongTextEditor",
    "$container",
    "$wrapper",
    "cancel",
    "handleKeyDown",
    "which",
    "ENTER",
    "ctrlKey",
    "ESCAPE",
    "preventDefault",
    "TAB",
    "shiftKey",
    "navigatePrev",
    "navigateNext",
    "cancelChanges",
    "css",
    "left",
    "MultipleSelectEditor",
    "_translate",
    "offsetLeft",
    "c",
    "$editorElm",
    "editorTemplate",
    "each",
    "$e",
    "currentValues",
    "elementOptions",
    "SingleSelectEditor",
    "TextEditor",
    "getValue",
    "setValue",
    "Editors",
    "checkbox",
    "integer",
    "longText",
    "arrayToCsvFormatter",
    "checkboxFormatter",
    "checkmarkFormatter",
    "collectionFormatter",
    "complexObjectFormatter",
    "dateIsoFormatter",
    "dateTimeIsoFormatter",
    "dateTimeIsoAmPmFormatter",
    "dateTimeUsAmPmFormatter",
    "dateTimeUsFormatter",
    "dateUsFormatter",
    "deleteIconFormatter",
    "editIconFormatter",
    "hyperlinkFormatter",
    "matchUrl",
    "hyperlinkUriPrefixFormatter",
    "uriPrefix",
    "infoIconFormatter",
    "lowercaseFormatter",
    "multipleFormatter",
    "formatters",
    "formatters_1",
    "formatters_1_1",
    "percentCompleteFormatter",
    "percentCompleteBarFormatter",
    "progressBarFormatter",
    "translateFormatter",
    "columnParams",
    "translateBooleanFormatter",
    "uppercaseFormatter",
    "yesNoFormatter",
    "Formatters",
    "arrayToCsv",
    "checkmark",
    "complexObject",
    "deleteIcon",
    "editIcon",
    "hyperlink",
    "hyperlinkUriPrefix",
    "infoIcon",
    "lowercase",
    "multiple",
    "percentComplete",
    "percentCompleteBar",
    "progressBar",
    "translateBoolean",
    "uppercase",
    "yesNo",
    "SlickPaginationComponent",
    "_isFirstRender",
    "EventEmitter",
    "dataFrom",
    "dataTo",
    "pageCount",
    "totalItems",
    "paginationPageSizes",
    "fromToParams",
    "from",
    "to",
    "_gridPaginationOptions",
    "gridPaginationOptions",
    "refreshPagination",
    "ngOnDestroy",
    "ngAfterViewInit",
    "ceil",
    "changeToFirstPage",
    "onPageChanged",
    "changeToLastPage",
    "changeToNextPage",
    "changeToPreviousPage",
    "changeToCurrentPage",
    "currentTarget",
    "onChangeItemPerPage",
    "itemsPerPage",
    "isPageNumberReset",
    "pageSizes",
    "recalculateFromToIndexes",
    "emit",
    "Component",
    "selector",
    "template",
    "Output",
    "Input",
    "GlobalGridOptions",
    "asyncEditorLoading",
    "autoFitColumnsOnFirstLoad",
    "cellHighlightCssClass",
    "cssClass",
    "hideForceFitButton",
    "hideSyncResizeButton",
    "datasetIdPropertyName",
    "editable",
    "enableAutoResize",
    "enableCellNavigation",
    "enableColumnReorder",
    "enableMouseHoverHighlightRow",
    "enableSorting",
    "enableTextSelectionOnCells",
    "explicitInitialization",
    "forceFitColumns",
    "resizeOnShowHeaderRow",
    "headerRowHeight",
    "multiColumnSort",
    "rowHeight",
    "topPanelHeight",
    "AngularSlickgridComponent",
    "controlAndPluginService",
    "gridExtraService",
    "gridEventService",
    "gridStateService",
    "resizer",
    "forRootConfig",
    "groupingDefinition",
    "showPagination",
    "isGridInitialized",
    "onDataviewCreated",
    "onGridCreated",
    "onGridInitialized",
    "onBeforeGridCreate",
    "onBeforeGridDestroy",
    "onAfterGridDestroyed",
    "onGridStateServiceChanged",
    "gridWidth",
    "updateColumnDefinitionsList",
    "getItems",
    "dataset",
    "_dataset",
    "refreshGridData",
    "ngOnInit",
    "gridHeightString",
    "gridWidthString",
    "_translateSubscriber",
    "_gridStateSubscriber",
    "initialization",
    "mergeGridOptions",
    "createBackendApiInternalPostProcessCallback",
    "GroupItemMetadataProvider",
    "DataView",
    "inlineFilters",
    "Grid",
    "attachDifferentHooks",
    "beginUpdate",
    "setItems",
    "endUpdate",
    "attachResizeHook",
    "attachBackendCallbackFunctions",
    "backendApi_1",
    "nodes",
    "totalCount",
    "onLangChange",
    "gridStateChange",
    "updateRowCount",
    "onRowsChanged",
    "invalidateRows",
    "rows",
    "isExecuteCommandOnInit",
    "onInit",
    "observableOrPromise_1",
    "tslib_1.__awaiter",
    "paginationChanged",
    "dynamicColumns",
    "isShowing",
    "toggleHeaderRow",
    "decorators",
    "Inject",
    "AngularSlickgridModule",
    "forRoot",
    "config",
    "ngModule",
    "providers",
    "provide",
    "useValue",
    "NgModule",
    "imports",
    "CommonModule",
    "TranslateModule",
    "declarations",
    "exports",
    "buf",
    "charCodeAt"
  ],
  "mappings": "urFA2DA,SAAgBA,EAAUC,EAASC,EAAYC,EAAGC,GAC9C,OAAO,IAAKD,IAAMA,EAAIE,UAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,IAAW,MAAOG,GAAKL,EAAOK,IACpF,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,SAAEK,IAAW,MAAOG,GAAKL,EAAOK,IACvF,SAASF,EAAKI,GAAUA,EAAOC,KAAOT,EAAQQ,EAAOL,OAAS,IAAIN,EAAE,SAAUG,GAAWA,EAAQQ,EAAOL,SAAWO,KAAKR,EAAWK,GACnIH,GAAMN,EAAYA,EAAUa,MAAMhB,EAASC,QAAmBS,UAItE,SAAgBO,EAAYjB,EAASkB,GAGjC,SAASC,EAAKC,GAAK,OAAO,SAAUC,GAAK,OACzC,SAAcC,GACV,GAAIC,EAAG,MAAM,IAAIC,UAAU,mCAC3B,KAAOC,GAAG,IACN,GAAIF,EAAI,EAAGG,IAAMC,EAAID,EAAU,EAARJ,EAAG,GAAS,SAAWA,EAAG,GAAK,QAAU,YAAcK,EAAIA,EAAEC,KAAKF,EAAGJ,EAAG,KAAKR,KAAM,OAAOa,EAEjH,OADID,EAAI,EAAGC,IAAGL,GAAM,EAAGK,EAAEnB,QACjBc,EAAG,IACP,KAAK,EAAG,KAAK,EAAGK,EAAIL,EAAI,MACxB,KAAK,EAAc,OAAXG,EAAEI,SAAkBrB,MAAOc,EAAG,GAAIR,MAAM,GAChD,KAAK,EAAGW,EAAEI,QAASH,EAAIJ,EAAG,GAAIA,GAAM,GAAI,SACxC,KAAK,EAAGA,EAAKG,EAAEK,IAAIC,MAAON,EAAEO,KAAKD,MAAO,SACxC,QACI,GAAMJ,EAAIF,EAAEO,OAAML,EAAIA,EAAEM,OAAS,GAAKN,EAAEA,EAAEM,OAAS,MAAkB,IAAVX,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEG,EAAI,EAAG,SACjG,GAAc,IAAVH,EAAG,MAAcK,GAAML,EAAG,GAAKK,EAAE,IAAML,EAAG,GAAKK,EAAE,IAAM,CAAEF,EAAEI,MAAQP,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYG,EAAEI,MAAQF,EAAE,GAAI,CAAEF,EAAEI,MAAQF,EAAE,GAAIA,EAAIL,EAAI,MAC7D,GAAIK,GAAKF,EAAEI,MAAQF,EAAE,GAAI,CAAEF,EAAEI,MAAQF,EAAE,GAAIF,EAAEK,IAAII,KAAKZ,GAAK,MACvDK,EAAE,IAAIF,EAAEK,IAAIC,MAChBN,EAAEO,KAAKD,MAAO,SAEtBT,EAAKJ,EAAKU,KAAK5B,EAASyB,GAC1B,MAAOd,GAAKW,GAAM,EAAGX,GAAIe,EAAI,EAAI,QAAWH,EAAII,EAAI,EACtD,GAAY,EAARL,EAAG,GAAQ,MAAMA,EAAG,GAAI,OAASd,MAAOc,EAAG,GAAKA,EAAG,QAAK,EAAQR,MAAM,GArB9BL,EAAMW,EAAGC,KAFzD,IAAsGE,EAAGG,EAAGC,EAAGQ,EAA3GV,GAAMI,MAAO,EAAGO,KAAM,WAAa,GAAW,EAAPT,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOK,QAAUF,QAC3F,OAAOK,GAAMzB,KAAMS,EAAK,GAAIkB,QAASlB,EAAK,GAAImB,SAAUnB,EAAK,IAAwB,mBAAXoB,SAA0BJ,EAAEI,OAAOC,UAAY,WAAa,OAAOC,OAAUN,EA8B3J,SAAgBO,EAASC,GACrB,IAAIC,EAAsB,mBAAXL,QAAyBI,EAAEJ,OAAOC,UAAWK,EAAI,EAChE,OAAID,EAAUA,EAAEhB,KAAKe,IAEjBjC,KAAM,WAEF,OADIiC,GAAKE,GAAKF,EAAEV,SAAQU,OAAI,IACnBnC,MAAOmC,GAAKA,EAAEE,KAAM/B,MAAO6B,KAKhD,SAAgBG,EAAOH,EAAGvB,GACtB,IAAIwB,EAAsB,mBAAXL,QAAyBI,EAAEJ,OAAOC,UACjD,IAAKI,EAAG,OAAOD,EACf,IAAmBI,EAAYpC,EAA3BkC,EAAID,EAAEhB,KAAKe,GAAOK,KACtB,IACI,WAAc,IAAN5B,GAAgBA,KAAM,MAAQ2B,EAAIF,EAAEnC,QAAQI,MAAMkC,EAAGd,KAAKa,EAAEvC,OAExE,MAAOyC,GAAStC,GAAMsC,MAAOA,WAEzB,IACQF,IAAMA,EAAEjC,OAAS8B,EAAIC,EAAU,YAAID,EAAEhB,KAAKiB,WAExC,GAAIlC,EAAG,MAAMA,EAAEsC,OAE7B,OAAOD,EAGX,SAAgBE,IACZ,IAAK,IAAIF,KAASH,EAAI,EAAGA,EAAIM,UAAUlB,OAAQY,IAC3CG,EAAKA,EAAGI,OAAON,EAAOK,UAAUN,KACpC,OAAOG,ECvHX,SAAAK,EAA+BC,GAG7B,IAAK,IAFDzC,EAAS,GAEJgC,EAAI,EAAGA,EAAIS,EAAUT,IAC5BhC,GAAU,IAEZ,OAAOA,EAOT,SAAA0C,EAAiCC,GAC/B,OAAOA,EAAMC,QAAQ,YAAa,SAAUC,EAAOC,GACjD,OAAOC,OAAOC,aAAaF,KAuB/B,SAAAG,EAA4BC,EAAUC,EAAUC,GAC9C,QADF,IAAAA,IAAgDA,GAAhD,GACMF,IAAMC,EACR,OAAO,EAGT,GAAU,OAAND,GAAoB,OAANC,EAChB,OAAO,EAGT,GAAID,EAAE9B,SAAW+B,EAAE/B,OACjB,OAAO,EAGJgC,IACHF,EAAEG,OACFF,EAAEE,QAGJ,IAAK,IAAIrB,EAAI,EAAGA,EAAIkB,EAAE9B,SAAUY,EAC9B,GAAIkB,EAAElB,KAAOmB,EAAEnB,GACb,OAAO,EAIX,OAAO,EAQT,SAAAsB,EAAiCX,EAAmCY,QAApE,IAAAA,IAAoEA,EAApE,IACE,IAAIC,EAAeb,EAEnB,GAAIA,aAAiBpD,QAEnB,OAAOoD,EACF,GAAIA,aAAiBc,EAAAA,cAC1BD,EAAUb,EAAMe,QAAQC,uBACCpE,UACvBiE,EAAUb,EAAMiB,KAAK,GAAGD,eAEpBH,aAAmBjE,UACvB,MAAM,IAAIsE,MACR,2CAA2CN,EADnD,oRAQE,OAAOC,EAWT,SAAAM,EAA8BC,EAAcC,EAA+BC,GACzE,YADF,IAAAA,IAA2EA,MAClEF,EAAMG,KAAKF,IAAUC,EAQ9B,SAAAE,EAAiDC,GAC/C,IAAIC,EACJ,OAAQD,GACN,KAAKE,EAAUC,SACf,KAAKD,EAAUE,YACbH,EAAM,sBACN,MACF,KAAKC,EAAUG,gBACbJ,EAAM,wBACN,MACF,KAAKC,EAAUI,iBACbL,EAAM,wBACN,MACF,KAAKC,EAAUK,OACbN,EAAM,aACN,MACF,KAAKC,EAAUM,YACbP,EAAM,SACN,MACF,KAAKC,EAAUO,WACbR,EAAM,sBACN,MACF,KAAKC,EAAUQ,eACbT,EAAM,wBACN,MACF,KAAKC,EAAUS,gBACbV,EAAM,wBACN,MACF,KAAKC,EAAUU,gBACbX,EAAM,eACN,MACF,KAAKC,EAAUW,oBACbZ,EAAM,iBACN,MACF,KAAKC,EAAUY,QACbb,EAAM,2BACN,MACF,KAAKC,EAAUa,KACf,KAAKb,EAAUc,QACf,QACEf,EAAM,aAGV,OAAOA,EAST,SAAAgB,EAAoDjB,GAsBlD,IAAIC,EACJ,OAAQD,GACN,KAAKE,EAAUC,SACf,KAAKD,EAAUE,YACbH,EAAM,cACN,MACF,KAAKC,EAAUG,gBAGf,KAAKH,EAAUI,iBACbL,EAAM,gBACN,MACF,KAAKC,EAAUK,OACbN,EAAM,QACN,MACF,KAAKC,EAAUM,YACbP,EAAM,QACN,MACF,KAAKC,EAAUO,WACbR,EAAM,cACN,MACF,KAAKC,EAAUQ,eACbT,EAAM,gBACN,MACF,KAAKC,EAAUS,gBACbV,EAAM,gBACN,MACF,KAAKC,EAAUU,gBACbX,EAAM,cACN,MACF,KAAKC,EAAUW,oBACbZ,EAAM,gBACN,MACF,KAAKC,EAAUY,QACbb,EAAM,IACN,MACF,KAAKC,EAAUa,KACf,KAAKb,EAAUc,QACf,QACEf,EAAM,QAGV,OAAOA,EAQT,SAAAiB,EAAgCC,GAC9B,IAAIlB,EAEJ,OAAQkB,GACN,IAAK,IACHlB,EAAMmB,GAAaC,SACnB,MACF,IAAK,KACHpB,EAAMmB,GAAaE,gBACnB,MACF,IAAK,IACHrB,EAAMmB,GAAaG,YACnB,MACF,IAAK,KACHtB,EAAMmB,GAAaI,mBACnB,MACF,IAAK,KACL,IAAK,KACL,IAAK,MACL,IAAK,MACHvB,EAAMmB,GAAaK,SACnB,MACF,IAAK,IACL,IAAK,KACL,IAAK,aACHxB,EAAMmB,GAAaM,WACnB,MACF,IAAK,KACL,IAAK,WACHzB,EAAMmB,GAAaO,SACnB,MACF,IAAK,IACL,IAAK,KACL,IAAK,KACL,IAAK,KACH1B,EAAMmB,GAAaQ,MACnB,MACF,IAAK,KACL,IAAK,KACH3B,EAAMmB,GAAaS,MACnB,MACF,IAAK,QACL,IAAK,MACL,IAAK,SACH5B,EAAMmB,GAAaU,MACnB,MACF,QACE7B,EAAMmB,GAAaW,SAIvB,OAAO9B,EAST,SAAA+B,EAAuChC,GACrC,IAAIC,EAEJ,OAAQD,GACN,KAAKE,EAAU+B,OACf,KAAK/B,EAAUgC,QACbjC,EAAMmB,GAAaW,SACnB,MACF,KAAK7B,EAAUiC,SACf,KAAKjC,EAAUkC,OACf,KAAKlC,EAAUa,KACf,KAAKb,EAAUc,QACf,KAAKd,EAAUa,KACf,KAAKb,EAAUY,QACf,KAAKZ,EAAUC,SACf,KAAKD,EAAUE,YACf,KAAKF,EAAUG,gBACf,KAAKH,EAAUI,iBACf,KAAKJ,EAAUK,OACf,KAAKL,EAAUM,YACf,KAAKN,EAAUO,WACf,KAAKP,EAAUQ,eACf,KAAKR,EAAUS,gBACf,KAAKT,EAAUU,gBACf,KAAKV,EAAUW,oBACf,KAAKX,EAAUmC,qBACf,QACEpC,EAAMmB,GAAaQ,MAIvB,OAAO3B,EAST,SAAAqC,EAAwCC,GACtC,IAAItC,EAEJ,OAAQsC,GACN,KAAKC,GAAWC,eACdxC,EAAMmB,GAAaS,MACnB,MACF,KAAKW,GAAWE,aACdzC,EAAMmB,GAAaQ,MAMvB,OAAO3B,EAQT,SAAA0C,EAA6BC,EAAyBC,GACpD,IAAI9B,EAAO,KAEX,GAAI,eAAe+B,KAAKF,GAAkB,CAExC,IAAMG,EAAaC,mBAAmBJ,GAChCK,EAAaC,GAAO,IAAIC,KAAKJ,IAC/BE,EAAWG,WAAqD,IAAxCH,EAAWI,OAAOC,WAAWtG,SACvD+D,EAAO,EAAWkC,EAAWM,MAAMC,SAAWP,EAAWO,UAI7D,OAAOzC,EAQT,SAAA0C,EAA4BC,GAC1B,OAAOA,EAAIlF,QAAQ,iCAAkC,SAACC,EAAekF,GAEnE,MAAI,aAAab,KAAKrE,GACb,GAGS,IAAXkF,EAAelF,EAAMmF,cAAgBnF,EAAMoF,gBCxYtD,SAAAC,EAAgCC,EAAaC,EAAahE,EAAsBiE,GAC9E,IAAIC,EAAa,EAEjB,OAAQlE,GACN,KAAKE,EAAUkC,OACb8B,EAAaC,GAAQC,QAAQL,EAAQC,EAAQC,GAC7C,MACF,KAAK/D,EAAUa,KACbmD,EAAaC,GAAQpD,KAAKgD,EAAQC,EAAQC,GAC1C,MACF,KAAK/D,EAAUc,QACbkD,EAAaC,GAAQnD,QAAQ+C,EAAQC,EAAQC,GAC7C,MACF,KAAK/D,EAAUK,OACb2D,EAAaC,GAAQ5D,OAAOwD,EAAQC,EAAQC,GAC5C,MACF,KAAK/D,EAAUM,YACb0D,EAAaC,GAAQ3D,YAAYuD,EAAQC,EAAQC,GACjD,MACF,QACEC,EAAaC,GAAQlC,OAAO8B,EAAQC,EAAQC,GAIhD,OAAOC,ECzBT,SAAAG,EAAsBX,GACpB,MAAO,YAAYZ,KAAKY,EAAM,2ICFhCY,MAAU,IACVC,MAAU,IACVC,UAAc,IACdC,KAAS,IACTC,UAAc,IACdC,MAAU,IACVC,IAAQ,KAERC,YAAgB,KAChBC,WAAe,KACfC,gBAAoB,26BCVpBC,IAAQ,MACRC,IAAQ,MACRC,KAAS,OACTC,IAAQ,MACRC,IAAQ,MACRC,IAAQ,MACRC,KAAS,6nBCNTC,OAAW,SACXC,WAAe,aACfC,OAAW,kcCFX1D,SAAa,WACbV,SAAa,KACbC,gBAAoB,KACpBC,YAAgB,KAChBC,mBAAuB,KACvBC,SAAa,KACbG,MAAU,KACVD,SAAa,WACbD,WAAe,aACfG,KAAO,KACPC,MAAU,WCVV4D,IAAQ,MACRC,IAAQ,MACRC,KAAS,OACTC,KAAS,QPEH3C,GAAS4C,EQHT5C,GAAS4C,EACTC,GAAShG,EAAiCG,EAAUM,aAE7CwF,GAA4B,SAACjC,EAAQC,EAAQC,GACxD,IAAKf,GAAOa,EAAQgC,IAAQ,GAAM3C,YAAcF,GAAOc,EAAQ+B,IAAQ,GAAM3C,UAC3E,OAAO,EAET,IAAM6C,EAAQ/C,GAAOa,EAAQgC,IAAQ,GAC/BG,EAAQhD,GAAOc,EAAQ+B,IAAQ,GAC/BI,EAAOC,SAASH,EAAMzC,OAAO,KAAM,IAAM4C,SAASF,EAAM1C,OAAO,KAAM,IAE3E,OAAOS,GAA0B,IAATkC,EAAa,EAAKA,EAAO,EAAI,GAAK,ICZtDjD,GAAS4C,EAEFO,GAAqB,SAACtC,EAAQC,EAAQC,GACjD,IAAKf,GAAOa,EAAQb,GAAOoD,UAAUlD,YAAcF,GAAOc,EAAQd,GAAOoD,UAAU,GAAMlD,UACvF,OAAO,EAET,IAAM6C,EAAQ/C,GAAOa,GACfmC,EAAQhD,GAAOc,GACfmC,EAAOC,SAASH,EAAMzC,OAAO,KAAM,IAAM4C,SAASF,EAAM1C,OAAO,KAAM,IAE3E,OAAOS,GAA0B,IAATkC,EAAa,EAAKA,EAAO,EAAI,GAAK,ICTtDjD,GAAS4C,EACTC,GAAShG,EAAiCG,EAAUc,SAE7CuF,GAAwB,SAACxC,EAAQC,EAAQC,GACpD,IAAKf,GAAOa,EAAQgC,IAAQ,GAAM3C,YAAcF,GAAOc,EAAQ+B,IAAQ,GAAM3C,UAC3E,OAAO,EAET,IAAM6C,EAAQ/C,GAAOa,EAAQgC,IAAQ,GAC/BG,EAAQhD,GAAOc,EAAQ+B,IAAQ,GAC/BI,EAAOC,SAASH,EAAMzC,OAAO,KAAM,IAAM4C,SAASF,EAAM1C,OAAO,KAAM,IAE3E,OAAOS,GAA0B,IAATkC,EAAa,EAAKA,EAAO,EAAI,GAAK,ICXtDjD,GAAS4C,EACTC,GAAShG,EAAiCG,EAAUK,QAE7CiG,GAAuB,SAACzC,EAAQC,EAAQC,GACnD,IAAKf,GAAOa,EAAQgC,IAAQ,GAAM3C,YAAcF,GAAOc,EAAQ+B,IAAQ,GAAM3C,UAC3E,OAAO,EAET,IAAM6C,EAAQ/C,GAAOa,EAAQgC,IAAQ,GAC/BG,EAAQhD,GAAOc,EAAQ+B,IAAQ,GAC/BI,EAAOC,SAASH,EAAMzC,OAAO,KAAM,IAAM4C,SAASF,EAAM1C,OAAO,KAAM,IAE3E,OAAOS,GAA0B,IAATkC,EAAa,EAAKA,EAAO,EAAI,GAAK,ICZ/CM,GAAwB,SAAC1C,EAAQC,EAAQC,GACpD,IAAMyC,EAAKC,MAAM5C,IAAsB,KAAXA,GAA4B,OAAXA,GAAoB,MAAS6C,WAAW7C,GAC/EtH,EAAKkK,MAAM3C,IAAsB,KAAXA,GAA4B,OAAXA,GAAoB,MAAS4C,WAAW5C,GACrF,OAAOC,GAAiByC,IAAMjK,EAAI,EAAKiK,EAAIjK,EAAI,GAAK,ICHzCoK,GAAuB,SAAC9C,EAAQC,EAAQC,GACnD,IAAI6C,EAYJ,OAXe,OAAX/C,EACF+C,GAAY,EACQ,OAAX9C,EACT8C,EAAW,EACF/C,IAAWC,EACpB8C,EAAW,EACF7C,EACT6C,EAAW/C,EAASC,GAAU,EAAI,EACxBC,IACV6C,EAAW/C,EAASC,EAAS,GAAK,GAE7BC,EAAgB6C,GCRZ3C,IACXpD,KAAMsF,GACNrF,QAASuF,GACThG,OAAQiG,GACRhG,YAAawF,GACb5B,QAASqC,GACTxE,OAAQ4E,ICbVE,GAAA,WAYE,SAAFA,EAAsBC,GAAAxJ,KAAtBwJ,UAAsBA,SAOpBD,EAAFE,UAAAC,iBAAE,SAAiBC,EAAmBC,GAClC,IAAIC,EAEJ,GAAID,EAAU,CACZ,IAAME,EAAWF,EAASG,UAAY,GAChCpG,EAAWiG,EAASjG,UAAYC,GAAaQ,MAC7C4F,EAAQJ,EAAS7L,OAAS,GAG9B8L,EADElG,IAAaC,GAAaQ,MACPuF,EAAW5B,OAAO,SAACkC,GAAS,OAAAA,EAAKH,KAAcE,IAE/CL,EAAW5B,OAAO,SAACkC,GAAS,OAAAA,EAAKH,KAAcE,IAIxE,OAAOH,GAUTN,EAAFE,UAAAS,eAAE,SAAeP,EAAmBQ,EAA0BC,GAA5D,IACMC,EADRC,EAAAtK,KAGI,GAAImK,EAAQ,CACV,IAAMI,EAAWJ,EAAOJ,UAAY,GAC9BS,EAAgBL,EAAOM,eAAe,aAAeN,EAAOO,UAAY,EAAS,EACjFC,EAAYR,EAAO3H,WAAaE,EAAU+B,OAEhD4F,EAAmBV,EAAWlI,KAAK,SAACmJ,EAAeC,GAIjD,OADevE,EAFA,EAAyBgE,EAAKd,UAAUsB,QAAQF,EAASL,IAAa,KAAOK,EAASL,GACtF,EAAyBD,EAAKd,UAAUsB,QAAQD,EAASN,IAAa,KAAOM,EAASN,GACtDI,EAAWH,KAK9D,OAAOH,KA5DX,mBAUAU,KAACC,EAAAA,kDATDD,KAASE,EAAAA,oBC6BT,IAAAC,GAAA,WAmBE,SAAFA,EAAsB1B,GAAAxJ,KAAtBwJ,UAAsBA,EAlBtBxJ,KAAAmL,oBAAgC,KAIhCnL,KAAAoL,6BAKApL,KAAAqL,kBAA6B,EAE7BrL,KAAAsL,sBACIC,UAAWC,EAAczE,MACzB0E,SAAU,SACVzF,OAAQ0F,GAASlE,IACjBmE,gBAAgB,UAWlBT,EAAFzB,UAAAmC,KAAE,SAAKC,EAAWC,EAAyBC,GACvC/L,KAAKgM,MAAQH,EACb7L,KAAKiM,aAAeH,EACpB9L,KAAKkM,UAAYH,GAYnBb,EAAFzB,UAAA0C,aAAE,SAAaC,GACXpM,KAAKqM,eAAiBC,EAAEC,QAAO,KAAUvM,KAAKsL,qBAAsBc,GAGpE,IAAMI,EAAaxM,KAAKyM,gBAGxBzM,KAAK0M,mBACHjB,SAAazL,KAAKqM,eAAeZ,SAAvC,IAAmDzL,KAAKqM,eAAerG,OACjE2G,WAAYH,EACZxG,OAAQhG,KAAKqM,eAAerG,OAC5B2F,eAAgB3L,KAAKqM,eAAeV,kBAQxCT,EAAFzB,UAAAgD,cAAE,WAAA,IAAFnC,EAAAtK,KACU4M,EAAU5M,KAAKgM,MAAMa,iBACrBtB,EAAYvL,KAAKqM,eAAed,WAAa,GAC7CvF,EAAShG,KAAKqM,eAAerG,QAAU,GAG7ChG,KAAKoL,0BAA4BpL,KAAK8M,iCAGtC9M,KAAK+M,oBAAuB/G,IAAW0F,GAASlE,IAAO,IAAM,GAG7D,IAAIwF,EAAmB,GAavB,GAVAhN,KAAKiN,gBAAkBjN,KAAKkN,uBAAuBN,OAC/C5M,KAAKiN,iBAAmBE,MAAMC,QAAQpN,KAAKiN,mBAC7CjN,KAAKqL,iBAAoBrL,KAAKiN,gBAAgBzN,OAAS,EACvDwN,GAAoBhN,KAAKiN,gBACtBxK,IAAI,SAAC4K,GAAW,OAAG/C,EAAKd,UAAUsB,QAAQ,YAAnD,KAAmEuC,EAAOC,MAA1E,MACSC,KAAKhC,IAIVvL,KAAKwN,eAAiBxN,KAAKyN,iBAAiBb,OACxC5M,KAAKwN,gBAAkBL,MAAMC,QAAQpN,KAAKwN,gBAAiB,CAI7DR,GAF2BhN,KAAKwN,eAC7B/K,IAAI,SAAC4K,GAAW,OAAA/C,EAAKyC,oBAAsBM,EAAOC,MAAQhD,EAAKyC,sBAC1BQ,KAAKhC,GAAavL,KAAKmL,oBAMjE,OAFA6B,GAAoBhN,KAAK0N,kBAAkBd,EAAS5M,KAAKmL,sBAQ3DD,EAAFzB,UAAAiE,kBAAE,SAAkBd,EAAmBe,GAKnC,IAAK,IAJDX,EAAmB,GACjBY,EAAY5N,KAAKkM,UAAU2B,YAGxBC,EAAY,EAAGA,EAAYF,EAAWE,IAAa,CAC1D,IAAMC,EAAU/N,KAAKkM,UAAU8B,QAAQF,GAExB,MAAXC,IAEgB,MAAdA,EAAQE,GAEVjB,GAAoBhN,KAAKkO,mBAAmBtB,EAASkB,EAAWC,GACvD/N,KAAKqL,kBAAoB0C,EAAQI,gBAAkBC,UAE5DpB,GAAoBhN,KAAKqO,oBAAoBN,GACpCA,EAAQI,gBAEjBnB,GAAoBhN,KAAKsO,oBAAoBP,IAE/Cf,GAAoBW,GAIxB,OAAOX,GAMT9B,EAAFzB,UAAAqD,2BAAE,WACE,IACMyB,KAEN,IAAK,IAAMC,KAAOC,MAAMC,KAAKC,YACvBF,MAAMC,KAAKC,YAAYlE,eAAe+D,IACxCD,EACyB9O,KAAK+O,EAAIpI,eAItC,OAAOmI,GAOTrD,EAAFzB,UAAAgE,iBAAE,SAAiBb,GAAjB,IAAFtC,EAAAtK,KACI,IAAK4M,IAAYO,MAAMC,QAAQR,IAA+B,IAAnBA,EAAQpN,OACjD,OAAO,KAET,IAAMoP,KAgBN,OAbAhC,EAAQiC,QAAQ,SAACC,GACf,IAAMC,EAAaD,EAAmB,UAAIxE,EAAKd,UAAUsB,QAAQgE,EAAUE,WAAaF,EAAUG,KAC5FC,EAAeJ,EAAUK,oBAAqB,GAG/CL,EAAUM,QAAWhB,WAAaU,EAAUM,MAAQ,KAAOF,GAC9DN,EAAcnP,MACZ+O,IAAKM,EAAUO,OAASP,EAAUb,GAClCX,MAAOyB,MAKNH,GAQT1D,EAAFzB,UAAAyE,mBAAE,SAAmBtB,EAAmB0C,EAAavB,GAOjD,IAAK,IANDwB,EAAM,EACNC,EAAkB,GAChBjE,EAAYvL,KAAKqM,eAAed,UAChCvF,EAAShG,KAAKqM,eAAerG,OAC7ByJ,EAAqBzP,KAAK+M,qBAAuB,GAE9C2C,EAAM,EAAGC,EAAK/C,EAAQpN,OAAQkQ,EAAMC,EAAID,IAAO,CACtD,IAAMZ,EAAYlC,EAAQ8C,GACpBE,EAAUd,EAAUO,OAASP,EAAUb,IAAM,GAGnD,IAAIa,EAAUK,kBAAd,CAKInP,KAAKqL,kBAA4B,IAARkE,IAC3BC,GAAmB,KAAOjE,GAI5B,IAAMsE,EAAyBf,EAAUgB,sBAAwB1B,UAAaU,EAAUgB,oBAAsB9P,KAAKiM,aAAa6D,oBAG1HC,EAAoCjB,EAAUiB,wBAA0B3B,UAAaU,EAAUiB,sBAAwB3B,UAEzH4B,EAAW,GAGbA,EADED,EACSA,EAAsBT,EAAKI,EAAK3B,EAAQ6B,GAAUd,EAAWf,EAAS/N,KAAKgM,OAC7E6D,GAA2Bf,EAAUmB,UACnCnB,EAAUmB,UAAUX,EAAKI,EAAK3B,EAAQ6B,GAAUd,EAAWf,EAAS/N,KAAKgM,OAEnD,OAArB+B,EAAQ6B,IAAqB7B,EAAQ6B,KAAaxB,UAAa,GAAKL,EAAQ6B,GAItF5J,IAAW0F,GAASlE,MACtBwI,EAAWA,EAASlK,WAAW9E,QAAQ,MAAO,OAOhDwO,IAF6BV,GAAaA,EAAUoB,6BAAgC,IAAM,IAEjDT,EAAqBO,EAAWP,EAAqBlE,EAC9FgE,KAGF,OAAOC,GAOTtE,EAAFzB,UAAA4E,oBAAE,SAAoBN,GAClB,IAAIoC,EAAYpC,EAAQhQ,MAClB0R,EAAqBzP,KAAK+M,qBAAuB,GACjDxB,EAAYvL,KAAKqM,eAAed,UAChCvF,EAAShG,KAAKqM,eAAerG,OAanC,OAXAmK,EAAYvP,EAAe,EAAImN,EAAQqC,OAASD,EAE5CnK,IAAW0F,GAASlE,MAEtB2I,EAAYA,EAAUrK,WAAW9E,QAAQ,MAAO,OAOjByO,EAAqB,IAAMU,EAAYV,EAAqBlE,GAQ/FL,EAAFzB,UAAA6E,oBAAE,SAAoBP,GASlB,IAAK,IAPCxC,EAAYvL,KAAKqM,eAAed,UAChCvF,EAAShG,KAAKqM,eAAerG,OAC7ByJ,EAAqBzP,KAAK+M,qBAAuB,GACjDwB,EAA2BvO,KAAKoL,8BAChCiF,EAAcrQ,KAAKgM,MAAMa,aAAarN,OACxC8Q,EAAYb,EAApB,KAA2CA,EAAqBlE,EAEnDgF,EAAI,EAAGA,EAAIF,EAAaE,IAAK,CAKpC,IAAK,IAJCX,EAAU5P,KAAKgM,MAAMa,aAAa0D,GAAGtC,GACvC+B,EAAW,GAGNQ,EAAI,EAAGA,EAAIjC,EAAyB/O,OAAQgR,IACnD,GAAIzC,EAAQQ,EAAyBiC,MAAQpC,WACvCwB,KAAW7B,EAAQQ,EAAyBiC,IAAK,CACnD,IAAMC,EAAiBlC,EAAyBiC,GAC1CE,EAAM3C,EAAQQ,EAAyBiC,IAAIZ,GAE/CI,EADmC,QAAjCS,EAAerK,cACNqK,EAAiB,KAAOE,KAAKC,MAAMF,GACJ,QAAjCD,EAAerK,eAA4D,QAAjCqK,EAAerK,eAA4D,QAAjCqK,EAAerK,cACjGqK,EAAiB,KAAOE,KAAKC,MAAwB,IAAlBxH,WAAWsH,IAAkB,IAEhEA,EAKf1K,IAAW0F,GAASlE,OAItBwI,EAAWA,EAASlK,WAAW9E,QAAQ,MAAO,OACTC,MAAM,oBAAuB,IAAM,IAE1EqP,GAAUb,EAAqBO,EAAWP,EAAqBlE,EAGjE,OAAO+E,GAQTpF,EAAFzB,UAAAyD,uBAAE,SAAuBN,GAAvB,IAAFtC,EAAAtK,KACI,IAAK4M,IAAYO,MAAMC,QAAQR,IAA+B,IAAnBA,EAAQpN,OACjD,OAAO,KAGT,IAAIqR,EAAc,GACZC,KAEFC,GAAkB,EAyBtB,OAxBIzE,EAAE0E,cAAchR,KAAKiR,qBACvBF,GAAkB,GAElBA,GAAkB,EAClBF,EAAcvE,EAAE,IAAItM,KAAKiR,oBAAoBC,mBAAmB,IAAMR,OAIxE9D,EAAQiC,QAAQ,SAACC,GAOf,GAJI+B,EAAYM,QAAQ,MAAQ,IAC9BN,EAAcA,EAAYO,MAAM,KAAK,IAGnCL,GAAmBjC,EAAUb,KAAO4C,EAAa,CACnD,IAAM9B,EAAaD,EAAmB,UAAIxE,EAAKd,UAAUsB,QAAQgE,EAAUE,WAAaF,EAAUG,KAClG6B,EAAerR,MACb+O,IAAKM,EAAUO,OAASP,EAAUb,GAClCX,MAAOyB,OAKN+B,GAST5F,EAAFzB,UAAAiD,kBAAE,SAAkBN,GAEhB,GAA0B,gCAAtBiF,UAAUC,QACZ,MAAM,IAAIrP,MAAM,6GAIlB,IASIsP,EATEC,EAAYpF,EAAQpG,SAAW0F,GAASlE,IAAO,WAAa,aAG5DmF,EAAa7L,EAAiBsL,EAAQO,YAQ1C4E,EADEnF,EAAQpG,SAAW0F,GAASlE,IACjB,IAAIiK,EAAAA,YAAY,SAASC,OAAO/E,GAEhCA,EAIf,IAAMgF,EAAO,IAAIC,MAAMxF,EAAQT,eAAiB,SAAW,GAAI4F,IAC7DxG,KAASyG,EAAf,oBAII,GAA0C,mBAA/BH,UAAUQ,iBACnBR,UAAUQ,iBAAiBF,EAAMvF,EAAQX,cACpC,CAGL,IAAMqG,EAAOC,SAASC,cAAc,KAC9BC,EAASC,IAAIC,gBAAgBR,GAEnCG,EAAKM,YAAc,WACnBN,EAAKO,KAAOJ,EACZH,EAAKQ,aAAa,WAAYlG,EAAQX,UAGtCqG,EAAKS,MAAMC,WAAa,SAGxBT,SAAStT,KAAKgU,YAAYX,GAC1BA,EAAKY,QACLX,SAAStT,KAAKkU,YAAYb,OA5YhC,mBADA/G,KAACC,EAAAA,kDAbDD,KAASE,EAAAA,oBdVT,IAAa2H,GAA0C,SAACxG,GACtD,OAAOvF,EAAauF,EAAQyG,aAAehM,EAAauF,EAAQ0G,aePrDC,GAAsB,SAACpP,EAAkB4C,EAAaC,GACjE,OAAQ7C,GACN,IAAK,IACL,IAAK,KAAM,OAAQ4C,EAASC,EAC5B,IAAK,KACL,IAAK,KAAM,OAAQD,GAAUC,EAC7B,IAAK,IACL,IAAK,KAAM,OAAQD,EAASC,EAC5B,IAAK,KACL,IAAK,KAAM,OAAQD,GAAUC,EAC7B,IAAK,KACL,IAAK,KACL,IAAK,KAAM,OAAQD,IAAWC,EAC9B,IAAK,IACL,IAAK,KACL,IAAK,KAAM,OAAQD,IAAWC,EAC9B,IAAK,KAAM,SAASA,IAAUA,EAAOwM,WAAaxM,EAAOwM,SAASzM,GAEpE,OAAO,GCdHb,GAAS4C,EAEF2K,GAAuC,SAAC7G,GACnD,IACM8G,EAAmB3Q,EADA6J,EAAQ+G,kBAAoBzQ,EAAUc,SAE/D,IAAKkC,GAAO0G,EAAQyG,UAAWnN,GAAOoD,UAAUlD,YAAcF,GAAO0G,EAAQ0G,WAAYI,GAAkB,GAAMtN,UAC/G,OAAO,EAET,IAAMwN,EAAW1N,GAAO0G,EAAQyG,WAC1BQ,EAAa3N,GAAO0G,EAAQ0G,YAGlC,OAAOC,GAAoB3G,EAAQzI,UAAY,KAAMiF,SAASwK,EAASpN,OAAO,KAAM,IAAK4C,SAASyK,EAAWrN,OAAO,KAAM,MCZtHN,GAAS4C,EACTC,GAAShG,EAAiCG,EAAUc,SAE7C8P,GAA0C,SAAClH,GACtD,IAAK1G,GAAO0G,EAAQyG,UAAWtK,IAAQ,GAAM3C,YAAcF,GAAO0G,EAAQ0G,WAAYvK,IAAQ,GAAM3C,UAClG,OAAO,EAET,IAAMwN,EAAW1N,GAAO0G,EAAQyG,UAAWtK,IAAQ,GAC7C8K,EAAa3N,GAAO0G,EAAQ0G,WAAYvK,IAAQ,GAGtD,OAAOwK,GAAoB3G,EAAQzI,UAAY,KAAMiF,SAASwK,EAASpN,OAAO,KAAM,IAAK4C,SAASyK,EAAWrN,OAAO,KAAM,MCXtHN,GAAS4C,EACTC,GAAShG,EAAiCG,EAAUK,QAE7CwQ,GAAyC,SAACnH,GACrD,IAAK1G,GAAO0G,EAAQyG,UAAWtK,IAAQ,GAAM3C,YAAcF,GAAO0G,EAAQ0G,WAAYvK,IAAQ,GAAM3C,UAClG,OAAO,EAET,IAAMwN,EAAW1N,GAAO0G,EAAQyG,UAAWtK,IAAQ,GAC7C8K,EAAa3N,GAAO0G,EAAQ0G,WAAYvK,IAAQ,GAGtD,OAAOwK,GAAoB3G,EAAQzI,UAAY,KAAMiF,SAASwK,EAASpN,OAAO,KAAM,IAAK4C,SAASyK,EAAWrN,OAAO,KAAM,MCXtHN,GAAS4C,EACTC,GAAShG,EAAiCG,EAAUM,aAE7CwQ,GAA8C,SAACpH,GAC1D,IAAK1G,GAAO0G,EAAQyG,UAAWtK,IAAQ,GAAM3C,YAAcF,GAAO0G,EAAQ0G,WAAYvK,IAAQ,GAAM3C,UAClG,OAAO,EAET,IAAMwN,EAAW1N,GAAO0G,EAAQyG,UAAWtK,IAAQ,GAC7C8K,EAAa3N,GAAO0G,EAAQ0G,WAAYvK,IAAQ,GAGtD,OAAOwK,GAAoB3G,EAAQzI,UAAY,KAAMiF,SAASwK,EAASpN,OAAO,KAAM,IAAK4C,SAASyK,EAAWrN,OAAO,KAAM,MCXtHN,GAAS4C,EAEFmL,GAA0C,SAACrH,GACtD,IAAM8G,EAAmB3Q,EAAiC6J,EAAQ+G,kBAAoB/G,EAAQ5J,WAC9F,IAAKkD,GAAO0G,EAAQyG,UAAWnN,GAAOoD,UAAUlD,YAAcF,GAAO0G,EAAQ0G,WAAYI,GAAkB,GAAMtN,UAC/G,OAAO,EAET,IAAMwN,EAAW1N,GAAO0G,EAAQyG,UAAWnN,GAAOoD,UAAU,GACtDuK,EAAa3N,GAAO0G,EAAQ0G,WAAYI,GAAkB,GAGhE,OAAOH,GAAoB3G,EAAQzI,UAAY,KAAMiF,SAASwK,EAASpN,OAAO,KAAM,IAAK4C,SAASyK,EAAWrN,OAAO,KAAM,MCZ/G0N,GAAmD,SAACtH,GAE/D,IAAMyG,EAAYzG,EAAQyG,UAAY,GAEtC,OAAOE,GAAoB3G,EAAQzI,UAAY,KAAMkP,EAAWzG,EAAQuH,kBCJ7DC,GAAyC,SAACxH,GACrD,IAAMyG,EAAYzJ,WAAWgD,EAAQyG,WAC/BC,EAA4C,iBAAvB1G,EAAQ0G,WAA2B1J,WAAWgD,EAAQ0G,YAAc1G,EAAQ0G,WAEvG,OAAOC,GAAoB3G,EAAQzI,UAAY,KAAMkP,EAAWC,ICJrDe,GAAyC,SAACzH,GAErDA,EAAQyG,UAAazG,EAAQyG,YAAczE,WAAmC,OAAtBhC,EAAQyG,UAAsB,GAAKzG,EAAQyG,UAAU/M,WAG7G,IAAM+M,EAAYzG,EAAQyG,UAAUzM,cAC9B0M,EAA4C,iBAAvB1G,EAAQ0G,WAA2B1G,EAAQ0G,WAAW1M,cAAgBgG,EAAQ0G,WAEzG,MAAyB,MAArB1G,EAAQzI,UAAoByI,EAAQzI,WAAaC,GAAaO,SACzD0O,EAAU1O,SAAS2O,GACK,KAArB1G,EAAQzI,UAAiD,MAA9ByI,EAAQ0H,mBAA8B1H,EAAQzI,WAAaC,GAAaM,WACtG2O,EAAU3O,WAAW4O,GACE,KAArB1G,EAAQzI,SACVkP,EAAUG,SAASF,GAErBC,GAAoB3G,EAAQzI,UAAY,KAAMkP,EAAWC,ICLrDiB,GAA0C,SAAC3H,GAEtD,GAAIA,GAAWA,EAAQzI,UAA+C,OAAnCyI,EAAQzI,SAAS0C,cAClD,OAAOqN,GAAgCtH,GAIzC,OAAQA,EAAQ5J,WACd,KAAKE,EAAUsR,WACb,OAAOpB,GAAuBxG,GAChC,KAAK1J,EAAUa,KACb,OAAO0P,GAAoB7G,GAC7B,KAAK1J,EAAUY,QACb,OAAOmQ,GAAuBrH,GAChC,KAAK1J,EAAUc,QACb,OAAO8P,GAAuBlH,GAChC,KAAK1J,EAAUK,OACf,KAAKL,EAAUO,WACb,OAAOsQ,GAAsBnH,GAC/B,KAAK1J,EAAUM,YACf,KAAKN,EAAUU,gBACb,OAAOoQ,GAA2BpH,GACpC,KAAK1J,EAAUkC,OACb,OAAOgP,GAAsBxH,GAC/B,KAAK1J,EAAU+B,OACf,QACE,OAAOoP,GAAsBzH,KC1BtB6H,IACXF,uBAAFA,GACEG,cAAetB,GACfuB,uBAAwBT,GACxBU,WAAYnB,GACZoB,cAAef,GACfgB,cAAeb,GACfc,aAAchB,GACdiB,kBAAmBhB,GACnBiB,aAAcb,GACdc,aAAcb,GACdc,WAAY5B,ICxBd6B,QAOQ,aAMR,IAAAC,GAAA,WAaE,SAAFA,EAAsBrL,GAAAxJ,KAAtBwJ,UAAsBA,SAKpBqL,EAAFpL,UAAAmC,KAAE,SAAKkJ,GAAL,IAAFxK,EAAAtK,KACIA,KAAK6L,KAAOiJ,EAAKjJ,KACjB7L,KAAK+U,SAAWD,EAAKC,SACrB/U,KAAK8O,UAAYgG,EAAKhG,UACtB9O,KAAK2D,SAAWmR,EAAKnR,SACrB3D,KAAK8S,WAAagC,EAAKhC,WACnB9S,KAAK6L,MAAwC,mBAAzB7L,KAAK6L,KAAKmJ,aAChChV,KAAK8L,YAAc9L,KAAK6L,KAAKmJ,cAK/BhV,KAAKiV,WAAajV,KAAKkV,mBAIvBlV,KAAKmV,gBAAgBC,MAAM,SAAClX,GAC1BoM,EAAK+K,eAAenX,KAEtB8B,KAAKsV,mBAAmBC,OAAO,SAACrX,GAC9BoM,EAAK+K,eAAenX,MAOxB2W,EAAFpL,UAAA+L,MAAE,SAAMC,QAAR,IAAAA,IAAQA,GAAR,GACQzV,KAAK0V,cAAgB1V,KAAKsV,qBAC5BtV,KAAKsV,mBAAmB5E,IAAI,GAC5B1Q,KAAK0V,aAAaF,UAOtBX,EAAFpL,UAAAkM,QAAE,WACM3V,KAAKiV,aACPjV,KAAKiV,WAAWW,IAAI,SAASC,SAC7B7V,KAAKsV,mBAAmBM,IAAI,UAAUC,WAO1ChB,EAAFpL,UAAAqM,UAAE,SAAUC,GACJA,GACF/V,KAAK0V,aAAaM,QAAQD,IAQtBlB,EAAVpL,UAAAwM,qBAAU,SAAqBnD,GAArB,IAAVxI,EAAAtK,KACUkW,EAAczS,EAAoCzD,KAAK8O,UAAU/D,MAAQrI,EAAUc,SACnF2S,EAAe1S,EAAoCzD,KAAK8O,UAAUsH,YAAcpW,KAAK8O,UAAU/D,MAAQrI,EAAUY,SACnH+S,EAAgBrW,KAAKsW,iBAAiBtW,KAAK8O,UAAW9O,KAAK8L,cAAgB,GAC3EuK,EAAc7W,OAAS,IACzB6W,EAAgBA,EAAcE,UAAU,EAAG,IAG7C,IAAMC,GACJC,YAAa3D,GAAc,GAC3B4D,UAAU,EACVC,UAAWR,EACXS,WAAYV,EACZW,MAAM,EACNC,eAAe,EACfC,OAA2B,OAAlBV,EAA0BrW,KAAKgX,oBAAoBX,GAAiB,KAC7EY,SAAU,SAACC,EAA4BC,EAAiBC,GACtD9M,EAAK+M,cAAgBF,EAIjBX,EAAcc,WAChBhN,EAAK+K,eAAe,IAAIkC,YAAY,UAEpCjN,EAAK+K,eAAejH,aAMtB+H,IAAkC,MAAjBA,GAAwBA,EAAa/P,cAAc4M,SAAS,QAC/EwD,EAAcc,YAAa,GAG7B,IAAME,EAAexX,KAAgB,YAAKA,KAAK8L,YAAY2L,0BAA4B,GAAM,GACvFtC,EAAkB7I,EAAE,wFAAwFkL,EAAtH,YAEI,OADAxX,KAAK0V,aAAgBP,EAAgB,IAA8C,mBAAjCA,EAAgB,GAAGuC,UAA4BvC,EAAgB,GAAGuC,UAAUlB,GAAiB,KACxIrB,GAGDN,EAAVpL,UAAAkO,8BAAU,WACN,IACIC,EAAoB,GAKxB,OANqB5X,KAAK6X,kBAEbhJ,QAAQ,SAACiJ,GACpBF,GAAqB,kBAAkBE,EAAOnU,SAApD,YAAwEmU,EAAOC,YAA/E,KAA+FD,EAAOnU,SAAtG,cAGW,gCAAgCiU,EAA3C,aAGU/C,EAAVpL,UAAAoO,gBAAU,WACN,QACIlU,SAAQ,GAAwBoU,YAAa,KAC7CpU,SAAQ,IAAyBoU,YAAa,KAC9CpU,SAAQ,IAAyBoU,YAAa,KAC9CpU,SAAQ,KAA0BoU,YAAa,KAC/CpU,SAAQ,IAAyBoU,YAAa,KAC9CpU,SAAQ,KAA0BoU,YAAa,KAC/CpU,SAAQ,KAA0BoU,YAAa,MAO7ClD,EAAVpL,UAAAyL,iBAAU,WACN,IAAM8C,EAAahY,KAAK6L,KAAKoM,mBAAmBjY,KAAK8O,UAAUb,IAC/D3B,EAAE0L,GAAYE,QAEd,IAAMpF,EAAc9S,KAAK8S,YAAc,GACnCA,IACF9S,KAAKqX,cAAgBvE,GAIvB9S,KAAKsV,mBAAqBhJ,EAAEtM,KAAK2X,iCACjC3X,KAAKmV,gBAAkBnV,KAAKiW,qBAAqBnD,GACjD,IAAMqF,EAAsB7L,EAAE,gDACxB8L,EAAuB9L,EAAE,6CACzB+L,EAA2B/L,EAAE,kDAmCnC,OAvBA+L,EAAyBC,OAAOtY,KAAKsV,oBACrC8C,EAAqBE,OAAOD,GAC5BD,EAAqBE,OAAOtY,KAAKmV,iBAGjCgD,EAAoBG,OAAOF,GAC3BD,EAAoBI,KAAK,KAAM,UAAUvY,KAAK8O,UAAUb,IACxDjO,KAAKmV,gBAAgBqD,KAAK,WAAYxY,KAAK8O,UAAUb,IAEjDjO,KAAK2D,UACP3D,KAAKsV,mBAAmB5E,IAAI1Q,KAAK2D,UAI/B3D,KAAK8S,YACPqF,EAAoBM,SAAS,UAI3BN,GAA+D,mBAAjCA,EAAoBO,UACpDP,EAAoBO,SAASV,GAGxBG,GAGDtD,EAAVpL,UAAA6M,iBAAU,SAAiBxH,EAAmBhD,GAC1C,IAAM6M,EAAS7M,EAAY6M,QAAU7J,EAAU6J,WAC/C,OAAIA,EAAOC,MAAQD,EAAOC,gBAAgB3N,EAAAA,iBACjC0N,EAAOC,KAAKC,YAGd,MAGDhE,EAAVpL,UAAAuN,oBAAU,SAAoBD,GAE1B,GAAe,OAAXA,EAAiB,CACnB,IAAM+B,EAAqBlE,QAAQ,uBAAuBmC,EAAhE,OAA6EgC,WACvE,OAAQD,GAAiBA,EAAc/B,GAAW+B,EAAc/B,GAAU,KAE5E,MAAO,MAGDlC,EAAVpL,UAAA4L,eAAU,SAAenX,GACrB,IAAM8a,EAAmBhZ,KAAKsV,mBAAmBhT,KAAK,mBAAmB2W,OACxEjZ,KAAkB,cAAIA,KAAKiV,WAAWwD,SAAS,UAAYzY,KAAKiV,WAAWiE,YAAY,UACxFlZ,KAAK+U,SAAS7W,GAAK4Q,UAAW9O,KAAK8O,UAAWgE,WAAY9S,KAAKqX,cAAe1T,SAAUqV,GAAoB,OAGtGnE,EAAVpL,UAAA0P,KAAU,WACFnZ,KAAK0V,cAAmD,mBAA5B1V,KAAK0V,aAAa0D,OAChDpZ,KAAK0V,aAAa0D,SAIdvE,EAAVpL,UAAA4P,KAAU,WACFrZ,KAAK0V,cAAkD,mBAA3B1V,KAAK0V,aAAa4D,MAChDtZ,KAAK0V,aAAa4D,UAhOxB,mBADAvO,KAACC,EAAAA,kDAXDD,KAASE,EAAAA,oBCDT,IAAAsO,GAAA,WAqBE,SAAFA,EAAsB/P,GAAAxJ,KAAtBwJ,UAAsBA,SAKpB+P,EAAF9P,UAAAmC,KAAE,SAAKkJ,GAAL,IAAFxK,EAAAtK,KACIA,KAAK6L,KAAOiJ,EAAKjJ,KACjB7L,KAAK+U,SAAWD,EAAKC,SACrB/U,KAAK8O,UAAYgG,EAAKhG,UACtB9O,KAAK2D,SAAWmR,EAAKnR,SACrB3D,KAAK8S,WAAagC,EAAKhC,WACnB9S,KAAK6L,MAAwC,mBAAzB7L,KAAK6L,KAAKmJ,aAChChV,KAAK8L,YAAc9L,KAAK6L,KAAKmJ,cAK/BhV,KAAKiV,WAAajV,KAAKkV,mBAIvBlV,KAAKmV,gBAAgBC,MAAM,SAAClX,GAC1BoM,EAAK+K,eAAenX,KAEtB8B,KAAKsV,mBAAmBC,OAAO,SAACrX,GAC9BoM,EAAK+K,eAAenX,MAOxBqb,EAAF9P,UAAA+L,MAAE,SAAMC,QAAR,IAAAA,IAAQA,GAAR,GACQzV,KAAKiV,YAAcjV,KAAKsV,qBAC1BtV,KAAKsV,mBAAmB5E,IAAI,GAC5B1Q,KAAKmV,gBAAgBzE,IAAI,IACrB+E,GACFzV,KAAKiV,WAAWuE,QAAQ,WAQ9BD,EAAF9P,UAAAkM,QAAE,WACM3V,KAAKiV,aACPjV,KAAKiV,WAAWW,IAAI,SAASC,SAC7B7V,KAAKsV,mBAAmBM,IAAI,UAAUC,WAO1C0D,EAAF9P,UAAAqM,UAAE,SAAUC,GACJA,GACF/V,KAAKiV,WAAWvE,IAAIqF,IAQhBwD,EAAV9P,UAAAgQ,qBAAU,WAEN,MAAO,yDADczZ,KAAgB,YAAKA,KAAK8L,YAAY2L,0BAA4B,GAAM,IACjG,QAGU8B,EAAV9P,UAAAkO,8BAAU,WACN,IACIC,EAAoB,GAKxB,OANqB5X,KAAK6X,kBAEbhJ,QAAQ,SAACiJ,GACpBF,GAAqB,kBAAkBE,EAAOnU,SAApD,YAAwEmU,EAAOC,YAA/E,KAA+FD,EAAOnU,SAAtG,cAGW,gCAAgCiU,EAA3C,aAGU2B,EAAV9P,UAAAoO,gBAAU,WACN,IACI6B,KAEJ,OAHc1Z,KAAK8O,UAAU/D,MAAQ/K,KAAK8O,UAAU/D,KAAQ/K,KAAK8O,UAAU/D,KAAOrI,EAAU+B,QAI1F,KAAK/B,EAAU+B,OACbiV,IACI/V,SAAQ,GAAwBoU,YAAa/X,KAAKwJ,UAAUsB,QAAQ,cACpEnH,SAAQ,IAAyBoU,YAAa/X,KAAKwJ,UAAUsB,QAAQ,YACrEnH,SAAQ,KAA0BoU,YAAa/X,KAAKwJ,UAAUsB,QAAQ,iBACtEnH,SAAQ,KAA0BoU,YAAa/X,KAAKwJ,UAAUsB,QAAQ,eAM1E,MACF,QACE4O,IACI/V,SAAQ,GAAwBoU,YAAa/X,KAAKwJ,UAAUsB,QAAQ,cACpEnH,SAAQ,IAAyBoU,YAAa,KAC9CpU,SAAQ,IAAyBoU,YAAa,KAC9CpU,SAAQ,KAA0BoU,YAAa,KAC/CpU,SAAQ,IAAyBoU,YAAa,KAC9CpU,SAAQ,KAA0BoU,YAAa,KAC/CpU,SAAQ,KAA0BoU,YAAa,KAIvD,OAAO2B,GAMDH,EAAV9P,UAAAyL,iBAAU,WACN,IAAM8C,EAAahY,KAAK6L,KAAKoM,mBAAmBjY,KAAK8O,UAAUb,IAC/D3B,EAAE0L,GAAYE,QAGdlY,KAAKsV,mBAAqBhJ,EAAEtM,KAAK2X,iCACjC3X,KAAKmV,gBAAkB7I,EAAEtM,KAAKyZ,wBAC9B,IAAMtB,EAAsB7L,EAAE,gDACxB8L,EAAuB9L,EAAE,mCACzB+L,EAA2B/L,EAAE,kDAUnC+L,EAAyBC,OAAOtY,KAAKsV,oBACrC8C,EAAqBE,OAAOD,GAC5BD,EAAqBE,OAAOtY,KAAKmV,iBAGjCgD,EAAoBG,OAAOF,GAC3BD,EAAoBI,KAAK,KAAM,UAAUvY,KAAK8O,UAAUb,IAExD,IAAM6E,EAAyC,kBAApB9S,KAAK8S,WAA4B,GAAG9S,KAAK8S,WAAe9S,KAAK8S,WAkBxF,OAjBA9S,KAAKmV,gBAAgBzE,IAAIoC,GACzB9S,KAAKmV,gBAAgBqD,KAAK,WAAYxY,KAAK8O,UAAUb,IAEjDjO,KAAK2D,UACP3D,KAAKsV,mBAAmB5E,IAAI1Q,KAAK2D,UAI/B3D,KAAK8S,YACPqF,EAAoBM,SAAS,UAI3BN,GAA+D,mBAAjCA,EAAoBO,UACpDP,EAAoBO,SAASV,GAGxBG,GAGDoB,EAAV9P,UAAA4L,eAAU,SAAenX,GACrB,IAAM8a,EAAmBhZ,KAAKsV,mBAAmBhT,KAAK,mBAAmB2W,OACnElb,EAAQiC,KAAKmV,gBAAgBzE,MACnC,EAAU1Q,KAAKiV,WAAWwD,SAAS,UAAYzY,KAAKiV,WAAWiE,YAAY,UAC3ElZ,KAAK+U,SAAS7W,GAAK4Q,UAAW9O,KAAK8O,UAAWgE,WAAY/U,EAAO4F,SAAUqV,GAAoB,QA5LnG,mBASAjO,KAACC,EAAAA,kDARDD,KAASE,EAAAA,oBCIT,IAAA0O,GAAA,WAQE,SAAFA,KAiGA,OA5FEA,EAAFlQ,UAAAmC,KAAE,SAAKkJ,GAAL,IAAFxK,EAAAtK,KACIA,KAAK6L,KAAOiJ,EAAKjJ,KACjB7L,KAAK+U,SAAWD,EAAKC,SACrB/U,KAAK8O,UAAYgG,EAAKhG,UACtB9O,KAAK8S,WAAagC,EAAKhC,WACnB9S,KAAK6L,MAAwC,mBAAzB7L,KAAK6L,KAAKmJ,aAChChV,KAAK8L,YAAc9L,KAAK6L,KAAKmJ,cAI/B,IAAM4E,EAAiB5Z,KAAK6Z,0BAG5B7Z,KAAKiV,WAAajV,KAAKkV,iBAAiB0E,GAIxC5Z,KAAKiV,WAAWG,MAAM,SAAClX,GACpBA,GAAKA,EAAE4b,QAAU5b,EAAE4b,OAAO/b,MAASuM,EAAK2K,WAAWwD,SAAS,UAAYnO,EAAK2K,WAAWiE,YAAY,UACrG5O,EAAKyK,SAAS7W,GAAK4Q,UAAWxE,EAAKwE,eAOvC6K,EAAFlQ,UAAA+L,MAAE,SAAMC,QAAR,IAAAA,IAAQA,GAAR,GACQzV,KAAKiV,aACPjV,KAAKiV,WAAWvE,IAAI,IAChB+E,GACFzV,KAAKiV,WAAWuE,QAAQ,WAQ9BG,EAAFlQ,UAAAkM,QAAE,WACM3V,KAAKiV,YACPjV,KAAKiV,WAAWW,IAAI,SAASC,UAOjC8D,EAAFlQ,UAAAqM,UAAE,SAAUC,GACJA,GACF/V,KAAKiV,WAAWvE,IAAIqF,IAWhB4D,EAAVlQ,UAAAoQ,wBAAU,WAEN,MAAO,uEADc7Z,KAAgB,YAAKA,KAAK8L,YAAY2L,0BAA4B,GAAM,IACjG,MAOUkC,EAAVlQ,UAAAyL,iBAAU,SAAiB0E,GACvB,IAAM5B,EAAahY,KAAK6L,KAAKoM,mBAAmBjY,KAAK8O,UAAUb,IAC/D3B,EAAE0L,GAAYE,QAGd,IAAMjD,EAAa3I,EAAEsN,GACf9G,EAAyC,kBAApB9S,KAAK8S,WAA4B,GAAG9S,KAAK8S,WAAe9S,KAAK8S,WAexF,OAdAmC,EAAWvE,IAAIoC,GACfmC,EAAWsD,KAAK,KAAM,UAAUvY,KAAK8O,UAAUb,IAC/CgH,EAAWuD,KAAK,WAAYxY,KAAK8O,UAAUb,IAGvCjO,KAAK8S,YACPmC,EAAWwD,SAAS,UAIlBxD,GAA6C,mBAAxBA,EAAWyD,UAClCzD,EAAWyD,SAASV,GAGf/C,GAEX0E,EAzGA,GCLAI,GAAA,WAkCE,SAAFA,EAAsBC,EAA8CxQ,GAAlE,IAAFc,EAAAtK,KAAsBA,KAAtBga,kBAAsBA,EAA8Cha,KAApEwJ,UAAoEA,EARpExJ,KAAAia,UAAa,EAGbja,KAAAoK,sBAAyB,EAOrBpK,KAAKka,gBACHC,UAAW,OACXpS,QAAQ,EACRqS,UAAW,IACXC,UAAU,EACVC,UAAU,EACVC,cAAeva,KAAKwJ,UAAUsB,QAAQ,mBACtC0P,YAAaxa,KAAKwJ,UAAUsB,QAAQ,gBACpC2P,cAAeza,KAAKwJ,UAAUsB,QAAQ,cACtC4P,oBAAqB,GAAI,IAIzBC,QAAS,WACP,IAAMC,EAAgBtQ,EAAK2K,WAAWhQ,eAAe,cACjDkI,MAAMC,QAAQwN,IAAkBA,EAAcpb,OAAS,GACzD8K,EAAK2P,UAAW,EAChB3P,EAAK2K,WAAWwD,SAAS,UAAUoC,SAAS,sBAAsBpC,SAAS,YAE3EnO,EAAK2P,UAAW,EAChB3P,EAAK2K,WAAWiE,YAAY,UAAU2B,SAAS,sBAAsB3B,YAAY,WAEnF5O,EAAKyK,SAAS3G,WAAaU,UAAWxE,EAAKwE,UAAWnL,SAAU,KAAMgQ,YAAaiH,aAQzFb,EAAFtQ,UAAAmC,KAAE,SAAKkJ,GAMH,GALA9U,KAAK6L,KAAOiJ,EAAKjJ,KACjB7L,KAAK+U,SAAWD,EAAKC,SACrB/U,KAAK8O,UAAYgG,EAAKhG,UACtB9O,KAAK2T,YAAcmB,EAAKnB,kBAEnB3T,KAAK6L,MAAS7L,KAAK8O,WAAc9O,KAAK8O,UAAU/G,QAAW/H,KAAK8O,UAAU/G,OAAO4B,YACpF,MAAM,IAAI1H,MAAM,6UAGlBjC,KAAKoK,qBAAuBpK,KAAK8O,UAAU/G,OAAOqC,qBAClDpK,KAAK8a,UAAa9a,KAAK8O,UAAU/G,OAAsB,gBAAI/H,KAAK8O,UAAU/G,OAAOgT,gBAAgB3b,MAAQ,QACzGY,KAAKgb,UAAahb,KAAK8O,UAAU/G,OAAsB,gBAAI/H,KAAK8O,UAAU/G,OAAOgT,gBAAgBhd,MAAQ,QAEzG,IAAIkd,EAAgBjb,KAAK8O,UAAU/G,OAAO4B,eAI1C,GAHA3J,KAAK8L,YAAc9L,KAAK6L,KAAKmJ,aAGzBhV,KAAK8L,YAAY6M,QAAU3Y,KAAK8O,UAAU/G,OAAOmT,mBAAoB,CACvE,IAAMtR,EAAW5J,KAAK8O,UAAU/G,OAAOmT,mBACvCD,EAAgBjb,KAAKga,kBAAkBtQ,iBAAiBuR,EAAerR,GAIzE,GAAI5J,KAAK8L,YAAY6M,QAAU3Y,KAAK8O,UAAU/G,OAAOoT,iBAAkB,CACrE,IAAMhR,EAASnK,KAAK8O,UAAU/G,OAAOoT,iBACrCF,EAAgBjb,KAAKga,kBAAkB9P,eAAe+Q,EAAe9Q,EAAQnK,KAAKoK,sBAIpF,IAAMwP,EAAiB5Z,KAAK6Z,wBAAwBoB,GAIpDjb,KAAKkV,iBAAiB0E,IAMxBG,EAAFtQ,UAAA+L,MAAE,SAAM4F,QAAR,IAAAA,IAAQA,GAAR,GACQpb,KAAKiV,YAAcjV,KAAKiV,WAAWhQ,iBAGrCjF,KAAKiV,WAAWhQ,eAAe,iBAE3BmW,IACFpb,KAAKiV,WAAWiE,YAAY,UAC5BlZ,KAAK+U,SAAS3G,WAAaU,UAAW9O,KAAK8O,UAAWnL,SAAU,KAAMgQ,oBAQ5EoG,EAAFtQ,UAAAkM,QAAE,WACM3V,KAAKiV,YACPjV,KAAKiV,WAAWW,MAAMC,UAO1BkE,EAAFtQ,UAAAqM,UAAE,SAAUC,GACJA,GACF/V,KAAKiV,WAAWhQ,eAAe,aAAc8Q,IAWzCgE,EAAVtQ,UAAAoQ,wBAAU,SAAwBwB,GAAxB,IAAV/Q,EAAAtK,KACQoM,EAAU,GAkBd,OAjBAiP,EAAiBxM,QAAQ,SAACiJ,GACxB,IAAKA,GAAWA,EAAOxN,EAAKwQ,aAAe1M,WAAa0J,EAAOwD,WAAalN,UAC1E,MAAM,IAAInM,MAAM,wNAElB,IAAMqZ,EAAYxD,EAAOwD,UAAYxD,EAAOxN,EAAKwQ,WAC3CS,EAAYjR,EAAKkR,uBAAuB1D,EAAOxN,EAAK0Q,aAAe,EAAK,WAAa,GACrFS,GAAc3D,EAAOwD,UAAYhR,EAAKF,uBAAyBE,EAAKd,WAA+C,mBAA3Bc,EAAKd,UAAUsB,QAA0BR,EAAKd,UAAUsB,QAAQwQ,GAAY,KAAOA,EAGjLlP,GAAW,kBAAkB0L,EAAOxN,EAAK0Q,WAA/C,KAA8DO,EAA9D,IAA0EE,EAA1E,YAGUF,IACFjR,EAAK2P,UAAW,KAIb,+DAA+D7N,EAA1E,aAQU2N,EAAVtQ,UAAAyL,iBAAU,SAAiB0E,GACvB,IAAM5B,EAAahY,KAAK6L,KAAKoM,mBAAmBjY,KAAK8O,UAAUb,IAK/D,GAJA3B,EAAE0L,GAAYE,QAGdlY,KAAKiV,WAAa3I,EAAEsN,GAC0B,mBAAnC5Z,KAAKiV,WAAWhQ,eACzB,MAAM,IAAIhD,MAAM,wMAElBjC,KAAKiV,WAAWsD,KAAK,KAAM,UAAUvY,KAAK8O,UAAUb,IACpDjO,KAAKiV,WAAWuD,KAAK,WAAYxY,KAAK8O,UAAUb,IAG5CjO,KAAKia,UACPja,KAAKiV,WAAWwD,SAAS,UAIvBzY,KAAKiV,YAAkD,mBAA7BjV,KAAKiV,WAAWyD,UAC5C1Y,KAAKiV,WAAWyD,SAASV,GAI3B,IAAM5L,EAAVsP,OAAAC,UAA+C3b,KAAKka,eAAmBla,KAAK8O,UAAU/G,OAAO6T,eACzF5b,KAAKiV,WAAajV,KAAKiV,WAAWhQ,eAAemH,IAG3C2N,EAAVtQ,UAAA+R,uBAAU,SAAuBzd,GAC7B,GAAIiC,KAAK2T,aAAexG,MAAMC,QAAQpN,KAAK2T,aACzC,IAAK,IAAIvT,EAAI,EAAGA,EAAIJ,KAAK2T,YAAYnU,OAAQY,IAC3C,GAAIJ,KAAK2T,YAAYvT,IAAMJ,KAAK2T,YAAYvT,KAAOrC,EACjD,OAAOqC,EAIb,OAAQ,KA9MZ,mBAiBA2K,KAACC,EAAAA,kDAfDD,KAASxB,KADTwB,KAASE,EAAAA,oBCKT,IAAA4Q,GAAA,WAOE,SAAFA,EAAsBrS,GAAAxJ,KAAtBwJ,UAAsBA,EAyGtB,OApGEqS,EAAFpS,UAAAmC,KAAE,SAAKkJ,GAAL,IAAFxK,EAAAtK,KACIA,KAAK6L,KAAOiJ,EAAKjJ,KACjB7L,KAAK+U,SAAWD,EAAKC,SACrB/U,KAAK8O,UAAYgG,EAAKhG,UACtB9O,KAAK8S,WAAagC,EAAKhC,WAGvB,IAAM8G,EAAiB5Z,KAAK6Z,0BAG5B7Z,KAAKiV,WAAajV,KAAKkV,iBAAiB0E,GAIxC5Z,KAAKiV,WAAWM,OAAO,SAACrX,GACrBA,GAAKA,EAAE4b,QAAU5b,EAAE4b,OAAO/b,MAASuM,EAAK2K,WAAWwD,SAAS,UAAYnO,EAAK2K,WAAWiE,YAAY,UACrG5O,EAAKyK,SAAS7W,GAAK4Q,UAAWxE,EAAKwE,UAAWnL,SAAU,UAO5DkY,EAAFpS,UAAA+L,MAAE,SAAM4F,QAAR,IAAAA,IAAQA,GAAR,GACQpb,KAAKiV,aACPjV,KAAKiV,WAAWvE,IAAI,IAChB0K,GACFpb,KAAKiV,WAAWuE,QAAQ,YAQ9BqC,EAAFpS,UAAAkM,QAAE,WACM3V,KAAKiV,YACPjV,KAAKiV,WAAWW,IAAI,UAAUC,UAOlCgG,EAAFpS,UAAAqM,UAAE,SAAUC,GACJA,GACF/V,KAAKiV,WAAWvE,IAAIqF,IAQhB8F,EAAVpS,UAAAoQ,wBAAU,WAAA,IAAVvP,EAAAtK,KACI,IAAKA,KAAK8O,YAAc9O,KAAK8O,UAAU/G,SAAY/H,KAAK8O,UAAU/G,OAAO4B,aAAe3J,KAAK8O,UAAU/G,OAAO+T,cAC5G,MAAM,IAAI7Z,MAAM,8TAEbjC,KAAK8O,UAAU/G,OAAO4B,YAAc3J,KAAK8O,UAAU/G,OAAO+T,eAC7DC,QAAQC,KAAK,6NAGf,IAAMX,EAAmBrb,KAAK8O,UAAU/G,OAAO4B,YAAc3J,KAAK8O,UAAU/G,OAAO+T,kBAC7EhB,EAAa9a,KAAK8O,UAAU/G,OAAsB,gBAAI/H,KAAK8O,UAAU/G,OAAOgT,gBAAgB3b,MAAQ,QACpG4b,EAAahb,KAAK8O,UAAU/G,OAAsB,gBAAI/H,KAAK8O,UAAU/G,OAAOgT,gBAAgBhd,MAAQ,QAEtGqO,EAAU,GASd,OARAiP,EAAiBxM,QAAQ,SAACiJ,GACxB,IAAKA,GAAWA,EAAOgD,KAAe1M,WAAa0J,EAAOwD,WAAalN,UACrE,MAAM,IAAInM,MAAM,gNAElB,IAAMqZ,EAAWxD,EAAOwD,UAAYxD,EAAOgD,GACrCW,GAAc3D,EAAOwD,UAAYhR,EAAKwE,UAAU/G,OAAOqC,uBAAyBE,EAAKd,WAA+C,mBAA3Bc,EAAKd,UAAUsB,QAA0BR,EAAKd,UAAUsB,QAAQwQ,GAAY,KAAOA,EAClMlP,GAAW,kBAAkB0L,EAAOkD,GAA1C,KAAyDS,EAAzD,cAEW,8CAA8CrP,EAAzD,aAOUyP,EAAVpS,UAAAyL,iBAAU,SAAiB0E,GACvB,IAAM5B,EAAahY,KAAK6L,KAAKoM,mBAAmBjY,KAAK8O,UAAUb,IAC/D3B,EAAE0L,GAAYE,QAGd,IAAMjD,EAAa3I,EAAEsN,GACf9G,EAAyC,kBAApB9S,KAAK8S,WAA4B,GAAG9S,KAAK8S,WAAe9S,KAAK8S,WAUxF,OATAmC,EAAWvE,IAAIoC,GACfmC,EAAWsD,KAAK,KAAM,UAAUvY,KAAK8O,UAAUb,IAC/CgH,EAAWuD,KAAK,WAAYxY,KAAK8O,UAAUb,IAGvCgH,GAA6C,mBAAxBA,EAAWyD,UAClCzD,EAAWyD,SAASV,GAGf/C,GAEX4G,EAhHA,GCNAI,GAAA,WA+BE,SAAFA,EAAsBjC,EAA8CxQ,GAAlE,IAAFc,EAAAtK,KAAsBA,KAAtBga,kBAAsBA,EAA8Cha,KAApEwJ,UAAoEA,EALpExJ,KAAAia,UAAa,EAGbja,KAAAoK,sBAAyB,EAIrBpK,KAAKka,gBACHC,UAAW,OACXpS,QAAQ,EACRqS,UAAW,IACX8B,QAAQ,EACRvB,QAAS,WACP,IAAMC,EAAgBtQ,EAAK2K,WAAWhQ,eAAe,cACjDkX,EAAe,GAEfhP,MAAMC,QAAQwN,IAAkBA,EAAcpb,OAAS,GACzD2c,EAAevB,EAAc,GAC7BtQ,EAAK2P,UAAW,EAChB3P,EAAK2K,WAAWwD,SAAS,UAAUoC,SAAS,sBAAsBpC,SAAS,YAE3EnO,EAAK2P,UAAW,EAChB3P,EAAK2K,WAAWiE,YAAY,UAAU2B,SAAS,sBAAsB3B,YAAY,WAEnF5O,EAAKyK,SAAS3G,WAAaU,UAAWxE,EAAKwE,UAAWnL,SAAU,KAAMmP,WAAYqJ,aAQxFF,EAAFxS,UAAAmC,KAAE,SAAKkJ,GAMH,GALA9U,KAAK6L,KAAOiJ,EAAKjJ,KACjB7L,KAAK+U,SAAWD,EAAKC,SACrB/U,KAAK8O,UAAYgG,EAAKhG,UACtB9O,KAAK8S,WAAagC,EAAKhC,aAElB9S,KAAK6L,MAAS7L,KAAK8O,WAAc9O,KAAK8O,UAAU/G,QAAW/H,KAAK8O,UAAU/G,OAAO4B,YACpF,MAAM,IAAI1H,MAAM,6UAGlBjC,KAAKoK,qBAAuBpK,KAAK8O,UAAU/G,OAAOqC,qBAClDpK,KAAK8a,UAAa9a,KAAK8O,UAAU/G,OAAsB,gBAAI/H,KAAK8O,UAAU/G,OAAOgT,gBAAgB3b,MAAQ,QACzGY,KAAKgb,UAAahb,KAAK8O,UAAU/G,OAAsB,gBAAI/H,KAAK8O,UAAU/G,OAAOgT,gBAAgBhd,MAAQ,QAEzG,IAAIkd,EAAgBjb,KAAK8O,UAAU/G,OAAO4B,eAI1C,GAHA3J,KAAK8L,YAAc9L,KAAK6L,KAAKmJ,aAGzBhV,KAAK8L,YAAY6M,QAAU3Y,KAAK8O,UAAU/G,OAAOmT,mBAAoB,CACvE,IAAMtR,EAAW5J,KAAK8O,UAAU/G,OAAOmT,mBACvCD,EAAgBjb,KAAKga,kBAAkBtQ,iBAAiBuR,EAAerR,GAIzE,GAAI5J,KAAK8L,YAAY6M,QAAU3Y,KAAK8O,UAAU/G,OAAOoT,iBAAkB,CACrE,IAAMhR,EAASnK,KAAK8O,UAAU/G,OAAOoT,iBACrCF,EAAgBjb,KAAKga,kBAAkB9P,eAAe+Q,EAAe9Q,EAAQnK,KAAKoK,sBAIpF,IAAMwP,EAAiB5Z,KAAK6Z,wBAAwBoB,OAGpDjb,KAAKkV,iBAAiB0E,IAMxBqC,EAAFxS,UAAA+L,MAAE,SAAM4F,QAAR,IAAAA,IAAQA,GAAR,GACQpb,KAAKiV,YAAcjV,KAAKiV,WAAWhQ,iBAGrCjF,KAAKiV,WAAWhQ,eAAe,iBAE3BmW,GACFpb,KAAK+U,SAAS3G,WAAaU,UAAW9O,KAAK8O,UAAWnL,SAAU,KAAMmP,WAAY1E,cAQxF6N,EAAFxS,UAAAkM,QAAE,WACM3V,KAAKiV,YACPjV,KAAKiV,WAAWW,MAAMC,UAO1BoG,EAAFxS,UAAAqM,UAAE,SAAUC,GACJA,IACFA,EAAS5I,MAAMC,QAAQ2I,GAAUA,GAAUA,GAC3C/V,KAAKiV,WAAWhQ,eAAe,aAAc8Q,KAWzCkG,EAAVxS,UAAAoQ,wBAAU,SAAwBwB,GAAxB,IAAV/Q,EAAAtK,KACQoM,EAAU,GAmBd,OAlBAiP,EAAiBxM,QAAQ,SAACiJ,GACxB,IAAKA,GAAWA,EAAOxN,EAAKwQ,aAAe1M,WAAa0J,EAAOwD,WAAalN,UAC1E,MAAM,IAAInM,MAAM,sNAGlB,IAAMqZ,EAAYxD,EAAOwD,UAAYxD,EAAOxN,EAAKwQ,WAC3CS,EAAYzD,EAAOxN,EAAK0Q,aAAe1Q,EAAKwI,WAAc,WAAa,GACvE2I,GAAc3D,EAAOwD,UAAYhR,EAAKwE,UAAU/G,OAAOqC,uBAAyBE,EAAKd,WAA+C,mBAA3Bc,EAAKd,UAAUsB,QAA0BR,EAAKd,UAAUsB,QAAQwQ,GAAY,KAAOA,EAGlMlP,GAAW,kBAAkB0L,EAAOxN,EAAK0Q,WAA/C,KAA8DO,EAA9D,IAA0EE,EAA1E,YAGUF,IACFjR,EAAK2P,UAAW,KAIb,2CAA2C7N,EAAtD,aAQU6P,EAAVxS,UAAAyL,iBAAU,SAAiB0E,GACvB,IAAM5B,EAAahY,KAAK6L,KAAKoM,mBAAmBjY,KAAK8O,UAAUb,IAK/D,GAJA3B,EAAE0L,GAAYE,QAGdlY,KAAKiV,WAAa3I,EAAEsN,GAC0B,mBAAnC5Z,KAAKiV,WAAWhQ,eACzB,MAAM,IAAIhD,MAAM,wMAElBjC,KAAKiV,WAAWsD,KAAK,KAAM,UAAUvY,KAAK8O,UAAUb,IACpDjO,KAAKiV,WAAWuD,KAAK,WAAYxY,KAAK8O,UAAUb,IAG5CjO,KAAKiV,YAAkD,mBAA7BjV,KAAKiV,WAAWyD,UAC5C1Y,KAAKiV,WAAWyD,SAASV,GAI3B,IAAM5L,EAAVsP,OAAAC,UAA+C3b,KAAKka,eAAmBla,KAAK8O,UAAU/G,OAAO6T,eACzF5b,KAAKiV,WAAajV,KAAKiV,WAAWhQ,eAAemH,MAtLrD,mBAiBArB,KAACC,EAAAA,kDAfDD,KAASxB,KAFTwB,KAASE,EAAAA,oBCCT,IAOamR,IAEXrb,MAAO4Y,GAGP1U,eAAgB8U,GAGhB7U,aAAc+W,GAGdI,OAAQR,GAGRS,aAAczH,GAGd0H,cAAehD,ICIjBiD,GAAA,WAYE,SAAFA,EAAsBxC,EAA8CxQ,GAA9CxJ,KAAtBga,kBAAsBA,EAA8Cha,KAApEwJ,UAAoEA,EAXpExJ,KAAAyc,cAA0B,IAAIhO,MAAMiO,aAEpC1c,KAAA2c,YACA3c,KAAA4c,kBAKA5c,KAAA6c,eAA0B,EAC1B7c,KAAA8c,gBAAoB,IAAIC,EAAAA,eAItBP,EAAF/S,UAAAmC,KAAE,SAAKC,EAAWC,EAAyBkR,GACvChd,KAAKgM,MAAQH,EACb7L,KAAKiM,aAAeH,GAQtB0Q,EAAF/S,UAAAwT,sBAAE,SAAsBpR,EAAWO,GAAjC,IAAF9B,EAAAtK,KACIA,KAAK2c,YACL3c,KAAKkd,iBAAmB,IAAIzO,MAAM0O,MAGlCnd,KAAKkd,iBAAiBE,UAAUpd,KAAKqd,+BAA+BC,KAAKtd,OAGzEA,KAAKyc,cAAcW,UAAUvR,EAAK0R,wBAAyB,SAACrf,EAAU4W,GACpExK,EAAKkT,6BAA6B1I,MAIhC0H,EAAR/S,UAAA4T,+BAAQ,SAA+BI,EAAc3I,yGACjD,IAAKA,IAASA,EAAKjJ,KACjB,MAAM,IAAI5J,MAAM,0JAKlB,GAHM6J,EAA0BgJ,EAAKjJ,KAAKmJ,mBAEpC0I,EAAa5R,EAAY6R,mBAAqB7R,EAAY8R,qBAC5CF,EAAWG,UAAYH,EAAWI,QACpD,MAAM,IAAI7b,MAAM,oFASJ,OALVyb,EAAWK,YACbL,EAAWK,cAIjB,EAAwBL,EAAWI,QAAQhB,gBAAgBW,EAAO3I,WAQxC,OARhBkJ,EAAQC,EAAlBte,OAGIK,KAAKke,kBAAkB,UAIjBC,EAAsBT,EAAWG,QAAQG,IACnD,EAAgCtc,EAAcyc,kBAApCC,EAAgBH,EAA1Bte,SAGyB+d,EAAWW,qBAC9BX,EAAWW,oBAAoBD,GAI7BV,EAAWY,cAAgBlQ,WAC7BsP,EAAWY,YAAYF,aAU3B5B,EAAF/S,UAAA8U,oBAAE,SAAoB1S,EAAWO,EAAqBL,GAApD,IAAFzB,EAAAtK,KACIA,KAAK2c,YACL3c,KAAKkM,UAAYH,EACjB/L,KAAKkd,iBAAmB,IAAIzO,MAAM0O,MAElCpR,EAASyS,eAAgBC,cAAeze,KAAK4c,eAAgB/Q,KAAM7L,KAAKgM,QACxED,EAAS2S,UAAU1e,KAAK2e,kBAAkBrB,KAAKtd,KAAM+L,IAErD/L,KAAKkd,iBAAiBE,UAAU,SAAClf,EAAQ4W,GAEvB,MADCA,EAAK8J,UAEpB7S,EAAS8S,UAEXvU,EAAK4T,kBAAkB,WAIzBle,KAAKyc,cAAcW,UAAUvR,EAAK0R,wBAAyB,SAACrf,EAAU4W,GACpExK,EAAKkT,6BAA6B1I,MAKtC0H,EAAF/S,UAAAqV,aAAE,WACE9e,KAAK2c,SAAS9N,QAAQ,SAAC9G,EAAQgX,GACzBhX,GAAUA,EAAOyN,OAEnBzN,EAAOyN,OAAM,KAMjB,IAAK,IAAMoJ,KAAY5e,KAAK4c,eACtBgC,GAAY5e,KAAK4c,eAAegC,WAC3B5e,KAAK4c,eAAegC,GAK3B5e,KAAKkM,YACPlM,KAAKkM,UAAU2S,UACf7e,KAAKgM,MAAMgT,aACXhf,KAAKgM,MAAMiT,WAIfzC,EAAF/S,UAAAkV,kBAAE,SAAkB5S,EAAe9B,EAAW6K,OAC1C,IAAuB,IAAAmJ,EAAAiB,EAAAxD,OAAOyD,KAAKrK,EAAK2J,gBAA5CW,EAAAnB,EAAAhgB,QAAAmhB,EAAA/gB,KAAA+gB,EAAAnB,EAAAhgB,OAAA,CAAS,IAAM2gB,EAAfQ,EAAArhB,MACYshB,EAAevK,EAAK2J,cAAcG,GAClCU,EAAcxK,EAAKjJ,KAAK0T,eAAeX,GACvC9P,EAAYgG,EAAKjJ,KAAKgB,aAAayS,GACzC,IAAKxQ,EACH,OAAO,EAET,IAAMtM,EAAYsM,EAAU/D,MAAQrI,EAAU+B,OACxC0O,EAAoBrE,EAA0B,iBAAIA,EAAUqE,iBAAmB,KAEjFN,EAAY5I,EAAK6E,EAAU0Q,YAAc1Q,EAAU2Q,kBAAoB3Q,EAAUO,OAC/EsE,EAAe0L,GAAgBA,EAAa1L,YAAe0L,EAAa1L,YAAc,KACxF+L,GAAoBL,GAAiBA,EAAavM,aAAe1E,WAAyC,OAA5BiR,EAAavM,WAAkD1E,UAA1BiR,EAAavM,gBAEpG,IAArB4M,IACTA,EAAmB,IAIrB,IAAMC,GAFND,EAAmB,GAAKA,GAESze,MAAM,yCACnC0C,EAAW0b,EAAa1b,WAAa,EAAYgc,EAAQ,GAAK,IAC5D7M,EAAgB6M,EAAWA,EAAQ,GAAK,GACxCC,EAAmBD,EAAWA,EAAQ,GAAmB,OAAbhc,EAAoB,IAAM,GAExEgQ,GAAeA,EAAYnU,OAAS,EACtCkgB,EAAmB/L,EAAYpG,KAAK,KACC,iBAArBmS,IAEhBA,EAAmBA,EAAiB1e,QAAQ,IAAK,MAChC,MAAb2C,GAAiC,OAAbA,GAAkC,OAAbA,GAAuC,MAAlBic,IAChEjc,EAAyB,MAAbA,GAAiC,OAAbA,EAAqBC,GAAaO,SAAWP,GAAaM,aAM9F,IAAMa,EAAc+J,EAAU/G,QAAU+G,EAAU/G,OAAOgD,KAAQ+D,EAAU/G,OAAOgD,KAAO/F,GAAWjE,MACpG,IAAK4C,GAAYoB,IAAeC,GAAW6a,OACzC,OAAQ9a,GACN,KAAKC,GAAWqX,OAChB,KAAKrX,GAAWC,eACdtB,EAAW,KACX,MACF,KAAKqB,GAAWE,aACdvB,EAAW,KACX,MACF,QACEA,EAAWA,EAMjB,GAAmB,KAAfmP,IAAsBa,EACxB,OAAO,EAKT,GAAIA,GAAexG,MAAMC,QAAQuG,GAC/B,IAAK,IAAInD,EAAI,EAAGb,EAAKgE,EAAYnU,OAAQgR,EAAIb,EAAIa,IAE/CmD,EAAYnD,IAAOmD,EAAYnD,KAAOpC,WAAgC,OAAnBuF,EAAYnD,GAAe,GAAKmD,EAAYnD,IAAM,GAKzG,GAAI1B,GAAaA,EAAU6J,QAAU7J,EAAU6J,OAAOmH,0BAA2B,CAC/E,IAAMC,EAAYhU,GAA2C,mBAAxBA,EAASiU,WAA6BjU,EAASiU,WAAW/V,EAAKgE,IAAM,EAC1G4E,EAAY/D,EAAUmB,UAAU8P,EAAUT,EAAazM,EAAW/D,EAAW7E,EAAMjK,KAAKgM,OAIjE,iBAAd6G,IACTA,EAAYA,EAAU/M,YAaxB,IAAKmO,GAAiBF,wBATpBvR,UAARA,EACQmR,YAARA,EACQb,WAARA,EACQD,UAARA,EACQlP,SAARA,EACQmQ,kBAAmB8L,EACnBzM,iBAARA,IAIQ,OAAO,uGAIX,OAAO,WAGTqJ,EAAF/S,UAAAwW,QAAE,WACEjgB,KAAKkgB,uBAGLlgB,KAAKyc,cAAc0D,iBAGfngB,KAAKkd,kBAAiE,mBAAtCld,KAAKkd,iBAAiBkD,aACxDpgB,KAAKkd,iBAAiBkD,eAO1B5D,EAAF/S,UAAAyW,qBAAE,WAGE,IAAK,IAAMtB,KAAY5e,KAAK4c,eACtBgC,GAAY5e,KAAK4c,eAAegC,WAC3B5e,KAAK4c,eAAegC,GAK/B5e,KAAK2c,SAAS9N,QAAQ,SAAC9G,EAAQgX,GACzBhX,GAAUA,EAAO4N,SACnB5N,EAAO4N,SAAQ,MAKrB6G,EAAF/S,UAAA4W,iBAAE,WACE,OAAOrgB,KAAK4c,gBAGdJ,EAAF/S,UAAA6W,uBAAE,WACE,IAAMC,KACN,GAAIvgB,KAAK4c,mBACP,IAAoB,IAAAqB,EAAAiB,EAAAxD,OAAOyD,KAAKnf,KAAK4c,iBAA3CwC,EAAAnB,EAAAhgB,QAAAmhB,EAAA/gB,KAAA+gB,EAAAnB,EAAAhgB,OAAA,CAAW,IAAMuiB,EAAjBpB,EAAArhB,MACcshB,EAAerf,KAAK4c,eAAe4D,GAEnCzY,GADYsX,EAAavQ,WACd8P,SAAU4B,GAAS,KAEhCnB,GAAgBA,EAAa1L,YAC/B5L,EAAO4L,YAAc0L,EAAa1L,YAElC5L,EAAO+K,YAAcuM,GAAiBA,EAAavM,aAAe1E,WAAyC,OAA5BiR,EAAavM,WAAkD1E,UAA1BiR,EAAavM,WAE/HuM,EAAa1b,WACfoE,EAAOpE,SAAW0b,EAAa1b,UAEjC4c,EAAe9gB,KAAKsI,wGAGxB,OAAOwY,WAGT/D,EAAF/S,UAAAgX,oBAAE,SAAoBviB,EAAsB4W,GACxC,GAAIA,EAAM,CACR,IAAMhC,EAAagC,EAAKhC,WAAagC,EAAKhC,WAAe5U,GAAKA,EAAE4b,OAAW5b,EAA4B,OAAEH,MAAQqQ,UAC3GuF,EAAemB,EAAKnB,aAAexG,MAAMC,QAAQ0H,EAAKnB,aAAgBmB,EAAKnB,YAAcvF,UACzFU,EAAYgG,EAAKhG,WAAa,KAC9B8P,EAAW9P,EAAaA,EAAUb,IAAM,GAAM,GAC9CtK,EAAWmR,EAAKnR,UAAYyK,UAElC,GAAK0E,GAAgBa,KAAgBxG,MAAMC,QAAQuG,IAAuC,IAAvBA,EAAYnU,QAIxE,CACL,IAAMghB,EAAQ,GAAK5B,EACb8B,GACJ9B,SAAU4B,EACV1R,UAAVA,EACUgE,WAAVA,EACUa,YAAVA,GAEYhQ,IACF+c,EAAU/c,SAAWA,GAEvB3D,KAAK4c,eAAe4D,GAASE,cAZtB1gB,KAAK4c,eAAegC,GAe7B5e,KAAK2gB,aAAa3gB,KAAKkd,kBACrB0B,SAARA,EACQ9P,UAAWgG,EAAKhG,WAAa,KAC7B2P,cAAeze,KAAK4c,eACpBjZ,SAARA,EACQmP,WAARA,EACQa,YAARA,EACQiN,eAAgB5gB,KAAK6gB,wBACrBhV,KAAM7L,KAAKgM,OACV9N,KAIPse,EAAF/S,UAAA+T,6BAAE,SAA6B1I,GAC3B,IAAMhG,EAAYgG,EAAKgM,OACjBlC,EAAW9P,EAAUb,IAAM,GAEjC,GAAIa,GAA0B,aAAb8P,GAA2B9P,EAAUiS,WAAY,CAChE,IAAIpN,OAAV,EACUb,OAAV,EACUnP,OAAV,EAEU3D,KAAK4c,eAAe9N,EAAUb,KAChC6E,EAAa9S,KAAK4c,eAAe9N,EAAUb,IAAI6E,YAAc1E,UAC7DuF,EAAc3T,KAAK4c,eAAe9N,EAAUb,IAAI0F,aAAevF,UAC/DzK,EAAW3D,KAAK4c,eAAe9N,EAAUb,IAAItK,UAAYyK,WAChDU,EAAU/G,SAGnB4L,EAAc7E,EAAU/G,OAAO4L,aAAevF,UAC9C0E,EAAahE,EAAU/G,OAAO+K,YAAc1E,UAC5CzK,EAAWmL,EAAU/G,OAAOpE,UAAYyK,UACxCpO,KAAKghB,oBAAoBlO,EAAYa,EAAa7E,IAGpD,IAAMmS,GACJpV,KAAM7L,KAAKgM,MACXrI,SAARA,EACQmP,WAARA,EACQa,YAARA,EACQ7E,UAARA,EACQiG,SAAU/U,KAAKygB,oBAAoBnD,KAAKtd,OAKtC+E,EAAc+J,EAAU/G,QAAU+G,EAAU/G,OAAOgD,KAAQ+D,EAAU/G,OAAOgD,KAAO/F,GAAWjE,MAC7FgE,IACHA,EAAa/E,KAAKiM,aAAaiV,mBAGjC,IAAIC,EACJ,OAAQpc,GACN,KAAKC,GAAW6a,OACV/Q,GAAaA,EAAU/G,QAAU+G,EAAU/G,OAAOqZ,eACpDD,EAASrS,EAAU/G,OAAOqZ,cAE5B,MACF,KAAKpc,GAAWqX,OACd8E,EAAS,IAAI/E,GAAQC,OAAOrc,KAAKwJ,WACjC,MACF,KAAKxE,GAAWC,eACdkc,EAAS,IAAI/E,GAAQnX,eAAejF,KAAKga,kBAAmBha,KAAKwJ,WACjE,MACF,KAAKxE,GAAWE,aACdic,EAAS,IAAI/E,GAAQlX,aAAalF,KAAKga,kBAAmBha,KAAKwJ,WAC/D,MACF,KAAKxE,GAAWsX,aACd6E,EAAS,IAAI/E,GAAQE,aAAatc,KAAKwJ,WACvC,MACF,KAAKxE,GAAWuX,cACd4E,EAAS,IAAI/E,GAAQG,cAAcvc,KAAKwJ,WACxC,MACF,KAAKxE,GAAWjE,MAChB,QACEogB,EAAS,IAAI/E,GAAQrb,MAIzB,GAAIogB,EAAQ,CACVA,EAAOvV,KAAKqV,GACZ,IAAMI,EAAmBrhB,KAAK2c,SAAS2E,UAAU,SAACC,GAAS,OAAAJ,EAAOrS,UAAUG,OAASsS,EAAKzS,UAAUG,QAG1E,IAAtBoS,EACFrhB,KAAK2c,SAASld,KAAK0hB,GAEnBnhB,KAAK2c,SAAS0E,GAAoBF,GAK/BrO,GAAca,IAAgBwN,EAAOrL,WACxCqL,EAAOrL,UAAUhD,GAAca,MAWvC6I,EAAF/S,UAAAyU,kBAAE,SAAkBsD,GAChB,GAAe,WAAXA,GAAuBxhB,KAAKiM,cAAgBjM,KAAKiM,aAAa0R,kBAAmB,CACnF,IAAI4C,KACEkB,EAAiBzhB,KAAKiM,aAAa0R,kBAAkBG,QACvD2D,GAAkBA,EAAeC,oBACnCnB,EAAiBkB,EAAeC,qBAElC1hB,KAAK8c,gBAAgB7e,KAAKsiB,OACN,UAAXiB,GACTxhB,KAAK8c,gBAAgB7e,KAAK+B,KAAKsgB,2BAYnC9D,EAAF/S,UAAAkY,gCAAE,SAAgC7V,EAAyBkR,GACvD,GAAIlR,EAAY8V,SAAW9V,EAAY8V,QAAQC,QAAS,CACtD,IAAMC,EAAUhW,EAAY8V,QAAQC,QACpC7E,EAAkBnO,QAAQ,SAACC,GACzB,IAAMiT,EAAeD,EAAQxf,KAAK,SAAC0f,GACjC,OAAOA,EAAapD,WAAa9P,EAAUb,KAEzC8T,GAAgBA,EAAajP,aAC/BhE,EAAU/G,OAAS+G,EAAU/G,WAC7B+G,EAAU/G,OAAOpE,SAAWoe,EAAape,SACzCmL,EAAU/G,OAAO+K,WAAaiP,EAAajP,YAEzCiP,GAAgBA,EAAapO,cAC/B7E,EAAU/G,OAAS+G,EAAU/G,WAC7B+G,EAAU/G,OAAOpE,SAAWoe,EAAape,UAAYmL,EAAU/G,OAAOpE,UAAYC,GAAaS,MAC/FyK,EAAU/G,OAAO4L,YAAcoO,EAAapO,eAIlD,OAAOqJ,GAGDR,EAAV/S,UAAAuX,oBAAU,SAAoBlO,EAAoCa,EAAuC7E,GACjGgE,IAAe1E,WAA4B,OAAf0E,GAAsC,KAAfA,IACrD9S,KAAK4c,eAAe9N,EAAUb,KAC5B2Q,SAAU9P,EAAUb,GACpBa,UAARA,EACQgE,WAARA,EACQnP,SAAWmL,GAAaA,EAAU/G,QAAU+G,EAAU/G,OAAOpE,SAAYmL,EAAU/G,OAAOpE,SAAW,KACrGoH,KAAO+D,GAAaA,EAAU/G,QAAU+G,EAAU/G,OAAOgD,KAAQ+D,EAAU/G,OAAOgD,KAAO/F,GAAWjE,QAGpG4S,IAEF3T,KAAK4c,eAAe9N,EAAUb,KAC5B2Q,SAAU9P,EAAUb,GACpBa,UAARA,EACQ6E,YAARA,EACQhQ,SAAWmL,GAAaA,EAAU/G,QAAU+G,EAAU/G,OAAOpE,SAAYmL,EAAU/G,OAAOpE,SAAW,KACrGoH,KAAO+D,GAAaA,EAAU/G,QAAU+G,EAAU/G,OAAOgD,KAAQ+D,EAAU/G,OAAOgD,KAAO/F,GAAWjE,SAKlGyb,EAAV/S,UAAAkX,aAAU,SAAasB,EAAiBnN,EAAW5W,GAC/C+jB,EAAaA,GAAc,IAAIxT,MAAM0O,MAIrC,IAAIM,EAAQvf,EACRA,GAAuC,mBAA3BA,EAAEgkB,uBAChBzE,EAAQnR,EAAEC,UAAW,IAAIkC,MAAM0T,UAAajkB,IAE9C+jB,EAAWG,OAAOtN,EAAM2I,EAAO3I,EAAKjJ,SAtexC,mBADAd,KAACC,EAAAA,kDA1BDD,KAASxB,KADTwB,KAASE,EAAAA,oBCCT,IAAAoX,GAAA,WAAA,SAAAA,KAaA,OANEA,EAAF5Y,UAAAmC,KAAE,SAAKC,EAAWE,EAAeD,EAAyBkR,GACtDhd,KAAK6L,KAAOA,EACZ7L,KAAK+L,SAAWA,EAChB/L,KAAK8L,YAAcA,EACnB9L,KAAKgd,kBAAoBA,GAE7BqF,EAbA,GCFAC,GAAA,WAyCE,SAAFA,EAAsBC,EAAsCC,EAAsCC,EAAsCjZ,GAAlHxJ,KAAtBuiB,cAAsBA,EAAsCviB,KAA5DwiB,cAA4DA,EAAsCxiB,KAAlGyiB,cAAkGA,EAAsCziB,KAAxIwJ,UAAwIA,SAStI8Y,EAAF7Y,UAAAiZ,gCAAE,WAAA,IAAFpY,EAAAtK,KAmBI,GAlBAA,KAAKgM,MAAQhM,KAAKyiB,cAAc5W,KAChC7L,KAAKiM,aAAejM,KAAKyiB,cAAc3W,YACvC9L,KAAKkM,UAAYlM,KAAKyiB,cAAc1W,SACpC/L,KAAK2iB,mBAAqB3iB,KAAKyiB,cAAczF,kBAC7Chd,KAAK4iB,eAAiB5iB,KAAKyiB,cAAczF,kBAErChd,KAAKiM,aAAa4W,qBACpB7iB,KAAK8iB,oBAAsB9iB,KAAK+iB,mBAAmB/iB,KAAKgM,MAAOhM,KAAK2iB,mBAAoB3iB,KAAKiM,eAE3FjM,KAAKiM,aAAa+W,iBACpBhjB,KAAKijB,gBAAkBjjB,KAAKkjB,eAAeljB,KAAKgM,MAAOhM,KAAK2iB,mBAAoB3iB,KAAKiM,eAEnFjM,KAAKiM,aAAakX,oBACpBnjB,KAAKojB,kBAAoB,IAAI3U,MAAM4U,aAAarjB,KAAKiM,aAAaqX,wBAClEtjB,KAAKgM,MAAMuX,eAAevjB,KAAKojB,oBAI7BpjB,KAAKiM,aAAauX,eAAgB,CACpC,IAAMC,EAAwBzjB,KAAKyiB,cAAciB,8BACjD1jB,KAAKgM,MAAMuX,eAAeE,GA2B5B,GAxBIzjB,KAAKiM,aAAa0X,yBAGpB3jB,KAAKgM,MAAMuX,eAAevjB,KAAK4jB,wBAG1B5jB,KAAK6jB,qBACR7jB,KAAK6jB,mBAAqB,IAAIpV,MAAMqV,kBAAkB9jB,KAAKiM,aAAa8X,yBACxE/jB,KAAKgM,MAAMgY,kBAAkBhkB,KAAK6jB,sBAGlC7jB,KAAKiM,aAAagY,qBACpBjkB,KAAK6jB,mBAAqB,IAAIpV,MAAMqV,kBAAkB9jB,KAAKiM,aAAa8X,yBACxE/jB,KAAKgM,MAAMgY,kBAAkBhkB,KAAK6jB,qBAEhC7jB,KAAKiM,aAAaiY,qBACpBlkB,KAAKmkB,oBAAsB,IAAI1V,MAAM2V,QAAQC,cAAcrkB,KAAKiM,aAAaqY,kBAC7EtkB,KAAKgM,MAAMuX,eAAevjB,KAAKmkB,qBAC/BnkB,KAAKmkB,oBAAoBI,UAAUnH,UAAU,SAAClf,EAAU4W,GAClDxK,EAAK2B,aAAaqY,cAAoE,mBAA7Cha,EAAK2B,aAAaqY,aAAaC,WAC1Eja,EAAK2B,aAAaqY,aAAaC,UAAUrmB,EAAG4W,MAI9C9U,KAAKiM,aAAauY,iBAAkB,CACtC,IAAMC,EAAoBzkB,KAAKiM,aAAayY,eAC5CD,EAAkBE,SAAWF,EAAkBE,UAAY,IAC3DF,EAAkBG,gBAAkBH,EAAkBG,iBAAmB,GACzE5kB,KAAK6kB,iBAAmB,IAAIpW,MAAM2V,QAAQU,WAAWL,GACrDzkB,KAAKgM,MAAMuX,eAAevjB,KAAK6kB,kBAC/B7kB,KAAK6kB,iBAAiBN,UAAUnH,UAAU,SAAClf,EAAU4W,GAC/CxK,EAAK2B,aAAayY,YAAgE,mBAA3Cpa,EAAK2B,aAAayY,WAAWH,WACtEja,EAAK2B,aAAayY,WAAWH,UAAUrmB,EAAG4W,KAG9C9U,KAAK6kB,iBAAiBN,UAAUnH,UAAU,SAAClf,EAAU4W,GAC/CxK,EAAK2B,aAAayY,YAAuE,mBAAlDpa,EAAK2B,aAAayY,WAAWK,kBACtEza,EAAK2B,aAAayY,WAAWK,iBAAiB7mB,EAAG4W,KAInD9U,KAAKiM,aAAa+Y,kBAAoB5W,YACpCjB,MAAMC,QAAQpN,KAAKiM,aAAa+Y,iBAClChlB,KAAKiM,aAAa+Y,gBAAgBnW,QAAQ,SAACoW,GACzC3a,EAAK0B,MAAMuX,eAAe0B,KAG5BjlB,KAAKgM,MAAMuX,eAAevjB,KAAKiM,aAAa+Y,mBAKlD1C,EAAF7Y,UAAAsZ,mBAAE,SAAmBlX,EAAWmR,EAA6B5Q,GAEzD,IAAM8Y,EAAgB9Y,EAAQ+Y,gBAAkBnlB,KAAKwJ,UAAUsB,QAAQ,qBAAuB,oBACxFsa,EAAkBhZ,EAAQ+Y,gBAAkBnlB,KAAKwJ,UAAUsB,QAAQ,sBAAwB,qBAEjGsB,EAAQiZ,aAAejZ,EAAQiZ,iBAC/BjZ,EAAQiZ,aAAaH,cAAgB9Y,EAAQiZ,aAAaH,eAAiBA,EAC3E9Y,EAAQiZ,aAAaD,gBAAkBhZ,EAAQiZ,aAAaD,iBAAmBA,EAE/EplB,KAAK8iB,oBAAsB,IAAIrU,MAAM6W,SAASC,aAAavI,EAAmBnR,EAAMO,GAChFP,GAAQO,EAAQyW,oBAClB7iB,KAAK8iB,oBAAoB0C,iBAAiBpI,UAAU,SAAClf,EAAU4W,GACzD1I,EAAQiZ,cAAiE,mBAA1CjZ,EAAQiZ,aAAaG,kBACtDpZ,EAAQiZ,aAAaG,iBAAiBtnB,EAAG4W,MAYjDwN,EAAF7Y,UAAAyZ,eAAE,SAAerX,EAAWmR,EAA6B5Q,GACrDA,EAAQqZ,SAAZ/J,OAAAC,UAA4B3b,KAAK0lB,4BAAgCtZ,EAAQqZ,UACrEzlB,KAAK2lB,0BAA0B9Z,EAAMO,GAErC,IAAM6W,EAAkB,IAAIxU,MAAM6W,SAASM,SAAS5I,EAAmBnR,EAAMO,GAgC7E,OA/BIP,GAAQO,EAAQqZ,WAClBxC,EAAgB8B,iBAAiB3H,UAAU,SAAClf,EAAU4W,GAChD1I,EAAQqZ,UAAyD,mBAAtCrZ,EAAQqZ,SAASV,kBAC9C3Y,EAAQqZ,SAASV,iBAAiB7mB,EAAG4W,KAGzCmO,EAAgBuC,iBAAiBpI,UAAU,SAAClf,EAAU4W,GAChD1I,EAAQqZ,UAAyD,mBAAtCrZ,EAAQqZ,SAASD,kBAC9CpZ,EAAQqZ,SAASD,iBAAiBtnB,EAAG4W,KAGzCmO,EAAgBsB,UAAUnH,UAAU,SAAClf,EAAU4W,GACzC1I,EAAQqZ,UAAkD,mBAA/BrZ,EAAQqZ,SAASlB,WAC9CnY,EAAQqZ,SAASlB,UAAUrmB,EAAG4W,KAGlCmO,EAAgB4C,YAAYzI,UAAU,SAAClf,EAAU4W,GAM/C,GALI1I,EAAQqZ,UAAoD,mBAAjCrZ,EAAQqZ,SAASI,aAC9CzZ,EAAQqZ,SAASI,YAAY3nB,EAAG4W,GAI9BjJ,GAAwC,mBAAzBA,EAAKia,gBAAgC,CAEtD,IAAMC,EAAUla,EAAKma,SACjBD,GAAWzZ,EAAE,IAAIyZ,GAAWvmB,OAAS,GACvCqM,EAAKia,sBAKN7C,GAGTX,EAAF7Y,UAAAwc,WAAE,SAAWnF,GACT,GAAI9gB,KAAKgM,OAAShM,KAAK4iB,eAAgB,CACrC,IAAMtD,EAActf,KAAKgM,MAAMuT,eAAeuB,EAAO7S,IACrDjO,KAAK4iB,eAAiB5iB,KAAKkmB,oBAAoBlmB,KAAK4iB,eAAgBtD,GACpEtf,KAAKgM,MAAMma,WAAWnmB,KAAK4iB,kBAI/BN,EAAF7Y,UAAAyc,oBAAE,SAAoB/jB,EAAc4c,GAChC,OAAO5c,EAAM4F,OAAO,SAACqe,EAAShmB,GAC5B,OAAO2e,IAAU3e,KAIrBkiB,EAAF7Y,UAAA4c,kBAAE,WACErmB,KAAKgM,MAAM8Z,mBAGbxD,EAAF7Y,UAAAwW,QAAE,WACEjgB,KAAKgM,MAAQ,KACbhM,KAAKkM,UAAY,KACjBlM,KAAK4iB,kBAED5iB,KAAK8iB,sBACP9iB,KAAK8iB,oBAAoBnN,UACzB3V,KAAK8iB,oBAAsB,MAEzB9iB,KAAKijB,kBACPjjB,KAAKijB,gBAAgBtN,UACrB3V,KAAKijB,gBAAkB,MAErBjjB,KAAK6jB,qBACP7jB,KAAK6jB,mBAAmBlO,UACxB3V,KAAK6jB,mBAAqB,MAExB7jB,KAAK4jB,yBACP5jB,KAAK4jB,uBAAuBjO,UAC5B3V,KAAK4jB,uBAAyB,MAE5B5jB,KAAKojB,oBACPpjB,KAAKojB,kBAAkBzN,UACvB3V,KAAKojB,kBAAoB,MAEvBpjB,KAAKmkB,sBACPnkB,KAAKmkB,oBAAoBxO,UACzB3V,KAAKmkB,oBAAsB,MAEzBnkB,KAAK6kB,mBACP7kB,KAAK6kB,iBAAiBlP,UACtB3V,KAAK6kB,iBAAmB,OASpBvC,EAAV7Y,UAAAkc,0BAAU,SAA0B9Z,EAAWO,GAArC,IAAV9B,EAAAtK,KACU0d,EAAatR,EAAQuR,mBAAqBvR,EAAQwR,mBAAqB,KAqH7E,GAnHIxR,EAAQka,kBAENla,GAAWA,EAAQqZ,UAAYrZ,EAAQqZ,SAASc,4BAA8Bna,EAAQqZ,SAASe,aAAyH,IAA1Gpa,EAAQqZ,SAASe,YAAYze,OAAO,SAACkC,GAAyB,MAAiB,iBAAjBA,EAAKwc,UAA4BjnB,QAC/M4M,EAAQqZ,SAASe,YAAY/mB,MAEzBinB,aAAc,2BACdpZ,MAAOlB,EAAQ+Y,gBAAkBnlB,KAAKwJ,UAAUsB,QAAQ,qBAAuB,oBAC/E6b,UAAU,EACVF,QAAS,eACTG,cAAe,KAKjBxa,GAAWA,EAAQqZ,UAAYrZ,EAAQqZ,SAASoB,yBAA2Bza,EAAQqZ,SAASe,aAA0H,IAA3Gpa,EAAQqZ,SAASe,YAAYze,OAAO,SAACkC,GAAyB,MAAiB,kBAAjBA,EAAKwc,UAA6BjnB,QAC7M4M,EAAQqZ,SAASe,YAAY/mB,MAEzBinB,aAAc,eACdpZ,MAAOlB,EAAQ+Y,gBAAkBnlB,KAAKwJ,UAAUsB,QAAQ,qBAAuB,oBAC/E6b,UAAU,EACVF,QAAS,gBACTG,cAAe,KAMjBxa,GAAWA,EAAQqZ,UAAYrZ,EAAQqZ,SAASqB,2BAA6BpJ,GAActR,EAAQqZ,SAASe,aAA4H,IAA7Gpa,EAAQqZ,SAASe,YAAYze,OAAO,SAACkC,GAAyB,MAAiB,oBAAjBA,EAAKwc,UAA+BjnB,QAC/N4M,EAAQqZ,SAASe,YAAY/mB,MAEzBinB,aAAc,gBACdpZ,MAAOlB,EAAQ+Y,gBAAkBnlB,KAAKwJ,UAAUsB,QAAQ,mBAAqB,kBAC7E6b,UAAU,EACVF,QAAS,kBACTG,cAAe,MAQnBxa,GAAWA,EAAQ2a,cAAgB3a,EAAQqZ,UAAYrZ,EAAQqZ,SAASuB,sBAAwB5a,EAAQqZ,SAASe,aAAuH,IAAxGpa,EAAQqZ,SAASe,YAAYze,OAAO,SAACkC,GAAyB,MAAiB,eAAjBA,EAAKwc,UAA0BjnB,QAC/N4M,EAAQqZ,SAASe,YAAY/mB,MAEzBinB,aAAc,iBACdpZ,MAAOlB,EAAQ+Y,gBAAkBnlB,KAAKwJ,UAAUsB,QAAQ,iBAAmB,uBAC3E6b,UAAU,EACVF,QAAS,aACTG,cAAe,KAKjBxa,GAAWA,EAAQ2a,cAAgB3a,EAAQqZ,UAAYrZ,EAAQqZ,SAASwB,gCAAkC7a,EAAQqZ,SAASe,aAAkI,IAAnHpa,EAAQqZ,SAASe,YAAYze,OAAO,SAACkC,GAAyB,MAAiB,0BAAjBA,EAAKwc,UAAqCjnB,QACpP4M,EAAQqZ,SAASe,YAAY/mB,MAEzBinB,aAAc,iBACdpZ,MAAOlB,EAAQ+Y,gBAAkBnlB,KAAKwJ,UAAUsB,QAAQ,2BAA6B,wCACrF6b,UAAU,EACVF,QAAS,wBACTG,cAAe,KAMjBxa,EAAQqZ,UAAYrZ,EAAQqZ,SAASe,YAAYhnB,OAAS,IAC5D4M,EAAQqZ,SAASlB,UAAY,SAACrmB,EAAG4W,GAC/B,GAAIA,GAAQA,EAAK2R,QACf,OAAQ3R,EAAK2R,SACX,IAAK,eACHnc,EAAKkY,cAAc1D,eACnBxU,EAAK4B,UAAU2S,UACf,MACF,IAAK,aACHvU,EAAKiY,cAAcpW,cACjBZ,UAAWC,EAAczE,MACzB0E,SAAU,SACVzF,OAAQ0F,GAASlE,IACjBmE,gBAAgB,IAElB,MACF,IAAK,wBACHrB,EAAKiY,cAAcpW,cACjBZ,UAAWC,EAAcpE,IACzBqE,SAAU,SACVzF,OAAQ0F,GAAS9D,IACjB+D,gBAAgB,IAElB,MACF,IAAK,gBACHE,EAAKqb,wBAAwBrb,EAAKmJ,aAAamS,eAC/C,MACF,IAAK,kBACHtb,EAAKub,uBAAuBvb,EAAKmJ,aAAaqS,cAC9C,MACF,IAAK,eACH/c,EAAKkY,cAAc1D,eACnBxU,EAAK4B,UAAU2S,UACf,MACF,IAAK,kBACHvU,EAAKgd,sBAAsBlb,GAC3B,MACF,QACEmb,MAAM,YAAczS,EAAK2R,YAU/Bra,GAAWA,EAAQqZ,UAAYrZ,EAAQqZ,SAASe,aAAepa,EAAQqZ,SAASe,YAAYhnB,OAAS,EAAG,CAC1G,IAAMgoB,EAAcpb,EAAQ+Y,gBAAkBnlB,KAAKwJ,UAAUsB,QAAQ,YAAc,WACnFsB,EAAQqZ,SAAS+B,YAAcpb,EAAQqZ,SAAS+B,aAAeA,EAG/Dpb,EAAQqZ,SAASe,YAAY/kB,KAAK,SAACgmB,EAAOC,GACxC,OAAID,GAASC,GAASD,EAAMhd,eAAe,kBAAoBid,EAAMjd,eAAe,iBAC3Egd,EAAMb,cAAgBc,EAAMd,cAE9B,MAQLtE,EAAV7Y,UAAAic,0BAAU,WACN,OACEiC,YAAa3nB,KAAKwJ,UAAUsB,QAAQ,YAAc,UAClDoa,cAAellB,KAAKwJ,UAAUsB,QAAQ,sBAAwB,oBAC9Dsa,gBAAiBplB,KAAKwJ,UAAUsB,QAAQ,uBAAyB,qBACjE4b,aAAc,aACdkB,UAAW,GACXJ,YAAapZ,UACboY,eACAD,4BAA4B,EAC5BO,2BAA2B,EAC3BD,yBAAyB,IAI7BvE,EAAF7Y,UAAA6d,sBAAE,SAAsBxb,GACpB,IAAIkS,EACEN,EAAa5R,EAAY6R,mBAAqB7R,EAAY8R,kBAChE,IAAKF,IAAeA,EAAWI,UAAYJ,EAAWG,QACpD,MAAM,IAAI5b,MAAM,oFAOlB,GAJIyb,EAAWI,UACbE,EAAQN,EAAWI,QAAQ+J,cAGzB7J,GAAmB,KAAVA,EAAc,CACrBN,EAAWK,YACbL,EAAWK,aAObrc,EAF4Bgc,EAAWG,QAAQG,IAEZ1f,KAAK,SAAC8f,GAEnCA,GAAiBV,EAAWW,qBAC9BX,EAAWW,oBAAoBD,GAI7BV,EAAWY,aACbZ,EAAWY,YAAYF,OAUvBkE,EAAV7Y,UAAAqe,0BAAU,SAA0BrC,GAShC,OAPAA,EAASe,sBACFf,EAAS+B,YAEhB/B,EAASkC,YAAc3nB,KAAKwJ,UAAUsB,QAAQ,YAAc,UAC5D2a,EAASP,cAAgBllB,KAAKwJ,UAAUsB,QAAQ,sBAAwB,oBACxE2a,EAASL,gBAAkBplB,KAAKwJ,UAAUsB,QAAQ,uBAAyB,qBAEpE2a,GAQTnD,EAAF7Y,UAAAse,sBAAE,WAEM/nB,KAAK8iB,sBACP9iB,KAAK8iB,oBAAoBnN,UACzB3V,KAAK8iB,oBAAsB,MAG7B9iB,KAAKiM,aAAaoZ,aAAejX,UACjCpO,KAAK+iB,mBAAmB/iB,KAAKgM,MAAOhM,KAAK4iB,eAAgB5iB,KAAKiM,eAQhEqW,EAAF7Y,UAAAue,kBAAE,WAEEhoB,KAAKijB,gBAAgBtN,UAGjB3V,KAAKiM,cAAgBjM,KAAKiM,aAAawZ,WACzCzlB,KAAKiM,aAAawZ,SAAWzlB,KAAK8nB,0BAA0B9nB,KAAKiM,aAAawZ,WAEhFzlB,KAAKkjB,eAAeljB,KAAKgM,MAAOhM,KAAK4iB,eAAgB5iB,KAAKiM,eAQ5DqW,EAAF7Y,UAAAwe,iBAAE,SAAiBlR,GACXA,GACF/W,KAAKwJ,UAAU0e,IAAInR,OAGrB,IAAqB,IAAAkH,EAAAiB,EAAAlf,KAAK2iB,oBAA9BvD,EAAAnB,EAAAhgB,QAAAmhB,EAAA/gB,KAAA+gB,EAAAnB,EAAAhgB,OAAA,CAAS,IAAM6iB,EAAf1B,EAAArhB,MACU+iB,EAAO9R,YACT8R,EAAO7R,KAAOjP,KAAKwJ,UAAUsB,QAAQgW,EAAO9R,iHAKhDhP,KAAKgM,MAAMma,WAAWnmB,KAAK2iB,6BAS7BL,EAAF7Y,UAAA0e,+BAAE,SAA+BnL,EAA6B5Q,GAC1D,GAAIA,EAAQuX,uBAAwB,CAClC3jB,KAAK4jB,uBAAyB,IAAInV,MAAM2Z,qBAAqBhc,EAAQic,sBACrE,IAAMC,EAA0BtoB,KAAK4jB,uBAAuB2E,sBAC5DD,EAAgBnZ,mBAAoB,EACpCmZ,EAAgBE,kBAAmB,EACnCxL,EAAkByL,QAAQH,OAhgBhC,mBAwBAvd,KAACC,EAAAA,kDAvBDD,KAASG,KAETH,KAASyR,KAeTzR,KAASsX,KAFTtX,KAASE,EAAAA,oBCRT,ICsBIyd,GDtBJC,GAAA,WAME,SAAFA,EAAsBC,EAAqBC,GACvC,GADkB7oB,KAAtB4oB,YAAsBA,EAJtB5oB,KAAA8oB,QAKiC,mBAAlBD,EACT7oB,KAAK+oB,MAAQF,OACR,GAA6B,iBAAlBA,EAChB7oB,KAAK+H,OAAO8gB,OACP,CAAA,GAAIza,YAAcya,GAAiB,IAAMnoB,UAAUlB,OACxD,MAAM,IAAIT,UAAU,2DACf,GAAIqP,YAAcya,EACvB,MAAM,IAAI9pB,UAAU,sGAAsG8pB,IAoHhI,OA5GEF,EAAFlf,UAAA1B,OAAE,SAAO8Z,OACL,IAAmB,IAAA5D,EAAAiB,EAAAxD,OAAOyD,KAAK0C,IAAnCzC,EAAAnB,EAAAhgB,QAAAmhB,EAAA/gB,KAAA+gB,EAAAnB,EAAAhgB,OAAA,CAAS,IAAM+qB,EAAf5J,EAAArhB,MACM,GAA6B,mBAAlB8jB,EAAQmH,GAAnB,CAGA,IAAMtY,EAAM1Q,KAAKipB,gBAAgBpH,EAAQmH,IAC7B,OAARtY,GAGJ1Q,KAAK8oB,KAAKrpB,KAAQupB,EAAxB,IAAgCtY,yGAE5B,OAAO1Q,cAOT2oB,EAAFlf,UAAAnH,KAAE,WAAF,IAAO,IAAP4mB,KAAAC,EAAA,EAAOA,EAAPzoB,UAAAlB,OAAO2pB,IAAAD,EAAPC,GAAAzoB,UAAAyoB,GACI,IAAKD,EACH,MAAM,IAAInqB,UAAU,mCAItB,IAAMqqB,EAAkC,IAApBF,EAAS1pB,QAAgB2N,MAAMC,QAAQ8b,EAAS,IAAOA,EAAS,GAAKA,EAEzF,OADAlpB,KAAKvB,KAAOuB,KAAKqpB,UAAUD,GACpBppB,MAOT2oB,EAAFlf,UAAA6f,SAAE,SAASP,GACP/oB,KAAK+oB,MAAQA,GAOfJ,EAAFlf,UAAA3D,SAAE,WACE,GAAI9F,KAAKvB,OAAS2P,UAChB,MAAM,IAAImb,eAAe,8EAG3B,OAAWvpB,KAAU,MAAKA,KAAK+oB,MAAQ,IAAO,IAAlD,IAAwD/oB,KAAK4oB,YAA7D,KAA6E5oB,KAAK8oB,KAAKtpB,OAAS,EAAK,IAAMQ,KAAK8oB,KAAKvb,KAAK,KAAO,IAAM,IAAvI,OAAgJvN,KAAKvB,KAArJ,MAOUkqB,EAAVlf,UAAA4f,UAAU,SAAUG,GAyBhB,OAxBeA,EAAQ/mB,IAAI,SAACgnB,EAAc1K,GACxC,IAAM2K,EAAQF,EAAQzK,GAEtB,GAAI2K,aAAiBf,EACnB,OAAOe,EAAM5jB,WACR,GAAKqH,MAAMC,QAAQsc,IAA2B,iBAAVA,EAYpC,CAAA,GAAqB,iBAAVA,EAChB,OAAOA,EAEP,MAAM,IAAIC,WAAW,+BAA+BD,GAdpD,IAAME,EAAUlO,OAAOyD,KAAKuK,GAC5B,GAAI,IAAME,EAAQpqB,OAChB,MAAM,IAAImqB,WAAW,yDAAyDE,KAAKC,UAAUJ,IAE/F,IAAMK,EAAQH,EAAQ,GAChB3f,EAAOyf,EAAMK,GAEnB,OAAI5c,MAAMC,QAAQnD,GACT,IAAI0e,EAAoBoB,GAAOznB,KAAK2H,GAEnC8f,EAAlB,MAA6B9f,EAA7B,MAQkBsD,KAAK,MAGbob,EAAVlf,UAAAwf,gBAAU,SAAgBlrB,GAAhB,IAAVuM,EAAAtK,KAaI,MAZqB,iBAAVjC,EACTA,EAAQ8rB,KAAKC,UAAU/rB,GACdoP,MAAMC,QAAQrP,GAIvBA,EAAQ,KAHRA,EAAQA,EAAM0E,IAAI,SAAAwH,GAChB,OAAOK,EAAK2e,gBAAgBhf,KAC3BsD,QACT,IACexP,aAAiB4H,KAC1B5H,EAAQ8rB,KAAKC,UAAU/rB,GACJ,OAAVA,GAAmC,iBAAVA,IAClCA,EAAQiC,KAAKgqB,eAAejsB,IAEvBA,GAGD4qB,EAAVlf,UAAAugB,eAAU,SAAeC,GACrB,IAAMC,SAEN,IAAmB,IAAAjM,EAAAiB,EAAAxD,OAAOyD,KAAK8K,IAAnC7K,EAAAnB,EAAAhgB,QAAAmhB,EAAA/gB,KAAA+gB,EAAAnB,EAAAhgB,OAAA,CAAS,IAAM+qB,EAAf5J,EAAArhB,MAC+B,mBAAdksB,EAAIjB,IAGfkB,EAAQzqB,KAAQupB,EAAtB,IAA8BhpB,KAAKipB,gBAAgBgB,EAAIjB,0GAEnD,MAAO,IAAIkB,EAAQ3c,OAAvB,aAEAob,EAlIA,GCwBMwB,GAAyB,GAI/BC,GAAA,WAeE,SAAFA,EAAsB5gB,GAAAxJ,KAAtBwJ,UAAsBA,EANtBxJ,KAAAqqB,gBAA2Chb,MAAO,KAAMib,UAAWC,GAAcpiB,KACjFnI,KAAAwqB,0BACI1oB,MAAOqoB,GACPhkB,OAAQ,UASVikB,EAAF3gB,UAAAoe,WAAE,WACE,IAAK7nB,KAAKoM,UAAYpM,KAAKoM,QAAQqe,cAAiBzqB,KAAK2iB,qBAAuB3iB,KAAKoM,QAAQ4Q,kBAC3F,MAAM,IAAI/a,MAAM,0FAIlB,IAAI+a,EAAoBhd,KAAK2iB,oBAAsB3iB,KAAKoM,QAAQ4Q,kBAChEA,EAAoBA,EAAkBjV,OAAO,SAAC+Y,GAAmB,OAACA,EAAO0H,mBAEzE,IAAMkC,EAAU,IAAIC,GAAa,SAC3BC,EAAY,IAAID,GAAa3qB,KAAKoM,QAAQqe,aAC1CI,EAAa,IAAIF,GAAa,YAC9BG,EAAuC,IAAIH,GAAjC3qB,KAAKoM,QAAoB,aAAqB,QAA4B,SAGtF2e,KACJ,GAAI/N,GAAqB7P,MAAMC,QAAQ4P,OACrC,IAAqB,IAAAgO,EAAA9L,EAAAlC,GAA3BiO,EAAAD,EAAA/sB,QAAAgtB,EAAA5sB,KAAA4sB,EAAAD,EAAA/sB,OAAA,CAAW,IAAM6iB,EAAjBmK,EAAAltB,MACQgtB,EAAUtrB,KAAKqhB,EAAOzR,OAGlByR,EAAOoK,QACTH,EAAUtrB,KAApBlB,MAAUwsB,EAAVtqB,EAA4BqgB,EAAOoK,mHAK7BH,EAAY/qB,KAAKoM,QAAQ2e,eAKM,IAA7BA,EAAU5Z,QAAQ,OACpB4Z,EAAUtC,QAAQ,MAGpB,IAAM5G,EAAU7hB,KAAKmrB,iBAAiBJ,GAElC/qB,KAAKoM,QAAQgf,cAEfP,EAAWvoB,KAAK,cAAe,aAC/BwoB,EAAOxoB,MAAM,UAAY+oB,KAAMxJ,OAG/BgJ,EAAWvoB,KAAK,eAChBwoB,EAAOxoB,KAAKuf,IAGd+I,EAAUtoB,MAAM,aAAcuoB,EAAYC,IAG1C,IAAMQ,EAAV5P,OAAAC,UACS3b,KAAKoM,QAAQmf,mBAChBzpB,OAAS9B,KAAKoM,QAAQmf,mBAAqBvrB,KAAKoM,QAAQmf,kBAAkBzpB,MAAS9B,KAAKoM,QAAQmf,kBAAkBzpB,MAAU9B,KAAKgI,YAAchI,KAAKgI,WAAWwjB,SAAYxrB,KAAKgI,WAAWwjB,SAAW,OAAUxrB,KAAKwqB,yBAAyB1oB,QAG3O9B,KAAKoM,QAAQgf,eAChBE,EAAenlB,OAAWnG,KAAKoM,QAAQmf,mBAAqBvrB,KAAKoM,QAAQmf,kBAAkB9gB,eAAe,WAAczK,KAAKoM,QAAQmf,kBAA0B,OAAI,GAGjKvrB,KAAKoM,QAAQqf,gBAAkBte,MAAMC,QAAQpN,KAAKoM,QAAQqf,iBAAmBzrB,KAAKoM,QAAQqf,eAAejsB,OAAS,IAEpH8rB,EAAeI,QAAU1rB,KAAKoM,QAAQqf,gBAEpCzrB,KAAKoM,QAAQuf,kBAAoBxe,MAAMC,QAAQpN,KAAKoM,QAAQuf,mBAAqB3rB,KAAKoM,QAAQuf,iBAAiBnsB,OAAS,IAE1H8rB,EAAe1hB,SAAW5J,KAAKoM,QAAQuf,kBAErC3rB,KAAKoM,QAAQwf,qBAEfN,EAAevU,OAAS/W,KAAKwJ,UAAUqP,aAAe,MAIxD+R,EAAU7iB,OAAOujB,GACjBZ,EAAQpoB,KAAKsoB,GAGb,OAAO5qB,KAAK6rB,4BAA4BnB,EAAQ5kB,YADlB,aAAc,SAAU,aAC4B9F,KAAKoM,QAAQ0f,gCAAiC,YAclI1B,EAAF3gB,UAAA0hB,iBAAE,SAAiBY,GAEf,IAAMC,EAAM,SAAC9rB,EAAaoB,QAA9B,IAAApB,IAAiBA,MACX,IAAMsQ,EAAIlP,EAAE2qB,QAEZ,OADA/rB,EAAEsQ,GAAKlP,EAAE9B,OAASwsB,EAAI9rB,EAAEsQ,GAAIlP,GAAK,KAC1BpB,GAGHoQ,EAASyb,EAAWG,OAAO,SAAChsB,EAAQoB,GAAc,OAAA0qB,EAAI9rB,EAAGoB,EAAE8P,MAAM,WAEvE,OAAOyY,KAAKC,UAAUxZ,GACnBtP,QAAQ,cAAe,IACvBA,QAAQ,MAAO,IACfA,QAAQ,MAAO,KAGpBopB,EAAF3gB,UAAAmC,KAAE,SAAKgV,EAAuC5Y,EAAyB6D,GACnE7L,KAAKgM,MAAQH,EACb7L,KAAKoM,QAAUwU,MACf5gB,KAAKgI,WAAaA,EAEd6D,GAAQA,EAAKgB,YAAchB,EAAKmJ,aAClChV,KAAK2iB,mBAAqB9W,EAAKgB,aAC/B7M,KAAKiM,aAAeJ,EAAKmJ,eAQ7BoV,EAAF3gB,UAAA0iB,yBAAE,WACE,OAAQnsB,KAAKoM,QAAoB,cAAMtK,MAAQ9B,KAAKgI,WAAahI,KAAKgI,WAAWwjB,SAAWrB,KAA8BroB,MAAQ9B,KAAKgI,WAAahI,KAAKgI,WAAWwjB,SAAWrB,GAAyBhkB,OAAQ,IAIlNikB,EAAF3gB,UAAA2iB,eAAE,WACE,OAAOpsB,KAAKoM,QAAQqe,aAAe,IAIrCL,EAAF3gB,UAAAiY,kBAAE,WACE,OAAO1hB,KAAKqsB,iBAIdjC,EAAF3gB,UAAA6iB,qBAAE,WACE,OAAOtsB,KAAKusB,oBAIdnC,EAAF3gB,UAAA+iB,kBAAE,WACE,OAAOxsB,KAAKysB,iBAMdrC,EAAF3gB,UAAAijB,uBAAE,WACE,IAAInB,EACAvrB,KAAKoM,QAAQgf,aAEfG,GACEoB,MAAO,GACPC,OAAQxe,UACRye,KAAMze,YAIRmd,EAAqBvrB,KAAKoM,QAAQmf,mBAAqBvrB,KAAKmsB,4BAC1ChmB,OAAS,EAI7BnG,KAAKusB,oBACHO,WAAY,EACZtB,SAAUD,EAAkBzpB,OAG9B9B,KAAK+sB,eAAgBxB,kBAAzBA,KAGEnB,EAAF3gB,UAAAsjB,cAAE,SAAcnM,GACZ5gB,KAAKoM,QAATsP,OAAAC,UAAwB3b,KAAKoM,QAAYwU,IAMvCwJ,EAAF3gB,UAAAqT,gBAAE,SAAgBW,EAAc3I,GAA9B,IAAFxK,EAAAtK,KACU8L,EAA0B9L,KAAKiM,cAAgB6I,EAAKjJ,KAAKmJ,aACzD0I,EAAa5R,EAAY6R,mBAAqB7R,EAAY8R,kBAEhE,GAAIF,IAAetP,UACjB,MAAM,IAAInM,MAAM,sFAIlB,IAAI+qB,EAAsB,GACtBvP,GAAyB,UAAfA,EAAM1S,MAAmC,YAAf0S,EAAM1S,OAC5CiiB,EAAsBtP,EAAWuP,sBA1NA,KA8OnC,OAjBgB,IAAItvB,QAAgB,SAACC,EAASC,GAC5C,IAAKiX,IAASA,EAAKjJ,KACjB,MAAM,IAAI5J,MAAM,wHAKlBirB,aAAaxE,IACbA,GAAQyE,WAAW,WAEjB7iB,EAAK8iB,cAActY,EAAK2J,eAAe,GAEvCnU,EAAKoiB,yBACL9uB,EAAQ0M,EAAKud,eACZmF,MAmCP5C,EAAF3gB,UAAA4jB,oBAAE,SAAoB5P,EAAc3I,GAChC,IAAM0W,IAAa1W,EAAK0W,WAAcxrB,KAAe,WAAIA,KAAKgI,WAAWwjB,SA7QnD,KAiRtB,OAHAxrB,KAAKstB,iBAAiBxY,EAAKyY,QAAS/B,GAG7BxrB,KAAK6nB,cAQduC,EAAF3gB,UAAA+jB,cAAE,SAAc/P,EAAc3I,GAC1B,IAAM2Y,EAAe3Y,EAAoB,gBAAIA,EAAK4Y,SAAW,IAAIvgB,OAAQwgB,QAAS7Y,EAAK6Y,QAASC,QAAS9Y,EAAK8Y,UAM9G,OAHA5tB,KAAK6tB,cAAcJ,GAGZztB,KAAK6nB,cAOduC,EAAF3gB,UAAA2jB,cAAE,SAAc3O,EAAgDqP,GAE5D9tB,KAAKqsB,gBAAkBrsB,KAAK+tB,yBAAyBtP,GAErD,IACIuP,EADEC,KAGVC,EAAA,SAAetP,GACT,GAAIH,EAAchU,eAAemU,GAAW,CAC1C,IAAMuP,EAAe1P,EAAcG,GAG/B9P,OAAZ,EAQQ,KANEA,EADEgf,GAAqB3gB,MAAMC,QAAQghB,EAAKzL,oBAC9ByL,EAAKzL,mBAAmBrgB,KAAK,SAACwe,GACxC,OAAOA,EAAO7S,KAAOkgB,EAAavP,WAGxBuP,EAAarf,WAGzB,MAAM,IAAI7M,MAAM,+KAGlB,IAAM8M,EAAYD,EAAU0Q,YAAc1Q,EAAU2Q,kBAAoB3Q,EAAUO,OAASP,EAAUG,MAAQ,GACvG0E,GAAewa,EAAeA,EAAaxa,YAAc,UAC3D+L,EAAmByO,EAAarb,WAKpC,QAJgC,IAArB4M,IACTA,EAAmB,IAGW,iBAArBA,IAAkC/L,EAC3C,MAAM,IAAI1R,MAAM,+PAIlB,IAAM0d,GADND,EAAmB,GAAKA,GACSze,MAAM,yCACnC0C,EAAWwqB,EAAaxqB,WAAa,EAAYgc,EAAQ,GAAK,IAClEqO,EAAiBrO,EAAWA,EAAQ,GAAK,GACzC,IAAMC,EAAmBD,EAAWA,EAAQ,GAAmB,OAAbhc,EAAoB,IAAM,GAG5E,GAAIoL,GAA6B,KAAhBif,GAA6C,IAAvBra,EAAYnU,wBAK/CmU,GAAeA,EAAYnU,OAAS,EACtCwuB,EAAcra,EAAYpG,KAAK,KACC,iBAAhBygB,IAEhBA,EAAcA,EAAYhtB,QAAQ,IAAK,MACtB,MAAb2C,GAAiC,OAAbA,GAAkC,OAAbA,GAAuC,MAAlBic,IAChEjc,EAAyB,MAAbA,GAAiC,OAAbA,EAAqB,WAAa,gBAMjEA,GAAYmL,EAAU/G,SACzBpE,EAAWmB,EAAwBgK,EAAU/G,OAAOgD,MAAQ,KAIzDpH,IACHA,EAAWa,EAAuBsK,EAAU/D,MAAQrI,EAAU+B,SAGhEwpB,EAAcxuB,MACZ4P,MAAON,EACPpL,SAAUD,EAAgBC,GAC1B5F,MAAOiwB,aAhEb,IAAK,IAAMpP,KAAYH,EAA3ByP,EAAetP,GAsEX5e,KAAK+sB,eAAgBpB,iBAAkBsC,KAQzC7D,EAAF3gB,UAAA6jB,iBAAE,SAAiBC,EAAiB/B,GAChCxrB,KAAKusB,oBACHO,WAAYS,EACZ/B,SAANA,GAGI,IAAID,EAEFA,EADEvrB,KAAKoM,QAAQgf,cAEbtpB,MAAO0pB,IAIP1pB,MAAO0pB,EACPrlB,QAASonB,EAAU,GAAK/B,GAI5BxrB,KAAK+sB,eAAgBxB,kBAAzBA,KAOEnB,EAAF3gB,UAAAokB,cAAE,SAAcJ,EAA6BY,GACzC,IAAIC,KACAC,KAEJ,IAAKd,GAAeY,EAAe,EAEjCC,EAAiBD,GACFxf,QAAQ,SAAC5G,GAAW,OAAAA,EAAOqiB,UAAYriB,EAAOqiB,UAAUjkB,gBAGvE,IAAMmoB,EAAiBF,EAAe7rB,IAAI,SAACwF,GAKzC,OAJAsmB,EAAe9uB,MACb4P,MAAOpH,EAAO2W,SAAW,GACzB0L,UAAWriB,EAAOqiB,aAGlB1L,SAAU3W,EAAO2W,SACjBgP,QAAS3lB,EAAOqiB,UAAUjkB,gBAAkBkkB,GAAcpiB,OAG9DnI,KAAKgM,MAAMyiB,eAAeD,QACrB,GAAIf,IAAgBY,EAGzB,GAAIZ,GAAsC,IAAvBA,EAAYjuB,OAC7B+uB,EAAiB,IAAIphB,MAAMnN,KAAKqqB,gBAChCiE,EAAiB,IAAInhB,OAAQyR,SAAU5e,KAAKqqB,eAAeC,UAAWA,UAAWtqB,KAAKqqB,eAAeC,iBAErG,GAAImD,MACF,IAAqB,IAAAiB,EAAAxP,EAAAuO,GAA/BkB,EAAAD,EAAAzwB,QAAA0wB,EAAAtwB,KAAAswB,EAAAD,EAAAzwB,OAAA,CAAe,IAAM6iB,EAArB6N,EAAA5wB,MACgB+iB,GAAUA,EAAO6M,UACnBW,EAAe7uB,MACbmf,UAAWkC,EAAO6M,QAAQnO,YAAcsB,EAAO6M,QAAQiB,kBAAoB9N,EAAO6M,QAAQte,OAASyR,EAAO6M,QAAQ1f,IAAM,GACxHqc,UAAWxJ,EAAO8M,QAAUrD,GAAcpiB,IAAMoiB,GAAcliB,OAGhEkmB,EAAe9uB,MACb4P,OAAQyR,EAAO6M,QAAQnO,YAAcsB,EAAO6M,QAAQiB,kBAAoB9N,EAAO6M,QAAQte,OAASyR,EAAO6M,QAAQ1f,IAAM,GACrHqc,UAAWxJ,EAAO8M,QAAUrD,GAAcpiB,IAAMoiB,GAAcliB,6GAS1ErI,KAAKysB,gBAAkB6B,EACvBtuB,KAAK+sB,eAAgBtB,eAAgB8C,aAsBvCnE,EAAF3gB,UAAAoiB,4BAAE,SAA4BgD,EAAkBC,EAA2BhD,GACvE,IACIiD,EAAeD,EAAgBvhB,KAAKyhB,yBACxCD,GAF4B,uBAI5B,IAAME,EAAM,IAAIC,OAAOH,EAAc,KAErC,OAAOF,EAAS7tB,QAAQiuB,EAAK,SAACE,EAAQC,EAAQC,GAE5C,IAAIC,GAAqB,EACrBH,EAAOjrB,WAAW,WAAa4nB,IACjCwD,GAAqB,GAGvB,OADYA,EAAqBH,EAAOnuB,QAAQ,KAAM,IAAMmuB,KAYxD/E,EAAV3gB,UAAAskB,yBAAU,SAAyBtP,GAI/B,OAF+D,iBAAlBA,EAA8B/C,OAAOyD,KAAKV,GAAehc,IAAI,SAAA+L,GAAO,OAAAiQ,EAAcjQ,KAAQiQ,GAEnHhc,IAAI,SAACsF,GACvB,IAAM+G,EAAY/G,EAAO+G,UAEnBygB,GADS,IAAezgB,EAAUE,WAAaF,EAAUG,OAC5B2P,SAAU7W,EAAO6W,UAAY,KAShE,OARI7W,EAAOpE,WACT4rB,EAAU5rB,SAAWoE,EAAOpE,UAE1BwJ,MAAMC,QAAQrF,EAAO4L,aACvB4b,EAAU5b,YAAc5L,EAAO4L,YAE/B4b,EAAUzc,WAAa/K,EAAO+K,WAEzByc,OAjgBb,mBADAxkB,KAACC,EAAAA,kDAlCDD,KAASE,EAAAA,oBCQT9J,OAAO6E,OAAS,SAASA,EAAgB8O,GAGvC,OAAO9O,EAAOhF,QAAQ,WAAY,SAAUC,EAAO2D,GACjD,MAAgC,oBAAjBkQ,EAAKlQ,GAA2BkQ,EAAKlQ,GAAU3D,KAIlEE,OAAOquB,QAAU,SAAwBhwB,GAEvC,IADA,IAAIiwB,EAAIzvB,KACDyvB,EAAEjwB,OAASA,GAChBiwB,EAAI,IAAMA,EAEZ,OAAOA,GAQTtuB,OAAOuuB,KAAO,SAASb,GACrB,OAAOA,EAAWA,EAAS7tB,QAAQ,OAAQ,KAAO6tB,GAQpD1tB,OAAOwuB,aAAe,SAASd,GAC7B,OAAOA,EAAS7tB,QAAQ,SAAU,SAAS4uB,GACxC,OAAOA,EAAUC,OAAO,GAAGxpB,cAAgBupB,EAAUE,OAAO,GAAG1pB,iBASpEjF,OAAO4uB,UAAY,SAASlB,GAC1B,OAAOA,EAASgB,OAAO,GAAGxpB,cAAgBwoB,EAASmB,MAAM,ICnD3D,IC0BItH,GD1BJuH,GAAA,WAQE,SAAFA,IACIjwB,KAAKkwB,eACHC,eACAzE,QAAS,IAEX1rB,KAAKowB,eAAiB,GACtBpwB,KAAK4c,kBAyKT,OAlKEqT,EAAFxmB,UAAAoe,WAAE,WACE7nB,KAAKkwB,cAAcC,eACnB,IAAME,KAQN,GANIrwB,KAAKkwB,cAAcI,KACrBD,EAAc5wB,KAAK,QAAQO,KAAKkwB,cAAcI,KAE5CtwB,KAAKkwB,cAAcK,MACrBF,EAAc5wB,KAAK,SAASO,KAAKkwB,cAAcK,MAE7CvwB,KAAKkwB,cAAcxE,QAAS,CAC9B,IAAI8E,EAAW,GAEbA,EADErjB,MAAMC,QAAQpN,KAAKkwB,cAAcxE,SACxB1rB,KAAKkwB,cAAcxE,QAAQne,KAAK,KAEhCvN,KAAKkwB,cAAcxE,QAEhC2E,EAAc5wB,KAAK,YAAY+wB,GAEjC,GAAIxwB,KAAKkwB,cAActmB,UAAY5J,KAAKkwB,cAAcnoB,OAAQ,CAC5D,GAAI/H,KAAKkwB,cAAcnoB,OAAQ,CAC7B/H,KAAKkwB,cAAcC,eACnB,IAAIM,EAAYzwB,KAAKkwB,cAAcnoB,OAC/BoF,MAAMC,QAAQpN,KAAKkwB,cAAcnoB,UACnC0oB,EAAYzwB,KAAKkwB,cAAcnoB,OAAOwF,KAAK,KAAIvN,KAAKkwB,cAAcQ,mBAAqB,OAAjG,MAEQ1wB,KAAKkwB,cAAcC,YAAY1wB,KAAK,IAAIgxB,EAAhD,KAGYzwB,KAAKkwB,cAActmB,UAAc5J,KAAKkwB,cAActmB,SAASmF,YAAc/O,KAAK4c,eAAe5c,KAAKkwB,cAActmB,SAASmF,UAAU3I,gBAC1F,KAA3CpG,KAAKkwB,cAActmB,SAASkJ,aAC9B9S,KAAK2wB,iBAAiB3wB,KAAKkwB,cAActmB,SAASmF,UAAU3I,cAAepG,KAAKkwB,cAActmB,SAASkJ,WAAY9S,KAAKkwB,cAActmB,SAAS+J,aAC/I3T,KAAK4wB,0BAA0B5wB,KAAKkwB,cAActmB,WAIxD,GAAI5J,KAAKkwB,cAAcC,YAAY3wB,OAAS,EAAG,CAC7C,IAAMwe,EAAQhe,KAAKkwB,cAAcC,YAAY5iB,KAAK,KAAIvN,KAAKkwB,cAAcQ,mBAAqB,OAApG,KACM1wB,KAAKkwB,cAAcnoB,OAASiW,EAC5BqS,EAAc5wB,KAAK,WAAWue,GAIhC,OAAOqS,EAAc9iB,KAAK,MAG5B0iB,EAAFxmB,UAAAonB,kBAAE,SAAkBC,GAChB,OAAU9wB,KAAK4c,eAAekU,GAAe9wB,KAAK4c,eAAekU,GAAc,MAGjFb,EAAFxmB,UAAAsnB,eAAE,WACE,OAAQ/wB,KAAKkwB,cAAyB,YAAIlwB,KAAKkwB,cAAcC,YAAY3wB,OAAS,GAGpFkc,OAAFsV,eAAMf,EAANxmB,UAAA,iBAAAwnB,IAAE,WACE,OAAOjxB,KAAK4c,gDAGdlB,OAAFsV,eAAMf,EAANxmB,UAAA,WAAAwnB,IAAE,WACE,OAAOjxB,KAAKkwB,eAGhBlE,IAAE,SAAY5f,GACVpM,KAAKkwB,cAAgB9jB,mCAGvB6jB,EAAFxmB,UAAAynB,mBAAE,SAAmBniB,UACV/O,KAAK4c,eAAe7N,IAG7BkhB,EAAFxmB,UAAAknB,iBAAE,SAAiB5hB,EAAmBhR,EAAY4V,GAC9C3T,KAAK4c,eAAe7N,IAClBoiB,OAAQxd,EACR5V,MAANA,IASEkyB,EAAFxmB,UAAAmnB,0BAAE,SAA0BhV,GAA1B,IAAFtR,EAAAtK,KAEQmN,MAAMC,QAAQwO,GAChBA,EAAc/M,QAAQ,SAACuiB,GACrB9mB,EAAK+mB,qBAAqBD,KAG5BpxB,KAAKqxB,qBAAqBzV,IAI9BqU,EAAFxmB,UAAA4nB,qBAAE,SAAqBzV,GACnB,IAAI0V,EAAW,GACTC,KACAxiB,EAAY6M,EAAc7M,UAC1ByiB,EAAmB5V,EAAcjI,YACjChQ,EAAWiY,EAAcjY,SAG/B,GAAM6tB,GAAoBA,EAAiBhyB,OAAS,EAAG,CACrD,IAAMiyB,KAEN,GAAiB,OAAb9tB,EAAmB,CAErB,IAAK,IAAI4M,EAAI,EAAGmhB,EAAMF,EAAiBhyB,OAAQ+Q,EAAImhB,EAAKnhB,IACtDkhB,EAAehyB,KAAQsP,EAAjC,QAAkDyiB,EAAiBjhB,GAAnE,KAGQ+gB,EAAW,MADXA,EAAWG,EAAelkB,KAAK,SACvC,SACa,GAAiB,QAAb5J,GAAmC,UAAbA,GAAqC,WAAbA,EAAuB,CAE9E,IAAK,IAAI6M,EAAI,EAAGmhB,EAAMH,EAAiBhyB,OAAQgR,EAAImhB,EAAKnhB,IACtDihB,EAAehyB,KAAQsP,EAAjC,QAAkDyiB,EAAiBhhB,GAAnE,KAGQ8gB,EAAW,MADXA,EAAWG,EAAelkB,KAAK,UACvC,KAKIgkB,EAAiB9xB,KAAK0B,OAAOuuB,KAAK4B,IAGlC,IAAMvpB,EAAUwpB,EAAiB/xB,OAAS,EAAK+xB,EAAiBhkB,KAAK,SAAW,GAC5EvN,KAAKkwB,cAAcC,cAAmE,IAApDnwB,KAAKkwB,cAAcC,YAAYhf,QAAQpJ,IAC3E/H,KAAKkwB,cAAcC,YAAY1wB,KAAKsI,IAQxCkoB,EAAFxmB,UAAAsjB,cAAE,SAAc3gB,OACZ,IAAuB,IAAA6R,EAAAiB,EAAAxD,OAAOyD,KAAK/S,IAAvCgT,EAAAnB,EAAAhgB,QAAAmhB,EAAA/gB,KAAA+gB,EAAAnB,EAAAhgB,OAAA,CAAS,IAAM8L,EAAfqV,EAAArhB,MAOM,GANIqO,EAAQ3B,eAAeV,KACzB/J,KAAKkwB,cAAcnmB,GAAYqC,EAAQrC,IAKxB,YAAbA,GAAuC,WAAbA,EAAuB,CACnD,IAAII,EAASiC,EAAQrC,GAGjB/J,KAAKkwB,cAAc0B,WAAaC,EAASC,aACvC3kB,MAAMC,QAAQjD,GAChBA,EAAO0E,QAAQ,SAACQ,EAAO0P,EAAOgN,GAC5BA,EAAWhN,GAAS5d,OAAO4uB,UAAU1gB,KAGvClF,EAAShJ,OAAO4uB,UAAU3jB,EAAQrC,KAGtC/J,KAAKkwB,cAAcxE,QAAUvhB,EAC7BnK,KAAKowB,eAAiBjmB,iHAK9B8lB,EAvLA,GC4BM9F,GAAyB,GAI/B4H,GAAA,WAeE,SAAFA,EAAsBC,GAAAhyB,KAAtBgyB,aAAsBA,EANtBhyB,KAAAka,gBACIoW,IAAKnG,GACLuB,QAAS,GACTkG,SAAUC,EAASC,mBAKrBC,EAAFtoB,UAAAoe,WAAE,WACE,OAAO7nB,KAAKgyB,aAAanK,cAG3BkK,EAAFtoB,UAAAmC,KAAE,SAAKQ,EAAsBpE,EAAyB6D,GAClD7L,KAAKgM,MAAQH,EACb,IAAMomB,EAAVvW,OAAAC,UAA+B3b,KAAKka,eAAmB9N,GAC/CpE,GAAcA,EAAWwjB,WAC3ByG,EAAc3B,IAAMtoB,EAAWwjB,UAEjCxrB,KAAKgyB,aAAa5lB,QAAtBsP,OAAAC,UAAqCsW,GAAe3B,IAAK2B,EAAc3B,KAAOtwB,KAAKka,eAAeoW,MAC9FtwB,KAAKoM,QAAUpM,KAAKgyB,aAAa5lB,QACjCpM,KAAKgI,WAAaA,EAGlBhI,KAAKusB,oBACHO,WAAY,EACZtB,SAAUxrB,KAAKgyB,aAAa5lB,QAAQkkB,KAAOtwB,KAAKka,eAAeoW,KAG7DzkB,GAAQA,EAAKgB,YAAchB,EAAKmJ,aAClChV,KAAK2iB,mBAAqB9W,EAAKgB,cAAgBT,EAArD,kBACMpM,KAAK2iB,mBAAqB3iB,KAAK2iB,mBAAmB5a,OAAO,SAAC+Y,GAAmB,OAACA,EAAO0H,mBAErFxoB,KAAKiM,aAAeJ,EAAKmJ,eAI7B+c,EAAFtoB,UAAAsjB,cAAE,SAAcnM,GACZ5gB,KAAKoM,QAATsP,OAAAC,UAAwB3b,KAAKoM,QAAYwU,IAGvCmR,EAAFtoB,UAAAynB,mBAAE,SAAmBniB,GACjB/O,KAAKgyB,aAAad,mBAAmBniB,IAIvCgjB,EAAFtoB,UAAAiY,kBAAE,WACE,OAAO1hB,KAAKqsB,iBAId0F,EAAFtoB,UAAA6iB,qBAAE,WACE,OAAOtsB,KAAKusB,oBAIdwF,EAAFtoB,UAAA+iB,kBAAE,WACE,OAAOxsB,KAAKysB,iBAMdsF,EAAFtoB,UAAAijB,uBAAE,WACE1sB,KAAKgyB,aAAajF,eAChBwD,KAAM,KAIVwB,EAAFtoB,UAAAknB,iBAAE,SAAiB5hB,EAAmBhR,EAAem0B,GACjDlyB,KAAKgyB,aAAarB,iBAAiB5hB,EAAWhR,EAAOm0B,IAMvDH,EAAFtoB,UAAAqT,gBAAE,SAAgBW,EAAc3I,GAA9B,IAAFxK,EAAAtK,KACU4gB,EAA6B9L,EAAKjJ,KAAKmJ,aACvC0I,EAAakD,EAAejD,mBAAqBiD,EAAehD,kBAEtE,GAAIF,IAAetP,UACjB,MAAM,IAAInM,MAAM,wFAIlB,IAAI+qB,EAAsB,GACtBvP,GAAyB,UAAfA,EAAM1S,MAAmC,YAAf0S,EAAM1S,OAC5CiiB,EAAsBtP,EAAWuP,sBApGA,KAoHnC,OAbgB,IAAItvB,QAAgB,SAACC,EAASC,GAG5CqvB,aAAaxE,IACbA,GAAQyE,WAAW,WAEjB7iB,EAAK8iB,cAActY,EAAK2J,eAExBnU,EAAKoiB,yBACL9uB,EAAQ0M,EAAK0nB,aAAanK,eACzBmF,MASP+E,EAAFtoB,UAAA4jB,oBAAE,SAAoB5P,EAAc3I,GAChC,IAAM0W,IAAa1W,EAAK0W,UAzHF,IA6HtB,OAHAxrB,KAAKstB,iBAAiBxY,EAAKyY,QAAS/B,GAG7BxrB,KAAKgyB,aAAanK,cAM3BkK,EAAFtoB,UAAA+jB,cAAE,SAAc/P,EAAc3I,GAC1B,IAAM2Y,EAAe3Y,EAAoB,gBAAIA,EAAK4Y,SAAW,IAAIvgB,OAAQwgB,QAAS7Y,EAAK6Y,QAASC,QAAS9Y,EAAK8Y,UAM9G,OAHA5tB,KAAK6tB,cAAcJ,GAGZztB,KAAKgyB,aAAanK,cAO3BkK,EAAFtoB,UAAA2jB,cAAE,SAAc3O,EAAgDqP,GAC5D9tB,KAAKqsB,gBAAkBrsB,KAAK+tB,yBAAyBtP,GACrD,IAAI6S,EAAW,GACTrD,KAGVkE,EAAA,SAAevT,GACT,GAAIH,EAAchU,eAAemU,GAAW,CAC1C,IAAMwT,EAAe3T,EAAcG,GAG/B9P,OAAZ,EAQQ,KANEA,EADEgf,GAAqB3gB,MAAMC,QAAQilB,EAAK1P,oBAC9B0P,EAAK1P,mBAAmBrgB,KAAK,SAACwe,GACxC,OAAOA,EAAO7S,KAAOmkB,EAAaxT,WAGxBwT,EAAatjB,WAGzB,MAAM,IAAI7M,MAAM,+KAGlB,IAAI8M,EAAYD,EAAU0Q,YAAc1Q,EAAU2Q,kBAAoB3Q,EAAUO,OAASP,EAAUG,MAAQ,GACrGzM,EAAYsM,EAAU/D,MAAQ,SAC9B4I,GAAeye,EAAeA,EAAaze,YAAc,UAC3D+L,EAAmB0S,EAAatf,WAKpC,QAJgC,IAArB4M,IACTA,EAAmB,IAGW,iBAArBA,IAAkC/L,EAC3C,MAAM,IAAI1R,MAAM,8PAIlB,IAAM0d,GADND,EAAmB,GAAKA,GACSze,MAAM,yCACjC0C,EAAWyuB,EAAazuB,WAAa,EAAYgc,EAAQ,GAAK,IAChEqO,EAAiBrO,EAAWA,EAAQ,GAAK,GACvCC,EAAmBD,EAAWA,EAAQ,GAAmB,OAAbhc,EAAoB,IAAM,GACtE2uB,EAAmBF,EAAaG,qBAAsB,EAG5D,GAAIxjB,GAA6B,KAAhBif,SACfqE,EAAKnB,mBAAmBniB,cAS1B,GAJAif,EAAcA,EAAYhtB,QAAQ,IAAK,MACvCgtB,EAAcwE,mBAAmBxE,GAG7BsE,EAEEvjB,GACFsjB,EAAK1B,iBAAiB5hB,EAAW2Q,EAAkB/L,OAEhD,CASL,GARA2d,EAAW,GAGPe,EAAKL,aAAa5lB,QAAQwlB,WAAaC,EAASC,aAClD/iB,EAAY5N,OAAO4uB,UAAUhhB,GAAa,KAIxC4E,GAAeA,EAAYnU,OAAS,EAAG,CACzC,IAAMiyB,KAEN,GAAiB,OAAb9tB,EAAmB,CAErB,IAAK,IAAI4M,EAAI,EAAGmhB,EAAM/d,EAAYnU,OAAQ+Q,EAAImhB,EAAKnhB,IACjDkhB,EAAehyB,KAAQsP,EAAvC,QAAwD4E,EAAYpD,GAApE,KAGc+gB,EAAW,KADXA,EAAWG,EAAelkB,KAAK,SAC7C,SACmB,GAAiB,QAAb5J,GAAmC,UAAbA,GAAqC,WAAbA,EAAuB,CAE9E,IAAK,IAAI6M,EAAI,EAAGmhB,EAAMhe,EAAYnU,OAAQgR,EAAImhB,EAAKnhB,IACjDihB,EAAehyB,KAAQsP,EAAvC,QAAwD4E,EAAYnD,GAApE,KAGc8gB,EAAW,KADXA,EAAWG,EAAelkB,KAAK,UAC7C,UAEiB,GAAiB,MAAb5J,GAAiC,OAAbA,GAAkC,OAAbA,GAAuC,KAAlBic,EAEvE0R,EAAyB,MAAb3tB,GAAiC,OAAbA,EAC5B,YAAYoL,EAA5B,MAA2Cif,EAA3C,KACgB,cAAcjf,EAA9B,MAA6Cif,EAA7C,UACiB,GAAIxrB,IAAcE,EAAUa,KAAM,CAEvC,IAAMkvB,EAAgBttB,EAAa6oB,GAAa,GAC5CyE,IACFnB,EAAcviB,EAA5B,IAAyCsjB,EAAKK,iBAAiB/uB,GAA/D,aAAqF8uB,EAArF,UAEqBjwB,IAAcE,EAAU+B,OAG/B6sB,EADe,KAAb3tB,EACS,gBAAgBqqB,EAAzC,MAA0Djf,EAA1D,IAG4BA,EAA5B,IAAyCsjB,EAAKK,iBAAiB/uB,GAA/D,KAA6EqqB,EAA7E,KAIYA,EAAcxrB,IAAcE,EAAUkC,OAASopB,EAAc,IAAIA,EAA7E,IACYsD,EAAcviB,EAA1B,IAAuCsjB,EAAKK,iBAAiB/uB,GAA7D,IAA0EqqB,GAI/C,KAAbsD,IACFrD,EAAcxuB,KAAK0B,OAAOuuB,KAAK4B,IAC/Be,EAAK1B,iBAAiB5hB,GAAa,GAAI2Q,EAAkB/L,cA3GjE,IAAK,IAAMiL,KAAYH,EAA3B0T,EAAevT,GAkHX5e,KAAKgyB,aAAajF,eAChBhlB,OAASkmB,EAAczuB,OAAS,EAAKyuB,EAAc1gB,KAAK,SAAW,GACnEgjB,KAAMniB,aASV2jB,EAAFtoB,UAAA6jB,iBAAE,SAAiBC,EAAiB/B,GAChCxrB,KAAKusB,oBACHO,WAAYS,EACZ/B,SAANA,GAGIxrB,KAAKgyB,aAAajF,eAChBuD,IAAK9E,EACL+E,MAAOhD,EAAU,GAAK/B,KAQ1BuG,EAAFtoB,UAAAokB,cAAE,SAAcJ,EAA6BY,GACzC,IAAIsE,KACEC,KAEN,IAAKnF,GAAeY,EAAe,EAEjCsE,EAActE,GACFxf,QAAQ,SAAC5G,GAAW,OAAAA,EAAOqiB,UAAYriB,EAAOqiB,UAAUlkB,gBAGpE,IAAMooB,EAAiBmE,EAAYlwB,IAAI,SAACwF,GAKtC,OAJA2qB,EAAYnzB,MACVmf,SAAU3W,EAAO2W,SAAW,GAC5B0L,UAAWriB,EAAOqiB,aAGlB1L,SAAU3W,EAAO2W,SACjBgP,QAAS3lB,EAAOqiB,UAAUjkB,gBAAkBkkB,GAAcpiB,OAG9DnI,KAAKgM,MAAMyiB,eAAeD,QACrB,GAAIf,IAAgBY,EAEzB,GAAIZ,GAAsC,IAAvBA,EAAYjuB,OAC7BmzB,EAAc,IAAIxlB,MAAMnN,KAAKka,eAAewR,cAE5C,GAAI+B,EAAa,KACf,IAAqB,IAAAoF,EAAA3T,EAAAuO,GAA/BqF,EAAAD,EAAA50B,QAAA60B,EAAAz0B,KAAAy0B,EAAAD,EAAA50B,OAAA,CAAe,IAAM6iB,EAArBgS,EAAA/0B,MACY,GAAI+iB,EAAO6M,QAAS,CAClB,IAAI5e,GAAa+R,EAAO6M,QAAQnO,YAAcsB,EAAO6M,QAAQiB,kBAAoB9N,EAAO6M,QAAQte,OAASyR,EAAO6M,QAAQ1f,IAAM,GAC1HjO,KAAKgyB,aAAa5lB,QAAQwlB,WAAaC,EAASC,aAClD/iB,EAAY5N,OAAO4uB,UAAUhhB,IAG/B6jB,EAAYnzB,MACVmf,SAAU7P,EACVub,UAAWxJ,EAAO8M,QAAU,MAAQ,+GAI1C+E,EAAcC,EAOpB,IAAMG,GADNJ,EAAW,GACmBlwB,IAAI,SAACwF,GAAW,OAAGA,EAAO2W,SAA5D,IAAwE3W,EAAOqiB,UAAUlkB,gBAAiBmH,KAAK,KAS3G,OARAvN,KAAKgyB,aAAajF,eAChBrB,QAAU1rB,KAAKgyB,aAAa5lB,QAAQwlB,WAAaC,EAASC,WAAc3wB,OAAO4uB,UAAUgD,GAAaA,IAIxG/yB,KAAKysB,gBAAe,EAGbzsB,KAAKgyB,aAAanK,sBAUnBkK,EAAVtoB,UAAAskB,yBAAU,SAAyBtP,GAI/B,OAFgE,iBAAlBA,EAA8B/C,OAAOyD,KAAKV,GAAehc,IAAI,SAAA+L,GAAO,OAAAiQ,EAAcjQ,KAAQiQ,GAEpHhc,IAAI,SAACsF,GACvB,IAAM+G,EAAY/G,EAAO+G,UAEnBygB,GADS,IAAezgB,EAAUE,WAAaF,EAAUG,OAC5B2P,SAAU7W,EAAO6W,UAAY,KAShE,OARI7W,EAAOpE,WACT4rB,EAAU5rB,SAAWoE,EAAOpE,UAE1BwJ,MAAMC,QAAQrF,EAAO4L,aACvB4b,EAAU5b,YAAc5L,EAAO4L,YAE/B4b,EAAUzc,WAAa/K,EAAO+K,WAEzByc,KASHwC,EAAVtoB,UAAAipB,iBAAU,SAAiB/uB,GACvB,IAAIlB,EAAM,GACV,OAAQkB,GACN,IAAK,IACHlB,EAAM,KACN,MACF,IAAK,KACHA,EAAM,KACN,MACF,IAAK,IACHA,EAAM,KACN,MACF,IAAK,KACHA,EAAM,KACN,MACF,IAAK,KACL,IAAK,KACHA,EAAM,KACN,MACF,IAAK,IACL,IAAK,KACL,QACEA,EAAM,KAIV,OAAOA,KAtZX,mBADAsI,KAACC,EAAAA,kDAPDD,KAASklB,MCnBT,ICKIvH,GDLJsK,GAAA,wBACAhzB,KAAAyc,cAA+B,IAAIhO,MAAMiO,aAmEzC,OAhEEsW,EAAFvpB,UAAAwpB,mBAAE,SAAmBpnB,EAAWC,EAAyBC,GAErD/L,KAAKyc,cAAcW,UAAUvR,EAAKqnB,aAAc,SAACh1B,EAAU4W,GACzD,GAAK5W,GAAM4W,GAASA,EAAKjJ,MAAQiJ,EAAKqe,OAAS/kB,WAAc0G,EAAKjJ,KAAKgB,YAAeiI,EAAKjJ,KAAKunB,YAAhG,CAGA,IAAMtS,EAAShM,EAAKjJ,KAAKgB,aAAaiI,EAAKqe,MAG3C,GAAmC,mBAAxBrS,EAAOoS,aAA6B,CAE7C,IAAMG,GACJ/jB,IAAKwF,EAAKxF,IACV6jB,KAAMre,EAAKqe,KACXpnB,SAAVA,EACUunB,eAAgBxnB,EAChBD,KAAVA,EACUiD,UAAWgS,EACXyS,YAAaze,EAAKjJ,KAAKunB,YAAYte,EAAKxF,MAI1CwR,EAAOoS,aAAaG,QAM1BL,EAAFvpB,UAAA+pB,cAAE,SAAc3nB,EAAWC,EAAyBC,GAChD/L,KAAKyc,cAAcW,UAAUvR,EAAK4nB,QAAS,SAACv1B,EAAU4W,GACpD,GAAK5W,GAAM4W,GAASA,EAAKjJ,MAAQiJ,EAAKqe,OAAS/kB,WAAc0G,EAAKjJ,KAAKgB,YAAeiI,EAAKjJ,KAAKunB,YAAhG,CAGA,IAAMtS,EAAShM,EAAKjJ,KAAKgB,aAAaiI,EAAKqe,MAG3C,GAAkC,mBAAvBrS,EAAO4S,YAA4B,CAE5C,IAAML,GACJ/jB,IAAKwF,EAAKxF,IACV6jB,KAAMre,EAAKqe,KACXpnB,SAAVA,EACUunB,eAAgBxnB,EAChBD,KAAVA,EACUiD,UAAWgS,EACXyS,YAAaze,EAAKjJ,KAAKunB,YAAYte,EAAKxF,MAI1CwR,EAAO4S,YAAYL,GACnBn1B,EAAEy1B,2BAKA9nB,EAAKmJ,YAAenJ,EAAKmJ,aAAa4e,aAM9CZ,EAAFvpB,UAAAwW,QAAE,WACEjgB,KAAKyc,cAAc0D,kBAEvB6S,EApEA,GECAa,GAAA,WAAA,SAAAA,KA+IA,OA1IEA,EAAFpqB,UAAAmC,KAAE,SAAKC,EAAMioB,EAAkBhoB,EAAaC,GACxC/L,KAAKgM,MAAQH,EACb7L,KAAKiM,aAAeH,EACpB9L,KAAKkM,UAAYH,GAGnB8nB,EAAFpqB,UAAAsqB,uBAAE,SAAuBjmB,GACrB,IAAK9N,KAAKgM,OAA2C,mBAA3BhM,KAAKgM,MAAMonB,YACnC,MAAM,IAAInxB,MAAM,2CAElB,OAAOjC,KAAKgM,MAAMonB,YAAYtlB,IAIhC+lB,EAAFpqB,UAAAuqB,mBAAE,SAAmBC,GAAnB,IAAF3pB,EAAAtK,KACI,OAAO,SAAC8N,GACN,IAAM7D,EAAOK,EAAK4B,UAAU8B,QAAQF,GAChComB,GACFC,WAAY,IAcd,MAZoC,iBAAzBF,GAAsC3nB,EAAE0E,cAAcijB,KAC/DC,EAAOD,EAAqBnmB,IAG1B7D,GAAQA,EAAKmqB,SACfF,EAAKC,YAAcD,EAAKC,YAAc,IAAM,UAE1ClqB,GAAQA,EAAKoqB,WACfH,EAAKC,YAAc,IAAIlqB,EAAKoqB,SAC5BH,EAAKC,YAAc,OAAOrmB,GAGrBomB,IAUXL,EAAFpqB,UAAA6qB,aAAE,SAAaxmB,EAAmBymB,GAAhC,IAAFjqB,EAAAtK,KAEI,QAFJ,IAAAu0B,IAAkCA,EAAlC,OAESv0B,KAAKgM,MAAMwoB,oBAAqB,CACnC,IAAM3Q,EAAqB,IAAIpV,MAAMqV,kBAAkB9jB,KAAKiM,aAAa8X,yBACzE/jB,KAAKgM,MAAMgY,kBAAkBH,GAG/B7jB,KAAKgM,MAAMyoB,iBAAiB3mB,IAC5B9N,KAAKkM,UAAUwoB,gBAAkB10B,KAAKg0B,mBAAmBh0B,KAAKkM,UAAUwoB,iBAExE,IAAMzqB,EAAOjK,KAAKkM,UAAU8B,QAAQF,GACpC,GAAI7D,GAAQA,EAAKgE,GAAI,CACnBhE,EAAKoqB,SAAW,YAChBr0B,KAAKkM,UAAUyoB,WAAW1qB,EAAKgE,GAAIhE,GACnC,IAAM6B,EAAc9L,KAAKgM,MAAMgJ,aAG/B1I,EAAE,IAAIR,EAAY8oB,QACbtyB,KAAK,iBAAiBwL,GACtBhM,QAGLqrB,WAAW,WACT,GAAIljB,GAAQA,EAAKgE,GAAI,QACZhE,EAAKoqB,SACI/pB,EAAK4B,UAAU8T,WAAW/V,EAAKgE,MAC/BG,WACd9D,EAAK4B,UAAUyoB,WAAW1qB,EAAKgE,GAAIhE,KAGtCsqB,EAAY,MAInBV,EAAFpqB,UAAAorB,gBAAE,WACE,OAAO70B,KAAKgM,MAAM6oB,mBAEpBhB,EAAFpqB,UAAAqrB,eAAE,SAAe/U,GACb/f,KAAKgM,MAAMyoB,iBAAiB1U,KAE9B8T,EAAFpqB,UAAAgrB,gBAAE,SAAgBM,GACd/0B,KAAKgM,MAAMyoB,gBAAgBM,IAG7BlB,EAAFpqB,UAAAurB,WAAE,WACMh1B,KAAKgM,OAA0C,mBAA1BhM,KAAKgM,MAAMgT,aAClChf,KAAKgM,MAAMgT,aACXhf,KAAKgM,MAAMiT,WAQf4U,EAAFpqB,UAAAwrB,kBAAE,SAAkBhrB,GAChB,IAAKjK,KAAKgM,QAAUhM,KAAKiM,eAAiBjM,KAAKkM,UAC7C,MAAM,IAAIjK,MAAM,sDAElB,IAAKjC,KAAKiM,eAAkBjM,KAAKiM,aAAa0X,yBAA2B3jB,KAAKiM,aAAagY,mBACzF,MAAM,IAAIhiB,MAAM,wKAIlBjC,KAAKkM,UAAUgpB,WADH,EACmBjrB,GAC/BjK,KAAKgM,MAAMmpB,kBAAkB,GAC7Bn1B,KAAKs0B,aAAa,EAAG,MAGrBt0B,KAAKkM,UAAU2S,WAOjBgV,EAAFpqB,UAAA2rB,mBAAE,SAAmBnrB,GACjB,IAAMqF,EAAMtP,KAAKkM,UAAUmpB,WAAWprB,EAAKgE,IACrCqnB,EAAWrrB,GAASA,EAAKQ,eAAe,MAAcR,EAAKgE,IAAT,EAExD,IAAgB,IAAZqnB,EACF,MAAM,IAAIrzB,MAAM,4EAGFjC,KAAKkM,UAAU8T,WAAWsV,KAC1BlnB,YAEdpO,KAAKkM,UAAUyoB,WAAWW,EAAQrrB,GAGlCjK,KAAKs0B,aAAahlB,EAAK,MAGvBtP,KAAKkM,UAAU2S,YAGrBgV,EA/IA,GCJA0B,GAAA,WAAA,SAAAA,KAUA,OATSA,EAATC,2BAAE,SAAkC1gB,GAChC,KAAKA,GAASA,EAAKjJ,MAASiJ,EAAKjJ,KAAKgB,YAAeiI,EAAKjJ,KAAKunB,aAC7D,MAAM,IAAInxB,MAAM,mGAElB,OACE6M,UAAWgG,EAAKjJ,KAAKgB,aAAaiI,EAAKqe,MACvCI,YAAaze,EAAKjJ,KAAKunB,YAAYte,EAAKxF,OAG9CimB,EAVA,GCFAE,GAAA,wBAwBAz1B,KAAA01B,mBAAuB,IAAI3Y,EAAAA,QA4F3B,OApFE0Y,EAAFhsB,UAAAmC,KAAE,SAAKC,EAAW2W,EAA8BmT,GAA9C,IAAFrrB,EAAAtK,KACIA,KAAKgM,MAAQH,EACb7L,KAAKwiB,cAAgBA,EACrBxiB,KAAK21B,YAAcA,EACnB31B,KAAKiM,aAAgBJ,GAAQA,EAAKmJ,WAAcnJ,EAAKmJ,gBAGrDhV,KAAK41B,mBAAqB51B,KAAKwiB,cAAc1F,gBAAgBM,UAAU,SAACmD,GACtEjW,EAAKorB,mBAAmBz3B,MAAOsX,QAAUsgB,UAAWtV,EAAgBxV,KAAM+qB,GAAc/tB,QAAUguB,UAAWzrB,EAAK0rB,0BAEpHh2B,KAAKi2B,mBAAqBj2B,KAAK21B,YAAYnI,cAAcpQ,UAAU,SAACkR,GAClEhkB,EAAKorB,mBAAmBz3B,MAAOsX,QAAUsgB,UAAWvH,EAAgBvjB,KAAM+qB,GAAc7tB,QAAU8tB,UAAWzrB,EAAK0rB,2BAItHP,EAAFhsB,UAAAwW,QAAE,WACEjgB,KAAK41B,mBAAmBxV,cACxBpgB,KAAKi2B,mBAAmB7V,eAO1BqV,EAAFhsB,UAAAusB,oBAAE,WACE,IAAMD,GACJlU,QAAS7hB,KAAK0hB,oBACdwU,QAASl2B,KAAKwsB,qBAGV2J,EAAoBn2B,KAAKssB,uBAI/B,OAHI6J,IACFJ,EAAU/tB,WAAamuB,GAElBJ,GAOTN,EAAFhsB,UAAAiY,kBAAE,WACE,GAAI1hB,KAAKiM,cAAgBjM,KAAKiM,aAAa0R,kBAAmB,CAC5D,IAAM8D,EAAiBzhB,KAAKiM,aAAa0R,kBAAkBG,QAC3D,GAAI2D,GAAkBA,EAAeC,kBACnC,OAAOD,EAAeC,yBAEnB,GAAI1hB,KAAKwiB,eAAiBxiB,KAAKwiB,cAAclC,uBAClD,OAAOtgB,KAAKwiB,cAAclC,yBAE5B,OAAO,MAOTmV,EAAFhsB,UAAA6iB,qBAAE,WACE,GAAItsB,KAAKiM,cAAgBjM,KAAKiM,aAAa0R,kBAAmB,CAC5D,IAAM8D,EAAiBzhB,KAAKiM,aAAa0R,kBAAkBG,QAC3D,GAAI2D,GAAkBA,EAAe6K,qBACnC,OAAO7K,EAAe6K,uBAK1B,OAAO,MAOTmJ,EAAFhsB,UAAA+iB,kBAAE,WACE,GAAIxsB,KAAKiM,cAAgBjM,KAAKiM,aAAa0R,kBAAmB,CAC5D,IAAM8D,EAAiBzhB,KAAKiM,aAAa0R,kBAAkBG,QAC3D,GAAI2D,GAAkBA,EAAe+K,kBACnC,OAAO/K,EAAe+K,yBAEnB,GAAIxsB,KAAK21B,aAAe31B,KAAK21B,YAAYS,uBAC9C,OAAOp2B,KAAK21B,YAAYS,yBAE1B,OAAO,MAEXX,EApHA,GHYAY,GAAA,WAAA,SAAAA,KAqHA,OAjHEA,EAAF5sB,UAAAmC,KAAE,SAAKC,EAAWC,GACd9L,KAAKgM,MAAQH,EACb7L,KAAKiM,aAAeH,GAMtBuqB,EAAF5sB,UAAA6sB,yBAAE,WAAA,IAAFhsB,EAAAtK,KAEUu2B,EAAajqB,EAAE,KAAItM,KAAKiM,cAAgBjM,KAAKiM,aAAa2oB,OAAS50B,KAAKiM,aAAa2oB,OAAS,UACpG,GAAI2B,IAAenoB,WAAamoB,EAAWpwB,WAAaiI,UACtD,OAAO,KAITpO,KAAKw2B,aAILlqB,EAAEmqB,QAAQC,GAAG,cAAe,WAE1BpsB,EAAKksB,aACLlsB,EAAKksB,gBAQTH,EAAF5sB,UAAAktB,2BAAE,SAA2B7qB,GACzB,IAAMyqB,EAAajqB,EAAE,IAAIR,EAAY8oB,QAC/BgC,EAAgB9qB,EAAY+qB,YAAc/qB,EAAY+qB,WAAWC,YAAexqB,EAAE,IAAIR,EAAY+qB,WAAWC,aAAiBxqB,EAAE,IAAIR,EAAYirB,iBAChJC,EAAY1qB,EAAEmqB,QACpB,GAAIO,IAAc5oB,WAAawoB,IAAiBxoB,WAAamoB,IAAenoB,UAC1E,OAAO,KAKT,IAAI6oB,EAAiBnrB,EAAY+qB,YAAc/qB,EAAY+qB,WAAWI,cAAiBnrB,EAAY+qB,WAAWI,cAjDlF,GAkDxBA,IAAkBnrB,EAAYorB,kBAAoBl3B,KAAKiM,aAAa0R,qBACtEsZ,GAlD6B,IAqD/B,IAAME,EAAaH,EAAUI,UAAY,EACnCC,EAAiBd,EAAWpwB,SAE5BmxB,EAAkBH,GADDE,IAAmBjpB,UAAaipB,EAAe/G,IAAM,GACvB2G,EAC/CM,EAAiBX,EAAaxnB,SAAW,EACzCooB,EAAa1rB,EAAY+qB,YAAc/qB,EAAY+qB,WAAWW,UAAY,EAAK1rB,EAAY+qB,WAAWW,UA7DpF,IA8DlB7S,EAAY7Y,EAAY+qB,YAAc/qB,EAAY+qB,WAAWlS,SAAW,EAAK7Y,EAAY+qB,WAAWlS,SA7DnF,IA+DnB8S,EAAYH,EACZI,EAAY5rB,EAAY+qB,YAAc/qB,EAAY+qB,WAAWc,YAAeJ,EAAiBzrB,EAAY+qB,WAAWc,YAAcJ,EAQtI,OAPIE,EAAYD,IACdC,EAAYD,GAEVE,EAAW/S,IACb+S,EAAW/S,IAIXyS,OAAQK,EACRroB,MAAOsoB,IAOXrB,EAAF5sB,UAAAwW,QAAE,WACE3T,EAAEmqB,QAAQ7gB,IAAI,gBAIhBygB,EAAF5sB,UAAA+sB,WAAE,SAAWoB,EAAgBC,GAA3B,IAAFvtB,EAAAtK,KACI,IAAKA,KAAKgM,QAAUhM,KAAKiM,aACvB,MAAM,IAAIhK,MAAM,2PAMlB21B,EAAQA,GAAS,EAEjB1K,aAAaxE,IACbA,GAAQyE,WAAW,WAEjB0K,EAAWA,GAAYvtB,EAAKqsB,2BAA2BrsB,EAAK2B,cAC5D,IAAM6rB,EAAUxrB,EAAE,IAAIhC,EAAK2B,aAAa2oB,YAClCmD,EAAmBzrB,EAAE,IAAIhC,EAAK2B,aAAa8qB,qBAE7Cc,GAAYC,EAAQt4B,OAAS,IAE/Bs4B,EAAQV,OAAOS,EAAST,QACxBU,EAAQ1oB,MAAMyoB,EAASzoB,OACvB2oB,EAAiBX,OAAOS,EAAST,QACjCW,EAAiB3oB,MAAMyoB,EAASzoB,OAK2B,OAAvD,IAAI8f,OAAO,cAAc8I,KAAK3mB,UAAU4mB,YAAuB3tB,EAAK0B,OACtE1B,EAAK0B,MAAMksB,eAIb5tB,EAAK0B,MAAM8Z,oBAEZ8R,IAEPvB,EArHA,GIHA8B,GAAA,wBACAn4B,KAAAo4B,wBACAp4B,KAAAyc,cAA+B,IAAIhO,MAAMiO,aAIzC1c,KAAAwtB,cAAkB,IAAIzQ,EAAAA,QAiLtB,OA1KEob,EAAF1uB,UAAA4uB,oBAAE,SAAoBxsB,EAAWC,GAC7B9L,KAAKgM,MAAQH,EACb7L,KAAKiM,aAAeH,EACpB9L,KAAKkd,iBAAmBrR,EAAKysB,OAG7Bt4B,KAAKkd,iBAAiBE,UAAUpd,KAAKu4B,6BAA6Bjb,KAAKtd,QAGnEm4B,EAAR1uB,UAAA8uB,6BAAQ,SAA6B9a,EAAc3I,yGAC/C,IAAKA,IAASA,EAAKjJ,KACjB,MAAM,IAAI5J,MAAM,wJAKlB,GAHM6J,EAA0BgJ,EAAKjJ,KAAKmJ,mBACpC0I,EAAa5R,EAAY6R,mBAAqB7R,EAAY8R,qBAE5CF,EAAWG,UAAYH,EAAWI,QACpD,MAAM,IAAI7b,MAAM,oFAWI,OATlByb,EAAWK,YACbL,EAAWK,aAEPC,EAAQN,EAAWI,QAAQ0P,cAAc/P,EAAO3I,GACtD9U,KAAKw4B,gBAAgB,UAIfra,EAAsBT,EAAWG,QAAQG,IACnD,EAAgCtc,EAAcyc,kBAApCC,EAAgBH,EAA1Bte,SAGyB+d,EAAWW,qBAC9BX,EAAWW,oBAAoBD,GAI7BV,EAAWY,aACbZ,EAAWY,YAAYF,aAU3B+Z,EAAF1uB,UAAAgvB,kBAAE,SAAkB5sB,EAAWC,EAAyBC,EAAeiR,GAArE,IAAF1S,EAAAtK,KACIA,KAAKgM,MAAQH,EACb7L,KAAKiM,aAAeH,EACpB9L,KAAKkd,iBAAmBrR,EAAKysB,OAE7Bt4B,KAAKkd,iBAAiBE,UAAU,SAAClf,EAAQ4W,GAGvC,IAAM2Y,EAAe3Y,EAAoB,gBAAIA,EAAK4Y,SAAW,IAAIvgB,OAAOygB,QAAS9Y,EAAK8Y,QAASD,QAAS7Y,EAAK6Y,UAG7GrjB,EAAK8tB,wBACDjrB,MAAMC,QAAQqgB,IAChBA,EAAY5e,QAAQ,SAAC6pB,GACfA,EAAW/K,SACbrjB,EAAK8tB,qBAAqB34B,MACxBmf,SAAU8Z,EAAW/K,QAAQ1f,GAC7Bqc,UAAWoO,EAAW9K,QAAUrD,GAAcpiB,IAAMoiB,GAAcliB,SAM1EiC,EAAKquB,mBAAmB9sB,EAAMC,EAAaC,EAAU0hB,GACrDnjB,EAAKkuB,gBAAgB,WAGvBx4B,KAAKyc,cAAcW,UAAUrR,EAAS6sB,kBAAmB,SAAC16B,EAAU4W,GAE9DA,EAAK+jB,QAAU,GACjBvuB,EAAKwuB,iBAAiBjtB,EAAMC,EAAaC,EAAUiR,MAKzDmb,EAAF1uB,UAAA2sB,uBAAE,WACE,OAAOp2B,KAAKo4B,sBAUdD,EAAF1uB,UAAAqvB,iBAAE,SAAiBjtB,EAAWC,EAAyBC,EAAeiR,GAApE,IAAF1S,EAAAtK,KACU0tB,KAEN,GADA1tB,KAAKo4B,wBACDtsB,GAAeA,EAAY8V,SAAW9V,EAAY8V,QAAQsU,QAAS,CACrE,IAAM6C,EAAUjtB,EAAY8V,QAAQsU,QACpClZ,EAAkBnO,QAAQ,SAACC,GACzB,IAAMiT,EAAegX,EAAQz2B,KAAK,SAAC02B,GACjC,OAAOA,EAAcpa,WAAa9P,EAAUb,KAE1C8T,IACF2L,EAASjuB,MACPmf,SAAU9P,EAAUb,GACpB2f,QAAW7L,EAAauI,UAAUjkB,gBAAkBkkB,GAAcpiB,IAClEwlB,QAAS7e,IAIXxE,EAAK8tB,qBAAqB34B,MACxBmf,SAAU9P,EAAUb,GAAK,GACzBqc,UAAWvI,EAAauI,UAAUjkB,mBAKpCqnB,EAASluB,OAAS,IACpBQ,KAAK24B,mBAAmB9sB,EAAMC,EAAaC,EAAU2hB,GACrD7hB,EAAK4iB,eAAef,MAK1ByK,EAAF1uB,UAAAkvB,mBAAE,SAAmB9sB,EAAWC,EAAyBC,EAAe0hB,GACpE1hB,EAAStK,KAAK,SAACmJ,EAAeC,GAC5B,IAAK,IAAIzK,EAAI,EAAG64B,EAAIxL,EAAYjuB,OAAQY,EAAI64B,EAAG74B,IAAK,CAClD,IAAM84B,EAAgBzL,EAAYrtB,GAClC,GAAI84B,GAAiBA,EAAcvL,QAAS,CAC1C,IAAMlnB,EAAgByyB,EAActL,QAAU,GAAK,EAC7CuL,EAAYD,EAAcvL,QAAQnO,YAAc0Z,EAAcvL,QAAQlO,kBAAoByZ,EAAcvL,QAAQte,MAChH7M,EAAY02B,EAAcvL,QAAQ5iB,MAAQrI,EAAU+B,OAG1D,OAAO6B,EAFQsE,EAASuuB,GACTtuB,EAASsuB,GACe32B,EAAWiE,IAGtD,OAAO,IAEToF,EAAKmT,aACLnT,EAAKoT,UAGPkZ,EAAF1uB,UAAAwW,QAAE,WAEMjgB,KAAKkd,kBAAiE,mBAAtCld,KAAKkd,iBAAiBkD,aACxDpgB,KAAKkd,iBAAiBkD,cAIxBpgB,KAAKyc,cAAc0D,kBAQrBgY,EAAF1uB,UAAA+uB,gBAAE,SAAgBhX,GACd,GAAe,WAAXA,GAAuBxhB,KAAKiM,cAAgBjM,KAAKiM,aAAa0R,kBAAmB,CACnF,IAAI2Q,KACE7M,EAAiBzhB,KAAKiM,aAAa0R,kBAAkBG,QACvD2D,GAAkBA,EAAe+K,oBACnC8B,EAAiB7M,EAAe+K,qBAElCxsB,KAAKwtB,cAAcvvB,KAAKqwB,OACJ,UAAX9M,GACTxhB,KAAKwtB,cAAcvvB,KAAK+B,KAAKo2B,2BAGnC+B,EAvLA,GCAAiB,GAAA,WAIE,SAAFA,EAAsBtkB,GAAA9U,KAAtB8U,KAAsBA,EAClB9U,KAAK4L,OAwDT,OArDEwtB,EAAF3vB,UAAAmC,KAAE,WACE5L,KAAKq5B,OAAS/sB,EAAE,kEAChBtM,KAAKq5B,OAAO3gB,SAAS1Y,KAAK8U,KAAKqF,WAC/Bna,KAAKq5B,OAAOC,SAGdF,EAAF3vB,UAAAkM,QAAE,WACE3V,KAAKq5B,OAAOxjB,UAGdujB,EAAF3vB,UAAA6vB,MAAE,WACEt5B,KAAKq5B,OAAOC,SAGdF,EAAF3vB,UAAA0P,KAAE,WACEnZ,KAAKq5B,OAAOlgB,QAGdigB,EAAF3vB,UAAA4P,KAAE,WACErZ,KAAKq5B,OAAOhgB,QAGd+f,EAAF3vB,UAAA8vB,UAAE,SAAUtvB,GACRjK,KAAKw5B,eAAiBvvB,EAAKjK,KAAK8U,KAAKgM,OAAOzR,OACxCrP,KAAKw5B,aACPx5B,KAAKq5B,OAAOrQ,KAAK,WAAW,GAE5BhpB,KAAKq5B,OAAOrQ,KAAK,WAAW,IAIhCoQ,EAAF3vB,UAAAgwB,SAAE,WACEz5B,KAAKq5B,OAAOrQ,KAAK,WAAYhpB,KAAKq5B,OAAOrQ,KAAK,aAGhDoQ,EAAF3vB,UAAAiwB,eAAE,WACE,OAAO15B,KAAKq5B,OAAOrQ,KAAK,YAG1BoQ,EAAF3vB,UAAAkwB,WAAE,SAAW1vB,EAAW2vB,GACpB3vB,EAAKjK,KAAK8U,KAAKgM,OAAOzR,OAASuqB,GAGjCR,EAAF3vB,UAAAowB,eAAE,WACE,OAAQ75B,KAAK05B,mBAAqB15B,KAAKw5B,cAGzCJ,EAAF3vB,UAAAqwB,SAAE,WACE,OACEC,OAAO,EACPC,IAAK,OAGXZ,EA7DA,GCTAxkB,QAKQ,aASR,IAAAqlB,GAAA,WAKE,SAAFA,EAAsBnlB,GAAA9U,KAAtB8U,KAAsBA,EAClB9U,KAAK4L,OAyGT,OAtGEquB,EAAFxwB,UAAAmC,KAAE,WAAA,IAAFtB,EAAAtK,KACU8L,EAAc9L,KAAK8U,KAAKjJ,KAAKmJ,aACnChV,KAAKyW,YAAczW,KAAK8U,KAAK7K,KAAKjK,KAAK8U,KAAKgM,OAAOzR,QAAU,KAC7D,IAAM6G,EAAczS,EAAoCzD,KAAK8U,KAAKgM,OAAO/V,MAAQrI,EAAUc,SACrF2S,EAAe1S,EAAoCzD,KAAK8U,KAAKgM,OAAO1K,YAAc1T,EAAUY,SAC9F+S,EAAgBrW,KAAKsW,iBAAiBtW,KAAK8U,KAAKgM,OAAQhV,GACxDuK,EAAc7W,OAAS,IACzB6W,EAAgBA,EAAcE,UAAU,EAAG,IAG7C,IAAMC,GACJC,YAAazW,KAAKyW,YAClBC,UAAU,EACVC,UAAWT,EACXU,WAAYT,EACZW,eAAe,EACfC,OAA2B,OAAlBV,EAA0BrW,KAAKgX,oBAAoBX,GAAiB,KAC7EY,SAAU,SAACC,EAA4BC,EAAiBC,GACtD9M,EAAK4vB,SAKTl6B,KAAKq5B,OAAS/sB,EAAE,wCAAwCtM,KAAKyW,YAAjE,sCACIzW,KAAKq5B,OAAO3gB,SAAS1Y,KAAK8U,KAAKqF,WAC/Bna,KAAK0V,aAAgB1V,KAAKq5B,OAAO,IAA0C,mBAA7Br5B,KAAKq5B,OAAO,GAAG3hB,UAA4B1X,KAAKq5B,OAAO,GAAG3hB,UAAUlB,GAAiB,KACnIxW,KAAKqZ,QAGP4gB,EAAFxwB,UAAA6M,iBAAE,SAAiBxH,EAAmBhD,GAClC,IAAM6M,EAAS7M,EAAY6M,QAAU7J,EAAU6J,WAC/C,OAAIA,EAAOC,MAAQD,EAAOC,gBAAgB3N,EAAAA,iBACjC0N,EAAOC,KAAKC,YAGd,MAGTohB,EAAFxwB,UAAAuN,oBAAE,SAAoBD,GAElB,GAAe,OAAXA,EAAiB,CACnB,IAAM+B,EAAqBlE,QAAQ,uBAAuBmC,EAAhE,OAA6EgC,WACvE,OAAQD,GAAiBA,EAAc/B,GAAW+B,EAAc/B,GAAU,KAE5E,MAAO,MAGTkjB,EAAFxwB,UAAAkM,QAAE,WACE3V,KAAKmZ,OAELnZ,KAAKq5B,OAAOxjB,UAGdokB,EAAFxwB,UAAA4P,KAAE,WACMrZ,KAAK0V,cAAkD,mBAA3B1V,KAAK0V,aAAa4D,MAChDtZ,KAAK0V,aAAa4D,QAItB2gB,EAAFxwB,UAAA0P,KAAE,WACMnZ,KAAK0V,cAAmD,mBAA5B1V,KAAK0V,aAAa0D,OAChDpZ,KAAK0V,aAAa0D,SAItB6gB,EAAFxwB,UAAA6vB,MAAE,WACEt5B,KAAKq5B,OAAOC,SAGdW,EAAFxwB,UAAAywB,KAAE,WACEl6B,KAAK8U,KAAKqlB,iBAGZF,EAAFxwB,UAAA8vB,UAAE,SAAUtvB,GACRjK,KAAKyW,YAAcxM,EAAKjK,KAAK8U,KAAKgM,OAAOzR,QAG3C4qB,EAAFxwB,UAAAiwB,eAAE,WACE,OAAO15B,KAAKq5B,OAAO3oB,OAGrBupB,EAAFxwB,UAAAkwB,WAAE,SAAW1vB,EAAW2vB,GACpB3vB,EAAKjK,KAAK8U,KAAKgM,OAAOzR,OAASuqB,GAGjCK,EAAFxwB,UAAAowB,eAAE,WACE,QAAgC,KAAtB75B,KAAKq5B,OAAO3oB,OAAoC,MAApB1Q,KAAKyW,cAA0BzW,KAAKq5B,OAAO3oB,QAAU1Q,KAAKyW,aAGlGwjB,EAAFxwB,UAAAqwB,SAAE,WACE,GAAI95B,KAAK8U,KAAKgM,OAAOsZ,UAAW,CAC9B,IAAMC,EAAoBr6B,KAAK8U,KAAKgM,OAAOsZ,UAAUp6B,KAAKq5B,OAAO3oB,MAAO1Q,KAAK8U,MAC7E,IAAKulB,EAAkBN,MACrB,OAAOM,EAIX,OACEN,OAAO,EACPC,IAAK,OAGXC,EA/GA,GCHAK,GAAA,WAIE,SAAFA,EAAsBxlB,GAAA9U,KAAtB8U,KAAsBA,EAClB9U,KAAK4L,OAuFT,OApFE0uB,EAAF7wB,UAAAmC,KAAE,WACE5L,KAAKq5B,OAAS/sB,EAAE,+CACboM,SAAS1Y,KAAK8U,KAAKqF,WACnBuc,GAAG,cAAe,SAACx4B,GACdA,EAAEq8B,UAAYC,GAAQC,MAAQv8B,EAAEq8B,UAAYC,GAAQE,OACtDx8B,EAAEy1B,6BAGL2F,QACAjd,UAGLie,EAAF7wB,UAAAkM,QAAE,WACE3V,KAAKq5B,OAAOxjB,UAGdykB,EAAF7wB,UAAA6vB,MAAE,WACEt5B,KAAKq5B,OAAOC,SAGdgB,EAAF7wB,UAAAkxB,iBAAE,WAEE,IAAIC,EAAM56B,KAAK8U,KAAKgM,OAAO+Z,yBAI3B,OAHID,IAAQxsB,YACVwsB,EAtCuB,GAwChBA,GAAe,IAARA,EAAmBA,EAAP,MAG9BN,EAAF7wB,UAAA8vB,UAAE,SAAUtvB,GACRjK,KAAKw5B,aAAevvB,EAAKjK,KAAK8U,KAAKgM,OAAOzR,OAE1C,IAAMyrB,EAAY96B,KAAK26B,mBACL,OAAdG,IACE96B,KAAKw5B,cAAsC,IAAtBx5B,KAAKw5B,eAC3Bx5B,KAAKw5B,aAAauB,UACrB/6B,KAAKw5B,aAAex5B,KAAKw5B,aAAauB,QAAQD,IAGhD96B,KAAKq5B,OAAO3oB,IAAI1Q,KAAKw5B,cACrBx5B,KAAKq5B,OAAO,GAAGG,aAAex5B,KAAKw5B,aACnCx5B,KAAKq5B,OAAOhd,UAGdie,EAAF7wB,UAAAiwB,eAAE,WACE,IAAIkB,EAAMxxB,WAAWpJ,KAAKq5B,OAAO3oB,QAAU,EACrCoqB,EAAY96B,KAAK26B,mBAOvB,OANkB,OAAdG,IACEF,GAAe,IAARA,IACRA,EAAIG,UACPH,EAAMxxB,WAAWwxB,EAAIG,QAAQD,KAGxBF,GAGTN,EAAF7wB,UAAAkwB,WAAE,SAAW1vB,EAAW2vB,GACpB3vB,EAAKjK,KAAK8U,KAAKgM,OAAOzR,OAASuqB,GAGjCU,EAAF7wB,UAAAowB,eAAE,WACE,QAAgC,KAAtB75B,KAAKq5B,OAAO3oB,OAAsC,OAAtB1Q,KAAKw5B,eAA4Bx5B,KAAKq5B,OAAO3oB,QAAU1Q,KAAKw5B,cAGpGc,EAAF7wB,UAAAqwB,SAAE,WACE,GAAI3wB,MAAMnJ,KAAKq5B,OAAO3oB,OACpB,OACEqpB,OAAO,EACPC,IAAK,+BAIT,GAAIh6B,KAAK8U,KAAKgM,OAAOsZ,UAAW,CAC9B,IAAMC,EAAoBr6B,KAAK8U,KAAKgM,OAAOsZ,UAAUp6B,KAAKq5B,OAAO3oB,OACjE,IAAK2pB,EAAkBN,MACrB,OAAOM,EAIX,OACEN,OAAO,EACPC,IAAK,OAGXM,EA5FA,GCXAU,GAAA,WAaE,SAAFA,EAAsBlmB,GAAA9U,KAAtB8U,KAAsBA,EAClB9U,KAAK4L,OA8DT,OA3DEovB,EAAFvxB,UAAAmC,KAAE,WACE5L,KAAKq5B,OAAS/sB,EAAE,+CACboM,SAAS1Y,KAAK8U,KAAKqF,WACnBuc,GAAG,cAAe,SAACx4B,GACdA,EAAEq8B,UAAYC,GAAQC,MAAQv8B,EAAEq8B,UAAYC,GAAQE,OACtDx8B,EAAEy1B,6BAGL2F,QACAjd,UAGL2e,EAAFvxB,UAAAkM,QAAE,WACE3V,KAAKq5B,OAAOxjB,UAGdmlB,EAAFvxB,UAAA6vB,MAAE,WACEt5B,KAAKq5B,OAAOC,SAGd0B,EAAFvxB,UAAA8vB,UAAE,SAAUtvB,GACRjK,KAAKw5B,aAAevvB,EAAKjK,KAAK8U,KAAKgM,OAAOzR,OAC1CrP,KAAKq5B,OAAO3oB,IAAI1Q,KAAKw5B,cACrBx5B,KAAKq5B,OAAO,GAAGG,aAAex5B,KAAKw5B,aACnCx5B,KAAKq5B,OAAOhd,UAGd2e,EAAFvxB,UAAAiwB,eAAE,WACE,OAAO9wB,SAAS5I,KAAKq5B,OAAO3oB,MAAiB,KAAO,GAGtDsqB,EAAFvxB,UAAAkwB,WAAE,SAAW1vB,EAAW2vB,GACpB3vB,EAAKjK,KAAK8U,KAAKgM,OAAOzR,OAASuqB,GAGjCoB,EAAFvxB,UAAAowB,eAAE,WACE,QAAgC,KAAtB75B,KAAKq5B,OAAO3oB,OAAsC,OAAtB1Q,KAAKw5B,eAA4Bx5B,KAAKq5B,OAAO3oB,QAAU1Q,KAAKw5B,cAGpGwB,EAAFvxB,UAAAqwB,SAAE,WACE,GAAI3wB,MAAMnJ,KAAKq5B,OAAO3oB,OACpB,OACEqpB,OAAO,EACPC,IAAK,gCAIT,GAAIh6B,KAAK8U,KAAKgM,OAAOsZ,UAAW,CAC9B,IAAMC,EAAoBr6B,KAAK8U,KAAKgM,OAAOsZ,UAAUp6B,KAAKq5B,OAAO3oB,OACjE,IAAK2pB,EAAkBN,MACrB,OAAOM,EAIX,OACEN,OAAO,EACPC,IAAK,OAGXgB,EA5EA,GCAAC,GAAA,WAeE,SAAFA,EAAsBnmB,GAAA9U,KAAtB8U,KAAsBA,EAClB9U,KAAK4L,OAmGT,OAhGEqvB,EAAFxxB,UAAAmC,KAAE,WAAA,IAAFtB,EAAAtK,KACUk7B,EAAa5uB,EAAE,QAErBtM,KAAKm7B,SAAW7uB,EAAE,2CAA2CoM,SAASwiB,GACtEl7B,KAAKq5B,OAAS/sB,EAAE,iCAAiCoM,SAAS1Y,KAAKm7B,UAE/D7uB,EAAE,2KAGSoM,SAAS1Y,KAAKm7B,UAEzBn7B,KAAKm7B,SAAS74B,KAAK,gBAAgBo0B,GAAG,QAAS,SAACjZ,GAAiB,OAAAnT,EAAK4vB,SACtEl6B,KAAKm7B,SAAS74B,KAAK,eAAeo0B,GAAG,QAAS,SAACjZ,GAAiB,OAAAnT,EAAK8wB,WACrEp7B,KAAKq5B,OAAO3C,GAAG,UAAW12B,KAAKq7B,eAE/Br7B,KAAKsJ,SAAStJ,KAAK8U,KAAKxL,UACxBtJ,KAAKq5B,OAAOC,QAAQjd,UAGtB4e,EAAFxxB,UAAA4xB,cAAE,SAAcn9B,GACRA,EAAEo9B,QAAUd,GAAQe,OAASr9B,EAAEs9B,QACjCx7B,KAAKk6B,OACIh8B,EAAEo9B,QAAUd,GAAQiB,QAC7Bv9B,EAAEw9B,iBACF17B,KAAKo7B,UACIl9B,EAAEo9B,QAAUd,GAAQmB,KAAOz9B,EAAE09B,UACtC19B,EAAEw9B,iBACF17B,KAAK8U,KAAKjJ,KAAKgwB,gBACN39B,EAAEo9B,QAAUd,GAAQmB,MAC7Bz9B,EAAEw9B,iBACF17B,KAAK8U,KAAKjJ,KAAKiwB,iBAInBb,EAAFxxB,UAAAywB,KAAE,WACEl6B,KAAK8U,KAAKqlB,iBAGZc,EAAFxxB,UAAA2xB,OAAE,WACEp7B,KAAKq5B,OAAO3oB,IAAI1Q,KAAKw5B,cACrBx5B,KAAK8U,KAAKinB,iBAGZd,EAAFxxB,UAAA0P,KAAE,WACEnZ,KAAKm7B,SAAShiB,QAGhB8hB,EAAFxxB,UAAA4P,KAAE,WACErZ,KAAKm7B,SAAS9hB,QAGhB4hB,EAAFxxB,UAAAH,SAAE,SAASA,GACPtJ,KAAKm7B,SACFa,IAAI,OAAQ1yB,EAASgnB,KAAO,GAAK,GACjC0L,IAAI,QAAS1yB,EAAS2yB,MAAQ,GAAK,IAGxChB,EAAFxxB,UAAAkM,QAAE,WACE3V,KAAKm7B,SAAStlB,UAGhBolB,EAAFxxB,UAAA6vB,MAAE,WACEt5B,KAAKq5B,OAAOC,SAGd2B,EAAFxxB,UAAA8vB,UAAE,SAAUtvB,GACRjK,KAAKq5B,OAAO3oB,IAAI1Q,KAAKw5B,aAAevvB,EAAKjK,KAAK8U,KAAKgM,OAAOzR,QAC1DrP,KAAKq5B,OAAOhd,UAGd4e,EAAFxxB,UAAAiwB,eAAE,WACE,OAAO15B,KAAKq5B,OAAO3oB,OAGrBuqB,EAAFxxB,UAAAkwB,WAAE,SAAW1vB,EAAW2vB,GACpB3vB,EAAKjK,KAAK8U,KAAKgM,OAAOzR,OAASuqB,GAGjCqB,EAAFxxB,UAAAowB,eAAE,WACE,QAAgC,KAAtB75B,KAAKq5B,OAAO3oB,OAAqC,MAArB1Q,KAAKw5B,eAA2Bx5B,KAAKq5B,OAAO3oB,QAAU1Q,KAAKw5B,cAGnGyB,EAAFxxB,UAAAqwB,SAAE,WACE,IAAIC,GAAQ,EACRC,EAAM,KACV,GAAIh6B,KAAK8U,KAAKgM,OAAOsZ,UAAW,CAC9B,IAAMC,EAAoBr6B,KAAK8U,KAAKgM,OAAOsZ,UAAUp6B,KAAKq5B,OAAO3oB,MAAO1Q,KAAK8U,MAC7EilB,EAAQM,EAAkBN,MAC1BC,EAAMK,EAAkBL,IAG1B,OACED,MAANA,EACMC,IAANA,IAGAiB,EAnHA,GCiBAiB,GAAA,WA+BE,SAAFA,EAAsBpnB,GAAA9U,KAAtB8U,KAAsBA,EAjBtB9U,KAAA2J,cAkBI3J,KAAK8L,YAAc9L,KAAK8U,KAAKjJ,KAAKmJ,aAClC,IAAM2D,EAAS3Y,KAAK8L,YAAY6M,QAAU3Y,KAAK8U,KAAKgM,OAAOnI,WAC3D3Y,KAAKm8B,WAAaxjB,EAAOC,KAEzB5Y,KAAKka,gBACHC,UAAW,OACXpS,QAAQ,EACRqS,UAAW,IACXE,UAAU,EACVD,UAAU,EACVK,oBAAqB,GAAI,IACzBtL,MAAO,IACPgtB,WAAY,IAGVp8B,KAAKm8B,aACPn8B,KAAKka,eAAeK,cAAgBva,KAAKm8B,WAAWrxB,QAAQ,mBAC5D9K,KAAKka,eAAeM,YAAcxa,KAAKm8B,WAAWrxB,QAAQ,gBAC1D9K,KAAKka,eAAeO,cAAgBza,KAAKm8B,WAAWrxB,QAAQ,eAG9D9K,KAAK4L,OA0IT,OApIE8P,OAAFsV,eAAMkL,EAANzyB,UAAA,iBAAAwnB,IAAE,WAAA,IAAF3mB,EAAAtK,KACI,OAAOA,KAAK2J,WACT5B,OAAO,SAAAs0B,GAAK,OAAiE,IAAjE/xB,EAAKgyB,WAAW5rB,MAAMS,QAAQkrB,EAAE/xB,EAAK0Q,WAAWlV,cAC5DrD,IAAI,SAAA45B,GAAK,OAAAA,EAAE/xB,EAAK0Q,8CAGrBkhB,EAAFzyB,UAAAmC,KAAE,WACE,IAAK5L,KAAK8U,KACR,MAAM,IAAI7S,MAAM,oFAKlB,GAFAjC,KAAK8O,UAAY9O,KAAK8U,KAAKgM,QAEtB9gB,KAAK8O,YAAc9O,KAAK8O,UAAU6J,SAAW3Y,KAAK8O,UAAU6J,OAAOhP,WACtE,MAAM,IAAI1H,MAAM,gXAKlB,IAAM+X,EAAoB,IAAIzQ,GAAkBvJ,KAAKm8B,YACrDn8B,KAAKoK,uBAAwBpK,KAAK8O,UAAU6J,OAA2B,sBAAI3Y,KAAK8O,UAAU6J,OAAOvO,qBACjG,IAAI6Q,EAAiBjb,KAAK8O,UAAU6J,OAAOhP,eAK3C,GAJA3J,KAAK8a,UAAa9a,KAAK8O,UAAU6J,OAAsB,gBAAI3Y,KAAK8O,UAAU6J,OAAOoC,gBAAgB3b,MAAQ,QACzGY,KAAKgb,UAAahb,KAAK8O,UAAU6J,OAAsB,gBAAI3Y,KAAK8O,UAAU6J,OAAOoC,gBAAgBhd,MAAQ,QAGrGiC,KAAK8L,YAAY6M,QAAU3Y,KAAK8O,UAAU6J,OAAOuC,mBAAoB,CACvE,IAAMtR,EAAW5J,KAAK8O,UAAU6J,OAAOuC,mBACvCD,EAAgBjB,EAAkBtQ,iBAAiBuR,EAAerR,GAIpE,GAAI5J,KAAK8L,YAAY6M,QAAU3Y,KAAK8O,UAAU6J,OAAOwC,iBAAkB,CACrE,IAAMhR,EAASnK,KAAK8O,UAAU6J,OAAOwC,iBACrCF,EAAgBjB,EAAkB9P,eAAe+Q,EAAe9Q,EAAQnK,KAAKoK,sBAG/E,IAAMmyB,EAAiBv8B,KAAK6Z,wBAAwBoB,GAEpDjb,KAAKkV,iBAAiBqnB,IAGxBL,EAAFzyB,UAAAkwB,WAAE,SAAW1vB,EAAW2vB,GACpB3vB,EAAKjK,KAAK8U,KAAKgM,OAAOzR,OAASuqB,GAGjCsC,EAAFzyB,UAAAkM,QAAE,WACE3V,KAAKs8B,WAAWzmB,UAGlBqmB,EAAFzyB,UAAA8vB,UAAE,SAAUtvB,GAAV,IAAFK,EAAAtK,KAEIA,KAAKw5B,aAAevvB,EAAKjK,KAAK8O,UAAUO,OAAO5M,IAAI,SAACrC,GAAW,OAAAA,EAAE0F,aAEjE9F,KAAKs8B,WAAWh6B,KAAK,UAAUk6B,KAAK,SAACp8B,EAAWq8B,IACD,IAAzCnyB,EAAKkvB,aAAaroB,QAAQsrB,EAAG1+B,OAC/B0+B,EAAGlhB,UAAW,EAEdkhB,EAAGlhB,UAAW,IAIlBvb,KAAK6e,WAGPqd,EAAFzyB,UAAAiwB,eAAE,WACE,OAAO15B,KAAK08B,eAGdR,EAAFzyB,UAAA6vB,MAAE,WACEt5B,KAAKs8B,WAAWhD,SAGlB4C,EAAFzyB,UAAAowB,eAAE,WACE,OAAQx4B,EAAYrB,KAAKs8B,WAAW5rB,MAAO1Q,KAAKw5B,eAGlD0C,EAAFzyB,UAAAqwB,SAAE,WACE,GAAI95B,KAAK8U,KAAKgM,OAAOsZ,UAAW,CAC9B,IAAMC,EAAoBr6B,KAAK8U,KAAKgM,OAAOsZ,UAAUp6B,KAAK08B,cAAe18B,KAAK8U,MAC9E,IAAKulB,EAAkBN,MACrB,OAAOM,EAIX,OACEN,OAAO,EACPC,IAAK,OAIDkC,EAAVzyB,UAAAoQ,wBAAU,SAAwBlQ,GAAxB,IAAVW,EAAAtK,KACQoM,EAAU,GAYd,OAXAzC,EAAWkF,QAAQ,SAACiJ,GAClB,IAAKA,GAAWA,EAAOxN,EAAKwQ,aAAe1M,WAAa0J,EAAOwD,WAAalN,UAC1E,MAAM,IAAInM,MAAM,6KAElB,IAAMqZ,EAAYxD,EAAOwD,UAAYxD,EAAOxN,EAAKwQ,WAE3CW,GAAc3D,EAAOwD,UAAYhR,EAAKF,uBAAyBE,EAAK6xB,YAAiD,mBAA5B7xB,EAAK6xB,WAAWrxB,QAA0BR,EAAK6xB,WAAWrxB,QAAQwQ,GAAY,KAAOA,EAEpLlP,GAAW,kBAAkB0L,EAAOxN,EAAK0Q,WAA/C,KAA8DS,EAA9D,cAGW,+DAA+DrP,EAA1E,aAGU8vB,EAAVzyB,UAAAyL,iBAAU,SAAiBqnB,GAAjB,IAAVjyB,EAAAtK,KAOI,GANAA,KAAKs8B,WAAahwB,EAAEiwB,GAEhBv8B,KAAKs8B,YAAkD,mBAA7Bt8B,KAAKs8B,WAAW5jB,UAC5C1Y,KAAKs8B,WAAW5jB,SAAS1Y,KAAK8U,KAAKqF,WAGS,mBAAnCna,KAAKs8B,WAAWr3B,eAEzBjF,KAAKs8B,WAAW7jB,SAAS,oBACpB,CACL,IAAMkkB,EAAkB38B,KAAK8O,UAAgB,OAAI9O,KAAK8O,UAAU6J,OAAOgkB,kBACjEvwB,EAAZsP,OAAAC,UAAiD3b,KAAKka,eAAmByiB,GACnE38B,KAAKs8B,WAAat8B,KAAKs8B,WAAWr3B,eAAemH,GACjD+gB,WAAW,WAAM,OAAA7iB,EAAKgyB,WAAWr3B,eAAe,YAM5Ci3B,EAAVzyB,UAAAoV,QAAU,WACwC,mBAAnC7e,KAAKs8B,WAAWr3B,gBACzBjF,KAAKs8B,WAAWr3B,eAAe,YAGrCi3B,EA/LA,GCDAU,GAAA,WA+BE,SAAFA,EAAsB9nB,GAAA9U,KAAtB8U,KAAsBA,EAjBtB9U,KAAA2J,cAkBI3J,KAAK8L,YAAc9L,KAAK8U,KAAKjJ,KAAKmJ,aAClC,IAAM2D,EAAS3Y,KAAK8L,YAAY6M,QAAU3Y,KAAK8U,KAAKgM,OAAOnI,WAC3D3Y,KAAKm8B,WAAaxjB,EAAOC,KAEzB5Y,KAAKka,gBACHC,UAAW,OACXpS,QAAQ,EACRqS,UAAW,IACXhL,MAAO,IACPgtB,WAAY,GACZlgB,QAAQ,GAGVlc,KAAK4L,OA0IT,OApIE8P,OAAFsV,eAAM4L,EAANnzB,UAAA,gBAAAwnB,IAAE,WAAA,IAAF3mB,EAAAtK,KACI,OAAOkC,EAAclC,KAAK2J,WAAY,SAAC0yB,GACrC,OAAAA,EAAE/xB,EAAK0Q,WAAWlV,aAAewE,EAAKgyB,WAAW5rB,QAAO1Q,KAAKgb,4CAGjE4hB,EAAFnzB,UAAAmC,KAAE,WACE,IAAK5L,KAAK8U,KACR,MAAM,IAAI7S,MAAM,oFAKlB,GAFAjC,KAAK8O,UAAY9O,KAAK8U,KAAKgM,QAEtB9gB,KAAK8O,YAAc9O,KAAK8O,UAAU6J,SAAW3Y,KAAK8O,UAAU6J,OAAOhP,WACtE,MAAM,IAAI1H,MAAM,gXAKlB,IAAM+X,EAAoB,IAAIzQ,GAAkBvJ,KAAKm8B,YACrDn8B,KAAKoK,uBAAwBpK,KAAK8O,UAAU6J,OAA2B,sBAAI3Y,KAAK8O,UAAU6J,OAAOvO,qBACjG,IAAI6Q,EAAiBjb,KAAK8O,UAAU6J,OAAOhP,eAK3C,GAJA3J,KAAK8a,UAAa9a,KAAK8O,UAAU6J,OAAsB,gBAAI3Y,KAAK8O,UAAU6J,OAAOoC,gBAAgB3b,MAAQ,QACzGY,KAAKgb,UAAahb,KAAK8O,UAAU6J,OAAsB,gBAAI3Y,KAAK8O,UAAU6J,OAAOoC,gBAAgBhd,MAAQ,QAGrGiC,KAAK8L,YAAY6M,QAAU3Y,KAAK8O,UAAU6J,OAAOuC,mBAAoB,CACvE,IAAMtR,EAAW5J,KAAK8O,UAAU6J,OAAOuC,mBACvCD,EAAgBjB,EAAkBtQ,iBAAiBuR,EAAerR,GAIpE,GAAI5J,KAAK8L,YAAY6M,QAAU3Y,KAAK8O,UAAU6J,OAAOwC,iBAAkB,CACrE,IAAMhR,EAASnK,KAAK8O,UAAU6J,OAAOwC,iBACrCF,EAAgBjB,EAAkB9P,eAAe+Q,EAAe9Q,EAAQnK,KAAKoK,sBAG/E,IAAMmyB,EAAiBv8B,KAAK6Z,wBAAwBoB,GAEpDjb,KAAKkV,iBAAiBqnB,IAGxBK,EAAFnzB,UAAAkwB,WAAE,SAAW1vB,EAAW2vB,GACpB3vB,EAAKjK,KAAK8U,KAAKgM,OAAOzR,OAASuqB,GAGjCgD,EAAFnzB,UAAAkM,QAAE,WACE3V,KAAKs8B,WAAWzmB,UAGlB+mB,EAAFnzB,UAAA8vB,UAAE,SAAUtvB,GAAV,IAAFK,EAAAtK,KAEIA,KAAKw5B,aAAevvB,EAAKjK,KAAK8O,UAAUO,OAAOvJ,WAE/C9F,KAAKs8B,WAAWh6B,KAAK,UAAUk6B,KAAK,SAACp8B,EAAWq8B,IACD,IAAzCnyB,EAAKkvB,aAAaroB,QAAQsrB,EAAG1+B,OAC/B0+B,EAAGlhB,UAAW,EAEdkhB,EAAGlhB,UAAW,IAIlBvb,KAAK6e,WAGP+d,EAAFnzB,UAAAiwB,eAAE,WACE,OAAO15B,KAAKypB,cAGdmT,EAAFnzB,UAAA6vB,MAAE,WACEt5B,KAAKs8B,WAAWhD,SAGlBsD,EAAFnzB,UAAAowB,eAAE,WACE,OAAO75B,KAAKs8B,WAAW5rB,QAAU1Q,KAAKw5B,cAGxCoD,EAAFnzB,UAAAqwB,SAAE,WACE,GAAI95B,KAAK8U,KAAKgM,OAAOsZ,UAAW,CAC9B,IAAMC,EAAoBr6B,KAAK8U,KAAKgM,OAAOsZ,UAAUp6B,KAAKypB,aAAczpB,KAAK8U,MAC7E,IAAKulB,EAAkBN,MACrB,OAAOM,EAIX,OACEN,OAAO,EACPC,IAAK,OAID4C,EAAVnzB,UAAAoQ,wBAAU,SAAwBlQ,GAAxB,IAAVW,EAAAtK,KACQoM,EAAU,GAad,OAZAzC,EAAWkF,QAAQ,SAACiJ,GAClB,IAAKA,GAAWA,EAAOxN,EAAKwQ,aAAe1M,WAAa0J,EAAOwD,WAAalN,UAC1E,MAAM,IAAInM,MAAM,8LAIlB,IAAMqZ,EAAYxD,EAAOwD,UAAYxD,EAAOxN,EAAKwQ,WAC3CW,GAAc3D,EAAOwD,UAAYhR,EAAKF,uBAAyBE,EAAK6xB,YAAiD,mBAA5B7xB,EAAK6xB,WAAWrxB,QAA0BR,EAAK6xB,WAAWrxB,QAAQwQ,GAAY,KAAOA,EAEpLlP,GAAW,kBAAkB0L,EAAOxN,EAAK0Q,WAA/C,KAA8DS,EAA9D,cAGW,2CAA2CrP,EAAtD,aAGUwwB,EAAVnzB,UAAAyL,iBAAU,SAAiBqnB,GAAjB,IAAVjyB,EAAAtK,KAOI,GANAA,KAAKs8B,WAAahwB,EAAEiwB,GAEhBv8B,KAAKs8B,YAAkD,mBAA7Bt8B,KAAKs8B,WAAW5jB,UAC5C1Y,KAAKs8B,WAAW5jB,SAAS1Y,KAAK8U,KAAKqF,WAGS,mBAAnCna,KAAKs8B,WAAWr3B,eAEzBjF,KAAKs8B,WAAW7jB,SAAS,oBACpB,CACL,IAAMkkB,EAAkB38B,KAAK8O,UAAgB,OAAI9O,KAAK8O,UAAU6J,OAAOgkB,kBACjEvwB,EAAZsP,OAAAC,UAAiD3b,KAAKka,eAAmByiB,GACnE38B,KAAKs8B,WAAat8B,KAAKs8B,WAAWr3B,eAAemH,GACjD+gB,WAAW,WAAM,OAAA7iB,EAAKgyB,WAAWr3B,eAAe,YAM5C23B,EAAVnzB,UAAAoV,QAAU,WACwC,mBAAnC7e,KAAKs8B,WAAWr3B,gBACzBjF,KAAKs8B,WAAWr3B,eAAe,YAGrC23B,EAvLA,GChBAC,GAAA,WAaE,SAAFA,EAAsB/nB,GAAA9U,KAAtB8U,KAAsBA,EAClB9U,KAAK4L,OA+DT,OA5DEixB,EAAFpzB,UAAAmC,KAAE,WACE5L,KAAKq5B,OAAS/sB,EAAE,+CACboM,SAAS1Y,KAAK8U,KAAKqF,WACnBuc,GAAG,cAAe,SAACx4B,GACdA,EAAEq8B,UAAYC,GAAQC,MAAQv8B,EAAEq8B,UAAYC,GAAQE,OACtDx8B,EAAEy1B,6BAGL2F,QACAjd,UAGLwgB,EAAFpzB,UAAAkM,QAAE,WACE3V,KAAKq5B,OAAOxjB,UAGdgnB,EAAFpzB,UAAA6vB,MAAE,WACEt5B,KAAKq5B,OAAOC,SAGduD,EAAFpzB,UAAAqzB,SAAE,WACE,OAAO98B,KAAKq5B,OAAO3oB,OAGrBmsB,EAAFpzB,UAAAszB,SAAE,SAASrsB,GACP1Q,KAAKq5B,OAAO3oB,IAAIA,IAGlBmsB,EAAFpzB,UAAA8vB,UAAE,SAAUtvB,GACRjK,KAAKw5B,aAAevvB,EAAKjK,KAAK8U,KAAKgM,OAAOzR,QAAU,GACpDrP,KAAKq5B,OAAO3oB,IAAI1Q,KAAKw5B,cACrBx5B,KAAKq5B,OAAO,GAAGG,aAAex5B,KAAKw5B,aACnCx5B,KAAKq5B,OAAOhd,UAGdwgB,EAAFpzB,UAAAiwB,eAAE,WACE,OAAO15B,KAAKq5B,OAAO3oB,OAGrBmsB,EAAFpzB,UAAAkwB,WAAE,SAAW1vB,EAAW2vB,GACpB3vB,EAAKjK,KAAK8U,KAAKgM,OAAOzR,OAASuqB,GAGjCiD,EAAFpzB,UAAAowB,eAAE,WACE,QAAgC,KAAtB75B,KAAKq5B,OAAO3oB,OAAsC,OAAtB1Q,KAAKw5B,eAA4Bx5B,KAAKq5B,OAAO3oB,QAAU1Q,KAAKw5B,cAGpGqD,EAAFpzB,UAAAqwB,SAAE,WACE,GAAI95B,KAAK8U,KAAKgM,OAAOsZ,UAAW,CAC9B,IAAMC,EAAoBr6B,KAAK8U,KAAKgM,OAAOsZ,UAAUp6B,KAAKq5B,OAAO3oB,OACjE,IAAK2pB,EAAkBN,MACrB,OAAOM,EAIX,OACEN,OAAO,EACPC,IAAK,OAGX6C,EA7EA,GCSaG,IACXC,SAAU7D,GACV71B,KAAM02B,GACNt1B,QAAO21B,GACP4C,QAASlC,GACTmC,SAAUlC,GACVh2B,eAAgBi3B,GAChBh3B,aAAc03B,GACd3jB,KAAM4jB,ICdKO,GAAiC,SAAC9tB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GACvG,GAAIx1B,GAASoP,MAAMC,QAAQrP,GAAQ,CACjC,IAAMgY,EAAShY,EAAMwP,KAAK,MAC1B,MAAO,gBAAgBwI,EAA3B,KAAsCA,EAAtC,UAEE,MAAO,ICLIsnB,GAA+B,SAAC/tB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GACrG,OAAAx1B,EAAQ,WAAa,ICDVu/B,GAAgC,SAAChuB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GACtG,OAAAx1B,EAAQ,gEAAkE,ICG/Dw/B,GAAiC,SAACjuB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GACvG,KAAKx1B,GAAU+Q,GAAcA,EAAU6J,QAAW7J,EAAU6J,OAAOhP,YAC7DmF,EAAU6J,OAAOhP,WAAWnK,QAChC,MAAO,GAGD,IAAAmZ,EAAV7J,EAAA6J,OAA4BhP,EAA5BmF,EAAA6J,OAAAhP,WACQmR,EAAanC,EAAsB,gBAAIA,EAAOoC,gBAAgB3b,MAAQ,QACtE4b,EAAarC,EAAsB,gBAAIA,EAAOoC,gBAAgBhd,MAAQ,QAE5E,OAAIoP,MAAMC,QAAQrP,GACTq/B,GAAoB9tB,EACzB6jB,EACAp1B,EAAM0E,IAAI,SAAC7D,GAAW,OAAAsD,EAAcyH,EAAY,SAAC0yB,GAAW,OAAAA,EAAErhB,KAAepc,IAAGkc,MAK7E5Y,EAAcyH,EAAY,SAAC0yB,GAAW,OAAAA,EAAErhB,KAAejd,IAAO+c,IAAc,ICtBxE0iB,GAAoC,SAACluB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GAC1G,IAAKzkB,EACH,MAAO,GAGT,OADqBA,EAAUO,OAAS,IACpB+B,MAAM,KAAK8a,OAAO,SAACjC,EAAK7pB,GAAM,OAAA6pB,EAAI7pB,IAAImzB,ICLtD7tB,GAAS4C,EACTC,GAAShG,EAAiCG,EAAUc,SAE7Ci6B,GAA8B,SAACnuB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GACpG,OAAAx1B,EAAQ2H,GAAO3H,GAAOiI,OAAOuC,IAAU,ICJnC7C,GAAS4C,EACTC,GAAShG,EAAiCG,EAAUE,aAE7C86B,GAAkC,SAACpuB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GACxG,OAAAx1B,EAAQ2H,GAAO3H,GAAOiI,OAAOuC,IAAU,ICJnC7C,GAAS4C,EACTC,GAAShG,EAAiCG,EAAUG,iBAE7C86B,GAAsC,SAACruB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GAC5G,OAAAx1B,EAAQ2H,GAAO3H,GAAOiI,OAAOuC,IAAU,ICJnC7C,GAAS4C,EACTC,GAAShG,EAAiCG,EAAUQ,gBAE7C06B,GAAqC,SAACtuB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GAC3G,OAAAx1B,EAAQ2H,GAAO3H,GAAOiI,OAAOuC,IAAU,ICJnC7C,GAAS4C,EACTC,GAAShG,EAAiCG,EAAUO,YAE7C46B,GAAiC,SAACvuB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GACvG,OAAAx1B,EAAQ2H,GAAO3H,GAAOiI,OAAOuC,IAAU,ICJnC7C,GAAS4C,EACTC,GAAShG,EAAiCG,EAAUK,QAE7C+6B,GAA6B,SAACxuB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GACnG,OAAAx1B,EAAQ2H,GAAO3H,GAAOiI,OAAOuC,IAAU,ICJ5Bw1B,GAAiC,SAACzuB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GACvG,MAAA,sECDWyK,GAA+B,SAAC1uB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GACrG,MAAA,qECDW0K,GAAgC,SAAC3uB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GACtG,GAAIx1B,GAA0B,iBAAVA,EAAoB,CACtC,IAAMmgC,EAAWngC,EAAMkD,MAAM,qGAC7B,GAAIi9B,GAAY/wB,MAAMC,QAAQ8wB,GAC5B,MAAO,YAAYA,EAAS,GAAlC,uBAGE,MAAO,ICPIC,GAAyC,SAAC7uB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GAC/G,IAAI6K,EAAatvB,GAAaA,EAAU6J,QAAU7J,EAAU6J,OAAOylB,UAAatvB,EAAU6J,OAAOylB,UAAY,GAC7G,IAAKA,EACH,MAAM,IAAIn8B,MAAM,6KAElB,OAAIlE,GAASqgC,GAAkC,iBAAdA,IAA2BA,EAAUprB,SAAS,YAEtE,aADPorB,GAAargC,GACoB,KAAOA,EAAQ,OAE3C,ICTIsgC,GAA+B,SAAC/uB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GACrG,MAAA,0ECDW+K,GAAgC,SAAChvB,EAAa6jB,EAAcp1B,EAAqB+Q,EAAmBykB,GAM/G,OAJIx1B,IAAUqQ,WAA8B,iBAAVrQ,IAChCA,GAAgB,IAGXA,EAAQA,EAAMqI,cAAgB,ICP1Bm4B,GAA+B,SAACjvB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,EAAkB1nB,GACvH,IAAM8M,EAAS7J,EAAU6J,WACzB,IAAKA,EAAO6lB,aAAerxB,MAAMC,QAAQuL,EAAO6lB,YAC9C,MAAM,IAAIv8B,MAAM,mQAGlB,IAAMu8B,EAA0B7lB,EAAO6lB,WAInC/U,EAAe1rB,MACnB,IAAwB,IAAA0gC,EAAAvf,EAAAsf,GAA1BE,EAAAD,EAAAxgC,QAAAygC,EAAArgC,KAAAqgC,EAAAD,EAAAxgC,OAAA,CACIwrB,GAAexZ,EADnByuB,EAAA3gC,OAC6BuR,EAAK6jB,EAAM1J,EAAc3a,EAAWykB,EAAa1nB,wGAE5E,OAAO4d,WCbIkV,GAAsC,SAACrvB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GAC5G,OAAc,OAAVx1B,GAA4B,KAAVA,EACb,IACEA,EAAQ,GACV,6CAA6CA,EAAxD,WAEW,6BAA6BA,EAAxC,YCNa6gC,GAAyC,SAACtvB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GAC/G,GAAc,OAAVx1B,GAA4B,KAAVA,EACpB,MAAO,GAaT,MAAO,yDARHA,EAAQ,GACF,MACCA,EAAQ,GACT,SAEA,SAGZ,WAAiFA,EAAjF,cCfa8gC,GAAkC,SAACvvB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GACxG,GAAc,OAAVx1B,GAA4B,KAAVA,EACpB,MAAO,GAaT,MAAO,sEARHA,EAAQ,GACF,SACCA,EAAQ,GACT,UAEA,WAGZ,uCACwFA,EADxF,yEACsKA,EADtK,aAEMA,EAFN,2BCfa+gC,GAAgC,SAACxvB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,EAAkB1nB,GACxH,IAAMC,EAAeD,GAAmC,mBAApBA,EAAKmJ,WAA6BnJ,EAAKmJ,gBACrE+pB,EAAejwB,EAAU6J,WAEzBnP,GADasC,EAAY6M,YACFC,MAAQmmB,EAAanmB,KAElD,IAAKpP,GAA0C,mBAAtBA,EAAUsB,QACjC,MAAM,IAAI7I,MAAM,gOASlB,OAJIlE,IAAUqQ,WAA8B,iBAAVrQ,IAChCA,GAAgB,IAGXA,EAAQyL,EAAUsB,QAAQ/M,GAAS,IChB/BihC,GAAuC,SAAC1vB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,EAAkB1nB,GAC/H,IAAMC,EAAeD,GAAmC,mBAApBA,EAAKmJ,WAA6BnJ,EAAKmJ,gBACrE+pB,EAAejwB,EAAU6J,WAEzBnP,GADasC,EAAY6M,YACFC,MAAQmmB,EAAanmB,KAElD,IAAKpP,GAA0C,mBAAtBA,EAAUsB,QACjC,MAAM,IAAI7I,MAAM,gOAQlB,OAHIlE,IAAUqQ,WAA8B,iBAAVrQ,IAChCA,GAAgB,IAEXA,EAAQyL,EAAUsB,QAAQ/M,EAAMsI,eAA2B,ICfvD44B,GAAgC,SAAC3vB,EAAa6jB,EAAcp1B,EAAqB+Q,EAAmBykB,GAM/G,OAJIx1B,IAAUqQ,WAA8B,iBAAVrQ,IAChCA,GAAgB,IAGXA,EAAQA,EAAMsI,cAAgB,ICN1B64B,GAA4B,SAAC5vB,EAAa6jB,EAAcp1B,EAAY+Q,EAAmBykB,GAClG,OAAAx1B,EAAQ,MAAQ,MCmCLohC,IAEXC,WAAYhC,GAGZH,SAAUI,GAGVgC,UAAW/B,GAGXgC,cAAe9B,GASf7zB,WAAY4zB,GAGZ/5B,QAASi6B,GAGT76B,YAAa86B,GAGb76B,gBAAiB86B,GAGjB56B,OAAQ+6B,GAGR76B,WAAY46B,GAGZ36B,eAAgB06B,GAGhB2B,WAAYxB,GAGZyB,SAAUxB,GAGVyB,UAAWxB,GAGXyB,mBAAoBvB,GAGpBwB,SAAUtB,GAGVuB,UAAWtB,GAMXuB,SAAUtB,GAGVuB,gBAAiBnB,GAGjBoB,mBAAoBnB,GAGpBoB,YAAanB,GAGbr1B,UAAWs1B,GAGXmB,iBAAkBjB,GAGlBkB,UAAWjB,GAGXkB,MAAOjB,IClETkB,GAAA,WA6BE,SAAFA,EAAsB5d,EAAsCmT,GAAtC31B,KAAtBwiB,cAAsBA,EAAsCxiB,KAA5D21B,YAA4DA,EA1B5D31B,KAAAqgC,gBAA2B,EAC3BrgC,KAAAqtB,oBAAkC,IAAIiT,EAAAA,aActCtgC,KAAAugC,SAAa,EACbvgC,KAAAwgC,OAAW,EAEXxgC,KAAAygC,UAAc,EACdzgC,KAAA8sB,WAAe,EACf9sB,KAAA0gC,WAAe,EAEf1gC,KAAA2gC,qBAAyB,GAAI,GAAI,KACjC3gC,KAAA4gC,cAAwBC,KAAM7gC,KAAKugC,SAAUO,GAAI9gC,KAAKwgC,OAAQE,WAAY1gC,KAAK0gC,mBAnB/EhlB,OAAAsV,eAAMoP,EAAN32B,UAAA,yBAOAwnB,IAAE,WACE,OAAOjxB,KAAK+gC,wBARhB/U,IAAA,SAA4BgV,GACxBhhC,KAAK+gC,uBAAyBC,GAC1BhhC,KAAKqgC,gBAAmBW,GAA0BA,EAAsBh5B,YAAeg5B,EAAsBh5B,WAAW04B,aAAe1gC,KAAK0gC,aAC9I1gC,KAAKihC,oBACLjhC,KAAKqgC,gBAAiB,oCAoB1BD,EAAF32B,UAAAy3B,YAAE,WACElhC,KAAKigB,WAGPmgB,EAAF32B,UAAA03B,gBAAE,WAAA,IAAF72B,EAAAtK,KACIA,KAAK+gC,uBAAyB/gC,KAAK+gC,uBAC9B/gC,KAAK+gC,wBAA2B/gC,KAAK+gC,uBAAuB/4B,YAAehI,KAAK+gC,uBAAuB/4B,WAAW04B,aAAe1gC,KAAK0gC,YACzI1gC,KAAKihC,oBAIPjhC,KAAK41B,mBAAqB51B,KAAKwiB,cAAc1F,gBAAgBM,UAAU,SAAC5E,GACtElO,EAAK22B,mBAAkB,MAI3Bb,EAAF32B,UAAA23B,KAAE,SAAKx8B,GACH,OAAO+L,KAAKywB,KAAKx8B,IAGnBw7B,EAAF32B,UAAA43B,kBAAE,SAAkB5jB,GAChBzd,KAAK8sB,WAAa,EAClB9sB,KAAKshC,cAAc7jB,EAAOzd,KAAK8sB,aAGjCsT,EAAF32B,UAAA83B,iBAAE,SAAiB9jB,GACfzd,KAAK8sB,WAAa9sB,KAAKygC,UACvBzgC,KAAKshC,cAAc7jB,EAAOzd,KAAK8sB,aAGjCsT,EAAF32B,UAAA+3B,iBAAE,SAAiB/jB,GACXzd,KAAK8sB,WAAa9sB,KAAKygC,YACzBzgC,KAAK8sB,aACL9sB,KAAKshC,cAAc7jB,EAAOzd,KAAK8sB,cAInCsT,EAAF32B,UAAAg4B,qBAAE,SAAqBhkB,GACfzd,KAAK8sB,WAAa,IACpB9sB,KAAK8sB,aACL9sB,KAAKshC,cAAc7jB,EAAOzd,KAAK8sB,cAInCsT,EAAF32B,UAAAi4B,oBAAE,SAAoBjkB,GAClBzd,KAAK8sB,WAAarP,EAAMkkB,cAAc5jC,MAClCiC,KAAK8sB,WAAa,EAChB9sB,KAAK8sB,WAAa,EACb9sB,KAAK8sB,WAAa9sB,KAAKygC,YAC5BzgC,KAAK8sB,WAAa9sB,KAAKygC,WAG7BzgC,KAAKshC,cAAc7jB,EAAOzd,KAAK8sB,aAGjCsT,EAAF32B,UAAAwW,QAAE,WACEjgB,KAAKqtB,oBAAoBjN,cACrBpgB,KAAK41B,oBACP51B,KAAK41B,mBAAmBxV,eAI5BggB,EAAF32B,UAAAm4B,oBAAE,SAAoBnkB,GAClB,IAAMokB,GAAgBpkB,EAAM3D,OAAO/b,MACnCiC,KAAKygC,UAAY9vB,KAAKywB,KAAKphC,KAAK0gC,WAAamB,GAC7C7hC,KAAK8sB,WAAa,EAClB9sB,KAAK6hC,aAAeA,EACpB7hC,KAAKshC,cAAc7jB,EAAOzd,KAAK8sB,aAGjCsT,EAAF32B,UAAAw3B,kBAAE,SAAkBa,QAApB,IAAAA,IAAoBA,GAApB,GACI,IAAMpkB,EAAa1d,KAAK+gC,uBAAuBpjB,mBAAqB3d,KAAK+gC,uBAAuBnjB,kBAChG,IAAKF,IAAeA,EAAWI,UAAYJ,EAAWG,QACpD,MAAM,IAAI5b,MAAM,oFAGlB,GAAIjC,KAAK+gC,wBAA0B/gC,KAAK+gC,uBAAuB/4B,WAAY,CACzE,IAAMA,EAAahI,KAAK+gC,uBAAuB/4B,WAE1ChI,KAAK6hC,eACR7hC,KAAK6hC,eAAkBnkB,GAAcA,EAAWtR,SAAWsR,EAAWtR,QAAQmf,mBAAqB7N,EAAWtR,QAAQmf,kBAAkBzpB,MAAS4b,EAAWtR,QAAQmf,kBAAkBzpB,MAAQ9B,KAAK+gC,uBAAuB/4B,WAAWwjB,YAInOsW,GAAqB9hC,KAAK0gC,aAAe14B,EAAW04B,cAClD1gC,KAAKqgC,gBAAkBr4B,EAAW8kB,YAAc9kB,EAAW8kB,WAAa,EAC1E9sB,KAAK8sB,WAAa9kB,EAAW8kB,YAAc,EAE3C9sB,KAAK8sB,WAAa,EAII,IAApB9sB,KAAK8sB,YACPpP,EAAWI,QAAQ4O,0BAKvB1sB,KAAK2gC,oBAAsB3gC,KAAK+gC,uBAAuB/4B,WAAW+5B,UAClE/hC,KAAK0gC,WAAa1gC,KAAK+gC,uBAAuB/4B,WAAW04B,WACzD1gC,KAAKgiC,2BAEPhiC,KAAKygC,UAAY9vB,KAAKywB,KAAKphC,KAAK0gC,WAAa1gC,KAAK6hC,eAG9CzB,EAAR32B,UAAA63B,cAAQ,SAAc7jB,EAA0BqP,yGAI5C,GAHA9sB,KAAKgiC,6BAECtkB,EAAa1d,KAAK+gC,uBAAuBpjB,mBAAqB3d,KAAK+gC,uBAAuBnjB,qBAC5EF,EAAWI,UAAYJ,EAAWG,QACpD,MAAM,IAAI5b,MAAM,oFAQtB,OALQjC,KAAKwgC,OAASxgC,KAAK0gC,WACrB1gC,KAAKwgC,OAASxgC,KAAK0gC,WACV1gC,KAAK0gC,WAAa1gC,KAAK6hC,eAChC7hC,KAAKwgC,OAASxgC,KAAK0gC,YAEjBhjB,GACImkB,GAAgB7hC,KAAK6hC,aAEvBnkB,EAAWK,YACbL,EAAWK,aAGPC,EAAQN,EAAWI,QAAQuP,oBAAoB5P,GAAS8P,QAAST,EAAYtB,SAAUqW,IAIvF1jB,EAAsBT,EAAWG,QAAQG,IACrD,EAAkCtc,EAAcyc,MAZhD,EAAA,iBAYYC,EAAgBH,EAA5Bte,SAG2B+d,EAAWW,qBAC9BX,EAAWW,oBAAoBD,GAI7BV,EAAWY,aACbZ,EAAWY,YAAYF,SAG/B,KAAA,EAAM,MAAM,IAAInc,MAAM,mHAIlBjC,KAAKqtB,oBAAoB4U,MACvBnV,WAAY9sB,KAAK8sB,WACjBiV,UAAW/hC,KAAK2gC,oBAChBnV,SAAUxrB,KAAK6hC,aACfnB,WAAY1gC,KAAK0gC,uBAIrBN,EAAF32B,UAAAu4B,yBAAE,WACEhiC,KAAKugC,SAAYvgC,KAAK8sB,WAAa9sB,KAAK6hC,aAAgB7hC,KAAK6hC,aAAe,EAC5E7hC,KAAKwgC,OAAUxgC,KAAK0gC,WAAa1gC,KAAK6hC,aAAgB7hC,KAAK0gC,WAAc1gC,KAAK8sB,WAAa9sB,KAAK6hC,gBA3LpG,mBAjDA92B,KAACm3B,EAAAA,UAADptB,OACEqtB,SAAU,mBACVC,SAAU,+qEA8CZr3B,KAACC,EAAAA,kDAnDDD,KAASyR,KAATzR,KAAwBotB,yBAwDxB9K,sBAAAtiB,KAAGs3B,EAAAA,SAEHrB,wBAAAj2B,KAAGu3B,EAAAA,QAWHz2B,OAAAd,KAAGu3B,EAAAA,SCpEH,IAAaC,IACX3O,UAAU,EACV4O,oBAAoB,EACpBC,2BAA2B,EAC3B5L,YACEI,cAAe,GACfO,UAAW,IACX7S,SAAU,IACVgT,YAAa,GAEf+K,sBAAuB,sBACvBra,kBACEsa,SAAU,0BAEZtd,cACEud,oBAAoB,EACpBC,sBAAsB,GAExBC,sBAAuB,KACvBrrB,yBAA0B,YAC1ByJ,kBAAmBlc,GAAWjE,MAC9BgiC,UAAU,EACVC,kBAAkB,EAClBC,sBAAsB,EACtBpgB,oBAAoB,EACpBqgB,qBAAqB,EACrBnc,cAAc,EACd/D,gBAAgB,EAChBmgB,8BAA8B,EAC9BC,eAAe,EACfC,4BAA4B,EAC5BC,wBAAwB,EACxBxzB,qBAAqB,EACrByzB,iBAAiB,EACjB9d,UACEmd,oBAAoB,EACpBC,sBAAsB,EACtBnc,aAAc,aACdkB,UAAW,GACX4b,uBAAuB,EACvBjd,4BAA4B,EAC5BS,sBAAsB,EACtBF,2BAA2B,EAC3BD,yBAAyB,GAE3B4c,gBAAiB,GACjBC,iBAAiB,EACjB17B,YACE+5B,WAAY,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAC5CvW,SAAU,GACVkV,WAAY,GAEdiD,UAAW,GACXxc,eAAe,EACfyc,eAAgB,ICClBC,GAAA,WA+CE,SAAFA,EACYC,EACAvhB,EACAC,EACAuhB,EACAC,EACAC,EACAC,EACAzhB,EACAkT,EACAnsB,EACkB26B,GAVlBnkC,KAAZ8jC,wBAAYA,EACA9jC,KAAZuiB,cAAYA,EACAviB,KAAZwiB,cAAYA,EACAxiB,KAAZ+jC,iBAAYA,EACA/jC,KAAZgkC,iBAAYA,EACAhkC,KAAZikC,iBAAYA,EACAjkC,KAAZkkC,QAAYA,EACAlkC,KAAZyiB,cAAYA,EACAziB,KAAZ21B,YAAYA,EACA31B,KAAZwJ,UAAYA,EACkBxJ,KAA9BmkC,cAA8BA,EAtD9BnkC,KAAAyc,cAA+B,IAAIhO,MAAMiO,aAOzC1c,KAAAokC,sBAEApkC,KAAAqkC,gBAAmB,EACnBrkC,KAAAskC,mBAAsB,EAEtBtkC,KAAAukC,kBAAgC,IAAIjE,EAAAA,aACpCtgC,KAAAwkC,cAA4B,IAAIlE,EAAAA,aAChCtgC,KAAAykC,kBAAgC,IAAInE,EAAAA,aACpCtgC,KAAA0kC,mBAAiC,IAAIpE,EAAAA,aACrCtgC,KAAA2kC,oBAAkC,IAAIrE,EAAAA,aACtCtgC,KAAA4kC,qBAAmC,IAAItE,EAAAA,aACvCtgC,KAAA6kC,0BAAwC,IAAIvE,EAAAA,aAG5CtgC,KAAAm3B,WAAwB,IACxBn3B,KAAA8kC,UAAuB,WAGvBppB,OAAAsV,eAAM6S,EAANp6B,UAAA,qBAMAwnB,IAAE,WACE,OAAOjxB,KAAK2iB,oBAPhBqJ,IAAA,SAAwBhP,GACpBhd,KAAK2iB,mBAAqB3F,EACtBhd,KAAKskC,mBACPtkC,KAAK+kC,4BAA4B/nB,oCAOvCtB,OAAAsV,eAAM6S,EAANp6B,UAAA,WAIAwnB,IAAE,WACE,OAAOjxB,KAAKkM,UAAU84B,YAL1BhZ,IAAA,SAAciZ,GACVjlC,KAAKklC,SAAWD,EAChBjlC,KAAKmlC,gBAAgBF,oCAoBvBpB,EAAFp6B,UAAA27B,SAAE,WACEplC,KAAK0kC,mBAAmBzC,MAAK,GAC7BjiC,KAAKqlC,iBAAsBrlC,KAAKm3B,WAApC,KACIn3B,KAAKslC,gBAAqBtlC,KAAK8kC,UAAnC,MAGEjB,EAAFp6B,UAAAy3B,YAAE,WACElhC,KAAK2kC,oBAAoB1C,KAAKjiC,KAAK6L,MACnC7L,KAAK2V,UACL3V,KAAK4kC,qBAAqB3C,MAAK,IAGjC4B,EAAFp6B,UAAAkM,QAAE,WACE3V,KAAKkM,aACLlM,KAAK8L,eACL9L,KAAKyc,cAAc0D,iBACnBngB,KAAK8jC,wBAAwB7jB,UAC7BjgB,KAAKwiB,cAAcvC,UACnBjgB,KAAKgkC,iBAAiB/jB,UACtBjgB,KAAKikC,iBAAiBhkB,UACtBjgB,KAAKkkC,QAAQjkB,UACbjgB,KAAK21B,YAAY1V,UACjBjgB,KAAK6L,KAAK8J,UACN3V,KAAKulC,sBACPvlC,KAAKulC,qBAAqBnlB,cAExBpgB,KAAKwlC,sBACPxlC,KAAKwlC,qBAAqBplB,eAI9ByjB,EAAFp6B,UAAA03B,gBAAE,WACEnhC,KAAKylC,iBACLzlC,KAAKskC,mBAAoB,GAG3BT,EAAFp6B,UAAAg8B,eAAE,WAEEzlC,KAAKklC,SAAWllC,KAAKklC,aACrBllC,KAAK8L,YAAc9L,KAAK0lC,iBAAiB1lC,KAAK8L,aAC9C9L,KAAK2lC,4CAA4C3lC,KAAK8L,aAElD9L,KAAK8L,YAAY0X,gBACnBxjB,KAAK0jB,0BAA4B,IAAIjV,MAAMC,KAAKk3B,0BAChD5lC,KAAKyiB,cAAciB,0BAA4B1jB,KAAK0jB,0BACpD1jB,KAAKkM,UAAY,IAAIuC,MAAMC,KAAKm3B,UAC9BniB,0BAA2B1jB,KAAK0jB,0BAChCoiB,eAAe,KAGjB9lC,KAAKkM,UAAY,IAAIuC,MAAMC,KAAKm3B,SAElC7lC,KAAK8jC,wBAAwB3b,+BAA+BnoB,KAAK2iB,mBAAoB3iB,KAAK8L,aAC1F9L,KAAK6L,KAAO,IAAI4C,MAAMs3B,KAAK,IAAI/lC,KAAK40B,OAAU50B,KAAKkM,UAAWlM,KAAK2iB,mBAAoB3iB,KAAK8L,aAG5F9L,KAAKyiB,cAAc7W,KAAK5L,KAAK6L,KAAM7L,KAAKkM,UAAWlM,KAAK8L,YAAa9L,KAAK2iB,oBAE1E3iB,KAAK8jC,wBAAwBphB,kCAC7B1iB,KAAKgmC,qBAAqBhmC,KAAK6L,KAAM7L,KAAK8L,YAAa9L,KAAKkM,WAG5DlM,KAAKwkC,cAAcvC,KAAKjiC,KAAK6L,MAC7B7L,KAAKukC,kBAAkBtC,KAAKjiC,KAAKkM,WAEjClM,KAAK6L,KAAKD,OACV5L,KAAKkM,UAAU+5B,cACfjmC,KAAKkM,UAAUg6B,SAASlmC,KAAKklC,SAAUllC,KAAK8L,YAAYg3B,uBACxD9iC,KAAKkM,UAAUi6B,YAGfnmC,KAAKomC,iBAAiBpmC,KAAK6L,KAAM7L,KAAK8L,aAGtC9L,KAAK+jC,iBAAiBn4B,KAAK5L,KAAK6L,KAAM7L,KAAK2iB,mBAAoB3iB,KAAK8L,YAAa9L,KAAKkM,WAGlFlM,KAAK8L,YAAYqZ,iBACnBnlB,KAAK8jC,wBAAwB7b,mBAI3BjoB,KAAK8L,YAAYib,cACnB/mB,KAAKuiB,cAAc3W,KAAK5L,KAAK6L,KAAM7L,KAAK8L,YAAa9L,KAAKkM,WAI5DlM,KAAKykC,kBAAkBxC,KAAKjiC,KAAK6L,MAI7B7L,KAAK8L,cAAgB9L,KAAK8L,YAAY6R,mBAAqB3d,KAAK8L,YAAY8R,oBAC9E5d,KAAKqmC,+BAA+BrmC,KAAK8L,aAG3C9L,KAAKikC,iBAAiBr4B,KAAK5L,KAAK6L,KAAM7L,KAAKwiB,cAAexiB,KAAK21B,cAOjEkO,EAAFp6B,UAAAk8B,4CAAE,SAA4C75B,GAA5C,IAAFxB,EAAAtK,KACI,GAAI8L,IAAgBA,EAAY6R,mBAAqB7R,EAAY8R,mBAAoB,CACnF,IAAM0oB,EAAax6B,EAAY6R,mBAAqB7R,EAAY8R,kBAG5D0oB,GAAcA,EAAWxoB,SAAWwoB,EAAWxoB,mBAAmBsM,KACpEkc,EAAWjoB,oBAAsB,SAACD,GAChC,IAAMqM,EAAe6b,GAAcA,EAAWxoB,SAAwD,mBAAtCwoB,EAAWxoB,QAAQsO,eAAiCka,EAAWxoB,QAAQsO,iBAAmB,GACtJhO,GAAiBA,EAAc5F,MAAQ4F,EAAc5F,KAAKiS,IAC5DngB,EAAK46B,SAAW9mB,EAAc5F,KAAKiS,GAAa8b,MAChDj8B,EAAK66B,gBAAgB76B,EAAK46B,SAAU9mB,EAAc5F,KAAKiS,GAAa+b,aAEpEl8B,EAAK46B,gBAOfrB,EAAFp6B,UAAAu8B,qBAAE,SAAqBn6B,EAAWC,EAAyBC,GAAzD,IAAFzB,EAAAtK,KA2BI,GAzBAA,KAAKulC,qBAAuBvlC,KAAKwJ,UAAUi9B,aAAarpB,UAAU,SAACK,GAC7D3R,EAAYqZ,kBACd7a,EAAKw5B,wBAAwB7b,mBAC7B3d,EAAKw5B,wBAAwB/b,wBAC7Bzd,EAAKw5B,wBAAwB9b,uBAK7Blc,EAAYs3B,gBACbt3B,EAAY6R,mBAAqB7R,EAAY8R,kBAAqB5d,KAAK21B,YAAY0C,oBAAoBxsB,EAAMC,GAAe9L,KAAK21B,YAAY8C,kBAAkB5sB,EAAMC,EAAa9L,KAAKkM,UAAWlM,KAAK2iB,qBAItM7W,EAAYwa,kBACdtmB,KAAKwiB,cAAc5W,KAAKC,EAAMC,EAAa9L,KAAK2iB,oBAG5C7W,EAAY8V,SAAW9V,EAAY8V,QAAQC,SAC7C7hB,KAAKwiB,cAAcb,gCAAgC7V,EAAa9L,KAAK2iB,oBAEtE7W,EAAY6R,mBAAqB7R,EAAY8R,kBAAqB5d,KAAKwiB,cAAcvF,sBAAsBpR,EAAMC,GAAe9L,KAAKwiB,cAAcjE,oBAAoB1S,EAAMC,EAAa9L,KAAKkM,YAI9LJ,EAAY6R,mBAAqB7R,EAAY8R,kBAAmB,CAClE,IAAMF,EAAa5R,EAAY6R,mBAAqB7R,EAAY8R,kBAC5D9R,EAAY8R,mBACd7B,QAAQC,KAAK,iQAGX0B,GAAcA,EAAWI,SAAWJ,EAAWI,QAAQlS,MACzD8R,EAAWI,QAAQlS,KAAK8R,EAAWtR,QAASN,EAAY9D,WAAYhI,KAAK6L,MAK7E7L,KAAKwlC,qBAAuBxlC,KAAKikC,iBAAiBvO,mBAAmBtY,UAAU,SAACspB,GAC9Ep8B,EAAKu6B,0BAA0B5C,KAAKyE,KAKtC1mC,KAAKgkC,iBAAiB/Q,mBAAmBpnB,EAAM7L,KAAK8L,YAAaC,GACjE/L,KAAKgkC,iBAAiBxQ,cAAc3nB,EAAM7L,KAAK8L,YAAaC,GAE5D/L,KAAKyc,cAAcW,UAAUrR,EAAS6sB,kBAAmB,SAAC16B,EAAQ4W,GAChEjJ,EAAK86B,iBACL96B,EAAKoT,WAEPjf,KAAKyc,cAAcW,UAAUrR,EAAS66B,cAAe,SAAC1oC,EAAQ4W,GAC5DjJ,EAAKg7B,eAAe/xB,EAAKgyB,MACzBj7B,EAAKoT,YAIT4kB,EAAFp6B,UAAA48B,+BAAE,SAA+Bv6B,GAA/B,IAAFxB,EAAAtK,KACU0d,EAAa5R,EAAY6R,mBAAqB7R,EAAY8R,kBAC1DgD,EAAwClD,GAAcA,EAAWI,SAAWJ,EAAWI,QAAQ1R,QAAWsR,EAAWI,QAAQ1R,WAC7H26B,IAA2BnmB,KAA4BA,IAAkBA,EAAenW,eAAe,gCAAkCmW,EAA4C,6BAG3L,GAAIlD,EAAY,CACd,IAAM+D,EAAiB/D,EAAWI,QAClC,GAAIhS,GAAeA,EAAY8V,QACzBH,GAAkBA,EAAe2L,eAAiBthB,EAAY8V,QAAQC,SACxEJ,EAAe2L,cAActhB,EAAY8V,QAAQC,SAAS,GAExDJ,GAAkBA,EAAeoM,eAAiB/hB,EAAY8V,QAAQsU,SACxEzU,EAAeoM,cAAczf,UAAWtC,EAAY8V,QAAQsU,SAE1DzU,GAAkBA,EAAe6L,kBAAoBxhB,EAAY8V,QAAQ5Z,YAC3EyZ,EAAe6L,iBAAiBxhB,EAAY8V,QAAQ5Z,WAAW8kB,WAAYhhB,EAAY8V,QAAQ5Z,WAAWwjB,cAEvG,CACL,IAAM/M,EAAgBze,KAAKwiB,cAAcnC,mBACrC5B,GAAiBgD,GAAkBA,EAAe2L,eACpD3L,EAAe2L,cAAc3O,GAAe,IAKlD,GAAIf,GAAcA,EAAWI,UAAYJ,EAAWspB,QAAUD,GAAyB,CACrF,IAAM/oB,EAAkD,mBAAlCN,EAAWI,QAAQ+J,WAA6BnK,EAAWI,QAAQ+J,aAAe,GAClGof,EAAsB,EAA2BvpB,EAAWG,QAAQG,GAASN,EAAWspB,OAAOhpB,GAGrGmP,WAAW,WAAjB+Z,OAAAA,EAAA58B,OAAA,OAAA,EAAA,kEAO8B,OANlBoT,EAAWK,YACbL,EAAWK,cAKrB,EAAoCrc,EAAculC,kBAApC7oB,EAAgBH,EAA9Bte,SAI6B+d,GAAcA,EAAWI,mBAAmBsM,IAAkB1M,EAAWW,qBAC5FX,EAAWW,oBAAoBD,GAI7BV,EAAWY,aACbZ,EAAWY,YAAYF,gBAM/BylB,EAAFp6B,UAAA28B,iBAAE,SAAiBv6B,EAAWO,GAEtBP,GAAQO,EAAQq2B,2BAClB52B,EAAKia,kBAIP9lB,KAAKkkC,QAAQt4B,KAAKC,EAAMO,GACpBA,EAAQ42B,kBACVhjC,KAAKkkC,QAAQ5N,2BACTzqB,GAAQO,EAAQq2B,2BAClB52B,EAAKia,mBAGP9lB,KAAKkkC,QAAQ1N,WAAW,GAAKY,OAAQp3B,KAAKm3B,WAAY/nB,MAAOpP,KAAK8kC,aAItEjB,EAAFp6B,UAAAi8B,iBAAE,SAAiB55B,GAOf,OANAA,EAAY8oB,OAAS50B,KAAK40B,OAC1B9oB,EAAYirB,gBAAkB,sBAAsB/2B,KAAK40B,QACrD9oB,EAAYwa,iBAAmBtmB,KAAKmkC,cAAc7d,mBACpDxa,EAAYqb,eAAgB,GAGvB7a,EAAEC,QAAO,KAAUg2B,GAAmBviC,KAAKmkC,cAAer4B,IAGnE+3B,EAAFp6B,UAAA09B,kBAAE,SAAkBn/B,GAChBhI,KAAKikC,iBAAiBvO,mBAAmBz3B,MACvCsX,QAAUsgB,UAAW7tB,EAAY+C,KAAM+qB,GAAc9tB,YACrD+tB,UAAW/1B,KAAKikC,iBAAiBjO,yBAQrC6N,EAAFp6B,UAAA07B,gBAAE,SAAgBF,EAAgBuB,GAC1BvB,GAAWjlC,KAAK6L,MAAQ7L,KAAKkM,WAAgD,mBAA5BlM,KAAKkM,UAAUg6B,WAClElmC,KAAKkM,UAAUg6B,SAASjB,EAASjlC,KAAK8L,YAAYg3B,uBAGlD9iC,KAAK6L,KAAKmT,aACVhf,KAAK6L,KAAKoT,UAENjf,KAAK8L,YAAYorB,kBAAoBl3B,KAAK8L,YAAY6R,qBAGxD3d,KAAKqkC,kBAAmBrkC,KAAK8L,YAAY6R,mBAAqB3d,KAAK8L,YAAYorB,mBAAqB9oB,YAAoBpO,KAAK8L,YAAYorB,mBAAqB,EAIzJl3B,KAAK8L,YAAY9D,aACpBhI,KAAK8L,YAAY9D,WAAchI,KAAK8L,YAAsB,WAAI9L,KAAK8L,YAAY9D,WAAaoG,WAE1FpO,KAAK8L,YAAY9D,YAAcw+B,IACjCxmC,KAAK8L,YAAY9D,WAAW04B,WAAa8F,GAEvCxmC,KAAK8L,YAAY8V,SAAW5hB,KAAK8L,YAAY8V,QAAQ5Z,YAAchI,KAAK8L,YAAY9D,aACtFhI,KAAK8L,YAAY9D,WAAWwjB,SAAWxrB,KAAK8L,YAAY8V,QAAQ5Z,WAAWwjB,SAC3ExrB,KAAK8L,YAAY9D,WAAW8kB,WAAa9sB,KAAK8L,YAAY8V,QAAQ5Z,WAAW8kB,YAE/E9sB,KAAKghC,sBAAwBhhC,KAAK0lC,iBAAiB1lC,KAAK8L,cAEtD9L,KAAK6L,MAAS7L,KAAK8L,YAAYk3B,kBAEjChjC,KAAKkkC,QAAQ1N,WAAW,MAM9BqN,EAAFp6B,UAAAs7B,4BAAE,SAA4BqC,GAC1BpnC,KAAK6L,KAAKsa,WAAWihB,GACjBpnC,KAAK8L,YAAYqZ,iBACnBnlB,KAAK8jC,wBAAwB7b,oBAOjC4b,EAAFp6B,UAAA0d,cAAE,SAAckgB,GAEZ,OADArnC,KAAK6L,KAAKqb,uBAAuBmgB,GAC1BA,GAITxD,EAAFp6B,UAAA69B,gBAAE,WACE,IAAMD,GAAarnC,KAAK6L,KAAKmJ,aAAamS,cAE1C,OADAnnB,KAAK6L,KAAKqb,uBAAuBmgB,GAC1BA,KAnYX,mBAfAt8B,KAACC,EAAAA,aACDD,KAACm3B,EAAAA,UAADptB,OACEqtB,SAAU,oBACVC,SAAU,qeArBZr3B,KAASuX,KACTvX,KAASG,KACTH,KAASyR,KAGTzR,KAAS8oB,KADT9oB,KAASioB,KAETjoB,KAAS0qB,KACT1qB,KAASsrB,KACTtrB,KAASsX,KACTtX,KAASotB,KAbTptB,KAASE,EAAAA,mBA+FTF,KAAAqD,UAAAm5B,aAAAx8B,KAAKy8B,EAAAA,OAAL1yB,MAAY,kCA1CZyvB,oBAAAx5B,KAAGs3B,EAAAA,SACHmC,gBAAAz5B,KAAGs3B,EAAAA,SACHoC,oBAAA15B,KAAGs3B,EAAAA,SACHqC,qBAAA35B,KAAGs3B,EAAAA,SACHsC,sBAAA55B,KAAGs3B,EAAAA,SACHuC,uBAAA75B,KAAGs3B,EAAAA,SACHwC,4BAAA95B,KAAGs3B,EAAAA,SACHzN,SAAA7pB,KAAGu3B,EAAAA,QACHx2B,cAAAf,KAAGu3B,EAAAA,QACHnL,aAAApsB,KAAGu3B,EAAAA,QACHwC,YAAA/5B,KAAGu3B,EAAAA,QAEHtlB,oBAAAjS,KAAGu3B,EAAAA,QAUH2C,UAAAl6B,KAAGu3B,EAAAA,SClGH,IAAAmF,GAAA,WAAA,SAAAA,YAmCSA,EAATC,QAAE,SAAeC,GACb,YADJ,IAAAA,IAAiBA,OAEXC,SAAUH,EACVI,YACGC,QAAS,SAAUC,SAAUJ,GAC9Bp+B,GACA+Y,GACApX,GACAsR,GACA4N,GACA4I,GACAa,GACA9B,GACA0D,GACAxF,GACAoG,GACAhU,GACA8V,QApDR,mBAoBAptB,KAACi9B,EAAAA,SAADlzB,OACEmzB,SACEC,EAAAA,aACAC,EAAAA,iBAEFC,cACEvE,GACAzD,IAEFiI,SACExE,GACAzD,ynBvFIJ,SAAiCr/B,GAE/B,IAAK,IADCunC,KACGloC,EAAIW,EAAMvB,OAAS,EAAGY,GAAK,EAAGA,IACrCkoC,EAAI7f,SAAS,KAAM1nB,EAAMX,GAAGmoC,aAAc,KAAKh7B,KAAK,KAEtD,OAAO+6B,EAAI/6B,KAAK,gQA4WlB,SAA4BrH,GAC1B,OAAOD,EAAYC,GAAKlF,QAAQ,WAAY,OAAOoF"
}
