{
  "version": 3,
  "file": "angular-slickgrid.umd.min.js",
  "sources": [
    "ng://angular-slickgrid/node_modules/tslib/tslib.es6.js",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/delimiterType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/fileType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/gridStateType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/operatorType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/sortDirection.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/compareDateUtility.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsShortSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateIsoSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/numericSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/stringSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/sorterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/collection.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/booleanFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/filterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateIsoFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsShortFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUtcFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/collectionSearchFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/numberFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/stringFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/executeMappedCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundDateFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundInputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundSliderFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/inputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/multipleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/selectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/singleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/sliderFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/global-grid-options.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/slickgrid-config.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/filterFactory.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/filter.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/export.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/sort.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/constants.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/controlAndPlugin.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphqlQueryBuilder.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphql.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/global-utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid-odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridEvent.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridState.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/groupingAndColspan.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/resizer.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/avgAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/minAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/maxAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/sumAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/checkboxEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/dateEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/floatEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/integerEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/longTextEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/multipleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/singleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/sliderEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/textEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/arrayToCsvFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/boldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkboxFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkmarkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionEditorFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/complexObjectFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/decimalFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/deleteIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/editIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkUriPrefixFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/infoIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/lowercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/maskFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/multipleFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentSymbolFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/progressBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateBooleanFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/uppercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/yesNoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsPercentageFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/minTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/maxTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/slick-pagination.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/angular-slickgrid.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/modules/angular-slickgrid.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n",
    "export enum DelimiterType {\r\n  colon = ':',\r\n  comma = ',',\r\n  equalSign = '=',\r\n  pipe = '|',\r\n  semicolon = ';',\r\n  space = ' ',\r\n  tab = '\\t',\r\n\r\n  doubleColon = '::',\r\n  doublePipe = '||',\r\n  doubleSemicolon = ';;',\r\n}\r\n\r\n",
    "export enum FileType {\r\n  csv = 'csv',\r\n  doc = 'doc',\r\n  docx = 'docx',\r\n  pdf = 'pdf',\r\n  txt = 'txt',\r\n  xls = 'xls',\r\n  xlsx = 'xlsx'\r\n}\r\n",
    "export enum GridStateType {\r\n  columns = 'columns',\r\n  filter = 'filter',\r\n  pagination = 'pagination',\r\n  sorter = 'sorter'\r\n}\r\n",
    "export enum OperatorType {\n  /** value is empty */\n  empty = '',\n\n  /** value contains x */\n  contains = 'Contains',\n\n  /** value less than x */\n  lessThan = 'LT',\n\n  /** value less than or equal to x */\n  lessThanOrEqual = 'LE',\n\n  /** value greater than x */\n  greaterThan = 'GT',\n\n  /** value great than or equal to x */\n  greaterThanOrEqual = 'GE',\n\n  /** value not equal to x */\n  notEqual = 'NE',\n\n  /** value equal to x */\n  equal = 'EQ',\n\n  /** String ends with value */\n  endsWith = 'EndsWith',\n\n  /** String starts with value */\n  startsWith = 'StartsWith',\n\n  /** Find an equal match inside a collection */\n  in = 'IN',\n\n  /** Inverse (Not In) of an equal match inside a collection */\n  notIn = 'NOT_IN',\n\n  /**\n   * Find a substring contained inside a collection\n   * For example, this condition would return True with \"IN_CONTAINS\":: value='Task2,Task3', collection=['Task2','Task3']\n   * This would have returned False with \"IN\" because 'Task2' does not equal 'Task2,Task3'. However 'Task2' is contained in 'Task2,Task3'\n   */\n  inContains = 'IN_CONTAINS',\n\n  /** Inversed (Not In) of substring contained inside a collection */\n  notInContains = 'NOT_IN_CONTAINS',\n}\n",
    "export enum SortDirection {\r\n  asc = 'asc',\r\n  ASC = 'ASC',\r\n  desc = 'desc',\r\n  DESC = 'DESC'\r\n}\r\n",
    "import { FieldType, OperatorType } from '../models/index';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/first';\r\nimport 'rxjs/add/operator/take';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\n/** Simple function to which will loop and create as demanded the number of white spaces,\r\n * this will be used in the Excel export\r\n * @param int nbSpaces: number of white spaces to create\r\n */\r\nexport function addWhiteSpaces(nbSpaces): string {\r\n  let result = '';\r\n\r\n  for (let i = 0; i < nbSpaces; i++) {\r\n    result += ' ';\r\n  }\r\n  return result;\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityDecode(input: string): string {\r\n  return input.replace(/&#(\\d+);/g, function (match, dec) {\r\n    return String.fromCharCode(dec);\r\n  });\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityEncode(input: any): string {\r\n  const buf = [];\r\n  for (let i = input.length - 1; i >= 0; i--) {\r\n    buf.unshift(['&#', input[i].charCodeAt(), ';'].join(''));\r\n  }\r\n  return buf.join('');\r\n}\r\n\r\n/**\r\n * Compares two arrays to determine if all the items are equal\r\n * @param a first array\r\n * @param b second array to compare with a\r\n * @param [orderMatters=false] flag if the order matters, if not arrays will be sorted\r\n * @return boolean true if equal, else false\r\n */\r\nexport function arraysEqual(a: any[], b: any[], orderMatters: boolean = false): boolean {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n\r\n  if (a === null || b === null) {\r\n    return false;\r\n  }\r\n\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n\r\n  if (!orderMatters) {\r\n    a.sort();\r\n    b.sort();\r\n  }\r\n\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Try casting an input of type Promise | Observable into a Promise type.\r\n * @param object which could be of type Promise or Observable\r\n * @param fromServiceName string representing the caller service name and will be used if we throw a casting problem error\r\n */\r\nexport function castToPromise<T>(input: Promise<T> | Observable<T>, fromServiceName: string = ''): Promise<T> {\r\n  let promise: any = input;\r\n\r\n  if (input instanceof Promise) {\r\n    // if it's already a Promise then return it\r\n    return input;\r\n  } else if (input instanceof Observable) {\r\n    promise = input.first().toPromise();\r\n    if (!(promise instanceof Promise)) {\r\n      promise = input.take(1).toPromise();\r\n    }\r\n    if (!(promise instanceof Promise)) {\r\n      throw new Error(\r\n        `Something went wrong, Angular-Slickgrid ${fromServiceName} is not able to convert the Observable into a Promise.\r\n        If you are using Angular HttpClient, you could try converting your http call to a Promise with \".toPromise()\"\r\n        for example::  this.http.post('graphql', { query: graphqlQuery }).toPromise()\r\n        `);\r\n    }\r\n  }\r\n\r\n  return promise;\r\n}\r\n\r\n/**\r\n * Uses the logic function to find an item in an array or returns the default\r\n * value provided (empty object by default)\r\n * @param any[] array the array to filter\r\n * @param function logic the logic to find the item\r\n * @param any [defaultVal={}] the default value to return\r\n * @return object the found object or deafult value\r\n */\r\nexport function findOrDefault(array: any[], logic: (item: any) => boolean, defaultVal = {}): any {\r\n  return array.find(logic) || defaultVal;\r\n}\r\n\r\n/**\r\n  * Take a number (or a string) and display it as a formatted decimal string with defined minimum and maximum decimals\r\n  * @param input\r\n  * @param minDecimal\r\n  * @param maxDecimal\r\n  */\r\nexport function decimalFormatted(input: number | string, minDecimal?: number, maxDecimal?: number) {\r\n  if (isNaN(+input)) {\r\n    return input;\r\n  }\r\n\r\n  const minDec = (minDecimal === undefined) ? 2 : minDecimal;\r\n  const maxDec = (maxDecimal === undefined) ? 2 : maxDecimal;\r\n  let amount = String(Math.round(+input * Math.pow(10, maxDec)) / Math.pow(10, maxDec));\r\n\r\n  if (amount.indexOf('.') < 0) {\r\n    amount += '.';\r\n  }\r\n  while ((amount.length - amount.indexOf('.')) <= minDec) {\r\n    amount += '0';\r\n  }\r\n  return amount;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent moment.js format\r\n * refer to moment.js for the format standard used: https://momentjs.com/docs/#/parsing/string-format/\r\n * @param fieldType\r\n */\r\nexport function mapMomentDateFormatWithFieldType(fieldType: FieldType): string {\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'YYYY-MM-DD HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'YYYY-MM-DD hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'YYYY-MM-DD hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'MM/DD/YYYY';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'M/D/YY';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'MM/DD/YYYY HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'MM/DD/YYYY hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'MM/DD/YYYY hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'M/D/YY H:m:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'M/D/YY h:m:s a';\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'YYYY-MM-DD';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent Flatpickr format\r\n * refer to Flatpickr for the format standard used: https://chmln.github.io/flatpickr/formatting/#date-formatting-tokens\r\n * also note that they seem very similar to PHP format (except for am/pm): http://php.net/manual/en/function.date.php\r\n * @param fieldType\r\n */\r\nexport function mapFlatpickrDateFormatWithFieldType(fieldType: FieldType): string {\r\n  /*\r\n    d: Day of the month, 2 digits with leading zeros\t01 to 31\r\n    D: A textual representation of a day\tMon through Sun\r\n    l: (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday\r\n    j: Day of the month without leading zeros\t1 to 31\r\n    J: Day of the month without leading zeros and ordinal suffix\t1st, 2nd, to 31st\r\n    w: Numeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday)\r\n    F: A full textual representation of a month\tJanuary through December\r\n    m: Numeric representation of a month, with leading zero\t01 through 12\r\n    n: Numeric representation of a month, without leading zeros\t1 through 12\r\n    M: A short textual representation of a month\tJan through Dec\r\n    U: The number of seconds since the Unix Epoch\t1413704993\r\n    y: A two digit representation of a year\t99 or 03\r\n    Y: A full numeric representation of a year, 4 digits\t1999 or 2003\r\n    H: Hours (24 hours)\t00 to 23\r\n    h: Hours\t1 to 12\r\n    i: Minutes\t00 to 59\r\n    S: Seconds, 2 digits\t00 to 59\r\n    s: Seconds\t0, 1 to 59\r\n    K: AM/PM\tAM or PM\r\n  */\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'Y-m-d H:i:S';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'Y-m-d h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'Y-m-d h:i:S K';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'm/d/Y';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'm/d/y';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'm/d/Y H:i:S';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'm/d/Y h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'm/d/Y h:i:s K';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'm/d/y H:i:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'm/d/y h:i:s K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'Z';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'Y-m-d';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operators (ex.: <= is \"le\", > is \"gt\")\r\n * @param string operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorType(operator: string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (operator) {\r\n    case '<':\r\n      map = OperatorType.lessThan;\r\n      break;\r\n    case '<=':\r\n      map = OperatorType.lessThanOrEqual;\r\n      break;\r\n    case '>':\r\n      map = OperatorType.greaterThan;\r\n      break;\r\n    case '>=':\r\n      map = OperatorType.greaterThanOrEqual;\r\n      break;\r\n    case '<>':\r\n    case '!=':\r\n    case 'neq':\r\n    case 'NEQ':\r\n      map = OperatorType.notEqual;\r\n      break;\r\n    case '*':\r\n    case '.*':\r\n    case 'startsWith':\r\n      map = OperatorType.startsWith;\r\n      break;\r\n    case '*.':\r\n    case 'endsWith':\r\n      map = OperatorType.endsWith;\r\n      break;\r\n    case '=':\r\n    case '==':\r\n    case 'eq':\r\n    case 'EQ':\r\n      map = OperatorType.equal;\r\n      break;\r\n    case 'in':\r\n    case 'IN':\r\n      map = OperatorType.in;\r\n      break;\r\n    case 'notIn':\r\n    case 'NIN':\r\n    case 'NOT_IN':\r\n      map = OperatorType.notIn;\r\n      break;\r\n    default:\r\n      map = OperatorType.contains;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operator by a Filter Type\r\n * For example a multiple-select typically uses 'IN' operator\r\n * @param operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorByFieldType(fieldType: FieldType | string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.string:\r\n    case FieldType.unknown:\r\n      map = OperatorType.contains;\r\n      break;\r\n    case FieldType.float:\r\n    case FieldType.number:\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    case FieldType.date:\r\n    case FieldType.dateUtc:\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n    case FieldType.dateTimeIsoAmPm:\r\n    case FieldType.dateTimeIsoAM_PM:\r\n    case FieldType.dateUs:\r\n    case FieldType.dateUsShort:\r\n    case FieldType.dateTimeUs:\r\n    case FieldType.dateTimeUsAmPm:\r\n    case FieldType.dateTimeUsAM_PM:\r\n    case FieldType.dateTimeUsShort:\r\n    case FieldType.dateTimeUsShortAmPm:\r\n    case FieldType.dateTimeUsShortAM_PM:\r\n    default:\r\n      map = OperatorType.equal;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Parse a date passed as a string and return a Date object (if valid)\r\n * @param inputDateString\r\n * @returns string date formatted\r\n */\r\nexport function parseUtcDate(inputDateString: string, useUtc: boolean): string | null {\r\n  let date = null;\r\n\r\n  if (/^[0-9\\-\\/]*$/.test(inputDateString)) {\r\n    // get the UTC datetime with moment.js but we need to decode the value so that it's valid text\r\n    const dateString = decodeURIComponent(inputDateString);\r\n    const dateMoment = moment(new Date(dateString));\r\n    if (dateMoment.isValid() && dateMoment.year().toString().length === 4) {\r\n      date = (useUtc) ? dateMoment.utc().format() : dateMoment.format();\r\n    }\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\n/**\r\n * Sanitize, return only the text without HTML tags\r\n * @input htmlString\r\n * @return text\r\n */\r\nexport function sanitizeHtmlToText(htmlString: string) {\r\n  const temp = document.createElement('div');\r\n  temp.innerHTML = htmlString;\r\n  return temp.textContent || temp.innerText;\r\n}\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string\r\n * @returns string\r\n */\r\nexport function titleCase(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Converts a string to camel case\r\n * @param str the string to convert\r\n * @return the string in camel case\r\n */\r\nexport function toCamelCase(str: string): string {\r\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w|[\\s+\\-_\\/])/g, (match: string, offset: number) => {\r\n    // remove white space or hypens or underscores\r\n    if (/[\\s+\\-_\\/]/.test(match)) {\r\n      return '';\r\n    }\r\n\r\n    return offset === 0 ? match.toLowerCase() : match.toUpperCase();\r\n  });\r\n}\r\n\r\n/**\r\n * Converts a string to kebab (hypen) case\r\n * @param str the string to convert\r\n * @return the string in kebab case\r\n */\r\nexport function toKebabCase(str: string): string {\r\n  return toCamelCase(str).replace(/([A-Z])/g, '-$1').toLowerCase();\r\n}\r\n",
    "import * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport function compareDates(value1, value2, format, sortDirection, strict?: boolean) {\r\n  let diff = 0;\r\n\r\n  if (value1 === null || value1 === '' || !moment(value1, format, strict).isValid()) {\r\n    diff = -1;\r\n  } else if (value2 === null || value2 === '' || !moment(value2, format, strict).isValid()) {\r\n    diff = 1;\r\n  } else {\r\n    const date1 = moment(value1, format, strict);\r\n    const date2 = moment(value2, format, strict);\r\n    diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);\r\n  }\r\n\r\n  return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));\r\n}\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nimport { compareDates } from './compareDateUtility';\r\n\r\nexport const dateSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, moment.ISO_8601, sortDirection);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const numericSorter: Sorter = (value1, value2, sortDirection) => {\r\n  const x = (isNaN(value1) || value1 === '' || value1 === null) ? -99e+10 : parseFloat(value1);\r\n  const y = (isNaN(value2) || value2 === '' || value2 === null) ? -99e+10 : parseFloat(value2);\r\n  return sortDirection * (x === y ? 0 : (x > y ? 1 : -1));\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const stringSorter: Sorter = (value1, value2, sortDirection) => {\r\n  let position;\r\n  if (value1 === null) {\r\n    position = -1;\r\n  } else if (value2 === null) {\r\n    position = 1;\r\n  } else if (value1 === value2) {\r\n    position = 0;\r\n  } else if (sortDirection) {\r\n    position = value1 < value2 ? -1 : 1;\r\n  } else if (!sortDirection) {\r\n    position = value1 < value2 ? 1 : -1;\r\n  }\r\n  return sortDirection * position;\r\n};\r\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\nimport { dateUsShortSorter } from './dateUsShortSorter';\nimport { dateSorter } from './dateSorter';\nimport { dateIsoSorter } from './dateIsoSorter';\nimport { dateUsSorter } from './dateUsSorter';\nimport { numericSorter } from './numericSorter';\nimport { stringSorter } from './stringSorter';\n\nexport const Sorters = {\n  date: dateSorter,\n  dateIso: dateIsoSorter,\n  dateUs: dateUsSorter,\n  dateUsShort: dateUsShortSorter,\n  numeric: numericSorter,\n  string: stringSorter\n};\n",
    "import { FieldType } from './../models/index';\r\nimport { Sorters } from './index';\r\n\r\nexport function sortByFieldType(value1: any, value2: any, fieldType: FieldType, sortDirection: number) {\r\n  let sortResult = 0;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.number:\r\n      sortResult = Sorters.numeric(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.date:\r\n      sortResult = Sorters.date(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateIso:\r\n      sortResult = Sorters.dateIso(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUs:\r\n      sortResult = Sorters.dateUs(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      sortResult = Sorters.dateUsShort(value1, value2, sortDirection);\r\n      break;\r\n    default:\r\n      sortResult = Sorters.string(value1, value2, sortDirection);\r\n      break;\r\n  }\r\n\r\n  return sortResult;\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  CollectionFilterBy,\r\n  CollectionSortBy,\r\n  FieldType,\r\n  OperatorType,\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\n\r\n@Injectable()\r\nexport class CollectionService {\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /**\r\n   * Filter items from a collection\r\n   * @param collection\r\n   * @param filterBy\r\n   */\r\n  filterCollection(collection: any[], filterBy: CollectionFilterBy): any[] {\r\n    let filteredCollection: any[] = [];\r\n\r\n    if (filterBy) {\r\n      const property = filterBy.property || '';\r\n      const operator = filterBy.operator || OperatorType.equal;\r\n      // just check for undefined since the filter value could be null, 0, '', false etc\r\n      const value = typeof filterBy.value === 'undefined' ? '' : filterBy.value;\r\n\r\n      switch (operator) {\r\n        case OperatorType.equal:\r\n          filteredCollection = collection.filter((item) => item[property] === value);\r\n          break;\r\n        case OperatorType.in:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) !== -1);\r\n          break;\r\n        case OperatorType.notIn:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) === -1);\r\n          break;\r\n        case OperatorType.contains:\r\n          filteredCollection = collection.filter((item) => value.indexOf(item[property]) !== -1);\r\n          break;\r\n        default:\r\n          filteredCollection = collection.filter((item) => item[property] !== value);\r\n      }\r\n    }\r\n\r\n    return filteredCollection;\r\n  }\r\n\r\n  /**\r\n   * Sort items in a collection\r\n   * @param collection\r\n   * @param sortBy\r\n   * @param enableTranslateLabel\r\n   */\r\n  sortCollection(collection: any[], sortBy: CollectionSortBy, enableTranslateLabel?: boolean): any[] {\r\n    let sortedCollection: any[] = [];\r\n\r\n    if (sortBy) {\r\n      const property = sortBy.property || '';\r\n      const sortDirection = sortBy.hasOwnProperty('sortDesc') ? (sortBy.sortDesc ? -1 : 1) : 1;\r\n      const fieldType = sortBy.fieldType || FieldType.string;\r\n\r\n      sortedCollection = collection.sort((dataRow1: any, dataRow2: any) => {\r\n        const value1 = (enableTranslateLabel) ? this.translate.instant(dataRow1[property] || ' ') : dataRow1[property];\r\n        const value2 = (enableTranslateLabel) ? this.translate.instant(dataRow2[property] || ' ') : dataRow2[property];\r\n        const result = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n        return result;\r\n      });\r\n    }\r\n\r\n    return sortedCollection;\r\n  }\r\n}\r\n",
    "import { FilterCondition, FilterConditionOption } from './../models/index';\r\n\r\nfunction parseBoolean(str: number | string) {\r\n  return /(true|1)/i.test(str + '');\r\n}\r\n\r\nexport const booleanFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  return parseBoolean(options.cellValue) === parseBoolean(searchTerm);\r\n};\r\n",
    "export const testFilterCondition = (operator: string, value1: any, value2: any): boolean => {\n  switch (operator) {\n    case '<':\n    case 'LT': return (value1 < value2);\n    case '<=':\n    case 'LE': return (value1 <= value2);\n    case '>':\n    case 'GT': return (value1 > value2);\n    case '>=':\n    case 'GE': return (value1 >= value2);\n    case '!=':\n    case '<>':\n    case 'NE': return (value1 !== value2);\n    case '=':\n    case '==':\n    case 'EQ': return (value1 === value2);\n    case 'IN': return ((value2 && value2.includes) ? (value2.includes(value1)) : false);\n    case 'NIN':\n    case 'NOT_IN':\n      return ((value2 && value2.includes) ? (!value2.includes(value1)) : false);\n    case 'IN_CONTAINS':\n      if (value2 && Array.isArray(value2) && value2.findIndex) {\n        return ((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);\n      }\n      return false;\n    case 'NIN_CONTAINS':\n    case 'NOT_IN_CONTAINS':\n    if (value2 && Array.isArray(value2) && value2.findIndex) {\n      return !((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);\n    }\n    return false;\n}\nreturn true;\n};\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  const filterSearchType = options.filterSearchType || FieldType.dateIso;\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(filterSearchType);\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerm, searchDateFormat, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue);\r\n  const dateSearch = moment(searchTerm);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateUtcFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerms = Array.isArray(options.searchTerms) && options.searchTerms[0] || [];\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(options.filterSearchType || options.fieldType);\r\n  if (!moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerms[0], searchDateFormat, true).isValid()) {\r\n    return true;\r\n  }\r\n  const dateCell = moment(options.cellValue, moment.ISO_8601, true);\r\n  const dateSearch = moment(searchTerms[0], searchDateFormat, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const collectionSearchFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // multiple-select will always return text, so we should make our cell values text as well\r\n  const cellValue = options.cellValue + '';\r\n\r\n  return testFilterCondition(options.operator || 'IN', cellValue, options.searchTerms || []);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const numberFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const cellValue = parseFloat(options.cellValue);\r\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || 0;\r\n  if (typeof searchTerm === 'string') {\r\n    searchTerm = parseFloat(searchTerm);\r\n  }\r\n\r\n  if (!searchTerm && (!options.operator || options.operator === '')) {\r\n    return true;\r\n  }\r\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption, OperatorType } from '../models/index';\nimport { testFilterCondition } from './filterUtilities';\n\nexport const stringFilterCondition: FilterCondition = (options: FilterConditionOption) => {\n  // make sure the cell value is a string by casting it when possible\n  options.cellValue = (options.cellValue === undefined || options.cellValue === null) ? '' : options.cellValue.toString();\n\n  // make both the cell value and search value lower for case insensitive comparison\n  const cellValue = options.cellValue.toLowerCase();\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || '';\n  if (typeof searchTerm === 'string') {\n    searchTerm = searchTerm.toLowerCase();\n  }\n\n  if (options.operator === '*' || options.operator === OperatorType.endsWith) {\n    return cellValue.endsWith(searchTerm);\n  } else if ((options.operator === '' && options.cellValueLastChar === '*') || options.operator === OperatorType.startsWith) {\n    return cellValue.startsWith(searchTerm);\n  } else if (options.operator === '') {\n    return cellValue.includes(searchTerm);\n  }\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\n};\n",
    "import { booleanFilterCondition } from './booleanFilterCondition';\nimport { dateFilterCondition } from './dateFilterCondition';\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\nimport { FilterConditionOption } from './../models/filterConditionOption.interface';\nimport { FilterCondition } from '../models/filterCondition.interface';\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\nimport { numberFilterCondition } from './numberFilterCondition';\nimport { stringFilterCondition } from './stringFilterCondition';\nimport { FieldType } from '../models/index';\n\nexport const executeMappedCondition: FilterCondition = (options: FilterConditionOption) => {\n  // when using a multi-select ('IN' operator) we will not use the field type but instead go directly with a collection search\n  const operator = options.operator && options.operator.toUpperCase();\n  if (options && options.operator && (operator === 'IN' || operator === 'NIN' || operator === 'IN_CONTAINS' || operator === 'NIN_CONTAINS')) {\n    return collectionSearchFilterCondition(options);\n  }\n\n  // execute the mapped type, or default to String condition check\n  switch (options.fieldType) {\n    case FieldType.boolean:\n      return booleanFilterCondition(options);\n    case FieldType.date:\n      return dateFilterCondition(options);\n    case FieldType.dateUtc:\n      return dateUtcFilterCondition(options);\n    case FieldType.dateIso:\n      return dateIsoFilterCondition(options);\n    case FieldType.dateUs:\n    case FieldType.dateTimeUs:\n      return dateUsFilterCondition(options);\n    case FieldType.dateUsShort:\n    case FieldType.dateTimeUsShort:\n      return dateUsShortFilterCondition(options);\n    case FieldType.number:\n      return numberFilterCondition(options);\n    case FieldType.string:\n    default:\n      return stringFilterCondition(options);\n  }\n};\n",
    "import { FilterConditionOption } from './../models/filterConditionOption.interface';\r\nimport { booleanFilterCondition } from './booleanFilterCondition';\r\nimport { dateFilterCondition } from './dateFilterCondition';\r\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\r\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\r\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\r\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\r\nimport { executeMappedCondition } from './executeMappedCondition';\r\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { numberFilterCondition } from './numberFilterCondition';\r\nimport { stringFilterCondition } from './stringFilterCondition';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const FilterConditions = {\r\n  executeMappedCondition,\r\n  booleanFilter: booleanFilterCondition,\r\n  collectionSearchFilter: collectionSearchFilterCondition,\r\n  dateFilter: dateFilterCondition,\r\n  dateIsoFilter: dateIsoFilterCondition,\r\n  dateUtcFilter: dateUtcFilterCondition,\r\n  dateUsFilter: dateUsFilterCondition,\r\n  dateUsShortFilter: dateUsShortFilterCondition,\r\n  numberFilter: numberFilterCondition,\r\n  stringFilter: stringFilterCondition,\r\n  testFilter: testFilterCondition\r\n};\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { mapFlatpickrDateFormatWithFieldType } from '../services/utilities';\r\nimport { Column, Filter, FilterArguments, FilterCallback, FieldType, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\r\n\r\n// importing Flatpickr works better with a 'require'\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class CompoundDateFilter implements Filter {\r\n  private $filterElm: any;\r\n  private $filterInputElm: any;\r\n  private $selectOperatorElm: any;\r\n  private _currentValue: string;\r\n  private _operator: OperatorType | OperatorString;\r\n  flatInstance: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  set operator(op: OperatorType | OperatorString) {\r\n    this._operator = op;\r\n  }\r\n  get operator(): OperatorType | OperatorString {\r\n    return this._operator || OperatorType.empty;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (args) {\r\n      this.grid = args.grid;\r\n      this.callback = args.callback;\r\n      this.columnDef = args.columnDef;\r\n      this.operator = args.operator || '';\r\n      this.searchTerms = args.searchTerms || [];\r\n\r\n      // date input can only have 1 search term, so we will use the 1st array index if it exist\r\n      const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n      // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n      // and initialize it if searchTerm is filled\r\n      this.$filterElm = this.createDomElement(searchTerm);\r\n\r\n      // step 3, subscribe to the keyup event and run the callback when that happens\r\n      // also add/remove \"filled\" class for styling purposes\r\n      this.$filterInputElm.keyup((e: any) => {\r\n        this.onTriggerEvent(e);\r\n      });\r\n      this.$selectOperatorElm.change((e: any) => {\r\n        this.onTriggerEvent(e);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.flatInstance && this.$selectOperatorElm) {\r\n      this.$selectOperatorElm.val(0);\r\n      this.flatInstance.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm[]) {\r\n    if (values && Array.isArray(values)) {\r\n      this.flatInstance.setDate(values[0]);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n  private buildDatePickerInput(searchTerm?: SearchTerm) {\r\n    const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\r\n    const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnDef.type || FieldType.dateUtc);\r\n    let currentLocale = this.translate.currentLang || 'en';\r\n    if (currentLocale.length > 2) {\r\n      currentLocale = currentLocale.substring(0, 2);\r\n    }\r\n\r\n    const pickerOptions: any = {\r\n      defaultDate: searchTerm || '',\r\n      altInput: true,\r\n      altFormat: outputFormat,\r\n      dateFormat: inputFormat,\r\n      wrap: true,\r\n      closeOnSelect: true,\r\n      locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n      onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n        this._currentValue = dateStr;\r\n\r\n        // when using the time picker, we can simulate a keyup event to avoid multiple backend request\r\n        // since backend request are only executed after user start typing, changing the time should be treated the same way\r\n        if (pickerOptions.enableTime) {\r\n          this.onTriggerEvent(new CustomEvent('keyup'), dateStr === '');\r\n        } else {\r\n          this.onTriggerEvent(undefined, dateStr === '');\r\n        }\r\n      }\r\n    };\r\n\r\n    // add the time picker when format is UTC (Z) or has the 'h' (meaning hours)\r\n    if (outputFormat && (outputFormat === 'Z' || outputFormat.toLowerCase().includes('h'))) {\r\n      pickerOptions.enableTime = true;\r\n    }\r\n\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    const $filterInputElm: any = $(`<div class=flatpickr><input type=\"text\" class=\"form-control\" data-input placeholder=\"${placeholder}\"></div>`);\r\n    this.flatInstance = ($filterInputElm[0] && typeof $filterInputElm[0].flatpickr === 'function') ? $filterInputElm[0].flatpickr(pickerOptions) : null;\r\n    return $filterInputElm;\r\n  }\r\n\r\n  private buildSelectOperatorHtmlString() {\r\n    const optionValues = this.getOptionValues();\r\n    let optionValueString = '';\r\n    optionValues.forEach((option) => {\r\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\r\n    });\r\n\r\n    return `<select class=\"form-control\">${optionValueString}</select>`;\r\n  }\r\n\r\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\r\n    return [\r\n      { operator: '' as OperatorString, description: '' },\r\n      { operator: '=' as OperatorString, description: '' },\r\n      { operator: '<' as OperatorString, description: '' },\r\n      { operator: '<=' as OperatorString, description: '' },\r\n      { operator: '>' as OperatorString, description: '' },\r\n      { operator: '>=' as OperatorString, description: '' },\r\n      { operator: '<>' as OperatorString, description: '' }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  private createDomElement(searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\r\n    this.$filterInputElm = this.buildDatePickerInput(searchTerm);\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\r\n    const $containerInputGroup = $(`<div class=\"input-group flatpickr\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon operator\"></div>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <div class=flatpickr>\r\n          <input type=\"text\" class=\"form-control\" data-input>\r\n        </div>\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    $containerInputGroup.append($operatorInputGroupAddon);\r\n    $containerInputGroup.append(this.$filterInputElm);\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append($containerInputGroup);\r\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\r\n    this.$filterInputElm.data('columnId', this.columnDef.id);\r\n\r\n    if (this.operator) {\r\n      this.$selectOperatorElm.val(this.operator);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterContainerElm.addClass('filled');\r\n      this._currentValue = searchTerm as string;\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  private loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  private onTriggerEvent(e: Event | undefined, clearFilterTriggered?: boolean) {\r\n    if (clearFilterTriggered) {\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n    } else {\r\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\r\n      (this._currentValue) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (this._currentValue ? [this._currentValue] : null), operator: selectedOperator || '' });\r\n    }\r\n  }\r\n\r\n  private hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  private show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n}\r\n",
    "import { Inject } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { FieldType } from './../models/index';\r\nimport { Column, Filter, FilterArguments, FilterCallback, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Inject(TranslateService)\r\nexport class CompoundInputFilter implements Filter {\r\n  private $filterElm: any;\r\n  private $filterInputElm: any;\r\n  private $selectOperatorElm: any;\r\n  private _operator: OperatorType | OperatorString;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  set operator(op: OperatorType | OperatorString) {\r\n    this._operator = op;\r\n  }\r\n  get operator(): OperatorType | OperatorString {\r\n    return this._operator || OperatorType.empty;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.operator = args.operator;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n    // and initialize it if searchTerms is filled\r\n    this.$filterElm = this.createDomElement(searchTerm);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterInputElm.keyup((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n    this.$selectOperatorElm.change((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.$filterElm && this.$selectOperatorElm) {\r\n      this.$selectOperatorElm.val(0);\r\n      this.$filterInputElm.val('');\r\n      this.onTriggerEvent(null, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n      this.$selectOperatorElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm[]) {\r\n    if (values && Array.isArray(values)) {\r\n      this.$filterElm.val(values[0]);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  private buildInputHtmlString() {\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    return `<input class=\"form-control\" type=\"text\" placeholder=\"${placeholder}\" />`;\r\n  }\r\n\r\n  private buildSelectOperatorHtmlString() {\r\n    const optionValues = this.getOptionValues();\r\n    let optionValueString = '';\r\n    optionValues.forEach((option) => {\r\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\r\n    });\r\n\r\n    return `<select class=\"form-control\">${optionValueString}</select>`;\r\n  }\r\n\r\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\r\n    const type = (this.columnDef.type && this.columnDef.type) ? this.columnDef.type : FieldType.string;\r\n    let optionValues = [];\r\n\r\n    switch (type) {\r\n      case FieldType.string:\r\n        optionValues = [\r\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\r\n          { operator: '=' as OperatorString, description: this.translate.instant('EQUALS') },\r\n          { operator: 'a*' as OperatorString, description: this.translate.instant('STARTS_WITH') },\r\n          { operator: '*z' as OperatorString, description: this.translate.instant('ENDS_WITH') },\r\n          /*\r\n          { operator: 'IN' as OperatorString, description: this.translate.instant('IN_COLLECTION_SEPERATED_BY_COMMA') },\r\n          { operator: 'NIN' as OperatorString, description: this.translate.instant('NOT_IN_COLLECTION_SEPERATED_BY_COMMA') },\r\n          */\r\n        ];\r\n        break;\r\n      default:\r\n        optionValues = [\r\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\r\n          { operator: '=' as OperatorString, description: '' },\r\n          { operator: '<' as OperatorString, description: '' },\r\n          { operator: '<=' as OperatorString, description: '' },\r\n          { operator: '>' as OperatorString, description: '' },\r\n          { operator: '>=' as OperatorString, description: '' },\r\n          { operator: '<>' as OperatorString, description: '' }];\r\n        break;\r\n    }\r\n\r\n    return optionValues;\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  private createDomElement(searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\r\n    this.$filterInputElm = $(this.buildInputHtmlString());\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\r\n    const $containerInputGroup = $(`<div class=\"input-group\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon operator\"></div>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <input class=\"form-control\" type=\"text\" />\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    $containerInputGroup.append($operatorInputGroupAddon);\r\n    $containerInputGroup.append(this.$filterInputElm);\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append($containerInputGroup);\r\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\r\n\r\n    this.$filterInputElm.val(searchTerm);\r\n    this.$filterInputElm.data('columnId', this.columnDef.id);\r\n\r\n    if (this.operator) {\r\n      this.$selectOperatorElm.val(this.operator);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterContainerElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  private onTriggerEvent(e: Event | undefined, clearFilterTriggered?: boolean) {\r\n    if (clearFilterTriggered) {\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n    } else {\r\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\r\n      const value = this.$filterInputElm.val();\r\n      (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (value ? [value] : null), operator: selectedOperator || '' });\r\n    }\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport {\n  Column,\n  ColumnFilter,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  OperatorString,\n  OperatorType,\n  SearchTerm\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP = 1;\n\n@Injectable()\nexport class CompoundSliderFilter implements Filter {\n  private _operator: OperatorType | OperatorString;\n  private $containerInputGroupElm: any;\n  private $filterElm: any;\n  private $filterInputElm: any;\n  private $selectOperatorElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor() { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  /** Getter for the Filter Generic Params */\n  private get filterParams(): any {\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};\n  }\n\n  /** Getter for the `filter` properties */\n  private get filterProperties(): ColumnFilter {\n    return this.columnDef && this.columnDef.filter || {};\n  }\n\n  set operator(op: OperatorType | OperatorString) {\n    this._operator = op;\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return this._operator || OperatorType.empty;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    if (args) {\n      this.grid = args.grid;\n      this.callback = args.callback;\n      this.columnDef = args.columnDef;\n      this.operator = args.operator || '';\n      this.searchTerms = args.searchTerms || [];\n\n      // filter input can only have 1 search term, so we will use the 1st array index if it exist\n      const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n      // step 1, create the DOM Element of the filter which contain the compound Operator+Input\n      // and initialize it if searchTerm is filled\n      this.$filterElm = this.createDomElement(searchTerm);\n\n      // step 3, subscribe to the keyup event and run the callback when that happens\n      // also add/remove \"filled\" class for styling purposes\n      this.$filterInputElm.change((e: any) => {\n        this.onTriggerEvent(e);\n      });\n      this.$selectOperatorElm.change((e: any) => {\n        this.onTriggerEvent(e);\n      });\n    }\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm && this.$selectOperatorElm) {\n      const clearedValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;\n      this.$selectOperatorElm.val(0);\n      this.$filterInputElm.val(clearedValue);\n      if (!this.filterParams.hideSliderNumber) {\n        this.$containerInputGroupElm.children('span.input-group-addon').last().html(clearedValue);\n      }\n      this.onTriggerEvent(undefined, true);\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values && Array.isArray(values)) {\n      this.$filterInputElm.val(values[0]);\n      this.$containerInputGroupElm.children('span.input-group-addon').last().html(values[0]);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /** Build HTML Template for the input range (slider) */\n  private buildTemplateHtmlString() {\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\n    const maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\n    const step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;\n\n    return `<input type=\"range\" id=\"rangeInput_${this.columnDef.field}\"\n              name=\"rangeInput_${this.columnDef.field}\"\n              defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n              class=\"form-control slider-filter-input range compound-slider\"\n              onmousemove=\"$('#rangeOuput_${this.columnDef.field}').html(rangeInput_${this.columnDef.field}.value)\" />`;\n  }\n\n  /** Build HTML Template for the text (number) that is shown appended to the slider */\n  private buildTemplateSliderTextHtmlString() {\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\n\n    return `<span class=\"input-group-addon slider-value\" id=\"rangeOuput_${this.columnDef.field}\">${defaultValue}</span>`;\n  }\n\n  /** Build HTML Template select dropdown (operator) */\n  private buildSelectOperatorHtmlString() {\n    const optionValues = this.getOptionValues();\n    let optionValueString = '';\n    optionValues.forEach((option) => {\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\n    });\n\n    return `<select class=\"form-control\">${optionValueString}</select>`;\n  }\n\n  /** Get the available operator option values */\n  private getOptionValues(): { operator: OperatorString, description: string }[] {\n    return [\n      { operator: '' as OperatorString, description: '' },\n      { operator: '=' as OperatorString, description: '' },\n      { operator: '<' as OperatorString, description: '' },\n      { operator: '<=' as OperatorString, description: '' },\n      { operator: '>' as OperatorString, description: '' },\n      { operator: '>=' as OperatorString, description: '' },\n      { operator: '<>' as OperatorString, description: '' }\n    ];\n  }\n\n  /**\n   * Create the DOM element\n   */\n  private createDomElement(searchTerm?: SearchTerm) {\n    const searchTermInput = (searchTerm || '0') as string;\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM Select dropdown for the Operator\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\n    this.$filterInputElm = $(this.buildTemplateHtmlString());\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\n    this.$containerInputGroupElm = $(`<div class=\"input-group search-filter\"></div>`);\n    const $operatorInputGroupAddon = $(`<span class=\"input-group-addon operator\"></span>`);\n\n    /* the DOM element final structure will be\n      <div class=\"input-group\">\n        <div class=\"input-group-addon operator\">\n          <select class=\"form-control\"></select>\n        </div>\n        <input class=\"form-control\" type=\"text\" />\n        <span class=\"input-group-addon\" id=\"rangeOuput_percentComplete\">0</span>\n      </div>\n    */\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\n    this.$containerInputGroupElm.append($operatorInputGroupAddon);\n    this.$containerInputGroupElm.append(this.$filterInputElm);\n    if (!this.filterParams.hideSliderNumber) {\n      const $sliderTextInputAppendAddon = $(this.buildTemplateSliderTextHtmlString());\n      $sliderTextInputAppendAddon.html(searchTermInput);\n      this.$containerInputGroupElm.append($sliderTextInputAppendAddon);\n    }\n\n    // create the DOM element & add an ID and filter class\n    $filterContainerElm.append(this.$containerInputGroupElm);\n    $filterContainerElm.attr('id', `filter-${this.columnDef.field}`);\n\n    this.$filterInputElm.val(searchTermInput);\n    this.$filterInputElm.data('columnId', this.columnDef.field);\n\n    if (this.operator) {\n      this.$selectOperatorElm.val(this.operator);\n    }\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterContainerElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\n      $filterContainerElm.appendTo($headerElm);\n    }\n\n    return $filterContainerElm;\n  }\n\n  private onTriggerEvent(e: Event | undefined, clearFilterTriggered?: boolean) {\n    if (clearFilterTriggered) {\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\n    } else {\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\n      const value = this.$filterInputElm.val();\n      (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (value ? [value] : null), operator: selectedOperator || '' });\n    }\n  }\n}\n",
    "import {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  OperatorType,\n  OperatorString,\n  SearchTerm\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class InputFilter implements Filter {\n  private $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor() {}\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator);\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString();\n\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\n\n    // step 3, subscribe to the keyup event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterElm.keyup((e: any) => {\n      const value = e && e.target && e.target.value || '';\n      if (!value || value === '') {\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\n        this.$filterElm.removeClass('filled');\n      } else {\n        this.$filterElm.addClass('filled');\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\n      }\n    });\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm) {\n      this.$filterElm.val('');\n      this.$filterElm.trigger('keyup');\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('keyup').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm) {\n    if (values) {\n      this.$filterElm.val(values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString() {\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\n    return `<input type=\"text\" class=\"form-control search-filter\" placeholder=\"${placeholder}\">`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    const $filterElm = $(filterTemplate);\n\n    $filterElm.val(searchTerm);\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\n    $filterElm.data('columnId', this.columnDef.id);\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\n      $filterElm.appendTo($headerElm);\n    }\n\n    return $filterElm;\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CollectionService } from './../services/collection.service';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  MultipleSelectOption,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n  SelectOption,\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n@Injectable()\nexport class MultipleSelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n  defaultOptions: MultipleSelectOption;\n  isFilled = false;\n  labelName: string;\n  valueName: string;\n  enableTranslateLabel = false;\n\n  /**\n   * Initialize the Filter\n   */\n  constructor(private translate: TranslateService, private collectionService: CollectionService) {\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,  // input search term on top of the select option list\n      maxHeight: 200,\n      okButton: true,\n      addTitle: true, // show tooltip of all selected items while hovering the filter\n      countSelected: this.translate.instant('X_OF_Y_SELECTED'),\n      allSelected: this.translate.instant('ALL_SELECTED'),\n      selectAllText: this.translate.instant('SELECT_ALL'),\n      selectAllDelimiter: ['', ''], // remove default square brackets of default text \"[Select All]\" => \"Select All\"\n\n      // we will subscribe to the onClose event for triggering our callback\n      // also add/remove \"filled\" class for styling purposes\n      onClose: () => {\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\n          this.isFilled = true;\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\n        } else {\n          this.isFilled = false;\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\n        }\n        this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: selectedItems });\n      }\n    };\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.in;\n  }\n\n  /**\n   * Initialize the filter template\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let newCollection = this.columnDef.filter.collection || [];\n\n    // user might want to filter certain items of the collection\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\n      const filterBy = this.columnDef.filter.collectionFilterBy;\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\n      const sortBy = this.columnDef.filter.collectionSortBy;\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString(newCollection);\n\n    // step 2, create the DOM Element of the filter & pre-load search terms\n    // also subscribe to the onClose event\n    this.createDomElement(filterTemplate);\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\n      // this.$filterElm = $(`#${this.$filterElm[0].id}`);\n      this.$filterElm.multipleSelect('setSelects', []);\n\n      this.$filterElm.removeClass('filled');\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off().remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values) {\n      this.$filterElm.multipleSelect('setSelects', values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString(optionCollection: any[]) {\n    let options = '';\n    optionCollection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.multipleSelect, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const selected = (this.findValueInSearchTerms(option[this.valueName]) >= 0) ? 'selected' : '';\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n\n      // html text of each select option\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\n\n      // if there's a search term, we will add the \"filled\" class for styling purposes\n      if (selected) {\n        this.isFilled = true;\n      }\n    });\n\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * Subscribe to the onClose event and run the callback when that happens\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    this.$filterElm = $(filterTemplate);\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\n    }\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterElm.data('columnId', this.columnDef.id);\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (this.isFilled) {\n      this.$filterElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\n      this.$filterElm.appendTo($headerElm);\n    }\n\n    // merge options & attach multiSelect\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\n    this.$filterElm = this.$filterElm.multipleSelect(options);\n  }\n\n  private findValueInSearchTerms(value: number | string): number {\n    if (this.searchTerms && Array.isArray(this.searchTerms)) {\n      for (let i = 0; i < this.searchTerms.length; i++) {\n        if (this.searchTerms[i] && this.searchTerms[i] === value) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n} from './../models/index';\nimport { Injectable } from '@angular/core';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n@Injectable()\nexport class SelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor(private translate: TranslateService) {}\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\n      searchTerm = `${searchTerm}`;\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString();\n\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\n\n    // step 3, subscribe to the change event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterElm.change((e: any) => {\n      const value = e && e.target && e.target.value || '';\n      if (!value || value === '') {\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\n        this.$filterElm.removeClass('filled');\n      } else {\n        this.$filterElm.addClass('filled');\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\n      }\n    });\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm) {\n      this.$filterElm.val('');\n      this.$filterElm.trigger('change');\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm | SearchTerm[]) {\n    if (values) {\n      this.$filterElm.val(values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  private buildTemplateHtmlString() {\n    if (!this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the Select Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.select, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    const optionCollection = this.columnDef.filter.collection || [];\n    const labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    const valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let options = '';\n    optionCollection.forEach((option: any) => {\n      if (!option || (option[labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.select, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n      const labelKey = option.labelKey || option[labelName];\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n      options += `<option value=\"${option[valueName]}\">${textLabel}</option>`;\n    });\n    return `<select class=\"form-control search-filter\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    const $filterElm = $(filterTemplate);\n    const searchTermInput = (searchTerm || '') as string;\n\n    $filterElm.val(searchTermInput);\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\n    $filterElm.data('columnId', this.columnDef.id);\n\n    // append the new DOM element to the header row\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\n      $filterElm.appendTo($headerElm);\n    }\n\n    return $filterElm;\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport { Injectable } from '@angular/core';\nimport { CollectionService } from './../services/collection.service';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  MultipleSelectOption,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n  SelectOption,\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n@Injectable()\nexport class SingleSelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n  defaultOptions: MultipleSelectOption;\n  isFilled = false;\n  labelName: string;\n  valueName: string;\n  enableTranslateLabel = false;\n\n  constructor(private translate: TranslateService, private collectionService: CollectionService) {\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,  // input search term on top of the select option list\n      maxHeight: 200,\n      single: true,\n      onClose: () => {\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\n        let selectedItem = '';\n\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\n          selectedItem = selectedItems[0] || null;\n          this.isFilled = true;\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\n        } else {\n          this.isFilled = false;\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\n        }\n        this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: (selectedItem ? [selectedItem] : null) });\n      }\n    };\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms;\n\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let newCollection = this.columnDef.filter.collection || [];\n\n    // user might want to filter certain items of the collection\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\n      const filterBy = this.columnDef.filter.collectionFilterBy;\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\n      const sortBy = this.columnDef.filter.collectionSortBy;\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    // also when the search term is a boolean or a number, we will convert it to a string\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\n      searchTerm = `${searchTerm}`;\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString(newCollection || [], searchTerm);\n\n    // step 2, create the DOM Element of the filter & pre-load search term\n    this.createDomElement(filterTemplate);\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\n      // this.$filterElm = $(`#${this.$filterElm[0].id}`);\n      this.$filterElm.multipleSelect('setSelects', []);\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off().remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm | SearchTerm[]) {\n    if (values) {\n      values = Array.isArray(values) ? values : [values];\n      this.$filterElm.multipleSelect('setSelects', values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString(optionCollection: any[], searchTerm?: SearchTerm) {\n    let options = '';\n    optionCollection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.singleSelect, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const selected = (option[this.valueName] === searchTerm) ? 'selected' : '';\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n\n      // html text of each select option\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\n\n      // if there's a search term, we will add the \"filled\" class for styling purposes\n      if (selected) {\n        this.isFilled = true;\n      }\n    });\n\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * Subscribe to the onClose event and run the callback when that happens\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    this.$filterElm = $(filterTemplate);\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\n    }\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterElm.data('columnId', this.columnDef.id);\n\n    // append the new DOM element to the header row\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\n      this.$filterElm.appendTo($headerElm);\n    }\n\n    // merge options & attach multiSelect\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\n    this.$filterElm = this.$filterElm.multipleSelect(options);\n  }\n}\n",
    "import {\n  Column,\n  ColumnFilter,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP = 1;\n\nexport class SliderFilter implements Filter {\n  private $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  /** Getter for the Filter Generic Params */\n  private get filterParams(): any {\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};\n  }\n\n  /** Getter for the `filter` properties */\n  private get filterProperties(): ColumnFilter {\n    return this.columnDef && this.columnDef.filter || {};\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    if (!args) {\n      throw new Error('[Aurelia-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\n    }\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString();\n\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\n\n    // step 3, subscribe to the change event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterElm.change((e: any) => {\n      const value = e && e.target && e.target.value || '';\n      if (!value || value === '') {\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\n        this.$filterElm.removeClass('filled');\n      } else {\n        this.$filterElm.addClass('filled');\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\n      }\n    });\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm) {\n      const clearedValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;\n      this.$filterElm.children('input').val(clearedValue);\n      this.$filterElm.children('span.input-group-addon').html(clearedValue);\n      this.$filterElm.trigger('change');\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm) {\n    if (values) {\n      this.$filterElm.val(values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString() {\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\n    const maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\n    const step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;\n\n    if (this.filterParams.hideSliderNumber) {\n      return `\n      <div class=\"search-filter\">\n        <input type=\"range\" id=\"rangeInput_${this.columnDef.field}\"\n          name=\"rangeInput_${this.columnDef.field}\"\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n          class=\"form-control slider-filter-input range\" />\n      </div>`;\n    }\n\n    return `\n      <div class=\"input-group search-filter\">\n        <input type=\"range\" id=\"rangeInput_${this.columnDef.field}\"\n          name=\"rangeInput_${this.columnDef.field}\"\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n          class=\"form-control slider-filter-input range\"\n          onmousemove=\"$('#rangeOuput_${this.columnDef.field}').html(rangeInput_${this.columnDef.field}.value)\" />\n        <span class=\"input-group-addon slider-value\" id=\"rangeOuput_${this.columnDef.field}\">${defaultValue}</span>\n      </div>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    const $filterElm = $(filterTemplate);\n    const searchTermInput = (searchTerm || '0') as string;\n\n    $filterElm.children('input').val(searchTermInput);\n    $filterElm.children('span.input-group-addon').html(searchTermInput);\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\n    $filterElm.data('columnId', this.columnDef.id);\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\n      $filterElm.appendTo($headerElm);\n    }\n\n    return $filterElm;\n  }\n}\n",
    "import { Column, Filter } from './../models/index';\r\nimport { CompoundDateFilter } from './compoundDateFilter';\r\nimport { CompoundInputFilter } from './compoundInputFilter';\r\nimport { CompoundSliderFilter } from './compoundSliderFilter';\r\nimport { InputFilter } from './inputFilter';\r\nimport { MultipleSelectFilter } from './multipleSelectFilter';\r\nimport { SelectFilter } from './selectFilter';\r\nimport { SingleSelectFilter } from './singleSelectFilter';\r\nimport { SliderFilter } from './sliderFilter';\r\n\r\nexport const Filters = {\r\n  /** Compound Date Filter (compound of Operator + Date picker) */\r\n  compoundDate: CompoundDateFilter,\r\n\r\n  /** Compound Input Filter (compound of Operator + Input) */\r\n  compoundInput: CompoundInputFilter,\r\n\r\n  /** Compound Slider Filter (compound of Operator + Slider) */\r\n  compoundSlider: CompoundSliderFilter,\r\n\r\n  /** Default Filter, input type text filter */\r\n  input: InputFilter,\r\n\r\n  /** Slider Filter */\r\n  slider: SliderFilter,\r\n\r\n  /** Multiple Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  multipleSelect: MultipleSelectFilter,\r\n\r\n  /** Single Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  singleSelect: SingleSelectFilter,\r\n\r\n  /** Select filter, which uses native DOM element select */\r\n  select: SelectFilter\r\n};\r\n",
    "import { DelimiterType, FileType, GridOption } from './models/index';\r\nimport { Filters } from './filters/index';\r\n\r\n/**\r\n * Options that can be passed to the Bootstrap-Datetimepicker directly\r\n */\r\nexport const GlobalGridOptions: GridOption = {\r\n  alwaysShowVerticalScroll: true,\r\n  autoEdit: false,\r\n  asyncEditorLoading: false,\r\n  autoFitColumnsOnFirstLoad: true,\r\n  autoResize: {\r\n    bottomPadding: 20,\r\n    minHeight: 180,\r\n    minWidth: 300,\r\n    sidePadding: 0\r\n  },\r\n  cellHighlightCssClass: 'slick-cell-modified',\r\n  checkboxSelector: {\r\n    cssClass: 'slick-cell-checkboxsel'\r\n  },\r\n  columnPicker: {\r\n    hideForceFitButton: false,\r\n    hideSyncResizeButton: true\r\n  },\r\n  datasetIdPropertyName: 'id',\r\n  defaultFilterPlaceholder: '&#128269;',\r\n  defaultFilter: Filters.input,\r\n  editable: false,\r\n  enableAutoResize: true,\r\n  enableCellNavigation: false,\r\n  enableColumnPicker: true,\r\n  enableColumnReorder: true,\r\n  enableExport: true,\r\n  enableGridMenu: true,\r\n  enableHeaderMenu: true,\r\n  enableMouseHoverHighlightRow: true,\r\n  enableSorting: true,\r\n  enableTextSelectionOnCells: true,\r\n  explicitInitialization: true,\r\n  exportOptions: {\r\n    delimiter: DelimiterType.comma,\r\n    exportWithFormatter: false,\r\n    filename: 'export',\r\n    format: FileType.csv,\r\n    groupingAggregatorRowText: '',\r\n    sanitizeDataExport: false,\r\n    useUtf8WithBom: true\r\n  },\r\n  forceFitColumns: false,\r\n  gridMenu: {\r\n    hideClearAllFiltersCommand: false,\r\n    hideClearAllSortingCommand: false,\r\n    hideExportCsvCommand: false,\r\n    hideExportTextDelimitedCommand: true,\r\n    hideForceFitButton: false,\r\n    hideRefreshDatasetCommand: false,\r\n    hideSyncResizeButton: true,\r\n    hideToggleFilterCommand: false,\r\n    iconCssClass: 'fa fa-bars',\r\n    iconClearAllFiltersCommand: 'fa fa-filter text-danger',\r\n    iconClearAllSortingCommand: 'fa fa-unsorted text-danger',\r\n    iconExportCsvCommand: 'fa fa-download',\r\n    iconExportTextDelimitedCommand: 'fa fa-download',\r\n    iconRefreshDatasetCommand: 'fa fa-refresh',\r\n    iconToggleFilterCommand: 'fa fa-random',\r\n    menuWidth: 16,\r\n    resizeOnShowHeaderRow: true\r\n  },\r\n  headerMenu: {\r\n    autoAlign: true,\r\n    autoAlignOffset: 12,\r\n    minWidth: 140,\r\n    iconSortAscCommand: 'fa fa-sort-asc',\r\n    iconSortDescCommand: 'fa fa-sort-desc',\r\n    iconColumnHideCommand: 'fa fa-times',\r\n    hideColumnHideCommand: false,\r\n    hideSortCommands: false\r\n  },\r\n  headerRowHeight: 35,\r\n  multiColumnSort: true,\r\n  numberedMultiColumnSort: true,\r\n  tristateMultiColumnSort: false,\r\n  sortColNumberInSeparateSpan: true,\r\n  suppressActiveCellChangeOnEdit: true,\r\n  pagination: {\r\n    pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\r\n    pageSize: 25,\r\n    totalItems: 0\r\n  },\r\n  rowHeight: 35,\r\n  showHeaderRow: false,\r\n  topPanelHeight: 35\r\n};\r\n",
    "import { GlobalGridOptions } from './global-grid-options';\r\n\r\nexport class SlickgridConfig {\r\n  options: any;\r\n\r\n  constructor() {\r\n    this.options = GlobalGridOptions;\r\n  }\r\n}\r\n",
    "import { Injector, Injectable } from '@angular/core';\r\nimport { Filter } from '../models/filter.interface';\r\nimport { ColumnFilter } from '../models';\r\nimport { SlickgridConfig } from '../slickgrid-config';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Filters } from '.';\r\nimport { CollectionService } from '../services/collection.service';\r\n\r\n@Injectable()\r\nexport class FilterFactory {\r\n  /**\r\n   * The options from the SlickgridConfig\r\n   */\r\n  private _options: any;\r\n\r\n  constructor(private injector: Injector, private config: SlickgridConfig, private translate: TranslateService, private collectionService: CollectionService) {\r\n    this._options = this.config.options;\r\n  }\r\n\r\n  // Uses the User model to create a new User\r\n  createFilter(columnFilter: ColumnFilter | undefined): Filter | undefined {\r\n    let filter: Filter | undefined;\r\n\r\n    if (columnFilter && columnFilter.model) {\r\n      // the model either needs to be retrieved or is already instantiated\r\n      // filter = typeof columnFilter.model === 'function' ? this.injector.get(columnFilter.model) : columnFilter.model;\r\n      const filterInstance = columnFilter.model;\r\n      const filterName = typeof columnFilter.model === 'function' ? filterInstance.name : '';\r\n/*\r\n      if (filterName) {\r\n        switch (filterName) {\r\n          case 'InputFilter':\r\n            filter = new Filters.input();\r\n            break;\r\n          case 'SelectFilter':\r\n            filter = new Filters.select(this.translate);\r\n            break;\r\n          case 'MultipleSelectFilter':\r\n            filter = new Filters.multipleSelect(this.translate, this.collectionService);\r\n            break;\r\n          case 'SingleSelectFilter':\r\n            filter = new Filters.singleSelect(this.translate, this.collectionService);\r\n            break;\r\n          case 'CompoundDateFilter':\r\n            filter = new Filters.compoundDate(this.translate);\r\n            break;\r\n          case 'CompoundInputFilter':\r\n            filter = new Filters.compoundInput(this.translate);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      } else {\r\n        filter = columnFilter.model;\r\n      }*/\r\n      // filter = typeof columnFilter.model === 'function' ? this.injector.get(this.translate, this.collectionService) : columnFilter.model;\r\n      filter = typeof columnFilter.model === 'function' ? new columnFilter.model(this.translate, this.collectionService) : columnFilter.model;\r\n    }\r\n\r\n    // fallback to the default filter\r\n    if (!filter && this._options.defaultFilter) {\r\n      // filter = this.injector.get(this._options.defaultFilter);\r\n      filter = new this._options.defaultFilter(this.translate, this.collectionService);\r\n    }\r\n\r\n    return filter;\r\n  }\r\n\r\n  private createInjector(service: any) {\r\n    const injector = Injector.create([{provide: service, deps: [TranslateService]}]);\r\n    // let injector = ReflectiveInjector.resolveAndCreate([service]);\r\n    // injector = injector.resolveAndCreateChild([service]);\r\n    return injector.get(service);\r\n  }\r\n}\r\n",
    "import { Component, Injectable } from '@angular/core';\nimport { castToPromise } from './utilities';\nimport { FilterConditions } from './../filter-conditions';\nimport {\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  Filter,\n  FilterArguments,\n  FilterCallbackArg,\n  FieldType,\n  GridOption,\n  OperatorType,\n  CurrentFilter,\n  SearchTerm,\n  SlickEvent,\n  OperatorString\n} from './../models/index';\nimport { FilterFactory } from '../filters/filterFactory';\nimport { Subject } from 'rxjs/Subject';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class FilterService {\n  private _eventHandler = new Slick.EventHandler();\n  private _slickSubscriber: SlickEvent;\n  private _filters: any[] = [];\n  private _columnFilters: ColumnFilters = {};\n  private _dataView: any;\n  private _grid: any;\n  private _onFilterChangedOptions: any;\n  onFilterChanged = new Subject<CurrentFilter[]>();\n  onFilterCleared = new Subject<boolean>();\n\n  constructor(private filterFactory: FilterFactory) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any): void {\n    this._grid = grid;\n  }\n\n  /**\n   * Attach a backend filter hook to the grid\n   * @param grid SlickGrid Grid object\n   */\n  attachBackendOnFilter(grid: any) {\n    this._filters = [];\n    this._slickSubscriber = new Slick.Event();\n\n    // subscribe to the SlickGrid event and call the backend execution\n    this._slickSubscriber.subscribe(this.attachBackendOnFilterSubscribe.bind(this));\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  async attachBackendOnFilterSubscribe(event: Event, args: any) {\n    if (!args || !args.grid) {\n      throw new Error('Something went wrong when trying to attach the \"attachBackendOnFilterSubscribe(event, args)\" function, it seems that \"args\" is not populated correctly');\n    }\n    const backendApi = this._gridOptions.backendServiceApi;\n    if (!backendApi || !backendApi.process || !backendApi.service) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    // run a preProcess callback if defined\n    if (backendApi.preProcess) {\n      backendApi.preProcess();\n    }\n\n    // call the service to get a query back\n    const query = await backendApi.service.processOnFilterChanged(event, args);\n\n    // emit an onFilterChanged event\n    if (args && !args.clearFilterTriggered) {\n      this.emitFilterChanged('remote');\n    }\n\n    // the process could be an Observable (like HttpClient) or a Promise\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n    const observableOrPromise = backendApi.process(query);\n    const processResult = await castToPromise(observableOrPromise);\n\n    // from the result, call our internal post process to update the Dataset and Pagination info\n    if (processResult && backendApi.internalPostProcess) {\n      backendApi.internalPostProcess(processResult);\n    }\n\n    // send the response process to the postProcess callback\n    if (backendApi.postProcess !== undefined) {\n      backendApi.postProcess(processResult);\n    }\n  }\n\n  /**\n   * Attach a local filter hook to the grid\n   * @param grid SlickGrid Grid object\n   * @param dataView\n   */\n  attachLocalOnFilter(grid: any, dataView: any) {\n    this._filters = [];\n    this._dataView = dataView;\n    this._slickSubscriber = new Slick.Event();\n\n    dataView.setFilterArgs({ columnFilters: this._columnFilters, grid: this._grid });\n    dataView.setFilter(this.customLocalFilter.bind(this, dataView));\n\n    this._slickSubscriber.subscribe((e: any, args: any) => {\n      const columnId = args.columnId;\n      if (columnId != null) {\n        dataView.refresh();\n      }\n      if (args && !args.clearFilterTriggered) {\n        this.emitFilterChanged('local');\n      }\n    });\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  /** Clear the search filters (below the column titles) */\n  clearFilters() {\n    this._filters.forEach((filter: Filter) => {\n      if (filter && filter.clear) {\n        // clear element and trigger a change\n        filter.clear();\n      }\n    });\n\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to clear columnFilter (without looping through) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // we also need to refresh the dataView and optionally the grid (it's optional since we use DataView)\n    if (this._dataView) {\n      this._dataView.refresh();\n      this._grid.invalidate();\n      this._grid.render();\n    }\n\n    // emit an event when filters are all cleared\n    this.onFilterCleared.next(true);\n  }\n\n  customLocalFilter(dataView: any, item: any, args: any) {\n    for (const columnId of Object.keys(args.columnFilters)) {\n      const columnFilter = args.columnFilters[columnId];\n      const columnIndex = args.grid.getColumnIndex(columnId);\n      const columnDef = args.grid.getColumns()[columnIndex];\n      if (!columnDef) {\n        return false;\n      }\n      const fieldType = columnDef.type || FieldType.string;\n      const filterSearchType = (columnDef.filterSearchType) ? columnDef.filterSearchType : null;\n\n      let cellValue = item[columnDef.queryField || columnDef.queryFieldFilter || columnDef.field];\n\n      // if we find searchTerms use them but make a deep copy so that we don't affect original array\n      // we might have to overwrite the value(s) locally that are returned\n      // e.g: we don't want to operator within the search value, since it will fail filter condition check trigger afterward\n      const searchValues = (columnFilter && columnFilter.searchTerms) ? [...columnFilter.searchTerms] : null;\n\n      let fieldSearchValue = (Array.isArray(searchValues) && searchValues.length === 1) ? searchValues[0] : '';\n      fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n\n      const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n      let operator = columnFilter.operator || ((matches) ? matches[1] : '');\n      const searchTerm = (!!matches) ? matches[2] : '';\n      const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n\n      if (searchValues && searchValues.length > 1) {\n        fieldSearchValue = searchValues.join(',');\n      } else if (typeof fieldSearchValue === 'string') {\n        // escaping the search value\n        fieldSearchValue = fieldSearchValue.replace(`'`, `''`); // escape single quotes by doubling them\n        if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\n          operator = (operator === '*' || operator === '*z') ? OperatorType.endsWith : OperatorType.startsWith;\n        }\n      }\n\n      // no need to query if search value is empty\n      if (searchTerm === '' && (!searchValues || (Array.isArray(searchValues) && searchValues.length === 0))) {\n        return true;\n      }\n\n      // if search value has a regex match we will only keep the value without the operator\n      // in this case we need to overwrite the returned search values to truncate operator from the string search\n      if (Array.isArray(matches) && matches.length >= 1 && (Array.isArray(searchValues) && searchValues.length === 1)) {\n        searchValues[0] = searchTerm;\n      }\n\n      // filter search terms should always be string type (even though we permit the end user to input numbers)\n      // so make sure each term are strings, if user has some default search terms, we will cast them to string\n      if (searchValues && Array.isArray(searchValues)) {\n        for (let k = 0, ln = searchValues.length; k < ln; k++) {\n          // make sure all search terms are strings\n          searchValues[k] = ((searchValues[k] === undefined || searchValues[k] === null) ? '' : searchValues[k]) + '';\n        }\n      }\n\n      // when using localization (i18n), we should use the formatter output to search as the new cell value\n      if (columnDef && columnDef.params && columnDef.params.useFormatterOuputToFilter) {\n        const rowIndex = (dataView && typeof dataView.getIdxById === 'function') ? dataView.getIdxById(item.id) : 0;\n        cellValue = columnDef.formatter(rowIndex, columnIndex, cellValue, columnDef, item, this._grid);\n      }\n\n      // make sure cell value is always a string\n      if (typeof cellValue === 'number') {\n        cellValue = cellValue.toString();\n      }\n\n      const conditionOptions = {\n        fieldType,\n        searchTerms: searchValues,\n        cellValue,\n        operator,\n        cellValueLastChar: lastValueChar,\n        filterSearchType\n      };\n\n      if (!FilterConditions.executeMappedCondition(conditionOptions)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  dispose() {\n    this.disposeColumnFilters();\n\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n\n    // unsubscribe local event\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\n      this._slickSubscriber.unsubscribe();\n    }\n  }\n\n  /**\n   * Dispose of the filters, since it's a singleton, we don't want to affect other grids with same columns\n   */\n  disposeColumnFilters() {\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to make columnFilter an empty (without looping) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // also destroy each Filter instances\n    this._filters.forEach((filter, index) => {\n      if (filter && filter.destroy) {\n        filter.destroy(true);\n      }\n    });\n  }\n\n  getColumnFilters() {\n    return this._columnFilters;\n  }\n\n  getCurrentLocalFilters(): CurrentFilter[] {\n    const currentFilters: CurrentFilter[] = [];\n    if (this._columnFilters) {\n      for (const colId of Object.keys(this._columnFilters)) {\n        const columnFilter = this._columnFilters[colId];\n        const columnDef = columnFilter.columnDef;\n        const filter = { columnId: colId || '' } as CurrentFilter;\n\n        if (columnFilter && columnFilter.searchTerms) {\n          filter.searchTerms = columnFilter.searchTerms;\n        }\n        if (columnFilter.operator) {\n          filter.operator = columnFilter.operator;\n        }\n        if (Array.isArray(filter.searchTerms) && filter.searchTerms.length > 0 && filter.searchTerms[0] !== '') {\n          currentFilters.push(filter);\n        }\n      }\n    }\n    return currentFilters;\n  }\n\n  callbackSearchEvent(e: Event | undefined, args: FilterCallbackArg) {\n    if (args) {\n      const searchTerm = ((e && e.target) ? (e.target as HTMLInputElement).value : undefined);\n      const searchTerms = (args.searchTerms && Array.isArray(args.searchTerms)) ? args.searchTerms : (searchTerm ? [searchTerm] : undefined);\n      const columnDef = args.columnDef || null;\n      const columnId = columnDef ? (columnDef.id || '') : '';\n      const operator = args.operator || undefined;\n\n      if (!searchTerms || (Array.isArray(searchTerms) && searchTerms.length === 0)) {\n        // delete the property from the columnFilters when it becomes empty\n        // without doing this, it would leave an incorrect state of the previous column filters when filtering on another column\n        delete this._columnFilters[columnId];\n      } else {\n        const colId = '' + columnId as string;\n        const colFilter: ColumnFilter = {\n          columnId: colId,\n          columnDef,\n          searchTerms,\n        };\n        if (operator) {\n          colFilter.operator = operator;\n        }\n        this._columnFilters[colId] = colFilter;\n      }\n\n      this.triggerEvent(this._slickSubscriber, {\n        clearFilterTriggered: args && args.clearFilterTriggered,\n        columnId,\n        columnDef: args.columnDef || null,\n        columnFilters: this._columnFilters,\n        operator,\n        searchTerms,\n        serviceOptions: this._onFilterChangedOptions,\n        grid: this._grid\n      }, e);\n    }\n  }\n\n  addFilterTemplateToHeaderRow(args: { column: Column; grid: any; node: any }) {\n    const columnDef = args.column;\n    const columnId = columnDef.id || '';\n\n    if (columnDef && columnId !== 'selector' && columnDef.filterable) {\n      let searchTerms: SearchTerm[] | undefined;\n      let operator: OperatorString | OperatorType;\n      const filter: Filter | undefined = this.filterFactory.createFilter(args.column.filter);\n      operator = (columnDef && columnDef.filter && columnDef.filter.operator) || (filter && filter.operator) || undefined;\n\n      if (this._columnFilters[columnDef.id]) {\n        searchTerms = this._columnFilters[columnDef.id].searchTerms || undefined;\n        operator = this._columnFilters[columnDef.id].operator || undefined;\n      } else if (columnDef.filter) {\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // because of that we need to first get searchTerm(s) from the columnFilters (that is what the user last entered)\n        searchTerms = columnDef.filter.searchTerms || undefined;\n        this.updateColumnFilters(searchTerms, columnDef, operator);\n      }\n\n      const filterArguments: FilterArguments = {\n        grid: this._grid,\n        operator,\n        searchTerms,\n        columnDef,\n        callback: this.callbackSearchEvent.bind(this)\n      };\n\n      if (filter) {\n        filter.init(filterArguments);\n        const filterExistIndex = this._filters.findIndex((filt) => filter.columnDef.name === filt.columnDef.name);\n\n        // add to the filters arrays or replace it when found\n        if (filterExistIndex === -1) {\n          this._filters.push(filter);\n        } else {\n          this._filters[filterExistIndex] = filter;\n        }\n\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // we need to also set again the values in the DOM elements if the values were set by a searchTerm(s)\n        if (searchTerms && filter.setValues) {\n          filter.setValues(searchTerms);\n        }\n      }\n    }\n  }\n\n  /**\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\n   * Other services, like Pagination, can then subscribe to it.\n   * @param sender\n   */\n  emitFilterChanged(sender: 'local' | 'remote') {\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\n      let currentFilters: CurrentFilter[] = [];\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentFilters) {\n        currentFilters = backendService.getCurrentFilters() as CurrentFilter[];\n      }\n      this.onFilterChanged.next(currentFilters);\n    } else if (sender === 'local') {\n      this.onFilterChanged.next(this.getCurrentLocalFilters());\n    }\n  }\n\n  /**\n   * When user passes an array of preset filters, we need to pre-populate each column filter searchTerm(s)\n   * The process is to loop through the preset filters array, find the associated column from columnDefinitions and fill in the filter object searchTerm(s)\n   * This is basically the same as if we would manually add searchTerm(s) to a column filter object in the column definition, but we do it programmatically.\n   * At the end of the day, when creating the Filter (DOM Element), it will use these searchTerm(s) so we can take advantage of that without recoding each Filter type (DOM element)\n   */\n  populateColumnFilterSearchTerms() {\n    if (this._gridOptions.presets && Array.isArray(this._gridOptions.presets.filters) && this._gridOptions.presets.filters.length > 0) {\n      const filters = this._gridOptions.presets.filters;\n      this._columnDefinitions.forEach((columnDef: Column) =>  {\n        // clear any columnDef searchTerms before applying Presets\n        if (columnDef.filter && columnDef.filter.searchTerms) {\n          delete columnDef.filter.searchTerms;\n        }\n\n        // from each presets, we will find the associated columnDef and apply the preset searchTerms & operator if there is\n        const columnPreset = filters.find((presetFilter: CurrentFilter) => {\n          return presetFilter.columnId === columnDef.id;\n        });\n        if (columnPreset && columnPreset.searchTerms && Array.isArray(columnPreset.searchTerms)) {\n          columnDef.filter = columnDef.filter || {};\n          columnDef.filter.operator = columnPreset.operator || columnDef.filter.operator || '';\n          columnDef.filter.searchTerms = columnPreset.searchTerms;\n        }\n      });\n    }\n  }\n\n  private updateColumnFilters(searchTerms: SearchTerm[] | undefined, columnDef: any, operator?: OperatorType | OperatorString) {\n    if (searchTerms && columnDef) {\n      // this._columnFilters.searchTerms = searchTerms;\n      this._columnFilters[columnDef.id] = {\n        columnId: columnDef.id,\n        columnDef,\n        searchTerms,\n        operator\n      };\n    }\n  }\n\n  private triggerEvent(slickEvent: any, args: any, e: any) {\n    slickEvent = slickEvent || new Slick.Event();\n\n    // event might have been created as a CustomEvent (e.g. CompoundDateFilter), without being a valid Slick.EventData.\n    // if so we will create a new Slick.EventData and merge it with that CustomEvent to avoid having SlickGrid errors\n    let event = e;\n    if (e && typeof e.isPropagationStopped !== 'function') {\n      event = $.extend({}, new Slick.EventData(), e);\n    }\n    slickEvent.notify(args, event, args.grid);\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  ExportOption,\n  FileType,\n  Formatter,\n  GridOption\n} from './../models/index';\nimport { addWhiteSpaces, htmlEntityDecode, sanitizeHtmlToText } from './../services/utilities';\nimport { Subject } from 'rxjs/Subject';\nimport { TextEncoder } from 'text-encoding-utf-8';\n\n// using external non-typed js libraries\ndeclare let Slick: any;\ndeclare let $: any;\n\nexport interface ExportColumnHeader {\n  key: string;\n  title: string;\n}\n\n@Injectable()\nexport class ExportService {\n  private _lineCarriageReturn = '\\n';\n  private _dataView: any;\n  private _grid: any;\n  private _exportQuoteWrapper: string;\n  private _columnHeaders: ExportColumnHeader[];\n  private _groupedHeaders: ExportColumnHeader[];\n  private _hasGroupedItems = false;\n  private _exportOptions: ExportOption;\n  onGridBeforeExportToFile = new Subject<boolean>();\n  onGridAfterExportToFile = new Subject<{ options: any }>();\n\n  constructor(private translate: TranslateService) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Export Service\n   * @param grid\n   * @param gridOptions\n   * @param dataView\n   */\n  init(grid: any, dataView: any): void {\n    this._grid = grid;\n    this._dataView = dataView;\n  }\n\n  /**\n   * Function to export the Grid result to an Excel CSV format using javascript for it to produce the CSV file.\n   * This is a WYSIWYG export to file output (What You See is What You Get)\n   *\n   * NOTES: The column position needs to match perfectly the JSON Object position because of the way we are pulling the data,\n   * which means that if any column(s) got moved in the UI, it has to be reflected in the JSON array output as well\n   *\n   * Example: exportToFile({ format: FileType.csv, delimiter: DelimiterType.comma })\n   */\n  exportToFile(options: ExportOption) {\n    this.onGridBeforeExportToFile.next(true);\n    this._exportOptions = $.extend(true, {}, this._gridOptions.exportOptions, options);\n\n    // get the CSV output from the grid data\n    const dataOutput = this.getDataOutput();\n\n    // trigger a download file\n    // wrap it into a setTimeout so that the EventAggregator has enough time to start a pre-process like showing a spinner\n    setTimeout(() => {\n      const downloadOptions = {\n        filename: `${this._exportOptions.filename}.${this._exportOptions.format}`,\n        csvContent: dataOutput,\n        format: this._exportOptions.format,\n        useUtf8WithBom: this._exportOptions.useUtf8WithBom\n      };\n      this.startDownloadFile(downloadOptions);\n      this.onGridAfterExportToFile.next({ options: downloadOptions });\n    }, 0);\n  }\n\n  // -----------------------\n  // Private functions\n  // -----------------------\n\n  getDataOutput(): string {\n    const columns = this._grid.getColumns() || [];\n    const delimiter = this._exportOptions.delimiter || '';\n    const format = this._exportOptions.format || '';\n    const groupByColumnHeader = this._exportOptions.groupingColumnHeaderTitle || this.translate.instant('GROUP_BY');\n\n    // a CSV needs double quotes wrapper, the other types do not need any wrapper\n    this._exportQuoteWrapper = (format === FileType.csv) ? '\"' : '';\n\n    // data variable which will hold all the fields data of a row\n    let outputDataString = '';\n\n    // get grouped column titles and if found, we will add a \"Group by\" column at the first column index\n    const grouping = this._dataView.getGrouping();\n    if (grouping && Array.isArray(grouping) && grouping.length > 0) {\n      this._hasGroupedItems = true;\n      outputDataString += `${groupByColumnHeader}` + delimiter;\n    } else {\n      this._hasGroupedItems = false;\n    }\n\n    // get all column headers\n    this._columnHeaders = this.getColumnHeaders(columns) || [];\n    if (this._columnHeaders && Array.isArray(this._columnHeaders) && this._columnHeaders.length > 0) {\n      // add the header row + add a new line at the end of the row\n      const outputHeaderTitles = this._columnHeaders.map((header) => {\n        return this._exportQuoteWrapper + header.title + this._exportQuoteWrapper;\n      });\n      outputDataString += (outputHeaderTitles.join(delimiter) + this._lineCarriageReturn);\n    }\n\n    // Populate the rest of the Grid Data\n    outputDataString += this.getAllGridRowData(columns, this._lineCarriageReturn);\n\n    return outputDataString;\n  }\n\n  /**\n   * Get all the grid row data and return that as an output string\n   */\n  getAllGridRowData(columns: Column[], lineCarriageReturn: string): string {\n    let outputDataString = '';\n    const lineCount = this._dataView.getLength();\n\n    // loop through all the grid rows of data\n    for (let rowNumber = 0; rowNumber < lineCount; rowNumber++) {\n      const itemObj = this._dataView.getItem(rowNumber);\n\n      if (itemObj != null) {\n        // Normal row (not grouped by anything) would have an ID which was predefined in the Grid Columns definition\n        if (itemObj.id != null) {\n          // get regular row item data\n          outputDataString += this.readRegularRowData(columns, rowNumber, itemObj);\n        } else if (this._hasGroupedItems && itemObj.__groupTotals === undefined) {\n          // get the group row\n          outputDataString += this.readGroupedTitleRow(itemObj) + this._exportOptions.delimiter;\n        } else if (itemObj.__groupTotals) {\n          // else if the row is a Group By and we have agreggators, then a property of '__groupTotals' would exist under that object\n          outputDataString += this.readGroupedTotalRow(columns, itemObj) + this._exportOptions.delimiter;\n        }\n        outputDataString += lineCarriageReturn;\n      }\n    }\n\n    return outputDataString;\n  }\n\n  /**\n   * Get all header titles and their keys, translate the title when required.\n   * @param columns of the grid\n   */\n  getColumnHeaders(columns: Column[]): ExportColumnHeader[] {\n    if (!columns || !Array.isArray(columns) || columns.length === 0) {\n      return null;\n    }\n    const columnHeaders = [];\n\n    // Populate the Column Header, pull the name defined\n    columns.forEach((columnDef) => {\n      const fieldName = (columnDef.headerKey) ? this.translate.instant(columnDef.headerKey) : columnDef.name;\n      const skippedField = columnDef.excludeFromExport || false;\n\n      // if column width is 0 then it's not evaluated since that field is considered hidden should not be part of the export\n      if ((columnDef.width ===  undefined || columnDef.width > 0) && !skippedField) {\n        columnHeaders.push({\n          key: columnDef.field || columnDef.id,\n          title: fieldName\n        });\n      }\n    });\n\n    return columnHeaders;\n  }\n\n  /**\n   * Get the data of a regular row (a row without grouping)\n   * @param row\n   * @param itemObj\n   */\n  readRegularRowData(columns: Column[], row: number, itemObj: any) {\n    let idx = 0;\n    let rowOutputString = '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n\n    for (let col = 0, ln = columns.length; col < ln; col++) {\n      const columnDef = columns[col];\n      const fieldId = columnDef.field || columnDef.id || '';\n\n      // skip excluded column\n      if (columnDef.excludeFromExport) {\n          continue;\n      }\n\n      // if we are grouping and are on 1st column index, we need to skip this column since it will be used later by the grouping text:: Group by [columnX]\n      if (this._hasGroupedItems && idx === 0) {\n        rowOutputString += `\"\"` + delimiter;\n      }\n\n      // does the user want to evaluate current column Formatter?\n      const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._exportOptions.exportWithFormatter;\n\n      // did the user provide a Custom Formatter for the export\n      const exportCustomFormatter: Formatter = (columnDef.exportCustomFormatter !== undefined) ? columnDef.exportCustomFormatter : undefined;\n\n      let itemData = '';\n\n      if (exportCustomFormatter) {\n        itemData = exportCustomFormatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\n      } else if (isEvaluatingFormatter && !!columnDef.formatter) {\n        itemData = columnDef.formatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\n      } else {\n        itemData = (itemObj[fieldId] === null || itemObj[fieldId] === undefined) ? '' : itemObj[fieldId];\n      }\n\n      // does the user want to sanitize the output data (remove HTML tags)?\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n        itemData = sanitizeHtmlToText(itemData);\n      }\n\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n      if (format === FileType.csv) {\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n      }\n\n      // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n      // to cancel that effect we can had = in front, ex: =\"1E06\"\n      const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\n\n      rowOutputString += keepAsStringWrapper + exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\n      idx++;\n    }\n\n    return rowOutputString;\n  }\n\n  /**\n   * Get the grouped title(s), for example if we grouped by salesRep, the returned result would be:: 'Sales Rep'\n   * @param itemObj\n   */\n  readGroupedTitleRow(itemObj: any) {\n    let groupName = sanitizeHtmlToText(itemObj.title);\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n\n    groupName = addWhiteSpaces(5 * itemObj.level) + groupName;\n\n    if (format === FileType.csv) {\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n      groupName = groupName.toString().replace(/\"/gi, `\"\"`);\n    }\n\n    // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n    // to cancel that effect we can had = in front, ex: =\"1E06\"\n    // const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\n\n    return /*keepAsStringWrapper +*/ exportQuoteWrapper + ' ' + groupName + exportQuoteWrapper + delimiter;\n  }\n\n  /**\n   * Get the grouped totals, these are set by Slick Aggregators.\n   * For example if we grouped by \"salesRep\" and we have a Sum Aggregator on \"sales\", then the returned output would be:: [\"Sum 123$\"]\n   * @param itemObj\n   */\n  readGroupedTotalRow(columns: Column[], itemObj: any) {\n    let exportExponentialWrapper = '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n    const groupingAggregatorRowText = this._exportOptions.groupingAggregatorRowText || '';\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n    let output = `${exportQuoteWrapper}${groupingAggregatorRowText}${exportQuoteWrapper}${delimiter}`;\n\n    columns.forEach((columnDef) => {\n      let itemData = '';\n\n      // if there's a groupTotalsFormatter, we will re-run it to get the exact same output as what is shown in UI\n      if (columnDef.groupTotalsFormatter) {\n        itemData = columnDef.groupTotalsFormatter(itemObj, columnDef);\n      }\n\n      // does the user want to sanitize the output data (remove HTML tags)?\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n        itemData = sanitizeHtmlToText(itemData);\n      }\n\n      if (format === FileType.csv) {\n        // when CSV we also need to escape double quotes twice, so a double quote \" becomes 2x double quotes \"\"\n        // and if we have a text of (number)E(number),\n        // we don't want excel to transform it into exponential (1.0E06) to cancel that effect we can had = in front, ex: =\"1E06\"\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n        exportExponentialWrapper = (itemData.match(/^\\s*\\d+E\\d+\\s*$/i)) ? '=' : '';\n      }\n      output += exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\n    });\n\n    return output;\n  }\n\n  /**\n   * Triggers download file with file format.\n   * IE(6-10) are not supported\n   * All other browsers will use plain javascript on client side to produce a file download.\n   * @param options\n   */\n  startDownloadFile(options: { filename: string, csvContent: any, format: FileType | string, useUtf8WithBom: boolean }): void {\n    // IE(6-10) don't support javascript download and our service doesn't support either so throw an error, we have to make a round trip to the Web Server for exporting\n    if (navigator.appName === 'Microsoft Internet Explorer') {\n      throw new Error('Microsoft Internet Explorer 6 to 10 do not support javascript export to CSV. Please upgrade your browser.');\n    }\n\n    // set the correct MIME type\n    const mimeType = (options.format === FileType.csv) ? 'text/csv' : 'text/plain';\n\n    // make sure no html entities exist in the data\n    const csvContent = htmlEntityDecode(options.csvContent);\n\n    // dealing with Excel CSV export and UTF-8 is a little tricky.. We will use Option #2 to cover older Excel versions\n    // Option #1: we need to make Excel knowing that it's dealing with an UTF-8, A correctly formatted UTF8 file can have a Byte Order Mark as its first three octets\n    // reference: http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\n    // Option#2: use a 3rd party extension to javascript encode into UTF-16\n    let outputData: Uint8Array | string;\n    if (options.format === FileType.csv) {\n      outputData = new TextEncoder('utf-8').encode(csvContent);\n    } else {\n      outputData = csvContent;\n    }\n\n    // create a Blob object for the download\n    const blob = new Blob([options.useUtf8WithBom ? '\\uFEFF' : '', outputData], {\n      type: `${mimeType};charset=utf-8;`\n    });\n\n    // when using IE/Edge, then use different download call\n    if (typeof navigator.msSaveOrOpenBlob === 'function') {\n      navigator.msSaveOrOpenBlob(blob, options.filename);\n    } else {\n      // this trick will generate a temp <a /> tag\n      // the code will then trigger a hidden click for it to start downloading\n      const link = document.createElement('a');\n      const csvUrl = URL.createObjectURL(blob);\n\n      link.textContent = 'download';\n      link.href = csvUrl;\n      link.setAttribute('download', options.filename);\n\n      // set the visibility to hidden so there is no effect on your web-layout\n      link.style.visibility = 'hidden';\n\n      // this part will append the anchor tag, trigger a click (for download to start) and finally remove the tag once completed\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n}\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\r\nimport { castToPromise } from './utilities';\r\nimport {\r\n  CellArgs,\r\n  Column,\r\n  ColumnSort,\r\n  CurrentSorter,\r\n  FieldType,\r\n  GridOption,\r\n  SlickEvent,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\nimport { Sorters } from './../sorters';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// using external non-typed js libraries\r\ndeclare var Slick: any;\r\n\r\nexport class SortService {\r\n  private _currentLocalSorters: CurrentSorter[] = [];\r\n  private _eventHandler: any = new Slick.EventHandler();\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _slickSubscriber: SlickEvent;\r\n  private _isBackendGrid = false;\r\n  onSortChanged = new Subject<CurrentSorter[]>();\r\n  onSortCleared = new Subject<boolean>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  /**\r\n   * Attach a backend sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param dataView SlickGrid DataView object\r\n   */\r\n  attachBackendOnSort(grid: any, dataView: any) {\r\n    this._isBackendGrid = true;\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = grid.onSort;\r\n\r\n    // subscribe to the SlickGrid event and call the backend execution\r\n    this._slickSubscriber.subscribe(this.onBackendSortChanged.bind(this));\r\n  }\r\n\r\n  async onBackendSortChanged(event: Event, args: any) {\r\n    if (!args || !args.grid) {\r\n      throw new Error('Something went wrong when trying to attach the \"onBackendSortChanged(event, args)\" function, it seems that \"args\" is not populated correctly');\r\n    }\r\n    const gridOptions: GridOption = args.grid.getOptions() || {};\r\n    const backendApi = gridOptions.backendServiceApi;\r\n\r\n    if (!backendApi || !backendApi.process || !backendApi.service) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n    if (backendApi.preProcess) {\r\n      backendApi.preProcess();\r\n    }\r\n    const query = backendApi.service.processOnSortChanged(event, args);\r\n    this.emitSortChanged('remote');\r\n\r\n    // the process could be an Observable (like HttpClient) or a Promise\r\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n    const observableOrPromise = backendApi.process(query);\r\n    const processResult = await castToPromise(observableOrPromise);\r\n\r\n    // from the result, call our internal post process to update the Dataset and Pagination info\r\n    if (processResult && backendApi.internalPostProcess) {\r\n      backendApi.internalPostProcess(processResult);\r\n    }\r\n\r\n    // send the response process to the postProcess callback\r\n    if (backendApi.postProcess) {\r\n      backendApi.postProcess(processResult);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attach a local sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param gridOptions Grid Options object\r\n   * @param dataView\r\n   */\r\n  attachLocalOnSort(grid: any, dataView: any) {\r\n    this._isBackendGrid = false;\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = grid.onSort;\r\n\r\n    this._slickSubscriber.subscribe((e: any, args: any) => {\r\n      // multiSort and singleSort are not exactly the same, but we want to structure it the same for the (for loop) after\r\n      // also to avoid having to rewrite the for loop in the sort, we will make the singleSort an array of 1 object\r\n      const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({sortAsc: args.sortAsc, sortCol: args.sortCol});\r\n\r\n      // keep current sorters\r\n      this._currentLocalSorters = []; // reset current local sorters\r\n      if (Array.isArray(sortColumns)) {\r\n        sortColumns.forEach((sortColumn: { sortCol: Column, sortAsc: number }) => {\r\n          if (sortColumn.sortCol) {\r\n            this._currentLocalSorters.push({\r\n              columnId: sortColumn.sortCol.id,\r\n              direction: sortColumn.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      this.onLocalSortChanged(grid, dataView, sortColumns);\r\n      this.emitSortChanged('local');\r\n    });\r\n  }\r\n\r\n  clearSorting() {\r\n    if (this._grid && this._gridOptions && this._dataView) {\r\n      // remove any sort icons (this setSortColumns function call really does only that)\r\n      this._grid.setSortColumns([]);\r\n\r\n      // we also need to trigger a sort change\r\n      // for a backend grid, we will trigger a backend sort changed with an empty sort columns array\r\n      // however for a local grid, we need to pass a sort column and so we will sort by the 1st column\r\n      if (this._isBackendGrid) {\r\n        this.onBackendSortChanged(undefined, { grid: this._grid, sortCols: [] });\r\n      } else {\r\n        if (this._columnDefinitions && Array.isArray(this._columnDefinitions)) {\r\n          this.onLocalSortChanged(this._grid, this._dataView, new Array({sortAsc: true, sortCol: this._columnDefinitions[0] }));\r\n        }\r\n      }\r\n    }\r\n    // set current sorter to empty & emit a sort changed event\r\n    this._currentLocalSorters = [];\r\n\r\n    // emit an event when filters are all cleared\r\n    this.onSortCleared.next(true);\r\n  }\r\n\r\n  getCurrentLocalSorters(): CurrentSorter[] {\r\n    return this._currentLocalSorters;\r\n  }\r\n\r\n  /**\r\n   * Get column sorts,\r\n   * If a column is passed as an argument, we won't add this column to our output array since it is already in the array\r\n   * We want to know the sort prior to calling the next sorting command\r\n   */\r\n  getPreviousColumnSorts(columnId?: string) {\r\n    // getSortColumns() only returns sortAsc & columnId, we want the entire column definition\r\n    const oldSortColumns = this._grid.getSortColumns();\r\n\r\n    // get the column definition but only keep column which are not equal to our current column\r\n    const sortedCols = oldSortColumns.reduce((cols, col) => {\r\n      if (!columnId || col.columnId !== columnId) {\r\n        cols.push({ sortCol: this._columnDefinitions[this._grid.getColumnIndex(col.columnId)], sortAsc: col.sortAsc });\r\n      }\r\n      return cols;\r\n    }, []);\r\n\r\n    return sortedCols;\r\n  }\r\n\r\n  /**\r\n   * load any presets if there are any\r\n   * @param grid\r\n   * @param dataView\r\n   */\r\n  loadLocalPresets(grid: any, dataView: any) {\r\n    const sortCols: ColumnSort[] = [];\r\n    this._currentLocalSorters = []; // reset current local sorters\r\n    if (this._gridOptions && this._gridOptions.presets && this._gridOptions.presets.sorters) {\r\n      const sorters = this._gridOptions.presets.sorters;\r\n\r\n      sorters.forEach((presetSorting: CurrentSorter) => {\r\n        const gridColumn = this._columnDefinitions.find((col: Column) => col.id === presetSorting.columnId);\r\n        if (gridColumn) {\r\n          sortCols.push({\r\n            columnId: gridColumn.id,\r\n            sortAsc: ((presetSorting.direction.toUpperCase() === SortDirection.ASC) ? true : false),\r\n            sortCol: gridColumn\r\n          });\r\n\r\n          // keep current sorters\r\n          this._currentLocalSorters.push({\r\n            columnId: gridColumn.id + '',\r\n            direction: presetSorting.direction.toUpperCase() as SortDirectionString\r\n          });\r\n        }\r\n      });\r\n\r\n      if (sortCols.length > 0) {\r\n        this.onLocalSortChanged(grid, dataView, sortCols);\r\n        grid.setSortColumns(sortCols); // use this to add sort icon(s) in UI\r\n      }\r\n    }\r\n  }\r\n\r\n  onLocalSortChanged(grid: any, dataView: any, sortColumns: ColumnSort[]) {\r\n    dataView.sort((dataRow1: any, dataRow2: any) => {\r\n      for (let i = 0, l = sortColumns.length; i < l; i++) {\r\n        const columnSortObj = sortColumns[i];\r\n        if (columnSortObj && columnSortObj.sortCol) {\r\n          const sortDirection = columnSortObj.sortAsc ? SortDirectionNumber.asc : SortDirectionNumber.desc;\r\n          const sortField = columnSortObj.sortCol.queryField || columnSortObj.sortCol.queryFieldFilter || columnSortObj.sortCol.field;\r\n          const fieldType = columnSortObj.sortCol.type || FieldType.string;\r\n          const value1 = dataRow1[sortField];\r\n          const value2 = dataRow2[sortField];\r\n          const sortResult = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n          if (sortResult !== SortDirectionNumber.neutral) {\r\n            return sortResult;\r\n          }\r\n        }\r\n      }\r\n      return 0;\r\n    });\r\n    grid.invalidate();\r\n    grid.render();\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe local event\r\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\r\n      this._slickSubscriber.unsubscribe();\r\n    }\r\n\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n  }\r\n\r\n  /**\r\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\r\n   * Other services, like Pagination, can then subscribe to it.\r\n   * @param sender\r\n   */\r\n  emitSortChanged(sender: 'local' | 'remote') {\r\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      let currentSorters: CurrentSorter[] = [];\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        currentSorters = backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n      this.onSortChanged.next(currentSorters);\r\n    } else if (sender === 'local') {\r\n      this.onSortChanged.next(this.getCurrentLocalSorters());\r\n    }\r\n  }\r\n}\r\n",
    "export class Constants {\r\n  static TEXT_CANCEL = 'Cancel';\r\n  static TEXT_CLEAR_ALL_FILTERS = 'Clear All Filters';\r\n  static TEXT_CLEAR_ALL_SORTING = 'Clear All Sorting';\r\n  static TEXT_COLUMNS = 'Columns';\r\n  static TEXT_COMMANDS = 'Commands';\r\n  static TEXT_EXPORT_IN_CSV_FORMAT = 'Export in CSV format';\r\n  static TEXT_EXPORT_IN_TEXT_FORMAT = 'Export in Text format (Tab delimited)';\r\n  static TEXT_FORCE_FIT_COLUMNS = 'Force fit columns';\r\n  static TEXT_HIDE_COLUMN = 'Hide Column';\r\n  static TEXT_REFRESH_DATASET = 'Refresh Dataset';\r\n  static TEXT_SAVE = 'Save';\r\n  static TEXT_SYNCHRONOUS_RESIZE = 'Synchronous resize';\r\n  static TEXT_SORT_ASCENDING = 'Sort Ascending';\r\n  static TEXT_SORT_DESCENDING = 'Sort Descending';\r\n  static TEXT_TOGGLE_FILTER_ROW = 'Toggle Filter Row';\r\n  static VALIDATION_EDITOR_VALID_NUMBER = 'Please enter a valid number';\r\n  static VALIDATION_EDITOR_VALID_INTEGER = 'Please enter a valid integer number';\r\n  static VALIDATION_EDITOR_NUMBER_BETWEEN = 'Please enter a valid number between {{minValue}} and {{maxValue}}';\r\n  static VALIDATION_EDITOR_DECIMAL_BETWEEN = 'Please enter a valid number with a maximum of {{maxDecimal}} decimals';\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport {\n  CellArgs,\n  ColumnSort,\n  Column,\n  DelimiterType,\n  Extension,\n  FileType,\n  GraphqlResult,\n  GridMenu,\n  GridMenuItem,\n  GridOption,\n  HeaderButtonOnCommandArgs,\n  HeaderMenu,\n  HeaderMenuItem,\n  HeaderMenuOnCommandArgs,\n  HeaderMenuOnBeforeMenuShowArgs,\n} from './../models/index';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, sanitizeHtmlToText } from './../services/utilities';\nimport { FilterService } from './filter.service';\nimport { ExportService } from './export.service';\nimport { SortService } from './sort.service';\nimport { Constants } from '../constants';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class ControlAndPluginService {\n  private _dataView: any;\n  private _grid: any;\n  allColumns: Column[];\n  visibleColumns: Column[];\n  areVisibleColumnDifferent = false;\n  extensionList: Extension[] = [];\n  undoRedoBuffer: any;\n  userOriginalGridMenu: GridMenu;\n\n  // controls & plugins\n  autoTooltipPlugin: any;\n  cellExternalCopyManagerPlugin: any;\n  checkboxSelectorPlugin: any;\n  columnPickerControl: any;\n  gridMenuControl: any;\n  groupItemMetaProviderPlugin: any;\n  headerButtonsPlugin: any;\n  headerMenuPlugin: any;\n  rowSelectionPlugin: any;\n\n  constructor(\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private sortService: SortService,\n    private translate: TranslateService,\n  ) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  /** Get all columns (includes visible and non-visible) */\n  getAllColumns(): Column[] {\n    return this.allColumns || [];\n  }\n\n  /** Get only visible columns */\n  getVisibleColumns(): Column[] {\n    return this.visibleColumns || [];\n  }\n\n  /** Get all Extensions */\n  getAllExtensions(): Extension[] {\n    return this.extensionList;\n  }\n\n  /**\n   * Get an Extension by it's name\n   *  @param name\n   */\n  getExtensionByName(name: string): Extension | undefined {\n    return this.extensionList.find((p) => p.name === name);\n  }\n\n  /** Auto-resize all the column in the grid to fit the grid width */\n  autoResizeColumns() {\n    this._grid.autosizeColumns();\n  }\n\n  /**\n   * Attach/Create different Controls or Plugins after the Grid is created\n   * @param grid\n   * @param dataView\n   * @param groupItemMetadataProvider\n   */\n  attachDifferentControlOrPlugins(grid: any, dataView: any, groupItemMetadataProvider: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n    this.allColumns = this._columnDefinitions;\n    this.visibleColumns = this._columnDefinitions;\n\n    // make sure all columns are translated before creating ColumnPicker/GridMenu Controls\n    // this is to avoid having hidden columns not being translated on first load\n    if (this._gridOptions.enableTranslate) {\n      this.translateItems(this.allColumns, 'headerKey', 'name');\n    }\n\n    // Column Picker Control\n    if (this._gridOptions.enableColumnPicker) {\n      this.columnPickerControl = this.createColumnPicker(this._grid, this._columnDefinitions);\n      this.extensionList.push({ name: 'ColumnPicker', service: this.columnPickerControl });\n    }\n\n    // Grid Menu Control\n    if (this._gridOptions.enableGridMenu) {\n      // keep original user grid menu, useful when switching locale to translate\n      this.userOriginalGridMenu = { ...this._gridOptions.gridMenu };\n\n      this.gridMenuControl = this.createGridMenu(this._grid, this._columnDefinitions);\n      this.extensionList.push({ name: 'GridMenu', service: this.gridMenuControl });\n    }\n\n    // Auto Tooltip Plugin\n    if (this._gridOptions.enableAutoTooltip) {\n      this.autoTooltipPlugin = new Slick.AutoTooltips(this._gridOptions.autoTooltipOptions || {});\n      this._grid.registerPlugin(this.autoTooltipPlugin);\n      this.extensionList.push({ name: 'AutoTooltip', service: this.autoTooltipPlugin });\n    }\n\n    // Grouping Plugin\n    // register the group item metadata provider to add expand/collapse group handlers\n    if (this._gridOptions.enableGrouping) {\n      this.groupItemMetaProviderPlugin = groupItemMetadataProvider || {};\n      this._grid.registerPlugin(this.groupItemMetaProviderPlugin);\n      this.extensionList.push({ name: 'GroupItemMetaProvider', service: this.groupItemMetaProviderPlugin });\n    }\n\n    // Checkbox Selector Plugin\n    if (this._gridOptions.enableCheckboxSelector) {\n      // when enabling the Checkbox Selector Plugin, we need to also watch onClick events to perform certain actions\n      // the selector column has to be created BEFORE the grid (else it behaves oddly), but we can only watch grid events AFTER the grid is created\n      this._grid.registerPlugin(this.checkboxSelectorPlugin);\n      this.extensionList.push({ name: 'CheckboxSelector', service: this.checkboxSelectorPlugin });\n\n      // this also requires the Row Selection Model to be registered as well\n      if (!this.rowSelectionPlugin || !this._grid.getSelectionModel()) {\n        this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n        this._grid.setSelectionModel(this.rowSelectionPlugin);\n      }\n\n      // user might want to pre-select some rows\n      // the setTimeout is because of timing issue with styling (row selection happen but rows aren't highlighted properly)\n      if (this._gridOptions.preselectedRows && this.rowSelectionPlugin && this._grid.getSelectionModel()) {\n        setTimeout(() => this.checkboxSelectorPlugin.selectRows(this._gridOptions.preselectedRows), 0);\n      }\n    }\n\n    // Row Selection Plugin\n    if (!this._gridOptions.enableCheckboxSelector && this._gridOptions.enableRowSelection) {\n      this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n      this._grid.setSelectionModel(this.rowSelectionPlugin);\n    }\n\n    // Header Button Plugin\n    if (this._gridOptions.enableHeaderButton) {\n      this.headerButtonsPlugin = new Slick.Plugins.HeaderButtons(this._gridOptions.headerButton || {});\n      this._grid.registerPlugin(this.headerButtonsPlugin);\n      this.extensionList.push({ name: 'HeaderButtons', service: this.headerButtonsPlugin });\n      this.headerButtonsPlugin.onCommand.subscribe((e: Event, args: HeaderButtonOnCommandArgs) => {\n        if (this._gridOptions.headerButton && typeof this._gridOptions.headerButton.onCommand === 'function') {\n          this._gridOptions.headerButton.onCommand(e, args);\n        }\n      });\n    }\n\n    // Header Menu Plugin\n    if (this._gridOptions.enableHeaderMenu) {\n      this.headerMenuPlugin = this.createHeaderMenu(this._grid, this._dataView, this._columnDefinitions);\n    }\n\n    // Cell External Copy Manager Plugin (Excel Like)\n    if (this._gridOptions.enableExcelCopyBuffer) {\n      this.createUndoRedoBuffer();\n      this.hookUndoShortcutKey();\n      this.createCellExternalCopyManagerPlugin(this._grid);\n    }\n\n    // manually register other plugins\n    if (this._gridOptions.registerPlugins !== undefined) {\n      if (Array.isArray(this._gridOptions.registerPlugins)) {\n        this._gridOptions.registerPlugins.forEach((plugin) => {\n          this._grid.registerPlugin(plugin);\n          this.extensionList.push({ name: 'generic', service: plugin });\n        });\n      } else {\n        this._grid.registerPlugin(this._gridOptions.registerPlugins);\n        this.extensionList.push({ name: 'generic', service: this._gridOptions.registerPlugins });\n      }\n    }\n  }\n\n  /**\n   * Attach/Create different plugins before the Grid creation.\n   * For example the multi-select have to be added to the column definition before the grid is created to work properly\n   * @param columnDefinitions\n   * @param options\n   */\n  createCheckboxPluginBeforeGridCreation(columnDefinitions: Column[], options: GridOption) {\n    if (options.enableCheckboxSelector) {\n      if (!this.checkboxSelectorPlugin) {\n        this.checkboxSelectorPlugin = new Slick.CheckboxSelectColumn(options.checkboxSelector || {});\n      }\n      const selectionColumn: Column = this.checkboxSelectorPlugin.getColumnDefinition();\n      selectionColumn.excludeFromExport = true;\n      selectionColumn.excludeFromQuery = true;\n      selectionColumn.excludeFromHeaderMenu = true;\n      columnDefinitions.unshift(selectionColumn);\n    }\n  }\n\n  /** Create the Excel like copy manager */\n  createCellExternalCopyManagerPlugin(grid: any) {\n    let newRowIds = 0;\n    const pluginOptions = {\n      clipboardCommandHandler: (editCommand: any) => {\n        this.undoRedoBuffer.queueAndExecuteCommand.call(this.undoRedoBuffer, editCommand);\n      },\n      dataItemColumnValueExtractor: (item: any, columnDef: Column) => {\n        // when grid or cell is not editable, we will possibly evaluate the Formatter if it was passed\n        // to decide if we evaluate the Formatter, we will use the same flag from Export which is \"exportWithFormatter\"\n        if (!this._gridOptions.editable || !columnDef.editor) {\n          const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._gridOptions.exportOptions.exportWithFormatter;\n          if (columnDef.formatter && isEvaluatingFormatter) {\n            const formattedOutput = columnDef.formatter(0, 0, item[columnDef.field], columnDef, item, this._grid);\n            if (columnDef.sanitizeDataExport || (this._gridOptions.exportOptions && this._gridOptions.exportOptions.sanitizeDataExport)) {\n              return sanitizeHtmlToText(formattedOutput);\n            }\n            return formattedOutput;\n          }\n        }\n\n        // else use the default \"dataItemColumnValueExtractor\" from the plugin itself\n        // we can do that by setting back the getter with null\n        return null;\n      },\n      readOnlyMode: false,\n      includeHeaderWhenCopying: false,\n      newRowCreator: (count: number) => {\n        for (let i = 0; i < count; i++) {\n          const item = {\n            id: 'newRow_' + newRowIds++\n          };\n          grid.getData().addItem(item);\n        }\n      }\n    };\n\n    grid.setSelectionModel(new Slick.CellSelectionModel());\n    this.cellExternalCopyManagerPlugin = new Slick.CellExternalCopyManager(pluginOptions);\n    grid.registerPlugin(this.cellExternalCopyManagerPlugin);\n    this.extensionList.push({ name: 'CellExternalCopyManager', service: this.cellExternalCopyManagerPlugin });\n  }\n\n  /**\n   * Create the Column Picker and expose all the available hooks that user can subscribe (onColumnsChanged)\n   * @param grid\n   * @param columnDefinitions\n   */\n  createColumnPicker(grid: any, columnDefinitions: Column[]) {\n    // localization support for the picker\n    const columnTitle = this.getPickerTitleOutputString('columnTitle', 'columnPicker');\n    const forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'columnPicker');\n    const syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');\n\n    this._gridOptions.columnPicker = this._gridOptions.columnPicker || {};\n    this._gridOptions.columnPicker.columnTitle = this._gridOptions.columnPicker.columnTitle || columnTitle;\n    this._gridOptions.columnPicker.forceFitTitle = this._gridOptions.columnPicker.forceFitTitle || forceFitTitle;\n    this._gridOptions.columnPicker.syncResizeTitle = this._gridOptions.columnPicker.syncResizeTitle || syncResizeTitle;\n\n    this.columnPickerControl = new Slick.Controls.ColumnPicker(columnDefinitions, grid, this._gridOptions);\n    if (grid && this._gridOptions.enableColumnPicker) {\n      this.columnPickerControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\n        if (this._gridOptions.columnPicker && typeof this._gridOptions.columnPicker.onColumnsChanged === 'function') {\n          this._gridOptions.columnPicker.onColumnsChanged(e, args);\n        }\n      });\n    }\n\n    return this.columnPickerControl;\n  }\n\n  /**\n   * Create (or re-create) Grid Menu and expose all the available hooks that user can subscribe (onCommand, onMenuClose, ...)\n   * @param grid\n   * @param columnDefinitions\n   */\n  createGridMenu(grid: any, columnDefinitions: Column[]) {\n    if (this._gridOptions && this._gridOptions.gridMenu) {\n      this._gridOptions.gridMenu = { ...this.getDefaultGridMenuOptions(), ...this._gridOptions.gridMenu };\n\n      // merge original user grid menu items with internal items\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\n      this._gridOptions.gridMenu.customItems = [...this.userOriginalGridMenu.customItems || [], ...this.addGridMenuCustomCommands()];\n      this.translateItems(this._gridOptions.gridMenu.customItems, 'titleKey', 'title');\n      this.sortItems(this._gridOptions.gridMenu.customItems, 'positionOrder');\n\n      const gridMenuControl = new Slick.Controls.GridMenu(columnDefinitions, grid, this._gridOptions);\n      if (grid && this._gridOptions.gridMenu) {\n        gridMenuControl.onBeforeMenuShow.subscribe((e: Event, args: CellArgs) => {\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onBeforeMenuShow === 'function') {\n            this._gridOptions.gridMenu.onBeforeMenuShow(e, args);\n          }\n        });\n        gridMenuControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\n          this.areVisibleColumnDifferent = true;\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onColumnsChanged === 'function') {\n            this._gridOptions.gridMenu.onColumnsChanged(e, args);\n          }\n        });\n        gridMenuControl.onCommand.subscribe((e: Event, args: GridMenuItem) => {\n          this.executeGridMenuInternalCustomCommands(e, args);\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onCommand === 'function') {\n            this._gridOptions.gridMenu.onCommand(e, args);\n          }\n        });\n        gridMenuControl.onMenuClose.subscribe((e: Event, args: CellArgs) => {\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onMenuClose === 'function') {\n            this._gridOptions.gridMenu.onMenuClose(e, args);\n          }\n\n          // we also want to resize the columns if the user decided to hide certain column(s)\n          if (grid && typeof grid.autosizeColumns === 'function') {\n            // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree)\n            const gridUid = grid.getUID();\n            if (this.areVisibleColumnDifferent && gridUid && $(`.${gridUid}`).length > 0) {\n              grid.autosizeColumns();\n              this.areVisibleColumnDifferent = false;\n            }\n          }\n        });\n      }\n      return gridMenuControl;\n    }\n    return null;\n  }\n\n  /**\n   * Create the Header Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)\n   * @param grid\n   * @param dataView\n   * @param columnDefinitions\n   */\n  createHeaderMenu(grid: any, dataView: any, columnDefinitions: Column[]) {\n    this._gridOptions.headerMenu = { ...this.getDefaultHeaderMenuOptions(), ...this._gridOptions.headerMenu };\n    if (this._gridOptions.enableHeaderMenu) {\n      this._gridOptions.headerMenu = this.addHeaderMenuCustomCommands(this._gridOptions, columnDefinitions);\n    }\n\n    const headerMenuPlugin = new Slick.Plugins.HeaderMenu(this._gridOptions.headerMenu);\n\n    grid.registerPlugin(headerMenuPlugin);\n    headerMenuPlugin.onCommand.subscribe((e: Event, args: HeaderMenuOnCommandArgs) => {\n      this.executeHeaderMenuInternalCommands(e, args);\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onCommand === 'function') {\n        this._gridOptions.headerMenu.onCommand(e, args);\n      }\n    });\n    headerMenuPlugin.onBeforeMenuShow.subscribe((e: Event, args: HeaderMenuOnBeforeMenuShowArgs) => {\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onBeforeMenuShow === 'function') {\n        this._gridOptions.headerMenu.onBeforeMenuShow(e, args);\n      }\n    });\n\n    return headerMenuPlugin;\n  }\n\n  /** Create an undo redo buffer used by the Excel like copy */\n  createUndoRedoBuffer() {\n    const commandQueue: any[] = [];\n    let commandCtr = 0;\n\n    this.undoRedoBuffer = {\n      queueAndExecuteCommand: (editCommand: any) => {\n        commandQueue[commandCtr] = editCommand;\n        commandCtr++;\n        editCommand.execute();\n      },\n      undo: () => {\n        if (commandCtr === 0) { return; }\n        commandCtr--;\n        const command = commandQueue[commandCtr];\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\n          command.undo();\n        }\n      },\n      redo: () => {\n        if (commandCtr >= commandQueue.length) { return; }\n        const command = commandQueue[commandCtr];\n        commandCtr++;\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\n          command.execute();\n        }\n      }\n    };\n  }\n\n  /** Hide a column from the grid */\n  hideColumn(column: Column) {\n    if (this._grid && this.visibleColumns) {\n      const columnIndex = this._grid.getColumnIndex(column.id);\n      this.visibleColumns = this.removeColumnByIndex(this.visibleColumns, columnIndex);\n      this._grid.setColumns(this.visibleColumns);\n    }\n  }\n\n  /** Attach an undo shortcut key hook that will redo/undo the copy buffer */\n  hookUndoShortcutKey() {\n    // undo shortcut\n    $(document).keydown((e) => {\n      if (e.which === 90 && (e.ctrlKey || e.metaKey)) {    // CTRL + (shift) + Z\n        if (e.shiftKey) {\n          this.undoRedoBuffer.redo();\n        } else {\n          this.undoRedoBuffer.undo();\n        }\n      }\n    });\n  }\n\n  /** Dispose of all the controls & plugins */\n  dispose() {\n    this._grid = null;\n    this._dataView = null;\n    this.visibleColumns = [];\n\n    // dispose of each control/plugin if it has a destroy method\n    this.extensionList.forEach((item) => {\n      if (item && item.service && item.service.destroy) {\n        item.service.destroy();\n      }\n    });\n    this.extensionList = [];\n  }\n\n  /** Create Grid Menu with Custom Commands if user has enabled Filters and/or uses a Backend Service (OData, GraphQL) */\n  private addGridMenuCustomCommands() {\n    const backendApi = this._gridOptions.backendServiceApi || null;\n    const gridMenuCustomItems: GridMenuItem[] = [];\n\n    if (this._gridOptions && this._gridOptions.enableFiltering) {\n      // show grid menu: clear all filters\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllFiltersCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllFiltersCommand || 'fa fa-filter text-danger',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_FILTERS') : Constants.TEXT_CLEAR_ALL_FILTERS,\n            disabled: false,\n            command: 'clear-filter',\n            positionOrder: 50\n          }\n        );\n      }\n\n      // show grid menu: toggle filter row\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideToggleFilterCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconToggleFilterCommand || 'fa fa-random',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('TOGGLE_FILTER_ROW') : Constants.TEXT_TOGGLE_FILTER_ROW,\n            disabled: false,\n            command: 'toggle-filter',\n            positionOrder: 52\n          }\n        );\n      }\n\n      // show grid menu: refresh dataset\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideRefreshDatasetCommand && backendApi) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconRefreshDatasetCommand || 'fa fa-refresh',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('REFRESH_DATASET') : Constants.TEXT_REFRESH_DATASET,\n            disabled: false,\n            command: 'refresh-dataset',\n            positionOrder: 54\n          }\n        );\n      }\n    }\n\n    if (this._gridOptions.enableSorting) {\n      // show grid menu: clear all sorting\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllSortingCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllSortingCommand || 'fa fa-unsorted text-danger',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_SORTING') : Constants.TEXT_CLEAR_ALL_SORTING,\n            disabled: false,\n            command: 'clear-sorting',\n            positionOrder: 51\n          }\n        );\n      }\n    }\n\n    // show grid menu: export to file\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportCsvCommand) {\n      gridMenuCustomItems.push(\n        {\n          iconCssClass: this._gridOptions.gridMenu.iconExportCsvCommand || 'fa fa-download',\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_CSV') : Constants.TEXT_EXPORT_IN_CSV_FORMAT,\n          disabled: false,\n          command: 'export-csv',\n          positionOrder: 53\n        }\n      );\n    }\n    // show grid menu: export to text file as tab delimited\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportTextDelimitedCommand) {\n      gridMenuCustomItems.push(\n        {\n          iconCssClass: this._gridOptions.gridMenu.iconExportTextDelimitedCommand || 'fa fa-download',\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_TAB_DELIMITED') : Constants.TEXT_EXPORT_IN_TEXT_FORMAT,\n          disabled: false,\n          command: 'export-text-delimited',\n          positionOrder: 54\n        }\n      );\n    }\n\n    // add the custom \"Commands\" title if there are any commands\n    if (this._gridOptions && this._gridOptions.gridMenu && (gridMenuCustomItems.length > 0 || this._gridOptions.gridMenu.customItems.length > 0)) {\n      this._gridOptions.gridMenu.customTitle = this._gridOptions.gridMenu.customTitle || this.getPickerTitleOutputString('customTitle', 'gridMenu');\n    }\n\n    return gridMenuCustomItems;\n  }\n\n  /**\n   * Create Header Menu with Custom Commands if user has enabled Header Menu\n   * @param options\n   * @param columnDefinitions\n   * @return header menu\n   */\n  private addHeaderMenuCustomCommands(options: GridOption, columnDefinitions: Column[]): HeaderMenu {\n    const headerMenuOptions = options.headerMenu;\n\n    if (columnDefinitions && Array.isArray(columnDefinitions) && options.enableHeaderMenu) {\n      columnDefinitions.forEach((columnDef: Column) => {\n        if (columnDef && !columnDef.excludeFromHeaderMenu) {\n          if (!columnDef.header || !columnDef.header.menu) {\n            columnDef.header = {\n              menu: {\n                items: []\n              }\n            };\n          }\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\n\n          // Sorting Commands\n          if (options.enableSorting && columnDef.sortable && !headerMenuOptions.hideSortCommands) {\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-asc').length === 0) {\n              columnHeaderMenuItems.push({\n                iconCssClass: headerMenuOptions.iconSortAscCommand || 'fa fa-sort-asc',\n                title: options.enableTranslate ? this.translate.instant('SORT_ASCENDING') : Constants.TEXT_SORT_ASCENDING,\n                command: 'sort-asc',\n                positionOrder: 50\n              });\n            }\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-desc').length === 0) {\n              columnHeaderMenuItems.push({\n                iconCssClass: headerMenuOptions.iconSortDescCommand || 'fa fa-sort-desc',\n                title: options.enableTranslate ? this.translate.instant('SORT_DESCENDING') : Constants.TEXT_SORT_DESCENDING,\n                command: 'sort-desc',\n                positionOrder: 51\n              });\n            }\n          }\n\n          // Hide Column Command\n          if (!headerMenuOptions.hideColumnHideCommand && columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'hide').length === 0) {\n            columnHeaderMenuItems.push({\n              iconCssClass: headerMenuOptions.iconColumnHideCommand || 'fa fa-times',\n              title: options.enableTranslate ? this.translate.instant('HIDE_COLUMN') : Constants.TEXT_HIDE_COLUMN,\n              command: 'hide',\n              positionOrder: 52\n            });\n          }\n\n          this.translateItems(columnHeaderMenuItems, 'titleKey', 'title');\n\n          // sort the custom items by their position in the list\n          columnHeaderMenuItems.sort((itemA, itemB) => {\n            if (itemA && itemB && itemA.hasOwnProperty('positionOrder') && itemB.hasOwnProperty('positionOrder')) {\n              return itemA.positionOrder - itemB.positionOrder;\n            }\n            return 0;\n          });\n        }\n      });\n\n    }\n\n    return headerMenuOptions;\n  }\n\n  /** Execute the Header Menu Commands that was triggered by the onCommand subscribe */\n  executeHeaderMenuInternalCommands(e: Event, args: HeaderMenuOnCommandArgs) {\n    if (args && args.command) {\n      switch (args.command) {\n        case 'hide':\n          this.hideColumn(args.column);\n          this.autoResizeColumns();\n          break;\n        case 'sort-asc':\n        case 'sort-desc':\n          // get previously sorted columns\n          const cols: ColumnSort[] = this.sortService.getPreviousColumnSorts(args.column.id + '');\n\n          // add to the column array, the column sorted by the header menu\n          cols.push({ sortCol: args.column, sortAsc: (args.command === 'sort-asc') });\n          if (this._gridOptions.backendServiceApi) {\n            this.sortService.onBackendSortChanged(e, { multiColumnSort: true, sortCols: cols, grid: this._grid });\n          } else {\n            this.sortService.onLocalSortChanged(this._grid, this._dataView, cols);\n          }\n\n          // update the this.gridObj sortColumns array which will at the same add the visual sort icon(s) on the UI\n          const newSortColumns: ColumnSort[] = cols.map((col) => {\n            return { columnId: col.sortCol.id, sortAsc: col.sortAsc };\n          });\n          this._grid.setSortColumns(newSortColumns); // add sort icon in UI\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /**\n   * Execute the Grid Menu Custom command callback that was triggered by the onCommand subscribe\n   * These are the default internal custom commands\n   * @param event\n   * @param GridMenuItem args\n   */\n  executeGridMenuInternalCustomCommands(e: Event, args: GridMenuItem) {\n    if (args && args.command) {\n      switch (args.command) {\n        case 'clear-filter':\n          this.filterService.clearFilters();\n          this._dataView.refresh();\n          break;\n        case 'clear-sorting':\n          this.sortService.clearSorting();\n          this._dataView.refresh();\n          break;\n        case 'export-csv':\n          this.exportService.exportToFile({\n            delimiter: DelimiterType.comma,\n            filename: 'export',\n            format: FileType.csv,\n            useUtf8WithBom: true\n          });\n          break;\n        case 'export-text-delimited':\n          this.exportService.exportToFile({\n            delimiter: DelimiterType.tab,\n            filename: 'export',\n            format: FileType.txt,\n            useUtf8WithBom: true\n          });\n          break;\n        case 'toggle-filter':\n          this._grid.setHeaderRowVisibility(!this._grid.getOptions().showHeaderRow);\n          break;\n        case 'toggle-toppanel':\n          this._grid.setTopPanelVisibility(!this._grid.getOptions().showTopPanel);\n          break;\n        case 'refresh-dataset':\n          this.refreshBackendDataset();\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /** Refresh the dataset through the Backend Service */\n  refreshBackendDataset() {\n    let query;\n    const backendApi = this._gridOptions.backendServiceApi;\n    if (!backendApi || !backendApi.service || !backendApi.process) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    if (backendApi.service) {\n      query = backendApi.service.buildQuery();\n    }\n\n    if (query && query !== '') {\n      if (backendApi.preProcess) {\n        backendApi.preProcess();\n      }\n\n      // the process could be an Observable (like HttpClient) or a Promise\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n      const observableOrPromise = backendApi.process(query);\n\n      castToPromise(observableOrPromise).then((processResult: GraphqlResult | any) => {\n        // from the result, call our internal post process to update the Dataset and Pagination info\n        if (processResult && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  /**\n   * Remove a column from the grid by it's index in the grid\n   * @param array input\n   * @param index\n   */\n  removeColumnByIndex(array: any[], index: number) {\n    return array.filter((el: any, i: number) => {\n      return index !== i;\n    });\n  }\n\n  /** Translate the Column Picker and it's last 2 checkboxes */\n  translateColumnPicker() {\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\n    if (this._gridOptions && this._gridOptions.columnPicker) {\n      this.emptyColumnPickerTitles();\n\n      this._gridOptions.columnPicker.columnTitle = this.getPickerTitleOutputString('columnTitle', 'columnPicker');\n      this._gridOptions.columnPicker.forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'columnPicker');\n      this._gridOptions.columnPicker.syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');\n    }\n\n    // translate all columns (including non-visible)\n    this.translateItems(this.allColumns, 'headerKey', 'name');\n\n    // re-initialize the Column Picker, that will recreate all the list\n    // doing an \"init()\" won't drop any existing command attached\n    if (this.columnPickerControl.init) {\n      this.columnPickerControl.init(this._grid);\n    }\n  }\n\n  /** Translate the Grid Menu titles and column picker */\n  translateGridMenu() {\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\n    // we also need to call the control init so that it takes the new Grid object with latest values\n    if (this._gridOptions && this._gridOptions.gridMenu) {\n      this._gridOptions.gridMenu.customItems = [];\n      this.emptyGridMenuTitles();\n\n      // merge original user grid menu items with internal items\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\n      this._gridOptions.gridMenu.customItems = [...this.userOriginalGridMenu.customItems || [], ...this.addGridMenuCustomCommands()];\n      this.translateItems(this._gridOptions.gridMenu.customItems, 'titleKey', 'title');\n      this.sortItems(this._gridOptions.gridMenu.customItems, 'positionOrder');\n\n      this._gridOptions.gridMenu.columnTitle = this.getPickerTitleOutputString('columnTitle', 'gridMenu');\n      this._gridOptions.gridMenu.forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'gridMenu');\n      this._gridOptions.gridMenu.syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'gridMenu');\n\n      // translate all columns (including non-visible)\n      this.translateItems(this.allColumns, 'headerKey', 'name');\n\n      // re-initialize the Grid Menu, that will recreate all the menus & list\n      // doing an \"init()\" won't drop any existing command attached\n      if (this.gridMenuControl.init) {\n        this.gridMenuControl.init(this._grid);\n      }\n    }\n  }\n\n  /**\n   * Translate the Header Menu titles, we need to loop through all column definition to re-translate them\n   */\n  translateHeaderMenu() {\n    if (this._gridOptions && this._gridOptions.headerMenu) {\n      this.resetHeaderMenuTranslations(this.visibleColumns);\n    }\n  }\n\n  /**\n   * Translate manually the header titles.\n   * We could optionally pass a locale (that will change currently loaded locale), else it will use current locale\n   * @param locale to use\n   * @param new column definitions (optional)\n   */\n  translateColumnHeaders(locale?: boolean | string, newColumnDefinitions?: Column[]) {\n    if (locale) {\n      this.translate.use(locale as string);\n    }\n\n    const columnDefinitions = newColumnDefinitions || this._columnDefinitions;\n\n    this.translateItems(columnDefinitions, 'headerKey', 'name');\n    this.translateItems(this.allColumns, 'headerKey', 'name');\n\n    // re-render the column headers\n    this.renderColumnHeaders(columnDefinitions);\n  }\n\n  /**\n   * Render (or re-render) the column headers from column definitions.\n   * calling setColumns() will trigger a grid re-render\n   */\n  renderColumnHeaders(newColumnDefinitions?: Column[]) {\n    const collection = newColumnDefinitions || this._columnDefinitions;\n    if (Array.isArray(collection) && this._grid && this._grid.setColumns) {\n      this._grid.setColumns(collection);\n    }\n  }\n\n  private emptyColumnPickerTitles() {\n    this._gridOptions.columnPicker.columnTitle = '';\n    this._gridOptions.columnPicker.forceFitTitle = '';\n    this._gridOptions.columnPicker.syncResizeTitle = '';\n  }\n\n  private emptyGridMenuTitles() {\n    this._gridOptions.gridMenu.customTitle = '';\n    this._gridOptions.gridMenu.columnTitle = '';\n    this._gridOptions.gridMenu.forceFitTitle = '';\n    this._gridOptions.gridMenu.syncResizeTitle = '';\n  }\n\n  /**\n   * @return default Grid Menu options\n   */\n  private getDefaultGridMenuOptions(): GridMenu {\n    return {\n      customTitle: undefined,\n      columnTitle: this.getPickerTitleOutputString('columnTitle', 'gridMenu'),\n      forceFitTitle: this.getPickerTitleOutputString('forceFitTitle', 'gridMenu'),\n      syncResizeTitle: this.getPickerTitleOutputString('syncResizeTitle', 'gridMenu'),\n      iconCssClass: 'fa fa-bars',\n      menuWidth: 18,\n      customItems: [],\n      hideClearAllFiltersCommand: false,\n      hideRefreshDatasetCommand: false,\n      hideToggleFilterCommand: false,\n    };\n  }\n\n  /**\n   * @return default Header Menu options\n   */\n  private getDefaultHeaderMenuOptions(): HeaderMenu {\n    return {\n      autoAlignOffset: 12,\n      minWidth: 140,\n      hideColumnHideCommand: false,\n      hideSortCommands: false,\n      title: ''\n    };\n  }\n\n  /**\n   * From a Grid Menu object property name, we will return the correct title output string following this order\n   * 1- if user provided a title, use it as the output title\n   * 2- else if user provided a title key, use it to translate the output title\n   * 3- else if nothing is provided use\n   */\n  private getPickerTitleOutputString(propName: string, pickerName: 'gridMenu' | 'columnPicker') {\n    let output = '';\n    const picker = this._gridOptions && this._gridOptions[pickerName] || {};\n    const enableTranslate = this._gridOptions && this._gridOptions.enableTranslate || false;\n\n    const title = picker && picker[propName];\n    const titleKey = picker && picker[`${propName}Key`];\n\n    if (titleKey) {\n      output = this.translate.instant(titleKey || ' ');\n    } else {\n      switch (propName) {\n        case 'customTitle':\n          output = title || (enableTranslate ? this.translate.instant('COMMANDS') : Constants.TEXT_COMMANDS);\n          break;\n        case 'columnTitle':\n          output = title || (enableTranslate ? this.translate.instant('COLUMNS') : Constants.TEXT_COLUMNS);\n          break;\n        case 'forceFitTitle':\n          output = title || (enableTranslate ? this.translate.instant('FORCE_FIT_COLUMNS') : Constants.TEXT_FORCE_FIT_COLUMNS);\n          break;\n        case 'syncResizeTitle':\n          output = title || (enableTranslate ? this.translate.instant('SYNCHRONOUS_RESIZE') : Constants.TEXT_SYNCHRONOUS_RESIZE);\n          break;\n        default:\n          output = title;\n          break;\n      }\n    }\n    return output;\n  }\n\n  /**\n   * Reset all the Grid Menu options which have text to translate\n   * @param grid menu object\n   */\n  private resetHeaderMenuTranslations(columnDefinitions: Column[]) {\n    columnDefinitions.forEach((columnDef: Column) => {\n      if (columnDef && columnDef.header && columnDef.header && columnDef.header.menu && columnDef.header.menu.items) {\n        if (!columnDef.excludeFromHeaderMenu) {\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\n\n          columnHeaderMenuItems.forEach((item) => {\n            switch (item.command) {\n              case 'sort-asc':\n                item.title = this.translate.instant('SORT_ASCENDING') || Constants.TEXT_SORT_ASCENDING;\n                break;\n              case 'sort-desc':\n                item.title = this.translate.instant('SORT_DESCENDING') || Constants.TEXT_SORT_DESCENDING;\n                break;\n              case 'hide':\n                item.title = this.translate.instant('HIDE_COLUMN') || Constants.TEXT_HIDE_COLUMN;\n                break;\n            }\n\n            // re-translate if there's a \"titleKey\"\n            if (this._gridOptions && this._gridOptions.enableTranslate) {\n              this.translateItems(columnHeaderMenuItems, 'titleKey', 'title');\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Sort items in an array by a property name\n   * @params items array\n   * @param property name to sort with\n   * @return sorted array\n   */\n  private sortItems(items: any[], propertyName: string) {\n    // sort the custom items by their position in the list\n    items.sort((itemA, itemB) => {\n      if (itemA && itemB && itemA.hasOwnProperty(propertyName) && itemB.hasOwnProperty(propertyName)) {\n        return itemA[propertyName] - itemB[propertyName];\n      }\n      return 0;\n    });\n  }\n\n  /** Translate the an array of items from an input key and assign to the output key */\n  private translateItems(items: any[], inputKey: string, outputKey: string) {\n    for (const item of items) {\n      if (item[inputKey]) {\n        item[outputKey] = this.translate.instant(item[inputKey]);\n      }\n    }\n  }\n}\n",
    "/**\r\n * This GraphqlQueryBuilder class is a lib that already exist\r\n * but was causing issues with TypeScript, RequireJS and other bundler/packagers\r\n * and so I rewrote it in pure TypeScript.\r\n *\r\n * The previous lib can be viewed here at this Github\r\n * https://github.com/codemeasandwich/graphql-query-builder\r\n */\r\nexport default class GraphqlQueryBuilder {\r\n  alias: string;\r\n  head: any[] = [];\r\n  body: any;\r\n\r\n  /* Constructor, query/mutator you wish to use, and an alias or filter arguments. */\r\n  constructor(private queryFnName: string, aliasOrFilter?: string | object) {\r\n    if (typeof aliasOrFilter === 'function') {\r\n      this.alias = aliasOrFilter;\r\n    } else if (typeof aliasOrFilter === 'object') {\r\n      this.filter(aliasOrFilter);\r\n    } else if (undefined === aliasOrFilter && 2 === arguments.length) {\r\n      throw new TypeError(`You have passed undefined as Second argument to \"Query\"`);\r\n    } else if (undefined !== aliasOrFilter) {\r\n      throw new TypeError(`Second argument to \"Query\" should be an alias name(String) or filter arguments(Object). was passed ${aliasOrFilter}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The parameters to run the query against.\r\n   * @param filters An object mapping attribute to values\r\n   */\r\n  filter(filters: any) {\r\n    for (const prop of Object.keys(filters)) {\r\n      if (typeof filters[prop] === 'function') {\r\n        continue;\r\n      }\r\n      const val = this.getGraphQLValue(filters[prop]);\r\n      if (val === '{}') {\r\n        continue;\r\n      }\r\n      this.head.push(`${prop}:${val}`);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Outlines the properties you wish to be returned from the query.\r\n   * @param properties representing each attribute you want Returned\r\n   */\r\n  find(...searches: any[]) { // THIS NEED TO BE A \"FUNCTION\" to scope 'arguments'\r\n    if (!searches) {\r\n      throw new TypeError(`find value can not be >>falsy<<`);\r\n    }\r\n    // if its a string.. it may have other values\r\n    // else it sould be an Object or Array of maped values\r\n    const searchKeys = (searches.length === 1 && Array.isArray(searches[0])) ? searches[0] : searches;\r\n    this.body = this.parceFind(searchKeys);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set an alias for this result.\r\n   * @param alias\r\n   */\r\n  setAlias(alias: string) {\r\n    this.alias = alias;\r\n  }\r\n\r\n  /**\r\n   * Return to the formatted query string\r\n   * @return\r\n   */\r\n  toString() {\r\n    if (this.body === undefined) {\r\n      throw new ReferenceError(`return properties are not defined. use the 'find' function to defined them`);\r\n    }\r\n\r\n    return `${(this.alias) ? (this.alias + ':') : ''} ${this.queryFnName} ${(this.head.length > 0) ? '(' + this.head.join(',') + ')' : ''}  { ${this.body} }`;\r\n  }\r\n\r\n  // --\r\n  // PRIVATE FUNCTIONS\r\n  // -----------------\r\n\r\n  private parceFind(_levelA: any[]) {\r\n    const propsA = _levelA.map((currentValue, index) => {\r\n      const itemX = _levelA[index];\r\n\r\n      if (itemX instanceof GraphqlQueryBuilder) {\r\n        return itemX.toString();\r\n      } else if (!Array.isArray(itemX) && typeof itemX === 'object') {\r\n        const propsAA = Object.keys(itemX);\r\n        if (1 !== propsAA.length) {\r\n          throw new RangeError(`Alias objects should only have one value. was passed: ${JSON.stringify(itemX)}`);\r\n        }\r\n        const propS = propsAA[0];\r\n        const item = itemX[propS];\r\n\r\n        if (Array.isArray(item)) {\r\n          return new GraphqlQueryBuilder(propS).find(item);\r\n        }\r\n        return `${propS} : ${item} `;\r\n      } else if (typeof itemX === 'string') {\r\n        return itemX;\r\n      } else {\r\n        throw new RangeError(`cannot handle Find value of ${itemX}`);\r\n      }\r\n    });\r\n\r\n    return propsA.join(',');\r\n  }\r\n\r\n  private getGraphQLValue(value: any) {\r\n    if (typeof value === 'string') {\r\n      value = JSON.stringify(value);\r\n    } else if (Array.isArray(value)) {\r\n      value = value.map(item => {\r\n        return this.getGraphQLValue(item);\r\n      }).join();\r\n      value = `[${value}]`;\r\n    } else if (value instanceof Date) {\r\n      value = JSON.stringify(value);\r\n    } else if (value !== null && typeof value === 'object') {\r\n      value = this.objectToString(value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private objectToString(obj: any) {\r\n    const sourceA = [];\r\n\r\n    for (const prop of Object.keys(obj)) {\r\n      if (typeof obj[prop] === 'function') {\r\n        continue;\r\n      }\r\n      sourceA.push(`${prop}:${this.getGraphQLValue(obj[prop])}`);\r\n    }\r\n    return `{${sourceA.join()}}`;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport { mapOperatorType, mapOperatorByFieldType } from './utilities';\nimport {\n  BackendService,\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  ColumnSort,\n  CurrentFilter,\n  CurrentPagination,\n  CurrentSorter,\n  FieldType,\n  FilterChangedArgs,\n  GraphqlCursorPaginationOption,\n  GraphqlDatasetFilter,\n  GraphqlFilteringOption,\n  GraphqlPaginationOption,\n  GraphqlServiceOption,\n  GraphqlSortingOption,\n  GridOption,\n  Pagination,\n  PaginationChangedArgs,\n  SortChangedArgs,\n  SortDirection,\n  SortDirectionString\n} from './../models/index';\nimport QueryBuilder from './graphqlQueryBuilder';\n\n// timer for keeping track of user typing waits\nlet timer: any;\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\nconst DEFAULT_ITEMS_PER_PAGE = 25;\nconst DEFAULT_PAGE_SIZE = 20;\n\nexport class GraphqlService implements BackendService {\n  private _currentFilters: ColumnFilters | CurrentFilter[];\n  private _currentPagination: CurrentPagination;\n  private _currentSorters: CurrentSorter[];\n  private _columnDefinitions: Column[];\n  private _grid: any;\n  options: GraphqlServiceOption;\n  pagination: Pagination | undefined;\n  defaultOrderBy: GraphqlSortingOption = { field: 'id', direction: SortDirection.ASC };\n  defaultPaginationOptions: GraphqlPaginationOption | GraphqlCursorPaginationOption = {\n    first: DEFAULT_ITEMS_PER_PAGE,\n    offset: 0\n  };\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Build the GraphQL query, since the service include/exclude cursor, the output query will be different.\n   * @param serviceOptions GraphqlServiceOption\n   */\n  buildQuery() {\n    if (!this.options || !this.options.datasetName || (!this._columnDefinitions && !this.options.columnDefinitions)) {\n      throw new Error('GraphQL Service requires \"datasetName\" & \"columnDefinitions\" properties for it to work');\n    }\n\n    // get the column definitions and exclude some if they were tagged as excluded\n    let columnDefinitions = this._columnDefinitions || this.options.columnDefinitions;\n    columnDefinitions = columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\n\n    const queryQb = new QueryBuilder('query');\n    const datasetQb = new QueryBuilder(this.options.datasetName);\n    const dataQb = (this.options.isWithCursor) ? new QueryBuilder('edges') : new QueryBuilder('nodes');\n\n    // get all the columnds Ids for the filters to work\n    let columnIds: string[] = [];\n    if (columnDefinitions && Array.isArray(columnDefinitions)) {\n      for (const column of columnDefinitions) {\n        columnIds.push(column.field);\n\n        // if extra \"fields\" are passed, also push them to columnIds\n        if (column.fields) {\n          columnIds.push(...column.fields);\n        }\n      }\n      // columnIds = columnDefinitions.map((column) => column.field);\n    } else {\n      columnIds = this.options.columnIds || [];\n    }\n\n    // Slickgrid also requires the \"id\" field to be part of DataView\n    // add it to the GraphQL query if it wasn't already part of the list\n    if (columnIds.indexOf('id') === -1) {\n      columnIds.unshift('id');\n    }\n\n    const filters = this.buildFilterQuery(columnIds);\n\n    if (this.options.isWithCursor) {\n      // ...pageInfo { hasNextPage, endCursor }, edges { cursor, node { _filters_ } }\n      const pageInfoQb = new QueryBuilder('pageInfo');\n      pageInfoQb.find('hasNextPage', 'endCursor');\n      dataQb.find(['cursor', { node: filters }]);\n      datasetQb.find(['totalCount', pageInfoQb, dataQb]);\n    } else {\n      // ...nodes { _filters_ }\n      dataQb.find(filters);\n      datasetQb.find(['totalCount', dataQb]);\n    }\n\n    // add dataset filters, could be Pagination and SortingFilters and/or FieldFilters\n    const datasetFilters: GraphqlDatasetFilter = {\n      ...this.options.paginationOptions,\n      first: ((this.options.paginationOptions && this.options.paginationOptions.first) ? this.options.paginationOptions.first : ((this.pagination && this.pagination.pageSize) ? this.pagination.pageSize : null)) || this.defaultPaginationOptions.first\n    };\n\n    if (!this.options.isWithCursor) {\n      datasetFilters.offset = ((this.options.paginationOptions && this.options.paginationOptions.hasOwnProperty('offset')) ? +this.options.paginationOptions['offset'] : 0);\n    }\n\n    if (this.options.sortingOptions && Array.isArray(this.options.sortingOptions) && this.options.sortingOptions.length > 0) {\n      // orderBy: [{ field:x, direction: 'ASC' }]\n      datasetFilters.orderBy = this.options.sortingOptions;\n    }\n    if (this.options.filteringOptions && Array.isArray(this.options.filteringOptions) && this.options.filteringOptions.length > 0) {\n      // filterBy: [{ field: date, operator: '>', value: '2000-10-10' }]\n      datasetFilters.filterBy = this.options.filteringOptions;\n    }\n    if (this.options.addLocaleIntoQuery) {\n      // first: 20, ... locale: \"en-CA\"\n      datasetFilters.locale = this._gridOptions && this._gridOptions.i18n && this._gridOptions.i18n.currentLang || 'en';\n    }\n    if (this.options.extraQueryArguments) {\n      // first: 20, ... userId: 123\n      for (const queryArgument of this.options.extraQueryArguments) {\n        datasetFilters[queryArgument.field] = queryArgument.value;\n      }\n    }\n\n    // query { users(first: 20, orderBy: [], filterBy: [])}\n    datasetQb.filter(datasetFilters);\n    queryQb.find(datasetQb);\n\n    const enumSearchProperties = ['direction:', 'field:', 'operator:'];\n    return this.trimDoubleQuotesOnEnumField(queryQb.toString(), enumSearchProperties, this.options.keepArgumentFieldDoubleQuotes || false);\n  }\n\n  /**\n   * From an input array of strings, we want to build a GraphQL query string.\n   * The process has to take the dot notation and parse it into a valid GraphQL query\n   * Following this SO answer https://stackoverflow.com/a/47705476/1212166\n   *\n   * INPUT\n   *  ['firstName', 'lastName', 'billing.address.street', 'billing.address.zip']\n   * OUTPUT\n   * firstName, lastName, billing{address{street, zip}}\n   * @param inputArray\n   */\n  buildFilterQuery(inputArray: string[]) {\n\n    const set = (o: any = {}, a: any) => {\n      const k = a.shift();\n      o[k] = a.length ? set(o[k], a) : null;\n      return o;\n    };\n\n    const output = inputArray.reduce((o: any, a: string) => set(o, a.split('.')), {});\n\n    return JSON.stringify(output)\n      .replace(/\\\"|\\:|null/g, '')\n      .replace(/^\\{/, '')\n      .replace(/\\}$/, '');\n  }\n\n  init(serviceOptions?: GraphqlServiceOption, pagination?: Pagination, grid?: any): void {\n    this._grid = grid;\n    this.options = serviceOptions || {};\n    this.pagination = pagination;\n\n    if (grid && grid.getColumns && grid.getOptions) {\n      this._columnDefinitions = grid.getColumns();\n    }\n  }\n\n  /**\n   * Get an initialization of Pagination options\n   * @return Pagination Options\n   */\n  getInitPaginationOptions(): GraphqlDatasetFilter {\n    return (this.options.isWithCursor) ? { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE) } : { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE), offset: 0 };\n  }\n\n  /** Get the GraphQL dataset name */\n  getDatasetName(): string {\n    return this.options.datasetName || '';\n  }\n\n  /** Get the Filters that are currently used by the grid */\n  getCurrentFilters(): ColumnFilters | CurrentFilter[] {\n    return this._currentFilters;\n  }\n\n  /** Get the Pagination that is currently used by the grid */\n  getCurrentPagination(): CurrentPagination {\n    return this._currentPagination;\n  }\n\n  /** Get the Sorters that are currently used by the grid */\n  getCurrentSorters(): CurrentSorter[] {\n    return this._currentSorters;\n  }\n\n  /*\n   * Reset the pagination options\n   */\n  resetPaginationOptions() {\n    let paginationOptions;\n    if (this.options.isWithCursor) {\n      // first, last, after, before\n      paginationOptions = {\n        after: '',\n        before: undefined,\n        last: undefined\n      } as GraphqlCursorPaginationOption;\n    } else {\n      // first, last, offset\n      paginationOptions = (this.options.paginationOptions || this.getInitPaginationOptions()) as GraphqlPaginationOption;\n      paginationOptions.offset = 0;\n    }\n\n    // save current pagination as Page 1 and page size as \"first\" set size\n    this._currentPagination = {\n      pageNumber: 1,\n      pageSize: paginationOptions.first\n    };\n\n    this.updateOptions({ paginationOptions });\n  }\n\n  updateOptions(serviceOptions?: GraphqlServiceOption) {\n    this.options = { ...this.options, ...serviceOptions };\n  }\n\n  /*\n   * FILTERING\n   */\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\n    const gridOptions: GridOption = this._gridOptions || args.grid.getOptions();\n    const backendApi = gridOptions.backendServiceApi;\n\n    if (backendApi === undefined) {\n      throw new Error('Something went wrong in the GraphqlService, \"backendServiceApi\" is not initialized');\n    }\n\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\n    let debounceTypingDelay = 0;\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\n    }\n\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    this._currentFilters = this.castFilterToColumnFilter(args.columnFilters);\n\n    const promise = new Promise<string>((resolve, reject) => {\n      if (!args || !args.grid) {\n        throw new Error('Something went wrong when trying create the GraphQL Backend Service, it seems that \"args\" is not populated correctly');\n      }\n\n      // reset Pagination, then build the GraphQL query which we will use in the WebAPI callback\n      // wait a minimum user typing inactivity before processing any query\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        // loop through all columns to inspect filters & set the query\n        this.updateFilters(args.columnFilters, false);\n\n        this.resetPaginationOptions();\n        resolve(this.buildQuery());\n      }, debounceTypingDelay);\n    });\n\n    return promise;\n  }\n\n  /*\n   * PAGINATION\n   * With cursor, the query can have 4 arguments (first, after, last, before), for example:\n   *   users (first:20, after:\"YXJyYXljb25uZWN0aW9uOjM=\") {\n   *     totalCount\n   *     pageInfo {\n   *       hasNextPage\n   *       endCursor\n   *     }\n   *     edges {\n   *       cursor\n   *       node {\n   *         name\n   *         gender\n   *       }\n   *     }\n   *   }\n   * Without cursor, the query can have 3 arguments (first, last, offset), for example:\n   *   users (first:20, offset: 10) {\n   *     totalCount\n   *     nodes {\n   *       name\n   *       gender\n   *     }\n   *   }\n   */\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\n    const pageSize = +(args.pageSize || ((this.pagination) ? this.pagination.pageSize : DEFAULT_PAGE_SIZE));\n    this.updatePagination(args.newPage, pageSize);\n\n    // build the GraphQL query which we will use in the WebAPI callback\n    return this.buildQuery();\n  }\n\n  /*\n   * SORTING\n   * we will use sorting as per a Facebook suggestion on a Github issue (with some small changes)\n   * https://github.com/graphql/graphql-relay-js/issues/20#issuecomment-220494222\n   */\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\n\n    // loop through all columns to inspect sorters & set the query\n    this.updateSorters(sortColumns);\n\n    // build the GraphQL query which we will use in the WebAPI callback\n    return this.buildQuery();\n  }\n\n  /**\n   * loop through all columns to inspect filters & update backend service filteringOptions\n   * @param columnFilters\n   */\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset: boolean) {\n    const searchByArray: GraphqlFilteringOption[] = [];\n    let searchValue: string | string[];\n\n    for (const columnId in columnFilters) {\n      if (columnFilters.hasOwnProperty(columnId)) {\n        const columnFilter = columnFilters[columnId];\n\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\n        let columnDef: Column | undefined;\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\n          columnDef = this._columnDefinitions.find((column: Column) => column.id === columnFilter.columnId);\n        } else {\n          columnDef = columnFilter.columnDef;\n        }\n        if (!columnDef) {\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\n        }\n\n        const fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\n        if (typeof fieldSearchValue === 'undefined') {\n          fieldSearchValue = '';\n        }\n\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\n          throw new Error(`GraphQL filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {model: Filters.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\n        }\n\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n        let operator = columnFilter.operator || ((matches) ? matches[1] : '');\n        searchValue = (!!matches) ? matches[2] : '';\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n\n        // no need to query if search value is empty\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\n          continue;\n        }\n\n        // when having more than 1 search term (we need to create a CSV string for GraphQL \"IN\" or \"NOT IN\" filter search)\n        if (searchTerms && searchTerms.length > 1) {\n          searchValue = searchTerms.join(',');\n        } else if (typeof searchValue === 'string') {\n          // escaping the search value\n          searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\n          if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\n            operator = (operator === '*' || operator === '*z') ? 'endsWith' : 'startsWith';\n          }\n        }\n\n        // if we didn't find an Operator but we have a Filter Type, we should use default Operator\n        // multipleSelect is \"IN\", while singleSelect is \"EQ\", else don't map any operator\n        if (!operator && columnDef.filter) {\n          operator = columnDef.filter.operator;\n        }\n\n        // if we still don't have an operator find the proper Operator to use by it's field type\n        if (!operator) {\n          operator = mapOperatorByFieldType(columnDef.type || FieldType.string);\n        }\n\n        searchByArray.push({\n          field: fieldName,\n          operator: mapOperatorType(operator),\n          value: searchValue\n        });\n      }\n    }\n\n    // update the service options with filters for the buildQuery() to work later\n    this.updateOptions({ filteringOptions: searchByArray });\n  }\n\n  /**\n   * Update the pagination component with it's new page number and size\n   * @param newPage\n   * @param pageSize\n   */\n  updatePagination(newPage: number, pageSize: number) {\n    this._currentPagination = {\n      pageNumber: newPage,\n      pageSize\n    };\n\n    let paginationOptions;\n    if (this.options.isWithCursor) {\n      paginationOptions = {\n        first: pageSize\n      };\n    } else {\n      paginationOptions = {\n        first: pageSize,\n        offset: (newPage - 1) * pageSize\n      };\n    }\n\n    this.updateOptions({ paginationOptions });\n  }\n\n  /**\n   * loop through all columns to inspect sorters & update backend service sortingOptions\n   * @param columnFilters\n   */\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\n    let currentSorters: CurrentSorter[] = [];\n    let graphqlSorters: GraphqlSortingOption[] = [];\n\n    if (!sortColumns && presetSorters) {\n      // make the presets the current sorters, also make sure that all direction are in uppercase for GraphQL\n      currentSorters = presetSorters;\n      currentSorters.forEach((sorter) => sorter.direction = sorter.direction.toUpperCase() as SortDirectionString);\n\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\n      const tmpSorterArray = currentSorters.map((sorter) => {\n        const columnDef = this._columnDefinitions.find((column: Column) => column.id === sorter.columnId);\n        if (columnDef) {\n          graphqlSorters.push({\n            field: (columnDef.queryField || columnDef.queryFieldSorter || columnDef.field || columnDef.id) + '',\n            direction: sorter.direction\n          });\n        }\n        return {\n          columnId: sorter.columnId,\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\n        };\n      });\n      this._grid.setSortColumns(tmpSorterArray);\n    } else if (sortColumns && !presetSorters) {\n      // build the orderBy array, it could be multisort, example\n      // orderBy:[{field: lastName, direction: ASC}, {field: firstName, direction: DESC}]\n      if (sortColumns && sortColumns.length === 0) {\n        graphqlSorters = new Array(this.defaultOrderBy); // when empty, use the default sort\n        currentSorters = new Array({ columnId: this.defaultOrderBy.field, direction: this.defaultOrderBy.direction });\n      } else {\n        if (sortColumns) {\n          for (const column of sortColumns) {\n            if (column && column.sortCol) {\n              currentSorters.push({\n                columnId: column.sortCol.id + '',\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\n              });\n\n              graphqlSorters.push({\n                field: (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '',\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\n              });\n            }\n          }\n        }\n      }\n    }\n\n    // keep current Sorters and update the service options with the new sorting\n    this._currentSorters = currentSorters;\n    this.updateOptions({ sortingOptions: graphqlSorters });\n  }\n\n  /**\n   * A function which takes an input string and removes double quotes only\n   * on certain fields are identified as GraphQL enums (except fields with dot notation)\n   * For example let say we identified (\"direction:\", \"sort\") as word which are GraphQL enum fields\n   * then the result will be:\n   * FROM\n   * query { users (orderBy:[{field:\"firstName\", direction:\"ASC\"} }]) }\n   * TO\n   * query { users (orderBy:[{field: firstName, direction: ASC}})}\n   *\n   * EXCEPTIONS (fields with dot notation \".\" which are inside a \"field:\")\n   * these fields will keep double quotes while everything else will be stripped of double quotes\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: \"ASC\"} }\n   * TO\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: ASC}}\n   * @param inputStr input string\n   * @param enumSearchWords array of enum words to filter\n   * @returns outputStr output string\n   */\n  trimDoubleQuotesOnEnumField(inputStr: string, enumSearchWords: string[], keepArgumentFieldDoubleQuotes: boolean) {\n    const patternWordInQuotes = `\\s?((field:\\s*)?\".*?\")`;\n    let patternRegex = enumSearchWords.join(patternWordInQuotes + '|');\n    patternRegex += patternWordInQuotes; // the last one should also have the pattern but without the pipe \"|\"\n    // example with (field: & direction:):  /field:s?(\".*?\")|direction:s?(\".*?\")/\n    const reg = new RegExp(patternRegex, 'g');\n\n    return inputStr.replace(reg, (group1, group2, group3) => {\n      // remove double quotes except when the string starts with a \"field:\"\n      let removeDoubleQuotes = true;\n      if (group1.startsWith('field:') && keepArgumentFieldDoubleQuotes) {\n        removeDoubleQuotes = false;\n      }\n      const rep = removeDoubleQuotes ? group1.replace(/\"/g, '') : group1;\n      return rep;\n    });\n  }\n\n  //\n  // private functions\n  // -------------------\n  /**\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\n   * @param columnFilters\n   */\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    const filtersArray: ColumnFilter[] = (typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters;\n\n    return filtersArray.map((filter) => {\n      const columnDef = filter.columnDef;\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\n      if (filter.operator) {\n        tmpFilter.operator = filter.operator;\n      }\n      if (Array.isArray(filter.searchTerms)) {\n        tmpFilter.searchTerms = filter.searchTerms;\n      }\n      return tmpFilter;\n    });\n  }\n}\n",
    "declare interface StringConstructor {\r\n  allTitleCase(inputStr: string): string;\r\n  format(inputStr: string, args: any): string;\r\n  padZero(length: number): string;\r\n  trim(inputStr: string): string;\r\n  titleCase(inputStr: string): string;\r\n}\r\n\r\n\r\nString.format = function(format: string, args): string {\r\n  // const args = (Array.isArray(arguments[1])) ? arguments[1] : Array.prototype.slice.call(arguments, 1);\r\n\r\n  return format.replace(/{(\\d+)}/g, function (match, number) {\r\n    return (typeof args[number] !== 'undefined') ? args[number] : match;\r\n  });\r\n};\r\n\r\nString.padZero = function (this: string, length: number) {\r\n  let s = this;\r\n  while (s.length < length) {\r\n    s = '0' + s;\r\n  }\r\n  return s;\r\n};\r\n\r\n/**\r\n * Trim any extra white space from the string\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.trim = function(inputStr: string): string {\r\n  return inputStr ? inputStr.replace(/\\s+/g, ' ') : inputStr;\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.allTitleCase = function(inputStr: string): string {\r\n  return inputStr.replace(/\\w\\S*/g, function(outputStr) {\r\n     return outputStr.charAt(0).toUpperCase() + outputStr.substr(1).toLowerCase();\r\n  });\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n*/\r\nString.titleCase = function(inputStr: string): string {\r\n  return inputStr.charAt(0).toUpperCase() + inputStr.slice(1);\r\n};\r\n",
    "import './global-utilities';\r\nimport { CaseType, OdataOption } from './../models/index';\r\n\r\nexport class OdataService {\r\n  _columnFilters: any;\r\n  _defaultSortBy: string;\r\n  _odataOptions: OdataOption;\r\n\r\n  constructor() {\r\n    this._odataOptions = {\r\n      filterQueue: [],\r\n      orderBy: ''\r\n    };\r\n    this._defaultSortBy = '';\r\n    this._columnFilters = {};\r\n  }\r\n\r\n  /*\r\n    * Build the OData query string from all the options provided\r\n    * @return string OData query\r\n    */\r\n  buildQuery(): string {\r\n    this._odataOptions.filterQueue = [];\r\n    const queryTmpArray = [];\r\n\r\n    if (this._odataOptions.top) {\r\n      queryTmpArray.push(`$top=${this._odataOptions.top}`);\r\n    }\r\n    if (this._odataOptions.skip) {\r\n      queryTmpArray.push(`$skip=${this._odataOptions.skip}`);\r\n    }\r\n    if (this._odataOptions.orderBy) {\r\n      let argument = '';\r\n      if (Array.isArray(this._odataOptions.orderBy)) {\r\n        argument = this._odataOptions.orderBy.join(','); // csv, that will form a query example like: $orderby=RoleName asc, Id desc\r\n      } else {\r\n        argument = this._odataOptions.orderBy;\r\n      }\r\n      queryTmpArray.push(`$orderby=${argument}`);\r\n    }\r\n    if (this._odataOptions.filterBy || this._odataOptions.filter) {\r\n      if (this._odataOptions.filter) {\r\n        this._odataOptions.filterQueue = [];\r\n        let filterStr = this._odataOptions.filter;\r\n        if (Array.isArray(this._odataOptions.filter)) {\r\n          filterStr = this._odataOptions.filter.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n        }\r\n        this._odataOptions.filterQueue.push(`(${filterStr})`);\r\n      }\r\n      // filterBy are passed manually by the user, however we will only add it if the column wasn't yet filtered\r\n      if (!!this._odataOptions.filterBy && !!this._odataOptions.filterBy.fieldName && !this._columnFilters[this._odataOptions.filterBy.fieldName.toLowerCase()]) {\r\n        if (this._odataOptions.filterBy.searchTerm !== '') {\r\n          this.saveColumnFilter(this._odataOptions.filterBy.fieldName.toLowerCase(), this._odataOptions.filterBy.searchTerm, this._odataOptions.filterBy.searchTerms);\r\n          this.updateFilterFromListTerms(this._odataOptions.filterBy);\r\n        }\r\n      }\r\n    }\r\n    if (this._odataOptions.filterQueue.length > 0) {\r\n      const query = this._odataOptions.filterQueue.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n      this._odataOptions.filter = query; // overwrite with\r\n      queryTmpArray.push(`$filter=${query}`);\r\n    }\r\n\r\n    // join all the odata functions by a '&'\r\n    return queryTmpArray.join('&');\r\n  }\r\n\r\n  getFilterByColumn(columnName: string): string {\r\n    return (!!this._columnFilters[columnName]) ? this._columnFilters[columnName] : null;\r\n  }\r\n\r\n  getFilterCount(): number {\r\n    return (this._odataOptions.filterQueue) ? this._odataOptions.filterQueue.length : 0;\r\n  }\r\n\r\n  get columnFilters(): any[] {\r\n    return this._columnFilters;\r\n  }\r\n\r\n  get options(): OdataOption {\r\n    return this._odataOptions;\r\n  }\r\n\r\n  set options(options: OdataOption) {\r\n    this._odataOptions = options;\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string) {\r\n    delete this._columnFilters[fieldName];\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: any, searchTerms?: any[]) {\r\n    this._columnFilters[fieldName] = {\r\n      search: searchTerms,\r\n      value\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update the filter by a list of terms usually passed manually by the user as default filters\r\n   * @param filterOptions\r\n   * @returns\r\n   */\r\n  updateFilterFromListTerms(filterOptions: any) {\r\n    // build the filter query\r\n    if (Array.isArray(filterOptions)) {\r\n      filterOptions.forEach((filterOptionObject) => {\r\n        this.updateFilterFromTerm(filterOptionObject);\r\n      });\r\n    } else {\r\n      this.updateFilterFromTerm(filterOptions);\r\n    }\r\n  }\r\n\r\n  updateFilterFromTerm(filterOptions: any) {\r\n    let searchBy = '';\r\n    const tmpSearchByArray = [];\r\n    const fieldName = filterOptions.fieldName;\r\n    const fieldSearchTerms = filterOptions.searchTerms;\r\n    const operator = filterOptions.operator;\r\n\r\n    // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n    if (!!fieldSearchTerms && fieldSearchTerms.length > 0) {\r\n      const tmpSearchTerms = [];\r\n\r\n      if (operator === 'IN') {\r\n        // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n        for (let j = 0, lnj = fieldSearchTerms.length; j < lnj; j++) {\r\n          tmpSearchTerms.push(`${fieldName} eq '${fieldSearchTerms[j]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' or ');\r\n        searchBy = `$(${searchBy})`;\r\n      } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n        // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n        for (let k = 0, lnk = fieldSearchTerms.length; k < lnk; k++) {\r\n          tmpSearchTerms.push(`${fieldName} ne '${fieldSearchTerms[k]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' and ');\r\n        searchBy = `$(${searchBy})`;\r\n      }\r\n    }\r\n\r\n    // push to our temp array and also trim white spaces\r\n    tmpSearchByArray.push(String.trim(searchBy));\r\n\r\n    // add to the filter queue only if it doesn't exist in the queue\r\n    const filter = (tmpSearchByArray.length > 0) ? tmpSearchByArray.join(' and ') : '';\r\n    if (this._odataOptions.filterQueue && this._odataOptions.filterQueue.indexOf(filter) === -1) {\r\n      this._odataOptions.filterQueue.push(filter);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change any OData options that will be used to build the query\r\n   * @param object options\r\n   */\r\n  updateOptions(options: OdataOption) {\r\n    for (const property of Object.keys(options)) {\r\n      if (options.hasOwnProperty(property)) {\r\n        this._odataOptions[property] = options[property]; // replace of the property\r\n      }\r\n\r\n      // we need to keep the defaultSortBy for references whenever the user removes his Sorting\r\n      // then we would revert to the defaultSortBy and the only way is to keep a hard copy here\r\n      if (property === 'orderBy' || property === 'sortBy') {\r\n        let sortBy = options[property];\r\n\r\n        // make sure first char of each orderBy field is capitalize\r\n        if (this._odataOptions.caseType === CaseType.pascalCase) {\r\n          if (Array.isArray(sortBy)) {\r\n            sortBy.forEach((field, index, inputArray) => {\r\n              inputArray[index] = String.titleCase(field);\r\n            });\r\n          } else {\r\n            sortBy = String.titleCase(options[property]);\r\n          }\r\n        }\r\n        this._odataOptions.orderBy = sortBy;\r\n        this._defaultSortBy = sortBy;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
    "import './global-utilities';\nimport { parseUtcDate } from './utilities';\nimport { Injectable } from '@angular/core';\nimport {\n  BackendService,\n  CaseType,\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  ColumnSort,\n  CurrentFilter,\n  CurrentPagination,\n  CurrentSorter,\n  FilterChangedArgs,\n  FieldType,\n  GridOption,\n  OdataOption,\n  Pagination,\n  PaginationChangedArgs,\n  SearchTerm,\n  SortChangedArgs,\n  SortDirection,\n  SortDirectionString\n} from './../models/index';\nimport { OdataService } from './odata.service';\n\nlet timer: any;\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\nconst DEFAULT_ITEMS_PER_PAGE = 25;\nconst DEFAULT_PAGE_SIZE = 20;\n\n@Injectable()\nexport class GridOdataService implements BackendService {\n  private _currentFilters: CurrentFilter[];\n  private _currentPagination: CurrentPagination;\n  private _currentSorters: CurrentSorter[];\n  private _columnDefinitions: Column[];\n  private _grid: any;\n  odataService: OdataService;\n  options: OdataOption;\n  pagination: Pagination | undefined;\n  defaultOptions: OdataOption = {\n    top: DEFAULT_ITEMS_PER_PAGE,\n    orderBy: '',\n    caseType: CaseType.pascalCase\n  };\n\n  constructor() {\n    this.odataService = new OdataService();\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  buildQuery(): string {\n    return this.odataService.buildQuery();\n  }\n\n  init(options: OdataOption, pagination?: Pagination, grid?: any): void {\n    this._grid = grid;\n    const mergedOptions = { ...this.defaultOptions, ...options };\n    if (pagination && pagination.pageSize) {\n      mergedOptions.top = pagination.pageSize;\n    }\n    this.odataService.options = { ...mergedOptions, top: mergedOptions.top || this.defaultOptions.top };\n    this.options = this.odataService.options;\n    this.pagination = pagination;\n\n    // save current pagination as Page 1 and page size as \"top\"\n    this._currentPagination = {\n      pageNumber: 1,\n      pageSize: this.odataService.options.top || this.defaultOptions.top\n    };\n\n    if (grid && grid.getColumns && grid.getOptions) {\n      this._columnDefinitions = grid.getColumns() || options.columnDefinitions;\n      this._columnDefinitions = this._columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\n    }\n  }\n\n  updateOptions(serviceOptions?: OdataOption) {\n    this.options = { ...this.options, ...serviceOptions };\n  }\n\n  removeColumnFilter(fieldName: string): void {\n    this.odataService.removeColumnFilter(fieldName);\n  }\n\n  /** Get the Filters that are currently used by the grid */\n  getCurrentFilters(): CurrentFilter[] {\n    return this._currentFilters;\n  }\n\n  /** Get the Pagination that is currently used by the grid */\n  getCurrentPagination(): CurrentPagination {\n    return this._currentPagination;\n  }\n\n  /** Get the Sorters that are currently used by the grid */\n  getCurrentSorters(): CurrentSorter[] {\n    return this._currentSorters;\n  }\n\n  /*\n   * Reset the pagination options\n   */\n  resetPaginationOptions() {\n    this.odataService.updateOptions({\n      skip: 0\n    });\n  }\n\n  saveColumnFilter(fieldName: string, value: string, terms?: any[]) {\n    this.odataService.saveColumnFilter(fieldName, value, terms);\n  }\n\n  /*\n   * FILTERING\n   */\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\n    const serviceOptions: GridOption = args.grid.getOptions();\n    const backendApi = serviceOptions.backendServiceApi;\n\n    if (backendApi === undefined) {\n      throw new Error('Something went wrong in the GridOdataService, \"backendServiceApi\" is not initialized');\n    }\n\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\n    let debounceTypingDelay = 0;\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\n    }\n\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    this._currentFilters = this.castFilterToColumnFilter(args.columnFilters);\n\n    const promise = new Promise<string>((resolve, reject) => {\n      // reset Pagination, then build the OData query which we will use in the WebAPI callback\n      // wait a minimum user typing inactivity before processing any query\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        // loop through all columns to inspect filters & set the query\n        this.updateFilters(args.columnFilters);\n\n        this.resetPaginationOptions();\n        resolve(this.odataService.buildQuery());\n      }, debounceTypingDelay);\n    });\n\n    return promise;\n  }\n\n  /*\n   * PAGINATION\n   */\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\n    const pageSize = +(args.pageSize || DEFAULT_PAGE_SIZE);\n    this.updatePagination(args.newPage, pageSize);\n\n    // build the OData query which we will use in the WebAPI callback\n    return this.odataService.buildQuery();\n  }\n\n  /*\n   * SORTING\n   */\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\n\n    // loop through all columns to inspect sorters & set the query\n    this.updateSorters(sortColumns);\n\n    // build the OData query which we will use in the WebAPI callback\n    return this.odataService.buildQuery();\n  }\n\n  /**\n   * loop through all columns to inspect filters & update backend service filteringOptions\n   * @param columnFilters\n   */\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset?: boolean) {\n    let searchBy = '';\n    const searchByArray: string[] = [];\n\n    // loop through all columns to inspect filters\n    for (const columnId in columnFilters) {\n      if (columnFilters.hasOwnProperty(columnId)) {\n        const columnFilter = columnFilters[columnId];\n\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\n        let columnDef: Column | undefined;\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\n          columnDef = this._columnDefinitions.find((column: Column) => {\n            return column.id === columnFilter.columnId;\n          });\n        } else {\n          columnDef = columnFilter.columnDef;\n        }\n        if (!columnDef) {\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\n        }\n\n        let fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\n        const fieldType = columnDef.type || 'string';\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\n        if (typeof fieldSearchValue === 'undefined') {\n          fieldSearchValue = '';\n        }\n\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\n          throw new Error(`ODdata filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {model: Filters.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\n        }\n\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n        const operator = columnFilter.operator || ((matches) ? matches[1] : '');\n        let searchValue = (!!matches) ? matches[2] : '';\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n        const bypassOdataQuery = columnFilter.bypassBackendQuery || false;\n\n        // no need to query if search value is empty\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\n          this.removeColumnFilter(fieldName);\n          continue;\n        }\n\n        // escaping the search value\n        searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\n        searchValue = encodeURIComponent(searchValue); // encode URI of the final search value\n\n        // extra query arguments\n        if (bypassOdataQuery) {\n          // push to our temp array and also trim white spaces\n          if (fieldName) {\n            this.saveColumnFilter(fieldName, fieldSearchValue, searchTerms);\n          }\n        } else {\n          searchBy = '';\n\n          // titleCase the fieldName so that it matches the WebApi names\n          if (this.odataService.options.caseType === CaseType.pascalCase) {\n            fieldName = String.titleCase(fieldName || '');\n          }\n\n          // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\n          if (searchTerms && searchTerms.length > 1) {\n            const tmpSearchTerms = [];\n\n            if (operator === 'IN') {\n              // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\n              for (let j = 0, lnj = searchTerms.length; j < lnj; j++) {\n                tmpSearchTerms.push(`${fieldName} eq '${searchTerms[j]}'`);\n              }\n              searchBy = tmpSearchTerms.join(' or ');\n              searchBy = `(${searchBy})`;\n            } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\n              // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\n              for (let k = 0, lnk = searchTerms.length; k < lnk; k++) {\n                tmpSearchTerms.push(`${fieldName} ne '${searchTerms[k]}'`);\n              }\n              searchBy = tmpSearchTerms.join(' and ');\n              searchBy = `(${searchBy})`;\n            }\n          } else if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar !== '') {\n            // first/last character is a '*' will be a startsWith or endsWith\n            searchBy = (operator === '*' || operator === '*z')\n              ? `endswith(${fieldName}, '${searchValue}')`\n              : `startswith(${fieldName}, '${searchValue}')`;\n          } else if (fieldType === FieldType.date) {\n            // date field needs to be UTC and within DateTime function\n            const dateFormatted = parseUtcDate(searchValue, true);\n            if (dateFormatted) {\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} DateTime'${dateFormatted}'`;\n            }\n          } else if (fieldType === FieldType.string) {\n            // string field needs to be in single quotes\n            if (operator === '') {\n              searchBy = `substringof('${searchValue}', ${fieldName})`;\n            } else {\n              // searchBy = `substringof('${searchValue}', ${fieldNameCased}) ${this.mapOdataOperator(operator)} true`;\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} '${searchValue}'`;\n            }\n          } else {\n            // any other field type (or undefined type)\n            searchValue = fieldType === FieldType.number ? searchValue : `'${searchValue}'`;\n            searchBy = `${fieldName} ${this.mapOdataOperator(operator)} ${searchValue}`;\n          }\n\n          // push to our temp array and also trim white spaces\n          if (searchBy !== '') {\n            searchByArray.push(String.trim(searchBy));\n            this.saveColumnFilter(fieldName || '', fieldSearchValue, searchTerms);\n          }\n        }\n      }\n    }\n\n    // update the service options with filters for the buildQuery() to work later\n    this.odataService.updateOptions({\n      filter: (searchByArray.length > 0) ? searchByArray.join(' and ') : '',\n      skip: undefined\n    });\n  }\n\n  /**\n   * Update the pagination component with it's new page number and size\n   * @param newPage\n   * @param pageSize\n   */\n  updatePagination(newPage: number, pageSize: number) {\n    this._currentPagination = {\n      pageNumber: newPage,\n      pageSize\n    };\n\n    this.odataService.updateOptions({\n      top: pageSize,\n      skip: (newPage - 1) * pageSize\n    });\n  }\n\n  /**\n   * loop through all columns to inspect sorters & update backend service orderBy\n   * @param columnFilters\n   */\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\n    let sortByArray: any[] = [];\n    const sorterArray: CurrentSorter[] = [];\n\n    if (!sortColumns && presetSorters) {\n      // make the presets the current sorters, also make sure that all direction are in lowercase for OData\n      sortByArray = presetSorters;\n      sortByArray.forEach((sorter) => sorter.direction = sorter.direction.toLowerCase() as SortDirectionString);\n\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\n      const tmpSorterArray = sortByArray.map((sorter) => {\n        sorterArray.push({\n          columnId: sorter.columnId + '',\n          direction: sorter.direction\n        });\n        return {\n          columnId: sorter.columnId,\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\n        };\n      });\n      this._grid.setSortColumns(tmpSorterArray);\n    } else if (sortColumns && !presetSorters) {\n      // build the SortBy string, it could be multisort, example: customerNo asc, purchaserName desc\n      if (sortColumns && sortColumns.length === 0) {\n        sortByArray = new Array(this.defaultOptions.orderBy); // when empty, use the default sort\n      } else {\n        if (sortColumns) {\n          for (const column of sortColumns) {\n            if (column.sortCol) {\n              let fieldName = (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '';\n              let columnFieldName = (column.sortCol.field || column.sortCol.id) + '';\n              if (this.odataService.options.caseType === CaseType.pascalCase) {\n                fieldName = String.titleCase(fieldName);\n                columnFieldName = String.titleCase(columnFieldName);\n              }\n\n              sorterArray.push({\n                columnId: columnFieldName,\n                direction: column.sortAsc ? 'asc' : 'desc'\n              });\n            }\n          }\n          sortByArray = sorterArray;\n        }\n      }\n    }\n\n    // transform the sortby array into a CSV string for OData\n    sortByArray = sortByArray as CurrentSorter[];\n    const csvString = sortByArray.map((sorter) => `${sorter.columnId} ${sorter.direction.toLowerCase()}`).join(',');\n    this.odataService.updateOptions({\n      orderBy: (this.odataService.options.caseType === CaseType.pascalCase) ? String.titleCase(csvString) : csvString\n    });\n\n    // keep current Sorters and update the service options with the new sorting\n    this._currentSorters = sortByArray as CurrentSorter[];\n\n    // build the OData query which we will use in the WebAPI callback\n    return this.odataService.buildQuery();\n  }\n\n  //\n  // private functions\n  // -------------------\n  /**\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\n   * @param columnFilters\n   */\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    const filtersArray: ColumnFilter[] = ((typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters) as CurrentFilter[];\n\n    return filtersArray.map((filter) => {\n      const columnDef = filter.columnDef;\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\n      if (filter.operator) {\n        tmpFilter.operator = filter.operator;\n      }\n      if (Array.isArray(filter.searchTerms)) {\n        tmpFilter.searchTerms = filter.searchTerms;\n      }\n      return tmpFilter;\n    });\n  }\n\n  /**\n   * Mapper for mathematical operators (ex.: <= is \"le\", > is \"gt\")\n   * @param string operator\n   * @returns string map\n   */\n  private mapOdataOperator(operator: string) {\n    let map = '';\n    switch (operator) {\n      case '<':\n        map = 'lt';\n        break;\n      case '<=':\n        map = 'le';\n        break;\n      case '>':\n        map = 'gt';\n        break;\n      case '>=':\n        map = 'ge';\n        break;\n      case '<>':\n      case '!=':\n        map = 'ne';\n        break;\n      case '=':\n      case '==':\n      default:\n        map = 'eq';\n        break;\n    }\n\n    return map;\n  }\n}\n",
    "import { OnEventArgs, CellArgs, GridOption } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GridEventService {\n  private _eventHandler: any = new Slick.EventHandler();\n\n  /* OnCellChange Event */\n  attachOnCellChange(grid: any, dataView: any) {\n    // subscribe to this Slickgrid event of onCellChange\n    this._eventHandler.subscribe(grid.onCellChange, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellChange property (a callback function), then run it\n      if (typeof column.onCellChange === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onCellChange\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellChanges.... function\n        column.onCellChange(e, returnedArgs);\n      }\n    });\n  }\n  /* OnClick Event */\n  attachOnClick(grid: any, dataView: any) {\n    this._eventHandler.subscribe(grid.onClick, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellClick property (a callback function), then run it\n      if (typeof column.onCellClick === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onClick\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellClick.... function\n        column.onCellClick(e, returnedArgs);\n      }\n    });\n  }\n\n  dispose() {\n    this._eventHandler.unsubscribeAll();\n  }\n}\n",
    "import {\r\n  Column,\r\n  CurrentColumn,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  GridOption,\r\n  GridState,\r\n  GridStateChange,\r\n  GridStateType\r\n} from './../models/index';\r\nimport { ControlAndPluginService, FilterService, SortService } from './../services/index';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\ndeclare var Slick: any;\r\n\r\nexport class GridStateService {\r\n  private _eventHandler = new Slick.EventHandler();\r\n  private _columns: Column[] = [];\r\n  private _currentColumns: CurrentColumn[] = [];\r\n  private _grid: any;\r\n  private controlAndPluginService: ControlAndPluginService;\r\n  private filterService: FilterService;\r\n  private sortService: SortService;\r\n  private subscriptions: Subscription[] = [];\r\n  onGridStateChanged = new Subject<GridStateChange>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Export Service\r\n   * @param grid\r\n   * @param filterService\r\n   * @param sortService\r\n   * @param dataView\r\n   */\r\n  init(grid: any, controlAndPluginService: ControlAndPluginService, filterService: FilterService, sortService: SortService): void {\r\n    this._grid = grid;\r\n    this.controlAndPluginService = controlAndPluginService;\r\n    this.filterService = filterService;\r\n    this.sortService = sortService;\r\n\r\n    this.subscribeToAllGridChanges(grid);\r\n  }\r\n\r\n  /** Dispose of all the SlickGrid & Aurelia subscriptions */\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    // also unsubscribe all Aurelia Subscriptions\r\n    this.subscriptions.forEach((subscription: Subscription) => {\r\n      if (subscription && subscription.unsubscribe) {\r\n        subscription.unsubscribe();\r\n      }\r\n    });\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  /**\r\n   * Get the current grid state (filters/sorters/pagination)\r\n   * @return grid state\r\n   */\r\n  getCurrentGridState(): GridState {\r\n    const gridState: GridState = {\r\n      columns: this.getCurrentColumns(),\r\n      filters: this.getCurrentFilters(),\r\n      sorters: this.getCurrentSorters()\r\n    };\r\n\r\n    const currentPagination = this.getCurrentPagination();\r\n    if (currentPagination) {\r\n      gridState.pagination = currentPagination;\r\n    }\r\n    return gridState;\r\n  }\r\n\r\n  /**\r\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\r\n   * @return current columns\r\n   */\r\n  getColumns(): Column[] {\r\n    return this._columns || this._grid.getColumns();\r\n  }\r\n\r\n  /**\r\n   * From an array of Grid Column Definitions, get the associated Current Columns\r\n   * @param gridColumns\r\n   */\r\n  getAssociatedCurrentColumns(gridColumns: Column[]): CurrentColumn[] {\r\n    const currentColumns: CurrentColumn[] = [];\r\n\r\n    if (gridColumns && Array.isArray(gridColumns)) {\r\n      gridColumns.forEach((column: Column, index: number) => {\r\n        if (column && column.id) {\r\n          currentColumns.push({\r\n            columnId: column.id as string,\r\n            cssClass: column.cssClass || '',\r\n            headerCssClass: column.headerCssClass || '',\r\n            width: column.width || 0\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this._currentColumns = currentColumns;\r\n    return currentColumns;\r\n  }\r\n\r\n  /**\r\n   * From an array of Current Columns, get the associated Grid Column Definitions\r\n   * @param grid\r\n   * @param currentColumns\r\n   */\r\n  getAssociatedGridColumns(grid: any, currentColumns: CurrentColumn[]): Column[] {\r\n    const columns: Column[] = [];\r\n    const gridColumns: Column[] = grid.getColumns();\r\n\r\n    if (currentColumns && Array.isArray(currentColumns)) {\r\n      currentColumns.forEach((currentColumn: CurrentColumn, index: number) => {\r\n        const gridColumn: Column = gridColumns.find((c: Column) => c.id === currentColumn.columnId);\r\n        if (gridColumn && gridColumn.id) {\r\n          columns.push({\r\n            ...gridColumn,\r\n            cssClass: currentColumn.cssClass,\r\n            headerCssClass: currentColumn.headerCssClass,\r\n            width: currentColumn.width\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this._columns = columns;\r\n    return columns;\r\n  }\r\n\r\n  /**\r\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\r\n   * @return current columns\r\n   */\r\n  getCurrentColumns(): CurrentColumn[] {\r\n    let currentColumns: CurrentColumn[] = [];\r\n    if (this._currentColumns && Array.isArray(this._currentColumns) && this._currentColumns.length > 0) {\r\n      currentColumns = this._currentColumns;\r\n    } else {\r\n      currentColumns = this.getAssociatedCurrentColumns(this._grid.getColumns());\r\n    }\r\n\r\n    return currentColumns;\r\n  }\r\n\r\n  /**\r\n   * Get the Filters (and their state, columnId, searchTerm(s)) that are currently applied in the grid\r\n   * @return current filters\r\n   */\r\n  getCurrentFilters(): CurrentFilter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentFilters) {\r\n        return backendService.getCurrentFilters() as CurrentFilter[];\r\n      }\r\n    } else if (this.filterService && this.filterService.getCurrentLocalFilters) {\r\n      return this.filterService.getCurrentLocalFilters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get current Pagination (and it's state, pageNumber, pageSize) that are currently applied in the grid\r\n   * @return current pagination state\r\n   */\r\n  getCurrentPagination(): CurrentPagination | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentPagination) {\r\n        return backendService.getCurrentPagination();\r\n      }\r\n    } else {\r\n      // TODO implement this whenever local pagination gets implemented\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get the current Sorters (and their state, columnId, direction) that are currently applied in the grid\r\n   * @return current sorters\r\n   */\r\n  getCurrentSorters(): CurrentSorter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        return backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n    } else if (this.sortService && this.sortService.getCurrentLocalSorters) {\r\n      return this.sortService.getCurrentLocalSorters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Hook a SlickGrid Extension Event to a Grid State change event\r\n   * @param extension name\r\n   * @param grid\r\n   */\r\n  hookExtensionEventToGridStateChange(extensionName: string, eventName: string) {\r\n    const extension = this.controlAndPluginService && this.controlAndPluginService.getExtensionByName(extensionName);\r\n\r\n    if (extension && extension.service && extension.service[eventName] && extension.service[eventName].subscribe) {\r\n      this._eventHandler.subscribe(extension.service[eventName], (e: Event, args: any) => {\r\n        const columns: Column[] = args && args.columns;\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hook a Grid Event to a Grid State change event\r\n   * @param event name\r\n   * @param grid\r\n   */\r\n  hookSlickGridEventToGridStateChange(eventName: string, grid: any) {\r\n    if (grid && grid[eventName] && grid[eventName].subscribe) {\r\n      this._eventHandler.subscribe(grid[eventName], (e: Event, args: any) => {\r\n        const columns: Column[] = grid.getColumns();\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      });\r\n    }\r\n  }\r\n\r\n  resetColumns(columnDefinitions?: Column[]) {\r\n    const columns: Column[] = columnDefinitions || this._columns;\r\n    const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n    this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n  }\r\n\r\n  /**\r\n   * Subscribe to all necessary SlickGrid or Service Events that deals with a Grid change,\r\n   * when triggered, we will publish a Grid State Event with current Grid State\r\n   */\r\n  subscribeToAllGridChanges(grid: any) {\r\n    // Subscribe to Event Emitter of Filter changed\r\n    this.subscriptions.push(\r\n      this.filterService.onFilterChanged.subscribe((currentFilters: CurrentFilter[]) => {\r\n        this.onGridStateChanged.next({ change: { newValues: currentFilters, type: GridStateType.filter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n    // Subscribe to Event Emitter of Filter cleared\r\n      this.subscriptions.push(\r\n        this.filterService.onFilterCleared.subscribe(() => {\r\n          this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.filter }, gridState: this.getCurrentGridState() });\r\n        })\r\n      );\r\n\r\n    // Subscribe to Event Emitter of Sort changed\r\n    this.subscriptions.push(\r\n      this.sortService.onSortChanged.subscribe((currentSorters: CurrentSorter[]) => {\r\n        this.onGridStateChanged.next({ change: { newValues: currentSorters, type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to Event Emitter of Sort cleared\r\n    this.subscriptions.push(\r\n      this.sortService.onSortCleared.subscribe(() => {\r\n        this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to ColumnPicker and/or GridMenu for show/hide Columns visibility changes\r\n    this.hookExtensionEventToGridStateChange('ColumnPicker', 'onColumnsChanged');\r\n    this.hookExtensionEventToGridStateChange('GridMenu', 'onColumnsChanged');\r\n\r\n    // subscribe to Column Resize & Reordering\r\n    this.hookSlickGridEventToGridStateChange('onColumnsReordered', grid);\r\n    this.hookSlickGridEventToGridStateChange('onColumnsResized', grid);\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport { Injectable } from '@angular/core';\nimport { CellArgs, Column, GridOption, OnEventArgs } from './../models/index';\nimport { ControlAndPluginService } from './controlAndPlugin.service';\nimport { FilterService } from './filter.service';\nimport { GridStateService } from './gridState.service';\nimport { SortService } from './sort.service';\n\n// using external non-typed js libraries\ndeclare var $: any;\ndeclare var Slick: any;\n\n@Injectable()\nexport class GridService {\n  private _grid: any;\n  private _dataView: any;\n\n  constructor(private controlAndPluginService: ControlAndPluginService, private filterService: FilterService, private gridStateService: GridStateService, private sortService: SortService, private translate: TranslateService) { }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  init(grid: any, dataView: any): void {\n    this._grid = grid;\n    this._dataView = dataView;\n  }\n\n  /**\n   * From a SlickGrid Event triggered get the Column Definition and Item Data Context\n   *\n   * For example the SlickGrid onClick will return cell arguments when subscribing to it.\n   * From these cellArgs, we want to get the Column Definition and Item Data\n   * @param cell event args\n   * @return object with columnDef and dataContext\n   */\n  getColumnFromEventArguments(args: CellArgs): OnEventArgs {\n    if (!args || !args.grid || !args.grid.getColumns || !args.grid.getDataItem) {\n      throw new Error('To get the column definition and data, we need to have these arguments passed as objects (row, cell, grid)');\n    }\n\n    return {\n      row: args.row,\n      cell: args.cell,\n      columnDef: args.grid.getColumns()[args.cell],\n      dataContext: args.grid.getDataItem(args.row),\n      dataView: this._dataView,\n      grid: this._grid,\n      gridDefinition: this._gridOptions\n    };\n  }\n\n  getDataItemByRowNumber(rowNumber: number) {\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\n      throw new Error('We could not find SlickGrid Grid object');\n    }\n    return this._grid.getDataItem(rowNumber);\n  }\n\n  /** Chain the item Metadata with our implementation of Metadata at given row index */\n  getItemRowMetadata(previousItemMetadata: any) {\n    return (rowNumber: number) => {\n      const item = this._dataView.getItem(rowNumber);\n      let meta = {\n        cssClasses: ''\n      };\n      if (typeof previousItemMetadata === 'object' && !$.isEmptyObject(previousItemMetadata)) {\n        meta = previousItemMetadata(rowNumber);\n      }\n\n      if (item && item._dirty) {\n        meta.cssClasses = (meta.cssClasses || '') + ' dirty';\n      }\n      if (item && item.rowClass) {\n        meta.cssClasses += ` ${item.rowClass}`;\n        meta.cssClasses += ` row${rowNumber}`;\n      }\n\n      return meta;\n    };\n  }\n\n  /**\n   * Highlight then fade a row for x seconds.\n   * The implementation follows this SO answer: https://stackoverflow.com/a/19985148/1212166\n   * @param rowNumber\n   * @param fadeDelay\n   */\n  highlightRow(rowNumber: number, fadeDelay: number = 1500) {\n    // create a SelectionModel if there's not one yet\n    if (!this._grid.getSelectionModel()) {\n      const rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n      this._grid.setSelectionModel(rowSelectionPlugin);\n    }\n\n    this._grid.setSelectedRows([rowNumber]);\n    this._dataView.getItemMetadata = this.getItemRowMetadata(this._dataView.getItemMetadata);\n\n    const item = this._dataView.getItem(rowNumber);\n    if (item && item.id) {\n      item.rowClass = 'highlight';\n      this._dataView.updateItem(item.id, item);\n      const gridOptions = this._grid.getOptions() as GridOption;\n\n      // highlight the row for a user defined timeout\n      $(`#${gridOptions.gridId}`)\n          .find(`.highlight.row${rowNumber}`)\n          .first();\n\n      // delete the row's CSS that was attached for highlighting\n      setTimeout(() => {\n        if (item && item.id) {\n          delete item.rowClass;\n          const gridIdx = this._dataView.getIdxById(item.id);\n          if (gridIdx !== undefined) {\n            this._dataView.updateItem(item.id, item);\n          }\n        }\n      }, fadeDelay + 10);\n    }\n  }\n\n  /** Get the currently selected rows */\n  getSelectedRows() {\n    return this._grid.getSelectedRows();\n  }\n\n  /** Select the selected row by a row index */\n  setSelectedRow(rowIndex: number) {\n    this._grid.setSelectedRows([rowIndex]);\n  }\n\n  /** Set selected rows with provided array of row indexes */\n  setSelectedRows(rowIndexes: number[]) {\n    this._grid.setSelectedRows(rowIndexes);\n  }\n\n  /** Re-Render the Grid */\n  renderGrid() {\n    if (this._grid && typeof this._grid.invalidate === 'function') {\n      this._grid.invalidate();\n      this._grid.render();\n    }\n  }\n\n  /**\n   * Reset the grid to it's original state (clear any filters, sorting & pagination if exists) .\n   * The column definitions could be passed as argument to reset (this can be used after a Grid State reset)\n   * The reset will clear the Filters & Sort, then will reset the Columns to their original state\n   */\n  resetGrid(columnDefinitions?: Column[]) {\n    // reset columns to original states & refresh the grid\n    if (this._grid && this._dataView) {\n      const originalColumns = this.controlAndPluginService.getAllColumns();\n      // const originalColumns = columnDefinitions || this._columnDefinitions;\n      if (Array.isArray(originalColumns) && originalColumns.length > 0) {\n        // set the grid columns to it's original column definitions\n        this._grid.setColumns(originalColumns);\n        this._dataView.refresh();\n        this._grid.autosizeColumns();\n        this.gridStateService.resetColumns(columnDefinitions);\n      }\n    }\n    if (this.filterService && this.filterService.clearFilters) {\n      this.filterService.clearFilters();\n    }\n    if (this.sortService && this.sortService.clearSorting) {\n      this.sortService.clearSorting();\n    }\n  }\n\n  /**\n   * Add an item (data item) to the datagrid\n   * @param object dataItem: item object holding all properties of that row\n   */\n  addItemToDatagrid(item) {\n    if (!this._grid || !this._gridOptions || !this._dataView) {\n      throw new Error('We could not find SlickGrid Grid, DataView objects');\n    }\n    if (!this._gridOptions || (!this._gridOptions.enableCheckboxSelector && !this._gridOptions.enableRowSelection)) {\n      throw new Error('addItemToDatagrid() requires to have a valid Slickgrid Selection Model. You can overcome this issue by enabling enableCheckboxSelector or enableRowSelection to True');\n    }\n\n    const row = 0;\n    this._dataView.insertItem(row, item);\n    this._grid.scrollRowIntoView(0); // scroll to row 0\n    this.highlightRow(0, 1500);\n\n    // refresh dataview & grid\n    this._dataView.refresh();\n  }\n\n  /**\n   * Delete an existing item from the datagrid (dataView)\n   * @param object item: item object holding all properties of that row\n   */\n  deleteDataGridItem(item: any) {\n    if (!item || !item.hasOwnProperty('id')) {\n      throw new Error(`deleteDataGridItem() requires an item object which includes the \"id\" property`);\n    }\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\n    this.deleteDataGridItemById(itemId);\n  }\n\n  /**\n   * Delete an existing item from the datagrid (dataView) by it's id\n   * @param itemId: item unique id\n   */\n  deleteDataGridItemById(itemId: string | number) {\n    if (itemId === undefined) {\n      throw new Error(`Cannot delete a row without a valid \"id\"`);\n    }\n    if (this._dataView.getRowById(itemId) === undefined) {\n      throw new Error(`Could not find the item in the grid by it's associated \"id\"`);\n    }\n\n    // delete the item from the dataView\n    this._dataView.deleteItem(itemId);\n    this._dataView.refresh();\n  }\n\n  /**\n   * Update an existing item with new properties inside the datagrid\n   * @param object item: item object holding all properties of that row\n   */\n  updateDataGridItem(item: any) {\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\n\n    if (itemId === undefined) {\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\n    }\n\n    this.updateDataGridItemById(itemId, item);\n  }\n\n  /**\n   * Update an existing item in the datagrid by it's id and new properties\n   * @param itemId: item unique id\n   * @param object item: item object holding all properties of that row\n   */\n  updateDataGridItemById(itemId: number | string, item: any) {\n    if (itemId === undefined) {\n      throw new Error(`Cannot update a row without a valid \"id\"`);\n    }\n    const row = this._dataView.getRowById(itemId);\n\n    if (!item || row === undefined) {\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\n    }\n\n    const gridIdx = this._dataView.getIdxById(itemId);\n    if (gridIdx !== undefined) {\n      // Update the item itself inside the dataView\n      this._dataView.updateItem(itemId, item);\n\n      // highlight the row we just updated\n      this.highlightRow(row, 1500);\n\n      // refresh dataview & grid\n      this._dataView.refresh();\n    }\n  }\n}\n",
    "\nimport {\n  Column,\n  GridOption\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare let $: any;\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GroupingAndColspanService {\n  private _eventHandler = new Slick.EventHandler();\n  private _dataView: any;\n  private _grid: any;\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any, dataView: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n\n    if (grid && this._gridOptions) {\n      // When dealing with Pre-Header Grouping colspan, we need to re-create the pre-header in multiple occasions\n      // for all these occasions, we have to trigger a re-create\n      if (this._gridOptions.createPreHeaderPanel) {\n        this._eventHandler.subscribe(grid.onSort, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(grid.onColumnsResized, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(dataView.onRowCountChanged, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n\n        // also not sure why at this point, but it seems that I need to call the 1st create in a delayed execution\n        // probably some kind of timing issues and delaying it until the grid is fully ready does help\n        setTimeout(() => {\n          this.createPreHeaderRowGroupingTitle();\n        }, 50);\n      }\n    }\n  }\n\n  dispose() {\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n  }\n\n  createPreHeaderRowGroupingTitle() {\n    const $preHeaderPanel = $(this._grid.getPreHeaderPanel())\n      .empty()\n      .addClass('slick-header-columns')\n      .css('left', '-1000px')\n      .width(this._grid.getHeadersWidth());\n    $preHeaderPanel.parent().addClass('slick-header');\n    const headerColumnWidthDiff = this._grid.getHeaderColumnWidthDiff();\n    let m;\n    let header;\n    let lastColumnGroup = '';\n    let widthTotal = 0;\n\n    for (let i = 0; i < this._columnDefinitions.length; i++) {\n      m = this._columnDefinitions[i];\n      if (lastColumnGroup === m.columnGroup && i > 0) {\n        widthTotal += m.width;\n        header.width(widthTotal - headerColumnWidthDiff);\n      } else {\n        widthTotal = m.width;\n        header = $(`<div class=\"ui-state-default slick-header-column\" />`)\n          .html(`<span class=\"slick-column-name\">${m.columnGroup || ''}</span>`)\n          .width(m.width - headerColumnWidthDiff)\n          .appendTo($preHeaderPanel);\n      }\n      lastColumnGroup = m.columnGroup;\n    }\n  }\n}\n",
    "import { Column, GridOption } from './../models/index';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n// global constants, height/width are in pixels\r\nconst DATAGRID_MIN_HEIGHT = 180;\r\nconst DATAGRID_MIN_WIDTH = 300;\r\nconst DATAGRID_BOTTOM_PADDING = 20;\r\nconst DATAGRID_PAGINATION_HEIGHT = 35;\r\nlet timer: any;\r\n\r\nexport interface GridDimension {\r\n  height: number;\r\n  width: number;\r\n  heightWithPagination?: number;\r\n}\r\n\r\nexport class ResizerService {\r\n  private _grid: any;\r\n  private _lastDimensions: GridDimension;\r\n  onGridBeforeResize = new Subject<boolean>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  private get _gridUid(): string {\r\n    return (this._grid && this._grid.getUID) ? this._grid.getUID() : this._gridOptions.gridId;\r\n  }\r\n\r\n  init(grid: any): void {\r\n    this._grid = grid;\r\n  }\r\n\r\n  /** Attach an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space\r\n   * Options: we could also provide a % factor to resize on each height/width independently\r\n   */\r\n  attachAutoResizeDataGrid(newSizes?: GridDimension) {\r\n    // if we can't find the grid to resize, return without attaching anything\r\n    const gridDomElm = $(`#${this._gridOptions && this._gridOptions.gridId ? this._gridOptions.gridId : 'grid1'}`);\r\n    if (gridDomElm === undefined || gridDomElm.offset() === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // -- 1st resize the datagrid size at first load (we need this because the .on event is not triggered on first load)\r\n    this.resizeGrid(0, newSizes);\r\n\r\n    // -- 2nd attach a trigger on the Window DOM element, so that it happens also when resizing after first load\r\n    // -- attach auto-resize to Window object only if it exist\r\n    $(window).on(`resize.grid.${this._gridUid}`, () => {\r\n      this.onGridBeforeResize.next(true);\r\n      // for some yet unknown reason, calling the resize twice removes any stuttering/flickering when changing the height and makes it much smoother\r\n      this.resizeGrid(0, newSizes);\r\n      this.resizeGrid(0, newSizes);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation\r\n   * object gridOptions\r\n   */\r\n  calculateGridNewDimensions(gridOptions: GridOption): any {\r\n    const gridDomElm = $(`#${gridOptions.gridId}`);\r\n    const containerElm = (gridOptions.autoResize && gridOptions.autoResize.containerId) ? $(`#${gridOptions.autoResize.containerId}`) : $(`#${gridOptions.gridContainerId}`);\r\n    const windowElm = $(window);\r\n    if (windowElm === undefined || containerElm === undefined || gridDomElm === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // calculate bottom padding\r\n    // if using pagination, we need to add the pagination height to this bottom padding\r\n    let bottomPadding = (gridOptions.autoResize && gridOptions.autoResize.bottomPadding) ? gridOptions.autoResize.bottomPadding : DATAGRID_BOTTOM_PADDING;\r\n    if (bottomPadding && (gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\r\n      bottomPadding += DATAGRID_PAGINATION_HEIGHT;\r\n    }\r\n\r\n    const gridHeight = windowElm.height() || 0;\r\n    const coordOffsetTop = gridDomElm.offset();\r\n    const gridOffsetTop = (coordOffsetTop !== undefined) ? coordOffsetTop.top : 0;\r\n    const availableHeight = gridHeight - gridOffsetTop - bottomPadding;\r\n    const availableWidth = containerElm.width() || 0;\r\n    const minHeight = (gridOptions.autoResize && gridOptions.autoResize.minHeight < 0) ? gridOptions.autoResize.minHeight : DATAGRID_MIN_HEIGHT;\r\n    const minWidth = (gridOptions.autoResize && gridOptions.autoResize.minWidth < 0) ? gridOptions.autoResize.minWidth : DATAGRID_MIN_WIDTH;\r\n\r\n    let newHeight = availableHeight;\r\n    let newWidth = (gridOptions.autoResize && gridOptions.autoResize.sidePadding) ? availableWidth - gridOptions.autoResize.sidePadding : availableWidth;\r\n    if (newHeight < minHeight) {\r\n      newHeight = minHeight;\r\n    }\r\n    if (newWidth < minWidth) {\r\n      newWidth = minWidth;\r\n    }\r\n\r\n    return {\r\n      height: newHeight,\r\n      width: newWidth\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Dispose function when element is destroyed\r\n   */\r\n  dispose() {\r\n    $(window).off(`resize.grid.${this._gridUid}`);\r\n  }\r\n\r\n  getLastResizeDimensions(): GridDimension {\r\n    return this._lastDimensions;\r\n  }\r\n\r\n  /** Resize the datagrid to fit the browser height & width */\r\n  resizeGrid(delay?: number, newSizes?: GridDimension): void {\r\n    if (!this._grid || !this._gridOptions) {\r\n      throw new Error(`\r\n      Angular-Slickgrid resizer requires a valid Grid object and Grid Options defined.\r\n      You can fix this by setting your gridOption to use \"enableAutoResize\" or create an instance of the ResizerService by calling attachAutoResizeDataGrid()`);\r\n    }\r\n\r\n    // because of the javascript async nature, we might want to delay the resize a little bit\r\n    delay = delay || 0;\r\n\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      // calculate the available sizes with minimum height defined as a constant\r\n      const availableDimensions = this.calculateGridNewDimensions(this._gridOptions);\r\n      const gridElm = $(`#${this._gridOptions.gridId}`) || {};\r\n      const gridContainerElm = $(`#${this._gridOptions.gridContainerId}`) || {};\r\n\r\n      if ((newSizes || availableDimensions) && gridElm.length > 0) {\r\n        // get the new sizes, if new sizes are passed (not 0), we will use them else use available space\r\n        // basically if user passes 1 of the dimension, let say he passes just the height,\r\n        // we will use the height as a fixed height but the width will be resized by it's available space\r\n        const newHeight = (newSizes && newSizes.height) ? newSizes.height : availableDimensions.height;\r\n        const newWidth = (newSizes && newSizes.width) ? newSizes.width : availableDimensions.width;\r\n\r\n        // apply these new height/width to the datagrid\r\n        gridElm.height(newHeight);\r\n        gridElm.width(newWidth);\r\n        gridContainerElm.height(newHeight);\r\n        gridContainerElm.width(newWidth);\r\n\r\n        // keep last resized dimensions\r\n        this._lastDimensions = {\r\n          height: newHeight,\r\n          width: newWidth\r\n        };\r\n        if ((this._gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\r\n          this._lastDimensions.heightWithPagination = newHeight + DATAGRID_PAGINATION_HEIGHT;\r\n        }\r\n\r\n        // resize the slickgrid canvas on all browser except some IE versions\r\n        // exclude all IE below IE11\r\n        // IE11 wants to be a better standard (W3C) follower (finally) they even changed their appName output to also have 'Netscape'\r\n        if (new RegExp('MSIE [6-8]').exec(navigator.userAgent) === null && this._grid) {\r\n          this._grid.resizeCanvas();\r\n        }\r\n\r\n        // also call the grid auto-size columns so that it takes available when going bigger\r\n        this._grid.autosizeColumns();\r\n      }\r\n    }, delay);\r\n  }\r\n}\r\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class AvgAggregator implements Aggregator {\n  private _count: number;\n  private _nonNullCount: number;\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._count = 0;\n    this._nonNullCount = 0;\n    this._sum = 0;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    this._count++;\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._nonNullCount++;\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.avg) {\n      groupTotals.avg = {};\n    }\n    if (this._nonNullCount !== 0) {\n      groupTotals.avg[this._field] = this._sum / this._nonNullCount;\n    }\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MinAggregator implements Aggregator {\n  private _min: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._min = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._min == null || val < this._min) {\n        this._min = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.min) {\n      groupTotals.min = {};\n    }\n    groupTotals.min[this._field] = this._min;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MaxAggregator implements Aggregator {\n  private _max: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._max = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._max == null || val > this._max) {\n        this._max = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.max) {\n      groupTotals.max = {};\n    }\n    groupTotals.max[this._field] = this._max;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class SumAggregator implements Aggregator {\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._sum = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.sum) {\n      groupTotals.sum = {};\n    }\n    groupTotals.sum[this._field] = this._sum;\n  }\n}\n",
    "import { AvgAggregator } from './avgAggregator';\nimport { MinAggregator } from './minAggregator';\nimport { MaxAggregator } from './maxAggregator';\nimport { SumAggregator } from './sumAggregator';\n\n/** Provides a list of different Aggregators for the Group Formatter */\nexport const Aggregators = {\n  Avg: AvgAggregator,\n  Min: MinAggregator,\n  Max: MaxAggregator,\n  Sum: SumAggregator\n};\n",
    "import { Column, Editor, EditorValidator, EditorValidatorOutput } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class CheckboxEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: boolean;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"checkbox\" value=\"true\" class=\"editor-checkbox\" />`);\r\n    this.$input.appendTo(this.args.container);\r\n    this.$input.focus();\r\n  }\r\n\r\n  destroy(): void {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus(): void {\r\n    this.$input.focus();\r\n  }\r\n\r\n  hide() {\r\n    this.$input.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$input.show();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = !!item[this.columnDef.field];\r\n    if (this.defaultValue) {\r\n      this.$input.prop('checked', true);\r\n    } else {\r\n      this.$input.prop('checked', false);\r\n    }\r\n  }\r\n\r\n  preClick() {\r\n    this.$input.prop('checked', !this.$input.prop('checked'));\r\n  }\r\n\r\n  serializeValue(): boolean {\r\n    return this.$input.prop('checked');\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (this.serializeValue() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, FieldType, GridOption } from './../models/index';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a date picker editor using Flatpickr\r\n * https://chmln.github.io/flatpickr\r\n */\r\nexport class DateEditor implements Editor {\r\n  $input: any;\r\n  flatInstance: any;\r\n  defaultDate: string;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    if (this.args && this.args.column) {\r\n      const gridOptions = this.args.grid.getOptions() as GridOption;\r\n      this.defaultDate = (this.args.item) ? this.args.item[this.args.column.field] : null;\r\n      const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\r\n      const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || FieldType.dateUtc);\r\n      let currentLocale = this.getCurrentLocale(this.columnDef, gridOptions);\r\n      if (currentLocale.length > 2) {\r\n        currentLocale = currentLocale.substring(0, 2);\r\n      }\r\n\r\n      const pickerOptions: any = {\r\n        defaultDate: this.defaultDate,\r\n        altInput: true,\r\n        altFormat: inputFormat,\r\n        dateFormat: outputFormat,\r\n        closeOnSelect: false,\r\n        locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n        onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n          this.save();\r\n        },\r\n      };\r\n\r\n\r\n      this.$input = $(`<input type=\"text\" data-defaultDate=\"${this.defaultDate}\" class=\"editor-text flatpickr\" />`);\r\n      this.$input.appendTo(this.args.container);\r\n      this.flatInstance = (this.$input[0] && typeof this.$input[0].flatpickr === 'function') ? this.$input[0].flatpickr(pickerOptions) : null;\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  getCurrentLocale(columnDef: Column, gridOptions: GridOption) {\r\n    const options = gridOptions || columnDef.params || {};\r\n    if (options.i18n && options.i18n instanceof TranslateService) {\r\n      return options.i18n.currentLang;\r\n    }\r\n\r\n    return 'en';\r\n  }\r\n\r\n  loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  destroy() {\r\n    this.hide();\r\n    // this.flatInstance.destroy();\r\n    this.$input.remove();\r\n  }\r\n\r\n  show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultDate = item[this.args.column.field];\r\n    this.flatInstance.setDate(item[this.args.column.field]);\r\n  }\r\n\r\n  serializeValue() {\r\n    const domValue: string = this.$input.val();\r\n\r\n    if (!domValue) {\r\n      return '';\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n    const value = moment(domValue).format(outputFormat);\r\n\r\n    return value;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    if (!state) {\r\n      return;\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n    item[this.args.column.field] = moment(state, outputFormat).toDate();\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultDate == null)) && (this.$input.val() !== this.defaultDate);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Constants } from '../constants';\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst defaultDecimalPlaces = 0;\n\n/*\n * An example of a 'detached' editor.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class FloatEditor implements Editor {\n  $input: any;\n  defaultValue: any;\n\n  constructor(private args: any) {\n    this.init();\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args && this.args.column || {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): any {\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\n  }\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator {\n    return this.columnEditor.validator || this.columnDef.validator;\n  }\n\n  init(): void {\n    this.$input = $(`<input type=\"number\" class=\"editor-text\" step=\"${this.getInputDecimalSteps()}\" />`)\n      .appendTo(this.args.container)\n      .on('keydown.nav', (e) => {\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\n          e.stopImmediatePropagation();\n        }\n      });\n\n    setTimeout(() => {\n      this.$input.focus().select();\n    }, 50);\n  }\n\n  destroy() {\n    this.$input.remove();\n  }\n\n  focus() {\n    this.$input.focus();\n  }\n\n  getColumnEditor() {\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\n  }\n\n  getDecimalPlaces(): number {\n    // returns the number of fixed decimal places or null\n    let rtn = (this.columnEditor.params && this.columnEditor.params.hasOwnProperty('decimalPlaces')) ? this.columnEditor.params.decimalPlaces : undefined;\n\n    if (rtn === undefined) {\n      rtn = defaultDecimalPlaces;\n    }\n    return (!rtn && rtn !== 0 ? null : rtn);\n  }\n\n  getInputDecimalSteps(): string {\n    const decimals = this.getDecimalPlaces();\n    let zeroString = '';\n    for (let i = 1; i < decimals; i++) {\n      zeroString += '0';\n    }\n\n    if (decimals > 0) {\n      return `0.${zeroString}1`;\n    }\n    return '1';\n  }\n\n  loadValue(item: any) {\n    this.defaultValue = item[this.columnDef.field];\n\n    const decPlaces = this.getDecimalPlaces();\n    if (decPlaces !== null\n      && (this.defaultValue || this.defaultValue === 0)\n      && this.defaultValue.toFixed) {\n      this.defaultValue = this.defaultValue.toFixed(decPlaces);\n    }\n\n    this.$input.val(this.defaultValue);\n    this.$input[0].defaultValue = this.defaultValue;\n    this.$input.select();\n  }\n\n  serializeValue() {\n    let rtn = parseFloat(this.$input.val()) || 0;\n    const decPlaces = this.getDecimalPlaces();\n    if (decPlaces !== null\n      && (rtn || rtn === 0)\n      && rtn.toFixed) {\n      rtn = parseFloat(rtn.toFixed(decPlaces));\n    }\n\n    return rtn;\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.columnDef.field] = state;\n  }\n\n  isValueChanged() {\n    const elmValue = this.$input.val();\n    return (!(elmValue === '' && this.defaultValue === null)) && (elmValue !== this.defaultValue);\n  }\n\n  validate(): EditorValidatorOutput {\n    const elmValue = this.$input.val();\n    const decPlaces = this.getDecimalPlaces();\n    const minValue = this.columnEditor.minValue;\n    const maxValue = this.columnEditor.maxValue;\n    const errorMsg = this.columnEditor.errorMessage;\n    const mapValidation = {\n      '{{minValue}}': minValue,\n      '{{maxValue}}': maxValue,\n      '{{minDecimal}}': 0,\n      '{{maxDecimal}}': decPlaces\n    };\n\n    if (this.validator) {\n      const validationResults = this.validator(elmValue);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    } else if (isNaN(elmValue as number) || (decPlaces === 0 && !/^(\\d+(\\.)?(\\d)*)$/.test(elmValue))) {\n      // when decimal value is 0 (which is the default), we accept 0 or more decimal values\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_VALID_NUMBER\n      };\n    } else if (minValue !== undefined && (elmValue < minValue || elmValue > maxValue)) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    } else if ((decPlaces > 0 && !new RegExp(`^(\\\\d+(\\\\.)?(\\\\d){0,${decPlaces}})$`).test(elmValue))) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_DECIMAL_BETWEEN.replace(/{{minDecimal}}|{{maxDecimal}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n",
    "import { Constants } from './../constants';\r\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class IntegerEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"number\" class='editor-text' />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = parseInt(item[this.args.column.field], 10);\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return parseInt(this.$input.val() as string, 10) || 0;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    const elmValue = this.$input.val();\r\n    const value = isNaN(elmValue) ? elmValue : parseInt(elmValue, 10);\r\n    return (!(value === '' && this.defaultValue === null)) && (value !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    const elmValue = this.$input.val();\r\n    const errorMsg = this.columnEditor.params && this.columnEditor.errorMessage;\r\n\r\n    if (this.validator) {\r\n      const validationResults = this.validator(elmValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    } else if (isNaN(elmValue as number) || !/^[+-]?\\d+$/.test(elmValue)) {\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || Constants.VALIDATION_EDITOR_VALID_INTEGER\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport { Constants } from './../constants';\r\nimport {\r\n  Column,\r\n  Editor,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  GridOption,\r\n  HtmlElementPosition,\r\n  KeyCode\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class LongTextEditor implements Editor {\r\n  $input: any;\r\n  $wrapper: any;\r\n  defaultValue: any;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    const cancelText = this._translate.instant('CANCEL') || Constants.TEXT_CANCEL;\r\n    const saveText = this._translate.instant('SAVE') || Constants.TEXT_SAVE;\r\n    const $container = $('body');\r\n\r\n    this.$wrapper = $(`<div class=\"slick-large-editor-text\" />`).appendTo($container);\r\n    this.$input = $(`<textarea hidefocus rows=\"5\">`).appendTo(this.$wrapper);\r\n\r\n    $(`<div class=\"editor-footer\">\r\n          <button class=\"btn btn-primary btn-xs\">${saveText}</button>\r\n          <button class=\"btn btn-default btn-xs\">${cancelText}</button>\r\n      </div>`).appendTo(this.$wrapper);\r\n\r\n    this.$wrapper.find('button:first').on('click', (event: Event) => this.save());\r\n    this.$wrapper.find('button:last').on('click', (event: Event) => this.cancel());\r\n    this.$input.on('keydown', this.handleKeyDown);\r\n\r\n    this.position(this.args.position);\r\n    this.$input.focus().select();\r\n  }\r\n\r\n  handleKeyDown(e: any) {\r\n    if (e.which === KeyCode.ENTER && e.ctrlKey) {\r\n      this.save();\r\n    } else if (e.which === KeyCode.ESCAPE) {\r\n      e.preventDefault();\r\n      this.cancel();\r\n    } else if (e.which === KeyCode.TAB && e.shiftKey) {\r\n      e.preventDefault();\r\n      this.args.grid.navigatePrev();\r\n    } else if (e.which === KeyCode.TAB) {\r\n      e.preventDefault();\r\n      this.args.grid.navigateNext();\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  cancel() {\r\n    this.$input.val(this.defaultValue);\r\n    this.args.cancelChanges();\r\n  }\r\n\r\n  hide() {\r\n    this.$wrapper.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$wrapper.show();\r\n  }\r\n\r\n  position(position: HtmlElementPosition) {\r\n    this.$wrapper\r\n      .css('top', (position.top || 0) - 5)\r\n      .css('left', (position.left || 0) - 5);\r\n  }\r\n\r\n  destroy() {\r\n    this.$wrapper.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.$input.val(this.defaultValue = item[this.columnDef.field]);\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue == null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Column,\r\n  Editor,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  SelectOption,\r\n} from './../models/index';\r\nimport { arraysEqual, CollectionService } from '../services/index';\r\n\r\n// height in pixel of the multiple-select DOM element\r\nconst SELECT_ELEMENT_HEIGHT = 26;\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/**\r\n * Slickgrid editor class for multiple select lists\r\n */\r\nexport class MultipleSelectEditor implements Editor {\r\n  /** The JQuery DOM element */\r\n  $editorElm: any;\r\n\r\n  /** Editor Multiple-Select options */\r\n  editorElmOptions: MultipleSelectOption;\r\n\r\n  /** The multiple-select options for a multiple select list */\r\n  defaultOptions: MultipleSelectOption;\r\n\r\n  /** The default item values that are set */\r\n  defaultValue: any[];\r\n\r\n  /** The options label/value object to use in the select list */\r\n  collection: SelectOption[] = [];\r\n\r\n  /** The property name for values in the collection */\r\n  valueName: string;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName: string;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** Do we translate the label? */\r\n  enableTranslateLabel: boolean;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,\r\n      maxHeight: 200,\r\n      addTitle: true,\r\n      okButton: true,\r\n      selectAllDelimiter: ['', ''],\r\n      width: 150,\r\n      offsetLeft: 20,\r\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\r\n    };\r\n\r\n    if (this._translate) {\r\n      this.defaultOptions.countSelected = this._translate.instant('X_OF_Y_SELECTED');\r\n      this.defaultOptions.allSelected = this._translate.instant('ALL_SELECTED');\r\n      this.defaultOptions.selectAllText = this._translate.instant('SELECT_ALL');\r\n    }\r\n\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /**\r\n   * The current selected values from the collection\r\n   */\r\n  get currentValues() {\r\n    return this.collection\r\n      .filter(c => this.$editorElm.val().indexOf(c[this.valueName].toString()) !== -1)\r\n      .map(c => c[this.valueName]);\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init() {\r\n    if (!this.args) {\r\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\r\n    }\r\n\r\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the MultipleSelect Editor to work correctly.\r\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\r\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\r\n    }\r\n\r\n    const collectionService = new CollectionService(this._translate);\r\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\r\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\r\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\r\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\r\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    this.collection = newCollection;\r\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    this.createDomElement(editorTemplate);\r\n  }\r\n\r\n  applyValue(item: any, state: any): void {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  destroy() {\r\n    this.$editorElm.remove();\r\n  }\r\n\r\n  loadValue(item: any): void {\r\n    // convert to string because that is how the DOM will return these values\r\n    this.defaultValue = item[this.columnDef.field].map((i: any) => i.toString());\r\n\r\n    this.$editorElm.find('option').each((i: number, $e: any) => {\r\n      if (this.defaultValue.indexOf($e.value) !== -1) {\r\n        $e.selected = true;\r\n      } else {\r\n        $e.selected = false;\r\n      }\r\n    });\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  serializeValue(): any {\r\n    return this.currentValues;\r\n  }\r\n\r\n  focus() {\r\n    this.$editorElm.focus();\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    return !arraysEqual(this.$editorElm.val(), this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.currentValues);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n\r\n  private buildTemplateHtmlString(collection: any[]) {\r\n    let options = '';\r\n    collection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example: { collection: [ { value: '1', label: 'One' } ])`);\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n\r\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * Automatically adjust the multiple-select dropup or dropdown by available space\r\n   */\r\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\r\n    // height in pixel of the multiple-select element\r\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\r\n\r\n    const windowHeight = $(window).innerHeight() || 300;\r\n    const pageScroll = $('body').scrollTop() || 0;\r\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\r\n    const $msDrop = $msDropContainer.find('.ms-drop');\r\n    const msDropHeight = $msDrop.height() || 0;\r\n    const msDropOffsetTop = $msDrop.offset().top;\r\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\r\n\r\n    if (space < msDropHeight) {\r\n      if (multipleSelectOptions.container) {\r\n        // when using a container, we need to offset the drop ourself\r\n        // and also make sure there's space available on top before doing so\r\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\r\n        if (newOffsetTop > 0) {\r\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\r\n        }\r\n      } else {\r\n        // without container, we simply need to add the \"top\" class to the drop\r\n        $msDrop.addClass('top');\r\n      }\r\n      $msDrop.removeClass('bottom');\r\n    } else {\r\n      $msDrop.addClass('bottom');\r\n      $msDrop.removeClass('top');\r\n    }\r\n  }\r\n\r\n  /** Build the template HTML string */\r\n  private createDomElement(editorTemplate: string) {\r\n    this.$editorElm = $(editorTemplate);\r\n\r\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\r\n      this.$editorElm.appendTo(this.args.container);\r\n    }\r\n\r\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\r\n      // fallback to bootstrap\r\n      this.$editorElm.addClass('form-control');\r\n    } else {\r\n      const elementOptions = (this.columnDef.internalColumnEditor) ? this.columnDef.internalColumnEditor.elementOptions : {};\r\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\r\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\r\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\r\n    }\r\n  }\r\n\r\n  // refresh the jquery object because the selected checkboxes were already set\r\n  // prior to this method being called\r\n  private refresh() {\r\n    if (typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('refresh');\r\n    }\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Column,\r\n  Editor,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  SelectOption\r\n} from './../models/index';\r\nimport { findOrDefault, CollectionService } from '../services/index';\r\nimport { Injectable } from '@angular/core';\r\n\r\n// height in pixel of the multiple-select DOM element\r\nconst SELECT_ELEMENT_HEIGHT = 26;\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/**\r\n * Slickgrid editor class for single select lists\r\n */\r\n@Injectable()\r\nexport class SingleSelectEditor implements Editor {\r\n  /** The JQuery DOM element */\r\n  $editorElm: any;\r\n\r\n  /** Editor Multiple-Select options */\r\n  editorElmOptions: MultipleSelectOption;\r\n\r\n  /** The multiple-select options for a single select */\r\n  defaultOptions: any;\r\n\r\n  /** The default item value that is set */\r\n  defaultValue: any;\r\n\r\n  /** The options label/value object to use in the select list */\r\n  collection: SelectOption[] = [];\r\n\r\n  /** The property name for values in the collection */\r\n  valueName: string;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName: string;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** Do we translate the label? */\r\n  enableTranslateLabel: boolean;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,\r\n      maxHeight: 200,\r\n      width: 150,\r\n      offsetLeft: 20,\r\n      single: true,\r\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\r\n    };\r\n\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /**\r\n   * The current selected value from the collection\r\n   */\r\n  get currentValue() {\r\n    return findOrDefault(this.collection, (c: any) =>\r\n      c[this.valueName].toString() === this.$editorElm.val())[this.valueName];\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init() {\r\n    if (!this.args) {\r\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\r\n    }\r\n\r\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the SingleSelect Editor to work correctly.\r\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\r\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\r\n    }\r\n\r\n    const collectionService = new CollectionService(this._translate);\r\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\r\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\r\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionFilterBy) {\r\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\r\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\r\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    this.collection = newCollection;\r\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    this.createDomElement(editorTemplate);\r\n  }\r\n\r\n  applyValue(item: any, state: any): void {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  destroy() {\r\n    this.$editorElm.remove();\r\n  }\r\n\r\n  loadValue(item: any): void {\r\n    // convert to string because that is how the DOM will return these values\r\n    // make sure the prop exists first\r\n    this.defaultValue = item[this.columnDef.field] && item[this.columnDef.field].toString();\r\n\r\n\r\n    this.$editorElm.find('option').each((i: number, $e: any) => {\r\n      if (this.defaultValue === $e.value) {\r\n        $e.selected = true;\r\n      } else {\r\n        $e.selected = false;\r\n      }\r\n    });\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  serializeValue(): any {\r\n    return this.currentValue;\r\n  }\r\n\r\n  focus() {\r\n    this.$editorElm.focus();\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    return this.$editorElm.val() !== this.defaultValue;\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.currentValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n\r\n  private buildTemplateHtmlString(collection: any[]) {\r\n    let options = '';\r\n    collection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error('A collection with value/label (or value/labelKey when using ' +\r\n          'Locale) is required to populate the Select list, for example: { params: { ' +\r\n          '{ collection: [ { value: \\'1\\', label: \\'One\\' } ] } } }');\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\r\n  }\r\n\r\n    /**\r\n   * Automatically adjust the multiple-select dropup or dropdown by available space\r\n   */\r\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\r\n    // height in pixel of the multiple-select element\r\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\r\n\r\n    const windowHeight = $(window).innerHeight() || 300;\r\n    const pageScroll = $('body').scrollTop() || 0;\r\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\r\n    const $msDrop = $msDropContainer.find('.ms-drop');\r\n    const msDropHeight = $msDrop.height() || 0;\r\n    const msDropOffsetTop = $msDrop.offset().top;\r\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\r\n\r\n    if (space < msDropHeight) {\r\n      if (multipleSelectOptions.container) {\r\n        // when using a container, we need to offset the drop ourself\r\n        // and also make sure there's space available on top before doing so\r\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\r\n        if (newOffsetTop > 0) {\r\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\r\n        }\r\n      } else {\r\n        // without container, we simply need to add the \"top\" class to the drop\r\n        $msDrop.addClass('top');\r\n      }\r\n      $msDrop.removeClass('bottom');\r\n    } else {\r\n      $msDrop.addClass('bottom');\r\n      $msDrop.removeClass('top');\r\n    }\r\n  }\r\n\r\n  /** Build the template HTML string */\r\n  private createDomElement(editorTemplate: string) {\r\n    this.$editorElm = $(editorTemplate);\r\n\r\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\r\n      this.$editorElm.appendTo(this.args.container);\r\n    }\r\n\r\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\r\n      // fallback to bootstrap\r\n      this.$editorElm.addClass('form-control');\r\n    } else {\r\n      const elementOptions = (this.columnDef.params) ? this.columnDef.params.elementOptions : {};\r\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\r\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\r\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\r\n    }\r\n  }\r\n\r\n  // refresh the jquery object because the selected checkboxes were already set\r\n  // prior to this method being called\r\n  private refresh() {\r\n    if (typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('refresh');\r\n    }\r\n  }\r\n}\r\n",
    "import { Constants } from '../constants';\r\nimport { Column, Editor, EditorValidator, EditorValidatorOutput } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nconst DEFAULT_MIN_VALUE = 0;\r\nconst DEFAULT_MAX_VALUE = 100;\r\nconst DEFAULT_STEP = 1;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class SliderEditor implements Editor {\r\n  $editorElm: any;\r\n  $input: any;\r\n  $sliderNumber: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Getter for the Editor Generic Params */\r\n  private get editorParams(): any {\r\n    return this.columnEditor.params || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    const container = this.args.container;\r\n\r\n    // create HTML string template\r\n    const editorTemplate = this.buildTemplateHtmlString();\r\n    this.$editorElm = $(editorTemplate);\r\n    this.$input = this.$editorElm.children('input');\r\n    this.$sliderNumber = this.$editorElm.children('span.input-group-addon');\r\n\r\n    // watch on change event\r\n    this.$editorElm\r\n      .appendTo(this.args.container)\r\n      .on('change', (event: Event) => this.save());\r\n  }\r\n\r\n  destroy() {\r\n    this.$editorElm.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$editorElm.focus();\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  cancel() {\r\n    this.$input.val(this.defaultValue);\r\n    this.args.cancelChanges();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    // this.$input.val(this.defaultValue = item[this.columnDef.field]);\r\n    this.defaultValue = item[this.columnDef.field];\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$sliderNumber.html(this.defaultValue);\r\n  }\r\n\r\n  serializeValue() {\r\n    return parseInt(this.$input.val() as string, 10) || 0;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    const elmValue = this.$input.val();\r\n    console.log(elmValue);\r\n    return (!(elmValue === '' && this.defaultValue === null)) && (elmValue !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    const elmValue = this.$input.val();\r\n    const minValue = this.columnEditor.minValue;\r\n    const maxValue = this.columnEditor.maxValue;\r\n    const errorMsg = this.columnEditor.errorMessage;\r\n    const mapValidation = {\r\n      '{{minValue}}': minValue,\r\n      '{{maxValue}}': maxValue\r\n    };\r\n\r\n    if (this.validator) {\r\n      const validationResults = this.validator(elmValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    } else if (minValue !== undefined && (elmValue < minValue || elmValue > maxValue)) {\r\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\r\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => {\r\n          return mapValidation[matched];\r\n        })\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString() {\r\n    const minValue = this.columnEditor.hasOwnProperty('minValue') ? this.columnEditor.minValue : DEFAULT_MIN_VALUE;\r\n    const maxValue = this.columnEditor.hasOwnProperty('maxValue') ? this.columnEditor.maxValue : DEFAULT_MAX_VALUE;\r\n    const defaultValue = this.editorParams.hasOwnProperty('sliderStartValue') ? this.editorParams.sliderStartValue : minValue;\r\n    const step = this.columnEditor.hasOwnProperty('valueStep') ? this.columnEditor.valueStep : DEFAULT_STEP;\r\n    const itemId = this.args && this.args.item && this.args.item.id;\r\n\r\n    if (this.editorParams.hideSliderNumber) {\r\n      return `\r\n      <div class=\"slider-editor\">\r\n        <input type=\"range\" id=\"rangeInput_${this.columnDef.field}_${itemId}\"\r\n          name=\"rangeInput_${this.columnDef.field}_${itemId}\"\r\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\r\n          class=\"form-control slider-editor-input range\" />\r\n      </div>`;\r\n    }\r\n\r\n    return `\r\n      <div class=\"input-group slider-editor\">\r\n        <input type=\"range\" id=\"rangeInput_${this.columnDef.field}_${itemId}\"\r\n          name=\"rangeInput_${this.columnDef.field}_${itemId}\"\r\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\r\n          class=\"form-control slider-editor-input range\"\r\n          onmousemove=\"$('#rangeOuput_${this.columnDef.field}_${itemId}').html(rangeInput_${this.columnDef.field}_${itemId}.value)\" />\r\n        <span class=\"input-group-addon slider-value\" id=\"rangeOuput_${this.columnDef.field}_${itemId}\">${defaultValue}</span>\r\n      </div>`;\r\n  }\r\n}\r\n",
    "import { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class TextEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"text\" class=\"editor-text\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this.$input.val(val);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field] || '';\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue === null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { CheckboxEditor } from './checkboxEditor';\r\nimport { DateEditor } from './dateEditor';\r\nimport { FloatEditor } from './floatEditor';\r\nimport { IntegerEditor } from './integerEditor';\r\nimport { LongTextEditor } from './longTextEditor';\r\nimport { MultipleSelectEditor } from './multipleSelectEditor';\r\nimport { SingleSelectEditor } from './singleSelectEditor';\r\nimport { SliderEditor } from './sliderEditor';\r\nimport { TextEditor } from './textEditor';\r\n\r\nexport const Editors = {\r\n  /** Checkbox Editor (uses native checkbox DOM element) */\r\n  checkbox: CheckboxEditor,\r\n\r\n  /** Date Picker Editor (which uses 3rd party lib \"flatpickr\") */\r\n  date: DateEditor,\r\n\r\n  /** Float Number Editor */\r\n  float: FloatEditor,\r\n\r\n  /** Integer Editor */\r\n  integer: IntegerEditor,\r\n\r\n  /** Long Text Editor (uses a textarea) */\r\n  longText: LongTextEditor,\r\n\r\n  /** Multiple Select editor (which uses 3rd party lib \"multiple-select.js\") */\r\n  multipleSelect: MultipleSelectEditor,\r\n\r\n  /** Single Select editor (which uses 3rd party lib \"multiple-select.js\") */\r\n  singleSelect: SingleSelectEditor,\r\n\r\n  /** Slider Editor */\r\n  slider: SliderEditor,\r\n\r\n  /** Text Editor */\r\n  text: TextEditor\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const arrayToCsvFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && Array.isArray(value)) {\n    const values = value.join(', ');\n    return `<span title=\"${values}\">${values}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const boldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  } else {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkboxFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? '&#x2611;' : '';\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkmarkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? `<i class=\"fa fa-check checkmark-icon\" aria-hidden=\"true\"></i>` : '';\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of a params collection\n */\nexport const collectionFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.params || !columnDef.params.collection\n    || !columnDef.params.collection.length) {\n    return '';\n  }\n\n  const { params, params: { collection } } = columnDef;\n  const labelName = (params.customStructure) ? params.customStructure.label : 'label';\n  const valueName = (params.customStructure) ? params.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of an editor collection\n */\nexport const collectionEditorFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.internalColumnEditor || !columnDef.internalColumnEditor.collection\n    || !columnDef.internalColumnEditor.collection.length) {\n    return '';\n  }\n\n  const { internalColumnEditor, internalColumnEditor: { collection } } = columnDef;\n  const labelName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.label : 'label';\n  const valueName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const complexObjectFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!columnDef) {\n    return '';\n  }\n  const complexField = columnDef.field || '';\n  return complexField.split('.').reduce((obj, i) => (obj ? obj[i] : ''), dataContext);\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\n\nexport const dateIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? moment(value).format(FORMAT) : '';\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIso);\n\nexport const dateTimeIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? moment(value).format(FORMAT) : '';\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIsoAmPm);\r\n\r\nexport const dateTimeIsoAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUsAmPm);\r\n\r\nexport const dateTimeUsAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUs);\r\n\r\nexport const dateTimeUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const decimalFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const params = columnDef.params || {};\n  const minDecimalPlaces = params.minDecimalPlaces || params.decimalPlaces || 2;\n  const maxDecimalPlaces = params.maxDecimalPlaces || 2;\n  return isNaN(+value) ? value : `${decimalFormatted(value, minDecimalPlaces, maxDecimalPlaces)}`;\n};\n\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const deleteIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-trash pointer delete-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredBoldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  } else {\n    return `<span style=\"color:red;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  isNaN(+value) ? '' : `$${decimalFormatted(value, 2, 4)}`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const editIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-pencil pointer edit-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const hyperlinkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && typeof value === 'string') {\n    const matchUrl = value.match(/^(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:\\/~\\+#]*[\\w\\-\\@?^=%&amp;\\/~\\+#])?/i);\n    if (matchUrl && Array.isArray(matchUrl)) {\n      return `<a href=\"${matchUrl[0]}\">' + value + '</a>`;\n    }\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\nexport const hyperlinkUriPrefixFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  let uriPrefix = (columnDef && columnDef.params && columnDef.params.uriPrefix) ? columnDef.params.uriPrefix : '';\n  if (!uriPrefix) {\n    throw new Error(`HyperlinkUriPrefix Formatter require a \"uriPrefix\" that can be passed through params. e.g.:: formatter: Formatters.hyperlinkUriPrefix, params: { uriPrefix: '/users/' }`);\n  }\n  if (value && uriPrefix && typeof uriPrefix === 'string' && !uriPrefix.includes('<script>')) {\n    uriPrefix += value;\n    return '<a href=\"' + uriPrefix + '\">' + value + '</a>';\n  }\n  return '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const infoIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-info-circle pointer info-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const lowercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toLowerCase() : '';\n};\n",
    "\nimport { Column, Formatter } from './../models/index';\n\n/**\n * Takes a value display it according to a mask provided\n * e.: 1234567890 with mask \"(000) 000-0000\" will display \"(123) 456-7890\"\n */\nexport const maskFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const params = columnDef.params || {};\n  const mask = params.mask;\n\n  if (!mask) {\n    throw new Error(`You must provide a \"mask\" via the generic \"params\" options (e.g.: { formatter: Formatters.mask, params: { mask: '000-000' }}`);\n  }\n\n  if (value && mask) {\n    let i = 0;\n    const v = value.toString();\n    return mask.replace(/[09A]/g, () => v[i++] || '');\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\nexport const multipleFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const params = columnDef.params || {};\n  if (!params.formatters || !Array.isArray(params.formatters)) {\n    throw new Error(`The multiple formatter requires the \"formatters\" to be provided as a column params.\n    For example: this.columnDefinitions = [{ id: title, field: title, formatter: Formatters.multiple, params: { formatters: [Formatters.lowercase, Formatters.uppercase] }`);\n  }\n  const formatters: Formatter[] = params.formatters;\n\n  // loop through all Formatters, the value of 1st formatter will be used by 2nd formatter and so on.\n  // they are piped and executed in sequences\n  let currentValue = value;\n  for (const formatter of formatters) {\n    currentValue = formatter(row, cell, currentValue, columnDef, dataContext, grid);\n  }\n  return currentValue;\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  if (value === null || value === '') {\r\n    return '';\r\n  }\r\n\r\n  const outputValue = value > 0 ? value / 100 : 0;\r\n  return `<span>${outputValue}%</span>`;\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'red';\n  } else if (value < 70) {\n    color = 'silver';\n  } else {\n    color = 'green';\n  }\n\n  return `<span class=\"percent-complete-bar\" style=\"background:${color}; width:${value}%\"></span>`;\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '-';\n  } else if (value < 50) {\n    return `<span style='color:red;font-weight:bold;'>${value}%</span>`;\n  } else {\n    return `<span style='color:green'>${value}%</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentSymbolFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  return value ? `<span>${value}%</span>` : '';\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const progressBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'danger';\n  } else if (value < 70) {\n    color = 'warning';\n  } else {\n    color = 'success';\n  }\n\n  return `<div class=\"progress\">\n    <div class=\"progress-bar progress-bar-${color}\" role=\"progressbar\" aria-valuenow=\"${value}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"min-width: 2em; width: ${value}%;\">\n    ${value}%\n    </div>\n  </div>`;\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a cell value and translates it with the \"ngx-translate\" service */\nexport const translateFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? translate.instant(value) : '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a boolean value, cast it to upperCase string and finally translates it with the \"ngx-translate\" service */\nexport const translateBooleanFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n  return value ? translate.instant(value.toUpperCase() as string) : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const uppercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toUpperCase() : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const yesNoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string =>\n  value ? 'Yes' : 'No';\n",
    "import { Column } from './../models/index';\nimport { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { boldFormatter } from './boldFormatter';\nimport { checkboxFormatter } from './checkboxFormatter';\nimport { checkmarkFormatter } from './checkmarkFormatter';\nimport { collectionFormatter } from './collectionFormatter';\nimport { collectionEditorFormatter } from './collectionEditorFormatter';\nimport { complexObjectFormatter } from './complexObjectFormatter';\nimport { dateIsoFormatter } from './dateIsoFormatter';\nimport { dateTimeIsoFormatter } from './dateTimeIsoFormatter';\nimport { dateTimeIsoAmPmFormatter } from './dateTimeIsoAmPmFormatter';\nimport { dateTimeUsAmPmFormatter } from './dateTimeUsAmPmFormatter';\nimport { dateTimeUsFormatter } from './dateTimeUsFormatter';\nimport { dateUsFormatter } from './dateUsFormatter';\nimport { decimalFormatter } from './decimalFormatter';\nimport { deleteIconFormatter } from './deleteIconFormatter';\nimport { dollarColoredBoldFormatter } from './dollarColoredBoldFormatter';\nimport { dollarColoredFormatter } from './dollarColoredFormatter';\nimport { dollarFormatter } from './dollarFormatter';\nimport { editIconFormatter } from './editIconFormatter';\nimport { hyperlinkFormatter } from './hyperlinkFormatter';\nimport { hyperlinkUriPrefixFormatter } from './hyperlinkUriPrefixFormatter';\nimport { infoIconFormatter } from './infoIconFormatter';\nimport { lowercaseFormatter } from './lowercaseFormatter';\nimport { maskFormatter } from './maskFormatter';\nimport { multipleFormatter } from './multipleFormatter';\nimport { percentFormatter } from './percentFormatter';\nimport { percentCompleteBarFormatter } from './percentCompleteBarFormatter';\nimport { percentCompleteFormatter } from './percentCompleteFormatter';\nimport { percentSymbolFormatter } from './percentSymbolFormatter';\nimport { progressBarFormatter } from './progressBarFormatter';\nimport { translateFormatter } from './translateFormatter';\nimport { translateBooleanFormatter } from './translateBooleanFormatter';\nimport { uppercaseFormatter } from './uppercaseFormatter';\nimport { yesNoFormatter } from './yesNoFormatter';\n\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const Formatters = {\n  /** Takes an array of string and converts it to a comma delimited string */\n  arrayToCsv: arrayToCsvFormatter,\n\n  /** show value in bold font weight as well */\n  bold: boldFormatter,\n\n  /** When value is filled (true), it will display a checkbox Unicode icon */\n  checkbox: checkboxFormatter,\n\n  /** When value is filled (true), it will display a Font-Awesome icon (fa-check) */\n  checkmark: checkmarkFormatter,\n\n  /** Takes a complex data object and return the data under that property (for example: \"user.firstName\" will return the first name \"John\") */\n  complexObject: complexObjectFormatter,\n\n  /**\n   * Looks up values from the columnDefinition.params.collection property and displays the label in CSV or string format\n   * @example\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\n   * const dataset = [{ value: 1 },{ value: 2 }];\n   */\n  collection: collectionFormatter,\n\n  /**\n   * Looks up values from the columnDefinition.editor.collection property and displays the label in CSV or string format\n   * @example\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\n   * const dataset = [{ value: 1 },{ value: 2 }];\n   */\n  collectionEditor: collectionEditorFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date format */\n  dateIso: dateIsoFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date+Time format */\n  dateTimeIso: dateTimeIsoFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date+Time+(am/pm) format */\n  dateTimeIsoAmPm: dateTimeIsoAmPmFormatter,\n\n  /** Takes a Date object and displays it as an US Date format */\n  dateUs: dateUsFormatter,\n\n  /** Takes a Date object and displays it as an US Date+Time format */\n  dateTimeUs: dateTimeUsFormatter,\n\n  /** Takes a Date object and displays it as an US Date+Time+(am/pm) format */\n  dateTimeUsAmPm: dateTimeUsAmPmFormatter,\n\n  /** Displays a Font-Awesome delete icon (fa-trash) */\n  deleteIcon: deleteIconFormatter,\n\n  /**\n   * Display the value as x decimals formatted, defaults to 2 decimals.\n   * You can pass \"decimalPlaces\" or \"minDecimalPlaces\" and/or \"maxDecimalPlaces\" to the generic \"params\" property, example:: `{ formatter: Formatters.decimal, params: { decimalPlaces: 3 }}`\n   * The property \"decimalPlaces\" is an alias of \"minDecimalPlaces\"\n   */\n  decimal: decimalFormatter,\n\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value */\n  dollar: dollarFormatter,\n\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value */\n  dollarColored: dollarColoredFormatter,\n\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value, show it in bold font weight as well */\n  dollarColoredBold: dollarColoredBoldFormatter,\n\n  /** Displays a Font-Awesome edit icon (fa-pencil) */\n  editIcon: editIconFormatter,\n\n  /** Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https). The structure will be \"<a href=\"hyperlink\">hyperlink</a>\" */\n  hyperlink: hyperlinkFormatter,\n\n  /** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\n  hyperlinkUriPrefix: hyperlinkUriPrefixFormatter,\n\n  /** Displays a Font-Awesome edit icon (fa-info-circle) */\n  infoIcon: infoIconFormatter,\n\n  /** Takes a value and displays it all lowercase */\n  lowercase: lowercaseFormatter,\n\n  /**\n   * Takes a value display it according to a mask provided\n   * e.: 1234567890 with mask \"(000) 000-0000\" will display \"(123) 456-7890\"\n   */\n  mask: maskFormatter,\n\n  /**\n   * You can pipe multiple formatters (executed in sequence), use params to pass the list of formatters. For example::\n   * { field: 'title', formatter: Formatters.multiple, params: { formatters: [ Formatters.lowercase, Formatters.uppercase ] }\n   */\n  multiple: multipleFormatter,\n\n  /** Takes a cell value number (between 0.0-1.0) and displays a red (<50) or green (>=50) bar */\n  percent: percentFormatter,\n\n  /** Takes a cell value number (between 0.0-100) and displays a red (<50) or green (>=50) bar */\n  percentComplete: percentCompleteFormatter,\n\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"percent-complete-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\n  percentCompleteBar: percentCompleteBarFormatter,\n\n  /** Takes a cell value number (between 0-100) and add the \"%\" after the number */\n  percentSymbol: percentSymbolFormatter,\n\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"progress-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\n  progressBar: progressBarFormatter,\n\n  /** Takes a cell value and translates it (i18n). Requires an instance of the Translate Service:: `i18n: this.translate */\n  translate: translateFormatter,\n\n  /** Takes a boolean value, cast it to upperCase string and finally translates it (i18n). */\n  translateBoolean: translateBooleanFormatter,\n\n  /** Takes a value and displays it all uppercase */\n  uppercase: uppercaseFormatter,\n\n  /** Takes a boolean value and display a string 'Yes' or 'No' */\n  yesNo: yesNoFormatter\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsPercentageFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + '%' + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const avgTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 4) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const minTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.min && totals.min[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const maxTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.max && totals.max[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 4) + suffix}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 2) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}`;\n  }\n  return '';\n};\n",
    "import { Column } from './../models/index';\nimport { avgTotalsPercentageFormatter } from './avgTotalsPercentageFormatter';\nimport { avgTotalsDollarFormatter } from './avgTotalsDollarFormatter';\nimport { avgTotalsFormatter } from './avgTotalsFormatter';\nimport { minTotalsFormatter } from './minTotalsFormatter';\nimport { maxTotalsFormatter } from './maxTotalsFormatter';\nimport { sumTotalsColoredFormatter } from './sumTotalsColoredFormatter';\nimport { sumTotalsDollarColoredBoldFormatter } from './sumTotalsDollarColoredBoldFormatter';\nimport { sumTotalsDollarColoredFormatter } from './sumTotalsDollarColoredFormatter';\nimport { sumTotalsDollarBoldFormatter } from './sumTotalsDollarBoldFormatter';\nimport { sumTotalsDollarFormatter } from './sumTotalsDollarFormatter';\nimport { sumTotalsFormatter } from './sumTotalsFormatter';\nimport { sumTotalsBoldFormatter } from './sumTotalsBoldFormatter';\n\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const GroupTotalFormatters = {\n  /**\n   * Average all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotals: avgTotalsFormatter,\n\n  /**\n   * Average all the column totals and display '$' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsDollar: avgTotalsDollarFormatter,\n\n  /**\n   * Average all the column totals and display '%' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsPercentage: avgTotalsPercentageFormatter,\n\n  /**\n   * Show max value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  maxTotals: maxTotalsFormatter,\n\n  /**\n   * Show min value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  minTotals: minTotalsFormatter,\n\n  /**\n   * Sums up all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotals: sumTotalsFormatter,\n\n  /**\n   * Sums up all the column totals and display it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsBold: sumTotalsBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsColored: sumTotalsColoredFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollar: sumTotalsDollarFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign and show it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarBold: sumTotalsDollarBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColored: sumTotalsDollarColoredFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value, show it in bold font weight as well\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColoredBold: sumTotalsDollarColoredBoldFormatter,\n};\n",
    "import { Pagination } from './../models/pagination.interface';\r\nimport { AfterViewInit, Component, EventEmitter, Injectable, Input, OnDestroy, Output } from '@angular/core';\r\nimport { castToPromise } from './../services/utilities';\r\nimport { GridOption } from './../models/index';\r\nimport { FilterService, SortService } from './../services/index';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n@Component({\r\n  selector: 'slick-pagination',\r\n  template: `<div class=\"slick-pagination\">\r\n    <div class=\"slick-pagination-nav\">\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-first fa fa-angle-double-left\" aria-label=\"First\" (click)=\"changeToFirstPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-prev fa fa-angle-left\" aria-label=\"Previous\" (click)=\"changeToPreviousPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n\r\n        <div class=\"slick-page-number\">\r\n            <span [translate]=\"'PAGE'\"></span>\r\n            <input type=\"text\" class=\"form-control\" value=\"{{pageNumber}}\" size=\"1\"  (change)=\"changeToCurrentPage($event)\">\r\n            <span [translate]=\"'OF'\"></span><span> {{pageCount}}</span>\r\n        </div>\r\n\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-next text-center fa fa-lg fa-angle-right\" aria-label=\"Next\" (click)=\"changeToNextPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-end fa fa-lg fa-angle-double-right\" aria-label=\"Last\" (click)=\"changeToLastPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n    </div>\r\n    <span class=\"slick-pagination-settings\">\r\n        <select id=\"items-per-page-label\" [value]=\"itemsPerPage\" (change)=\"onChangeItemPerPage($event)\">\r\n        <option value=\"{{pageSize}}\" *ngFor=\"let pageSize of paginationPageSizes;\">{{pageSize}}</option>\r\n        </select>\r\n        <span [translate]=\"'ITEMS_PER_PAGE'\"></span>,\r\n        <span class=\"slick-pagination-count\">\r\n            <span [translate]=\"'FROM_TO_OF_TOTAL_ITEMS'\" [translateParams]=\"{ from: dataFrom, to: dataTo, totalItems: totalItems }\"></span>\r\n        </span>\r\n    </span>\r\n    </div>\r\n`\r\n})\r\n@Injectable()\r\nexport class SlickPaginationComponent implements AfterViewInit, OnDestroy {\r\n  private _filterSubcription: Subscription;\r\n  private _gridPaginationOptions: GridOption;\r\n  private _isFirstRender = true;\r\n  @Output() onPaginationChanged = new EventEmitter<Pagination>();\r\n\r\n  @Input()\r\n  set gridPaginationOptions(gridPaginationOptions: GridOption) {\r\n    this._gridPaginationOptions = gridPaginationOptions;\r\n    if (this._isFirstRender || !gridPaginationOptions || !gridPaginationOptions.pagination || (gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n      this._isFirstRender = false;\r\n    }\r\n  }\r\n  get gridPaginationOptions(): GridOption {\r\n    return this._gridPaginationOptions;\r\n  }\r\n  @Input() grid: any;\r\n  dataFrom = 1;\r\n  dataTo = 1;\r\n  itemsPerPage: number;\r\n  pageCount = 0;\r\n  pageNumber = 1;\r\n  totalItems = 0;\r\n  paginationCallback: Function;\r\n  paginationPageSizes = [25, 75, 100];\r\n  fromToParams: any = { from: this.dataFrom, to: this.dataTo, totalItems: this.totalItems };\r\n\r\n  /** Constructor */\r\n  constructor(private filterService: FilterService, private sortService: SortService) { }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._gridPaginationOptions = this._gridPaginationOptions;\r\n    if (!this._gridPaginationOptions || !this._gridPaginationOptions.pagination || (this._gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n    }\r\n\r\n    // Subscribe to Event Emitter of Filter & Sort changed, go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterChanged.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n    // Subscribe to Filter clear and go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterCleared.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n  }\r\n\r\n  ceil(number: number) {\r\n    return Math.ceil(number);\r\n  }\r\n\r\n  changeToFirstPage(event: any) {\r\n    this.pageNumber = 1;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToLastPage(event: any) {\r\n    this.pageNumber = this.pageCount;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToNextPage(event: any) {\r\n    if (this.pageNumber < this.pageCount) {\r\n      this.pageNumber++;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToPreviousPage(event: any) {\r\n    if (this.pageNumber > 0) {\r\n      this.pageNumber--;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToCurrentPage(event: any) {\r\n    this.pageNumber = event.currentTarget.value;\r\n    if (this.pageNumber < 1) {\r\n          this.pageNumber = 1;\r\n    } else if (this.pageNumber > this.pageCount) {\r\n          this.pageNumber = this.pageCount;\r\n    }\r\n\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  dispose() {\r\n    this.onPaginationChanged.unsubscribe();\r\n    if (this._filterSubcription) {\r\n      this._filterSubcription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  onChangeItemPerPage(event: any) {\r\n    const itemsPerPage = +event.target.value;\r\n    this.pageCount = Math.ceil(this.totalItems / itemsPerPage);\r\n    this.pageNumber = 1;\r\n    this.itemsPerPage = itemsPerPage;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  refreshPagination(isPageNumberReset: boolean = false) {\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this._gridPaginationOptions && this._gridPaginationOptions.pagination) {\r\n      const pagination = this._gridPaginationOptions.pagination;\r\n      // set the number of items per page if not already set\r\n      if (!this.itemsPerPage) {\r\n        this.itemsPerPage = +((backendApi && backendApi.options && backendApi.options.paginationOptions && backendApi.options.paginationOptions.first) ? backendApi.options.paginationOptions.first : this._gridPaginationOptions.pagination.pageSize);\r\n      }\r\n\r\n      // if totalItems changed, we should always go back to the first page and recalculation the From-To indexes\r\n      if (isPageNumberReset || this.totalItems !== pagination.totalItems) {\r\n        if (this._isFirstRender && pagination.pageNumber && pagination.pageNumber > 1) {\r\n          this.pageNumber = pagination.pageNumber || 1;\r\n        } else {\r\n          this.pageNumber = 1;\r\n        }\r\n\r\n        // when page number is set to 1 then also reset the \"offset\" of backend service\r\n        if (this.pageNumber === 1) {\r\n          backendApi.service.resetPaginationOptions();\r\n        }\r\n      }\r\n\r\n      // calculate and refresh the multiple properties of the pagination UI\r\n      this.paginationPageSizes = this._gridPaginationOptions.pagination.pageSizes;\r\n      this.totalItems = this._gridPaginationOptions.pagination.totalItems;\r\n      this.recalculateFromToIndexes();\r\n    }\r\n    this.pageCount = Math.ceil(this.totalItems / this.itemsPerPage);\r\n  }\r\n\r\n  async onPageChanged(event: Event | undefined, pageNumber: number) {\r\n    this.recalculateFromToIndexes();\r\n\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this.dataTo > this.totalItems) {\r\n      this.dataTo = this.totalItems;\r\n    } else if (this.totalItems < this.itemsPerPage) {\r\n      this.dataTo = this.totalItems;\r\n    }\r\n    if (backendApi) {\r\n      const itemsPerPage = +this.itemsPerPage;\r\n\r\n      if (backendApi.preProcess) {\r\n        backendApi.preProcess();\r\n      }\r\n\r\n      const query = backendApi.service.processOnPaginationChanged(event, { newPage: pageNumber, pageSize: itemsPerPage });\r\n\r\n      // the process could be an Observable (like HttpClient) or a Promise\r\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n      const observableOrPromise = backendApi.process(query);\r\n      const processResult = await castToPromise(observableOrPromise);\r\n\r\n      // from the result, call our internal post process to update the Dataset and Pagination info\r\n      if (processResult && backendApi.internalPostProcess) {\r\n        backendApi.internalPostProcess(processResult);\r\n      }\r\n\r\n      // send the response process to the postProcess callback\r\n      if (backendApi.postProcess) {\r\n        backendApi.postProcess(processResult);\r\n      }\r\n    } else {\r\n      throw new Error('Pagination with a backend service requires \"BackendServiceApi\" to be defined in your grid options');\r\n    }\r\n\r\n    // emit the changes to the parent component\r\n    this.onPaginationChanged.emit({\r\n      pageNumber: this.pageNumber,\r\n      pageSizes: this.paginationPageSizes,\r\n      pageSize: this.itemsPerPage,\r\n      totalItems: this.totalItems\r\n    });\r\n  }\r\n\r\n  recalculateFromToIndexes() {\r\n    this.dataFrom = (this.pageNumber * this.itemsPerPage) - this.itemsPerPage + 1;\r\n    this.dataTo = (this.totalItems < this.itemsPerPage) ? this.totalItems : (this.pageNumber * this.itemsPerPage);\r\n  }\r\n}\r\n",
    "// import 3rd party vendor libs\nimport 'jquery-ui-dist/jquery-ui';\nimport 'slickgrid/lib/jquery.event.drag-2.3.0';\nimport 'slickgrid/slick.core';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.grid';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.groupitemmetadataprovider';\nimport 'slickgrid/controls/slick.columnpicker';\nimport 'slickgrid/controls/slick.gridmenu';\nimport 'slickgrid/controls/slick.pager';\nimport 'slickgrid/plugins/slick.autotooltips';\nimport 'slickgrid/plugins/slick.cellexternalcopymanager';\nimport 'slickgrid/plugins/slick.cellrangedecorator';\nimport 'slickgrid/plugins/slick.cellrangeselector';\nimport 'slickgrid/plugins/slick.cellselectionmodel';\nimport 'slickgrid/plugins/slick.checkboxselectcolumn';\nimport 'slickgrid/plugins/slick.headerbuttons';\nimport 'slickgrid/plugins/slick.headermenu';\nimport 'slickgrid/plugins/slick.rowmovemanager';\nimport 'slickgrid/plugins/slick.rowselectionmodel';\nimport { AfterViewInit, Component, EventEmitter, Inject, Injectable, Input, Output, OnDestroy, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, titleCase } from './../services/utilities';\nimport { GlobalGridOptions } from './../global-grid-options';\nimport {\n  AngularGridInstance,\n  BackendServiceOption,\n  Column,\n  GridOption,\n  GridStateChange,\n  GridStateType,\n  Pagination\n} from './../models/index';\nimport { ControlAndPluginService } from './../services/controlAndPlugin.service';\nimport { ExportService } from './../services/export.service';\nimport { FilterService } from './../services/filter.service';\nimport { GraphqlService } from './../services/graphql.service';\nimport { GridEventService } from './../services/gridEvent.service';\nimport { GridService } from './../services/grid.service';\nimport { GridStateService } from './../services/gridState.service';\nimport { GroupingAndColspanService } from './../services/groupingAndColspan.service';\nimport { ResizerService } from './../services/resizer.service';\nimport { SortService } from './../services/sort.service';\nimport { Subscription } from 'rxjs/Subscription';\nimport { CompoundDateFilter } from '../filters/compoundDateFilter';\nimport { CompoundInputFilter } from '../filters/compoundInputFilter';\nimport { InputFilter } from '../filters/inputFilter';\nimport { MultipleSelectFilter } from '../filters/multipleSelectFilter';\nimport { SingleSelectFilter } from '../filters/singleSelectFilter';\nimport { SelectFilter } from '../filters/selectFilter';\nimport { FilterFactory } from '../filters/filterFactory';\nimport { SlickgridConfig } from '../slickgrid-config';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\nconst slickgridEventPrefix = 'sg';\n\n@Injectable()\n@Component({\n  selector: 'angular-slickgrid',\n  template: `<div id=\"slickGridContainer-{{gridId}}\" #customElm class=\"gridPane\" [style.width]=\"gridWidthString\">\r\n    <div attr.id='{{gridId}}' class=\"slickgrid-container\" style=\"width: 100%\" [style.height]=\"gridHeightString\">\r\n    </div>\r\n\r\n    <slick-pagination id=\"slickPagingContainer-{{gridId}}\"\r\n        *ngIf=\"showPagination\"\r\n        (onPaginationChanged)=\"paginationChanged($event)\"\r\n        [gridPaginationOptions]=\"gridPaginationOptions\">\r\n    </slick-pagination>\r\n</div>\r\n`,\n  providers: [\n    CompoundDateFilter,\n    CompoundInputFilter,\n    InputFilter,\n    MultipleSelectFilter,\n    SingleSelectFilter,\n    SelectFilter,\n    ControlAndPluginService,\n    ExportService,\n    FilterFactory,\n    FilterService,\n    GraphqlService,\n    GridEventService,\n    GridService,\n    GridStateService,\n    GroupingAndColspanService,\n    ResizerService,\n    SortService,\n    SlickgridConfig\n  ]\n})\nexport class AngularSlickgridComponent implements AfterViewInit, OnDestroy, OnInit {\n  @ViewChild('customElm', {read: ElementRef}) customElm: ElementRef;\n  private _dataset: any[];\n  private _columnDefinitions: Column[];\n  private _dataView: any;\n  private _eventHandler: any = new Slick.EventHandler();\n  grid: any;\n  gridPaginationOptions: GridOption;\n  gridHeightString: string;\n  gridWidthString: string;\n  groupingDefinition: any = {};\n  groupItemMetadataProvider: any;\n  showPagination = false;\n  isGridInitialized = false;\n  subscriptions: Subscription[] = [];\n\n  @Output() onAngularGridCreated = new EventEmitter<AngularGridInstance>();\n  @Output() onDataviewCreated = new EventEmitter<any>();\n  @Output() onGridCreated = new EventEmitter<any>();\n  @Output() onGridInitialized = new EventEmitter<any>();\n  @Output() onBeforeGridCreate = new EventEmitter<boolean>();\n  @Output() onBeforeGridDestroy = new EventEmitter<any>();\n  @Output() onAfterGridDestroyed = new EventEmitter<boolean>();\n  @Output() onGridStateChanged = new EventEmitter<GridStateChange>();\n  @Input() gridId: string;\n  @Input() gridOptions: GridOption;\n  @Input() gridHeight = 0;\n  @Input() gridWidth = 0;\n\n  @Input()\n  set columnDefinitions(columnDefinitions: Column[]) {\n    this._columnDefinitions = columnDefinitions;\n    if (this.isGridInitialized) {\n      this.updateColumnDefinitionsList(columnDefinitions);\n    }\n  }\n  get columnDefinitions(): Column[] {\n    return this._columnDefinitions;\n  }\n  @Input()\n  set dataset(dataset: any[]) {\n    this._dataset = dataset;\n    this.refreshGridData(dataset);\n  }\n  get dataset(): any[] {\n    return this._dataView.getItems();\n  }\n\n\n  constructor(\n    private controlAndPluginService: ControlAndPluginService,\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private gridService: GridService,\n    private gridEventService: GridEventService,\n    private gridStateService: GridStateService,\n    private groupingAndColspanService: GroupingAndColspanService,\n    private resizer: ResizerService,\n    private sortService: SortService,\n    private translate: TranslateService,\n    @Inject('config') private forRootConfig: GridOption\n  ) {}\n\n  ngOnInit(): void {\n    this.onBeforeGridCreate.emit(true);\n    if (!this.gridOptions.enableAutoResize && !this.gridOptions.autoResize) {\n      this.gridHeightString = `${this.gridHeight}px`;\n      this.gridWidthString = `${this.gridWidth}px`;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.onBeforeGridDestroy.emit(this.grid);\n    this.destroy();\n    this.onAfterGridDestroyed.emit(true);\n  }\n\n  destroy() {\n    this._dataView = [];\n    this.gridOptions = {};\n    this._eventHandler.unsubscribeAll();\n    this.controlAndPluginService.dispose();\n    this.filterService.dispose();\n    this.gridEventService.dispose();\n    this.gridStateService.dispose();\n    this.groupingAndColspanService.dispose();\n    this.resizer.dispose();\n    this.sortService.dispose();\n    this.grid.destroy();\n\n    // also unsubscribe all RxJS subscriptions\n    this.subscriptions.forEach((subscription: Subscription) => {\n      if (subscription && subscription.unsubscribe) {\n        subscription.unsubscribe();\n      }\n    });\n    this.subscriptions = [];\n  }\n\n  ngAfterViewInit() {\n    this.initialization();\n    this.isGridInitialized = true;\n  }\n\n  initialization() {\n    // make sure the dataset is initialized (if not it will throw an error that it cannot getLength of null)\n    this._dataset = this._dataset || [];\n    this.gridOptions = this.mergeGridOptions(this.gridOptions);\n    this.createBackendApiInternalPostProcessCallback(this.gridOptions);\n\n    if (this.gridOptions.enableGrouping) {\n      this.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\n      this._dataView = new Slick.Data.DataView({\n        groupItemMetadataProvider: this.groupItemMetadataProvider,\n        inlineFilters: true\n      });\n    } else {\n      this._dataView = new Slick.Data.DataView();\n    }\n\n    // for convenience, we provide the property \"editor\" as an Angular-Slickgrid editor complex object\n    // however \"editor\" is used internally by SlickGrid for it's Editor Factory\n    // so in our lib we will swap \"editor\" and copy it into \"internalColumnEditor\"\n    // then take back \"editor.model\" and make it the new \"editor\" so that SlickGrid Editor Factory still works\n    this._columnDefinitions = this._columnDefinitions.map((c: Column | any) => ({\n      ...c,\n      editor: c.editor && c.editor.model,\n      internalColumnEditor: { ...c.editor }\n    })),\n\n    this.controlAndPluginService.createCheckboxPluginBeforeGridCreation(this._columnDefinitions, this.gridOptions);\n    this.grid = new Slick.Grid(`#${this.gridId}`, this._dataView, this._columnDefinitions, this.gridOptions);\n\n    this.controlAndPluginService.attachDifferentControlOrPlugins(this.grid, this._dataView, this.groupItemMetadataProvider);\n    this.attachDifferentHooks(this.grid, this.gridOptions, this._dataView);\n\n    // emit the Grid & DataView object to make them available in parent component\n    this.onGridCreated.emit(this.grid);\n    this.onDataviewCreated.emit(this._dataView);\n\n    this.grid.init();\n    this._dataView.beginUpdate();\n    this._dataView.setItems(this._dataset, this.gridOptions.datasetIdPropertyName);\n    this._dataView.endUpdate();\n\n    // after the DataView is created & updated execute some processes\n    this.executeAfterDataviewCreated(this.grid, this.gridOptions, this._dataView);\n\n    // attach resize ONLY after the dataView is ready\n    this.attachResizeHook(this.grid, this.gridOptions);\n\n    // attach grouping and header grouping colspan service\n    if (this.gridOptions.createPreHeaderPanel) {\n      this.groupingAndColspanService.init(this.grid, this._dataView);\n    }\n\n    // attach grid  service\n    this.gridService.init(this.grid, this._dataView);\n\n    // when user enables translation, we need to translate Headers on first pass & subsequently in the attachDifferentHooks\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders();\n    }\n\n    // if Export is enabled, initialize the service with the necessary grid and other objects\n    if (this.gridOptions.enableExport) {\n      this.exportService.init(this.grid, this._dataView);\n    }\n\n    // once all hooks are in placed and the grid is initialized, we can emit an event\n    this.onGridInitialized.emit(this.grid);\n\n    // attach the Backend Service API callback functions only after the grid is initialized\n    // because the preProcess() and onInit() might get triggered\n    if (this.gridOptions && this.gridOptions.backendServiceApi) {\n      this.attachBackendCallbackFunctions(this.gridOptions);\n    }\n\n    this.gridStateService.init(this.grid, this.controlAndPluginService, this.filterService, this.sortService);\n\n    this.onAngularGridCreated.emit({\n      // Slick Grid & DataView objects\n      dataView: this._dataView,\n      slickGrid: this.grid,\n\n      // return all available Services (non-singleton)\n      backendService: this.gridOptions && this.gridOptions.backendServiceApi && this.gridOptions.backendServiceApi.service,\n      exportService: this.exportService,\n      filterService: this.filterService,\n      gridEventService: this.gridEventService,\n      gridStateService: this.gridStateService,\n      gridService: this.gridService,\n      groupingService: this.groupingAndColspanService,\n      pluginService: this.controlAndPluginService,\n      resizerService: this.resizer,\n      sortService: this.sortService,\n    });\n  }\n\n  /**\n   * Define what our internal Post Process callback, it will execute internally after we get back result from the Process backend call\n   * For now, this is GraphQL Service only feautre and it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n   */\n  createBackendApiInternalPostProcessCallback(gridOptions: GridOption) {\n    if (gridOptions && gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      // internalPostProcess only works with a GraphQL Service, so make sure it is that type\n      if (backendApi && backendApi.service && backendApi.service instanceof GraphqlService) {\n        backendApi.internalPostProcess = (processResult: any) => {\n          const datasetName = (backendApi && backendApi.service && typeof backendApi.service.getDatasetName === 'function') ? backendApi.service.getDatasetName() : '';\n          if (processResult && processResult.data && processResult.data[datasetName]) {\n            this._dataset = processResult.data[datasetName].nodes;\n            this.refreshGridData(this._dataset, processResult.data[datasetName].totalCount);\n          } else {\n            this._dataset = [];\n          }\n        };\n      }\n    }\n  }\n\n  attachDifferentHooks(grid: any, gridOptions: GridOption, dataView: any) {\n    // on locale change, we have to manually translate the Headers, GridMenu\n    this.subscriptions.push(\n      this.translate.onLangChange.subscribe((event) => {\n        if (gridOptions.enableTranslate) {\n          this.controlAndPluginService.translateColumnHeaders();\n          this.controlAndPluginService.translateColumnPicker();\n          this.controlAndPluginService.translateGridMenu();\n          this.controlAndPluginService.translateHeaderMenu();\n        }\n      })\n    );\n\n    // if user entered some Columns \"presets\", we need to reflect them all in the grid\n    if (gridOptions.presets && Array.isArray(gridOptions.presets.columns) && gridOptions.presets.columns.length > 0) {\n      const gridColumns: Column[] = this.gridStateService.getAssociatedGridColumns(grid, gridOptions.presets.columns);\n      if (gridColumns && Array.isArray(gridColumns) && gridColumns.length > 0) {\n        // make sure that the checkbox selector is also visible if it is enabled\n        if (gridOptions.enableCheckboxSelector) {\n          const checkboxColumn = (Array.isArray(this._columnDefinitions) && this._columnDefinitions.length > 0) ? this._columnDefinitions[0] : null;\n          if (checkboxColumn && checkboxColumn.id === '_checkbox_selector' && gridColumns[0].id !== '_checkbox_selector') {\n            gridColumns.unshift(checkboxColumn);\n          }\n        }\n\n        // finally set the new presets columns (including checkbox selector if need be)\n        grid.setColumns(gridColumns);\n      }\n    }\n\n    // attach external sorting (backend) when available or default onSort (dataView)\n    if (gridOptions.enableSorting) {\n      gridOptions.backendServiceApi ? this.sortService.attachBackendOnSort(grid, dataView) : this.sortService.attachLocalOnSort(grid, dataView);\n    }\n\n    // attach external filter (backend) when available or default onFilter (dataView)\n    if (gridOptions.enableFiltering) {\n      this.filterService.init(grid);\n\n      // if user entered some \"presets\", we need to reflect them all in the DOM\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n        this.filterService.populateColumnFilterSearchTerms();\n      }\n      gridOptions.backendServiceApi ? this.filterService.attachBackendOnFilter(grid) : this.filterService.attachLocalOnFilter(grid, this._dataView);\n    }\n\n    // if user set an onInit Backend, we'll run it right away (and if so, we also need to run preProcess, internalPostProcess & postProcess)\n    if (gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      if (backendApi && backendApi.service && backendApi.service.init) {\n        backendApi.service.init(backendApi.options, gridOptions.pagination, this.grid);\n      }\n    }\n\n    // expose all Slick Grid Events through dispatch\n    for (const prop in grid) {\n      if (grid.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(grid[prop], (e: any, args: any) => {\n          this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\n        });\n      }\n    }\n\n    // expose all Slick DataView Events through dispatch\n    for (const prop in dataView) {\n      if (dataView.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(dataView[prop], (e: any, args: any) => {\n          this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\n        });\n      }\n    }\n\n    // expose GridState Service changes event through dispatch\n    this.subscriptions.push(\n      this.gridStateService.onGridStateChanged.subscribe((gridStateChange: GridStateChange) => {\n        this.onGridStateChanged.emit(gridStateChange);\n      })\n    );\n\n\n    // on cell click, mainly used with the columnDef.action callback\n    this.gridEventService.attachOnCellChange(grid, dataView);\n    this.gridEventService.attachOnClick(grid, dataView);\n\n    this._eventHandler.subscribe(dataView.onRowCountChanged, (e: any, args: any) => {\n      grid.updateRowCount();\n      grid.render();\n    });\n    this._eventHandler.subscribe(dataView.onRowsChanged, (e: any, args: any) => {\n      grid.invalidateRows(args.rows);\n      grid.render();\n    });\n\n    // does the user have a colspan callback?\n    if (gridOptions.colspanCallback) {\n      this._dataView.getItemMetadata = (rowNumber: number) => {\n        const item = this._dataView.getItem(rowNumber);\n        return gridOptions.colspanCallback(item);\n      };\n    }\n  }\n\n  attachBackendCallbackFunctions(gridOptions: GridOption) {\n    const backendApi = gridOptions.backendServiceApi;\n    const serviceOptions: BackendServiceOption = (backendApi && backendApi.service && backendApi.service.options) ? backendApi.service.options : {};\n    const isExecuteCommandOnInit = (!serviceOptions) ? false : ((serviceOptions && serviceOptions.hasOwnProperty('executeProcessCommandOnInit')) ? serviceOptions['executeProcessCommandOnInit'] : true);\n\n    // update backend filters (if need be) before the query runs\n    if (backendApi) {\n      const backendService = backendApi.service;\n\n      // if user entered some any \"presets\", we need to reflect them all in the grid\n      if (gridOptions && gridOptions.presets) {\n         // Filters \"presets\"\n         if (backendService && backendService.updateFilters && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n          backendService.updateFilters(gridOptions.presets.filters, true);\n        }\n        // Sorters \"presets\"\n        if (backendService && backendService.updateSorters && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n          backendService.updateSorters(undefined, gridOptions.presets.sorters);\n        }\n        // Pagination \"presets\"\n        if (backendService && backendService.updatePagination && gridOptions.presets.pagination) {\n          backendService.updatePagination(gridOptions.presets.pagination.pageNumber, gridOptions.presets.pagination.pageSize);\n        }\n      } else {\n        const columnFilters = this.filterService.getColumnFilters();\n        if (columnFilters && backendService && backendService.updateFilters) {\n          backendService.updateFilters(columnFilters, false);\n        }\n      }\n    }\n\n    if (backendApi && backendApi.service && (backendApi.onInit || isExecuteCommandOnInit)) {\n      const query = (typeof backendApi.service.buildQuery === 'function') ? backendApi.service.buildQuery() : '';\n      const observableOrPromise = (isExecuteCommandOnInit) ? backendApi.process(query) : backendApi.onInit(query);\n\n      // wrap this inside a setTimeout to avoid timing issue since the gridOptions needs to be ready before running this onInit\n      setTimeout(async () => {\n        if (backendApi.preProcess) {\n          backendApi.preProcess();\n        }\n\n        // the process could be an Observable (like HttpClient) or a Promise\n        // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n        const processResult = await castToPromise(observableOrPromise);\n\n        // define what our internal Post Process callback, only available for GraphQL Service for now\n        // it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n        if (processResult && backendApi && backendApi.service instanceof GraphqlService && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  attachResizeHook(grid: any, options: GridOption) {\n    // expand/autofit columns on first page load\n    if (grid && options.autoFitColumnsOnFirstLoad) {\n      grid.autosizeColumns();\n    }\n\n    // auto-resize grid on browser resize\n    this.resizer.init(grid);\n    if (options.enableAutoResize) {\n      this.resizer.attachAutoResizeDataGrid({ height: this.gridHeight, width: this.gridWidth });\n      if (grid && options.autoFitColumnsOnFirstLoad) {\n        grid.autosizeColumns();\n      }\n    }\n  }\n\n  executeAfterDataviewCreated(grid: any, gridOptions: GridOption, dataView: any) {\n    // if user entered some Sort \"presets\", we need to reflect them all in the DOM\n    if (gridOptions.enableSorting) {\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n        this.sortService.loadLocalPresets(grid, dataView);\n      }\n    }\n  }\n\n  mergeGridOptions(gridOptions): GridOption {\n    gridOptions.gridId = this.gridId;\n    gridOptions.gridContainerId = `slickGridContainer-${this.gridId}`;\n    if (gridOptions.enableFiltering || this.forRootConfig.enableFiltering) {\n      gridOptions.showHeaderRow = true;\n    }\n    // use jquery extend to deep merge and avoid immutable properties changed in GlobalGridOptions after route change\n    return $.extend(true, {}, GlobalGridOptions, this.forRootConfig, gridOptions);\n  }\n\n  paginationChanged(pagination: Pagination) {\n    this.gridStateService.onGridStateChanged.next({\n      change: { newValues: pagination, type: GridStateType.pagination },\n      gridState: this.gridStateService.getCurrentGridState()\n    });\n  }\n\n  /**\n   * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well\n   * @param dataset\n   */\n  refreshGridData(dataset: any[], totalCount?: number) {\n    if (dataset && this.grid && this._dataView && typeof this._dataView.setItems === 'function') {\n      this._dataView.setItems(dataset, this.gridOptions.datasetIdPropertyName);\n      this._dataView.reSort();\n\n      // this.grid.setData(dataset);\n      this.grid.invalidate();\n      this.grid.render();\n\n      if (this.gridOptions.enablePagination || this.gridOptions.backendServiceApi) {\n        // do we want to show pagination?\n        // if we have a backendServiceApi and the enablePagination is undefined, we'll assume that we do want to see it, else get that defined value\n        this.showPagination = ((this.gridOptions.backendServiceApi && this.gridOptions.enablePagination === undefined) ? true : this.gridOptions.enablePagination) || false;\n\n        // before merging the grid options, make sure that it has the totalItems count\n        // once we have that, we can merge and pass all these options to the pagination component\n        if (!this.gridOptions.pagination) {\n          this.gridOptions.pagination = (this.gridOptions.pagination) ? this.gridOptions.pagination : undefined;\n        }\n        if (this.gridOptions.pagination && totalCount) {\n          this.gridOptions.pagination.totalItems = totalCount;\n        }\n        if (this.gridOptions.presets && this.gridOptions.presets.pagination && this.gridOptions.pagination) {\n          this.gridOptions.pagination.pageSize = this.gridOptions.presets.pagination.pageSize;\n          this.gridOptions.pagination.pageNumber = this.gridOptions.presets.pagination.pageNumber;\n        }\n        this.gridPaginationOptions = this.mergeGridOptions(this.gridOptions);\n      }\n      if (this.grid &&  this.gridOptions.enableAutoResize) {\n        // resize the grid inside a slight timeout, in case other DOM element changed prior to the resize (like a filter/pagination changed)\n        this.resizer.resizeGrid(10, { height: this.gridHeight, width: this.gridWidth });\n      }\n    }\n  }\n\n  /**\n   * Dynamically change or update the column definitions list.\n   * We will re-render the grid so that the new header and data shows up correctly.\n   * If using i18n, we also need to trigger a re-translate of the column headers\n   */\n  updateColumnDefinitionsList(newColumnDefinitions) {\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders(false, newColumnDefinitions);\n    } else {\n      this.controlAndPluginService.renderColumnHeaders(newColumnDefinitions);\n    }\n    this.grid.autosizeColumns();\n  }\n\n  /** Toggle the filter row displayed on first row\n   * @param isShowing\n   */\n  showHeaderRow(isShowing: boolean) {\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  /** Toggle the filter row displayed on first row */\n  toggleHeaderRow() {\n    const isShowing = !this.grid.getOptions().showHeaderRow;\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  private dispatchCustomEvent(eventName: string, data?: any, isBubbling: boolean = true) {\n    const eventInit: CustomEventInit = { bubbles: isBubbling };\n    if (data) {\n      eventInit.detail = data;\n    }\n    this.customElm.nativeElement.dispatchEvent(new CustomEvent(eventName, eventInit));\n  }\n}\n",
    "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AngularSlickgridComponent } from './../components/angular-slickgrid.component';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport { GraphqlService } from './../services/graphql.service';\r\nimport { GridOdataService } from './../services/grid-odata.service';\r\nimport { GridOption } from './../models/gridOption.interface';\r\nimport { SlickPaginationComponent } from './../components/slick-pagination.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TranslateModule\r\n  ],\r\n  declarations: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  exports: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  entryComponents: [AngularSlickgridComponent]\r\n})\r\nexport class AngularSlickgridModule {\r\n  static forRoot(config: GridOption = {}) {\r\n    return {\r\n      ngModule: AngularSlickgridModule,\r\n      providers: [\r\n        { provide: 'config', useValue: config },\r\n        CollectionService,\r\n        GraphqlService,\r\n        GridOdataService\r\n      ]\r\n    };\r\n  }\r\n}\r\n"
  ],
  "names": [
    "__awaiter",
    "thisArg",
    "_arguments",
    "P",
    "generator",
    "Promise",
    "resolve",
    "reject",
    "fulfilled",
    "value",
    "step",
    "next",
    "e",
    "rejected",
    "result",
    "done",
    "then",
    "apply",
    "__generator",
    "body",
    "f",
    "y",
    "t",
    "g",
    "_",
    "label",
    "sent",
    "trys",
    "ops",
    "verb",
    "throw",
    "return",
    "Symbol",
    "iterator",
    "this",
    "n",
    "v",
    "op",
    "TypeError",
    "call",
    "pop",
    "length",
    "push",
    "__values",
    "o",
    "m",
    "i",
    "__read",
    "r",
    "ar",
    "error",
    "__spread",
    "arguments",
    "concat",
    "colon",
    "comma",
    "equalSign",
    "pipe",
    "semicolon",
    "space",
    "tab",
    "doubleColon",
    "doublePipe",
    "doubleSemicolon",
    "csv",
    "doc",
    "docx",
    "pdf",
    "txt",
    "xls",
    "xlsx",
    "columns",
    "filter",
    "pagination",
    "sorter",
    "empty",
    "contains",
    "lessThan",
    "lessThanOrEqual",
    "greaterThan",
    "greaterThanOrEqual",
    "notEqual",
    "equal",
    "endsWith",
    "startsWith",
    "in",
    "notIn",
    "inContains",
    "notInContains",
    "asc",
    "ASC",
    "desc",
    "DESC",
    "moment",
    "moment_",
    "addWhiteSpaces",
    "nbSpaces",
    "htmlEntityDecode",
    "input",
    "replace",
    "match",
    "dec",
    "String",
    "fromCharCode",
    "arraysEqual",
    "a",
    "b",
    "orderMatters",
    "sort",
    "castToPromise",
    "fromServiceName",
    "promise",
    "Observable",
    "first",
    "toPromise",
    "take",
    "Error",
    "findOrDefault",
    "array",
    "logic",
    "defaultVal",
    "find",
    "decimalFormatted",
    "minDecimal",
    "maxDecimal",
    "isNaN",
    "minDec",
    "undefined",
    "maxDec",
    "amount",
    "Math",
    "round",
    "pow",
    "indexOf",
    "mapMomentDateFormatWithFieldType",
    "fieldType",
    "map",
    "FieldType",
    "dateTime",
    "dateTimeIso",
    "dateTimeIsoAmPm",
    "dateTimeIsoAM_PM",
    "dateUs",
    "dateUsShort",
    "dateTimeUs",
    "dateTimeUsAmPm",
    "dateTimeUsAM_PM",
    "dateTimeUsShort",
    "dateTimeUsShortAmPm",
    "dateUtc",
    "date",
    "dateIso",
    "mapFlatpickrDateFormatWithFieldType",
    "mapOperatorType",
    "operator",
    "OperatorType",
    "mapOperatorByFieldType",
    "string",
    "unknown",
    "float",
    "number",
    "dateTimeUsShortAM_PM",
    "parseUtcDate",
    "inputDateString",
    "useUtc",
    "test",
    "dateString",
    "decodeURIComponent",
    "dateMoment",
    "Date",
    "isValid",
    "year",
    "toString",
    "utc",
    "format",
    "sanitizeHtmlToText",
    "htmlString",
    "temp",
    "document",
    "createElement",
    "innerHTML",
    "textContent",
    "innerText",
    "titleCase",
    "charAt",
    "toUpperCase",
    "slice",
    "toCamelCase",
    "str",
    "offset",
    "toLowerCase",
    "compareDates",
    "value1",
    "value2",
    "sortDirection",
    "strict",
    "diff",
    "date1",
    "date2",
    "parseInt",
    "FORMAT",
    "dateUsShortSorter",
    "dateSorter",
    "ISO_8601",
    "dateIsoSorter",
    "dateUsSorter",
    "numericSorter",
    "x",
    "parseFloat",
    "stringSorter",
    "position",
    "Sorters",
    "numeric",
    "sortByFieldType",
    "sortResult",
    "CollectionService",
    "translate",
    "prototype",
    "filterCollection",
    "collection",
    "filterBy",
    "filteredCollection",
    "property_1",
    "property",
    "value_1",
    "item",
    "sortCollection",
    "sortBy",
    "enableTranslateLabel",
    "_this",
    "sortedCollection",
    "property_2",
    "sortDirection_1",
    "hasOwnProperty",
    "sortDesc",
    "fieldType_1",
    "dataRow1",
    "dataRow2",
    "instant",
    "parseBoolean",
    "type",
    "Injectable",
    "TranslateService",
    "booleanFilterCondition",
    "options",
    "searchTerm",
    "Array",
    "isArray",
    "searchTerms",
    "cellValue",
    "testFilterCondition",
    "includes",
    "findIndex",
    "val",
    "dateFilterCondition",
    "searchDateFormat",
    "filterSearchType",
    "dateCell",
    "dateSearch",
    "dateIsoFilterCondition",
    "dateUsFilterCondition",
    "dateUsShortFilterCondition",
    "dateUtcFilterCondition",
    "collectionSearchFilterCondition",
    "numberFilterCondition",
    "stringFilterCondition",
    "cellValueLastChar",
    "executeMappedCondition",
    "boolean",
    "FilterConditions",
    "booleanFilter",
    "collectionSearchFilter",
    "dateFilter",
    "dateIsoFilter",
    "dateUtcFilter",
    "dateUsFilter",
    "dateUsShortFilter",
    "numberFilter",
    "stringFilter",
    "testFilter",
    "require",
    "CompoundDateFilter",
    "Object",
    "defineProperty",
    "get",
    "grid",
    "getOptions",
    "_operator",
    "set",
    "init",
    "args",
    "callback",
    "columnDef",
    "$filterElm",
    "createDomElement",
    "$filterInputElm",
    "keyup",
    "onTriggerEvent",
    "$selectOperatorElm",
    "change",
    "clear",
    "flatInstance",
    "destroy",
    "off",
    "remove",
    "setValues",
    "values",
    "setDate",
    "buildDatePickerInput",
    "inputFormat",
    "outputFormat",
    "outputType",
    "currentLocale",
    "currentLang",
    "substring",
    "pickerOptions",
    "defaultDate",
    "altInput",
    "altFormat",
    "dateFormat",
    "wrap",
    "closeOnSelect",
    "locale",
    "loadFlatpickrLocale",
    "onChange",
    "selectedDates",
    "dateStr",
    "instance",
    "_currentValue",
    "enableTime",
    "CustomEvent",
    "placeholder",
    "gridOptions",
    "defaultFilterPlaceholder",
    "$",
    "flatpickr",
    "buildSelectOperatorHtmlString",
    "optionValues",
    "getOptionValues",
    "optionValueString",
    "forEach",
    "option",
    "description",
    "$headerElm",
    "getHeaderRowColumn",
    "id",
    "$filterContainerElm",
    "$containerInputGroup",
    "$operatorInputGroupAddon",
    "append",
    "attr",
    "data",
    "addClass",
    "appendTo",
    "localeDefault",
    "default",
    "clearFilterTriggered",
    "selectedOperator",
    "text",
    "removeClass",
    "hide",
    "close",
    "show",
    "open",
    "CompoundInputFilter",
    "buildInputHtmlString",
    "Inject",
    "CompoundSliderFilter",
    "params",
    "clearedValue",
    "filterParams",
    "sliderStartValue",
    "hideSliderNumber",
    "$containerInputGroupElm",
    "children",
    "last",
    "html",
    "buildTemplateHtmlString",
    "minValue",
    "filterProperties",
    "maxValue",
    "defaultValue",
    "valueStep",
    "field",
    "buildTemplateSliderTextHtmlString",
    "searchTermInput",
    "$sliderTextInputAppendAddon",
    "InputFilter",
    "filterTemplate",
    "target",
    "trigger",
    "MultipleSelectFilter",
    "collectionService",
    "isFilled",
    "defaultOptions",
    "container",
    "maxHeight",
    "okButton",
    "addTitle",
    "countSelected",
    "allSelected",
    "selectAllText",
    "selectAllDelimiter",
    "onClose",
    "selectedItems",
    "multipleSelect",
    "siblings",
    "labelName",
    "customStructure",
    "valueName",
    "newCollection",
    "collectionFilterBy",
    "collectionSortBy",
    "optionCollection",
    "labelKey",
    "selected",
    "findValueInSearchTerms",
    "textLabel",
    "assign",
    "filterOptions",
    "SelectFilter",
    "SingleSelectFilter",
    "single",
    "selectedItem",
    "SliderFilter",
    "Filters",
    "compoundDate",
    "compoundInput",
    "compoundSlider",
    "slider",
    "singleSelect",
    "select",
    "GlobalGridOptions",
    "alwaysShowVerticalScroll",
    "autoEdit",
    "asyncEditorLoading",
    "autoFitColumnsOnFirstLoad",
    "autoResize",
    "bottomPadding",
    "minHeight",
    "minWidth",
    "sidePadding",
    "cellHighlightCssClass",
    "checkboxSelector",
    "cssClass",
    "columnPicker",
    "hideForceFitButton",
    "hideSyncResizeButton",
    "datasetIdPropertyName",
    "defaultFilter",
    "editable",
    "enableAutoResize",
    "enableCellNavigation",
    "enableColumnPicker",
    "enableColumnReorder",
    "enableExport",
    "enableGridMenu",
    "enableHeaderMenu",
    "enableMouseHoverHighlightRow",
    "enableSorting",
    "enableTextSelectionOnCells",
    "explicitInitialization",
    "exportOptions",
    "delimiter",
    "DelimiterType",
    "exportWithFormatter",
    "filename",
    "FileType",
    "groupingAggregatorRowText",
    "sanitizeDataExport",
    "useUtf8WithBom",
    "forceFitColumns",
    "gridMenu",
    "hideClearAllFiltersCommand",
    "hideClearAllSortingCommand",
    "hideExportCsvCommand",
    "hideExportTextDelimitedCommand",
    "hideRefreshDatasetCommand",
    "hideToggleFilterCommand",
    "iconCssClass",
    "iconClearAllFiltersCommand",
    "iconClearAllSortingCommand",
    "iconExportCsvCommand",
    "iconExportTextDelimitedCommand",
    "iconRefreshDatasetCommand",
    "iconToggleFilterCommand",
    "menuWidth",
    "resizeOnShowHeaderRow",
    "headerMenu",
    "autoAlign",
    "autoAlignOffset",
    "iconSortAscCommand",
    "iconSortDescCommand",
    "iconColumnHideCommand",
    "hideColumnHideCommand",
    "hideSortCommands",
    "headerRowHeight",
    "multiColumnSort",
    "numberedMultiColumnSort",
    "tristateMultiColumnSort",
    "sortColNumberInSeparateSpan",
    "suppressActiveCellChangeOnEdit",
    "pageSizes",
    "pageSize",
    "totalItems",
    "rowHeight",
    "showHeaderRow",
    "topPanelHeight",
    "SlickgridConfig",
    "FilterFactory",
    "injector",
    "config",
    "_options",
    "createFilter",
    "columnFilter",
    "model",
    "filterInstance",
    "name",
    "createInjector",
    "service",
    "Injector",
    "create",
    "provide",
    "deps",
    "FilterService",
    "filterFactory",
    "_eventHandler",
    "Slick",
    "EventHandler",
    "_filters",
    "_columnFilters",
    "onFilterChanged",
    "Subject",
    "onFilterCleared",
    "_grid",
    "getColumns",
    "attachBackendOnFilter",
    "_slickSubscriber",
    "Event",
    "subscribe",
    "attachBackendOnFilterSubscribe",
    "bind",
    "onHeaderRowCellRendered",
    "addFilterTemplateToHeaderRow",
    "event",
    "backendApi",
    "_gridOptions",
    "backendServiceApi",
    "process",
    "preProcess",
    "processOnFilterChanged",
    "query",
    "_a",
    "emitFilterChanged",
    "processResult",
    "internalPostProcess",
    "postProcess",
    "attachLocalOnFilter",
    "dataView",
    "_dataView",
    "setFilterArgs",
    "columnFilters",
    "setFilter",
    "customLocalFilter",
    "columnId",
    "refresh",
    "clearFilters",
    "invalidate",
    "render",
    "tslib_1.__values",
    "keys",
    "_b",
    "columnIndex",
    "getColumnIndex",
    "queryField",
    "queryFieldFilter",
    "searchValues",
    "fieldSearchValue",
    "matches",
    "lastValueChar",
    "join",
    "k",
    "ln",
    "useFormatterOuputToFilter",
    "rowIndex",
    "getIdxById",
    "formatter",
    "dispose",
    "disposeColumnFilters",
    "unsubscribeAll",
    "unsubscribe",
    "index",
    "getColumnFilters",
    "getCurrentLocalFilters",
    "currentFilters",
    "colId",
    "callbackSearchEvent",
    "colFilter",
    "triggerEvent",
    "serviceOptions",
    "_onFilterChangedOptions",
    "column",
    "filterable",
    "filter_1",
    "updateColumnFilters",
    "filterArguments",
    "filterExistIndex",
    "filt",
    "sender",
    "backendService",
    "getCurrentFilters",
    "populateColumnFilterSearchTerms",
    "presets",
    "filters",
    "filters_1",
    "_columnDefinitions",
    "columnPreset",
    "presetFilter",
    "slickEvent",
    "isPropagationStopped",
    "extend",
    "EventData",
    "notify",
    "ExportService",
    "_lineCarriageReturn",
    "_hasGroupedItems",
    "onGridBeforeExportToFile",
    "onGridAfterExportToFile",
    "exportToFile",
    "_exportOptions",
    "dataOutput",
    "getDataOutput",
    "setTimeout",
    "downloadOptions",
    "csvContent",
    "startDownloadFile",
    "groupByColumnHeader",
    "groupingColumnHeaderTitle",
    "_exportQuoteWrapper",
    "outputDataString",
    "grouping",
    "getGrouping",
    "_columnHeaders",
    "getColumnHeaders",
    "header",
    "title",
    "getAllGridRowData",
    "lineCarriageReturn",
    "lineCount",
    "getLength",
    "rowNumber",
    "itemObj",
    "getItem",
    "readRegularRowData",
    "__groupTotals",
    "readGroupedTitleRow",
    "readGroupedTotalRow",
    "columnHeaders",
    "fieldName",
    "headerKey",
    "skippedField",
    "excludeFromExport",
    "width",
    "key",
    "row",
    "idx",
    "rowOutputString",
    "exportQuoteWrapper",
    "col",
    "fieldId",
    "isEvaluatingFormatter",
    "exportCustomFormatter",
    "itemData",
    "exportCsvForceToKeepAsString",
    "groupName",
    "level",
    "output",
    "groupTotalsFormatter",
    "navigator",
    "appName",
    "outputData",
    "mimeType",
    "TextEncoder",
    "encode",
    "blob",
    "Blob",
    "msSaveOrOpenBlob",
    "link",
    "csvUrl",
    "URL",
    "createObjectURL",
    "href",
    "setAttribute",
    "style",
    "visibility",
    "appendChild",
    "click",
    "removeChild",
    "SortService",
    "_currentLocalSorters",
    "_isBackendGrid",
    "onSortChanged",
    "onSortCleared",
    "attachBackendOnSort",
    "onSort",
    "onBackendSortChanged",
    "processOnSortChanged",
    "emitSortChanged",
    "attachLocalOnSort",
    "sortColumns",
    "sortCols",
    "sortAsc",
    "sortCol",
    "sortColumn",
    "direction",
    "SortDirection",
    "onLocalSortChanged",
    "clearSorting",
    "setSortColumns",
    "getCurrentLocalSorters",
    "getPreviousColumnSorts",
    "getSortColumns",
    "reduce",
    "cols",
    "loadLocalPresets",
    "sorters",
    "presetSorting",
    "gridColumn",
    "l",
    "columnSortObj",
    "SortDirectionNumber",
    "sortField",
    "neutral",
    "currentSorters",
    "getCurrentSorters",
    "Constants",
    "TEXT_CANCEL",
    "TEXT_CLEAR_ALL_FILTERS",
    "TEXT_CLEAR_ALL_SORTING",
    "TEXT_COLUMNS",
    "TEXT_COMMANDS",
    "TEXT_EXPORT_IN_CSV_FORMAT",
    "TEXT_EXPORT_IN_TEXT_FORMAT",
    "TEXT_FORCE_FIT_COLUMNS",
    "TEXT_HIDE_COLUMN",
    "TEXT_REFRESH_DATASET",
    "TEXT_SAVE",
    "TEXT_SYNCHRONOUS_RESIZE",
    "TEXT_SORT_ASCENDING",
    "TEXT_SORT_DESCENDING",
    "TEXT_TOGGLE_FILTER_ROW",
    "VALIDATION_EDITOR_VALID_NUMBER",
    "VALIDATION_EDITOR_VALID_INTEGER",
    "VALIDATION_EDITOR_NUMBER_BETWEEN",
    "VALIDATION_EDITOR_DECIMAL_BETWEEN",
    "ControlAndPluginService",
    "exportService",
    "filterService",
    "sortService",
    "areVisibleColumnDifferent",
    "extensionList",
    "getAllColumns",
    "allColumns",
    "getVisibleColumns",
    "visibleColumns",
    "getAllExtensions",
    "getExtensionByName",
    "p",
    "autoResizeColumns",
    "autosizeColumns",
    "attachDifferentControlOrPlugins",
    "groupItemMetadataProvider",
    "enableTranslate",
    "translateItems",
    "columnPickerControl",
    "createColumnPicker",
    "userOriginalGridMenu",
    "gridMenuControl",
    "createGridMenu",
    "enableAutoTooltip",
    "autoTooltipPlugin",
    "AutoTooltips",
    "autoTooltipOptions",
    "registerPlugin",
    "enableGrouping",
    "groupItemMetaProviderPlugin",
    "enableCheckboxSelector",
    "checkboxSelectorPlugin",
    "rowSelectionPlugin",
    "getSelectionModel",
    "RowSelectionModel",
    "rowSelectionOptions",
    "setSelectionModel",
    "preselectedRows",
    "selectRows",
    "enableRowSelection",
    "enableHeaderButton",
    "headerButtonsPlugin",
    "Plugins",
    "HeaderButtons",
    "headerButton",
    "onCommand",
    "headerMenuPlugin",
    "createHeaderMenu",
    "enableExcelCopyBuffer",
    "createUndoRedoBuffer",
    "hookUndoShortcutKey",
    "createCellExternalCopyManagerPlugin",
    "registerPlugins",
    "plugin",
    "createCheckboxPluginBeforeGridCreation",
    "columnDefinitions",
    "CheckboxSelectColumn",
    "selectionColumn",
    "getColumnDefinition",
    "excludeFromQuery",
    "excludeFromHeaderMenu",
    "unshift",
    "newRowIds",
    "pluginOptions",
    "clipboardCommandHandler",
    "editCommand",
    "undoRedoBuffer",
    "queueAndExecuteCommand",
    "dataItemColumnValueExtractor",
    "editor",
    "formattedOutput",
    "readOnlyMode",
    "includeHeaderWhenCopying",
    "newRowCreator",
    "count",
    "getData",
    "addItem",
    "CellSelectionModel",
    "cellExternalCopyManagerPlugin",
    "CellExternalCopyManager",
    "columnTitle",
    "getPickerTitleOutputString",
    "forceFitTitle",
    "syncResizeTitle",
    "Controls",
    "ColumnPicker",
    "onColumnsChanged",
    "getDefaultGridMenuOptions",
    "customItems",
    "addGridMenuCustomCommands",
    "sortItems",
    "GridMenu",
    "onBeforeMenuShow",
    "executeGridMenuInternalCustomCommands",
    "onMenuClose",
    "gridUid",
    "getUID",
    "getDefaultHeaderMenuOptions",
    "addHeaderMenuCustomCommands",
    "HeaderMenu",
    "executeHeaderMenuInternalCommands",
    "commandQueue",
    "commandCtr",
    "execute",
    "undo",
    "command",
    "GlobalEditorLock",
    "cancelCurrentEdit",
    "redo",
    "hideColumn",
    "removeColumnByIndex",
    "setColumns",
    "keydown",
    "which",
    "ctrlKey",
    "metaKey",
    "shiftKey",
    "gridMenuCustomItems",
    "enableFiltering",
    "disabled",
    "positionOrder",
    "customTitle",
    "headerMenuOptions",
    "menu",
    "items",
    "columnHeaderMenuItems",
    "sortable",
    "itemA",
    "itemB",
    "newSortColumns",
    "setHeaderRowVisibility",
    "setTopPanelVisibility",
    "showTopPanel",
    "refreshBackendDataset",
    "buildQuery",
    "el",
    "translateColumnPicker",
    "emptyColumnPickerTitles",
    "translateGridMenu",
    "emptyGridMenuTitles",
    "translateHeaderMenu",
    "resetHeaderMenuTranslations",
    "translateColumnHeaders",
    "newColumnDefinitions",
    "use",
    "renderColumnHeaders",
    "propName",
    "pickerName",
    "picker",
    "titleKey",
    "columnHeaderMenuItems_1",
    "propertyName",
    "inputKey",
    "outputKey",
    "items_1",
    "items_1_1",
    "timer",
    "GraphqlQueryBuilder",
    "queryFnName",
    "aliasOrFilter",
    "head",
    "alias",
    "prop",
    "getGraphQLValue",
    "searches",
    "_i",
    "searchKeys",
    "parceFind",
    "setAlias",
    "ReferenceError",
    "_levelA",
    "currentValue",
    "itemX",
    "RangeError",
    "propsAA",
    "JSON",
    "stringify",
    "propS",
    "objectToString",
    "obj",
    "sourceA",
    "DEFAULT_ITEMS_PER_PAGE",
    "GraphqlService",
    "defaultOrderBy",
    "defaultPaginationOptions",
    "datasetName",
    "queryQb",
    "QueryBuilder",
    "datasetQb",
    "dataQb",
    "columnIds",
    "columnDefinitions_1",
    "columnDefinitions_1_1",
    "fields",
    "buildFilterQuery",
    "isWithCursor",
    "pageInfoQb",
    "node",
    "datasetFilters",
    "paginationOptions",
    "sortingOptions",
    "orderBy",
    "filteringOptions",
    "addLocaleIntoQuery",
    "i18n",
    "extraQueryArguments",
    "_c",
    "queryArgument",
    "trimDoubleQuotesOnEnumField",
    "keepArgumentFieldDoubleQuotes",
    "inputArray",
    "shift",
    "split",
    "getInitPaginationOptions",
    "getDatasetName",
    "_currentFilters",
    "getCurrentPagination",
    "_currentPagination",
    "_currentSorters",
    "resetPaginationOptions",
    "after",
    "before",
    "pageNumber",
    "updateOptions",
    "debounceTypingDelay",
    "filterTypingDebounce",
    "castFilterToColumnFilter",
    "clearTimeout",
    "updateFilters",
    "processOnPaginationChanged",
    "updatePagination",
    "newPage",
    "updateSorters",
    "isUpdatedByPreset",
    "searchValue",
    "searchByArray",
    "_loop_1",
    "columnFilter_1",
    "this_1",
    "presetSorters",
    "graphqlSorters",
    "tmpSorterArray",
    "queryFieldSorter",
    "sortColumns_1",
    "sortColumns_1_1",
    "inputStr",
    "enumSearchWords",
    "patternWordInQuotes",
    "patternRegex",
    "reg",
    "RegExp",
    "group1",
    "group2",
    "group3",
    "removeDoubleQuotes",
    "tmpFilter",
    "padZero",
    "s",
    "trim",
    "allTitleCase",
    "outputStr",
    "substr",
    "OdataService",
    "_odataOptions",
    "filterQueue",
    "_defaultSortBy",
    "queryTmpArray",
    "top",
    "skip",
    "argument",
    "filterStr",
    "filterBySeparator",
    "saveColumnFilter",
    "updateFilterFromListTerms",
    "getFilterByColumn",
    "columnName",
    "getFilterCount",
    "removeColumnFilter",
    "search",
    "filterOptionObject",
    "updateFilterFromTerm",
    "searchBy",
    "tmpSearchByArray",
    "fieldSearchTerms",
    "tmpSearchTerms",
    "j",
    "lnj",
    "lnk",
    "caseType",
    "CaseType",
    "pascalCase",
    "GridOdataService",
    "odataService",
    "mergedOptions",
    "terms",
    "_loop_2",
    "columnFilter_2",
    "this_2",
    "bypassOdataQuery",
    "bypassBackendQuery",
    "encodeURIComponent",
    "dateFormatted",
    "mapOdataOperator",
    "sortByArray",
    "sorterArray",
    "sortColumns_2",
    "sortColumns_2_1",
    "columnFieldName",
    "csvString",
    "GridEventService",
    "attachOnCellChange",
    "onCellChange",
    "cell",
    "getDataItem",
    "returnedArgs",
    "gridDefinition",
    "dataContext",
    "attachOnClick",
    "onClick",
    "onCellClick",
    "GridStateService",
    "_columns",
    "_currentColumns",
    "subscriptions",
    "onGridStateChanged",
    "controlAndPluginService",
    "subscribeToAllGridChanges",
    "subscription",
    "getCurrentGridState",
    "gridState",
    "getCurrentColumns",
    "currentPagination",
    "getAssociatedCurrentColumns",
    "gridColumns",
    "currentColumns",
    "headerCssClass",
    "getAssociatedGridColumns",
    "currentColumn",
    "c",
    "hookExtensionEventToGridStateChange",
    "extensionName",
    "eventName",
    "extension",
    "newValues",
    "GridStateType",
    "hookSlickGridEventToGridStateChange",
    "resetColumns",
    "GridService",
    "gridStateService",
    "getColumnFromEventArguments",
    "getDataItemByRowNumber",
    "getItemRowMetadata",
    "previousItemMetadata",
    "meta",
    "cssClasses",
    "isEmptyObject",
    "_dirty",
    "rowClass",
    "highlightRow",
    "fadeDelay",
    "setSelectedRows",
    "getItemMetadata",
    "updateItem",
    "gridId",
    "getSelectedRows",
    "setSelectedRow",
    "rowIndexes",
    "renderGrid",
    "resetGrid",
    "originalColumns",
    "addItemToDatagrid",
    "insertItem",
    "scrollRowIntoView",
    "deleteDataGridItem",
    "itemId",
    "deleteDataGridItemById",
    "getRowById",
    "deleteItem",
    "updateDataGridItem",
    "updateDataGridItemById",
    "GroupingAndColspanService",
    "createPreHeaderPanel",
    "createPreHeaderRowGroupingTitle",
    "onColumnsResized",
    "onRowCountChanged",
    "$preHeaderPanel",
    "getPreHeaderPanel",
    "css",
    "getHeadersWidth",
    "parent",
    "headerColumnWidthDiff",
    "getHeaderColumnWidthDiff",
    "lastColumnGroup",
    "widthTotal",
    "columnGroup",
    "ResizerService",
    "onGridBeforeResize",
    "attachAutoResizeDataGrid",
    "newSizes",
    "gridDomElm",
    "resizeGrid",
    "window",
    "on",
    "_gridUid",
    "calculateGridNewDimensions",
    "containerElm",
    "containerId",
    "gridContainerId",
    "windowElm",
    "enablePagination",
    "gridHeight",
    "height",
    "coordOffsetTop",
    "availableHeight",
    "availableWidth",
    "newHeight",
    "newWidth",
    "getLastResizeDimensions",
    "_lastDimensions",
    "delay",
    "availableDimensions",
    "gridElm",
    "gridContainerElm",
    "heightWithPagination",
    "exec",
    "userAgent",
    "resizeCanvas",
    "AvgAggregator",
    "_field",
    "_count",
    "_nonNullCount",
    "_sum",
    "accumulate",
    "storeResult",
    "groupTotals",
    "avg",
    "MinAggregator",
    "_min",
    "min",
    "MaxAggregator",
    "_max",
    "max",
    "SumAggregator",
    "sum",
    "Aggregators",
    "Avg",
    "Min",
    "Max",
    "Sum",
    "CheckboxEditor",
    "internalColumnEditor",
    "columnEditor",
    "validator",
    "$input",
    "focus",
    "loadValue",
    "preClick",
    "serializeValue",
    "applyValue",
    "state",
    "isValueChanged",
    "validate",
    "validationResults",
    "valid",
    "msg",
    "DateEditor",
    "getCurrentLocale",
    "save",
    "commitChanges",
    "getColumnEditor",
    "domValue",
    "toDate",
    "FloatEditor",
    "getInputDecimalSteps",
    "keyCode",
    "KeyCode",
    "LEFT",
    "RIGHT",
    "stopImmediatePropagation",
    "getDecimalPlaces",
    "rtn",
    "decimalPlaces",
    "decimals",
    "zeroString",
    "decPlaces",
    "toFixed",
    "elmValue",
    "errorMsg",
    "errorMessage",
    "mapValidation",
    "{{minValue}}",
    "{{maxValue}}",
    "{{minDecimal}}",
    "{{maxDecimal}}",
    "matched",
    "IntegerEditor",
    "LongTextEditor",
    "_translate",
    "cancelText",
    "saveText",
    "$container",
    "$wrapper",
    "cancel",
    "handleKeyDown",
    "ENTER",
    "ESCAPE",
    "preventDefault",
    "TAB",
    "navigatePrev",
    "navigateNext",
    "cancelChanges",
    "left",
    "MultipleSelectEditor",
    "offsetLeft",
    "onOpen",
    "autoAdjustDropPosition",
    "$editorElm",
    "editorElmOptions",
    "editorTemplate",
    "each",
    "$e",
    "currentValues",
    "multipleSelectDomElement",
    "multipleSelectOptions",
    "windowHeight",
    "innerHeight",
    "pageScroll",
    "scrollTop",
    "$msDrop",
    "msDropHeight",
    "msDropOffsetTop",
    "newOffsetTop",
    "elementOptions",
    "SingleSelectEditor",
    "SliderEditor",
    "$sliderNumber",
    "console",
    "log",
    "editorParams",
    "TextEditor",
    "getValue",
    "setValue",
    "Editors",
    "checkbox",
    "integer",
    "longText",
    "arrayToCsvFormatter",
    "boldFormatter",
    "checkboxFormatter",
    "checkmarkFormatter",
    "collectionFormatter",
    "collectionEditorFormatter",
    "complexObjectFormatter",
    "dateIsoFormatter",
    "dateTimeIsoFormatter",
    "dateTimeIsoAmPmFormatter",
    "dateTimeUsAmPmFormatter",
    "dateTimeUsFormatter",
    "dateUsFormatter",
    "decimalFormatter",
    "minDecimalPlaces",
    "maxDecimalPlaces",
    "deleteIconFormatter",
    "dollarColoredBoldFormatter",
    "dollarColoredFormatter",
    "dollarFormatter",
    "editIconFormatter",
    "hyperlinkFormatter",
    "matchUrl",
    "hyperlinkUriPrefixFormatter",
    "uriPrefix",
    "infoIconFormatter",
    "lowercaseFormatter",
    "maskFormatter",
    "mask",
    "i_1",
    "v_1",
    "multipleFormatter",
    "formatters",
    "formatters_1",
    "formatters_1_1",
    "percentFormatter",
    "percentCompleteBarFormatter",
    "percentCompleteFormatter",
    "percentSymbolFormatter",
    "progressBarFormatter",
    "translateFormatter",
    "translateBooleanFormatter",
    "uppercaseFormatter",
    "yesNoFormatter",
    "Formatters",
    "arrayToCsv",
    "bold",
    "checkmark",
    "complexObject",
    "collectionEditor",
    "deleteIcon",
    "decimal",
    "dollar",
    "dollarColored",
    "dollarColoredBold",
    "editIcon",
    "hyperlink",
    "hyperlinkUriPrefix",
    "infoIcon",
    "lowercase",
    "multiple",
    "percent",
    "percentComplete",
    "percentCompleteBar",
    "percentSymbol",
    "progressBar",
    "translateBoolean",
    "uppercase",
    "yesNo",
    "avgTotalsPercentageFormatter",
    "totals",
    "prefix",
    "groupFormatterPrefix",
    "suffix",
    "groupFormatterSuffix",
    "avgTotalsDollarFormatter",
    "avgTotalsFormatter",
    "minTotalsFormatter",
    "maxTotalsFormatter",
    "sumTotalsColoredFormatter",
    "sumTotalsDollarColoredBoldFormatter",
    "sumTotalsDollarColoredFormatter",
    "sumTotalsDollarBoldFormatter",
    "sumTotalsDollarFormatter",
    "sumTotalsFormatter",
    "sumTotalsBoldFormatter",
    "GroupTotalFormatters",
    "avgTotals",
    "avgTotalsDollar",
    "avgTotalsPercentage",
    "maxTotals",
    "minTotals",
    "sumTotals",
    "sumTotalsBold",
    "sumTotalsColored",
    "sumTotalsDollar",
    "sumTotalsDollarBold",
    "sumTotalsDollarColored",
    "sumTotalsDollarColoredBold",
    "SlickPaginationComponent",
    "_isFirstRender",
    "onPaginationChanged",
    "EventEmitter",
    "dataFrom",
    "dataTo",
    "pageCount",
    "paginationPageSizes",
    "fromToParams",
    "from",
    "to",
    "_gridPaginationOptions",
    "gridPaginationOptions",
    "refreshPagination",
    "ngOnDestroy",
    "ngAfterViewInit",
    "_filterSubcription",
    "ceil",
    "changeToFirstPage",
    "onPageChanged",
    "changeToLastPage",
    "changeToNextPage",
    "changeToPreviousPage",
    "changeToCurrentPage",
    "currentTarget",
    "onChangeItemPerPage",
    "itemsPerPage",
    "isPageNumberReset",
    "recalculateFromToIndexes",
    "emit",
    "Component",
    "selector",
    "template",
    "Output",
    "Input",
    "AngularSlickgridComponent",
    "gridService",
    "gridEventService",
    "groupingAndColspanService",
    "resizer",
    "forRootConfig",
    "groupingDefinition",
    "showPagination",
    "isGridInitialized",
    "onAngularGridCreated",
    "onDataviewCreated",
    "onGridCreated",
    "onGridInitialized",
    "onBeforeGridCreate",
    "onBeforeGridDestroy",
    "onAfterGridDestroyed",
    "gridWidth",
    "updateColumnDefinitionsList",
    "getItems",
    "dataset",
    "_dataset",
    "refreshGridData",
    "ngOnInit",
    "gridHeightString",
    "gridWidthString",
    "initialization",
    "mergeGridOptions",
    "createBackendApiInternalPostProcessCallback",
    "Data",
    "GroupItemMetadataProvider",
    "DataView",
    "inlineFilters",
    "Grid",
    "attachDifferentHooks",
    "beginUpdate",
    "setItems",
    "endUpdate",
    "executeAfterDataviewCreated",
    "attachResizeHook",
    "attachBackendCallbackFunctions",
    "slickGrid",
    "groupingService",
    "pluginService",
    "resizerService",
    "backendApi_1",
    "nodes",
    "totalCount",
    "onLangChange",
    "checkboxColumn",
    "_loop_3",
    "this_3",
    "dispatchCustomEvent",
    "eventData",
    "_loop_4",
    "this_4",
    "gridStateChange",
    "updateRowCount",
    "onRowsChanged",
    "invalidateRows",
    "rows",
    "colspanCallback",
    "isExecuteCommandOnInit",
    "onInit",
    "observableOrPromise_1",
    "tslib_1.__awaiter",
    "paginationChanged",
    "reSort",
    "isShowing",
    "toggleHeaderRow",
    "isBubbling",
    "eventInit",
    "bubbles",
    "detail",
    "customElm",
    "nativeElement",
    "dispatchEvent",
    "providers",
    "decorators",
    "ViewChild",
    "read",
    "ElementRef",
    "AngularSlickgridModule",
    "forRoot",
    "ngModule",
    "useValue",
    "NgModule",
    "imports",
    "CommonModule",
    "TranslateModule",
    "declarations",
    "exports",
    "entryComponents",
    "buf",
    "charCodeAt"
  ],
  "mappings": "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"
}
