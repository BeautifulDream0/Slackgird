{
  "version": 3,
  "file": "angular-slickgrid.umd.min.js",
  "sources": [
    "ng://angular-slickgrid/node_modules/tslib/tslib.es6.js",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/delimiterType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/fileType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/gridStateType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/operatorType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/sortDirection.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/compareDateUtility.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsShortSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateIsoSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/numericSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/stringSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/sorterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/collection.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/booleanFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/filterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateIsoFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsShortFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUtcFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/collectionSearchFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/numberFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/stringFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/executeMappedCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundDateFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundInputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundSliderFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/inputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/multipleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/selectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/singleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/sliderFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/global-grid-options.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/slickgrid-config.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/filterFactory.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/filter.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/export.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/sort.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/constants.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/controlAndPlugin.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphqlQueryBuilder.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphql.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/global-utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid-odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridEvent.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridState.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/groupingAndColspan.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/resizer.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/avgAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/minAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/maxAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/sumAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/checkboxEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/dateEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/floatEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/integerEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/longTextEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/multipleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/singleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/sliderEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/textEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/arrayToCsvFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/boldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkboxFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkmarkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionEditorFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/complexObjectFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/decimalFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/deleteIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/editIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkUriPrefixFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/infoIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/lowercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/maskFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/multipleFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentSymbolFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/progressBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateBooleanFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/uppercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/yesNoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsPercentageFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/minTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/maxTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/slick-pagination.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/angular-slickgrid.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/modules/angular-slickgrid.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n",
    "export enum DelimiterType {\r\n  colon = ':',\r\n  comma = ',',\r\n  equalSign = '=',\r\n  pipe = '|',\r\n  semicolon = ';',\r\n  space = ' ',\r\n  tab = '\\t',\r\n\r\n  doubleColon = '::',\r\n  doublePipe = '||',\r\n  doubleSemicolon = ';;',\r\n}\r\n\r\n",
    "export enum FileType {\r\n  csv = 'csv',\r\n  doc = 'doc',\r\n  docx = 'docx',\r\n  pdf = 'pdf',\r\n  txt = 'txt',\r\n  xls = 'xls',\r\n  xlsx = 'xlsx'\r\n}\r\n",
    "export enum GridStateType {\r\n  columns = 'columns',\r\n  filter = 'filter',\r\n  pagination = 'pagination',\r\n  sorter = 'sorter'\r\n}\r\n",
    "export enum OperatorType {\n  /** value is empty */\n  empty = '',\n\n  /** value contains x */\n  contains = 'Contains',\n\n  /** value less than x */\n  lessThan = 'LT',\n\n  /** value less than or equal to x */\n  lessThanOrEqual = 'LE',\n\n  /** value greater than x */\n  greaterThan = 'GT',\n\n  /** value great than or equal to x */\n  greaterThanOrEqual = 'GE',\n\n  /** value not equal to x */\n  notEqual = 'NE',\n\n  /** value equal to x */\n  equal = 'EQ',\n\n  /** String ends with value */\n  endsWith = 'EndsWith',\n\n  /** String starts with value */\n  startsWith = 'StartsWith',\n\n  /** Find an equal match inside a collection */\n  in = 'IN',\n\n  /** Inverse (Not In) of an equal match inside a collection */\n  notIn = 'NOT_IN',\n\n  /**\n   * Find a substring contained inside a collection\n   * For example, this condition would return True with \"IN_CONTAINS\":: value='Task2,Task3', collection=['Task2','Task3']\n   * This would have returned False with \"IN\" because 'Task2' does not equal 'Task2,Task3'. However 'Task2' is contained in 'Task2,Task3'\n   */\n  inContains = 'IN_CONTAINS',\n\n  /** Inversed (Not In) of substring contained inside a collection */\n  notInContains = 'NOT_IN_CONTAINS',\n}\n",
    "export enum SortDirection {\r\n  asc = 'asc',\r\n  ASC = 'ASC',\r\n  desc = 'desc',\r\n  DESC = 'DESC'\r\n}\r\n",
    "import { FieldType, OperatorType } from '../models/index';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/first';\r\nimport 'rxjs/add/operator/take';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\n/** Simple function to which will loop and create as demanded the number of white spaces,\r\n * this will be used in the Excel export\r\n * @param int nbSpaces: number of white spaces to create\r\n */\r\nexport function addWhiteSpaces(nbSpaces): string {\r\n  let result = '';\r\n\r\n  for (let i = 0; i < nbSpaces; i++) {\r\n    result += ' ';\r\n  }\r\n  return result;\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityDecode(input: string): string {\r\n  return input.replace(/&#(\\d+);/g, function (match, dec) {\r\n    return String.fromCharCode(dec);\r\n  });\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityEncode(input: any): string {\r\n  const buf = [];\r\n  for (let i = input.length - 1; i >= 0; i--) {\r\n    buf.unshift(['&#', input[i].charCodeAt(), ';'].join(''));\r\n  }\r\n  return buf.join('');\r\n}\r\n\r\n/**\r\n * Compares two arrays to determine if all the items are equal\r\n * @param a first array\r\n * @param b second array to compare with a\r\n * @param [orderMatters=false] flag if the order matters, if not arrays will be sorted\r\n * @return boolean true if equal, else false\r\n */\r\nexport function arraysEqual(a: any[], b: any[], orderMatters: boolean = false): boolean {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n\r\n  if (a === null || b === null) {\r\n    return false;\r\n  }\r\n\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n\r\n  if (!orderMatters) {\r\n    a.sort();\r\n    b.sort();\r\n  }\r\n\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Try casting an input of type Promise | Observable into a Promise type.\r\n * @param object which could be of type Promise or Observable\r\n * @param fromServiceName string representing the caller service name and will be used if we throw a casting problem error\r\n */\r\nexport function castToPromise<T>(input: Promise<T> | Observable<T>, fromServiceName: string = ''): Promise<T> {\r\n  let promise: any = input;\r\n\r\n  if (input instanceof Promise) {\r\n    // if it's already a Promise then return it\r\n    return input;\r\n  } else if (input instanceof Observable) {\r\n    promise = input.first().toPromise();\r\n    if (!(promise instanceof Promise)) {\r\n      promise = input.take(1).toPromise();\r\n    }\r\n    if (!(promise instanceof Promise)) {\r\n      throw new Error(\r\n        `Something went wrong, Angular-Slickgrid ${fromServiceName} is not able to convert the Observable into a Promise.\r\n        If you are using Angular HttpClient, you could try converting your http call to a Promise with \".toPromise()\"\r\n        for example::  this.http.post('graphql', { query: graphqlQuery }).toPromise()\r\n        `);\r\n    }\r\n  }\r\n\r\n  return promise;\r\n}\r\n\r\n/**\r\n * Uses the logic function to find an item in an array or returns the default\r\n * value provided (empty object by default)\r\n * @param any[] array the array to filter\r\n * @param function logic the logic to find the item\r\n * @param any [defaultVal={}] the default value to return\r\n * @return object the found object or deafult value\r\n */\r\nexport function findOrDefault(array: any[], logic: (item: any) => boolean, defaultVal = {}): any {\r\n  return array.find(logic) || defaultVal;\r\n}\r\n\r\n/**\r\n  * Take a number (or a string) and display it as a formatted decimal string with defined minimum and maximum decimals\r\n  * @param input\r\n  * @param minDecimal\r\n  * @param maxDecimal\r\n  */\r\nexport function decimalFormatted(input: number | string, minDecimal?: number, maxDecimal?: number) {\r\n  if (isNaN(+input)) {\r\n    return input;\r\n  }\r\n\r\n  const minDec = (minDecimal === undefined) ? 2 : minDecimal;\r\n  const maxDec = (maxDecimal === undefined) ? 2 : maxDecimal;\r\n  let amount = String(Math.round(+input * Math.pow(10, maxDec)) / Math.pow(10, maxDec));\r\n\r\n  if (amount.indexOf('.') < 0) {\r\n    amount += '.';\r\n  }\r\n  while ((amount.length - amount.indexOf('.')) <= minDec) {\r\n    amount += '0';\r\n  }\r\n  return amount;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent moment.js format\r\n * refer to moment.js for the format standard used: https://momentjs.com/docs/#/parsing/string-format/\r\n * @param fieldType\r\n */\r\nexport function mapMomentDateFormatWithFieldType(fieldType: FieldType): string {\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'YYYY-MM-DD HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'YYYY-MM-DD hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'YYYY-MM-DD hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'MM/DD/YYYY';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'M/D/YY';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'MM/DD/YYYY HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'MM/DD/YYYY hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'MM/DD/YYYY hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'M/D/YY H:m:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'M/D/YY h:m:s a';\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'YYYY-MM-DD';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent Flatpickr format\r\n * refer to Flatpickr for the format standard used: https://chmln.github.io/flatpickr/formatting/#date-formatting-tokens\r\n * also note that they seem very similar to PHP format (except for am/pm): http://php.net/manual/en/function.date.php\r\n * @param fieldType\r\n */\r\nexport function mapFlatpickrDateFormatWithFieldType(fieldType: FieldType): string {\r\n  /*\r\n    d: Day of the month, 2 digits with leading zeros\t01 to 31\r\n    D: A textual representation of a day\tMon through Sun\r\n    l: (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday\r\n    j: Day of the month without leading zeros\t1 to 31\r\n    J: Day of the month without leading zeros and ordinal suffix\t1st, 2nd, to 31st\r\n    w: Numeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday)\r\n    F: A full textual representation of a month\tJanuary through December\r\n    m: Numeric representation of a month, with leading zero\t01 through 12\r\n    n: Numeric representation of a month, without leading zeros\t1 through 12\r\n    M: A short textual representation of a month\tJan through Dec\r\n    U: The number of seconds since the Unix Epoch\t1413704993\r\n    y: A two digit representation of a year\t99 or 03\r\n    Y: A full numeric representation of a year, 4 digits\t1999 or 2003\r\n    H: Hours (24 hours)\t00 to 23\r\n    h: Hours\t1 to 12\r\n    i: Minutes\t00 to 59\r\n    S: Seconds, 2 digits\t00 to 59\r\n    s: Seconds\t0, 1 to 59\r\n    K: AM/PM\tAM or PM\r\n  */\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'Y-m-d H:i:S';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'Y-m-d h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'Y-m-d h:i:S K';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'm/d/Y';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'm/d/y';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'm/d/Y H:i:S';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'm/d/Y h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'm/d/Y h:i:s K';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'm/d/y H:i:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'm/d/y h:i:s K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'Z';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'Y-m-d';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operators (ex.: <= is \"le\", > is \"gt\")\r\n * @param string operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorType(operator: string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (operator) {\r\n    case '<':\r\n      map = OperatorType.lessThan;\r\n      break;\r\n    case '<=':\r\n      map = OperatorType.lessThanOrEqual;\r\n      break;\r\n    case '>':\r\n      map = OperatorType.greaterThan;\r\n      break;\r\n    case '>=':\r\n      map = OperatorType.greaterThanOrEqual;\r\n      break;\r\n    case '<>':\r\n    case '!=':\r\n    case 'neq':\r\n    case 'NEQ':\r\n      map = OperatorType.notEqual;\r\n      break;\r\n    case '*':\r\n    case '.*':\r\n    case 'startsWith':\r\n      map = OperatorType.startsWith;\r\n      break;\r\n    case '*.':\r\n    case 'endsWith':\r\n      map = OperatorType.endsWith;\r\n      break;\r\n    case '=':\r\n    case '==':\r\n    case 'eq':\r\n    case 'EQ':\r\n      map = OperatorType.equal;\r\n      break;\r\n    case 'in':\r\n    case 'IN':\r\n      map = OperatorType.in;\r\n      break;\r\n    case 'notIn':\r\n    case 'NIN':\r\n    case 'NOT_IN':\r\n      map = OperatorType.notIn;\r\n      break;\r\n    default:\r\n      map = OperatorType.contains;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operator by a Filter Type\r\n * For example a multiple-select typically uses 'IN' operator\r\n * @param operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorByFieldType(fieldType: FieldType | string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.string:\r\n    case FieldType.unknown:\r\n      map = OperatorType.contains;\r\n      break;\r\n    case FieldType.float:\r\n    case FieldType.number:\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    case FieldType.date:\r\n    case FieldType.dateUtc:\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n    case FieldType.dateTimeIsoAmPm:\r\n    case FieldType.dateTimeIsoAM_PM:\r\n    case FieldType.dateUs:\r\n    case FieldType.dateUsShort:\r\n    case FieldType.dateTimeUs:\r\n    case FieldType.dateTimeUsAmPm:\r\n    case FieldType.dateTimeUsAM_PM:\r\n    case FieldType.dateTimeUsShort:\r\n    case FieldType.dateTimeUsShortAmPm:\r\n    case FieldType.dateTimeUsShortAM_PM:\r\n    default:\r\n      map = OperatorType.equal;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Parse a date passed as a string and return a Date object (if valid)\r\n * @param inputDateString\r\n * @returns string date formatted\r\n */\r\nexport function parseUtcDate(inputDateString: string, useUtc: boolean): string | null {\r\n  let date = null;\r\n\r\n  if (/^[0-9\\-\\/]*$/.test(inputDateString)) {\r\n    // get the UTC datetime with moment.js but we need to decode the value so that it's valid text\r\n    const dateString = decodeURIComponent(inputDateString);\r\n    const dateMoment = moment(new Date(dateString));\r\n    if (dateMoment.isValid() && dateMoment.year().toString().length === 4) {\r\n      date = (useUtc) ? dateMoment.utc().format() : dateMoment.format();\r\n    }\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\n/**\r\n * Sanitize, return only the text without HTML tags\r\n * @input htmlString\r\n * @return text\r\n */\r\nexport function sanitizeHtmlToText(htmlString: string) {\r\n  const temp = document.createElement('div');\r\n  temp.innerHTML = htmlString;\r\n  return temp.textContent || temp.innerText;\r\n}\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string\r\n * @returns string\r\n */\r\nexport function titleCase(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Converts a string to camel case\r\n * @param str the string to convert\r\n * @return the string in camel case\r\n */\r\nexport function toCamelCase(str: string): string {\r\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w|[\\s+\\-_\\/])/g, (match: string, offset: number) => {\r\n    // remove white space or hypens or underscores\r\n    if (/[\\s+\\-_\\/]/.test(match)) {\r\n      return '';\r\n    }\r\n\r\n    return offset === 0 ? match.toLowerCase() : match.toUpperCase();\r\n  });\r\n}\r\n\r\n/**\r\n * Converts a string to kebab (hypen) case\r\n * @param str the string to convert\r\n * @return the string in kebab case\r\n */\r\nexport function toKebabCase(str: string): string {\r\n  return toCamelCase(str).replace(/([A-Z])/g, '-$1').toLowerCase();\r\n}\r\n",
    "import * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport function compareDates(value1, value2, format, sortDirection, strict?: boolean) {\r\n  let diff = 0;\r\n\r\n  if (value1 === null || value1 === '' || !moment(value1, format, strict).isValid()) {\r\n    diff = -1;\r\n  } else if (value2 === null || value2 === '' || !moment(value2, format, strict).isValid()) {\r\n    diff = 1;\r\n  } else {\r\n    const date1 = moment(value1, format, strict);\r\n    const date2 = moment(value2, format, strict);\r\n    diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);\r\n  }\r\n\r\n  return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));\r\n}\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nimport { compareDates } from './compareDateUtility';\r\n\r\nexport const dateSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, moment.ISO_8601, sortDirection);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const numericSorter: Sorter = (value1, value2, sortDirection) => {\r\n  const x = (isNaN(value1) || value1 === '' || value1 === null) ? -99e+10 : parseFloat(value1);\r\n  const y = (isNaN(value2) || value2 === '' || value2 === null) ? -99e+10 : parseFloat(value2);\r\n  return sortDirection * (x === y ? 0 : (x > y ? 1 : -1));\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const stringSorter: Sorter = (value1, value2, sortDirection) => {\r\n  let position;\r\n  if (value1 === null) {\r\n    position = -1;\r\n  } else if (value2 === null) {\r\n    position = 1;\r\n  } else if (value1 === value2) {\r\n    position = 0;\r\n  } else if (sortDirection) {\r\n    position = value1 < value2 ? -1 : 1;\r\n  } else if (!sortDirection) {\r\n    position = value1 < value2 ? 1 : -1;\r\n  }\r\n  return sortDirection * position;\r\n};\r\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\nimport { dateUsShortSorter } from './dateUsShortSorter';\nimport { dateSorter } from './dateSorter';\nimport { dateIsoSorter } from './dateIsoSorter';\nimport { dateUsSorter } from './dateUsSorter';\nimport { numericSorter } from './numericSorter';\nimport { stringSorter } from './stringSorter';\n\nexport const Sorters = {\n  date: dateSorter,\n  dateIso: dateIsoSorter,\n  dateUs: dateUsSorter,\n  dateUsShort: dateUsShortSorter,\n  numeric: numericSorter,\n  string: stringSorter\n};\n",
    "import { FieldType } from './../models/index';\r\nimport { Sorters } from './index';\r\n\r\nexport function sortByFieldType(value1: any, value2: any, fieldType: FieldType, sortDirection: number) {\r\n  let sortResult = 0;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.number:\r\n      sortResult = Sorters.numeric(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.date:\r\n      sortResult = Sorters.date(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateIso:\r\n      sortResult = Sorters.dateIso(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUs:\r\n      sortResult = Sorters.dateUs(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      sortResult = Sorters.dateUsShort(value1, value2, sortDirection);\r\n      break;\r\n    default:\r\n      sortResult = Sorters.string(value1, value2, sortDirection);\r\n      break;\r\n  }\r\n\r\n  return sortResult;\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  CollectionFilterBy,\r\n  CollectionSortBy,\r\n  FieldType,\r\n  OperatorType,\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\n\r\n@Injectable()\r\nexport class CollectionService {\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /**\r\n   * Filter items from a collection\r\n   * @param collection\r\n   * @param filterBy\r\n   */\r\n  filterCollection(collection: any[], filterBy: CollectionFilterBy): any[] {\r\n    let filteredCollection: any[] = [];\r\n\r\n    if (filterBy) {\r\n      const property = filterBy.property || '';\r\n      const operator = filterBy.operator || OperatorType.equal;\r\n      // just check for undefined since the filter value could be null, 0, '', false etc\r\n      const value = typeof filterBy.value === 'undefined' ? '' : filterBy.value;\r\n\r\n      switch (operator) {\r\n        case OperatorType.equal:\r\n          filteredCollection = collection.filter((item) => item[property] === value);\r\n          break;\r\n        case OperatorType.in:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) !== -1);\r\n          break;\r\n        case OperatorType.notIn:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) === -1);\r\n          break;\r\n        case OperatorType.contains:\r\n          filteredCollection = collection.filter((item) => value.indexOf(item[property]) !== -1);\r\n          break;\r\n        default:\r\n          filteredCollection = collection.filter((item) => item[property] !== value);\r\n      }\r\n    }\r\n\r\n    return filteredCollection;\r\n  }\r\n\r\n  /**\r\n   * Sort items in a collection\r\n   * @param collection\r\n   * @param sortBy\r\n   * @param enableTranslateLabel\r\n   */\r\n  sortCollection(collection: any[], sortBy: CollectionSortBy, enableTranslateLabel?: boolean): any[] {\r\n    let sortedCollection: any[] = [];\r\n\r\n    if (sortBy) {\r\n      const property = sortBy.property || '';\r\n      const sortDirection = sortBy.hasOwnProperty('sortDesc') ? (sortBy.sortDesc ? -1 : 1) : 1;\r\n      const fieldType = sortBy.fieldType || FieldType.string;\r\n\r\n      sortedCollection = collection.sort((dataRow1: any, dataRow2: any) => {\r\n        const value1 = (enableTranslateLabel) ? this.translate.instant(dataRow1[property] || ' ') : dataRow1[property];\r\n        const value2 = (enableTranslateLabel) ? this.translate.instant(dataRow2[property] || ' ') : dataRow2[property];\r\n        const result = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n        return result;\r\n      });\r\n    }\r\n\r\n    return sortedCollection;\r\n  }\r\n}\r\n",
    "import { FilterCondition, FilterConditionOption } from './../models/index';\r\n\r\nfunction parseBoolean(str: number | string) {\r\n  return /(true|1)/i.test(str + '');\r\n}\r\n\r\nexport const booleanFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  return parseBoolean(options.cellValue) === parseBoolean(searchTerm);\r\n};\r\n",
    "export const testFilterCondition = (operator: string, value1: any, value2: any): boolean => {\n  switch (operator) {\n    case '<':\n    case 'LT': return (value1 < value2);\n    case '<=':\n    case 'LE': return (value1 <= value2);\n    case '>':\n    case 'GT': return (value1 > value2);\n    case '>=':\n    case 'GE': return (value1 >= value2);\n    case '!=':\n    case '<>':\n    case 'NE': return (value1 !== value2);\n    case '=':\n    case '==':\n    case 'EQ': return (value1 === value2);\n    case 'IN': return ((value2 && value2.includes) ? (value2.includes(value1)) : false);\n    case 'NIN':\n    case 'NOT_IN':\n      return ((value2 && value2.includes) ? (!value2.includes(value1)) : false);\n    case 'IN_CONTAINS':\n      if (value2 && Array.isArray(value2) && value2.findIndex) {\n        return ((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);\n      }\n      return false;\n    case 'NIN_CONTAINS':\n    case 'NOT_IN_CONTAINS':\n    if (value2 && Array.isArray(value2) && value2.findIndex) {\n      return !((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);\n    }\n    return false;\n}\nreturn true;\n};\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  const filterSearchType = options.filterSearchType || FieldType.dateIso;\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(filterSearchType);\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerm, searchDateFormat, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue);\r\n  const dateSearch = moment(searchTerm);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateUtcFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerms = Array.isArray(options.searchTerms) && options.searchTerms[0] || [];\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(options.filterSearchType || options.fieldType);\r\n  if (!moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerms[0], searchDateFormat, true).isValid()) {\r\n    return true;\r\n  }\r\n  const dateCell = moment(options.cellValue, moment.ISO_8601, true);\r\n  const dateSearch = moment(searchTerms[0], searchDateFormat, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const collectionSearchFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // multiple-select will always return text, so we should make our cell values text as well\r\n  const cellValue = options.cellValue + '';\r\n\r\n  return testFilterCondition(options.operator || 'IN', cellValue, options.searchTerms || []);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const numberFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const cellValue = parseFloat(options.cellValue);\r\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || 0;\r\n  if (typeof searchTerm === 'string') {\r\n    searchTerm = parseFloat(searchTerm);\r\n  }\r\n\r\n  if (!searchTerm && (!options.operator || options.operator === '')) {\r\n    return true;\r\n  }\r\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption, OperatorType } from '../models/index';\nimport { testFilterCondition } from './filterUtilities';\n\nexport const stringFilterCondition: FilterCondition = (options: FilterConditionOption) => {\n  // make sure the cell value is a string by casting it when possible\n  options.cellValue = (options.cellValue === undefined || options.cellValue === null) ? '' : options.cellValue.toString();\n\n  // make both the cell value and search value lower for case insensitive comparison\n  const cellValue = options.cellValue.toLowerCase();\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || '';\n  if (typeof searchTerm === 'string') {\n    searchTerm = searchTerm.toLowerCase();\n  }\n\n  if (options.operator === '*' || options.operator === OperatorType.endsWith) {\n    return cellValue.endsWith(searchTerm);\n  } else if ((options.operator === '' && options.cellValueLastChar === '*') || options.operator === OperatorType.startsWith) {\n    return cellValue.startsWith(searchTerm);\n  } else if (options.operator === '') {\n    return cellValue.includes(searchTerm);\n  }\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\n};\n",
    "import { booleanFilterCondition } from './booleanFilterCondition';\nimport { dateFilterCondition } from './dateFilterCondition';\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\nimport { FilterConditionOption } from './../models/filterConditionOption.interface';\nimport { FilterCondition } from '../models/filterCondition.interface';\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\nimport { numberFilterCondition } from './numberFilterCondition';\nimport { stringFilterCondition } from './stringFilterCondition';\nimport { FieldType } from '../models/index';\n\nexport const executeMappedCondition: FilterCondition = (options: FilterConditionOption) => {\n  // when using a multi-select ('IN' operator) we will not use the field type but instead go directly with a collection search\n  const operator = options.operator && options.operator.toUpperCase();\n  if (options && options.operator && (operator === 'IN' || operator === 'NIN' || operator === 'IN_CONTAINS' || operator === 'NIN_CONTAINS')) {\n    return collectionSearchFilterCondition(options);\n  }\n\n  // execute the mapped type, or default to String condition check\n  switch (options.fieldType) {\n    case FieldType.boolean:\n      return booleanFilterCondition(options);\n    case FieldType.date:\n      return dateFilterCondition(options);\n    case FieldType.dateUtc:\n      return dateUtcFilterCondition(options);\n    case FieldType.dateIso:\n      return dateIsoFilterCondition(options);\n    case FieldType.dateUs:\n    case FieldType.dateTimeUs:\n      return dateUsFilterCondition(options);\n    case FieldType.dateUsShort:\n    case FieldType.dateTimeUsShort:\n      return dateUsShortFilterCondition(options);\n    case FieldType.number:\n      return numberFilterCondition(options);\n    case FieldType.string:\n    default:\n      return stringFilterCondition(options);\n  }\n};\n",
    "import { FilterConditionOption } from './../models/filterConditionOption.interface';\r\nimport { booleanFilterCondition } from './booleanFilterCondition';\r\nimport { dateFilterCondition } from './dateFilterCondition';\r\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\r\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\r\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\r\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\r\nimport { executeMappedCondition } from './executeMappedCondition';\r\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { numberFilterCondition } from './numberFilterCondition';\r\nimport { stringFilterCondition } from './stringFilterCondition';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const FilterConditions = {\r\n  executeMappedCondition,\r\n  booleanFilter: booleanFilterCondition,\r\n  collectionSearchFilter: collectionSearchFilterCondition,\r\n  dateFilter: dateFilterCondition,\r\n  dateIsoFilter: dateIsoFilterCondition,\r\n  dateUtcFilter: dateUtcFilterCondition,\r\n  dateUsFilter: dateUsFilterCondition,\r\n  dateUsShortFilter: dateUsShortFilterCondition,\r\n  numberFilter: numberFilterCondition,\r\n  stringFilter: stringFilterCondition,\r\n  testFilter: testFilterCondition\r\n};\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { mapFlatpickrDateFormatWithFieldType } from '../services/utilities';\r\nimport { Column, Filter, FilterArguments, FilterCallback, FieldType, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\r\n\r\n// importing Flatpickr works better with a 'require'\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class CompoundDateFilter implements Filter {\r\n  private _clearFilterTriggered = false;\r\n  private $filterElm: any;\r\n  private $filterInputElm: any;\r\n  private $selectOperatorElm: any;\r\n  private _currentValue: string;\r\n  private _operator: OperatorType | OperatorString;\r\n  flatInstance: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  set operator(op: OperatorType | OperatorString) {\r\n    this._operator = op;\r\n  }\r\n  get operator(): OperatorType | OperatorString {\r\n    return this._operator || OperatorType.empty;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (args) {\r\n      this.grid = args.grid;\r\n      this.callback = args.callback;\r\n      this.columnDef = args.columnDef;\r\n      this.operator = args.operator || '';\r\n      this.searchTerms = args.searchTerms || [];\r\n\r\n      // date input can only have 1 search term, so we will use the 1st array index if it exist\r\n      const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n      // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n      // and initialize it if searchTerm is filled\r\n      this.$filterElm = this.createDomElement(searchTerm);\r\n\r\n      // step 3, subscribe to the keyup event and run the callback when that happens\r\n      // also add/remove \"filled\" class for styling purposes\r\n      this.$filterInputElm.keyup((e: any) => {\r\n        this.onTriggerEvent(e);\r\n      });\r\n      this.$selectOperatorElm.change((e: any) => {\r\n        this.onTriggerEvent(e);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.flatInstance && this.$selectOperatorElm) {\r\n      this._clearFilterTriggered = true;\r\n      this.searchTerms = [];\r\n      this.$selectOperatorElm.val(0);\r\n      this.flatInstance.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm[]) {\r\n    if (values && Array.isArray(values)) {\r\n      this.flatInstance.setDate(values[0]);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n  private buildDatePickerInput(searchTerm?: SearchTerm) {\r\n    const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\r\n    const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnDef.type || FieldType.dateUtc);\r\n    let currentLocale = this.translate.currentLang || 'en';\r\n    if (currentLocale.length > 2) {\r\n      currentLocale = currentLocale.substring(0, 2);\r\n    }\r\n\r\n    const pickerOptions: any = {\r\n      defaultDate: searchTerm || '',\r\n      altInput: true,\r\n      altFormat: outputFormat,\r\n      dateFormat: inputFormat,\r\n      wrap: true,\r\n      closeOnSelect: true,\r\n      locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n      onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n        this._currentValue = dateStr;\r\n\r\n        // when using the time picker, we can simulate a keyup event to avoid multiple backend request\r\n        // since backend request are only executed after user start typing, changing the time should be treated the same way\r\n        if (pickerOptions.enableTime) {\r\n          this.onTriggerEvent(new CustomEvent('keyup'));\r\n        } else {\r\n          this.onTriggerEvent(undefined);\r\n        }\r\n      }\r\n    };\r\n\r\n    // add the time picker when format is UTC (Z) or has the 'h' (meaning hours)\r\n    if (outputFormat && (outputFormat === 'Z' || outputFormat.toLowerCase().includes('h'))) {\r\n      pickerOptions.enableTime = true;\r\n    }\r\n\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    const $filterInputElm: any = $(`<div class=\"flatpickr\"><input type=\"text\" class=\"form-control\" data-input placeholder=\"${placeholder}\"></div>`);\r\n    this.flatInstance = ($filterInputElm[0] && typeof $filterInputElm[0].flatpickr === 'function') ? $filterInputElm[0].flatpickr(pickerOptions) : null;\r\n    return $filterInputElm;\r\n  }\r\n\r\n  private buildSelectOperatorHtmlString() {\r\n    const optionValues = this.getOptionValues();\r\n    let optionValueString = '';\r\n    optionValues.forEach((option) => {\r\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\r\n    });\r\n\r\n    return `<select class=\"form-control\">${optionValueString}</select>`;\r\n  }\r\n\r\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\r\n    return [\r\n      { operator: '' as OperatorString, description: '' },\r\n      { operator: '=' as OperatorString, description: '' },\r\n      { operator: '<' as OperatorString, description: '' },\r\n      { operator: '<=' as OperatorString, description: '' },\r\n      { operator: '>' as OperatorString, description: '' },\r\n      { operator: '>=' as OperatorString, description: '' },\r\n      { operator: '<>' as OperatorString, description: '' }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  private createDomElement(searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\r\n    this.$filterInputElm = this.buildDatePickerInput(searchTerm);\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\r\n    const $containerInputGroup = $(`<div class=\"input-group flatpickr\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon input-group-prepend operator\"></div>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon input-group-prepend operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <div class=flatpickr>\r\n          <input type=\"text\" class=\"form-control\" data-input>\r\n        </div>\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    $containerInputGroup.append($operatorInputGroupAddon);\r\n    $containerInputGroup.append(this.$filterInputElm);\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append($containerInputGroup);\r\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\r\n    this.$filterInputElm.data('columnId', this.columnDef.id);\r\n\r\n    if (this.operator) {\r\n      this.$selectOperatorElm.val(this.operator);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterContainerElm.addClass('filled');\r\n      this._currentValue = searchTerm as string;\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  private loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  private onTriggerEvent(e: Event | undefined) {\r\n    if (this._clearFilterTriggered) {\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\r\n      this._clearFilterTriggered = false; // reset flag for next use\r\n    } else {\r\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\r\n      (this._currentValue) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (this._currentValue ? [this._currentValue] : null), operator: selectedOperator || '' });\r\n    }\r\n  }\r\n\r\n  private hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  private show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n}\r\n",
    "import { Inject } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FieldType } from './../models/index';\nimport { Column, Filter, FilterArguments, FilterCallback, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class CompoundInputFilter implements Filter {\n  private _clearFilterTriggered = false;\n  private $filterElm: any;\n  private $filterInputElm: any;\n  private $selectOperatorElm: any;\n  private _operator: OperatorType | OperatorString;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor(private translate: TranslateService) {}\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  set operator(op: OperatorType | OperatorString) {\n    this._operator = op;\n  }\n  get operator(): OperatorType | OperatorString {\n    return this._operator || OperatorType.empty;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.operator = args.operator;\n    this.searchTerms = args.searchTerms || [];\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\n    // and initialize it if searchTerms is filled\n    this.$filterElm = this.createDomElement(searchTerm);\n\n    // step 3, subscribe to the keyup event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterInputElm.keyup((e: any) => {\n      this.onTriggerEvent(e);\n    });\n    this.$selectOperatorElm.change((e: any) => {\n      this.onTriggerEvent(e);\n    });\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm && this.$selectOperatorElm) {\n      this._clearFilterTriggered = true;\n      this.searchTerms = [];\n      this.$selectOperatorElm.val(0);\n      this.$filterInputElm.val('');\n      this.onTriggerEvent(null);\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('keyup').remove();\n      this.$selectOperatorElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values && Array.isArray(values)) {\n      this.$filterElm.val(values[0]);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  private buildInputHtmlString() {\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\n    return `<input class=\"form-control\" type=\"text\" placeholder=\"${placeholder}\" />`;\n  }\n\n  private buildSelectOperatorHtmlString() {\n    const optionValues = this.getOptionValues();\n    let optionValueString = '';\n    optionValues.forEach((option) => {\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\n    });\n\n    return `<select class=\"form-control\">${optionValueString}</select>`;\n  }\n\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\n    const type = (this.columnDef.type && this.columnDef.type) ? this.columnDef.type : FieldType.string;\n    let optionValues = [];\n\n    switch (type) {\n      case FieldType.string:\n        optionValues = [\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\n          { operator: '=' as OperatorString, description: this.translate.instant('EQUALS') },\n          { operator: 'a*' as OperatorString, description: this.translate.instant('STARTS_WITH') },\n          { operator: '*z' as OperatorString, description: this.translate.instant('ENDS_WITH') },\n          /*\n          { operator: 'IN' as OperatorString, description: this.translate.instant('IN_COLLECTION_SEPERATED_BY_COMMA') },\n          { operator: 'NIN' as OperatorString, description: this.translate.instant('NOT_IN_COLLECTION_SEPERATED_BY_COMMA') },\n          */\n        ];\n        break;\n      default:\n        optionValues = [\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\n          { operator: '=' as OperatorString, description: '' },\n          { operator: '<' as OperatorString, description: '' },\n          { operator: '<=' as OperatorString, description: '' },\n          { operator: '>' as OperatorString, description: '' },\n          { operator: '>=' as OperatorString, description: '' },\n          { operator: '<>' as OperatorString, description: '' }];\n        break;\n    }\n\n    return optionValues;\n  }\n\n  /**\n   * Create the DOM element\n   */\n  private createDomElement(searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM Select dropdown for the Operator\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\n    this.$filterInputElm = $(this.buildInputHtmlString());\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\n    const $containerInputGroup = $(`<div class=\"input-group\"></div>`);\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon input-group-prepend operator\"></div>`);\n\n    /* the DOM element final structure will be\n      <div class=\"input-group\">\n        <div class=\"input-group-addon input-group-prepend operator\">\n          <select class=\"form-control\"></select>\n        </div>\n        <input class=\"form-control\" type=\"text\" />\n      </div>\n    */\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\n    $containerInputGroup.append($operatorInputGroupAddon);\n    $containerInputGroup.append(this.$filterInputElm);\n\n    // create the DOM element & add an ID and filter class\n    $filterContainerElm.append($containerInputGroup);\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\n\n    this.$filterInputElm.val(searchTerm);\n    this.$filterInputElm.data('columnId', this.columnDef.id);\n\n    if (this.operator) {\n      this.$selectOperatorElm.val(this.operator);\n    }\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterContainerElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\n      $filterContainerElm.appendTo($headerElm);\n    }\n\n    return $filterContainerElm;\n  }\n\n  private onTriggerEvent(e: Event | undefined) {\n    if (this._clearFilterTriggered) {\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\n      this._clearFilterTriggered = false; // reset flag for next use\n    } else {\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\n      const value = this.$filterInputElm.val();\n      (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (value ? [value] : null), operator: selectedOperator || '' });\n    }\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport {\n  Column,\n  ColumnFilter,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  OperatorString,\n  OperatorType,\n  SearchTerm\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP = 1;\n\nexport class CompoundSliderFilter implements Filter {\n  private _clearFilterTriggered = false;\n  private _elementRangeInputId: string;\n  private _elementRangeOutputId: string;\n  private _operator: OperatorType | OperatorString;\n  private $containerInputGroupElm: any;\n  private $filterElm: any;\n  private $filterInputElm: any;\n  private $selectOperatorElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor() { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  /** Getter for the Filter Generic Params */\n  private get filterParams(): any {\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};\n  }\n\n  /** Getter for the `filter` properties */\n  private get filterProperties(): ColumnFilter {\n    return this.columnDef && this.columnDef.filter || {};\n  }\n\n  set operator(op: OperatorType | OperatorString) {\n    this._operator = op;\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return this._operator || OperatorType.empty;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    if (args) {\n      this.grid = args.grid;\n      this.callback = args.callback;\n      this.columnDef = args.columnDef;\n      this.operator = args.operator || '';\n      this.searchTerms = args.searchTerms || [];\n\n      // define the input & slider number IDs\n      this._elementRangeInputId = `rangeInput_${this.columnDef.field}`;\n      this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}`;\n\n      // filter input can only have 1 search term, so we will use the 1st array index if it exist\n      const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n      // step 1, create the DOM Element of the filter which contain the compound Operator+Input\n      // and initialize it if searchTerm is filled\n      this.$filterElm = this.createDomElement(searchTerm);\n\n      // step 3, subscribe to the keyup event and run the callback when that happens\n      // also add/remove \"filled\" class for styling purposes\n      this.$filterInputElm.change((e: any) => {\n        this.onTriggerEvent(e);\n      });\n      this.$selectOperatorElm.change((e: any) => {\n        this.onTriggerEvent(e);\n      });\n\n      // if user chose to display the slider number on the right side, then update it every time it changes\n      // we need to use both \"input\" and \"change\" event to be all cross-browser\n      if (!this.filterParams.hideSliderNumber) {\n        this.$filterInputElm.on('input change', (e: { target: HTMLInputElement }) => {\n          const value = e && e.target && e.target.value || '';\n          if (value) {\n            document.getElementById(this._elementRangeOutputId).innerHTML = value;\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm && this.$selectOperatorElm) {\n      this._clearFilterTriggered = true;\n      this.searchTerms = [];\n      const clearedValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;\n      this.$selectOperatorElm.val(0);\n      this.$filterInputElm.val(clearedValue);\n      if (!this.filterParams.hideSliderNumber) {\n        this.$containerInputGroupElm.children('div.input-group-addon.input-group-append').children().last().html(clearedValue);\n      }\n      this.onTriggerEvent(undefined);\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values && Array.isArray(values)) {\n      this.$filterInputElm.val(values[0]);\n      this.$containerInputGroupElm.children('div.input-group-addon.input-group-append').children().last().html(values[0]);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /** Build HTML Template for the input range (slider) */\n  private buildTemplateHtmlString() {\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\n    const maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\n    const step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;\n\n    return `<input type=\"range\" id=\"${this._elementRangeInputId}\"\n              name=\"${this._elementRangeInputId}\"\n              defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n              class=\"form-control slider-filter-input range compound-slider\" />`;\n  }\n\n  /** Build HTML Template for the text (number) that is shown appended to the slider */\n  private buildTemplateSliderTextHtmlString() {\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\n\n    return `<div class=\"input-group-addon input-group-append slider-value\"><span class=\"input-group-text\" id=\"${this._elementRangeOutputId}\">${defaultValue}</span></div>`;\n  }\n\n  /** Build HTML Template select dropdown (operator) */\n  private buildSelectOperatorHtmlString() {\n    const optionValues = this.getOptionValues();\n    let optionValueString = '';\n    optionValues.forEach((option) => {\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\n    });\n\n    return `<select class=\"form-control\">${optionValueString}</select>`;\n  }\n\n  /** Get the available operator option values */\n  private getOptionValues(): { operator: OperatorString, description: string }[] {\n    return [\n      { operator: '' as OperatorString, description: '' },\n      { operator: '=' as OperatorString, description: '' },\n      { operator: '<' as OperatorString, description: '' },\n      { operator: '<=' as OperatorString, description: '' },\n      { operator: '>' as OperatorString, description: '' },\n      { operator: '>=' as OperatorString, description: '' },\n      { operator: '<>' as OperatorString, description: '' }\n    ];\n  }\n\n  /**\n   * Create the DOM element\n   */\n  private createDomElement(searchTerm?: SearchTerm) {\n    const searchTermInput = (searchTerm || '0') as string;\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM Select dropdown for the Operator\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\n    this.$filterInputElm = $(this.buildTemplateHtmlString());\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\n    this.$containerInputGroupElm = $(`<div class=\"input-group search-filter\"></div>`);\n    const $operatorInputGroupAddon = $(`<span class=\"input-group-addon input-group-prepend operator\"></span>`);\n\n    /* the DOM element final structure will be\n      <div class=\"input-group\">\n        <div class=\"input-group-addon input-group-prepend operator\">\n          <select class=\"form-control\"></select>\n        </div>\n        <input class=\"form-control\" type=\"text\" />\n        <div class=\"input-group-addon input-group-prepend\" id=\"rangeOuput_percentComplete\"><span class=\"input-group-text\">0</span></div>\n      </div>\n    */\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\n    this.$containerInputGroupElm.append($operatorInputGroupAddon);\n    this.$containerInputGroupElm.append(this.$filterInputElm);\n    if (!this.filterParams.hideSliderNumber) {\n      const $sliderTextInputAppendAddon = $(this.buildTemplateSliderTextHtmlString());\n      $sliderTextInputAppendAddon.children().html(searchTermInput);\n      this.$containerInputGroupElm.append($sliderTextInputAppendAddon);\n    }\n\n    // create the DOM element & add an ID and filter class\n    $filterContainerElm.append(this.$containerInputGroupElm);\n    $filterContainerElm.attr('id', `filter-${this.columnDef.field}`);\n\n    this.$filterInputElm.val(searchTermInput);\n    this.$filterInputElm.data('columnId', this.columnDef.field);\n\n    if (this.operator) {\n      this.$selectOperatorElm.val(this.operator);\n    }\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterContainerElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\n      $filterContainerElm.appendTo($headerElm);\n    }\n\n    return $filterContainerElm;\n  }\n\n  private onTriggerEvent(e: Event | undefined) {\n    if (this._clearFilterTriggered) {\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\n      this._clearFilterTriggered = false; // reset flag for next use\n    } else {\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\n      const value = this.$filterInputElm.val();\n      (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (value ? [value] : null), operator: selectedOperator || '' });\n    }\n  }\n}\n",
    "import {\r\n  Column,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class InputFilter implements Filter {\r\n  private _clearFilterTriggered = false;\r\n  private $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor() {}\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.operator || '';\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.keyup((e: any) => {\r\n      const value = e && e.target && e.target.value || '';\r\n      if (this._clearFilterTriggered) {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\r\n        this._clearFilterTriggered = false; // reset flag for next use\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.$filterElm) {\r\n      this._clearFilterTriggered = true;\r\n      this.searchTerms = [];\r\n      this.$filterElm.val('');\r\n      this.$filterElm.trigger('keyup');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString() {\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    return `<input type=\"text\" class=\"form-control search-filter\" placeholder=\"${placeholder}\">`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n\r\n    $filterElm.val(searchTerm);\r\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CollectionService } from './../services/collection.service';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  MultipleSelectOption,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n  SelectOption,\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class MultipleSelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n  defaultOptions: MultipleSelectOption;\n  isFilled = false;\n  labelName: string;\n  valueName: string;\n  enableTranslateLabel = false;\n\n  /**\n   * Initialize the Filter\n   */\n  constructor(private translate: TranslateService, private collectionService: CollectionService) {\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,  // input search term on top of the select option list\n      maxHeight: 200,\n      okButton: true,\n      addTitle: true, // show tooltip of all selected items while hovering the filter\n      countSelected: this.translate.instant('X_OF_Y_SELECTED'),\n      allSelected: this.translate.instant('ALL_SELECTED'),\n      selectAllText: this.translate.instant('SELECT_ALL'),\n      selectAllDelimiter: ['', ''], // remove default square brackets of default text \"[Select All]\" => \"Select All\"\n\n      // we will subscribe to the onClose event for triggering our callback\n      // also add/remove \"filled\" class for styling purposes\n      onClose: () => {\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\n          this.isFilled = true;\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\n        } else {\n          this.isFilled = false;\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\n        }\n        this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: selectedItems });\n      }\n    };\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.in;\n  }\n\n  /**\n   * Initialize the filter template\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let newCollection = this.columnDef.filter.collection || [];\n\n    // user might want to filter certain items of the collection\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\n      const filterBy = this.columnDef.filter.collectionFilterBy;\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\n      const sortBy = this.columnDef.filter.collectionSortBy;\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString(newCollection);\n\n    // step 2, create the DOM Element of the filter & pre-load search terms\n    // also subscribe to the onClose event\n    this.createDomElement(filterTemplate);\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\n      this.$filterElm.multipleSelect('setSelects', []);\n      this.$filterElm.removeClass('filled');\n      this.searchTerms = [];\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off().remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values) {\n      this.$filterElm.multipleSelect('setSelects', values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString(optionCollection: any[]) {\n    let options = '';\n    optionCollection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.multipleSelect, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const selected = (this.findValueInSearchTerms(option[this.valueName]) >= 0) ? 'selected' : '';\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n\n      // html text of each select option\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\n\n      // if there's a search term, we will add the \"filled\" class for styling purposes\n      if (selected) {\n        this.isFilled = true;\n      }\n    });\n\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * Subscribe to the onClose event and run the callback when that happens\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    this.$filterElm = $(filterTemplate);\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\n    }\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterElm.data('columnId', this.columnDef.id);\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (this.isFilled) {\n      this.$filterElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\n      this.$filterElm.appendTo($headerElm);\n    }\n\n    // merge options & attach multiSelect\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\n    this.$filterElm = this.$filterElm.multipleSelect(options);\n  }\n\n  private findValueInSearchTerms(value: number | string): number {\n    if (this.searchTerms && Array.isArray(this.searchTerms)) {\n      for (let i = 0; i < this.searchTerms.length; i++) {\n        if (this.searchTerms[i] && this.searchTerms[i] === value) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n} from './../models/index';\nimport { Injectable } from '@angular/core';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class SelectFilter implements Filter {\n  private _clearFilterTriggered = false;\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor(private translate: TranslateService) {}\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\n      searchTerm = `${searchTerm}`;\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString();\n\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\n\n    // step 3, subscribe to the change event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterElm.change((e: any) => {\n      const value = e && e.target && e.target.value || '';\n      if (this._clearFilterTriggered) {\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\n        this._clearFilterTriggered = false; // reset flag for next use\n        this.$filterElm.removeClass('filled');\n      } else {\n        this.$filterElm.addClass('filled');\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\n      }\n    });\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm) {\n      this._clearFilterTriggered = true;\n      this.searchTerms = [];\n      this.$filterElm.val('');\n      this.$filterElm.trigger('change');\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm | SearchTerm[]) {\n    if (values) {\n      this.$filterElm.val(values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  private buildTemplateHtmlString() {\n    if (!this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the Select Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.select, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    const optionCollection = this.columnDef.filter.collection || [];\n    const labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    const valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let options = '';\n    optionCollection.forEach((option: any) => {\n      if (!option || (option[labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.select, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n      const labelKey = option.labelKey || option[labelName];\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n      options += `<option value=\"${option[valueName]}\">${textLabel}</option>`;\n    });\n    return `<select class=\"form-control search-filter\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    const $filterElm = $(filterTemplate);\n    const searchTermInput = (searchTerm || '') as string;\n\n    $filterElm.val(searchTermInput);\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\n    $filterElm.data('columnId', this.columnDef.id);\n\n    // append the new DOM element to the header row\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\n      $filterElm.appendTo($headerElm);\n    }\n\n    return $filterElm;\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport { Injectable } from '@angular/core';\nimport { CollectionService } from './../services/collection.service';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  MultipleSelectOption,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n  SelectOption,\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class SingleSelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n  defaultOptions: MultipleSelectOption;\n  isFilled = false;\n  labelName: string;\n  valueName: string;\n  enableTranslateLabel = false;\n\n  constructor(private translate: TranslateService, private collectionService: CollectionService) {\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,  // input search term on top of the select option list\n      maxHeight: 200,\n      single: true,\n      onClose: () => {\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\n        let selectedItem = '';\n\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\n          selectedItem = selectedItems[0] || null;\n          this.isFilled = true;\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\n        } else {\n          this.isFilled = false;\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\n        }\n        this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: (selectedItem ? [selectedItem] : null) });\n      }\n    };\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms;\n\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let newCollection = this.columnDef.filter.collection || [];\n\n    // user might want to filter certain items of the collection\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\n      const filterBy = this.columnDef.filter.collectionFilterBy;\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\n      const sortBy = this.columnDef.filter.collectionSortBy;\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    // also when the search term is a boolean or a number, we will convert it to a string\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\n      searchTerm = `${searchTerm}`;\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString(newCollection || [], searchTerm);\n\n    // step 2, create the DOM Element of the filter & pre-load search term\n    this.createDomElement(filterTemplate);\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\n      this.$filterElm.multipleSelect('setSelects', []);\n      this.$filterElm.removeClass('filled');\n      this.searchTerms = [];\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off().remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm | SearchTerm[]) {\n    if (values) {\n      values = Array.isArray(values) ? values : [values];\n      this.$filterElm.multipleSelect('setSelects', values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString(optionCollection: any[], searchTerm?: SearchTerm) {\n    let options = '';\n    optionCollection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.singleSelect, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const selected = (option[this.valueName] === searchTerm) ? 'selected' : '';\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n\n      // html text of each select option\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\n\n      // if there's a search term, we will add the \"filled\" class for styling purposes\n      if (selected) {\n        this.isFilled = true;\n      }\n    });\n\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * Subscribe to the onClose event and run the callback when that happens\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    this.$filterElm = $(filterTemplate);\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\n    }\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterElm.data('columnId', this.columnDef.id);\n\n    // append the new DOM element to the header row\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\n      this.$filterElm.appendTo($headerElm);\n    }\n\n    // merge options & attach multiSelect\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\n    this.$filterElm = this.$filterElm.multipleSelect(options);\n  }\n}\n",
    "import {\r\n  Column,\r\n  ColumnFilter,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nconst DEFAULT_MIN_VALUE = 0;\r\nconst DEFAULT_MAX_VALUE = 100;\r\nconst DEFAULT_STEP = 1;\r\n\r\nexport class SliderFilter implements Filter {\r\n  private _clearFilterTriggered = false;\r\n  private _elementRangeInputId: string;\r\n  private _elementRangeOutputId: string;\r\n  private $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  /** Getter for the Filter Generic Params */\r\n  private get filterParams(): any {\r\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};\r\n  }\r\n\r\n  /** Getter for the `filter` properties */\r\n  private get filterProperties(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (!args) {\r\n      throw new Error('[Aurelia-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // define the input & slider number IDs\r\n    this._elementRangeInputId = `rangeInput_${this.columnDef.field}`;\r\n    this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}`;\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the change event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.change((e: any) => {\r\n      const value = e && e.target && e.target.value || '';\r\n      if (this._clearFilterTriggered) {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\r\n        this._clearFilterTriggered = false; // reset flag for next use\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\r\n      }\r\n    });\r\n\r\n    // if user chose to display the slider number on the right side, then update it every time it changes\r\n    // we need to use both \"input\" and \"change\" event to be all cross-browser\r\n    if (!this.filterParams.hideSliderNumber) {\r\n      this.$filterElm.on('input change', (e: { target: HTMLInputElement }) => {\r\n        const value = e && e.target && e.target.value || '';\r\n        if (value) {\r\n          document.getElementById(this._elementRangeOutputId).innerHTML = value;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.$filterElm) {\r\n      this._clearFilterTriggered = true;\r\n      this.searchTerms = [];\r\n      const clearedValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;\r\n      this.$filterElm.children('input').val(clearedValue);\r\n      this.$filterElm.children('div.input-group-addon.input-group-append').children().html(clearedValue);\r\n      this.$filterElm.trigger('change');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString() {\r\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\r\n    const maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;\r\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\r\n    const step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;\r\n\r\n    if (this.filterParams.hideSliderNumber) {\r\n      return `\r\n      <div class=\"search-filter\">\r\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\r\n          name=\"${this._elementRangeInputId}\"\r\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\r\n          class=\"form-control slider-filter-input range\" />\r\n      </div>`;\r\n    }\r\n\r\n    return `\r\n      <div class=\"input-group search-filter\">\r\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\r\n          name=\"${this._elementRangeInputId}\"\r\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\r\n          class=\"form-control slider-filter-input range\" />\r\n        <div class=\"input-group-addon input-group-append slider-value\">\r\n          <span class=\"input-group-text\" id=\"${this._elementRangeOutputId}\">${defaultValue}</span>\r\n        </div>\r\n      </div>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n    const searchTermInput = (searchTerm || '0') as string;\r\n\r\n    $filterElm.children('input').val(searchTermInput);\r\n    $filterElm.children('div.input-group-addon.input-group-append').children().html(searchTermInput);\r\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n",
    "import { Column, Filter } from './../models/index';\r\nimport { CompoundDateFilter } from './compoundDateFilter';\r\nimport { CompoundInputFilter } from './compoundInputFilter';\r\nimport { CompoundSliderFilter } from './compoundSliderFilter';\r\nimport { InputFilter } from './inputFilter';\r\nimport { MultipleSelectFilter } from './multipleSelectFilter';\r\nimport { SelectFilter } from './selectFilter';\r\nimport { SingleSelectFilter } from './singleSelectFilter';\r\nimport { SliderFilter } from './sliderFilter';\r\n\r\nexport const Filters = {\r\n  /** Compound Date Filter (compound of Operator + Date picker) */\r\n  compoundDate: CompoundDateFilter,\r\n\r\n  /** Compound Input Filter (compound of Operator + Input) */\r\n  compoundInput: CompoundInputFilter,\r\n\r\n  /** Compound Slider Filter (compound of Operator + Slider) */\r\n  compoundSlider: CompoundSliderFilter,\r\n\r\n  /** Default Filter, input type text filter */\r\n  input: InputFilter,\r\n\r\n  /** Slider Filter */\r\n  slider: SliderFilter,\r\n\r\n  /** Multiple Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  multipleSelect: MultipleSelectFilter,\r\n\r\n  /** Single Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  singleSelect: SingleSelectFilter,\r\n\r\n  /** Select filter, which uses native DOM element select */\r\n  select: SelectFilter\r\n};\r\n",
    "import { DelimiterType, FileType, GridOption } from './models/index';\r\nimport { Filters } from './filters/index';\r\n\r\n/**\r\n * Options that can be passed to the Bootstrap-Datetimepicker directly\r\n */\r\nexport const GlobalGridOptions: GridOption = {\r\n  alwaysShowVerticalScroll: true,\r\n  autoEdit: false,\r\n  asyncEditorLoading: false,\r\n  autoFitColumnsOnFirstLoad: true,\r\n  autoResize: {\r\n    bottomPadding: 20,\r\n    minHeight: 180,\r\n    minWidth: 300,\r\n    sidePadding: 0\r\n  },\r\n  cellHighlightCssClass: 'slick-cell-modified',\r\n  checkboxSelector: {\r\n    cssClass: 'slick-cell-checkboxsel'\r\n  },\r\n  columnPicker: {\r\n    hideForceFitButton: false,\r\n    hideSyncResizeButton: true\r\n  },\r\n  datasetIdPropertyName: 'id',\r\n  defaultFilterPlaceholder: '&#128269;',\r\n  defaultFilter: Filters.input,\r\n  editable: false,\r\n  enableAutoResize: true,\r\n  enableCellNavigation: false,\r\n  enableColumnPicker: true,\r\n  enableColumnReorder: true,\r\n  enableExport: true,\r\n  enableGridMenu: true,\r\n  enableHeaderMenu: true,\r\n  enableMouseHoverHighlightRow: true,\r\n  enableSorting: true,\r\n  enableTextSelectionOnCells: true,\r\n  explicitInitialization: true,\r\n  exportOptions: {\r\n    delimiter: DelimiterType.comma,\r\n    exportWithFormatter: false,\r\n    filename: 'export',\r\n    format: FileType.csv,\r\n    groupingAggregatorRowText: '',\r\n    sanitizeDataExport: false,\r\n    useUtf8WithBom: true\r\n  },\r\n  forceFitColumns: false,\r\n  gridMenu: {\r\n    hideClearAllFiltersCommand: false,\r\n    hideClearAllSortingCommand: false,\r\n    hideExportCsvCommand: false,\r\n    hideExportTextDelimitedCommand: true,\r\n    hideForceFitButton: false,\r\n    hideRefreshDatasetCommand: false,\r\n    hideSyncResizeButton: true,\r\n    hideToggleFilterCommand: false,\r\n    iconCssClass: 'fa fa-bars',\r\n    iconClearAllFiltersCommand: 'fa fa-filter text-danger',\r\n    iconClearAllSortingCommand: 'fa fa-unsorted text-danger',\r\n    iconExportCsvCommand: 'fa fa-download',\r\n    iconExportTextDelimitedCommand: 'fa fa-download',\r\n    iconRefreshDatasetCommand: 'fa fa-refresh',\r\n    iconToggleFilterCommand: 'fa fa-random',\r\n    menuWidth: 16,\r\n    resizeOnShowHeaderRow: true\r\n  },\r\n  headerMenu: {\r\n    autoAlign: true,\r\n    autoAlignOffset: 12,\r\n    minWidth: 140,\r\n    iconSortAscCommand: 'fa fa-sort-asc',\r\n    iconSortDescCommand: 'fa fa-sort-desc',\r\n    iconColumnHideCommand: 'fa fa-times',\r\n    hideColumnHideCommand: false,\r\n    hideSortCommands: false\r\n  },\r\n  headerRowHeight: 35,\r\n  multiColumnSort: true,\r\n  numberedMultiColumnSort: true,\r\n  tristateMultiColumnSort: false,\r\n  sortColNumberInSeparateSpan: true,\r\n  suppressActiveCellChangeOnEdit: true,\r\n  pagination: {\r\n    pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\r\n    pageSize: 25,\r\n    totalItems: 0\r\n  },\r\n  rowHeight: 35,\r\n  showHeaderRow: false,\r\n  topPanelHeight: 35\r\n};\r\n",
    "import { GlobalGridOptions } from './global-grid-options';\r\n\r\nexport class SlickgridConfig {\r\n  options: any;\r\n\r\n  constructor() {\r\n    this.options = GlobalGridOptions;\r\n  }\r\n}\r\n",
    "import { Injector, Injectable } from '@angular/core';\nimport { Filter } from '../models/filter.interface';\nimport { ColumnFilter } from '../models';\nimport { SlickgridConfig } from '../slickgrid-config';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CollectionService } from '../services/collection.service';\n\n@Injectable()\nexport class FilterFactory {\n  /**\n   * The options from the SlickgridConfig\n   */\n  private _options: any;\n\n  constructor(private config: SlickgridConfig, private translate: TranslateService, private collectionService: CollectionService) {\n    this._options = this.config.options;\n  }\n\n  // Uses the User model to create a new User\n  createFilter(columnFilter: ColumnFilter | undefined): Filter | undefined {\n    let filter: Filter | undefined;\n\n    if (columnFilter && columnFilter.model) {\n      filter = typeof columnFilter.model === 'function' ? new columnFilter.model(this.translate, this.collectionService) : columnFilter.model;\n    }\n\n    // fallback to the default filter\n    if (!filter && this._options.defaultFilter) {\n      filter = new this._options.defaultFilter(this.translate, this.collectionService);\n    }\n\n    return filter;\n  }\n}\n",
    "import { Component, Injectable } from '@angular/core';\r\nimport { castToPromise } from './utilities';\r\nimport { FilterConditions } from './../filter-conditions';\r\nimport {\r\n  Column,\r\n  ColumnFilter,\r\n  ColumnFilters,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallbackArg,\r\n  FieldType,\r\n  GridOption,\r\n  OperatorType,\r\n  CurrentFilter,\r\n  SearchTerm,\r\n  SlickEvent,\r\n  OperatorString\r\n} from './../models/index';\r\nimport { FilterFactory } from '../filters/filterFactory';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// using external non-typed js libraries\r\ndeclare var Slick: any;\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class FilterService {\r\n  private _eventHandler = new Slick.EventHandler();\r\n  private _slickSubscriber: SlickEvent;\r\n  private _filters: any[] = [];\r\n  private _columnFilters: ColumnFilters = {};\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _onFilterChangedOptions: any;\r\n  onFilterChanged = new Subject<CurrentFilter[]>();\r\n  onFilterCleared = new Subject<boolean>();\r\n\r\n  constructor(private filterFactory: FilterFactory) { }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  init(grid: any): void {\r\n    this._grid = grid;\r\n  }\r\n\r\n  /**\r\n   * Attach a backend filter hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   */\r\n  attachBackendOnFilter(grid: any) {\r\n    this._filters = [];\r\n    this._slickSubscriber = new Slick.Event();\r\n\r\n    // subscribe to the SlickGrid event and call the backend execution\r\n    this._slickSubscriber.subscribe(this.attachBackendOnFilterSubscribe.bind(this));\r\n\r\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\r\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\r\n      this.addFilterTemplateToHeaderRow(args);\r\n    });\r\n  }\r\n\r\n  async attachBackendOnFilterSubscribe(event: Event, args: any) {\r\n    if (!args || !args.grid) {\r\n      throw new Error('Something went wrong when trying to attach the \"attachBackendOnFilterSubscribe(event, args)\" function, it seems that \"args\" is not populated correctly');\r\n    }\r\n    const backendApi = this._gridOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.process || !backendApi.service) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    // keep start time & end timestamps & return it after process execution\r\n    const startTime = new Date();\r\n\r\n    // run a preProcess callback if defined\r\n    if (backendApi.preProcess) {\r\n      backendApi.preProcess();\r\n    }\r\n\r\n    // call the service to get a query back\r\n    const query = await backendApi.service.processOnFilterChanged(event, args);\r\n\r\n    // emit an onFilterChanged event\r\n    if (args && !args.clearFilterTriggered) {\r\n      this.emitFilterChanged('remote');\r\n    }\r\n\r\n    // the process could be an Observable (like HttpClient) or a Promise\r\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n    const observableOrPromise = backendApi.process(query);\r\n    const processResult = await castToPromise(observableOrPromise);\r\n    const endTime = new Date();\r\n\r\n    // from the result, call our internal post process to update the Dataset and Pagination info\r\n    if (processResult && backendApi.internalPostProcess) {\r\n      backendApi.internalPostProcess(processResult);\r\n    }\r\n\r\n    // send the response process to the postProcess callback\r\n    if (backendApi.postProcess !== undefined) {\r\n      if (processResult instanceof Object) {\r\n        processResult.statistics = {\r\n          startTime,\r\n          endTime,\r\n          executionTime: endTime.valueOf() - startTime.valueOf(),\r\n          totalItemCount: this._gridOptions && this._gridOptions.pagination && this._gridOptions.pagination.totalItems\r\n        };\r\n      }\r\n      backendApi.postProcess(processResult);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attach a local filter hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param dataView\r\n   */\r\n  attachLocalOnFilter(grid: any, dataView: any) {\r\n    this._filters = [];\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = new Slick.Event();\r\n\r\n    dataView.setFilterArgs({ columnFilters: this._columnFilters, grid: this._grid });\r\n    dataView.setFilter(this.customLocalFilter.bind(this, dataView));\r\n\r\n    this._slickSubscriber.subscribe((e: any, args: any) => {\r\n      const columnId = args.columnId;\r\n      if (columnId != null) {\r\n        dataView.refresh();\r\n      }\r\n      if (args && !args.clearFilterTriggered) {\r\n        this.emitFilterChanged('local');\r\n      }\r\n    });\r\n\r\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\r\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\r\n      this.addFilterTemplateToHeaderRow(args);\r\n    });\r\n  }\r\n\r\n  /** Clear the search filters (below the column titles) */\r\n  clearFilters() {\r\n    this._filters.forEach((filter: Filter) => {\r\n      if (filter && filter.clear) {\r\n        // clear element and trigger a change\r\n        filter.clear();\r\n      }\r\n    });\r\n\r\n    // we need to loop through all columnFilters and delete them 1 by 1\r\n    // only trying to clear columnFilter (without looping through) would not trigger a dataset change\r\n    for (const columnId in this._columnFilters) {\r\n      if (columnId && this._columnFilters[columnId]) {\r\n        delete this._columnFilters[columnId];\r\n      }\r\n    }\r\n\r\n    // we also need to refresh the dataView and optionally the grid (it's optional since we use DataView)\r\n    if (this._dataView) {\r\n      this._dataView.refresh();\r\n      this._grid.invalidate();\r\n      this._grid.render();\r\n    }\r\n\r\n    // emit an event when filters are all cleared\r\n    this.onFilterCleared.next(true);\r\n  }\r\n\r\n  customLocalFilter(dataView: any, item: any, args: any) {\r\n    for (const columnId of Object.keys(args.columnFilters)) {\r\n      const columnFilter = args.columnFilters[columnId];\r\n      const columnIndex = args.grid.getColumnIndex(columnId);\r\n      const columnDef = args.grid.getColumns()[columnIndex];\r\n      if (!columnDef) {\r\n        return false;\r\n      }\r\n      const fieldType = columnDef.type || FieldType.string;\r\n      const filterSearchType = (columnDef.filterSearchType) ? columnDef.filterSearchType : null;\r\n\r\n      let cellValue = item[columnDef.queryField || columnDef.queryFieldFilter || columnDef.field];\r\n\r\n      // if we find searchTerms use them but make a deep copy so that we don't affect original array\r\n      // we might have to overwrite the value(s) locally that are returned\r\n      // e.g: we don't want to operator within the search value, since it will fail filter condition check trigger afterward\r\n      const searchValues = (columnFilter && columnFilter.searchTerms) ? [...columnFilter.searchTerms] : null;\r\n\r\n      let fieldSearchValue = (Array.isArray(searchValues) && searchValues.length === 1) ? searchValues[0] : '';\r\n      fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\r\n\r\n      const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n      let operator = columnFilter.operator || ((matches) ? matches[1] : '');\r\n      const searchTerm = (!!matches) ? matches[2] : '';\r\n      const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\r\n\r\n      if (searchValues && searchValues.length > 1) {\r\n        fieldSearchValue = searchValues.join(',');\r\n      } else if (typeof fieldSearchValue === 'string') {\r\n        // escaping the search value\r\n        fieldSearchValue = fieldSearchValue.replace(`'`, `''`); // escape single quotes by doubling them\r\n        if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\r\n          operator = (operator === '*' || operator === '*z') ? OperatorType.endsWith : OperatorType.startsWith;\r\n        }\r\n      }\r\n\r\n      // no need to query if search value is empty\r\n      if (searchTerm === '' && (!searchValues || (Array.isArray(searchValues) && searchValues.length === 0))) {\r\n        return true;\r\n      }\r\n\r\n      // if search value has a regex match we will only keep the value without the operator\r\n      // in this case we need to overwrite the returned search values to truncate operator from the string search\r\n      if (Array.isArray(matches) && matches.length >= 1 && (Array.isArray(searchValues) && searchValues.length === 1)) {\r\n        searchValues[0] = searchTerm;\r\n      }\r\n\r\n      // filter search terms should always be string type (even though we permit the end user to input numbers)\r\n      // so make sure each term are strings, if user has some default search terms, we will cast them to string\r\n      if (searchValues && Array.isArray(searchValues)) {\r\n        for (let k = 0, ln = searchValues.length; k < ln; k++) {\r\n          // make sure all search terms are strings\r\n          searchValues[k] = ((searchValues[k] === undefined || searchValues[k] === null) ? '' : searchValues[k]) + '';\r\n        }\r\n      }\r\n\r\n      // when using localization (i18n), we should use the formatter output to search as the new cell value\r\n      if (columnDef && columnDef.params && columnDef.params.useFormatterOuputToFilter) {\r\n        const rowIndex = (dataView && typeof dataView.getIdxById === 'function') ? dataView.getIdxById(item.id) : 0;\r\n        cellValue = columnDef.formatter(rowIndex, columnIndex, cellValue, columnDef, item, this._grid);\r\n      }\r\n\r\n      // make sure cell value is always a string\r\n      if (typeof cellValue === 'number') {\r\n        cellValue = cellValue.toString();\r\n      }\r\n\r\n      const conditionOptions = {\r\n        fieldType,\r\n        searchTerms: searchValues,\r\n        cellValue,\r\n        operator,\r\n        cellValueLastChar: lastValueChar,\r\n        filterSearchType\r\n      };\r\n\r\n      if (!FilterConditions.executeMappedCondition(conditionOptions)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  dispose() {\r\n    this.disposeColumnFilters();\r\n\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    // unsubscribe local event\r\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\r\n      this._slickSubscriber.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispose of the filters, since it's a singleton, we don't want to affect other grids with same columns\r\n   */\r\n  disposeColumnFilters() {\r\n    // we need to loop through all columnFilters and delete them 1 by 1\r\n    // only trying to make columnFilter an empty (without looping) would not trigger a dataset change\r\n    for (const columnId in this._columnFilters) {\r\n      if (columnId && this._columnFilters[columnId]) {\r\n        delete this._columnFilters[columnId];\r\n      }\r\n    }\r\n\r\n    // also destroy each Filter instances\r\n    this._filters.forEach((filter, index) => {\r\n      if (filter && filter.destroy) {\r\n        filter.destroy(true);\r\n      }\r\n    });\r\n  }\r\n\r\n  getColumnFilters() {\r\n    return this._columnFilters;\r\n  }\r\n\r\n  getCurrentLocalFilters(): CurrentFilter[] {\r\n    const currentFilters: CurrentFilter[] = [];\r\n    if (this._columnFilters) {\r\n      for (const colId of Object.keys(this._columnFilters)) {\r\n        const columnFilter = this._columnFilters[colId];\r\n        const columnDef = columnFilter.columnDef;\r\n        const filter = { columnId: colId || '' } as CurrentFilter;\r\n\r\n        if (columnFilter && columnFilter.searchTerms) {\r\n          filter.searchTerms = columnFilter.searchTerms;\r\n        }\r\n        if (columnFilter.operator) {\r\n          filter.operator = columnFilter.operator;\r\n        }\r\n        if (Array.isArray(filter.searchTerms) && filter.searchTerms.length > 0 && filter.searchTerms[0] !== '') {\r\n          currentFilters.push(filter);\r\n        }\r\n      }\r\n    }\r\n    return currentFilters;\r\n  }\r\n\r\n  callbackSearchEvent(e: Event | undefined, args: FilterCallbackArg) {\r\n    if (args) {\r\n      const searchTerm = ((e && e.target) ? (e.target as HTMLInputElement).value : undefined);\r\n      const searchTerms = (args.searchTerms && Array.isArray(args.searchTerms)) ? args.searchTerms : (searchTerm ? [searchTerm] : undefined);\r\n      const columnDef = args.columnDef || null;\r\n      const columnId = columnDef ? (columnDef.id || '') : '';\r\n      const operator = args.operator || undefined;\r\n      const hasSearchTerms = searchTerms && Array.isArray(searchTerms);\r\n      const termsCount = hasSearchTerms && searchTerms.length;\r\n\r\n      if (!hasSearchTerms || termsCount === 0 || (termsCount === 1 && searchTerms[0] === '')) {\r\n        // delete the property from the columnFilters when it becomes empty\r\n        // without doing this, it would leave an incorrect state of the previous column filters when filtering on another column\r\n        delete this._columnFilters[columnId];\r\n      } else {\r\n        const colId = '' + columnId as string;\r\n        const colFilter: ColumnFilter = {\r\n          columnId: colId,\r\n          columnDef,\r\n          searchTerms,\r\n        };\r\n        if (operator) {\r\n          colFilter.operator = operator;\r\n        }\r\n        this._columnFilters[colId] = colFilter;\r\n      }\r\n\r\n      this.triggerEvent(this._slickSubscriber, {\r\n        clearFilterTriggered: args && args.clearFilterTriggered,\r\n        columnId,\r\n        columnDef: args.columnDef || null,\r\n        columnFilters: this._columnFilters,\r\n        operator,\r\n        searchTerms,\r\n        serviceOptions: this._onFilterChangedOptions,\r\n        grid: this._grid\r\n      }, e);\r\n    }\r\n  }\r\n\r\n  addFilterTemplateToHeaderRow(args: { column: Column; grid: any; node: any }) {\r\n    const columnDef = args.column;\r\n    const columnId = columnDef.id || '';\r\n\r\n    if (columnDef && columnId !== 'selector' && columnDef.filterable) {\r\n      let searchTerms: SearchTerm[] | undefined;\r\n      let operator: OperatorString | OperatorType;\r\n      const filter: Filter | undefined = this.filterFactory.createFilter(args.column.filter);\r\n      operator = (columnDef && columnDef.filter && columnDef.filter.operator) || (filter && filter.operator) || undefined;\r\n\r\n      if (this._columnFilters[columnDef.id]) {\r\n        searchTerms = this._columnFilters[columnDef.id].searchTerms || undefined;\r\n        operator = this._columnFilters[columnDef.id].operator || undefined;\r\n      } else if (columnDef.filter) {\r\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\r\n        // because of that we need to first get searchTerm(s) from the columnFilters (that is what the user last entered)\r\n        searchTerms = columnDef.filter.searchTerms || undefined;\r\n        this.updateColumnFilters(searchTerms, columnDef, operator);\r\n      }\r\n\r\n      const filterArguments: FilterArguments = {\r\n        grid: this._grid,\r\n        operator,\r\n        searchTerms,\r\n        columnDef,\r\n        callback: this.callbackSearchEvent.bind(this)\r\n      };\r\n\r\n      if (filter) {\r\n        filter.init(filterArguments);\r\n        const filterExistIndex = this._filters.findIndex((filt) => filter.columnDef.name === filt.columnDef.name);\r\n\r\n        // add to the filters arrays or replace it when found\r\n        if (filterExistIndex === -1) {\r\n          this._filters.push(filter);\r\n        } else {\r\n          this._filters[filterExistIndex] = filter;\r\n        }\r\n\r\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\r\n        // we need to also set again the values in the DOM elements if the values were set by a searchTerm(s)\r\n        if (searchTerms && filter.setValues) {\r\n          filter.setValues(searchTerms);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\r\n   * Other services, like Pagination, can then subscribe to it.\r\n   * @param sender\r\n   */\r\n  emitFilterChanged(sender: 'local' | 'remote') {\r\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      let currentFilters: CurrentFilter[] = [];\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentFilters) {\r\n        currentFilters = backendService.getCurrentFilters() as CurrentFilter[];\r\n      }\r\n      this.onFilterChanged.next(currentFilters);\r\n    } else if (sender === 'local') {\r\n      this.onFilterChanged.next(this.getCurrentLocalFilters());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When user passes an array of preset filters, we need to pre-populate each column filter searchTerm(s)\r\n   * The process is to loop through the preset filters array, find the associated column from columnDefinitions and fill in the filter object searchTerm(s)\r\n   * This is basically the same as if we would manually add searchTerm(s) to a column filter object in the column definition, but we do it programmatically.\r\n   * At the end of the day, when creating the Filter (DOM Element), it will use these searchTerm(s) so we can take advantage of that without recoding each Filter type (DOM element)\r\n   */\r\n  populateColumnFilterSearchTerms() {\r\n    if (this._gridOptions.presets && Array.isArray(this._gridOptions.presets.filters) && this._gridOptions.presets.filters.length > 0) {\r\n      const filters = this._gridOptions.presets.filters;\r\n      this._columnDefinitions.forEach((columnDef: Column) =>  {\r\n        // clear any columnDef searchTerms before applying Presets\r\n        if (columnDef.filter && columnDef.filter.searchTerms) {\r\n          delete columnDef.filter.searchTerms;\r\n        }\r\n\r\n        // from each presets, we will find the associated columnDef and apply the preset searchTerms & operator if there is\r\n        const columnPreset = filters.find((presetFilter: CurrentFilter) => {\r\n          return presetFilter.columnId === columnDef.id;\r\n        });\r\n        if (columnPreset && columnPreset.searchTerms && Array.isArray(columnPreset.searchTerms)) {\r\n          columnDef.filter = columnDef.filter || {};\r\n          columnDef.filter.operator = columnPreset.operator || columnDef.filter.operator || '';\r\n          columnDef.filter.searchTerms = columnPreset.searchTerms;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private updateColumnFilters(searchTerms: SearchTerm[] | undefined, columnDef: any, operator?: OperatorType | OperatorString) {\r\n    if (searchTerms && columnDef) {\r\n      // this._columnFilters.searchTerms = searchTerms;\r\n      this._columnFilters[columnDef.id] = {\r\n        columnId: columnDef.id,\r\n        columnDef,\r\n        searchTerms,\r\n        operator\r\n      };\r\n    }\r\n  }\r\n\r\n  private triggerEvent(slickEvent: any, args: any, e: any) {\r\n    slickEvent = slickEvent || new Slick.Event();\r\n\r\n    // event might have been created as a CustomEvent (e.g. CompoundDateFilter), without being a valid Slick.EventData.\r\n    // if so we will create a new Slick.EventData and merge it with that CustomEvent to avoid having SlickGrid errors\r\n    let event = e;\r\n    if (e && typeof e.isPropagationStopped !== 'function') {\r\n      event = $.extend({}, new Slick.EventData(), e);\r\n    }\r\n    slickEvent.notify(args, event, args.grid);\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  ExportOption,\n  FileType,\n  Formatter,\n  GridOption\n} from './../models/index';\nimport { addWhiteSpaces, htmlEntityDecode, sanitizeHtmlToText } from './../services/utilities';\nimport { Subject } from 'rxjs/Subject';\nimport { TextEncoder } from 'text-encoding-utf-8';\n\n// using external non-typed js libraries\ndeclare let Slick: any;\ndeclare let $: any;\n\nexport interface ExportColumnHeader {\n  key: string;\n  title: string;\n}\n\n@Injectable()\nexport class ExportService {\n  private _lineCarriageReturn = '\\n';\n  private _dataView: any;\n  private _grid: any;\n  private _exportQuoteWrapper: string;\n  private _columnHeaders: ExportColumnHeader[];\n  private _groupedHeaders: ExportColumnHeader[];\n  private _hasGroupedItems = false;\n  private _exportOptions: ExportOption;\n  onGridBeforeExportToFile = new Subject<boolean>();\n  onGridAfterExportToFile = new Subject<{ options: any }>();\n\n  constructor(private translate: TranslateService) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Export Service\n   * @param grid\n   * @param gridOptions\n   * @param dataView\n   */\n  init(grid: any, dataView: any): void {\n    this._grid = grid;\n    this._dataView = dataView;\n  }\n\n  /**\n   * Function to export the Grid result to an Excel CSV format using javascript for it to produce the CSV file.\n   * This is a WYSIWYG export to file output (What You See is What You Get)\n   *\n   * NOTES: The column position needs to match perfectly the JSON Object position because of the way we are pulling the data,\n   * which means that if any column(s) got moved in the UI, it has to be reflected in the JSON array output as well\n   *\n   * Example: exportToFile({ format: FileType.csv, delimiter: DelimiterType.comma })\n   */\n  exportToFile(options: ExportOption) {\n    this.onGridBeforeExportToFile.next(true);\n    this._exportOptions = $.extend(true, {}, this._gridOptions.exportOptions, options);\n\n    // get the CSV output from the grid data\n    const dataOutput = this.getDataOutput();\n\n    // trigger a download file\n    // wrap it into a setTimeout so that the EventAggregator has enough time to start a pre-process like showing a spinner\n    setTimeout(() => {\n      const downloadOptions = {\n        filename: `${this._exportOptions.filename}.${this._exportOptions.format}`,\n        csvContent: dataOutput,\n        format: this._exportOptions.format,\n        useUtf8WithBom: this._exportOptions.useUtf8WithBom\n      };\n      this.startDownloadFile(downloadOptions);\n      this.onGridAfterExportToFile.next({ options: downloadOptions });\n    }, 0);\n  }\n\n  // -----------------------\n  // Private functions\n  // -----------------------\n\n  getDataOutput(): string {\n    const columns = this._grid.getColumns() || [];\n    const delimiter = this._exportOptions.delimiter || '';\n    const format = this._exportOptions.format || '';\n    const groupByColumnHeader = this._exportOptions.groupingColumnHeaderTitle || this.translate.instant('GROUP_BY');\n\n    // a CSV needs double quotes wrapper, the other types do not need any wrapper\n    this._exportQuoteWrapper = (format === FileType.csv) ? '\"' : '';\n\n    // data variable which will hold all the fields data of a row\n    let outputDataString = '';\n\n    // get grouped column titles and if found, we will add a \"Group by\" column at the first column index\n    const grouping = this._dataView.getGrouping();\n    if (grouping && Array.isArray(grouping) && grouping.length > 0) {\n      this._hasGroupedItems = true;\n      outputDataString += `${groupByColumnHeader}` + delimiter;\n    } else {\n      this._hasGroupedItems = false;\n    }\n\n    // get all column headers\n    this._columnHeaders = this.getColumnHeaders(columns) || [];\n    if (this._columnHeaders && Array.isArray(this._columnHeaders) && this._columnHeaders.length > 0) {\n      // add the header row + add a new line at the end of the row\n      const outputHeaderTitles = this._columnHeaders.map((header) => {\n        return this._exportQuoteWrapper + header.title + this._exportQuoteWrapper;\n      });\n      outputDataString += (outputHeaderTitles.join(delimiter) + this._lineCarriageReturn);\n    }\n\n    // Populate the rest of the Grid Data\n    outputDataString += this.getAllGridRowData(columns, this._lineCarriageReturn);\n\n    return outputDataString;\n  }\n\n  /**\n   * Get all the grid row data and return that as an output string\n   */\n  getAllGridRowData(columns: Column[], lineCarriageReturn: string): string {\n    let outputDataString = '';\n    const lineCount = this._dataView.getLength();\n\n    // loop through all the grid rows of data\n    for (let rowNumber = 0; rowNumber < lineCount; rowNumber++) {\n      const itemObj = this._dataView.getItem(rowNumber);\n\n      if (itemObj != null) {\n        // Normal row (not grouped by anything) would have an ID which was predefined in the Grid Columns definition\n        if (itemObj.id != null) {\n          // get regular row item data\n          outputDataString += this.readRegularRowData(columns, rowNumber, itemObj);\n        } else if (this._hasGroupedItems && itemObj.__groupTotals === undefined) {\n          // get the group row\n          outputDataString += this.readGroupedTitleRow(itemObj) + this._exportOptions.delimiter;\n        } else if (itemObj.__groupTotals) {\n          // else if the row is a Group By and we have agreggators, then a property of '__groupTotals' would exist under that object\n          outputDataString += this.readGroupedTotalRow(columns, itemObj) + this._exportOptions.delimiter;\n        }\n        outputDataString += lineCarriageReturn;\n      }\n    }\n\n    return outputDataString;\n  }\n\n  /**\n   * Get all header titles and their keys, translate the title when required.\n   * @param columns of the grid\n   */\n  getColumnHeaders(columns: Column[]): ExportColumnHeader[] {\n    if (!columns || !Array.isArray(columns) || columns.length === 0) {\n      return null;\n    }\n    const columnHeaders = [];\n\n    // Populate the Column Header, pull the name defined\n    columns.forEach((columnDef) => {\n      const fieldName = (columnDef.headerKey) ? this.translate.instant(columnDef.headerKey) : columnDef.name;\n      const skippedField = columnDef.excludeFromExport || false;\n\n      // if column width is 0 then it's not evaluated since that field is considered hidden should not be part of the export\n      if ((columnDef.width ===  undefined || columnDef.width > 0) && !skippedField) {\n        columnHeaders.push({\n          key: columnDef.field || columnDef.id,\n          title: fieldName\n        });\n      }\n    });\n\n    return columnHeaders;\n  }\n\n  /**\n   * Get the data of a regular row (a row without grouping)\n   * @param row\n   * @param itemObj\n   */\n  readRegularRowData(columns: Column[], row: number, itemObj: any) {\n    let idx = 0;\n    let rowOutputString = '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n\n    for (let col = 0, ln = columns.length; col < ln; col++) {\n      const columnDef = columns[col];\n      const fieldId = columnDef.field || columnDef.id || '';\n\n      // skip excluded column\n      if (columnDef.excludeFromExport) {\n          continue;\n      }\n\n      // if we are grouping and are on 1st column index, we need to skip this column since it will be used later by the grouping text:: Group by [columnX]\n      if (this._hasGroupedItems && idx === 0) {\n        rowOutputString += `\"\"` + delimiter;\n      }\n\n      // does the user want to evaluate current column Formatter?\n      const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._exportOptions.exportWithFormatter;\n\n      // did the user provide a Custom Formatter for the export\n      const exportCustomFormatter: Formatter = (columnDef.exportCustomFormatter !== undefined) ? columnDef.exportCustomFormatter : undefined;\n\n      let itemData = '';\n\n      if (exportCustomFormatter) {\n        itemData = exportCustomFormatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\n      } else if (isEvaluatingFormatter && !!columnDef.formatter) {\n        itemData = columnDef.formatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\n      } else {\n        itemData = (itemObj[fieldId] === null || itemObj[fieldId] === undefined) ? '' : itemObj[fieldId];\n      }\n\n      // does the user want to sanitize the output data (remove HTML tags)?\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n        itemData = sanitizeHtmlToText(itemData);\n      }\n\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n      if (format === FileType.csv) {\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n      }\n\n      // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n      // to cancel that effect we can had = in front, ex: =\"1E06\"\n      const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\n\n      rowOutputString += keepAsStringWrapper + exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\n      idx++;\n    }\n\n    return rowOutputString;\n  }\n\n  /**\n   * Get the grouped title(s), for example if we grouped by salesRep, the returned result would be:: 'Sales Rep'\n   * @param itemObj\n   */\n  readGroupedTitleRow(itemObj: any) {\n    let groupName = sanitizeHtmlToText(itemObj.title);\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n\n    groupName = addWhiteSpaces(5 * itemObj.level) + groupName;\n\n    if (format === FileType.csv) {\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n      groupName = groupName.toString().replace(/\"/gi, `\"\"`);\n    }\n\n    // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n    // to cancel that effect we can had = in front, ex: =\"1E06\"\n    // const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\n\n    return /*keepAsStringWrapper +*/ exportQuoteWrapper + ' ' + groupName + exportQuoteWrapper + delimiter;\n  }\n\n  /**\n   * Get the grouped totals, these are set by Slick Aggregators.\n   * For example if we grouped by \"salesRep\" and we have a Sum Aggregator on \"sales\", then the returned output would be:: [\"Sum 123$\"]\n   * @param itemObj\n   */\n  readGroupedTotalRow(columns: Column[], itemObj: any) {\n    let exportExponentialWrapper = '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n    const groupingAggregatorRowText = this._exportOptions.groupingAggregatorRowText || '';\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n    let output = `${exportQuoteWrapper}${groupingAggregatorRowText}${exportQuoteWrapper}${delimiter}`;\n\n    columns.forEach((columnDef) => {\n      let itemData = '';\n\n      // if there's a groupTotalsFormatter, we will re-run it to get the exact same output as what is shown in UI\n      if (columnDef.groupTotalsFormatter) {\n        itemData = columnDef.groupTotalsFormatter(itemObj, columnDef);\n      }\n\n      // does the user want to sanitize the output data (remove HTML tags)?\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n        itemData = sanitizeHtmlToText(itemData);\n      }\n\n      if (format === FileType.csv) {\n        // when CSV we also need to escape double quotes twice, so a double quote \" becomes 2x double quotes \"\"\n        // and if we have a text of (number)E(number),\n        // we don't want excel to transform it into exponential (1.0E06) to cancel that effect we can had = in front, ex: =\"1E06\"\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n        exportExponentialWrapper = (itemData.match(/^\\s*\\d+E\\d+\\s*$/i)) ? '=' : '';\n      }\n      output += exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\n    });\n\n    return output;\n  }\n\n  /**\n   * Triggers download file with file format.\n   * IE(6-10) are not supported\n   * All other browsers will use plain javascript on client side to produce a file download.\n   * @param options\n   */\n  startDownloadFile(options: { filename: string, csvContent: any, format: FileType | string, useUtf8WithBom: boolean }): void {\n    // IE(6-10) don't support javascript download and our service doesn't support either so throw an error, we have to make a round trip to the Web Server for exporting\n    if (navigator.appName === 'Microsoft Internet Explorer') {\n      throw new Error('Microsoft Internet Explorer 6 to 10 do not support javascript export to CSV. Please upgrade your browser.');\n    }\n\n    // set the correct MIME type\n    const mimeType = (options.format === FileType.csv) ? 'text/csv' : 'text/plain';\n\n    // make sure no html entities exist in the data\n    const csvContent = htmlEntityDecode(options.csvContent);\n\n    // dealing with Excel CSV export and UTF-8 is a little tricky.. We will use Option #2 to cover older Excel versions\n    // Option #1: we need to make Excel knowing that it's dealing with an UTF-8, A correctly formatted UTF8 file can have a Byte Order Mark as its first three octets\n    // reference: http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\n    // Option#2: use a 3rd party extension to javascript encode into UTF-16\n    let outputData: Uint8Array | string;\n    if (options.format === FileType.csv) {\n      outputData = new TextEncoder('utf-8').encode(csvContent);\n    } else {\n      outputData = csvContent;\n    }\n\n    // create a Blob object for the download\n    const blob = new Blob([options.useUtf8WithBom ? '\\uFEFF' : '', outputData], {\n      type: `${mimeType};charset=utf-8;`\n    });\n\n    // when using IE/Edge, then use different download call\n    if (typeof navigator.msSaveOrOpenBlob === 'function') {\n      navigator.msSaveOrOpenBlob(blob, options.filename);\n    } else {\n      // this trick will generate a temp <a /> tag\n      // the code will then trigger a hidden click for it to start downloading\n      const link = document.createElement('a');\n      const csvUrl = URL.createObjectURL(blob);\n\n      link.textContent = 'download';\n      link.href = csvUrl;\n      link.setAttribute('download', options.filename);\n\n      // set the visibility to hidden so there is no effect on your web-layout\n      link.style.visibility = 'hidden';\n\n      // this part will append the anchor tag, trigger a click (for download to start) and finally remove the tag once completed\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n}\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\r\nimport { castToPromise } from './utilities';\r\nimport {\r\n  CellArgs,\r\n  Column,\r\n  ColumnSort,\r\n  CurrentSorter,\r\n  FieldType,\r\n  GridOption,\r\n  SlickEvent,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\nimport { Sorters } from './../sorters';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// using external non-typed js libraries\r\ndeclare var Slick: any;\r\n\r\nexport class SortService {\r\n  private _currentLocalSorters: CurrentSorter[] = [];\r\n  private _eventHandler: any = new Slick.EventHandler();\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _slickSubscriber: SlickEvent;\r\n  private _isBackendGrid = false;\r\n  onSortChanged = new Subject<CurrentSorter[]>();\r\n  onSortCleared = new Subject<boolean>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  /**\r\n   * Attach a backend sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param dataView SlickGrid DataView object\r\n   */\r\n  attachBackendOnSort(grid: any, dataView: any) {\r\n    this._isBackendGrid = true;\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = grid.onSort;\r\n\r\n    // subscribe to the SlickGrid event and call the backend execution\r\n    this._slickSubscriber.subscribe(this.onBackendSortChanged.bind(this));\r\n  }\r\n\r\n  async onBackendSortChanged(event: Event, args: any) {\r\n    if (!args || !args.grid) {\r\n      throw new Error('Something went wrong when trying to attach the \"onBackendSortChanged(event, args)\" function, it seems that \"args\" is not populated correctly');\r\n    }\r\n    const gridOptions: GridOption = args.grid.getOptions() || {};\r\n    const backendApi = gridOptions.backendServiceApi;\r\n\r\n    if (!backendApi || !backendApi.process || !backendApi.service) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    // keep start time & end timestamps & return it after process execution\r\n    const startTime = new Date();\r\n\r\n    if (backendApi.preProcess) {\r\n      backendApi.preProcess();\r\n    }\r\n\r\n    const query = backendApi.service.processOnSortChanged(event, args);\r\n    this.emitSortChanged('remote');\r\n\r\n    // the process could be an Observable (like HttpClient) or a Promise\r\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n    const observableOrPromise = backendApi.process(query);\r\n    const processResult = await castToPromise(observableOrPromise);\r\n    const endTime = new Date();\r\n\r\n    // from the result, call our internal post process to update the Dataset and Pagination info\r\n    if (processResult && backendApi.internalPostProcess) {\r\n      backendApi.internalPostProcess(processResult);\r\n    }\r\n\r\n    // send the response process to the postProcess callback\r\n    if (backendApi.postProcess) {\r\n      if (processResult instanceof Object) {\r\n        processResult.statistics = {\r\n          startTime,\r\n          endTime,\r\n          executionTime: endTime.valueOf() - startTime.valueOf(),\r\n          totalItemCount: this._gridOptions && this._gridOptions.pagination && this._gridOptions.pagination.totalItems\r\n        };\r\n      }\r\n      backendApi.postProcess(processResult);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attach a local sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param gridOptions Grid Options object\r\n   * @param dataView\r\n   */\r\n  attachLocalOnSort(grid: any, dataView: any) {\r\n    this._isBackendGrid = false;\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = grid.onSort;\r\n\r\n    this._slickSubscriber.subscribe((e: any, args: any) => {\r\n      // multiSort and singleSort are not exactly the same, but we want to structure it the same for the (for loop) after\r\n      // also to avoid having to rewrite the for loop in the sort, we will make the singleSort an array of 1 object\r\n      const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({sortAsc: args.sortAsc, sortCol: args.sortCol});\r\n\r\n      // keep current sorters\r\n      this._currentLocalSorters = []; // reset current local sorters\r\n      if (Array.isArray(sortColumns)) {\r\n        sortColumns.forEach((sortColumn: { sortCol: Column, sortAsc: number }) => {\r\n          if (sortColumn.sortCol) {\r\n            this._currentLocalSorters.push({\r\n              columnId: sortColumn.sortCol.id,\r\n              direction: sortColumn.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      this.onLocalSortChanged(grid, dataView, sortColumns);\r\n      this.emitSortChanged('local');\r\n    });\r\n  }\r\n\r\n  clearSorting() {\r\n    if (this._grid && this._gridOptions && this._dataView) {\r\n      // remove any sort icons (this setSortColumns function call really does only that)\r\n      this._grid.setSortColumns([]);\r\n\r\n      // we also need to trigger a sort change\r\n      // for a backend grid, we will trigger a backend sort changed with an empty sort columns array\r\n      // however for a local grid, we need to pass a sort column and so we will sort by the 1st column\r\n      if (this._isBackendGrid) {\r\n        this.onBackendSortChanged(undefined, { grid: this._grid, sortCols: [] });\r\n      } else {\r\n        if (this._columnDefinitions && Array.isArray(this._columnDefinitions)) {\r\n          this.onLocalSortChanged(this._grid, this._dataView, new Array({sortAsc: true, sortCol: this._columnDefinitions[0] }));\r\n        }\r\n      }\r\n    }\r\n    // set current sorter to empty & emit a sort changed event\r\n    this._currentLocalSorters = [];\r\n\r\n    // emit an event when filters are all cleared\r\n    this.onSortCleared.next(true);\r\n  }\r\n\r\n  getCurrentLocalSorters(): CurrentSorter[] {\r\n    return this._currentLocalSorters;\r\n  }\r\n\r\n  /**\r\n   * Get column sorts,\r\n   * If a column is passed as an argument, we won't add this column to our output array since it is already in the array\r\n   * We want to know the sort prior to calling the next sorting command\r\n   */\r\n  getPreviousColumnSorts(columnId?: string) {\r\n    // getSortColumns() only returns sortAsc & columnId, we want the entire column definition\r\n    const oldSortColumns = this._grid.getSortColumns();\r\n\r\n    // get the column definition but only keep column which are not equal to our current column\r\n    const sortedCols = oldSortColumns.reduce((cols, col) => {\r\n      if (!columnId || col.columnId !== columnId) {\r\n        cols.push({ sortCol: this._columnDefinitions[this._grid.getColumnIndex(col.columnId)], sortAsc: col.sortAsc });\r\n      }\r\n      return cols;\r\n    }, []);\r\n\r\n    return sortedCols;\r\n  }\r\n\r\n  /**\r\n   * load any presets if there are any\r\n   * @param grid\r\n   * @param dataView\r\n   */\r\n  loadLocalPresets(grid: any, dataView: any) {\r\n    const sortCols: ColumnSort[] = [];\r\n    this._currentLocalSorters = []; // reset current local sorters\r\n    if (this._gridOptions && this._gridOptions.presets && this._gridOptions.presets.sorters) {\r\n      const sorters = this._gridOptions.presets.sorters;\r\n\r\n      sorters.forEach((presetSorting: CurrentSorter) => {\r\n        const gridColumn = this._columnDefinitions.find((col: Column) => col.id === presetSorting.columnId);\r\n        if (gridColumn) {\r\n          sortCols.push({\r\n            columnId: gridColumn.id,\r\n            sortAsc: ((presetSorting.direction.toUpperCase() === SortDirection.ASC) ? true : false),\r\n            sortCol: gridColumn\r\n          });\r\n\r\n          // keep current sorters\r\n          this._currentLocalSorters.push({\r\n            columnId: gridColumn.id + '',\r\n            direction: presetSorting.direction.toUpperCase() as SortDirectionString\r\n          });\r\n        }\r\n      });\r\n\r\n      if (sortCols.length > 0) {\r\n        this.onLocalSortChanged(grid, dataView, sortCols);\r\n        grid.setSortColumns(sortCols); // use this to add sort icon(s) in UI\r\n      }\r\n    }\r\n  }\r\n\r\n  onLocalSortChanged(grid: any, dataView: any, sortColumns: ColumnSort[]) {\r\n    dataView.sort((dataRow1: any, dataRow2: any) => {\r\n      for (let i = 0, l = sortColumns.length; i < l; i++) {\r\n        const columnSortObj = sortColumns[i];\r\n        if (columnSortObj && columnSortObj.sortCol) {\r\n          const sortDirection = columnSortObj.sortAsc ? SortDirectionNumber.asc : SortDirectionNumber.desc;\r\n          const sortField = columnSortObj.sortCol.queryField || columnSortObj.sortCol.queryFieldFilter || columnSortObj.sortCol.field;\r\n          const fieldType = columnSortObj.sortCol.type || FieldType.string;\r\n          const value1 = dataRow1[sortField];\r\n          const value2 = dataRow2[sortField];\r\n          const sortResult = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n          if (sortResult !== SortDirectionNumber.neutral) {\r\n            return sortResult;\r\n          }\r\n        }\r\n      }\r\n      return 0;\r\n    });\r\n    grid.invalidate();\r\n    grid.render();\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe local event\r\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\r\n      this._slickSubscriber.unsubscribe();\r\n    }\r\n\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n  }\r\n\r\n  /**\r\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\r\n   * Other services, like Pagination, can then subscribe to it.\r\n   * @param sender\r\n   */\r\n  emitSortChanged(sender: 'local' | 'remote') {\r\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      let currentSorters: CurrentSorter[] = [];\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        currentSorters = backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n      this.onSortChanged.next(currentSorters);\r\n    } else if (sender === 'local') {\r\n      this.onSortChanged.next(this.getCurrentLocalSorters());\r\n    }\r\n  }\r\n}\r\n",
    "export class Constants {\r\n  static TEXT_CANCEL = 'Cancel';\r\n  static TEXT_CLEAR_ALL_FILTERS = 'Clear All Filters';\r\n  static TEXT_CLEAR_ALL_SORTING = 'Clear All Sorting';\r\n  static TEXT_COLUMNS = 'Columns';\r\n  static TEXT_COMMANDS = 'Commands';\r\n  static TEXT_EXPORT_IN_CSV_FORMAT = 'Export in CSV format';\r\n  static TEXT_EXPORT_IN_TEXT_FORMAT = 'Export in Text format (Tab delimited)';\r\n  static TEXT_FORCE_FIT_COLUMNS = 'Force fit columns';\r\n  static TEXT_HIDE_COLUMN = 'Hide Column';\r\n  static TEXT_REFRESH_DATASET = 'Refresh Dataset';\r\n  static TEXT_SAVE = 'Save';\r\n  static TEXT_SYNCHRONOUS_RESIZE = 'Synchronous resize';\r\n  static TEXT_SORT_ASCENDING = 'Sort Ascending';\r\n  static TEXT_SORT_DESCENDING = 'Sort Descending';\r\n  static TEXT_TOGGLE_FILTER_ROW = 'Toggle Filter Row';\r\n  static VALIDATION_EDITOR_VALID_NUMBER = 'Please enter a valid number';\r\n  static VALIDATION_EDITOR_VALID_INTEGER = 'Please enter a valid integer number';\r\n  static VALIDATION_EDITOR_NUMBER_BETWEEN = 'Please enter a valid number between {{minValue}} and {{maxValue}}';\r\n  static VALIDATION_EDITOR_DECIMAL_BETWEEN = 'Please enter a valid number with a maximum of {{maxDecimal}} decimals';\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport {\n  CellArgs,\n  ColumnSort,\n  Column,\n  DelimiterType,\n  Extension,\n  FileType,\n  GraphqlResult,\n  GridMenu,\n  GridMenuItem,\n  GridOption,\n  HeaderButtonOnCommandArgs,\n  HeaderMenu,\n  HeaderMenuItem,\n  HeaderMenuOnCommandArgs,\n  HeaderMenuOnBeforeMenuShowArgs,\n} from './../models/index';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, sanitizeHtmlToText } from './../services/utilities';\nimport { FilterService } from './filter.service';\nimport { ExportService } from './export.service';\nimport { SortService } from './sort.service';\nimport { Constants } from '../constants';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class ControlAndPluginService {\n  private _dataView: any;\n  private _grid: any;\n  allColumns: Column[];\n  visibleColumns: Column[];\n  areVisibleColumnDifferent = false;\n  extensionList: Extension[] = [];\n  undoRedoBuffer: any;\n  userOriginalGridMenu: GridMenu;\n\n  // controls & plugins\n  autoTooltipPlugin: any;\n  cellExternalCopyManagerPlugin: any;\n  checkboxSelectorPlugin: any;\n  columnPickerControl: any;\n  gridMenuControl: any;\n  groupItemMetaProviderPlugin: any;\n  headerButtonsPlugin: any;\n  headerMenuPlugin: any;\n  rowSelectionPlugin: any;\n\n  constructor(\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private sortService: SortService,\n    private translate: TranslateService,\n  ) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Setter for the Grid Options pulled through the Grid Object */\n  private set _gridOptions(gridOptions: GridOption) {\n    this._gridOptions = gridOptions;\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  /** Get all columns (includes visible and non-visible) */\n  getAllColumns(): Column[] {\n    return this.allColumns || [];\n  }\n\n  /** Get only visible columns */\n  getVisibleColumns(): Column[] {\n    return this.visibleColumns || [];\n  }\n\n  /** Get all Extensions */\n  getAllExtensions(): Extension[] {\n    return this.extensionList;\n  }\n\n  /**\n   * Get an Extension by it's name\n   *  @param name\n   */\n  getExtensionByName(name: string): Extension | undefined {\n    return this.extensionList.find((p) => p.name === name);\n  }\n\n  /** Auto-resize all the column in the grid to fit the grid width */\n  autoResizeColumns() {\n    this._grid.autosizeColumns();\n  }\n\n  /**\n   * Attach/Create different Controls or Plugins after the Grid is created\n   * @param grid\n   * @param dataView\n   * @param groupItemMetadataProvider\n   */\n  attachDifferentControlOrPlugins(grid: any, dataView: any, groupItemMetadataProvider: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n    this.allColumns = this._columnDefinitions;\n    this.visibleColumns = this._columnDefinitions;\n\n    // make sure all columns are translated before creating ColumnPicker/GridMenu Controls\n    // this is to avoid having hidden columns not being translated on first load\n    if (this._gridOptions.enableTranslate) {\n      this.translateItems(this.allColumns, 'headerKey', 'name');\n    }\n\n    // Column Picker Control\n    if (this._gridOptions.enableColumnPicker) {\n      this.columnPickerControl = this.createColumnPicker(this._grid, this._columnDefinitions);\n      this.extensionList.push({ name: 'ColumnPicker', service: this.columnPickerControl });\n    }\n\n    // Grid Menu Control\n    if (this._gridOptions.enableGridMenu) {\n      // keep original user grid menu, useful when switching locale to translate\n      this.userOriginalGridMenu = { ...this._gridOptions.gridMenu };\n\n      this.gridMenuControl = this.createGridMenu(this._grid, this._columnDefinitions);\n      this.extensionList.push({ name: 'GridMenu', service: this.gridMenuControl });\n    }\n\n    // Auto Tooltip Plugin\n    if (this._gridOptions.enableAutoTooltip) {\n      this.autoTooltipPlugin = new Slick.AutoTooltips(this._gridOptions.autoTooltipOptions || {});\n      this._grid.registerPlugin(this.autoTooltipPlugin);\n      this.extensionList.push({ name: 'AutoTooltip', service: this.autoTooltipPlugin });\n    }\n\n    // Grouping Plugin\n    // register the group item metadata provider to add expand/collapse group handlers\n    if (this._gridOptions.enableGrouping) {\n      this.groupItemMetaProviderPlugin = groupItemMetadataProvider || {};\n      this._grid.registerPlugin(this.groupItemMetaProviderPlugin);\n      this.extensionList.push({ name: 'GroupItemMetaProvider', service: this.groupItemMetaProviderPlugin });\n    }\n\n    // Checkbox Selector Plugin\n    if (this._gridOptions.enableCheckboxSelector) {\n      // when enabling the Checkbox Selector Plugin, we need to also watch onClick events to perform certain actions\n      // the selector column has to be created BEFORE the grid (else it behaves oddly), but we can only watch grid events AFTER the grid is created\n      this._grid.registerPlugin(this.checkboxSelectorPlugin);\n      this.extensionList.push({ name: 'CheckboxSelector', service: this.checkboxSelectorPlugin });\n\n      // this also requires the Row Selection Model to be registered as well\n      if (!this.rowSelectionPlugin || !this._grid.getSelectionModel()) {\n        this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n        this._grid.setSelectionModel(this.rowSelectionPlugin);\n      }\n\n      // user might want to pre-select some rows\n      // the setTimeout is because of timing issue with styling (row selection happen but rows aren't highlighted properly)\n      if (this._gridOptions.preselectedRows && this.rowSelectionPlugin && this._grid.getSelectionModel()) {\n        setTimeout(() => this.checkboxSelectorPlugin.selectRows(this._gridOptions.preselectedRows), 0);\n      }\n    }\n\n    // Row Selection Plugin\n    if (!this._gridOptions.enableCheckboxSelector && this._gridOptions.enableRowSelection) {\n      this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n      this._grid.setSelectionModel(this.rowSelectionPlugin);\n    }\n\n    // Header Button Plugin\n    if (this._gridOptions.enableHeaderButton) {\n      this.headerButtonsPlugin = new Slick.Plugins.HeaderButtons(this._gridOptions.headerButton || {});\n      this._grid.registerPlugin(this.headerButtonsPlugin);\n      this.extensionList.push({ name: 'HeaderButtons', service: this.headerButtonsPlugin });\n      this.headerButtonsPlugin.onCommand.subscribe((e: Event, args: HeaderButtonOnCommandArgs) => {\n        if (this._gridOptions.headerButton && typeof this._gridOptions.headerButton.onCommand === 'function') {\n          this._gridOptions.headerButton.onCommand(e, args);\n        }\n      });\n    }\n\n    // Header Menu Plugin\n    if (this._gridOptions.enableHeaderMenu) {\n      this.headerMenuPlugin = this.createHeaderMenu(this._grid, this._dataView, this._columnDefinitions);\n    }\n\n    // Cell External Copy Manager Plugin (Excel Like)\n    if (this._gridOptions.enableExcelCopyBuffer) {\n      this.createUndoRedoBuffer();\n      this.hookUndoShortcutKey();\n      this.createCellExternalCopyManagerPlugin(this._grid);\n    }\n\n    // manually register other plugins\n    if (this._gridOptions.registerPlugins !== undefined) {\n      if (Array.isArray(this._gridOptions.registerPlugins)) {\n        this._gridOptions.registerPlugins.forEach((plugin) => {\n          this._grid.registerPlugin(plugin);\n          this.extensionList.push({ name: 'generic', service: plugin });\n        });\n      } else {\n        this._grid.registerPlugin(this._gridOptions.registerPlugins);\n        this.extensionList.push({ name: 'generic', service: this._gridOptions.registerPlugins });\n      }\n    }\n  }\n\n  /**\n   * Attach/Create different plugins before the Grid creation.\n   * For example the multi-select have to be added to the column definition before the grid is created to work properly\n   * @param columnDefinitions\n   * @param options\n   */\n  createCheckboxPluginBeforeGridCreation(columnDefinitions: Column[], options: GridOption) {\n    if (options.enableCheckboxSelector) {\n      if (!this.checkboxSelectorPlugin) {\n        this.checkboxSelectorPlugin = new Slick.CheckboxSelectColumn(options.checkboxSelector || {});\n      }\n      const selectionColumn: Column = this.checkboxSelectorPlugin.getColumnDefinition();\n      selectionColumn.excludeFromExport = true;\n      selectionColumn.excludeFromQuery = true;\n      selectionColumn.excludeFromHeaderMenu = true;\n      columnDefinitions.unshift(selectionColumn);\n    }\n  }\n\n  /** Create the Excel like copy manager */\n  createCellExternalCopyManagerPlugin(grid: any) {\n    let newRowIds = 0;\n    const pluginOptions = {\n      clipboardCommandHandler: (editCommand: any) => {\n        this.undoRedoBuffer.queueAndExecuteCommand.call(this.undoRedoBuffer, editCommand);\n      },\n      dataItemColumnValueExtractor: (item: any, columnDef: Column) => {\n        // when grid or cell is not editable, we will possibly evaluate the Formatter if it was passed\n        // to decide if we evaluate the Formatter, we will use the same flag from Export which is \"exportWithFormatter\"\n        if (!this._gridOptions.editable || !columnDef.editor) {\n          const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._gridOptions.exportOptions.exportWithFormatter;\n          if (columnDef.formatter && isEvaluatingFormatter) {\n            const formattedOutput = columnDef.formatter(0, 0, item[columnDef.field], columnDef, item, this._grid);\n            if (columnDef.sanitizeDataExport || (this._gridOptions.exportOptions && this._gridOptions.exportOptions.sanitizeDataExport)) {\n              return sanitizeHtmlToText(formattedOutput);\n            }\n            return formattedOutput;\n          }\n        }\n\n        // else use the default \"dataItemColumnValueExtractor\" from the plugin itself\n        // we can do that by setting back the getter with null\n        return null;\n      },\n      readOnlyMode: false,\n      includeHeaderWhenCopying: false,\n      newRowCreator: (count: number) => {\n        for (let i = 0; i < count; i++) {\n          const item = {\n            id: 'newRow_' + newRowIds++\n          };\n          grid.getData().addItem(item);\n        }\n      }\n    };\n\n    grid.setSelectionModel(new Slick.CellSelectionModel());\n    this.cellExternalCopyManagerPlugin = new Slick.CellExternalCopyManager(pluginOptions);\n    grid.registerPlugin(this.cellExternalCopyManagerPlugin);\n    this.extensionList.push({ name: 'CellExternalCopyManager', service: this.cellExternalCopyManagerPlugin });\n  }\n\n  /**\n   * Create the Column Picker and expose all the available hooks that user can subscribe (onColumnsChanged)\n   * @param grid\n   * @param columnDefinitions\n   */\n  createColumnPicker(grid: any, columnDefinitions: Column[]) {\n    // localization support for the picker\n    const columnTitle = this.getPickerTitleOutputString('columnTitle', 'columnPicker');\n    const forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'columnPicker');\n    const syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');\n\n    this._gridOptions.columnPicker = this._gridOptions.columnPicker || {};\n    this._gridOptions.columnPicker.columnTitle = this._gridOptions.columnPicker.columnTitle || columnTitle;\n    this._gridOptions.columnPicker.forceFitTitle = this._gridOptions.columnPicker.forceFitTitle || forceFitTitle;\n    this._gridOptions.columnPicker.syncResizeTitle = this._gridOptions.columnPicker.syncResizeTitle || syncResizeTitle;\n\n    this.columnPickerControl = new Slick.Controls.ColumnPicker(columnDefinitions, grid, this._gridOptions);\n    if (grid && this._gridOptions.enableColumnPicker) {\n      this.columnPickerControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\n        if (this._gridOptions.columnPicker && typeof this._gridOptions.columnPicker.onColumnsChanged === 'function') {\n          this._gridOptions.columnPicker.onColumnsChanged(e, args);\n        }\n      });\n    }\n\n    return this.columnPickerControl;\n  }\n\n  /**\n   * Create (or re-create) Grid Menu and expose all the available hooks that user can subscribe (onCommand, onMenuClose, ...)\n   * @param grid\n   * @param columnDefinitions\n   */\n  createGridMenu(grid: any, columnDefinitions: Column[]) {\n    if (this._gridOptions && this._gridOptions.gridMenu) {\n      this._gridOptions.gridMenu = { ...this.getDefaultGridMenuOptions(), ...this._gridOptions.gridMenu };\n\n      // merge original user grid menu items with internal items\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\n      this._gridOptions.gridMenu.customItems = [...this.userOriginalGridMenu.customItems || [], ...this.addGridMenuCustomCommands()];\n      this.translateItems(this._gridOptions.gridMenu.customItems, 'titleKey', 'title');\n      this.sortItems(this._gridOptions.gridMenu.customItems, 'positionOrder');\n\n      const gridMenuControl = new Slick.Controls.GridMenu(columnDefinitions, grid, this._gridOptions);\n      if (grid && this._gridOptions.gridMenu) {\n        gridMenuControl.onBeforeMenuShow.subscribe((e: Event, args: CellArgs) => {\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onBeforeMenuShow === 'function') {\n            this._gridOptions.gridMenu.onBeforeMenuShow(e, args);\n          }\n        });\n        gridMenuControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\n          this.areVisibleColumnDifferent = true;\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onColumnsChanged === 'function') {\n            this._gridOptions.gridMenu.onColumnsChanged(e, args);\n          }\n        });\n        gridMenuControl.onCommand.subscribe((e: Event, args: GridMenuItem) => {\n          this.executeGridMenuInternalCustomCommands(e, args);\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onCommand === 'function') {\n            this._gridOptions.gridMenu.onCommand(e, args);\n          }\n        });\n        gridMenuControl.onMenuClose.subscribe((e: Event, args: CellArgs) => {\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onMenuClose === 'function') {\n            this._gridOptions.gridMenu.onMenuClose(e, args);\n          }\n\n          // we also want to resize the columns if the user decided to hide certain column(s)\n          if (grid && typeof grid.autosizeColumns === 'function') {\n            // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree)\n            const gridUid = grid.getUID();\n            if (this.areVisibleColumnDifferent && gridUid && $(`.${gridUid}`).length > 0) {\n              grid.autosizeColumns();\n              this.areVisibleColumnDifferent = false;\n            }\n          }\n        });\n      }\n      return gridMenuControl;\n    }\n    return null;\n  }\n\n  /**\n   * Create the Header Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)\n   * @param grid\n   * @param dataView\n   * @param columnDefinitions\n   */\n  createHeaderMenu(grid: any, dataView: any, columnDefinitions: Column[]) {\n    this._gridOptions.headerMenu = { ...this.getDefaultHeaderMenuOptions(), ...this._gridOptions.headerMenu };\n    if (this._gridOptions.enableHeaderMenu) {\n      this._gridOptions.headerMenu = this.addHeaderMenuCustomCommands(this._gridOptions, columnDefinitions);\n    }\n\n    const headerMenuPlugin = new Slick.Plugins.HeaderMenu(this._gridOptions.headerMenu);\n\n    grid.registerPlugin(headerMenuPlugin);\n    headerMenuPlugin.onCommand.subscribe((e: Event, args: HeaderMenuOnCommandArgs) => {\n      this.executeHeaderMenuInternalCommands(e, args);\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onCommand === 'function') {\n        this._gridOptions.headerMenu.onCommand(e, args);\n      }\n    });\n    headerMenuPlugin.onBeforeMenuShow.subscribe((e: Event, args: HeaderMenuOnBeforeMenuShowArgs) => {\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onBeforeMenuShow === 'function') {\n        this._gridOptions.headerMenu.onBeforeMenuShow(e, args);\n      }\n    });\n\n    return headerMenuPlugin;\n  }\n\n  /** Create an undo redo buffer used by the Excel like copy */\n  createUndoRedoBuffer() {\n    const commandQueue: any[] = [];\n    let commandCtr = 0;\n\n    this.undoRedoBuffer = {\n      queueAndExecuteCommand: (editCommand: any) => {\n        commandQueue[commandCtr] = editCommand;\n        commandCtr++;\n        editCommand.execute();\n      },\n      undo: () => {\n        if (commandCtr === 0) { return; }\n        commandCtr--;\n        const command = commandQueue[commandCtr];\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\n          command.undo();\n        }\n      },\n      redo: () => {\n        if (commandCtr >= commandQueue.length) { return; }\n        const command = commandQueue[commandCtr];\n        commandCtr++;\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\n          command.execute();\n        }\n      }\n    };\n  }\n\n  /** Hide a column from the grid */\n  hideColumn(column: Column) {\n    if (this._grid && this.visibleColumns) {\n      const columnIndex = this._grid.getColumnIndex(column.id);\n      this.visibleColumns = this.removeColumnByIndex(this.visibleColumns, columnIndex);\n      this._grid.setColumns(this.visibleColumns);\n    }\n  }\n\n  /** Attach an undo shortcut key hook that will redo/undo the copy buffer */\n  hookUndoShortcutKey() {\n    // undo shortcut\n    $(document).keydown((e) => {\n      if (e.which === 90 && (e.ctrlKey || e.metaKey)) {    // CTRL + (shift) + Z\n        if (e.shiftKey) {\n          this.undoRedoBuffer.redo();\n        } else {\n          this.undoRedoBuffer.undo();\n        }\n      }\n    });\n  }\n\n  /** Dispose of all the controls & plugins */\n  dispose() {\n    this._grid = null;\n    this._dataView = null;\n    this.visibleColumns = [];\n\n    // dispose of each control/plugin if it has a destroy method\n    this.extensionList.forEach((item) => {\n      if (item && item.service && item.service.destroy) {\n        item.service.destroy();\n      }\n    });\n    this.extensionList = [];\n  }\n\n  /** Create Grid Menu with Custom Commands if user has enabled Filters and/or uses a Backend Service (OData, GraphQL) */\n  private addGridMenuCustomCommands() {\n    const backendApi = this._gridOptions.backendServiceApi || null;\n    const gridMenuCustomItems: GridMenuItem[] = [];\n\n    if (this._gridOptions && this._gridOptions.enableFiltering) {\n      // show grid menu: clear all filters\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllFiltersCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllFiltersCommand || 'fa fa-filter text-danger',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_FILTERS') : Constants.TEXT_CLEAR_ALL_FILTERS,\n            disabled: false,\n            command: 'clear-filter',\n            positionOrder: 50\n          }\n        );\n      }\n\n      // show grid menu: toggle filter row\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideToggleFilterCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconToggleFilterCommand || 'fa fa-random',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('TOGGLE_FILTER_ROW') : Constants.TEXT_TOGGLE_FILTER_ROW,\n            disabled: false,\n            command: 'toggle-filter',\n            positionOrder: 52\n          }\n        );\n      }\n\n      // show grid menu: refresh dataset\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideRefreshDatasetCommand && backendApi) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconRefreshDatasetCommand || 'fa fa-refresh',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('REFRESH_DATASET') : Constants.TEXT_REFRESH_DATASET,\n            disabled: false,\n            command: 'refresh-dataset',\n            positionOrder: 54\n          }\n        );\n      }\n    }\n\n    if (this._gridOptions.enableSorting) {\n      // show grid menu: clear all sorting\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllSortingCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllSortingCommand || 'fa fa-unsorted text-danger',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_SORTING') : Constants.TEXT_CLEAR_ALL_SORTING,\n            disabled: false,\n            command: 'clear-sorting',\n            positionOrder: 51\n          }\n        );\n      }\n    }\n\n    // show grid menu: export to file\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportCsvCommand) {\n      gridMenuCustomItems.push(\n        {\n          iconCssClass: this._gridOptions.gridMenu.iconExportCsvCommand || 'fa fa-download',\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_CSV') : Constants.TEXT_EXPORT_IN_CSV_FORMAT,\n          disabled: false,\n          command: 'export-csv',\n          positionOrder: 53\n        }\n      );\n    }\n    // show grid menu: export to text file as tab delimited\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportTextDelimitedCommand) {\n      gridMenuCustomItems.push(\n        {\n          iconCssClass: this._gridOptions.gridMenu.iconExportTextDelimitedCommand || 'fa fa-download',\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_TAB_DELIMITED') : Constants.TEXT_EXPORT_IN_TEXT_FORMAT,\n          disabled: false,\n          command: 'export-text-delimited',\n          positionOrder: 54\n        }\n      );\n    }\n\n    // add the custom \"Commands\" title if there are any commands\n    if (this._gridOptions && this._gridOptions.gridMenu && (gridMenuCustomItems.length > 0 || this._gridOptions.gridMenu.customItems.length > 0)) {\n      this._gridOptions.gridMenu.customTitle = this._gridOptions.gridMenu.customTitle || this.getPickerTitleOutputString('customTitle', 'gridMenu');\n    }\n\n    return gridMenuCustomItems;\n  }\n\n  /**\n   * Create Header Menu with Custom Commands if user has enabled Header Menu\n   * @param options\n   * @param columnDefinitions\n   * @return header menu\n   */\n  private addHeaderMenuCustomCommands(options: GridOption, columnDefinitions: Column[]): HeaderMenu {\n    const headerMenuOptions = options.headerMenu;\n\n    if (columnDefinitions && Array.isArray(columnDefinitions) && options.enableHeaderMenu) {\n      columnDefinitions.forEach((columnDef: Column) => {\n        if (columnDef && !columnDef.excludeFromHeaderMenu) {\n          if (!columnDef.header || !columnDef.header.menu) {\n            columnDef.header = {\n              menu: {\n                items: []\n              }\n            };\n          }\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\n\n          // Sorting Commands\n          if (options.enableSorting && columnDef.sortable && !headerMenuOptions.hideSortCommands) {\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-asc').length === 0) {\n              columnHeaderMenuItems.push({\n                iconCssClass: headerMenuOptions.iconSortAscCommand || 'fa fa-sort-asc',\n                title: options.enableTranslate ? this.translate.instant('SORT_ASCENDING') : Constants.TEXT_SORT_ASCENDING,\n                command: 'sort-asc',\n                positionOrder: 50\n              });\n            }\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-desc').length === 0) {\n              columnHeaderMenuItems.push({\n                iconCssClass: headerMenuOptions.iconSortDescCommand || 'fa fa-sort-desc',\n                title: options.enableTranslate ? this.translate.instant('SORT_DESCENDING') : Constants.TEXT_SORT_DESCENDING,\n                command: 'sort-desc',\n                positionOrder: 51\n              });\n            }\n          }\n\n          // Hide Column Command\n          if (!headerMenuOptions.hideColumnHideCommand && columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'hide').length === 0) {\n            columnHeaderMenuItems.push({\n              iconCssClass: headerMenuOptions.iconColumnHideCommand || 'fa fa-times',\n              title: options.enableTranslate ? this.translate.instant('HIDE_COLUMN') : Constants.TEXT_HIDE_COLUMN,\n              command: 'hide',\n              positionOrder: 52\n            });\n          }\n\n          this.translateItems(columnHeaderMenuItems, 'titleKey', 'title');\n\n          // sort the custom items by their position in the list\n          columnHeaderMenuItems.sort((itemA, itemB) => {\n            if (itemA && itemB && itemA.hasOwnProperty('positionOrder') && itemB.hasOwnProperty('positionOrder')) {\n              return itemA.positionOrder - itemB.positionOrder;\n            }\n            return 0;\n          });\n        }\n      });\n\n    }\n\n    return headerMenuOptions;\n  }\n\n  /** Execute the Header Menu Commands that was triggered by the onCommand subscribe */\n  executeHeaderMenuInternalCommands(e: Event, args: HeaderMenuOnCommandArgs) {\n    if (args && args.command) {\n      switch (args.command) {\n        case 'hide':\n          this.hideColumn(args.column);\n          this.autoResizeColumns();\n          break;\n        case 'sort-asc':\n        case 'sort-desc':\n          // get previously sorted columns\n          const cols: ColumnSort[] = this.sortService.getPreviousColumnSorts(args.column.id + '');\n\n          // add to the column array, the column sorted by the header menu\n          cols.push({ sortCol: args.column, sortAsc: (args.command === 'sort-asc') });\n          if (this._gridOptions.backendServiceApi) {\n            this.sortService.onBackendSortChanged(e, { multiColumnSort: true, sortCols: cols, grid: this._grid });\n          } else {\n            this.sortService.onLocalSortChanged(this._grid, this._dataView, cols);\n          }\n\n          // update the this.gridObj sortColumns array which will at the same add the visual sort icon(s) on the UI\n          const newSortColumns: ColumnSort[] = cols.map((col) => {\n            return { columnId: col.sortCol.id, sortAsc: col.sortAsc };\n          });\n          this._grid.setSortColumns(newSortColumns); // add sort icon in UI\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /**\n   * Execute the Grid Menu Custom command callback that was triggered by the onCommand subscribe\n   * These are the default internal custom commands\n   * @param event\n   * @param GridMenuItem args\n   */\n  executeGridMenuInternalCustomCommands(e: Event, args: GridMenuItem) {\n    if (args && args.command) {\n      switch (args.command) {\n        case 'clear-filter':\n          this.filterService.clearFilters();\n          this._dataView.refresh();\n          break;\n        case 'clear-sorting':\n          this.sortService.clearSorting();\n          this._dataView.refresh();\n          break;\n        case 'export-csv':\n          this.exportService.exportToFile({\n            delimiter: DelimiterType.comma,\n            filename: 'export',\n            format: FileType.csv,\n            useUtf8WithBom: true\n          });\n          break;\n        case 'export-text-delimited':\n          this.exportService.exportToFile({\n            delimiter: DelimiterType.tab,\n            filename: 'export',\n            format: FileType.txt,\n            useUtf8WithBom: true\n          });\n          break;\n        case 'toggle-filter':\n          this._grid.setHeaderRowVisibility(!this._grid.getOptions().showHeaderRow);\n          break;\n        case 'toggle-toppanel':\n          this._grid.setTopPanelVisibility(!this._grid.getOptions().showTopPanel);\n          break;\n        case 'refresh-dataset':\n          this.refreshBackendDataset();\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /** Refresh the dataset through the Backend Service */\n  refreshBackendDataset(gridOptions?: GridOption) {\n    let query = '';\n\n    // user can pass new set of grid options which will override current ones\n    if (gridOptions) {\n      this._gridOptions = { ...this._gridOptions, ...gridOptions };\n    }\n\n    const backendApi = this._gridOptions.backendServiceApi;\n    if (!backendApi || !backendApi.service || !backendApi.process) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    if (backendApi.service) {\n      query = backendApi.service.buildQuery();\n    }\n\n    if (query && query !== '') {\n      // keep start time & end timestamps & return it after process execution\n      const startTime = new Date();\n\n      if (backendApi.preProcess) {\n        backendApi.preProcess();\n      }\n\n      // the process could be an Observable (like HttpClient) or a Promise\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n      const observableOrPromise = backendApi.process(query);\n\n      castToPromise(observableOrPromise).then((processResult: GraphqlResult | any) => {\n        const endTime = new Date();\n\n        // from the result, call our internal post process to update the Dataset and Pagination info\n        if (processResult && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          if (processResult instanceof Object) {\n            processResult.statistics = {\n              startTime,\n              endTime,\n              executionTime: endTime.valueOf() - startTime.valueOf(),\n              totalItemCount: this._gridOptions && this._gridOptions.pagination && this._gridOptions.pagination.totalItems\n            };\n          }\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  /**\n   * Remove a column from the grid by it's index in the grid\n   * @param array input\n   * @param index\n   */\n  removeColumnByIndex(array: any[], index: number) {\n    return array.filter((el: any, i: number) => {\n      return index !== i;\n    });\n  }\n\n  /** Translate the Column Picker and it's last 2 checkboxes */\n  translateColumnPicker() {\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\n    if (this._gridOptions && this._gridOptions.columnPicker) {\n      this.emptyColumnPickerTitles();\n\n      this._gridOptions.columnPicker.columnTitle = this.getPickerTitleOutputString('columnTitle', 'columnPicker');\n      this._gridOptions.columnPicker.forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'columnPicker');\n      this._gridOptions.columnPicker.syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');\n    }\n\n    // translate all columns (including non-visible)\n    this.translateItems(this.allColumns, 'headerKey', 'name');\n\n    // re-initialize the Column Picker, that will recreate all the list\n    // doing an \"init()\" won't drop any existing command attached\n    if (this.columnPickerControl.init) {\n      this.columnPickerControl.init(this._grid);\n    }\n  }\n\n  /** Translate the Grid Menu titles and column picker */\n  translateGridMenu() {\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\n    // we also need to call the control init so that it takes the new Grid object with latest values\n    if (this._gridOptions && this._gridOptions.gridMenu) {\n      this._gridOptions.gridMenu.customItems = [];\n      this.emptyGridMenuTitles();\n\n      // merge original user grid menu items with internal items\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\n      this._gridOptions.gridMenu.customItems = [...this.userOriginalGridMenu.customItems || [], ...this.addGridMenuCustomCommands()];\n      this.translateItems(this._gridOptions.gridMenu.customItems, 'titleKey', 'title');\n      this.sortItems(this._gridOptions.gridMenu.customItems, 'positionOrder');\n\n      this._gridOptions.gridMenu.columnTitle = this.getPickerTitleOutputString('columnTitle', 'gridMenu');\n      this._gridOptions.gridMenu.forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'gridMenu');\n      this._gridOptions.gridMenu.syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'gridMenu');\n\n      // translate all columns (including non-visible)\n      this.translateItems(this.allColumns, 'headerKey', 'name');\n\n      // re-initialize the Grid Menu, that will recreate all the menus & list\n      // doing an \"init()\" won't drop any existing command attached\n      if (this.gridMenuControl.init) {\n        this.gridMenuControl.init(this._grid);\n      }\n    }\n  }\n\n  /**\n   * Translate the Header Menu titles, we need to loop through all column definition to re-translate them\n   */\n  translateHeaderMenu() {\n    if (this._gridOptions && this._gridOptions.headerMenu) {\n      this.resetHeaderMenuTranslations(this.visibleColumns);\n    }\n  }\n\n  /**\n   * Translate manually the header titles.\n   * We could optionally pass a locale (that will change currently loaded locale), else it will use current locale\n   * @param locale to use\n   * @param new column definitions (optional)\n   */\n  translateColumnHeaders(locale?: boolean | string, newColumnDefinitions?: Column[]) {\n    if (locale) {\n      this.translate.use(locale as string);\n    }\n\n    const columnDefinitions = newColumnDefinitions || this._columnDefinitions;\n\n    this.translateItems(columnDefinitions, 'headerKey', 'name');\n    this.translateItems(this.allColumns, 'headerKey', 'name');\n\n    // re-render the column headers\n    this.renderColumnHeaders(columnDefinitions);\n  }\n\n  /**\n   * Render (or re-render) the column headers from column definitions.\n   * calling setColumns() will trigger a grid re-render\n   */\n  renderColumnHeaders(newColumnDefinitions?: Column[]) {\n    const collection = newColumnDefinitions || this._columnDefinitions;\n    if (Array.isArray(collection) && this._grid && this._grid.setColumns) {\n      this._grid.setColumns(collection);\n    }\n  }\n\n  private emptyColumnPickerTitles() {\n    this._gridOptions.columnPicker.columnTitle = '';\n    this._gridOptions.columnPicker.forceFitTitle = '';\n    this._gridOptions.columnPicker.syncResizeTitle = '';\n  }\n\n  private emptyGridMenuTitles() {\n    this._gridOptions.gridMenu.customTitle = '';\n    this._gridOptions.gridMenu.columnTitle = '';\n    this._gridOptions.gridMenu.forceFitTitle = '';\n    this._gridOptions.gridMenu.syncResizeTitle = '';\n  }\n\n  /**\n   * @return default Grid Menu options\n   */\n  private getDefaultGridMenuOptions(): GridMenu {\n    return {\n      customTitle: undefined,\n      columnTitle: this.getPickerTitleOutputString('columnTitle', 'gridMenu'),\n      forceFitTitle: this.getPickerTitleOutputString('forceFitTitle', 'gridMenu'),\n      syncResizeTitle: this.getPickerTitleOutputString('syncResizeTitle', 'gridMenu'),\n      iconCssClass: 'fa fa-bars',\n      menuWidth: 18,\n      customItems: [],\n      hideClearAllFiltersCommand: false,\n      hideRefreshDatasetCommand: false,\n      hideToggleFilterCommand: false,\n    };\n  }\n\n  /**\n   * @return default Header Menu options\n   */\n  private getDefaultHeaderMenuOptions(): HeaderMenu {\n    return {\n      autoAlignOffset: 12,\n      minWidth: 140,\n      hideColumnHideCommand: false,\n      hideSortCommands: false,\n      title: ''\n    };\n  }\n\n  /**\n   * From a Grid Menu object property name, we will return the correct title output string following this order\n   * 1- if user provided a title, use it as the output title\n   * 2- else if user provided a title key, use it to translate the output title\n   * 3- else if nothing is provided use\n   */\n  private getPickerTitleOutputString(propName: string, pickerName: 'gridMenu' | 'columnPicker') {\n    let output = '';\n    const picker = this._gridOptions && this._gridOptions[pickerName] || {};\n    const enableTranslate = this._gridOptions && this._gridOptions.enableTranslate || false;\n\n    const title = picker && picker[propName];\n    const titleKey = picker && picker[`${propName}Key`];\n\n    if (titleKey) {\n      output = this.translate.instant(titleKey || ' ');\n    } else {\n      switch (propName) {\n        case 'customTitle':\n          output = title || (enableTranslate ? this.translate.instant('COMMANDS') : Constants.TEXT_COMMANDS);\n          break;\n        case 'columnTitle':\n          output = title || (enableTranslate ? this.translate.instant('COLUMNS') : Constants.TEXT_COLUMNS);\n          break;\n        case 'forceFitTitle':\n          output = title || (enableTranslate ? this.translate.instant('FORCE_FIT_COLUMNS') : Constants.TEXT_FORCE_FIT_COLUMNS);\n          break;\n        case 'syncResizeTitle':\n          output = title || (enableTranslate ? this.translate.instant('SYNCHRONOUS_RESIZE') : Constants.TEXT_SYNCHRONOUS_RESIZE);\n          break;\n        default:\n          output = title;\n          break;\n      }\n    }\n    return output;\n  }\n\n  /**\n   * Reset all the Grid Menu options which have text to translate\n   * @param grid menu object\n   */\n  private resetHeaderMenuTranslations(columnDefinitions: Column[]) {\n    columnDefinitions.forEach((columnDef: Column) => {\n      if (columnDef && columnDef.header && columnDef.header && columnDef.header.menu && columnDef.header.menu.items) {\n        if (!columnDef.excludeFromHeaderMenu) {\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\n\n          columnHeaderMenuItems.forEach((item) => {\n            switch (item.command) {\n              case 'sort-asc':\n                item.title = this.translate.instant('SORT_ASCENDING') || Constants.TEXT_SORT_ASCENDING;\n                break;\n              case 'sort-desc':\n                item.title = this.translate.instant('SORT_DESCENDING') || Constants.TEXT_SORT_DESCENDING;\n                break;\n              case 'hide':\n                item.title = this.translate.instant('HIDE_COLUMN') || Constants.TEXT_HIDE_COLUMN;\n                break;\n            }\n\n            // re-translate if there's a \"titleKey\"\n            if (this._gridOptions && this._gridOptions.enableTranslate) {\n              this.translateItems(columnHeaderMenuItems, 'titleKey', 'title');\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Sort items in an array by a property name\n   * @params items array\n   * @param property name to sort with\n   * @return sorted array\n   */\n  private sortItems(items: any[], propertyName: string) {\n    // sort the custom items by their position in the list\n    items.sort((itemA, itemB) => {\n      if (itemA && itemB && itemA.hasOwnProperty(propertyName) && itemB.hasOwnProperty(propertyName)) {\n        return itemA[propertyName] - itemB[propertyName];\n      }\n      return 0;\n    });\n  }\n\n  /** Translate the an array of items from an input key and assign to the output key */\n  private translateItems(items: any[], inputKey: string, outputKey: string) {\n    for (const item of items) {\n      if (item[inputKey]) {\n        item[outputKey] = this.translate.instant(item[inputKey]);\n      }\n    }\n  }\n}\n",
    "/**\r\n * This GraphqlQueryBuilder class is a lib that already exist\r\n * but was causing issues with TypeScript, RequireJS and other bundler/packagers\r\n * and so I rewrote it in pure TypeScript.\r\n *\r\n * The previous lib can be viewed here at this Github\r\n * https://github.com/codemeasandwich/graphql-query-builder\r\n */\r\nexport default class GraphqlQueryBuilder {\r\n  alias: string;\r\n  head: any[] = [];\r\n  body: any;\r\n\r\n  /* Constructor, query/mutator you wish to use, and an alias or filter arguments. */\r\n  constructor(private queryFnName: string, aliasOrFilter?: string | object) {\r\n    if (typeof aliasOrFilter === 'function') {\r\n      this.alias = aliasOrFilter;\r\n    } else if (typeof aliasOrFilter === 'object') {\r\n      this.filter(aliasOrFilter);\r\n    } else if (undefined === aliasOrFilter && 2 === arguments.length) {\r\n      throw new TypeError(`You have passed undefined as Second argument to \"Query\"`);\r\n    } else if (undefined !== aliasOrFilter) {\r\n      throw new TypeError(`Second argument to \"Query\" should be an alias name(String) or filter arguments(Object). was passed ${aliasOrFilter}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The parameters to run the query against.\r\n   * @param filters An object mapping attribute to values\r\n   */\r\n  filter(filters: any) {\r\n    for (const prop of Object.keys(filters)) {\r\n      if (typeof filters[prop] === 'function') {\r\n        continue;\r\n      }\r\n      const val = this.getGraphQLValue(filters[prop]);\r\n      if (val === '{}') {\r\n        continue;\r\n      }\r\n      this.head.push(`${prop}:${val}`);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Outlines the properties you wish to be returned from the query.\r\n   * @param properties representing each attribute you want Returned\r\n   */\r\n  find(...searches: any[]) { // THIS NEED TO BE A \"FUNCTION\" to scope 'arguments'\r\n    if (!searches) {\r\n      throw new TypeError(`find value can not be >>falsy<<`);\r\n    }\r\n    // if its a string.. it may have other values\r\n    // else it sould be an Object or Array of maped values\r\n    const searchKeys = (searches.length === 1 && Array.isArray(searches[0])) ? searches[0] : searches;\r\n    this.body = this.parceFind(searchKeys);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set an alias for this result.\r\n   * @param alias\r\n   */\r\n  setAlias(alias: string) {\r\n    this.alias = alias;\r\n  }\r\n\r\n  /**\r\n   * Return to the formatted query string\r\n   * @return\r\n   */\r\n  toString() {\r\n    if (this.body === undefined) {\r\n      throw new ReferenceError(`return properties are not defined. use the 'find' function to defined them`);\r\n    }\r\n\r\n    return `${(this.alias) ? (this.alias + ':') : ''} ${this.queryFnName} ${(this.head.length > 0) ? '(' + this.head.join(',') + ')' : ''}  { ${this.body} }`;\r\n  }\r\n\r\n  // --\r\n  // PRIVATE FUNCTIONS\r\n  // -----------------\r\n\r\n  private parceFind(_levelA: any[]) {\r\n    const propsA = _levelA.map((currentValue, index) => {\r\n      const itemX = _levelA[index];\r\n\r\n      if (itemX instanceof GraphqlQueryBuilder) {\r\n        return itemX.toString();\r\n      } else if (!Array.isArray(itemX) && typeof itemX === 'object') {\r\n        const propsAA = Object.keys(itemX);\r\n        if (1 !== propsAA.length) {\r\n          throw new RangeError(`Alias objects should only have one value. was passed: ${JSON.stringify(itemX)}`);\r\n        }\r\n        const propS = propsAA[0];\r\n        const item = itemX[propS];\r\n\r\n        if (Array.isArray(item)) {\r\n          return new GraphqlQueryBuilder(propS).find(item);\r\n        }\r\n        return `${propS} : ${item} `;\r\n      } else if (typeof itemX === 'string') {\r\n        return itemX;\r\n      } else {\r\n        throw new RangeError(`cannot handle Find value of ${itemX}`);\r\n      }\r\n    });\r\n\r\n    return propsA.join(',');\r\n  }\r\n\r\n  private getGraphQLValue(value: any) {\r\n    if (typeof value === 'string') {\r\n      value = JSON.stringify(value);\r\n    } else if (Array.isArray(value)) {\r\n      value = value.map(item => {\r\n        return this.getGraphQLValue(item);\r\n      }).join();\r\n      value = `[${value}]`;\r\n    } else if (value instanceof Date) {\r\n      value = JSON.stringify(value);\r\n    } else if (value !== null && typeof value === 'object') {\r\n      value = this.objectToString(value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private objectToString(obj: any) {\r\n    const sourceA = [];\r\n\r\n    for (const prop of Object.keys(obj)) {\r\n      if (typeof obj[prop] === 'function') {\r\n        continue;\r\n      }\r\n      sourceA.push(`${prop}:${this.getGraphQLValue(obj[prop])}`);\r\n    }\r\n    return `{${sourceA.join()}}`;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { mapOperatorType, mapOperatorByFieldType } from './utilities';\r\nimport {\r\n  BackendService,\r\n  Column,\r\n  ColumnFilter,\r\n  ColumnFilters,\r\n  ColumnSort,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  FieldType,\r\n  FilterChangedArgs,\r\n  GraphqlCursorPaginationOption,\r\n  GraphqlDatasetFilter,\r\n  GraphqlFilteringOption,\r\n  GraphqlPaginationOption,\r\n  GraphqlServiceOption,\r\n  GraphqlSortingOption,\r\n  GridOption,\r\n  Pagination,\r\n  PaginationChangedArgs,\r\n  SortChangedArgs,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport QueryBuilder from './graphqlQueryBuilder';\r\n\r\n// timer for keeping track of user typing waits\r\nlet timer: any;\r\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\r\nconst DEFAULT_ITEMS_PER_PAGE = 25;\r\nconst DEFAULT_PAGE_SIZE = 20;\r\n\r\nexport class GraphqlService implements BackendService {\r\n  private _currentFilters: ColumnFilters | CurrentFilter[];\r\n  private _currentPagination: CurrentPagination;\r\n  private _currentSorters: CurrentSorter[];\r\n  private _columnDefinitions: Column[];\r\n  private _grid: any;\r\n  options: GraphqlServiceOption;\r\n  pagination: Pagination | undefined;\r\n  defaultOrderBy: GraphqlSortingOption = { field: 'id', direction: SortDirection.ASC };\r\n  defaultPaginationOptions: GraphqlPaginationOption | GraphqlCursorPaginationOption = {\r\n    first: DEFAULT_ITEMS_PER_PAGE,\r\n    offset: 0\r\n  };\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Build the GraphQL query, since the service include/exclude cursor, the output query will be different.\r\n   * @param serviceOptions GraphqlServiceOption\r\n   */\r\n  buildQuery() {\r\n    if (!this.options || !this.options.datasetName || (!this._columnDefinitions && !this.options.columnDefinitions)) {\r\n      throw new Error('GraphQL Service requires \"datasetName\" & \"columnDefinitions\" properties for it to work');\r\n    }\r\n\r\n    // get the column definitions and exclude some if they were tagged as excluded\r\n    let columnDefinitions = this._columnDefinitions || this.options.columnDefinitions;\r\n    columnDefinitions = columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\r\n\r\n    const queryQb = new QueryBuilder('query');\r\n    const datasetQb = new QueryBuilder(this.options.datasetName);\r\n    const dataQb = (this.options.isWithCursor) ? new QueryBuilder('edges') : new QueryBuilder('nodes');\r\n\r\n    // get all the columnds Ids for the filters to work\r\n    let columnIds: string[] = [];\r\n    if (columnDefinitions && Array.isArray(columnDefinitions)) {\r\n      for (const column of columnDefinitions) {\r\n        columnIds.push(column.field);\r\n\r\n        // if extra \"fields\" are passed, also push them to columnIds\r\n        if (column.fields) {\r\n          columnIds.push(...column.fields);\r\n        }\r\n      }\r\n      // columnIds = columnDefinitions.map((column) => column.field);\r\n    } else {\r\n      columnIds = this.options.columnIds || [];\r\n    }\r\n\r\n    // Slickgrid also requires the \"id\" field to be part of DataView\r\n    // add it to the GraphQL query if it wasn't already part of the list\r\n    if (columnIds.indexOf('id') === -1) {\r\n      columnIds.unshift('id');\r\n    }\r\n\r\n    const filters = this.buildFilterQuery(columnIds);\r\n\r\n    if (this.options.isWithCursor) {\r\n      // ...pageInfo { hasNextPage, endCursor }, edges { cursor, node { _filters_ } }\r\n      const pageInfoQb = new QueryBuilder('pageInfo');\r\n      pageInfoQb.find('hasNextPage', 'endCursor');\r\n      dataQb.find(['cursor', { node: filters }]);\r\n      datasetQb.find(['totalCount', pageInfoQb, dataQb]);\r\n    } else {\r\n      // ...nodes { _filters_ }\r\n      dataQb.find(filters);\r\n      datasetQb.find(['totalCount', dataQb]);\r\n    }\r\n\r\n    // add dataset filters, could be Pagination and SortingFilters and/or FieldFilters\r\n    const datasetFilters: GraphqlDatasetFilter = {\r\n      ...this.options.paginationOptions,\r\n      first: ((this.options.paginationOptions && this.options.paginationOptions.first) ? this.options.paginationOptions.first : ((this.pagination && this.pagination.pageSize) ? this.pagination.pageSize : null)) || this.defaultPaginationOptions.first\r\n    };\r\n\r\n    if (!this.options.isWithCursor) {\r\n      datasetFilters.offset = ((this.options.paginationOptions && this.options.paginationOptions.hasOwnProperty('offset')) ? +this.options.paginationOptions['offset'] : 0);\r\n    }\r\n\r\n    if (this.options.sortingOptions && Array.isArray(this.options.sortingOptions) && this.options.sortingOptions.length > 0) {\r\n      // orderBy: [{ field:x, direction: 'ASC' }]\r\n      datasetFilters.orderBy = this.options.sortingOptions;\r\n    }\r\n    if (this.options.filteringOptions && Array.isArray(this.options.filteringOptions) && this.options.filteringOptions.length > 0) {\r\n      // filterBy: [{ field: date, operator: '>', value: '2000-10-10' }]\r\n      datasetFilters.filterBy = this.options.filteringOptions;\r\n    }\r\n    if (this.options.addLocaleIntoQuery) {\r\n      // first: 20, ... locale: \"en-CA\"\r\n      datasetFilters.locale = this._gridOptions && this._gridOptions.i18n && this._gridOptions.i18n.currentLang || 'en';\r\n    }\r\n    if (this.options.extraQueryArguments) {\r\n      // first: 20, ... userId: 123\r\n      for (const queryArgument of this.options.extraQueryArguments) {\r\n        datasetFilters[queryArgument.field] = queryArgument.value;\r\n      }\r\n    }\r\n\r\n    // query { users(first: 20, orderBy: [], filterBy: [])}\r\n    datasetQb.filter(datasetFilters);\r\n    queryQb.find(datasetQb);\r\n\r\n    const enumSearchProperties = ['direction:', 'field:', 'operator:'];\r\n    return this.trimDoubleQuotesOnEnumField(queryQb.toString(), enumSearchProperties, this.options.keepArgumentFieldDoubleQuotes || false);\r\n  }\r\n\r\n  /**\r\n   * From an input array of strings, we want to build a GraphQL query string.\r\n   * The process has to take the dot notation and parse it into a valid GraphQL query\r\n   * Following this SO answer https://stackoverflow.com/a/47705476/1212166\r\n   *\r\n   * INPUT\r\n   *  ['firstName', 'lastName', 'billing.address.street', 'billing.address.zip']\r\n   * OUTPUT\r\n   * firstName, lastName, billing{address{street, zip}}\r\n   * @param inputArray\r\n   */\r\n  buildFilterQuery(inputArray: string[]) {\r\n\r\n    const set = (o: any = {}, a: any) => {\r\n      const k = a.shift();\r\n      o[k] = a.length ? set(o[k], a) : null;\r\n      return o;\r\n    };\r\n\r\n    const output = inputArray.reduce((o: any, a: string) => set(o, a.split('.')), {});\r\n\r\n    return JSON.stringify(output)\r\n      .replace(/\\\"|\\:|null/g, '')\r\n      .replace(/^\\{/, '')\r\n      .replace(/\\}$/, '');\r\n  }\r\n\r\n  init(serviceOptions?: GraphqlServiceOption, pagination?: Pagination, grid?: any): void {\r\n    this._grid = grid;\r\n    this.options = serviceOptions || {};\r\n    this.pagination = pagination;\r\n\r\n    if (grid && grid.getColumns) {\r\n      this._columnDefinitions = serviceOptions.columnDefinitions || grid.getColumns();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get an initialization of Pagination options\r\n   * @return Pagination Options\r\n   */\r\n  getInitPaginationOptions(): GraphqlDatasetFilter {\r\n    return (this.options.isWithCursor) ? { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE) } : { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE), offset: 0 };\r\n  }\r\n\r\n  /** Get the GraphQL dataset name */\r\n  getDatasetName(): string {\r\n    return this.options.datasetName || '';\r\n  }\r\n\r\n  /** Get the Filters that are currently used by the grid */\r\n  getCurrentFilters(): ColumnFilters | CurrentFilter[] {\r\n    return this._currentFilters;\r\n  }\r\n\r\n  /** Get the Pagination that is currently used by the grid */\r\n  getCurrentPagination(): CurrentPagination {\r\n    return this._currentPagination;\r\n  }\r\n\r\n  /** Get the Sorters that are currently used by the grid */\r\n  getCurrentSorters(): CurrentSorter[] {\r\n    return this._currentSorters;\r\n  }\r\n\r\n  /*\r\n   * Reset the pagination options\r\n   */\r\n  resetPaginationOptions() {\r\n    let paginationOptions;\r\n    if (this.options.isWithCursor) {\r\n      // first, last, after, before\r\n      paginationOptions = {\r\n        after: '',\r\n        before: undefined,\r\n        last: undefined\r\n      } as GraphqlCursorPaginationOption;\r\n    } else {\r\n      // first, last, offset\r\n      paginationOptions = (this.options.paginationOptions || this.getInitPaginationOptions()) as GraphqlPaginationOption;\r\n      paginationOptions.offset = 0;\r\n    }\r\n\r\n    // save current pagination as Page 1 and page size as \"first\" set size\r\n    this._currentPagination = {\r\n      pageNumber: 1,\r\n      pageSize: paginationOptions.first\r\n    };\r\n\r\n    this.updateOptions({ paginationOptions });\r\n  }\r\n\r\n  updateOptions(serviceOptions?: GraphqlServiceOption) {\r\n    this.options = { ...this.options, ...serviceOptions };\r\n  }\r\n\r\n  /*\r\n   * FILTERING\r\n   */\r\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\r\n    const gridOptions: GridOption = this._gridOptions || args.grid.getOptions();\r\n    const backendApi = gridOptions.backendServiceApi;\r\n\r\n    if (backendApi === undefined) {\r\n      throw new Error('Something went wrong in the GraphqlService, \"backendServiceApi\" is not initialized');\r\n    }\r\n\r\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\r\n    let debounceTypingDelay = 0;\r\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\r\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\r\n    }\r\n\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    this._currentFilters = this.castFilterToColumnFilter(args.columnFilters);\r\n\r\n    const promise = new Promise<string>((resolve, reject) => {\r\n      if (!args || !args.grid) {\r\n        throw new Error('Something went wrong when trying create the GraphQL Backend Service, it seems that \"args\" is not populated correctly');\r\n      }\r\n\r\n      // reset Pagination, then build the GraphQL query which we will use in the WebAPI callback\r\n      // wait a minimum user typing inactivity before processing any query\r\n      clearTimeout(timer);\r\n      timer = setTimeout(() => {\r\n        // loop through all columns to inspect filters & set the query\r\n        this.updateFilters(args.columnFilters, false);\r\n\r\n        this.resetPaginationOptions();\r\n        resolve(this.buildQuery());\r\n      }, debounceTypingDelay);\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  /*\r\n   * PAGINATION\r\n   * With cursor, the query can have 4 arguments (first, after, last, before), for example:\r\n   *   users (first:20, after:\"YXJyYXljb25uZWN0aW9uOjM=\") {\r\n   *     totalCount\r\n   *     pageInfo {\r\n   *       hasNextPage\r\n   *       endCursor\r\n   *     }\r\n   *     edges {\r\n   *       cursor\r\n   *       node {\r\n   *         name\r\n   *         gender\r\n   *       }\r\n   *     }\r\n   *   }\r\n   * Without cursor, the query can have 3 arguments (first, last, offset), for example:\r\n   *   users (first:20, offset: 10) {\r\n   *     totalCount\r\n   *     nodes {\r\n   *       name\r\n   *       gender\r\n   *     }\r\n   *   }\r\n   */\r\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\r\n    const pageSize = +(args.pageSize || ((this.pagination) ? this.pagination.pageSize : DEFAULT_PAGE_SIZE));\r\n    this.updatePagination(args.newPage, pageSize);\r\n\r\n    // build the GraphQL query which we will use in the WebAPI callback\r\n    return this.buildQuery();\r\n  }\r\n\r\n  /*\r\n   * SORTING\r\n   * we will use sorting as per a Facebook suggestion on a Github issue (with some small changes)\r\n   * https://github.com/graphql/graphql-relay-js/issues/20#issuecomment-220494222\r\n   */\r\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\r\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\r\n\r\n    // loop through all columns to inspect sorters & set the query\r\n    this.updateSorters(sortColumns);\r\n\r\n    // build the GraphQL query which we will use in the WebAPI callback\r\n    return this.buildQuery();\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect filters & update backend service filteringOptions\r\n   * @param columnFilters\r\n   */\r\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset: boolean) {\r\n    const searchByArray: GraphqlFilteringOption[] = [];\r\n    let searchValue: string | string[];\r\n\r\n    for (const columnId in columnFilters) {\r\n      if (columnFilters.hasOwnProperty(columnId)) {\r\n        const columnFilter = columnFilters[columnId];\r\n\r\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\r\n        let columnDef: Column | undefined;\r\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\r\n          columnDef = this._columnDefinitions.find((column: Column) => column.id === columnFilter.columnId);\r\n        } else {\r\n          columnDef = columnFilter.columnDef;\r\n        }\r\n        if (!columnDef) {\r\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\r\n        }\r\n\r\n        const fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\r\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\r\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\r\n        if (typeof fieldSearchValue === 'undefined') {\r\n          fieldSearchValue = '';\r\n        }\r\n\r\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\r\n          throw new Error(`GraphQL filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {model: Filters.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\r\n        }\r\n\r\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\r\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n        let operator = columnFilter.operator || ((matches) ? matches[1] : '');\r\n        searchValue = (!!matches) ? matches[2] : '';\r\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\r\n\r\n        // no need to query if search value is empty\r\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\r\n          continue;\r\n        }\r\n\r\n        // when having more than 1 search term (we need to create a CSV string for GraphQL \"IN\" or \"NOT IN\" filter search)\r\n        if (searchTerms && searchTerms.length > 1) {\r\n          searchValue = searchTerms.join(',');\r\n        } else if (typeof searchValue === 'string') {\r\n          // escaping the search value\r\n          searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\r\n          if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\r\n            operator = (operator === '*' || operator === '*z') ? 'endsWith' : 'startsWith';\r\n          }\r\n        }\r\n\r\n        // if we didn't find an Operator but we have a Filter Type, we should use default Operator\r\n        // multipleSelect is \"IN\", while singleSelect is \"EQ\", else don't map any operator\r\n        if (!operator && columnDef.filter) {\r\n          operator = columnDef.filter.operator;\r\n        }\r\n\r\n        // if we still don't have an operator find the proper Operator to use by it's field type\r\n        if (!operator) {\r\n          operator = mapOperatorByFieldType(columnDef.type || FieldType.string);\r\n        }\r\n\r\n        searchByArray.push({\r\n          field: fieldName,\r\n          operator: mapOperatorType(operator),\r\n          value: searchValue\r\n        });\r\n      }\r\n    }\r\n\r\n    // update the service options with filters for the buildQuery() to work later\r\n    this.updateOptions({ filteringOptions: searchByArray });\r\n  }\r\n\r\n  /**\r\n   * Update the pagination component with it's new page number and size\r\n   * @param newPage\r\n   * @param pageSize\r\n   */\r\n  updatePagination(newPage: number, pageSize: number) {\r\n    this._currentPagination = {\r\n      pageNumber: newPage,\r\n      pageSize\r\n    };\r\n\r\n    let paginationOptions;\r\n    if (this.options.isWithCursor) {\r\n      paginationOptions = {\r\n        first: pageSize\r\n      };\r\n    } else {\r\n      paginationOptions = {\r\n        first: pageSize,\r\n        offset: (newPage - 1) * pageSize\r\n      };\r\n    }\r\n\r\n    this.updateOptions({ paginationOptions });\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect sorters & update backend service sortingOptions\r\n   * @param columnFilters\r\n   */\r\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\r\n    let currentSorters: CurrentSorter[] = [];\r\n    let graphqlSorters: GraphqlSortingOption[] = [];\r\n\r\n    if (!sortColumns && presetSorters) {\r\n      // make the presets the current sorters, also make sure that all direction are in uppercase for GraphQL\r\n      currentSorters = presetSorters;\r\n      currentSorters.forEach((sorter) => sorter.direction = sorter.direction.toUpperCase() as SortDirectionString);\r\n\r\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\r\n      const tmpSorterArray = currentSorters.map((sorter) => {\r\n        const columnDef = this._columnDefinitions.find((column: Column) => column.id === sorter.columnId);\r\n        if (columnDef) {\r\n          graphqlSorters.push({\r\n            field: (columnDef.queryField || columnDef.queryFieldSorter || columnDef.field || columnDef.id) + '',\r\n            direction: sorter.direction\r\n          });\r\n        }\r\n        return {\r\n          columnId: sorter.columnId,\r\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\r\n        };\r\n      });\r\n      this._grid.setSortColumns(tmpSorterArray);\r\n    } else if (sortColumns && !presetSorters) {\r\n      // build the orderBy array, it could be multisort, example\r\n      // orderBy:[{field: lastName, direction: ASC}, {field: firstName, direction: DESC}]\r\n      if (sortColumns && sortColumns.length === 0) {\r\n        graphqlSorters = new Array(this.defaultOrderBy); // when empty, use the default sort\r\n        currentSorters = new Array({ columnId: this.defaultOrderBy.field, direction: this.defaultOrderBy.direction });\r\n      } else {\r\n        if (sortColumns) {\r\n          for (const column of sortColumns) {\r\n            if (column && column.sortCol) {\r\n              currentSorters.push({\r\n                columnId: column.sortCol.id + '',\r\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n              });\r\n\r\n              graphqlSorters.push({\r\n                field: (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '',\r\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // keep current Sorters and update the service options with the new sorting\r\n    this._currentSorters = currentSorters;\r\n    this.updateOptions({ sortingOptions: graphqlSorters });\r\n  }\r\n\r\n  /**\r\n   * A function which takes an input string and removes double quotes only\r\n   * on certain fields are identified as GraphQL enums (except fields with dot notation)\r\n   * For example let say we identified (\"direction:\", \"sort\") as word which are GraphQL enum fields\r\n   * then the result will be:\r\n   * FROM\r\n   * query { users (orderBy:[{field:\"firstName\", direction:\"ASC\"} }]) }\r\n   * TO\r\n   * query { users (orderBy:[{field: firstName, direction: ASC}})}\r\n   *\r\n   * EXCEPTIONS (fields with dot notation \".\" which are inside a \"field:\")\r\n   * these fields will keep double quotes while everything else will be stripped of double quotes\r\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: \"ASC\"} }\r\n   * TO\r\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: ASC}}\r\n   * @param inputStr input string\r\n   * @param enumSearchWords array of enum words to filter\r\n   * @returns outputStr output string\r\n   */\r\n  trimDoubleQuotesOnEnumField(inputStr: string, enumSearchWords: string[], keepArgumentFieldDoubleQuotes: boolean) {\r\n    const patternWordInQuotes = `\\s?((field:\\s*)?\".*?\")`;\r\n    let patternRegex = enumSearchWords.join(patternWordInQuotes + '|');\r\n    patternRegex += patternWordInQuotes; // the last one should also have the pattern but without the pipe \"|\"\r\n    // example with (field: & direction:):  /field:s?(\".*?\")|direction:s?(\".*?\")/\r\n    const reg = new RegExp(patternRegex, 'g');\r\n\r\n    return inputStr.replace(reg, (group1, group2, group3) => {\r\n      // remove double quotes except when the string starts with a \"field:\"\r\n      let removeDoubleQuotes = true;\r\n      if (group1.startsWith('field:') && keepArgumentFieldDoubleQuotes) {\r\n        removeDoubleQuotes = false;\r\n      }\r\n      const rep = removeDoubleQuotes ? group1.replace(/\"/g, '') : group1;\r\n      return rep;\r\n    });\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // -------------------\r\n  /**\r\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\r\n   * @param columnFilters\r\n   */\r\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    const filtersArray: ColumnFilter[] = (typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters;\r\n\r\n    return filtersArray.map((filter) => {\r\n      const columnDef = filter.columnDef;\r\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\r\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\r\n      if (filter.operator) {\r\n        tmpFilter.operator = filter.operator;\r\n      }\r\n      if (Array.isArray(filter.searchTerms)) {\r\n        tmpFilter.searchTerms = filter.searchTerms;\r\n      }\r\n      return tmpFilter;\r\n    });\r\n  }\r\n}\r\n",
    "declare interface StringConstructor {\r\n  allTitleCase(inputStr: string): string;\r\n  format(inputStr: string, args: any): string;\r\n  padZero(length: number): string;\r\n  trim(inputStr: string): string;\r\n  titleCase(inputStr: string): string;\r\n}\r\n\r\n\r\nString.format = function(format: string, args): string {\r\n  // const args = (Array.isArray(arguments[1])) ? arguments[1] : Array.prototype.slice.call(arguments, 1);\r\n\r\n  return format.replace(/{(\\d+)}/g, function (match, number) {\r\n    return (typeof args[number] !== 'undefined') ? args[number] : match;\r\n  });\r\n};\r\n\r\nString.padZero = function (this: string, length: number) {\r\n  let s = this;\r\n  while (s.length < length) {\r\n    s = '0' + s;\r\n  }\r\n  return s;\r\n};\r\n\r\n/**\r\n * Trim any extra white space from the string\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.trim = function(inputStr: string): string {\r\n  return inputStr ? inputStr.replace(/\\s+/g, ' ') : inputStr;\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.allTitleCase = function(inputStr: string): string {\r\n  return inputStr.replace(/\\w\\S*/g, function(outputStr) {\r\n     return outputStr.charAt(0).toUpperCase() + outputStr.substr(1).toLowerCase();\r\n  });\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n*/\r\nString.titleCase = function(inputStr: string): string {\r\n  return inputStr.charAt(0).toUpperCase() + inputStr.slice(1);\r\n};\r\n",
    "import './global-utilities';\r\nimport { CaseType, OdataOption } from './../models/index';\r\n\r\nexport class OdataService {\r\n  _columnFilters: any;\r\n  _defaultSortBy: string;\r\n  _odataOptions: OdataOption;\r\n\r\n  constructor() {\r\n    this._odataOptions = {\r\n      filterQueue: [],\r\n      orderBy: ''\r\n    };\r\n    this._defaultSortBy = '';\r\n    this._columnFilters = {};\r\n  }\r\n\r\n  /*\r\n    * Build the OData query string from all the options provided\r\n    * @return string OData query\r\n    */\r\n  buildQuery(): string {\r\n    this._odataOptions.filterQueue = [];\r\n    const queryTmpArray = [];\r\n\r\n    if (this._odataOptions.top) {\r\n      queryTmpArray.push(`$top=${this._odataOptions.top}`);\r\n    }\r\n    if (this._odataOptions.skip) {\r\n      queryTmpArray.push(`$skip=${this._odataOptions.skip}`);\r\n    }\r\n    if (this._odataOptions.orderBy) {\r\n      let argument = '';\r\n      if (Array.isArray(this._odataOptions.orderBy)) {\r\n        argument = this._odataOptions.orderBy.join(','); // csv, that will form a query example like: $orderby=RoleName asc, Id desc\r\n      } else {\r\n        argument = this._odataOptions.orderBy;\r\n      }\r\n      queryTmpArray.push(`$orderby=${argument}`);\r\n    }\r\n    if (this._odataOptions.filterBy || this._odataOptions.filter) {\r\n      if (this._odataOptions.filter) {\r\n        this._odataOptions.filterQueue = [];\r\n        let filterStr = this._odataOptions.filter;\r\n        if (Array.isArray(this._odataOptions.filter)) {\r\n          filterStr = this._odataOptions.filter.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n        }\r\n        this._odataOptions.filterQueue.push(`(${filterStr})`);\r\n      }\r\n      // filterBy are passed manually by the user, however we will only add it if the column wasn't yet filtered\r\n      if (!!this._odataOptions.filterBy && !!this._odataOptions.filterBy.fieldName && !this._columnFilters[this._odataOptions.filterBy.fieldName.toLowerCase()]) {\r\n        if (this._odataOptions.filterBy.searchTerm !== '') {\r\n          this.saveColumnFilter(this._odataOptions.filterBy.fieldName.toLowerCase(), this._odataOptions.filterBy.searchTerm, this._odataOptions.filterBy.searchTerms);\r\n          this.updateFilterFromListTerms(this._odataOptions.filterBy);\r\n        }\r\n      }\r\n    }\r\n    if (this._odataOptions.filterQueue.length > 0) {\r\n      const query = this._odataOptions.filterQueue.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n      this._odataOptions.filter = query; // overwrite with\r\n      queryTmpArray.push(`$filter=${query}`);\r\n    }\r\n\r\n    // join all the odata functions by a '&'\r\n    return queryTmpArray.join('&');\r\n  }\r\n\r\n  getFilterByColumn(columnName: string): string {\r\n    return (!!this._columnFilters[columnName]) ? this._columnFilters[columnName] : null;\r\n  }\r\n\r\n  getFilterCount(): number {\r\n    return (this._odataOptions.filterQueue) ? this._odataOptions.filterQueue.length : 0;\r\n  }\r\n\r\n  get columnFilters(): any[] {\r\n    return this._columnFilters;\r\n  }\r\n\r\n  get options(): OdataOption {\r\n    return this._odataOptions;\r\n  }\r\n\r\n  set options(options: OdataOption) {\r\n    this._odataOptions = options;\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string) {\r\n    delete this._columnFilters[fieldName];\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: any, searchTerms?: any[]) {\r\n    this._columnFilters[fieldName] = {\r\n      search: searchTerms,\r\n      value\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update the filter by a list of terms usually passed manually by the user as default filters\r\n   * @param filterOptions\r\n   * @returns\r\n   */\r\n  updateFilterFromListTerms(filterOptions: any) {\r\n    // build the filter query\r\n    if (Array.isArray(filterOptions)) {\r\n      filterOptions.forEach((filterOptionObject) => {\r\n        this.updateFilterFromTerm(filterOptionObject);\r\n      });\r\n    } else {\r\n      this.updateFilterFromTerm(filterOptions);\r\n    }\r\n  }\r\n\r\n  updateFilterFromTerm(filterOptions: any) {\r\n    let searchBy = '';\r\n    const tmpSearchByArray = [];\r\n    const fieldName = filterOptions.fieldName;\r\n    const fieldSearchTerms = filterOptions.searchTerms;\r\n    const operator = filterOptions.operator;\r\n\r\n    // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n    if (!!fieldSearchTerms && fieldSearchTerms.length > 0) {\r\n      const tmpSearchTerms = [];\r\n\r\n      if (operator === 'IN') {\r\n        // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n        for (let j = 0, lnj = fieldSearchTerms.length; j < lnj; j++) {\r\n          tmpSearchTerms.push(`${fieldName} eq '${fieldSearchTerms[j]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' or ');\r\n        searchBy = `$(${searchBy})`;\r\n      } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n        // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n        for (let k = 0, lnk = fieldSearchTerms.length; k < lnk; k++) {\r\n          tmpSearchTerms.push(`${fieldName} ne '${fieldSearchTerms[k]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' and ');\r\n        searchBy = `$(${searchBy})`;\r\n      }\r\n    }\r\n\r\n    // push to our temp array and also trim white spaces\r\n    tmpSearchByArray.push(String.trim(searchBy));\r\n\r\n    // add to the filter queue only if it doesn't exist in the queue\r\n    const filter = (tmpSearchByArray.length > 0) ? tmpSearchByArray.join(' and ') : '';\r\n    if (this._odataOptions.filterQueue && this._odataOptions.filterQueue.indexOf(filter) === -1) {\r\n      this._odataOptions.filterQueue.push(filter);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change any OData options that will be used to build the query\r\n   * @param object options\r\n   */\r\n  updateOptions(options: OdataOption) {\r\n    for (const property of Object.keys(options)) {\r\n      if (options.hasOwnProperty(property)) {\r\n        this._odataOptions[property] = options[property]; // replace of the property\r\n      }\r\n\r\n      // we need to keep the defaultSortBy for references whenever the user removes his Sorting\r\n      // then we would revert to the defaultSortBy and the only way is to keep a hard copy here\r\n      if (property === 'orderBy' || property === 'sortBy') {\r\n        let sortBy = options[property];\r\n\r\n        // make sure first char of each orderBy field is capitalize\r\n        if (this._odataOptions.caseType === CaseType.pascalCase) {\r\n          if (Array.isArray(sortBy)) {\r\n            sortBy.forEach((field, index, inputArray) => {\r\n              inputArray[index] = String.titleCase(field);\r\n            });\r\n          } else {\r\n            sortBy = String.titleCase(options[property]);\r\n          }\r\n        }\r\n        this._odataOptions.orderBy = sortBy;\r\n        this._defaultSortBy = sortBy;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
    "import './global-utilities';\r\nimport { parseUtcDate } from './utilities';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  BackendService,\r\n  CaseType,\r\n  Column,\r\n  ColumnFilter,\r\n  ColumnFilters,\r\n  ColumnSort,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  FilterChangedArgs,\r\n  FieldType,\r\n  GridOption,\r\n  OdataOption,\r\n  Pagination,\r\n  PaginationChangedArgs,\r\n  SearchTerm,\r\n  SortChangedArgs,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport { OdataService } from './odata.service';\r\n\r\nlet timer: any;\r\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\r\nconst DEFAULT_ITEMS_PER_PAGE = 25;\r\nconst DEFAULT_PAGE_SIZE = 20;\r\n\r\n@Injectable()\r\nexport class GridOdataService implements BackendService {\r\n  private _currentFilters: CurrentFilter[];\r\n  private _currentPagination: CurrentPagination;\r\n  private _currentSorters: CurrentSorter[];\r\n  private _columnDefinitions: Column[];\r\n  private _grid: any;\r\n  odataService: OdataService;\r\n  options: OdataOption;\r\n  pagination: Pagination | undefined;\r\n  defaultOptions: OdataOption = {\r\n    top: DEFAULT_ITEMS_PER_PAGE,\r\n    orderBy: '',\r\n    caseType: CaseType.pascalCase\r\n  };\r\n\r\n  constructor() {\r\n    this.odataService = new OdataService();\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  buildQuery(): string {\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  init(options: OdataOption, pagination?: Pagination, grid?: any): void {\r\n    this._grid = grid;\r\n    const mergedOptions = { ...this.defaultOptions, ...options };\r\n    if (pagination && pagination.pageSize) {\r\n      mergedOptions.top = pagination.pageSize;\r\n    }\r\n    this.odataService.options = { ...mergedOptions, top: mergedOptions.top || this.defaultOptions.top };\r\n    this.options = this.odataService.options;\r\n    this.pagination = pagination;\r\n\r\n    // save current pagination as Page 1 and page size as \"top\"\r\n    this._currentPagination = {\r\n      pageNumber: 1,\r\n      pageSize: this.odataService.options.top || this.defaultOptions.top\r\n    };\r\n\r\n    if (grid && grid.getColumns) {\r\n      this._columnDefinitions = (options && options.columnDefinitions) || grid.getColumns();\r\n      this._columnDefinitions = this._columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\r\n    }\r\n  }\r\n\r\n  updateOptions(serviceOptions?: OdataOption) {\r\n    this.options = { ...this.options, ...serviceOptions };\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string): void {\r\n    this.odataService.removeColumnFilter(fieldName);\r\n  }\r\n\r\n  /** Get the Filters that are currently used by the grid */\r\n  getCurrentFilters(): CurrentFilter[] {\r\n    return this._currentFilters;\r\n  }\r\n\r\n  /** Get the Pagination that is currently used by the grid */\r\n  getCurrentPagination(): CurrentPagination {\r\n    return this._currentPagination;\r\n  }\r\n\r\n  /** Get the Sorters that are currently used by the grid */\r\n  getCurrentSorters(): CurrentSorter[] {\r\n    return this._currentSorters;\r\n  }\r\n\r\n  /*\r\n   * Reset the pagination options\r\n   */\r\n  resetPaginationOptions() {\r\n    this.odataService.updateOptions({\r\n      skip: 0\r\n    });\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: string, terms?: any[]) {\r\n    this.odataService.saveColumnFilter(fieldName, value, terms);\r\n  }\r\n\r\n  /*\r\n   * FILTERING\r\n   */\r\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\r\n    const serviceOptions: GridOption = args.grid.getOptions();\r\n    const backendApi = serviceOptions.backendServiceApi;\r\n\r\n    if (backendApi === undefined) {\r\n      throw new Error('Something went wrong in the GridOdataService, \"backendServiceApi\" is not initialized');\r\n    }\r\n\r\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\r\n    let debounceTypingDelay = 0;\r\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\r\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\r\n    }\r\n\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    this._currentFilters = this.castFilterToColumnFilter(args.columnFilters);\r\n\r\n    const promise = new Promise<string>((resolve, reject) => {\r\n      // reset Pagination, then build the OData query which we will use in the WebAPI callback\r\n      // wait a minimum user typing inactivity before processing any query\r\n      clearTimeout(timer);\r\n      timer = setTimeout(() => {\r\n        // loop through all columns to inspect filters & set the query\r\n        this.updateFilters(args.columnFilters);\r\n\r\n        this.resetPaginationOptions();\r\n        resolve(this.odataService.buildQuery());\r\n      }, debounceTypingDelay);\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  /*\r\n   * PAGINATION\r\n   */\r\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\r\n    const pageSize = +(args.pageSize || DEFAULT_PAGE_SIZE);\r\n    this.updatePagination(args.newPage, pageSize);\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  /*\r\n   * SORTING\r\n   */\r\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\r\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\r\n\r\n    // loop through all columns to inspect sorters & set the query\r\n    this.updateSorters(sortColumns);\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect filters & update backend service filteringOptions\r\n   * @param columnFilters\r\n   */\r\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset?: boolean) {\r\n    let searchBy = '';\r\n    const searchByArray: string[] = [];\r\n\r\n    // loop through all columns to inspect filters\r\n    for (const columnId in columnFilters) {\r\n      if (columnFilters.hasOwnProperty(columnId)) {\r\n        const columnFilter = columnFilters[columnId];\r\n\r\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\r\n        let columnDef: Column | undefined;\r\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\r\n          columnDef = this._columnDefinitions.find((column: Column) => {\r\n            return column.id === columnFilter.columnId;\r\n          });\r\n        } else {\r\n          columnDef = columnFilter.columnDef;\r\n        }\r\n        if (!columnDef) {\r\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\r\n        }\r\n\r\n        let fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\r\n        const fieldType = columnDef.type || 'string';\r\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\r\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\r\n        if (typeof fieldSearchValue === 'undefined') {\r\n          fieldSearchValue = '';\r\n        }\r\n\r\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\r\n          throw new Error(`ODdata filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {model: Filters.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\r\n        }\r\n\r\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\r\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n        const operator = columnFilter.operator || ((matches) ? matches[1] : '');\r\n        let searchValue = (!!matches) ? matches[2] : '';\r\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\r\n        const bypassOdataQuery = columnFilter.bypassBackendQuery || false;\r\n\r\n        // no need to query if search value is empty\r\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\r\n          this.removeColumnFilter(fieldName);\r\n          continue;\r\n        }\r\n\r\n        // escaping the search value\r\n        searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\r\n        searchValue = encodeURIComponent(searchValue); // encode URI of the final search value\r\n\r\n        // extra query arguments\r\n        if (bypassOdataQuery) {\r\n          // push to our temp array and also trim white spaces\r\n          if (fieldName) {\r\n            this.saveColumnFilter(fieldName, fieldSearchValue, searchTerms);\r\n          }\r\n        } else {\r\n          searchBy = '';\r\n\r\n          // titleCase the fieldName so that it matches the WebApi names\r\n          if (this.odataService.options.caseType === CaseType.pascalCase) {\r\n            fieldName = String.titleCase(fieldName || '');\r\n          }\r\n\r\n          // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n          if (searchTerms && searchTerms.length > 1) {\r\n            const tmpSearchTerms = [];\r\n\r\n            if (operator === 'IN') {\r\n              // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n              for (let j = 0, lnj = searchTerms.length; j < lnj; j++) {\r\n                tmpSearchTerms.push(`${fieldName} eq '${searchTerms[j]}'`);\r\n              }\r\n              searchBy = tmpSearchTerms.join(' or ');\r\n              searchBy = `(${searchBy})`;\r\n            } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n              // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n              for (let k = 0, lnk = searchTerms.length; k < lnk; k++) {\r\n                tmpSearchTerms.push(`${fieldName} ne '${searchTerms[k]}'`);\r\n              }\r\n              searchBy = tmpSearchTerms.join(' and ');\r\n              searchBy = `(${searchBy})`;\r\n            }\r\n          } else if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar !== '') {\r\n            // first/last character is a '*' will be a startsWith or endsWith\r\n            searchBy = (operator === '*' || operator === '*z')\r\n              ? `endswith(${fieldName}, '${searchValue}')`\r\n              : `startswith(${fieldName}, '${searchValue}')`;\r\n          } else if (fieldType === FieldType.date) {\r\n            // date field needs to be UTC and within DateTime function\r\n            const dateFormatted = parseUtcDate(searchValue, true);\r\n            if (dateFormatted) {\r\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} DateTime'${dateFormatted}'`;\r\n            }\r\n          } else if (fieldType === FieldType.string) {\r\n            // string field needs to be in single quotes\r\n            if (operator === '') {\r\n              searchBy = `substringof('${searchValue}', ${fieldName})`;\r\n            } else {\r\n              // searchBy = `substringof('${searchValue}', ${fieldNameCased}) ${this.mapOdataOperator(operator)} true`;\r\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} '${searchValue}'`;\r\n            }\r\n          } else {\r\n            // any other field type (or undefined type)\r\n            searchValue = fieldType === FieldType.number ? searchValue : `'${searchValue}'`;\r\n            searchBy = `${fieldName} ${this.mapOdataOperator(operator)} ${searchValue}`;\r\n          }\r\n\r\n          // push to our temp array and also trim white spaces\r\n          if (searchBy !== '') {\r\n            searchByArray.push(String.trim(searchBy));\r\n            this.saveColumnFilter(fieldName || '', fieldSearchValue, searchTerms);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // update the service options with filters for the buildQuery() to work later\r\n    this.odataService.updateOptions({\r\n      filter: (searchByArray.length > 0) ? searchByArray.join(' and ') : '',\r\n      skip: undefined\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the pagination component with it's new page number and size\r\n   * @param newPage\r\n   * @param pageSize\r\n   */\r\n  updatePagination(newPage: number, pageSize: number) {\r\n    this._currentPagination = {\r\n      pageNumber: newPage,\r\n      pageSize\r\n    };\r\n\r\n    this.odataService.updateOptions({\r\n      top: pageSize,\r\n      skip: (newPage - 1) * pageSize\r\n    });\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect sorters & update backend service orderBy\r\n   * @param columnFilters\r\n   */\r\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\r\n    let sortByArray: any[] = [];\r\n    const sorterArray: CurrentSorter[] = [];\r\n\r\n    if (!sortColumns && presetSorters) {\r\n      // make the presets the current sorters, also make sure that all direction are in lowercase for OData\r\n      sortByArray = presetSorters;\r\n      sortByArray.forEach((sorter) => sorter.direction = sorter.direction.toLowerCase() as SortDirectionString);\r\n\r\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\r\n      const tmpSorterArray = sortByArray.map((sorter) => {\r\n        sorterArray.push({\r\n          columnId: sorter.columnId + '',\r\n          direction: sorter.direction\r\n        });\r\n        return {\r\n          columnId: sorter.columnId,\r\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\r\n        };\r\n      });\r\n      this._grid.setSortColumns(tmpSorterArray);\r\n    } else if (sortColumns && !presetSorters) {\r\n      // build the SortBy string, it could be multisort, example: customerNo asc, purchaserName desc\r\n      if (sortColumns && sortColumns.length === 0) {\r\n        sortByArray = new Array(this.defaultOptions.orderBy); // when empty, use the default sort\r\n      } else {\r\n        if (sortColumns) {\r\n          for (const column of sortColumns) {\r\n            if (column.sortCol) {\r\n              let fieldName = (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '';\r\n              let columnFieldName = (column.sortCol.field || column.sortCol.id) + '';\r\n              if (this.odataService.options.caseType === CaseType.pascalCase) {\r\n                fieldName = String.titleCase(fieldName);\r\n                columnFieldName = String.titleCase(columnFieldName);\r\n              }\r\n\r\n              sorterArray.push({\r\n                columnId: columnFieldName,\r\n                direction: column.sortAsc ? 'asc' : 'desc'\r\n              });\r\n            }\r\n          }\r\n          sortByArray = sorterArray;\r\n        }\r\n      }\r\n    }\r\n\r\n    // transform the sortby array into a CSV string for OData\r\n    sortByArray = sortByArray as CurrentSorter[];\r\n    const csvString = sortByArray.map((sorter) => `${sorter.columnId} ${sorter.direction.toLowerCase()}`).join(',');\r\n    this.odataService.updateOptions({\r\n      orderBy: (this.odataService.options.caseType === CaseType.pascalCase) ? String.titleCase(csvString) : csvString\r\n    });\r\n\r\n    // keep current Sorters and update the service options with the new sorting\r\n    this._currentSorters = sortByArray as CurrentSorter[];\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // -------------------\r\n  /**\r\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\r\n   * @param columnFilters\r\n   */\r\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    const filtersArray: ColumnFilter[] = ((typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters) as CurrentFilter[];\r\n\r\n    return filtersArray.map((filter) => {\r\n      const columnDef = filter.columnDef;\r\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\r\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\r\n      if (filter.operator) {\r\n        tmpFilter.operator = filter.operator;\r\n      }\r\n      if (Array.isArray(filter.searchTerms)) {\r\n        tmpFilter.searchTerms = filter.searchTerms;\r\n      }\r\n      return tmpFilter;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Mapper for mathematical operators (ex.: <= is \"le\", > is \"gt\")\r\n   * @param string operator\r\n   * @returns string map\r\n   */\r\n  private mapOdataOperator(operator: string) {\r\n    let map = '';\r\n    switch (operator) {\r\n      case '<':\r\n        map = 'lt';\r\n        break;\r\n      case '<=':\r\n        map = 'le';\r\n        break;\r\n      case '>':\r\n        map = 'gt';\r\n        break;\r\n      case '>=':\r\n        map = 'ge';\r\n        break;\r\n      case '<>':\r\n      case '!=':\r\n        map = 'ne';\r\n        break;\r\n      case '=':\r\n      case '==':\r\n      default:\r\n        map = 'eq';\r\n        break;\r\n    }\r\n\r\n    return map;\r\n  }\r\n}\r\n",
    "import { OnEventArgs, CellArgs, GridOption } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GridEventService {\n  private _eventHandler: any = new Slick.EventHandler();\n\n  /* OnCellChange Event */\n  attachOnCellChange(grid: any, dataView: any) {\n    // subscribe to this Slickgrid event of onCellChange\n    this._eventHandler.subscribe(grid.onCellChange, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellChange property (a callback function), then run it\n      if (typeof column.onCellChange === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onCellChange\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellChanges.... function\n        column.onCellChange(e, returnedArgs);\n      }\n    });\n  }\n  /* OnClick Event */\n  attachOnClick(grid: any, dataView: any) {\n    this._eventHandler.subscribe(grid.onClick, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellClick property (a callback function), then run it\n      if (typeof column.onCellClick === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onClick\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellClick.... function\n        column.onCellClick(e, returnedArgs);\n      }\n    });\n  }\n\n  dispose() {\n    this._eventHandler.unsubscribeAll();\n  }\n}\n",
    "import {\r\n  Column,\r\n  CurrentColumn,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  GridOption,\r\n  GridState,\r\n  GridStateChange,\r\n  GridStateType\r\n} from './../models/index';\r\nimport { ControlAndPluginService, FilterService, SortService } from './../services/index';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\ndeclare var Slick: any;\r\n\r\nexport class GridStateService {\r\n  private _eventHandler = new Slick.EventHandler();\r\n  private _columns: Column[] = [];\r\n  private _currentColumns: CurrentColumn[] = [];\r\n  private _grid: any;\r\n  private controlAndPluginService: ControlAndPluginService;\r\n  private filterService: FilterService;\r\n  private sortService: SortService;\r\n  private subscriptions: Subscription[] = [];\r\n  onGridStateChanged = new Subject<GridStateChange>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Export Service\r\n   * @param grid\r\n   * @param filterService\r\n   * @param sortService\r\n   * @param dataView\r\n   */\r\n  init(grid: any, controlAndPluginService: ControlAndPluginService, filterService: FilterService, sortService: SortService): void {\r\n    this._grid = grid;\r\n    this.controlAndPluginService = controlAndPluginService;\r\n    this.filterService = filterService;\r\n    this.sortService = sortService;\r\n\r\n    this.subscribeToAllGridChanges(grid);\r\n  }\r\n\r\n  /** Dispose of all the SlickGrid & Aurelia subscriptions */\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    // also unsubscribe all Aurelia Subscriptions\r\n    this.subscriptions.forEach((subscription: Subscription) => {\r\n      if (subscription && subscription.unsubscribe) {\r\n        subscription.unsubscribe();\r\n      }\r\n    });\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  /**\r\n   * Get the current grid state (filters/sorters/pagination)\r\n   * @return grid state\r\n   */\r\n  getCurrentGridState(): GridState {\r\n    const gridState: GridState = {\r\n      columns: this.getCurrentColumns(),\r\n      filters: this.getCurrentFilters(),\r\n      sorters: this.getCurrentSorters()\r\n    };\r\n\r\n    const currentPagination = this.getCurrentPagination();\r\n    if (currentPagination) {\r\n      gridState.pagination = currentPagination;\r\n    }\r\n    return gridState;\r\n  }\r\n\r\n  /**\r\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\r\n   * @return current columns\r\n   */\r\n  getColumns(): Column[] {\r\n    return this._columns || this._grid.getColumns();\r\n  }\r\n\r\n  /**\r\n   * From an array of Grid Column Definitions, get the associated Current Columns\r\n   * @param gridColumns\r\n   */\r\n  getAssociatedCurrentColumns(gridColumns: Column[]): CurrentColumn[] {\r\n    const currentColumns: CurrentColumn[] = [];\r\n\r\n    if (gridColumns && Array.isArray(gridColumns)) {\r\n      gridColumns.forEach((column: Column, index: number) => {\r\n        if (column && column.id) {\r\n          currentColumns.push({\r\n            columnId: column.id as string,\r\n            cssClass: column.cssClass || '',\r\n            headerCssClass: column.headerCssClass || '',\r\n            width: column.width || 0\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this._currentColumns = currentColumns;\r\n    return currentColumns;\r\n  }\r\n\r\n  /**\r\n   * From an array of Current Columns, get the associated Grid Column Definitions\r\n   * @param grid\r\n   * @param currentColumns\r\n   */\r\n  getAssociatedGridColumns(grid: any, currentColumns: CurrentColumn[]): Column[] {\r\n    const columns: Column[] = [];\r\n    const gridColumns: Column[] = grid.getColumns();\r\n\r\n    if (currentColumns && Array.isArray(currentColumns)) {\r\n      currentColumns.forEach((currentColumn: CurrentColumn, index: number) => {\r\n        const gridColumn: Column = gridColumns.find((c: Column) => c.id === currentColumn.columnId);\r\n        if (gridColumn && gridColumn.id) {\r\n          columns.push({\r\n            ...gridColumn,\r\n            cssClass: currentColumn.cssClass,\r\n            headerCssClass: currentColumn.headerCssClass,\r\n            width: currentColumn.width\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this._columns = columns;\r\n    return columns;\r\n  }\r\n\r\n  /**\r\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\r\n   * @return current columns\r\n   */\r\n  getCurrentColumns(): CurrentColumn[] {\r\n    let currentColumns: CurrentColumn[] = [];\r\n    if (this._currentColumns && Array.isArray(this._currentColumns) && this._currentColumns.length > 0) {\r\n      currentColumns = this._currentColumns;\r\n    } else {\r\n      currentColumns = this.getAssociatedCurrentColumns(this._grid.getColumns());\r\n    }\r\n\r\n    return currentColumns;\r\n  }\r\n\r\n  /**\r\n   * Get the Filters (and their state, columnId, searchTerm(s)) that are currently applied in the grid\r\n   * @return current filters\r\n   */\r\n  getCurrentFilters(): CurrentFilter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentFilters) {\r\n        return backendService.getCurrentFilters() as CurrentFilter[];\r\n      }\r\n    } else if (this.filterService && this.filterService.getCurrentLocalFilters) {\r\n      return this.filterService.getCurrentLocalFilters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get current Pagination (and it's state, pageNumber, pageSize) that are currently applied in the grid\r\n   * @return current pagination state\r\n   */\r\n  getCurrentPagination(): CurrentPagination | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentPagination) {\r\n        return backendService.getCurrentPagination();\r\n      }\r\n    } else {\r\n      // TODO implement this whenever local pagination gets implemented\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get the current Sorters (and their state, columnId, direction) that are currently applied in the grid\r\n   * @return current sorters\r\n   */\r\n  getCurrentSorters(): CurrentSorter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        return backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n    } else if (this.sortService && this.sortService.getCurrentLocalSorters) {\r\n      return this.sortService.getCurrentLocalSorters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Hook a SlickGrid Extension Event to a Grid State change event\r\n   * @param extension name\r\n   * @param grid\r\n   */\r\n  hookExtensionEventToGridStateChange(extensionName: string, eventName: string) {\r\n    const extension = this.controlAndPluginService && this.controlAndPluginService.getExtensionByName(extensionName);\r\n\r\n    if (extension && extension.service && extension.service[eventName] && extension.service[eventName].subscribe) {\r\n      this._eventHandler.subscribe(extension.service[eventName], (e: Event, args: any) => {\r\n        const columns: Column[] = args && args.columns;\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hook a Grid Event to a Grid State change event\r\n   * @param event name\r\n   * @param grid\r\n   */\r\n  hookSlickGridEventToGridStateChange(eventName: string, grid: any) {\r\n    if (grid && grid[eventName] && grid[eventName].subscribe) {\r\n      this._eventHandler.subscribe(grid[eventName], (e: Event, args: any) => {\r\n        const columns: Column[] = grid.getColumns();\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      });\r\n    }\r\n  }\r\n\r\n  resetColumns(columnDefinitions?: Column[]) {\r\n    const columns: Column[] = columnDefinitions || this._columns;\r\n    const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n    this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n  }\r\n\r\n  /**\r\n   * Subscribe to all necessary SlickGrid or Service Events that deals with a Grid change,\r\n   * when triggered, we will publish a Grid State Event with current Grid State\r\n   */\r\n  subscribeToAllGridChanges(grid: any) {\r\n    // Subscribe to Event Emitter of Filter changed\r\n    this.subscriptions.push(\r\n      this.filterService.onFilterChanged.subscribe((currentFilters: CurrentFilter[]) => {\r\n        this.onGridStateChanged.next({ change: { newValues: currentFilters, type: GridStateType.filter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n    // Subscribe to Event Emitter of Filter cleared\r\n      this.subscriptions.push(\r\n        this.filterService.onFilterCleared.subscribe(() => {\r\n          this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.filter }, gridState: this.getCurrentGridState() });\r\n        })\r\n      );\r\n\r\n    // Subscribe to Event Emitter of Sort changed\r\n    this.subscriptions.push(\r\n      this.sortService.onSortChanged.subscribe((currentSorters: CurrentSorter[]) => {\r\n        this.onGridStateChanged.next({ change: { newValues: currentSorters, type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to Event Emitter of Sort cleared\r\n    this.subscriptions.push(\r\n      this.sortService.onSortCleared.subscribe(() => {\r\n        this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to ColumnPicker and/or GridMenu for show/hide Columns visibility changes\r\n    this.hookExtensionEventToGridStateChange('ColumnPicker', 'onColumnsChanged');\r\n    this.hookExtensionEventToGridStateChange('GridMenu', 'onColumnsChanged');\r\n\r\n    // subscribe to Column Resize & Reordering\r\n    this.hookSlickGridEventToGridStateChange('onColumnsReordered', grid);\r\n    this.hookSlickGridEventToGridStateChange('onColumnsResized', grid);\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport { Injectable } from '@angular/core';\r\nimport { CellArgs, Column, GridOption, OnEventArgs } from './../models/index';\r\nimport { ControlAndPluginService } from './controlAndPlugin.service';\r\nimport { FilterService } from './filter.service';\r\nimport { GridStateService } from './gridState.service';\r\nimport { SortService } from './sort.service';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\ndeclare var Slick: any;\r\n\r\n@Injectable()\r\nexport class GridService {\r\n  private _grid: any;\r\n  private _dataView: any;\r\n\r\n  constructor(private controlAndPluginService: ControlAndPluginService, private filterService: FilterService, private gridStateService: GridStateService, private sortService: SortService, private translate: TranslateService) { }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  init(grid: any, dataView: any): void {\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n  }\r\n\r\n  /**\r\n   * From a SlickGrid Event triggered get the Column Definition and Item Data Context\r\n   *\r\n   * For example the SlickGrid onClick will return cell arguments when subscribing to it.\r\n   * From these cellArgs, we want to get the Column Definition and Item Data\r\n   * @param cell event args\r\n   * @return object with columnDef and dataContext\r\n   */\r\n  getColumnFromEventArguments(args: CellArgs): OnEventArgs {\r\n    if (!args || !args.grid || !args.grid.getColumns || !args.grid.getDataItem) {\r\n      throw new Error('To get the column definition and data, we need to have these arguments passed as objects (row, cell, grid)');\r\n    }\r\n\r\n    return {\r\n      row: args.row,\r\n      cell: args.cell,\r\n      columnDef: args.grid.getColumns()[args.cell],\r\n      dataContext: args.grid.getDataItem(args.row),\r\n      dataView: this._dataView,\r\n      grid: this._grid,\r\n      gridDefinition: this._gridOptions\r\n    };\r\n  }\r\n\r\n  /** Get data item by it's row index number */\r\n  getDataItemByRowNumber(rowNumber: number) {\r\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object');\r\n    }\r\n    return this._grid.getDataItem(rowNumber);\r\n  }\r\n\r\n  /** Chain the item Metadata with our implementation of Metadata at given row index */\r\n  getItemRowMetadata(previousItemMetadata: any) {\r\n    return (rowNumber: number) => {\r\n      const item = this._dataView.getItem(rowNumber);\r\n      let meta = {\r\n        cssClasses: ''\r\n      };\r\n      if (typeof previousItemMetadata === 'object' && !$.isEmptyObject(previousItemMetadata)) {\r\n        meta = previousItemMetadata(rowNumber);\r\n      }\r\n\r\n      if (item && item._dirty) {\r\n        meta.cssClasses = (meta.cssClasses || '') + ' dirty';\r\n      }\r\n      if (item && item.rowClass) {\r\n        meta.cssClasses += ` ${item.rowClass}`;\r\n        meta.cssClasses += ` row${rowNumber}`;\r\n      }\r\n\r\n      return meta;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Highlight then fade a row for x seconds.\r\n   * The implementation follows this SO answer: https://stackoverflow.com/a/19985148/1212166\r\n   * @param rowNumber\r\n   * @param fadeDelay\r\n   */\r\n  highlightRow(rowNumber: number, fadeDelay: number = 1500) {\r\n    // create a SelectionModel if there's not one yet\r\n    if (!this._grid.getSelectionModel()) {\r\n      const rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\r\n      this._grid.setSelectionModel(rowSelectionPlugin);\r\n    }\r\n\r\n    this._grid.setSelectedRows([rowNumber]);\r\n    this._dataView.getItemMetadata = this.getItemRowMetadata(this._dataView.getItemMetadata);\r\n\r\n    const item = this._dataView.getItem(rowNumber);\r\n    if (item && item.id) {\r\n      item.rowClass = 'highlight';\r\n      this._dataView.updateItem(item.id, item);\r\n      const gridOptions = this._grid.getOptions() as GridOption;\r\n\r\n      // highlight the row for a user defined timeout\r\n      $(`#${gridOptions.gridId}`)\r\n          .find(`.highlight.row${rowNumber}`)\r\n          .first();\r\n\r\n      // delete the row's CSS that was attached for highlighting\r\n      setTimeout(() => {\r\n        if (item && item.id) {\r\n          delete item.rowClass;\r\n          const gridIdx = this._dataView.getIdxById(item.id);\r\n          if (gridIdx !== undefined) {\r\n            this._dataView.updateItem(item.id, item);\r\n          }\r\n        }\r\n      }, fadeDelay + 10);\r\n    }\r\n  }\r\n\r\n  /** Get the Data Item from a grid row index */\r\n  getDataItemByRowIndex(index: number) {\r\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object');\r\n    }\r\n\r\n    return this._grid.getDataItem(index);\r\n  }\r\n\r\n  /** Get the Data Item from an array of grid row indexes */\r\n  getDataItemByRowIndexes(indexes: number[]) {\r\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object');\r\n    }\r\n\r\n    const dataItems = [];\r\n\r\n    if (Array.isArray(indexes)) {\r\n      indexes.forEach((idx) => {\r\n        dataItems.push(this._grid.getDataItem(idx));\r\n      });\r\n    }\r\n\r\n    return dataItems;\r\n  }\r\n\r\n  /** Get the currently selected row indexes */\r\n  getSelectedRows() {\r\n    return this._grid.getSelectedRows();\r\n  }\r\n\r\n  /** Get the currently selected rows item data */\r\n  getSelectedRowsDataItem() {\r\n    if (!this._grid || typeof this._grid.getSelectedRows !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object');\r\n    }\r\n\r\n    const selectedRowIndexes = this._grid.getSelectedRows();\r\n    return this.getDataItemByRowIndexes(selectedRowIndexes);\r\n  }\r\n\r\n  /** Select the selected row by a row index */\r\n  setSelectedRow(rowIndex: number) {\r\n    this._grid.setSelectedRows([rowIndex]);\r\n  }\r\n\r\n  /** Set selected rows with provided array of row indexes */\r\n  setSelectedRows(rowIndexes: number[]) {\r\n    this._grid.setSelectedRows(rowIndexes);\r\n  }\r\n\r\n  /** Re-Render the Grid */\r\n  renderGrid() {\r\n    if (this._grid && typeof this._grid.invalidate === 'function') {\r\n      this._grid.invalidate();\r\n      this._grid.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset the grid to it's original state (clear any filters, sorting & pagination if exists) .\r\n   * The column definitions could be passed as argument to reset (this can be used after a Grid State reset)\r\n   * The reset will clear the Filters & Sort, then will reset the Columns to their original state\r\n   */\r\n  resetGrid(columnDefinitions?: Column[]) {\r\n    // reset columns to original states & refresh the grid\r\n    if (this._grid && this._dataView) {\r\n      const originalColumns = this.controlAndPluginService.getAllColumns();\r\n      // const originalColumns = columnDefinitions || this._columnDefinitions;\r\n      if (Array.isArray(originalColumns) && originalColumns.length > 0) {\r\n        // set the grid columns to it's original column definitions\r\n        this._grid.setColumns(originalColumns);\r\n        this._dataView.refresh();\r\n        this._grid.autosizeColumns();\r\n        this.gridStateService.resetColumns(columnDefinitions);\r\n      }\r\n    }\r\n    if (this.filterService && this.filterService.clearFilters) {\r\n      this.filterService.clearFilters();\r\n    }\r\n    if (this.sortService && this.sortService.clearSorting) {\r\n      this.sortService.clearSorting();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add an item (data item) to the datagrid, by default it will highlight (flashing) the inserted row but we can disable it too\r\n   * @param object dataItem: item object holding all properties of that row\r\n   * @param shouldHighlightRow do we want to highlight the row after adding item\r\n   */\r\n  addItemToDatagrid(item: any, shouldHighlightRow = true) {\r\n    if (!this._grid || !this._gridOptions || !this._dataView) {\r\n      throw new Error('We could not find SlickGrid Grid, DataView objects');\r\n    }\r\n\r\n    const row = 0;\r\n    this._dataView.insertItem(row, item);\r\n    this._grid.scrollRowIntoView(0); // scroll to row 0\r\n\r\n    // highlight the row we just added, if defined\r\n    if (shouldHighlightRow) {\r\n      this.highlightRow(0, 1500);\r\n    }\r\n\r\n    // refresh dataview & grid\r\n    this._dataView.refresh();\r\n  }\r\n\r\n  /**\r\n   * Add item array (data item) to the datagrid, by default it will highlight (flashing) the inserted row but we can disable it too\r\n   * @param dataItem array: item object holding all properties of that row\r\n   * @param shouldHighlightRow do we want to highlight the row after adding item\r\n   */\r\n  addItemsToDatagrid(items: any[], shouldHighlightRow = true) {\r\n    if (Array.isArray(items)) {\r\n      items.forEach((item: any) => this.addItemToDatagrid(item, shouldHighlightRow));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete an existing item from the datagrid (dataView)\r\n   * @param object item: item object holding all properties of that row\r\n   */\r\n  deleteDataGridItem(item: any) {\r\n    if (!item || !item.hasOwnProperty('id')) {\r\n      throw new Error(`deleteDataGridItem() requires an item object which includes the \"id\" property`);\r\n    }\r\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\r\n    this.deleteDataGridItemById(itemId);\r\n  }\r\n\r\n  /**\r\n   * Delete an existing item from the datagrid (dataView) by it's id\r\n   * @param itemId: item unique id\r\n   */\r\n  deleteDataGridItemById(itemId: string | number) {\r\n    if (itemId === undefined) {\r\n      throw new Error(`Cannot delete a row without a valid \"id\"`);\r\n    }\r\n    if (this._dataView.getRowById(itemId) === undefined) {\r\n      throw new Error(`Could not find the item in the grid by it's associated \"id\"`);\r\n    }\r\n\r\n    // delete the item from the dataView\r\n    this._dataView.deleteItem(itemId);\r\n    this._dataView.refresh();\r\n  }\r\n\r\n  /**\r\n   * Update an existing item with new properties inside the datagrid\r\n   * @param object item: item object holding all properties of that row\r\n   */\r\n  updateDataGridItem(item: any) {\r\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\r\n\r\n    if (itemId === undefined) {\r\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\r\n    }\r\n\r\n    this.updateDataGridItemById(itemId, item);\r\n  }\r\n\r\n  /**\r\n   * Update an existing item in the datagrid by it's id and new properties\r\n   * @param itemId: item unique id\r\n   * @param object item: item object holding all properties of that row\r\n   * @param shouldHighlightRow do we want to highlight the row after update\r\n   */\r\n  updateDataGridItemById(itemId: number | string, item: any, shouldHighlightRow = true) {\r\n    if (itemId === undefined) {\r\n      throw new Error(`Cannot update a row without a valid \"id\"`);\r\n    }\r\n    const row = this._dataView.getRowById(itemId);\r\n\r\n    if (!item || row === undefined) {\r\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\r\n    }\r\n\r\n    const gridIdx = this._dataView.getIdxById(itemId);\r\n    if (gridIdx !== undefined) {\r\n      // Update the item itself inside the dataView\r\n      this._dataView.updateItem(itemId, item);\r\n\r\n      // highlight the row we just updated, if defined\r\n      if (shouldHighlightRow) {\r\n        this.highlightRow(row, 1500);\r\n      }\r\n\r\n      // refresh dataview & grid\r\n      this._dataView.refresh();\r\n    }\r\n  }\r\n}\r\n",
    "\nimport {\n  Column,\n  GridOption\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare let $: any;\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GroupingAndColspanService {\n  private _eventHandler = new Slick.EventHandler();\n  private _dataView: any;\n  private _grid: any;\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any, dataView: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n\n    if (grid && this._gridOptions) {\n      // When dealing with Pre-Header Grouping colspan, we need to re-create the pre-header in multiple occasions\n      // for all these occasions, we have to trigger a re-create\n      if (this._gridOptions.createPreHeaderPanel) {\n        this._eventHandler.subscribe(grid.onSort, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(grid.onColumnsResized, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(dataView.onRowCountChanged, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n\n        // also not sure why at this point, but it seems that I need to call the 1st create in a delayed execution\n        // probably some kind of timing issues and delaying it until the grid is fully ready does help\n        setTimeout(() => {\n          this.createPreHeaderRowGroupingTitle();\n        }, 50);\n      }\n    }\n  }\n\n  dispose() {\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n  }\n\n  createPreHeaderRowGroupingTitle() {\n    const $preHeaderPanel = $(this._grid.getPreHeaderPanel())\n      .empty()\n      .addClass('slick-header-columns')\n      .css('left', '-1000px')\n      .width(this._grid.getHeadersWidth());\n    $preHeaderPanel.parent().addClass('slick-header');\n    const headerColumnWidthDiff = this._grid.getHeaderColumnWidthDiff();\n    let m;\n    let header;\n    let lastColumnGroup = '';\n    let widthTotal = 0;\n\n    for (let i = 0; i < this._columnDefinitions.length; i++) {\n      m = this._columnDefinitions[i];\n      if (lastColumnGroup === m.columnGroup && i > 0) {\n        widthTotal += m.width;\n        header.width(widthTotal - headerColumnWidthDiff);\n      } else {\n        widthTotal = m.width;\n        header = $(`<div class=\"ui-state-default slick-header-column\" />`)\n          .html(`<span class=\"slick-column-name\">${m.columnGroup || ''}</span>`)\n          .width(m.width - headerColumnWidthDiff)\n          .appendTo($preHeaderPanel);\n      }\n      lastColumnGroup = m.columnGroup;\n    }\n  }\n}\n",
    "import { GridOption } from './../models/index';\nimport { Subject } from 'rxjs/Subject';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n// global constants, height/width are in pixels\nconst DATAGRID_MIN_HEIGHT = 180;\nconst DATAGRID_MIN_WIDTH = 300;\nconst DATAGRID_BOTTOM_PADDING = 20;\nconst DATAGRID_PAGINATION_HEIGHT = 35;\nlet timer: any;\n\nexport interface GridDimension {\n  height: number;\n  width: number;\n  heightWithPagination?: number;\n}\n\nexport class ResizerService {\n  private _grid: any;\n  private _lastDimensions: GridDimension;\n  onGridBeforeResize = new Subject<boolean>();\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  private get _gridUid(): string {\n    return (this._grid && this._grid.getUID) ? this._grid.getUID() : this._gridOptions.gridId;\n  }\n\n  init(grid: any): void {\n    this._grid = grid;\n  }\n\n  /** Attach an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space\n   * Options: we could also provide a % factor to resize on each height/width independently\n   */\n  attachAutoResizeDataGrid(newSizes?: GridDimension) {\n    // if we can't find the grid to resize, return without attaching anything\n    const gridDomElm = $(`#${this._gridOptions && this._gridOptions.gridId ? this._gridOptions.gridId : 'grid1'}`);\n    if (gridDomElm === undefined || gridDomElm.offset() === undefined) {\n      return null;\n    }\n\n    // -- 1st resize the datagrid size at first load (we need this because the .on event is not triggered on first load)\n    this.resizeGrid(0, newSizes);\n\n    // -- 2nd attach a trigger on the Window DOM element, so that it happens also when resizing after first load\n    // -- attach auto-resize to Window object only if it exist\n    $(window).on(`resize.grid.${this._gridUid}`, () => {\n      this.onGridBeforeResize.next(true);\n      // for some yet unknown reason, calling the resize twice removes any stuttering/flickering when changing the height and makes it much smoother\n      this.resizeGrid(0, newSizes);\n      this.resizeGrid(0, newSizes);\n    });\n  }\n\n  /**\n   * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation\n   * object gridOptions\n   */\n  calculateGridNewDimensions(gridOptions: GridOption): GridDimension | null {\n    const gridDomElm = $(`#${gridOptions.gridId}`);\n    const containerElm = (gridOptions.autoResize && gridOptions.autoResize.containerId) ? $(`#${gridOptions.autoResize.containerId}`) : $(`#${gridOptions.gridContainerId}`);\n    const windowElm = $(window);\n    if (windowElm === undefined || containerElm === undefined || gridDomElm === undefined) {\n      return null;\n    }\n\n    // calculate bottom padding\n    // if using pagination, we need to add the pagination height to this bottom padding\n    let bottomPadding = (gridOptions.autoResize && gridOptions.autoResize.bottomPadding) ? gridOptions.autoResize.bottomPadding : DATAGRID_BOTTOM_PADDING;\n    if (bottomPadding && (gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\n      bottomPadding += DATAGRID_PAGINATION_HEIGHT;\n    }\n\n    const gridHeight = windowElm.height() || 0;\n    const coordOffsetTop = gridDomElm.offset();\n    const gridOffsetTop = (coordOffsetTop !== undefined) ? coordOffsetTop.top : 0;\n    const availableHeight = gridHeight - gridOffsetTop - bottomPadding;\n    const availableWidth = containerElm.width() || 0;\n    const minHeight = (gridOptions.autoResize && gridOptions.autoResize.minHeight < 0) ? gridOptions.autoResize.minHeight : DATAGRID_MIN_HEIGHT;\n    const minWidth = (gridOptions.autoResize && gridOptions.autoResize.minWidth < 0) ? gridOptions.autoResize.minWidth : DATAGRID_MIN_WIDTH;\n\n    let newHeight = availableHeight;\n    let newWidth = (gridOptions.autoResize && gridOptions.autoResize.sidePadding) ? availableWidth - gridOptions.autoResize.sidePadding : availableWidth;\n    if (newHeight < minHeight) {\n      newHeight = minHeight;\n    }\n    if (newWidth < minWidth) {\n      newWidth = minWidth;\n    }\n\n    return {\n      height: newHeight,\n      width: newWidth\n    };\n  }\n\n  /**\n   * Dispose function when element is destroyed\n   */\n  dispose() {\n    $(window).off(`resize.grid.${this._gridUid}`);\n  }\n\n  getLastResizeDimensions(): GridDimension {\n    return this._lastDimensions;\n  }\n\n  /** Resize the datagrid to fit the browser height & width */\n  resizeGrid(delay?: number, newSizes?: GridDimension): Promise<GridDimension> {\n    if (!this._grid || !this._gridOptions) {\n      throw new Error(`\n      Angular-Slickgrid resizer requires a valid Grid object and Grid Options defined.\n      You can fix this by setting your gridOption to use \"enableAutoResize\" or create an instance of the ResizerService by calling attachAutoResizeDataGrid()`);\n    }\n\n    return new Promise((resolve) => {\n      // because of the javascript async nature, we might want to delay the resize a little bit\n      delay = delay || 0;\n\n      clearTimeout(timer);\n\n      timer = setTimeout(() => {\n        // calculate the available sizes with minimum height defined as a constant\n        const availableDimensions = this.calculateGridNewDimensions(this._gridOptions);\n        const gridElm = $(`#${this._gridOptions.gridId}`) || {};\n        const gridContainerElm = $(`#${this._gridOptions.gridContainerId}`) || {};\n\n        if ((newSizes || availableDimensions) && gridElm.length > 0) {\n          // get the new sizes, if new sizes are passed (not 0), we will use them else use available space\n          // basically if user passes 1 of the dimension, let say he passes just the height,\n          // we will use the height as a fixed height but the width will be resized by it's available space\n          const newHeight = (newSizes && newSizes.height) ? newSizes.height : availableDimensions.height;\n          const newWidth = (newSizes && newSizes.width) ? newSizes.width : availableDimensions.width;\n\n          // apply these new height/width to the datagrid\n          gridElm.height(newHeight);\n          gridElm.width(newWidth);\n          gridContainerElm.height(newHeight);\n          gridContainerElm.width(newWidth);\n\n          // resize the slickgrid canvas on all browser except some IE versions\n          // exclude all IE below IE11\n          // IE11 wants to be a better standard (W3C) follower (finally) they even changed their appName output to also have 'Netscape'\n          if (new RegExp('MSIE [6-8]').exec(navigator.userAgent) === null && this._grid) {\n            this._grid.resizeCanvas();\n          }\n\n          // also call the grid auto-size columns so that it takes available when going bigger\n          this._grid.autosizeColumns();\n\n          // keep last resized dimensions & resolve them to the Promise\n          this._lastDimensions = {\n            height: newHeight,\n            width: newWidth\n          };\n\n          if ((this._gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\n            this._lastDimensions.heightWithPagination = newHeight + DATAGRID_PAGINATION_HEIGHT;\n          }\n\n          resolve(this._lastDimensions);\n        }\n      }, delay);\n    });\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class AvgAggregator implements Aggregator {\n  private _count: number;\n  private _nonNullCount: number;\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._count = 0;\n    this._nonNullCount = 0;\n    this._sum = 0;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    this._count++;\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._nonNullCount++;\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.avg) {\n      groupTotals.avg = {};\n    }\n    if (this._nonNullCount !== 0) {\n      groupTotals.avg[this._field] = this._sum / this._nonNullCount;\n    }\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MinAggregator implements Aggregator {\n  private _min: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._min = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._min == null || val < this._min) {\n        this._min = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.min) {\n      groupTotals.min = {};\n    }\n    groupTotals.min[this._field] = this._min;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MaxAggregator implements Aggregator {\n  private _max: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._max = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._max == null || val > this._max) {\n        this._max = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.max) {\n      groupTotals.max = {};\n    }\n    groupTotals.max[this._field] = this._max;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class SumAggregator implements Aggregator {\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._sum = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.sum) {\n      groupTotals.sum = {};\n    }\n    groupTotals.sum[this._field] = this._sum;\n  }\n}\n",
    "import { AvgAggregator } from './avgAggregator';\nimport { MinAggregator } from './minAggregator';\nimport { MaxAggregator } from './maxAggregator';\nimport { SumAggregator } from './sumAggregator';\n\n/** Provides a list of different Aggregators for the Group Formatter */\nexport const Aggregators = {\n  Avg: AvgAggregator,\n  Min: MinAggregator,\n  Max: MaxAggregator,\n  Sum: SumAggregator\n};\n",
    "import { Column, Editor, EditorValidator, EditorValidatorOutput } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class CheckboxEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: boolean;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"checkbox\" value=\"true\" class=\"editor-checkbox\" />`);\r\n    this.$input.appendTo(this.args.container);\r\n    this.$input.focus();\r\n  }\r\n\r\n  destroy(): void {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus(): void {\r\n    this.$input.focus();\r\n  }\r\n\r\n  hide() {\r\n    this.$input.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$input.show();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = !!item[this.columnDef.field];\r\n    if (this.defaultValue) {\r\n      this.$input.prop('checked', true);\r\n    } else {\r\n      this.$input.prop('checked', false);\r\n    }\r\n  }\r\n\r\n  preClick() {\r\n    this.$input.prop('checked', !this.$input.prop('checked'));\r\n  }\r\n\r\n  serializeValue(): boolean {\r\n    return this.$input.prop('checked');\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (this.serializeValue() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, FieldType, GridOption } from './../models/index';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a date picker editor using Flatpickr\r\n * https://chmln.github.io/flatpickr\r\n */\r\nexport class DateEditor implements Editor {\r\n  $input: any;\r\n  flatInstance: any;\r\n  defaultDate: string;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    if (this.args && this.args.column) {\r\n      const gridOptions = this.args.grid.getOptions() as GridOption;\r\n      this.defaultDate = (this.args.item) ? this.args.item[this.args.column.field] : null;\r\n      const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\r\n      const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || FieldType.dateUtc);\r\n      let currentLocale = this.getCurrentLocale(this.columnDef, gridOptions);\r\n      if (currentLocale.length > 2) {\r\n        currentLocale = currentLocale.substring(0, 2);\r\n      }\r\n\r\n      const pickerOptions: any = {\r\n        defaultDate: this.defaultDate,\r\n        altInput: true,\r\n        altFormat: inputFormat,\r\n        dateFormat: outputFormat,\r\n        closeOnSelect: false,\r\n        locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n        onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n          this.save();\r\n        },\r\n      };\r\n\r\n\r\n      this.$input = $(`<input type=\"text\" data-defaultDate=\"${this.defaultDate}\" class=\"editor-text flatpickr\" />`);\r\n      this.$input.appendTo(this.args.container);\r\n      this.flatInstance = (this.$input[0] && typeof this.$input[0].flatpickr === 'function') ? this.$input[0].flatpickr(pickerOptions) : null;\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  getCurrentLocale(columnDef: Column, gridOptions: GridOption) {\r\n    const options = gridOptions || columnDef.params || {};\r\n    if (options.i18n && options.i18n instanceof TranslateService) {\r\n      return options.i18n.currentLang;\r\n    }\r\n\r\n    return 'en';\r\n  }\r\n\r\n  loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  destroy() {\r\n    this.hide();\r\n    // this.flatInstance.destroy();\r\n    this.$input.remove();\r\n  }\r\n\r\n  show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultDate = item[this.args.column.field];\r\n    this.flatInstance.setDate(item[this.args.column.field]);\r\n  }\r\n\r\n  serializeValue() {\r\n    const domValue: string = this.$input.val();\r\n\r\n    if (!domValue) {\r\n      return '';\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n    const value = moment(domValue).format(outputFormat);\r\n\r\n    return value;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    if (!state) {\r\n      return;\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n    item[this.args.column.field] = moment(state, outputFormat).toDate();\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultDate == null)) && (this.$input.val() !== this.defaultDate);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Constants } from '../constants';\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst defaultDecimalPlaces = 0;\n\n/*\n * An example of a 'detached' editor.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class FloatEditor implements Editor {\n  $input: any;\n  defaultValue: any;\n\n  constructor(private args: any) {\n    this.init();\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args && this.args.column || {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): any {\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\n  }\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator {\n    return this.columnEditor.validator || this.columnDef.validator;\n  }\n\n  init(): void {\n    this.$input = $(`<input type=\"number\" class=\"editor-text\" step=\"${this.getInputDecimalSteps()}\" />`)\n      .appendTo(this.args.container)\n      .on('keydown.nav', (e) => {\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\n          e.stopImmediatePropagation();\n        }\n      });\n\n    setTimeout(() => {\n      this.$input.focus().select();\n    }, 50);\n  }\n\n  destroy() {\n    this.$input.remove();\n  }\n\n  focus() {\n    this.$input.focus();\n  }\n\n  getColumnEditor() {\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\n  }\n\n  getDecimalPlaces(): number {\n    // returns the number of fixed decimal places or null\n    let rtn = (this.columnEditor.params && this.columnEditor.params.hasOwnProperty('decimalPlaces')) ? this.columnEditor.params.decimalPlaces : undefined;\n\n    if (rtn === undefined) {\n      rtn = defaultDecimalPlaces;\n    }\n    return (!rtn && rtn !== 0 ? null : rtn);\n  }\n\n  getInputDecimalSteps(): string {\n    const decimals = this.getDecimalPlaces();\n    let zeroString = '';\n    for (let i = 1; i < decimals; i++) {\n      zeroString += '0';\n    }\n\n    if (decimals > 0) {\n      return `0.${zeroString}1`;\n    }\n    return '1';\n  }\n\n  loadValue(item: any) {\n    this.defaultValue = item[this.columnDef.field];\n\n    const decPlaces = this.getDecimalPlaces();\n    if (decPlaces !== null\n      && (this.defaultValue || this.defaultValue === 0)\n      && this.defaultValue.toFixed) {\n      this.defaultValue = this.defaultValue.toFixed(decPlaces);\n    }\n\n    this.$input.val(this.defaultValue);\n    this.$input[0].defaultValue = this.defaultValue;\n    this.$input.select();\n  }\n\n  serializeValue() {\n    let rtn = parseFloat(this.$input.val()) || 0;\n    const decPlaces = this.getDecimalPlaces();\n    if (decPlaces !== null\n      && (rtn || rtn === 0)\n      && rtn.toFixed) {\n      rtn = parseFloat(rtn.toFixed(decPlaces));\n    }\n\n    return rtn;\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.columnDef.field] = state;\n  }\n\n  isValueChanged() {\n    const elmValue = this.$input.val();\n    return (!(elmValue === '' && this.defaultValue === null)) && (elmValue !== this.defaultValue);\n  }\n\n  validate(): EditorValidatorOutput {\n    const elmValue = this.$input.val();\n    const decPlaces = this.getDecimalPlaces();\n    const minValue = this.columnEditor.minValue;\n    const maxValue = this.columnEditor.maxValue;\n    const errorMsg = this.columnEditor.errorMessage;\n    const mapValidation = {\n      '{{minValue}}': minValue,\n      '{{maxValue}}': maxValue,\n      '{{minDecimal}}': 0,\n      '{{maxDecimal}}': decPlaces\n    };\n\n    if (this.validator) {\n      const validationResults = this.validator(elmValue);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    } else if (isNaN(elmValue as number) || (decPlaces === 0 && !/^(\\d+(\\.)?(\\d)*)$/.test(elmValue))) {\n      // when decimal value is 0 (which is the default), we accept 0 or more decimal values\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_VALID_NUMBER\n      };\n    } else if (minValue !== undefined && (elmValue < minValue || elmValue > maxValue)) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    } else if ((decPlaces > 0 && !new RegExp(`^(\\\\d+(\\\\.)?(\\\\d){0,${decPlaces}})$`).test(elmValue))) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_DECIMAL_BETWEEN.replace(/{{minDecimal}}|{{maxDecimal}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n",
    "import { Constants } from './../constants';\r\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class IntegerEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"number\" class='editor-text' />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = parseInt(item[this.args.column.field], 10);\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return parseInt(this.$input.val() as string, 10) || 0;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    const elmValue = this.$input.val();\r\n    const value = isNaN(elmValue) ? elmValue : parseInt(elmValue, 10);\r\n    return (!(value === '' && this.defaultValue === null)) && (value !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    const elmValue = this.$input.val();\r\n    const errorMsg = this.columnEditor.params && this.columnEditor.errorMessage;\r\n\r\n    if (this.validator) {\r\n      const validationResults = this.validator(elmValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    } else if (isNaN(elmValue as number) || !/^[+-]?\\d+$/.test(elmValue)) {\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || Constants.VALIDATION_EDITOR_VALID_INTEGER\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport { Constants } from './../constants';\r\nimport {\r\n  Column,\r\n  Editor,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  GridOption,\r\n  HtmlElementPosition,\r\n  KeyCode\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class LongTextEditor implements Editor {\r\n  $input: any;\r\n  $wrapper: any;\r\n  defaultValue: any;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    const cancelText = this._translate.instant('CANCEL') || Constants.TEXT_CANCEL;\r\n    const saveText = this._translate.instant('SAVE') || Constants.TEXT_SAVE;\r\n    const $container = $('body');\r\n\r\n    this.$wrapper = $(`<div class=\"slick-large-editor-text\" />`).appendTo($container);\r\n    this.$input = $(`<textarea hidefocus rows=\"5\">`).appendTo(this.$wrapper);\r\n\r\n    $(`<div class=\"editor-footer\">\r\n          <button class=\"btn btn-primary btn-xs\">${saveText}</button>\r\n          <button class=\"btn btn-default btn-xs\">${cancelText}</button>\r\n      </div>`).appendTo(this.$wrapper);\r\n\r\n    this.$wrapper.find('button:first').on('click', (event: Event) => this.save());\r\n    this.$wrapper.find('button:last').on('click', (event: Event) => this.cancel());\r\n    this.$input.on('keydown', this.handleKeyDown);\r\n\r\n    this.position(this.args.position);\r\n    this.$input.focus().select();\r\n  }\r\n\r\n  handleKeyDown(e: any) {\r\n    if (e.which === KeyCode.ENTER && e.ctrlKey) {\r\n      this.save();\r\n    } else if (e.which === KeyCode.ESCAPE) {\r\n      e.preventDefault();\r\n      this.cancel();\r\n    } else if (e.which === KeyCode.TAB && e.shiftKey) {\r\n      e.preventDefault();\r\n      this.args.grid.navigatePrev();\r\n    } else if (e.which === KeyCode.TAB) {\r\n      e.preventDefault();\r\n      this.args.grid.navigateNext();\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  cancel() {\r\n    this.$input.val(this.defaultValue);\r\n    this.args.cancelChanges();\r\n  }\r\n\r\n  hide() {\r\n    this.$wrapper.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$wrapper.show();\r\n  }\r\n\r\n  position(position: HtmlElementPosition) {\r\n    this.$wrapper\r\n      .css('top', (position.top || 0) - 5)\r\n      .css('left', (position.left || 0) - 5);\r\n  }\r\n\r\n  destroy() {\r\n    this.$wrapper.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.$input.val(this.defaultValue = item[this.columnDef.field]);\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue == null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Column,\r\n  Editor,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  SelectOption,\r\n} from './../models/index';\r\nimport { arraysEqual, CollectionService } from '../services/index';\r\n\r\n// height in pixel of the multiple-select DOM element\r\nconst SELECT_ELEMENT_HEIGHT = 26;\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/**\r\n * Slickgrid editor class for multiple select lists\r\n */\r\nexport class MultipleSelectEditor implements Editor {\r\n  /** The JQuery DOM element */\r\n  $editorElm: any;\r\n\r\n  /** Editor Multiple-Select options */\r\n  editorElmOptions: MultipleSelectOption;\r\n\r\n  /** The multiple-select options for a multiple select list */\r\n  defaultOptions: MultipleSelectOption;\r\n\r\n  /** The default item values that are set */\r\n  defaultValue: any[];\r\n\r\n  /** The options label/value object to use in the select list */\r\n  collection: SelectOption[] = [];\r\n\r\n  /** The property name for values in the collection */\r\n  valueName: string;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName: string;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** Do we translate the label? */\r\n  enableTranslateLabel: boolean;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,\r\n      maxHeight: 200,\r\n      addTitle: true,\r\n      okButton: true,\r\n      selectAllDelimiter: ['', ''],\r\n      width: 150,\r\n      offsetLeft: 20,\r\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\r\n    };\r\n\r\n    if (this._translate) {\r\n      this.defaultOptions.countSelected = this._translate.instant('X_OF_Y_SELECTED');\r\n      this.defaultOptions.allSelected = this._translate.instant('ALL_SELECTED');\r\n      this.defaultOptions.selectAllText = this._translate.instant('SELECT_ALL');\r\n    }\r\n\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /**\r\n   * The current selected values from the collection\r\n   */\r\n  get currentValues() {\r\n    return this.collection\r\n      .filter(c => this.$editorElm.val().indexOf(c[this.valueName].toString()) !== -1)\r\n      .map(c => c[this.valueName]);\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init() {\r\n    if (!this.args) {\r\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\r\n    }\r\n\r\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the MultipleSelect Editor to work correctly.\r\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\r\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\r\n    }\r\n\r\n    const collectionService = new CollectionService(this._translate);\r\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\r\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\r\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\r\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\r\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    this.collection = newCollection;\r\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    this.createDomElement(editorTemplate);\r\n  }\r\n\r\n  applyValue(item: any, state: any): void {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  destroy() {\r\n    this.$editorElm.remove();\r\n  }\r\n\r\n  loadValue(item: any): void {\r\n    // convert to string because that is how the DOM will return these values\r\n    this.defaultValue = item[this.columnDef.field].map((i: any) => i.toString());\r\n\r\n    this.$editorElm.find('option').each((i: number, $e: any) => {\r\n      if (this.defaultValue.indexOf($e.value) !== -1) {\r\n        $e.selected = true;\r\n      } else {\r\n        $e.selected = false;\r\n      }\r\n    });\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  serializeValue(): any {\r\n    return this.currentValues;\r\n  }\r\n\r\n  focus() {\r\n    this.$editorElm.focus();\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    return !arraysEqual(this.$editorElm.val(), this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.currentValues);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n\r\n  private buildTemplateHtmlString(collection: any[]) {\r\n    let options = '';\r\n    collection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example: { collection: [ { value: '1', label: 'One' } ])`);\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n\r\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * Automatically adjust the multiple-select dropup or dropdown by available space\r\n   */\r\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\r\n    // height in pixel of the multiple-select element\r\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\r\n\r\n    const windowHeight = $(window).innerHeight() || 300;\r\n    const pageScroll = $('body').scrollTop() || 0;\r\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\r\n    const $msDrop = $msDropContainer.find('.ms-drop');\r\n    const msDropHeight = $msDrop.height() || 0;\r\n    const msDropOffsetTop = $msDrop.offset().top;\r\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\r\n\r\n    if (space < msDropHeight) {\r\n      if (multipleSelectOptions.container) {\r\n        // when using a container, we need to offset the drop ourself\r\n        // and also make sure there's space available on top before doing so\r\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\r\n        if (newOffsetTop > 0) {\r\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\r\n        }\r\n      } else {\r\n        // without container, we simply need to add the \"top\" class to the drop\r\n        $msDrop.addClass('top');\r\n      }\r\n      $msDrop.removeClass('bottom');\r\n    } else {\r\n      $msDrop.addClass('bottom');\r\n      $msDrop.removeClass('top');\r\n    }\r\n  }\r\n\r\n  /** Build the template HTML string */\r\n  private createDomElement(editorTemplate: string) {\r\n    this.$editorElm = $(editorTemplate);\r\n\r\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\r\n      this.$editorElm.appendTo(this.args.container);\r\n    }\r\n\r\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\r\n      // fallback to bootstrap\r\n      this.$editorElm.addClass('form-control');\r\n    } else {\r\n      const elementOptions = (this.columnDef.internalColumnEditor) ? this.columnDef.internalColumnEditor.elementOptions : {};\r\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\r\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\r\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\r\n    }\r\n  }\r\n\r\n  // refresh the jquery object because the selected checkboxes were already set\r\n  // prior to this method being called\r\n  private refresh() {\r\n    if (typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('refresh');\r\n    }\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  Editor,\n  EditorValidator,\n  EditorValidatorOutput,\n  GridOption,\n  MultipleSelectOption,\n  SelectOption\n} from './../models/index';\nimport { findOrDefault, CollectionService } from '../services/index';\nimport { Injectable } from '@angular/core';\n\n// height in pixel of the multiple-select DOM element\nconst SELECT_ELEMENT_HEIGHT = 26;\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n/**\n * Slickgrid editor class for single select lists\n */\nexport class SingleSelectEditor implements Editor {\n  /** The JQuery DOM element */\n  $editorElm: any;\n\n  /** Editor Multiple-Select options */\n  editorElmOptions: MultipleSelectOption;\n\n  /** The multiple-select options for a single select */\n  defaultOptions: any;\n\n  /** The default item value that is set */\n  defaultValue: any;\n\n  /** The options label/value object to use in the select list */\n  collection: SelectOption[] = [];\n\n  /** The property name for values in the collection */\n  valueName: string;\n\n  /** The property name for labels in the collection */\n  labelName: string;\n\n  /** Grid options */\n  gridOptions: GridOption;\n\n  /** Do we translate the label? */\n  enableTranslateLabel: boolean;\n\n  /** The i18n aurelia library */\n  private _translate: TranslateService;\n\n  constructor(private args: any) {\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\n    const options = this.gridOptions || this.args.column.params || {};\n    this._translate = options.i18n;\n\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,\n      maxHeight: 200,\n      width: 150,\n      offsetLeft: 20,\n      single: true,\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\n    };\n\n    this.init();\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args && this.args.column || {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): any {\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\n  }\n\n  /**\n   * The current selected value from the collection\n   */\n  get currentValue() {\n    return findOrDefault(this.collection, (c: any) =>\n      c[this.valueName].toString() === this.$editorElm.val())[this.valueName];\n  }\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator {\n    return this.columnEditor.validator || this.columnDef.validator;\n  }\n\n  init() {\n    if (!this.args) {\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\n    }\n\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the SingleSelect Editor to work correctly.\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\n    }\n\n    const collectionService = new CollectionService(this._translate);\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\n\n    // user might want to filter certain items of the collection\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionFilterBy) {\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    this.collection = newCollection;\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\n\n    this.createDomElement(editorTemplate);\n  }\n\n  applyValue(item: any, state: any): void {\n    item[this.columnDef.field] = state;\n  }\n\n  destroy() {\n    this.$editorElm.remove();\n  }\n\n  loadValue(item: any): void {\n    // convert to string because that is how the DOM will return these values\n    // make sure the prop exists first\n    this.defaultValue = item[this.columnDef.field] && item[this.columnDef.field].toString();\n\n\n    this.$editorElm.find('option').each((i: number, $e: any) => {\n      if (this.defaultValue === $e.value) {\n        $e.selected = true;\n      } else {\n        $e.selected = false;\n      }\n    });\n\n    this.refresh();\n  }\n\n  serializeValue(): any {\n    return this.currentValue;\n  }\n\n  focus() {\n    this.$editorElm.focus();\n  }\n\n  isValueChanged(): boolean {\n    return this.$editorElm.val() !== this.defaultValue;\n  }\n\n  validate(): EditorValidatorOutput {\n    if (this.validator) {\n      const validationResults = this.validator(this.currentValue);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    }\n\n    // by default the editor is always valid\n    // if user want it to be a required checkbox, he would have to provide his own validator\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n\n  private buildTemplateHtmlString(collection: any[]) {\n    let options = '';\n    collection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error('A collection with value/label (or value/labelKey when using ' +\n          'Locale) is required to populate the Select list, for example: { params: { ' +\n          '{ collection: [ { value: \\'1\\', label: \\'One\\' } ] } } }');\n      }\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\n\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\n    });\n\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\n  }\n\n    /**\n   * Automatically adjust the multiple-select dropup or dropdown by available space\n   */\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\n    // height in pixel of the multiple-select element\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\n\n    const windowHeight = $(window).innerHeight() || 300;\n    const pageScroll = $('body').scrollTop() || 0;\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\n    const $msDrop = $msDropContainer.find('.ms-drop');\n    const msDropHeight = $msDrop.height() || 0;\n    const msDropOffsetTop = $msDrop.offset().top;\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\n\n    if (space < msDropHeight) {\n      if (multipleSelectOptions.container) {\n        // when using a container, we need to offset the drop ourself\n        // and also make sure there's space available on top before doing so\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\n        if (newOffsetTop > 0) {\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\n        }\n      } else {\n        // without container, we simply need to add the \"top\" class to the drop\n        $msDrop.addClass('top');\n      }\n      $msDrop.removeClass('bottom');\n    } else {\n      $msDrop.addClass('bottom');\n      $msDrop.removeClass('top');\n    }\n  }\n\n  /** Build the template HTML string */\n  private createDomElement(editorTemplate: string) {\n    this.$editorElm = $(editorTemplate);\n\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\n      this.$editorElm.appendTo(this.args.container);\n    }\n\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\n      // fallback to bootstrap\n      this.$editorElm.addClass('form-control');\n    } else {\n      const elementOptions = (this.columnDef.params) ? this.columnDef.params.elementOptions : {};\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\n    }\n  }\n\n  // refresh the jquery object because the selected checkboxes were already set\n  // prior to this method being called\n  private refresh() {\n    if (typeof this.$editorElm.multipleSelect === 'function') {\n      this.$editorElm.multipleSelect('refresh');\n    }\n  }\n}\n",
    "import { Constants } from '../constants';\nimport { Column, Editor, EditorValidator, EditorValidatorOutput } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP = 1;\n\nexport class SliderEditor implements Editor {\n  private _elementRangeInputId: string;\n  private _elementRangeOutputId: string;\n  $editorElm: any;\n  $input: any;\n  $sliderNumber: any;\n  defaultValue: any;\n\n  constructor(private args: any) {\n    this.init();\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args && this.args.column || {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): any {\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\n  }\n\n  /** Getter for the Editor Generic Params */\n  private get editorParams(): any {\n    return this.columnEditor.params || {};\n  }\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator {\n    return this.columnEditor.validator || this.columnDef.validator;\n  }\n\n  init(): void {\n    const container = this.args.container;\n\n    // define the input & slider number IDs\n    const itemId = this.args && this.args.item && this.args.item.id;\n    this._elementRangeInputId = `rangeInput_${this.columnDef.field}_${itemId}`;\n    this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}_${itemId}`;\n\n    // create HTML string template\n    const editorTemplate = this.buildTemplateHtmlString();\n    this.$editorElm = $(editorTemplate);\n    this.$input = this.$editorElm.children('input');\n    this.$sliderNumber = this.$editorElm.children('div.input-group-addon.input-group-append').children();\n\n    // watch on change event\n    this.$editorElm\n      .appendTo(this.args.container)\n      .on('mouseup', (event: Event) => this.save());\n\n    // if user chose to display the slider number on the right side, then update it every time it changes\n    // we need to use both \"input\" and \"change\" event to be all cross-browser\n    if (!this.editorParams.hideSliderNumber) {\n      this.$editorElm.on('input change', (e: { target: HTMLInputElement }) => {\n        const value = e && e.target && e.target.value || '';\n        if (value) {\n          document.getElementById(this._elementRangeOutputId).innerHTML = e.target.value;\n        }\n      });\n    }\n  }\n\n  destroy() {\n    this.$editorElm.remove();\n  }\n\n  focus() {\n    this.$editorElm.focus();\n  }\n\n  save() {\n    this.args.commitChanges();\n  }\n\n  cancel() {\n    this.$input.val(this.defaultValue);\n    this.args.cancelChanges();\n  }\n\n  loadValue(item: any) {\n    // this.$input.val(this.defaultValue = item[this.columnDef.field]);\n    this.defaultValue = item[this.columnDef.field];\n    this.$input.val(this.defaultValue);\n    this.$input[0].defaultValue = this.defaultValue;\n    this.$sliderNumber.html(this.defaultValue);\n  }\n\n  serializeValue() {\n    return parseInt(this.$input.val() as string, 10) || 0;\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.columnDef.field] = state;\n  }\n\n  isValueChanged() {\n    const elmValue = this.$input.val();\n    return (!(elmValue === '' && this.defaultValue === null)) && (elmValue !== this.defaultValue);\n  }\n\n  validate(): EditorValidatorOutput {\n    const elmValue = this.$input.val();\n    const minValue = this.columnEditor.minValue;\n    const maxValue = this.columnEditor.maxValue;\n    const errorMsg = this.columnEditor.errorMessage;\n    const mapValidation = {\n      '{{minValue}}': minValue,\n      '{{maxValue}}': maxValue\n    };\n\n    if (this.validator) {\n      const validationResults = this.validator(elmValue);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    } else if (minValue !== undefined && (elmValue < minValue || elmValue > maxValue)) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString() {\n    const minValue = this.columnEditor.hasOwnProperty('minValue') ? this.columnEditor.minValue : DEFAULT_MIN_VALUE;\n    const maxValue = this.columnEditor.hasOwnProperty('maxValue') ? this.columnEditor.maxValue : DEFAULT_MAX_VALUE;\n    const defaultValue = this.editorParams.hasOwnProperty('sliderStartValue') ? this.editorParams.sliderStartValue : minValue;\n    const step = this.columnEditor.hasOwnProperty('valueStep') ? this.columnEditor.valueStep : DEFAULT_STEP;\n    const itemId = this.args && this.args.item && this.args.item.id;\n\n    if (this.editorParams.hideSliderNumber) {\n      return `\n      <div class=\"slider-editor\">\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\n          name=\"${this._elementRangeInputId}\"\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n          class=\"form-control slider-editor-input range\" />\n      </div>`;\n    }\n\n    return `\n      <div class=\"input-group slider-editor\">\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\n          name=\"${this._elementRangeInputId}\"\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n          class=\"form-control slider-editor-input range\" />\n        <div class=\"input-group-addon input-group-append slider-value\"><span class=\"input-group-text\" id=\"${this._elementRangeOutputId}\">${defaultValue}</span></div>\n      </div>`;\n  }\n}\n",
    "import { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class TextEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"text\" class=\"editor-text\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this.$input.val(val);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field] || '';\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue === null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { CheckboxEditor } from './checkboxEditor';\r\nimport { DateEditor } from './dateEditor';\r\nimport { FloatEditor } from './floatEditor';\r\nimport { IntegerEditor } from './integerEditor';\r\nimport { LongTextEditor } from './longTextEditor';\r\nimport { MultipleSelectEditor } from './multipleSelectEditor';\r\nimport { SingleSelectEditor } from './singleSelectEditor';\r\nimport { SliderEditor } from './sliderEditor';\r\nimport { TextEditor } from './textEditor';\r\n\r\nexport const Editors = {\r\n  /** Checkbox Editor (uses native checkbox DOM element) */\r\n  checkbox: CheckboxEditor,\r\n\r\n  /** Date Picker Editor (which uses 3rd party lib \"flatpickr\") */\r\n  date: DateEditor,\r\n\r\n  /** Float Number Editor */\r\n  float: FloatEditor,\r\n\r\n  /** Integer Editor */\r\n  integer: IntegerEditor,\r\n\r\n  /** Long Text Editor (uses a textarea) */\r\n  longText: LongTextEditor,\r\n\r\n  /** Multiple Select editor (which uses 3rd party lib \"multiple-select.js\") */\r\n  multipleSelect: MultipleSelectEditor,\r\n\r\n  /** Single Select editor (which uses 3rd party lib \"multiple-select.js\") */\r\n  singleSelect: SingleSelectEditor,\r\n\r\n  /** Slider Editor */\r\n  slider: SliderEditor,\r\n\r\n  /** Text Editor */\r\n  text: TextEditor\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const arrayToCsvFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && Array.isArray(value)) {\n    const values = value.join(', ');\n    return `<span title=\"${values}\">${values}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const boldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  } else {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkboxFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? '&#x2611;' : '';\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkmarkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? `<i class=\"fa fa-check checkmark-icon\" aria-hidden=\"true\"></i>` : '';\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of a params collection\n */\nexport const collectionFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.params || !columnDef.params.collection\n    || !columnDef.params.collection.length) {\n    return '';\n  }\n\n  const { params, params: { collection } } = columnDef;\n  const labelName = (params.customStructure) ? params.customStructure.label : 'label';\n  const valueName = (params.customStructure) ? params.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of an editor collection\n */\nexport const collectionEditorFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.internalColumnEditor || !columnDef.internalColumnEditor.collection\n    || !columnDef.internalColumnEditor.collection.length) {\n    return '';\n  }\n\n  const { internalColumnEditor, internalColumnEditor: { collection } } = columnDef;\n  const labelName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.label : 'label';\n  const valueName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const complexObjectFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!columnDef) {\n    return '';\n  }\n  const complexField = columnDef.field || '';\n  return complexField.split('.').reduce((obj, i) => (obj ? obj[i] : ''), dataContext);\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\n\nexport const dateIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIso);\n\nexport const dateTimeIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIsoAmPm);\n\nexport const dateTimeIsoAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUsAmPm);\n\nexport const dateTimeUsAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUs);\n\nexport const dateTimeUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\n\nexport const dateUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const decimalFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const params = columnDef.params || {};\n  const minDecimalPlaces = params.minDecimalPlaces || params.decimalPlaces || 2;\n  const maxDecimalPlaces = params.maxDecimalPlaces || 2;\n  return isNaN(+value) ? value : `${decimalFormatted(value, minDecimalPlaces, maxDecimalPlaces)}`;\n};\n\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const deleteIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-trash pointer delete-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredBoldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isNumber = !isNaN(+value);\n  const params = columnDef && columnDef.params || {};\n  const minDecimal = params.minDecimal || 2;\n  const maxDecimal = params.minDecimal || 4;\n  const outputValue = (isNumber && (params.minDecimal || params.maxDecimal)) ? decimalFormatted(value, minDecimal, maxDecimal) : value;\n\n  if (!isNumber) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">$${outputValue}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">$${outputValue}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isNumber = !isNaN(+value);\n  const params = columnDef && columnDef.params || {};\n  const minDecimal = params.minDecimal || 2;\n  const maxDecimal = params.minDecimal || 4;\n  const outputValue = (isNumber && (params.minDecimal || params.maxDecimal)) ? decimalFormatted(value, minDecimal, maxDecimal) : value;\n\n  if (!isNumber) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green;\">$${outputValue}</span>`;\n  } else {\n    return `<span style=\"color:red;\">$${outputValue}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isNumber = !isNaN(+value);\n  const params = columnDef && columnDef.params || {};\n  const minDecimal = params.minDecimal || 2;\n  const maxDecimal = params.minDecimal || 4;\n  const outputValue = (isNumber && (params.minDecimal || params.maxDecimal)) ? decimalFormatted(value, minDecimal, maxDecimal) : value;\n\n  return !isNumber ? '' : `$${outputValue}`;\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const editIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-pencil pointer edit-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const hyperlinkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && typeof value === 'string') {\n    const matchUrl = value.match(/^(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:\\/~\\+#]*[\\w\\-\\@?^=%&amp;\\/~\\+#])?/i);\n    if (matchUrl && Array.isArray(matchUrl)) {\n      return `<a href=\"${matchUrl[0]}\">' + value + '</a>`;\n    }\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\nexport const hyperlinkUriPrefixFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  let uriPrefix = (columnDef && columnDef.params && columnDef.params.uriPrefix) ? columnDef.params.uriPrefix : '';\n  if (!uriPrefix) {\n    throw new Error(`HyperlinkUriPrefix Formatter require a \"uriPrefix\" that can be passed through params. e.g.:: formatter: Formatters.hyperlinkUriPrefix, params: { uriPrefix: '/users/' }`);\n  }\n  if (value && uriPrefix && typeof uriPrefix === 'string' && !uriPrefix.includes('<script>')) {\n    uriPrefix += value;\n    return '<a href=\"' + uriPrefix + '\">' + value + '</a>';\n  }\n  return '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const infoIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-info-circle pointer info-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const lowercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toLowerCase() : '';\n};\n",
    "\nimport { Column, Formatter } from './../models/index';\n\n/**\n * Takes a value display it according to a mask provided\n * e.: 1234567890 with mask \"(000) 000-0000\" will display \"(123) 456-7890\"\n */\nexport const maskFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const params = columnDef.params || {};\n  const mask = params.mask;\n\n  if (!mask) {\n    throw new Error(`You must provide a \"mask\" via the generic \"params\" options (e.g.: { formatter: Formatters.mask, params: { mask: '000-000' }}`);\n  }\n\n  if (value && mask) {\n    let i = 0;\n    const v = value.toString();\n    return mask.replace(/[09A]/g, () => v[i++] || '');\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\nexport const multipleFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const params = columnDef.params || {};\n  if (!params.formatters || !Array.isArray(params.formatters)) {\n    throw new Error(`The multiple formatter requires the \"formatters\" to be provided as a column params.\n    For example: this.columnDefinitions = [{ id: title, field: title, formatter: Formatters.multiple, params: { formatters: [Formatters.lowercase, Formatters.uppercase] }`);\n  }\n  const formatters: Formatter[] = params.formatters;\n\n  // loop through all Formatters, the value of 1st formatter will be used by 2nd formatter and so on.\n  // they are piped and executed in sequences\n  let currentValue = value;\n  for (const formatter of formatters) {\n    currentValue = formatter(row, cell, currentValue, columnDef, dataContext, grid);\n  }\n  return currentValue;\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  if (value === null || value === '') {\r\n    return '';\r\n  }\r\n\r\n  const outputValue = value > 0 ? value / 100 : 0;\r\n  return `<span>${outputValue}%</span>`;\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'red';\n  } else if (value < 70) {\n    color = 'silver';\n  } else {\n    color = 'green';\n  }\n\n  return `<span class=\"percent-complete-bar\" style=\"background:${color}; width:${value}%\"></span>`;\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '-';\n  } else if (value < 50) {\n    return `<span style='color:red;font-weight:bold;'>${value}%</span>`;\n  } else {\n    return `<span style='color:green'>${value}%</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentSymbolFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  return value ? `<span>${value}%</span>` : '';\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const progressBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'danger';\n  } else if (value < 70) {\n    color = 'warning';\n  } else {\n    color = 'success';\n  }\n\n  return `<div class=\"progress\">\n    <div class=\"progress-bar progress-bar-${color} bg-${color}\" role=\"progressbar\" aria-valuenow=\"${value}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"min-width: 2em; width: ${value}%;\">\n    ${value}%\n    </div>\n  </div>`;\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a cell value and translates it with the \"ngx-translate\" service */\nexport const translateFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? translate.instant(value) : '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a boolean value, cast it to upperCase string and finally translates it with the \"ngx-translate\" service */\nexport const translateBooleanFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n  return value ? translate.instant(value.toUpperCase() as string) : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const uppercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toUpperCase() : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const yesNoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string =>\n  value ? 'Yes' : 'No';\n",
    "import { Column } from './../models/index';\nimport { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { boldFormatter } from './boldFormatter';\nimport { checkboxFormatter } from './checkboxFormatter';\nimport { checkmarkFormatter } from './checkmarkFormatter';\nimport { collectionFormatter } from './collectionFormatter';\nimport { collectionEditorFormatter } from './collectionEditorFormatter';\nimport { complexObjectFormatter } from './complexObjectFormatter';\nimport { dateIsoFormatter } from './dateIsoFormatter';\nimport { dateTimeIsoFormatter } from './dateTimeIsoFormatter';\nimport { dateTimeIsoAmPmFormatter } from './dateTimeIsoAmPmFormatter';\nimport { dateTimeUsAmPmFormatter } from './dateTimeUsAmPmFormatter';\nimport { dateTimeUsFormatter } from './dateTimeUsFormatter';\nimport { dateUsFormatter } from './dateUsFormatter';\nimport { decimalFormatter } from './decimalFormatter';\nimport { deleteIconFormatter } from './deleteIconFormatter';\nimport { dollarColoredBoldFormatter } from './dollarColoredBoldFormatter';\nimport { dollarColoredFormatter } from './dollarColoredFormatter';\nimport { dollarFormatter } from './dollarFormatter';\nimport { editIconFormatter } from './editIconFormatter';\nimport { hyperlinkFormatter } from './hyperlinkFormatter';\nimport { hyperlinkUriPrefixFormatter } from './hyperlinkUriPrefixFormatter';\nimport { infoIconFormatter } from './infoIconFormatter';\nimport { lowercaseFormatter } from './lowercaseFormatter';\nimport { maskFormatter } from './maskFormatter';\nimport { multipleFormatter } from './multipleFormatter';\nimport { percentFormatter } from './percentFormatter';\nimport { percentCompleteBarFormatter } from './percentCompleteBarFormatter';\nimport { percentCompleteFormatter } from './percentCompleteFormatter';\nimport { percentSymbolFormatter } from './percentSymbolFormatter';\nimport { progressBarFormatter } from './progressBarFormatter';\nimport { translateFormatter } from './translateFormatter';\nimport { translateBooleanFormatter } from './translateBooleanFormatter';\nimport { uppercaseFormatter } from './uppercaseFormatter';\nimport { yesNoFormatter } from './yesNoFormatter';\n\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const Formatters = {\n  /** Takes an array of string and converts it to a comma delimited string */\n  arrayToCsv: arrayToCsvFormatter,\n\n  /** show value in bold font weight as well */\n  bold: boldFormatter,\n\n  /** When value is filled (true), it will display a checkbox Unicode icon */\n  checkbox: checkboxFormatter,\n\n  /** When value is filled (true), it will display a Font-Awesome icon (fa-check) */\n  checkmark: checkmarkFormatter,\n\n  /** Takes a complex data object and return the data under that property (for example: \"user.firstName\" will return the first name \"John\") */\n  complexObject: complexObjectFormatter,\n\n  /**\n   * Looks up values from the columnDefinition.params.collection property and displays the label in CSV or string format\n   * @example\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\n   * const dataset = [{ value: 1 },{ value: 2 }];\n   */\n  collection: collectionFormatter,\n\n  /**\n   * Looks up values from the columnDefinition.editor.collection property and displays the label in CSV or string format\n   * @example\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\n   * const dataset = [{ value: 1 },{ value: 2 }];\n   */\n  collectionEditor: collectionEditorFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date format */\n  dateIso: dateIsoFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date+Time format */\n  dateTimeIso: dateTimeIsoFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date+Time+(am/pm) format */\n  dateTimeIsoAmPm: dateTimeIsoAmPmFormatter,\n\n  /** Takes a Date object and displays it as an US Date format */\n  dateUs: dateUsFormatter,\n\n  /** Takes a Date object and displays it as an US Date+Time format */\n  dateTimeUs: dateTimeUsFormatter,\n\n  /** Takes a Date object and displays it as an US Date+Time+(am/pm) format */\n  dateTimeUsAmPm: dateTimeUsAmPmFormatter,\n\n  /** Displays a Font-Awesome delete icon (fa-trash) */\n  deleteIcon: deleteIconFormatter,\n\n  /**\n   * Display the value as x decimals formatted, defaults to 2 decimals.\n   * You can pass \"decimalPlaces\" or \"minDecimalPlaces\" and/or \"maxDecimalPlaces\" to the generic \"params\" property, example:: `{ formatter: Formatters.decimal, params: { decimalPlaces: 3 }}`\n   * The property \"decimalPlaces\" is an alias of \"minDecimalPlaces\"\n   */\n  decimal: decimalFormatter,\n\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value */\n  dollar: dollarFormatter,\n\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value */\n  dollarColored: dollarColoredFormatter,\n\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value, show it in bold font weight as well */\n  dollarColoredBold: dollarColoredBoldFormatter,\n\n  /** Displays a Font-Awesome edit icon (fa-pencil) */\n  editIcon: editIconFormatter,\n\n  /** Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https). The structure will be \"<a href=\"hyperlink\">hyperlink</a>\" */\n  hyperlink: hyperlinkFormatter,\n\n  /** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\n  hyperlinkUriPrefix: hyperlinkUriPrefixFormatter,\n\n  /** Displays a Font-Awesome edit icon (fa-info-circle) */\n  infoIcon: infoIconFormatter,\n\n  /** Takes a value and displays it all lowercase */\n  lowercase: lowercaseFormatter,\n\n  /**\n   * Takes a value display it according to a mask provided\n   * e.: 1234567890 with mask \"(000) 000-0000\" will display \"(123) 456-7890\"\n   */\n  mask: maskFormatter,\n\n  /**\n   * You can pipe multiple formatters (executed in sequence), use params to pass the list of formatters. For example::\n   * { field: 'title', formatter: Formatters.multiple, params: { formatters: [ Formatters.lowercase, Formatters.uppercase ] }\n   */\n  multiple: multipleFormatter,\n\n  /** Takes a cell value number (between 0.0-1.0) and displays a red (<50) or green (>=50) bar */\n  percent: percentFormatter,\n\n  /** Takes a cell value number (between 0.0-100) and displays a red (<50) or green (>=50) bar */\n  percentComplete: percentCompleteFormatter,\n\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"percent-complete-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\n  percentCompleteBar: percentCompleteBarFormatter,\n\n  /** Takes a cell value number (between 0-100) and add the \"%\" after the number */\n  percentSymbol: percentSymbolFormatter,\n\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"progress-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\n  progressBar: progressBarFormatter,\n\n  /** Takes a cell value and translates it (i18n). Requires an instance of the Translate Service:: `i18n: this.translate */\n  translate: translateFormatter,\n\n  /** Takes a boolean value, cast it to upperCase string and finally translates it (i18n). */\n  translateBoolean: translateBooleanFormatter,\n\n  /** Takes a value and displays it all uppercase */\n  uppercase: uppercaseFormatter,\n\n  /** Takes a boolean value and display a string 'Yes' or 'No' */\n  yesNo: yesNoFormatter\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsPercentageFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + '%' + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const avgTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 4) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const minTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.min && totals.min[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const maxTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.max && totals.max[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 4) + suffix}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 2) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}`;\n  }\n  return '';\n};\n",
    "import { Column } from './../models/index';\nimport { avgTotalsPercentageFormatter } from './avgTotalsPercentageFormatter';\nimport { avgTotalsDollarFormatter } from './avgTotalsDollarFormatter';\nimport { avgTotalsFormatter } from './avgTotalsFormatter';\nimport { minTotalsFormatter } from './minTotalsFormatter';\nimport { maxTotalsFormatter } from './maxTotalsFormatter';\nimport { sumTotalsColoredFormatter } from './sumTotalsColoredFormatter';\nimport { sumTotalsDollarColoredBoldFormatter } from './sumTotalsDollarColoredBoldFormatter';\nimport { sumTotalsDollarColoredFormatter } from './sumTotalsDollarColoredFormatter';\nimport { sumTotalsDollarBoldFormatter } from './sumTotalsDollarBoldFormatter';\nimport { sumTotalsDollarFormatter } from './sumTotalsDollarFormatter';\nimport { sumTotalsFormatter } from './sumTotalsFormatter';\nimport { sumTotalsBoldFormatter } from './sumTotalsBoldFormatter';\n\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const GroupTotalFormatters = {\n  /**\n   * Average all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotals: avgTotalsFormatter,\n\n  /**\n   * Average all the column totals and display '$' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsDollar: avgTotalsDollarFormatter,\n\n  /**\n   * Average all the column totals and display '%' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsPercentage: avgTotalsPercentageFormatter,\n\n  /**\n   * Show max value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  maxTotals: maxTotalsFormatter,\n\n  /**\n   * Show min value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  minTotals: minTotalsFormatter,\n\n  /**\n   * Sums up all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotals: sumTotalsFormatter,\n\n  /**\n   * Sums up all the column totals and display it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsBold: sumTotalsBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsColored: sumTotalsColoredFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollar: sumTotalsDollarFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign and show it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarBold: sumTotalsDollarBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColored: sumTotalsDollarColoredFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value, show it in bold font weight as well\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColoredBold: sumTotalsDollarColoredBoldFormatter,\n};\n",
    "import { Pagination } from './../models/pagination.interface';\r\nimport { AfterViewInit, Component, EventEmitter, Injectable, Input, OnDestroy, Output } from '@angular/core';\r\nimport { castToPromise } from './../services/utilities';\r\nimport { GridOption } from './../models/index';\r\nimport { FilterService } from './../services/index';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n@Component({\r\n  selector: 'slick-pagination',\r\n  template: `<div class=\"slick-pagination\">\r\n    <div class=\"slick-pagination-nav\">\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-first fa fa-angle-double-left\" aria-label=\"First\" (click)=\"changeToFirstPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-prev fa fa-angle-left\" aria-label=\"Previous\" (click)=\"changeToPreviousPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n\r\n        <div class=\"slick-page-number\">\r\n            <span [translate]=\"'PAGE'\"></span>\r\n            <input type=\"text\" class=\"form-control\" value=\"{{pageNumber}}\" size=\"1\"  (change)=\"changeToCurrentPage($event)\">\r\n            <span [translate]=\"'OF'\"></span><span> {{pageCount}}</span>\r\n        </div>\r\n\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-next text-center fa fa-lg fa-angle-right\" aria-label=\"Next\" (click)=\"changeToNextPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-end fa fa-lg fa-angle-double-right\" aria-label=\"Last\" (click)=\"changeToLastPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n    </div>\r\n    <span class=\"slick-pagination-settings\">\r\n        <select id=\"items-per-page-label\" [value]=\"itemsPerPage\" (change)=\"onChangeItemPerPage($event)\">\r\n        <option value=\"{{pageSize}}\" *ngFor=\"let pageSize of paginationPageSizes;\">{{pageSize}}</option>\r\n        </select>\r\n        <span [translate]=\"'ITEMS_PER_PAGE'\"></span>,\r\n        <span class=\"slick-pagination-count\">\r\n            <span [translate]=\"'FROM_TO_OF_TOTAL_ITEMS'\" [translateParams]=\"{ from: dataFrom, to: dataTo, totalItems: totalItems }\"></span>\r\n        </span>\r\n    </span>\r\n    </div>\r\n`\r\n})\r\n@Injectable()\r\nexport class SlickPaginationComponent implements AfterViewInit, OnDestroy {\r\n  private _filterSubcription: Subscription;\r\n  private _gridPaginationOptions: GridOption;\r\n  private _isFirstRender = true;\r\n  @Output() onPaginationChanged = new EventEmitter<Pagination>();\r\n\r\n  @Input()\r\n  set gridPaginationOptions(gridPaginationOptions: GridOption) {\r\n    this._gridPaginationOptions = gridPaginationOptions;\r\n    if (this._isFirstRender || !gridPaginationOptions || !gridPaginationOptions.pagination || (gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n      this._isFirstRender = false;\r\n    }\r\n  }\r\n  get gridPaginationOptions(): GridOption {\r\n    return this._gridPaginationOptions;\r\n  }\r\n  @Input() grid: any;\r\n  dataFrom = 1;\r\n  dataTo = 1;\r\n  itemsPerPage: number;\r\n  pageCount = 0;\r\n  pageNumber = 1;\r\n  totalItems = 0;\r\n  paginationCallback: Function;\r\n  paginationPageSizes = [25, 75, 100];\r\n  fromToParams: any = { from: this.dataFrom, to: this.dataTo, totalItems: this.totalItems };\r\n\r\n  /** Constructor */\r\n  constructor(private filterService: FilterService) { }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._gridPaginationOptions = this._gridPaginationOptions;\r\n    if (!this._gridPaginationOptions || !this._gridPaginationOptions.pagination || (this._gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n    }\r\n\r\n    // Subscribe to Event Emitter of Filter & Sort changed, go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterChanged.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n    // Subscribe to Filter clear and go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterCleared.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n  }\r\n\r\n  ceil(number: number) {\r\n    return Math.ceil(number);\r\n  }\r\n\r\n  changeToFirstPage(event: any) {\r\n    this.pageNumber = 1;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToLastPage(event: any) {\r\n    this.pageNumber = this.pageCount;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToNextPage(event: any) {\r\n    if (this.pageNumber < this.pageCount) {\r\n      this.pageNumber++;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToPreviousPage(event: any) {\r\n    if (this.pageNumber > 0) {\r\n      this.pageNumber--;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToCurrentPage(event: any) {\r\n    this.pageNumber = event.currentTarget.value;\r\n    if (this.pageNumber < 1) {\r\n          this.pageNumber = 1;\r\n    } else if (this.pageNumber > this.pageCount) {\r\n          this.pageNumber = this.pageCount;\r\n    }\r\n\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  dispose() {\r\n    this.onPaginationChanged.unsubscribe();\r\n    if (this._filterSubcription) {\r\n      this._filterSubcription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  onChangeItemPerPage(event: any) {\r\n    const itemsPerPage = +event.target.value;\r\n    this.pageCount = Math.ceil(this.totalItems / itemsPerPage);\r\n    this.pageNumber = 1;\r\n    this.itemsPerPage = itemsPerPage;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  refreshPagination(isPageNumberReset: boolean = false) {\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this._gridPaginationOptions && this._gridPaginationOptions.pagination) {\r\n      const pagination = this._gridPaginationOptions.pagination;\r\n      // set the number of items per page if not already set\r\n      if (!this.itemsPerPage) {\r\n        this.itemsPerPage = +((backendApi && backendApi.options && backendApi.options.paginationOptions && backendApi.options.paginationOptions.first) ? backendApi.options.paginationOptions.first : this._gridPaginationOptions.pagination.pageSize);\r\n      }\r\n\r\n      // if totalItems changed, we should always go back to the first page and recalculation the From-To indexes\r\n      if (isPageNumberReset || this.totalItems !== pagination.totalItems) {\r\n        if (this._isFirstRender && pagination.pageNumber && pagination.pageNumber > 1) {\r\n          this.pageNumber = pagination.pageNumber || 1;\r\n        } else {\r\n          this.pageNumber = 1;\r\n        }\r\n\r\n        // when page number is set to 1 then also reset the \"offset\" of backend service\r\n        if (this.pageNumber === 1) {\r\n          backendApi.service.resetPaginationOptions();\r\n        }\r\n      }\r\n\r\n      // calculate and refresh the multiple properties of the pagination UI\r\n      this.paginationPageSizes = this._gridPaginationOptions.pagination.pageSizes;\r\n      this.totalItems = this._gridPaginationOptions.pagination.totalItems;\r\n      this.recalculateFromToIndexes();\r\n    }\r\n    this.pageCount = Math.ceil(this.totalItems / this.itemsPerPage);\r\n  }\r\n\r\n  async onPageChanged(event: Event | undefined, pageNumber: number) {\r\n    this.recalculateFromToIndexes();\r\n\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this.dataTo > this.totalItems) {\r\n      this.dataTo = this.totalItems;\r\n    } else if (this.totalItems < this.itemsPerPage) {\r\n      this.dataTo = this.totalItems;\r\n    }\r\n    if (backendApi) {\r\n      const itemsPerPage = +this.itemsPerPage;\r\n\r\n      // keep start time & end timestamps & return it after process execution\r\n      const startTime = new Date();\r\n\r\n      if (backendApi.preProcess) {\r\n        backendApi.preProcess();\r\n      }\r\n\r\n      const query = backendApi.service.processOnPaginationChanged(event, { newPage: pageNumber, pageSize: itemsPerPage });\r\n\r\n      // the process could be an Observable (like HttpClient) or a Promise\r\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n      const observableOrPromise = backendApi.process(query);\r\n      const processResult = await castToPromise(observableOrPromise);\r\n      const endTime = new Date();\r\n\r\n      // from the result, call our internal post process to update the Dataset and Pagination info\r\n      if (processResult && backendApi.internalPostProcess) {\r\n        backendApi.internalPostProcess(processResult);\r\n      }\r\n\r\n      // send the response process to the postProcess callback\r\n      if (backendApi.postProcess) {\r\n        if (processResult instanceof Object) {\r\n          processResult.statistics = {\r\n            startTime,\r\n            endTime,\r\n            executionTime: endTime.valueOf() - startTime.valueOf(),\r\n            itemCount: this.totalItems,\r\n            totalItemCount: this.totalItems\r\n          };\r\n        }\r\n        backendApi.postProcess(processResult);\r\n      }\r\n    } else {\r\n      throw new Error('Pagination with a backend service requires \"BackendServiceApi\" to be defined in your grid options');\r\n    }\r\n\r\n    // emit the changes to the parent component\r\n    this.onPaginationChanged.emit({\r\n      pageNumber: this.pageNumber,\r\n      pageSizes: this.paginationPageSizes,\r\n      pageSize: this.itemsPerPage,\r\n      totalItems: this.totalItems\r\n    });\r\n  }\r\n\r\n  recalculateFromToIndexes() {\r\n    this.dataFrom = (this.pageNumber * this.itemsPerPage) - this.itemsPerPage + 1;\r\n    this.dataTo = (this.totalItems < this.itemsPerPage) ? this.totalItems : (this.pageNumber * this.itemsPerPage);\r\n  }\r\n}\r\n",
    "// import 3rd party vendor libs\nimport 'jquery-ui-dist/jquery-ui';\nimport 'slickgrid/lib/jquery.event.drag-2.3.0';\nimport 'slickgrid/slick.core';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.grid';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.groupitemmetadataprovider';\nimport 'slickgrid/controls/slick.columnpicker';\nimport 'slickgrid/controls/slick.gridmenu';\nimport 'slickgrid/controls/slick.pager';\nimport 'slickgrid/plugins/slick.autotooltips';\nimport 'slickgrid/plugins/slick.cellexternalcopymanager';\nimport 'slickgrid/plugins/slick.cellrangedecorator';\nimport 'slickgrid/plugins/slick.cellrangeselector';\nimport 'slickgrid/plugins/slick.cellselectionmodel';\nimport 'slickgrid/plugins/slick.checkboxselectcolumn';\nimport 'slickgrid/plugins/slick.headerbuttons';\nimport 'slickgrid/plugins/slick.headermenu';\nimport 'slickgrid/plugins/slick.rowmovemanager';\nimport 'slickgrid/plugins/slick.rowselectionmodel';\nimport { AfterViewInit, Component, EventEmitter, Inject, Injectable, Input, Output, OnDestroy, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, titleCase } from './../services/utilities';\nimport { GlobalGridOptions } from './../global-grid-options';\nimport {\n  AngularGridInstance,\n  BackendServiceOption,\n  Column,\n  GraphqlResult,\n  GridOption,\n  GridStateChange,\n  GridStateType,\n  Pagination,\n  Statistic\n} from './../models/index';\nimport { ControlAndPluginService } from './../services/controlAndPlugin.service';\nimport { ExportService } from './../services/export.service';\nimport { FilterService } from './../services/filter.service';\nimport { GraphqlService } from './../services/graphql.service';\nimport { GridEventService } from './../services/gridEvent.service';\nimport { GridService } from './../services/grid.service';\nimport { GridStateService } from './../services/gridState.service';\nimport { GroupingAndColspanService } from './../services/groupingAndColspan.service';\nimport { ResizerService } from './../services/resizer.service';\nimport { SortService } from './../services/sort.service';\nimport { Subscription } from 'rxjs/Subscription';\nimport { FilterFactory } from '../filters/filterFactory';\nimport { SlickgridConfig } from '../slickgrid-config';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\nconst slickgridEventPrefix = 'sg';\n\n@Injectable()\n@Component({\n  selector: 'angular-slickgrid',\n  template: `<div id=\"slickGridContainer-{{gridId}}\" class=\"gridPane\" [style.width]=\"gridWidthString\">\n    <div attr.id='{{gridId}}' class=\"slickgrid-container\" style=\"width: 100%\" [style.height]=\"gridHeightString\">\n    </div>\n\n    <slick-pagination id=\"slickPagingContainer-{{gridId}}\"\n        *ngIf=\"showPagination\"\n        (onPaginationChanged)=\"paginationChanged($event)\"\n        [gridPaginationOptions]=\"gridPaginationOptions\">\n    </slick-pagination>\n</div>\n`,\n  providers: [\n    ControlAndPluginService,\n    ExportService,\n    FilterFactory,\n    FilterService,\n    GraphqlService,\n    GridEventService,\n    GridService,\n    GridStateService,\n    GroupingAndColspanService,\n    ResizerService,\n    SortService,\n    SlickgridConfig\n  ]\n})\nexport class AngularSlickgridComponent implements AfterViewInit, OnDestroy, OnInit {\n  private _dataset: any[];\n  private _columnDefinitions: Column[];\n  private _dataView: any;\n  private _eventHandler: any = new Slick.EventHandler();\n  grid: any;\n  gridPaginationOptions: GridOption;\n  gridHeightString: string;\n  gridWidthString: string;\n  groupingDefinition: any = {};\n  groupItemMetadataProvider: any;\n  showPagination = false;\n  isGridInitialized = false;\n  subscriptions: Subscription[] = [];\n\n  @Output() onAngularGridCreated = new EventEmitter<AngularGridInstance>();\n  @Output() onDataviewCreated = new EventEmitter<any>();\n  @Output() onGridCreated = new EventEmitter<any>();\n  @Output() onGridInitialized = new EventEmitter<any>();\n  @Output() onBeforeGridCreate = new EventEmitter<boolean>();\n  @Output() onBeforeGridDestroy = new EventEmitter<any>();\n  @Output() onAfterGridDestroyed = new EventEmitter<boolean>();\n  @Output() onGridStateChanged = new EventEmitter<GridStateChange>();\n  @Input() gridId: string;\n  @Input() gridOptions: GridOption;\n  @Input() gridHeight = 0;\n  @Input() gridWidth = 0;\n\n  @Input()\n  set columnDefinitions(columnDefinitions: Column[]) {\n    this._columnDefinitions = columnDefinitions;\n    if (this.isGridInitialized) {\n      this.updateColumnDefinitionsList(columnDefinitions);\n    }\n  }\n  get columnDefinitions(): Column[] {\n    return this._columnDefinitions;\n  }\n  @Input()\n  set dataset(dataset: any[]) {\n    this._dataset = dataset;\n    this.refreshGridData(dataset);\n  }\n  get dataset(): any[] {\n    return this._dataView.getItems();\n  }\n\n\n  constructor(\n    private controlAndPluginService: ControlAndPluginService,\n    private elm: ElementRef,\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private gridService: GridService,\n    private gridEventService: GridEventService,\n    private gridStateService: GridStateService,\n    private groupingAndColspanService: GroupingAndColspanService,\n    private resizer: ResizerService,\n    private sortService: SortService,\n    private translate: TranslateService,\n    @Inject('config') private forRootConfig: GridOption\n  ) {}\n\n  ngOnInit(): void {\n    this.onBeforeGridCreate.emit(true);\n    if (!this.gridOptions.enableAutoResize && !this.gridOptions.autoResize) {\n      this.gridHeightString = `${this.gridHeight}px`;\n      this.gridWidthString = `${this.gridWidth}px`;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.onBeforeGridDestroy.emit(this.grid);\n    this.destroy();\n    this.onAfterGridDestroyed.emit(true);\n  }\n\n  destroy(emptyDomElementContainer = false) {\n    this._dataView = [];\n    this.gridOptions = {};\n    this._eventHandler.unsubscribeAll();\n    this.controlAndPluginService.dispose();\n    this.filterService.dispose();\n    this.gridEventService.dispose();\n    this.gridStateService.dispose();\n    this.groupingAndColspanService.dispose();\n    this.resizer.dispose();\n    this.sortService.dispose();\n    this.grid.destroy();\n\n    if (emptyDomElementContainer) {\n      $(this.gridOptions.gridContainerId).empty();\n    }\n\n    // also unsubscribe all RxJS subscriptions\n    this.subscriptions.forEach((subscription: Subscription) => {\n      if (subscription && subscription.unsubscribe) {\n        subscription.unsubscribe();\n      }\n    });\n    this.subscriptions = [];\n  }\n\n  ngAfterViewInit() {\n    this.initialization();\n    this.isGridInitialized = true;\n  }\n\n  initialization() {\n    // make sure the dataset is initialized (if not it will throw an error that it cannot getLength of null)\n    this._dataset = this._dataset || [];\n    this.gridOptions = this.mergeGridOptions(this.gridOptions);\n    this.createBackendApiInternalPostProcessCallback(this.gridOptions);\n\n    if (this.gridOptions.enableGrouping) {\n      this.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\n      this._dataView = new Slick.Data.DataView({\n        groupItemMetadataProvider: this.groupItemMetadataProvider,\n        inlineFilters: true\n      });\n    } else {\n      this._dataView = new Slick.Data.DataView();\n    }\n\n    // for convenience, we provide the property \"editor\" as an Angular-Slickgrid editor complex object\n    // however \"editor\" is used internally by SlickGrid for it's Editor Factory\n    // so in our lib we will swap \"editor\" and copy it into \"internalColumnEditor\"\n    // then take back \"editor.model\" and make it the new \"editor\" so that SlickGrid Editor Factory still works\n    this._columnDefinitions = this._columnDefinitions.map((c: Column | any) => ({\n      ...c,\n      editor: c.editor && c.editor.model,\n      internalColumnEditor: { ...c.editor }\n    })),\n\n    this.controlAndPluginService.createCheckboxPluginBeforeGridCreation(this._columnDefinitions, this.gridOptions);\n    this.grid = new Slick.Grid(`#${this.gridId}`, this._dataView, this._columnDefinitions, this.gridOptions);\n\n    this.controlAndPluginService.attachDifferentControlOrPlugins(this.grid, this._dataView, this.groupItemMetadataProvider);\n    this.attachDifferentHooks(this.grid, this.gridOptions, this._dataView);\n\n    // emit the Grid & DataView object to make them available in parent component\n    this.onGridCreated.emit(this.grid);\n    this.onDataviewCreated.emit(this._dataView);\n\n    this.grid.init();\n    this._dataView.beginUpdate();\n    this._dataView.setItems(this._dataset, this.gridOptions.datasetIdPropertyName);\n    this._dataView.endUpdate();\n\n    // after the DataView is created & updated execute some processes\n    this.executeAfterDataviewCreated(this.grid, this.gridOptions, this._dataView);\n\n    // attach resize ONLY after the dataView is ready\n    this.attachResizeHook(this.grid, this.gridOptions);\n\n    // attach grouping and header grouping colspan service\n    if (this.gridOptions.createPreHeaderPanel) {\n      this.groupingAndColspanService.init(this.grid, this._dataView);\n    }\n\n    // attach grid  service\n    this.gridService.init(this.grid, this._dataView);\n\n    // when user enables translation, we need to translate Headers on first pass & subsequently in the attachDifferentHooks\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders();\n    }\n\n    // if Export is enabled, initialize the service with the necessary grid and other objects\n    if (this.gridOptions.enableExport) {\n      this.exportService.init(this.grid, this._dataView);\n    }\n\n    // once all hooks are in placed and the grid is initialized, we can emit an event\n    this.onGridInitialized.emit(this.grid);\n\n    // attach the Backend Service API callback functions only after the grid is initialized\n    // because the preProcess() and onInit() might get triggered\n    if (this.gridOptions && this.gridOptions.backendServiceApi) {\n      this.attachBackendCallbackFunctions(this.gridOptions);\n    }\n\n    this.gridStateService.init(this.grid, this.controlAndPluginService, this.filterService, this.sortService);\n\n    this.onAngularGridCreated.emit({\n      // Slick Grid & DataView objects\n      dataView: this._dataView,\n      slickGrid: this.grid,\n\n      // public methods\n      destroy: this.destroy.bind(this),\n\n      // return all available Services (non-singleton)\n      backendService: this.gridOptions && this.gridOptions.backendServiceApi && this.gridOptions.backendServiceApi.service,\n      exportService: this.exportService,\n      filterService: this.filterService,\n      gridEventService: this.gridEventService,\n      gridStateService: this.gridStateService,\n      gridService: this.gridService,\n      groupingService: this.groupingAndColspanService,\n      pluginService: this.controlAndPluginService,\n      resizerService: this.resizer,\n      sortService: this.sortService,\n    });\n  }\n\n  /**\n   * Define what our internal Post Process callback, it will execute internally after we get back result from the Process backend call\n   * For now, this is GraphQL Service only feautre and it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n   */\n  createBackendApiInternalPostProcessCallback(gridOptions: GridOption) {\n    if (gridOptions && gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      // internalPostProcess only works with a GraphQL Service, so make sure it is that type\n      if (backendApi && backendApi.service && backendApi.service instanceof GraphqlService) {\n        backendApi.internalPostProcess = (processResult: any) => {\n          const datasetName = (backendApi && backendApi.service && typeof backendApi.service.getDatasetName === 'function') ? backendApi.service.getDatasetName() : '';\n          if (processResult && processResult.data && processResult.data[datasetName]) {\n            this._dataset = processResult.data[datasetName].nodes;\n            this.refreshGridData(this._dataset, processResult.data[datasetName].totalCount);\n          } else {\n            this._dataset = [];\n          }\n        };\n      }\n    }\n  }\n\n  attachDifferentHooks(grid: any, gridOptions: GridOption, dataView: any) {\n    // on locale change, we have to manually translate the Headers, GridMenu\n    this.subscriptions.push(\n      this.translate.onLangChange.subscribe((event) => {\n        if (gridOptions.enableTranslate) {\n          this.controlAndPluginService.translateColumnHeaders();\n          this.controlAndPluginService.translateColumnPicker();\n          this.controlAndPluginService.translateGridMenu();\n          this.controlAndPluginService.translateHeaderMenu();\n        }\n      })\n    );\n\n    // if user entered some Columns \"presets\", we need to reflect them all in the grid\n    if (gridOptions.presets && Array.isArray(gridOptions.presets.columns) && gridOptions.presets.columns.length > 0) {\n      const gridColumns: Column[] = this.gridStateService.getAssociatedGridColumns(grid, gridOptions.presets.columns);\n      if (gridColumns && Array.isArray(gridColumns) && gridColumns.length > 0) {\n        // make sure that the checkbox selector is also visible if it is enabled\n        if (gridOptions.enableCheckboxSelector) {\n          const checkboxColumn = (Array.isArray(this._columnDefinitions) && this._columnDefinitions.length > 0) ? this._columnDefinitions[0] : null;\n          if (checkboxColumn && checkboxColumn.id === '_checkbox_selector' && gridColumns[0].id !== '_checkbox_selector') {\n            gridColumns.unshift(checkboxColumn);\n          }\n        }\n\n        // finally set the new presets columns (including checkbox selector if need be)\n        grid.setColumns(gridColumns);\n      }\n    }\n\n    // attach external sorting (backend) when available or default onSort (dataView)\n    if (gridOptions.enableSorting) {\n      gridOptions.backendServiceApi ? this.sortService.attachBackendOnSort(grid, dataView) : this.sortService.attachLocalOnSort(grid, dataView);\n    }\n\n    // attach external filter (backend) when available or default onFilter (dataView)\n    if (gridOptions.enableFiltering) {\n      this.filterService.init(grid);\n\n      // if user entered some \"presets\", we need to reflect them all in the DOM\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n        this.filterService.populateColumnFilterSearchTerms();\n      }\n      gridOptions.backendServiceApi ? this.filterService.attachBackendOnFilter(grid) : this.filterService.attachLocalOnFilter(grid, this._dataView);\n    }\n\n    // if user set an onInit Backend, we'll run it right away (and if so, we also need to run preProcess, internalPostProcess & postProcess)\n    if (gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      if (backendApi && backendApi.service && backendApi.service.init) {\n        backendApi.service.init(backendApi.options, gridOptions.pagination, this.grid);\n      }\n    }\n\n    // expose all Slick Grid Events through dispatch\n    for (const prop in grid) {\n      if (grid.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(grid[prop], (e: any, args: any) => {\n          return this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\n        });\n      }\n    }\n\n    // expose all Slick DataView Events through dispatch\n    for (const prop in dataView) {\n      if (dataView.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(dataView[prop], (e: any, args: any) => {\n          return this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\n        });\n      }\n    }\n\n    // expose GridState Service changes event through dispatch\n    this.subscriptions.push(\n      this.gridStateService.onGridStateChanged.subscribe((gridStateChange: GridStateChange) => {\n        this.onGridStateChanged.emit(gridStateChange);\n      })\n    );\n\n\n    // on cell click, mainly used with the columnDef.action callback\n    this.gridEventService.attachOnCellChange(grid, dataView);\n    this.gridEventService.attachOnClick(grid, dataView);\n\n    this._eventHandler.subscribe(dataView.onRowCountChanged, (e: any, args: any) => {\n      grid.updateRowCount();\n      grid.render();\n    });\n    this._eventHandler.subscribe(dataView.onRowsChanged, (e: any, args: any) => {\n      grid.invalidateRows(args.rows);\n      grid.render();\n    });\n\n    // does the user have a colspan callback?\n    if (gridOptions.colspanCallback) {\n      this._dataView.getItemMetadata = (rowNumber: number) => {\n        const item = this._dataView.getItem(rowNumber);\n        return gridOptions.colspanCallback(item);\n      };\n    }\n  }\n\n  attachBackendCallbackFunctions(gridOptions: GridOption) {\n    const backendApi = gridOptions.backendServiceApi;\n    const serviceOptions: BackendServiceOption = (backendApi && backendApi.service && backendApi.service.options) ? backendApi.service.options : {};\n    const isExecuteCommandOnInit = (!serviceOptions) ? false : ((serviceOptions && serviceOptions.hasOwnProperty('executeProcessCommandOnInit')) ? serviceOptions['executeProcessCommandOnInit'] : true);\n\n    // update backend filters (if need be) before the query runs\n    if (backendApi) {\n      const backendService = backendApi.service;\n\n      // if user entered some any \"presets\", we need to reflect them all in the grid\n      if (gridOptions && gridOptions.presets) {\n         // Filters \"presets\"\n         if (backendService && backendService.updateFilters && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n          backendService.updateFilters(gridOptions.presets.filters, true);\n        }\n        // Sorters \"presets\"\n        if (backendService && backendService.updateSorters && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n          backendService.updateSorters(undefined, gridOptions.presets.sorters);\n        }\n        // Pagination \"presets\"\n        if (backendService && backendService.updatePagination && gridOptions.presets.pagination) {\n          backendService.updatePagination(gridOptions.presets.pagination.pageNumber, gridOptions.presets.pagination.pageSize);\n        }\n      } else {\n        const columnFilters = this.filterService.getColumnFilters();\n        if (columnFilters && backendService && backendService.updateFilters) {\n          backendService.updateFilters(columnFilters, false);\n        }\n      }\n    }\n\n    if (backendApi && backendApi.service && (backendApi.onInit || isExecuteCommandOnInit)) {\n      const query = (typeof backendApi.service.buildQuery === 'function') ? backendApi.service.buildQuery() : '';\n      const observableOrPromise = (isExecuteCommandOnInit) ? backendApi.process(query) : backendApi.onInit(query);\n\n      // wrap this inside a setTimeout to avoid timing issue since the gridOptions needs to be ready before running this onInit\n      setTimeout(async () => {\n        // keep start time & end timestamps & return it after process execution\n        const startTime = new Date();\n\n        if (backendApi.preProcess) {\n          backendApi.preProcess();\n        }\n\n        // the process could be an Observable (like HttpClient) or a Promise\n        // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n        const processResult: GraphqlResult | any = await castToPromise(observableOrPromise);\n        const endTime = new Date();\n\n        // define what our internal Post Process callback, only available for GraphQL Service for now\n        // it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n        if (processResult && backendApi && backendApi.service instanceof GraphqlService && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          const datasetName = (backendApi && backendApi.service && typeof backendApi.service.getDatasetName === 'function') ? backendApi.service.getDatasetName() : '';\n          if (processResult instanceof Object) {\n            processResult.statistics = {\n              startTime,\n              endTime,\n              executionTime: endTime.valueOf() - startTime.valueOf(),\n              totalItemCount: this.gridOptions && this.gridOptions.pagination && this.gridOptions.pagination.totalItems\n            };\n          }\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  attachResizeHook(grid: any, options: GridOption) {\n    // expand/autofit columns on first page load\n    if (grid && options.autoFitColumnsOnFirstLoad) {\n      grid.autosizeColumns();\n    }\n\n    // auto-resize grid on browser resize\n    this.resizer.init(grid);\n    if (options.enableAutoResize) {\n      this.resizer.attachAutoResizeDataGrid({ height: this.gridHeight, width: this.gridWidth });\n      if (grid && options.autoFitColumnsOnFirstLoad) {\n        grid.autosizeColumns();\n      }\n    }\n  }\n\n  executeAfterDataviewCreated(grid: any, gridOptions: GridOption, dataView: any) {\n    // if user entered some Sort \"presets\", we need to reflect them all in the DOM\n    if (gridOptions.enableSorting) {\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n        this.sortService.loadLocalPresets(grid, dataView);\n      }\n    }\n  }\n\n  mergeGridOptions(gridOptions): GridOption {\n    gridOptions.gridId = this.gridId;\n    gridOptions.gridContainerId = `slickGridContainer-${this.gridId}`;\n    if (gridOptions.enableFiltering || this.forRootConfig.enableFiltering) {\n      gridOptions.showHeaderRow = true;\n    }\n    // use jquery extend to deep merge and avoid immutable properties changed in GlobalGridOptions after route change\n    return $.extend(true, {}, GlobalGridOptions, this.forRootConfig, gridOptions);\n  }\n\n  /**\n   * On a Pagination changed, we will trigger a Grid State changed with the new pagination info\n   * Also if we use Row Selection, we need to reset them to nothing selected\n   */\n  paginationChanged(pagination: Pagination) {\n    if (this.gridOptions.enableRowSelection) {\n      this.gridService.setSelectedRows([]);\n    }\n\n    this.gridStateService.onGridStateChanged.next({\n      change: { newValues: pagination, type: GridStateType.pagination },\n      gridState: this.gridStateService.getCurrentGridState()\n    });\n  }\n\n  /**\n   * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well\n   * @param dataset\n   */\n  refreshGridData(dataset: any[], totalCount?: number) {\n    if (dataset && this.grid && this._dataView && typeof this._dataView.setItems === 'function') {\n      this._dataView.setItems(dataset, this.gridOptions.datasetIdPropertyName);\n      if (!this.gridOptions.backendServiceApi) {\n        this._dataView.reSort();\n      }\n\n      // this.grid.setData(dataset);\n      this.grid.invalidate();\n      this.grid.render();\n\n      if (this.gridOptions.enablePagination || this.gridOptions.backendServiceApi) {\n        // do we want to show pagination?\n        // if we have a backendServiceApi and the enablePagination is undefined, we'll assume that we do want to see it, else get that defined value\n        this.showPagination = ((this.gridOptions.backendServiceApi && this.gridOptions.enablePagination === undefined) ? true : this.gridOptions.enablePagination) || false;\n\n        // before merging the grid options, make sure that it has the totalItems count\n        // once we have that, we can merge and pass all these options to the pagination component\n        if (!this.gridOptions.pagination) {\n          this.gridOptions.pagination = (this.gridOptions.pagination) ? this.gridOptions.pagination : undefined;\n        }\n        if (this.gridOptions.pagination && totalCount) {\n          this.gridOptions.pagination.totalItems = totalCount;\n        }\n        if (this.gridOptions.presets && this.gridOptions.presets.pagination && this.gridOptions.pagination) {\n          this.gridOptions.pagination.pageSize = this.gridOptions.presets.pagination.pageSize;\n          this.gridOptions.pagination.pageNumber = this.gridOptions.presets.pagination.pageNumber;\n        }\n        this.gridPaginationOptions = this.mergeGridOptions(this.gridOptions);\n      }\n\n      // resize the grid inside a slight timeout, in case other DOM element changed prior to the resize (like a filter/pagination changed)\n      if (this.grid &&  this.gridOptions.enableAutoResize) {\n        this.resizer.resizeGrid(10, { height: this.gridHeight, width: this.gridWidth });\n      }\n    }\n  }\n\n  /**\n   * Dynamically change or update the column definitions list.\n   * We will re-render the grid so that the new header and data shows up correctly.\n   * If using i18n, we also need to trigger a re-translate of the column headers\n   */\n  updateColumnDefinitionsList(newColumnDefinitions) {\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders(false, newColumnDefinitions);\n    } else {\n      this.controlAndPluginService.renderColumnHeaders(newColumnDefinitions);\n    }\n    this.grid.autosizeColumns();\n  }\n\n  /** Toggle the filter row displayed on first row\n   * @param isShowing\n   */\n  showHeaderRow(isShowing: boolean) {\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  /** Toggle the filter row displayed on first row */\n  toggleHeaderRow() {\n    const isShowing = !this.grid.getOptions().showHeaderRow;\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  private dispatchCustomEvent(eventName: string, data?: any, isBubbling: boolean = true, isCancelable: boolean = true) {\n    const eventInit: CustomEventInit = { bubbles: isBubbling, cancelable: isCancelable };\n    if (data) {\n      eventInit.detail = data;\n    }\n    return this.elm.nativeElement.dispatchEvent(new CustomEvent(eventName, eventInit));\n  }\n}\n",
    "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AngularSlickgridComponent } from './../components/angular-slickgrid.component';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport { FilterFactory } from '../filters/filterFactory';\r\nimport { GraphqlService } from './../services/graphql.service';\r\nimport { GridOdataService } from './../services/grid-odata.service';\r\nimport { GridOption } from './../models/gridOption.interface';\r\nimport { SlickPaginationComponent } from './../components/slick-pagination.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TranslateModule\r\n  ],\r\n  declarations: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  exports: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  entryComponents: [AngularSlickgridComponent]\r\n})\r\nexport class AngularSlickgridModule {\r\n  static forRoot(config: GridOption = {}) {\r\n    return {\r\n      ngModule: AngularSlickgridModule,\r\n      providers: [\r\n        { provide: 'config', useValue: config },\r\n        CollectionService,\r\n        FilterFactory,\r\n        GraphqlService,\r\n        GridOdataService\r\n      ]\r\n    };\r\n  }\r\n}\r\n"
  ],
  "names": [
    "__awaiter",
    "thisArg",
    "_arguments",
    "P",
    "generator",
    "Promise",
    "resolve",
    "reject",
    "fulfilled",
    "value",
    "step",
    "next",
    "e",
    "rejected",
    "result",
    "done",
    "then",
    "apply",
    "__generator",
    "body",
    "f",
    "y",
    "t",
    "g",
    "_",
    "label",
    "sent",
    "trys",
    "ops",
    "verb",
    "throw",
    "return",
    "Symbol",
    "iterator",
    "this",
    "n",
    "v",
    "op",
    "TypeError",
    "call",
    "pop",
    "length",
    "push",
    "__values",
    "o",
    "m",
    "i",
    "__read",
    "r",
    "ar",
    "error",
    "__spread",
    "arguments",
    "concat",
    "colon",
    "comma",
    "equalSign",
    "pipe",
    "semicolon",
    "space",
    "tab",
    "doubleColon",
    "doublePipe",
    "doubleSemicolon",
    "csv",
    "doc",
    "docx",
    "pdf",
    "txt",
    "xls",
    "xlsx",
    "columns",
    "filter",
    "pagination",
    "sorter",
    "empty",
    "contains",
    "lessThan",
    "lessThanOrEqual",
    "greaterThan",
    "greaterThanOrEqual",
    "notEqual",
    "equal",
    "endsWith",
    "startsWith",
    "in",
    "notIn",
    "inContains",
    "notInContains",
    "asc",
    "ASC",
    "desc",
    "DESC",
    "moment",
    "moment_",
    "addWhiteSpaces",
    "nbSpaces",
    "htmlEntityDecode",
    "input",
    "replace",
    "match",
    "dec",
    "String",
    "fromCharCode",
    "arraysEqual",
    "a",
    "b",
    "orderMatters",
    "sort",
    "castToPromise",
    "fromServiceName",
    "promise",
    "Observable",
    "first",
    "toPromise",
    "take",
    "Error",
    "findOrDefault",
    "array",
    "logic",
    "defaultVal",
    "find",
    "decimalFormatted",
    "minDecimal",
    "maxDecimal",
    "isNaN",
    "minDec",
    "undefined",
    "maxDec",
    "amount",
    "Math",
    "round",
    "pow",
    "indexOf",
    "mapMomentDateFormatWithFieldType",
    "fieldType",
    "map",
    "FieldType",
    "dateTime",
    "dateTimeIso",
    "dateTimeIsoAmPm",
    "dateTimeIsoAM_PM",
    "dateUs",
    "dateUsShort",
    "dateTimeUs",
    "dateTimeUsAmPm",
    "dateTimeUsAM_PM",
    "dateTimeUsShort",
    "dateTimeUsShortAmPm",
    "dateUtc",
    "date",
    "dateIso",
    "mapFlatpickrDateFormatWithFieldType",
    "mapOperatorType",
    "operator",
    "OperatorType",
    "mapOperatorByFieldType",
    "string",
    "unknown",
    "float",
    "number",
    "dateTimeUsShortAM_PM",
    "parseUtcDate",
    "inputDateString",
    "useUtc",
    "test",
    "dateString",
    "decodeURIComponent",
    "dateMoment",
    "Date",
    "isValid",
    "year",
    "toString",
    "utc",
    "format",
    "sanitizeHtmlToText",
    "htmlString",
    "temp",
    "document",
    "createElement",
    "innerHTML",
    "textContent",
    "innerText",
    "titleCase",
    "charAt",
    "toUpperCase",
    "slice",
    "toCamelCase",
    "str",
    "offset",
    "toLowerCase",
    "compareDates",
    "value1",
    "value2",
    "sortDirection",
    "strict",
    "diff",
    "date1",
    "date2",
    "parseInt",
    "FORMAT",
    "dateUsShortSorter",
    "dateSorter",
    "ISO_8601",
    "dateIsoSorter",
    "dateUsSorter",
    "numericSorter",
    "x",
    "parseFloat",
    "stringSorter",
    "position",
    "Sorters",
    "numeric",
    "sortByFieldType",
    "sortResult",
    "CollectionService",
    "translate",
    "prototype",
    "filterCollection",
    "collection",
    "filterBy",
    "filteredCollection",
    "property_1",
    "property",
    "value_1",
    "item",
    "sortCollection",
    "sortBy",
    "enableTranslateLabel",
    "_this",
    "sortedCollection",
    "property_2",
    "sortDirection_1",
    "hasOwnProperty",
    "sortDesc",
    "fieldType_1",
    "dataRow1",
    "dataRow2",
    "instant",
    "parseBoolean",
    "type",
    "Injectable",
    "TranslateService",
    "booleanFilterCondition",
    "options",
    "searchTerm",
    "Array",
    "isArray",
    "searchTerms",
    "cellValue",
    "testFilterCondition",
    "includes",
    "findIndex",
    "val",
    "dateFilterCondition",
    "searchDateFormat",
    "filterSearchType",
    "dateCell",
    "dateSearch",
    "dateIsoFilterCondition",
    "dateUsFilterCondition",
    "dateUsShortFilterCondition",
    "dateUtcFilterCondition",
    "collectionSearchFilterCondition",
    "numberFilterCondition",
    "stringFilterCondition",
    "cellValueLastChar",
    "executeMappedCondition",
    "boolean",
    "FilterConditions",
    "booleanFilter",
    "collectionSearchFilter",
    "dateFilter",
    "dateIsoFilter",
    "dateUtcFilter",
    "dateUsFilter",
    "dateUsShortFilter",
    "numberFilter",
    "stringFilter",
    "testFilter",
    "require",
    "CompoundDateFilter",
    "_clearFilterTriggered",
    "Object",
    "defineProperty",
    "get",
    "grid",
    "getOptions",
    "_operator",
    "set",
    "init",
    "args",
    "callback",
    "columnDef",
    "$filterElm",
    "createDomElement",
    "$filterInputElm",
    "keyup",
    "onTriggerEvent",
    "$selectOperatorElm",
    "change",
    "clear",
    "flatInstance",
    "destroy",
    "off",
    "remove",
    "setValues",
    "values",
    "setDate",
    "buildDatePickerInput",
    "inputFormat",
    "outputFormat",
    "outputType",
    "currentLocale",
    "currentLang",
    "substring",
    "pickerOptions",
    "defaultDate",
    "altInput",
    "altFormat",
    "dateFormat",
    "wrap",
    "closeOnSelect",
    "locale",
    "loadFlatpickrLocale",
    "onChange",
    "selectedDates",
    "dateStr",
    "instance",
    "_currentValue",
    "enableTime",
    "CustomEvent",
    "placeholder",
    "gridOptions",
    "defaultFilterPlaceholder",
    "$",
    "flatpickr",
    "buildSelectOperatorHtmlString",
    "optionValues",
    "getOptionValues",
    "optionValueString",
    "forEach",
    "option",
    "description",
    "$headerElm",
    "getHeaderRowColumn",
    "id",
    "$filterContainerElm",
    "$containerInputGroup",
    "$operatorInputGroupAddon",
    "append",
    "attr",
    "data",
    "addClass",
    "appendTo",
    "localeDefault",
    "default",
    "clearFilterTriggered",
    "selectedOperator",
    "text",
    "removeClass",
    "hide",
    "close",
    "show",
    "open",
    "CompoundInputFilter",
    "buildInputHtmlString",
    "CompoundSliderFilter",
    "params",
    "_elementRangeInputId",
    "field",
    "_elementRangeOutputId",
    "filterParams",
    "hideSliderNumber",
    "on",
    "target",
    "getElementById",
    "clearedValue",
    "sliderStartValue",
    "$containerInputGroupElm",
    "children",
    "last",
    "html",
    "buildTemplateHtmlString",
    "minValue",
    "filterProperties",
    "maxValue",
    "defaultValue",
    "valueStep",
    "buildTemplateSliderTextHtmlString",
    "searchTermInput",
    "$sliderTextInputAppendAddon",
    "InputFilter",
    "filterTemplate",
    "trigger",
    "MultipleSelectFilter",
    "collectionService",
    "isFilled",
    "defaultOptions",
    "container",
    "maxHeight",
    "okButton",
    "addTitle",
    "countSelected",
    "allSelected",
    "selectAllText",
    "selectAllDelimiter",
    "onClose",
    "selectedItems",
    "multipleSelect",
    "siblings",
    "labelName",
    "customStructure",
    "valueName",
    "newCollection",
    "collectionFilterBy",
    "collectionSortBy",
    "optionCollection",
    "labelKey",
    "selected",
    "findValueInSearchTerms",
    "textLabel",
    "assign",
    "filterOptions",
    "SelectFilter",
    "SingleSelectFilter",
    "single",
    "selectedItem",
    "SliderFilter",
    "Filters",
    "compoundDate",
    "compoundInput",
    "compoundSlider",
    "slider",
    "singleSelect",
    "select",
    "GlobalGridOptions",
    "alwaysShowVerticalScroll",
    "autoEdit",
    "asyncEditorLoading",
    "autoFitColumnsOnFirstLoad",
    "autoResize",
    "bottomPadding",
    "minHeight",
    "minWidth",
    "sidePadding",
    "cellHighlightCssClass",
    "checkboxSelector",
    "cssClass",
    "columnPicker",
    "hideForceFitButton",
    "hideSyncResizeButton",
    "datasetIdPropertyName",
    "defaultFilter",
    "editable",
    "enableAutoResize",
    "enableCellNavigation",
    "enableColumnPicker",
    "enableColumnReorder",
    "enableExport",
    "enableGridMenu",
    "enableHeaderMenu",
    "enableMouseHoverHighlightRow",
    "enableSorting",
    "enableTextSelectionOnCells",
    "explicitInitialization",
    "exportOptions",
    "delimiter",
    "DelimiterType",
    "exportWithFormatter",
    "filename",
    "FileType",
    "groupingAggregatorRowText",
    "sanitizeDataExport",
    "useUtf8WithBom",
    "forceFitColumns",
    "gridMenu",
    "hideClearAllFiltersCommand",
    "hideClearAllSortingCommand",
    "hideExportCsvCommand",
    "hideExportTextDelimitedCommand",
    "hideRefreshDatasetCommand",
    "hideToggleFilterCommand",
    "iconCssClass",
    "iconClearAllFiltersCommand",
    "iconClearAllSortingCommand",
    "iconExportCsvCommand",
    "iconExportTextDelimitedCommand",
    "iconRefreshDatasetCommand",
    "iconToggleFilterCommand",
    "menuWidth",
    "resizeOnShowHeaderRow",
    "headerMenu",
    "autoAlign",
    "autoAlignOffset",
    "iconSortAscCommand",
    "iconSortDescCommand",
    "iconColumnHideCommand",
    "hideColumnHideCommand",
    "hideSortCommands",
    "headerRowHeight",
    "multiColumnSort",
    "numberedMultiColumnSort",
    "tristateMultiColumnSort",
    "sortColNumberInSeparateSpan",
    "suppressActiveCellChangeOnEdit",
    "pageSizes",
    "pageSize",
    "totalItems",
    "rowHeight",
    "showHeaderRow",
    "topPanelHeight",
    "SlickgridConfig",
    "FilterFactory",
    "config",
    "_options",
    "createFilter",
    "columnFilter",
    "model",
    "FilterService",
    "filterFactory",
    "_eventHandler",
    "Slick",
    "EventHandler",
    "_filters",
    "_columnFilters",
    "onFilterChanged",
    "Subject",
    "onFilterCleared",
    "_grid",
    "getColumns",
    "attachBackendOnFilter",
    "_slickSubscriber",
    "Event",
    "subscribe",
    "attachBackendOnFilterSubscribe",
    "bind",
    "onHeaderRowCellRendered",
    "addFilterTemplateToHeaderRow",
    "event",
    "backendApi",
    "_gridOptions",
    "backendServiceApi",
    "process",
    "service",
    "startTime",
    "preProcess",
    "processOnFilterChanged",
    "query",
    "_a",
    "emitFilterChanged",
    "processResult",
    "endTime",
    "internalPostProcess",
    "postProcess",
    "statistics",
    "executionTime",
    "valueOf",
    "totalItemCount",
    "attachLocalOnFilter",
    "dataView",
    "_dataView",
    "setFilterArgs",
    "columnFilters",
    "setFilter",
    "customLocalFilter",
    "columnId",
    "refresh",
    "clearFilters",
    "invalidate",
    "render",
    "tslib_1.__values",
    "keys",
    "_b",
    "columnIndex",
    "getColumnIndex",
    "queryField",
    "queryFieldFilter",
    "searchValues",
    "fieldSearchValue",
    "matches",
    "lastValueChar",
    "join",
    "k",
    "ln",
    "useFormatterOuputToFilter",
    "rowIndex",
    "getIdxById",
    "formatter",
    "dispose",
    "disposeColumnFilters",
    "unsubscribeAll",
    "unsubscribe",
    "index",
    "getColumnFilters",
    "getCurrentLocalFilters",
    "currentFilters",
    "colId",
    "callbackSearchEvent",
    "hasSearchTerms",
    "termsCount",
    "colFilter",
    "triggerEvent",
    "serviceOptions",
    "_onFilterChangedOptions",
    "column",
    "filterable",
    "filter_1",
    "updateColumnFilters",
    "filterArguments",
    "filterExistIndex",
    "filt",
    "name",
    "sender",
    "backendService",
    "getCurrentFilters",
    "populateColumnFilterSearchTerms",
    "presets",
    "filters",
    "filters_1",
    "_columnDefinitions",
    "columnPreset",
    "presetFilter",
    "slickEvent",
    "isPropagationStopped",
    "extend",
    "EventData",
    "notify",
    "ExportService",
    "_lineCarriageReturn",
    "_hasGroupedItems",
    "onGridBeforeExportToFile",
    "onGridAfterExportToFile",
    "exportToFile",
    "_exportOptions",
    "dataOutput",
    "getDataOutput",
    "setTimeout",
    "downloadOptions",
    "csvContent",
    "startDownloadFile",
    "groupByColumnHeader",
    "groupingColumnHeaderTitle",
    "_exportQuoteWrapper",
    "outputDataString",
    "grouping",
    "getGrouping",
    "_columnHeaders",
    "getColumnHeaders",
    "header",
    "title",
    "getAllGridRowData",
    "lineCarriageReturn",
    "lineCount",
    "getLength",
    "rowNumber",
    "itemObj",
    "getItem",
    "readRegularRowData",
    "__groupTotals",
    "readGroupedTitleRow",
    "readGroupedTotalRow",
    "columnHeaders",
    "fieldName",
    "headerKey",
    "skippedField",
    "excludeFromExport",
    "width",
    "key",
    "row",
    "idx",
    "rowOutputString",
    "exportQuoteWrapper",
    "col",
    "fieldId",
    "isEvaluatingFormatter",
    "exportCustomFormatter",
    "itemData",
    "exportCsvForceToKeepAsString",
    "groupName",
    "level",
    "output",
    "groupTotalsFormatter",
    "navigator",
    "appName",
    "outputData",
    "mimeType",
    "TextEncoder",
    "encode",
    "blob",
    "Blob",
    "msSaveOrOpenBlob",
    "link",
    "csvUrl",
    "URL",
    "createObjectURL",
    "href",
    "setAttribute",
    "style",
    "visibility",
    "appendChild",
    "click",
    "removeChild",
    "SortService",
    "_currentLocalSorters",
    "_isBackendGrid",
    "onSortChanged",
    "onSortCleared",
    "attachBackendOnSort",
    "onSort",
    "onBackendSortChanged",
    "processOnSortChanged",
    "emitSortChanged",
    "attachLocalOnSort",
    "sortColumns",
    "sortCols",
    "sortAsc",
    "sortCol",
    "sortColumn",
    "direction",
    "SortDirection",
    "onLocalSortChanged",
    "clearSorting",
    "setSortColumns",
    "getCurrentLocalSorters",
    "getPreviousColumnSorts",
    "getSortColumns",
    "reduce",
    "cols",
    "loadLocalPresets",
    "sorters",
    "presetSorting",
    "gridColumn",
    "l",
    "columnSortObj",
    "SortDirectionNumber",
    "sortField",
    "neutral",
    "currentSorters",
    "getCurrentSorters",
    "Constants",
    "TEXT_CANCEL",
    "TEXT_CLEAR_ALL_FILTERS",
    "TEXT_CLEAR_ALL_SORTING",
    "TEXT_COLUMNS",
    "TEXT_COMMANDS",
    "TEXT_EXPORT_IN_CSV_FORMAT",
    "TEXT_EXPORT_IN_TEXT_FORMAT",
    "TEXT_FORCE_FIT_COLUMNS",
    "TEXT_HIDE_COLUMN",
    "TEXT_REFRESH_DATASET",
    "TEXT_SAVE",
    "TEXT_SYNCHRONOUS_RESIZE",
    "TEXT_SORT_ASCENDING",
    "TEXT_SORT_DESCENDING",
    "TEXT_TOGGLE_FILTER_ROW",
    "VALIDATION_EDITOR_VALID_NUMBER",
    "VALIDATION_EDITOR_VALID_INTEGER",
    "VALIDATION_EDITOR_NUMBER_BETWEEN",
    "VALIDATION_EDITOR_DECIMAL_BETWEEN",
    "ControlAndPluginService",
    "exportService",
    "filterService",
    "sortService",
    "areVisibleColumnDifferent",
    "extensionList",
    "getAllColumns",
    "allColumns",
    "getVisibleColumns",
    "visibleColumns",
    "getAllExtensions",
    "getExtensionByName",
    "p",
    "autoResizeColumns",
    "autosizeColumns",
    "attachDifferentControlOrPlugins",
    "groupItemMetadataProvider",
    "enableTranslate",
    "translateItems",
    "columnPickerControl",
    "createColumnPicker",
    "userOriginalGridMenu",
    "gridMenuControl",
    "createGridMenu",
    "enableAutoTooltip",
    "autoTooltipPlugin",
    "AutoTooltips",
    "autoTooltipOptions",
    "registerPlugin",
    "enableGrouping",
    "groupItemMetaProviderPlugin",
    "enableCheckboxSelector",
    "checkboxSelectorPlugin",
    "rowSelectionPlugin",
    "getSelectionModel",
    "RowSelectionModel",
    "rowSelectionOptions",
    "setSelectionModel",
    "preselectedRows",
    "selectRows",
    "enableRowSelection",
    "enableHeaderButton",
    "headerButtonsPlugin",
    "Plugins",
    "HeaderButtons",
    "headerButton",
    "onCommand",
    "headerMenuPlugin",
    "createHeaderMenu",
    "enableExcelCopyBuffer",
    "createUndoRedoBuffer",
    "hookUndoShortcutKey",
    "createCellExternalCopyManagerPlugin",
    "registerPlugins",
    "plugin",
    "createCheckboxPluginBeforeGridCreation",
    "columnDefinitions",
    "CheckboxSelectColumn",
    "selectionColumn",
    "getColumnDefinition",
    "excludeFromQuery",
    "excludeFromHeaderMenu",
    "unshift",
    "newRowIds",
    "pluginOptions",
    "clipboardCommandHandler",
    "editCommand",
    "undoRedoBuffer",
    "queueAndExecuteCommand",
    "dataItemColumnValueExtractor",
    "editor",
    "formattedOutput",
    "readOnlyMode",
    "includeHeaderWhenCopying",
    "newRowCreator",
    "count",
    "getData",
    "addItem",
    "CellSelectionModel",
    "cellExternalCopyManagerPlugin",
    "CellExternalCopyManager",
    "columnTitle",
    "getPickerTitleOutputString",
    "forceFitTitle",
    "syncResizeTitle",
    "Controls",
    "ColumnPicker",
    "onColumnsChanged",
    "getDefaultGridMenuOptions",
    "customItems",
    "addGridMenuCustomCommands",
    "sortItems",
    "GridMenu",
    "onBeforeMenuShow",
    "executeGridMenuInternalCustomCommands",
    "onMenuClose",
    "gridUid",
    "getUID",
    "getDefaultHeaderMenuOptions",
    "addHeaderMenuCustomCommands",
    "HeaderMenu",
    "executeHeaderMenuInternalCommands",
    "commandQueue",
    "commandCtr",
    "execute",
    "undo",
    "command",
    "GlobalEditorLock",
    "cancelCurrentEdit",
    "redo",
    "hideColumn",
    "removeColumnByIndex",
    "setColumns",
    "keydown",
    "which",
    "ctrlKey",
    "metaKey",
    "shiftKey",
    "gridMenuCustomItems",
    "enableFiltering",
    "disabled",
    "positionOrder",
    "customTitle",
    "headerMenuOptions",
    "menu",
    "items",
    "columnHeaderMenuItems",
    "sortable",
    "itemA",
    "itemB",
    "newSortColumns",
    "setHeaderRowVisibility",
    "setTopPanelVisibility",
    "showTopPanel",
    "refreshBackendDataset",
    "buildQuery",
    "startTime_1",
    "el",
    "translateColumnPicker",
    "emptyColumnPickerTitles",
    "translateGridMenu",
    "emptyGridMenuTitles",
    "translateHeaderMenu",
    "resetHeaderMenuTranslations",
    "translateColumnHeaders",
    "newColumnDefinitions",
    "use",
    "renderColumnHeaders",
    "propName",
    "pickerName",
    "picker",
    "titleKey",
    "columnHeaderMenuItems_1",
    "propertyName",
    "inputKey",
    "outputKey",
    "items_1",
    "items_1_1",
    "timer",
    "GraphqlQueryBuilder",
    "queryFnName",
    "aliasOrFilter",
    "head",
    "alias",
    "prop",
    "getGraphQLValue",
    "searches",
    "_i",
    "searchKeys",
    "parceFind",
    "setAlias",
    "ReferenceError",
    "_levelA",
    "currentValue",
    "itemX",
    "RangeError",
    "propsAA",
    "JSON",
    "stringify",
    "propS",
    "objectToString",
    "obj",
    "sourceA",
    "DEFAULT_ITEMS_PER_PAGE",
    "GraphqlService",
    "defaultOrderBy",
    "defaultPaginationOptions",
    "datasetName",
    "queryQb",
    "QueryBuilder",
    "datasetQb",
    "dataQb",
    "columnIds",
    "columnDefinitions_1",
    "columnDefinitions_1_1",
    "fields",
    "buildFilterQuery",
    "isWithCursor",
    "pageInfoQb",
    "node",
    "datasetFilters",
    "paginationOptions",
    "sortingOptions",
    "orderBy",
    "filteringOptions",
    "addLocaleIntoQuery",
    "i18n",
    "extraQueryArguments",
    "_c",
    "queryArgument",
    "trimDoubleQuotesOnEnumField",
    "keepArgumentFieldDoubleQuotes",
    "inputArray",
    "shift",
    "split",
    "getInitPaginationOptions",
    "getDatasetName",
    "_currentFilters",
    "getCurrentPagination",
    "_currentPagination",
    "_currentSorters",
    "resetPaginationOptions",
    "after",
    "before",
    "pageNumber",
    "updateOptions",
    "debounceTypingDelay",
    "filterTypingDebounce",
    "castFilterToColumnFilter",
    "clearTimeout",
    "updateFilters",
    "processOnPaginationChanged",
    "updatePagination",
    "newPage",
    "updateSorters",
    "isUpdatedByPreset",
    "searchValue",
    "searchByArray",
    "_loop_1",
    "columnFilter_1",
    "this_1",
    "presetSorters",
    "graphqlSorters",
    "tmpSorterArray",
    "queryFieldSorter",
    "sortColumns_1",
    "sortColumns_1_1",
    "inputStr",
    "enumSearchWords",
    "patternWordInQuotes",
    "patternRegex",
    "reg",
    "RegExp",
    "group1",
    "group2",
    "group3",
    "removeDoubleQuotes",
    "tmpFilter",
    "padZero",
    "s",
    "trim",
    "allTitleCase",
    "outputStr",
    "substr",
    "OdataService",
    "_odataOptions",
    "filterQueue",
    "_defaultSortBy",
    "queryTmpArray",
    "top",
    "skip",
    "argument",
    "filterStr",
    "filterBySeparator",
    "saveColumnFilter",
    "updateFilterFromListTerms",
    "getFilterByColumn",
    "columnName",
    "getFilterCount",
    "removeColumnFilter",
    "search",
    "filterOptionObject",
    "updateFilterFromTerm",
    "searchBy",
    "tmpSearchByArray",
    "fieldSearchTerms",
    "tmpSearchTerms",
    "j",
    "lnj",
    "lnk",
    "caseType",
    "CaseType",
    "pascalCase",
    "GridOdataService",
    "odataService",
    "mergedOptions",
    "terms",
    "_loop_2",
    "columnFilter_2",
    "this_2",
    "bypassOdataQuery",
    "bypassBackendQuery",
    "encodeURIComponent",
    "dateFormatted",
    "mapOdataOperator",
    "sortByArray",
    "sorterArray",
    "sortColumns_2",
    "sortColumns_2_1",
    "columnFieldName",
    "csvString",
    "GridEventService",
    "attachOnCellChange",
    "onCellChange",
    "cell",
    "getDataItem",
    "returnedArgs",
    "gridDefinition",
    "dataContext",
    "attachOnClick",
    "onClick",
    "onCellClick",
    "GridStateService",
    "_columns",
    "_currentColumns",
    "subscriptions",
    "onGridStateChanged",
    "controlAndPluginService",
    "subscribeToAllGridChanges",
    "subscription",
    "getCurrentGridState",
    "gridState",
    "getCurrentColumns",
    "currentPagination",
    "getAssociatedCurrentColumns",
    "gridColumns",
    "currentColumns",
    "headerCssClass",
    "getAssociatedGridColumns",
    "currentColumn",
    "c",
    "hookExtensionEventToGridStateChange",
    "extensionName",
    "eventName",
    "extension",
    "newValues",
    "GridStateType",
    "hookSlickGridEventToGridStateChange",
    "resetColumns",
    "GridService",
    "gridStateService",
    "getColumnFromEventArguments",
    "getDataItemByRowNumber",
    "getItemRowMetadata",
    "previousItemMetadata",
    "meta",
    "cssClasses",
    "isEmptyObject",
    "_dirty",
    "rowClass",
    "highlightRow",
    "fadeDelay",
    "setSelectedRows",
    "getItemMetadata",
    "updateItem",
    "gridId",
    "getDataItemByRowIndex",
    "getDataItemByRowIndexes",
    "indexes",
    "dataItems",
    "getSelectedRows",
    "getSelectedRowsDataItem",
    "selectedRowIndexes",
    "setSelectedRow",
    "rowIndexes",
    "renderGrid",
    "resetGrid",
    "originalColumns",
    "addItemToDatagrid",
    "shouldHighlightRow",
    "insertItem",
    "scrollRowIntoView",
    "addItemsToDatagrid",
    "deleteDataGridItem",
    "itemId",
    "deleteDataGridItemById",
    "getRowById",
    "deleteItem",
    "updateDataGridItem",
    "updateDataGridItemById",
    "GroupingAndColspanService",
    "createPreHeaderPanel",
    "createPreHeaderRowGroupingTitle",
    "onColumnsResized",
    "onRowCountChanged",
    "$preHeaderPanel",
    "getPreHeaderPanel",
    "css",
    "getHeadersWidth",
    "parent",
    "headerColumnWidthDiff",
    "getHeaderColumnWidthDiff",
    "lastColumnGroup",
    "widthTotal",
    "columnGroup",
    "ResizerService",
    "onGridBeforeResize",
    "attachAutoResizeDataGrid",
    "newSizes",
    "gridDomElm",
    "resizeGrid",
    "window",
    "_gridUid",
    "calculateGridNewDimensions",
    "containerElm",
    "containerId",
    "gridContainerId",
    "windowElm",
    "enablePagination",
    "gridHeight",
    "height",
    "coordOffsetTop",
    "availableHeight",
    "availableWidth",
    "newHeight",
    "newWidth",
    "getLastResizeDimensions",
    "_lastDimensions",
    "delay",
    "availableDimensions",
    "gridElm",
    "gridContainerElm",
    "exec",
    "userAgent",
    "resizeCanvas",
    "heightWithPagination",
    "AvgAggregator",
    "_field",
    "_count",
    "_nonNullCount",
    "_sum",
    "accumulate",
    "storeResult",
    "groupTotals",
    "avg",
    "MinAggregator",
    "_min",
    "min",
    "MaxAggregator",
    "_max",
    "max",
    "SumAggregator",
    "sum",
    "Aggregators",
    "Avg",
    "Min",
    "Max",
    "Sum",
    "CheckboxEditor",
    "internalColumnEditor",
    "columnEditor",
    "validator",
    "$input",
    "focus",
    "loadValue",
    "preClick",
    "serializeValue",
    "applyValue",
    "state",
    "isValueChanged",
    "validate",
    "validationResults",
    "valid",
    "msg",
    "DateEditor",
    "getCurrentLocale",
    "save",
    "commitChanges",
    "getColumnEditor",
    "domValue",
    "toDate",
    "FloatEditor",
    "getInputDecimalSteps",
    "keyCode",
    "KeyCode",
    "LEFT",
    "RIGHT",
    "stopImmediatePropagation",
    "getDecimalPlaces",
    "rtn",
    "decimalPlaces",
    "decimals",
    "zeroString",
    "decPlaces",
    "toFixed",
    "elmValue",
    "errorMsg",
    "errorMessage",
    "mapValidation",
    "{{minValue}}",
    "{{maxValue}}",
    "{{minDecimal}}",
    "{{maxDecimal}}",
    "matched",
    "IntegerEditor",
    "LongTextEditor",
    "_translate",
    "cancelText",
    "saveText",
    "$container",
    "$wrapper",
    "cancel",
    "handleKeyDown",
    "ENTER",
    "ESCAPE",
    "preventDefault",
    "TAB",
    "navigatePrev",
    "navigateNext",
    "cancelChanges",
    "left",
    "MultipleSelectEditor",
    "offsetLeft",
    "onOpen",
    "autoAdjustDropPosition",
    "$editorElm",
    "editorElmOptions",
    "editorTemplate",
    "each",
    "$e",
    "currentValues",
    "multipleSelectDomElement",
    "multipleSelectOptions",
    "windowHeight",
    "innerHeight",
    "pageScroll",
    "scrollTop",
    "$msDrop",
    "msDropHeight",
    "msDropOffsetTop",
    "newOffsetTop",
    "elementOptions",
    "SingleSelectEditor",
    "SliderEditor",
    "$sliderNumber",
    "editorParams",
    "TextEditor",
    "getValue",
    "setValue",
    "Editors",
    "checkbox",
    "integer",
    "longText",
    "arrayToCsvFormatter",
    "boldFormatter",
    "checkboxFormatter",
    "checkmarkFormatter",
    "collectionFormatter",
    "collectionEditorFormatter",
    "complexObjectFormatter",
    "dateIsoFormatter",
    "isDateValid",
    "dateTimeIsoFormatter",
    "dateTimeIsoAmPmFormatter",
    "dateTimeUsAmPmFormatter",
    "dateTimeUsFormatter",
    "dateUsFormatter",
    "decimalFormatter",
    "minDecimalPlaces",
    "maxDecimalPlaces",
    "deleteIconFormatter",
    "dollarColoredBoldFormatter",
    "isNumber",
    "outputValue",
    "dollarColoredFormatter",
    "dollarFormatter",
    "editIconFormatter",
    "hyperlinkFormatter",
    "matchUrl",
    "hyperlinkUriPrefixFormatter",
    "uriPrefix",
    "infoIconFormatter",
    "lowercaseFormatter",
    "maskFormatter",
    "mask",
    "i_1",
    "v_1",
    "multipleFormatter",
    "formatters",
    "formatters_1",
    "formatters_1_1",
    "percentFormatter",
    "percentCompleteBarFormatter",
    "percentCompleteFormatter",
    "percentSymbolFormatter",
    "progressBarFormatter",
    "color",
    "translateFormatter",
    "translateBooleanFormatter",
    "uppercaseFormatter",
    "yesNoFormatter",
    "Formatters",
    "arrayToCsv",
    "bold",
    "checkmark",
    "complexObject",
    "collectionEditor",
    "deleteIcon",
    "decimal",
    "dollar",
    "dollarColored",
    "dollarColoredBold",
    "editIcon",
    "hyperlink",
    "hyperlinkUriPrefix",
    "infoIcon",
    "lowercase",
    "multiple",
    "percent",
    "percentComplete",
    "percentCompleteBar",
    "percentSymbol",
    "progressBar",
    "translateBoolean",
    "uppercase",
    "yesNo",
    "avgTotalsPercentageFormatter",
    "totals",
    "prefix",
    "groupFormatterPrefix",
    "suffix",
    "groupFormatterSuffix",
    "avgTotalsDollarFormatter",
    "avgTotalsFormatter",
    "minTotalsFormatter",
    "maxTotalsFormatter",
    "sumTotalsColoredFormatter",
    "sumTotalsDollarColoredBoldFormatter",
    "sumTotalsDollarColoredFormatter",
    "sumTotalsDollarBoldFormatter",
    "sumTotalsDollarFormatter",
    "sumTotalsFormatter",
    "sumTotalsBoldFormatter",
    "GroupTotalFormatters",
    "avgTotals",
    "avgTotalsDollar",
    "avgTotalsPercentage",
    "maxTotals",
    "minTotals",
    "sumTotals",
    "sumTotalsBold",
    "sumTotalsColored",
    "sumTotalsDollar",
    "sumTotalsDollarBold",
    "sumTotalsDollarColored",
    "sumTotalsDollarColoredBold",
    "SlickPaginationComponent",
    "_isFirstRender",
    "onPaginationChanged",
    "EventEmitter",
    "dataFrom",
    "dataTo",
    "pageCount",
    "paginationPageSizes",
    "fromToParams",
    "from",
    "to",
    "_gridPaginationOptions",
    "gridPaginationOptions",
    "refreshPagination",
    "ngOnDestroy",
    "ngAfterViewInit",
    "_filterSubcription",
    "ceil",
    "changeToFirstPage",
    "onPageChanged",
    "changeToLastPage",
    "changeToNextPage",
    "changeToPreviousPage",
    "changeToCurrentPage",
    "currentTarget",
    "onChangeItemPerPage",
    "itemsPerPage",
    "isPageNumberReset",
    "recalculateFromToIndexes",
    "itemCount",
    "emit",
    "Component",
    "selector",
    "template",
    "Output",
    "Input",
    "AngularSlickgridComponent",
    "elm",
    "gridService",
    "gridEventService",
    "groupingAndColspanService",
    "resizer",
    "forRootConfig",
    "groupingDefinition",
    "showPagination",
    "isGridInitialized",
    "onAngularGridCreated",
    "onDataviewCreated",
    "onGridCreated",
    "onGridInitialized",
    "onBeforeGridCreate",
    "onBeforeGridDestroy",
    "onAfterGridDestroyed",
    "gridWidth",
    "updateColumnDefinitionsList",
    "getItems",
    "dataset",
    "_dataset",
    "refreshGridData",
    "ngOnInit",
    "gridHeightString",
    "gridWidthString",
    "emptyDomElementContainer",
    "initialization",
    "mergeGridOptions",
    "createBackendApiInternalPostProcessCallback",
    "Data",
    "GroupItemMetadataProvider",
    "DataView",
    "inlineFilters",
    "Grid",
    "attachDifferentHooks",
    "beginUpdate",
    "setItems",
    "endUpdate",
    "executeAfterDataviewCreated",
    "attachResizeHook",
    "attachBackendCallbackFunctions",
    "slickGrid",
    "groupingService",
    "pluginService",
    "resizerService",
    "backendApi_1",
    "nodes",
    "totalCount",
    "onLangChange",
    "checkboxColumn",
    "_loop_3",
    "this_3",
    "dispatchCustomEvent",
    "eventData",
    "_loop_4",
    "this_4",
    "gridStateChange",
    "updateRowCount",
    "onRowsChanged",
    "invalidateRows",
    "rows",
    "colspanCallback",
    "isExecuteCommandOnInit",
    "onInit",
    "observableOrPromise_1",
    "tslib_1.__awaiter",
    "paginationChanged",
    "reSort",
    "isShowing",
    "toggleHeaderRow",
    "isBubbling",
    "isCancelable",
    "eventInit",
    "bubbles",
    "cancelable",
    "detail",
    "nativeElement",
    "dispatchEvent",
    "providers",
    "ElementRef",
    "decorators",
    "Inject",
    "AngularSlickgridModule",
    "forRoot",
    "ngModule",
    "provide",
    "useValue",
    "NgModule",
    "imports",
    "CommonModule",
    "TranslateModule",
    "declarations",
    "exports",
    "entryComponents",
    "buf",
    "charCodeAt"
  ],
  "mappings": "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"
}
