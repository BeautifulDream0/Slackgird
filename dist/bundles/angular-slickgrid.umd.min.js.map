{
  "version": 3,
  "file": "angular-slickgrid.umd.min.js",
  "sources": [
    "ng://angular-slickgrid/node_modules/tslib/tslib.es6.js",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/delimiterType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/fileType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/gridStateType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/operatorType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/sortDirection.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/compareDateUtility.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsShortSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateIsoSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/numericSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/stringSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/sorterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/collection.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/booleanFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/filterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateIsoFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsShortFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUtcFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/collectionSearchFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/numberFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/stringFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/executeMappedCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundDateFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundInputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/inputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/multipleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/selectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/singleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/global-grid-options.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/slickgrid-config.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/filterFactory.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/filter.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/export.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/sort.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/constants.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/controlAndPlugin.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphqlQueryBuilder.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphql.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/global-utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid-odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridEvent.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridState.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/groupingAndColspan.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/resizer.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/avgAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/minAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/maxAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/sumAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/checkboxEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/dateEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/floatEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/integerEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/longTextEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/multipleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/singleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/textEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/arrayToCsvFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/boldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkboxFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkmarkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionEditorFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/complexObjectFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/deleteIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/editIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkUriPrefixFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/infoIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/lowercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/multipleFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentSymbolFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/progressBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateBooleanFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/uppercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/yesNoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsPercentageFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/minTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/maxTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/slick-pagination.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/angular-slickgrid.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/modules/angular-slickgrid.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n",
    "export enum DelimiterType {\r\n  colon = ':',\r\n  comma = ',',\r\n  equalSign = '=',\r\n  pipe = '|',\r\n  semicolon = ';',\r\n  space = ' ',\r\n  tab = '\\t',\r\n\r\n  doubleColon = '::',\r\n  doublePipe = '||',\r\n  doubleSemicolon = ';;',\r\n}\r\n\r\n",
    "export enum FileType {\r\n  csv = 'csv',\r\n  doc = 'doc',\r\n  docx = 'docx',\r\n  pdf = 'pdf',\r\n  txt = 'txt',\r\n  xls = 'xls',\r\n  xlsx = 'xlsx'\r\n}\r\n",
    "export enum GridStateType {\r\n  columns = 'columns',\r\n  filter = 'filter',\r\n  pagination = 'pagination',\r\n  sorter = 'sorter'\r\n}\r\n",
    "export enum OperatorType {\n  /** value is empty */\n  empty = '',\n\n  /** value contains x */\n  contains = 'Contains',\n\n  /** value less than x */\n  lessThan = 'LT',\n\n  /** value less than or equal to x */\n  lessThanOrEqual = 'LE',\n\n  /** value greater than x */\n  greaterThan = 'GT',\n\n  /** value great than or equal to x */\n  greaterThanOrEqual = 'GE',\n\n  /** value not equal to x */\n  notEqual = 'NE',\n\n  /** value equal to x */\n  equal = 'EQ',\n\n  /** String ends with value */\n  endsWith = 'EndsWith',\n\n  /** String starts with value */\n  startsWith = 'StartsWith',\n\n  /** Find an equal match inside a collection */\n  in = 'IN',\n\n  /** Inverse (Not In) of an equal match inside a collection */\n  notIn = 'NOT_IN',\n\n  /**\n   * Find a substring contained inside a collection\n   * For example, this condition would return True with \"IN_CONTAINS\":: value='Task2,Task3', collection=['Task2','Task3']\n   * This would have returned False with \"IN\" because 'Task2' does not equal 'Task2,Task3'. However 'Task2' is contained in 'Task2,Task3'\n   */\n  inContains = 'IN_CONTAINS',\n\n  /** Inversed (Not In) of substring contained inside a collection */\n  notInContains = 'NOT_IN_CONTAINS',\n}\n",
    "export enum SortDirection {\r\n  asc = 'asc',\r\n  ASC = 'ASC',\r\n  desc = 'desc',\r\n  DESC = 'DESC'\r\n}\r\n",
    "import { FieldType, OperatorType } from '../models/index';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/first';\r\nimport 'rxjs/add/operator/take';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\n/** Simple function to which will loop and create as demanded the number of white spaces,\r\n * this will be used in the Excel export\r\n * @param int nbSpaces: number of white spaces to create\r\n */\r\nexport function addWhiteSpaces(nbSpaces): string {\r\n  let result = '';\r\n\r\n  for (let i = 0; i < nbSpaces; i++) {\r\n    result += ' ';\r\n  }\r\n  return result;\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityDecode(input: string): string {\r\n  return input.replace(/&#(\\d+);/g, function (match, dec) {\r\n    return String.fromCharCode(dec);\r\n  });\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityEncode(input: any): string {\r\n  const buf = [];\r\n  for (let i = input.length - 1; i >= 0; i--) {\r\n    buf.unshift(['&#', input[i].charCodeAt(), ';'].join(''));\r\n  }\r\n  return buf.join('');\r\n}\r\n\r\n/**\r\n * Compares two arrays to determine if all the items are equal\r\n * @param a first array\r\n * @param b second array to compare with a\r\n * @param [orderMatters=false] flag if the order matters, if not arrays will be sorted\r\n * @return boolean true if equal, else false\r\n */\r\nexport function arraysEqual(a: any[], b: any[], orderMatters: boolean = false): boolean {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n\r\n  if (a === null || b === null) {\r\n    return false;\r\n  }\r\n\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n\r\n  if (!orderMatters) {\r\n    a.sort();\r\n    b.sort();\r\n  }\r\n\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Try casting an input of type Promise | Observable into a Promise type.\r\n * @param object which could be of type Promise or Observable\r\n * @param fromServiceName string representing the caller service name and will be used if we throw a casting problem error\r\n */\r\nexport function castToPromise<T>(input: Promise<T> | Observable<T>, fromServiceName: string = ''): Promise<T> {\r\n  let promise: any = input;\r\n\r\n  if (input instanceof Promise) {\r\n    // if it's already a Promise then return it\r\n    return input;\r\n  } else if (input instanceof Observable) {\r\n    promise = input.first().toPromise();\r\n    if (!(promise instanceof Promise)) {\r\n      promise = input.take(1).toPromise();\r\n    }\r\n    if (!(promise instanceof Promise)) {\r\n      throw new Error(\r\n        `Something went wrong, Angular-Slickgrid ${fromServiceName} is not able to convert the Observable into a Promise.\r\n        If you are using Angular HttpClient, you could try converting your http call to a Promise with \".toPromise()\"\r\n        for example::  this.http.post('graphql', { query: graphqlQuery }).toPromise()\r\n        `);\r\n    }\r\n  }\r\n\r\n  return promise;\r\n}\r\n\r\n/**\r\n * Uses the logic function to find an item in an array or returns the default\r\n * value provided (empty object by default)\r\n * @param any[] array the array to filter\r\n * @param function logic the logic to find the item\r\n * @param any [defaultVal={}] the default value to return\r\n * @return object the found object or deafult value\r\n */\r\nexport function findOrDefault(array: any[], logic: (item: any) => boolean, defaultVal = {}): any {\r\n  return array.find(logic) || defaultVal;\r\n}\r\n\r\n/**\r\n  * Take a number (or a string) and display it as a formatted decimal string with defined minimum and maximum decimals\r\n  * @param input\r\n  * @param minDecimal\r\n  * @param maxDecimal\r\n  */\r\nexport function decimalFormatted(input: number | string, minDecimal?: number, maxDecimal?: number) {\r\n  if (isNaN(+input)) {\r\n    return input;\r\n  }\r\n\r\n  const minDec = (minDecimal === undefined) ? 2 : minDecimal;\r\n  const maxDec = (maxDecimal === undefined) ? 2 : maxDecimal;\r\n  let amount = String(Math.round(+input * Math.pow(10, maxDec)) / Math.pow(10, maxDec));\r\n\r\n  if (amount.indexOf('.') < 0) {\r\n    amount += '.';\r\n  }\r\n  while ((amount.length - amount.indexOf('.')) <= minDec) {\r\n    amount += '0';\r\n  }\r\n  return amount;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent moment.js format\r\n * refer to moment.js for the format standard used: https://momentjs.com/docs/#/parsing/string-format/\r\n * @param fieldType\r\n */\r\nexport function mapMomentDateFormatWithFieldType(fieldType: FieldType): string {\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'YYYY-MM-DD HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'YYYY-MM-DD hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'YYYY-MM-DD hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'MM/DD/YYYY';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'M/D/YY';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'MM/DD/YYYY HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'MM/DD/YYYY hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'MM/DD/YYYY hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'M/D/YY H:m:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'M/D/YY h:m:s a';\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'YYYY-MM-DD';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent Flatpickr format\r\n * refer to Flatpickr for the format standard used: https://chmln.github.io/flatpickr/formatting/#date-formatting-tokens\r\n * also note that they seem very similar to PHP format (except for am/pm): http://php.net/manual/en/function.date.php\r\n * @param fieldType\r\n */\r\nexport function mapFlatpickrDateFormatWithFieldType(fieldType: FieldType): string {\r\n  /*\r\n    d: Day of the month, 2 digits with leading zeros\t01 to 31\r\n    D: A textual representation of a day\tMon through Sun\r\n    l: (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday\r\n    j: Day of the month without leading zeros\t1 to 31\r\n    J: Day of the month without leading zeros and ordinal suffix\t1st, 2nd, to 31st\r\n    w: Numeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday)\r\n    F: A full textual representation of a month\tJanuary through December\r\n    m: Numeric representation of a month, with leading zero\t01 through 12\r\n    n: Numeric representation of a month, without leading zeros\t1 through 12\r\n    M: A short textual representation of a month\tJan through Dec\r\n    U: The number of seconds since the Unix Epoch\t1413704993\r\n    y: A two digit representation of a year\t99 or 03\r\n    Y: A full numeric representation of a year, 4 digits\t1999 or 2003\r\n    H: Hours (24 hours)\t00 to 23\r\n    h: Hours\t1 to 12\r\n    i: Minutes\t00 to 59\r\n    S: Seconds, 2 digits\t00 to 59\r\n    s: Seconds\t0, 1 to 59\r\n    K: AM/PM\tAM or PM\r\n  */\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'Y-m-d H:i:S';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'Y-m-d h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'Y-m-d h:i:S K';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'm/d/Y';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'm/d/y';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'm/d/Y H:i:S';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'm/d/Y h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'm/d/Y h:i:s K';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'm/d/y H:i:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'm/d/y h:i:s K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'Z';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'Y-m-d';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operators (ex.: <= is \"le\", > is \"gt\")\r\n * @param string operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorType(operator: string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (operator) {\r\n    case '<':\r\n      map = OperatorType.lessThan;\r\n      break;\r\n    case '<=':\r\n      map = OperatorType.lessThanOrEqual;\r\n      break;\r\n    case '>':\r\n      map = OperatorType.greaterThan;\r\n      break;\r\n    case '>=':\r\n      map = OperatorType.greaterThanOrEqual;\r\n      break;\r\n    case '<>':\r\n    case '!=':\r\n    case 'neq':\r\n    case 'NEQ':\r\n      map = OperatorType.notEqual;\r\n      break;\r\n    case '*':\r\n    case '.*':\r\n    case 'startsWith':\r\n      map = OperatorType.startsWith;\r\n      break;\r\n    case '*.':\r\n    case 'endsWith':\r\n      map = OperatorType.endsWith;\r\n      break;\r\n    case '=':\r\n    case '==':\r\n    case 'eq':\r\n    case 'EQ':\r\n      map = OperatorType.equal;\r\n      break;\r\n    case 'in':\r\n    case 'IN':\r\n      map = OperatorType.in;\r\n      break;\r\n    case 'notIn':\r\n    case 'NIN':\r\n    case 'NOT_IN':\r\n      map = OperatorType.notIn;\r\n      break;\r\n    default:\r\n      map = OperatorType.contains;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operator by a Filter Type\r\n * For example a multiple-select typically uses 'IN' operator\r\n * @param operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorByFieldType(fieldType: FieldType | string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.string:\r\n    case FieldType.unknown:\r\n      map = OperatorType.contains;\r\n      break;\r\n    case FieldType.float:\r\n    case FieldType.number:\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    case FieldType.date:\r\n    case FieldType.dateUtc:\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n    case FieldType.dateTimeIsoAmPm:\r\n    case FieldType.dateTimeIsoAM_PM:\r\n    case FieldType.dateUs:\r\n    case FieldType.dateUsShort:\r\n    case FieldType.dateTimeUs:\r\n    case FieldType.dateTimeUsAmPm:\r\n    case FieldType.dateTimeUsAM_PM:\r\n    case FieldType.dateTimeUsShort:\r\n    case FieldType.dateTimeUsShortAmPm:\r\n    case FieldType.dateTimeUsShortAM_PM:\r\n    default:\r\n      map = OperatorType.equal;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Parse a date passed as a string and return a Date object (if valid)\r\n * @param inputDateString\r\n * @returns string date formatted\r\n */\r\nexport function parseUtcDate(inputDateString: string, useUtc: boolean): string | null {\r\n  let date = null;\r\n\r\n  if (/^[0-9\\-\\/]*$/.test(inputDateString)) {\r\n    // get the UTC datetime with moment.js but we need to decode the value so that it's valid text\r\n    const dateString = decodeURIComponent(inputDateString);\r\n    const dateMoment = moment(new Date(dateString));\r\n    if (dateMoment.isValid() && dateMoment.year().toString().length === 4) {\r\n      date = (useUtc) ? dateMoment.utc().format() : dateMoment.format();\r\n    }\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\n/**\r\n * Sanitize, return only the text without HTML tags\r\n * @input htmlString\r\n * @return text\r\n */\r\nexport function sanitizeHtmlToText(htmlString: string) {\r\n  const temp = document.createElement('div');\r\n  temp.innerHTML = htmlString;\r\n  return temp.textContent || temp.innerText;\r\n}\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string\r\n * @returns string\r\n */\r\nexport function titleCase(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Converts a string to camel case\r\n * @param str the string to convert\r\n * @return the string in camel case\r\n */\r\nexport function toCamelCase(str: string): string {\r\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w|[\\s+\\-_\\/])/g, (match: string, offset: number) => {\r\n    // remove white space or hypens or underscores\r\n    if (/[\\s+\\-_\\/]/.test(match)) {\r\n      return '';\r\n    }\r\n\r\n    return offset === 0 ? match.toLowerCase() : match.toUpperCase();\r\n  });\r\n}\r\n\r\n/**\r\n * Converts a string to kebab (hypen) case\r\n * @param str the string to convert\r\n * @return the string in kebab case\r\n */\r\nexport function toKebabCase(str: string): string {\r\n  return toCamelCase(str).replace(/([A-Z])/g, '-$1').toLowerCase();\r\n}\r\n",
    "import * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport function compareDates(value1, value2, format, sortDirection, strict?: boolean) {\r\n  let diff = 0;\r\n\r\n  if (value1 === null || value1 === '' || !moment(value1, format, strict).isValid()) {\r\n    diff = -1;\r\n  } else if (value2 === null || value2 === '' || !moment(value2, format, strict).isValid()) {\r\n    diff = 1;\r\n  } else {\r\n    const date1 = moment(value1, format, strict);\r\n    const date2 = moment(value2, format, strict);\r\n    diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);\r\n  }\r\n\r\n  return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));\r\n}\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nimport { compareDates } from './compareDateUtility';\r\n\r\nexport const dateSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, moment.ISO_8601, sortDirection);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const numericSorter: Sorter = (value1, value2, sortDirection) => {\r\n  const x = (isNaN(value1) || value1 === '' || value1 === null) ? -99e+10 : parseFloat(value1);\r\n  const y = (isNaN(value2) || value2 === '' || value2 === null) ? -99e+10 : parseFloat(value2);\r\n  return sortDirection * (x === y ? 0 : (x > y ? 1 : -1));\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const stringSorter: Sorter = (value1, value2, sortDirection) => {\r\n  let position;\r\n  if (value1 === null) {\r\n    position = -1;\r\n  } else if (value2 === null) {\r\n    position = 1;\r\n  } else if (value1 === value2) {\r\n    position = 0;\r\n  } else if (sortDirection) {\r\n    position = value1 < value2 ? -1 : 1;\r\n  } else if (!sortDirection) {\r\n    position = value1 < value2 ? 1 : -1;\r\n  }\r\n  return sortDirection * position;\r\n};\r\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\nimport { dateUsShortSorter } from './dateUsShortSorter';\nimport { dateSorter } from './dateSorter';\nimport { dateIsoSorter } from './dateIsoSorter';\nimport { dateUsSorter } from './dateUsSorter';\nimport { numericSorter } from './numericSorter';\nimport { stringSorter } from './stringSorter';\n\nexport const Sorters = {\n  date: dateSorter,\n  dateIso: dateIsoSorter,\n  dateUs: dateUsSorter,\n  dateUsShort: dateUsShortSorter,\n  numeric: numericSorter,\n  string: stringSorter\n};\n",
    "import { FieldType } from './../models/index';\r\nimport { Sorters } from './index';\r\n\r\nexport function sortByFieldType(value1: any, value2: any, fieldType: FieldType, sortDirection: number) {\r\n  let sortResult = 0;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.number:\r\n      sortResult = Sorters.numeric(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.date:\r\n      sortResult = Sorters.date(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateIso:\r\n      sortResult = Sorters.dateIso(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUs:\r\n      sortResult = Sorters.dateUs(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      sortResult = Sorters.dateUsShort(value1, value2, sortDirection);\r\n      break;\r\n    default:\r\n      sortResult = Sorters.string(value1, value2, sortDirection);\r\n      break;\r\n  }\r\n\r\n  return sortResult;\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  CollectionFilterBy,\r\n  CollectionSortBy,\r\n  FieldType,\r\n  OperatorType,\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\n\r\n@Injectable()\r\nexport class CollectionService {\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /**\r\n   * Filter items from a collection\r\n   * @param collection\r\n   * @param filterBy\r\n   */\r\n  filterCollection(collection: any[], filterBy: CollectionFilterBy): any[] {\r\n    let filteredCollection: any[] = [];\r\n\r\n    if (filterBy) {\r\n      const property = filterBy.property || '';\r\n      const operator = filterBy.operator || OperatorType.equal;\r\n      // just check for undefined since the filter value could be null, 0, '', false etc\r\n      const value = typeof filterBy.value === 'undefined' ? '' : filterBy.value;\r\n\r\n      switch (operator) {\r\n        case OperatorType.equal:\r\n          filteredCollection = collection.filter((item) => item[property] === value);\r\n          break;\r\n        case OperatorType.in:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) !== -1);\r\n          break;\r\n        case OperatorType.notIn:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) === -1);\r\n          break;\r\n        case OperatorType.contains:\r\n          filteredCollection = collection.filter((item) => value.indexOf(item[property]) !== -1);\r\n          break;\r\n        default:\r\n          filteredCollection = collection.filter((item) => item[property] !== value);\r\n      }\r\n    }\r\n\r\n    return filteredCollection;\r\n  }\r\n\r\n  /**\r\n   * Sort items in a collection\r\n   * @param collection\r\n   * @param sortBy\r\n   * @param enableTranslateLabel\r\n   */\r\n  sortCollection(collection: any[], sortBy: CollectionSortBy, enableTranslateLabel?: boolean): any[] {\r\n    let sortedCollection: any[] = [];\r\n\r\n    if (sortBy) {\r\n      const property = sortBy.property || '';\r\n      const sortDirection = sortBy.hasOwnProperty('sortDesc') ? (sortBy.sortDesc ? -1 : 1) : 1;\r\n      const fieldType = sortBy.fieldType || FieldType.string;\r\n\r\n      sortedCollection = collection.sort((dataRow1: any, dataRow2: any) => {\r\n        const value1 = (enableTranslateLabel) ? this.translate.instant(dataRow1[property] || ' ') : dataRow1[property];\r\n        const value2 = (enableTranslateLabel) ? this.translate.instant(dataRow2[property] || ' ') : dataRow2[property];\r\n        const result = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n        return result;\r\n      });\r\n    }\r\n\r\n    return sortedCollection;\r\n  }\r\n}\r\n",
    "import { FilterCondition, FilterConditionOption } from './../models/index';\r\n\r\nfunction parseBoolean(str: number | string) {\r\n  return /(true|1)/i.test(str + '');\r\n}\r\n\r\nexport const booleanFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  return parseBoolean(options.cellValue) === parseBoolean(searchTerm);\r\n};\r\n",
    "export const testFilterCondition = (operator: string, value1: any, value2: any): boolean => {\n  switch (operator) {\n    case '<':\n    case 'LT': return (value1 < value2);\n    case '<=':\n    case 'LE': return (value1 <= value2);\n    case '>':\n    case 'GT': return (value1 > value2);\n    case '>=':\n    case 'GE': return (value1 >= value2);\n    case '!=':\n    case '<>':\n    case 'NE': return (value1 !== value2);\n    case '=':\n    case '==':\n    case 'EQ': return (value1 === value2);\n    case 'IN': return ((value2 && value2.includes) ? (value2.includes(value1)) : false);\n    case 'NIN':\n    case 'NOT_IN':\n      return ((value2 && value2.includes) ? (!value2.includes(value1)) : false);\n    case 'IN_CONTAINS':\n      if (value2 && Array.isArray(value2) && value2.findIndex) {\n        return ((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);\n      }\n      return false;\n    case 'NIN_CONTAINS':\n    case 'NOT_IN_CONTAINS':\n    if (value2 && Array.isArray(value2) && value2.findIndex) {\n      return !((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);\n    }\n    return false;\n}\nreturn true;\n};\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  const filterSearchType = options.filterSearchType || FieldType.dateIso;\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(filterSearchType);\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerm, searchDateFormat, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue);\r\n  const dateSearch = moment(searchTerm);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateUtcFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerms = Array.isArray(options.searchTerms) && options.searchTerms[0] || [];\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(options.filterSearchType || options.fieldType);\r\n  if (!moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerms[0], searchDateFormat, true).isValid()) {\r\n    return true;\r\n  }\r\n  const dateCell = moment(options.cellValue, moment.ISO_8601, true);\r\n  const dateSearch = moment(searchTerms[0], searchDateFormat, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const collectionSearchFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // multiple-select will always return text, so we should make our cell values text as well\r\n  const cellValue = options.cellValue + '';\r\n\r\n  return testFilterCondition(options.operator || 'IN', cellValue, options.searchTerms || []);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const numberFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const cellValue = parseFloat(options.cellValue);\r\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || 0;\r\n  if (typeof searchTerm === 'string') {\r\n    searchTerm = parseFloat(searchTerm);\r\n  }\r\n\r\n  if (!searchTerm && (!options.operator || options.operator === '')) {\r\n    return true;\r\n  }\r\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption, OperatorType } from '../models/index';\nimport { testFilterCondition } from './filterUtilities';\n\nexport const stringFilterCondition: FilterCondition = (options: FilterConditionOption) => {\n  // make sure the cell value is a string by casting it when possible\n  options.cellValue = (options.cellValue === undefined || options.cellValue === null) ? '' : options.cellValue.toString();\n\n  // make both the cell value and search value lower for case insensitive comparison\n  const cellValue = options.cellValue.toLowerCase();\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || '';\n  if (typeof searchTerm === 'string') {\n    searchTerm = searchTerm.toLowerCase();\n  }\n\n  if (options.operator === '*' || options.operator === OperatorType.endsWith) {\n    return cellValue.endsWith(searchTerm);\n  } else if ((options.operator === '' && options.cellValueLastChar === '*') || options.operator === OperatorType.startsWith) {\n    return cellValue.startsWith(searchTerm);\n  } else if (options.operator === '') {\n    return cellValue.includes(searchTerm);\n  }\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\n};\n",
    "import { booleanFilterCondition } from './booleanFilterCondition';\nimport { dateFilterCondition } from './dateFilterCondition';\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\nimport { FilterConditionOption } from './../models/filterConditionOption.interface';\nimport { FilterCondition } from '../models/filterCondition.interface';\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\nimport { numberFilterCondition } from './numberFilterCondition';\nimport { stringFilterCondition } from './stringFilterCondition';\nimport { FieldType } from '../models/index';\n\nexport const executeMappedCondition: FilterCondition = (options: FilterConditionOption) => {\n  // when using a multi-select ('IN' operator) we will not use the field type but instead go directly with a collection search\n  const operator = options.operator && options.operator.toUpperCase();\n  if (options && options.operator && (operator === 'IN' || operator === 'NIN' || operator === 'IN_CONTAINS' || operator === 'NIN_CONTAINS')) {\n    return collectionSearchFilterCondition(options);\n  }\n\n  // execute the mapped type, or default to String condition check\n  switch (options.fieldType) {\n    case FieldType.boolean:\n      return booleanFilterCondition(options);\n    case FieldType.date:\n      return dateFilterCondition(options);\n    case FieldType.dateUtc:\n      return dateUtcFilterCondition(options);\n    case FieldType.dateIso:\n      return dateIsoFilterCondition(options);\n    case FieldType.dateUs:\n    case FieldType.dateTimeUs:\n      return dateUsFilterCondition(options);\n    case FieldType.dateUsShort:\n    case FieldType.dateTimeUsShort:\n      return dateUsShortFilterCondition(options);\n    case FieldType.number:\n      return numberFilterCondition(options);\n    case FieldType.string:\n    default:\n      return stringFilterCondition(options);\n  }\n};\n",
    "import { FilterConditionOption } from './../models/filterConditionOption.interface';\r\nimport { booleanFilterCondition } from './booleanFilterCondition';\r\nimport { dateFilterCondition } from './dateFilterCondition';\r\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\r\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\r\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\r\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\r\nimport { executeMappedCondition } from './executeMappedCondition';\r\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { numberFilterCondition } from './numberFilterCondition';\r\nimport { stringFilterCondition } from './stringFilterCondition';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const FilterConditions = {\r\n  executeMappedCondition,\r\n  booleanFilter: booleanFilterCondition,\r\n  collectionSearchFilter: collectionSearchFilterCondition,\r\n  dateFilter: dateFilterCondition,\r\n  dateIsoFilter: dateIsoFilterCondition,\r\n  dateUtcFilter: dateUtcFilterCondition,\r\n  dateUsFilter: dateUsFilterCondition,\r\n  dateUsShortFilter: dateUsShortFilterCondition,\r\n  numberFilter: numberFilterCondition,\r\n  stringFilter: stringFilterCondition,\r\n  testFilter: testFilterCondition\r\n};\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { mapFlatpickrDateFormatWithFieldType } from '../services/utilities';\r\nimport { Column, Filter, FilterArguments, FilterCallback, FieldType, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\r\n\r\n// importing Flatpickr works better with a 'require'\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class CompoundDateFilter implements Filter {\r\n  private $filterElm: any;\r\n  private $filterInputElm: any;\r\n  private $selectOperatorElm: any;\r\n  private _currentValue: string;\r\n  private _operator: OperatorType | OperatorString;\r\n  flatInstance: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  set operator(op: OperatorType | OperatorString) {\r\n    this._operator = op;\r\n  }\r\n  get operator(): OperatorType | OperatorString {\r\n    return this._operator || OperatorType.empty;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (args) {\r\n      this.grid = args.grid;\r\n      this.callback = args.callback;\r\n      this.columnDef = args.columnDef;\r\n      this.operator = args.operator || '';\r\n      this.searchTerms = args.searchTerms || [];\r\n\r\n      // date input can only have 1 search term, so we will use the 1st array index if it exist\r\n      const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n      // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n      // and initialize it if searchTerm is filled\r\n      this.$filterElm = this.createDomElement(searchTerm);\r\n\r\n      // step 3, subscribe to the keyup event and run the callback when that happens\r\n      // also add/remove \"filled\" class for styling purposes\r\n      this.$filterInputElm.keyup((e: any) => {\r\n        this.onTriggerEvent(e);\r\n      });\r\n      this.$selectOperatorElm.change((e: any) => {\r\n        this.onTriggerEvent(e);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.flatInstance && this.$selectOperatorElm) {\r\n      this.$selectOperatorElm.val(0);\r\n      this.flatInstance.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm[]) {\r\n    if (values && Array.isArray(values)) {\r\n      this.flatInstance.setDate(values[0]);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n  private buildDatePickerInput(searchTerm?: SearchTerm) {\r\n    const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\r\n    const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnDef.type || FieldType.dateUtc);\r\n    let currentLocale = this.translate.currentLang || 'en';\r\n    if (currentLocale.length > 2) {\r\n      currentLocale = currentLocale.substring(0, 2);\r\n    }\r\n\r\n    const pickerOptions: any = {\r\n      defaultDate: searchTerm || '',\r\n      altInput: true,\r\n      altFormat: outputFormat,\r\n      dateFormat: inputFormat,\r\n      wrap: true,\r\n      closeOnSelect: true,\r\n      locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n      onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n        this._currentValue = dateStr;\r\n\r\n        // when using the time picker, we can simulate a keyup event to avoid multiple backend request\r\n        // since backend request are only executed after user start typing, changing the time should be treated the same way\r\n        if (pickerOptions.enableTime) {\r\n          this.onTriggerEvent(new CustomEvent('keyup'), dateStr === '');\r\n        } else {\r\n          this.onTriggerEvent(undefined, dateStr === '');\r\n        }\r\n      }\r\n    };\r\n\r\n    // add the time picker when format is UTC (Z) or has the 'h' (meaning hours)\r\n    if (outputFormat && (outputFormat === 'Z' || outputFormat.toLowerCase().includes('h'))) {\r\n      pickerOptions.enableTime = true;\r\n    }\r\n\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    const $filterInputElm: any = $(`<div class=flatpickr><input type=\"text\" class=\"form-control\" data-input placeholder=\"${placeholder}\"></div>`);\r\n    this.flatInstance = ($filterInputElm[0] && typeof $filterInputElm[0].flatpickr === 'function') ? $filterInputElm[0].flatpickr(pickerOptions) : null;\r\n    return $filterInputElm;\r\n  }\r\n\r\n  private buildSelectOperatorHtmlString() {\r\n    const optionValues = this.getOptionValues();\r\n    let optionValueString = '';\r\n    optionValues.forEach((option) => {\r\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\r\n    });\r\n\r\n    return `<select class=\"form-control\">${optionValueString}</select>`;\r\n  }\r\n\r\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\r\n    return [\r\n      { operator: '' as OperatorString, description: '' },\r\n      { operator: '=' as OperatorString, description: '' },\r\n      { operator: '<' as OperatorString, description: '' },\r\n      { operator: '<=' as OperatorString, description: '' },\r\n      { operator: '>' as OperatorString, description: '' },\r\n      { operator: '>=' as OperatorString, description: '' },\r\n      { operator: '<>' as OperatorString, description: '' }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  private createDomElement(searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\r\n    this.$filterInputElm = this.buildDatePickerInput(searchTerm);\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\r\n    const $containerInputGroup = $(`<div class=\"input-group flatpickr\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon operator\"></div>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <div class=flatpickr>\r\n          <input type=\"text\" class=\"form-control\" data-input>\r\n        </div>\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    $containerInputGroup.append($operatorInputGroupAddon);\r\n    $containerInputGroup.append(this.$filterInputElm);\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append($containerInputGroup);\r\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\r\n    this.$filterInputElm.data('columnId', this.columnDef.id);\r\n\r\n    if (this.operator) {\r\n      this.$selectOperatorElm.val(this.operator);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterContainerElm.addClass('filled');\r\n      this._currentValue = searchTerm as string;\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  private loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  private onTriggerEvent(e: Event | undefined, clearFilterTriggered?: boolean) {\r\n    if (clearFilterTriggered) {\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n    } else {\r\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\r\n      (this._currentValue) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (this._currentValue ? [this._currentValue] : null), operator: selectedOperator || '' });\r\n    }\r\n  }\r\n\r\n  private hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  private show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n}\r\n",
    "import { Inject } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { FieldType } from './../models/index';\r\nimport { Column, Filter, FilterArguments, FilterCallback, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Inject(TranslateService)\r\nexport class CompoundInputFilter implements Filter {\r\n  private $filterElm: any;\r\n  private $filterInputElm: any;\r\n  private $selectOperatorElm: any;\r\n  private _operator: OperatorType | OperatorString;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  set operator(op: OperatorType | OperatorString) {\r\n    this._operator = op;\r\n  }\r\n  get operator(): OperatorType | OperatorString {\r\n    return this._operator || OperatorType.empty;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.operator = args.operator;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n    // and initialize it if searchTerms is filled\r\n    this.$filterElm = this.createDomElement(searchTerm);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterInputElm.keyup((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n    this.$selectOperatorElm.change((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.$filterElm && this.$selectOperatorElm) {\r\n      this.$selectOperatorElm.val(0);\r\n      this.$filterInputElm.val('');\r\n      this.onTriggerEvent(null, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n      this.$selectOperatorElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm[]) {\r\n    if (values && Array.isArray(values)) {\r\n      this.$filterElm.val(values[0]);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  private buildInputHtmlString() {\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    return `<input class=\"form-control\" type=\"text\" placeholder=\"${placeholder}\" />`;\r\n  }\r\n\r\n  private buildSelectOperatorHtmlString() {\r\n    const optionValues = this.getOptionValues();\r\n    let optionValueString = '';\r\n    optionValues.forEach((option) => {\r\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\r\n    });\r\n\r\n    return `<select class=\"form-control\">${optionValueString}</select>`;\r\n  }\r\n\r\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\r\n    const type = (this.columnDef.type && this.columnDef.type) ? this.columnDef.type : FieldType.string;\r\n    let optionValues = [];\r\n\r\n    switch (type) {\r\n      case FieldType.string:\r\n        optionValues = [\r\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\r\n          { operator: '=' as OperatorString, description: this.translate.instant('EQUALS') },\r\n          { operator: 'a*' as OperatorString, description: this.translate.instant('STARTS_WITH') },\r\n          { operator: '*z' as OperatorString, description: this.translate.instant('ENDS_WITH') },\r\n          /*\r\n          { operator: 'IN' as OperatorString, description: this.translate.instant('IN_COLLECTION_SEPERATED_BY_COMMA') },\r\n          { operator: 'NIN' as OperatorString, description: this.translate.instant('NOT_IN_COLLECTION_SEPERATED_BY_COMMA') },\r\n          */\r\n        ];\r\n        break;\r\n      default:\r\n        optionValues = [\r\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\r\n          { operator: '=' as OperatorString, description: '' },\r\n          { operator: '<' as OperatorString, description: '' },\r\n          { operator: '<=' as OperatorString, description: '' },\r\n          { operator: '>' as OperatorString, description: '' },\r\n          { operator: '>=' as OperatorString, description: '' },\r\n          { operator: '<>' as OperatorString, description: '' }];\r\n        break;\r\n    }\r\n\r\n    return optionValues;\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  private createDomElement(searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\r\n    this.$filterInputElm = $(this.buildInputHtmlString());\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\r\n    const $containerInputGroup = $(`<div class=\"input-group\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon operator\"></div>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <input class=\"form-control\" type=\"text\" />\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    $containerInputGroup.append($operatorInputGroupAddon);\r\n    $containerInputGroup.append(this.$filterInputElm);\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append($containerInputGroup);\r\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\r\n\r\n    this.$filterInputElm.val(searchTerm);\r\n    this.$filterInputElm.data('columnId', this.columnDef.id);\r\n\r\n    if (this.operator) {\r\n      this.$selectOperatorElm.val(this.operator);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterContainerElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  private onTriggerEvent(e: Event | undefined, clearFilterTriggered?: boolean) {\r\n    if (clearFilterTriggered) {\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n    } else {\r\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\r\n      const value = this.$filterInputElm.val();\r\n      (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (value ? [value] : null), operator: selectedOperator || '' });\r\n    }\r\n  }\r\n}\r\n",
    "import {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  OperatorType,\n  OperatorString,\n  SearchTerm\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class InputFilter implements Filter {\n  private $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor() {}\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString();\n\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\n\n    // step 3, subscribe to the keyup event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterElm.keyup((e: any) => {\n      const value = e && e.target && e.target.value || '';\n      if (!value || value === '') {\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\n        this.$filterElm.removeClass('filled');\n      } else {\n        this.$filterElm.addClass('filled');\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\n      }\n    });\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm) {\n      this.$filterElm.val('');\n      this.$filterElm.trigger('keyup');\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('keyup').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm) {\n    if (values) {\n      this.$filterElm.val(values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString() {\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\n    return `<input type=\"text\" class=\"form-control search-filter\" placeholder=\"${placeholder}\">`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    const $filterElm = $(filterTemplate);\n\n    $filterElm.val(searchTerm);\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\n    $filterElm.data('columnId', this.columnDef.id);\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\n      $filterElm.appendTo($headerElm);\n    }\n\n    return $filterElm;\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CollectionService } from './../services/collection.service';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  MultipleSelectOption,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n  SelectOption,\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n@Injectable()\nexport class MultipleSelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n  defaultOptions: MultipleSelectOption;\n  isFilled = false;\n  labelName: string;\n  valueName: string;\n  enableTranslateLabel = false;\n\n  /**\n   * Initialize the Filter\n   */\n  constructor(private translate: TranslateService, private collectionService: CollectionService) {\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,  // input search term on top of the select option list\n      maxHeight: 200,\n      okButton: true,\n      addTitle: true, // show tooltip of all selected items while hovering the filter\n      countSelected: this.translate.instant('X_OF_Y_SELECTED'),\n      allSelected: this.translate.instant('ALL_SELECTED'),\n      selectAllText: this.translate.instant('SELECT_ALL'),\n      selectAllDelimiter: ['', ''], // remove default square brackets of default text \"[Select All]\" => \"Select All\"\n\n      // we will subscribe to the onClose event for triggering our callback\n      // also add/remove \"filled\" class for styling purposes\n      onClose: () => {\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\n          this.isFilled = true;\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\n        } else {\n          this.isFilled = false;\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\n        }\n        this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: selectedItems });\n      }\n    };\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.in;\n  }\n\n  /**\n   * Initialize the filter template\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let newCollection = this.columnDef.filter.collection || [];\n\n    // user might want to filter certain items of the collection\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\n      const filterBy = this.columnDef.filter.collectionFilterBy;\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\n      const sortBy = this.columnDef.filter.collectionSortBy;\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString(newCollection);\n\n    // step 2, create the DOM Element of the filter & pre-load search terms\n    // also subscribe to the onClose event\n    this.createDomElement(filterTemplate);\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\n      // this.$filterElm = $(`#${this.$filterElm[0].id}`);\n      this.$filterElm.multipleSelect('setSelects', []);\n\n      this.$filterElm.removeClass('filled');\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off().remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values) {\n      this.$filterElm.multipleSelect('setSelects', values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString(optionCollection: any[]) {\n    let options = '';\n    optionCollection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.multipleSelect, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const selected = (this.findValueInSearchTerms(option[this.valueName]) >= 0) ? 'selected' : '';\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n\n      // html text of each select option\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\n\n      // if there's a search term, we will add the \"filled\" class for styling purposes\n      if (selected) {\n        this.isFilled = true;\n      }\n    });\n\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * Subscribe to the onClose event and run the callback when that happens\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    this.$filterElm = $(filterTemplate);\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\n    }\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterElm.data('columnId', this.columnDef.id);\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (this.isFilled) {\n      this.$filterElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\n      this.$filterElm.appendTo($headerElm);\n    }\n\n    // merge options & attach multiSelect\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\n    this.$filterElm = this.$filterElm.multipleSelect(options);\n  }\n\n  private findValueInSearchTerms(value: number | string): number {\n    if (this.searchTerms && Array.isArray(this.searchTerms)) {\n      for (let i = 0; i < this.searchTerms.length; i++) {\n        if (this.searchTerms[i] && this.searchTerms[i] === value) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n} from './../models/index';\nimport { Injectable } from '@angular/core';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n@Injectable()\nexport class SelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor(private translate: TranslateService) {}\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\n      searchTerm = `${searchTerm}`;\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString();\n\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\n\n    // step 3, subscribe to the change event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterElm.change((e: any) => {\n      const value = e && e.target && e.target.value || '';\n      if (!value || value === '') {\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\n        this.$filterElm.removeClass('filled');\n      } else {\n        this.$filterElm.addClass('filled');\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\n      }\n    });\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm) {\n      this.$filterElm.val('');\n      this.$filterElm.trigger('change');\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm | SearchTerm[]) {\n    if (values) {\n      this.$filterElm.val(values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  private buildTemplateHtmlString() {\n    if (!this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the Select Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.select, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    const optionCollection = this.columnDef.filter.collection || [];\n    const labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    const valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let options = '';\n    optionCollection.forEach((option: any) => {\n      if (!option || (option[labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.select, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n      const labelKey = option.labelKey || option[labelName];\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n      options += `<option value=\"${option[valueName]}\">${textLabel}</option>`;\n    });\n    return `<select class=\"form-control search-filter\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    const $filterElm = $(filterTemplate);\n    const searchTermInput = (searchTerm || '') as string;\n\n    $filterElm.val(searchTermInput);\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\n    $filterElm.data('columnId', this.columnDef.id);\n\n    // append the new DOM element to the header row\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\n      $filterElm.appendTo($headerElm);\n    }\n\n    return $filterElm;\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport { Injectable } from '@angular/core';\nimport { CollectionService } from './../services/collection.service';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  MultipleSelectOption,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n  SelectOption,\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n@Injectable()\nexport class SingleSelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n  defaultOptions: MultipleSelectOption;\n  isFilled = false;\n  labelName: string;\n  valueName: string;\n  enableTranslateLabel = false;\n\n  constructor(private translate: TranslateService, private collectionService: CollectionService) {\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,  // input search term on top of the select option list\n      maxHeight: 200,\n      single: true,\n      onClose: () => {\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\n        let selectedItem = '';\n\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\n          selectedItem = selectedItems[0] || null;\n          this.isFilled = true;\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\n        } else {\n          this.isFilled = false;\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\n        }\n        this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: (selectedItem ? [selectedItem] : null) });\n      }\n    };\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms;\n\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let newCollection = this.columnDef.filter.collection || [];\n\n    // user might want to filter certain items of the collection\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\n      const filterBy = this.columnDef.filter.collectionFilterBy;\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\n      const sortBy = this.columnDef.filter.collectionSortBy;\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    // also when the search term is a boolean or a number, we will convert it to a string\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\n      searchTerm = `${searchTerm}`;\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString(newCollection || [], searchTerm);\n\n    // step 2, create the DOM Element of the filter & pre-load search term\n    this.createDomElement(filterTemplate);\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\n      // this.$filterElm = $(`#${this.$filterElm[0].id}`);\n      this.$filterElm.multipleSelect('setSelects', []);\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off().remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm | SearchTerm[]) {\n    if (values) {\n      values = Array.isArray(values) ? values : [values];\n      this.$filterElm.multipleSelect('setSelects', values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString(optionCollection: any[], searchTerm?: SearchTerm) {\n    let options = '';\n    optionCollection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.singleSelect, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const selected = (option[this.valueName] === searchTerm) ? 'selected' : '';\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n\n      // html text of each select option\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\n\n      // if there's a search term, we will add the \"filled\" class for styling purposes\n      if (selected) {\n        this.isFilled = true;\n      }\n    });\n\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * Subscribe to the onClose event and run the callback when that happens\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    this.$filterElm = $(filterTemplate);\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\n    }\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterElm.data('columnId', this.columnDef.id);\n\n    // append the new DOM element to the header row\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\n      this.$filterElm.appendTo($headerElm);\n    }\n\n    // merge options & attach multiSelect\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\n    this.$filterElm = this.$filterElm.multipleSelect(options);\n  }\n}\n",
    "import { Column, Filter } from './../models/index';\r\nimport { CompoundDateFilter } from './compoundDateFilter';\r\nimport { CompoundInputFilter } from './compoundInputFilter';\r\nimport { InputFilter } from './inputFilter';\r\nimport { MultipleSelectFilter } from './multipleSelectFilter';\r\nimport { SelectFilter } from './selectFilter';\r\nimport { SingleSelectFilter } from './singleSelectFilter';\r\n\r\nexport const Filters = {\r\n  /** Default Filter, input type text filter with a magnifying glass placeholder */\r\n  input: InputFilter,\r\n\r\n  /** Multiple Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  multipleSelect: MultipleSelectFilter,\r\n\r\n  /** Single Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  singleSelect: SingleSelectFilter,\r\n\r\n  /** Select filter, which uses native DOM element select */\r\n  select: SelectFilter,\r\n\r\n  /** Compound Date Filter (compound of Operator + Date picker) */\r\n  compoundDate: CompoundDateFilter,\r\n\r\n  /** Compound Input Filter (compound of Operator + Input) */\r\n  compoundInput: CompoundInputFilter,\r\n};\r\n",
    "import { DelimiterType, FileType, GridOption } from './models/index';\r\nimport { Filters } from './filters/index';\r\n\r\n/**\r\n * Options that can be passed to the Bootstrap-Datetimepicker directly\r\n */\r\nexport const GlobalGridOptions: GridOption = {\r\n  alwaysShowVerticalScroll: true,\r\n  autoEdit: false,\r\n  asyncEditorLoading: false,\r\n  autoFitColumnsOnFirstLoad: true,\r\n  autoResize: {\r\n    bottomPadding: 20,\r\n    minHeight: 180,\r\n    minWidth: 300,\r\n    sidePadding: 0\r\n  },\r\n  cellHighlightCssClass: 'slick-cell-modified',\r\n  checkboxSelector: {\r\n    cssClass: 'slick-cell-checkboxsel'\r\n  },\r\n  columnPicker: {\r\n    hideForceFitButton: false,\r\n    hideSyncResizeButton: true\r\n  },\r\n  datasetIdPropertyName: 'id',\r\n  defaultFilterPlaceholder: '&#128269;',\r\n  defaultFilter: Filters.input,\r\n  editable: false,\r\n  enableAutoResize: true,\r\n  enableCellNavigation: false,\r\n  enableColumnPicker: true,\r\n  enableColumnReorder: true,\r\n  enableExport: true,\r\n  enableGridMenu: true,\r\n  enableHeaderMenu: true,\r\n  enableMouseHoverHighlightRow: true,\r\n  enableSorting: true,\r\n  enableTextSelectionOnCells: true,\r\n  explicitInitialization: true,\r\n  exportOptions: {\r\n    delimiter: DelimiterType.comma,\r\n    exportWithFormatter: false,\r\n    filename: 'export',\r\n    format: FileType.csv,\r\n    groupingAggregatorRowText: '',\r\n    sanitizeDataExport: false,\r\n    useUtf8WithBom: true\r\n  },\r\n  forceFitColumns: false,\r\n  gridMenu: {\r\n    hideClearAllFiltersCommand: false,\r\n    hideClearAllSortingCommand: false,\r\n    hideExportCsvCommand: false,\r\n    hideExportTextDelimitedCommand: true,\r\n    hideForceFitButton: false,\r\n    hideRefreshDatasetCommand: false,\r\n    hideSyncResizeButton: true,\r\n    hideToggleFilterCommand: false,\r\n    iconCssClass: 'fa fa-bars',\r\n    iconClearAllFiltersCommand: 'fa fa-filter text-danger',\r\n    iconClearAllSortingCommand: 'fa fa-unsorted text-danger',\r\n    iconExportCsvCommand: 'fa fa-download',\r\n    iconExportTextDelimitedCommand: 'fa fa-download',\r\n    iconRefreshDatasetCommand: 'fa fa-refresh',\r\n    iconToggleFilterCommand: 'fa fa-random',\r\n    menuWidth: 16,\r\n    resizeOnShowHeaderRow: true\r\n  },\r\n  headerMenu: {\r\n    autoAlign: true,\r\n    autoAlignOffset: 12,\r\n    minWidth: 140,\r\n    iconSortAscCommand: 'fa fa-sort-asc',\r\n    iconSortDescCommand: 'fa fa-sort-desc',\r\n    iconColumnHideCommand: 'fa fa-times',\r\n    hideColumnHideCommand: false,\r\n    hideSortCommands: false\r\n  },\r\n  headerRowHeight: 35,\r\n  multiColumnSort: true,\r\n  numberedMultiColumnSort: true,\r\n  tristateMultiColumnSort: false,\r\n  sortColNumberInSeparateSpan: true,\r\n  suppressActiveCellChangeOnEdit: true,\r\n  pagination: {\r\n    pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\r\n    pageSize: 25,\r\n    totalItems: 0\r\n  },\r\n  rowHeight: 35,\r\n  showHeaderRow: false,\r\n  topPanelHeight: 35\r\n};\r\n",
    "import { GlobalGridOptions } from './global-grid-options';\r\n\r\nexport class SlickgridConfig {\r\n  options: any;\r\n\r\n  constructor() {\r\n    this.options = GlobalGridOptions;\r\n  }\r\n}\r\n",
    "import { Injector, Injectable } from '@angular/core';\r\nimport { Filter } from '../models/filter.interface';\r\nimport { ColumnFilter } from '../models';\r\nimport { SlickgridConfig } from '../slickgrid-config';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Filters } from '.';\r\nimport { CollectionService } from '../services/collection.service';\r\n\r\n@Injectable()\r\nexport class FilterFactory {\r\n  /**\r\n   * The options from the SlickgridConfig\r\n   */\r\n  private _options: any;\r\n\r\n  constructor(private injector: Injector, private config: SlickgridConfig, private translate: TranslateService, private collectionService: CollectionService) {\r\n    this._options = this.config.options;\r\n  }\r\n\r\n  // Uses the User model to create a new User\r\n  createFilter(columnFilter: ColumnFilter | undefined): Filter | undefined {\r\n    let filter: Filter | undefined;\r\n\r\n    if (columnFilter && columnFilter.model) {\r\n      // the model either needs to be retrieved or is already instantiated\r\n      // filter = typeof columnFilter.model === 'function' ? this.injector.get(columnFilter.model) : columnFilter.model;\r\n      const filterInstance = columnFilter.model;\r\n      const filterName = typeof columnFilter.model === 'function' ? filterInstance.name : '';\r\n/*\r\n      if (filterName) {\r\n        switch (filterName) {\r\n          case 'InputFilter':\r\n            filter = new Filters.input();\r\n            break;\r\n          case 'SelectFilter':\r\n            filter = new Filters.select(this.translate);\r\n            break;\r\n          case 'MultipleSelectFilter':\r\n            filter = new Filters.multipleSelect(this.translate, this.collectionService);\r\n            break;\r\n          case 'SingleSelectFilter':\r\n            filter = new Filters.singleSelect(this.translate, this.collectionService);\r\n            break;\r\n          case 'CompoundDateFilter':\r\n            filter = new Filters.compoundDate(this.translate);\r\n            break;\r\n          case 'CompoundInputFilter':\r\n            filter = new Filters.compoundInput(this.translate);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      } else {\r\n        filter = columnFilter.model;\r\n      }*/\r\n      // filter = typeof columnFilter.model === 'function' ? this.injector.get(this.translate, this.collectionService) : columnFilter.model;\r\n      filter = typeof columnFilter.model === 'function' ? new columnFilter.model(this.translate, this.collectionService) : columnFilter.model;\r\n    }\r\n\r\n    // fallback to the default filter\r\n    if (!filter && this._options.defaultFilter) {\r\n      // filter = this.injector.get(this._options.defaultFilter);\r\n      filter = new this._options.defaultFilter(this.translate, this.collectionService);\r\n    }\r\n\r\n    return filter;\r\n  }\r\n\r\n  private createInjector(service: any) {\r\n    const injector = Injector.create([{provide: service, deps: [TranslateService]}]);\r\n    // let injector = ReflectiveInjector.resolveAndCreate([service]);\r\n    // injector = injector.resolveAndCreateChild([service]);\r\n    return injector.get(service);\r\n  }\r\n}\r\n",
    "import { Component, Injectable } from '@angular/core';\nimport { castToPromise } from './utilities';\nimport { FilterConditions } from './../filter-conditions';\nimport {\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  Filter,\n  FilterArguments,\n  FilterCallbackArg,\n  FieldType,\n  GridOption,\n  OperatorType,\n  CurrentFilter,\n  SearchTerm,\n  SlickEvent,\n  OperatorString\n} from './../models/index';\nimport { FilterFactory } from '../filters/filterFactory';\nimport { Subject } from 'rxjs/Subject';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class FilterService {\n  private _eventHandler = new Slick.EventHandler();\n  private _slickSubscriber: SlickEvent;\n  private _filters: any[] = [];\n  private _columnFilters: ColumnFilters = {};\n  private _dataView: any;\n  private _grid: any;\n  private _onFilterChangedOptions: any;\n  onFilterChanged = new Subject<CurrentFilter[]>();\n  onFilterCleared = new Subject<boolean>();\n\n  constructor(private filterFactory: FilterFactory) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any): void {\n    this._grid = grid;\n  }\n\n  /**\n   * Attach a backend filter hook to the grid\n   * @param grid SlickGrid Grid object\n   */\n  attachBackendOnFilter(grid: any) {\n    this._filters = [];\n    this._slickSubscriber = new Slick.Event();\n\n    // subscribe to the SlickGrid event and call the backend execution\n    this._slickSubscriber.subscribe(this.attachBackendOnFilterSubscribe.bind(this));\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  async attachBackendOnFilterSubscribe(event: Event, args: any) {\n    if (!args || !args.grid) {\n      throw new Error('Something went wrong when trying to attach the \"attachBackendOnFilterSubscribe(event, args)\" function, it seems that \"args\" is not populated correctly');\n    }\n    const backendApi = this._gridOptions.backendServiceApi;\n    if (!backendApi || !backendApi.process || !backendApi.service) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    // run a preProcess callback if defined\n    if (backendApi.preProcess) {\n      backendApi.preProcess();\n    }\n\n    // call the service to get a query back\n    const query = await backendApi.service.processOnFilterChanged(event, args);\n\n    // emit an onFilterChanged event\n    if (args && !args.clearFilterTriggered) {\n      this.emitFilterChanged('remote');\n    }\n\n    // the process could be an Observable (like HttpClient) or a Promise\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n    const observableOrPromise = backendApi.process(query);\n    const processResult = await castToPromise(observableOrPromise);\n\n    // from the result, call our internal post process to update the Dataset and Pagination info\n    if (processResult && backendApi.internalPostProcess) {\n      backendApi.internalPostProcess(processResult);\n    }\n\n    // send the response process to the postProcess callback\n    if (backendApi.postProcess !== undefined) {\n      backendApi.postProcess(processResult);\n    }\n  }\n\n  /**\n   * Attach a local filter hook to the grid\n   * @param grid SlickGrid Grid object\n   * @param dataView\n   */\n  attachLocalOnFilter(grid: any, dataView: any) {\n    this._filters = [];\n    this._dataView = dataView;\n    this._slickSubscriber = new Slick.Event();\n\n    dataView.setFilterArgs({ columnFilters: this._columnFilters, grid: this._grid });\n    dataView.setFilter(this.customLocalFilter.bind(this, dataView));\n\n    this._slickSubscriber.subscribe((e: any, args: any) => {\n      const columnId = args.columnId;\n      if (columnId != null) {\n        dataView.refresh();\n      }\n      if (args && !args.clearFilterTriggered) {\n        this.emitFilterChanged('local');\n      }\n    });\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  /** Clear the search filters (below the column titles) */\n  clearFilters() {\n    this._filters.forEach((filter: Filter) => {\n      if (filter && filter.clear) {\n        // clear element and trigger a change\n        filter.clear();\n      }\n    });\n\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to clear columnFilter (without looping through) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // we also need to refresh the dataView and optionally the grid (it's optional since we use DataView)\n    if (this._dataView) {\n      this._dataView.refresh();\n      this._grid.invalidate();\n      this._grid.render();\n    }\n\n    // emit an event when filters are all cleared\n    this.onFilterCleared.next(true);\n  }\n\n  customLocalFilter(dataView: any, item: any, args: any) {\n    for (const columnId of Object.keys(args.columnFilters)) {\n      const columnFilter = args.columnFilters[columnId];\n      const columnIndex = args.grid.getColumnIndex(columnId);\n      const columnDef = args.grid.getColumns()[columnIndex];\n      if (!columnDef) {\n        return false;\n      }\n      const fieldType = columnDef.type || FieldType.string;\n      const filterSearchType = (columnDef.filterSearchType) ? columnDef.filterSearchType : null;\n\n      let cellValue = item[columnDef.queryField || columnDef.queryFieldFilter || columnDef.field];\n\n      // if we find searchTerms use them but make a deep copy so that we don't affect original array\n      // we might have to overwrite the value(s) locally that are returned\n      // e.g: we don't want to operator within the search value, since it will fail filter condition check trigger afterward\n      const searchValues = (columnFilter && columnFilter.searchTerms) ? [...columnFilter.searchTerms] : null;\n\n      let fieldSearchValue = (Array.isArray(searchValues) && searchValues.length === 1) ? searchValues[0] : '';\n      fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n\n      const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n      let operator = columnFilter.operator || ((matches) ? matches[1] : '');\n      const searchTerm = (!!matches) ? matches[2] : '';\n      const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n\n      if (searchValues && searchValues.length > 1) {\n        fieldSearchValue = searchValues.join(',');\n      } else if (typeof fieldSearchValue === 'string') {\n        // escaping the search value\n        fieldSearchValue = fieldSearchValue.replace(`'`, `''`); // escape single quotes by doubling them\n        if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\n          operator = (operator === '*' || operator === '*z') ? OperatorType.endsWith : OperatorType.startsWith;\n        }\n      }\n\n      // no need to query if search value is empty\n      if (searchTerm === '' && (!searchValues || (Array.isArray(searchValues) && searchValues.length === 0))) {\n        return true;\n      }\n\n      // if search value has a regex match we will only keep the value without the operator\n      // in this case we need to overwrite the returned search values to truncate operator from the string search\n      if (Array.isArray(matches) && matches.length >= 1 && (Array.isArray(searchValues) && searchValues.length === 1)) {\n        searchValues[0] = searchTerm;\n      }\n\n      // filter search terms should always be string type (even though we permit the end user to input numbers)\n      // so make sure each term are strings, if user has some default search terms, we will cast them to string\n      if (searchValues && Array.isArray(searchValues)) {\n        for (let k = 0, ln = searchValues.length; k < ln; k++) {\n          // make sure all search terms are strings\n          searchValues[k] = ((searchValues[k] === undefined || searchValues[k] === null) ? '' : searchValues[k]) + '';\n        }\n      }\n\n      // when using localization (i18n), we should use the formatter output to search as the new cell value\n      if (columnDef && columnDef.params && columnDef.params.useFormatterOuputToFilter) {\n        const rowIndex = (dataView && typeof dataView.getIdxById === 'function') ? dataView.getIdxById(item.id) : 0;\n        cellValue = columnDef.formatter(rowIndex, columnIndex, cellValue, columnDef, item, this._grid);\n      }\n\n      // make sure cell value is always a string\n      if (typeof cellValue === 'number') {\n        cellValue = cellValue.toString();\n      }\n\n      const conditionOptions = {\n        fieldType,\n        searchTerms: searchValues,\n        cellValue,\n        operator,\n        cellValueLastChar: lastValueChar,\n        filterSearchType\n      };\n\n      if (!FilterConditions.executeMappedCondition(conditionOptions)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  dispose() {\n    this.disposeColumnFilters();\n\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n\n    // unsubscribe local event\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\n      this._slickSubscriber.unsubscribe();\n    }\n  }\n\n  /**\n   * Dispose of the filters, since it's a singleton, we don't want to affect other grids with same columns\n   */\n  disposeColumnFilters() {\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to make columnFilter an empty (without looping) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // also destroy each Filter instances\n    this._filters.forEach((filter, index) => {\n      if (filter && filter.destroy) {\n        filter.destroy(true);\n      }\n    });\n  }\n\n  getColumnFilters() {\n    return this._columnFilters;\n  }\n\n  getCurrentLocalFilters(): CurrentFilter[] {\n    const currentFilters: CurrentFilter[] = [];\n    if (this._columnFilters) {\n      for (const colId of Object.keys(this._columnFilters)) {\n        const columnFilter = this._columnFilters[colId];\n        const columnDef = columnFilter.columnDef;\n        const filter = { columnId: colId || '' } as CurrentFilter;\n\n        if (columnFilter && columnFilter.searchTerms) {\n          filter.searchTerms = columnFilter.searchTerms;\n        }\n        if (columnFilter.operator) {\n          filter.operator = columnFilter.operator;\n        }\n        if (Array.isArray(filter.searchTerms) && filter.searchTerms.length > 0 && filter.searchTerms[0] !== '') {\n          currentFilters.push(filter);\n        }\n      }\n    }\n    return currentFilters;\n  }\n\n  callbackSearchEvent(e: Event | undefined, args: FilterCallbackArg) {\n    if (args) {\n      const searchTerm = ((e && e.target) ? (e.target as HTMLInputElement).value : undefined);\n      const searchTerms = (args.searchTerms && Array.isArray(args.searchTerms)) ? args.searchTerms : (searchTerm ? [searchTerm] : undefined);\n      const columnDef = args.columnDef || null;\n      const columnId = columnDef ? (columnDef.id || '') : '';\n      const operator = args.operator || undefined;\n\n      if (!searchTerms || (Array.isArray(searchTerms) && searchTerms.length === 0)) {\n        // delete the property from the columnFilters when it becomes empty\n        // without doing this, it would leave an incorrect state of the previous column filters when filtering on another column\n        delete this._columnFilters[columnId];\n      } else {\n        const colId = '' + columnId as string;\n        const colFilter: ColumnFilter = {\n          columnId: colId,\n          columnDef,\n          searchTerms,\n        };\n        if (operator) {\n          colFilter.operator = operator;\n        }\n        this._columnFilters[colId] = colFilter;\n      }\n\n      this.triggerEvent(this._slickSubscriber, {\n        clearFilterTriggered: args && args.clearFilterTriggered,\n        columnId,\n        columnDef: args.columnDef || null,\n        columnFilters: this._columnFilters,\n        operator,\n        searchTerms,\n        serviceOptions: this._onFilterChangedOptions,\n        grid: this._grid\n      }, e);\n    }\n  }\n\n  addFilterTemplateToHeaderRow(args: { column: Column; grid: any; node: any }) {\n    const columnDef = args.column;\n    const columnId = columnDef.id || '';\n\n    if (columnDef && columnId !== 'selector' && columnDef.filterable) {\n      let searchTerms: SearchTerm[] | undefined;\n      let operator: OperatorString | OperatorType;\n      const filter: Filter | undefined = this.filterFactory.createFilter(args.column.filter);\n      operator = (columnDef && columnDef.filter && columnDef.filter.operator) || (filter && filter.operator) || undefined;\n\n      if (this._columnFilters[columnDef.id]) {\n        searchTerms = this._columnFilters[columnDef.id].searchTerms || undefined;\n        operator = this._columnFilters[columnDef.id].operator || undefined;\n      } else if (columnDef.filter) {\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // because of that we need to first get searchTerm(s) from the columnFilters (that is what the user last entered)\n        searchTerms = columnDef.filter.searchTerms || undefined;\n        this.updateColumnFilters(searchTerms, columnDef, operator);\n      }\n\n      const filterArguments: FilterArguments = {\n        grid: this._grid,\n        operator,\n        searchTerms,\n        columnDef,\n        callback: this.callbackSearchEvent.bind(this)\n      };\n\n      if (filter) {\n        filter.init(filterArguments);\n        const filterExistIndex = this._filters.findIndex((filt) => filter.columnDef.name === filt.columnDef.name);\n\n        // add to the filters arrays or replace it when found\n        if (filterExistIndex === -1) {\n          this._filters.push(filter);\n        } else {\n          this._filters[filterExistIndex] = filter;\n        }\n\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // we need to also set again the values in the DOM elements if the values were set by a searchTerm(s)\n        if (searchTerms && filter.setValues) {\n          filter.setValues(searchTerms);\n        }\n      }\n    }\n  }\n\n  /**\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\n   * Other services, like Pagination, can then subscribe to it.\n   * @param sender\n   */\n  emitFilterChanged(sender: 'local' | 'remote') {\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\n      let currentFilters: CurrentFilter[] = [];\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentFilters) {\n        currentFilters = backendService.getCurrentFilters() as CurrentFilter[];\n      }\n      this.onFilterChanged.next(currentFilters);\n    } else if (sender === 'local') {\n      this.onFilterChanged.next(this.getCurrentLocalFilters());\n    }\n  }\n\n  /**\n   * When user passes an array of preset filters, we need to pre-populate each column filter searchTerm(s)\n   * The process is to loop through the preset filters array, find the associated column from columnDefinitions and fill in the filter object searchTerm(s)\n   * This is basically the same as if we would manually add searchTerm(s) to a column filter object in the column definition, but we do it programmatically.\n   * At the end of the day, when creating the Filter (DOM Element), it will use these searchTerm(s) so we can take advantage of that without recoding each Filter type (DOM element)\n   */\n  populateColumnFilterSearchTerms() {\n    if (this._gridOptions.presets && Array.isArray(this._gridOptions.presets.filters) && this._gridOptions.presets.filters.length > 0) {\n      const filters = this._gridOptions.presets.filters;\n      this._columnDefinitions.forEach((columnDef: Column) =>  {\n        // clear any columnDef searchTerms before applying Presets\n        if (columnDef.filter && columnDef.filter.searchTerms) {\n          delete columnDef.filter.searchTerms;\n        }\n\n        // from each presets, we will find the associated columnDef and apply the preset searchTerms & operator if there is\n        const columnPreset = filters.find((presetFilter: CurrentFilter) => {\n          return presetFilter.columnId === columnDef.id;\n        });\n        if (columnPreset && columnPreset.searchTerms && Array.isArray(columnPreset.searchTerms)) {\n          columnDef.filter = columnDef.filter || {};\n          columnDef.filter.operator = columnPreset.operator || columnDef.filter.operator || '';\n          columnDef.filter.searchTerms = columnPreset.searchTerms;\n        }\n      });\n    }\n  }\n\n  private updateColumnFilters(searchTerms: SearchTerm[] | undefined, columnDef: any, operator?: OperatorType | OperatorString) {\n    if (searchTerms && columnDef) {\n      // this._columnFilters.searchTerms = searchTerms;\n      this._columnFilters[columnDef.id] = {\n        columnId: columnDef.id,\n        columnDef,\n        searchTerms,\n        operator\n      };\n    }\n  }\n\n  private triggerEvent(slickEvent: any, args: any, e: any) {\n    slickEvent = slickEvent || new Slick.Event();\n\n    // event might have been created as a CustomEvent (e.g. CompoundDateFilter), without being a valid Slick.EventData.\n    // if so we will create a new Slick.EventData and merge it with that CustomEvent to avoid having SlickGrid errors\n    let event = e;\n    if (e && typeof e.isPropagationStopped !== 'function') {\n      event = $.extend({}, new Slick.EventData(), e);\n    }\n    slickEvent.notify(args, event, args.grid);\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  ExportOption,\n  FileType,\n  Formatter,\n  GridOption\n} from './../models/index';\nimport { addWhiteSpaces, htmlEntityDecode, sanitizeHtmlToText } from './../services/utilities';\nimport { Subject } from 'rxjs/Subject';\nimport { TextEncoder } from 'text-encoding-utf-8';\n\n// using external non-typed js libraries\ndeclare let Slick: any;\ndeclare let $: any;\n\nexport interface ExportColumnHeader {\n  key: string;\n  title: string;\n}\n\n@Injectable()\nexport class ExportService {\n  private _lineCarriageReturn = '\\n';\n  private _dataView: any;\n  private _grid: any;\n  private _exportQuoteWrapper: string;\n  private _columnHeaders: ExportColumnHeader[];\n  private _groupedHeaders: ExportColumnHeader[];\n  private _hasGroupedItems = false;\n  private _exportOptions: ExportOption;\n  onGridBeforeExportToFile = new Subject<boolean>();\n  onGridAfterExportToFile = new Subject<{ options: any }>();\n\n  constructor(private translate: TranslateService) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Export Service\n   * @param grid\n   * @param gridOptions\n   * @param dataView\n   */\n  init(grid: any, dataView: any): void {\n    this._grid = grid;\n    this._dataView = dataView;\n  }\n\n  /**\n   * Function to export the Grid result to an Excel CSV format using javascript for it to produce the CSV file.\n   * This is a WYSIWYG export to file output (What You See is What You Get)\n   *\n   * NOTES: The column position needs to match perfectly the JSON Object position because of the way we are pulling the data,\n   * which means that if any column(s) got moved in the UI, it has to be reflected in the JSON array output as well\n   *\n   * Example: exportToFile({ format: FileType.csv, delimiter: DelimiterType.comma })\n   */\n  exportToFile(options: ExportOption) {\n    this.onGridBeforeExportToFile.next(true);\n    this._exportOptions = $.extend(true, {}, this._gridOptions.exportOptions, options);\n\n    // get the CSV output from the grid data\n    const dataOutput = this.getDataOutput();\n\n    // trigger a download file\n    // wrap it into a setTimeout so that the EventAggregator has enough time to start a pre-process like showing a spinner\n    setTimeout(() => {\n      const downloadOptions = {\n        filename: `${this._exportOptions.filename}.${this._exportOptions.format}`,\n        csvContent: dataOutput,\n        format: this._exportOptions.format,\n        useUtf8WithBom: this._exportOptions.useUtf8WithBom\n      };\n      this.startDownloadFile(downloadOptions);\n      this.onGridAfterExportToFile.next({ options: downloadOptions });\n    }, 0);\n  }\n\n  // -----------------------\n  // Private functions\n  // -----------------------\n\n  getDataOutput(): string {\n    const columns = this._grid.getColumns() || [];\n    const delimiter = this._exportOptions.delimiter || '';\n    const format = this._exportOptions.format || '';\n    const groupByColumnHeader = this._exportOptions.groupingColumnHeaderTitle || this.translate.instant('GROUP_BY');\n\n    // a CSV needs double quotes wrapper, the other types do not need any wrapper\n    this._exportQuoteWrapper = (format === FileType.csv) ? '\"' : '';\n\n    // data variable which will hold all the fields data of a row\n    let outputDataString = '';\n\n    // get grouped column titles and if found, we will add a \"Group by\" column at the first column index\n    const grouping = this._dataView.getGrouping();\n    if (grouping && Array.isArray(grouping) && grouping.length > 0) {\n      this._hasGroupedItems = true;\n      outputDataString += `${groupByColumnHeader}` + delimiter;\n    } else {\n      this._hasGroupedItems = false;\n    }\n\n    // get all column headers\n    this._columnHeaders = this.getColumnHeaders(columns) || [];\n    if (this._columnHeaders && Array.isArray(this._columnHeaders) && this._columnHeaders.length > 0) {\n      // add the header row + add a new line at the end of the row\n      const outputHeaderTitles = this._columnHeaders.map((header) => {\n        return this._exportQuoteWrapper + header.title + this._exportQuoteWrapper;\n      });\n      outputDataString += (outputHeaderTitles.join(delimiter) + this._lineCarriageReturn);\n    }\n\n    // Populate the rest of the Grid Data\n    outputDataString += this.getAllGridRowData(columns, this._lineCarriageReturn);\n\n    return outputDataString;\n  }\n\n  /**\n   * Get all the grid row data and return that as an output string\n   */\n  getAllGridRowData(columns: Column[], lineCarriageReturn: string): string {\n    let outputDataString = '';\n    const lineCount = this._dataView.getLength();\n\n    // loop through all the grid rows of data\n    for (let rowNumber = 0; rowNumber < lineCount; rowNumber++) {\n      const itemObj = this._dataView.getItem(rowNumber);\n\n      if (itemObj != null) {\n        // Normal row (not grouped by anything) would have an ID which was predefined in the Grid Columns definition\n        if (itemObj.id != null) {\n          // get regular row item data\n          outputDataString += this.readRegularRowData(columns, rowNumber, itemObj);\n        } else if (this._hasGroupedItems && itemObj.__groupTotals === undefined) {\n          // get the group row\n          outputDataString += this.readGroupedTitleRow(itemObj) + this._exportOptions.delimiter;\n        } else if (itemObj.__groupTotals) {\n          // else if the row is a Group By and we have agreggators, then a property of '__groupTotals' would exist under that object\n          outputDataString += this.readGroupedTotalRow(columns, itemObj) + this._exportOptions.delimiter;\n        }\n        outputDataString += lineCarriageReturn;\n      }\n    }\n\n    return outputDataString;\n  }\n\n  /**\n   * Get all header titles and their keys, translate the title when required.\n   * @param columns of the grid\n   */\n  getColumnHeaders(columns: Column[]): ExportColumnHeader[] {\n    if (!columns || !Array.isArray(columns) || columns.length === 0) {\n      return null;\n    }\n    const columnHeaders = [];\n\n    // Populate the Column Header, pull the name defined\n    columns.forEach((columnDef) => {\n      const fieldName = (columnDef.headerKey) ? this.translate.instant(columnDef.headerKey) : columnDef.name;\n      const skippedField = columnDef.excludeFromExport || false;\n\n      // if column width is 0 then it's not evaluated since that field is considered hidden should not be part of the export\n      if ((columnDef.width ===  undefined || columnDef.width > 0) && !skippedField) {\n        columnHeaders.push({\n          key: columnDef.field || columnDef.id,\n          title: fieldName\n        });\n      }\n    });\n\n    return columnHeaders;\n  }\n\n  /**\n   * Get the data of a regular row (a row without grouping)\n   * @param row\n   * @param itemObj\n   */\n  readRegularRowData(columns: Column[], row: number, itemObj: any) {\n    let idx = 0;\n    let rowOutputString = '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n\n    for (let col = 0, ln = columns.length; col < ln; col++) {\n      const columnDef = columns[col];\n      const fieldId = columnDef.field || columnDef.id || '';\n\n      // skip excluded column\n      if (columnDef.excludeFromExport) {\n          continue;\n      }\n\n      // if we are grouping and are on 1st column index, we need to skip this column since it will be used later by the grouping text:: Group by [columnX]\n      if (this._hasGroupedItems && idx === 0) {\n        rowOutputString += `\"\"` + delimiter;\n      }\n\n      // does the user want to evaluate current column Formatter?\n      const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._exportOptions.exportWithFormatter;\n\n      // did the user provide a Custom Formatter for the export\n      const exportCustomFormatter: Formatter = (columnDef.exportCustomFormatter !== undefined) ? columnDef.exportCustomFormatter : undefined;\n\n      let itemData = '';\n\n      if (exportCustomFormatter) {\n        itemData = exportCustomFormatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\n      } else if (isEvaluatingFormatter && !!columnDef.formatter) {\n        itemData = columnDef.formatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\n      } else {\n        itemData = (itemObj[fieldId] === null || itemObj[fieldId] === undefined) ? '' : itemObj[fieldId];\n      }\n\n      // does the user want to sanitize the output data (remove HTML tags)?\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n        itemData = sanitizeHtmlToText(itemData);\n      }\n\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n      if (format === FileType.csv) {\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n      }\n\n      // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n      // to cancel that effect we can had = in front, ex: =\"1E06\"\n      const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\n\n      rowOutputString += keepAsStringWrapper + exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\n      idx++;\n    }\n\n    return rowOutputString;\n  }\n\n  /**\n   * Get the grouped title(s), for example if we grouped by salesRep, the returned result would be:: 'Sales Rep'\n   * @param itemObj\n   */\n  readGroupedTitleRow(itemObj: any) {\n    let groupName = sanitizeHtmlToText(itemObj.title);\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n\n    groupName = addWhiteSpaces(5 * itemObj.level) + groupName;\n\n    if (format === FileType.csv) {\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n      groupName = groupName.toString().replace(/\"/gi, `\"\"`);\n    }\n\n    // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n    // to cancel that effect we can had = in front, ex: =\"1E06\"\n    // const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\n\n    return /*keepAsStringWrapper +*/ exportQuoteWrapper + ' ' + groupName + exportQuoteWrapper + delimiter;\n  }\n\n  /**\n   * Get the grouped totals, these are set by Slick Aggregators.\n   * For example if we grouped by \"salesRep\" and we have a Sum Aggregator on \"sales\", then the returned output would be:: [\"Sum 123$\"]\n   * @param itemObj\n   */\n  readGroupedTotalRow(columns: Column[], itemObj: any) {\n    let exportExponentialWrapper = '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n    const groupingAggregatorRowText = this._exportOptions.groupingAggregatorRowText || '';\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n    let output = `${exportQuoteWrapper}${groupingAggregatorRowText}${exportQuoteWrapper}${delimiter}`;\n\n    columns.forEach((columnDef) => {\n      let itemData = '';\n\n      // if there's a groupTotalsFormatter, we will re-run it to get the exact same output as what is shown in UI\n      if (columnDef.groupTotalsFormatter) {\n        itemData = columnDef.groupTotalsFormatter(itemObj, columnDef);\n      }\n\n      // does the user want to sanitize the output data (remove HTML tags)?\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n        itemData = sanitizeHtmlToText(itemData);\n      }\n\n      if (format === FileType.csv) {\n        // when CSV we also need to escape double quotes twice, so a double quote \" becomes 2x double quotes \"\"\n        // and if we have a text of (number)E(number),\n        // we don't want excel to transform it into exponential (1.0E06) to cancel that effect we can had = in front, ex: =\"1E06\"\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n        exportExponentialWrapper = (itemData.match(/^\\s*\\d+E\\d+\\s*$/i)) ? '=' : '';\n      }\n      output += exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\n    });\n\n    return output;\n  }\n\n  /**\n   * Triggers download file with file format.\n   * IE(6-10) are not supported\n   * All other browsers will use plain javascript on client side to produce a file download.\n   * @param options\n   */\n  startDownloadFile(options: { filename: string, csvContent: any, format: FileType | string, useUtf8WithBom: boolean }): void {\n    // IE(6-10) don't support javascript download and our service doesn't support either so throw an error, we have to make a round trip to the Web Server for exporting\n    if (navigator.appName === 'Microsoft Internet Explorer') {\n      throw new Error('Microsoft Internet Explorer 6 to 10 do not support javascript export to CSV. Please upgrade your browser.');\n    }\n\n    // set the correct MIME type\n    const mimeType = (options.format === FileType.csv) ? 'text/csv' : 'text/plain';\n\n    // make sure no html entities exist in the data\n    const csvContent = htmlEntityDecode(options.csvContent);\n\n    // dealing with Excel CSV export and UTF-8 is a little tricky.. We will use Option #2 to cover older Excel versions\n    // Option #1: we need to make Excel knowing that it's dealing with an UTF-8, A correctly formatted UTF8 file can have a Byte Order Mark as its first three octets\n    // reference: http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\n    // Option#2: use a 3rd party extension to javascript encode into UTF-16\n    let outputData: Uint8Array | string;\n    if (options.format === FileType.csv) {\n      outputData = new TextEncoder('utf-8').encode(csvContent);\n    } else {\n      outputData = csvContent;\n    }\n\n    // create a Blob object for the download\n    const blob = new Blob([options.useUtf8WithBom ? '\\uFEFF' : '', outputData], {\n      type: `${mimeType};charset=utf-8;`\n    });\n\n    // when using IE/Edge, then use different download call\n    if (typeof navigator.msSaveOrOpenBlob === 'function') {\n      navigator.msSaveOrOpenBlob(blob, options.filename);\n    } else {\n      // this trick will generate a temp <a /> tag\n      // the code will then trigger a hidden click for it to start downloading\n      const link = document.createElement('a');\n      const csvUrl = URL.createObjectURL(blob);\n\n      link.textContent = 'download';\n      link.href = csvUrl;\n      link.setAttribute('download', options.filename);\n\n      // set the visibility to hidden so there is no effect on your web-layout\n      link.style.visibility = 'hidden';\n\n      // this part will append the anchor tag, trigger a click (for download to start) and finally remove the tag once completed\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n}\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\r\nimport { castToPromise } from './utilities';\r\nimport {\r\n  CellArgs,\r\n  Column,\r\n  ColumnSort,\r\n  CurrentSorter,\r\n  FieldType,\r\n  GridOption,\r\n  SlickEvent,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\nimport { Sorters } from './../sorters';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// using external non-typed js libraries\r\ndeclare var Slick: any;\r\n\r\nexport class SortService {\r\n  private _currentLocalSorters: CurrentSorter[] = [];\r\n  private _eventHandler: any = new Slick.EventHandler();\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _slickSubscriber: SlickEvent;\r\n  private _isBackendGrid = false;\r\n  onSortChanged = new Subject<CurrentSorter[]>();\r\n  onSortCleared = new Subject<boolean>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  /**\r\n   * Attach a backend sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param dataView SlickGrid DataView object\r\n   */\r\n  attachBackendOnSort(grid: any, dataView: any) {\r\n    this._isBackendGrid = true;\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = grid.onSort;\r\n\r\n    // subscribe to the SlickGrid event and call the backend execution\r\n    this._slickSubscriber.subscribe(this.onBackendSortChanged.bind(this));\r\n  }\r\n\r\n  async onBackendSortChanged(event: Event, args: any) {\r\n    if (!args || !args.grid) {\r\n      throw new Error('Something went wrong when trying to attach the \"onBackendSortChanged(event, args)\" function, it seems that \"args\" is not populated correctly');\r\n    }\r\n    const gridOptions: GridOption = args.grid.getOptions() || {};\r\n    const backendApi = gridOptions.backendServiceApi;\r\n\r\n    if (!backendApi || !backendApi.process || !backendApi.service) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n    if (backendApi.preProcess) {\r\n      backendApi.preProcess();\r\n    }\r\n    const query = backendApi.service.processOnSortChanged(event, args);\r\n    this.emitSortChanged('remote');\r\n\r\n    // the process could be an Observable (like HttpClient) or a Promise\r\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n    const observableOrPromise = backendApi.process(query);\r\n    const processResult = await castToPromise(observableOrPromise);\r\n\r\n    // from the result, call our internal post process to update the Dataset and Pagination info\r\n    if (processResult && backendApi.internalPostProcess) {\r\n      backendApi.internalPostProcess(processResult);\r\n    }\r\n\r\n    // send the response process to the postProcess callback\r\n    if (backendApi.postProcess) {\r\n      backendApi.postProcess(processResult);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attach a local sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param gridOptions Grid Options object\r\n   * @param dataView\r\n   */\r\n  attachLocalOnSort(grid: any, dataView: any) {\r\n    this._isBackendGrid = false;\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = grid.onSort;\r\n\r\n    this._slickSubscriber.subscribe((e: any, args: any) => {\r\n      // multiSort and singleSort are not exactly the same, but we want to structure it the same for the (for loop) after\r\n      // also to avoid having to rewrite the for loop in the sort, we will make the singleSort an array of 1 object\r\n      const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({sortAsc: args.sortAsc, sortCol: args.sortCol});\r\n\r\n      // keep current sorters\r\n      this._currentLocalSorters = []; // reset current local sorters\r\n      if (Array.isArray(sortColumns)) {\r\n        sortColumns.forEach((sortColumn: { sortCol: Column, sortAsc: number }) => {\r\n          if (sortColumn.sortCol) {\r\n            this._currentLocalSorters.push({\r\n              columnId: sortColumn.sortCol.id,\r\n              direction: sortColumn.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      this.onLocalSortChanged(grid, dataView, sortColumns);\r\n      this.emitSortChanged('local');\r\n    });\r\n  }\r\n\r\n  clearSorting() {\r\n    if (this._grid && this._gridOptions && this._dataView) {\r\n      // remove any sort icons (this setSortColumns function call really does only that)\r\n      this._grid.setSortColumns([]);\r\n\r\n      // we also need to trigger a sort change\r\n      // for a backend grid, we will trigger a backend sort changed with an empty sort columns array\r\n      // however for a local grid, we need to pass a sort column and so we will sort by the 1st column\r\n      if (this._isBackendGrid) {\r\n        this.onBackendSortChanged(undefined, { grid: this._grid, sortCols: [] });\r\n      } else {\r\n        if (this._columnDefinitions && Array.isArray(this._columnDefinitions)) {\r\n          this.onLocalSortChanged(this._grid, this._dataView, new Array({sortAsc: true, sortCol: this._columnDefinitions[0] }));\r\n        }\r\n      }\r\n    }\r\n    // set current sorter to empty & emit a sort changed event\r\n    this._currentLocalSorters = [];\r\n\r\n    // emit an event when filters are all cleared\r\n    this.onSortCleared.next(true);\r\n  }\r\n\r\n  getCurrentLocalSorters(): CurrentSorter[] {\r\n    return this._currentLocalSorters;\r\n  }\r\n\r\n  /**\r\n   * Get column sorts,\r\n   * If a column is passed as an argument, we won't add this column to our output array since it is already in the array\r\n   * We want to know the sort prior to calling the next sorting command\r\n   */\r\n  getPreviousColumnSorts(columnId?: string) {\r\n    // getSortColumns() only returns sortAsc & columnId, we want the entire column definition\r\n    const oldSortColumns = this._grid.getSortColumns();\r\n\r\n    // get the column definition but only keep column which are not equal to our current column\r\n    const sortedCols = oldSortColumns.reduce((cols, col) => {\r\n      if (!columnId || col.columnId !== columnId) {\r\n        cols.push({ sortCol: this._columnDefinitions[this._grid.getColumnIndex(col.columnId)], sortAsc: col.sortAsc });\r\n      }\r\n      return cols;\r\n    }, []);\r\n\r\n    return sortedCols;\r\n  }\r\n\r\n  /**\r\n   * load any presets if there are any\r\n   * @param grid\r\n   * @param dataView\r\n   */\r\n  loadLocalPresets(grid: any, dataView: any) {\r\n    const sortCols: ColumnSort[] = [];\r\n    this._currentLocalSorters = []; // reset current local sorters\r\n    if (this._gridOptions && this._gridOptions.presets && this._gridOptions.presets.sorters) {\r\n      const sorters = this._gridOptions.presets.sorters;\r\n\r\n      sorters.forEach((presetSorting: CurrentSorter) => {\r\n        const gridColumn = this._columnDefinitions.find((col: Column) => col.id === presetSorting.columnId);\r\n        if (gridColumn) {\r\n          sortCols.push({\r\n            columnId: gridColumn.id,\r\n            sortAsc: ((presetSorting.direction.toUpperCase() === SortDirection.ASC) ? true : false),\r\n            sortCol: gridColumn\r\n          });\r\n\r\n          // keep current sorters\r\n          this._currentLocalSorters.push({\r\n            columnId: gridColumn.id + '',\r\n            direction: presetSorting.direction.toUpperCase() as SortDirectionString\r\n          });\r\n        }\r\n      });\r\n\r\n      if (sortCols.length > 0) {\r\n        this.onLocalSortChanged(grid, dataView, sortCols);\r\n        grid.setSortColumns(sortCols); // use this to add sort icon(s) in UI\r\n      }\r\n    }\r\n  }\r\n\r\n  onLocalSortChanged(grid: any, dataView: any, sortColumns: ColumnSort[]) {\r\n    dataView.sort((dataRow1: any, dataRow2: any) => {\r\n      for (let i = 0, l = sortColumns.length; i < l; i++) {\r\n        const columnSortObj = sortColumns[i];\r\n        if (columnSortObj && columnSortObj.sortCol) {\r\n          const sortDirection = columnSortObj.sortAsc ? SortDirectionNumber.asc : SortDirectionNumber.desc;\r\n          const sortField = columnSortObj.sortCol.queryField || columnSortObj.sortCol.queryFieldFilter || columnSortObj.sortCol.field;\r\n          const fieldType = columnSortObj.sortCol.type || FieldType.string;\r\n          const value1 = dataRow1[sortField];\r\n          const value2 = dataRow2[sortField];\r\n          const sortResult = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n          if (sortResult !== SortDirectionNumber.neutral) {\r\n            return sortResult;\r\n          }\r\n        }\r\n      }\r\n      return 0;\r\n    });\r\n    grid.invalidate();\r\n    grid.render();\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe local event\r\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\r\n      this._slickSubscriber.unsubscribe();\r\n    }\r\n\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n  }\r\n\r\n  /**\r\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\r\n   * Other services, like Pagination, can then subscribe to it.\r\n   * @param sender\r\n   */\r\n  emitSortChanged(sender: 'local' | 'remote') {\r\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      let currentSorters: CurrentSorter[] = [];\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        currentSorters = backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n      this.onSortChanged.next(currentSorters);\r\n    } else if (sender === 'local') {\r\n      this.onSortChanged.next(this.getCurrentLocalSorters());\r\n    }\r\n  }\r\n}\r\n",
    "export class Constants {\n  static TEXT_CLEAR_ALL_FILTERS = 'Clear All Filters';\n  static TEXT_CLEAR_ALL_SORTING = 'Clear All Sorting';\n  static TEXT_COLUMNS = 'Columns';\n  static TEXT_COMMANDS = 'Commands';\n  static TEXT_EXPORT_IN_CSV_FORMAT = 'Export in CSV format';\n  static TEXT_EXPORT_IN_TEXT_FORMAT = 'Export in Text format (Tab delimited)';\n  static TEXT_FORCE_FIT_COLUMNS = 'Force fit columns';\n  static TEXT_HIDE_COLUMN  = 'Hide Column';\n  static TEXT_REFRESH_DATASET = 'Refresh Dataset';\n  static TEXT_SYNCHRONOUS_RESIZE = 'Synchronous resize';\n  static TEXT_SORT_ASCENDING = 'Sort Ascending';\n  static TEXT_SORT_DESCENDING = 'Sort Descending';\n  static TEXT_TOGGLE_FILTER_ROW = 'Toggle Filter Row';\n}\n",
    "import { Injectable } from '@angular/core';\nimport {\n  CellArgs,\n  ColumnSort,\n  Column,\n  DelimiterType,\n  Extension,\n  FileType,\n  GraphqlResult,\n  GridMenu,\n  GridMenuItem,\n  GridOption,\n  HeaderButtonOnCommandArgs,\n  HeaderMenu,\n  HeaderMenuItem,\n  HeaderMenuOnCommandArgs,\n  HeaderMenuOnBeforeMenuShowArgs,\n} from './../models/index';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, sanitizeHtmlToText } from './../services/utilities';\nimport { FilterService } from './filter.service';\nimport { ExportService } from './export.service';\nimport { SortService } from './sort.service';\nimport { Constants } from '../constants';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class ControlAndPluginService {\n  private _dataView: any;\n  private _grid: any;\n  allColumns: Column[];\n  visibleColumns: Column[];\n  areVisibleColumnDifferent = false;\n  extensionList: Extension[] = [];\n  undoRedoBuffer: any;\n  userOriginalGridMenu: GridMenu;\n\n  // controls & plugins\n  autoTooltipPlugin: any;\n  cellExternalCopyManagerPlugin: any;\n  checkboxSelectorPlugin: any;\n  columnPickerControl: any;\n  gridMenuControl: any;\n  groupItemMetaProviderPlugin: any;\n  headerButtonsPlugin: any;\n  headerMenuPlugin: any;\n  rowSelectionPlugin: any;\n\n  constructor(\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private sortService: SortService,\n    private translate: TranslateService,\n  ) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  /** Get all columns (includes visible and non-visible) */\n  getAllColumns(): Column[] {\n    return this.allColumns || [];\n  }\n\n  /** Get only visible columns */\n  getVisibleColumns(): Column[] {\n    return this.visibleColumns || [];\n  }\n\n  /** Get all Extensions */\n  getAllExtensions(): Extension[] {\n    return this.extensionList;\n  }\n\n  /**\n   * Get an Extension by it's name\n   *  @param name\n   */\n  getExtensionByName(name: string): Extension | undefined {\n    return this.extensionList.find((p) => p.name === name);\n  }\n\n  /** Auto-resize all the column in the grid to fit the grid width */\n  autoResizeColumns() {\n    this._grid.autosizeColumns();\n  }\n\n  /**\n   * Attach/Create different Controls or Plugins after the Grid is created\n   * @param grid\n   * @param dataView\n   * @param groupItemMetadataProvider\n   */\n  attachDifferentControlOrPlugins(grid: any, dataView: any, groupItemMetadataProvider: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n    this.allColumns = this._columnDefinitions;\n    this.visibleColumns = this._columnDefinitions;\n\n    // make sure all columns are translated before creating ColumnPicker/GridMenu Controls\n    // this is to avoid having hidden columns not being translated on first load\n    if (this._gridOptions.enableTranslate) {\n      this.translateItems(this.allColumns, 'headerKey', 'name');\n    }\n\n    // Column Picker Control\n    if (this._gridOptions.enableColumnPicker) {\n      this.columnPickerControl = this.createColumnPicker(this._grid, this._columnDefinitions);\n      this.extensionList.push({ name: 'ColumnPicker', service: this.columnPickerControl });\n    }\n\n    // Grid Menu Control\n    if (this._gridOptions.enableGridMenu) {\n      // keep original user grid menu, useful when switching locale to translate\n      this.userOriginalGridMenu = { ...this._gridOptions.gridMenu };\n\n      this.gridMenuControl = this.createGridMenu(this._grid, this._columnDefinitions);\n      this.extensionList.push({ name: 'GridMenu', service: this.gridMenuControl });\n    }\n\n    // Auto Tooltip Plugin\n    if (this._gridOptions.enableAutoTooltip) {\n      this.autoTooltipPlugin = new Slick.AutoTooltips(this._gridOptions.autoTooltipOptions || {});\n      this._grid.registerPlugin(this.autoTooltipPlugin);\n      this.extensionList.push({ name: 'AutoTooltip', service: this.autoTooltipPlugin });\n    }\n\n    // Grouping Plugin\n    // register the group item metadata provider to add expand/collapse group handlers\n    if (this._gridOptions.enableGrouping) {\n      this.groupItemMetaProviderPlugin = groupItemMetadataProvider || {};\n      this._grid.registerPlugin(this.groupItemMetaProviderPlugin);\n      this.extensionList.push({ name: 'GroupItemMetaProvider', service: this.groupItemMetaProviderPlugin });\n    }\n\n    // Checkbox Selector Plugin\n    if (this._gridOptions.enableCheckboxSelector) {\n      // when enabling the Checkbox Selector Plugin, we need to also watch onClick events to perform certain actions\n      // the selector column has to be created BEFORE the grid (else it behaves oddly), but we can only watch grid events AFTER the grid is created\n      this._grid.registerPlugin(this.checkboxSelectorPlugin);\n      this.extensionList.push({ name: 'CheckboxSelector', service: this.checkboxSelectorPlugin });\n\n      // this also requires the Row Selection Model to be registered as well\n      if (!this.rowSelectionPlugin || !this._grid.getSelectionModel()) {\n        this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n        this._grid.setSelectionModel(this.rowSelectionPlugin);\n      }\n\n      // user might want to pre-select some rows\n      // the setTimeout is because of timing issue with styling (row selection happen but rows aren't highlighted properly)\n      if (this._gridOptions.preselectedRows && this.rowSelectionPlugin && this._grid.getSelectionModel()) {\n        setTimeout(() => this.checkboxSelectorPlugin.selectRows(this._gridOptions.preselectedRows), 0);\n      }\n    }\n\n    // Row Selection Plugin\n    if (!this._gridOptions.enableCheckboxSelector && this._gridOptions.enableRowSelection) {\n      this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n      this._grid.setSelectionModel(this.rowSelectionPlugin);\n    }\n\n    // Header Button Plugin\n    if (this._gridOptions.enableHeaderButton) {\n      this.headerButtonsPlugin = new Slick.Plugins.HeaderButtons(this._gridOptions.headerButton || {});\n      this._grid.registerPlugin(this.headerButtonsPlugin);\n      this.extensionList.push({ name: 'HeaderButtons', service: this.headerButtonsPlugin });\n      this.headerButtonsPlugin.onCommand.subscribe((e: Event, args: HeaderButtonOnCommandArgs) => {\n        if (this._gridOptions.headerButton && typeof this._gridOptions.headerButton.onCommand === 'function') {\n          this._gridOptions.headerButton.onCommand(e, args);\n        }\n      });\n    }\n\n    // Header Menu Plugin\n    if (this._gridOptions.enableHeaderMenu) {\n      this.headerMenuPlugin = this.createHeaderMenu(this._grid, this._dataView, this._columnDefinitions);\n    }\n\n    // Cell External Copy Manager Plugin (Excel Like)\n    if (this._gridOptions.enableExcelCopyBuffer) {\n      this.createUndoRedoBuffer();\n      this.hookUndoShortcutKey();\n      this.createCellExternalCopyManagerPlugin(this._grid);\n    }\n\n    // manually register other plugins\n    if (this._gridOptions.registerPlugins !== undefined) {\n      if (Array.isArray(this._gridOptions.registerPlugins)) {\n        this._gridOptions.registerPlugins.forEach((plugin) => {\n          this._grid.registerPlugin(plugin);\n          this.extensionList.push({ name: 'generic', service: plugin });\n        });\n      } else {\n        this._grid.registerPlugin(this._gridOptions.registerPlugins);\n        this.extensionList.push({ name: 'generic', service: this._gridOptions.registerPlugins });\n      }\n    }\n  }\n\n  /**\n   * Attach/Create different plugins before the Grid creation.\n   * For example the multi-select have to be added to the column definition before the grid is created to work properly\n   * @param columnDefinitions\n   * @param options\n   */\n  createCheckboxPluginBeforeGridCreation(columnDefinitions: Column[], options: GridOption) {\n    if (options.enableCheckboxSelector) {\n      if (!this.checkboxSelectorPlugin) {\n        this.checkboxSelectorPlugin = new Slick.CheckboxSelectColumn(options.checkboxSelector || {});\n      }\n      const selectionColumn: Column = this.checkboxSelectorPlugin.getColumnDefinition();\n      selectionColumn.excludeFromExport = true;\n      selectionColumn.excludeFromQuery = true;\n      selectionColumn.excludeFromHeaderMenu = true;\n      columnDefinitions.unshift(selectionColumn);\n    }\n  }\n\n  /** Create the Excel like copy manager */\n  createCellExternalCopyManagerPlugin(grid: any) {\n    let newRowIds = 0;\n    const pluginOptions = {\n      clipboardCommandHandler: (editCommand: any) => {\n        this.undoRedoBuffer.queueAndExecuteCommand.call(this.undoRedoBuffer, editCommand);\n      },\n      dataItemColumnValueExtractor: (item: any, columnDef: Column) => {\n        // when grid or cell is not editable, we will possibly evaluate the Formatter if it was passed\n        // to decide if we evaluate the Formatter, we will use the same flag from Export which is \"exportWithFormatter\"\n        if (!this._gridOptions.editable || !columnDef.editor) {\n          const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._gridOptions.exportOptions.exportWithFormatter;\n          if (columnDef.formatter && isEvaluatingFormatter) {\n            const formattedOutput = columnDef.formatter(0, 0, item[columnDef.field], columnDef, item, this._grid);\n            if (columnDef.sanitizeDataExport || (this._gridOptions.exportOptions && this._gridOptions.exportOptions.sanitizeDataExport)) {\n              return sanitizeHtmlToText(formattedOutput);\n            }\n            return formattedOutput;\n          }\n        }\n\n        // else use the default \"dataItemColumnValueExtractor\" from the plugin itself\n        // we can do that by setting back the getter with null\n        return null;\n      },\n      readOnlyMode: false,\n      includeHeaderWhenCopying: false,\n      newRowCreator: (count: number) => {\n        for (let i = 0; i < count; i++) {\n          const item = {\n            id: 'newRow_' + newRowIds++\n          };\n          grid.getData().addItem(item);\n        }\n      }\n    };\n\n    grid.setSelectionModel(new Slick.CellSelectionModel());\n    this.cellExternalCopyManagerPlugin = new Slick.CellExternalCopyManager(pluginOptions);\n    grid.registerPlugin(this.cellExternalCopyManagerPlugin);\n    this.extensionList.push({ name: 'CellExternalCopyManager', service: this.cellExternalCopyManagerPlugin });\n  }\n\n  /**\n   * Create the Column Picker and expose all the available hooks that user can subscribe (onColumnsChanged)\n   * @param grid\n   * @param columnDefinitions\n   */\n  createColumnPicker(grid: any, columnDefinitions: Column[]) {\n    // localization support for the picker\n    const forceFitTitle = this.getGridMenuTitleOutputString('forceFitTitle');\n    const syncResizeTitle = this.getGridMenuTitleOutputString('syncResizeTitle');\n\n    this._gridOptions.columnPicker = this._gridOptions.columnPicker || {};\n    this._gridOptions.columnPicker.forceFitTitle = this._gridOptions.columnPicker.forceFitTitle || forceFitTitle;\n    this._gridOptions.columnPicker.syncResizeTitle = this._gridOptions.columnPicker.syncResizeTitle || syncResizeTitle;\n\n    this.columnPickerControl = new Slick.Controls.ColumnPicker(columnDefinitions, grid, this._gridOptions);\n    if (grid && this._gridOptions.enableColumnPicker) {\n      this.columnPickerControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\n        if (this._gridOptions.columnPicker && typeof this._gridOptions.columnPicker.onColumnsChanged === 'function') {\n          this._gridOptions.columnPicker.onColumnsChanged(e, args);\n        }\n      });\n    }\n\n    return this.columnPickerControl;\n  }\n\n  /**\n   * Create (or re-create) Grid Menu and expose all the available hooks that user can subscribe (onCommand, onMenuClose, ...)\n   * @param grid\n   * @param columnDefinitions\n   */\n  createGridMenu(grid: any, columnDefinitions: Column[]) {\n    if (this._gridOptions && this._gridOptions.gridMenu) {\n      this._gridOptions.gridMenu = { ...this.getDefaultGridMenuOptions(), ...this._gridOptions.gridMenu };\n\n      // merge original user grid menu items with internal items\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\n      this._gridOptions.gridMenu.customItems = [...this.userOriginalGridMenu.customItems || [], ...this.addGridMenuCustomCommands()];\n      this.translateItems(this._gridOptions.gridMenu.customItems, 'titleKey', 'title');\n      this.sortItems(this._gridOptions.gridMenu.customItems, 'positionOrder');\n\n      const gridMenuControl = new Slick.Controls.GridMenu(columnDefinitions, grid, this._gridOptions);\n      if (grid && this._gridOptions.gridMenu) {\n        gridMenuControl.onBeforeMenuShow.subscribe((e: Event, args: CellArgs) => {\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onBeforeMenuShow === 'function') {\n            this._gridOptions.gridMenu.onBeforeMenuShow(e, args);\n          }\n        });\n        gridMenuControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\n          this.areVisibleColumnDifferent = true;\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onColumnsChanged === 'function') {\n            this._gridOptions.gridMenu.onColumnsChanged(e, args);\n          }\n        });\n        gridMenuControl.onCommand.subscribe((e: Event, args: GridMenuItem) => {\n          this.executeGridMenuInternalCustomCommands(e, args);\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onCommand === 'function') {\n            this._gridOptions.gridMenu.onCommand(e, args);\n          }\n        });\n        gridMenuControl.onMenuClose.subscribe((e: Event, args: CellArgs) => {\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onMenuClose === 'function') {\n            this._gridOptions.gridMenu.onMenuClose(e, args);\n          }\n\n          // we also want to resize the columns if the user decided to hide certain column(s)\n          if (grid && typeof grid.autosizeColumns === 'function') {\n            // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree)\n            const gridUid = grid.getUID();\n            if (this.areVisibleColumnDifferent && gridUid && $(`.${gridUid}`).length > 0) {\n              grid.autosizeColumns();\n              this.areVisibleColumnDifferent = false;\n            }\n          }\n        });\n      }\n      return gridMenuControl;\n    }\n    return null;\n  }\n\n  /**\n   * Create the Header Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)\n   * @param grid\n   * @param dataView\n   * @param columnDefinitions\n   */\n  createHeaderMenu(grid: any, dataView: any, columnDefinitions: Column[]) {\n    this._gridOptions.headerMenu = { ...this.getDefaultHeaderMenuOptions(), ...this._gridOptions.headerMenu };\n    if (this._gridOptions.enableHeaderMenu) {\n      this._gridOptions.headerMenu = this.addHeaderMenuCustomCommands(this._gridOptions, columnDefinitions);\n    }\n\n    const headerMenuPlugin = new Slick.Plugins.HeaderMenu(this._gridOptions.headerMenu);\n\n    grid.registerPlugin(headerMenuPlugin);\n    headerMenuPlugin.onCommand.subscribe((e: Event, args: HeaderMenuOnCommandArgs) => {\n      this.executeHeaderMenuInternalCommands(e, args);\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onCommand === 'function') {\n        this._gridOptions.headerMenu.onCommand(e, args);\n      }\n    });\n    headerMenuPlugin.onBeforeMenuShow.subscribe((e: Event, args: HeaderMenuOnBeforeMenuShowArgs) => {\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onBeforeMenuShow === 'function') {\n        this._gridOptions.headerMenu.onBeforeMenuShow(e, args);\n      }\n    });\n\n    return headerMenuPlugin;\n  }\n\n  /** Create an undo redo buffer used by the Excel like copy */\n  createUndoRedoBuffer() {\n    const commandQueue: any[] = [];\n    let commandCtr = 0;\n\n    this.undoRedoBuffer = {\n      queueAndExecuteCommand: (editCommand: any) => {\n        commandQueue[commandCtr] = editCommand;\n        commandCtr++;\n        editCommand.execute();\n      },\n      undo: () => {\n        if (commandCtr === 0) { return; }\n        commandCtr--;\n        const command = commandQueue[commandCtr];\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\n          command.undo();\n        }\n      },\n      redo: () => {\n        if (commandCtr >= commandQueue.length) { return; }\n        const command = commandQueue[commandCtr];\n        commandCtr++;\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\n          command.execute();\n        }\n      }\n    };\n  }\n\n  /** Hide a column from the grid */\n  hideColumn(column: Column) {\n    if (this._grid && this.visibleColumns) {\n      const columnIndex = this._grid.getColumnIndex(column.id);\n      this.visibleColumns = this.removeColumnByIndex(this.visibleColumns, columnIndex);\n      this._grid.setColumns(this.visibleColumns);\n    }\n  }\n\n  /** Attach an undo shortcut key hook that will redo/undo the copy buffer */\n  hookUndoShortcutKey() {\n    // undo shortcut\n    $(document).keydown((e) => {\n      if (e.which === 90 && (e.ctrlKey || e.metaKey)) {    // CTRL + (shift) + Z\n        if (e.shiftKey) {\n          this.undoRedoBuffer.redo();\n        } else {\n          this.undoRedoBuffer.undo();\n        }\n      }\n    });\n  }\n\n  /** Dispose of all the controls & plugins */\n  dispose() {\n    this._grid = null;\n    this._dataView = null;\n    this.visibleColumns = [];\n\n    // dispose of each control/plugin if it has a destroy method\n    this.extensionList.forEach((item) => {\n      if (item && item.service && item.service.destroy) {\n        item.service.destroy();\n      }\n    });\n    this.extensionList = [];\n  }\n\n  /** Create Grid Menu with Custom Commands if user has enabled Filters and/or uses a Backend Service (OData, GraphQL) */\n  private addGridMenuCustomCommands() {\n    const backendApi = this._gridOptions.backendServiceApi || null;\n    const gridMenuCustomItems: GridMenuItem[] = [];\n\n    if (this._gridOptions && this._gridOptions.enableFiltering) {\n      // show grid menu: clear all filters\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllFiltersCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllFiltersCommand || 'fa fa-filter text-danger',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_FILTERS') : Constants.TEXT_CLEAR_ALL_FILTERS,\n            disabled: false,\n            command: 'clear-filter',\n            positionOrder: 50\n          }\n        );\n      }\n\n      // show grid menu: toggle filter row\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideToggleFilterCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconToggleFilterCommand || 'fa fa-random',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('TOGGLE_FILTER_ROW') : Constants.TEXT_TOGGLE_FILTER_ROW,\n            disabled: false,\n            command: 'toggle-filter',\n            positionOrder: 52\n          }\n        );\n      }\n\n      // show grid menu: refresh dataset\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideRefreshDatasetCommand && backendApi) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconRefreshDatasetCommand || 'fa fa-refresh',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('REFRESH_DATASET') : Constants.TEXT_REFRESH_DATASET,\n            disabled: false,\n            command: 'refresh-dataset',\n            positionOrder: 54\n          }\n        );\n      }\n    }\n\n    if (this._gridOptions.enableSorting) {\n      // show grid menu: clear all sorting\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllSortingCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllSortingCommand || 'fa fa-unsorted text-danger',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_SORTING') : Constants.TEXT_CLEAR_ALL_SORTING,\n            disabled: false,\n            command: 'clear-sorting',\n            positionOrder: 51\n          }\n        );\n      }\n    }\n\n    // show grid menu: export to file\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportCsvCommand) {\n      gridMenuCustomItems.push(\n        {\n          iconCssClass: this._gridOptions.gridMenu.iconExportCsvCommand || 'fa fa-download',\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_CSV') : Constants.TEXT_EXPORT_IN_CSV_FORMAT,\n          disabled: false,\n          command: 'export-csv',\n          positionOrder: 53\n        }\n      );\n    }\n    // show grid menu: export to text file as tab delimited\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportTextDelimitedCommand) {\n      gridMenuCustomItems.push(\n        {\n          iconCssClass: this._gridOptions.gridMenu.iconExportTextDelimitedCommand || 'fa fa-download',\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_TAB_DELIMITED') : Constants.TEXT_EXPORT_IN_TEXT_FORMAT,\n          disabled: false,\n          command: 'export-text-delimited',\n          positionOrder: 54\n        }\n      );\n    }\n\n    // add the custom \"Commands\" title if there are any commands\n    if (this._gridOptions && this._gridOptions.gridMenu && (gridMenuCustomItems.length > 0 || this._gridOptions.gridMenu.customItems.length > 0)) {\n      this._gridOptions.gridMenu.customTitle = this._gridOptions.gridMenu.customTitle || this.getGridMenuTitleOutputString('customTitle');\n    }\n\n    return gridMenuCustomItems;\n  }\n\n  /**\n   * Create Header Menu with Custom Commands if user has enabled Header Menu\n   * @param options\n   * @param columnDefinitions\n   * @return header menu\n   */\n  private addHeaderMenuCustomCommands(options: GridOption, columnDefinitions: Column[]): HeaderMenu {\n    const headerMenuOptions = options.headerMenu;\n\n    if (columnDefinitions && Array.isArray(columnDefinitions) && options.enableHeaderMenu) {\n      columnDefinitions.forEach((columnDef: Column) => {\n        if (columnDef && !columnDef.excludeFromHeaderMenu) {\n          if (!columnDef.header || !columnDef.header.menu) {\n            columnDef.header = {\n              menu: {\n                items: []\n              }\n            };\n          }\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\n\n          // Sorting Commands\n          if (options.enableSorting && columnDef.sortable && !headerMenuOptions.hideSortCommands) {\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-asc').length === 0) {\n              columnHeaderMenuItems.push({\n                iconCssClass: headerMenuOptions.iconSortAscCommand || 'fa fa-sort-asc',\n                title: options.enableTranslate ? this.translate.instant('SORT_ASCENDING') : Constants.TEXT_SORT_ASCENDING,\n                command: 'sort-asc',\n                positionOrder: 50\n              });\n            }\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-desc').length === 0) {\n              columnHeaderMenuItems.push({\n                iconCssClass: headerMenuOptions.iconSortDescCommand || 'fa fa-sort-desc',\n                title: options.enableTranslate ? this.translate.instant('SORT_DESCENDING') : Constants.TEXT_SORT_DESCENDING,\n                command: 'sort-desc',\n                positionOrder: 51\n              });\n            }\n          }\n\n          // Hide Column Command\n          if (!headerMenuOptions.hideColumnHideCommand && columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'hide').length === 0) {\n            columnHeaderMenuItems.push({\n              iconCssClass: headerMenuOptions.iconColumnHideCommand || 'fa fa-times',\n              title: options.enableTranslate ? this.translate.instant('HIDE_COLUMN') : Constants.TEXT_HIDE_COLUMN,\n              command: 'hide',\n              positionOrder: 52\n            });\n          }\n\n          this.translateItems(columnHeaderMenuItems, 'titleKey', 'title');\n\n          // sort the custom items by their position in the list\n          columnHeaderMenuItems.sort((itemA, itemB) => {\n            if (itemA && itemB && itemA.hasOwnProperty('positionOrder') && itemB.hasOwnProperty('positionOrder')) {\n              return itemA.positionOrder - itemB.positionOrder;\n            }\n            return 0;\n          });\n        }\n      });\n\n    }\n\n    return headerMenuOptions;\n  }\n\n  /** Execute the Header Menu Commands that was triggered by the onCommand subscribe */\n  executeHeaderMenuInternalCommands(e: Event, args: HeaderMenuOnCommandArgs) {\n    if (args && args.command) {\n      switch (args.command) {\n        case 'hide':\n          this.hideColumn(args.column);\n          this.autoResizeColumns();\n          break;\n        case 'sort-asc':\n        case 'sort-desc':\n          // get previously sorted columns\n          const cols: ColumnSort[] = this.sortService.getPreviousColumnSorts(args.column.id + '');\n\n          // add to the column array, the column sorted by the header menu\n          cols.push({ sortCol: args.column, sortAsc: (args.command === 'sort-asc') });\n          if (this._gridOptions.backendServiceApi) {\n            this.sortService.onBackendSortChanged(e, { multiColumnSort: true, sortCols: cols, grid: this._grid });\n          } else {\n            this.sortService.onLocalSortChanged(this._grid, this._dataView, cols);\n          }\n\n          // update the this.gridObj sortColumns array which will at the same add the visual sort icon(s) on the UI\n          const newSortColumns: ColumnSort[] = cols.map((col) => {\n            return { columnId: col.sortCol.id, sortAsc: col.sortAsc };\n          });\n          this._grid.setSortColumns(newSortColumns); // add sort icon in UI\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /**\n   * Execute the Grid Menu Custom command callback that was triggered by the onCommand subscribe\n   * These are the default internal custom commands\n   * @param event\n   * @param GridMenuItem args\n   */\n  executeGridMenuInternalCustomCommands(e: Event, args: GridMenuItem) {\n    if (args && args.command) {\n      switch (args.command) {\n        case 'clear-filter':\n          this.filterService.clearFilters();\n          this._dataView.refresh();\n          break;\n        case 'clear-sorting':\n          this.sortService.clearSorting();\n          this._dataView.refresh();\n          break;\n        case 'export-csv':\n          this.exportService.exportToFile({\n            delimiter: DelimiterType.comma,\n            filename: 'export',\n            format: FileType.csv,\n            useUtf8WithBom: true\n          });\n          break;\n        case 'export-text-delimited':\n          this.exportService.exportToFile({\n            delimiter: DelimiterType.tab,\n            filename: 'export',\n            format: FileType.txt,\n            useUtf8WithBom: true\n          });\n          break;\n        case 'toggle-filter':\n          this._grid.setHeaderRowVisibility(!this._grid.getOptions().showHeaderRow);\n          break;\n        case 'toggle-toppanel':\n          this._grid.setTopPanelVisibility(!this._grid.getOptions().showTopPanel);\n          break;\n        case 'refresh-dataset':\n          this.refreshBackendDataset();\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /** Refresh the dataset through the Backend Service */\n  refreshBackendDataset() {\n    let query;\n    const backendApi = this._gridOptions.backendServiceApi;\n    if (!backendApi || !backendApi.service || !backendApi.process) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    if (backendApi.service) {\n      query = backendApi.service.buildQuery();\n    }\n\n    if (query && query !== '') {\n      if (backendApi.preProcess) {\n        backendApi.preProcess();\n      }\n\n      // the process could be an Observable (like HttpClient) or a Promise\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n      const observableOrPromise = backendApi.process(query);\n\n      castToPromise(observableOrPromise).then((processResult: GraphqlResult | any) => {\n        // from the result, call our internal post process to update the Dataset and Pagination info\n        if (processResult && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  /**\n   * Remove a column from the grid by it's index in the grid\n   * @param array input\n   * @param index\n   */\n  removeColumnByIndex(array: any[], index: number) {\n    return array.filter((el: any, i: number) => {\n      return index !== i;\n    });\n  }\n\n  /** Translate the Column Picker and it's last 2 checkboxes */\n  translateColumnPicker() {\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\n    if (this._gridOptions && this._gridOptions.columnPicker) {\n      this._gridOptions.columnPicker.columnTitle = this.getGridMenuTitleOutputString('columnTitle');\n      this._gridOptions.columnPicker.forceFitTitle = this.getGridMenuTitleOutputString('forceFitTitle');\n      this._gridOptions.columnPicker.syncResizeTitle = this.getGridMenuTitleOutputString('syncResizeTitle');\n    }\n    this.translateItems(this.allColumns, 'headerKey', 'name');\n  }\n\n  /** Translate the Grid Menu titles and column picker */\n  translateGridMenu() {\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\n    // we also need to call the control init so that it takes the new Grid object with latest values\n    if (this._gridOptions && this._gridOptions.gridMenu) {\n      this._gridOptions.gridMenu.customItems = [];\n      this.emptyGridMenuTitles();\n\n      // merge original user grid menu items with internal items\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\n      this._gridOptions.gridMenu.customItems = [...this.userOriginalGridMenu.customItems || [], ...this.addGridMenuCustomCommands()];\n      this.translateItems(this._gridOptions.gridMenu.customItems, 'titleKey', 'title');\n      this.sortItems(this._gridOptions.gridMenu.customItems, 'positionOrder');\n\n      this._gridOptions.gridMenu.columnTitle = this.getGridMenuTitleOutputString('columnTitle');\n      this._gridOptions.gridMenu.forceFitTitle = this.getGridMenuTitleOutputString('forceFitTitle');\n      this._gridOptions.gridMenu.syncResizeTitle = this.getGridMenuTitleOutputString('syncResizeTitle');\n\n      // translate all columns (including non-visible)\n      this.translateItems(this.allColumns, 'headerKey', 'name');\n\n      // re-initialize the Grid Menu, that will recreate all the menus & list\n      // and so will act like a translate\n      // we do this instead of recreating the Grid Menu control itself (because doing so would destroy any previous commands attached)\n      this.gridMenuControl.init(this._grid);\n    }\n  }\n\n  /**\n   * Translate the Header Menu titles, we need to loop through all column definition to re-translate them\n   */\n  translateHeaderMenu() {\n    if (this._gridOptions && this._gridOptions.headerMenu) {\n      this.resetHeaderMenuTranslations(this.visibleColumns);\n    }\n  }\n\n  /**\n   * Translate manually the header titles.\n   * We could optionally pass a locale (that will change currently loaded locale), else it will use current locale\n   * @param locale to use\n   * @param new column definitions (optional)\n   */\n  translateColumnHeaders(locale?: boolean | string, newColumnDefinitions?: Column[]) {\n    if (locale) {\n      this.translate.use(locale as string);\n    }\n\n    const columnDefinitions = newColumnDefinitions || this._columnDefinitions;\n\n    this.translateItems(columnDefinitions, 'headerKey', 'name');\n    this.translateItems(this.allColumns, 'headerKey', 'name');\n\n    // re-render the column headers\n    this.renderColumnHeaders(columnDefinitions);\n  }\n\n  /**\n   * Render (or re-render) the column headers from column definitions.\n   * calling setColumns() will trigger a grid re-render\n   */\n  renderColumnHeaders(newColumnDefinitions?: Column[]) {\n    const collection = newColumnDefinitions || this._columnDefinitions;\n    if (Array.isArray(collection) && this._grid && this._grid.setColumns) {\n      this._grid.setColumns(collection);\n    }\n  }\n\n  private emptyGridMenuTitles() {\n    this._gridOptions.gridMenu.customTitle = '';\n    this._gridOptions.gridMenu.columnTitle = '';\n    this._gridOptions.gridMenu.forceFitTitle = '';\n    this._gridOptions.gridMenu.syncResizeTitle = '';\n  }\n\n  /**\n   * @return default Grid Menu options\n   */\n  private getDefaultGridMenuOptions(): GridMenu {\n    return {\n      customTitle: undefined,\n      columnTitle: this.getGridMenuTitleOutputString('columnTitle'),\n      forceFitTitle: this.getGridMenuTitleOutputString('forceFitTitle'),\n      syncResizeTitle: this.getGridMenuTitleOutputString('syncResizeTitle'),\n      iconCssClass: 'fa fa-bars',\n      menuWidth: 18,\n      customItems: [],\n      hideClearAllFiltersCommand: false,\n      hideRefreshDatasetCommand: false,\n      hideToggleFilterCommand: false,\n    };\n  }\n\n  /**\n   * @return default Header Menu options\n   */\n  private getDefaultHeaderMenuOptions(): HeaderMenu {\n    return {\n      autoAlignOffset: 12,\n      minWidth: 140,\n      hideColumnHideCommand: false,\n      hideSortCommands: false,\n      title: ''\n    };\n  }\n\n  /**\n   * From a Grid Menu object property name, we will return the correct title output string following this order\n   * 1- if user provided a title, use it as the output title\n   * 2- else if user provided a title key, use it to translate the output title\n   * 3- else if nothing is provided use\n   */\n  private getGridMenuTitleOutputString(propName: string) {\n    let output = '';\n    const gridMenu = this._gridOptions && this._gridOptions.gridMenu || {};\n    const enableTranslate = this._gridOptions && this._gridOptions.enableTranslate || false;\n\n    const title = gridMenu && gridMenu[propName];\n    const titleKey = gridMenu && gridMenu[`${propName}Key`];\n\n    if (titleKey) {\n      output = this.translate.instant(titleKey || ' ');\n    } else {\n      switch (propName) {\n        case 'customTitle':\n          output = title || (enableTranslate ? this.translate.instant('COMMANDS') : Constants.TEXT_COMMANDS);\n          break;\n        case 'columnTitle':\n          output = title || (enableTranslate ? this.translate.instant('COLUMNS') : Constants.TEXT_COLUMNS);\n          break;\n        case 'forceFitTitle':\n          output = title || (enableTranslate ? this.translate.instant('FORCE_FIT_COLUMNS') : Constants.TEXT_FORCE_FIT_COLUMNS);\n          break;\n        case 'syncResizeTitle':\n          output = title || (enableTranslate ? this.translate.instant('SYNCHRONOUS_RESIZE') : Constants.TEXT_SYNCHRONOUS_RESIZE);\n          break;\n        default:\n          output = title;\n          break;\n      }\n    }\n    return output;\n  }\n\n  /**\n   * Reset all the Grid Menu options which have text to translate\n   * @param grid menu object\n   */\n  private resetHeaderMenuTranslations(columnDefinitions: Column[]) {\n    columnDefinitions.forEach((columnDef: Column) => {\n      if (columnDef && columnDef.header && columnDef.header && columnDef.header.menu && columnDef.header.menu.items) {\n        if (!columnDef.excludeFromHeaderMenu) {\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\n\n          columnHeaderMenuItems.forEach((item) => {\n            switch (item.command) {\n              case 'sort-asc':\n                item.title = this.translate.instant('SORT_ASCENDING') || Constants.TEXT_SORT_ASCENDING;\n                break;\n              case 'sort-desc':\n                item.title = this.translate.instant('SORT_DESCENDING') || Constants.TEXT_SORT_DESCENDING;\n                break;\n              case 'hide':\n                item.title = this.translate.instant('HIDE_COLUMN') || Constants.TEXT_HIDE_COLUMN;\n                break;\n            }\n\n            // re-translate if there's a \"titleKey\"\n            if (this._gridOptions && this._gridOptions.enableTranslate) {\n              this.translateItems(columnHeaderMenuItems, 'titleKey', 'title');\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Sort items in an array by a property name\n   * @params items array\n   * @param property name to sort with\n   * @return sorted array\n   */\n  private sortItems(items: any[], propertyName: string) {\n    // sort the custom items by their position in the list\n    items.sort((itemA, itemB) => {\n      if (itemA && itemB && itemA.hasOwnProperty(propertyName) && itemB.hasOwnProperty(propertyName)) {\n        return itemA[propertyName] - itemB[propertyName];\n      }\n      return 0;\n    });\n  }\n\n  /** Translate the an array of items from an input key and assign to the output key */\n  private translateItems(items: any[], inputKey: string, outputKey: string) {\n    for (const item of items) {\n      if (item[inputKey]) {\n        item[outputKey] = this.translate.instant(item[inputKey]);\n      }\n    }\n  }\n}\n",
    "/**\r\n * This GraphqlQueryBuilder class is a lib that already exist\r\n * but was causing issues with TypeScript, RequireJS and other bundler/packagers\r\n * and so I rewrote it in pure TypeScript.\r\n *\r\n * The previous lib can be viewed here at this Github\r\n * https://github.com/codemeasandwich/graphql-query-builder\r\n */\r\nexport default class GraphqlQueryBuilder {\r\n  alias: string;\r\n  head: any[] = [];\r\n  body: any;\r\n\r\n  /* Constructor, query/mutator you wish to use, and an alias or filter arguments. */\r\n  constructor(private queryFnName: string, aliasOrFilter?: string | object) {\r\n    if (typeof aliasOrFilter === 'function') {\r\n      this.alias = aliasOrFilter;\r\n    } else if (typeof aliasOrFilter === 'object') {\r\n      this.filter(aliasOrFilter);\r\n    } else if (undefined === aliasOrFilter && 2 === arguments.length) {\r\n      throw new TypeError(`You have passed undefined as Second argument to \"Query\"`);\r\n    } else if (undefined !== aliasOrFilter) {\r\n      throw new TypeError(`Second argument to \"Query\" should be an alias name(String) or filter arguments(Object). was passed ${aliasOrFilter}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The parameters to run the query against.\r\n   * @param filters An object mapping attribute to values\r\n   */\r\n  filter(filters: any) {\r\n    for (const prop of Object.keys(filters)) {\r\n      if (typeof filters[prop] === 'function') {\r\n        continue;\r\n      }\r\n      const val = this.getGraphQLValue(filters[prop]);\r\n      if (val === '{}') {\r\n        continue;\r\n      }\r\n      this.head.push(`${prop}:${val}`);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Outlines the properties you wish to be returned from the query.\r\n   * @param properties representing each attribute you want Returned\r\n   */\r\n  find(...searches: any[]) { // THIS NEED TO BE A \"FUNCTION\" to scope 'arguments'\r\n    if (!searches) {\r\n      throw new TypeError(`find value can not be >>falsy<<`);\r\n    }\r\n    // if its a string.. it may have other values\r\n    // else it sould be an Object or Array of maped values\r\n    const searchKeys = (searches.length === 1 && Array.isArray(searches[0])) ? searches[0] : searches;\r\n    this.body = this.parceFind(searchKeys);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set an alias for this result.\r\n   * @param alias\r\n   */\r\n  setAlias(alias: string) {\r\n    this.alias = alias;\r\n  }\r\n\r\n  /**\r\n   * Return to the formatted query string\r\n   * @return\r\n   */\r\n  toString() {\r\n    if (this.body === undefined) {\r\n      throw new ReferenceError(`return properties are not defined. use the 'find' function to defined them`);\r\n    }\r\n\r\n    return `${(this.alias) ? (this.alias + ':') : ''} ${this.queryFnName} ${(this.head.length > 0) ? '(' + this.head.join(',') + ')' : ''}  { ${this.body} }`;\r\n  }\r\n\r\n  // --\r\n  // PRIVATE FUNCTIONS\r\n  // -----------------\r\n\r\n  private parceFind(_levelA: any[]) {\r\n    const propsA = _levelA.map((currentValue, index) => {\r\n      const itemX = _levelA[index];\r\n\r\n      if (itemX instanceof GraphqlQueryBuilder) {\r\n        return itemX.toString();\r\n      } else if (!Array.isArray(itemX) && typeof itemX === 'object') {\r\n        const propsAA = Object.keys(itemX);\r\n        if (1 !== propsAA.length) {\r\n          throw new RangeError(`Alias objects should only have one value. was passed: ${JSON.stringify(itemX)}`);\r\n        }\r\n        const propS = propsAA[0];\r\n        const item = itemX[propS];\r\n\r\n        if (Array.isArray(item)) {\r\n          return new GraphqlQueryBuilder(propS).find(item);\r\n        }\r\n        return `${propS} : ${item} `;\r\n      } else if (typeof itemX === 'string') {\r\n        return itemX;\r\n      } else {\r\n        throw new RangeError(`cannot handle Find value of ${itemX}`);\r\n      }\r\n    });\r\n\r\n    return propsA.join(',');\r\n  }\r\n\r\n  private getGraphQLValue(value: any) {\r\n    if (typeof value === 'string') {\r\n      value = JSON.stringify(value);\r\n    } else if (Array.isArray(value)) {\r\n      value = value.map(item => {\r\n        return this.getGraphQLValue(item);\r\n      }).join();\r\n      value = `[${value}]`;\r\n    } else if (value instanceof Date) {\r\n      value = JSON.stringify(value);\r\n    } else if (value !== null && typeof value === 'object') {\r\n      value = this.objectToString(value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private objectToString(obj: any) {\r\n    const sourceA = [];\r\n\r\n    for (const prop of Object.keys(obj)) {\r\n      if (typeof obj[prop] === 'function') {\r\n        continue;\r\n      }\r\n      sourceA.push(`${prop}:${this.getGraphQLValue(obj[prop])}`);\r\n    }\r\n    return `{${sourceA.join()}}`;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport { mapOperatorType, mapOperatorByFieldType } from './utilities';\nimport {\n  BackendService,\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  ColumnSort,\n  CurrentFilter,\n  CurrentPagination,\n  CurrentSorter,\n  FieldType,\n  FilterChangedArgs,\n  GraphqlCursorPaginationOption,\n  GraphqlDatasetFilter,\n  GraphqlFilteringOption,\n  GraphqlPaginationOption,\n  GraphqlServiceOption,\n  GraphqlSortingOption,\n  GridOption,\n  Pagination,\n  PaginationChangedArgs,\n  SortChangedArgs,\n  SortDirection,\n  SortDirectionString\n} from './../models/index';\nimport QueryBuilder from './graphqlQueryBuilder';\n\n// timer for keeping track of user typing waits\nlet timer: any;\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\nconst DEFAULT_ITEMS_PER_PAGE = 25;\nconst DEFAULT_PAGE_SIZE = 20;\n\nexport class GraphqlService implements BackendService {\n  private _currentFilters: ColumnFilters | CurrentFilter[];\n  private _currentPagination: CurrentPagination;\n  private _currentSorters: CurrentSorter[];\n  private _columnDefinitions: Column[];\n  private _grid: any;\n  options: GraphqlServiceOption;\n  pagination: Pagination | undefined;\n  defaultOrderBy: GraphqlSortingOption = { field: 'id', direction: SortDirection.ASC };\n  defaultPaginationOptions: GraphqlPaginationOption | GraphqlCursorPaginationOption = {\n    first: DEFAULT_ITEMS_PER_PAGE,\n    offset: 0\n  };\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Build the GraphQL query, since the service include/exclude cursor, the output query will be different.\n   * @param serviceOptions GraphqlServiceOption\n   */\n  buildQuery() {\n    if (!this.options || !this.options.datasetName || (!this._columnDefinitions && !this.options.columnDefinitions)) {\n      throw new Error('GraphQL Service requires \"datasetName\" & \"columnDefinitions\" properties for it to work');\n    }\n\n    // get the column definitions and exclude some if they were tagged as excluded\n    let columnDefinitions = this._columnDefinitions || this.options.columnDefinitions;\n    columnDefinitions = columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\n\n    const queryQb = new QueryBuilder('query');\n    const datasetQb = new QueryBuilder(this.options.datasetName);\n    const dataQb = (this.options.isWithCursor) ? new QueryBuilder('edges') : new QueryBuilder('nodes');\n\n    // get all the columnds Ids for the filters to work\n    let columnIds: string[] = [];\n    if (columnDefinitions && Array.isArray(columnDefinitions)) {\n      for (const column of columnDefinitions) {\n        columnIds.push(column.field);\n\n        // if extra \"fields\" are passed, also push them to columnIds\n        if (column.fields) {\n          columnIds.push(...column.fields);\n        }\n      }\n      // columnIds = columnDefinitions.map((column) => column.field);\n    } else {\n      columnIds = this.options.columnIds || [];\n    }\n\n    // Slickgrid also requires the \"id\" field to be part of DataView\n    // add it to the GraphQL query if it wasn't already part of the list\n    if (columnIds.indexOf('id') === -1) {\n      columnIds.unshift('id');\n    }\n\n    const filters = this.buildFilterQuery(columnIds);\n\n    if (this.options.isWithCursor) {\n      // ...pageInfo { hasNextPage, endCursor }, edges { cursor, node { _filters_ } }\n      const pageInfoQb = new QueryBuilder('pageInfo');\n      pageInfoQb.find('hasNextPage', 'endCursor');\n      dataQb.find(['cursor', { node: filters }]);\n      datasetQb.find(['totalCount', pageInfoQb, dataQb]);\n    } else {\n      // ...nodes { _filters_ }\n      dataQb.find(filters);\n      datasetQb.find(['totalCount', dataQb]);\n    }\n\n    // add dataset filters, could be Pagination and SortingFilters and/or FieldFilters\n    const datasetFilters: GraphqlDatasetFilter = {\n      ...this.options.paginationOptions,\n      first: ((this.options.paginationOptions && this.options.paginationOptions.first) ? this.options.paginationOptions.first : ((this.pagination && this.pagination.pageSize) ? this.pagination.pageSize : null)) || this.defaultPaginationOptions.first\n    };\n\n    if (!this.options.isWithCursor) {\n      datasetFilters.offset = ((this.options.paginationOptions && this.options.paginationOptions.hasOwnProperty('offset')) ? +this.options.paginationOptions['offset'] : 0);\n    }\n\n    if (this.options.sortingOptions && Array.isArray(this.options.sortingOptions) && this.options.sortingOptions.length > 0) {\n      // orderBy: [{ field:x, direction: 'ASC' }]\n      datasetFilters.orderBy = this.options.sortingOptions;\n    }\n    if (this.options.filteringOptions && Array.isArray(this.options.filteringOptions) && this.options.filteringOptions.length > 0) {\n      // filterBy: [{ field: date, operator: '>', value: '2000-10-10' }]\n      datasetFilters.filterBy = this.options.filteringOptions;\n    }\n    if (this.options.addLocaleIntoQuery) {\n      // first: 20, ... locale: \"en-CA\"\n      datasetFilters.locale = this._gridOptions && this._gridOptions.i18n && this._gridOptions.i18n.currentLang || 'en';\n    }\n    if (this.options.extraQueryArguments) {\n      // first: 20, ... userId: 123\n      for (const queryArgument of this.options.extraQueryArguments) {\n        datasetFilters[queryArgument.field] = queryArgument.value;\n      }\n    }\n\n    // query { users(first: 20, orderBy: [], filterBy: [])}\n    datasetQb.filter(datasetFilters);\n    queryQb.find(datasetQb);\n\n    const enumSearchProperties = ['direction:', 'field:', 'operator:'];\n    return this.trimDoubleQuotesOnEnumField(queryQb.toString(), enumSearchProperties, this.options.keepArgumentFieldDoubleQuotes || false);\n  }\n\n  /**\n   * From an input array of strings, we want to build a GraphQL query string.\n   * The process has to take the dot notation and parse it into a valid GraphQL query\n   * Following this SO answer https://stackoverflow.com/a/47705476/1212166\n   *\n   * INPUT\n   *  ['firstName', 'lastName', 'billing.address.street', 'billing.address.zip']\n   * OUTPUT\n   * firstName, lastName, billing{address{street, zip}}\n   * @param inputArray\n   */\n  buildFilterQuery(inputArray: string[]) {\n\n    const set = (o: any = {}, a: any) => {\n      const k = a.shift();\n      o[k] = a.length ? set(o[k], a) : null;\n      return o;\n    };\n\n    const output = inputArray.reduce((o: any, a: string) => set(o, a.split('.')), {});\n\n    return JSON.stringify(output)\n      .replace(/\\\"|\\:|null/g, '')\n      .replace(/^\\{/, '')\n      .replace(/\\}$/, '');\n  }\n\n  init(serviceOptions?: GraphqlServiceOption, pagination?: Pagination, grid?: any): void {\n    this._grid = grid;\n    this.options = serviceOptions || {};\n    this.pagination = pagination;\n\n    if (grid && grid.getColumns && grid.getOptions) {\n      this._columnDefinitions = grid.getColumns();\n    }\n  }\n\n  /**\n   * Get an initialization of Pagination options\n   * @return Pagination Options\n   */\n  getInitPaginationOptions(): GraphqlDatasetFilter {\n    return (this.options.isWithCursor) ? { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE) } : { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE), offset: 0 };\n  }\n\n  /** Get the GraphQL dataset name */\n  getDatasetName(): string {\n    return this.options.datasetName || '';\n  }\n\n  /** Get the Filters that are currently used by the grid */\n  getCurrentFilters(): ColumnFilters | CurrentFilter[] {\n    return this._currentFilters;\n  }\n\n  /** Get the Pagination that is currently used by the grid */\n  getCurrentPagination(): CurrentPagination {\n    return this._currentPagination;\n  }\n\n  /** Get the Sorters that are currently used by the grid */\n  getCurrentSorters(): CurrentSorter[] {\n    return this._currentSorters;\n  }\n\n  /*\n   * Reset the pagination options\n   */\n  resetPaginationOptions() {\n    let paginationOptions;\n    if (this.options.isWithCursor) {\n      // first, last, after, before\n      paginationOptions = {\n        after: '',\n        before: undefined,\n        last: undefined\n      } as GraphqlCursorPaginationOption;\n    } else {\n      // first, last, offset\n      paginationOptions = (this.options.paginationOptions || this.getInitPaginationOptions()) as GraphqlPaginationOption;\n      paginationOptions.offset = 0;\n    }\n\n    // save current pagination as Page 1 and page size as \"first\" set size\n    this._currentPagination = {\n      pageNumber: 1,\n      pageSize: paginationOptions.first\n    };\n\n    this.updateOptions({ paginationOptions });\n  }\n\n  updateOptions(serviceOptions?: GraphqlServiceOption) {\n    this.options = { ...this.options, ...serviceOptions };\n  }\n\n  /*\n   * FILTERING\n   */\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\n    const gridOptions: GridOption = this._gridOptions || args.grid.getOptions();\n    const backendApi = gridOptions.backendServiceApi;\n\n    if (backendApi === undefined) {\n      throw new Error('Something went wrong in the GraphqlService, \"backendServiceApi\" is not initialized');\n    }\n\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\n    let debounceTypingDelay = 0;\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\n    }\n\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    this._currentFilters = this.castFilterToColumnFilter(args.columnFilters);\n\n    const promise = new Promise<string>((resolve, reject) => {\n      if (!args || !args.grid) {\n        throw new Error('Something went wrong when trying create the GraphQL Backend Service, it seems that \"args\" is not populated correctly');\n      }\n\n      // reset Pagination, then build the GraphQL query which we will use in the WebAPI callback\n      // wait a minimum user typing inactivity before processing any query\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        // loop through all columns to inspect filters & set the query\n        this.updateFilters(args.columnFilters, false);\n\n        this.resetPaginationOptions();\n        resolve(this.buildQuery());\n      }, debounceTypingDelay);\n    });\n\n    return promise;\n  }\n\n  /*\n   * PAGINATION\n   * With cursor, the query can have 4 arguments (first, after, last, before), for example:\n   *   users (first:20, after:\"YXJyYXljb25uZWN0aW9uOjM=\") {\n   *     totalCount\n   *     pageInfo {\n   *       hasNextPage\n   *       endCursor\n   *     }\n   *     edges {\n   *       cursor\n   *       node {\n   *         name\n   *         gender\n   *       }\n   *     }\n   *   }\n   * Without cursor, the query can have 3 arguments (first, last, offset), for example:\n   *   users (first:20, offset: 10) {\n   *     totalCount\n   *     nodes {\n   *       name\n   *       gender\n   *     }\n   *   }\n   */\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\n    const pageSize = +(args.pageSize || ((this.pagination) ? this.pagination.pageSize : DEFAULT_PAGE_SIZE));\n    this.updatePagination(args.newPage, pageSize);\n\n    // build the GraphQL query which we will use in the WebAPI callback\n    return this.buildQuery();\n  }\n\n  /*\n   * SORTING\n   * we will use sorting as per a Facebook suggestion on a Github issue (with some small changes)\n   * https://github.com/graphql/graphql-relay-js/issues/20#issuecomment-220494222\n   */\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\n\n    // loop through all columns to inspect sorters & set the query\n    this.updateSorters(sortColumns);\n\n    // build the GraphQL query which we will use in the WebAPI callback\n    return this.buildQuery();\n  }\n\n  /**\n   * loop through all columns to inspect filters & update backend service filteringOptions\n   * @param columnFilters\n   */\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset: boolean) {\n    const searchByArray: GraphqlFilteringOption[] = [];\n    let searchValue: string | string[];\n\n    for (const columnId in columnFilters) {\n      if (columnFilters.hasOwnProperty(columnId)) {\n        const columnFilter = columnFilters[columnId];\n\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\n        let columnDef: Column | undefined;\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\n          columnDef = this._columnDefinitions.find((column: Column) => column.id === columnFilter.columnId);\n        } else {\n          columnDef = columnFilter.columnDef;\n        }\n        if (!columnDef) {\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\n        }\n\n        const fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\n        if (typeof fieldSearchValue === 'undefined') {\n          fieldSearchValue = '';\n        }\n\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\n          throw new Error(`GraphQL filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {model: Filters.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\n        }\n\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n        let operator = columnFilter.operator || ((matches) ? matches[1] : '');\n        searchValue = (!!matches) ? matches[2] : '';\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n\n        // no need to query if search value is empty\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\n          continue;\n        }\n\n        // when having more than 1 search term (we need to create a CSV string for GraphQL \"IN\" or \"NOT IN\" filter search)\n        if (searchTerms && searchTerms.length > 1) {\n          searchValue = searchTerms.join(',');\n        } else if (typeof searchValue === 'string') {\n          // escaping the search value\n          searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\n          if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\n            operator = (operator === '*' || operator === '*z') ? 'endsWith' : 'startsWith';\n          }\n        }\n\n        // if we didn't find an Operator but we have a Filter Type, we should use default Operator\n        // multipleSelect is \"IN\", while singleSelect is \"EQ\", else don't map any operator\n        if (!operator && columnDef.filter) {\n          operator = columnDef.filter.operator;\n        }\n\n        // if we still don't have an operator find the proper Operator to use by it's field type\n        if (!operator) {\n          operator = mapOperatorByFieldType(columnDef.type || FieldType.string);\n        }\n\n        searchByArray.push({\n          field: fieldName,\n          operator: mapOperatorType(operator),\n          value: searchValue\n        });\n      }\n    }\n\n    // update the service options with filters for the buildQuery() to work later\n    this.updateOptions({ filteringOptions: searchByArray });\n  }\n\n  /**\n   * Update the pagination component with it's new page number and size\n   * @param newPage\n   * @param pageSize\n   */\n  updatePagination(newPage: number, pageSize: number) {\n    this._currentPagination = {\n      pageNumber: newPage,\n      pageSize\n    };\n\n    let paginationOptions;\n    if (this.options.isWithCursor) {\n      paginationOptions = {\n        first: pageSize\n      };\n    } else {\n      paginationOptions = {\n        first: pageSize,\n        offset: (newPage - 1) * pageSize\n      };\n    }\n\n    this.updateOptions({ paginationOptions });\n  }\n\n  /**\n   * loop through all columns to inspect sorters & update backend service sortingOptions\n   * @param columnFilters\n   */\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\n    let currentSorters: CurrentSorter[] = [];\n    let graphqlSorters: GraphqlSortingOption[] = [];\n\n    if (!sortColumns && presetSorters) {\n      // make the presets the current sorters, also make sure that all direction are in uppercase for GraphQL\n      currentSorters = presetSorters;\n      currentSorters.forEach((sorter) => sorter.direction = sorter.direction.toUpperCase() as SortDirectionString);\n\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\n      const tmpSorterArray = currentSorters.map((sorter) => {\n        const columnDef = this._columnDefinitions.find((column: Column) => column.id === sorter.columnId);\n        if (columnDef) {\n          graphqlSorters.push({\n            field: (columnDef.queryField || columnDef.queryFieldSorter || columnDef.field || columnDef.id) + '',\n            direction: sorter.direction\n          });\n        }\n        return {\n          columnId: sorter.columnId,\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\n        };\n      });\n      this._grid.setSortColumns(tmpSorterArray);\n    } else if (sortColumns && !presetSorters) {\n      // build the orderBy array, it could be multisort, example\n      // orderBy:[{field: lastName, direction: ASC}, {field: firstName, direction: DESC}]\n      if (sortColumns && sortColumns.length === 0) {\n        graphqlSorters = new Array(this.defaultOrderBy); // when empty, use the default sort\n        currentSorters = new Array({ columnId: this.defaultOrderBy.field, direction: this.defaultOrderBy.direction });\n      } else {\n        if (sortColumns) {\n          for (const column of sortColumns) {\n            if (column && column.sortCol) {\n              currentSorters.push({\n                columnId: column.sortCol.id + '',\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\n              });\n\n              graphqlSorters.push({\n                field: (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '',\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\n              });\n            }\n          }\n        }\n      }\n    }\n\n    // keep current Sorters and update the service options with the new sorting\n    this._currentSorters = currentSorters;\n    this.updateOptions({ sortingOptions: graphqlSorters });\n  }\n\n  /**\n   * A function which takes an input string and removes double quotes only\n   * on certain fields are identified as GraphQL enums (except fields with dot notation)\n   * For example let say we identified (\"direction:\", \"sort\") as word which are GraphQL enum fields\n   * then the result will be:\n   * FROM\n   * query { users (orderBy:[{field:\"firstName\", direction:\"ASC\"} }]) }\n   * TO\n   * query { users (orderBy:[{field: firstName, direction: ASC}})}\n   *\n   * EXCEPTIONS (fields with dot notation \".\" which are inside a \"field:\")\n   * these fields will keep double quotes while everything else will be stripped of double quotes\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: \"ASC\"} }\n   * TO\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: ASC}}\n   * @param inputStr input string\n   * @param enumSearchWords array of enum words to filter\n   * @returns outputStr output string\n   */\n  trimDoubleQuotesOnEnumField(inputStr: string, enumSearchWords: string[], keepArgumentFieldDoubleQuotes: boolean) {\n    const patternWordInQuotes = `\\s?((field:\\s*)?\".*?\")`;\n    let patternRegex = enumSearchWords.join(patternWordInQuotes + '|');\n    patternRegex += patternWordInQuotes; // the last one should also have the pattern but without the pipe \"|\"\n    // example with (field: & direction:):  /field:s?(\".*?\")|direction:s?(\".*?\")/\n    const reg = new RegExp(patternRegex, 'g');\n\n    return inputStr.replace(reg, (group1, group2, group3) => {\n      // remove double quotes except when the string starts with a \"field:\"\n      let removeDoubleQuotes = true;\n      if (group1.startsWith('field:') && keepArgumentFieldDoubleQuotes) {\n        removeDoubleQuotes = false;\n      }\n      const rep = removeDoubleQuotes ? group1.replace(/\"/g, '') : group1;\n      return rep;\n    });\n  }\n\n  //\n  // private functions\n  // -------------------\n  /**\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\n   * @param columnFilters\n   */\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    const filtersArray: ColumnFilter[] = (typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters;\n\n    return filtersArray.map((filter) => {\n      const columnDef = filter.columnDef;\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\n      if (filter.operator) {\n        tmpFilter.operator = filter.operator;\n      }\n      if (Array.isArray(filter.searchTerms)) {\n        tmpFilter.searchTerms = filter.searchTerms;\n      }\n      return tmpFilter;\n    });\n  }\n}\n",
    "declare interface StringConstructor {\r\n  allTitleCase(inputStr: string): string;\r\n  format(inputStr: string, args: any): string;\r\n  padZero(length: number): string;\r\n  trim(inputStr: string): string;\r\n  titleCase(inputStr: string): string;\r\n}\r\n\r\n\r\nString.format = function(format: string, args): string {\r\n  // const args = (Array.isArray(arguments[1])) ? arguments[1] : Array.prototype.slice.call(arguments, 1);\r\n\r\n  return format.replace(/{(\\d+)}/g, function (match, number) {\r\n    return (typeof args[number] !== 'undefined') ? args[number] : match;\r\n  });\r\n};\r\n\r\nString.padZero = function (this: string, length: number) {\r\n  let s = this;\r\n  while (s.length < length) {\r\n    s = '0' + s;\r\n  }\r\n  return s;\r\n};\r\n\r\n/**\r\n * Trim any extra white space from the string\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.trim = function(inputStr: string): string {\r\n  return inputStr ? inputStr.replace(/\\s+/g, ' ') : inputStr;\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.allTitleCase = function(inputStr: string): string {\r\n  return inputStr.replace(/\\w\\S*/g, function(outputStr) {\r\n     return outputStr.charAt(0).toUpperCase() + outputStr.substr(1).toLowerCase();\r\n  });\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n*/\r\nString.titleCase = function(inputStr: string): string {\r\n  return inputStr.charAt(0).toUpperCase() + inputStr.slice(1);\r\n};\r\n",
    "import './global-utilities';\r\nimport { CaseType, OdataOption } from './../models/index';\r\n\r\nexport class OdataService {\r\n  _columnFilters: any;\r\n  _defaultSortBy: string;\r\n  _odataOptions: OdataOption;\r\n\r\n  constructor() {\r\n    this._odataOptions = {\r\n      filterQueue: [],\r\n      orderBy: ''\r\n    };\r\n    this._defaultSortBy = '';\r\n    this._columnFilters = {};\r\n  }\r\n\r\n  /*\r\n    * Build the OData query string from all the options provided\r\n    * @return string OData query\r\n    */\r\n  buildQuery(): string {\r\n    this._odataOptions.filterQueue = [];\r\n    const queryTmpArray = [];\r\n\r\n    if (this._odataOptions.top) {\r\n      queryTmpArray.push(`$top=${this._odataOptions.top}`);\r\n    }\r\n    if (this._odataOptions.skip) {\r\n      queryTmpArray.push(`$skip=${this._odataOptions.skip}`);\r\n    }\r\n    if (this._odataOptions.orderBy) {\r\n      let argument = '';\r\n      if (Array.isArray(this._odataOptions.orderBy)) {\r\n        argument = this._odataOptions.orderBy.join(','); // csv, that will form a query example like: $orderby=RoleName asc, Id desc\r\n      } else {\r\n        argument = this._odataOptions.orderBy;\r\n      }\r\n      queryTmpArray.push(`$orderby=${argument}`);\r\n    }\r\n    if (this._odataOptions.filterBy || this._odataOptions.filter) {\r\n      if (this._odataOptions.filter) {\r\n        this._odataOptions.filterQueue = [];\r\n        let filterStr = this._odataOptions.filter;\r\n        if (Array.isArray(this._odataOptions.filter)) {\r\n          filterStr = this._odataOptions.filter.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n        }\r\n        this._odataOptions.filterQueue.push(`(${filterStr})`);\r\n      }\r\n      // filterBy are passed manually by the user, however we will only add it if the column wasn't yet filtered\r\n      if (!!this._odataOptions.filterBy && !!this._odataOptions.filterBy.fieldName && !this._columnFilters[this._odataOptions.filterBy.fieldName.toLowerCase()]) {\r\n        if (this._odataOptions.filterBy.searchTerm !== '') {\r\n          this.saveColumnFilter(this._odataOptions.filterBy.fieldName.toLowerCase(), this._odataOptions.filterBy.searchTerm, this._odataOptions.filterBy.searchTerms);\r\n          this.updateFilterFromListTerms(this._odataOptions.filterBy);\r\n        }\r\n      }\r\n    }\r\n    if (this._odataOptions.filterQueue.length > 0) {\r\n      const query = this._odataOptions.filterQueue.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n      this._odataOptions.filter = query; // overwrite with\r\n      queryTmpArray.push(`$filter=${query}`);\r\n    }\r\n\r\n    // join all the odata functions by a '&'\r\n    return queryTmpArray.join('&');\r\n  }\r\n\r\n  getFilterByColumn(columnName: string): string {\r\n    return (!!this._columnFilters[columnName]) ? this._columnFilters[columnName] : null;\r\n  }\r\n\r\n  getFilterCount(): number {\r\n    return (this._odataOptions.filterQueue) ? this._odataOptions.filterQueue.length : 0;\r\n  }\r\n\r\n  get columnFilters(): any[] {\r\n    return this._columnFilters;\r\n  }\r\n\r\n  get options(): OdataOption {\r\n    return this._odataOptions;\r\n  }\r\n\r\n  set options(options: OdataOption) {\r\n    this._odataOptions = options;\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string) {\r\n    delete this._columnFilters[fieldName];\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: any, searchTerms?: any[]) {\r\n    this._columnFilters[fieldName] = {\r\n      search: searchTerms,\r\n      value\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update the filter by a list of terms usually passed manually by the user as default filters\r\n   * @param filterOptions\r\n   * @returns\r\n   */\r\n  updateFilterFromListTerms(filterOptions: any) {\r\n    // build the filter query\r\n    if (Array.isArray(filterOptions)) {\r\n      filterOptions.forEach((filterOptionObject) => {\r\n        this.updateFilterFromTerm(filterOptionObject);\r\n      });\r\n    } else {\r\n      this.updateFilterFromTerm(filterOptions);\r\n    }\r\n  }\r\n\r\n  updateFilterFromTerm(filterOptions: any) {\r\n    let searchBy = '';\r\n    const tmpSearchByArray = [];\r\n    const fieldName = filterOptions.fieldName;\r\n    const fieldSearchTerms = filterOptions.searchTerms;\r\n    const operator = filterOptions.operator;\r\n\r\n    // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n    if (!!fieldSearchTerms && fieldSearchTerms.length > 0) {\r\n      const tmpSearchTerms = [];\r\n\r\n      if (operator === 'IN') {\r\n        // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n        for (let j = 0, lnj = fieldSearchTerms.length; j < lnj; j++) {\r\n          tmpSearchTerms.push(`${fieldName} eq '${fieldSearchTerms[j]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' or ');\r\n        searchBy = `$(${searchBy})`;\r\n      } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n        // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n        for (let k = 0, lnk = fieldSearchTerms.length; k < lnk; k++) {\r\n          tmpSearchTerms.push(`${fieldName} ne '${fieldSearchTerms[k]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' and ');\r\n        searchBy = `$(${searchBy})`;\r\n      }\r\n    }\r\n\r\n    // push to our temp array and also trim white spaces\r\n    tmpSearchByArray.push(String.trim(searchBy));\r\n\r\n    // add to the filter queue only if it doesn't exist in the queue\r\n    const filter = (tmpSearchByArray.length > 0) ? tmpSearchByArray.join(' and ') : '';\r\n    if (this._odataOptions.filterQueue && this._odataOptions.filterQueue.indexOf(filter) === -1) {\r\n      this._odataOptions.filterQueue.push(filter);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change any OData options that will be used to build the query\r\n   * @param object options\r\n   */\r\n  updateOptions(options: OdataOption) {\r\n    for (const property of Object.keys(options)) {\r\n      if (options.hasOwnProperty(property)) {\r\n        this._odataOptions[property] = options[property]; // replace of the property\r\n      }\r\n\r\n      // we need to keep the defaultSortBy for references whenever the user removes his Sorting\r\n      // then we would revert to the defaultSortBy and the only way is to keep a hard copy here\r\n      if (property === 'orderBy' || property === 'sortBy') {\r\n        let sortBy = options[property];\r\n\r\n        // make sure first char of each orderBy field is capitalize\r\n        if (this._odataOptions.caseType === CaseType.pascalCase) {\r\n          if (Array.isArray(sortBy)) {\r\n            sortBy.forEach((field, index, inputArray) => {\r\n              inputArray[index] = String.titleCase(field);\r\n            });\r\n          } else {\r\n            sortBy = String.titleCase(options[property]);\r\n          }\r\n        }\r\n        this._odataOptions.orderBy = sortBy;\r\n        this._defaultSortBy = sortBy;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
    "import './global-utilities';\nimport { parseUtcDate } from './utilities';\nimport { Injectable } from '@angular/core';\nimport {\n  BackendService,\n  CaseType,\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  ColumnSort,\n  CurrentFilter,\n  CurrentPagination,\n  CurrentSorter,\n  FilterChangedArgs,\n  FieldType,\n  GridOption,\n  OdataOption,\n  Pagination,\n  PaginationChangedArgs,\n  SearchTerm,\n  SortChangedArgs,\n  SortDirection,\n  SortDirectionString\n} from './../models/index';\nimport { OdataService } from './odata.service';\n\nlet timer: any;\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\nconst DEFAULT_ITEMS_PER_PAGE = 25;\nconst DEFAULT_PAGE_SIZE = 20;\n\n@Injectable()\nexport class GridOdataService implements BackendService {\n  private _currentFilters: CurrentFilter[];\n  private _currentPagination: CurrentPagination;\n  private _currentSorters: CurrentSorter[];\n  private _columnDefinitions: Column[];\n  private _grid: any;\n  odataService: OdataService;\n  options: OdataOption;\n  pagination: Pagination | undefined;\n  defaultOptions: OdataOption = {\n    top: DEFAULT_ITEMS_PER_PAGE,\n    orderBy: '',\n    caseType: CaseType.pascalCase\n  };\n\n  constructor() {\n    this.odataService = new OdataService();\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  buildQuery(): string {\n    return this.odataService.buildQuery();\n  }\n\n  init(options: OdataOption, pagination?: Pagination, grid?: any): void {\n    this._grid = grid;\n    const mergedOptions = { ...this.defaultOptions, ...options };\n    if (pagination && pagination.pageSize) {\n      mergedOptions.top = pagination.pageSize;\n    }\n    this.odataService.options = { ...mergedOptions, top: mergedOptions.top || this.defaultOptions.top };\n    this.options = this.odataService.options;\n    this.pagination = pagination;\n\n    // save current pagination as Page 1 and page size as \"top\"\n    this._currentPagination = {\n      pageNumber: 1,\n      pageSize: this.odataService.options.top || this.defaultOptions.top\n    };\n\n    if (grid && grid.getColumns && grid.getOptions) {\n      this._columnDefinitions = grid.getColumns() || options.columnDefinitions;\n      this._columnDefinitions = this._columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\n    }\n  }\n\n  updateOptions(serviceOptions?: OdataOption) {\n    this.options = { ...this.options, ...serviceOptions };\n  }\n\n  removeColumnFilter(fieldName: string): void {\n    this.odataService.removeColumnFilter(fieldName);\n  }\n\n  /** Get the Filters that are currently used by the grid */\n  getCurrentFilters(): CurrentFilter[] {\n    return this._currentFilters;\n  }\n\n  /** Get the Pagination that is currently used by the grid */\n  getCurrentPagination(): CurrentPagination {\n    return this._currentPagination;\n  }\n\n  /** Get the Sorters that are currently used by the grid */\n  getCurrentSorters(): CurrentSorter[] {\n    return this._currentSorters;\n  }\n\n  /*\n   * Reset the pagination options\n   */\n  resetPaginationOptions() {\n    this.odataService.updateOptions({\n      skip: 0\n    });\n  }\n\n  saveColumnFilter(fieldName: string, value: string, terms?: any[]) {\n    this.odataService.saveColumnFilter(fieldName, value, terms);\n  }\n\n  /*\n   * FILTERING\n   */\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\n    const serviceOptions: GridOption = args.grid.getOptions();\n    const backendApi = serviceOptions.backendServiceApi;\n\n    if (backendApi === undefined) {\n      throw new Error('Something went wrong in the GridOdataService, \"backendServiceApi\" is not initialized');\n    }\n\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\n    let debounceTypingDelay = 0;\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\n    }\n\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    this._currentFilters = this.castFilterToColumnFilter(args.columnFilters);\n\n    const promise = new Promise<string>((resolve, reject) => {\n      // reset Pagination, then build the OData query which we will use in the WebAPI callback\n      // wait a minimum user typing inactivity before processing any query\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        // loop through all columns to inspect filters & set the query\n        this.updateFilters(args.columnFilters);\n\n        this.resetPaginationOptions();\n        resolve(this.odataService.buildQuery());\n      }, debounceTypingDelay);\n    });\n\n    return promise;\n  }\n\n  /*\n   * PAGINATION\n   */\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\n    const pageSize = +(args.pageSize || DEFAULT_PAGE_SIZE);\n    this.updatePagination(args.newPage, pageSize);\n\n    // build the OData query which we will use in the WebAPI callback\n    return this.odataService.buildQuery();\n  }\n\n  /*\n   * SORTING\n   */\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\n\n    // loop through all columns to inspect sorters & set the query\n    this.updateSorters(sortColumns);\n\n    // build the OData query which we will use in the WebAPI callback\n    return this.odataService.buildQuery();\n  }\n\n  /**\n   * loop through all columns to inspect filters & update backend service filteringOptions\n   * @param columnFilters\n   */\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset?: boolean) {\n    let searchBy = '';\n    const searchByArray: string[] = [];\n\n    // loop through all columns to inspect filters\n    for (const columnId in columnFilters) {\n      if (columnFilters.hasOwnProperty(columnId)) {\n        const columnFilter = columnFilters[columnId];\n\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\n        let columnDef: Column | undefined;\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\n          columnDef = this._columnDefinitions.find((column: Column) => {\n            return column.id === columnFilter.columnId;\n          });\n        } else {\n          columnDef = columnFilter.columnDef;\n        }\n        if (!columnDef) {\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\n        }\n\n        let fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\n        const fieldType = columnDef.type || 'string';\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\n        if (typeof fieldSearchValue === 'undefined') {\n          fieldSearchValue = '';\n        }\n\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\n          throw new Error(`ODdata filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {model: Filters.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\n        }\n\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n        const operator = columnFilter.operator || ((matches) ? matches[1] : '');\n        let searchValue = (!!matches) ? matches[2] : '';\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n        const bypassOdataQuery = columnFilter.bypassBackendQuery || false;\n\n        // no need to query if search value is empty\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\n          this.removeColumnFilter(fieldName);\n          continue;\n        }\n\n        // escaping the search value\n        searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\n        searchValue = encodeURIComponent(searchValue); // encode URI of the final search value\n\n        // extra query arguments\n        if (bypassOdataQuery) {\n          // push to our temp array and also trim white spaces\n          if (fieldName) {\n            this.saveColumnFilter(fieldName, fieldSearchValue, searchTerms);\n          }\n        } else {\n          searchBy = '';\n\n          // titleCase the fieldName so that it matches the WebApi names\n          if (this.odataService.options.caseType === CaseType.pascalCase) {\n            fieldName = String.titleCase(fieldName || '');\n          }\n\n          // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\n          if (searchTerms && searchTerms.length > 1) {\n            const tmpSearchTerms = [];\n\n            if (operator === 'IN') {\n              // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\n              for (let j = 0, lnj = searchTerms.length; j < lnj; j++) {\n                tmpSearchTerms.push(`${fieldName} eq '${searchTerms[j]}'`);\n              }\n              searchBy = tmpSearchTerms.join(' or ');\n              searchBy = `(${searchBy})`;\n            } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\n              // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\n              for (let k = 0, lnk = searchTerms.length; k < lnk; k++) {\n                tmpSearchTerms.push(`${fieldName} ne '${searchTerms[k]}'`);\n              }\n              searchBy = tmpSearchTerms.join(' and ');\n              searchBy = `(${searchBy})`;\n            }\n          } else if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar !== '') {\n            // first/last character is a '*' will be a startsWith or endsWith\n            searchBy = (operator === '*' || operator === '*z')\n              ? `endswith(${fieldName}, '${searchValue}')`\n              : `startswith(${fieldName}, '${searchValue}')`;\n          } else if (fieldType === FieldType.date) {\n            // date field needs to be UTC and within DateTime function\n            const dateFormatted = parseUtcDate(searchValue, true);\n            if (dateFormatted) {\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} DateTime'${dateFormatted}'`;\n            }\n          } else if (fieldType === FieldType.string) {\n            // string field needs to be in single quotes\n            if (operator === '') {\n              searchBy = `substringof('${searchValue}', ${fieldName})`;\n            } else {\n              // searchBy = `substringof('${searchValue}', ${fieldNameCased}) ${this.mapOdataOperator(operator)} true`;\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} '${searchValue}'`;\n            }\n          } else {\n            // any other field type (or undefined type)\n            searchValue = fieldType === FieldType.number ? searchValue : `'${searchValue}'`;\n            searchBy = `${fieldName} ${this.mapOdataOperator(operator)} ${searchValue}`;\n          }\n\n          // push to our temp array and also trim white spaces\n          if (searchBy !== '') {\n            searchByArray.push(String.trim(searchBy));\n            this.saveColumnFilter(fieldName || '', fieldSearchValue, searchTerms);\n          }\n        }\n      }\n    }\n\n    // update the service options with filters for the buildQuery() to work later\n    this.odataService.updateOptions({\n      filter: (searchByArray.length > 0) ? searchByArray.join(' and ') : '',\n      skip: undefined\n    });\n  }\n\n  /**\n   * Update the pagination component with it's new page number and size\n   * @param newPage\n   * @param pageSize\n   */\n  updatePagination(newPage: number, pageSize: number) {\n    this._currentPagination = {\n      pageNumber: newPage,\n      pageSize\n    };\n\n    this.odataService.updateOptions({\n      top: pageSize,\n      skip: (newPage - 1) * pageSize\n    });\n  }\n\n  /**\n   * loop through all columns to inspect sorters & update backend service orderBy\n   * @param columnFilters\n   */\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\n    let sortByArray: any[] = [];\n    const sorterArray: CurrentSorter[] = [];\n\n    if (!sortColumns && presetSorters) {\n      // make the presets the current sorters, also make sure that all direction are in lowercase for OData\n      sortByArray = presetSorters;\n      sortByArray.forEach((sorter) => sorter.direction = sorter.direction.toLowerCase() as SortDirectionString);\n\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\n      const tmpSorterArray = sortByArray.map((sorter) => {\n        sorterArray.push({\n          columnId: sorter.columnId + '',\n          direction: sorter.direction\n        });\n        return {\n          columnId: sorter.columnId,\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\n        };\n      });\n      this._grid.setSortColumns(tmpSorterArray);\n    } else if (sortColumns && !presetSorters) {\n      // build the SortBy string, it could be multisort, example: customerNo asc, purchaserName desc\n      if (sortColumns && sortColumns.length === 0) {\n        sortByArray = new Array(this.defaultOptions.orderBy); // when empty, use the default sort\n      } else {\n        if (sortColumns) {\n          for (const column of sortColumns) {\n            if (column.sortCol) {\n              let fieldName = (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '';\n              let columnFieldName = (column.sortCol.field || column.sortCol.id) + '';\n              if (this.odataService.options.caseType === CaseType.pascalCase) {\n                fieldName = String.titleCase(fieldName);\n                columnFieldName = String.titleCase(columnFieldName);\n              }\n\n              sorterArray.push({\n                columnId: columnFieldName,\n                direction: column.sortAsc ? 'asc' : 'desc'\n              });\n            }\n          }\n          sortByArray = sorterArray;\n        }\n      }\n    }\n\n    // transform the sortby array into a CSV string for OData\n    sortByArray = sortByArray as CurrentSorter[];\n    const csvString = sortByArray.map((sorter) => `${sorter.columnId} ${sorter.direction.toLowerCase()}`).join(',');\n    this.odataService.updateOptions({\n      orderBy: (this.odataService.options.caseType === CaseType.pascalCase) ? String.titleCase(csvString) : csvString\n    });\n\n    // keep current Sorters and update the service options with the new sorting\n    this._currentSorters = sortByArray as CurrentSorter[];\n\n    // build the OData query which we will use in the WebAPI callback\n    return this.odataService.buildQuery();\n  }\n\n  //\n  // private functions\n  // -------------------\n  /**\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\n   * @param columnFilters\n   */\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    const filtersArray: ColumnFilter[] = ((typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters) as CurrentFilter[];\n\n    return filtersArray.map((filter) => {\n      const columnDef = filter.columnDef;\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\n      if (filter.operator) {\n        tmpFilter.operator = filter.operator;\n      }\n      if (Array.isArray(filter.searchTerms)) {\n        tmpFilter.searchTerms = filter.searchTerms;\n      }\n      return tmpFilter;\n    });\n  }\n\n  /**\n   * Mapper for mathematical operators (ex.: <= is \"le\", > is \"gt\")\n   * @param string operator\n   * @returns string map\n   */\n  private mapOdataOperator(operator: string) {\n    let map = '';\n    switch (operator) {\n      case '<':\n        map = 'lt';\n        break;\n      case '<=':\n        map = 'le';\n        break;\n      case '>':\n        map = 'gt';\n        break;\n      case '>=':\n        map = 'ge';\n        break;\n      case '<>':\n      case '!=':\n        map = 'ne';\n        break;\n      case '=':\n      case '==':\n      default:\n        map = 'eq';\n        break;\n    }\n\n    return map;\n  }\n}\n",
    "import { OnEventArgs, CellArgs, GridOption } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GridEventService {\n  private _eventHandler: any = new Slick.EventHandler();\n\n  /* OnCellChange Event */\n  attachOnCellChange(grid: any, dataView: any) {\n    // subscribe to this Slickgrid event of onCellChange\n    this._eventHandler.subscribe(grid.onCellChange, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellChange property (a callback function), then run it\n      if (typeof column.onCellChange === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onCellChange\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellChanges.... function\n        column.onCellChange(e, returnedArgs);\n      }\n    });\n  }\n  /* OnClick Event */\n  attachOnClick(grid: any, dataView: any) {\n    this._eventHandler.subscribe(grid.onClick, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellClick property (a callback function), then run it\n      if (typeof column.onCellClick === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onClick\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellClick.... function\n        column.onCellClick(e, returnedArgs);\n      }\n    });\n  }\n\n  dispose() {\n    this._eventHandler.unsubscribeAll();\n  }\n}\n",
    "import {\r\n  Column,\r\n  CurrentColumn,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  GridOption,\r\n  GridState,\r\n  GridStateChange,\r\n  GridStateType\r\n} from './../models/index';\r\nimport { ControlAndPluginService, FilterService, SortService } from './../services/index';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\ndeclare var Slick: any;\r\n\r\nexport class GridStateService {\r\n  private _eventHandler = new Slick.EventHandler();\r\n  private _columns: Column[] = [];\r\n  private _currentColumns: CurrentColumn[] = [];\r\n  private _grid: any;\r\n  private controlAndPluginService: ControlAndPluginService;\r\n  private filterService: FilterService;\r\n  private sortService: SortService;\r\n  private subscriptions: Subscription[] = [];\r\n  onGridStateChanged = new Subject<GridStateChange>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Export Service\r\n   * @param grid\r\n   * @param filterService\r\n   * @param sortService\r\n   * @param dataView\r\n   */\r\n  init(grid: any, controlAndPluginService: ControlAndPluginService, filterService: FilterService, sortService: SortService): void {\r\n    this._grid = grid;\r\n    this.controlAndPluginService = controlAndPluginService;\r\n    this.filterService = filterService;\r\n    this.sortService = sortService;\r\n\r\n    this.subscribeToAllGridChanges(grid);\r\n  }\r\n\r\n  /** Dispose of all the SlickGrid & Aurelia subscriptions */\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    // also unsubscribe all Aurelia Subscriptions\r\n    this.subscriptions.forEach((subscription: Subscription) => {\r\n      if (subscription && subscription.unsubscribe) {\r\n        subscription.unsubscribe();\r\n      }\r\n    });\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  /**\r\n   * Get the current grid state (filters/sorters/pagination)\r\n   * @return grid state\r\n   */\r\n  getCurrentGridState(): GridState {\r\n    const gridState: GridState = {\r\n      columns: this.getCurrentColumns(),\r\n      filters: this.getCurrentFilters(),\r\n      sorters: this.getCurrentSorters()\r\n    };\r\n\r\n    const currentPagination = this.getCurrentPagination();\r\n    if (currentPagination) {\r\n      gridState.pagination = currentPagination;\r\n    }\r\n    return gridState;\r\n  }\r\n\r\n  /**\r\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\r\n   * @return current columns\r\n   */\r\n  getColumns(): Column[] {\r\n    return this._columns || this._grid.getColumns();\r\n  }\r\n\r\n  /**\r\n   * From an array of Grid Column Definitions, get the associated Current Columns\r\n   * @param gridColumns\r\n   */\r\n  getAssociatedCurrentColumns(gridColumns: Column[]): CurrentColumn[] {\r\n    const currentColumns: CurrentColumn[] = [];\r\n\r\n    if (gridColumns && Array.isArray(gridColumns)) {\r\n      gridColumns.forEach((column: Column, index: number) => {\r\n        if (column && column.id) {\r\n          currentColumns.push({\r\n            columnId: column.id as string,\r\n            cssClass: column.cssClass || '',\r\n            headerCssClass: column.headerCssClass || '',\r\n            width: column.width || 0\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this._currentColumns = currentColumns;\r\n    return currentColumns;\r\n  }\r\n\r\n  /**\r\n   * From an array of Current Columns, get the associated Grid Column Definitions\r\n   * @param grid\r\n   * @param currentColumns\r\n   */\r\n  getAssociatedGridColumns(grid: any, currentColumns: CurrentColumn[]): Column[] {\r\n    const columns: Column[] = [];\r\n    const gridColumns: Column[] = grid.getColumns();\r\n\r\n    if (currentColumns && Array.isArray(currentColumns)) {\r\n      currentColumns.forEach((currentColumn: CurrentColumn, index: number) => {\r\n        const gridColumn: Column = gridColumns.find((c: Column) => c.id === currentColumn.columnId);\r\n        if (gridColumn && gridColumn.id) {\r\n          columns.push({\r\n            ...gridColumn,\r\n            cssClass: currentColumn.cssClass,\r\n            headerCssClass: currentColumn.headerCssClass,\r\n            width: currentColumn.width\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this._columns = columns;\r\n    return columns;\r\n  }\r\n\r\n  /**\r\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\r\n   * @return current columns\r\n   */\r\n  getCurrentColumns(): CurrentColumn[] {\r\n    let currentColumns: CurrentColumn[] = [];\r\n    if (this._currentColumns && Array.isArray(this._currentColumns) && this._currentColumns.length > 0) {\r\n      currentColumns = this._currentColumns;\r\n    } else {\r\n      currentColumns = this.getAssociatedCurrentColumns(this._grid.getColumns());\r\n    }\r\n\r\n    return currentColumns;\r\n  }\r\n\r\n  /**\r\n   * Get the Filters (and their state, columnId, searchTerm(s)) that are currently applied in the grid\r\n   * @return current filters\r\n   */\r\n  getCurrentFilters(): CurrentFilter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentFilters) {\r\n        return backendService.getCurrentFilters() as CurrentFilter[];\r\n      }\r\n    } else if (this.filterService && this.filterService.getCurrentLocalFilters) {\r\n      return this.filterService.getCurrentLocalFilters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get current Pagination (and it's state, pageNumber, pageSize) that are currently applied in the grid\r\n   * @return current pagination state\r\n   */\r\n  getCurrentPagination(): CurrentPagination | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentPagination) {\r\n        return backendService.getCurrentPagination();\r\n      }\r\n    } else {\r\n      // TODO implement this whenever local pagination gets implemented\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get the current Sorters (and their state, columnId, direction) that are currently applied in the grid\r\n   * @return current sorters\r\n   */\r\n  getCurrentSorters(): CurrentSorter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        return backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n    } else if (this.sortService && this.sortService.getCurrentLocalSorters) {\r\n      return this.sortService.getCurrentLocalSorters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Hook a SlickGrid Extension Event to a Grid State change event\r\n   * @param extension name\r\n   * @param grid\r\n   */\r\n  hookExtensionEventToGridStateChange(extensionName: string, eventName: string) {\r\n    const extension = this.controlAndPluginService && this.controlAndPluginService.getExtensionByName(extensionName);\r\n\r\n    if (extension && extension.service && extension.service[eventName] && extension.service[eventName].subscribe) {\r\n      this._eventHandler.subscribe(extension.service[eventName], (e: Event, args: any) => {\r\n        const columns: Column[] = args && args.columns;\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hook a Grid Event to a Grid State change event\r\n   * @param event name\r\n   * @param grid\r\n   */\r\n  hookSlickGridEventToGridStateChange(eventName: string, grid: any) {\r\n    if (grid && grid[eventName] && grid[eventName].subscribe) {\r\n      this._eventHandler.subscribe(grid[eventName], (e: Event, args: any) => {\r\n        const columns: Column[] = grid.getColumns();\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      });\r\n    }\r\n  }\r\n\r\n  resetColumns(columnDefinitions?: Column[]) {\r\n    const columns: Column[] = columnDefinitions || this._columns;\r\n    const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n    this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n  }\r\n\r\n  /**\r\n   * Subscribe to all necessary SlickGrid or Service Events that deals with a Grid change,\r\n   * when triggered, we will publish a Grid State Event with current Grid State\r\n   */\r\n  subscribeToAllGridChanges(grid: any) {\r\n    // Subscribe to Event Emitter of Filter changed\r\n    this.subscriptions.push(\r\n      this.filterService.onFilterChanged.subscribe((currentFilters: CurrentFilter[]) => {\r\n        this.onGridStateChanged.next({ change: { newValues: currentFilters, type: GridStateType.filter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n    // Subscribe to Event Emitter of Filter cleared\r\n      this.subscriptions.push(\r\n        this.filterService.onFilterCleared.subscribe(() => {\r\n          this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.filter }, gridState: this.getCurrentGridState() });\r\n        })\r\n      );\r\n\r\n    // Subscribe to Event Emitter of Sort changed\r\n    this.subscriptions.push(\r\n      this.sortService.onSortChanged.subscribe((currentSorters: CurrentSorter[]) => {\r\n        this.onGridStateChanged.next({ change: { newValues: currentSorters, type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to Event Emitter of Sort cleared\r\n    this.subscriptions.push(\r\n      this.sortService.onSortCleared.subscribe(() => {\r\n        this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to ColumnPicker and/or GridMenu for show/hide Columns visibility changes\r\n    this.hookExtensionEventToGridStateChange('ColumnPicker', 'onColumnsChanged');\r\n    this.hookExtensionEventToGridStateChange('GridMenu', 'onColumnsChanged');\r\n\r\n    // subscribe to Column Resize & Reordering\r\n    this.hookSlickGridEventToGridStateChange('onColumnsReordered', grid);\r\n    this.hookSlickGridEventToGridStateChange('onColumnsResized', grid);\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport { Injectable } from '@angular/core';\nimport { CellArgs, Column, GridOption, OnEventArgs } from './../models/index';\nimport { ControlAndPluginService } from './controlAndPlugin.service';\nimport { FilterService } from './filter.service';\nimport { GridStateService } from './gridState.service';\nimport { SortService } from './sort.service';\n\n// using external non-typed js libraries\ndeclare var $: any;\ndeclare var Slick: any;\n\n@Injectable()\nexport class GridService {\n  private _grid: any;\n  private _dataView: any;\n\n  constructor(private controlAndPluginService: ControlAndPluginService, private filterService: FilterService, private gridStateService: GridStateService, private sortService: SortService, private translate: TranslateService) { }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  init(grid: any, dataView: any): void {\n    this._grid = grid;\n    this._dataView = dataView;\n  }\n\n  /**\n   * From a SlickGrid Event triggered get the Column Definition and Item Data Context\n   *\n   * For example the SlickGrid onClick will return cell arguments when subscribing to it.\n   * From these cellArgs, we want to get the Column Definition and Item Data\n   * @param cell event args\n   * @return object with columnDef and dataContext\n   */\n  getColumnFromEventArguments(args: CellArgs): OnEventArgs {\n    if (!args || !args.grid || !args.grid.getColumns || !args.grid.getDataItem) {\n      throw new Error('To get the column definition and data, we need to have these arguments passed as objects (row, cell, grid)');\n    }\n\n    return {\n      row: args.row,\n      cell: args.cell,\n      columnDef: args.grid.getColumns()[args.cell],\n      dataContext: args.grid.getDataItem(args.row),\n      dataView: this._dataView,\n      grid: this._grid,\n      gridDefinition: this._gridOptions\n    };\n  }\n\n  getDataItemByRowNumber(rowNumber: number) {\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\n      throw new Error('We could not find SlickGrid Grid object');\n    }\n    return this._grid.getDataItem(rowNumber);\n  }\n\n  /** Chain the item Metadata with our implementation of Metadata at given row index */\n  getItemRowMetadata(previousItemMetadata: any) {\n    return (rowNumber: number) => {\n      const item = this._dataView.getItem(rowNumber);\n      let meta = {\n        cssClasses: ''\n      };\n      if (typeof previousItemMetadata === 'object' && !$.isEmptyObject(previousItemMetadata)) {\n        meta = previousItemMetadata(rowNumber);\n      }\n\n      if (item && item._dirty) {\n        meta.cssClasses = (meta.cssClasses || '') + ' dirty';\n      }\n      if (item && item.rowClass) {\n        meta.cssClasses += ` ${item.rowClass}`;\n        meta.cssClasses += ` row${rowNumber}`;\n      }\n\n      return meta;\n    };\n  }\n\n  /**\n   * Highlight then fade a row for x seconds.\n   * The implementation follows this SO answer: https://stackoverflow.com/a/19985148/1212166\n   * @param rowNumber\n   * @param fadeDelay\n   */\n  highlightRow(rowNumber: number, fadeDelay: number = 1500) {\n    // create a SelectionModel if there's not one yet\n    if (!this._grid.getSelectionModel()) {\n      const rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n      this._grid.setSelectionModel(rowSelectionPlugin);\n    }\n\n    this._grid.setSelectedRows([rowNumber]);\n    this._dataView.getItemMetadata = this.getItemRowMetadata(this._dataView.getItemMetadata);\n\n    const item = this._dataView.getItem(rowNumber);\n    if (item && item.id) {\n      item.rowClass = 'highlight';\n      this._dataView.updateItem(item.id, item);\n      const gridOptions = this._grid.getOptions() as GridOption;\n\n      // highlight the row for a user defined timeout\n      $(`#${gridOptions.gridId}`)\n          .find(`.highlight.row${rowNumber}`)\n          .first();\n\n      // delete the row's CSS that was attached for highlighting\n      setTimeout(() => {\n        if (item && item.id) {\n          delete item.rowClass;\n          const gridIdx = this._dataView.getIdxById(item.id);\n          if (gridIdx !== undefined) {\n            this._dataView.updateItem(item.id, item);\n          }\n        }\n      }, fadeDelay + 10);\n    }\n  }\n\n  /** Get the currently selected rows */\n  getSelectedRows() {\n    return this._grid.getSelectedRows();\n  }\n\n  /** Select the selected row by a row index */\n  setSelectedRow(rowIndex: number) {\n    this._grid.setSelectedRows([rowIndex]);\n  }\n\n  /** Set selected rows with provided array of row indexes */\n  setSelectedRows(rowIndexes: number[]) {\n    this._grid.setSelectedRows(rowIndexes);\n  }\n\n  /** Re-Render the Grid */\n  renderGrid() {\n    if (this._grid && typeof this._grid.invalidate === 'function') {\n      this._grid.invalidate();\n      this._grid.render();\n    }\n  }\n\n  /**\n   * Reset the grid to it's original state (clear any filters, sorting & pagination if exists) .\n   * The column definitions could be passed as argument to reset (this can be used after a Grid State reset)\n   * The reset will clear the Filters & Sort, then will reset the Columns to their original state\n   */\n  resetGrid(columnDefinitions?: Column[]) {\n    // reset columns to original states & refresh the grid\n    if (this._grid && this._dataView) {\n      const originalColumns = this.controlAndPluginService.getAllColumns();\n      // const originalColumns = columnDefinitions || this._columnDefinitions;\n      if (Array.isArray(originalColumns) && originalColumns.length > 0) {\n        // set the grid columns to it's original column definitions\n        this._grid.setColumns(originalColumns);\n        this._dataView.refresh();\n        this._grid.autosizeColumns();\n        this.gridStateService.resetColumns(columnDefinitions);\n      }\n    }\n    if (this.filterService && this.filterService.clearFilters) {\n      this.filterService.clearFilters();\n    }\n    if (this.sortService && this.sortService.clearSorting) {\n      this.sortService.clearSorting();\n    }\n  }\n\n  /**\n   * Add an item (data item) to the datagrid\n   * @param object dataItem: item object holding all properties of that row\n   */\n  addItemToDatagrid(item) {\n    if (!this._grid || !this._gridOptions || !this._dataView) {\n      throw new Error('We could not find SlickGrid Grid, DataView objects');\n    }\n    if (!this._gridOptions || (!this._gridOptions.enableCheckboxSelector && !this._gridOptions.enableRowSelection)) {\n      throw new Error('addItemToDatagrid() requires to have a valid Slickgrid Selection Model. You can overcome this issue by enabling enableCheckboxSelector or enableRowSelection to True');\n    }\n\n    const row = 0;\n    this._dataView.insertItem(row, item);\n    this._grid.scrollRowIntoView(0); // scroll to row 0\n    this.highlightRow(0, 1500);\n\n    // refresh dataview & grid\n    this._dataView.refresh();\n  }\n\n  /**\n   * Delete an existing item from the datagrid (dataView)\n   * @param object item: item object holding all properties of that row\n   */\n  deleteDataGridItem(item: any) {\n    if (!item || !item.hasOwnProperty('id')) {\n      throw new Error(`deleteDataGridItem() requires an item object which includes the \"id\" property`);\n    }\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\n    this.deleteDataGridItemById(itemId);\n  }\n\n  /**\n   * Delete an existing item from the datagrid (dataView) by it's id\n   * @param itemId: item unique id\n   */\n  deleteDataGridItemById(itemId: string | number) {\n    if (itemId === undefined) {\n      throw new Error(`Cannot delete a row without a valid \"id\"`);\n    }\n    if (this._dataView.getRowById(itemId) === undefined) {\n      throw new Error(`Could not find the item in the grid by it's associated \"id\"`);\n    }\n\n    // delete the item from the dataView\n    this._dataView.deleteItem(itemId);\n    this._dataView.refresh();\n  }\n\n  /**\n   * Update an existing item with new properties inside the datagrid\n   * @param object item: item object holding all properties of that row\n   */\n  updateDataGridItem(item: any) {\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\n\n    if (itemId === undefined) {\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\n    }\n\n    this.updateDataGridItemById(itemId, item);\n  }\n\n  /**\n   * Update an existing item in the datagrid by it's id and new properties\n   * @param itemId: item unique id\n   * @param object item: item object holding all properties of that row\n   */\n  updateDataGridItemById(itemId: number | string, item: any) {\n    if (itemId === undefined) {\n      throw new Error(`Cannot update a row without a valid \"id\"`);\n    }\n    const row = this._dataView.getRowById(itemId);\n\n    if (!item || row === undefined) {\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\n    }\n\n    const gridIdx = this._dataView.getIdxById(itemId);\n    if (gridIdx !== undefined) {\n      // Update the item itself inside the dataView\n      this._dataView.updateItem(itemId, item);\n\n      // highlight the row we just updated\n      this.highlightRow(row, 1500);\n\n      // refresh dataview & grid\n      this._dataView.refresh();\n    }\n  }\n}\n",
    "\nimport {\n  Column,\n  GridOption\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare let $: any;\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GroupingAndColspanService {\n  private _eventHandler = new Slick.EventHandler();\n  private _dataView: any;\n  private _grid: any;\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any, dataView: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n\n    if (grid && this._gridOptions) {\n      // When dealing with Pre-Header Grouping colspan, we need to re-create the pre-header in multiple occasions\n      // for all these occasions, we have to trigger a re-create\n      if (this._gridOptions.createPreHeaderPanel) {\n        this._eventHandler.subscribe(grid.onSort, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(grid.onColumnsResized, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(dataView.onRowCountChanged, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n\n        // also not sure why at this point, but it seems that I need to call the 1st create in a delayed execution\n        // probably some kind of timing issues and delaying it until the grid is fully ready does help\n        setTimeout(() => {\n          this.createPreHeaderRowGroupingTitle();\n        }, 50);\n      }\n    }\n  }\n\n  dispose() {\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n  }\n\n  createPreHeaderRowGroupingTitle() {\n    const $preHeaderPanel = $(this._grid.getPreHeaderPanel())\n      .empty()\n      .addClass('slick-header-columns')\n      .css('left', '-1000px')\n      .width(this._grid.getHeadersWidth());\n    $preHeaderPanel.parent().addClass('slick-header');\n    const headerColumnWidthDiff = this._grid.getHeaderColumnWidthDiff();\n    let m;\n    let header;\n    let lastColumnGroup = '';\n    let widthTotal = 0;\n\n    for (let i = 0; i < this._columnDefinitions.length; i++) {\n      m = this._columnDefinitions[i];\n      if (lastColumnGroup === m.columnGroup && i > 0) {\n        widthTotal += m.width;\n        header.width(widthTotal - headerColumnWidthDiff);\n      } else {\n        widthTotal = m.width;\n        header = $(`<div class=\"ui-state-default slick-header-column\" />`)\n          .html(`<span class=\"slick-column-name\">${m.columnGroup || ''}</span>`)\n          .width(m.width - headerColumnWidthDiff)\n          .appendTo($preHeaderPanel);\n      }\n      lastColumnGroup = m.columnGroup;\n    }\n  }\n}\n",
    "import { Column, GridOption } from './../models/index';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n// global constants, height/width are in pixels\r\nconst DATAGRID_MIN_HEIGHT = 180;\r\nconst DATAGRID_MIN_WIDTH = 300;\r\nconst DATAGRID_BOTTOM_PADDING = 20;\r\nconst DATAGRID_PAGINATION_HEIGHT = 35;\r\nlet timer: any;\r\n\r\nexport interface GridDimension {\r\n  height: number;\r\n  width: number;\r\n  heightWithPagination?: number;\r\n}\r\n\r\nexport class ResizerService {\r\n  private _grid: any;\r\n  private _lastDimensions: GridDimension;\r\n  onGridBeforeResize = new Subject<boolean>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  private get _gridUid(): string {\r\n    return (this._grid && this._grid.getUID) ? this._grid.getUID() : this._gridOptions.gridId;\r\n  }\r\n\r\n  init(grid: any): void {\r\n    this._grid = grid;\r\n  }\r\n\r\n  /** Attach an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space\r\n   * Options: we could also provide a % factor to resize on each height/width independently\r\n   */\r\n  attachAutoResizeDataGrid(newSizes?: GridDimension) {\r\n    // if we can't find the grid to resize, return without attaching anything\r\n    const gridDomElm = $(`#${this._gridOptions && this._gridOptions.gridId ? this._gridOptions.gridId : 'grid1'}`);\r\n    if (gridDomElm === undefined || gridDomElm.offset() === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // -- 1st resize the datagrid size at first load (we need this because the .on event is not triggered on first load)\r\n    this.resizeGrid(0, newSizes);\r\n\r\n    // -- 2nd attach a trigger on the Window DOM element, so that it happens also when resizing after first load\r\n    // -- attach auto-resize to Window object only if it exist\r\n    $(window).on(`resize.grid.${this._gridUid}`, () => {\r\n      this.onGridBeforeResize.next(true);\r\n      // for some yet unknown reason, calling the resize twice removes any stuttering/flickering when changing the height and makes it much smoother\r\n      this.resizeGrid(0, newSizes);\r\n      this.resizeGrid(0, newSizes);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation\r\n   * object gridOptions\r\n   */\r\n  calculateGridNewDimensions(gridOptions: GridOption): any {\r\n    const gridDomElm = $(`#${gridOptions.gridId}`);\r\n    const containerElm = (gridOptions.autoResize && gridOptions.autoResize.containerId) ? $(`#${gridOptions.autoResize.containerId}`) : $(`#${gridOptions.gridContainerId}`);\r\n    const windowElm = $(window);\r\n    if (windowElm === undefined || containerElm === undefined || gridDomElm === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // calculate bottom padding\r\n    // if using pagination, we need to add the pagination height to this bottom padding\r\n    let bottomPadding = (gridOptions.autoResize && gridOptions.autoResize.bottomPadding) ? gridOptions.autoResize.bottomPadding : DATAGRID_BOTTOM_PADDING;\r\n    if (bottomPadding && (gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\r\n      bottomPadding += DATAGRID_PAGINATION_HEIGHT;\r\n    }\r\n\r\n    const gridHeight = windowElm.height() || 0;\r\n    const coordOffsetTop = gridDomElm.offset();\r\n    const gridOffsetTop = (coordOffsetTop !== undefined) ? coordOffsetTop.top : 0;\r\n    const availableHeight = gridHeight - gridOffsetTop - bottomPadding;\r\n    const availableWidth = containerElm.width() || 0;\r\n    const minHeight = (gridOptions.autoResize && gridOptions.autoResize.minHeight < 0) ? gridOptions.autoResize.minHeight : DATAGRID_MIN_HEIGHT;\r\n    const minWidth = (gridOptions.autoResize && gridOptions.autoResize.minWidth < 0) ? gridOptions.autoResize.minWidth : DATAGRID_MIN_WIDTH;\r\n\r\n    let newHeight = availableHeight;\r\n    let newWidth = (gridOptions.autoResize && gridOptions.autoResize.sidePadding) ? availableWidth - gridOptions.autoResize.sidePadding : availableWidth;\r\n    if (newHeight < minHeight) {\r\n      newHeight = minHeight;\r\n    }\r\n    if (newWidth < minWidth) {\r\n      newWidth = minWidth;\r\n    }\r\n\r\n    return {\r\n      height: newHeight,\r\n      width: newWidth\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Dispose function when element is destroyed\r\n   */\r\n  dispose() {\r\n    $(window).off(`resize.grid.${this._gridUid}`);\r\n  }\r\n\r\n  getLastResizeDimensions(): GridDimension {\r\n    return this._lastDimensions;\r\n  }\r\n\r\n  /** Resize the datagrid to fit the browser height & width */\r\n  resizeGrid(delay?: number, newSizes?: GridDimension): void {\r\n    if (!this._grid || !this._gridOptions) {\r\n      throw new Error(`\r\n      Angular-Slickgrid resizer requires a valid Grid object and Grid Options defined.\r\n      You can fix this by setting your gridOption to use \"enableAutoResize\" or create an instance of the ResizerService by calling attachAutoResizeDataGrid()`);\r\n    }\r\n\r\n    // because of the javascript async nature, we might want to delay the resize a little bit\r\n    delay = delay || 0;\r\n\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      // calculate the available sizes with minimum height defined as a constant\r\n      const availableDimensions = this.calculateGridNewDimensions(this._gridOptions);\r\n      const gridElm = $(`#${this._gridOptions.gridId}`) || {};\r\n      const gridContainerElm = $(`#${this._gridOptions.gridContainerId}`) || {};\r\n\r\n      if ((newSizes || availableDimensions) && gridElm.length > 0) {\r\n        // get the new sizes, if new sizes are passed (not 0), we will use them else use available space\r\n        // basically if user passes 1 of the dimension, let say he passes just the height,\r\n        // we will use the height as a fixed height but the width will be resized by it's available space\r\n        const newHeight = (newSizes && newSizes.height) ? newSizes.height : availableDimensions.height;\r\n        const newWidth = (newSizes && newSizes.width) ? newSizes.width : availableDimensions.width;\r\n\r\n        // apply these new height/width to the datagrid\r\n        gridElm.height(newHeight);\r\n        gridElm.width(newWidth);\r\n        gridContainerElm.height(newHeight);\r\n        gridContainerElm.width(newWidth);\r\n\r\n        // keep last resized dimensions\r\n        this._lastDimensions = {\r\n          height: newHeight,\r\n          width: newWidth\r\n        };\r\n        if ((this._gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\r\n          this._lastDimensions.heightWithPagination = newHeight + DATAGRID_PAGINATION_HEIGHT;\r\n        }\r\n\r\n        // resize the slickgrid canvas on all browser except some IE versions\r\n        // exclude all IE below IE11\r\n        // IE11 wants to be a better standard (W3C) follower (finally) they even changed their appName output to also have 'Netscape'\r\n        if (new RegExp('MSIE [6-8]').exec(navigator.userAgent) === null && this._grid) {\r\n          this._grid.resizeCanvas();\r\n        }\r\n\r\n        // also call the grid auto-size columns so that it takes available when going bigger\r\n        this._grid.autosizeColumns();\r\n      }\r\n    }, delay);\r\n  }\r\n}\r\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class AvgAggregator implements Aggregator {\n  private _count: number;\n  private _nonNullCount: number;\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._count = 0;\n    this._nonNullCount = 0;\n    this._sum = 0;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    this._count++;\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._nonNullCount++;\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.avg) {\n      groupTotals.avg = {};\n    }\n    if (this._nonNullCount !== 0) {\n      groupTotals.avg[this._field] = this._sum / this._nonNullCount;\n    }\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MinAggregator implements Aggregator {\n  private _min: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._min = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._min == null || val < this._min) {\n        this._min = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.min) {\n      groupTotals.min = {};\n    }\n    groupTotals.min[this._field] = this._min;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MaxAggregator implements Aggregator {\n  private _max: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._max = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._max == null || val > this._max) {\n        this._max = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.max) {\n      groupTotals.max = {};\n    }\n    groupTotals.max[this._field] = this._max;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class SumAggregator implements Aggregator {\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._sum = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.sum) {\n      groupTotals.sum = {};\n    }\n    groupTotals.sum[this._field] = this._sum;\n  }\n}\n",
    "import { AvgAggregator } from './avgAggregator';\nimport { MinAggregator } from './minAggregator';\nimport { MaxAggregator } from './maxAggregator';\nimport { SumAggregator } from './sumAggregator';\n\n/** Provides a list of different Aggregators for the Group Formatter */\nexport const Aggregators = {\n  Avg: AvgAggregator,\n  Min: MinAggregator,\n  Max: MaxAggregator,\n  Sum: SumAggregator\n};\n",
    "import { Column, Editor } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class CheckboxEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: boolean;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"checkbox\" value=\"true\" class=\"editor-checkbox\" />`);\r\n    this.$input.appendTo(this.args.container);\r\n    this.$input.focus();\r\n  }\r\n\r\n  destroy(): void {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus(): void {\r\n    this.$input.focus();\r\n  }\r\n\r\n  hide() {\r\n    this.$input.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$input.show();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = !!item[this.args.column.field];\r\n    if (this.defaultValue) {\r\n      this.$input.prop('checked', true);\r\n    } else {\r\n      this.$input.prop('checked', false);\r\n    }\r\n  }\r\n\r\n  preClick() {\r\n    this.$input.prop('checked', !this.$input.prop('checked'));\r\n  }\r\n\r\n  serializeValue(): boolean {\r\n    return this.$input.prop('checked');\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (this.serializeValue() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.$input.val(), this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { Column, Editor, FieldType, GridOption } from './../models/index';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a date picker editor using Flatpickr\r\n * https://chmln.github.io/flatpickr\r\n */\r\nexport class DateEditor implements Editor {\r\n  $input: any;\r\n  flatInstance: any;\r\n  defaultDate: string;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    if (this.args && this.args.column) {\r\n      const columnDef = this.args.column;\r\n      const gridOptions = this.args.grid.getOptions() as GridOption;\r\n      this.defaultDate = (this.args.item) ? this.args.item[this.args.column.field] : null;\r\n      const inputFormat = mapFlatpickrDateFormatWithFieldType(columnDef.type || FieldType.dateIso);\r\n      const outputFormat = mapFlatpickrDateFormatWithFieldType(columnDef.outputType || FieldType.dateUtc);\r\n      let currentLocale = this.getCurrentLocale(columnDef, gridOptions);\r\n      if (currentLocale.length > 2) {\r\n        currentLocale = currentLocale.substring(0, 2);\r\n      }\r\n\r\n      const pickerOptions: any = {\r\n        defaultDate: this.defaultDate,\r\n        altInput: true,\r\n        altFormat: inputFormat,\r\n        dateFormat: outputFormat,\r\n        closeOnSelect: false,\r\n        locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n        onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n          this.save();\r\n        },\r\n      };\r\n\r\n\r\n      this.$input = $(`<input type=\"text\" data-defaultDate=\"${this.defaultDate}\" class=\"editor-text flatpickr\" />`);\r\n      this.$input.appendTo(this.args.container);\r\n      this.flatInstance = (this.$input[0] && typeof this.$input[0].flatpickr === 'function') ? this.$input[0].flatpickr(pickerOptions) : null;\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  getCurrentLocale(columnDef: Column, gridOptions: GridOption) {\r\n    const options = gridOptions || columnDef.params || {};\r\n    if (options.i18n && options.i18n instanceof TranslateService) {\r\n      return options.i18n.currentLang;\r\n    }\r\n\r\n    return 'en';\r\n  }\r\n\r\n  loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  destroy() {\r\n    this.hide();\r\n    // this.flatInstance.destroy();\r\n    this.$input.remove();\r\n  }\r\n\r\n  show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultDate = item[this.args.column.field];\r\n    this.flatInstance.setDate(item[this.args.column.field]);\r\n  }\r\n\r\n  serializeValue() {\r\n    const domValue: string = this.$input.val();\r\n\r\n    if (!domValue) {\r\n      return '';\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n    const value = moment(domValue).format(outputFormat);\r\n\r\n    return value;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    if (!state) {\r\n      return;\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n\r\n    item[this.args.column.field] = moment(state, outputFormat).toDate();\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultDate == null)) && (this.$input.val() !== this.defaultDate);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.$input.val(), this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Column, Editor, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nconst defaultDecimalPlaces = 0;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class FloatEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"number\" class=\"editor-text\" step=\"${this.getInputDecimalSteps()}\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  getDecimalPlaces() {\r\n    // returns the number of fixed decimal places or null\r\n    const columnEditor = this.getColumnEditor();\r\n    let rtn = (columnEditor && columnEditor.params && columnEditor.params.hasOwnProperty('decimalPlaces')) ? columnEditor.params.decimalPlaces : undefined;\r\n    if (rtn === undefined) {\r\n      rtn = defaultDecimalPlaces;\r\n    }\r\n    return (!rtn && rtn !== 0 ? null : rtn);\r\n  }\r\n\r\n  getInputDecimalSteps() {\r\n    const decimals = this.getDecimalPlaces();\r\n    let zeroString = '';\r\n    for (let i = 1; i < decimals; i++) {\r\n      zeroString += '0';\r\n    }\r\n\r\n    if (decimals > 0) {\r\n      return `0.${zeroString}1`;\r\n    }\r\n    return '1';\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field];\r\n\r\n    const decPlaces = this.getDecimalPlaces();\r\n    if (decPlaces !== null\r\n      && (this.defaultValue || this.defaultValue === 0)\r\n      && this.defaultValue.toFixed) {\r\n      this.defaultValue = this.defaultValue.toFixed(decPlaces);\r\n    }\r\n\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    let rtn = parseFloat(this.$input.val()) || 0;\r\n    const decPlaces = this.getDecimalPlaces();\r\n    if (decPlaces !== null\r\n      && (rtn || rtn === 0)\r\n      && rtn.toFixed) {\r\n      rtn = parseFloat(rtn.toFixed(decPlaces));\r\n    }\r\n\r\n    return rtn;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    const elmValue = this.$input.val();\r\n    return (!(elmValue === '' && this.defaultValue === null)) && (elmValue !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n    const elmValue = this.$input.val();\r\n    const columnEditor = this.getColumnEditor();\r\n    const decPlaces = this.getDecimalPlaces();\r\n    const errorMsg = columnEditor.params && columnEditor.params.validatorErrorMessage;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(elmValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    } else if (isNaN(elmValue as number) || (decPlaces === 0 && !/^(\\d+(\\.)?(\\d)*)$/.test(elmValue))) {\r\n      // when decimal value is 0 (which is the default), we accept 0 or more decimal values\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || `Please enter a valid number`\r\n      };\r\n    } else if (isNaN(elmValue as number) || (decPlaces > 0 && !new RegExp(`^(\\\\d+(\\\\.)?(\\\\d){0,${decPlaces}})$`).test(elmValue))) {\r\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\r\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || `Please enter a valid number between 0 and ${decPlaces} decimals`\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Column, Editor, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class IntegerEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"number\" class='editor-text' />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = parseInt(item[this.args.column.field], 10);\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return parseInt(this.$input.val() as string, 10) || 0;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    const elmValue = this.$input.val();\r\n    const value = isNaN(elmValue) ? elmValue : parseInt(elmValue, 10);\r\n    return (!(value === '' && this.defaultValue === null)) && (value !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n    const columnEditor = this.getColumnEditor();\r\n    const errorMsg = columnEditor.params && columnEditor.params.validatorErrorMessage;\r\n    const elmValue = this.$input.val();\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(elmValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    } else if (isNaN(elmValue as number) || !/^[+-]?\\d+$/.test(elmValue)) {\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || 'Please enter a valid integer number'\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Column, Editor, HtmlElementPosition, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class LongTextEditor implements Editor {\r\n  $input: any;\r\n  $wrapper: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    const $container = $('body');\r\n\r\n    this.$wrapper = $(`<div class=\"slick-large-editor-text\" />`).appendTo($container);\r\n    this.$input = $(`<textarea hidefocus rows=\"5\">`).appendTo(this.$wrapper);\r\n\r\n    $(`<div class=\"editor-footer\">\r\n        <button class=\"btn btn-primary btn-xs\">Save</button>\r\n        <button class=\"btn btn-default btn-xs\">Cancel</button>\r\n      </div>`).appendTo(this.$wrapper);\r\n\r\n    this.$wrapper.find('button:first').on('click', (event: Event) => this.save());\r\n    this.$wrapper.find('button:last').on('click', (event: Event) => this.cancel());\r\n    this.$input.on('keydown', this.handleKeyDown);\r\n\r\n    this.position(this.args.position);\r\n    this.$input.focus().select();\r\n  }\r\n\r\n  handleKeyDown(e: any) {\r\n    if (e.which === KeyCode.ENTER && e.ctrlKey) {\r\n      this.save();\r\n    } else if (e.which === KeyCode.ESCAPE) {\r\n      e.preventDefault();\r\n      this.cancel();\r\n    } else if (e.which === KeyCode.TAB && e.shiftKey) {\r\n      e.preventDefault();\r\n      this.args.grid.navigatePrev();\r\n    } else if (e.which === KeyCode.TAB) {\r\n      e.preventDefault();\r\n      this.args.grid.navigateNext();\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  cancel() {\r\n    this.$input.val(this.defaultValue);\r\n    this.args.cancelChanges();\r\n  }\r\n\r\n  hide() {\r\n    this.$wrapper.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$wrapper.show();\r\n  }\r\n\r\n  position(position: HtmlElementPosition) {\r\n    this.$wrapper\r\n      .css('top', (position.top || 0) - 5)\r\n      .css('left', (position.left || 0) - 5);\r\n  }\r\n\r\n  destroy() {\r\n    this.$wrapper.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.$input.val(this.defaultValue = item[this.args.column.field]);\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue == null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.$input.val(), this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Editor,\r\n  Column,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  SelectOption\r\n} from './../models/index';\r\nimport { arraysEqual, CollectionService } from '../services/index';\r\n\r\n// height in pixel of the multiple-select DOM element\r\nconst SELECT_ELEMENT_HEIGHT = 26;\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/**\r\n * Slickgrid editor class for multiple select lists\r\n */\r\nexport class MultipleSelectEditor implements Editor {\r\n  /** The JQuery DOM element */\r\n  $editorElm: any;\r\n\r\n  /** Editor Multiple-Select options */\r\n  editorElmOptions: MultipleSelectOption;\r\n\r\n  /** The slick grid column being edited */\r\n  columnDef: Column;\r\n\r\n  /** The multiple-select options for a multiple select list */\r\n  defaultOptions: MultipleSelectOption;\r\n\r\n  /** The default item values that are set */\r\n  defaultValue: any[];\r\n\r\n  /** The options label/value object to use in the select list */\r\n  collection: SelectOption[] = [];\r\n\r\n  /** The property name for values in the collection */\r\n  valueName: string;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName: string;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** Do we translate the label? */\r\n  enableTranslateLabel: boolean;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,\r\n      maxHeight: 200,\r\n      addTitle: true,\r\n      okButton: true,\r\n      selectAllDelimiter: ['', ''],\r\n      width: 150,\r\n      offsetLeft: 20,\r\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\r\n    };\r\n\r\n    if (this._translate) {\r\n      this.defaultOptions.countSelected = this._translate.instant('X_OF_Y_SELECTED');\r\n      this.defaultOptions.allSelected = this._translate.instant('ALL_SELECTED');\r\n      this.defaultOptions.selectAllText = this._translate.instant('SELECT_ALL');\r\n    }\r\n\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * The current selected values from the collection\r\n   */\r\n  get currentValues() {\r\n    return this.collection\r\n      .filter(c => this.$editorElm.val().indexOf(c[this.valueName].toString()) !== -1)\r\n      .map(c => c[this.valueName]);\r\n  }\r\n\r\n  init() {\r\n    if (!this.args) {\r\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\r\n    }\r\n\r\n    this.columnDef = this.args.column as Column;\r\n\r\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the MultipleSelect Editor to work correctly.\r\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\r\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\r\n    }\r\n\r\n    const collectionService = new CollectionService(this._translate);\r\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\r\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\r\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\r\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\r\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    this.collection = newCollection;\r\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    this.createDomElement(editorTemplate);\r\n  }\r\n\r\n  applyValue(item: any, state: any): void {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  destroy() {\r\n    this.$editorElm.remove();\r\n  }\r\n\r\n  loadValue(item: any): void {\r\n    // convert to string because that is how the DOM will return these values\r\n    this.defaultValue = item[this.columnDef.field].map((i: any) => i.toString());\r\n\r\n    this.$editorElm.find('option').each((i: number, $e: any) => {\r\n      if (this.defaultValue.indexOf($e.value) !== -1) {\r\n        $e.selected = true;\r\n      } else {\r\n        $e.selected = false;\r\n      }\r\n    });\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  serializeValue(): any {\r\n    return this.currentValues;\r\n  }\r\n\r\n  focus() {\r\n    this.$editorElm.focus();\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    return !arraysEqual(this.$editorElm.val(), this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.currentValues, this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n\r\n  private buildTemplateHtmlString(collection: any[]) {\r\n    let options = '';\r\n    collection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example: { collection: [ { value: '1', label: 'One' } ])`);\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n\r\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * Automatically adjust the multiple-select dropup or dropdown by available space\r\n   */\r\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\r\n    // height in pixel of the multiple-select element\r\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\r\n\r\n    const windowHeight = $(window).innerHeight() || 300;\r\n    const pageScroll = $('body').scrollTop() || 0;\r\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\r\n    const $msDrop = $msDropContainer.find('.ms-drop');\r\n    const msDropHeight = $msDrop.height() || 0;\r\n    const msDropOffsetTop = $msDrop.offset().top;\r\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\r\n\r\n    if (space < msDropHeight) {\r\n      if (multipleSelectOptions.container) {\r\n        // when using a container, we need to offset the drop ourself\r\n        // and also make sure there's space available on top before doing so\r\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\r\n        if (newOffsetTop > 0) {\r\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\r\n        }\r\n      } else {\r\n        // without container, we simply need to add the \"top\" class to the drop\r\n        $msDrop.addClass('top');\r\n      }\r\n      $msDrop.removeClass('bottom');\r\n    } else {\r\n      $msDrop.addClass('bottom');\r\n      $msDrop.removeClass('top');\r\n    }\r\n  }\r\n\r\n  /** Build the template HTML string */\r\n  private createDomElement(editorTemplate: string) {\r\n    this.$editorElm = $(editorTemplate);\r\n\r\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\r\n      this.$editorElm.appendTo(this.args.container);\r\n    }\r\n\r\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\r\n      // fallback to bootstrap\r\n      this.$editorElm.addClass('form-control');\r\n    } else {\r\n      const elementOptions = (this.columnDef.internalColumnEditor) ? this.columnDef.internalColumnEditor.elementOptions : {};\r\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\r\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\r\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\r\n    }\r\n  }\r\n\r\n  // refresh the jquery object because the selected checkboxes were already set\r\n  // prior to this method being called\r\n  private refresh() {\r\n    if (typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('refresh');\r\n    }\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Editor,\r\n  Column,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  SelectOption\r\n} from './../models/index';\r\nimport { findOrDefault, CollectionService } from '../services/index';\r\n\r\n// height in pixel of the multiple-select DOM element\r\nconst SELECT_ELEMENT_HEIGHT = 26;\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/**\r\n * Slickgrid editor class for single select lists\r\n */\r\nexport class SingleSelectEditor implements Editor {\r\n  /** The JQuery DOM element */\r\n  $editorElm: any;\r\n\r\n  /** Editor Multiple-Select options */\r\n  editorElmOptions: MultipleSelectOption;\r\n\r\n  /** The slick grid column being edited */\r\n  columnDef: Column;\r\n\r\n  /** The multiple-select options for a single select */\r\n  defaultOptions: any;\r\n\r\n  /** The default item value that is set */\r\n  defaultValue: any;\r\n\r\n  /** The options label/value object to use in the select list */\r\n  collection: SelectOption[] = [];\r\n\r\n  /** The property name for values in the collection */\r\n  valueName: string;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName: string;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** Do we translate the label? */\r\n  enableTranslateLabel: boolean;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,\r\n      maxHeight: 200,\r\n      width: 150,\r\n      offsetLeft: 20,\r\n      single: true,\r\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\r\n    };\r\n\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * The current selected value from the collection\r\n   */\r\n  get currentValue() {\r\n    return findOrDefault(this.collection, (c: any) =>\r\n      c[this.valueName].toString() === this.$editorElm.val())[this.valueName];\r\n  }\r\n\r\n  init() {\r\n    if (!this.args) {\r\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\r\n    }\r\n\r\n    this.columnDef = this.args.column;\r\n\r\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the SingleSelect Editor to work correctly.\r\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\r\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\r\n    }\r\n\r\n    const collectionService = new CollectionService(this._translate);\r\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\r\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\r\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionFilterBy) {\r\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\r\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\r\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    this.collection = newCollection;\r\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    this.createDomElement(editorTemplate);\r\n  }\r\n\r\n  applyValue(item: any, state: any): void {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  destroy() {\r\n    this.$editorElm.remove();\r\n  }\r\n\r\n  loadValue(item: any): void {\r\n    // convert to string because that is how the DOM will return these values\r\n    // make sure the prop exists first\r\n    this.defaultValue = item[this.columnDef.field] && item[this.columnDef.field].toString();\r\n\r\n\r\n    this.$editorElm.find('option').each((i: number, $e: any) => {\r\n      if (this.defaultValue === $e.value) {\r\n        $e.selected = true;\r\n      } else {\r\n        $e.selected = false;\r\n      }\r\n    });\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  serializeValue(): any {\r\n    return this.currentValue;\r\n  }\r\n\r\n  focus() {\r\n    this.$editorElm.focus();\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    return this.$editorElm.val() !== this.defaultValue;\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.currentValue, this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n\r\n  private buildTemplateHtmlString(collection: any[]) {\r\n    let options = '';\r\n    collection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error('A collection with value/label (or value/labelKey when using ' +\r\n          'Locale) is required to populate the Select list, for example: { params: { ' +\r\n          '{ collection: [ { value: \\'1\\', label: \\'One\\' } ] } } }');\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\r\n  }\r\n\r\n    /**\r\n   * Automatically adjust the multiple-select dropup or dropdown by available space\r\n   */\r\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\r\n    // height in pixel of the multiple-select element\r\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\r\n\r\n    const windowHeight = $(window).innerHeight() || 300;\r\n    const pageScroll = $('body').scrollTop() || 0;\r\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\r\n    const $msDrop = $msDropContainer.find('.ms-drop');\r\n    const msDropHeight = $msDrop.height() || 0;\r\n    const msDropOffsetTop = $msDrop.offset().top;\r\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\r\n\r\n    if (space < msDropHeight) {\r\n      if (multipleSelectOptions.container) {\r\n        // when using a container, we need to offset the drop ourself\r\n        // and also make sure there's space available on top before doing so\r\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\r\n        if (newOffsetTop > 0) {\r\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\r\n        }\r\n      } else {\r\n        // without container, we simply need to add the \"top\" class to the drop\r\n        $msDrop.addClass('top');\r\n      }\r\n      $msDrop.removeClass('bottom');\r\n    } else {\r\n      $msDrop.addClass('bottom');\r\n      $msDrop.removeClass('top');\r\n    }\r\n  }\r\n\r\n  /** Build the template HTML string */\r\n  private createDomElement(editorTemplate: string) {\r\n    this.$editorElm = $(editorTemplate);\r\n\r\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\r\n      this.$editorElm.appendTo(this.args.container);\r\n    }\r\n\r\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\r\n      // fallback to bootstrap\r\n      this.$editorElm.addClass('form-control');\r\n    } else {\r\n      const elementOptions = (this.columnDef.params) ? this.columnDef.params.elementOptions : {};\r\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\r\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\r\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\r\n    }\r\n  }\r\n\r\n  // refresh the jquery object because the selected checkboxes were already set\r\n  // prior to this method being called\r\n  private refresh() {\r\n    if (typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('refresh');\r\n    }\r\n  }\r\n}\r\n",
    "import { Column, Editor, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class TextEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"text\" class=\"editor-text\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this.$input.val(val);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field] || '';\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue === null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { CheckboxEditor } from './checkboxEditor';\r\nimport { DateEditor } from './dateEditor';\r\nimport { FloatEditor } from './floatEditor';\r\nimport { IntegerEditor } from './integerEditor';\r\nimport { LongTextEditor } from './longTextEditor';\r\nimport { MultipleSelectEditor } from './multipleSelectEditor';\r\nimport { SingleSelectEditor } from './singleSelectEditor';\r\nimport { TextEditor } from './textEditor';\r\n\r\nexport const Editors = {\r\n  checkbox: CheckboxEditor,\r\n  date: DateEditor,\r\n  float: FloatEditor,\r\n  integer: IntegerEditor,\r\n  longText: LongTextEditor,\r\n  multipleSelect: MultipleSelectEditor,\r\n  singleSelect: SingleSelectEditor,\r\n  text: TextEditor\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const arrayToCsvFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && Array.isArray(value)) {\n    const values = value.join(', ');\n    return `<span title=\"${values}\">${values}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const boldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  } else {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkboxFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? '&#x2611;' : '';\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkmarkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? `<i class=\"fa fa-check checkmark-icon\" aria-hidden=\"true\"></i>` : '';\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of a params collection\n */\nexport const collectionFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.params || !columnDef.params.collection\n    || !columnDef.params.collection.length) {\n    return '';\n  }\n\n  const { params, params: { collection } } = columnDef;\n  const labelName = (params.customStructure) ? params.customStructure.label : 'label';\n  const valueName = (params.customStructure) ? params.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of an editor collection\n */\nexport const collectionEditorFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.internalColumnEditor || !columnDef.internalColumnEditor.collection\n    || !columnDef.internalColumnEditor.collection.length) {\n    return '';\n  }\n\n  const { internalColumnEditor, internalColumnEditor: { collection } } = columnDef;\n  const labelName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.label : 'label';\n  const valueName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const complexObjectFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!columnDef) {\n    return '';\n  }\n  const complexField = columnDef.field || '';\n  return complexField.split('.').reduce((obj, i) => (obj ? obj[i] : ''), dataContext);\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\n\nexport const dateIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? moment(value).format(FORMAT) : '';\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIso);\n\nexport const dateTimeIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? moment(value).format(FORMAT) : '';\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIsoAmPm);\r\n\r\nexport const dateTimeIsoAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUsAmPm);\r\n\r\nexport const dateTimeUsAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUs);\r\n\r\nexport const dateTimeUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const deleteIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-trash pointer delete-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredBoldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  } else {\n    return `<span style=\"color:red;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  isNaN(+value) ? '' : `$${decimalFormatted(value, 2, 4)}`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const editIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-pencil pointer edit-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const hyperlinkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && typeof value === 'string') {\n    const matchUrl = value.match(/^(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:\\/~\\+#]*[\\w\\-\\@?^=%&amp;\\/~\\+#])?/i);\n    if (matchUrl && Array.isArray(matchUrl)) {\n      return `<a href=\"${matchUrl[0]}\">' + value + '</a>`;\n    }\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\nexport const hyperlinkUriPrefixFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  let uriPrefix = (columnDef && columnDef.params && columnDef.params.uriPrefix) ? columnDef.params.uriPrefix : '';\n  if (!uriPrefix) {\n    throw new Error(`HyperlinkUriPrefix Formatter require a \"uriPrefix\" that can be passed through params. e.g.:: formatter: Formatters.hyperlinkUriPrefix, params: { uriPrefix: '/users/' }`);\n  }\n  if (value && uriPrefix && typeof uriPrefix === 'string' && !uriPrefix.includes('<script>')) {\n    uriPrefix += value;\n    return '<a href=\"' + uriPrefix + '\">' + value + '</a>';\n  }\n  return '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const infoIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-info-circle pointer info-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const lowercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toLowerCase() : '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\nexport const multipleFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const params = columnDef.params || {};\n  if (!params.formatters || !Array.isArray(params.formatters)) {\n    throw new Error(`The multiple formatter requires the \"formatters\" to be provided as a column params.\n    For example: this.columnDefinitions = [{ id: title, field: title, formatter: Formatters.multiple, params: { formatters: [Formatters.lowercase, Formatters.uppercase] }`);\n  }\n  const formatters: Formatter[] = params.formatters;\n\n  // loop through all Formatters, the value of 1st formatter will be used by 2nd formatter and so on.\n  // they are piped and executed in sequences\n  let currentValue = value;\n  for (const formatter of formatters) {\n    currentValue = formatter(row, cell, currentValue, columnDef, dataContext, grid);\n  }\n  return currentValue;\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  if (value === null || value === '') {\r\n    return '';\r\n  }\r\n\r\n  const outputValue = value > 0 ? value / 100 : 0;\r\n  return `<span>${outputValue}%</span>`;\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'red';\n  } else if (value < 70) {\n    color = 'silver';\n  } else {\n    color = 'green';\n  }\n\n  return `<span class=\"percent-complete-bar\" style=\"background:${color}; width:${value}%\"></span>`;\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '-';\n  } else if (value < 50) {\n    return `<span style='color:red;font-weight:bold;'>${value}%</span>`;\n  } else {\n    return `<span style='color:green'>${value}%</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentSymbolFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  return value ? `<span>${value}%</span>` : '';\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const progressBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'danger';\n  } else if (value < 70) {\n    color = 'warning';\n  } else {\n    color = 'success';\n  }\n\n  return `<div class=\"progress\">\n    <div class=\"progress-bar progress-bar-${color}\" role=\"progressbar\" aria-valuenow=\"${value}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"min-width: 2em; width: ${value}%;\">\n    ${value}%\n    </div>\n  </div>`;\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a cell value and translates it with the \"ngx-translate\" service */\nexport const translateFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? translate.instant(value) : '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a boolean value, cast it to upperCase string and finally translates it with the \"ngx-translate\" service */\nexport const translateBooleanFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n  return value ? translate.instant(value.toUpperCase() as string) : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const uppercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toUpperCase() : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const yesNoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string =>\n  value ? 'Yes' : 'No';\n",
    "import { Column } from './../models/index';\r\nimport { arrayToCsvFormatter } from './arrayToCsvFormatter';\r\nimport { boldFormatter } from './boldFormatter';\r\nimport { checkboxFormatter } from './checkboxFormatter';\r\nimport { checkmarkFormatter } from './checkmarkFormatter';\r\nimport { collectionFormatter } from './collectionFormatter';\r\nimport { collectionEditorFormatter } from './collectionEditorFormatter';\r\nimport { complexObjectFormatter } from './complexObjectFormatter';\r\nimport { dateIsoFormatter } from './dateIsoFormatter';\r\nimport { dateTimeIsoFormatter } from './dateTimeIsoFormatter';\r\nimport { dateTimeIsoAmPmFormatter } from './dateTimeIsoAmPmFormatter';\r\nimport { dateTimeUsAmPmFormatter } from './dateTimeUsAmPmFormatter';\r\nimport { dateTimeUsFormatter } from './dateTimeUsFormatter';\r\nimport { dateUsFormatter } from './dateUsFormatter';\r\nimport { deleteIconFormatter } from './deleteIconFormatter';\r\nimport { dollarColoredBoldFormatter } from './dollarColoredBoldFormatter';\r\nimport { dollarColoredFormatter } from './dollarColoredFormatter';\r\nimport { dollarFormatter } from './dollarFormatter';\r\nimport { editIconFormatter } from './editIconFormatter';\r\nimport { hyperlinkFormatter } from './hyperlinkFormatter';\r\nimport { hyperlinkUriPrefixFormatter } from './hyperlinkUriPrefixFormatter';\r\nimport { infoIconFormatter } from './infoIconFormatter';\r\nimport { lowercaseFormatter } from './lowercaseFormatter';\r\nimport { multipleFormatter } from './multipleFormatter';\r\nimport { percentFormatter } from './percentFormatter';\r\nimport { percentCompleteBarFormatter } from './percentCompleteBarFormatter';\r\nimport { percentCompleteFormatter } from './percentCompleteFormatter';\r\nimport { percentSymbolFormatter } from './percentSymbolFormatter';\r\nimport { progressBarFormatter } from './progressBarFormatter';\r\nimport { translateFormatter } from './translateFormatter';\r\nimport { translateBooleanFormatter } from './translateBooleanFormatter';\r\nimport { uppercaseFormatter } from './uppercaseFormatter';\r\nimport { yesNoFormatter } from './yesNoFormatter';\r\n\r\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\r\nexport const Formatters = {\r\n  /** Takes an array of string and converts it to a comma delimited string */\r\n  arrayToCsv: arrayToCsvFormatter,\r\n\r\n  /** show value in bold font weight as well */\r\n  bold: boldFormatter,\r\n\r\n  /** When value is filled (true), it will display a checkbox Unicode icon */\r\n  checkbox: checkboxFormatter,\r\n\r\n  /** When value is filled (true), it will display a Font-Awesome icon (fa-check) */\r\n  checkmark: checkmarkFormatter,\r\n\r\n  /** Takes a complex data object and return the data under that property (for example: \"user.firstName\" will return the first name \"John\") */\r\n  complexObject: complexObjectFormatter,\r\n\r\n  /**\r\n   * Looks up values from the columnDefinition.params.collection property and displays the label in CSV or string format\r\n   * @example\r\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\r\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\r\n   * const dataset = [{ value: 1 },{ value: 2 }];\r\n   */\r\n  collection: collectionFormatter,\r\n\r\n  /**\r\n   * Looks up values from the columnDefinition.editor.collection property and displays the label in CSV or string format\r\n   * @example\r\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\r\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\r\n   * const dataset = [{ value: 1 },{ value: 2 }];\r\n   */\r\n  collectionEditor: collectionEditorFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date format */\r\n  dateIso: dateIsoFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date+Time format */\r\n  dateTimeIso: dateTimeIsoFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date+Time+(am/pm) format */\r\n  dateTimeIsoAmPm: dateTimeIsoAmPmFormatter,\r\n\r\n  /** Takes a Date object and displays it as an US Date format */\r\n  dateUs: dateUsFormatter,\r\n\r\n  /** Takes a Date object and displays it as an US Date+Time format */\r\n  dateTimeUs: dateTimeUsFormatter,\r\n\r\n  /** Takes a Date object and displays it as an US Date+Time+(am/pm) format */\r\n  dateTimeUsAmPm: dateTimeUsAmPmFormatter,\r\n\r\n  /** Displays a Font-Awesome delete icon (fa-trash) */\r\n  deleteIcon: deleteIconFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value */\r\n  dollar: dollarFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value */\r\n  dollarColored: dollarColoredFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value, show it in bold font weight as well */\r\n  dollarColoredBold: dollarColoredBoldFormatter,\r\n\r\n  /** Displays a Font-Awesome edit icon (fa-pencil) */\r\n  editIcon: editIconFormatter,\r\n\r\n  /** Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https). The structure will be \"<a href=\"hyperlink\">hyperlink</a>\" */\r\n  hyperlink: hyperlinkFormatter,\r\n\r\n  /** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\r\n  hyperlinkUriPrefix: hyperlinkUriPrefixFormatter,\r\n\r\n  /** Displays a Font-Awesome edit icon (fa-info-circle) */\r\n  infoIcon: infoIconFormatter,\r\n\r\n  /** Takes a value and displays it all lowercase */\r\n  lowercase: lowercaseFormatter,\r\n\r\n  /**\r\n   * You can pipe multiple formatters (executed in sequence), use params to pass the list of formatters. For example::\r\n   * { field: 'title', formatter: Formatters.multiple, params: { formatters: [ Formatters.lowercase, Formatters.uppercase ] }\r\n   */\r\n  multiple: multipleFormatter,\r\n\r\n  /** Takes a cell value number (between 0.0-1.0) and displays a red (<50) or green (>=50) bar */\r\n  percent: percentFormatter,\r\n\r\n  /** Takes a cell value number (between 0.0-100) and displays a red (<50) or green (>=50) bar */\r\n  percentComplete: percentCompleteFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"percent-complete-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\r\n  percentCompleteBar: percentCompleteBarFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and add the \"%\" after the number */\r\n  percentSymbol: percentSymbolFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"progress-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\r\n  progressBar: progressBarFormatter,\r\n\r\n  /** Takes a cell value and translates it (i18n). Requires an instance of the Translate Service:: `i18n: this.translate */\r\n  translate: translateFormatter,\r\n\r\n  /** Takes a boolean value, cast it to upperCase string and finally translates it (i18n). */\r\n  translateBoolean: translateBooleanFormatter,\r\n\r\n  /** Takes a value and displays it all uppercase */\r\n  uppercase: uppercaseFormatter,\r\n\r\n  /** Takes a boolean value and display a string 'Yes' or 'No' */\r\n  yesNo: yesNoFormatter\r\n};\r\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsPercentageFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + '%' + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const avgTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 4) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const minTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.min && totals.min[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const maxTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.max && totals.max[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 4) + suffix}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 2) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}`;\n  }\n  return '';\n};\n",
    "import { Column } from './../models/index';\nimport { avgTotalsPercentageFormatter } from './avgTotalsPercentageFormatter';\nimport { avgTotalsDollarFormatter } from './avgTotalsDollarFormatter';\nimport { avgTotalsFormatter } from './avgTotalsFormatter';\nimport { minTotalsFormatter } from './minTotalsFormatter';\nimport { maxTotalsFormatter } from './maxTotalsFormatter';\nimport { sumTotalsColoredFormatter } from './sumTotalsColoredFormatter';\nimport { sumTotalsDollarColoredBoldFormatter } from './sumTotalsDollarColoredBoldFormatter';\nimport { sumTotalsDollarColoredFormatter } from './sumTotalsDollarColoredFormatter';\nimport { sumTotalsDollarBoldFormatter } from './sumTotalsDollarBoldFormatter';\nimport { sumTotalsDollarFormatter } from './sumTotalsDollarFormatter';\nimport { sumTotalsFormatter } from './sumTotalsFormatter';\nimport { sumTotalsBoldFormatter } from './sumTotalsBoldFormatter';\n\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const GroupTotalFormatters = {\n  /**\n   * Average all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotals: avgTotalsFormatter,\n\n  /**\n   * Average all the column totals and display '$' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsDollar: avgTotalsDollarFormatter,\n\n  /**\n   * Average all the column totals and display '%' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsPercentage: avgTotalsPercentageFormatter,\n\n  /**\n   * Show max value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  maxTotals: maxTotalsFormatter,\n\n  /**\n   * Show min value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  minTotals: minTotalsFormatter,\n\n  /**\n   * Sums up all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotals: sumTotalsFormatter,\n\n  /**\n   * Sums up all the column totals and display it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsBold: sumTotalsBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsColored: sumTotalsColoredFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollar: sumTotalsDollarFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign and show it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarBold: sumTotalsDollarBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColored: sumTotalsDollarColoredFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value, show it in bold font weight as well\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColoredBold: sumTotalsDollarColoredBoldFormatter,\n};\n",
    "import { Pagination } from './../models/pagination.interface';\r\nimport { AfterViewInit, Component, EventEmitter, Injectable, Input, OnDestroy, Output } from '@angular/core';\r\nimport { castToPromise } from './../services/utilities';\r\nimport { GridOption } from './../models/index';\r\nimport { FilterService, SortService } from './../services/index';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n@Component({\r\n  selector: 'slick-pagination',\r\n  template: `<div class=\"slick-pagination\">\r\n    <div class=\"slick-pagination-nav\">\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-first fa fa-angle-double-left\" aria-label=\"First\" (click)=\"changeToFirstPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-prev fa fa-angle-left\" aria-label=\"Previous\" (click)=\"changeToPreviousPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n\r\n        <div class=\"slick-page-number\">\r\n            <span [translate]=\"'PAGE'\"></span>\r\n            <input type=\"text\" class=\"form-control\" value=\"{{pageNumber}}\" size=\"1\"  (change)=\"changeToCurrentPage($event)\">\r\n            <span [translate]=\"'OF'\"></span><span> {{pageCount}}</span>\r\n        </div>\r\n\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-next text-center fa fa-lg fa-angle-right\" aria-label=\"Next\" (click)=\"changeToNextPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-end fa fa-lg fa-angle-double-right\" aria-label=\"Last\" (click)=\"changeToLastPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n    </div>\r\n    <span class=\"slick-pagination-settings\">\r\n        <select id=\"items-per-page-label\" [value]=\"itemsPerPage\" (change)=\"onChangeItemPerPage($event)\">\r\n        <option value=\"{{pageSize}}\" *ngFor=\"let pageSize of paginationPageSizes;\">{{pageSize}}</option>\r\n        </select>\r\n        <span [translate]=\"'ITEMS_PER_PAGE'\"></span>,\r\n        <span class=\"slick-pagination-count\">\r\n            <span [translate]=\"'FROM_TO_OF_TOTAL_ITEMS'\" [translateParams]=\"{ from: dataFrom, to: dataTo, totalItems: totalItems }\"></span>\r\n        </span>\r\n    </span>\r\n    </div>\r\n`\r\n})\r\n@Injectable()\r\nexport class SlickPaginationComponent implements AfterViewInit, OnDestroy {\r\n  private _filterSubcription: Subscription;\r\n  private _gridPaginationOptions: GridOption;\r\n  private _isFirstRender = true;\r\n  @Output() onPaginationChanged = new EventEmitter<Pagination>();\r\n\r\n  @Input()\r\n  set gridPaginationOptions(gridPaginationOptions: GridOption) {\r\n    this._gridPaginationOptions = gridPaginationOptions;\r\n    if (this._isFirstRender || !gridPaginationOptions || !gridPaginationOptions.pagination || (gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n      this._isFirstRender = false;\r\n    }\r\n  }\r\n  get gridPaginationOptions(): GridOption {\r\n    return this._gridPaginationOptions;\r\n  }\r\n  @Input() grid: any;\r\n  dataFrom = 1;\r\n  dataTo = 1;\r\n  itemsPerPage: number;\r\n  pageCount = 0;\r\n  pageNumber = 1;\r\n  totalItems = 0;\r\n  paginationCallback: Function;\r\n  paginationPageSizes = [25, 75, 100];\r\n  fromToParams: any = { from: this.dataFrom, to: this.dataTo, totalItems: this.totalItems };\r\n\r\n  /** Constructor */\r\n  constructor(private filterService: FilterService, private sortService: SortService) { }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._gridPaginationOptions = this._gridPaginationOptions;\r\n    if (!this._gridPaginationOptions || !this._gridPaginationOptions.pagination || (this._gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n    }\r\n\r\n    // Subscribe to Event Emitter of Filter & Sort changed, go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterChanged.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n    // Subscribe to Filter clear and go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterCleared.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n  }\r\n\r\n  ceil(number: number) {\r\n    return Math.ceil(number);\r\n  }\r\n\r\n  changeToFirstPage(event: any) {\r\n    this.pageNumber = 1;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToLastPage(event: any) {\r\n    this.pageNumber = this.pageCount;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToNextPage(event: any) {\r\n    if (this.pageNumber < this.pageCount) {\r\n      this.pageNumber++;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToPreviousPage(event: any) {\r\n    if (this.pageNumber > 0) {\r\n      this.pageNumber--;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToCurrentPage(event: any) {\r\n    this.pageNumber = event.currentTarget.value;\r\n    if (this.pageNumber < 1) {\r\n          this.pageNumber = 1;\r\n    } else if (this.pageNumber > this.pageCount) {\r\n          this.pageNumber = this.pageCount;\r\n    }\r\n\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  dispose() {\r\n    this.onPaginationChanged.unsubscribe();\r\n    if (this._filterSubcription) {\r\n      this._filterSubcription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  onChangeItemPerPage(event: any) {\r\n    const itemsPerPage = +event.target.value;\r\n    this.pageCount = Math.ceil(this.totalItems / itemsPerPage);\r\n    this.pageNumber = 1;\r\n    this.itemsPerPage = itemsPerPage;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  refreshPagination(isPageNumberReset: boolean = false) {\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this._gridPaginationOptions && this._gridPaginationOptions.pagination) {\r\n      const pagination = this._gridPaginationOptions.pagination;\r\n      // set the number of items per page if not already set\r\n      if (!this.itemsPerPage) {\r\n        this.itemsPerPage = +((backendApi && backendApi.options && backendApi.options.paginationOptions && backendApi.options.paginationOptions.first) ? backendApi.options.paginationOptions.first : this._gridPaginationOptions.pagination.pageSize);\r\n      }\r\n\r\n      // if totalItems changed, we should always go back to the first page and recalculation the From-To indexes\r\n      if (isPageNumberReset || this.totalItems !== pagination.totalItems) {\r\n        if (this._isFirstRender && pagination.pageNumber && pagination.pageNumber > 1) {\r\n          this.pageNumber = pagination.pageNumber || 1;\r\n        } else {\r\n          this.pageNumber = 1;\r\n        }\r\n\r\n        // when page number is set to 1 then also reset the \"offset\" of backend service\r\n        if (this.pageNumber === 1) {\r\n          backendApi.service.resetPaginationOptions();\r\n        }\r\n      }\r\n\r\n      // calculate and refresh the multiple properties of the pagination UI\r\n      this.paginationPageSizes = this._gridPaginationOptions.pagination.pageSizes;\r\n      this.totalItems = this._gridPaginationOptions.pagination.totalItems;\r\n      this.recalculateFromToIndexes();\r\n    }\r\n    this.pageCount = Math.ceil(this.totalItems / this.itemsPerPage);\r\n  }\r\n\r\n  async onPageChanged(event: Event | undefined, pageNumber: number) {\r\n    this.recalculateFromToIndexes();\r\n\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this.dataTo > this.totalItems) {\r\n      this.dataTo = this.totalItems;\r\n    } else if (this.totalItems < this.itemsPerPage) {\r\n      this.dataTo = this.totalItems;\r\n    }\r\n    if (backendApi) {\r\n      const itemsPerPage = +this.itemsPerPage;\r\n\r\n      if (backendApi.preProcess) {\r\n        backendApi.preProcess();\r\n      }\r\n\r\n      const query = backendApi.service.processOnPaginationChanged(event, { newPage: pageNumber, pageSize: itemsPerPage });\r\n\r\n      // the process could be an Observable (like HttpClient) or a Promise\r\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n      const observableOrPromise = backendApi.process(query);\r\n      const processResult = await castToPromise(observableOrPromise);\r\n\r\n      // from the result, call our internal post process to update the Dataset and Pagination info\r\n      if (processResult && backendApi.internalPostProcess) {\r\n        backendApi.internalPostProcess(processResult);\r\n      }\r\n\r\n      // send the response process to the postProcess callback\r\n      if (backendApi.postProcess) {\r\n        backendApi.postProcess(processResult);\r\n      }\r\n    } else {\r\n      throw new Error('Pagination with a backend service requires \"BackendServiceApi\" to be defined in your grid options');\r\n    }\r\n\r\n    // emit the changes to the parent component\r\n    this.onPaginationChanged.emit({\r\n      pageNumber: this.pageNumber,\r\n      pageSizes: this.paginationPageSizes,\r\n      pageSize: this.itemsPerPage,\r\n      totalItems: this.totalItems\r\n    });\r\n  }\r\n\r\n  recalculateFromToIndexes() {\r\n    this.dataFrom = (this.pageNumber * this.itemsPerPage) - this.itemsPerPage + 1;\r\n    this.dataTo = (this.totalItems < this.itemsPerPage) ? this.totalItems : (this.pageNumber * this.itemsPerPage);\r\n  }\r\n}\r\n",
    "// import 3rd party vendor libs\nimport 'jquery-ui-dist/jquery-ui';\nimport 'slickgrid/lib/jquery.event.drag-2.3.0';\nimport 'slickgrid/slick.core';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.grid';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.groupitemmetadataprovider';\nimport 'slickgrid/controls/slick.columnpicker';\nimport 'slickgrid/controls/slick.gridmenu';\nimport 'slickgrid/controls/slick.pager';\nimport 'slickgrid/plugins/slick.autotooltips';\nimport 'slickgrid/plugins/slick.cellexternalcopymanager';\nimport 'slickgrid/plugins/slick.cellrangedecorator';\nimport 'slickgrid/plugins/slick.cellrangeselector';\nimport 'slickgrid/plugins/slick.cellselectionmodel';\nimport 'slickgrid/plugins/slick.checkboxselectcolumn';\nimport 'slickgrid/plugins/slick.headerbuttons';\nimport 'slickgrid/plugins/slick.headermenu';\nimport 'slickgrid/plugins/slick.rowmovemanager';\nimport 'slickgrid/plugins/slick.rowselectionmodel';\nimport { AfterViewInit, Component, EventEmitter, Inject, Injectable, Input, Output, OnDestroy, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, titleCase } from './../services/utilities';\nimport { GlobalGridOptions } from './../global-grid-options';\nimport {\n  AngularGridInstance,\n  BackendServiceOption,\n  Column,\n  GridOption,\n  GridStateChange,\n  GridStateType,\n  Pagination\n} from './../models/index';\nimport { ControlAndPluginService } from './../services/controlAndPlugin.service';\nimport { ExportService } from './../services/export.service';\nimport { FilterService } from './../services/filter.service';\nimport { GraphqlService } from './../services/graphql.service';\nimport { GridEventService } from './../services/gridEvent.service';\nimport { GridService } from './../services/grid.service';\nimport { GridStateService } from './../services/gridState.service';\nimport { GroupingAndColspanService } from './../services/groupingAndColspan.service';\nimport { ResizerService } from './../services/resizer.service';\nimport { SortService } from './../services/sort.service';\nimport { Subscription } from 'rxjs/Subscription';\nimport { CompoundDateFilter } from '../filters/compoundDateFilter';\nimport { CompoundInputFilter } from '../filters/compoundInputFilter';\nimport { InputFilter } from '../filters/inputFilter';\nimport { MultipleSelectFilter } from '../filters/multipleSelectFilter';\nimport { SingleSelectFilter } from '../filters/singleSelectFilter';\nimport { SelectFilter } from '../filters/selectFilter';\nimport { FilterFactory } from '../filters/filterFactory';\nimport { SlickgridConfig } from '../slickgrid-config';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\nconst slickgridEventPrefix = 'sg';\n\n@Injectable()\n@Component({\n  selector: 'angular-slickgrid',\n  template: `<div id=\"slickGridContainer-{{gridId}}\" #customElm class=\"gridPane\" [style.width]=\"gridWidthString\">\r\n    <div attr.id='{{gridId}}' class=\"slickgrid-container\" style=\"width: 100%\" [style.height]=\"gridHeightString\">\r\n    </div>\r\n\r\n    <slick-pagination id=\"slickPagingContainer-{{gridId}}\"\r\n        *ngIf=\"showPagination\"\r\n        (onPaginationChanged)=\"paginationChanged($event)\"\r\n        [gridPaginationOptions]=\"gridPaginationOptions\">\r\n    </slick-pagination>\r\n</div>\r\n`,\n  providers: [\n    CompoundDateFilter,\n    CompoundInputFilter,\n    InputFilter,\n    MultipleSelectFilter,\n    SingleSelectFilter,\n    SelectFilter,\n    ControlAndPluginService,\n    ExportService,\n    FilterFactory,\n    FilterService,\n    GraphqlService,\n    GridEventService,\n    GridService,\n    GridStateService,\n    GroupingAndColspanService,\n    ResizerService,\n    SortService,\n    SlickgridConfig\n  ]\n})\nexport class AngularSlickgridComponent implements AfterViewInit, OnDestroy, OnInit {\n  @ViewChild('customElm', {read: ElementRef}) customElm: ElementRef;\n  private _dataset: any[];\n  private _columnDefinitions: Column[];\n  private _dataView: any;\n  private _eventHandler: any = new Slick.EventHandler();\n  grid: any;\n  gridPaginationOptions: GridOption;\n  gridHeightString: string;\n  gridWidthString: string;\n  groupingDefinition: any = {};\n  groupItemMetadataProvider: any;\n  showPagination = false;\n  isGridInitialized = false;\n  subscriptions: Subscription[] = [];\n\n  @Output() onAngularGridCreated = new EventEmitter<AngularGridInstance>();\n  @Output() onDataviewCreated = new EventEmitter<any>();\n  @Output() onGridCreated = new EventEmitter<any>();\n  @Output() onGridInitialized = new EventEmitter<any>();\n  @Output() onBeforeGridCreate = new EventEmitter<boolean>();\n  @Output() onBeforeGridDestroy = new EventEmitter<any>();\n  @Output() onAfterGridDestroyed = new EventEmitter<boolean>();\n  @Output() onGridStateChanged = new EventEmitter<GridStateChange>();\n  @Input() gridId: string;\n  @Input() gridOptions: GridOption;\n  @Input() gridHeight = 0;\n  @Input() gridWidth = 0;\n\n  @Input()\n  set columnDefinitions(columnDefinitions: Column[]) {\n    this._columnDefinitions = columnDefinitions;\n    if (this.isGridInitialized) {\n      this.updateColumnDefinitionsList(columnDefinitions);\n    }\n  }\n  get columnDefinitions(): Column[] {\n    return this._columnDefinitions;\n  }\n  @Input()\n  set dataset(dataset: any[]) {\n    this._dataset = dataset;\n    this.refreshGridData(dataset);\n  }\n  get dataset(): any[] {\n    return this._dataView.getItems();\n  }\n\n\n  constructor(\n    private controlAndPluginService: ControlAndPluginService,\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private gridService: GridService,\n    private gridEventService: GridEventService,\n    private gridStateService: GridStateService,\n    private groupingAndColspanService: GroupingAndColspanService,\n    private resizer: ResizerService,\n    private sortService: SortService,\n    private translate: TranslateService,\n    @Inject('config') private forRootConfig: GridOption\n  ) {}\n\n  ngOnInit(): void {\n    this.onBeforeGridCreate.emit(true);\n    if (!this.gridOptions.enableAutoResize && !this.gridOptions.autoResize) {\n      this.gridHeightString = `${this.gridHeight}px`;\n      this.gridWidthString = `${this.gridWidth}px`;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.onBeforeGridDestroy.emit(this.grid);\n    this.destroy();\n    this.onAfterGridDestroyed.emit(true);\n  }\n\n  destroy() {\n    this._dataView = [];\n    this.gridOptions = {};\n    this._eventHandler.unsubscribeAll();\n    this.controlAndPluginService.dispose();\n    this.filterService.dispose();\n    this.gridEventService.dispose();\n    this.gridStateService.dispose();\n    this.groupingAndColspanService.dispose();\n    this.resizer.dispose();\n    this.sortService.dispose();\n    this.grid.destroy();\n\n    // also unsubscribe all RxJS subscriptions\n    this.subscriptions.forEach((subscription: Subscription) => {\n      if (subscription && subscription.unsubscribe) {\n        subscription.unsubscribe();\n      }\n    });\n    this.subscriptions = [];\n  }\n\n  ngAfterViewInit() {\n    this.initialization();\n    this.isGridInitialized = true;\n  }\n\n  initialization() {\n    // make sure the dataset is initialized (if not it will throw an error that it cannot getLength of null)\n    this._dataset = this._dataset || [];\n    this.gridOptions = this.mergeGridOptions(this.gridOptions);\n    this.createBackendApiInternalPostProcessCallback(this.gridOptions);\n\n    if (this.gridOptions.enableGrouping) {\n      this.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\n      this._dataView = new Slick.Data.DataView({\n        groupItemMetadataProvider: this.groupItemMetadataProvider,\n        inlineFilters: true\n      });\n    } else {\n      this._dataView = new Slick.Data.DataView();\n    }\n\n    // for convenience, we provide the property \"editor\" as an Angular-Slickgrid editor complex object\n    // however \"editor\" is used internally by SlickGrid for it's Editor Factory\n    // so in our lib we will swap \"editor\" and copy it into \"internalColumnEditor\"\n    // then take back \"editor.model\" and make it the new \"editor\" so that SlickGrid Editor Factory still works\n    this._columnDefinitions = this._columnDefinitions.map((c: Column | any) => ({\n      ...c,\n      editor: c.editor && c.editor.model,\n      internalColumnEditor: { ...c.editor }\n    })),\n\n    this.controlAndPluginService.createCheckboxPluginBeforeGridCreation(this._columnDefinitions, this.gridOptions);\n    this.grid = new Slick.Grid(`#${this.gridId}`, this._dataView, this._columnDefinitions, this.gridOptions);\n\n    this.controlAndPluginService.attachDifferentControlOrPlugins(this.grid, this._dataView, this.groupItemMetadataProvider);\n    this.attachDifferentHooks(this.grid, this.gridOptions, this._dataView);\n\n    // emit the Grid & DataView object to make them available in parent component\n    this.onGridCreated.emit(this.grid);\n    this.onDataviewCreated.emit(this._dataView);\n\n    this.grid.init();\n    this._dataView.beginUpdate();\n    this._dataView.setItems(this._dataset, this.gridOptions.datasetIdPropertyName);\n    this._dataView.endUpdate();\n\n    // after the DataView is created & updated execute some processes\n    this.executeAfterDataviewCreated(this.grid, this.gridOptions, this._dataView);\n\n    // attach resize ONLY after the dataView is ready\n    this.attachResizeHook(this.grid, this.gridOptions);\n\n    // attach grouping and header grouping colspan service\n    if (this.gridOptions.createPreHeaderPanel) {\n      this.groupingAndColspanService.init(this.grid, this._dataView);\n    }\n\n    // attach grid  service\n    this.gridService.init(this.grid, this._dataView);\n\n    // when user enables translation, we need to translate Headers on first pass & subsequently in the attachDifferentHooks\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders();\n    }\n\n    // if Export is enabled, initialize the service with the necessary grid and other objects\n    if (this.gridOptions.enableExport) {\n      this.exportService.init(this.grid, this._dataView);\n    }\n\n    // once all hooks are in placed and the grid is initialized, we can emit an event\n    this.onGridInitialized.emit(this.grid);\n\n    // attach the Backend Service API callback functions only after the grid is initialized\n    // because the preProcess() and onInit() might get triggered\n    if (this.gridOptions && this.gridOptions.backendServiceApi) {\n      this.attachBackendCallbackFunctions(this.gridOptions);\n    }\n\n    this.gridStateService.init(this.grid, this.controlAndPluginService, this.filterService, this.sortService);\n\n    this.onAngularGridCreated.emit({\n      // Slick Grid & DataView objects\n      dataView: this._dataView,\n      slickGrid: this.grid,\n\n      // return all available Services (non-singleton)\n      backendService: this.gridOptions && this.gridOptions.backendServiceApi && this.gridOptions.backendServiceApi.service,\n      exportService: this.exportService,\n      filterService: this.filterService,\n      gridEventService: this.gridEventService,\n      gridStateService: this.gridStateService,\n      gridService: this.gridService,\n      groupingService: this.groupingAndColspanService,\n      pluginService: this.controlAndPluginService,\n      resizerService: this.resizer,\n      sortService: this.sortService,\n    });\n  }\n\n  /**\n   * Define what our internal Post Process callback, it will execute internally after we get back result from the Process backend call\n   * For now, this is GraphQL Service only feautre and it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n   */\n  createBackendApiInternalPostProcessCallback(gridOptions: GridOption) {\n    if (gridOptions && gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      // internalPostProcess only works with a GraphQL Service, so make sure it is that type\n      if (backendApi && backendApi.service && backendApi.service instanceof GraphqlService) {\n        backendApi.internalPostProcess = (processResult: any) => {\n          const datasetName = (backendApi && backendApi.service && typeof backendApi.service.getDatasetName === 'function') ? backendApi.service.getDatasetName() : '';\n          if (processResult && processResult.data && processResult.data[datasetName]) {\n            this._dataset = processResult.data[datasetName].nodes;\n            this.refreshGridData(this._dataset, processResult.data[datasetName].totalCount);\n          } else {\n            this._dataset = [];\n          }\n        };\n      }\n    }\n  }\n\n  attachDifferentHooks(grid: any, gridOptions: GridOption, dataView: any) {\n    // on locale change, we have to manually translate the Headers, GridMenu\n    this.subscriptions.push(\n      this.translate.onLangChange.subscribe((event) => {\n        if (gridOptions.enableTranslate) {\n          this.controlAndPluginService.translateColumnHeaders();\n          this.controlAndPluginService.translateColumnPicker();\n          this.controlAndPluginService.translateGridMenu();\n          this.controlAndPluginService.translateHeaderMenu();\n        }\n      })\n    );\n\n    // if user entered some Columns \"presets\", we need to reflect them all in the grid\n    if (gridOptions.presets && Array.isArray(gridOptions.presets.columns) && gridOptions.presets.columns.length > 0) {\n      const gridColumns: Column[] = this.gridStateService.getAssociatedGridColumns(grid, gridOptions.presets.columns);\n      if (gridColumns && Array.isArray(gridColumns) && gridColumns.length > 0) {\n        // make sure that the checkbox selector is also visible if it is enabled\n        if (gridOptions.enableCheckboxSelector) {\n          const checkboxColumn = (Array.isArray(this._columnDefinitions) && this._columnDefinitions.length > 0) ? this._columnDefinitions[0] : null;\n          if (checkboxColumn && checkboxColumn.id === '_checkbox_selector' && gridColumns[0].id !== '_checkbox_selector') {\n            gridColumns.unshift(checkboxColumn);\n          }\n        }\n\n        // finally set the new presets columns (including checkbox selector if need be)\n        grid.setColumns(gridColumns);\n      }\n    }\n\n    // attach external sorting (backend) when available or default onSort (dataView)\n    if (gridOptions.enableSorting) {\n      gridOptions.backendServiceApi ? this.sortService.attachBackendOnSort(grid, dataView) : this.sortService.attachLocalOnSort(grid, dataView);\n    }\n\n    // attach external filter (backend) when available or default onFilter (dataView)\n    if (gridOptions.enableFiltering) {\n      this.filterService.init(grid);\n\n      // if user entered some \"presets\", we need to reflect them all in the DOM\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n        this.filterService.populateColumnFilterSearchTerms();\n      }\n      gridOptions.backendServiceApi ? this.filterService.attachBackendOnFilter(grid) : this.filterService.attachLocalOnFilter(grid, this._dataView);\n    }\n\n    // if user set an onInit Backend, we'll run it right away (and if so, we also need to run preProcess, internalPostProcess & postProcess)\n    if (gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      if (backendApi && backendApi.service && backendApi.service.init) {\n        backendApi.service.init(backendApi.options, gridOptions.pagination, this.grid);\n      }\n    }\n\n    // expose all Slick Grid Events through dispatch\n    for (const prop in grid) {\n      if (grid.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(grid[prop], (e: any, args: any) => {\n          this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\n        });\n      }\n    }\n\n    // expose all Slick DataView Events through dispatch\n    for (const prop in dataView) {\n      if (dataView.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(dataView[prop], (e: any, args: any) => {\n          this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\n        });\n      }\n    }\n\n    // expose GridState Service changes event through dispatch\n    this.subscriptions.push(\n      this.gridStateService.onGridStateChanged.subscribe((gridStateChange: GridStateChange) => {\n        this.onGridStateChanged.emit(gridStateChange);\n      })\n    );\n\n\n    // on cell click, mainly used with the columnDef.action callback\n    this.gridEventService.attachOnCellChange(grid, dataView);\n    this.gridEventService.attachOnClick(grid, dataView);\n\n    this._eventHandler.subscribe(dataView.onRowCountChanged, (e: any, args: any) => {\n      grid.updateRowCount();\n      grid.render();\n    });\n    this._eventHandler.subscribe(dataView.onRowsChanged, (e: any, args: any) => {\n      grid.invalidateRows(args.rows);\n      grid.render();\n    });\n\n    // does the user have a colspan callback?\n    if (gridOptions.colspanCallback) {\n      this._dataView.getItemMetadata = (rowNumber: number) => {\n        const item = this._dataView.getItem(rowNumber);\n        return gridOptions.colspanCallback(item);\n      };\n    }\n  }\n\n  attachBackendCallbackFunctions(gridOptions: GridOption) {\n    const backendApi = gridOptions.backendServiceApi;\n    const serviceOptions: BackendServiceOption = (backendApi && backendApi.service && backendApi.service.options) ? backendApi.service.options : {};\n    const isExecuteCommandOnInit = (!serviceOptions) ? false : ((serviceOptions && serviceOptions.hasOwnProperty('executeProcessCommandOnInit')) ? serviceOptions['executeProcessCommandOnInit'] : true);\n\n    // update backend filters (if need be) before the query runs\n    if (backendApi) {\n      const backendService = backendApi.service;\n\n      // if user entered some any \"presets\", we need to reflect them all in the grid\n      if (gridOptions && gridOptions.presets) {\n         // Filters \"presets\"\n         if (backendService && backendService.updateFilters && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n          backendService.updateFilters(gridOptions.presets.filters, true);\n        }\n        // Sorters \"presets\"\n        if (backendService && backendService.updateSorters && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n          backendService.updateSorters(undefined, gridOptions.presets.sorters);\n        }\n        // Pagination \"presets\"\n        if (backendService && backendService.updatePagination && gridOptions.presets.pagination) {\n          backendService.updatePagination(gridOptions.presets.pagination.pageNumber, gridOptions.presets.pagination.pageSize);\n        }\n      } else {\n        const columnFilters = this.filterService.getColumnFilters();\n        if (columnFilters && backendService && backendService.updateFilters) {\n          backendService.updateFilters(columnFilters, false);\n        }\n      }\n    }\n\n    if (backendApi && backendApi.service && (backendApi.onInit || isExecuteCommandOnInit)) {\n      const query = (typeof backendApi.service.buildQuery === 'function') ? backendApi.service.buildQuery() : '';\n      const observableOrPromise = (isExecuteCommandOnInit) ? backendApi.process(query) : backendApi.onInit(query);\n\n      // wrap this inside a setTimeout to avoid timing issue since the gridOptions needs to be ready before running this onInit\n      setTimeout(async () => {\n        if (backendApi.preProcess) {\n          backendApi.preProcess();\n        }\n\n        // the process could be an Observable (like HttpClient) or a Promise\n        // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n        const processResult = await castToPromise(observableOrPromise);\n\n        // define what our internal Post Process callback, only available for GraphQL Service for now\n        // it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n        if (processResult && backendApi && backendApi.service instanceof GraphqlService && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  attachResizeHook(grid: any, options: GridOption) {\n    // expand/autofit columns on first page load\n    if (grid && options.autoFitColumnsOnFirstLoad) {\n      grid.autosizeColumns();\n    }\n\n    // auto-resize grid on browser resize\n    this.resizer.init(grid);\n    if (options.enableAutoResize) {\n      this.resizer.attachAutoResizeDataGrid({ height: this.gridHeight, width: this.gridWidth });\n      if (grid && options.autoFitColumnsOnFirstLoad) {\n        grid.autosizeColumns();\n      }\n    }\n  }\n\n  executeAfterDataviewCreated(grid: any, gridOptions: GridOption, dataView: any) {\n    // if user entered some Sort \"presets\", we need to reflect them all in the DOM\n    if (gridOptions.enableSorting) {\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n        this.sortService.loadLocalPresets(grid, dataView);\n      }\n    }\n  }\n\n  mergeGridOptions(gridOptions): GridOption {\n    gridOptions.gridId = this.gridId;\n    gridOptions.gridContainerId = `slickGridContainer-${this.gridId}`;\n    if (gridOptions.enableFiltering || this.forRootConfig.enableFiltering) {\n      gridOptions.showHeaderRow = true;\n    }\n    // use jquery extend to deep merge and avoid immutable properties changed in GlobalGridOptions after route change\n    return $.extend(true, {}, GlobalGridOptions, this.forRootConfig, gridOptions);\n  }\n\n  paginationChanged(pagination: Pagination) {\n    this.gridStateService.onGridStateChanged.next({\n      change: { newValues: pagination, type: GridStateType.pagination },\n      gridState: this.gridStateService.getCurrentGridState()\n    });\n  }\n\n  /**\n   * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well\n   * @param dataset\n   */\n  refreshGridData(dataset: any[], totalCount?: number) {\n    if (dataset && this.grid && this._dataView && typeof this._dataView.setItems === 'function') {\n      this._dataView.setItems(dataset, this.gridOptions.datasetIdPropertyName);\n      this._dataView.reSort();\n\n      // this.grid.setData(dataset);\n      this.grid.invalidate();\n      this.grid.render();\n\n      if (this.gridOptions.enablePagination || this.gridOptions.backendServiceApi) {\n        // do we want to show pagination?\n        // if we have a backendServiceApi and the enablePagination is undefined, we'll assume that we do want to see it, else get that defined value\n        this.showPagination = ((this.gridOptions.backendServiceApi && this.gridOptions.enablePagination === undefined) ? true : this.gridOptions.enablePagination) || false;\n\n        // before merging the grid options, make sure that it has the totalItems count\n        // once we have that, we can merge and pass all these options to the pagination component\n        if (!this.gridOptions.pagination) {\n          this.gridOptions.pagination = (this.gridOptions.pagination) ? this.gridOptions.pagination : undefined;\n        }\n        if (this.gridOptions.pagination && totalCount) {\n          this.gridOptions.pagination.totalItems = totalCount;\n        }\n        if (this.gridOptions.presets && this.gridOptions.presets.pagination && this.gridOptions.pagination) {\n          this.gridOptions.pagination.pageSize = this.gridOptions.presets.pagination.pageSize;\n          this.gridOptions.pagination.pageNumber = this.gridOptions.presets.pagination.pageNumber;\n        }\n        this.gridPaginationOptions = this.mergeGridOptions(this.gridOptions);\n      }\n      if (this.grid &&  this.gridOptions.enableAutoResize) {\n        // resize the grid inside a slight timeout, in case other DOM element changed prior to the resize (like a filter/pagination changed)\n        this.resizer.resizeGrid(10, { height: this.gridHeight, width: this.gridWidth });\n      }\n    }\n  }\n\n  /**\n   * Dynamically change or update the column definitions list.\n   * We will re-render the grid so that the new header and data shows up correctly.\n   * If using i18n, we also need to trigger a re-translate of the column headers\n   */\n  updateColumnDefinitionsList(newColumnDefinitions) {\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders(false, newColumnDefinitions);\n    } else {\n      this.controlAndPluginService.renderColumnHeaders(newColumnDefinitions);\n    }\n    this.grid.autosizeColumns();\n  }\n\n  /** Toggle the filter row displayed on first row\n   * @param isShowing\n   */\n  showHeaderRow(isShowing: boolean) {\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  /** Toggle the filter row displayed on first row */\n  toggleHeaderRow() {\n    const isShowing = !this.grid.getOptions().showHeaderRow;\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  private dispatchCustomEvent(eventName: string, data?: any, isBubbling: boolean = true) {\n    const eventInit: CustomEventInit = { bubbles: isBubbling };\n    if (data) {\n      eventInit.detail = data;\n    }\n    this.customElm.nativeElement.dispatchEvent(new CustomEvent(eventName, eventInit));\n  }\n}\n",
    "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AngularSlickgridComponent } from './../components/angular-slickgrid.component';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport { GraphqlService } from './../services/graphql.service';\r\nimport { GridOdataService } from './../services/grid-odata.service';\r\nimport { GridOption } from './../models/gridOption.interface';\r\nimport { SlickPaginationComponent } from './../components/slick-pagination.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TranslateModule\r\n  ],\r\n  declarations: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  exports: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  entryComponents: [AngularSlickgridComponent]\r\n})\r\nexport class AngularSlickgridModule {\r\n  static forRoot(config: GridOption = {}) {\r\n    return {\r\n      ngModule: AngularSlickgridModule,\r\n      providers: [\r\n        { provide: 'config', useValue: config },\r\n        CollectionService,\r\n        GraphqlService,\r\n        GridOdataService\r\n      ]\r\n    };\r\n  }\r\n}\r\n"
  ],
  "names": [
    "__awaiter",
    "thisArg",
    "_arguments",
    "P",
    "generator",
    "Promise",
    "resolve",
    "reject",
    "fulfilled",
    "value",
    "step",
    "next",
    "e",
    "rejected",
    "result",
    "done",
    "then",
    "apply",
    "__generator",
    "body",
    "f",
    "y",
    "t",
    "g",
    "_",
    "label",
    "sent",
    "trys",
    "ops",
    "verb",
    "throw",
    "return",
    "Symbol",
    "iterator",
    "this",
    "n",
    "v",
    "op",
    "TypeError",
    "call",
    "pop",
    "length",
    "push",
    "__values",
    "o",
    "m",
    "i",
    "__read",
    "r",
    "ar",
    "error",
    "__spread",
    "arguments",
    "concat",
    "colon",
    "comma",
    "equalSign",
    "pipe",
    "semicolon",
    "space",
    "tab",
    "doubleColon",
    "doublePipe",
    "doubleSemicolon",
    "csv",
    "doc",
    "docx",
    "pdf",
    "txt",
    "xls",
    "xlsx",
    "columns",
    "filter",
    "pagination",
    "sorter",
    "empty",
    "contains",
    "lessThan",
    "lessThanOrEqual",
    "greaterThan",
    "greaterThanOrEqual",
    "notEqual",
    "equal",
    "endsWith",
    "startsWith",
    "in",
    "notIn",
    "inContains",
    "notInContains",
    "asc",
    "ASC",
    "desc",
    "DESC",
    "moment",
    "moment_",
    "addWhiteSpaces",
    "nbSpaces",
    "htmlEntityDecode",
    "input",
    "replace",
    "match",
    "dec",
    "String",
    "fromCharCode",
    "arraysEqual",
    "a",
    "b",
    "orderMatters",
    "sort",
    "castToPromise",
    "fromServiceName",
    "promise",
    "Observable",
    "first",
    "toPromise",
    "take",
    "Error",
    "findOrDefault",
    "array",
    "logic",
    "defaultVal",
    "find",
    "decimalFormatted",
    "minDecimal",
    "maxDecimal",
    "isNaN",
    "minDec",
    "undefined",
    "maxDec",
    "amount",
    "Math",
    "round",
    "pow",
    "indexOf",
    "mapMomentDateFormatWithFieldType",
    "fieldType",
    "map",
    "FieldType",
    "dateTime",
    "dateTimeIso",
    "dateTimeIsoAmPm",
    "dateTimeIsoAM_PM",
    "dateUs",
    "dateUsShort",
    "dateTimeUs",
    "dateTimeUsAmPm",
    "dateTimeUsAM_PM",
    "dateTimeUsShort",
    "dateTimeUsShortAmPm",
    "dateUtc",
    "date",
    "dateIso",
    "mapFlatpickrDateFormatWithFieldType",
    "mapOperatorType",
    "operator",
    "OperatorType",
    "mapOperatorByFieldType",
    "string",
    "unknown",
    "float",
    "number",
    "dateTimeUsShortAM_PM",
    "parseUtcDate",
    "inputDateString",
    "useUtc",
    "test",
    "dateString",
    "decodeURIComponent",
    "dateMoment",
    "Date",
    "isValid",
    "year",
    "toString",
    "utc",
    "format",
    "sanitizeHtmlToText",
    "htmlString",
    "temp",
    "document",
    "createElement",
    "innerHTML",
    "textContent",
    "innerText",
    "titleCase",
    "charAt",
    "toUpperCase",
    "slice",
    "toCamelCase",
    "str",
    "offset",
    "toLowerCase",
    "compareDates",
    "value1",
    "value2",
    "sortDirection",
    "strict",
    "diff",
    "date1",
    "date2",
    "parseInt",
    "FORMAT",
    "dateUsShortSorter",
    "dateSorter",
    "ISO_8601",
    "dateIsoSorter",
    "dateUsSorter",
    "numericSorter",
    "x",
    "parseFloat",
    "stringSorter",
    "position",
    "Sorters",
    "numeric",
    "sortByFieldType",
    "sortResult",
    "CollectionService",
    "translate",
    "prototype",
    "filterCollection",
    "collection",
    "filterBy",
    "filteredCollection",
    "property_1",
    "property",
    "value_1",
    "item",
    "sortCollection",
    "sortBy",
    "enableTranslateLabel",
    "_this",
    "sortedCollection",
    "property_2",
    "sortDirection_1",
    "hasOwnProperty",
    "sortDesc",
    "fieldType_1",
    "dataRow1",
    "dataRow2",
    "instant",
    "parseBoolean",
    "type",
    "Injectable",
    "TranslateService",
    "booleanFilterCondition",
    "options",
    "searchTerm",
    "Array",
    "isArray",
    "searchTerms",
    "cellValue",
    "testFilterCondition",
    "includes",
    "findIndex",
    "val",
    "dateFilterCondition",
    "searchDateFormat",
    "filterSearchType",
    "dateCell",
    "dateSearch",
    "dateIsoFilterCondition",
    "dateUsFilterCondition",
    "dateUsShortFilterCondition",
    "dateUtcFilterCondition",
    "collectionSearchFilterCondition",
    "numberFilterCondition",
    "stringFilterCondition",
    "cellValueLastChar",
    "executeMappedCondition",
    "boolean",
    "FilterConditions",
    "booleanFilter",
    "collectionSearchFilter",
    "dateFilter",
    "dateIsoFilter",
    "dateUtcFilter",
    "dateUsFilter",
    "dateUsShortFilter",
    "numberFilter",
    "stringFilter",
    "testFilter",
    "require",
    "CompoundDateFilter",
    "Object",
    "defineProperty",
    "get",
    "grid",
    "getOptions",
    "_operator",
    "set",
    "init",
    "args",
    "callback",
    "columnDef",
    "$filterElm",
    "createDomElement",
    "$filterInputElm",
    "keyup",
    "onTriggerEvent",
    "$selectOperatorElm",
    "change",
    "clear",
    "flatInstance",
    "destroy",
    "off",
    "remove",
    "setValues",
    "values",
    "setDate",
    "buildDatePickerInput",
    "inputFormat",
    "outputFormat",
    "outputType",
    "currentLocale",
    "currentLang",
    "substring",
    "pickerOptions",
    "defaultDate",
    "altInput",
    "altFormat",
    "dateFormat",
    "wrap",
    "closeOnSelect",
    "locale",
    "loadFlatpickrLocale",
    "onChange",
    "selectedDates",
    "dateStr",
    "instance",
    "_currentValue",
    "enableTime",
    "CustomEvent",
    "placeholder",
    "gridOptions",
    "defaultFilterPlaceholder",
    "$",
    "flatpickr",
    "buildSelectOperatorHtmlString",
    "optionValues",
    "getOptionValues",
    "optionValueString",
    "forEach",
    "option",
    "description",
    "$headerElm",
    "getHeaderRowColumn",
    "id",
    "$filterContainerElm",
    "$containerInputGroup",
    "$operatorInputGroupAddon",
    "append",
    "attr",
    "data",
    "addClass",
    "appendTo",
    "localeDefault",
    "default",
    "clearFilterTriggered",
    "selectedOperator",
    "text",
    "removeClass",
    "hide",
    "close",
    "show",
    "open",
    "CompoundInputFilter",
    "buildInputHtmlString",
    "Inject",
    "InputFilter",
    "filterTemplate",
    "buildTemplateHtmlString",
    "target",
    "trigger",
    "MultipleSelectFilter",
    "collectionService",
    "isFilled",
    "defaultOptions",
    "container",
    "maxHeight",
    "okButton",
    "addTitle",
    "countSelected",
    "allSelected",
    "selectAllText",
    "selectAllDelimiter",
    "onClose",
    "selectedItems",
    "multipleSelect",
    "siblings",
    "labelName",
    "customStructure",
    "valueName",
    "newCollection",
    "params",
    "collectionFilterBy",
    "collectionSortBy",
    "optionCollection",
    "labelKey",
    "selected",
    "findValueInSearchTerms",
    "textLabel",
    "assign",
    "filterOptions",
    "SelectFilter",
    "searchTermInput",
    "SingleSelectFilter",
    "single",
    "selectedItem",
    "Filters",
    "singleSelect",
    "select",
    "compoundDate",
    "compoundInput",
    "GlobalGridOptions",
    "alwaysShowVerticalScroll",
    "autoEdit",
    "asyncEditorLoading",
    "autoFitColumnsOnFirstLoad",
    "autoResize",
    "bottomPadding",
    "minHeight",
    "minWidth",
    "sidePadding",
    "cellHighlightCssClass",
    "checkboxSelector",
    "cssClass",
    "columnPicker",
    "hideForceFitButton",
    "hideSyncResizeButton",
    "datasetIdPropertyName",
    "defaultFilter",
    "editable",
    "enableAutoResize",
    "enableCellNavigation",
    "enableColumnPicker",
    "enableColumnReorder",
    "enableExport",
    "enableGridMenu",
    "enableHeaderMenu",
    "enableMouseHoverHighlightRow",
    "enableSorting",
    "enableTextSelectionOnCells",
    "explicitInitialization",
    "exportOptions",
    "delimiter",
    "DelimiterType",
    "exportWithFormatter",
    "filename",
    "FileType",
    "groupingAggregatorRowText",
    "sanitizeDataExport",
    "useUtf8WithBom",
    "forceFitColumns",
    "gridMenu",
    "hideClearAllFiltersCommand",
    "hideClearAllSortingCommand",
    "hideExportCsvCommand",
    "hideExportTextDelimitedCommand",
    "hideRefreshDatasetCommand",
    "hideToggleFilterCommand",
    "iconCssClass",
    "iconClearAllFiltersCommand",
    "iconClearAllSortingCommand",
    "iconExportCsvCommand",
    "iconExportTextDelimitedCommand",
    "iconRefreshDatasetCommand",
    "iconToggleFilterCommand",
    "menuWidth",
    "resizeOnShowHeaderRow",
    "headerMenu",
    "autoAlign",
    "autoAlignOffset",
    "iconSortAscCommand",
    "iconSortDescCommand",
    "iconColumnHideCommand",
    "hideColumnHideCommand",
    "hideSortCommands",
    "headerRowHeight",
    "multiColumnSort",
    "numberedMultiColumnSort",
    "tristateMultiColumnSort",
    "sortColNumberInSeparateSpan",
    "suppressActiveCellChangeOnEdit",
    "pageSizes",
    "pageSize",
    "totalItems",
    "rowHeight",
    "showHeaderRow",
    "topPanelHeight",
    "SlickgridConfig",
    "FilterFactory",
    "injector",
    "config",
    "_options",
    "createFilter",
    "columnFilter",
    "model",
    "filterInstance",
    "name",
    "createInjector",
    "service",
    "Injector",
    "create",
    "provide",
    "deps",
    "FilterService",
    "filterFactory",
    "_eventHandler",
    "Slick",
    "EventHandler",
    "_filters",
    "_columnFilters",
    "onFilterChanged",
    "Subject",
    "onFilterCleared",
    "_grid",
    "getColumns",
    "attachBackendOnFilter",
    "_slickSubscriber",
    "Event",
    "subscribe",
    "attachBackendOnFilterSubscribe",
    "bind",
    "onHeaderRowCellRendered",
    "addFilterTemplateToHeaderRow",
    "event",
    "backendApi",
    "_gridOptions",
    "backendServiceApi",
    "process",
    "preProcess",
    "processOnFilterChanged",
    "query",
    "_a",
    "emitFilterChanged",
    "processResult",
    "internalPostProcess",
    "postProcess",
    "attachLocalOnFilter",
    "dataView",
    "_dataView",
    "setFilterArgs",
    "columnFilters",
    "setFilter",
    "customLocalFilter",
    "columnId",
    "refresh",
    "clearFilters",
    "invalidate",
    "render",
    "tslib_1.__values",
    "keys",
    "_b",
    "columnIndex",
    "getColumnIndex",
    "queryField",
    "queryFieldFilter",
    "field",
    "searchValues",
    "fieldSearchValue",
    "matches",
    "lastValueChar",
    "join",
    "k",
    "ln",
    "useFormatterOuputToFilter",
    "rowIndex",
    "getIdxById",
    "formatter",
    "dispose",
    "disposeColumnFilters",
    "unsubscribeAll",
    "unsubscribe",
    "index",
    "getColumnFilters",
    "getCurrentLocalFilters",
    "currentFilters",
    "colId",
    "callbackSearchEvent",
    "colFilter",
    "triggerEvent",
    "serviceOptions",
    "_onFilterChangedOptions",
    "column",
    "filterable",
    "filter_1",
    "updateColumnFilters",
    "filterArguments",
    "filterExistIndex",
    "filt",
    "sender",
    "backendService",
    "getCurrentFilters",
    "populateColumnFilterSearchTerms",
    "presets",
    "filters",
    "filters_1",
    "_columnDefinitions",
    "columnPreset",
    "presetFilter",
    "slickEvent",
    "isPropagationStopped",
    "extend",
    "EventData",
    "notify",
    "ExportService",
    "_lineCarriageReturn",
    "_hasGroupedItems",
    "onGridBeforeExportToFile",
    "onGridAfterExportToFile",
    "exportToFile",
    "_exportOptions",
    "dataOutput",
    "getDataOutput",
    "setTimeout",
    "downloadOptions",
    "csvContent",
    "startDownloadFile",
    "groupByColumnHeader",
    "groupingColumnHeaderTitle",
    "_exportQuoteWrapper",
    "outputDataString",
    "grouping",
    "getGrouping",
    "_columnHeaders",
    "getColumnHeaders",
    "header",
    "title",
    "getAllGridRowData",
    "lineCarriageReturn",
    "lineCount",
    "getLength",
    "rowNumber",
    "itemObj",
    "getItem",
    "readRegularRowData",
    "__groupTotals",
    "readGroupedTitleRow",
    "readGroupedTotalRow",
    "columnHeaders",
    "fieldName",
    "headerKey",
    "skippedField",
    "excludeFromExport",
    "width",
    "key",
    "row",
    "idx",
    "rowOutputString",
    "exportQuoteWrapper",
    "col",
    "fieldId",
    "isEvaluatingFormatter",
    "exportCustomFormatter",
    "itemData",
    "exportCsvForceToKeepAsString",
    "groupName",
    "level",
    "output",
    "groupTotalsFormatter",
    "navigator",
    "appName",
    "outputData",
    "mimeType",
    "TextEncoder",
    "encode",
    "blob",
    "Blob",
    "msSaveOrOpenBlob",
    "link",
    "csvUrl",
    "URL",
    "createObjectURL",
    "href",
    "setAttribute",
    "style",
    "visibility",
    "appendChild",
    "click",
    "removeChild",
    "SortService",
    "_currentLocalSorters",
    "_isBackendGrid",
    "onSortChanged",
    "onSortCleared",
    "attachBackendOnSort",
    "onSort",
    "onBackendSortChanged",
    "processOnSortChanged",
    "emitSortChanged",
    "attachLocalOnSort",
    "sortColumns",
    "sortCols",
    "sortAsc",
    "sortCol",
    "sortColumn",
    "direction",
    "SortDirection",
    "onLocalSortChanged",
    "clearSorting",
    "setSortColumns",
    "getCurrentLocalSorters",
    "getPreviousColumnSorts",
    "getSortColumns",
    "reduce",
    "cols",
    "loadLocalPresets",
    "sorters",
    "presetSorting",
    "gridColumn",
    "l",
    "columnSortObj",
    "SortDirectionNumber",
    "sortField",
    "neutral",
    "currentSorters",
    "getCurrentSorters",
    "Constants",
    "TEXT_CLEAR_ALL_FILTERS",
    "TEXT_CLEAR_ALL_SORTING",
    "TEXT_COLUMNS",
    "TEXT_COMMANDS",
    "TEXT_EXPORT_IN_CSV_FORMAT",
    "TEXT_EXPORT_IN_TEXT_FORMAT",
    "TEXT_FORCE_FIT_COLUMNS",
    "TEXT_HIDE_COLUMN",
    "TEXT_REFRESH_DATASET",
    "TEXT_SYNCHRONOUS_RESIZE",
    "TEXT_SORT_ASCENDING",
    "TEXT_SORT_DESCENDING",
    "TEXT_TOGGLE_FILTER_ROW",
    "ControlAndPluginService",
    "exportService",
    "filterService",
    "sortService",
    "areVisibleColumnDifferent",
    "extensionList",
    "getAllColumns",
    "allColumns",
    "getVisibleColumns",
    "visibleColumns",
    "getAllExtensions",
    "getExtensionByName",
    "p",
    "autoResizeColumns",
    "autosizeColumns",
    "attachDifferentControlOrPlugins",
    "groupItemMetadataProvider",
    "enableTranslate",
    "translateItems",
    "columnPickerControl",
    "createColumnPicker",
    "userOriginalGridMenu",
    "gridMenuControl",
    "createGridMenu",
    "enableAutoTooltip",
    "autoTooltipPlugin",
    "AutoTooltips",
    "autoTooltipOptions",
    "registerPlugin",
    "enableGrouping",
    "groupItemMetaProviderPlugin",
    "enableCheckboxSelector",
    "checkboxSelectorPlugin",
    "rowSelectionPlugin",
    "getSelectionModel",
    "RowSelectionModel",
    "rowSelectionOptions",
    "setSelectionModel",
    "preselectedRows",
    "selectRows",
    "enableRowSelection",
    "enableHeaderButton",
    "headerButtonsPlugin",
    "Plugins",
    "HeaderButtons",
    "headerButton",
    "onCommand",
    "headerMenuPlugin",
    "createHeaderMenu",
    "enableExcelCopyBuffer",
    "createUndoRedoBuffer",
    "hookUndoShortcutKey",
    "createCellExternalCopyManagerPlugin",
    "registerPlugins",
    "plugin",
    "createCheckboxPluginBeforeGridCreation",
    "columnDefinitions",
    "CheckboxSelectColumn",
    "selectionColumn",
    "getColumnDefinition",
    "excludeFromQuery",
    "excludeFromHeaderMenu",
    "unshift",
    "newRowIds",
    "pluginOptions",
    "clipboardCommandHandler",
    "editCommand",
    "undoRedoBuffer",
    "queueAndExecuteCommand",
    "dataItemColumnValueExtractor",
    "editor",
    "formattedOutput",
    "readOnlyMode",
    "includeHeaderWhenCopying",
    "newRowCreator",
    "count",
    "getData",
    "addItem",
    "CellSelectionModel",
    "cellExternalCopyManagerPlugin",
    "CellExternalCopyManager",
    "forceFitTitle",
    "getGridMenuTitleOutputString",
    "syncResizeTitle",
    "Controls",
    "ColumnPicker",
    "onColumnsChanged",
    "getDefaultGridMenuOptions",
    "customItems",
    "addGridMenuCustomCommands",
    "sortItems",
    "GridMenu",
    "onBeforeMenuShow",
    "executeGridMenuInternalCustomCommands",
    "onMenuClose",
    "gridUid",
    "getUID",
    "getDefaultHeaderMenuOptions",
    "addHeaderMenuCustomCommands",
    "HeaderMenu",
    "executeHeaderMenuInternalCommands",
    "commandQueue",
    "commandCtr",
    "execute",
    "undo",
    "command",
    "GlobalEditorLock",
    "cancelCurrentEdit",
    "redo",
    "hideColumn",
    "removeColumnByIndex",
    "setColumns",
    "keydown",
    "which",
    "ctrlKey",
    "metaKey",
    "shiftKey",
    "gridMenuCustomItems",
    "enableFiltering",
    "disabled",
    "positionOrder",
    "customTitle",
    "headerMenuOptions",
    "menu",
    "items",
    "columnHeaderMenuItems",
    "sortable",
    "itemA",
    "itemB",
    "newSortColumns",
    "setHeaderRowVisibility",
    "setTopPanelVisibility",
    "showTopPanel",
    "refreshBackendDataset",
    "buildQuery",
    "el",
    "translateColumnPicker",
    "columnTitle",
    "translateGridMenu",
    "emptyGridMenuTitles",
    "translateHeaderMenu",
    "resetHeaderMenuTranslations",
    "translateColumnHeaders",
    "newColumnDefinitions",
    "use",
    "renderColumnHeaders",
    "propName",
    "titleKey",
    "columnHeaderMenuItems_1",
    "propertyName",
    "inputKey",
    "outputKey",
    "items_1",
    "items_1_1",
    "timer",
    "GraphqlQueryBuilder",
    "queryFnName",
    "aliasOrFilter",
    "head",
    "alias",
    "prop",
    "getGraphQLValue",
    "searches",
    "_i",
    "searchKeys",
    "parceFind",
    "setAlias",
    "ReferenceError",
    "_levelA",
    "currentValue",
    "itemX",
    "RangeError",
    "propsAA",
    "JSON",
    "stringify",
    "propS",
    "objectToString",
    "obj",
    "sourceA",
    "DEFAULT_ITEMS_PER_PAGE",
    "GraphqlService",
    "defaultOrderBy",
    "defaultPaginationOptions",
    "datasetName",
    "queryQb",
    "QueryBuilder",
    "datasetQb",
    "dataQb",
    "columnIds",
    "columnDefinitions_1",
    "columnDefinitions_1_1",
    "fields",
    "buildFilterQuery",
    "isWithCursor",
    "pageInfoQb",
    "node",
    "datasetFilters",
    "paginationOptions",
    "sortingOptions",
    "orderBy",
    "filteringOptions",
    "addLocaleIntoQuery",
    "i18n",
    "extraQueryArguments",
    "_c",
    "queryArgument",
    "trimDoubleQuotesOnEnumField",
    "keepArgumentFieldDoubleQuotes",
    "inputArray",
    "shift",
    "split",
    "getInitPaginationOptions",
    "getDatasetName",
    "_currentFilters",
    "getCurrentPagination",
    "_currentPagination",
    "_currentSorters",
    "resetPaginationOptions",
    "after",
    "before",
    "last",
    "pageNumber",
    "updateOptions",
    "debounceTypingDelay",
    "filterTypingDebounce",
    "castFilterToColumnFilter",
    "clearTimeout",
    "updateFilters",
    "processOnPaginationChanged",
    "updatePagination",
    "newPage",
    "updateSorters",
    "isUpdatedByPreset",
    "searchValue",
    "searchByArray",
    "_loop_1",
    "columnFilter_1",
    "this_1",
    "presetSorters",
    "graphqlSorters",
    "tmpSorterArray",
    "queryFieldSorter",
    "sortColumns_1",
    "sortColumns_1_1",
    "inputStr",
    "enumSearchWords",
    "patternWordInQuotes",
    "patternRegex",
    "reg",
    "RegExp",
    "group1",
    "group2",
    "group3",
    "removeDoubleQuotes",
    "tmpFilter",
    "padZero",
    "s",
    "trim",
    "allTitleCase",
    "outputStr",
    "substr",
    "OdataService",
    "_odataOptions",
    "filterQueue",
    "_defaultSortBy",
    "queryTmpArray",
    "top",
    "skip",
    "argument",
    "filterStr",
    "filterBySeparator",
    "saveColumnFilter",
    "updateFilterFromListTerms",
    "getFilterByColumn",
    "columnName",
    "getFilterCount",
    "removeColumnFilter",
    "search",
    "filterOptionObject",
    "updateFilterFromTerm",
    "searchBy",
    "tmpSearchByArray",
    "fieldSearchTerms",
    "tmpSearchTerms",
    "j",
    "lnj",
    "lnk",
    "caseType",
    "CaseType",
    "pascalCase",
    "GridOdataService",
    "odataService",
    "mergedOptions",
    "terms",
    "_loop_2",
    "columnFilter_2",
    "this_2",
    "bypassOdataQuery",
    "bypassBackendQuery",
    "encodeURIComponent",
    "dateFormatted",
    "mapOdataOperator",
    "sortByArray",
    "sorterArray",
    "sortColumns_2",
    "sortColumns_2_1",
    "columnFieldName",
    "csvString",
    "GridEventService",
    "attachOnCellChange",
    "onCellChange",
    "cell",
    "getDataItem",
    "returnedArgs",
    "gridDefinition",
    "dataContext",
    "attachOnClick",
    "onClick",
    "onCellClick",
    "GridStateService",
    "_columns",
    "_currentColumns",
    "subscriptions",
    "onGridStateChanged",
    "controlAndPluginService",
    "subscribeToAllGridChanges",
    "subscription",
    "getCurrentGridState",
    "gridState",
    "getCurrentColumns",
    "currentPagination",
    "getAssociatedCurrentColumns",
    "gridColumns",
    "currentColumns",
    "headerCssClass",
    "getAssociatedGridColumns",
    "currentColumn",
    "c",
    "hookExtensionEventToGridStateChange",
    "extensionName",
    "eventName",
    "extension",
    "newValues",
    "GridStateType",
    "hookSlickGridEventToGridStateChange",
    "resetColumns",
    "GridService",
    "gridStateService",
    "getColumnFromEventArguments",
    "getDataItemByRowNumber",
    "getItemRowMetadata",
    "previousItemMetadata",
    "meta",
    "cssClasses",
    "isEmptyObject",
    "_dirty",
    "rowClass",
    "highlightRow",
    "fadeDelay",
    "setSelectedRows",
    "getItemMetadata",
    "updateItem",
    "gridId",
    "getSelectedRows",
    "setSelectedRow",
    "rowIndexes",
    "renderGrid",
    "resetGrid",
    "originalColumns",
    "addItemToDatagrid",
    "insertItem",
    "scrollRowIntoView",
    "deleteDataGridItem",
    "itemId",
    "deleteDataGridItemById",
    "getRowById",
    "deleteItem",
    "updateDataGridItem",
    "updateDataGridItemById",
    "GroupingAndColspanService",
    "createPreHeaderPanel",
    "createPreHeaderRowGroupingTitle",
    "onColumnsResized",
    "onRowCountChanged",
    "$preHeaderPanel",
    "getPreHeaderPanel",
    "css",
    "getHeadersWidth",
    "parent",
    "headerColumnWidthDiff",
    "getHeaderColumnWidthDiff",
    "lastColumnGroup",
    "widthTotal",
    "columnGroup",
    "html",
    "ResizerService",
    "onGridBeforeResize",
    "attachAutoResizeDataGrid",
    "newSizes",
    "gridDomElm",
    "resizeGrid",
    "window",
    "on",
    "_gridUid",
    "calculateGridNewDimensions",
    "containerElm",
    "containerId",
    "gridContainerId",
    "windowElm",
    "enablePagination",
    "gridHeight",
    "height",
    "coordOffsetTop",
    "availableHeight",
    "availableWidth",
    "newHeight",
    "newWidth",
    "getLastResizeDimensions",
    "_lastDimensions",
    "delay",
    "availableDimensions",
    "gridElm",
    "gridContainerElm",
    "heightWithPagination",
    "exec",
    "userAgent",
    "resizeCanvas",
    "AvgAggregator",
    "_field",
    "_count",
    "_nonNullCount",
    "_sum",
    "accumulate",
    "storeResult",
    "groupTotals",
    "avg",
    "MinAggregator",
    "_min",
    "min",
    "MaxAggregator",
    "_max",
    "max",
    "SumAggregator",
    "sum",
    "Aggregators",
    "Avg",
    "Min",
    "Max",
    "Sum",
    "CheckboxEditor",
    "$input",
    "focus",
    "loadValue",
    "defaultValue",
    "preClick",
    "serializeValue",
    "applyValue",
    "state",
    "isValueChanged",
    "validate",
    "validator",
    "validationResults",
    "valid",
    "msg",
    "DateEditor",
    "getCurrentLocale",
    "save",
    "commitChanges",
    "getColumnEditor",
    "internalColumnEditor",
    "domValue",
    "toDate",
    "FloatEditor",
    "getInputDecimalSteps",
    "keyCode",
    "KeyCode",
    "LEFT",
    "RIGHT",
    "stopImmediatePropagation",
    "getDecimalPlaces",
    "columnEditor",
    "rtn",
    "decimalPlaces",
    "decimals",
    "zeroString",
    "decPlaces",
    "toFixed",
    "elmValue",
    "errorMsg",
    "validatorErrorMessage",
    "IntegerEditor",
    "LongTextEditor",
    "$container",
    "$wrapper",
    "cancel",
    "handleKeyDown",
    "ENTER",
    "ESCAPE",
    "preventDefault",
    "TAB",
    "navigatePrev",
    "navigateNext",
    "cancelChanges",
    "left",
    "MultipleSelectEditor",
    "_translate",
    "offsetLeft",
    "onOpen",
    "autoAdjustDropPosition",
    "$editorElm",
    "editorElmOptions",
    "editorTemplate",
    "each",
    "$e",
    "currentValues",
    "multipleSelectDomElement",
    "multipleSelectOptions",
    "windowHeight",
    "innerHeight",
    "pageScroll",
    "scrollTop",
    "$msDrop",
    "msDropHeight",
    "msDropOffsetTop",
    "newOffsetTop",
    "elementOptions",
    "SingleSelectEditor",
    "TextEditor",
    "getValue",
    "setValue",
    "Editors",
    "checkbox",
    "integer",
    "longText",
    "arrayToCsvFormatter",
    "boldFormatter",
    "checkboxFormatter",
    "checkmarkFormatter",
    "collectionFormatter",
    "collectionEditorFormatter",
    "complexObjectFormatter",
    "dateIsoFormatter",
    "dateTimeIsoFormatter",
    "dateTimeIsoAmPmFormatter",
    "dateTimeUsAmPmFormatter",
    "dateTimeUsFormatter",
    "dateUsFormatter",
    "deleteIconFormatter",
    "dollarColoredBoldFormatter",
    "dollarColoredFormatter",
    "dollarFormatter",
    "editIconFormatter",
    "hyperlinkFormatter",
    "matchUrl",
    "hyperlinkUriPrefixFormatter",
    "uriPrefix",
    "infoIconFormatter",
    "lowercaseFormatter",
    "multipleFormatter",
    "formatters",
    "formatters_1",
    "formatters_1_1",
    "percentFormatter",
    "percentCompleteBarFormatter",
    "percentCompleteFormatter",
    "percentSymbolFormatter",
    "progressBarFormatter",
    "translateFormatter",
    "translateBooleanFormatter",
    "uppercaseFormatter",
    "yesNoFormatter",
    "Formatters",
    "arrayToCsv",
    "bold",
    "checkmark",
    "complexObject",
    "collectionEditor",
    "deleteIcon",
    "dollar",
    "dollarColored",
    "dollarColoredBold",
    "editIcon",
    "hyperlink",
    "hyperlinkUriPrefix",
    "infoIcon",
    "lowercase",
    "multiple",
    "percent",
    "percentComplete",
    "percentCompleteBar",
    "percentSymbol",
    "progressBar",
    "translateBoolean",
    "uppercase",
    "yesNo",
    "avgTotalsPercentageFormatter",
    "totals",
    "prefix",
    "groupFormatterPrefix",
    "suffix",
    "groupFormatterSuffix",
    "avgTotalsDollarFormatter",
    "avgTotalsFormatter",
    "minTotalsFormatter",
    "maxTotalsFormatter",
    "sumTotalsColoredFormatter",
    "sumTotalsDollarColoredBoldFormatter",
    "sumTotalsDollarColoredFormatter",
    "sumTotalsDollarBoldFormatter",
    "sumTotalsDollarFormatter",
    "sumTotalsFormatter",
    "sumTotalsBoldFormatter",
    "GroupTotalFormatters",
    "avgTotals",
    "avgTotalsDollar",
    "avgTotalsPercentage",
    "maxTotals",
    "minTotals",
    "sumTotals",
    "sumTotalsBold",
    "sumTotalsColored",
    "sumTotalsDollar",
    "sumTotalsDollarBold",
    "sumTotalsDollarColored",
    "sumTotalsDollarColoredBold",
    "SlickPaginationComponent",
    "_isFirstRender",
    "onPaginationChanged",
    "EventEmitter",
    "dataFrom",
    "dataTo",
    "pageCount",
    "paginationPageSizes",
    "fromToParams",
    "from",
    "to",
    "_gridPaginationOptions",
    "gridPaginationOptions",
    "refreshPagination",
    "ngOnDestroy",
    "ngAfterViewInit",
    "_filterSubcription",
    "ceil",
    "changeToFirstPage",
    "onPageChanged",
    "changeToLastPage",
    "changeToNextPage",
    "changeToPreviousPage",
    "changeToCurrentPage",
    "currentTarget",
    "onChangeItemPerPage",
    "itemsPerPage",
    "isPageNumberReset",
    "recalculateFromToIndexes",
    "emit",
    "Component",
    "selector",
    "template",
    "Output",
    "Input",
    "AngularSlickgridComponent",
    "gridService",
    "gridEventService",
    "groupingAndColspanService",
    "resizer",
    "forRootConfig",
    "groupingDefinition",
    "showPagination",
    "isGridInitialized",
    "onAngularGridCreated",
    "onDataviewCreated",
    "onGridCreated",
    "onGridInitialized",
    "onBeforeGridCreate",
    "onBeforeGridDestroy",
    "onAfterGridDestroyed",
    "gridWidth",
    "updateColumnDefinitionsList",
    "getItems",
    "dataset",
    "_dataset",
    "refreshGridData",
    "ngOnInit",
    "gridHeightString",
    "gridWidthString",
    "initialization",
    "mergeGridOptions",
    "createBackendApiInternalPostProcessCallback",
    "Data",
    "GroupItemMetadataProvider",
    "DataView",
    "inlineFilters",
    "Grid",
    "attachDifferentHooks",
    "beginUpdate",
    "setItems",
    "endUpdate",
    "executeAfterDataviewCreated",
    "attachResizeHook",
    "attachBackendCallbackFunctions",
    "slickGrid",
    "groupingService",
    "pluginService",
    "resizerService",
    "backendApi_1",
    "nodes",
    "totalCount",
    "onLangChange",
    "checkboxColumn",
    "_loop_3",
    "this_3",
    "dispatchCustomEvent",
    "eventData",
    "_loop_4",
    "this_4",
    "gridStateChange",
    "updateRowCount",
    "onRowsChanged",
    "invalidateRows",
    "rows",
    "colspanCallback",
    "isExecuteCommandOnInit",
    "onInit",
    "observableOrPromise_1",
    "tslib_1.__awaiter",
    "paginationChanged",
    "reSort",
    "isShowing",
    "toggleHeaderRow",
    "isBubbling",
    "eventInit",
    "bubbles",
    "detail",
    "customElm",
    "nativeElement",
    "dispatchEvent",
    "providers",
    "decorators",
    "ViewChild",
    "read",
    "ElementRef",
    "AngularSlickgridModule",
    "forRoot",
    "ngModule",
    "useValue",
    "NgModule",
    "imports",
    "CommonModule",
    "TranslateModule",
    "declarations",
    "exports",
    "entryComponents",
    "buf",
    "charCodeAt"
  ],
  "mappings": "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"
}
