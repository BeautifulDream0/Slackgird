{
  "version": 3,
  "file": "angular-slickgrid.umd.min.js",
  "sources": [
    "ng://angular-slickgrid/node_modules/tslib/tslib.es6.js",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/delimiterType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/fileType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/gridStateType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/operatorType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/sortDirection.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/compareDateUtility.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsShortSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateIsoSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/numericSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/stringSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/sorterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/collection.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/booleanFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/filterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateIsoFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsShortFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUtcFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/collectionSearchFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/numberFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/stringFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/executeMappedCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundDateFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundInputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundSliderFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/inputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/multipleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/selectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/singleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/sliderFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/global-grid-options.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/slickgrid-config.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/filterFactory.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/filter.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/export.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/sort.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/constants.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/controlAndPlugin.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphqlQueryBuilder.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphql.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/global-utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid-odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridEvent.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridState.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/groupingAndColspan.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/resizer.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/avgAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/minAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/maxAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/sumAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/checkboxEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/dateEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/floatEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/integerEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/longTextEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/multipleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/singleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/sliderEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/textEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/arrayToCsvFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/boldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkboxFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkmarkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionEditorFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/complexObjectFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/decimalFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/deleteIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/editIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkUriPrefixFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/infoIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/lowercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/maskFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/multipleFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentSymbolFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/progressBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateBooleanFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/uppercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/yesNoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsPercentageFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/minTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/maxTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/slick-pagination.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/angular-slickgrid.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/modules/angular-slickgrid.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n",
    "export enum DelimiterType {\r\n  colon = ':',\r\n  comma = ',',\r\n  equalSign = '=',\r\n  pipe = '|',\r\n  semicolon = ';',\r\n  space = ' ',\r\n  tab = '\\t',\r\n\r\n  doubleColon = '::',\r\n  doublePipe = '||',\r\n  doubleSemicolon = ';;',\r\n}\r\n\r\n",
    "export enum FileType {\r\n  csv = 'csv',\r\n  doc = 'doc',\r\n  docx = 'docx',\r\n  pdf = 'pdf',\r\n  txt = 'txt',\r\n  xls = 'xls',\r\n  xlsx = 'xlsx'\r\n}\r\n",
    "export enum GridStateType {\r\n  columns = 'columns',\r\n  filter = 'filter',\r\n  pagination = 'pagination',\r\n  sorter = 'sorter'\r\n}\r\n",
    "export enum OperatorType {\n  /** value is empty */\n  empty = '',\n\n  /** value contains x */\n  contains = 'Contains',\n\n  /** value less than x */\n  lessThan = 'LT',\n\n  /** value less than or equal to x */\n  lessThanOrEqual = 'LE',\n\n  /** value greater than x */\n  greaterThan = 'GT',\n\n  /** value great than or equal to x */\n  greaterThanOrEqual = 'GE',\n\n  /** value not equal to x */\n  notEqual = 'NE',\n\n  /** value equal to x */\n  equal = 'EQ',\n\n  /** String ends with value */\n  endsWith = 'EndsWith',\n\n  /** String starts with value */\n  startsWith = 'StartsWith',\n\n  /** Find an equal match inside a collection */\n  in = 'IN',\n\n  /** Inverse (Not In) of an equal match inside a collection */\n  notIn = 'NOT_IN',\n\n  /**\n   * Find a substring contained inside a collection\n   * For example, this condition would return True with \"IN_CONTAINS\":: value='Task2,Task3', collection=['Task2','Task3']\n   * This would have returned False with \"IN\" because 'Task2' does not equal 'Task2,Task3'. However 'Task2' is contained in 'Task2,Task3'\n   */\n  inContains = 'IN_CONTAINS',\n\n  /** Inversed (Not In) of substring contained inside a collection */\n  notInContains = 'NOT_IN_CONTAINS',\n}\n",
    "export enum SortDirection {\r\n  asc = 'asc',\r\n  ASC = 'ASC',\r\n  desc = 'desc',\r\n  DESC = 'DESC'\r\n}\r\n",
    "import { FieldType, OperatorType } from '../models/index';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/first';\r\nimport 'rxjs/add/operator/take';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\n/** Simple function to which will loop and create as demanded the number of white spaces,\r\n * this will be used in the Excel export\r\n * @param int nbSpaces: number of white spaces to create\r\n */\r\nexport function addWhiteSpaces(nbSpaces): string {\r\n  let result = '';\r\n\r\n  for (let i = 0; i < nbSpaces; i++) {\r\n    result += ' ';\r\n  }\r\n  return result;\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityDecode(input: string): string {\r\n  return input.replace(/&#(\\d+);/g, function (match, dec) {\r\n    return String.fromCharCode(dec);\r\n  });\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityEncode(input: any): string {\r\n  const buf = [];\r\n  for (let i = input.length - 1; i >= 0; i--) {\r\n    buf.unshift(['&#', input[i].charCodeAt(), ';'].join(''));\r\n  }\r\n  return buf.join('');\r\n}\r\n\r\n/**\r\n * Compares two arrays to determine if all the items are equal\r\n * @param a first array\r\n * @param b second array to compare with a\r\n * @param [orderMatters=false] flag if the order matters, if not arrays will be sorted\r\n * @return boolean true if equal, else false\r\n */\r\nexport function arraysEqual(a: any[], b: any[], orderMatters: boolean = false): boolean {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n\r\n  if (a === null || b === null) {\r\n    return false;\r\n  }\r\n\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n\r\n  if (!orderMatters) {\r\n    a.sort();\r\n    b.sort();\r\n  }\r\n\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Try casting an input of type Promise | Observable into a Promise type.\r\n * @param object which could be of type Promise or Observable\r\n * @param fromServiceName string representing the caller service name and will be used if we throw a casting problem error\r\n */\r\nexport function castToPromise<T>(input: Promise<T> | Observable<T>, fromServiceName: string = ''): Promise<T> {\r\n  let promise: any = input;\r\n\r\n  if (input instanceof Promise) {\r\n    // if it's already a Promise then return it\r\n    return input;\r\n  } else if (input instanceof Observable) {\r\n    promise = input.first().toPromise();\r\n    if (!(promise instanceof Promise)) {\r\n      promise = input.take(1).toPromise();\r\n    }\r\n    if (!(promise instanceof Promise)) {\r\n      throw new Error(\r\n        `Something went wrong, Angular-Slickgrid ${fromServiceName} is not able to convert the Observable into a Promise.\r\n        If you are using Angular HttpClient, you could try converting your http call to a Promise with \".toPromise()\"\r\n        for example::  this.http.post('graphql', { query: graphqlQuery }).toPromise()\r\n        `);\r\n    }\r\n  }\r\n\r\n  return promise;\r\n}\r\n\r\n/**\r\n * Uses the logic function to find an item in an array or returns the default\r\n * value provided (empty object by default)\r\n * @param any[] array the array to filter\r\n * @param function logic the logic to find the item\r\n * @param any [defaultVal={}] the default value to return\r\n * @return object the found object or deafult value\r\n */\r\nexport function findOrDefault(array: any[], logic: (item: any) => boolean, defaultVal = {}): any {\r\n  return array.find(logic) || defaultVal;\r\n}\r\n\r\n/**\r\n  * Take a number (or a string) and display it as a formatted decimal string with defined minimum and maximum decimals\r\n  * @param input\r\n  * @param minDecimal\r\n  * @param maxDecimal\r\n  */\r\nexport function decimalFormatted(input: number | string, minDecimal?: number, maxDecimal?: number) {\r\n  if (isNaN(+input)) {\r\n    return input;\r\n  }\r\n\r\n  const minDec = (minDecimal === undefined) ? 2 : minDecimal;\r\n  const maxDec = (maxDecimal === undefined) ? 2 : maxDecimal;\r\n  let amount = String(Math.round(+input * Math.pow(10, maxDec)) / Math.pow(10, maxDec));\r\n\r\n  if (amount.indexOf('.') < 0) {\r\n    amount += '.';\r\n  }\r\n  while ((amount.length - amount.indexOf('.')) <= minDec) {\r\n    amount += '0';\r\n  }\r\n  return amount;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent moment.js format\r\n * refer to moment.js for the format standard used: https://momentjs.com/docs/#/parsing/string-format/\r\n * @param fieldType\r\n */\r\nexport function mapMomentDateFormatWithFieldType(fieldType: FieldType): string {\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'YYYY-MM-DD HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'YYYY-MM-DD hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'YYYY-MM-DD hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'MM/DD/YYYY';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'M/D/YY';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'MM/DD/YYYY HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'MM/DD/YYYY hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'MM/DD/YYYY hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'M/D/YY H:m:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'M/D/YY h:m:s a';\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'YYYY-MM-DD';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent Flatpickr format\r\n * refer to Flatpickr for the format standard used: https://chmln.github.io/flatpickr/formatting/#date-formatting-tokens\r\n * also note that they seem very similar to PHP format (except for am/pm): http://php.net/manual/en/function.date.php\r\n * @param fieldType\r\n */\r\nexport function mapFlatpickrDateFormatWithFieldType(fieldType: FieldType): string {\r\n  /*\r\n    d: Day of the month, 2 digits with leading zeros\t01 to 31\r\n    D: A textual representation of a day\tMon through Sun\r\n    l: (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday\r\n    j: Day of the month without leading zeros\t1 to 31\r\n    J: Day of the month without leading zeros and ordinal suffix\t1st, 2nd, to 31st\r\n    w: Numeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday)\r\n    F: A full textual representation of a month\tJanuary through December\r\n    m: Numeric representation of a month, with leading zero\t01 through 12\r\n    n: Numeric representation of a month, without leading zeros\t1 through 12\r\n    M: A short textual representation of a month\tJan through Dec\r\n    U: The number of seconds since the Unix Epoch\t1413704993\r\n    y: A two digit representation of a year\t99 or 03\r\n    Y: A full numeric representation of a year, 4 digits\t1999 or 2003\r\n    H: Hours (24 hours)\t00 to 23\r\n    h: Hours\t1 to 12\r\n    i: Minutes\t00 to 59\r\n    S: Seconds, 2 digits\t00 to 59\r\n    s: Seconds\t0, 1 to 59\r\n    K: AM/PM\tAM or PM\r\n  */\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'Y-m-d H:i:S';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'Y-m-d h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'Y-m-d h:i:S K';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'm/d/Y';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'm/d/y';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'm/d/Y H:i:S';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'm/d/Y h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'm/d/Y h:i:s K';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'm/d/y H:i:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'm/d/y h:i:s K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'Z';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'Y-m-d';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operators (ex.: <= is \"le\", > is \"gt\")\r\n * @param string operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorType(operator: string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (operator) {\r\n    case '<':\r\n      map = OperatorType.lessThan;\r\n      break;\r\n    case '<=':\r\n      map = OperatorType.lessThanOrEqual;\r\n      break;\r\n    case '>':\r\n      map = OperatorType.greaterThan;\r\n      break;\r\n    case '>=':\r\n      map = OperatorType.greaterThanOrEqual;\r\n      break;\r\n    case '<>':\r\n    case '!=':\r\n    case 'neq':\r\n    case 'NEQ':\r\n      map = OperatorType.notEqual;\r\n      break;\r\n    case '*':\r\n    case '.*':\r\n    case 'startsWith':\r\n      map = OperatorType.startsWith;\r\n      break;\r\n    case '*.':\r\n    case 'endsWith':\r\n      map = OperatorType.endsWith;\r\n      break;\r\n    case '=':\r\n    case '==':\r\n    case 'eq':\r\n    case 'EQ':\r\n      map = OperatorType.equal;\r\n      break;\r\n    case 'in':\r\n    case 'IN':\r\n      map = OperatorType.in;\r\n      break;\r\n    case 'notIn':\r\n    case 'NIN':\r\n    case 'NOT_IN':\r\n      map = OperatorType.notIn;\r\n      break;\r\n    default:\r\n      map = OperatorType.contains;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operator by a Filter Type\r\n * For example a multiple-select typically uses 'IN' operator\r\n * @param operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorByFieldType(fieldType: FieldType | string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.string:\r\n    case FieldType.unknown:\r\n      map = OperatorType.contains;\r\n      break;\r\n    case FieldType.float:\r\n    case FieldType.number:\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    case FieldType.date:\r\n    case FieldType.dateUtc:\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n    case FieldType.dateTimeIsoAmPm:\r\n    case FieldType.dateTimeIsoAM_PM:\r\n    case FieldType.dateUs:\r\n    case FieldType.dateUsShort:\r\n    case FieldType.dateTimeUs:\r\n    case FieldType.dateTimeUsAmPm:\r\n    case FieldType.dateTimeUsAM_PM:\r\n    case FieldType.dateTimeUsShort:\r\n    case FieldType.dateTimeUsShortAmPm:\r\n    case FieldType.dateTimeUsShortAM_PM:\r\n    default:\r\n      map = OperatorType.equal;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Parse a date passed as a string and return a Date object (if valid)\r\n * @param inputDateString\r\n * @returns string date formatted\r\n */\r\nexport function parseUtcDate(inputDateString: string, useUtc: boolean): string | null {\r\n  let date = null;\r\n\r\n  if (/^[0-9\\-\\/]*$/.test(inputDateString)) {\r\n    // get the UTC datetime with moment.js but we need to decode the value so that it's valid text\r\n    const dateString = decodeURIComponent(inputDateString);\r\n    const dateMoment = moment(new Date(dateString));\r\n    if (dateMoment.isValid() && dateMoment.year().toString().length === 4) {\r\n      date = (useUtc) ? dateMoment.utc().format() : dateMoment.format();\r\n    }\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\n/**\r\n * Sanitize, return only the text without HTML tags\r\n * @input htmlString\r\n * @return text\r\n */\r\nexport function sanitizeHtmlToText(htmlString: string) {\r\n  const temp = document.createElement('div');\r\n  temp.innerHTML = htmlString;\r\n  return temp.textContent || temp.innerText;\r\n}\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string\r\n * @returns string\r\n */\r\nexport function titleCase(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Converts a string to camel case\r\n * @param str the string to convert\r\n * @return the string in camel case\r\n */\r\nexport function toCamelCase(str: string): string {\r\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w|[\\s+\\-_\\/])/g, (match: string, offset: number) => {\r\n    // remove white space or hypens or underscores\r\n    if (/[\\s+\\-_\\/]/.test(match)) {\r\n      return '';\r\n    }\r\n\r\n    return offset === 0 ? match.toLowerCase() : match.toUpperCase();\r\n  });\r\n}\r\n\r\n/**\r\n * Converts a string to kebab (hypen) case\r\n * @param str the string to convert\r\n * @return the string in kebab case\r\n */\r\nexport function toKebabCase(str: string): string {\r\n  return toCamelCase(str).replace(/([A-Z])/g, '-$1').toLowerCase();\r\n}\r\n",
    "import * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport function compareDates(value1, value2, format, sortDirection, strict?: boolean) {\r\n  let diff = 0;\r\n\r\n  if (value1 === null || value1 === '' || !moment(value1, format, strict).isValid()) {\r\n    diff = -1;\r\n  } else if (value2 === null || value2 === '' || !moment(value2, format, strict).isValid()) {\r\n    diff = 1;\r\n  } else {\r\n    const date1 = moment(value1, format, strict);\r\n    const date2 = moment(value2, format, strict);\r\n    diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);\r\n  }\r\n\r\n  return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));\r\n}\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nimport { compareDates } from './compareDateUtility';\r\n\r\nexport const dateSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, moment.ISO_8601, sortDirection);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const numericSorter: Sorter = (value1, value2, sortDirection) => {\r\n  const x = (isNaN(value1) || value1 === '' || value1 === null) ? -99e+10 : parseFloat(value1);\r\n  const y = (isNaN(value2) || value2 === '' || value2 === null) ? -99e+10 : parseFloat(value2);\r\n  return sortDirection * (x === y ? 0 : (x > y ? 1 : -1));\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const stringSorter: Sorter = (value1, value2, sortDirection) => {\r\n  let position;\r\n  if (value1 === null) {\r\n    position = -1;\r\n  } else if (value2 === null) {\r\n    position = 1;\r\n  } else if (value1 === value2) {\r\n    position = 0;\r\n  } else if (sortDirection) {\r\n    position = value1 < value2 ? -1 : 1;\r\n  } else if (!sortDirection) {\r\n    position = value1 < value2 ? 1 : -1;\r\n  }\r\n  return sortDirection * position;\r\n};\r\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\nimport { dateUsShortSorter } from './dateUsShortSorter';\nimport { dateSorter } from './dateSorter';\nimport { dateIsoSorter } from './dateIsoSorter';\nimport { dateUsSorter } from './dateUsSorter';\nimport { numericSorter } from './numericSorter';\nimport { stringSorter } from './stringSorter';\n\nexport const Sorters = {\n  date: dateSorter,\n  dateIso: dateIsoSorter,\n  dateUs: dateUsSorter,\n  dateUsShort: dateUsShortSorter,\n  numeric: numericSorter,\n  string: stringSorter\n};\n",
    "import { FieldType } from './../models/index';\r\nimport { Sorters } from './index';\r\n\r\nexport function sortByFieldType(value1: any, value2: any, fieldType: FieldType, sortDirection: number) {\r\n  let sortResult = 0;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.number:\r\n      sortResult = Sorters.numeric(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.date:\r\n      sortResult = Sorters.date(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateIso:\r\n      sortResult = Sorters.dateIso(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUs:\r\n      sortResult = Sorters.dateUs(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      sortResult = Sorters.dateUsShort(value1, value2, sortDirection);\r\n      break;\r\n    default:\r\n      sortResult = Sorters.string(value1, value2, sortDirection);\r\n      break;\r\n  }\r\n\r\n  return sortResult;\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  CollectionFilterBy,\r\n  CollectionSortBy,\r\n  FieldType,\r\n  OperatorType,\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\n\r\n@Injectable()\r\nexport class CollectionService {\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /**\r\n   * Filter items from a collection\r\n   * @param collection\r\n   * @param filterBy\r\n   */\r\n  filterCollection(collection: any[], filterBy: CollectionFilterBy): any[] {\r\n    let filteredCollection: any[] = [];\r\n\r\n    if (filterBy) {\r\n      const property = filterBy.property || '';\r\n      const operator = filterBy.operator || OperatorType.equal;\r\n      // just check for undefined since the filter value could be null, 0, '', false etc\r\n      const value = typeof filterBy.value === 'undefined' ? '' : filterBy.value;\r\n\r\n      switch (operator) {\r\n        case OperatorType.equal:\r\n          filteredCollection = collection.filter((item) => item[property] === value);\r\n          break;\r\n        case OperatorType.in:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) !== -1);\r\n          break;\r\n        case OperatorType.notIn:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) === -1);\r\n          break;\r\n        case OperatorType.contains:\r\n          filteredCollection = collection.filter((item) => value.indexOf(item[property]) !== -1);\r\n          break;\r\n        default:\r\n          filteredCollection = collection.filter((item) => item[property] !== value);\r\n      }\r\n    }\r\n\r\n    return filteredCollection;\r\n  }\r\n\r\n  /**\r\n   * Sort items in a collection\r\n   * @param collection\r\n   * @param sortBy\r\n   * @param enableTranslateLabel\r\n   */\r\n  sortCollection(collection: any[], sortBy: CollectionSortBy, enableTranslateLabel?: boolean): any[] {\r\n    let sortedCollection: any[] = [];\r\n\r\n    if (sortBy) {\r\n      const property = sortBy.property || '';\r\n      const sortDirection = sortBy.hasOwnProperty('sortDesc') ? (sortBy.sortDesc ? -1 : 1) : 1;\r\n      const fieldType = sortBy.fieldType || FieldType.string;\r\n\r\n      sortedCollection = collection.sort((dataRow1: any, dataRow2: any) => {\r\n        const value1 = (enableTranslateLabel) ? this.translate.instant(dataRow1[property] || ' ') : dataRow1[property];\r\n        const value2 = (enableTranslateLabel) ? this.translate.instant(dataRow2[property] || ' ') : dataRow2[property];\r\n        const result = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n        return result;\r\n      });\r\n    }\r\n\r\n    return sortedCollection;\r\n  }\r\n}\r\n",
    "import { FilterCondition, FilterConditionOption } from './../models/index';\r\n\r\nfunction parseBoolean(str: number | string) {\r\n  return /(true|1)/i.test(str + '');\r\n}\r\n\r\nexport const booleanFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  return parseBoolean(options.cellValue) === parseBoolean(searchTerm);\r\n};\r\n",
    "export const testFilterCondition = (operator: string, value1: any, value2: any): boolean => {\n  switch (operator) {\n    case '<':\n    case 'LT': return (value1 < value2);\n    case '<=':\n    case 'LE': return (value1 <= value2);\n    case '>':\n    case 'GT': return (value1 > value2);\n    case '>=':\n    case 'GE': return (value1 >= value2);\n    case '!=':\n    case '<>':\n    case 'NE': return (value1 !== value2);\n    case '=':\n    case '==':\n    case 'EQ': return (value1 === value2);\n    case 'IN': return ((value2 && value2.includes) ? (value2.includes(value1)) : false);\n    case 'NIN':\n    case 'NOT_IN':\n      return ((value2 && value2.includes) ? (!value2.includes(value1)) : false);\n    case 'IN_CONTAINS':\n      if (value2 && Array.isArray(value2) && value2.findIndex) {\n        return ((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);\n      }\n      return false;\n    case 'NIN_CONTAINS':\n    case 'NOT_IN_CONTAINS':\n    if (value2 && Array.isArray(value2) && value2.findIndex) {\n      return !((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);\n    }\n    return false;\n}\nreturn true;\n};\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  const filterSearchType = options.filterSearchType || FieldType.dateIso;\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(filterSearchType);\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerm, searchDateFormat, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue);\r\n  const dateSearch = moment(searchTerm);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateUtcFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerms = Array.isArray(options.searchTerms) && options.searchTerms[0] || [];\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(options.filterSearchType || options.fieldType);\r\n  if (!moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerms[0], searchDateFormat, true).isValid()) {\r\n    return true;\r\n  }\r\n  const dateCell = moment(options.cellValue, moment.ISO_8601, true);\r\n  const dateSearch = moment(searchTerms[0], searchDateFormat, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const collectionSearchFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // multiple-select will always return text, so we should make our cell values text as well\r\n  const cellValue = options.cellValue + '';\r\n\r\n  return testFilterCondition(options.operator || 'IN', cellValue, options.searchTerms || []);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const numberFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const cellValue = parseFloat(options.cellValue);\r\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || 0;\r\n  if (typeof searchTerm === 'string') {\r\n    searchTerm = parseFloat(searchTerm);\r\n  }\r\n\r\n  if (!searchTerm && (!options.operator || options.operator === '')) {\r\n    return true;\r\n  }\r\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption, OperatorType } from '../models/index';\nimport { testFilterCondition } from './filterUtilities';\n\nexport const stringFilterCondition: FilterCondition = (options: FilterConditionOption) => {\n  // make sure the cell value is a string by casting it when possible\n  options.cellValue = (options.cellValue === undefined || options.cellValue === null) ? '' : options.cellValue.toString();\n\n  // make both the cell value and search value lower for case insensitive comparison\n  const cellValue = options.cellValue.toLowerCase();\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || '';\n  if (typeof searchTerm === 'string') {\n    searchTerm = searchTerm.toLowerCase();\n  }\n\n  if (options.operator === '*' || options.operator === OperatorType.endsWith) {\n    return cellValue.endsWith(searchTerm);\n  } else if ((options.operator === '' && options.cellValueLastChar === '*') || options.operator === OperatorType.startsWith) {\n    return cellValue.startsWith(searchTerm);\n  } else if (options.operator === '') {\n    return cellValue.includes(searchTerm);\n  }\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\n};\n",
    "import { booleanFilterCondition } from './booleanFilterCondition';\nimport { dateFilterCondition } from './dateFilterCondition';\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\nimport { FilterConditionOption } from './../models/filterConditionOption.interface';\nimport { FilterCondition } from '../models/filterCondition.interface';\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\nimport { numberFilterCondition } from './numberFilterCondition';\nimport { stringFilterCondition } from './stringFilterCondition';\nimport { FieldType } from '../models/index';\n\nexport const executeMappedCondition: FilterCondition = (options: FilterConditionOption) => {\n  // when using a multi-select ('IN' operator) we will not use the field type but instead go directly with a collection search\n  const operator = options.operator && options.operator.toUpperCase();\n  if (options && options.operator && (operator === 'IN' || operator === 'NIN' || operator === 'IN_CONTAINS' || operator === 'NIN_CONTAINS')) {\n    return collectionSearchFilterCondition(options);\n  }\n\n  // execute the mapped type, or default to String condition check\n  switch (options.fieldType) {\n    case FieldType.boolean:\n      return booleanFilterCondition(options);\n    case FieldType.date:\n      return dateFilterCondition(options);\n    case FieldType.dateUtc:\n      return dateUtcFilterCondition(options);\n    case FieldType.dateIso:\n      return dateIsoFilterCondition(options);\n    case FieldType.dateUs:\n    case FieldType.dateTimeUs:\n      return dateUsFilterCondition(options);\n    case FieldType.dateUsShort:\n    case FieldType.dateTimeUsShort:\n      return dateUsShortFilterCondition(options);\n    case FieldType.number:\n      return numberFilterCondition(options);\n    case FieldType.string:\n    default:\n      return stringFilterCondition(options);\n  }\n};\n",
    "import { FilterConditionOption } from './../models/filterConditionOption.interface';\r\nimport { booleanFilterCondition } from './booleanFilterCondition';\r\nimport { dateFilterCondition } from './dateFilterCondition';\r\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\r\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\r\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\r\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\r\nimport { executeMappedCondition } from './executeMappedCondition';\r\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { numberFilterCondition } from './numberFilterCondition';\r\nimport { stringFilterCondition } from './stringFilterCondition';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const FilterConditions = {\r\n  executeMappedCondition,\r\n  booleanFilter: booleanFilterCondition,\r\n  collectionSearchFilter: collectionSearchFilterCondition,\r\n  dateFilter: dateFilterCondition,\r\n  dateIsoFilter: dateIsoFilterCondition,\r\n  dateUtcFilter: dateUtcFilterCondition,\r\n  dateUsFilter: dateUsFilterCondition,\r\n  dateUsShortFilter: dateUsShortFilterCondition,\r\n  numberFilter: numberFilterCondition,\r\n  stringFilter: stringFilterCondition,\r\n  testFilter: testFilterCondition\r\n};\r\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { mapFlatpickrDateFormatWithFieldType } from '../services/utilities';\nimport { Column, Filter, FilterArguments, FilterCallback, FieldType, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\n\n// importing Flatpickr works better with a 'require'\ndeclare function require(name: string);\nrequire('flatpickr');\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n@Injectable()\nexport class CompoundDateFilter implements Filter {\n  private _clearFilterTriggered = false;\n  private $filterElm: any;\n  private $filterInputElm: any;\n  private $selectOperatorElm: any;\n  private _currentValue: string;\n  private _operator: OperatorType | OperatorString;\n  flatInstance: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor(private translate: TranslateService) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  set operator(op: OperatorType | OperatorString) {\n    this._operator = op;\n  }\n  get operator(): OperatorType | OperatorString {\n    return this._operator || OperatorType.empty;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    if (args) {\n      this.grid = args.grid;\n      this.callback = args.callback;\n      this.columnDef = args.columnDef;\n      this.operator = args.operator || '';\n      this.searchTerms = args.searchTerms || [];\n\n      // date input can only have 1 search term, so we will use the 1st array index if it exist\n      const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n      // step 1, create the DOM Element of the filter which contain the compound Operator+Input\n      // and initialize it if searchTerm is filled\n      this.$filterElm = this.createDomElement(searchTerm);\n\n      // step 3, subscribe to the keyup event and run the callback when that happens\n      // also add/remove \"filled\" class for styling purposes\n      this.$filterInputElm.keyup((e: any) => {\n        this.onTriggerEvent(e);\n      });\n      this.$selectOperatorElm.change((e: any) => {\n        this.onTriggerEvent(e);\n      });\n    }\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.flatInstance && this.$selectOperatorElm) {\n      this._clearFilterTriggered = true;\n      this.$selectOperatorElm.val(0);\n      this.flatInstance.clear();\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('keyup').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values && Array.isArray(values)) {\n      this.flatInstance.setDate(values[0]);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n  private buildDatePickerInput(searchTerm?: SearchTerm) {\n    const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\n    const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnDef.type || FieldType.dateUtc);\n    let currentLocale = this.translate.currentLang || 'en';\n    if (currentLocale.length > 2) {\n      currentLocale = currentLocale.substring(0, 2);\n    }\n\n    const pickerOptions: any = {\n      defaultDate: searchTerm || '',\n      altInput: true,\n      altFormat: outputFormat,\n      dateFormat: inputFormat,\n      wrap: true,\n      closeOnSelect: true,\n      locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\n      onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\n        this._currentValue = dateStr;\n\n        // when using the time picker, we can simulate a keyup event to avoid multiple backend request\n        // since backend request are only executed after user start typing, changing the time should be treated the same way\n        if (pickerOptions.enableTime) {\n          this.onTriggerEvent(new CustomEvent('keyup'));\n        } else {\n          this.onTriggerEvent(undefined);\n        }\n      }\n    };\n\n    // add the time picker when format is UTC (Z) or has the 'h' (meaning hours)\n    if (outputFormat && (outputFormat === 'Z' || outputFormat.toLowerCase().includes('h'))) {\n      pickerOptions.enableTime = true;\n    }\n\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\n    const $filterInputElm: any = $(`<div class=\"flatpickr\"><input type=\"text\" class=\"form-control\" data-input placeholder=\"${placeholder}\"></div>`);\n    this.flatInstance = ($filterInputElm[0] && typeof $filterInputElm[0].flatpickr === 'function') ? $filterInputElm[0].flatpickr(pickerOptions) : null;\n    return $filterInputElm;\n  }\n\n  private buildSelectOperatorHtmlString() {\n    const optionValues = this.getOptionValues();\n    let optionValueString = '';\n    optionValues.forEach((option) => {\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\n    });\n\n    return `<select class=\"form-control\">${optionValueString}</select>`;\n  }\n\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\n    return [\n      { operator: '' as OperatorString, description: '' },\n      { operator: '=' as OperatorString, description: '' },\n      { operator: '<' as OperatorString, description: '' },\n      { operator: '<=' as OperatorString, description: '' },\n      { operator: '>' as OperatorString, description: '' },\n      { operator: '>=' as OperatorString, description: '' },\n      { operator: '<>' as OperatorString, description: '' }\n    ];\n  }\n\n  /**\n   * Create the DOM element\n   */\n  private createDomElement(searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM Select dropdown for the Operator\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\n    this.$filterInputElm = this.buildDatePickerInput(searchTerm);\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\n    const $containerInputGroup = $(`<div class=\"input-group flatpickr\"></div>`);\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon input-group-prepend operator\"></div>`);\n\n    /* the DOM element final structure will be\n      <div class=\"input-group\">\n        <div class=\"input-group-addon input-group-prepend operator\">\n          <select class=\"form-control\"></select>\n        </div>\n        <div class=flatpickr>\n          <input type=\"text\" class=\"form-control\" data-input>\n        </div>\n      </div>\n    */\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\n    $containerInputGroup.append($operatorInputGroupAddon);\n    $containerInputGroup.append(this.$filterInputElm);\n\n    // create the DOM element & add an ID and filter class\n    $filterContainerElm.append($containerInputGroup);\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterInputElm.data('columnId', this.columnDef.id);\n\n    if (this.operator) {\n      this.$selectOperatorElm.val(this.operator);\n    }\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterContainerElm.addClass('filled');\n      this._currentValue = searchTerm as string;\n    }\n\n    // append the new DOM element to the header row\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\n      $filterContainerElm.appendTo($headerElm);\n    }\n\n    return $filterContainerElm;\n  }\n\n  private loadFlatpickrLocale(locale: string) {\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\n    if (locale !== 'en') {\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\n    }\n    return 'en';\n  }\n\n  private onTriggerEvent(e: Event | undefined) {\n    if (this._clearFilterTriggered) {\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\n      this._clearFilterTriggered = false; // reset flag for next use\n    } else {\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\n      (this._currentValue) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (this._currentValue ? [this._currentValue] : null), operator: selectedOperator || '' });\n    }\n  }\n\n  private hide() {\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\n      this.flatInstance.close();\n    }\n  }\n\n  private show() {\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\n      this.flatInstance.open();\n    }\n  }\n}\n",
    "import { Inject } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FieldType } from './../models/index';\nimport { Column, Filter, FilterArguments, FilterCallback, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n@Inject(TranslateService)\nexport class CompoundInputFilter implements Filter {\n  private _clearFilterTriggered = false;\n  private $filterElm: any;\n  private $filterInputElm: any;\n  private $selectOperatorElm: any;\n  private _operator: OperatorType | OperatorString;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor(private translate: TranslateService) {}\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  set operator(op: OperatorType | OperatorString) {\n    this._operator = op;\n  }\n  get operator(): OperatorType | OperatorString {\n    return this._operator || OperatorType.empty;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.operator = args.operator;\n    this.searchTerms = args.searchTerms || [];\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\n    // and initialize it if searchTerms is filled\n    this.$filterElm = this.createDomElement(searchTerm);\n\n    // step 3, subscribe to the keyup event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterInputElm.keyup((e: any) => {\n      this.onTriggerEvent(e);\n    });\n    this.$selectOperatorElm.change((e: any) => {\n      this.onTriggerEvent(e);\n    });\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm && this.$selectOperatorElm) {\n      this._clearFilterTriggered = true;\n      this.$selectOperatorElm.val(0);\n      this.$filterInputElm.val('');\n      this.onTriggerEvent(null);\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('keyup').remove();\n      this.$selectOperatorElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values && Array.isArray(values)) {\n      this.$filterElm.val(values[0]);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  private buildInputHtmlString() {\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\n    return `<input class=\"form-control\" type=\"text\" placeholder=\"${placeholder}\" />`;\n  }\n\n  private buildSelectOperatorHtmlString() {\n    const optionValues = this.getOptionValues();\n    let optionValueString = '';\n    optionValues.forEach((option) => {\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\n    });\n\n    return `<select class=\"form-control\">${optionValueString}</select>`;\n  }\n\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\n    const type = (this.columnDef.type && this.columnDef.type) ? this.columnDef.type : FieldType.string;\n    let optionValues = [];\n\n    switch (type) {\n      case FieldType.string:\n        optionValues = [\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\n          { operator: '=' as OperatorString, description: this.translate.instant('EQUALS') },\n          { operator: 'a*' as OperatorString, description: this.translate.instant('STARTS_WITH') },\n          { operator: '*z' as OperatorString, description: this.translate.instant('ENDS_WITH') },\n          /*\n          { operator: 'IN' as OperatorString, description: this.translate.instant('IN_COLLECTION_SEPERATED_BY_COMMA') },\n          { operator: 'NIN' as OperatorString, description: this.translate.instant('NOT_IN_COLLECTION_SEPERATED_BY_COMMA') },\n          */\n        ];\n        break;\n      default:\n        optionValues = [\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\n          { operator: '=' as OperatorString, description: '' },\n          { operator: '<' as OperatorString, description: '' },\n          { operator: '<=' as OperatorString, description: '' },\n          { operator: '>' as OperatorString, description: '' },\n          { operator: '>=' as OperatorString, description: '' },\n          { operator: '<>' as OperatorString, description: '' }];\n        break;\n    }\n\n    return optionValues;\n  }\n\n  /**\n   * Create the DOM element\n   */\n  private createDomElement(searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM Select dropdown for the Operator\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\n    this.$filterInputElm = $(this.buildInputHtmlString());\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\n    const $containerInputGroup = $(`<div class=\"input-group\"></div>`);\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon input-group-prepend operator\"></div>`);\n\n    /* the DOM element final structure will be\n      <div class=\"input-group\">\n        <div class=\"input-group-addon input-group-prepend operator\">\n          <select class=\"form-control\"></select>\n        </div>\n        <input class=\"form-control\" type=\"text\" />\n      </div>\n    */\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\n    $containerInputGroup.append($operatorInputGroupAddon);\n    $containerInputGroup.append(this.$filterInputElm);\n\n    // create the DOM element & add an ID and filter class\n    $filterContainerElm.append($containerInputGroup);\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\n\n    this.$filterInputElm.val(searchTerm);\n    this.$filterInputElm.data('columnId', this.columnDef.id);\n\n    if (this.operator) {\n      this.$selectOperatorElm.val(this.operator);\n    }\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterContainerElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\n      $filterContainerElm.appendTo($headerElm);\n    }\n\n    return $filterContainerElm;\n  }\n\n  private onTriggerEvent(e: Event | undefined) {\n    if (this._clearFilterTriggered) {\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\n      this._clearFilterTriggered = false; // reset flag for next use\n    } else {\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\n      const value = this.$filterInputElm.val();\n      (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (value ? [value] : null), operator: selectedOperator || '' });\n    }\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport {\n  Column,\n  ColumnFilter,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  OperatorString,\n  OperatorType,\n  SearchTerm\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP = 1;\n\n@Injectable()\nexport class CompoundSliderFilter implements Filter {\n  private _clearFilterTriggered = false;\n  private _elementRangeInputId: string;\n  private _elementRangeOutputId: string;\n  private _operator: OperatorType | OperatorString;\n  private $containerInputGroupElm: any;\n  private $filterElm: any;\n  private $filterInputElm: any;\n  private $selectOperatorElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor() { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  /** Getter for the Filter Generic Params */\n  private get filterParams(): any {\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};\n  }\n\n  /** Getter for the `filter` properties */\n  private get filterProperties(): ColumnFilter {\n    return this.columnDef && this.columnDef.filter || {};\n  }\n\n  set operator(op: OperatorType | OperatorString) {\n    this._operator = op;\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return this._operator || OperatorType.empty;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    if (args) {\n      this.grid = args.grid;\n      this.callback = args.callback;\n      this.columnDef = args.columnDef;\n      this.operator = args.operator || '';\n      this.searchTerms = args.searchTerms || [];\n\n      // define the input & slider number IDs\n      this._elementRangeInputId = `rangeInput_${this.columnDef.field}`;\n      this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}`;\n\n      // filter input can only have 1 search term, so we will use the 1st array index if it exist\n      const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n      // step 1, create the DOM Element of the filter which contain the compound Operator+Input\n      // and initialize it if searchTerm is filled\n      this.$filterElm = this.createDomElement(searchTerm);\n\n      // step 3, subscribe to the keyup event and run the callback when that happens\n      // also add/remove \"filled\" class for styling purposes\n      this.$filterInputElm.change((e: any) => {\n        this.onTriggerEvent(e);\n      });\n      this.$selectOperatorElm.change((e: any) => {\n        this.onTriggerEvent(e);\n      });\n\n      // if user chose to display the slider number on the right side, then update it every time it changes\n      // we need to use both \"input\" and \"change\" event to be all cross-browser\n      if (!this.filterParams.hideSliderNumber) {\n        this.$filterInputElm.on('input change', (e: { target: HTMLInputElement }) => {\n          const value = e && e.target && e.target.value || '';\n          if (value) {\n            document.getElementById(this._elementRangeOutputId).innerHTML = value;\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm && this.$selectOperatorElm) {\n      this._clearFilterTriggered = true;\n      const clearedValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;\n      this.$selectOperatorElm.val(0);\n      this.$filterInputElm.val(clearedValue);\n      if (!this.filterParams.hideSliderNumber) {\n        this.$containerInputGroupElm.children('div.input-group-addon.input-group-append').children().last().html(clearedValue);\n      }\n      this.onTriggerEvent(undefined);\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values && Array.isArray(values)) {\n      this.$filterInputElm.val(values[0]);\n      this.$containerInputGroupElm.children('div.input-group-addon.input-group-append').children().last().html(values[0]);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /** Build HTML Template for the input range (slider) */\n  private buildTemplateHtmlString() {\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\n    const maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\n    const step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;\n\n    return `<input type=\"range\" id=\"${this._elementRangeInputId}\"\n              name=\"${this._elementRangeInputId}\"\n              defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n              class=\"form-control slider-filter-input range compound-slider\" />`;\n  }\n\n  /** Build HTML Template for the text (number) that is shown appended to the slider */\n  private buildTemplateSliderTextHtmlString() {\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\n\n    return `<div class=\"input-group-addon input-group-append slider-value\"><span class=\"input-group-text\" id=\"${this._elementRangeOutputId}\">${defaultValue}</span></div>`;\n  }\n\n  /** Build HTML Template select dropdown (operator) */\n  private buildSelectOperatorHtmlString() {\n    const optionValues = this.getOptionValues();\n    let optionValueString = '';\n    optionValues.forEach((option) => {\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\n    });\n\n    return `<select class=\"form-control\">${optionValueString}</select>`;\n  }\n\n  /** Get the available operator option values */\n  private getOptionValues(): { operator: OperatorString, description: string }[] {\n    return [\n      { operator: '' as OperatorString, description: '' },\n      { operator: '=' as OperatorString, description: '' },\n      { operator: '<' as OperatorString, description: '' },\n      { operator: '<=' as OperatorString, description: '' },\n      { operator: '>' as OperatorString, description: '' },\n      { operator: '>=' as OperatorString, description: '' },\n      { operator: '<>' as OperatorString, description: '' }\n    ];\n  }\n\n  /**\n   * Create the DOM element\n   */\n  private createDomElement(searchTerm?: SearchTerm) {\n    const searchTermInput = (searchTerm || '0') as string;\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM Select dropdown for the Operator\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\n    this.$filterInputElm = $(this.buildTemplateHtmlString());\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\n    this.$containerInputGroupElm = $(`<div class=\"input-group search-filter\"></div>`);\n    const $operatorInputGroupAddon = $(`<span class=\"input-group-addon input-group-prepend operator\"></span>`);\n\n    /* the DOM element final structure will be\n      <div class=\"input-group\">\n        <div class=\"input-group-addon input-group-prepend operator\">\n          <select class=\"form-control\"></select>\n        </div>\n        <input class=\"form-control\" type=\"text\" />\n        <div class=\"input-group-addon input-group-prepend\" id=\"rangeOuput_percentComplete\"><span class=\"input-group-text\">0</span></div>\n      </div>\n    */\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\n    this.$containerInputGroupElm.append($operatorInputGroupAddon);\n    this.$containerInputGroupElm.append(this.$filterInputElm);\n    if (!this.filterParams.hideSliderNumber) {\n      const $sliderTextInputAppendAddon = $(this.buildTemplateSliderTextHtmlString());\n      $sliderTextInputAppendAddon.children().html(searchTermInput);\n      this.$containerInputGroupElm.append($sliderTextInputAppendAddon);\n    }\n\n    // create the DOM element & add an ID and filter class\n    $filterContainerElm.append(this.$containerInputGroupElm);\n    $filterContainerElm.attr('id', `filter-${this.columnDef.field}`);\n\n    this.$filterInputElm.val(searchTermInput);\n    this.$filterInputElm.data('columnId', this.columnDef.field);\n\n    if (this.operator) {\n      this.$selectOperatorElm.val(this.operator);\n    }\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterContainerElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\n      $filterContainerElm.appendTo($headerElm);\n    }\n\n    return $filterContainerElm;\n  }\n\n  private onTriggerEvent(e: Event | undefined) {\n    if (this._clearFilterTriggered) {\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\n      this._clearFilterTriggered = false; // reset flag for next use\n    } else {\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\n      const value = this.$filterInputElm.val();\n      (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (value ? [value] : null), operator: selectedOperator || '' });\n    }\n  }\n}\n",
    "import {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  OperatorType,\n  OperatorString,\n  SearchTerm\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class InputFilter implements Filter {\n  private _clearFilterTriggered = false;\n  private $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor() {}\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.operator || '';\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString();\n\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\n\n    // step 3, subscribe to the keyup event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterElm.keyup((e: any) => {\n      const value = e && e.target && e.target.value || '';\n      if (this._clearFilterTriggered) {\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\n        this._clearFilterTriggered = false; // reset flag for next use\n        this.$filterElm.removeClass('filled');\n      } else {\n        this.$filterElm.addClass('filled');\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\n      }\n    });\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm) {\n      this._clearFilterTriggered = true;\n      this.$filterElm.val('');\n      this.$filterElm.trigger('keyup');\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('keyup').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm) {\n    if (values) {\n      this.$filterElm.val(values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString() {\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\n    return `<input type=\"text\" class=\"form-control search-filter\" placeholder=\"${placeholder}\">`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    const $filterElm = $(filterTemplate);\n\n    $filterElm.val(searchTerm);\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\n    $filterElm.data('columnId', this.columnDef.id);\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\n      $filterElm.appendTo($headerElm);\n    }\n\n    return $filterElm;\n  }\n}\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport {\r\n  Column,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n  SelectOption,\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class MultipleSelectFilter implements Filter {\r\n  $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n  defaultOptions: MultipleSelectOption;\r\n  isFilled = false;\r\n  labelName: string;\r\n  valueName: string;\r\n  enableTranslateLabel = false;\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  constructor(private translate: TranslateService, private collectionService: CollectionService) {\r\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,  // input search term on top of the select option list\r\n      maxHeight: 200,\r\n      okButton: true,\r\n      addTitle: true, // show tooltip of all selected items while hovering the filter\r\n      countSelected: this.translate.instant('X_OF_Y_SELECTED'),\r\n      allSelected: this.translate.instant('ALL_SELECTED'),\r\n      selectAllText: this.translate.instant('SELECT_ALL'),\r\n      selectAllDelimiter: ['', ''], // remove default square brackets of default text \"[Select All]\" => \"Select All\"\r\n\r\n      // we will subscribe to the onClose event for triggering our callback\r\n      // also add/remove \"filled\" class for styling purposes\r\n      onClose: () => {\r\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\r\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\r\n          this.isFilled = true;\r\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\r\n        } else {\r\n          this.isFilled = false;\r\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\r\n        }\r\n        this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: selectedItems });\r\n      }\r\n    };\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.in;\r\n  }\r\n\r\n  /**\r\n   * Initialize the filter template\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\r\n    }\r\n\r\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\r\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\r\n\r\n    let newCollection = this.columnDef.filter.collection || [];\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\r\n      const filterBy = this.columnDef.filter.collectionFilterBy;\r\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\r\n      const sortBy = this.columnDef.filter.collectionSortBy;\r\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    // step 2, create the DOM Element of the filter & pre-load search terms\r\n    // also subscribe to the onClose event\r\n    this.createDomElement(filterTemplate);\r\n  }\r\n\r\n  /**\r\n   * Clear the filter values\r\n   */\r\n  clear() {\r\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\r\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\r\n      this.$filterElm.multipleSelect('setSelects', []);\r\n      this.$filterElm.removeClass('filled');\r\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off().remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm[]) {\r\n    if (values) {\r\n      this.$filterElm.multipleSelect('setSelects', values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString(optionCollection: any[]) {\r\n    let options = '';\r\n    optionCollection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.multipleSelect, collection: [ { value: '1', label: 'One' } ]')`);\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n      const selected = (this.findValueInSearchTerms(option[this.valueName]) >= 0) ? 'selected' : '';\r\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      // html text of each select option\r\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\r\n\r\n      // if there's a search term, we will add the \"filled\" class for styling purposes\r\n      if (selected) {\r\n        this.isFilled = true;\r\n      }\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * Subscribe to the onClose event and run the callback when that happens\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    this.$filterElm = $(filterTemplate);\r\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\r\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\r\n    }\r\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    this.$filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (this.isFilled) {\r\n      this.$filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\r\n      this.$filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    // merge options & attach multiSelect\r\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\r\n    this.$filterElm = this.$filterElm.multipleSelect(options);\r\n  }\r\n\r\n  private findValueInSearchTerms(value: number | string): number {\r\n    if (this.searchTerms && Array.isArray(this.searchTerms)) {\r\n      for (let i = 0; i < this.searchTerms.length; i++) {\r\n        if (this.searchTerms[i] && this.searchTerms[i] === value) {\r\n          return i;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n} from './../models/index';\nimport { Injectable } from '@angular/core';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n@Injectable()\nexport class SelectFilter implements Filter {\n  private _clearFilterTriggered = false;\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor(private translate: TranslateService) {}\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\n      searchTerm = `${searchTerm}`;\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString();\n\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\n\n    // step 3, subscribe to the change event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterElm.change((e: any) => {\n      const value = e && e.target && e.target.value || '';\n      if (this._clearFilterTriggered) {\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\n        this._clearFilterTriggered = false; // reset flag for next use\n        this.$filterElm.removeClass('filled');\n      } else {\n        this.$filterElm.addClass('filled');\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\n      }\n    });\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm) {\n      this._clearFilterTriggered = true;\n      this.$filterElm.val('');\n      this.$filterElm.trigger('change');\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm | SearchTerm[]) {\n    if (values) {\n      this.$filterElm.val(values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  private buildTemplateHtmlString() {\n    if (!this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the Select Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.select, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    const optionCollection = this.columnDef.filter.collection || [];\n    const labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    const valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let options = '';\n    optionCollection.forEach((option: any) => {\n      if (!option || (option[labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.select, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n      const labelKey = option.labelKey || option[labelName];\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n      options += `<option value=\"${option[valueName]}\">${textLabel}</option>`;\n    });\n    return `<select class=\"form-control search-filter\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    const $filterElm = $(filterTemplate);\n    const searchTermInput = (searchTerm || '') as string;\n\n    $filterElm.val(searchTermInput);\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\n    $filterElm.data('columnId', this.columnDef.id);\n\n    // append the new DOM element to the header row\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\n      $filterElm.appendTo($headerElm);\n    }\n\n    return $filterElm;\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport { Injectable } from '@angular/core';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport {\r\n  Column,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n  SelectOption,\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class SingleSelectFilter implements Filter {\r\n  $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n  defaultOptions: MultipleSelectOption;\r\n  isFilled = false;\r\n  labelName: string;\r\n  valueName: string;\r\n  enableTranslateLabel = false;\r\n\r\n  constructor(private translate: TranslateService, private collectionService: CollectionService) {\r\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,  // input search term on top of the select option list\r\n      maxHeight: 200,\r\n      single: true,\r\n      onClose: () => {\r\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\r\n        let selectedItem = '';\r\n\r\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\r\n          selectedItem = selectedItems[0] || null;\r\n          this.isFilled = true;\r\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\r\n        } else {\r\n          this.isFilled = false;\r\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\r\n        }\r\n        this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: (selectedItem ? [selectedItem] : null) });\r\n      }\r\n    };\r\n  }\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms;\r\n\r\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\r\n    }\r\n\r\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\r\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\r\n\r\n    let newCollection = this.columnDef.filter.collection || [];\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\r\n      const filterBy = this.columnDef.filter.collectionFilterBy;\r\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\r\n      const sortBy = this.columnDef.filter.collectionSortBy;\r\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    // also when the search term is a boolean or a number, we will convert it to a string\r\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\r\n      searchTerm = `${searchTerm}`;\r\n    }\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString(newCollection || [], searchTerm);\r\n\r\n    // step 2, create the DOM Element of the filter & pre-load search term\r\n    this.createDomElement(filterTemplate);\r\n  }\r\n\r\n  /**\r\n   * Clear the filter values\r\n   */\r\n  clear() {\r\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\r\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\r\n      this.$filterElm.multipleSelect('setSelects', []);\r\n      this.$filterElm.removeClass('filled');\r\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off().remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm | SearchTerm[]) {\r\n    if (values) {\r\n      values = Array.isArray(values) ? values : [values];\r\n      this.$filterElm.multipleSelect('setSelects', values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString(optionCollection: any[], searchTerm?: SearchTerm) {\r\n    let options = '';\r\n    optionCollection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.singleSelect, collection: [ { value: '1', label: 'One' } ]')`);\r\n      }\r\n\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n      const selected = (option[this.valueName] === searchTerm) ? 'selected' : '';\r\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      // html text of each select option\r\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\r\n\r\n      // if there's a search term, we will add the \"filled\" class for styling purposes\r\n      if (selected) {\r\n        this.isFilled = true;\r\n      }\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * Subscribe to the onClose event and run the callback when that happens\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    this.$filterElm = $(filterTemplate);\r\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\r\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\r\n    }\r\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    this.$filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // append the new DOM element to the header row\r\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\r\n      this.$filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    // merge options & attach multiSelect\r\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\r\n    this.$filterElm = this.$filterElm.multipleSelect(options);\r\n  }\r\n}\r\n",
    "import {\n  Column,\n  ColumnFilter,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP = 1;\n\nexport class SliderFilter implements Filter {\n  private _clearFilterTriggered = false;\n  private _elementRangeInputId: string;\n  private _elementRangeOutputId: string;\n  private $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  /** Getter for the Filter Generic Params */\n  private get filterParams(): any {\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};\n  }\n\n  /** Getter for the `filter` properties */\n  private get filterProperties(): ColumnFilter {\n    return this.columnDef && this.columnDef.filter || {};\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    if (!args) {\n      throw new Error('[Aurelia-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\n    }\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    // define the input & slider number IDs\n    this._elementRangeInputId = `rangeInput_${this.columnDef.field}`;\n    this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}`;\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString();\n\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\n\n    // step 3, subscribe to the change event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterElm.change((e: any) => {\n      const value = e && e.target && e.target.value || '';\n      if (this._clearFilterTriggered) {\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\n        this._clearFilterTriggered = false; // reset flag for next use\n        this.$filterElm.removeClass('filled');\n      } else {\n        this.$filterElm.addClass('filled');\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\n      }\n    });\n\n    // if user chose to display the slider number on the right side, then update it every time it changes\n    // we need to use both \"input\" and \"change\" event to be all cross-browser\n    if (!this.filterParams.hideSliderNumber) {\n      this.$filterElm.on('input change', (e: { target: HTMLInputElement }) => {\n        const value = e && e.target && e.target.value || '';\n        if (value) {\n          document.getElementById(this._elementRangeOutputId).innerHTML = value;\n        }\n      });\n    }\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm) {\n      this._clearFilterTriggered = true;\n      const clearedValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;\n      this.$filterElm.children('input').val(clearedValue);\n      this.$filterElm.children('div.input-group-addon.input-group-append').children().html(clearedValue);\n      this.$filterElm.trigger('change');\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm) {\n    if (values) {\n      this.$filterElm.val(values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString() {\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\n    const maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\n    const step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;\n\n    if (this.filterParams.hideSliderNumber) {\n      return `\n      <div class=\"search-filter\">\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\n          name=\"${this._elementRangeInputId}\"\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n          class=\"form-control slider-filter-input range\" />\n      </div>`;\n    }\n\n    return `\n      <div class=\"input-group search-filter\">\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\n          name=\"${this._elementRangeInputId}\"\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n          class=\"form-control slider-filter-input range\" />\n        <div class=\"input-group-addon input-group-append slider-value\">\n          <span class=\"input-group-text\" id=\"${this._elementRangeOutputId}\">${defaultValue}</span>\n        </div>\n      </div>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    const $filterElm = $(filterTemplate);\n    const searchTermInput = (searchTerm || '0') as string;\n\n    $filterElm.children('input').val(searchTermInput);\n    $filterElm.children('div.input-group-addon.input-group-append').children().html(searchTermInput);\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\n    $filterElm.data('columnId', this.columnDef.id);\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\n      $filterElm.appendTo($headerElm);\n    }\n\n    return $filterElm;\n  }\n}\n",
    "import { Column, Filter } from './../models/index';\r\nimport { CompoundDateFilter } from './compoundDateFilter';\r\nimport { CompoundInputFilter } from './compoundInputFilter';\r\nimport { CompoundSliderFilter } from './compoundSliderFilter';\r\nimport { InputFilter } from './inputFilter';\r\nimport { MultipleSelectFilter } from './multipleSelectFilter';\r\nimport { SelectFilter } from './selectFilter';\r\nimport { SingleSelectFilter } from './singleSelectFilter';\r\nimport { SliderFilter } from './sliderFilter';\r\n\r\nexport const Filters = {\r\n  /** Compound Date Filter (compound of Operator + Date picker) */\r\n  compoundDate: CompoundDateFilter,\r\n\r\n  /** Compound Input Filter (compound of Operator + Input) */\r\n  compoundInput: CompoundInputFilter,\r\n\r\n  /** Compound Slider Filter (compound of Operator + Slider) */\r\n  compoundSlider: CompoundSliderFilter,\r\n\r\n  /** Default Filter, input type text filter */\r\n  input: InputFilter,\r\n\r\n  /** Slider Filter */\r\n  slider: SliderFilter,\r\n\r\n  /** Multiple Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  multipleSelect: MultipleSelectFilter,\r\n\r\n  /** Single Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  singleSelect: SingleSelectFilter,\r\n\r\n  /** Select filter, which uses native DOM element select */\r\n  select: SelectFilter\r\n};\r\n",
    "import { DelimiterType, FileType, GridOption } from './models/index';\r\nimport { Filters } from './filters/index';\r\n\r\n/**\r\n * Options that can be passed to the Bootstrap-Datetimepicker directly\r\n */\r\nexport const GlobalGridOptions: GridOption = {\r\n  alwaysShowVerticalScroll: true,\r\n  autoEdit: false,\r\n  asyncEditorLoading: false,\r\n  autoFitColumnsOnFirstLoad: true,\r\n  autoResize: {\r\n    bottomPadding: 20,\r\n    minHeight: 180,\r\n    minWidth: 300,\r\n    sidePadding: 0\r\n  },\r\n  cellHighlightCssClass: 'slick-cell-modified',\r\n  checkboxSelector: {\r\n    cssClass: 'slick-cell-checkboxsel'\r\n  },\r\n  columnPicker: {\r\n    hideForceFitButton: false,\r\n    hideSyncResizeButton: true\r\n  },\r\n  datasetIdPropertyName: 'id',\r\n  defaultFilterPlaceholder: '&#128269;',\r\n  defaultFilter: Filters.input,\r\n  editable: false,\r\n  enableAutoResize: true,\r\n  enableCellNavigation: false,\r\n  enableColumnPicker: true,\r\n  enableColumnReorder: true,\r\n  enableExport: true,\r\n  enableGridMenu: true,\r\n  enableHeaderMenu: true,\r\n  enableMouseHoverHighlightRow: true,\r\n  enableSorting: true,\r\n  enableTextSelectionOnCells: true,\r\n  explicitInitialization: true,\r\n  exportOptions: {\r\n    delimiter: DelimiterType.comma,\r\n    exportWithFormatter: false,\r\n    filename: 'export',\r\n    format: FileType.csv,\r\n    groupingAggregatorRowText: '',\r\n    sanitizeDataExport: false,\r\n    useUtf8WithBom: true\r\n  },\r\n  forceFitColumns: false,\r\n  gridMenu: {\r\n    hideClearAllFiltersCommand: false,\r\n    hideClearAllSortingCommand: false,\r\n    hideExportCsvCommand: false,\r\n    hideExportTextDelimitedCommand: true,\r\n    hideForceFitButton: false,\r\n    hideRefreshDatasetCommand: false,\r\n    hideSyncResizeButton: true,\r\n    hideToggleFilterCommand: false,\r\n    iconCssClass: 'fa fa-bars',\r\n    iconClearAllFiltersCommand: 'fa fa-filter text-danger',\r\n    iconClearAllSortingCommand: 'fa fa-unsorted text-danger',\r\n    iconExportCsvCommand: 'fa fa-download',\r\n    iconExportTextDelimitedCommand: 'fa fa-download',\r\n    iconRefreshDatasetCommand: 'fa fa-refresh',\r\n    iconToggleFilterCommand: 'fa fa-random',\r\n    menuWidth: 16,\r\n    resizeOnShowHeaderRow: true\r\n  },\r\n  headerMenu: {\r\n    autoAlign: true,\r\n    autoAlignOffset: 12,\r\n    minWidth: 140,\r\n    iconSortAscCommand: 'fa fa-sort-asc',\r\n    iconSortDescCommand: 'fa fa-sort-desc',\r\n    iconColumnHideCommand: 'fa fa-times',\r\n    hideColumnHideCommand: false,\r\n    hideSortCommands: false\r\n  },\r\n  headerRowHeight: 35,\r\n  multiColumnSort: true,\r\n  numberedMultiColumnSort: true,\r\n  tristateMultiColumnSort: false,\r\n  sortColNumberInSeparateSpan: true,\r\n  suppressActiveCellChangeOnEdit: true,\r\n  pagination: {\r\n    pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\r\n    pageSize: 25,\r\n    totalItems: 0\r\n  },\r\n  rowHeight: 35,\r\n  showHeaderRow: false,\r\n  topPanelHeight: 35\r\n};\r\n",
    "import { GlobalGridOptions } from './global-grid-options';\r\n\r\nexport class SlickgridConfig {\r\n  options: any;\r\n\r\n  constructor() {\r\n    this.options = GlobalGridOptions;\r\n  }\r\n}\r\n",
    "import { Injector, Injectable } from '@angular/core';\nimport { Filter } from '../models/filter.interface';\nimport { ColumnFilter } from '../models';\nimport { SlickgridConfig } from '../slickgrid-config';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Filters } from '.';\nimport { CollectionService } from '../services/collection.service';\n\n@Injectable()\nexport class FilterFactory {\n  /**\n   * The options from the SlickgridConfig\n   */\n  private _options: any;\n\n  constructor(private injector: Injector, private config: SlickgridConfig, private translate: TranslateService, private collectionService: CollectionService) {\n    this._options = this.config.options;\n  }\n\n  // Uses the User model to create a new User\n  createFilter(columnFilter: ColumnFilter | undefined): Filter | undefined {\n    let filter: Filter | undefined;\n\n    if (columnFilter && columnFilter.model) {\n      // the model either needs to be retrieved or is already instantiated\n      // filter = typeof columnFilter.model === 'function' ? this.injector.get(columnFilter.model) : columnFilter.model;\n      const filterInstance = columnFilter.model;\n      const filterName = typeof columnFilter.model === 'function' ? filterInstance.name : '';\n/*\n      if (filterName) {\n        switch (filterName) {\n          case 'InputFilter':\n            filter = new Filters.input();\n            break;\n          case 'SelectFilter':\n            filter = new Filters.select(this.translate);\n            break;\n          case 'MultipleSelectFilter':\n            filter = new Filters.multipleSelect(this.translate, this.collectionService);\n            break;\n          case 'SingleSelectFilter':\n            filter = new Filters.singleSelect(this.translate, this.collectionService);\n            break;\n          case 'CompoundDateFilter':\n            filter = new Filters.compoundDate(this.translate);\n            break;\n          case 'CompoundInputFilter':\n            filter = new Filters.compoundInput(this.translate);\n            break;\n          default:\n            break;\n        }\n      } else {\n        filter = columnFilter.model;\n      }*/\n      // filter = typeof columnFilter.model === 'function' ? this.injector.get(this.translate, this.collectionService) : columnFilter.model;\n      filter = typeof columnFilter.model === 'function' ? new columnFilter.model(this.translate, this.collectionService) : columnFilter.model;\n    }\n\n    // fallback to the default filter\n    if (!filter && this._options.defaultFilter) {\n      // filter = this.injector.get(this._options.defaultFilter);\n      filter = new this._options.defaultFilter(this.translate, this.collectionService);\n    }\n\n    return filter;\n  }\n\n  private createInjector(service: any) {\n    const injector = Injector.create([{provide: service, deps: [TranslateService]}]);\n    // let injector = ReflectiveInjector.resolveAndCreate([service]);\n    // injector = injector.resolveAndCreateChild([service]);\n    return injector.get(service);\n  }\n}\n",
    "import { Component, Injectable } from '@angular/core';\nimport { castToPromise } from './utilities';\nimport { FilterConditions } from './../filter-conditions';\nimport {\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  Filter,\n  FilterArguments,\n  FilterCallbackArg,\n  FieldType,\n  GridOption,\n  OperatorType,\n  CurrentFilter,\n  SearchTerm,\n  SlickEvent,\n  OperatorString\n} from './../models/index';\nimport { FilterFactory } from '../filters/filterFactory';\nimport { Subject } from 'rxjs/Subject';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class FilterService {\n  private _eventHandler = new Slick.EventHandler();\n  private _slickSubscriber: SlickEvent;\n  private _filters: any[] = [];\n  private _columnFilters: ColumnFilters = {};\n  private _dataView: any;\n  private _grid: any;\n  private _onFilterChangedOptions: any;\n  onFilterChanged = new Subject<CurrentFilter[]>();\n  onFilterCleared = new Subject<boolean>();\n\n  constructor(private filterFactory: FilterFactory) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any): void {\n    this._grid = grid;\n  }\n\n  /**\n   * Attach a backend filter hook to the grid\n   * @param grid SlickGrid Grid object\n   */\n  attachBackendOnFilter(grid: any) {\n    this._filters = [];\n    this._slickSubscriber = new Slick.Event();\n\n    // subscribe to the SlickGrid event and call the backend execution\n    this._slickSubscriber.subscribe(this.attachBackendOnFilterSubscribe.bind(this));\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  async attachBackendOnFilterSubscribe(event: Event, args: any) {\n    if (!args || !args.grid) {\n      throw new Error('Something went wrong when trying to attach the \"attachBackendOnFilterSubscribe(event, args)\" function, it seems that \"args\" is not populated correctly');\n    }\n    const backendApi = this._gridOptions.backendServiceApi;\n    if (!backendApi || !backendApi.process || !backendApi.service) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    // run a preProcess callback if defined\n    if (backendApi.preProcess) {\n      backendApi.preProcess();\n    }\n\n    // call the service to get a query back\n    const query = await backendApi.service.processOnFilterChanged(event, args);\n\n    // emit an onFilterChanged event\n    if (args && !args.clearFilterTriggered) {\n      this.emitFilterChanged('remote');\n    }\n\n    // the process could be an Observable (like HttpClient) or a Promise\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n    const observableOrPromise = backendApi.process(query);\n    const processResult = await castToPromise(observableOrPromise);\n\n    // from the result, call our internal post process to update the Dataset and Pagination info\n    if (processResult && backendApi.internalPostProcess) {\n      backendApi.internalPostProcess(processResult);\n    }\n\n    // send the response process to the postProcess callback\n    if (backendApi.postProcess !== undefined) {\n      backendApi.postProcess(processResult);\n    }\n  }\n\n  /**\n   * Attach a local filter hook to the grid\n   * @param grid SlickGrid Grid object\n   * @param dataView\n   */\n  attachLocalOnFilter(grid: any, dataView: any) {\n    this._filters = [];\n    this._dataView = dataView;\n    this._slickSubscriber = new Slick.Event();\n\n    dataView.setFilterArgs({ columnFilters: this._columnFilters, grid: this._grid });\n    dataView.setFilter(this.customLocalFilter.bind(this, dataView));\n\n    this._slickSubscriber.subscribe((e: any, args: any) => {\n      const columnId = args.columnId;\n      if (columnId != null) {\n        dataView.refresh();\n      }\n      if (args && !args.clearFilterTriggered) {\n        this.emitFilterChanged('local');\n      }\n    });\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  /** Clear the search filters (below the column titles) */\n  clearFilters() {\n    this._filters.forEach((filter: Filter) => {\n      if (filter && filter.clear) {\n        // clear element and trigger a change\n        filter.clear();\n      }\n    });\n\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to clear columnFilter (without looping through) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // we also need to refresh the dataView and optionally the grid (it's optional since we use DataView)\n    if (this._dataView) {\n      this._dataView.refresh();\n      this._grid.invalidate();\n      this._grid.render();\n    }\n\n    // emit an event when filters are all cleared\n    this.onFilterCleared.next(true);\n  }\n\n  customLocalFilter(dataView: any, item: any, args: any) {\n    for (const columnId of Object.keys(args.columnFilters)) {\n      const columnFilter = args.columnFilters[columnId];\n      const columnIndex = args.grid.getColumnIndex(columnId);\n      const columnDef = args.grid.getColumns()[columnIndex];\n      if (!columnDef) {\n        return false;\n      }\n      const fieldType = columnDef.type || FieldType.string;\n      const filterSearchType = (columnDef.filterSearchType) ? columnDef.filterSearchType : null;\n\n      let cellValue = item[columnDef.queryField || columnDef.queryFieldFilter || columnDef.field];\n\n      // if we find searchTerms use them but make a deep copy so that we don't affect original array\n      // we might have to overwrite the value(s) locally that are returned\n      // e.g: we don't want to operator within the search value, since it will fail filter condition check trigger afterward\n      const searchValues = (columnFilter && columnFilter.searchTerms) ? [...columnFilter.searchTerms] : null;\n\n      let fieldSearchValue = (Array.isArray(searchValues) && searchValues.length === 1) ? searchValues[0] : '';\n      fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n\n      const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n      let operator = columnFilter.operator || ((matches) ? matches[1] : '');\n      const searchTerm = (!!matches) ? matches[2] : '';\n      const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n\n      if (searchValues && searchValues.length > 1) {\n        fieldSearchValue = searchValues.join(',');\n      } else if (typeof fieldSearchValue === 'string') {\n        // escaping the search value\n        fieldSearchValue = fieldSearchValue.replace(`'`, `''`); // escape single quotes by doubling them\n        if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\n          operator = (operator === '*' || operator === '*z') ? OperatorType.endsWith : OperatorType.startsWith;\n        }\n      }\n\n      // no need to query if search value is empty\n      if (searchTerm === '' && (!searchValues || (Array.isArray(searchValues) && searchValues.length === 0))) {\n        return true;\n      }\n\n      // if search value has a regex match we will only keep the value without the operator\n      // in this case we need to overwrite the returned search values to truncate operator from the string search\n      if (Array.isArray(matches) && matches.length >= 1 && (Array.isArray(searchValues) && searchValues.length === 1)) {\n        searchValues[0] = searchTerm;\n      }\n\n      // filter search terms should always be string type (even though we permit the end user to input numbers)\n      // so make sure each term are strings, if user has some default search terms, we will cast them to string\n      if (searchValues && Array.isArray(searchValues)) {\n        for (let k = 0, ln = searchValues.length; k < ln; k++) {\n          // make sure all search terms are strings\n          searchValues[k] = ((searchValues[k] === undefined || searchValues[k] === null) ? '' : searchValues[k]) + '';\n        }\n      }\n\n      // when using localization (i18n), we should use the formatter output to search as the new cell value\n      if (columnDef && columnDef.params && columnDef.params.useFormatterOuputToFilter) {\n        const rowIndex = (dataView && typeof dataView.getIdxById === 'function') ? dataView.getIdxById(item.id) : 0;\n        cellValue = columnDef.formatter(rowIndex, columnIndex, cellValue, columnDef, item, this._grid);\n      }\n\n      // make sure cell value is always a string\n      if (typeof cellValue === 'number') {\n        cellValue = cellValue.toString();\n      }\n\n      const conditionOptions = {\n        fieldType,\n        searchTerms: searchValues,\n        cellValue,\n        operator,\n        cellValueLastChar: lastValueChar,\n        filterSearchType\n      };\n\n      if (!FilterConditions.executeMappedCondition(conditionOptions)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  dispose() {\n    this.disposeColumnFilters();\n\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n\n    // unsubscribe local event\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\n      this._slickSubscriber.unsubscribe();\n    }\n  }\n\n  /**\n   * Dispose of the filters, since it's a singleton, we don't want to affect other grids with same columns\n   */\n  disposeColumnFilters() {\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to make columnFilter an empty (without looping) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // also destroy each Filter instances\n    this._filters.forEach((filter, index) => {\n      if (filter && filter.destroy) {\n        filter.destroy(true);\n      }\n    });\n  }\n\n  getColumnFilters() {\n    return this._columnFilters;\n  }\n\n  getCurrentLocalFilters(): CurrentFilter[] {\n    const currentFilters: CurrentFilter[] = [];\n    if (this._columnFilters) {\n      for (const colId of Object.keys(this._columnFilters)) {\n        const columnFilter = this._columnFilters[colId];\n        const columnDef = columnFilter.columnDef;\n        const filter = { columnId: colId || '' } as CurrentFilter;\n\n        if (columnFilter && columnFilter.searchTerms) {\n          filter.searchTerms = columnFilter.searchTerms;\n        }\n        if (columnFilter.operator) {\n          filter.operator = columnFilter.operator;\n        }\n        if (Array.isArray(filter.searchTerms) && filter.searchTerms.length > 0 && filter.searchTerms[0] !== '') {\n          currentFilters.push(filter);\n        }\n      }\n    }\n    return currentFilters;\n  }\n\n  callbackSearchEvent(e: Event | undefined, args: FilterCallbackArg) {\n    if (args) {\n      const searchTerm = ((e && e.target) ? (e.target as HTMLInputElement).value : undefined);\n      const searchTerms = (args.searchTerms && Array.isArray(args.searchTerms)) ? args.searchTerms : (searchTerm ? [searchTerm] : undefined);\n      const columnDef = args.columnDef || null;\n      const columnId = columnDef ? (columnDef.id || '') : '';\n      const operator = args.operator || undefined;\n      const hasSearchTerms = searchTerms && Array.isArray(searchTerms);\n      const termsCount = hasSearchTerms && searchTerms.length;\n\n      if (!hasSearchTerms || termsCount === 0 || (termsCount === 1 && searchTerms[0] === '')) {\n        // delete the property from the columnFilters when it becomes empty\n        // without doing this, it would leave an incorrect state of the previous column filters when filtering on another column\n        delete this._columnFilters[columnId];\n      } else {\n        const colId = '' + columnId as string;\n        const colFilter: ColumnFilter = {\n          columnId: colId,\n          columnDef,\n          searchTerms,\n        };\n        if (operator) {\n          colFilter.operator = operator;\n        }\n        this._columnFilters[colId] = colFilter;\n      }\n\n      this.triggerEvent(this._slickSubscriber, {\n        clearFilterTriggered: args && args.clearFilterTriggered,\n        columnId,\n        columnDef: args.columnDef || null,\n        columnFilters: this._columnFilters,\n        operator,\n        searchTerms,\n        serviceOptions: this._onFilterChangedOptions,\n        grid: this._grid\n      }, e);\n    }\n  }\n\n  addFilterTemplateToHeaderRow(args: { column: Column; grid: any; node: any }) {\n    const columnDef = args.column;\n    const columnId = columnDef.id || '';\n\n    if (columnDef && columnId !== 'selector' && columnDef.filterable) {\n      let searchTerms: SearchTerm[] | undefined;\n      let operator: OperatorString | OperatorType;\n      const filter: Filter | undefined = this.filterFactory.createFilter(args.column.filter);\n      operator = (columnDef && columnDef.filter && columnDef.filter.operator) || (filter && filter.operator) || undefined;\n\n      if (this._columnFilters[columnDef.id]) {\n        searchTerms = this._columnFilters[columnDef.id].searchTerms || undefined;\n        operator = this._columnFilters[columnDef.id].operator || undefined;\n      } else if (columnDef.filter) {\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // because of that we need to first get searchTerm(s) from the columnFilters (that is what the user last entered)\n        searchTerms = columnDef.filter.searchTerms || undefined;\n        this.updateColumnFilters(searchTerms, columnDef, operator);\n      }\n\n      const filterArguments: FilterArguments = {\n        grid: this._grid,\n        operator,\n        searchTerms,\n        columnDef,\n        callback: this.callbackSearchEvent.bind(this)\n      };\n\n      if (filter) {\n        filter.init(filterArguments);\n        const filterExistIndex = this._filters.findIndex((filt) => filter.columnDef.name === filt.columnDef.name);\n\n        // add to the filters arrays or replace it when found\n        if (filterExistIndex === -1) {\n          this._filters.push(filter);\n        } else {\n          this._filters[filterExistIndex] = filter;\n        }\n\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // we need to also set again the values in the DOM elements if the values were set by a searchTerm(s)\n        if (searchTerms && filter.setValues) {\n          filter.setValues(searchTerms);\n        }\n      }\n    }\n  }\n\n  /**\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\n   * Other services, like Pagination, can then subscribe to it.\n   * @param sender\n   */\n  emitFilterChanged(sender: 'local' | 'remote') {\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\n      let currentFilters: CurrentFilter[] = [];\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentFilters) {\n        currentFilters = backendService.getCurrentFilters() as CurrentFilter[];\n      }\n      this.onFilterChanged.next(currentFilters);\n    } else if (sender === 'local') {\n      this.onFilterChanged.next(this.getCurrentLocalFilters());\n    }\n  }\n\n  /**\n   * When user passes an array of preset filters, we need to pre-populate each column filter searchTerm(s)\n   * The process is to loop through the preset filters array, find the associated column from columnDefinitions and fill in the filter object searchTerm(s)\n   * This is basically the same as if we would manually add searchTerm(s) to a column filter object in the column definition, but we do it programmatically.\n   * At the end of the day, when creating the Filter (DOM Element), it will use these searchTerm(s) so we can take advantage of that without recoding each Filter type (DOM element)\n   */\n  populateColumnFilterSearchTerms() {\n    if (this._gridOptions.presets && Array.isArray(this._gridOptions.presets.filters) && this._gridOptions.presets.filters.length > 0) {\n      const filters = this._gridOptions.presets.filters;\n      this._columnDefinitions.forEach((columnDef: Column) =>  {\n        // clear any columnDef searchTerms before applying Presets\n        if (columnDef.filter && columnDef.filter.searchTerms) {\n          delete columnDef.filter.searchTerms;\n        }\n\n        // from each presets, we will find the associated columnDef and apply the preset searchTerms & operator if there is\n        const columnPreset = filters.find((presetFilter: CurrentFilter) => {\n          return presetFilter.columnId === columnDef.id;\n        });\n        if (columnPreset && columnPreset.searchTerms && Array.isArray(columnPreset.searchTerms)) {\n          columnDef.filter = columnDef.filter || {};\n          columnDef.filter.operator = columnPreset.operator || columnDef.filter.operator || '';\n          columnDef.filter.searchTerms = columnPreset.searchTerms;\n        }\n      });\n    }\n  }\n\n  private updateColumnFilters(searchTerms: SearchTerm[] | undefined, columnDef: any, operator?: OperatorType | OperatorString) {\n    if (searchTerms && columnDef) {\n      // this._columnFilters.searchTerms = searchTerms;\n      this._columnFilters[columnDef.id] = {\n        columnId: columnDef.id,\n        columnDef,\n        searchTerms,\n        operator\n      };\n    }\n  }\n\n  private triggerEvent(slickEvent: any, args: any, e: any) {\n    slickEvent = slickEvent || new Slick.Event();\n\n    // event might have been created as a CustomEvent (e.g. CompoundDateFilter), without being a valid Slick.EventData.\n    // if so we will create a new Slick.EventData and merge it with that CustomEvent to avoid having SlickGrid errors\n    let event = e;\n    if (e && typeof e.isPropagationStopped !== 'function') {\n      event = $.extend({}, new Slick.EventData(), e);\n    }\n    slickEvent.notify(args, event, args.grid);\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  ExportOption,\n  FileType,\n  Formatter,\n  GridOption\n} from './../models/index';\nimport { addWhiteSpaces, htmlEntityDecode, sanitizeHtmlToText } from './../services/utilities';\nimport { Subject } from 'rxjs/Subject';\nimport { TextEncoder } from 'text-encoding-utf-8';\n\n// using external non-typed js libraries\ndeclare let Slick: any;\ndeclare let $: any;\n\nexport interface ExportColumnHeader {\n  key: string;\n  title: string;\n}\n\n@Injectable()\nexport class ExportService {\n  private _lineCarriageReturn = '\\n';\n  private _dataView: any;\n  private _grid: any;\n  private _exportQuoteWrapper: string;\n  private _columnHeaders: ExportColumnHeader[];\n  private _groupedHeaders: ExportColumnHeader[];\n  private _hasGroupedItems = false;\n  private _exportOptions: ExportOption;\n  onGridBeforeExportToFile = new Subject<boolean>();\n  onGridAfterExportToFile = new Subject<{ options: any }>();\n\n  constructor(private translate: TranslateService) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Export Service\n   * @param grid\n   * @param gridOptions\n   * @param dataView\n   */\n  init(grid: any, dataView: any): void {\n    this._grid = grid;\n    this._dataView = dataView;\n  }\n\n  /**\n   * Function to export the Grid result to an Excel CSV format using javascript for it to produce the CSV file.\n   * This is a WYSIWYG export to file output (What You See is What You Get)\n   *\n   * NOTES: The column position needs to match perfectly the JSON Object position because of the way we are pulling the data,\n   * which means that if any column(s) got moved in the UI, it has to be reflected in the JSON array output as well\n   *\n   * Example: exportToFile({ format: FileType.csv, delimiter: DelimiterType.comma })\n   */\n  exportToFile(options: ExportOption) {\n    this.onGridBeforeExportToFile.next(true);\n    this._exportOptions = $.extend(true, {}, this._gridOptions.exportOptions, options);\n\n    // get the CSV output from the grid data\n    const dataOutput = this.getDataOutput();\n\n    // trigger a download file\n    // wrap it into a setTimeout so that the EventAggregator has enough time to start a pre-process like showing a spinner\n    setTimeout(() => {\n      const downloadOptions = {\n        filename: `${this._exportOptions.filename}.${this._exportOptions.format}`,\n        csvContent: dataOutput,\n        format: this._exportOptions.format,\n        useUtf8WithBom: this._exportOptions.useUtf8WithBom\n      };\n      this.startDownloadFile(downloadOptions);\n      this.onGridAfterExportToFile.next({ options: downloadOptions });\n    }, 0);\n  }\n\n  // -----------------------\n  // Private functions\n  // -----------------------\n\n  getDataOutput(): string {\n    const columns = this._grid.getColumns() || [];\n    const delimiter = this._exportOptions.delimiter || '';\n    const format = this._exportOptions.format || '';\n    const groupByColumnHeader = this._exportOptions.groupingColumnHeaderTitle || this.translate.instant('GROUP_BY');\n\n    // a CSV needs double quotes wrapper, the other types do not need any wrapper\n    this._exportQuoteWrapper = (format === FileType.csv) ? '\"' : '';\n\n    // data variable which will hold all the fields data of a row\n    let outputDataString = '';\n\n    // get grouped column titles and if found, we will add a \"Group by\" column at the first column index\n    const grouping = this._dataView.getGrouping();\n    if (grouping && Array.isArray(grouping) && grouping.length > 0) {\n      this._hasGroupedItems = true;\n      outputDataString += `${groupByColumnHeader}` + delimiter;\n    } else {\n      this._hasGroupedItems = false;\n    }\n\n    // get all column headers\n    this._columnHeaders = this.getColumnHeaders(columns) || [];\n    if (this._columnHeaders && Array.isArray(this._columnHeaders) && this._columnHeaders.length > 0) {\n      // add the header row + add a new line at the end of the row\n      const outputHeaderTitles = this._columnHeaders.map((header) => {\n        return this._exportQuoteWrapper + header.title + this._exportQuoteWrapper;\n      });\n      outputDataString += (outputHeaderTitles.join(delimiter) + this._lineCarriageReturn);\n    }\n\n    // Populate the rest of the Grid Data\n    outputDataString += this.getAllGridRowData(columns, this._lineCarriageReturn);\n\n    return outputDataString;\n  }\n\n  /**\n   * Get all the grid row data and return that as an output string\n   */\n  getAllGridRowData(columns: Column[], lineCarriageReturn: string): string {\n    let outputDataString = '';\n    const lineCount = this._dataView.getLength();\n\n    // loop through all the grid rows of data\n    for (let rowNumber = 0; rowNumber < lineCount; rowNumber++) {\n      const itemObj = this._dataView.getItem(rowNumber);\n\n      if (itemObj != null) {\n        // Normal row (not grouped by anything) would have an ID which was predefined in the Grid Columns definition\n        if (itemObj.id != null) {\n          // get regular row item data\n          outputDataString += this.readRegularRowData(columns, rowNumber, itemObj);\n        } else if (this._hasGroupedItems && itemObj.__groupTotals === undefined) {\n          // get the group row\n          outputDataString += this.readGroupedTitleRow(itemObj) + this._exportOptions.delimiter;\n        } else if (itemObj.__groupTotals) {\n          // else if the row is a Group By and we have agreggators, then a property of '__groupTotals' would exist under that object\n          outputDataString += this.readGroupedTotalRow(columns, itemObj) + this._exportOptions.delimiter;\n        }\n        outputDataString += lineCarriageReturn;\n      }\n    }\n\n    return outputDataString;\n  }\n\n  /**\n   * Get all header titles and their keys, translate the title when required.\n   * @param columns of the grid\n   */\n  getColumnHeaders(columns: Column[]): ExportColumnHeader[] {\n    if (!columns || !Array.isArray(columns) || columns.length === 0) {\n      return null;\n    }\n    const columnHeaders = [];\n\n    // Populate the Column Header, pull the name defined\n    columns.forEach((columnDef) => {\n      const fieldName = (columnDef.headerKey) ? this.translate.instant(columnDef.headerKey) : columnDef.name;\n      const skippedField = columnDef.excludeFromExport || false;\n\n      // if column width is 0 then it's not evaluated since that field is considered hidden should not be part of the export\n      if ((columnDef.width ===  undefined || columnDef.width > 0) && !skippedField) {\n        columnHeaders.push({\n          key: columnDef.field || columnDef.id,\n          title: fieldName\n        });\n      }\n    });\n\n    return columnHeaders;\n  }\n\n  /**\n   * Get the data of a regular row (a row without grouping)\n   * @param row\n   * @param itemObj\n   */\n  readRegularRowData(columns: Column[], row: number, itemObj: any) {\n    let idx = 0;\n    let rowOutputString = '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n\n    for (let col = 0, ln = columns.length; col < ln; col++) {\n      const columnDef = columns[col];\n      const fieldId = columnDef.field || columnDef.id || '';\n\n      // skip excluded column\n      if (columnDef.excludeFromExport) {\n          continue;\n      }\n\n      // if we are grouping and are on 1st column index, we need to skip this column since it will be used later by the grouping text:: Group by [columnX]\n      if (this._hasGroupedItems && idx === 0) {\n        rowOutputString += `\"\"` + delimiter;\n      }\n\n      // does the user want to evaluate current column Formatter?\n      const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._exportOptions.exportWithFormatter;\n\n      // did the user provide a Custom Formatter for the export\n      const exportCustomFormatter: Formatter = (columnDef.exportCustomFormatter !== undefined) ? columnDef.exportCustomFormatter : undefined;\n\n      let itemData = '';\n\n      if (exportCustomFormatter) {\n        itemData = exportCustomFormatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\n      } else if (isEvaluatingFormatter && !!columnDef.formatter) {\n        itemData = columnDef.formatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\n      } else {\n        itemData = (itemObj[fieldId] === null || itemObj[fieldId] === undefined) ? '' : itemObj[fieldId];\n      }\n\n      // does the user want to sanitize the output data (remove HTML tags)?\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n        itemData = sanitizeHtmlToText(itemData);\n      }\n\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n      if (format === FileType.csv) {\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n      }\n\n      // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n      // to cancel that effect we can had = in front, ex: =\"1E06\"\n      const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\n\n      rowOutputString += keepAsStringWrapper + exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\n      idx++;\n    }\n\n    return rowOutputString;\n  }\n\n  /**\n   * Get the grouped title(s), for example if we grouped by salesRep, the returned result would be:: 'Sales Rep'\n   * @param itemObj\n   */\n  readGroupedTitleRow(itemObj: any) {\n    let groupName = sanitizeHtmlToText(itemObj.title);\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n\n    groupName = addWhiteSpaces(5 * itemObj.level) + groupName;\n\n    if (format === FileType.csv) {\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n      groupName = groupName.toString().replace(/\"/gi, `\"\"`);\n    }\n\n    // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n    // to cancel that effect we can had = in front, ex: =\"1E06\"\n    // const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\n\n    return /*keepAsStringWrapper +*/ exportQuoteWrapper + ' ' + groupName + exportQuoteWrapper + delimiter;\n  }\n\n  /**\n   * Get the grouped totals, these are set by Slick Aggregators.\n   * For example if we grouped by \"salesRep\" and we have a Sum Aggregator on \"sales\", then the returned output would be:: [\"Sum 123$\"]\n   * @param itemObj\n   */\n  readGroupedTotalRow(columns: Column[], itemObj: any) {\n    let exportExponentialWrapper = '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n    const groupingAggregatorRowText = this._exportOptions.groupingAggregatorRowText || '';\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n    let output = `${exportQuoteWrapper}${groupingAggregatorRowText}${exportQuoteWrapper}${delimiter}`;\n\n    columns.forEach((columnDef) => {\n      let itemData = '';\n\n      // if there's a groupTotalsFormatter, we will re-run it to get the exact same output as what is shown in UI\n      if (columnDef.groupTotalsFormatter) {\n        itemData = columnDef.groupTotalsFormatter(itemObj, columnDef);\n      }\n\n      // does the user want to sanitize the output data (remove HTML tags)?\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n        itemData = sanitizeHtmlToText(itemData);\n      }\n\n      if (format === FileType.csv) {\n        // when CSV we also need to escape double quotes twice, so a double quote \" becomes 2x double quotes \"\"\n        // and if we have a text of (number)E(number),\n        // we don't want excel to transform it into exponential (1.0E06) to cancel that effect we can had = in front, ex: =\"1E06\"\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n        exportExponentialWrapper = (itemData.match(/^\\s*\\d+E\\d+\\s*$/i)) ? '=' : '';\n      }\n      output += exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\n    });\n\n    return output;\n  }\n\n  /**\n   * Triggers download file with file format.\n   * IE(6-10) are not supported\n   * All other browsers will use plain javascript on client side to produce a file download.\n   * @param options\n   */\n  startDownloadFile(options: { filename: string, csvContent: any, format: FileType | string, useUtf8WithBom: boolean }): void {\n    // IE(6-10) don't support javascript download and our service doesn't support either so throw an error, we have to make a round trip to the Web Server for exporting\n    if (navigator.appName === 'Microsoft Internet Explorer') {\n      throw new Error('Microsoft Internet Explorer 6 to 10 do not support javascript export to CSV. Please upgrade your browser.');\n    }\n\n    // set the correct MIME type\n    const mimeType = (options.format === FileType.csv) ? 'text/csv' : 'text/plain';\n\n    // make sure no html entities exist in the data\n    const csvContent = htmlEntityDecode(options.csvContent);\n\n    // dealing with Excel CSV export and UTF-8 is a little tricky.. We will use Option #2 to cover older Excel versions\n    // Option #1: we need to make Excel knowing that it's dealing with an UTF-8, A correctly formatted UTF8 file can have a Byte Order Mark as its first three octets\n    // reference: http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\n    // Option#2: use a 3rd party extension to javascript encode into UTF-16\n    let outputData: Uint8Array | string;\n    if (options.format === FileType.csv) {\n      outputData = new TextEncoder('utf-8').encode(csvContent);\n    } else {\n      outputData = csvContent;\n    }\n\n    // create a Blob object for the download\n    const blob = new Blob([options.useUtf8WithBom ? '\\uFEFF' : '', outputData], {\n      type: `${mimeType};charset=utf-8;`\n    });\n\n    // when using IE/Edge, then use different download call\n    if (typeof navigator.msSaveOrOpenBlob === 'function') {\n      navigator.msSaveOrOpenBlob(blob, options.filename);\n    } else {\n      // this trick will generate a temp <a /> tag\n      // the code will then trigger a hidden click for it to start downloading\n      const link = document.createElement('a');\n      const csvUrl = URL.createObjectURL(blob);\n\n      link.textContent = 'download';\n      link.href = csvUrl;\n      link.setAttribute('download', options.filename);\n\n      // set the visibility to hidden so there is no effect on your web-layout\n      link.style.visibility = 'hidden';\n\n      // this part will append the anchor tag, trigger a click (for download to start) and finally remove the tag once completed\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n}\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\r\nimport { castToPromise } from './utilities';\r\nimport {\r\n  CellArgs,\r\n  Column,\r\n  ColumnSort,\r\n  CurrentSorter,\r\n  FieldType,\r\n  GridOption,\r\n  SlickEvent,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\nimport { Sorters } from './../sorters';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// using external non-typed js libraries\r\ndeclare var Slick: any;\r\n\r\nexport class SortService {\r\n  private _currentLocalSorters: CurrentSorter[] = [];\r\n  private _eventHandler: any = new Slick.EventHandler();\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _slickSubscriber: SlickEvent;\r\n  private _isBackendGrid = false;\r\n  onSortChanged = new Subject<CurrentSorter[]>();\r\n  onSortCleared = new Subject<boolean>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  /**\r\n   * Attach a backend sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param dataView SlickGrid DataView object\r\n   */\r\n  attachBackendOnSort(grid: any, dataView: any) {\r\n    this._isBackendGrid = true;\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = grid.onSort;\r\n\r\n    // subscribe to the SlickGrid event and call the backend execution\r\n    this._slickSubscriber.subscribe(this.onBackendSortChanged.bind(this));\r\n  }\r\n\r\n  async onBackendSortChanged(event: Event, args: any) {\r\n    if (!args || !args.grid) {\r\n      throw new Error('Something went wrong when trying to attach the \"onBackendSortChanged(event, args)\" function, it seems that \"args\" is not populated correctly');\r\n    }\r\n    const gridOptions: GridOption = args.grid.getOptions() || {};\r\n    const backendApi = gridOptions.backendServiceApi;\r\n\r\n    if (!backendApi || !backendApi.process || !backendApi.service) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n    if (backendApi.preProcess) {\r\n      backendApi.preProcess();\r\n    }\r\n    const query = backendApi.service.processOnSortChanged(event, args);\r\n    this.emitSortChanged('remote');\r\n\r\n    // the process could be an Observable (like HttpClient) or a Promise\r\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n    const observableOrPromise = backendApi.process(query);\r\n    const processResult = await castToPromise(observableOrPromise);\r\n\r\n    // from the result, call our internal post process to update the Dataset and Pagination info\r\n    if (processResult && backendApi.internalPostProcess) {\r\n      backendApi.internalPostProcess(processResult);\r\n    }\r\n\r\n    // send the response process to the postProcess callback\r\n    if (backendApi.postProcess) {\r\n      backendApi.postProcess(processResult);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attach a local sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param gridOptions Grid Options object\r\n   * @param dataView\r\n   */\r\n  attachLocalOnSort(grid: any, dataView: any) {\r\n    this._isBackendGrid = false;\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = grid.onSort;\r\n\r\n    this._slickSubscriber.subscribe((e: any, args: any) => {\r\n      // multiSort and singleSort are not exactly the same, but we want to structure it the same for the (for loop) after\r\n      // also to avoid having to rewrite the for loop in the sort, we will make the singleSort an array of 1 object\r\n      const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({sortAsc: args.sortAsc, sortCol: args.sortCol});\r\n\r\n      // keep current sorters\r\n      this._currentLocalSorters = []; // reset current local sorters\r\n      if (Array.isArray(sortColumns)) {\r\n        sortColumns.forEach((sortColumn: { sortCol: Column, sortAsc: number }) => {\r\n          if (sortColumn.sortCol) {\r\n            this._currentLocalSorters.push({\r\n              columnId: sortColumn.sortCol.id,\r\n              direction: sortColumn.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      this.onLocalSortChanged(grid, dataView, sortColumns);\r\n      this.emitSortChanged('local');\r\n    });\r\n  }\r\n\r\n  clearSorting() {\r\n    if (this._grid && this._gridOptions && this._dataView) {\r\n      // remove any sort icons (this setSortColumns function call really does only that)\r\n      this._grid.setSortColumns([]);\r\n\r\n      // we also need to trigger a sort change\r\n      // for a backend grid, we will trigger a backend sort changed with an empty sort columns array\r\n      // however for a local grid, we need to pass a sort column and so we will sort by the 1st column\r\n      if (this._isBackendGrid) {\r\n        this.onBackendSortChanged(undefined, { grid: this._grid, sortCols: [] });\r\n      } else {\r\n        if (this._columnDefinitions && Array.isArray(this._columnDefinitions)) {\r\n          this.onLocalSortChanged(this._grid, this._dataView, new Array({sortAsc: true, sortCol: this._columnDefinitions[0] }));\r\n        }\r\n      }\r\n    }\r\n    // set current sorter to empty & emit a sort changed event\r\n    this._currentLocalSorters = [];\r\n\r\n    // emit an event when filters are all cleared\r\n    this.onSortCleared.next(true);\r\n  }\r\n\r\n  getCurrentLocalSorters(): CurrentSorter[] {\r\n    return this._currentLocalSorters;\r\n  }\r\n\r\n  /**\r\n   * Get column sorts,\r\n   * If a column is passed as an argument, we won't add this column to our output array since it is already in the array\r\n   * We want to know the sort prior to calling the next sorting command\r\n   */\r\n  getPreviousColumnSorts(columnId?: string) {\r\n    // getSortColumns() only returns sortAsc & columnId, we want the entire column definition\r\n    const oldSortColumns = this._grid.getSortColumns();\r\n\r\n    // get the column definition but only keep column which are not equal to our current column\r\n    const sortedCols = oldSortColumns.reduce((cols, col) => {\r\n      if (!columnId || col.columnId !== columnId) {\r\n        cols.push({ sortCol: this._columnDefinitions[this._grid.getColumnIndex(col.columnId)], sortAsc: col.sortAsc });\r\n      }\r\n      return cols;\r\n    }, []);\r\n\r\n    return sortedCols;\r\n  }\r\n\r\n  /**\r\n   * load any presets if there are any\r\n   * @param grid\r\n   * @param dataView\r\n   */\r\n  loadLocalPresets(grid: any, dataView: any) {\r\n    const sortCols: ColumnSort[] = [];\r\n    this._currentLocalSorters = []; // reset current local sorters\r\n    if (this._gridOptions && this._gridOptions.presets && this._gridOptions.presets.sorters) {\r\n      const sorters = this._gridOptions.presets.sorters;\r\n\r\n      sorters.forEach((presetSorting: CurrentSorter) => {\r\n        const gridColumn = this._columnDefinitions.find((col: Column) => col.id === presetSorting.columnId);\r\n        if (gridColumn) {\r\n          sortCols.push({\r\n            columnId: gridColumn.id,\r\n            sortAsc: ((presetSorting.direction.toUpperCase() === SortDirection.ASC) ? true : false),\r\n            sortCol: gridColumn\r\n          });\r\n\r\n          // keep current sorters\r\n          this._currentLocalSorters.push({\r\n            columnId: gridColumn.id + '',\r\n            direction: presetSorting.direction.toUpperCase() as SortDirectionString\r\n          });\r\n        }\r\n      });\r\n\r\n      if (sortCols.length > 0) {\r\n        this.onLocalSortChanged(grid, dataView, sortCols);\r\n        grid.setSortColumns(sortCols); // use this to add sort icon(s) in UI\r\n      }\r\n    }\r\n  }\r\n\r\n  onLocalSortChanged(grid: any, dataView: any, sortColumns: ColumnSort[]) {\r\n    dataView.sort((dataRow1: any, dataRow2: any) => {\r\n      for (let i = 0, l = sortColumns.length; i < l; i++) {\r\n        const columnSortObj = sortColumns[i];\r\n        if (columnSortObj && columnSortObj.sortCol) {\r\n          const sortDirection = columnSortObj.sortAsc ? SortDirectionNumber.asc : SortDirectionNumber.desc;\r\n          const sortField = columnSortObj.sortCol.queryField || columnSortObj.sortCol.queryFieldFilter || columnSortObj.sortCol.field;\r\n          const fieldType = columnSortObj.sortCol.type || FieldType.string;\r\n          const value1 = dataRow1[sortField];\r\n          const value2 = dataRow2[sortField];\r\n          const sortResult = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n          if (sortResult !== SortDirectionNumber.neutral) {\r\n            return sortResult;\r\n          }\r\n        }\r\n      }\r\n      return 0;\r\n    });\r\n    grid.invalidate();\r\n    grid.render();\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe local event\r\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\r\n      this._slickSubscriber.unsubscribe();\r\n    }\r\n\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n  }\r\n\r\n  /**\r\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\r\n   * Other services, like Pagination, can then subscribe to it.\r\n   * @param sender\r\n   */\r\n  emitSortChanged(sender: 'local' | 'remote') {\r\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      let currentSorters: CurrentSorter[] = [];\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        currentSorters = backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n      this.onSortChanged.next(currentSorters);\r\n    } else if (sender === 'local') {\r\n      this.onSortChanged.next(this.getCurrentLocalSorters());\r\n    }\r\n  }\r\n}\r\n",
    "export class Constants {\r\n  static TEXT_CANCEL = 'Cancel';\r\n  static TEXT_CLEAR_ALL_FILTERS = 'Clear All Filters';\r\n  static TEXT_CLEAR_ALL_SORTING = 'Clear All Sorting';\r\n  static TEXT_COLUMNS = 'Columns';\r\n  static TEXT_COMMANDS = 'Commands';\r\n  static TEXT_EXPORT_IN_CSV_FORMAT = 'Export in CSV format';\r\n  static TEXT_EXPORT_IN_TEXT_FORMAT = 'Export in Text format (Tab delimited)';\r\n  static TEXT_FORCE_FIT_COLUMNS = 'Force fit columns';\r\n  static TEXT_HIDE_COLUMN = 'Hide Column';\r\n  static TEXT_REFRESH_DATASET = 'Refresh Dataset';\r\n  static TEXT_SAVE = 'Save';\r\n  static TEXT_SYNCHRONOUS_RESIZE = 'Synchronous resize';\r\n  static TEXT_SORT_ASCENDING = 'Sort Ascending';\r\n  static TEXT_SORT_DESCENDING = 'Sort Descending';\r\n  static TEXT_TOGGLE_FILTER_ROW = 'Toggle Filter Row';\r\n  static VALIDATION_EDITOR_VALID_NUMBER = 'Please enter a valid number';\r\n  static VALIDATION_EDITOR_VALID_INTEGER = 'Please enter a valid integer number';\r\n  static VALIDATION_EDITOR_NUMBER_BETWEEN = 'Please enter a valid number between {{minValue}} and {{maxValue}}';\r\n  static VALIDATION_EDITOR_DECIMAL_BETWEEN = 'Please enter a valid number with a maximum of {{maxDecimal}} decimals';\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport {\n  CellArgs,\n  ColumnSort,\n  Column,\n  DelimiterType,\n  Extension,\n  FileType,\n  GraphqlResult,\n  GridMenu,\n  GridMenuItem,\n  GridOption,\n  HeaderButtonOnCommandArgs,\n  HeaderMenu,\n  HeaderMenuItem,\n  HeaderMenuOnCommandArgs,\n  HeaderMenuOnBeforeMenuShowArgs,\n} from './../models/index';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, sanitizeHtmlToText } from './../services/utilities';\nimport { FilterService } from './filter.service';\nimport { ExportService } from './export.service';\nimport { SortService } from './sort.service';\nimport { Constants } from '../constants';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class ControlAndPluginService {\n  private _dataView: any;\n  private _grid: any;\n  allColumns: Column[];\n  visibleColumns: Column[];\n  areVisibleColumnDifferent = false;\n  extensionList: Extension[] = [];\n  undoRedoBuffer: any;\n  userOriginalGridMenu: GridMenu;\n\n  // controls & plugins\n  autoTooltipPlugin: any;\n  cellExternalCopyManagerPlugin: any;\n  checkboxSelectorPlugin: any;\n  columnPickerControl: any;\n  gridMenuControl: any;\n  groupItemMetaProviderPlugin: any;\n  headerButtonsPlugin: any;\n  headerMenuPlugin: any;\n  rowSelectionPlugin: any;\n\n  constructor(\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private sortService: SortService,\n    private translate: TranslateService,\n  ) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  /** Get all columns (includes visible and non-visible) */\n  getAllColumns(): Column[] {\n    return this.allColumns || [];\n  }\n\n  /** Get only visible columns */\n  getVisibleColumns(): Column[] {\n    return this.visibleColumns || [];\n  }\n\n  /** Get all Extensions */\n  getAllExtensions(): Extension[] {\n    return this.extensionList;\n  }\n\n  /**\n   * Get an Extension by it's name\n   *  @param name\n   */\n  getExtensionByName(name: string): Extension | undefined {\n    return this.extensionList.find((p) => p.name === name);\n  }\n\n  /** Auto-resize all the column in the grid to fit the grid width */\n  autoResizeColumns() {\n    this._grid.autosizeColumns();\n  }\n\n  /**\n   * Attach/Create different Controls or Plugins after the Grid is created\n   * @param grid\n   * @param dataView\n   * @param groupItemMetadataProvider\n   */\n  attachDifferentControlOrPlugins(grid: any, dataView: any, groupItemMetadataProvider: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n    this.allColumns = this._columnDefinitions;\n    this.visibleColumns = this._columnDefinitions;\n\n    // make sure all columns are translated before creating ColumnPicker/GridMenu Controls\n    // this is to avoid having hidden columns not being translated on first load\n    if (this._gridOptions.enableTranslate) {\n      this.translateItems(this.allColumns, 'headerKey', 'name');\n    }\n\n    // Column Picker Control\n    if (this._gridOptions.enableColumnPicker) {\n      this.columnPickerControl = this.createColumnPicker(this._grid, this._columnDefinitions);\n      this.extensionList.push({ name: 'ColumnPicker', service: this.columnPickerControl });\n    }\n\n    // Grid Menu Control\n    if (this._gridOptions.enableGridMenu) {\n      // keep original user grid menu, useful when switching locale to translate\n      this.userOriginalGridMenu = { ...this._gridOptions.gridMenu };\n\n      this.gridMenuControl = this.createGridMenu(this._grid, this._columnDefinitions);\n      this.extensionList.push({ name: 'GridMenu', service: this.gridMenuControl });\n    }\n\n    // Auto Tooltip Plugin\n    if (this._gridOptions.enableAutoTooltip) {\n      this.autoTooltipPlugin = new Slick.AutoTooltips(this._gridOptions.autoTooltipOptions || {});\n      this._grid.registerPlugin(this.autoTooltipPlugin);\n      this.extensionList.push({ name: 'AutoTooltip', service: this.autoTooltipPlugin });\n    }\n\n    // Grouping Plugin\n    // register the group item metadata provider to add expand/collapse group handlers\n    if (this._gridOptions.enableGrouping) {\n      this.groupItemMetaProviderPlugin = groupItemMetadataProvider || {};\n      this._grid.registerPlugin(this.groupItemMetaProviderPlugin);\n      this.extensionList.push({ name: 'GroupItemMetaProvider', service: this.groupItemMetaProviderPlugin });\n    }\n\n    // Checkbox Selector Plugin\n    if (this._gridOptions.enableCheckboxSelector) {\n      // when enabling the Checkbox Selector Plugin, we need to also watch onClick events to perform certain actions\n      // the selector column has to be created BEFORE the grid (else it behaves oddly), but we can only watch grid events AFTER the grid is created\n      this._grid.registerPlugin(this.checkboxSelectorPlugin);\n      this.extensionList.push({ name: 'CheckboxSelector', service: this.checkboxSelectorPlugin });\n\n      // this also requires the Row Selection Model to be registered as well\n      if (!this.rowSelectionPlugin || !this._grid.getSelectionModel()) {\n        this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n        this._grid.setSelectionModel(this.rowSelectionPlugin);\n      }\n\n      // user might want to pre-select some rows\n      // the setTimeout is because of timing issue with styling (row selection happen but rows aren't highlighted properly)\n      if (this._gridOptions.preselectedRows && this.rowSelectionPlugin && this._grid.getSelectionModel()) {\n        setTimeout(() => this.checkboxSelectorPlugin.selectRows(this._gridOptions.preselectedRows), 0);\n      }\n    }\n\n    // Row Selection Plugin\n    if (!this._gridOptions.enableCheckboxSelector && this._gridOptions.enableRowSelection) {\n      this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n      this._grid.setSelectionModel(this.rowSelectionPlugin);\n    }\n\n    // Header Button Plugin\n    if (this._gridOptions.enableHeaderButton) {\n      this.headerButtonsPlugin = new Slick.Plugins.HeaderButtons(this._gridOptions.headerButton || {});\n      this._grid.registerPlugin(this.headerButtonsPlugin);\n      this.extensionList.push({ name: 'HeaderButtons', service: this.headerButtonsPlugin });\n      this.headerButtonsPlugin.onCommand.subscribe((e: Event, args: HeaderButtonOnCommandArgs) => {\n        if (this._gridOptions.headerButton && typeof this._gridOptions.headerButton.onCommand === 'function') {\n          this._gridOptions.headerButton.onCommand(e, args);\n        }\n      });\n    }\n\n    // Header Menu Plugin\n    if (this._gridOptions.enableHeaderMenu) {\n      this.headerMenuPlugin = this.createHeaderMenu(this._grid, this._dataView, this._columnDefinitions);\n    }\n\n    // Cell External Copy Manager Plugin (Excel Like)\n    if (this._gridOptions.enableExcelCopyBuffer) {\n      this.createUndoRedoBuffer();\n      this.hookUndoShortcutKey();\n      this.createCellExternalCopyManagerPlugin(this._grid);\n    }\n\n    // manually register other plugins\n    if (this._gridOptions.registerPlugins !== undefined) {\n      if (Array.isArray(this._gridOptions.registerPlugins)) {\n        this._gridOptions.registerPlugins.forEach((plugin) => {\n          this._grid.registerPlugin(plugin);\n          this.extensionList.push({ name: 'generic', service: plugin });\n        });\n      } else {\n        this._grid.registerPlugin(this._gridOptions.registerPlugins);\n        this.extensionList.push({ name: 'generic', service: this._gridOptions.registerPlugins });\n      }\n    }\n  }\n\n  /**\n   * Attach/Create different plugins before the Grid creation.\n   * For example the multi-select have to be added to the column definition before the grid is created to work properly\n   * @param columnDefinitions\n   * @param options\n   */\n  createCheckboxPluginBeforeGridCreation(columnDefinitions: Column[], options: GridOption) {\n    if (options.enableCheckboxSelector) {\n      if (!this.checkboxSelectorPlugin) {\n        this.checkboxSelectorPlugin = new Slick.CheckboxSelectColumn(options.checkboxSelector || {});\n      }\n      const selectionColumn: Column = this.checkboxSelectorPlugin.getColumnDefinition();\n      selectionColumn.excludeFromExport = true;\n      selectionColumn.excludeFromQuery = true;\n      selectionColumn.excludeFromHeaderMenu = true;\n      columnDefinitions.unshift(selectionColumn);\n    }\n  }\n\n  /** Create the Excel like copy manager */\n  createCellExternalCopyManagerPlugin(grid: any) {\n    let newRowIds = 0;\n    const pluginOptions = {\n      clipboardCommandHandler: (editCommand: any) => {\n        this.undoRedoBuffer.queueAndExecuteCommand.call(this.undoRedoBuffer, editCommand);\n      },\n      dataItemColumnValueExtractor: (item: any, columnDef: Column) => {\n        // when grid or cell is not editable, we will possibly evaluate the Formatter if it was passed\n        // to decide if we evaluate the Formatter, we will use the same flag from Export which is \"exportWithFormatter\"\n        if (!this._gridOptions.editable || !columnDef.editor) {\n          const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._gridOptions.exportOptions.exportWithFormatter;\n          if (columnDef.formatter && isEvaluatingFormatter) {\n            const formattedOutput = columnDef.formatter(0, 0, item[columnDef.field], columnDef, item, this._grid);\n            if (columnDef.sanitizeDataExport || (this._gridOptions.exportOptions && this._gridOptions.exportOptions.sanitizeDataExport)) {\n              return sanitizeHtmlToText(formattedOutput);\n            }\n            return formattedOutput;\n          }\n        }\n\n        // else use the default \"dataItemColumnValueExtractor\" from the plugin itself\n        // we can do that by setting back the getter with null\n        return null;\n      },\n      readOnlyMode: false,\n      includeHeaderWhenCopying: false,\n      newRowCreator: (count: number) => {\n        for (let i = 0; i < count; i++) {\n          const item = {\n            id: 'newRow_' + newRowIds++\n          };\n          grid.getData().addItem(item);\n        }\n      }\n    };\n\n    grid.setSelectionModel(new Slick.CellSelectionModel());\n    this.cellExternalCopyManagerPlugin = new Slick.CellExternalCopyManager(pluginOptions);\n    grid.registerPlugin(this.cellExternalCopyManagerPlugin);\n    this.extensionList.push({ name: 'CellExternalCopyManager', service: this.cellExternalCopyManagerPlugin });\n  }\n\n  /**\n   * Create the Column Picker and expose all the available hooks that user can subscribe (onColumnsChanged)\n   * @param grid\n   * @param columnDefinitions\n   */\n  createColumnPicker(grid: any, columnDefinitions: Column[]) {\n    // localization support for the picker\n    const columnTitle = this.getPickerTitleOutputString('columnTitle', 'columnPicker');\n    const forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'columnPicker');\n    const syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');\n\n    this._gridOptions.columnPicker = this._gridOptions.columnPicker || {};\n    this._gridOptions.columnPicker.columnTitle = this._gridOptions.columnPicker.columnTitle || columnTitle;\n    this._gridOptions.columnPicker.forceFitTitle = this._gridOptions.columnPicker.forceFitTitle || forceFitTitle;\n    this._gridOptions.columnPicker.syncResizeTitle = this._gridOptions.columnPicker.syncResizeTitle || syncResizeTitle;\n\n    this.columnPickerControl = new Slick.Controls.ColumnPicker(columnDefinitions, grid, this._gridOptions);\n    if (grid && this._gridOptions.enableColumnPicker) {\n      this.columnPickerControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\n        if (this._gridOptions.columnPicker && typeof this._gridOptions.columnPicker.onColumnsChanged === 'function') {\n          this._gridOptions.columnPicker.onColumnsChanged(e, args);\n        }\n      });\n    }\n\n    return this.columnPickerControl;\n  }\n\n  /**\n   * Create (or re-create) Grid Menu and expose all the available hooks that user can subscribe (onCommand, onMenuClose, ...)\n   * @param grid\n   * @param columnDefinitions\n   */\n  createGridMenu(grid: any, columnDefinitions: Column[]) {\n    if (this._gridOptions && this._gridOptions.gridMenu) {\n      this._gridOptions.gridMenu = { ...this.getDefaultGridMenuOptions(), ...this._gridOptions.gridMenu };\n\n      // merge original user grid menu items with internal items\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\n      this._gridOptions.gridMenu.customItems = [...this.userOriginalGridMenu.customItems || [], ...this.addGridMenuCustomCommands()];\n      this.translateItems(this._gridOptions.gridMenu.customItems, 'titleKey', 'title');\n      this.sortItems(this._gridOptions.gridMenu.customItems, 'positionOrder');\n\n      const gridMenuControl = new Slick.Controls.GridMenu(columnDefinitions, grid, this._gridOptions);\n      if (grid && this._gridOptions.gridMenu) {\n        gridMenuControl.onBeforeMenuShow.subscribe((e: Event, args: CellArgs) => {\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onBeforeMenuShow === 'function') {\n            this._gridOptions.gridMenu.onBeforeMenuShow(e, args);\n          }\n        });\n        gridMenuControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\n          this.areVisibleColumnDifferent = true;\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onColumnsChanged === 'function') {\n            this._gridOptions.gridMenu.onColumnsChanged(e, args);\n          }\n        });\n        gridMenuControl.onCommand.subscribe((e: Event, args: GridMenuItem) => {\n          this.executeGridMenuInternalCustomCommands(e, args);\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onCommand === 'function') {\n            this._gridOptions.gridMenu.onCommand(e, args);\n          }\n        });\n        gridMenuControl.onMenuClose.subscribe((e: Event, args: CellArgs) => {\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onMenuClose === 'function') {\n            this._gridOptions.gridMenu.onMenuClose(e, args);\n          }\n\n          // we also want to resize the columns if the user decided to hide certain column(s)\n          if (grid && typeof grid.autosizeColumns === 'function') {\n            // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree)\n            const gridUid = grid.getUID();\n            if (this.areVisibleColumnDifferent && gridUid && $(`.${gridUid}`).length > 0) {\n              grid.autosizeColumns();\n              this.areVisibleColumnDifferent = false;\n            }\n          }\n        });\n      }\n      return gridMenuControl;\n    }\n    return null;\n  }\n\n  /**\n   * Create the Header Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)\n   * @param grid\n   * @param dataView\n   * @param columnDefinitions\n   */\n  createHeaderMenu(grid: any, dataView: any, columnDefinitions: Column[]) {\n    this._gridOptions.headerMenu = { ...this.getDefaultHeaderMenuOptions(), ...this._gridOptions.headerMenu };\n    if (this._gridOptions.enableHeaderMenu) {\n      this._gridOptions.headerMenu = this.addHeaderMenuCustomCommands(this._gridOptions, columnDefinitions);\n    }\n\n    const headerMenuPlugin = new Slick.Plugins.HeaderMenu(this._gridOptions.headerMenu);\n\n    grid.registerPlugin(headerMenuPlugin);\n    headerMenuPlugin.onCommand.subscribe((e: Event, args: HeaderMenuOnCommandArgs) => {\n      this.executeHeaderMenuInternalCommands(e, args);\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onCommand === 'function') {\n        this._gridOptions.headerMenu.onCommand(e, args);\n      }\n    });\n    headerMenuPlugin.onBeforeMenuShow.subscribe((e: Event, args: HeaderMenuOnBeforeMenuShowArgs) => {\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onBeforeMenuShow === 'function') {\n        this._gridOptions.headerMenu.onBeforeMenuShow(e, args);\n      }\n    });\n\n    return headerMenuPlugin;\n  }\n\n  /** Create an undo redo buffer used by the Excel like copy */\n  createUndoRedoBuffer() {\n    const commandQueue: any[] = [];\n    let commandCtr = 0;\n\n    this.undoRedoBuffer = {\n      queueAndExecuteCommand: (editCommand: any) => {\n        commandQueue[commandCtr] = editCommand;\n        commandCtr++;\n        editCommand.execute();\n      },\n      undo: () => {\n        if (commandCtr === 0) { return; }\n        commandCtr--;\n        const command = commandQueue[commandCtr];\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\n          command.undo();\n        }\n      },\n      redo: () => {\n        if (commandCtr >= commandQueue.length) { return; }\n        const command = commandQueue[commandCtr];\n        commandCtr++;\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\n          command.execute();\n        }\n      }\n    };\n  }\n\n  /** Hide a column from the grid */\n  hideColumn(column: Column) {\n    if (this._grid && this.visibleColumns) {\n      const columnIndex = this._grid.getColumnIndex(column.id);\n      this.visibleColumns = this.removeColumnByIndex(this.visibleColumns, columnIndex);\n      this._grid.setColumns(this.visibleColumns);\n    }\n  }\n\n  /** Attach an undo shortcut key hook that will redo/undo the copy buffer */\n  hookUndoShortcutKey() {\n    // undo shortcut\n    $(document).keydown((e) => {\n      if (e.which === 90 && (e.ctrlKey || e.metaKey)) {    // CTRL + (shift) + Z\n        if (e.shiftKey) {\n          this.undoRedoBuffer.redo();\n        } else {\n          this.undoRedoBuffer.undo();\n        }\n      }\n    });\n  }\n\n  /** Dispose of all the controls & plugins */\n  dispose() {\n    this._grid = null;\n    this._dataView = null;\n    this.visibleColumns = [];\n\n    // dispose of each control/plugin if it has a destroy method\n    this.extensionList.forEach((item) => {\n      if (item && item.service && item.service.destroy) {\n        item.service.destroy();\n      }\n    });\n    this.extensionList = [];\n  }\n\n  /** Create Grid Menu with Custom Commands if user has enabled Filters and/or uses a Backend Service (OData, GraphQL) */\n  private addGridMenuCustomCommands() {\n    const backendApi = this._gridOptions.backendServiceApi || null;\n    const gridMenuCustomItems: GridMenuItem[] = [];\n\n    if (this._gridOptions && this._gridOptions.enableFiltering) {\n      // show grid menu: clear all filters\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllFiltersCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllFiltersCommand || 'fa fa-filter text-danger',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_FILTERS') : Constants.TEXT_CLEAR_ALL_FILTERS,\n            disabled: false,\n            command: 'clear-filter',\n            positionOrder: 50\n          }\n        );\n      }\n\n      // show grid menu: toggle filter row\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideToggleFilterCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconToggleFilterCommand || 'fa fa-random',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('TOGGLE_FILTER_ROW') : Constants.TEXT_TOGGLE_FILTER_ROW,\n            disabled: false,\n            command: 'toggle-filter',\n            positionOrder: 52\n          }\n        );\n      }\n\n      // show grid menu: refresh dataset\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideRefreshDatasetCommand && backendApi) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconRefreshDatasetCommand || 'fa fa-refresh',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('REFRESH_DATASET') : Constants.TEXT_REFRESH_DATASET,\n            disabled: false,\n            command: 'refresh-dataset',\n            positionOrder: 54\n          }\n        );\n      }\n    }\n\n    if (this._gridOptions.enableSorting) {\n      // show grid menu: clear all sorting\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllSortingCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllSortingCommand || 'fa fa-unsorted text-danger',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_SORTING') : Constants.TEXT_CLEAR_ALL_SORTING,\n            disabled: false,\n            command: 'clear-sorting',\n            positionOrder: 51\n          }\n        );\n      }\n    }\n\n    // show grid menu: export to file\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportCsvCommand) {\n      gridMenuCustomItems.push(\n        {\n          iconCssClass: this._gridOptions.gridMenu.iconExportCsvCommand || 'fa fa-download',\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_CSV') : Constants.TEXT_EXPORT_IN_CSV_FORMAT,\n          disabled: false,\n          command: 'export-csv',\n          positionOrder: 53\n        }\n      );\n    }\n    // show grid menu: export to text file as tab delimited\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportTextDelimitedCommand) {\n      gridMenuCustomItems.push(\n        {\n          iconCssClass: this._gridOptions.gridMenu.iconExportTextDelimitedCommand || 'fa fa-download',\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_TAB_DELIMITED') : Constants.TEXT_EXPORT_IN_TEXT_FORMAT,\n          disabled: false,\n          command: 'export-text-delimited',\n          positionOrder: 54\n        }\n      );\n    }\n\n    // add the custom \"Commands\" title if there are any commands\n    if (this._gridOptions && this._gridOptions.gridMenu && (gridMenuCustomItems.length > 0 || this._gridOptions.gridMenu.customItems.length > 0)) {\n      this._gridOptions.gridMenu.customTitle = this._gridOptions.gridMenu.customTitle || this.getPickerTitleOutputString('customTitle', 'gridMenu');\n    }\n\n    return gridMenuCustomItems;\n  }\n\n  /**\n   * Create Header Menu with Custom Commands if user has enabled Header Menu\n   * @param options\n   * @param columnDefinitions\n   * @return header menu\n   */\n  private addHeaderMenuCustomCommands(options: GridOption, columnDefinitions: Column[]): HeaderMenu {\n    const headerMenuOptions = options.headerMenu;\n\n    if (columnDefinitions && Array.isArray(columnDefinitions) && options.enableHeaderMenu) {\n      columnDefinitions.forEach((columnDef: Column) => {\n        if (columnDef && !columnDef.excludeFromHeaderMenu) {\n          if (!columnDef.header || !columnDef.header.menu) {\n            columnDef.header = {\n              menu: {\n                items: []\n              }\n            };\n          }\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\n\n          // Sorting Commands\n          if (options.enableSorting && columnDef.sortable && !headerMenuOptions.hideSortCommands) {\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-asc').length === 0) {\n              columnHeaderMenuItems.push({\n                iconCssClass: headerMenuOptions.iconSortAscCommand || 'fa fa-sort-asc',\n                title: options.enableTranslate ? this.translate.instant('SORT_ASCENDING') : Constants.TEXT_SORT_ASCENDING,\n                command: 'sort-asc',\n                positionOrder: 50\n              });\n            }\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-desc').length === 0) {\n              columnHeaderMenuItems.push({\n                iconCssClass: headerMenuOptions.iconSortDescCommand || 'fa fa-sort-desc',\n                title: options.enableTranslate ? this.translate.instant('SORT_DESCENDING') : Constants.TEXT_SORT_DESCENDING,\n                command: 'sort-desc',\n                positionOrder: 51\n              });\n            }\n          }\n\n          // Hide Column Command\n          if (!headerMenuOptions.hideColumnHideCommand && columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'hide').length === 0) {\n            columnHeaderMenuItems.push({\n              iconCssClass: headerMenuOptions.iconColumnHideCommand || 'fa fa-times',\n              title: options.enableTranslate ? this.translate.instant('HIDE_COLUMN') : Constants.TEXT_HIDE_COLUMN,\n              command: 'hide',\n              positionOrder: 52\n            });\n          }\n\n          this.translateItems(columnHeaderMenuItems, 'titleKey', 'title');\n\n          // sort the custom items by their position in the list\n          columnHeaderMenuItems.sort((itemA, itemB) => {\n            if (itemA && itemB && itemA.hasOwnProperty('positionOrder') && itemB.hasOwnProperty('positionOrder')) {\n              return itemA.positionOrder - itemB.positionOrder;\n            }\n            return 0;\n          });\n        }\n      });\n\n    }\n\n    return headerMenuOptions;\n  }\n\n  /** Execute the Header Menu Commands that was triggered by the onCommand subscribe */\n  executeHeaderMenuInternalCommands(e: Event, args: HeaderMenuOnCommandArgs) {\n    if (args && args.command) {\n      switch (args.command) {\n        case 'hide':\n          this.hideColumn(args.column);\n          this.autoResizeColumns();\n          break;\n        case 'sort-asc':\n        case 'sort-desc':\n          // get previously sorted columns\n          const cols: ColumnSort[] = this.sortService.getPreviousColumnSorts(args.column.id + '');\n\n          // add to the column array, the column sorted by the header menu\n          cols.push({ sortCol: args.column, sortAsc: (args.command === 'sort-asc') });\n          if (this._gridOptions.backendServiceApi) {\n            this.sortService.onBackendSortChanged(e, { multiColumnSort: true, sortCols: cols, grid: this._grid });\n          } else {\n            this.sortService.onLocalSortChanged(this._grid, this._dataView, cols);\n          }\n\n          // update the this.gridObj sortColumns array which will at the same add the visual sort icon(s) on the UI\n          const newSortColumns: ColumnSort[] = cols.map((col) => {\n            return { columnId: col.sortCol.id, sortAsc: col.sortAsc };\n          });\n          this._grid.setSortColumns(newSortColumns); // add sort icon in UI\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /**\n   * Execute the Grid Menu Custom command callback that was triggered by the onCommand subscribe\n   * These are the default internal custom commands\n   * @param event\n   * @param GridMenuItem args\n   */\n  executeGridMenuInternalCustomCommands(e: Event, args: GridMenuItem) {\n    if (args && args.command) {\n      switch (args.command) {\n        case 'clear-filter':\n          this.filterService.clearFilters();\n          this._dataView.refresh();\n          break;\n        case 'clear-sorting':\n          this.sortService.clearSorting();\n          this._dataView.refresh();\n          break;\n        case 'export-csv':\n          this.exportService.exportToFile({\n            delimiter: DelimiterType.comma,\n            filename: 'export',\n            format: FileType.csv,\n            useUtf8WithBom: true\n          });\n          break;\n        case 'export-text-delimited':\n          this.exportService.exportToFile({\n            delimiter: DelimiterType.tab,\n            filename: 'export',\n            format: FileType.txt,\n            useUtf8WithBom: true\n          });\n          break;\n        case 'toggle-filter':\n          this._grid.setHeaderRowVisibility(!this._grid.getOptions().showHeaderRow);\n          break;\n        case 'toggle-toppanel':\n          this._grid.setTopPanelVisibility(!this._grid.getOptions().showTopPanel);\n          break;\n        case 'refresh-dataset':\n          this.refreshBackendDataset();\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /** Refresh the dataset through the Backend Service */\n  refreshBackendDataset() {\n    let query;\n    const backendApi = this._gridOptions.backendServiceApi;\n    if (!backendApi || !backendApi.service || !backendApi.process) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    if (backendApi.service) {\n      query = backendApi.service.buildQuery();\n    }\n\n    if (query && query !== '') {\n      if (backendApi.preProcess) {\n        backendApi.preProcess();\n      }\n\n      // the process could be an Observable (like HttpClient) or a Promise\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n      const observableOrPromise = backendApi.process(query);\n\n      castToPromise(observableOrPromise).then((processResult: GraphqlResult | any) => {\n        // from the result, call our internal post process to update the Dataset and Pagination info\n        if (processResult && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  /**\n   * Remove a column from the grid by it's index in the grid\n   * @param array input\n   * @param index\n   */\n  removeColumnByIndex(array: any[], index: number) {\n    return array.filter((el: any, i: number) => {\n      return index !== i;\n    });\n  }\n\n  /** Translate the Column Picker and it's last 2 checkboxes */\n  translateColumnPicker() {\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\n    if (this._gridOptions && this._gridOptions.columnPicker) {\n      this.emptyColumnPickerTitles();\n\n      this._gridOptions.columnPicker.columnTitle = this.getPickerTitleOutputString('columnTitle', 'columnPicker');\n      this._gridOptions.columnPicker.forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'columnPicker');\n      this._gridOptions.columnPicker.syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');\n    }\n\n    // translate all columns (including non-visible)\n    this.translateItems(this.allColumns, 'headerKey', 'name');\n\n    // re-initialize the Column Picker, that will recreate all the list\n    // doing an \"init()\" won't drop any existing command attached\n    if (this.columnPickerControl.init) {\n      this.columnPickerControl.init(this._grid);\n    }\n  }\n\n  /** Translate the Grid Menu titles and column picker */\n  translateGridMenu() {\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\n    // we also need to call the control init so that it takes the new Grid object with latest values\n    if (this._gridOptions && this._gridOptions.gridMenu) {\n      this._gridOptions.gridMenu.customItems = [];\n      this.emptyGridMenuTitles();\n\n      // merge original user grid menu items with internal items\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\n      this._gridOptions.gridMenu.customItems = [...this.userOriginalGridMenu.customItems || [], ...this.addGridMenuCustomCommands()];\n      this.translateItems(this._gridOptions.gridMenu.customItems, 'titleKey', 'title');\n      this.sortItems(this._gridOptions.gridMenu.customItems, 'positionOrder');\n\n      this._gridOptions.gridMenu.columnTitle = this.getPickerTitleOutputString('columnTitle', 'gridMenu');\n      this._gridOptions.gridMenu.forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'gridMenu');\n      this._gridOptions.gridMenu.syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'gridMenu');\n\n      // translate all columns (including non-visible)\n      this.translateItems(this.allColumns, 'headerKey', 'name');\n\n      // re-initialize the Grid Menu, that will recreate all the menus & list\n      // doing an \"init()\" won't drop any existing command attached\n      if (this.gridMenuControl.init) {\n        this.gridMenuControl.init(this._grid);\n      }\n    }\n  }\n\n  /**\n   * Translate the Header Menu titles, we need to loop through all column definition to re-translate them\n   */\n  translateHeaderMenu() {\n    if (this._gridOptions && this._gridOptions.headerMenu) {\n      this.resetHeaderMenuTranslations(this.visibleColumns);\n    }\n  }\n\n  /**\n   * Translate manually the header titles.\n   * We could optionally pass a locale (that will change currently loaded locale), else it will use current locale\n   * @param locale to use\n   * @param new column definitions (optional)\n   */\n  translateColumnHeaders(locale?: boolean | string, newColumnDefinitions?: Column[]) {\n    if (locale) {\n      this.translate.use(locale as string);\n    }\n\n    const columnDefinitions = newColumnDefinitions || this._columnDefinitions;\n\n    this.translateItems(columnDefinitions, 'headerKey', 'name');\n    this.translateItems(this.allColumns, 'headerKey', 'name');\n\n    // re-render the column headers\n    this.renderColumnHeaders(columnDefinitions);\n  }\n\n  /**\n   * Render (or re-render) the column headers from column definitions.\n   * calling setColumns() will trigger a grid re-render\n   */\n  renderColumnHeaders(newColumnDefinitions?: Column[]) {\n    const collection = newColumnDefinitions || this._columnDefinitions;\n    if (Array.isArray(collection) && this._grid && this._grid.setColumns) {\n      this._grid.setColumns(collection);\n    }\n  }\n\n  private emptyColumnPickerTitles() {\n    this._gridOptions.columnPicker.columnTitle = '';\n    this._gridOptions.columnPicker.forceFitTitle = '';\n    this._gridOptions.columnPicker.syncResizeTitle = '';\n  }\n\n  private emptyGridMenuTitles() {\n    this._gridOptions.gridMenu.customTitle = '';\n    this._gridOptions.gridMenu.columnTitle = '';\n    this._gridOptions.gridMenu.forceFitTitle = '';\n    this._gridOptions.gridMenu.syncResizeTitle = '';\n  }\n\n  /**\n   * @return default Grid Menu options\n   */\n  private getDefaultGridMenuOptions(): GridMenu {\n    return {\n      customTitle: undefined,\n      columnTitle: this.getPickerTitleOutputString('columnTitle', 'gridMenu'),\n      forceFitTitle: this.getPickerTitleOutputString('forceFitTitle', 'gridMenu'),\n      syncResizeTitle: this.getPickerTitleOutputString('syncResizeTitle', 'gridMenu'),\n      iconCssClass: 'fa fa-bars',\n      menuWidth: 18,\n      customItems: [],\n      hideClearAllFiltersCommand: false,\n      hideRefreshDatasetCommand: false,\n      hideToggleFilterCommand: false,\n    };\n  }\n\n  /**\n   * @return default Header Menu options\n   */\n  private getDefaultHeaderMenuOptions(): HeaderMenu {\n    return {\n      autoAlignOffset: 12,\n      minWidth: 140,\n      hideColumnHideCommand: false,\n      hideSortCommands: false,\n      title: ''\n    };\n  }\n\n  /**\n   * From a Grid Menu object property name, we will return the correct title output string following this order\n   * 1- if user provided a title, use it as the output title\n   * 2- else if user provided a title key, use it to translate the output title\n   * 3- else if nothing is provided use\n   */\n  private getPickerTitleOutputString(propName: string, pickerName: 'gridMenu' | 'columnPicker') {\n    let output = '';\n    const picker = this._gridOptions && this._gridOptions[pickerName] || {};\n    const enableTranslate = this._gridOptions && this._gridOptions.enableTranslate || false;\n\n    const title = picker && picker[propName];\n    const titleKey = picker && picker[`${propName}Key`];\n\n    if (titleKey) {\n      output = this.translate.instant(titleKey || ' ');\n    } else {\n      switch (propName) {\n        case 'customTitle':\n          output = title || (enableTranslate ? this.translate.instant('COMMANDS') : Constants.TEXT_COMMANDS);\n          break;\n        case 'columnTitle':\n          output = title || (enableTranslate ? this.translate.instant('COLUMNS') : Constants.TEXT_COLUMNS);\n          break;\n        case 'forceFitTitle':\n          output = title || (enableTranslate ? this.translate.instant('FORCE_FIT_COLUMNS') : Constants.TEXT_FORCE_FIT_COLUMNS);\n          break;\n        case 'syncResizeTitle':\n          output = title || (enableTranslate ? this.translate.instant('SYNCHRONOUS_RESIZE') : Constants.TEXT_SYNCHRONOUS_RESIZE);\n          break;\n        default:\n          output = title;\n          break;\n      }\n    }\n    return output;\n  }\n\n  /**\n   * Reset all the Grid Menu options which have text to translate\n   * @param grid menu object\n   */\n  private resetHeaderMenuTranslations(columnDefinitions: Column[]) {\n    columnDefinitions.forEach((columnDef: Column) => {\n      if (columnDef && columnDef.header && columnDef.header && columnDef.header.menu && columnDef.header.menu.items) {\n        if (!columnDef.excludeFromHeaderMenu) {\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\n\n          columnHeaderMenuItems.forEach((item) => {\n            switch (item.command) {\n              case 'sort-asc':\n                item.title = this.translate.instant('SORT_ASCENDING') || Constants.TEXT_SORT_ASCENDING;\n                break;\n              case 'sort-desc':\n                item.title = this.translate.instant('SORT_DESCENDING') || Constants.TEXT_SORT_DESCENDING;\n                break;\n              case 'hide':\n                item.title = this.translate.instant('HIDE_COLUMN') || Constants.TEXT_HIDE_COLUMN;\n                break;\n            }\n\n            // re-translate if there's a \"titleKey\"\n            if (this._gridOptions && this._gridOptions.enableTranslate) {\n              this.translateItems(columnHeaderMenuItems, 'titleKey', 'title');\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Sort items in an array by a property name\n   * @params items array\n   * @param property name to sort with\n   * @return sorted array\n   */\n  private sortItems(items: any[], propertyName: string) {\n    // sort the custom items by their position in the list\n    items.sort((itemA, itemB) => {\n      if (itemA && itemB && itemA.hasOwnProperty(propertyName) && itemB.hasOwnProperty(propertyName)) {\n        return itemA[propertyName] - itemB[propertyName];\n      }\n      return 0;\n    });\n  }\n\n  /** Translate the an array of items from an input key and assign to the output key */\n  private translateItems(items: any[], inputKey: string, outputKey: string) {\n    for (const item of items) {\n      if (item[inputKey]) {\n        item[outputKey] = this.translate.instant(item[inputKey]);\n      }\n    }\n  }\n}\n",
    "/**\r\n * This GraphqlQueryBuilder class is a lib that already exist\r\n * but was causing issues with TypeScript, RequireJS and other bundler/packagers\r\n * and so I rewrote it in pure TypeScript.\r\n *\r\n * The previous lib can be viewed here at this Github\r\n * https://github.com/codemeasandwich/graphql-query-builder\r\n */\r\nexport default class GraphqlQueryBuilder {\r\n  alias: string;\r\n  head: any[] = [];\r\n  body: any;\r\n\r\n  /* Constructor, query/mutator you wish to use, and an alias or filter arguments. */\r\n  constructor(private queryFnName: string, aliasOrFilter?: string | object) {\r\n    if (typeof aliasOrFilter === 'function') {\r\n      this.alias = aliasOrFilter;\r\n    } else if (typeof aliasOrFilter === 'object') {\r\n      this.filter(aliasOrFilter);\r\n    } else if (undefined === aliasOrFilter && 2 === arguments.length) {\r\n      throw new TypeError(`You have passed undefined as Second argument to \"Query\"`);\r\n    } else if (undefined !== aliasOrFilter) {\r\n      throw new TypeError(`Second argument to \"Query\" should be an alias name(String) or filter arguments(Object). was passed ${aliasOrFilter}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The parameters to run the query against.\r\n   * @param filters An object mapping attribute to values\r\n   */\r\n  filter(filters: any) {\r\n    for (const prop of Object.keys(filters)) {\r\n      if (typeof filters[prop] === 'function') {\r\n        continue;\r\n      }\r\n      const val = this.getGraphQLValue(filters[prop]);\r\n      if (val === '{}') {\r\n        continue;\r\n      }\r\n      this.head.push(`${prop}:${val}`);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Outlines the properties you wish to be returned from the query.\r\n   * @param properties representing each attribute you want Returned\r\n   */\r\n  find(...searches: any[]) { // THIS NEED TO BE A \"FUNCTION\" to scope 'arguments'\r\n    if (!searches) {\r\n      throw new TypeError(`find value can not be >>falsy<<`);\r\n    }\r\n    // if its a string.. it may have other values\r\n    // else it sould be an Object or Array of maped values\r\n    const searchKeys = (searches.length === 1 && Array.isArray(searches[0])) ? searches[0] : searches;\r\n    this.body = this.parceFind(searchKeys);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set an alias for this result.\r\n   * @param alias\r\n   */\r\n  setAlias(alias: string) {\r\n    this.alias = alias;\r\n  }\r\n\r\n  /**\r\n   * Return to the formatted query string\r\n   * @return\r\n   */\r\n  toString() {\r\n    if (this.body === undefined) {\r\n      throw new ReferenceError(`return properties are not defined. use the 'find' function to defined them`);\r\n    }\r\n\r\n    return `${(this.alias) ? (this.alias + ':') : ''} ${this.queryFnName} ${(this.head.length > 0) ? '(' + this.head.join(',') + ')' : ''}  { ${this.body} }`;\r\n  }\r\n\r\n  // --\r\n  // PRIVATE FUNCTIONS\r\n  // -----------------\r\n\r\n  private parceFind(_levelA: any[]) {\r\n    const propsA = _levelA.map((currentValue, index) => {\r\n      const itemX = _levelA[index];\r\n\r\n      if (itemX instanceof GraphqlQueryBuilder) {\r\n        return itemX.toString();\r\n      } else if (!Array.isArray(itemX) && typeof itemX === 'object') {\r\n        const propsAA = Object.keys(itemX);\r\n        if (1 !== propsAA.length) {\r\n          throw new RangeError(`Alias objects should only have one value. was passed: ${JSON.stringify(itemX)}`);\r\n        }\r\n        const propS = propsAA[0];\r\n        const item = itemX[propS];\r\n\r\n        if (Array.isArray(item)) {\r\n          return new GraphqlQueryBuilder(propS).find(item);\r\n        }\r\n        return `${propS} : ${item} `;\r\n      } else if (typeof itemX === 'string') {\r\n        return itemX;\r\n      } else {\r\n        throw new RangeError(`cannot handle Find value of ${itemX}`);\r\n      }\r\n    });\r\n\r\n    return propsA.join(',');\r\n  }\r\n\r\n  private getGraphQLValue(value: any) {\r\n    if (typeof value === 'string') {\r\n      value = JSON.stringify(value);\r\n    } else if (Array.isArray(value)) {\r\n      value = value.map(item => {\r\n        return this.getGraphQLValue(item);\r\n      }).join();\r\n      value = `[${value}]`;\r\n    } else if (value instanceof Date) {\r\n      value = JSON.stringify(value);\r\n    } else if (value !== null && typeof value === 'object') {\r\n      value = this.objectToString(value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private objectToString(obj: any) {\r\n    const sourceA = [];\r\n\r\n    for (const prop of Object.keys(obj)) {\r\n      if (typeof obj[prop] === 'function') {\r\n        continue;\r\n      }\r\n      sourceA.push(`${prop}:${this.getGraphQLValue(obj[prop])}`);\r\n    }\r\n    return `{${sourceA.join()}}`;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport { mapOperatorType, mapOperatorByFieldType } from './utilities';\nimport {\n  BackendService,\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  ColumnSort,\n  CurrentFilter,\n  CurrentPagination,\n  CurrentSorter,\n  FieldType,\n  FilterChangedArgs,\n  GraphqlCursorPaginationOption,\n  GraphqlDatasetFilter,\n  GraphqlFilteringOption,\n  GraphqlPaginationOption,\n  GraphqlServiceOption,\n  GraphqlSortingOption,\n  GridOption,\n  Pagination,\n  PaginationChangedArgs,\n  SortChangedArgs,\n  SortDirection,\n  SortDirectionString\n} from './../models/index';\nimport QueryBuilder from './graphqlQueryBuilder';\n\n// timer for keeping track of user typing waits\nlet timer: any;\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\nconst DEFAULT_ITEMS_PER_PAGE = 25;\nconst DEFAULT_PAGE_SIZE = 20;\n\nexport class GraphqlService implements BackendService {\n  private _currentFilters: ColumnFilters | CurrentFilter[];\n  private _currentPagination: CurrentPagination;\n  private _currentSorters: CurrentSorter[];\n  private _columnDefinitions: Column[];\n  private _grid: any;\n  options: GraphqlServiceOption;\n  pagination: Pagination | undefined;\n  defaultOrderBy: GraphqlSortingOption = { field: 'id', direction: SortDirection.ASC };\n  defaultPaginationOptions: GraphqlPaginationOption | GraphqlCursorPaginationOption = {\n    first: DEFAULT_ITEMS_PER_PAGE,\n    offset: 0\n  };\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Build the GraphQL query, since the service include/exclude cursor, the output query will be different.\n   * @param serviceOptions GraphqlServiceOption\n   */\n  buildQuery() {\n    if (!this.options || !this.options.datasetName || (!this._columnDefinitions && !this.options.columnDefinitions)) {\n      throw new Error('GraphQL Service requires \"datasetName\" & \"columnDefinitions\" properties for it to work');\n    }\n\n    // get the column definitions and exclude some if they were tagged as excluded\n    let columnDefinitions = this._columnDefinitions || this.options.columnDefinitions;\n    columnDefinitions = columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\n\n    const queryQb = new QueryBuilder('query');\n    const datasetQb = new QueryBuilder(this.options.datasetName);\n    const dataQb = (this.options.isWithCursor) ? new QueryBuilder('edges') : new QueryBuilder('nodes');\n\n    // get all the columnds Ids for the filters to work\n    let columnIds: string[] = [];\n    if (columnDefinitions && Array.isArray(columnDefinitions)) {\n      for (const column of columnDefinitions) {\n        columnIds.push(column.field);\n\n        // if extra \"fields\" are passed, also push them to columnIds\n        if (column.fields) {\n          columnIds.push(...column.fields);\n        }\n      }\n      // columnIds = columnDefinitions.map((column) => column.field);\n    } else {\n      columnIds = this.options.columnIds || [];\n    }\n\n    // Slickgrid also requires the \"id\" field to be part of DataView\n    // add it to the GraphQL query if it wasn't already part of the list\n    if (columnIds.indexOf('id') === -1) {\n      columnIds.unshift('id');\n    }\n\n    const filters = this.buildFilterQuery(columnIds);\n\n    if (this.options.isWithCursor) {\n      // ...pageInfo { hasNextPage, endCursor }, edges { cursor, node { _filters_ } }\n      const pageInfoQb = new QueryBuilder('pageInfo');\n      pageInfoQb.find('hasNextPage', 'endCursor');\n      dataQb.find(['cursor', { node: filters }]);\n      datasetQb.find(['totalCount', pageInfoQb, dataQb]);\n    } else {\n      // ...nodes { _filters_ }\n      dataQb.find(filters);\n      datasetQb.find(['totalCount', dataQb]);\n    }\n\n    // add dataset filters, could be Pagination and SortingFilters and/or FieldFilters\n    const datasetFilters: GraphqlDatasetFilter = {\n      ...this.options.paginationOptions,\n      first: ((this.options.paginationOptions && this.options.paginationOptions.first) ? this.options.paginationOptions.first : ((this.pagination && this.pagination.pageSize) ? this.pagination.pageSize : null)) || this.defaultPaginationOptions.first\n    };\n\n    if (!this.options.isWithCursor) {\n      datasetFilters.offset = ((this.options.paginationOptions && this.options.paginationOptions.hasOwnProperty('offset')) ? +this.options.paginationOptions['offset'] : 0);\n    }\n\n    if (this.options.sortingOptions && Array.isArray(this.options.sortingOptions) && this.options.sortingOptions.length > 0) {\n      // orderBy: [{ field:x, direction: 'ASC' }]\n      datasetFilters.orderBy = this.options.sortingOptions;\n    }\n    if (this.options.filteringOptions && Array.isArray(this.options.filteringOptions) && this.options.filteringOptions.length > 0) {\n      // filterBy: [{ field: date, operator: '>', value: '2000-10-10' }]\n      datasetFilters.filterBy = this.options.filteringOptions;\n    }\n    if (this.options.addLocaleIntoQuery) {\n      // first: 20, ... locale: \"en-CA\"\n      datasetFilters.locale = this._gridOptions && this._gridOptions.i18n && this._gridOptions.i18n.currentLang || 'en';\n    }\n    if (this.options.extraQueryArguments) {\n      // first: 20, ... userId: 123\n      for (const queryArgument of this.options.extraQueryArguments) {\n        datasetFilters[queryArgument.field] = queryArgument.value;\n      }\n    }\n\n    // query { users(first: 20, orderBy: [], filterBy: [])}\n    datasetQb.filter(datasetFilters);\n    queryQb.find(datasetQb);\n\n    const enumSearchProperties = ['direction:', 'field:', 'operator:'];\n    return this.trimDoubleQuotesOnEnumField(queryQb.toString(), enumSearchProperties, this.options.keepArgumentFieldDoubleQuotes || false);\n  }\n\n  /**\n   * From an input array of strings, we want to build a GraphQL query string.\n   * The process has to take the dot notation and parse it into a valid GraphQL query\n   * Following this SO answer https://stackoverflow.com/a/47705476/1212166\n   *\n   * INPUT\n   *  ['firstName', 'lastName', 'billing.address.street', 'billing.address.zip']\n   * OUTPUT\n   * firstName, lastName, billing{address{street, zip}}\n   * @param inputArray\n   */\n  buildFilterQuery(inputArray: string[]) {\n\n    const set = (o: any = {}, a: any) => {\n      const k = a.shift();\n      o[k] = a.length ? set(o[k], a) : null;\n      return o;\n    };\n\n    const output = inputArray.reduce((o: any, a: string) => set(o, a.split('.')), {});\n\n    return JSON.stringify(output)\n      .replace(/\\\"|\\:|null/g, '')\n      .replace(/^\\{/, '')\n      .replace(/\\}$/, '');\n  }\n\n  init(serviceOptions?: GraphqlServiceOption, pagination?: Pagination, grid?: any): void {\n    this._grid = grid;\n    this.options = serviceOptions || {};\n    this.pagination = pagination;\n\n    if (grid && grid.getColumns) {\n      this._columnDefinitions = serviceOptions.columnDefinitions || grid.getColumns();\n    }\n  }\n\n  /**\n   * Get an initialization of Pagination options\n   * @return Pagination Options\n   */\n  getInitPaginationOptions(): GraphqlDatasetFilter {\n    return (this.options.isWithCursor) ? { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE) } : { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE), offset: 0 };\n  }\n\n  /** Get the GraphQL dataset name */\n  getDatasetName(): string {\n    return this.options.datasetName || '';\n  }\n\n  /** Get the Filters that are currently used by the grid */\n  getCurrentFilters(): ColumnFilters | CurrentFilter[] {\n    return this._currentFilters;\n  }\n\n  /** Get the Pagination that is currently used by the grid */\n  getCurrentPagination(): CurrentPagination {\n    return this._currentPagination;\n  }\n\n  /** Get the Sorters that are currently used by the grid */\n  getCurrentSorters(): CurrentSorter[] {\n    return this._currentSorters;\n  }\n\n  /*\n   * Reset the pagination options\n   */\n  resetPaginationOptions() {\n    let paginationOptions;\n    if (this.options.isWithCursor) {\n      // first, last, after, before\n      paginationOptions = {\n        after: '',\n        before: undefined,\n        last: undefined\n      } as GraphqlCursorPaginationOption;\n    } else {\n      // first, last, offset\n      paginationOptions = (this.options.paginationOptions || this.getInitPaginationOptions()) as GraphqlPaginationOption;\n      paginationOptions.offset = 0;\n    }\n\n    // save current pagination as Page 1 and page size as \"first\" set size\n    this._currentPagination = {\n      pageNumber: 1,\n      pageSize: paginationOptions.first\n    };\n\n    this.updateOptions({ paginationOptions });\n  }\n\n  updateOptions(serviceOptions?: GraphqlServiceOption) {\n    this.options = { ...this.options, ...serviceOptions };\n  }\n\n  /*\n   * FILTERING\n   */\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\n    const gridOptions: GridOption = this._gridOptions || args.grid.getOptions();\n    const backendApi = gridOptions.backendServiceApi;\n\n    if (backendApi === undefined) {\n      throw new Error('Something went wrong in the GraphqlService, \"backendServiceApi\" is not initialized');\n    }\n\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\n    let debounceTypingDelay = 0;\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\n    }\n\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    this._currentFilters = this.castFilterToColumnFilter(args.columnFilters);\n\n    const promise = new Promise<string>((resolve, reject) => {\n      if (!args || !args.grid) {\n        throw new Error('Something went wrong when trying create the GraphQL Backend Service, it seems that \"args\" is not populated correctly');\n      }\n\n      // reset Pagination, then build the GraphQL query which we will use in the WebAPI callback\n      // wait a minimum user typing inactivity before processing any query\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        // loop through all columns to inspect filters & set the query\n        this.updateFilters(args.columnFilters, false);\n\n        this.resetPaginationOptions();\n        resolve(this.buildQuery());\n      }, debounceTypingDelay);\n    });\n\n    return promise;\n  }\n\n  /*\n   * PAGINATION\n   * With cursor, the query can have 4 arguments (first, after, last, before), for example:\n   *   users (first:20, after:\"YXJyYXljb25uZWN0aW9uOjM=\") {\n   *     totalCount\n   *     pageInfo {\n   *       hasNextPage\n   *       endCursor\n   *     }\n   *     edges {\n   *       cursor\n   *       node {\n   *         name\n   *         gender\n   *       }\n   *     }\n   *   }\n   * Without cursor, the query can have 3 arguments (first, last, offset), for example:\n   *   users (first:20, offset: 10) {\n   *     totalCount\n   *     nodes {\n   *       name\n   *       gender\n   *     }\n   *   }\n   */\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\n    const pageSize = +(args.pageSize || ((this.pagination) ? this.pagination.pageSize : DEFAULT_PAGE_SIZE));\n    this.updatePagination(args.newPage, pageSize);\n\n    // build the GraphQL query which we will use in the WebAPI callback\n    return this.buildQuery();\n  }\n\n  /*\n   * SORTING\n   * we will use sorting as per a Facebook suggestion on a Github issue (with some small changes)\n   * https://github.com/graphql/graphql-relay-js/issues/20#issuecomment-220494222\n   */\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\n\n    // loop through all columns to inspect sorters & set the query\n    this.updateSorters(sortColumns);\n\n    // build the GraphQL query which we will use in the WebAPI callback\n    return this.buildQuery();\n  }\n\n  /**\n   * loop through all columns to inspect filters & update backend service filteringOptions\n   * @param columnFilters\n   */\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset: boolean) {\n    const searchByArray: GraphqlFilteringOption[] = [];\n    let searchValue: string | string[];\n\n    for (const columnId in columnFilters) {\n      if (columnFilters.hasOwnProperty(columnId)) {\n        const columnFilter = columnFilters[columnId];\n\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\n        let columnDef: Column | undefined;\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\n          columnDef = this._columnDefinitions.find((column: Column) => column.id === columnFilter.columnId);\n        } else {\n          columnDef = columnFilter.columnDef;\n        }\n        if (!columnDef) {\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\n        }\n\n        const fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\n        if (typeof fieldSearchValue === 'undefined') {\n          fieldSearchValue = '';\n        }\n\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\n          throw new Error(`GraphQL filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {model: Filters.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\n        }\n\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n        let operator = columnFilter.operator || ((matches) ? matches[1] : '');\n        searchValue = (!!matches) ? matches[2] : '';\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n\n        // no need to query if search value is empty\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\n          continue;\n        }\n\n        // when having more than 1 search term (we need to create a CSV string for GraphQL \"IN\" or \"NOT IN\" filter search)\n        if (searchTerms && searchTerms.length > 1) {\n          searchValue = searchTerms.join(',');\n        } else if (typeof searchValue === 'string') {\n          // escaping the search value\n          searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\n          if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\n            operator = (operator === '*' || operator === '*z') ? 'endsWith' : 'startsWith';\n          }\n        }\n\n        // if we didn't find an Operator but we have a Filter Type, we should use default Operator\n        // multipleSelect is \"IN\", while singleSelect is \"EQ\", else don't map any operator\n        if (!operator && columnDef.filter) {\n          operator = columnDef.filter.operator;\n        }\n\n        // if we still don't have an operator find the proper Operator to use by it's field type\n        if (!operator) {\n          operator = mapOperatorByFieldType(columnDef.type || FieldType.string);\n        }\n\n        searchByArray.push({\n          field: fieldName,\n          operator: mapOperatorType(operator),\n          value: searchValue\n        });\n      }\n    }\n\n    // update the service options with filters for the buildQuery() to work later\n    this.updateOptions({ filteringOptions: searchByArray });\n  }\n\n  /**\n   * Update the pagination component with it's new page number and size\n   * @param newPage\n   * @param pageSize\n   */\n  updatePagination(newPage: number, pageSize: number) {\n    this._currentPagination = {\n      pageNumber: newPage,\n      pageSize\n    };\n\n    let paginationOptions;\n    if (this.options.isWithCursor) {\n      paginationOptions = {\n        first: pageSize\n      };\n    } else {\n      paginationOptions = {\n        first: pageSize,\n        offset: (newPage - 1) * pageSize\n      };\n    }\n\n    this.updateOptions({ paginationOptions });\n  }\n\n  /**\n   * loop through all columns to inspect sorters & update backend service sortingOptions\n   * @param columnFilters\n   */\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\n    let currentSorters: CurrentSorter[] = [];\n    let graphqlSorters: GraphqlSortingOption[] = [];\n\n    if (!sortColumns && presetSorters) {\n      // make the presets the current sorters, also make sure that all direction are in uppercase for GraphQL\n      currentSorters = presetSorters;\n      currentSorters.forEach((sorter) => sorter.direction = sorter.direction.toUpperCase() as SortDirectionString);\n\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\n      const tmpSorterArray = currentSorters.map((sorter) => {\n        const columnDef = this._columnDefinitions.find((column: Column) => column.id === sorter.columnId);\n        if (columnDef) {\n          graphqlSorters.push({\n            field: (columnDef.queryField || columnDef.queryFieldSorter || columnDef.field || columnDef.id) + '',\n            direction: sorter.direction\n          });\n        }\n        return {\n          columnId: sorter.columnId,\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\n        };\n      });\n      this._grid.setSortColumns(tmpSorterArray);\n    } else if (sortColumns && !presetSorters) {\n      // build the orderBy array, it could be multisort, example\n      // orderBy:[{field: lastName, direction: ASC}, {field: firstName, direction: DESC}]\n      if (sortColumns && sortColumns.length === 0) {\n        graphqlSorters = new Array(this.defaultOrderBy); // when empty, use the default sort\n        currentSorters = new Array({ columnId: this.defaultOrderBy.field, direction: this.defaultOrderBy.direction });\n      } else {\n        if (sortColumns) {\n          for (const column of sortColumns) {\n            if (column && column.sortCol) {\n              currentSorters.push({\n                columnId: column.sortCol.id + '',\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\n              });\n\n              graphqlSorters.push({\n                field: (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '',\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\n              });\n            }\n          }\n        }\n      }\n    }\n\n    // keep current Sorters and update the service options with the new sorting\n    this._currentSorters = currentSorters;\n    this.updateOptions({ sortingOptions: graphqlSorters });\n  }\n\n  /**\n   * A function which takes an input string and removes double quotes only\n   * on certain fields are identified as GraphQL enums (except fields with dot notation)\n   * For example let say we identified (\"direction:\", \"sort\") as word which are GraphQL enum fields\n   * then the result will be:\n   * FROM\n   * query { users (orderBy:[{field:\"firstName\", direction:\"ASC\"} }]) }\n   * TO\n   * query { users (orderBy:[{field: firstName, direction: ASC}})}\n   *\n   * EXCEPTIONS (fields with dot notation \".\" which are inside a \"field:\")\n   * these fields will keep double quotes while everything else will be stripped of double quotes\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: \"ASC\"} }\n   * TO\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: ASC}}\n   * @param inputStr input string\n   * @param enumSearchWords array of enum words to filter\n   * @returns outputStr output string\n   */\n  trimDoubleQuotesOnEnumField(inputStr: string, enumSearchWords: string[], keepArgumentFieldDoubleQuotes: boolean) {\n    const patternWordInQuotes = `\\s?((field:\\s*)?\".*?\")`;\n    let patternRegex = enumSearchWords.join(patternWordInQuotes + '|');\n    patternRegex += patternWordInQuotes; // the last one should also have the pattern but without the pipe \"|\"\n    // example with (field: & direction:):  /field:s?(\".*?\")|direction:s?(\".*?\")/\n    const reg = new RegExp(patternRegex, 'g');\n\n    return inputStr.replace(reg, (group1, group2, group3) => {\n      // remove double quotes except when the string starts with a \"field:\"\n      let removeDoubleQuotes = true;\n      if (group1.startsWith('field:') && keepArgumentFieldDoubleQuotes) {\n        removeDoubleQuotes = false;\n      }\n      const rep = removeDoubleQuotes ? group1.replace(/\"/g, '') : group1;\n      return rep;\n    });\n  }\n\n  //\n  // private functions\n  // -------------------\n  /**\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\n   * @param columnFilters\n   */\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    const filtersArray: ColumnFilter[] = (typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters;\n\n    return filtersArray.map((filter) => {\n      const columnDef = filter.columnDef;\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\n      if (filter.operator) {\n        tmpFilter.operator = filter.operator;\n      }\n      if (Array.isArray(filter.searchTerms)) {\n        tmpFilter.searchTerms = filter.searchTerms;\n      }\n      return tmpFilter;\n    });\n  }\n}\n",
    "declare interface StringConstructor {\r\n  allTitleCase(inputStr: string): string;\r\n  format(inputStr: string, args: any): string;\r\n  padZero(length: number): string;\r\n  trim(inputStr: string): string;\r\n  titleCase(inputStr: string): string;\r\n}\r\n\r\n\r\nString.format = function(format: string, args): string {\r\n  // const args = (Array.isArray(arguments[1])) ? arguments[1] : Array.prototype.slice.call(arguments, 1);\r\n\r\n  return format.replace(/{(\\d+)}/g, function (match, number) {\r\n    return (typeof args[number] !== 'undefined') ? args[number] : match;\r\n  });\r\n};\r\n\r\nString.padZero = function (this: string, length: number) {\r\n  let s = this;\r\n  while (s.length < length) {\r\n    s = '0' + s;\r\n  }\r\n  return s;\r\n};\r\n\r\n/**\r\n * Trim any extra white space from the string\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.trim = function(inputStr: string): string {\r\n  return inputStr ? inputStr.replace(/\\s+/g, ' ') : inputStr;\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.allTitleCase = function(inputStr: string): string {\r\n  return inputStr.replace(/\\w\\S*/g, function(outputStr) {\r\n     return outputStr.charAt(0).toUpperCase() + outputStr.substr(1).toLowerCase();\r\n  });\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n*/\r\nString.titleCase = function(inputStr: string): string {\r\n  return inputStr.charAt(0).toUpperCase() + inputStr.slice(1);\r\n};\r\n",
    "import './global-utilities';\r\nimport { CaseType, OdataOption } from './../models/index';\r\n\r\nexport class OdataService {\r\n  _columnFilters: any;\r\n  _defaultSortBy: string;\r\n  _odataOptions: OdataOption;\r\n\r\n  constructor() {\r\n    this._odataOptions = {\r\n      filterQueue: [],\r\n      orderBy: ''\r\n    };\r\n    this._defaultSortBy = '';\r\n    this._columnFilters = {};\r\n  }\r\n\r\n  /*\r\n    * Build the OData query string from all the options provided\r\n    * @return string OData query\r\n    */\r\n  buildQuery(): string {\r\n    this._odataOptions.filterQueue = [];\r\n    const queryTmpArray = [];\r\n\r\n    if (this._odataOptions.top) {\r\n      queryTmpArray.push(`$top=${this._odataOptions.top}`);\r\n    }\r\n    if (this._odataOptions.skip) {\r\n      queryTmpArray.push(`$skip=${this._odataOptions.skip}`);\r\n    }\r\n    if (this._odataOptions.orderBy) {\r\n      let argument = '';\r\n      if (Array.isArray(this._odataOptions.orderBy)) {\r\n        argument = this._odataOptions.orderBy.join(','); // csv, that will form a query example like: $orderby=RoleName asc, Id desc\r\n      } else {\r\n        argument = this._odataOptions.orderBy;\r\n      }\r\n      queryTmpArray.push(`$orderby=${argument}`);\r\n    }\r\n    if (this._odataOptions.filterBy || this._odataOptions.filter) {\r\n      if (this._odataOptions.filter) {\r\n        this._odataOptions.filterQueue = [];\r\n        let filterStr = this._odataOptions.filter;\r\n        if (Array.isArray(this._odataOptions.filter)) {\r\n          filterStr = this._odataOptions.filter.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n        }\r\n        this._odataOptions.filterQueue.push(`(${filterStr})`);\r\n      }\r\n      // filterBy are passed manually by the user, however we will only add it if the column wasn't yet filtered\r\n      if (!!this._odataOptions.filterBy && !!this._odataOptions.filterBy.fieldName && !this._columnFilters[this._odataOptions.filterBy.fieldName.toLowerCase()]) {\r\n        if (this._odataOptions.filterBy.searchTerm !== '') {\r\n          this.saveColumnFilter(this._odataOptions.filterBy.fieldName.toLowerCase(), this._odataOptions.filterBy.searchTerm, this._odataOptions.filterBy.searchTerms);\r\n          this.updateFilterFromListTerms(this._odataOptions.filterBy);\r\n        }\r\n      }\r\n    }\r\n    if (this._odataOptions.filterQueue.length > 0) {\r\n      const query = this._odataOptions.filterQueue.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n      this._odataOptions.filter = query; // overwrite with\r\n      queryTmpArray.push(`$filter=${query}`);\r\n    }\r\n\r\n    // join all the odata functions by a '&'\r\n    return queryTmpArray.join('&');\r\n  }\r\n\r\n  getFilterByColumn(columnName: string): string {\r\n    return (!!this._columnFilters[columnName]) ? this._columnFilters[columnName] : null;\r\n  }\r\n\r\n  getFilterCount(): number {\r\n    return (this._odataOptions.filterQueue) ? this._odataOptions.filterQueue.length : 0;\r\n  }\r\n\r\n  get columnFilters(): any[] {\r\n    return this._columnFilters;\r\n  }\r\n\r\n  get options(): OdataOption {\r\n    return this._odataOptions;\r\n  }\r\n\r\n  set options(options: OdataOption) {\r\n    this._odataOptions = options;\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string) {\r\n    delete this._columnFilters[fieldName];\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: any, searchTerms?: any[]) {\r\n    this._columnFilters[fieldName] = {\r\n      search: searchTerms,\r\n      value\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update the filter by a list of terms usually passed manually by the user as default filters\r\n   * @param filterOptions\r\n   * @returns\r\n   */\r\n  updateFilterFromListTerms(filterOptions: any) {\r\n    // build the filter query\r\n    if (Array.isArray(filterOptions)) {\r\n      filterOptions.forEach((filterOptionObject) => {\r\n        this.updateFilterFromTerm(filterOptionObject);\r\n      });\r\n    } else {\r\n      this.updateFilterFromTerm(filterOptions);\r\n    }\r\n  }\r\n\r\n  updateFilterFromTerm(filterOptions: any) {\r\n    let searchBy = '';\r\n    const tmpSearchByArray = [];\r\n    const fieldName = filterOptions.fieldName;\r\n    const fieldSearchTerms = filterOptions.searchTerms;\r\n    const operator = filterOptions.operator;\r\n\r\n    // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n    if (!!fieldSearchTerms && fieldSearchTerms.length > 0) {\r\n      const tmpSearchTerms = [];\r\n\r\n      if (operator === 'IN') {\r\n        // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n        for (let j = 0, lnj = fieldSearchTerms.length; j < lnj; j++) {\r\n          tmpSearchTerms.push(`${fieldName} eq '${fieldSearchTerms[j]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' or ');\r\n        searchBy = `$(${searchBy})`;\r\n      } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n        // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n        for (let k = 0, lnk = fieldSearchTerms.length; k < lnk; k++) {\r\n          tmpSearchTerms.push(`${fieldName} ne '${fieldSearchTerms[k]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' and ');\r\n        searchBy = `$(${searchBy})`;\r\n      }\r\n    }\r\n\r\n    // push to our temp array and also trim white spaces\r\n    tmpSearchByArray.push(String.trim(searchBy));\r\n\r\n    // add to the filter queue only if it doesn't exist in the queue\r\n    const filter = (tmpSearchByArray.length > 0) ? tmpSearchByArray.join(' and ') : '';\r\n    if (this._odataOptions.filterQueue && this._odataOptions.filterQueue.indexOf(filter) === -1) {\r\n      this._odataOptions.filterQueue.push(filter);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change any OData options that will be used to build the query\r\n   * @param object options\r\n   */\r\n  updateOptions(options: OdataOption) {\r\n    for (const property of Object.keys(options)) {\r\n      if (options.hasOwnProperty(property)) {\r\n        this._odataOptions[property] = options[property]; // replace of the property\r\n      }\r\n\r\n      // we need to keep the defaultSortBy for references whenever the user removes his Sorting\r\n      // then we would revert to the defaultSortBy and the only way is to keep a hard copy here\r\n      if (property === 'orderBy' || property === 'sortBy') {\r\n        let sortBy = options[property];\r\n\r\n        // make sure first char of each orderBy field is capitalize\r\n        if (this._odataOptions.caseType === CaseType.pascalCase) {\r\n          if (Array.isArray(sortBy)) {\r\n            sortBy.forEach((field, index, inputArray) => {\r\n              inputArray[index] = String.titleCase(field);\r\n            });\r\n          } else {\r\n            sortBy = String.titleCase(options[property]);\r\n          }\r\n        }\r\n        this._odataOptions.orderBy = sortBy;\r\n        this._defaultSortBy = sortBy;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
    "import './global-utilities';\nimport { parseUtcDate } from './utilities';\nimport { Injectable } from '@angular/core';\nimport {\n  BackendService,\n  CaseType,\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  ColumnSort,\n  CurrentFilter,\n  CurrentPagination,\n  CurrentSorter,\n  FilterChangedArgs,\n  FieldType,\n  GridOption,\n  OdataOption,\n  Pagination,\n  PaginationChangedArgs,\n  SearchTerm,\n  SortChangedArgs,\n  SortDirection,\n  SortDirectionString\n} from './../models/index';\nimport { OdataService } from './odata.service';\n\nlet timer: any;\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\nconst DEFAULT_ITEMS_PER_PAGE = 25;\nconst DEFAULT_PAGE_SIZE = 20;\n\n@Injectable()\nexport class GridOdataService implements BackendService {\n  private _currentFilters: CurrentFilter[];\n  private _currentPagination: CurrentPagination;\n  private _currentSorters: CurrentSorter[];\n  private _columnDefinitions: Column[];\n  private _grid: any;\n  odataService: OdataService;\n  options: OdataOption;\n  pagination: Pagination | undefined;\n  defaultOptions: OdataOption = {\n    top: DEFAULT_ITEMS_PER_PAGE,\n    orderBy: '',\n    caseType: CaseType.pascalCase\n  };\n\n  constructor() {\n    this.odataService = new OdataService();\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  buildQuery(): string {\n    return this.odataService.buildQuery();\n  }\n\n  init(options: OdataOption, pagination?: Pagination, grid?: any): void {\n    this._grid = grid;\n    const mergedOptions = { ...this.defaultOptions, ...options };\n    if (pagination && pagination.pageSize) {\n      mergedOptions.top = pagination.pageSize;\n    }\n    this.odataService.options = { ...mergedOptions, top: mergedOptions.top || this.defaultOptions.top };\n    this.options = this.odataService.options;\n    this.pagination = pagination;\n\n    // save current pagination as Page 1 and page size as \"top\"\n    this._currentPagination = {\n      pageNumber: 1,\n      pageSize: this.odataService.options.top || this.defaultOptions.top\n    };\n\n    if (grid && grid.getColumns) {\n      this._columnDefinitions = options.columnDefinitions || grid.getColumns();\n      this._columnDefinitions = this._columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\n    }\n  }\n\n  updateOptions(serviceOptions?: OdataOption) {\n    this.options = { ...this.options, ...serviceOptions };\n  }\n\n  removeColumnFilter(fieldName: string): void {\n    this.odataService.removeColumnFilter(fieldName);\n  }\n\n  /** Get the Filters that are currently used by the grid */\n  getCurrentFilters(): CurrentFilter[] {\n    return this._currentFilters;\n  }\n\n  /** Get the Pagination that is currently used by the grid */\n  getCurrentPagination(): CurrentPagination {\n    return this._currentPagination;\n  }\n\n  /** Get the Sorters that are currently used by the grid */\n  getCurrentSorters(): CurrentSorter[] {\n    return this._currentSorters;\n  }\n\n  /*\n   * Reset the pagination options\n   */\n  resetPaginationOptions() {\n    this.odataService.updateOptions({\n      skip: 0\n    });\n  }\n\n  saveColumnFilter(fieldName: string, value: string, terms?: any[]) {\n    this.odataService.saveColumnFilter(fieldName, value, terms);\n  }\n\n  /*\n   * FILTERING\n   */\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\n    const serviceOptions: GridOption = args.grid.getOptions();\n    const backendApi = serviceOptions.backendServiceApi;\n\n    if (backendApi === undefined) {\n      throw new Error('Something went wrong in the GridOdataService, \"backendServiceApi\" is not initialized');\n    }\n\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\n    let debounceTypingDelay = 0;\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\n    }\n\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    this._currentFilters = this.castFilterToColumnFilter(args.columnFilters);\n\n    const promise = new Promise<string>((resolve, reject) => {\n      // reset Pagination, then build the OData query which we will use in the WebAPI callback\n      // wait a minimum user typing inactivity before processing any query\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        // loop through all columns to inspect filters & set the query\n        this.updateFilters(args.columnFilters);\n\n        this.resetPaginationOptions();\n        resolve(this.odataService.buildQuery());\n      }, debounceTypingDelay);\n    });\n\n    return promise;\n  }\n\n  /*\n   * PAGINATION\n   */\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\n    const pageSize = +(args.pageSize || DEFAULT_PAGE_SIZE);\n    this.updatePagination(args.newPage, pageSize);\n\n    // build the OData query which we will use in the WebAPI callback\n    return this.odataService.buildQuery();\n  }\n\n  /*\n   * SORTING\n   */\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\n\n    // loop through all columns to inspect sorters & set the query\n    this.updateSorters(sortColumns);\n\n    // build the OData query which we will use in the WebAPI callback\n    return this.odataService.buildQuery();\n  }\n\n  /**\n   * loop through all columns to inspect filters & update backend service filteringOptions\n   * @param columnFilters\n   */\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset?: boolean) {\n    let searchBy = '';\n    const searchByArray: string[] = [];\n\n    // loop through all columns to inspect filters\n    for (const columnId in columnFilters) {\n      if (columnFilters.hasOwnProperty(columnId)) {\n        const columnFilter = columnFilters[columnId];\n\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\n        let columnDef: Column | undefined;\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\n          columnDef = this._columnDefinitions.find((column: Column) => {\n            return column.id === columnFilter.columnId;\n          });\n        } else {\n          columnDef = columnFilter.columnDef;\n        }\n        if (!columnDef) {\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\n        }\n\n        let fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\n        const fieldType = columnDef.type || 'string';\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\n        if (typeof fieldSearchValue === 'undefined') {\n          fieldSearchValue = '';\n        }\n\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\n          throw new Error(`ODdata filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {model: Filters.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\n        }\n\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n        const operator = columnFilter.operator || ((matches) ? matches[1] : '');\n        let searchValue = (!!matches) ? matches[2] : '';\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n        const bypassOdataQuery = columnFilter.bypassBackendQuery || false;\n\n        // no need to query if search value is empty\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\n          this.removeColumnFilter(fieldName);\n          continue;\n        }\n\n        // escaping the search value\n        searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\n        searchValue = encodeURIComponent(searchValue); // encode URI of the final search value\n\n        // extra query arguments\n        if (bypassOdataQuery) {\n          // push to our temp array and also trim white spaces\n          if (fieldName) {\n            this.saveColumnFilter(fieldName, fieldSearchValue, searchTerms);\n          }\n        } else {\n          searchBy = '';\n\n          // titleCase the fieldName so that it matches the WebApi names\n          if (this.odataService.options.caseType === CaseType.pascalCase) {\n            fieldName = String.titleCase(fieldName || '');\n          }\n\n          // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\n          if (searchTerms && searchTerms.length > 1) {\n            const tmpSearchTerms = [];\n\n            if (operator === 'IN') {\n              // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\n              for (let j = 0, lnj = searchTerms.length; j < lnj; j++) {\n                tmpSearchTerms.push(`${fieldName} eq '${searchTerms[j]}'`);\n              }\n              searchBy = tmpSearchTerms.join(' or ');\n              searchBy = `(${searchBy})`;\n            } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\n              // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\n              for (let k = 0, lnk = searchTerms.length; k < lnk; k++) {\n                tmpSearchTerms.push(`${fieldName} ne '${searchTerms[k]}'`);\n              }\n              searchBy = tmpSearchTerms.join(' and ');\n              searchBy = `(${searchBy})`;\n            }\n          } else if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar !== '') {\n            // first/last character is a '*' will be a startsWith or endsWith\n            searchBy = (operator === '*' || operator === '*z')\n              ? `endswith(${fieldName}, '${searchValue}')`\n              : `startswith(${fieldName}, '${searchValue}')`;\n          } else if (fieldType === FieldType.date) {\n            // date field needs to be UTC and within DateTime function\n            const dateFormatted = parseUtcDate(searchValue, true);\n            if (dateFormatted) {\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} DateTime'${dateFormatted}'`;\n            }\n          } else if (fieldType === FieldType.string) {\n            // string field needs to be in single quotes\n            if (operator === '') {\n              searchBy = `substringof('${searchValue}', ${fieldName})`;\n            } else {\n              // searchBy = `substringof('${searchValue}', ${fieldNameCased}) ${this.mapOdataOperator(operator)} true`;\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} '${searchValue}'`;\n            }\n          } else {\n            // any other field type (or undefined type)\n            searchValue = fieldType === FieldType.number ? searchValue : `'${searchValue}'`;\n            searchBy = `${fieldName} ${this.mapOdataOperator(operator)} ${searchValue}`;\n          }\n\n          // push to our temp array and also trim white spaces\n          if (searchBy !== '') {\n            searchByArray.push(String.trim(searchBy));\n            this.saveColumnFilter(fieldName || '', fieldSearchValue, searchTerms);\n          }\n        }\n      }\n    }\n\n    // update the service options with filters for the buildQuery() to work later\n    this.odataService.updateOptions({\n      filter: (searchByArray.length > 0) ? searchByArray.join(' and ') : '',\n      skip: undefined\n    });\n  }\n\n  /**\n   * Update the pagination component with it's new page number and size\n   * @param newPage\n   * @param pageSize\n   */\n  updatePagination(newPage: number, pageSize: number) {\n    this._currentPagination = {\n      pageNumber: newPage,\n      pageSize\n    };\n\n    this.odataService.updateOptions({\n      top: pageSize,\n      skip: (newPage - 1) * pageSize\n    });\n  }\n\n  /**\n   * loop through all columns to inspect sorters & update backend service orderBy\n   * @param columnFilters\n   */\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\n    let sortByArray: any[] = [];\n    const sorterArray: CurrentSorter[] = [];\n\n    if (!sortColumns && presetSorters) {\n      // make the presets the current sorters, also make sure that all direction are in lowercase for OData\n      sortByArray = presetSorters;\n      sortByArray.forEach((sorter) => sorter.direction = sorter.direction.toLowerCase() as SortDirectionString);\n\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\n      const tmpSorterArray = sortByArray.map((sorter) => {\n        sorterArray.push({\n          columnId: sorter.columnId + '',\n          direction: sorter.direction\n        });\n        return {\n          columnId: sorter.columnId,\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\n        };\n      });\n      this._grid.setSortColumns(tmpSorterArray);\n    } else if (sortColumns && !presetSorters) {\n      // build the SortBy string, it could be multisort, example: customerNo asc, purchaserName desc\n      if (sortColumns && sortColumns.length === 0) {\n        sortByArray = new Array(this.defaultOptions.orderBy); // when empty, use the default sort\n      } else {\n        if (sortColumns) {\n          for (const column of sortColumns) {\n            if (column.sortCol) {\n              let fieldName = (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '';\n              let columnFieldName = (column.sortCol.field || column.sortCol.id) + '';\n              if (this.odataService.options.caseType === CaseType.pascalCase) {\n                fieldName = String.titleCase(fieldName);\n                columnFieldName = String.titleCase(columnFieldName);\n              }\n\n              sorterArray.push({\n                columnId: columnFieldName,\n                direction: column.sortAsc ? 'asc' : 'desc'\n              });\n            }\n          }\n          sortByArray = sorterArray;\n        }\n      }\n    }\n\n    // transform the sortby array into a CSV string for OData\n    sortByArray = sortByArray as CurrentSorter[];\n    const csvString = sortByArray.map((sorter) => `${sorter.columnId} ${sorter.direction.toLowerCase()}`).join(',');\n    this.odataService.updateOptions({\n      orderBy: (this.odataService.options.caseType === CaseType.pascalCase) ? String.titleCase(csvString) : csvString\n    });\n\n    // keep current Sorters and update the service options with the new sorting\n    this._currentSorters = sortByArray as CurrentSorter[];\n\n    // build the OData query which we will use in the WebAPI callback\n    return this.odataService.buildQuery();\n  }\n\n  //\n  // private functions\n  // -------------------\n  /**\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\n   * @param columnFilters\n   */\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    const filtersArray: ColumnFilter[] = ((typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters) as CurrentFilter[];\n\n    return filtersArray.map((filter) => {\n      const columnDef = filter.columnDef;\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\n      if (filter.operator) {\n        tmpFilter.operator = filter.operator;\n      }\n      if (Array.isArray(filter.searchTerms)) {\n        tmpFilter.searchTerms = filter.searchTerms;\n      }\n      return tmpFilter;\n    });\n  }\n\n  /**\n   * Mapper for mathematical operators (ex.: <= is \"le\", > is \"gt\")\n   * @param string operator\n   * @returns string map\n   */\n  private mapOdataOperator(operator: string) {\n    let map = '';\n    switch (operator) {\n      case '<':\n        map = 'lt';\n        break;\n      case '<=':\n        map = 'le';\n        break;\n      case '>':\n        map = 'gt';\n        break;\n      case '>=':\n        map = 'ge';\n        break;\n      case '<>':\n      case '!=':\n        map = 'ne';\n        break;\n      case '=':\n      case '==':\n      default:\n        map = 'eq';\n        break;\n    }\n\n    return map;\n  }\n}\n",
    "import { OnEventArgs, CellArgs, GridOption } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GridEventService {\n  private _eventHandler: any = new Slick.EventHandler();\n\n  /* OnCellChange Event */\n  attachOnCellChange(grid: any, dataView: any) {\n    // subscribe to this Slickgrid event of onCellChange\n    this._eventHandler.subscribe(grid.onCellChange, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellChange property (a callback function), then run it\n      if (typeof column.onCellChange === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onCellChange\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellChanges.... function\n        column.onCellChange(e, returnedArgs);\n      }\n    });\n  }\n  /* OnClick Event */\n  attachOnClick(grid: any, dataView: any) {\n    this._eventHandler.subscribe(grid.onClick, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellClick property (a callback function), then run it\n      if (typeof column.onCellClick === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onClick\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellClick.... function\n        column.onCellClick(e, returnedArgs);\n      }\n    });\n  }\n\n  dispose() {\n    this._eventHandler.unsubscribeAll();\n  }\n}\n",
    "import {\r\n  Column,\r\n  CurrentColumn,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  GridOption,\r\n  GridState,\r\n  GridStateChange,\r\n  GridStateType\r\n} from './../models/index';\r\nimport { ControlAndPluginService, FilterService, SortService } from './../services/index';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\ndeclare var Slick: any;\r\n\r\nexport class GridStateService {\r\n  private _eventHandler = new Slick.EventHandler();\r\n  private _columns: Column[] = [];\r\n  private _currentColumns: CurrentColumn[] = [];\r\n  private _grid: any;\r\n  private controlAndPluginService: ControlAndPluginService;\r\n  private filterService: FilterService;\r\n  private sortService: SortService;\r\n  private subscriptions: Subscription[] = [];\r\n  onGridStateChanged = new Subject<GridStateChange>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Export Service\r\n   * @param grid\r\n   * @param filterService\r\n   * @param sortService\r\n   * @param dataView\r\n   */\r\n  init(grid: any, controlAndPluginService: ControlAndPluginService, filterService: FilterService, sortService: SortService): void {\r\n    this._grid = grid;\r\n    this.controlAndPluginService = controlAndPluginService;\r\n    this.filterService = filterService;\r\n    this.sortService = sortService;\r\n\r\n    this.subscribeToAllGridChanges(grid);\r\n  }\r\n\r\n  /** Dispose of all the SlickGrid & Aurelia subscriptions */\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    // also unsubscribe all Aurelia Subscriptions\r\n    this.subscriptions.forEach((subscription: Subscription) => {\r\n      if (subscription && subscription.unsubscribe) {\r\n        subscription.unsubscribe();\r\n      }\r\n    });\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  /**\r\n   * Get the current grid state (filters/sorters/pagination)\r\n   * @return grid state\r\n   */\r\n  getCurrentGridState(): GridState {\r\n    const gridState: GridState = {\r\n      columns: this.getCurrentColumns(),\r\n      filters: this.getCurrentFilters(),\r\n      sorters: this.getCurrentSorters()\r\n    };\r\n\r\n    const currentPagination = this.getCurrentPagination();\r\n    if (currentPagination) {\r\n      gridState.pagination = currentPagination;\r\n    }\r\n    return gridState;\r\n  }\r\n\r\n  /**\r\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\r\n   * @return current columns\r\n   */\r\n  getColumns(): Column[] {\r\n    return this._columns || this._grid.getColumns();\r\n  }\r\n\r\n  /**\r\n   * From an array of Grid Column Definitions, get the associated Current Columns\r\n   * @param gridColumns\r\n   */\r\n  getAssociatedCurrentColumns(gridColumns: Column[]): CurrentColumn[] {\r\n    const currentColumns: CurrentColumn[] = [];\r\n\r\n    if (gridColumns && Array.isArray(gridColumns)) {\r\n      gridColumns.forEach((column: Column, index: number) => {\r\n        if (column && column.id) {\r\n          currentColumns.push({\r\n            columnId: column.id as string,\r\n            cssClass: column.cssClass || '',\r\n            headerCssClass: column.headerCssClass || '',\r\n            width: column.width || 0\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this._currentColumns = currentColumns;\r\n    return currentColumns;\r\n  }\r\n\r\n  /**\r\n   * From an array of Current Columns, get the associated Grid Column Definitions\r\n   * @param grid\r\n   * @param currentColumns\r\n   */\r\n  getAssociatedGridColumns(grid: any, currentColumns: CurrentColumn[]): Column[] {\r\n    const columns: Column[] = [];\r\n    const gridColumns: Column[] = grid.getColumns();\r\n\r\n    if (currentColumns && Array.isArray(currentColumns)) {\r\n      currentColumns.forEach((currentColumn: CurrentColumn, index: number) => {\r\n        const gridColumn: Column = gridColumns.find((c: Column) => c.id === currentColumn.columnId);\r\n        if (gridColumn && gridColumn.id) {\r\n          columns.push({\r\n            ...gridColumn,\r\n            cssClass: currentColumn.cssClass,\r\n            headerCssClass: currentColumn.headerCssClass,\r\n            width: currentColumn.width\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this._columns = columns;\r\n    return columns;\r\n  }\r\n\r\n  /**\r\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\r\n   * @return current columns\r\n   */\r\n  getCurrentColumns(): CurrentColumn[] {\r\n    let currentColumns: CurrentColumn[] = [];\r\n    if (this._currentColumns && Array.isArray(this._currentColumns) && this._currentColumns.length > 0) {\r\n      currentColumns = this._currentColumns;\r\n    } else {\r\n      currentColumns = this.getAssociatedCurrentColumns(this._grid.getColumns());\r\n    }\r\n\r\n    return currentColumns;\r\n  }\r\n\r\n  /**\r\n   * Get the Filters (and their state, columnId, searchTerm(s)) that are currently applied in the grid\r\n   * @return current filters\r\n   */\r\n  getCurrentFilters(): CurrentFilter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentFilters) {\r\n        return backendService.getCurrentFilters() as CurrentFilter[];\r\n      }\r\n    } else if (this.filterService && this.filterService.getCurrentLocalFilters) {\r\n      return this.filterService.getCurrentLocalFilters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get current Pagination (and it's state, pageNumber, pageSize) that are currently applied in the grid\r\n   * @return current pagination state\r\n   */\r\n  getCurrentPagination(): CurrentPagination | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentPagination) {\r\n        return backendService.getCurrentPagination();\r\n      }\r\n    } else {\r\n      // TODO implement this whenever local pagination gets implemented\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get the current Sorters (and their state, columnId, direction) that are currently applied in the grid\r\n   * @return current sorters\r\n   */\r\n  getCurrentSorters(): CurrentSorter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        return backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n    } else if (this.sortService && this.sortService.getCurrentLocalSorters) {\r\n      return this.sortService.getCurrentLocalSorters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Hook a SlickGrid Extension Event to a Grid State change event\r\n   * @param extension name\r\n   * @param grid\r\n   */\r\n  hookExtensionEventToGridStateChange(extensionName: string, eventName: string) {\r\n    const extension = this.controlAndPluginService && this.controlAndPluginService.getExtensionByName(extensionName);\r\n\r\n    if (extension && extension.service && extension.service[eventName] && extension.service[eventName].subscribe) {\r\n      this._eventHandler.subscribe(extension.service[eventName], (e: Event, args: any) => {\r\n        const columns: Column[] = args && args.columns;\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hook a Grid Event to a Grid State change event\r\n   * @param event name\r\n   * @param grid\r\n   */\r\n  hookSlickGridEventToGridStateChange(eventName: string, grid: any) {\r\n    if (grid && grid[eventName] && grid[eventName].subscribe) {\r\n      this._eventHandler.subscribe(grid[eventName], (e: Event, args: any) => {\r\n        const columns: Column[] = grid.getColumns();\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      });\r\n    }\r\n  }\r\n\r\n  resetColumns(columnDefinitions?: Column[]) {\r\n    const columns: Column[] = columnDefinitions || this._columns;\r\n    const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n    this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n  }\r\n\r\n  /**\r\n   * Subscribe to all necessary SlickGrid or Service Events that deals with a Grid change,\r\n   * when triggered, we will publish a Grid State Event with current Grid State\r\n   */\r\n  subscribeToAllGridChanges(grid: any) {\r\n    // Subscribe to Event Emitter of Filter changed\r\n    this.subscriptions.push(\r\n      this.filterService.onFilterChanged.subscribe((currentFilters: CurrentFilter[]) => {\r\n        this.onGridStateChanged.next({ change: { newValues: currentFilters, type: GridStateType.filter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n    // Subscribe to Event Emitter of Filter cleared\r\n      this.subscriptions.push(\r\n        this.filterService.onFilterCleared.subscribe(() => {\r\n          this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.filter }, gridState: this.getCurrentGridState() });\r\n        })\r\n      );\r\n\r\n    // Subscribe to Event Emitter of Sort changed\r\n    this.subscriptions.push(\r\n      this.sortService.onSortChanged.subscribe((currentSorters: CurrentSorter[]) => {\r\n        this.onGridStateChanged.next({ change: { newValues: currentSorters, type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to Event Emitter of Sort cleared\r\n    this.subscriptions.push(\r\n      this.sortService.onSortCleared.subscribe(() => {\r\n        this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to ColumnPicker and/or GridMenu for show/hide Columns visibility changes\r\n    this.hookExtensionEventToGridStateChange('ColumnPicker', 'onColumnsChanged');\r\n    this.hookExtensionEventToGridStateChange('GridMenu', 'onColumnsChanged');\r\n\r\n    // subscribe to Column Resize & Reordering\r\n    this.hookSlickGridEventToGridStateChange('onColumnsReordered', grid);\r\n    this.hookSlickGridEventToGridStateChange('onColumnsResized', grid);\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport { Injectable } from '@angular/core';\nimport { CellArgs, Column, GridOption, OnEventArgs } from './../models/index';\nimport { ControlAndPluginService } from './controlAndPlugin.service';\nimport { FilterService } from './filter.service';\nimport { GridStateService } from './gridState.service';\nimport { SortService } from './sort.service';\n\n// using external non-typed js libraries\ndeclare var $: any;\ndeclare var Slick: any;\n\n@Injectable()\nexport class GridService {\n  private _grid: any;\n  private _dataView: any;\n\n  constructor(private controlAndPluginService: ControlAndPluginService, private filterService: FilterService, private gridStateService: GridStateService, private sortService: SortService, private translate: TranslateService) { }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  init(grid: any, dataView: any): void {\n    this._grid = grid;\n    this._dataView = dataView;\n  }\n\n  /**\n   * From a SlickGrid Event triggered get the Column Definition and Item Data Context\n   *\n   * For example the SlickGrid onClick will return cell arguments when subscribing to it.\n   * From these cellArgs, we want to get the Column Definition and Item Data\n   * @param cell event args\n   * @return object with columnDef and dataContext\n   */\n  getColumnFromEventArguments(args: CellArgs): OnEventArgs {\n    if (!args || !args.grid || !args.grid.getColumns || !args.grid.getDataItem) {\n      throw new Error('To get the column definition and data, we need to have these arguments passed as objects (row, cell, grid)');\n    }\n\n    return {\n      row: args.row,\n      cell: args.cell,\n      columnDef: args.grid.getColumns()[args.cell],\n      dataContext: args.grid.getDataItem(args.row),\n      dataView: this._dataView,\n      grid: this._grid,\n      gridDefinition: this._gridOptions\n    };\n  }\n\n  getDataItemByRowNumber(rowNumber: number) {\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\n      throw new Error('We could not find SlickGrid Grid object');\n    }\n    return this._grid.getDataItem(rowNumber);\n  }\n\n  /** Chain the item Metadata with our implementation of Metadata at given row index */\n  getItemRowMetadata(previousItemMetadata: any) {\n    return (rowNumber: number) => {\n      const item = this._dataView.getItem(rowNumber);\n      let meta = {\n        cssClasses: ''\n      };\n      if (typeof previousItemMetadata === 'object' && !$.isEmptyObject(previousItemMetadata)) {\n        meta = previousItemMetadata(rowNumber);\n      }\n\n      if (item && item._dirty) {\n        meta.cssClasses = (meta.cssClasses || '') + ' dirty';\n      }\n      if (item && item.rowClass) {\n        meta.cssClasses += ` ${item.rowClass}`;\n        meta.cssClasses += ` row${rowNumber}`;\n      }\n\n      return meta;\n    };\n  }\n\n  /**\n   * Highlight then fade a row for x seconds.\n   * The implementation follows this SO answer: https://stackoverflow.com/a/19985148/1212166\n   * @param rowNumber\n   * @param fadeDelay\n   */\n  highlightRow(rowNumber: number, fadeDelay: number = 1500) {\n    // create a SelectionModel if there's not one yet\n    if (!this._grid.getSelectionModel()) {\n      const rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n      this._grid.setSelectionModel(rowSelectionPlugin);\n    }\n\n    this._grid.setSelectedRows([rowNumber]);\n    this._dataView.getItemMetadata = this.getItemRowMetadata(this._dataView.getItemMetadata);\n\n    const item = this._dataView.getItem(rowNumber);\n    if (item && item.id) {\n      item.rowClass = 'highlight';\n      this._dataView.updateItem(item.id, item);\n      const gridOptions = this._grid.getOptions() as GridOption;\n\n      // highlight the row for a user defined timeout\n      $(`#${gridOptions.gridId}`)\n          .find(`.highlight.row${rowNumber}`)\n          .first();\n\n      // delete the row's CSS that was attached for highlighting\n      setTimeout(() => {\n        if (item && item.id) {\n          delete item.rowClass;\n          const gridIdx = this._dataView.getIdxById(item.id);\n          if (gridIdx !== undefined) {\n            this._dataView.updateItem(item.id, item);\n          }\n        }\n      }, fadeDelay + 10);\n    }\n  }\n\n  /** Get the currently selected rows */\n  getSelectedRows() {\n    return this._grid.getSelectedRows();\n  }\n\n  /** Select the selected row by a row index */\n  setSelectedRow(rowIndex: number) {\n    this._grid.setSelectedRows([rowIndex]);\n  }\n\n  /** Set selected rows with provided array of row indexes */\n  setSelectedRows(rowIndexes: number[]) {\n    this._grid.setSelectedRows(rowIndexes);\n  }\n\n  /** Re-Render the Grid */\n  renderGrid() {\n    if (this._grid && typeof this._grid.invalidate === 'function') {\n      this._grid.invalidate();\n      this._grid.render();\n    }\n  }\n\n  /**\n   * Reset the grid to it's original state (clear any filters, sorting & pagination if exists) .\n   * The column definitions could be passed as argument to reset (this can be used after a Grid State reset)\n   * The reset will clear the Filters & Sort, then will reset the Columns to their original state\n   */\n  resetGrid(columnDefinitions?: Column[]) {\n    // reset columns to original states & refresh the grid\n    if (this._grid && this._dataView) {\n      const originalColumns = this.controlAndPluginService.getAllColumns();\n      // const originalColumns = columnDefinitions || this._columnDefinitions;\n      if (Array.isArray(originalColumns) && originalColumns.length > 0) {\n        // set the grid columns to it's original column definitions\n        this._grid.setColumns(originalColumns);\n        this._dataView.refresh();\n        this._grid.autosizeColumns();\n        this.gridStateService.resetColumns(columnDefinitions);\n      }\n    }\n    if (this.filterService && this.filterService.clearFilters) {\n      this.filterService.clearFilters();\n    }\n    if (this.sortService && this.sortService.clearSorting) {\n      this.sortService.clearSorting();\n    }\n  }\n\n  /**\n   * Add an item (data item) to the datagrid\n   * @param object dataItem: item object holding all properties of that row\n   * @param shouldHighlightRow do we want to highlight the row after adding item\n   */\n  addItemToDatagrid(item, shouldHighlightRow = true) {\n    if (!this._grid || !this._gridOptions || !this._dataView) {\n      throw new Error('We could not find SlickGrid Grid, DataView objects');\n    }\n\n    const row = 0;\n    this._dataView.insertItem(row, item);\n    this._grid.scrollRowIntoView(0); // scroll to row 0\n\n    // highlight the row we just added, if defined\n    if (shouldHighlightRow) {\n      this.highlightRow(0, 1500);\n    }\n\n    // refresh dataview & grid\n    this._dataView.refresh();\n  }\n\n  /**\n   * Delete an existing item from the datagrid (dataView)\n   * @param object item: item object holding all properties of that row\n   */\n  deleteDataGridItem(item: any) {\n    if (!item || !item.hasOwnProperty('id')) {\n      throw new Error(`deleteDataGridItem() requires an item object which includes the \"id\" property`);\n    }\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\n    this.deleteDataGridItemById(itemId);\n  }\n\n  /**\n   * Delete an existing item from the datagrid (dataView) by it's id\n   * @param itemId: item unique id\n   */\n  deleteDataGridItemById(itemId: string | number) {\n    if (itemId === undefined) {\n      throw new Error(`Cannot delete a row without a valid \"id\"`);\n    }\n    if (this._dataView.getRowById(itemId) === undefined) {\n      throw new Error(`Could not find the item in the grid by it's associated \"id\"`);\n    }\n\n    // delete the item from the dataView\n    this._dataView.deleteItem(itemId);\n    this._dataView.refresh();\n  }\n\n  /**\n   * Update an existing item with new properties inside the datagrid\n   * @param object item: item object holding all properties of that row\n   */\n  updateDataGridItem(item: any) {\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\n\n    if (itemId === undefined) {\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\n    }\n\n    this.updateDataGridItemById(itemId, item);\n  }\n\n  /**\n   * Update an existing item in the datagrid by it's id and new properties\n   * @param itemId: item unique id\n   * @param object item: item object holding all properties of that row\n   * @param shouldHighlightRow do we want to highlight the row after update\n   */\n  updateDataGridItemById(itemId: number | string, item: any, shouldHighlightRow = true) {\n    if (itemId === undefined) {\n      throw new Error(`Cannot update a row without a valid \"id\"`);\n    }\n    const row = this._dataView.getRowById(itemId);\n\n    if (!item || row === undefined) {\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\n    }\n\n    const gridIdx = this._dataView.getIdxById(itemId);\n    if (gridIdx !== undefined) {\n      // Update the item itself inside the dataView\n      this._dataView.updateItem(itemId, item);\n\n      // highlight the row we just updated, if defined\n      if (shouldHighlightRow) {\n        this.highlightRow(row, 1500);\n      }\n\n      // refresh dataview & grid\n      this._dataView.refresh();\n    }\n  }\n}\n",
    "\nimport {\n  Column,\n  GridOption\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare let $: any;\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GroupingAndColspanService {\n  private _eventHandler = new Slick.EventHandler();\n  private _dataView: any;\n  private _grid: any;\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any, dataView: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n\n    if (grid && this._gridOptions) {\n      // When dealing with Pre-Header Grouping colspan, we need to re-create the pre-header in multiple occasions\n      // for all these occasions, we have to trigger a re-create\n      if (this._gridOptions.createPreHeaderPanel) {\n        this._eventHandler.subscribe(grid.onSort, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(grid.onColumnsResized, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(dataView.onRowCountChanged, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n\n        // also not sure why at this point, but it seems that I need to call the 1st create in a delayed execution\n        // probably some kind of timing issues and delaying it until the grid is fully ready does help\n        setTimeout(() => {\n          this.createPreHeaderRowGroupingTitle();\n        }, 50);\n      }\n    }\n  }\n\n  dispose() {\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n  }\n\n  createPreHeaderRowGroupingTitle() {\n    const $preHeaderPanel = $(this._grid.getPreHeaderPanel())\n      .empty()\n      .addClass('slick-header-columns')\n      .css('left', '-1000px')\n      .width(this._grid.getHeadersWidth());\n    $preHeaderPanel.parent().addClass('slick-header');\n    const headerColumnWidthDiff = this._grid.getHeaderColumnWidthDiff();\n    let m;\n    let header;\n    let lastColumnGroup = '';\n    let widthTotal = 0;\n\n    for (let i = 0; i < this._columnDefinitions.length; i++) {\n      m = this._columnDefinitions[i];\n      if (lastColumnGroup === m.columnGroup && i > 0) {\n        widthTotal += m.width;\n        header.width(widthTotal - headerColumnWidthDiff);\n      } else {\n        widthTotal = m.width;\n        header = $(`<div class=\"ui-state-default slick-header-column\" />`)\n          .html(`<span class=\"slick-column-name\">${m.columnGroup || ''}</span>`)\n          .width(m.width - headerColumnWidthDiff)\n          .appendTo($preHeaderPanel);\n      }\n      lastColumnGroup = m.columnGroup;\n    }\n  }\n}\n",
    "import { Column, GridOption } from './../models/index';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n// global constants, height/width are in pixels\r\nconst DATAGRID_MIN_HEIGHT = 180;\r\nconst DATAGRID_MIN_WIDTH = 300;\r\nconst DATAGRID_BOTTOM_PADDING = 20;\r\nconst DATAGRID_PAGINATION_HEIGHT = 35;\r\nlet timer: any;\r\n\r\nexport interface GridDimension {\r\n  height: number;\r\n  width: number;\r\n  heightWithPagination?: number;\r\n}\r\n\r\nexport class ResizerService {\r\n  private _grid: any;\r\n  private _lastDimensions: GridDimension;\r\n  onGridBeforeResize = new Subject<boolean>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  private get _gridUid(): string {\r\n    return (this._grid && this._grid.getUID) ? this._grid.getUID() : this._gridOptions.gridId;\r\n  }\r\n\r\n  init(grid: any): void {\r\n    this._grid = grid;\r\n  }\r\n\r\n  /** Attach an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space\r\n   * Options: we could also provide a % factor to resize on each height/width independently\r\n   */\r\n  attachAutoResizeDataGrid(newSizes?: GridDimension) {\r\n    // if we can't find the grid to resize, return without attaching anything\r\n    const gridDomElm = $(`#${this._gridOptions && this._gridOptions.gridId ? this._gridOptions.gridId : 'grid1'}`);\r\n    if (gridDomElm === undefined || gridDomElm.offset() === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // -- 1st resize the datagrid size at first load (we need this because the .on event is not triggered on first load)\r\n    this.resizeGrid(0, newSizes);\r\n\r\n    // -- 2nd attach a trigger on the Window DOM element, so that it happens also when resizing after first load\r\n    // -- attach auto-resize to Window object only if it exist\r\n    $(window).on(`resize.grid.${this._gridUid}`, () => {\r\n      this.onGridBeforeResize.next(true);\r\n      // for some yet unknown reason, calling the resize twice removes any stuttering/flickering when changing the height and makes it much smoother\r\n      this.resizeGrid(0, newSizes);\r\n      this.resizeGrid(0, newSizes);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation\r\n   * object gridOptions\r\n   */\r\n  calculateGridNewDimensions(gridOptions: GridOption): any {\r\n    const gridDomElm = $(`#${gridOptions.gridId}`);\r\n    const containerElm = (gridOptions.autoResize && gridOptions.autoResize.containerId) ? $(`#${gridOptions.autoResize.containerId}`) : $(`#${gridOptions.gridContainerId}`);\r\n    const windowElm = $(window);\r\n    if (windowElm === undefined || containerElm === undefined || gridDomElm === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // calculate bottom padding\r\n    // if using pagination, we need to add the pagination height to this bottom padding\r\n    let bottomPadding = (gridOptions.autoResize && gridOptions.autoResize.bottomPadding) ? gridOptions.autoResize.bottomPadding : DATAGRID_BOTTOM_PADDING;\r\n    if (bottomPadding && (gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\r\n      bottomPadding += DATAGRID_PAGINATION_HEIGHT;\r\n    }\r\n\r\n    const gridHeight = windowElm.height() || 0;\r\n    const coordOffsetTop = gridDomElm.offset();\r\n    const gridOffsetTop = (coordOffsetTop !== undefined) ? coordOffsetTop.top : 0;\r\n    const availableHeight = gridHeight - gridOffsetTop - bottomPadding;\r\n    const availableWidth = containerElm.width() || 0;\r\n    const minHeight = (gridOptions.autoResize && gridOptions.autoResize.minHeight < 0) ? gridOptions.autoResize.minHeight : DATAGRID_MIN_HEIGHT;\r\n    const minWidth = (gridOptions.autoResize && gridOptions.autoResize.minWidth < 0) ? gridOptions.autoResize.minWidth : DATAGRID_MIN_WIDTH;\r\n\r\n    let newHeight = availableHeight;\r\n    let newWidth = (gridOptions.autoResize && gridOptions.autoResize.sidePadding) ? availableWidth - gridOptions.autoResize.sidePadding : availableWidth;\r\n    if (newHeight < minHeight) {\r\n      newHeight = minHeight;\r\n    }\r\n    if (newWidth < minWidth) {\r\n      newWidth = minWidth;\r\n    }\r\n\r\n    return {\r\n      height: newHeight,\r\n      width: newWidth\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Dispose function when element is destroyed\r\n   */\r\n  dispose() {\r\n    $(window).off(`resize.grid.${this._gridUid}`);\r\n  }\r\n\r\n  getLastResizeDimensions(): GridDimension {\r\n    return this._lastDimensions;\r\n  }\r\n\r\n  /** Resize the datagrid to fit the browser height & width */\r\n  resizeGrid(delay?: number, newSizes?: GridDimension): void {\r\n    if (!this._grid || !this._gridOptions) {\r\n      throw new Error(`\r\n      Angular-Slickgrid resizer requires a valid Grid object and Grid Options defined.\r\n      You can fix this by setting your gridOption to use \"enableAutoResize\" or create an instance of the ResizerService by calling attachAutoResizeDataGrid()`);\r\n    }\r\n\r\n    // because of the javascript async nature, we might want to delay the resize a little bit\r\n    delay = delay || 0;\r\n\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      // calculate the available sizes with minimum height defined as a constant\r\n      const availableDimensions = this.calculateGridNewDimensions(this._gridOptions);\r\n      const gridElm = $(`#${this._gridOptions.gridId}`) || {};\r\n      const gridContainerElm = $(`#${this._gridOptions.gridContainerId}`) || {};\r\n\r\n      if ((newSizes || availableDimensions) && gridElm.length > 0) {\r\n        // get the new sizes, if new sizes are passed (not 0), we will use them else use available space\r\n        // basically if user passes 1 of the dimension, let say he passes just the height,\r\n        // we will use the height as a fixed height but the width will be resized by it's available space\r\n        const newHeight = (newSizes && newSizes.height) ? newSizes.height : availableDimensions.height;\r\n        const newWidth = (newSizes && newSizes.width) ? newSizes.width : availableDimensions.width;\r\n\r\n        // apply these new height/width to the datagrid\r\n        gridElm.height(newHeight);\r\n        gridElm.width(newWidth);\r\n        gridContainerElm.height(newHeight);\r\n        gridContainerElm.width(newWidth);\r\n\r\n        // keep last resized dimensions\r\n        this._lastDimensions = {\r\n          height: newHeight,\r\n          width: newWidth\r\n        };\r\n        if ((this._gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\r\n          this._lastDimensions.heightWithPagination = newHeight + DATAGRID_PAGINATION_HEIGHT;\r\n        }\r\n\r\n        // resize the slickgrid canvas on all browser except some IE versions\r\n        // exclude all IE below IE11\r\n        // IE11 wants to be a better standard (W3C) follower (finally) they even changed their appName output to also have 'Netscape'\r\n        if (new RegExp('MSIE [6-8]').exec(navigator.userAgent) === null && this._grid) {\r\n          this._grid.resizeCanvas();\r\n        }\r\n\r\n        // also call the grid auto-size columns so that it takes available when going bigger\r\n        this._grid.autosizeColumns();\r\n      }\r\n    }, delay);\r\n  }\r\n}\r\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class AvgAggregator implements Aggregator {\n  private _count: number;\n  private _nonNullCount: number;\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._count = 0;\n    this._nonNullCount = 0;\n    this._sum = 0;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    this._count++;\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._nonNullCount++;\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.avg) {\n      groupTotals.avg = {};\n    }\n    if (this._nonNullCount !== 0) {\n      groupTotals.avg[this._field] = this._sum / this._nonNullCount;\n    }\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MinAggregator implements Aggregator {\n  private _min: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._min = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._min == null || val < this._min) {\n        this._min = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.min) {\n      groupTotals.min = {};\n    }\n    groupTotals.min[this._field] = this._min;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MaxAggregator implements Aggregator {\n  private _max: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._max = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._max == null || val > this._max) {\n        this._max = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.max) {\n      groupTotals.max = {};\n    }\n    groupTotals.max[this._field] = this._max;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class SumAggregator implements Aggregator {\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._sum = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.sum) {\n      groupTotals.sum = {};\n    }\n    groupTotals.sum[this._field] = this._sum;\n  }\n}\n",
    "import { AvgAggregator } from './avgAggregator';\nimport { MinAggregator } from './minAggregator';\nimport { MaxAggregator } from './maxAggregator';\nimport { SumAggregator } from './sumAggregator';\n\n/** Provides a list of different Aggregators for the Group Formatter */\nexport const Aggregators = {\n  Avg: AvgAggregator,\n  Min: MinAggregator,\n  Max: MaxAggregator,\n  Sum: SumAggregator\n};\n",
    "import { Column, Editor, EditorValidator, EditorValidatorOutput } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class CheckboxEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: boolean;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"checkbox\" value=\"true\" class=\"editor-checkbox\" />`);\r\n    this.$input.appendTo(this.args.container);\r\n    this.$input.focus();\r\n  }\r\n\r\n  destroy(): void {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus(): void {\r\n    this.$input.focus();\r\n  }\r\n\r\n  hide() {\r\n    this.$input.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$input.show();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = !!item[this.columnDef.field];\r\n    if (this.defaultValue) {\r\n      this.$input.prop('checked', true);\r\n    } else {\r\n      this.$input.prop('checked', false);\r\n    }\r\n  }\r\n\r\n  preClick() {\r\n    this.$input.prop('checked', !this.$input.prop('checked'));\r\n  }\r\n\r\n  serializeValue(): boolean {\r\n    return this.$input.prop('checked');\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (this.serializeValue() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, FieldType, GridOption } from './../models/index';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a date picker editor using Flatpickr\r\n * https://chmln.github.io/flatpickr\r\n */\r\nexport class DateEditor implements Editor {\r\n  $input: any;\r\n  flatInstance: any;\r\n  defaultDate: string;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    if (this.args && this.args.column) {\r\n      const gridOptions = this.args.grid.getOptions() as GridOption;\r\n      this.defaultDate = (this.args.item) ? this.args.item[this.args.column.field] : null;\r\n      const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\r\n      const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || FieldType.dateUtc);\r\n      let currentLocale = this.getCurrentLocale(this.columnDef, gridOptions);\r\n      if (currentLocale.length > 2) {\r\n        currentLocale = currentLocale.substring(0, 2);\r\n      }\r\n\r\n      const pickerOptions: any = {\r\n        defaultDate: this.defaultDate,\r\n        altInput: true,\r\n        altFormat: inputFormat,\r\n        dateFormat: outputFormat,\r\n        closeOnSelect: false,\r\n        locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n        onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n          this.save();\r\n        },\r\n      };\r\n\r\n\r\n      this.$input = $(`<input type=\"text\" data-defaultDate=\"${this.defaultDate}\" class=\"editor-text flatpickr\" />`);\r\n      this.$input.appendTo(this.args.container);\r\n      this.flatInstance = (this.$input[0] && typeof this.$input[0].flatpickr === 'function') ? this.$input[0].flatpickr(pickerOptions) : null;\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  getCurrentLocale(columnDef: Column, gridOptions: GridOption) {\r\n    const options = gridOptions || columnDef.params || {};\r\n    if (options.i18n && options.i18n instanceof TranslateService) {\r\n      return options.i18n.currentLang;\r\n    }\r\n\r\n    return 'en';\r\n  }\r\n\r\n  loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  destroy() {\r\n    this.hide();\r\n    // this.flatInstance.destroy();\r\n    this.$input.remove();\r\n  }\r\n\r\n  show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultDate = item[this.args.column.field];\r\n    this.flatInstance.setDate(item[this.args.column.field]);\r\n  }\r\n\r\n  serializeValue() {\r\n    const domValue: string = this.$input.val();\r\n\r\n    if (!domValue) {\r\n      return '';\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n    const value = moment(domValue).format(outputFormat);\r\n\r\n    return value;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    if (!state) {\r\n      return;\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n    item[this.args.column.field] = moment(state, outputFormat).toDate();\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultDate == null)) && (this.$input.val() !== this.defaultDate);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Constants } from '../constants';\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst defaultDecimalPlaces = 0;\n\n/*\n * An example of a 'detached' editor.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class FloatEditor implements Editor {\n  $input: any;\n  defaultValue: any;\n\n  constructor(private args: any) {\n    this.init();\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args && this.args.column || {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): any {\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\n  }\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator {\n    return this.columnEditor.validator || this.columnDef.validator;\n  }\n\n  init(): void {\n    this.$input = $(`<input type=\"number\" class=\"editor-text\" step=\"${this.getInputDecimalSteps()}\" />`)\n      .appendTo(this.args.container)\n      .on('keydown.nav', (e) => {\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\n          e.stopImmediatePropagation();\n        }\n      });\n\n    setTimeout(() => {\n      this.$input.focus().select();\n    }, 50);\n  }\n\n  destroy() {\n    this.$input.remove();\n  }\n\n  focus() {\n    this.$input.focus();\n  }\n\n  getColumnEditor() {\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\n  }\n\n  getDecimalPlaces(): number {\n    // returns the number of fixed decimal places or null\n    let rtn = (this.columnEditor.params && this.columnEditor.params.hasOwnProperty('decimalPlaces')) ? this.columnEditor.params.decimalPlaces : undefined;\n\n    if (rtn === undefined) {\n      rtn = defaultDecimalPlaces;\n    }\n    return (!rtn && rtn !== 0 ? null : rtn);\n  }\n\n  getInputDecimalSteps(): string {\n    const decimals = this.getDecimalPlaces();\n    let zeroString = '';\n    for (let i = 1; i < decimals; i++) {\n      zeroString += '0';\n    }\n\n    if (decimals > 0) {\n      return `0.${zeroString}1`;\n    }\n    return '1';\n  }\n\n  loadValue(item: any) {\n    this.defaultValue = item[this.columnDef.field];\n\n    const decPlaces = this.getDecimalPlaces();\n    if (decPlaces !== null\n      && (this.defaultValue || this.defaultValue === 0)\n      && this.defaultValue.toFixed) {\n      this.defaultValue = this.defaultValue.toFixed(decPlaces);\n    }\n\n    this.$input.val(this.defaultValue);\n    this.$input[0].defaultValue = this.defaultValue;\n    this.$input.select();\n  }\n\n  serializeValue() {\n    let rtn = parseFloat(this.$input.val()) || 0;\n    const decPlaces = this.getDecimalPlaces();\n    if (decPlaces !== null\n      && (rtn || rtn === 0)\n      && rtn.toFixed) {\n      rtn = parseFloat(rtn.toFixed(decPlaces));\n    }\n\n    return rtn;\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.columnDef.field] = state;\n  }\n\n  isValueChanged() {\n    const elmValue = this.$input.val();\n    return (!(elmValue === '' && this.defaultValue === null)) && (elmValue !== this.defaultValue);\n  }\n\n  validate(): EditorValidatorOutput {\n    const elmValue = this.$input.val();\n    const decPlaces = this.getDecimalPlaces();\n    const minValue = this.columnEditor.minValue;\n    const maxValue = this.columnEditor.maxValue;\n    const errorMsg = this.columnEditor.errorMessage;\n    const mapValidation = {\n      '{{minValue}}': minValue,\n      '{{maxValue}}': maxValue,\n      '{{minDecimal}}': 0,\n      '{{maxDecimal}}': decPlaces\n    };\n\n    if (this.validator) {\n      const validationResults = this.validator(elmValue);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    } else if (isNaN(elmValue as number) || (decPlaces === 0 && !/^(\\d+(\\.)?(\\d)*)$/.test(elmValue))) {\n      // when decimal value is 0 (which is the default), we accept 0 or more decimal values\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_VALID_NUMBER\n      };\n    } else if (minValue !== undefined && (elmValue < minValue || elmValue > maxValue)) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    } else if ((decPlaces > 0 && !new RegExp(`^(\\\\d+(\\\\.)?(\\\\d){0,${decPlaces}})$`).test(elmValue))) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_DECIMAL_BETWEEN.replace(/{{minDecimal}}|{{maxDecimal}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n",
    "import { Constants } from './../constants';\r\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class IntegerEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"number\" class='editor-text' />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = parseInt(item[this.args.column.field], 10);\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return parseInt(this.$input.val() as string, 10) || 0;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    const elmValue = this.$input.val();\r\n    const value = isNaN(elmValue) ? elmValue : parseInt(elmValue, 10);\r\n    return (!(value === '' && this.defaultValue === null)) && (value !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    const elmValue = this.$input.val();\r\n    const errorMsg = this.columnEditor.params && this.columnEditor.errorMessage;\r\n\r\n    if (this.validator) {\r\n      const validationResults = this.validator(elmValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    } else if (isNaN(elmValue as number) || !/^[+-]?\\d+$/.test(elmValue)) {\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || Constants.VALIDATION_EDITOR_VALID_INTEGER\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport { Constants } from './../constants';\r\nimport {\r\n  Column,\r\n  Editor,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  GridOption,\r\n  HtmlElementPosition,\r\n  KeyCode\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class LongTextEditor implements Editor {\r\n  $input: any;\r\n  $wrapper: any;\r\n  defaultValue: any;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    const cancelText = this._translate.instant('CANCEL') || Constants.TEXT_CANCEL;\r\n    const saveText = this._translate.instant('SAVE') || Constants.TEXT_SAVE;\r\n    const $container = $('body');\r\n\r\n    this.$wrapper = $(`<div class=\"slick-large-editor-text\" />`).appendTo($container);\r\n    this.$input = $(`<textarea hidefocus rows=\"5\">`).appendTo(this.$wrapper);\r\n\r\n    $(`<div class=\"editor-footer\">\r\n          <button class=\"btn btn-primary btn-xs\">${saveText}</button>\r\n          <button class=\"btn btn-default btn-xs\">${cancelText}</button>\r\n      </div>`).appendTo(this.$wrapper);\r\n\r\n    this.$wrapper.find('button:first').on('click', (event: Event) => this.save());\r\n    this.$wrapper.find('button:last').on('click', (event: Event) => this.cancel());\r\n    this.$input.on('keydown', this.handleKeyDown);\r\n\r\n    this.position(this.args.position);\r\n    this.$input.focus().select();\r\n  }\r\n\r\n  handleKeyDown(e: any) {\r\n    if (e.which === KeyCode.ENTER && e.ctrlKey) {\r\n      this.save();\r\n    } else if (e.which === KeyCode.ESCAPE) {\r\n      e.preventDefault();\r\n      this.cancel();\r\n    } else if (e.which === KeyCode.TAB && e.shiftKey) {\r\n      e.preventDefault();\r\n      this.args.grid.navigatePrev();\r\n    } else if (e.which === KeyCode.TAB) {\r\n      e.preventDefault();\r\n      this.args.grid.navigateNext();\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  cancel() {\r\n    this.$input.val(this.defaultValue);\r\n    this.args.cancelChanges();\r\n  }\r\n\r\n  hide() {\r\n    this.$wrapper.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$wrapper.show();\r\n  }\r\n\r\n  position(position: HtmlElementPosition) {\r\n    this.$wrapper\r\n      .css('top', (position.top || 0) - 5)\r\n      .css('left', (position.left || 0) - 5);\r\n  }\r\n\r\n  destroy() {\r\n    this.$wrapper.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.$input.val(this.defaultValue = item[this.columnDef.field]);\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue == null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Column,\r\n  Editor,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  SelectOption,\r\n} from './../models/index';\r\nimport { arraysEqual, CollectionService } from '../services/index';\r\n\r\n// height in pixel of the multiple-select DOM element\r\nconst SELECT_ELEMENT_HEIGHT = 26;\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/**\r\n * Slickgrid editor class for multiple select lists\r\n */\r\nexport class MultipleSelectEditor implements Editor {\r\n  /** The JQuery DOM element */\r\n  $editorElm: any;\r\n\r\n  /** Editor Multiple-Select options */\r\n  editorElmOptions: MultipleSelectOption;\r\n\r\n  /** The multiple-select options for a multiple select list */\r\n  defaultOptions: MultipleSelectOption;\r\n\r\n  /** The default item values that are set */\r\n  defaultValue: any[];\r\n\r\n  /** The options label/value object to use in the select list */\r\n  collection: SelectOption[] = [];\r\n\r\n  /** The property name for values in the collection */\r\n  valueName: string;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName: string;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** Do we translate the label? */\r\n  enableTranslateLabel: boolean;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,\r\n      maxHeight: 200,\r\n      addTitle: true,\r\n      okButton: true,\r\n      selectAllDelimiter: ['', ''],\r\n      width: 150,\r\n      offsetLeft: 20,\r\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\r\n    };\r\n\r\n    if (this._translate) {\r\n      this.defaultOptions.countSelected = this._translate.instant('X_OF_Y_SELECTED');\r\n      this.defaultOptions.allSelected = this._translate.instant('ALL_SELECTED');\r\n      this.defaultOptions.selectAllText = this._translate.instant('SELECT_ALL');\r\n    }\r\n\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /**\r\n   * The current selected values from the collection\r\n   */\r\n  get currentValues() {\r\n    return this.collection\r\n      .filter(c => this.$editorElm.val().indexOf(c[this.valueName].toString()) !== -1)\r\n      .map(c => c[this.valueName]);\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init() {\r\n    if (!this.args) {\r\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\r\n    }\r\n\r\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the MultipleSelect Editor to work correctly.\r\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\r\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\r\n    }\r\n\r\n    const collectionService = new CollectionService(this._translate);\r\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\r\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\r\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\r\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\r\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    this.collection = newCollection;\r\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    this.createDomElement(editorTemplate);\r\n  }\r\n\r\n  applyValue(item: any, state: any): void {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  destroy() {\r\n    this.$editorElm.remove();\r\n  }\r\n\r\n  loadValue(item: any): void {\r\n    // convert to string because that is how the DOM will return these values\r\n    this.defaultValue = item[this.columnDef.field].map((i: any) => i.toString());\r\n\r\n    this.$editorElm.find('option').each((i: number, $e: any) => {\r\n      if (this.defaultValue.indexOf($e.value) !== -1) {\r\n        $e.selected = true;\r\n      } else {\r\n        $e.selected = false;\r\n      }\r\n    });\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  serializeValue(): any {\r\n    return this.currentValues;\r\n  }\r\n\r\n  focus() {\r\n    this.$editorElm.focus();\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    return !arraysEqual(this.$editorElm.val(), this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.currentValues);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n\r\n  private buildTemplateHtmlString(collection: any[]) {\r\n    let options = '';\r\n    collection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example: { collection: [ { value: '1', label: 'One' } ])`);\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n\r\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * Automatically adjust the multiple-select dropup or dropdown by available space\r\n   */\r\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\r\n    // height in pixel of the multiple-select element\r\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\r\n\r\n    const windowHeight = $(window).innerHeight() || 300;\r\n    const pageScroll = $('body').scrollTop() || 0;\r\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\r\n    const $msDrop = $msDropContainer.find('.ms-drop');\r\n    const msDropHeight = $msDrop.height() || 0;\r\n    const msDropOffsetTop = $msDrop.offset().top;\r\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\r\n\r\n    if (space < msDropHeight) {\r\n      if (multipleSelectOptions.container) {\r\n        // when using a container, we need to offset the drop ourself\r\n        // and also make sure there's space available on top before doing so\r\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\r\n        if (newOffsetTop > 0) {\r\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\r\n        }\r\n      } else {\r\n        // without container, we simply need to add the \"top\" class to the drop\r\n        $msDrop.addClass('top');\r\n      }\r\n      $msDrop.removeClass('bottom');\r\n    } else {\r\n      $msDrop.addClass('bottom');\r\n      $msDrop.removeClass('top');\r\n    }\r\n  }\r\n\r\n  /** Build the template HTML string */\r\n  private createDomElement(editorTemplate: string) {\r\n    this.$editorElm = $(editorTemplate);\r\n\r\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\r\n      this.$editorElm.appendTo(this.args.container);\r\n    }\r\n\r\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\r\n      // fallback to bootstrap\r\n      this.$editorElm.addClass('form-control');\r\n    } else {\r\n      const elementOptions = (this.columnDef.internalColumnEditor) ? this.columnDef.internalColumnEditor.elementOptions : {};\r\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\r\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\r\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\r\n    }\r\n  }\r\n\r\n  // refresh the jquery object because the selected checkboxes were already set\r\n  // prior to this method being called\r\n  private refresh() {\r\n    if (typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('refresh');\r\n    }\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Column,\r\n  Editor,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  SelectOption\r\n} from './../models/index';\r\nimport { findOrDefault, CollectionService } from '../services/index';\r\nimport { Injectable } from '@angular/core';\r\n\r\n// height in pixel of the multiple-select DOM element\r\nconst SELECT_ELEMENT_HEIGHT = 26;\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/**\r\n * Slickgrid editor class for single select lists\r\n */\r\n@Injectable()\r\nexport class SingleSelectEditor implements Editor {\r\n  /** The JQuery DOM element */\r\n  $editorElm: any;\r\n\r\n  /** Editor Multiple-Select options */\r\n  editorElmOptions: MultipleSelectOption;\r\n\r\n  /** The multiple-select options for a single select */\r\n  defaultOptions: any;\r\n\r\n  /** The default item value that is set */\r\n  defaultValue: any;\r\n\r\n  /** The options label/value object to use in the select list */\r\n  collection: SelectOption[] = [];\r\n\r\n  /** The property name for values in the collection */\r\n  valueName: string;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName: string;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** Do we translate the label? */\r\n  enableTranslateLabel: boolean;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,\r\n      maxHeight: 200,\r\n      width: 150,\r\n      offsetLeft: 20,\r\n      single: true,\r\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\r\n    };\r\n\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /**\r\n   * The current selected value from the collection\r\n   */\r\n  get currentValue() {\r\n    return findOrDefault(this.collection, (c: any) =>\r\n      c[this.valueName].toString() === this.$editorElm.val())[this.valueName];\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init() {\r\n    if (!this.args) {\r\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\r\n    }\r\n\r\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the SingleSelect Editor to work correctly.\r\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\r\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\r\n    }\r\n\r\n    const collectionService = new CollectionService(this._translate);\r\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\r\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\r\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionFilterBy) {\r\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\r\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\r\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    this.collection = newCollection;\r\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    this.createDomElement(editorTemplate);\r\n  }\r\n\r\n  applyValue(item: any, state: any): void {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  destroy() {\r\n    this.$editorElm.remove();\r\n  }\r\n\r\n  loadValue(item: any): void {\r\n    // convert to string because that is how the DOM will return these values\r\n    // make sure the prop exists first\r\n    this.defaultValue = item[this.columnDef.field] && item[this.columnDef.field].toString();\r\n\r\n\r\n    this.$editorElm.find('option').each((i: number, $e: any) => {\r\n      if (this.defaultValue === $e.value) {\r\n        $e.selected = true;\r\n      } else {\r\n        $e.selected = false;\r\n      }\r\n    });\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  serializeValue(): any {\r\n    return this.currentValue;\r\n  }\r\n\r\n  focus() {\r\n    this.$editorElm.focus();\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    return this.$editorElm.val() !== this.defaultValue;\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.currentValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n\r\n  private buildTemplateHtmlString(collection: any[]) {\r\n    let options = '';\r\n    collection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error('A collection with value/label (or value/labelKey when using ' +\r\n          'Locale) is required to populate the Select list, for example: { params: { ' +\r\n          '{ collection: [ { value: \\'1\\', label: \\'One\\' } ] } } }');\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\r\n  }\r\n\r\n    /**\r\n   * Automatically adjust the multiple-select dropup or dropdown by available space\r\n   */\r\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\r\n    // height in pixel of the multiple-select element\r\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\r\n\r\n    const windowHeight = $(window).innerHeight() || 300;\r\n    const pageScroll = $('body').scrollTop() || 0;\r\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\r\n    const $msDrop = $msDropContainer.find('.ms-drop');\r\n    const msDropHeight = $msDrop.height() || 0;\r\n    const msDropOffsetTop = $msDrop.offset().top;\r\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\r\n\r\n    if (space < msDropHeight) {\r\n      if (multipleSelectOptions.container) {\r\n        // when using a container, we need to offset the drop ourself\r\n        // and also make sure there's space available on top before doing so\r\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\r\n        if (newOffsetTop > 0) {\r\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\r\n        }\r\n      } else {\r\n        // without container, we simply need to add the \"top\" class to the drop\r\n        $msDrop.addClass('top');\r\n      }\r\n      $msDrop.removeClass('bottom');\r\n    } else {\r\n      $msDrop.addClass('bottom');\r\n      $msDrop.removeClass('top');\r\n    }\r\n  }\r\n\r\n  /** Build the template HTML string */\r\n  private createDomElement(editorTemplate: string) {\r\n    this.$editorElm = $(editorTemplate);\r\n\r\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\r\n      this.$editorElm.appendTo(this.args.container);\r\n    }\r\n\r\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\r\n      // fallback to bootstrap\r\n      this.$editorElm.addClass('form-control');\r\n    } else {\r\n      const elementOptions = (this.columnDef.params) ? this.columnDef.params.elementOptions : {};\r\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\r\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\r\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\r\n    }\r\n  }\r\n\r\n  // refresh the jquery object because the selected checkboxes were already set\r\n  // prior to this method being called\r\n  private refresh() {\r\n    if (typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('refresh');\r\n    }\r\n  }\r\n}\r\n",
    "import { Constants } from '../constants';\nimport { Column, Editor, EditorValidator, EditorValidatorOutput } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP = 1;\n\nexport class SliderEditor implements Editor {\n  private _elementRangeInputId: string;\n  private _elementRangeOutputId: string;\n  $editorElm: any;\n  $input: any;\n  $sliderNumber: any;\n  defaultValue: any;\n\n  constructor(private args: any) {\n    this.init();\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args && this.args.column || {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): any {\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\n  }\n\n  /** Getter for the Editor Generic Params */\n  private get editorParams(): any {\n    return this.columnEditor.params || {};\n  }\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator {\n    return this.columnEditor.validator || this.columnDef.validator;\n  }\n\n  init(): void {\n    const container = this.args.container;\n\n    // define the input & slider number IDs\n    const itemId = this.args && this.args.item && this.args.item.id;\n    this._elementRangeInputId = `rangeInput_${this.columnDef.field}_${itemId}`;\n    this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}_${itemId}`;\n\n    // create HTML string template\n    const editorTemplate = this.buildTemplateHtmlString();\n    this.$editorElm = $(editorTemplate);\n    this.$input = this.$editorElm.children('input');\n    this.$sliderNumber = this.$editorElm.children('div.input-group-addon.input-group-append').children();\n\n    // watch on change event\n    this.$editorElm\n      .appendTo(this.args.container)\n      .on('mouseup', (event: Event) => this.save());\n\n    // if user chose to display the slider number on the right side, then update it every time it changes\n    // we need to use both \"input\" and \"change\" event to be all cross-browser\n    if (!this.editorParams.hideSliderNumber) {\n      this.$editorElm.on('input change', (e: { target: HTMLInputElement }) => {\n        const value = e && e.target && e.target.value || '';\n        if (value) {\n          document.getElementById(this._elementRangeOutputId).innerHTML = e.target.value;\n        }\n      });\n    }\n  }\n\n  destroy() {\n    this.$editorElm.remove();\n  }\n\n  focus() {\n    this.$editorElm.focus();\n  }\n\n  save() {\n    this.args.commitChanges();\n  }\n\n  cancel() {\n    this.$input.val(this.defaultValue);\n    this.args.cancelChanges();\n  }\n\n  loadValue(item: any) {\n    // this.$input.val(this.defaultValue = item[this.columnDef.field]);\n    this.defaultValue = item[this.columnDef.field];\n    this.$input.val(this.defaultValue);\n    this.$input[0].defaultValue = this.defaultValue;\n    this.$sliderNumber.html(this.defaultValue);\n  }\n\n  serializeValue() {\n    return parseInt(this.$input.val() as string, 10) || 0;\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.columnDef.field] = state;\n  }\n\n  isValueChanged() {\n    const elmValue = this.$input.val();\n    return (!(elmValue === '' && this.defaultValue === null)) && (elmValue !== this.defaultValue);\n  }\n\n  validate(): EditorValidatorOutput {\n    const elmValue = this.$input.val();\n    const minValue = this.columnEditor.minValue;\n    const maxValue = this.columnEditor.maxValue;\n    const errorMsg = this.columnEditor.errorMessage;\n    const mapValidation = {\n      '{{minValue}}': minValue,\n      '{{maxValue}}': maxValue\n    };\n\n    if (this.validator) {\n      const validationResults = this.validator(elmValue);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    } else if (minValue !== undefined && (elmValue < minValue || elmValue > maxValue)) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString() {\n    const minValue = this.columnEditor.hasOwnProperty('minValue') ? this.columnEditor.minValue : DEFAULT_MIN_VALUE;\n    const maxValue = this.columnEditor.hasOwnProperty('maxValue') ? this.columnEditor.maxValue : DEFAULT_MAX_VALUE;\n    const defaultValue = this.editorParams.hasOwnProperty('sliderStartValue') ? this.editorParams.sliderStartValue : minValue;\n    const step = this.columnEditor.hasOwnProperty('valueStep') ? this.columnEditor.valueStep : DEFAULT_STEP;\n    const itemId = this.args && this.args.item && this.args.item.id;\n\n    if (this.editorParams.hideSliderNumber) {\n      return `\n      <div class=\"slider-editor\">\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\n          name=\"${this._elementRangeInputId}\"\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n          class=\"form-control slider-editor-input range\" />\n      </div>`;\n    }\n\n    return `\n      <div class=\"input-group slider-editor\">\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\n          name=\"${this._elementRangeInputId}\"\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n          class=\"form-control slider-editor-input range\" />\n        <div class=\"input-group-addon input-group-append slider-value\"><span class=\"input-group-text\" id=\"${this._elementRangeOutputId}\">${defaultValue}</span></div>\n      </div>`;\n  }\n}\n",
    "import { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class TextEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"text\" class=\"editor-text\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this.$input.val(val);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field] || '';\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue === null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { CheckboxEditor } from './checkboxEditor';\r\nimport { DateEditor } from './dateEditor';\r\nimport { FloatEditor } from './floatEditor';\r\nimport { IntegerEditor } from './integerEditor';\r\nimport { LongTextEditor } from './longTextEditor';\r\nimport { MultipleSelectEditor } from './multipleSelectEditor';\r\nimport { SingleSelectEditor } from './singleSelectEditor';\r\nimport { SliderEditor } from './sliderEditor';\r\nimport { TextEditor } from './textEditor';\r\n\r\nexport const Editors = {\r\n  /** Checkbox Editor (uses native checkbox DOM element) */\r\n  checkbox: CheckboxEditor,\r\n\r\n  /** Date Picker Editor (which uses 3rd party lib \"flatpickr\") */\r\n  date: DateEditor,\r\n\r\n  /** Float Number Editor */\r\n  float: FloatEditor,\r\n\r\n  /** Integer Editor */\r\n  integer: IntegerEditor,\r\n\r\n  /** Long Text Editor (uses a textarea) */\r\n  longText: LongTextEditor,\r\n\r\n  /** Multiple Select editor (which uses 3rd party lib \"multiple-select.js\") */\r\n  multipleSelect: MultipleSelectEditor,\r\n\r\n  /** Single Select editor (which uses 3rd party lib \"multiple-select.js\") */\r\n  singleSelect: SingleSelectEditor,\r\n\r\n  /** Slider Editor */\r\n  slider: SliderEditor,\r\n\r\n  /** Text Editor */\r\n  text: TextEditor\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const arrayToCsvFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && Array.isArray(value)) {\n    const values = value.join(', ');\n    return `<span title=\"${values}\">${values}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const boldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  } else {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkboxFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? '&#x2611;' : '';\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkmarkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? `<i class=\"fa fa-check checkmark-icon\" aria-hidden=\"true\"></i>` : '';\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of a params collection\n */\nexport const collectionFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.params || !columnDef.params.collection\n    || !columnDef.params.collection.length) {\n    return '';\n  }\n\n  const { params, params: { collection } } = columnDef;\n  const labelName = (params.customStructure) ? params.customStructure.label : 'label';\n  const valueName = (params.customStructure) ? params.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of an editor collection\n */\nexport const collectionEditorFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.internalColumnEditor || !columnDef.internalColumnEditor.collection\n    || !columnDef.internalColumnEditor.collection.length) {\n    return '';\n  }\n\n  const { internalColumnEditor, internalColumnEditor: { collection } } = columnDef;\n  const labelName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.label : 'label';\n  const valueName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const complexObjectFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!columnDef) {\n    return '';\n  }\n  const complexField = columnDef.field || '';\n  return complexField.split('.').reduce((obj, i) => (obj ? obj[i] : ''), dataContext);\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\n\nexport const dateIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIso);\n\nexport const dateTimeIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIsoAmPm);\n\nexport const dateTimeIsoAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUsAmPm);\n\nexport const dateTimeUsAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUs);\n\nexport const dateTimeUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\n\nexport const dateUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const decimalFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const params = columnDef.params || {};\n  const minDecimalPlaces = params.minDecimalPlaces || params.decimalPlaces || 2;\n  const maxDecimalPlaces = params.maxDecimalPlaces || 2;\n  return isNaN(+value) ? value : `${decimalFormatted(value, minDecimalPlaces, maxDecimalPlaces)}`;\n};\n\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const deleteIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-trash pointer delete-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredBoldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  } else {\n    return `<span style=\"color:red;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  isNaN(+value) ? '' : `$${decimalFormatted(value, 2, 4)}`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const editIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-pencil pointer edit-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const hyperlinkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && typeof value === 'string') {\n    const matchUrl = value.match(/^(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:\\/~\\+#]*[\\w\\-\\@?^=%&amp;\\/~\\+#])?/i);\n    if (matchUrl && Array.isArray(matchUrl)) {\n      return `<a href=\"${matchUrl[0]}\">' + value + '</a>`;\n    }\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\nexport const hyperlinkUriPrefixFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  let uriPrefix = (columnDef && columnDef.params && columnDef.params.uriPrefix) ? columnDef.params.uriPrefix : '';\n  if (!uriPrefix) {\n    throw new Error(`HyperlinkUriPrefix Formatter require a \"uriPrefix\" that can be passed through params. e.g.:: formatter: Formatters.hyperlinkUriPrefix, params: { uriPrefix: '/users/' }`);\n  }\n  if (value && uriPrefix && typeof uriPrefix === 'string' && !uriPrefix.includes('<script>')) {\n    uriPrefix += value;\n    return '<a href=\"' + uriPrefix + '\">' + value + '</a>';\n  }\n  return '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const infoIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-info-circle pointer info-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const lowercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toLowerCase() : '';\n};\n",
    "\nimport { Column, Formatter } from './../models/index';\n\n/**\n * Takes a value display it according to a mask provided\n * e.: 1234567890 with mask \"(000) 000-0000\" will display \"(123) 456-7890\"\n */\nexport const maskFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const params = columnDef.params || {};\n  const mask = params.mask;\n\n  if (!mask) {\n    throw new Error(`You must provide a \"mask\" via the generic \"params\" options (e.g.: { formatter: Formatters.mask, params: { mask: '000-000' }}`);\n  }\n\n  if (value && mask) {\n    let i = 0;\n    const v = value.toString();\n    return mask.replace(/[09A]/g, () => v[i++] || '');\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\nexport const multipleFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const params = columnDef.params || {};\n  if (!params.formatters || !Array.isArray(params.formatters)) {\n    throw new Error(`The multiple formatter requires the \"formatters\" to be provided as a column params.\n    For example: this.columnDefinitions = [{ id: title, field: title, formatter: Formatters.multiple, params: { formatters: [Formatters.lowercase, Formatters.uppercase] }`);\n  }\n  const formatters: Formatter[] = params.formatters;\n\n  // loop through all Formatters, the value of 1st formatter will be used by 2nd formatter and so on.\n  // they are piped and executed in sequences\n  let currentValue = value;\n  for (const formatter of formatters) {\n    currentValue = formatter(row, cell, currentValue, columnDef, dataContext, grid);\n  }\n  return currentValue;\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  if (value === null || value === '') {\r\n    return '';\r\n  }\r\n\r\n  const outputValue = value > 0 ? value / 100 : 0;\r\n  return `<span>${outputValue}%</span>`;\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'red';\n  } else if (value < 70) {\n    color = 'silver';\n  } else {\n    color = 'green';\n  }\n\n  return `<span class=\"percent-complete-bar\" style=\"background:${color}; width:${value}%\"></span>`;\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '-';\n  } else if (value < 50) {\n    return `<span style='color:red;font-weight:bold;'>${value}%</span>`;\n  } else {\n    return `<span style='color:green'>${value}%</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentSymbolFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  return value ? `<span>${value}%</span>` : '';\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const progressBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'danger';\n  } else if (value < 70) {\n    color = 'warning';\n  } else {\n    color = 'success';\n  }\n\n  return `<div class=\"progress\">\n    <div class=\"progress-bar progress-bar-${color} bg-${color}\" role=\"progressbar\" aria-valuenow=\"${value}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"min-width: 2em; width: ${value}%;\">\n    ${value}%\n    </div>\n  </div>`;\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a cell value and translates it with the \"ngx-translate\" service */\nexport const translateFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? translate.instant(value) : '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a boolean value, cast it to upperCase string and finally translates it with the \"ngx-translate\" service */\nexport const translateBooleanFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n  return value ? translate.instant(value.toUpperCase() as string) : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const uppercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toUpperCase() : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const yesNoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string =>\n  value ? 'Yes' : 'No';\n",
    "import { Column } from './../models/index';\nimport { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { boldFormatter } from './boldFormatter';\nimport { checkboxFormatter } from './checkboxFormatter';\nimport { checkmarkFormatter } from './checkmarkFormatter';\nimport { collectionFormatter } from './collectionFormatter';\nimport { collectionEditorFormatter } from './collectionEditorFormatter';\nimport { complexObjectFormatter } from './complexObjectFormatter';\nimport { dateIsoFormatter } from './dateIsoFormatter';\nimport { dateTimeIsoFormatter } from './dateTimeIsoFormatter';\nimport { dateTimeIsoAmPmFormatter } from './dateTimeIsoAmPmFormatter';\nimport { dateTimeUsAmPmFormatter } from './dateTimeUsAmPmFormatter';\nimport { dateTimeUsFormatter } from './dateTimeUsFormatter';\nimport { dateUsFormatter } from './dateUsFormatter';\nimport { decimalFormatter } from './decimalFormatter';\nimport { deleteIconFormatter } from './deleteIconFormatter';\nimport { dollarColoredBoldFormatter } from './dollarColoredBoldFormatter';\nimport { dollarColoredFormatter } from './dollarColoredFormatter';\nimport { dollarFormatter } from './dollarFormatter';\nimport { editIconFormatter } from './editIconFormatter';\nimport { hyperlinkFormatter } from './hyperlinkFormatter';\nimport { hyperlinkUriPrefixFormatter } from './hyperlinkUriPrefixFormatter';\nimport { infoIconFormatter } from './infoIconFormatter';\nimport { lowercaseFormatter } from './lowercaseFormatter';\nimport { maskFormatter } from './maskFormatter';\nimport { multipleFormatter } from './multipleFormatter';\nimport { percentFormatter } from './percentFormatter';\nimport { percentCompleteBarFormatter } from './percentCompleteBarFormatter';\nimport { percentCompleteFormatter } from './percentCompleteFormatter';\nimport { percentSymbolFormatter } from './percentSymbolFormatter';\nimport { progressBarFormatter } from './progressBarFormatter';\nimport { translateFormatter } from './translateFormatter';\nimport { translateBooleanFormatter } from './translateBooleanFormatter';\nimport { uppercaseFormatter } from './uppercaseFormatter';\nimport { yesNoFormatter } from './yesNoFormatter';\n\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const Formatters = {\n  /** Takes an array of string and converts it to a comma delimited string */\n  arrayToCsv: arrayToCsvFormatter,\n\n  /** show value in bold font weight as well */\n  bold: boldFormatter,\n\n  /** When value is filled (true), it will display a checkbox Unicode icon */\n  checkbox: checkboxFormatter,\n\n  /** When value is filled (true), it will display a Font-Awesome icon (fa-check) */\n  checkmark: checkmarkFormatter,\n\n  /** Takes a complex data object and return the data under that property (for example: \"user.firstName\" will return the first name \"John\") */\n  complexObject: complexObjectFormatter,\n\n  /**\n   * Looks up values from the columnDefinition.params.collection property and displays the label in CSV or string format\n   * @example\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\n   * const dataset = [{ value: 1 },{ value: 2 }];\n   */\n  collection: collectionFormatter,\n\n  /**\n   * Looks up values from the columnDefinition.editor.collection property and displays the label in CSV or string format\n   * @example\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\n   * const dataset = [{ value: 1 },{ value: 2 }];\n   */\n  collectionEditor: collectionEditorFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date format */\n  dateIso: dateIsoFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date+Time format */\n  dateTimeIso: dateTimeIsoFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date+Time+(am/pm) format */\n  dateTimeIsoAmPm: dateTimeIsoAmPmFormatter,\n\n  /** Takes a Date object and displays it as an US Date format */\n  dateUs: dateUsFormatter,\n\n  /** Takes a Date object and displays it as an US Date+Time format */\n  dateTimeUs: dateTimeUsFormatter,\n\n  /** Takes a Date object and displays it as an US Date+Time+(am/pm) format */\n  dateTimeUsAmPm: dateTimeUsAmPmFormatter,\n\n  /** Displays a Font-Awesome delete icon (fa-trash) */\n  deleteIcon: deleteIconFormatter,\n\n  /**\n   * Display the value as x decimals formatted, defaults to 2 decimals.\n   * You can pass \"decimalPlaces\" or \"minDecimalPlaces\" and/or \"maxDecimalPlaces\" to the generic \"params\" property, example:: `{ formatter: Formatters.decimal, params: { decimalPlaces: 3 }}`\n   * The property \"decimalPlaces\" is an alias of \"minDecimalPlaces\"\n   */\n  decimal: decimalFormatter,\n\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value */\n  dollar: dollarFormatter,\n\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value */\n  dollarColored: dollarColoredFormatter,\n\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value, show it in bold font weight as well */\n  dollarColoredBold: dollarColoredBoldFormatter,\n\n  /** Displays a Font-Awesome edit icon (fa-pencil) */\n  editIcon: editIconFormatter,\n\n  /** Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https). The structure will be \"<a href=\"hyperlink\">hyperlink</a>\" */\n  hyperlink: hyperlinkFormatter,\n\n  /** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\n  hyperlinkUriPrefix: hyperlinkUriPrefixFormatter,\n\n  /** Displays a Font-Awesome edit icon (fa-info-circle) */\n  infoIcon: infoIconFormatter,\n\n  /** Takes a value and displays it all lowercase */\n  lowercase: lowercaseFormatter,\n\n  /**\n   * Takes a value display it according to a mask provided\n   * e.: 1234567890 with mask \"(000) 000-0000\" will display \"(123) 456-7890\"\n   */\n  mask: maskFormatter,\n\n  /**\n   * You can pipe multiple formatters (executed in sequence), use params to pass the list of formatters. For example::\n   * { field: 'title', formatter: Formatters.multiple, params: { formatters: [ Formatters.lowercase, Formatters.uppercase ] }\n   */\n  multiple: multipleFormatter,\n\n  /** Takes a cell value number (between 0.0-1.0) and displays a red (<50) or green (>=50) bar */\n  percent: percentFormatter,\n\n  /** Takes a cell value number (between 0.0-100) and displays a red (<50) or green (>=50) bar */\n  percentComplete: percentCompleteFormatter,\n\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"percent-complete-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\n  percentCompleteBar: percentCompleteBarFormatter,\n\n  /** Takes a cell value number (between 0-100) and add the \"%\" after the number */\n  percentSymbol: percentSymbolFormatter,\n\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"progress-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\n  progressBar: progressBarFormatter,\n\n  /** Takes a cell value and translates it (i18n). Requires an instance of the Translate Service:: `i18n: this.translate */\n  translate: translateFormatter,\n\n  /** Takes a boolean value, cast it to upperCase string and finally translates it (i18n). */\n  translateBoolean: translateBooleanFormatter,\n\n  /** Takes a value and displays it all uppercase */\n  uppercase: uppercaseFormatter,\n\n  /** Takes a boolean value and display a string 'Yes' or 'No' */\n  yesNo: yesNoFormatter\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsPercentageFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + '%' + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const avgTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 4) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const minTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.min && totals.min[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const maxTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.max && totals.max[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 4) + suffix}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 2) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}`;\n  }\n  return '';\n};\n",
    "import { Column } from './../models/index';\nimport { avgTotalsPercentageFormatter } from './avgTotalsPercentageFormatter';\nimport { avgTotalsDollarFormatter } from './avgTotalsDollarFormatter';\nimport { avgTotalsFormatter } from './avgTotalsFormatter';\nimport { minTotalsFormatter } from './minTotalsFormatter';\nimport { maxTotalsFormatter } from './maxTotalsFormatter';\nimport { sumTotalsColoredFormatter } from './sumTotalsColoredFormatter';\nimport { sumTotalsDollarColoredBoldFormatter } from './sumTotalsDollarColoredBoldFormatter';\nimport { sumTotalsDollarColoredFormatter } from './sumTotalsDollarColoredFormatter';\nimport { sumTotalsDollarBoldFormatter } from './sumTotalsDollarBoldFormatter';\nimport { sumTotalsDollarFormatter } from './sumTotalsDollarFormatter';\nimport { sumTotalsFormatter } from './sumTotalsFormatter';\nimport { sumTotalsBoldFormatter } from './sumTotalsBoldFormatter';\n\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const GroupTotalFormatters = {\n  /**\n   * Average all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotals: avgTotalsFormatter,\n\n  /**\n   * Average all the column totals and display '$' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsDollar: avgTotalsDollarFormatter,\n\n  /**\n   * Average all the column totals and display '%' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsPercentage: avgTotalsPercentageFormatter,\n\n  /**\n   * Show max value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  maxTotals: maxTotalsFormatter,\n\n  /**\n   * Show min value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  minTotals: minTotalsFormatter,\n\n  /**\n   * Sums up all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotals: sumTotalsFormatter,\n\n  /**\n   * Sums up all the column totals and display it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsBold: sumTotalsBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsColored: sumTotalsColoredFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollar: sumTotalsDollarFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign and show it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarBold: sumTotalsDollarBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColored: sumTotalsDollarColoredFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value, show it in bold font weight as well\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColoredBold: sumTotalsDollarColoredBoldFormatter,\n};\n",
    "import { Pagination } from './../models/pagination.interface';\r\nimport { AfterViewInit, Component, EventEmitter, Injectable, Input, OnDestroy, Output } from '@angular/core';\r\nimport { castToPromise } from './../services/utilities';\r\nimport { GridOption } from './../models/index';\r\nimport { FilterService, SortService } from './../services/index';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n@Component({\r\n  selector: 'slick-pagination',\r\n  template: `<div class=\"slick-pagination\">\r\n    <div class=\"slick-pagination-nav\">\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-first fa fa-angle-double-left\" aria-label=\"First\" (click)=\"changeToFirstPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-prev fa fa-angle-left\" aria-label=\"Previous\" (click)=\"changeToPreviousPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n\r\n        <div class=\"slick-page-number\">\r\n            <span [translate]=\"'PAGE'\"></span>\r\n            <input type=\"text\" class=\"form-control\" value=\"{{pageNumber}}\" size=\"1\"  (change)=\"changeToCurrentPage($event)\">\r\n            <span [translate]=\"'OF'\"></span><span> {{pageCount}}</span>\r\n        </div>\r\n\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-next text-center fa fa-lg fa-angle-right\" aria-label=\"Next\" (click)=\"changeToNextPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-end fa fa-lg fa-angle-double-right\" aria-label=\"Last\" (click)=\"changeToLastPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n    </div>\r\n    <span class=\"slick-pagination-settings\">\r\n        <select id=\"items-per-page-label\" [value]=\"itemsPerPage\" (change)=\"onChangeItemPerPage($event)\">\r\n        <option value=\"{{pageSize}}\" *ngFor=\"let pageSize of paginationPageSizes;\">{{pageSize}}</option>\r\n        </select>\r\n        <span [translate]=\"'ITEMS_PER_PAGE'\"></span>,\r\n        <span class=\"slick-pagination-count\">\r\n            <span [translate]=\"'FROM_TO_OF_TOTAL_ITEMS'\" [translateParams]=\"{ from: dataFrom, to: dataTo, totalItems: totalItems }\"></span>\r\n        </span>\r\n    </span>\r\n    </div>\r\n`\r\n})\r\n@Injectable()\r\nexport class SlickPaginationComponent implements AfterViewInit, OnDestroy {\r\n  private _filterSubcription: Subscription;\r\n  private _gridPaginationOptions: GridOption;\r\n  private _isFirstRender = true;\r\n  @Output() onPaginationChanged = new EventEmitter<Pagination>();\r\n\r\n  @Input()\r\n  set gridPaginationOptions(gridPaginationOptions: GridOption) {\r\n    this._gridPaginationOptions = gridPaginationOptions;\r\n    if (this._isFirstRender || !gridPaginationOptions || !gridPaginationOptions.pagination || (gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n      this._isFirstRender = false;\r\n    }\r\n  }\r\n  get gridPaginationOptions(): GridOption {\r\n    return this._gridPaginationOptions;\r\n  }\r\n  @Input() grid: any;\r\n  dataFrom = 1;\r\n  dataTo = 1;\r\n  itemsPerPage: number;\r\n  pageCount = 0;\r\n  pageNumber = 1;\r\n  totalItems = 0;\r\n  paginationCallback: Function;\r\n  paginationPageSizes = [25, 75, 100];\r\n  fromToParams: any = { from: this.dataFrom, to: this.dataTo, totalItems: this.totalItems };\r\n\r\n  /** Constructor */\r\n  constructor(private filterService: FilterService, private sortService: SortService) { }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._gridPaginationOptions = this._gridPaginationOptions;\r\n    if (!this._gridPaginationOptions || !this._gridPaginationOptions.pagination || (this._gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n    }\r\n\r\n    // Subscribe to Event Emitter of Filter & Sort changed, go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterChanged.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n    // Subscribe to Filter clear and go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterCleared.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n  }\r\n\r\n  ceil(number: number) {\r\n    return Math.ceil(number);\r\n  }\r\n\r\n  changeToFirstPage(event: any) {\r\n    this.pageNumber = 1;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToLastPage(event: any) {\r\n    this.pageNumber = this.pageCount;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToNextPage(event: any) {\r\n    if (this.pageNumber < this.pageCount) {\r\n      this.pageNumber++;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToPreviousPage(event: any) {\r\n    if (this.pageNumber > 0) {\r\n      this.pageNumber--;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToCurrentPage(event: any) {\r\n    this.pageNumber = event.currentTarget.value;\r\n    if (this.pageNumber < 1) {\r\n          this.pageNumber = 1;\r\n    } else if (this.pageNumber > this.pageCount) {\r\n          this.pageNumber = this.pageCount;\r\n    }\r\n\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  dispose() {\r\n    this.onPaginationChanged.unsubscribe();\r\n    if (this._filterSubcription) {\r\n      this._filterSubcription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  onChangeItemPerPage(event: any) {\r\n    const itemsPerPage = +event.target.value;\r\n    this.pageCount = Math.ceil(this.totalItems / itemsPerPage);\r\n    this.pageNumber = 1;\r\n    this.itemsPerPage = itemsPerPage;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  refreshPagination(isPageNumberReset: boolean = false) {\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this._gridPaginationOptions && this._gridPaginationOptions.pagination) {\r\n      const pagination = this._gridPaginationOptions.pagination;\r\n      // set the number of items per page if not already set\r\n      if (!this.itemsPerPage) {\r\n        this.itemsPerPage = +((backendApi && backendApi.options && backendApi.options.paginationOptions && backendApi.options.paginationOptions.first) ? backendApi.options.paginationOptions.first : this._gridPaginationOptions.pagination.pageSize);\r\n      }\r\n\r\n      // if totalItems changed, we should always go back to the first page and recalculation the From-To indexes\r\n      if (isPageNumberReset || this.totalItems !== pagination.totalItems) {\r\n        if (this._isFirstRender && pagination.pageNumber && pagination.pageNumber > 1) {\r\n          this.pageNumber = pagination.pageNumber || 1;\r\n        } else {\r\n          this.pageNumber = 1;\r\n        }\r\n\r\n        // when page number is set to 1 then also reset the \"offset\" of backend service\r\n        if (this.pageNumber === 1) {\r\n          backendApi.service.resetPaginationOptions();\r\n        }\r\n      }\r\n\r\n      // calculate and refresh the multiple properties of the pagination UI\r\n      this.paginationPageSizes = this._gridPaginationOptions.pagination.pageSizes;\r\n      this.totalItems = this._gridPaginationOptions.pagination.totalItems;\r\n      this.recalculateFromToIndexes();\r\n    }\r\n    this.pageCount = Math.ceil(this.totalItems / this.itemsPerPage);\r\n  }\r\n\r\n  async onPageChanged(event: Event | undefined, pageNumber: number) {\r\n    this.recalculateFromToIndexes();\r\n\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this.dataTo > this.totalItems) {\r\n      this.dataTo = this.totalItems;\r\n    } else if (this.totalItems < this.itemsPerPage) {\r\n      this.dataTo = this.totalItems;\r\n    }\r\n    if (backendApi) {\r\n      const itemsPerPage = +this.itemsPerPage;\r\n\r\n      if (backendApi.preProcess) {\r\n        backendApi.preProcess();\r\n      }\r\n\r\n      const query = backendApi.service.processOnPaginationChanged(event, { newPage: pageNumber, pageSize: itemsPerPage });\r\n\r\n      // the process could be an Observable (like HttpClient) or a Promise\r\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n      const observableOrPromise = backendApi.process(query);\r\n      const processResult = await castToPromise(observableOrPromise);\r\n\r\n      // from the result, call our internal post process to update the Dataset and Pagination info\r\n      if (processResult && backendApi.internalPostProcess) {\r\n        backendApi.internalPostProcess(processResult);\r\n      }\r\n\r\n      // send the response process to the postProcess callback\r\n      if (backendApi.postProcess) {\r\n        backendApi.postProcess(processResult);\r\n      }\r\n    } else {\r\n      throw new Error('Pagination with a backend service requires \"BackendServiceApi\" to be defined in your grid options');\r\n    }\r\n\r\n    // emit the changes to the parent component\r\n    this.onPaginationChanged.emit({\r\n      pageNumber: this.pageNumber,\r\n      pageSizes: this.paginationPageSizes,\r\n      pageSize: this.itemsPerPage,\r\n      totalItems: this.totalItems\r\n    });\r\n  }\r\n\r\n  recalculateFromToIndexes() {\r\n    this.dataFrom = (this.pageNumber * this.itemsPerPage) - this.itemsPerPage + 1;\r\n    this.dataTo = (this.totalItems < this.itemsPerPage) ? this.totalItems : (this.pageNumber * this.itemsPerPage);\r\n  }\r\n}\r\n",
    "// import 3rd party vendor libs\nimport 'jquery-ui-dist/jquery-ui';\nimport 'slickgrid/lib/jquery.event.drag-2.3.0';\nimport 'slickgrid/slick.core';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.grid';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.groupitemmetadataprovider';\nimport 'slickgrid/controls/slick.columnpicker';\nimport 'slickgrid/controls/slick.gridmenu';\nimport 'slickgrid/controls/slick.pager';\nimport 'slickgrid/plugins/slick.autotooltips';\nimport 'slickgrid/plugins/slick.cellexternalcopymanager';\nimport 'slickgrid/plugins/slick.cellrangedecorator';\nimport 'slickgrid/plugins/slick.cellrangeselector';\nimport 'slickgrid/plugins/slick.cellselectionmodel';\nimport 'slickgrid/plugins/slick.checkboxselectcolumn';\nimport 'slickgrid/plugins/slick.headerbuttons';\nimport 'slickgrid/plugins/slick.headermenu';\nimport 'slickgrid/plugins/slick.rowmovemanager';\nimport 'slickgrid/plugins/slick.rowselectionmodel';\nimport { AfterViewInit, Component, EventEmitter, Inject, Injectable, Input, Output, OnDestroy, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, titleCase } from './../services/utilities';\nimport { GlobalGridOptions } from './../global-grid-options';\nimport {\n  AngularGridInstance,\n  BackendServiceOption,\n  Column,\n  GridOption,\n  GridStateChange,\n  GridStateType,\n  Pagination\n} from './../models/index';\nimport { ControlAndPluginService } from './../services/controlAndPlugin.service';\nimport { ExportService } from './../services/export.service';\nimport { FilterService } from './../services/filter.service';\nimport { GraphqlService } from './../services/graphql.service';\nimport { GridEventService } from './../services/gridEvent.service';\nimport { GridService } from './../services/grid.service';\nimport { GridStateService } from './../services/gridState.service';\nimport { GroupingAndColspanService } from './../services/groupingAndColspan.service';\nimport { ResizerService } from './../services/resizer.service';\nimport { SortService } from './../services/sort.service';\nimport { Subscription } from 'rxjs/Subscription';\nimport { CompoundDateFilter } from '../filters/compoundDateFilter';\nimport { CompoundInputFilter } from '../filters/compoundInputFilter';\nimport { InputFilter } from '../filters/inputFilter';\nimport { MultipleSelectFilter } from '../filters/multipleSelectFilter';\nimport { SingleSelectFilter } from '../filters/singleSelectFilter';\nimport { SelectFilter } from '../filters/selectFilter';\nimport { FilterFactory } from '../filters/filterFactory';\nimport { SlickgridConfig } from '../slickgrid-config';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\nconst slickgridEventPrefix = 'sg';\n\n@Injectable()\n@Component({\n  selector: 'angular-slickgrid',\n  template: `<div id=\"slickGridContainer-{{gridId}}\" #customElm class=\"gridPane\" [style.width]=\"gridWidthString\">\r\n    <div attr.id='{{gridId}}' class=\"slickgrid-container\" style=\"width: 100%\" [style.height]=\"gridHeightString\">\r\n    </div>\r\n\r\n    <slick-pagination id=\"slickPagingContainer-{{gridId}}\"\r\n        *ngIf=\"showPagination\"\r\n        (onPaginationChanged)=\"paginationChanged($event)\"\r\n        [gridPaginationOptions]=\"gridPaginationOptions\">\r\n    </slick-pagination>\r\n</div>\r\n`,\n  providers: [\n    CompoundDateFilter,\n    CompoundInputFilter,\n    InputFilter,\n    MultipleSelectFilter,\n    SingleSelectFilter,\n    SelectFilter,\n    ControlAndPluginService,\n    ExportService,\n    FilterFactory,\n    FilterService,\n    GraphqlService,\n    GridEventService,\n    GridService,\n    GridStateService,\n    GroupingAndColspanService,\n    ResizerService,\n    SortService,\n    SlickgridConfig\n  ]\n})\nexport class AngularSlickgridComponent implements AfterViewInit, OnDestroy, OnInit {\n  @ViewChild('customElm', {read: ElementRef}) customElm: ElementRef;\n  private _dataset: any[];\n  private _columnDefinitions: Column[];\n  private _dataView: any;\n  private _eventHandler: any = new Slick.EventHandler();\n  grid: any;\n  gridPaginationOptions: GridOption;\n  gridHeightString: string;\n  gridWidthString: string;\n  groupingDefinition: any = {};\n  groupItemMetadataProvider: any;\n  showPagination = false;\n  isGridInitialized = false;\n  subscriptions: Subscription[] = [];\n\n  @Output() onAngularGridCreated = new EventEmitter<AngularGridInstance>();\n  @Output() onDataviewCreated = new EventEmitter<any>();\n  @Output() onGridCreated = new EventEmitter<any>();\n  @Output() onGridInitialized = new EventEmitter<any>();\n  @Output() onBeforeGridCreate = new EventEmitter<boolean>();\n  @Output() onBeforeGridDestroy = new EventEmitter<any>();\n  @Output() onAfterGridDestroyed = new EventEmitter<boolean>();\n  @Output() onGridStateChanged = new EventEmitter<GridStateChange>();\n  @Input() gridId: string;\n  @Input() gridOptions: GridOption;\n  @Input() gridHeight = 0;\n  @Input() gridWidth = 0;\n\n  @Input()\n  set columnDefinitions(columnDefinitions: Column[]) {\n    this._columnDefinitions = columnDefinitions;\n    if (this.isGridInitialized) {\n      this.updateColumnDefinitionsList(columnDefinitions);\n    }\n  }\n  get columnDefinitions(): Column[] {\n    return this._columnDefinitions;\n  }\n  @Input()\n  set dataset(dataset: any[]) {\n    this._dataset = dataset;\n    this.refreshGridData(dataset);\n  }\n  get dataset(): any[] {\n    return this._dataView.getItems();\n  }\n\n\n  constructor(\n    private controlAndPluginService: ControlAndPluginService,\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private gridService: GridService,\n    private gridEventService: GridEventService,\n    private gridStateService: GridStateService,\n    private groupingAndColspanService: GroupingAndColspanService,\n    private resizer: ResizerService,\n    private sortService: SortService,\n    private translate: TranslateService,\n    @Inject('config') private forRootConfig: GridOption\n  ) {}\n\n  ngOnInit(): void {\n    this.onBeforeGridCreate.emit(true);\n    if (!this.gridOptions.enableAutoResize && !this.gridOptions.autoResize) {\n      this.gridHeightString = `${this.gridHeight}px`;\n      this.gridWidthString = `${this.gridWidth}px`;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.onBeforeGridDestroy.emit(this.grid);\n    this.destroy();\n    this.onAfterGridDestroyed.emit(true);\n  }\n\n  destroy() {\n    this._dataView = [];\n    this.gridOptions = {};\n    this._eventHandler.unsubscribeAll();\n    this.controlAndPluginService.dispose();\n    this.filterService.dispose();\n    this.gridEventService.dispose();\n    this.gridStateService.dispose();\n    this.groupingAndColspanService.dispose();\n    this.resizer.dispose();\n    this.sortService.dispose();\n    this.grid.destroy();\n\n    // also unsubscribe all RxJS subscriptions\n    this.subscriptions.forEach((subscription: Subscription) => {\n      if (subscription && subscription.unsubscribe) {\n        subscription.unsubscribe();\n      }\n    });\n    this.subscriptions = [];\n  }\n\n  ngAfterViewInit() {\n    this.initialization();\n    this.isGridInitialized = true;\n  }\n\n  initialization() {\n    // make sure the dataset is initialized (if not it will throw an error that it cannot getLength of null)\n    this._dataset = this._dataset || [];\n    this.gridOptions = this.mergeGridOptions(this.gridOptions);\n    this.createBackendApiInternalPostProcessCallback(this.gridOptions);\n\n    if (this.gridOptions.enableGrouping) {\n      this.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\n      this._dataView = new Slick.Data.DataView({\n        groupItemMetadataProvider: this.groupItemMetadataProvider,\n        inlineFilters: true\n      });\n    } else {\n      this._dataView = new Slick.Data.DataView();\n    }\n\n    // for convenience, we provide the property \"editor\" as an Angular-Slickgrid editor complex object\n    // however \"editor\" is used internally by SlickGrid for it's Editor Factory\n    // so in our lib we will swap \"editor\" and copy it into \"internalColumnEditor\"\n    // then take back \"editor.model\" and make it the new \"editor\" so that SlickGrid Editor Factory still works\n    this._columnDefinitions = this._columnDefinitions.map((c: Column | any) => ({\n      ...c,\n      editor: c.editor && c.editor.model,\n      internalColumnEditor: { ...c.editor }\n    })),\n\n    this.controlAndPluginService.createCheckboxPluginBeforeGridCreation(this._columnDefinitions, this.gridOptions);\n    this.grid = new Slick.Grid(`#${this.gridId}`, this._dataView, this._columnDefinitions, this.gridOptions);\n\n    this.controlAndPluginService.attachDifferentControlOrPlugins(this.grid, this._dataView, this.groupItemMetadataProvider);\n    this.attachDifferentHooks(this.grid, this.gridOptions, this._dataView);\n\n    // emit the Grid & DataView object to make them available in parent component\n    this.onGridCreated.emit(this.grid);\n    this.onDataviewCreated.emit(this._dataView);\n\n    this.grid.init();\n    this._dataView.beginUpdate();\n    this._dataView.setItems(this._dataset, this.gridOptions.datasetIdPropertyName);\n    this._dataView.endUpdate();\n\n    // after the DataView is created & updated execute some processes\n    this.executeAfterDataviewCreated(this.grid, this.gridOptions, this._dataView);\n\n    // attach resize ONLY after the dataView is ready\n    this.attachResizeHook(this.grid, this.gridOptions);\n\n    // attach grouping and header grouping colspan service\n    if (this.gridOptions.createPreHeaderPanel) {\n      this.groupingAndColspanService.init(this.grid, this._dataView);\n    }\n\n    // attach grid  service\n    this.gridService.init(this.grid, this._dataView);\n\n    // when user enables translation, we need to translate Headers on first pass & subsequently in the attachDifferentHooks\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders();\n    }\n\n    // if Export is enabled, initialize the service with the necessary grid and other objects\n    if (this.gridOptions.enableExport) {\n      this.exportService.init(this.grid, this._dataView);\n    }\n\n    // once all hooks are in placed and the grid is initialized, we can emit an event\n    this.onGridInitialized.emit(this.grid);\n\n    // attach the Backend Service API callback functions only after the grid is initialized\n    // because the preProcess() and onInit() might get triggered\n    if (this.gridOptions && this.gridOptions.backendServiceApi) {\n      this.attachBackendCallbackFunctions(this.gridOptions);\n    }\n\n    this.gridStateService.init(this.grid, this.controlAndPluginService, this.filterService, this.sortService);\n\n    this.onAngularGridCreated.emit({\n      // Slick Grid & DataView objects\n      dataView: this._dataView,\n      slickGrid: this.grid,\n\n      // return all available Services (non-singleton)\n      backendService: this.gridOptions && this.gridOptions.backendServiceApi && this.gridOptions.backendServiceApi.service,\n      exportService: this.exportService,\n      filterService: this.filterService,\n      gridEventService: this.gridEventService,\n      gridStateService: this.gridStateService,\n      gridService: this.gridService,\n      groupingService: this.groupingAndColspanService,\n      pluginService: this.controlAndPluginService,\n      resizerService: this.resizer,\n      sortService: this.sortService,\n    });\n  }\n\n  /**\n   * Define what our internal Post Process callback, it will execute internally after we get back result from the Process backend call\n   * For now, this is GraphQL Service only feautre and it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n   */\n  createBackendApiInternalPostProcessCallback(gridOptions: GridOption) {\n    if (gridOptions && gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      // internalPostProcess only works with a GraphQL Service, so make sure it is that type\n      if (backendApi && backendApi.service && backendApi.service instanceof GraphqlService) {\n        backendApi.internalPostProcess = (processResult: any) => {\n          const datasetName = (backendApi && backendApi.service && typeof backendApi.service.getDatasetName === 'function') ? backendApi.service.getDatasetName() : '';\n          if (processResult && processResult.data && processResult.data[datasetName]) {\n            this._dataset = processResult.data[datasetName].nodes;\n            this.refreshGridData(this._dataset, processResult.data[datasetName].totalCount);\n          } else {\n            this._dataset = [];\n          }\n        };\n      }\n    }\n  }\n\n  attachDifferentHooks(grid: any, gridOptions: GridOption, dataView: any) {\n    // on locale change, we have to manually translate the Headers, GridMenu\n    this.subscriptions.push(\n      this.translate.onLangChange.subscribe((event) => {\n        if (gridOptions.enableTranslate) {\n          this.controlAndPluginService.translateColumnHeaders();\n          this.controlAndPluginService.translateColumnPicker();\n          this.controlAndPluginService.translateGridMenu();\n          this.controlAndPluginService.translateHeaderMenu();\n        }\n      })\n    );\n\n    // if user entered some Columns \"presets\", we need to reflect them all in the grid\n    if (gridOptions.presets && Array.isArray(gridOptions.presets.columns) && gridOptions.presets.columns.length > 0) {\n      const gridColumns: Column[] = this.gridStateService.getAssociatedGridColumns(grid, gridOptions.presets.columns);\n      if (gridColumns && Array.isArray(gridColumns) && gridColumns.length > 0) {\n        // make sure that the checkbox selector is also visible if it is enabled\n        if (gridOptions.enableCheckboxSelector) {\n          const checkboxColumn = (Array.isArray(this._columnDefinitions) && this._columnDefinitions.length > 0) ? this._columnDefinitions[0] : null;\n          if (checkboxColumn && checkboxColumn.id === '_checkbox_selector' && gridColumns[0].id !== '_checkbox_selector') {\n            gridColumns.unshift(checkboxColumn);\n          }\n        }\n\n        // finally set the new presets columns (including checkbox selector if need be)\n        grid.setColumns(gridColumns);\n      }\n    }\n\n    // attach external sorting (backend) when available or default onSort (dataView)\n    if (gridOptions.enableSorting) {\n      gridOptions.backendServiceApi ? this.sortService.attachBackendOnSort(grid, dataView) : this.sortService.attachLocalOnSort(grid, dataView);\n    }\n\n    // attach external filter (backend) when available or default onFilter (dataView)\n    if (gridOptions.enableFiltering) {\n      this.filterService.init(grid);\n\n      // if user entered some \"presets\", we need to reflect them all in the DOM\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n        this.filterService.populateColumnFilterSearchTerms();\n      }\n      gridOptions.backendServiceApi ? this.filterService.attachBackendOnFilter(grid) : this.filterService.attachLocalOnFilter(grid, this._dataView);\n    }\n\n    // if user set an onInit Backend, we'll run it right away (and if so, we also need to run preProcess, internalPostProcess & postProcess)\n    if (gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      if (backendApi && backendApi.service && backendApi.service.init) {\n        backendApi.service.init(backendApi.options, gridOptions.pagination, this.grid);\n      }\n    }\n\n    // expose all Slick Grid Events through dispatch\n    for (const prop in grid) {\n      if (grid.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(grid[prop], (e: any, args: any) => {\n          this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\n        });\n      }\n    }\n\n    // expose all Slick DataView Events through dispatch\n    for (const prop in dataView) {\n      if (dataView.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(dataView[prop], (e: any, args: any) => {\n          this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\n        });\n      }\n    }\n\n    // expose GridState Service changes event through dispatch\n    this.subscriptions.push(\n      this.gridStateService.onGridStateChanged.subscribe((gridStateChange: GridStateChange) => {\n        this.onGridStateChanged.emit(gridStateChange);\n      })\n    );\n\n\n    // on cell click, mainly used with the columnDef.action callback\n    this.gridEventService.attachOnCellChange(grid, dataView);\n    this.gridEventService.attachOnClick(grid, dataView);\n\n    this._eventHandler.subscribe(dataView.onRowCountChanged, (e: any, args: any) => {\n      grid.updateRowCount();\n      grid.render();\n    });\n    this._eventHandler.subscribe(dataView.onRowsChanged, (e: any, args: any) => {\n      grid.invalidateRows(args.rows);\n      grid.render();\n    });\n\n    // does the user have a colspan callback?\n    if (gridOptions.colspanCallback) {\n      this._dataView.getItemMetadata = (rowNumber: number) => {\n        const item = this._dataView.getItem(rowNumber);\n        return gridOptions.colspanCallback(item);\n      };\n    }\n  }\n\n  attachBackendCallbackFunctions(gridOptions: GridOption) {\n    const backendApi = gridOptions.backendServiceApi;\n    const serviceOptions: BackendServiceOption = (backendApi && backendApi.service && backendApi.service.options) ? backendApi.service.options : {};\n    const isExecuteCommandOnInit = (!serviceOptions) ? false : ((serviceOptions && serviceOptions.hasOwnProperty('executeProcessCommandOnInit')) ? serviceOptions['executeProcessCommandOnInit'] : true);\n\n    // update backend filters (if need be) before the query runs\n    if (backendApi) {\n      const backendService = backendApi.service;\n\n      // if user entered some any \"presets\", we need to reflect them all in the grid\n      if (gridOptions && gridOptions.presets) {\n         // Filters \"presets\"\n         if (backendService && backendService.updateFilters && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n          backendService.updateFilters(gridOptions.presets.filters, true);\n        }\n        // Sorters \"presets\"\n        if (backendService && backendService.updateSorters && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n          backendService.updateSorters(undefined, gridOptions.presets.sorters);\n        }\n        // Pagination \"presets\"\n        if (backendService && backendService.updatePagination && gridOptions.presets.pagination) {\n          backendService.updatePagination(gridOptions.presets.pagination.pageNumber, gridOptions.presets.pagination.pageSize);\n        }\n      } else {\n        const columnFilters = this.filterService.getColumnFilters();\n        if (columnFilters && backendService && backendService.updateFilters) {\n          backendService.updateFilters(columnFilters, false);\n        }\n      }\n    }\n\n    if (backendApi && backendApi.service && (backendApi.onInit || isExecuteCommandOnInit)) {\n      const query = (typeof backendApi.service.buildQuery === 'function') ? backendApi.service.buildQuery() : '';\n      const observableOrPromise = (isExecuteCommandOnInit) ? backendApi.process(query) : backendApi.onInit(query);\n\n      // wrap this inside a setTimeout to avoid timing issue since the gridOptions needs to be ready before running this onInit\n      setTimeout(async () => {\n        if (backendApi.preProcess) {\n          backendApi.preProcess();\n        }\n\n        // the process could be an Observable (like HttpClient) or a Promise\n        // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n        const processResult = await castToPromise(observableOrPromise);\n\n        // define what our internal Post Process callback, only available for GraphQL Service for now\n        // it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n        if (processResult && backendApi && backendApi.service instanceof GraphqlService && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  attachResizeHook(grid: any, options: GridOption) {\n    // expand/autofit columns on first page load\n    if (grid && options.autoFitColumnsOnFirstLoad) {\n      grid.autosizeColumns();\n    }\n\n    // auto-resize grid on browser resize\n    this.resizer.init(grid);\n    if (options.enableAutoResize) {\n      this.resizer.attachAutoResizeDataGrid({ height: this.gridHeight, width: this.gridWidth });\n      if (grid && options.autoFitColumnsOnFirstLoad) {\n        grid.autosizeColumns();\n      }\n    }\n  }\n\n  executeAfterDataviewCreated(grid: any, gridOptions: GridOption, dataView: any) {\n    // if user entered some Sort \"presets\", we need to reflect them all in the DOM\n    if (gridOptions.enableSorting) {\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n        this.sortService.loadLocalPresets(grid, dataView);\n      }\n    }\n  }\n\n  mergeGridOptions(gridOptions): GridOption {\n    gridOptions.gridId = this.gridId;\n    gridOptions.gridContainerId = `slickGridContainer-${this.gridId}`;\n    if (gridOptions.enableFiltering || this.forRootConfig.enableFiltering) {\n      gridOptions.showHeaderRow = true;\n    }\n    // use jquery extend to deep merge and avoid immutable properties changed in GlobalGridOptions after route change\n    return $.extend(true, {}, GlobalGridOptions, this.forRootConfig, gridOptions);\n  }\n\n  paginationChanged(pagination: Pagination) {\n    this.gridStateService.onGridStateChanged.next({\n      change: { newValues: pagination, type: GridStateType.pagination },\n      gridState: this.gridStateService.getCurrentGridState()\n    });\n  }\n\n  /**\n   * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well\n   * @param dataset\n   */\n  refreshGridData(dataset: any[], totalCount?: number) {\n    if (dataset && this.grid && this._dataView && typeof this._dataView.setItems === 'function') {\n      this._dataView.setItems(dataset, this.gridOptions.datasetIdPropertyName);\n      if (!this.gridOptions.backendServiceApi) {\n        this._dataView.reSort();\n      }\n\n      // this.grid.setData(dataset);\n      this.grid.invalidate();\n      this.grid.render();\n\n      if (this.gridOptions.enablePagination || this.gridOptions.backendServiceApi) {\n        // do we want to show pagination?\n        // if we have a backendServiceApi and the enablePagination is undefined, we'll assume that we do want to see it, else get that defined value\n        this.showPagination = ((this.gridOptions.backendServiceApi && this.gridOptions.enablePagination === undefined) ? true : this.gridOptions.enablePagination) || false;\n\n        // before merging the grid options, make sure that it has the totalItems count\n        // once we have that, we can merge and pass all these options to the pagination component\n        if (!this.gridOptions.pagination) {\n          this.gridOptions.pagination = (this.gridOptions.pagination) ? this.gridOptions.pagination : undefined;\n        }\n        if (this.gridOptions.pagination && totalCount) {\n          this.gridOptions.pagination.totalItems = totalCount;\n        }\n        if (this.gridOptions.presets && this.gridOptions.presets.pagination && this.gridOptions.pagination) {\n          this.gridOptions.pagination.pageSize = this.gridOptions.presets.pagination.pageSize;\n          this.gridOptions.pagination.pageNumber = this.gridOptions.presets.pagination.pageNumber;\n        }\n        this.gridPaginationOptions = this.mergeGridOptions(this.gridOptions);\n      }\n      if (this.grid &&  this.gridOptions.enableAutoResize) {\n        // resize the grid inside a slight timeout, in case other DOM element changed prior to the resize (like a filter/pagination changed)\n        this.resizer.resizeGrid(10, { height: this.gridHeight, width: this.gridWidth });\n      }\n    }\n  }\n\n  /**\n   * Dynamically change or update the column definitions list.\n   * We will re-render the grid so that the new header and data shows up correctly.\n   * If using i18n, we also need to trigger a re-translate of the column headers\n   */\n  updateColumnDefinitionsList(newColumnDefinitions) {\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders(false, newColumnDefinitions);\n    } else {\n      this.controlAndPluginService.renderColumnHeaders(newColumnDefinitions);\n    }\n    this.grid.autosizeColumns();\n  }\n\n  /** Toggle the filter row displayed on first row\n   * @param isShowing\n   */\n  showHeaderRow(isShowing: boolean) {\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  /** Toggle the filter row displayed on first row */\n  toggleHeaderRow() {\n    const isShowing = !this.grid.getOptions().showHeaderRow;\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  private dispatchCustomEvent(eventName: string, data?: any, isBubbling: boolean = true) {\n    const eventInit: CustomEventInit = { bubbles: isBubbling };\n    if (data) {\n      eventInit.detail = data;\n    }\n    this.customElm.nativeElement.dispatchEvent(new CustomEvent(eventName, eventInit));\n  }\n}\n",
    "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AngularSlickgridComponent } from './../components/angular-slickgrid.component';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport { FilterFactory } from '../filters/filterFactory';\r\nimport { GraphqlService } from './../services/graphql.service';\r\nimport { GridOdataService } from './../services/grid-odata.service';\r\nimport { GridOption } from './../models/gridOption.interface';\r\nimport { SlickPaginationComponent } from './../components/slick-pagination.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TranslateModule\r\n  ],\r\n  declarations: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  exports: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  entryComponents: [AngularSlickgridComponent]\r\n})\r\nexport class AngularSlickgridModule {\r\n  static forRoot(config: GridOption = {}) {\r\n    return {\r\n      ngModule: AngularSlickgridModule,\r\n      providers: [\r\n        { provide: 'config', useValue: config },\r\n        CollectionService,\r\n        FilterFactory,\r\n        GraphqlService,\r\n        GridOdataService\r\n      ]\r\n    };\r\n  }\r\n}\r\n"
  ],
  "names": [
    "__awaiter",
    "thisArg",
    "_arguments",
    "P",
    "generator",
    "Promise",
    "resolve",
    "reject",
    "fulfilled",
    "value",
    "step",
    "next",
    "e",
    "rejected",
    "result",
    "done",
    "then",
    "apply",
    "__generator",
    "body",
    "f",
    "y",
    "t",
    "g",
    "_",
    "label",
    "sent",
    "trys",
    "ops",
    "verb",
    "throw",
    "return",
    "Symbol",
    "iterator",
    "this",
    "n",
    "v",
    "op",
    "TypeError",
    "call",
    "pop",
    "length",
    "push",
    "__values",
    "o",
    "m",
    "i",
    "__read",
    "r",
    "ar",
    "error",
    "__spread",
    "arguments",
    "concat",
    "colon",
    "comma",
    "equalSign",
    "pipe",
    "semicolon",
    "space",
    "tab",
    "doubleColon",
    "doublePipe",
    "doubleSemicolon",
    "csv",
    "doc",
    "docx",
    "pdf",
    "txt",
    "xls",
    "xlsx",
    "columns",
    "filter",
    "pagination",
    "sorter",
    "empty",
    "contains",
    "lessThan",
    "lessThanOrEqual",
    "greaterThan",
    "greaterThanOrEqual",
    "notEqual",
    "equal",
    "endsWith",
    "startsWith",
    "in",
    "notIn",
    "inContains",
    "notInContains",
    "asc",
    "ASC",
    "desc",
    "DESC",
    "moment",
    "moment_",
    "addWhiteSpaces",
    "nbSpaces",
    "htmlEntityDecode",
    "input",
    "replace",
    "match",
    "dec",
    "String",
    "fromCharCode",
    "arraysEqual",
    "a",
    "b",
    "orderMatters",
    "sort",
    "castToPromise",
    "fromServiceName",
    "promise",
    "Observable",
    "first",
    "toPromise",
    "take",
    "Error",
    "findOrDefault",
    "array",
    "logic",
    "defaultVal",
    "find",
    "decimalFormatted",
    "minDecimal",
    "maxDecimal",
    "isNaN",
    "minDec",
    "undefined",
    "maxDec",
    "amount",
    "Math",
    "round",
    "pow",
    "indexOf",
    "mapMomentDateFormatWithFieldType",
    "fieldType",
    "map",
    "FieldType",
    "dateTime",
    "dateTimeIso",
    "dateTimeIsoAmPm",
    "dateTimeIsoAM_PM",
    "dateUs",
    "dateUsShort",
    "dateTimeUs",
    "dateTimeUsAmPm",
    "dateTimeUsAM_PM",
    "dateTimeUsShort",
    "dateTimeUsShortAmPm",
    "dateUtc",
    "date",
    "dateIso",
    "mapFlatpickrDateFormatWithFieldType",
    "mapOperatorType",
    "operator",
    "OperatorType",
    "mapOperatorByFieldType",
    "string",
    "unknown",
    "float",
    "number",
    "dateTimeUsShortAM_PM",
    "parseUtcDate",
    "inputDateString",
    "useUtc",
    "test",
    "dateString",
    "decodeURIComponent",
    "dateMoment",
    "Date",
    "isValid",
    "year",
    "toString",
    "utc",
    "format",
    "sanitizeHtmlToText",
    "htmlString",
    "temp",
    "document",
    "createElement",
    "innerHTML",
    "textContent",
    "innerText",
    "titleCase",
    "charAt",
    "toUpperCase",
    "slice",
    "toCamelCase",
    "str",
    "offset",
    "toLowerCase",
    "compareDates",
    "value1",
    "value2",
    "sortDirection",
    "strict",
    "diff",
    "date1",
    "date2",
    "parseInt",
    "FORMAT",
    "dateUsShortSorter",
    "dateSorter",
    "ISO_8601",
    "dateIsoSorter",
    "dateUsSorter",
    "numericSorter",
    "x",
    "parseFloat",
    "stringSorter",
    "position",
    "Sorters",
    "numeric",
    "sortByFieldType",
    "sortResult",
    "CollectionService",
    "translate",
    "prototype",
    "filterCollection",
    "collection",
    "filterBy",
    "filteredCollection",
    "property_1",
    "property",
    "value_1",
    "item",
    "sortCollection",
    "sortBy",
    "enableTranslateLabel",
    "_this",
    "sortedCollection",
    "property_2",
    "sortDirection_1",
    "hasOwnProperty",
    "sortDesc",
    "fieldType_1",
    "dataRow1",
    "dataRow2",
    "instant",
    "parseBoolean",
    "type",
    "Injectable",
    "TranslateService",
    "booleanFilterCondition",
    "options",
    "searchTerm",
    "Array",
    "isArray",
    "searchTerms",
    "cellValue",
    "testFilterCondition",
    "includes",
    "findIndex",
    "val",
    "dateFilterCondition",
    "searchDateFormat",
    "filterSearchType",
    "dateCell",
    "dateSearch",
    "dateIsoFilterCondition",
    "dateUsFilterCondition",
    "dateUsShortFilterCondition",
    "dateUtcFilterCondition",
    "collectionSearchFilterCondition",
    "numberFilterCondition",
    "stringFilterCondition",
    "cellValueLastChar",
    "executeMappedCondition",
    "boolean",
    "FilterConditions",
    "booleanFilter",
    "collectionSearchFilter",
    "dateFilter",
    "dateIsoFilter",
    "dateUtcFilter",
    "dateUsFilter",
    "dateUsShortFilter",
    "numberFilter",
    "stringFilter",
    "testFilter",
    "require",
    "CompoundDateFilter",
    "_clearFilterTriggered",
    "Object",
    "defineProperty",
    "get",
    "grid",
    "getOptions",
    "_operator",
    "set",
    "init",
    "args",
    "callback",
    "columnDef",
    "$filterElm",
    "createDomElement",
    "$filterInputElm",
    "keyup",
    "onTriggerEvent",
    "$selectOperatorElm",
    "change",
    "clear",
    "flatInstance",
    "destroy",
    "off",
    "remove",
    "setValues",
    "values",
    "setDate",
    "buildDatePickerInput",
    "inputFormat",
    "outputFormat",
    "outputType",
    "currentLocale",
    "currentLang",
    "substring",
    "pickerOptions",
    "defaultDate",
    "altInput",
    "altFormat",
    "dateFormat",
    "wrap",
    "closeOnSelect",
    "locale",
    "loadFlatpickrLocale",
    "onChange",
    "selectedDates",
    "dateStr",
    "instance",
    "_currentValue",
    "enableTime",
    "CustomEvent",
    "placeholder",
    "gridOptions",
    "defaultFilterPlaceholder",
    "$",
    "flatpickr",
    "buildSelectOperatorHtmlString",
    "optionValues",
    "getOptionValues",
    "optionValueString",
    "forEach",
    "option",
    "description",
    "$headerElm",
    "getHeaderRowColumn",
    "id",
    "$filterContainerElm",
    "$containerInputGroup",
    "$operatorInputGroupAddon",
    "append",
    "attr",
    "data",
    "addClass",
    "appendTo",
    "localeDefault",
    "default",
    "clearFilterTriggered",
    "selectedOperator",
    "text",
    "removeClass",
    "hide",
    "close",
    "show",
    "open",
    "CompoundInputFilter",
    "buildInputHtmlString",
    "Inject",
    "CompoundSliderFilter",
    "params",
    "_elementRangeInputId",
    "field",
    "_elementRangeOutputId",
    "filterParams",
    "hideSliderNumber",
    "on",
    "target",
    "getElementById",
    "clearedValue",
    "sliderStartValue",
    "$containerInputGroupElm",
    "children",
    "last",
    "html",
    "buildTemplateHtmlString",
    "minValue",
    "filterProperties",
    "maxValue",
    "defaultValue",
    "valueStep",
    "buildTemplateSliderTextHtmlString",
    "searchTermInput",
    "$sliderTextInputAppendAddon",
    "InputFilter",
    "filterTemplate",
    "trigger",
    "MultipleSelectFilter",
    "collectionService",
    "isFilled",
    "defaultOptions",
    "container",
    "maxHeight",
    "okButton",
    "addTitle",
    "countSelected",
    "allSelected",
    "selectAllText",
    "selectAllDelimiter",
    "onClose",
    "selectedItems",
    "multipleSelect",
    "siblings",
    "labelName",
    "customStructure",
    "valueName",
    "newCollection",
    "collectionFilterBy",
    "collectionSortBy",
    "optionCollection",
    "labelKey",
    "selected",
    "findValueInSearchTerms",
    "textLabel",
    "assign",
    "filterOptions",
    "SelectFilter",
    "SingleSelectFilter",
    "single",
    "selectedItem",
    "SliderFilter",
    "Filters",
    "compoundDate",
    "compoundInput",
    "compoundSlider",
    "slider",
    "singleSelect",
    "select",
    "GlobalGridOptions",
    "alwaysShowVerticalScroll",
    "autoEdit",
    "asyncEditorLoading",
    "autoFitColumnsOnFirstLoad",
    "autoResize",
    "bottomPadding",
    "minHeight",
    "minWidth",
    "sidePadding",
    "cellHighlightCssClass",
    "checkboxSelector",
    "cssClass",
    "columnPicker",
    "hideForceFitButton",
    "hideSyncResizeButton",
    "datasetIdPropertyName",
    "defaultFilter",
    "editable",
    "enableAutoResize",
    "enableCellNavigation",
    "enableColumnPicker",
    "enableColumnReorder",
    "enableExport",
    "enableGridMenu",
    "enableHeaderMenu",
    "enableMouseHoverHighlightRow",
    "enableSorting",
    "enableTextSelectionOnCells",
    "explicitInitialization",
    "exportOptions",
    "delimiter",
    "DelimiterType",
    "exportWithFormatter",
    "filename",
    "FileType",
    "groupingAggregatorRowText",
    "sanitizeDataExport",
    "useUtf8WithBom",
    "forceFitColumns",
    "gridMenu",
    "hideClearAllFiltersCommand",
    "hideClearAllSortingCommand",
    "hideExportCsvCommand",
    "hideExportTextDelimitedCommand",
    "hideRefreshDatasetCommand",
    "hideToggleFilterCommand",
    "iconCssClass",
    "iconClearAllFiltersCommand",
    "iconClearAllSortingCommand",
    "iconExportCsvCommand",
    "iconExportTextDelimitedCommand",
    "iconRefreshDatasetCommand",
    "iconToggleFilterCommand",
    "menuWidth",
    "resizeOnShowHeaderRow",
    "headerMenu",
    "autoAlign",
    "autoAlignOffset",
    "iconSortAscCommand",
    "iconSortDescCommand",
    "iconColumnHideCommand",
    "hideColumnHideCommand",
    "hideSortCommands",
    "headerRowHeight",
    "multiColumnSort",
    "numberedMultiColumnSort",
    "tristateMultiColumnSort",
    "sortColNumberInSeparateSpan",
    "suppressActiveCellChangeOnEdit",
    "pageSizes",
    "pageSize",
    "totalItems",
    "rowHeight",
    "showHeaderRow",
    "topPanelHeight",
    "SlickgridConfig",
    "FilterFactory",
    "injector",
    "config",
    "_options",
    "createFilter",
    "columnFilter",
    "model",
    "filterInstance",
    "name",
    "createInjector",
    "service",
    "Injector",
    "create",
    "provide",
    "deps",
    "FilterService",
    "filterFactory",
    "_eventHandler",
    "Slick",
    "EventHandler",
    "_filters",
    "_columnFilters",
    "onFilterChanged",
    "Subject",
    "onFilterCleared",
    "_grid",
    "getColumns",
    "attachBackendOnFilter",
    "_slickSubscriber",
    "Event",
    "subscribe",
    "attachBackendOnFilterSubscribe",
    "bind",
    "onHeaderRowCellRendered",
    "addFilterTemplateToHeaderRow",
    "event",
    "backendApi",
    "_gridOptions",
    "backendServiceApi",
    "process",
    "preProcess",
    "processOnFilterChanged",
    "query",
    "_a",
    "emitFilterChanged",
    "processResult",
    "internalPostProcess",
    "postProcess",
    "attachLocalOnFilter",
    "dataView",
    "_dataView",
    "setFilterArgs",
    "columnFilters",
    "setFilter",
    "customLocalFilter",
    "columnId",
    "refresh",
    "clearFilters",
    "invalidate",
    "render",
    "tslib_1.__values",
    "keys",
    "_b",
    "columnIndex",
    "getColumnIndex",
    "queryField",
    "queryFieldFilter",
    "searchValues",
    "fieldSearchValue",
    "matches",
    "lastValueChar",
    "join",
    "k",
    "ln",
    "useFormatterOuputToFilter",
    "rowIndex",
    "getIdxById",
    "formatter",
    "dispose",
    "disposeColumnFilters",
    "unsubscribeAll",
    "unsubscribe",
    "index",
    "getColumnFilters",
    "getCurrentLocalFilters",
    "currentFilters",
    "colId",
    "callbackSearchEvent",
    "hasSearchTerms",
    "termsCount",
    "colFilter",
    "triggerEvent",
    "serviceOptions",
    "_onFilterChangedOptions",
    "column",
    "filterable",
    "filter_1",
    "updateColumnFilters",
    "filterArguments",
    "filterExistIndex",
    "filt",
    "sender",
    "backendService",
    "getCurrentFilters",
    "populateColumnFilterSearchTerms",
    "presets",
    "filters",
    "filters_1",
    "_columnDefinitions",
    "columnPreset",
    "presetFilter",
    "slickEvent",
    "isPropagationStopped",
    "extend",
    "EventData",
    "notify",
    "ExportService",
    "_lineCarriageReturn",
    "_hasGroupedItems",
    "onGridBeforeExportToFile",
    "onGridAfterExportToFile",
    "exportToFile",
    "_exportOptions",
    "dataOutput",
    "getDataOutput",
    "setTimeout",
    "downloadOptions",
    "csvContent",
    "startDownloadFile",
    "groupByColumnHeader",
    "groupingColumnHeaderTitle",
    "_exportQuoteWrapper",
    "outputDataString",
    "grouping",
    "getGrouping",
    "_columnHeaders",
    "getColumnHeaders",
    "header",
    "title",
    "getAllGridRowData",
    "lineCarriageReturn",
    "lineCount",
    "getLength",
    "rowNumber",
    "itemObj",
    "getItem",
    "readRegularRowData",
    "__groupTotals",
    "readGroupedTitleRow",
    "readGroupedTotalRow",
    "columnHeaders",
    "fieldName",
    "headerKey",
    "skippedField",
    "excludeFromExport",
    "width",
    "key",
    "row",
    "idx",
    "rowOutputString",
    "exportQuoteWrapper",
    "col",
    "fieldId",
    "isEvaluatingFormatter",
    "exportCustomFormatter",
    "itemData",
    "exportCsvForceToKeepAsString",
    "groupName",
    "level",
    "output",
    "groupTotalsFormatter",
    "navigator",
    "appName",
    "outputData",
    "mimeType",
    "TextEncoder",
    "encode",
    "blob",
    "Blob",
    "msSaveOrOpenBlob",
    "link",
    "csvUrl",
    "URL",
    "createObjectURL",
    "href",
    "setAttribute",
    "style",
    "visibility",
    "appendChild",
    "click",
    "removeChild",
    "SortService",
    "_currentLocalSorters",
    "_isBackendGrid",
    "onSortChanged",
    "onSortCleared",
    "attachBackendOnSort",
    "onSort",
    "onBackendSortChanged",
    "processOnSortChanged",
    "emitSortChanged",
    "attachLocalOnSort",
    "sortColumns",
    "sortCols",
    "sortAsc",
    "sortCol",
    "sortColumn",
    "direction",
    "SortDirection",
    "onLocalSortChanged",
    "clearSorting",
    "setSortColumns",
    "getCurrentLocalSorters",
    "getPreviousColumnSorts",
    "getSortColumns",
    "reduce",
    "cols",
    "loadLocalPresets",
    "sorters",
    "presetSorting",
    "gridColumn",
    "l",
    "columnSortObj",
    "SortDirectionNumber",
    "sortField",
    "neutral",
    "currentSorters",
    "getCurrentSorters",
    "Constants",
    "TEXT_CANCEL",
    "TEXT_CLEAR_ALL_FILTERS",
    "TEXT_CLEAR_ALL_SORTING",
    "TEXT_COLUMNS",
    "TEXT_COMMANDS",
    "TEXT_EXPORT_IN_CSV_FORMAT",
    "TEXT_EXPORT_IN_TEXT_FORMAT",
    "TEXT_FORCE_FIT_COLUMNS",
    "TEXT_HIDE_COLUMN",
    "TEXT_REFRESH_DATASET",
    "TEXT_SAVE",
    "TEXT_SYNCHRONOUS_RESIZE",
    "TEXT_SORT_ASCENDING",
    "TEXT_SORT_DESCENDING",
    "TEXT_TOGGLE_FILTER_ROW",
    "VALIDATION_EDITOR_VALID_NUMBER",
    "VALIDATION_EDITOR_VALID_INTEGER",
    "VALIDATION_EDITOR_NUMBER_BETWEEN",
    "VALIDATION_EDITOR_DECIMAL_BETWEEN",
    "ControlAndPluginService",
    "exportService",
    "filterService",
    "sortService",
    "areVisibleColumnDifferent",
    "extensionList",
    "getAllColumns",
    "allColumns",
    "getVisibleColumns",
    "visibleColumns",
    "getAllExtensions",
    "getExtensionByName",
    "p",
    "autoResizeColumns",
    "autosizeColumns",
    "attachDifferentControlOrPlugins",
    "groupItemMetadataProvider",
    "enableTranslate",
    "translateItems",
    "columnPickerControl",
    "createColumnPicker",
    "userOriginalGridMenu",
    "gridMenuControl",
    "createGridMenu",
    "enableAutoTooltip",
    "autoTooltipPlugin",
    "AutoTooltips",
    "autoTooltipOptions",
    "registerPlugin",
    "enableGrouping",
    "groupItemMetaProviderPlugin",
    "enableCheckboxSelector",
    "checkboxSelectorPlugin",
    "rowSelectionPlugin",
    "getSelectionModel",
    "RowSelectionModel",
    "rowSelectionOptions",
    "setSelectionModel",
    "preselectedRows",
    "selectRows",
    "enableRowSelection",
    "enableHeaderButton",
    "headerButtonsPlugin",
    "Plugins",
    "HeaderButtons",
    "headerButton",
    "onCommand",
    "headerMenuPlugin",
    "createHeaderMenu",
    "enableExcelCopyBuffer",
    "createUndoRedoBuffer",
    "hookUndoShortcutKey",
    "createCellExternalCopyManagerPlugin",
    "registerPlugins",
    "plugin",
    "createCheckboxPluginBeforeGridCreation",
    "columnDefinitions",
    "CheckboxSelectColumn",
    "selectionColumn",
    "getColumnDefinition",
    "excludeFromQuery",
    "excludeFromHeaderMenu",
    "unshift",
    "newRowIds",
    "pluginOptions",
    "clipboardCommandHandler",
    "editCommand",
    "undoRedoBuffer",
    "queueAndExecuteCommand",
    "dataItemColumnValueExtractor",
    "editor",
    "formattedOutput",
    "readOnlyMode",
    "includeHeaderWhenCopying",
    "newRowCreator",
    "count",
    "getData",
    "addItem",
    "CellSelectionModel",
    "cellExternalCopyManagerPlugin",
    "CellExternalCopyManager",
    "columnTitle",
    "getPickerTitleOutputString",
    "forceFitTitle",
    "syncResizeTitle",
    "Controls",
    "ColumnPicker",
    "onColumnsChanged",
    "getDefaultGridMenuOptions",
    "customItems",
    "addGridMenuCustomCommands",
    "sortItems",
    "GridMenu",
    "onBeforeMenuShow",
    "executeGridMenuInternalCustomCommands",
    "onMenuClose",
    "gridUid",
    "getUID",
    "getDefaultHeaderMenuOptions",
    "addHeaderMenuCustomCommands",
    "HeaderMenu",
    "executeHeaderMenuInternalCommands",
    "commandQueue",
    "commandCtr",
    "execute",
    "undo",
    "command",
    "GlobalEditorLock",
    "cancelCurrentEdit",
    "redo",
    "hideColumn",
    "removeColumnByIndex",
    "setColumns",
    "keydown",
    "which",
    "ctrlKey",
    "metaKey",
    "shiftKey",
    "gridMenuCustomItems",
    "enableFiltering",
    "disabled",
    "positionOrder",
    "customTitle",
    "headerMenuOptions",
    "menu",
    "items",
    "columnHeaderMenuItems",
    "sortable",
    "itemA",
    "itemB",
    "newSortColumns",
    "setHeaderRowVisibility",
    "setTopPanelVisibility",
    "showTopPanel",
    "refreshBackendDataset",
    "buildQuery",
    "el",
    "translateColumnPicker",
    "emptyColumnPickerTitles",
    "translateGridMenu",
    "emptyGridMenuTitles",
    "translateHeaderMenu",
    "resetHeaderMenuTranslations",
    "translateColumnHeaders",
    "newColumnDefinitions",
    "use",
    "renderColumnHeaders",
    "propName",
    "pickerName",
    "picker",
    "titleKey",
    "columnHeaderMenuItems_1",
    "propertyName",
    "inputKey",
    "outputKey",
    "items_1",
    "items_1_1",
    "timer",
    "GraphqlQueryBuilder",
    "queryFnName",
    "aliasOrFilter",
    "head",
    "alias",
    "prop",
    "getGraphQLValue",
    "searches",
    "_i",
    "searchKeys",
    "parceFind",
    "setAlias",
    "ReferenceError",
    "_levelA",
    "currentValue",
    "itemX",
    "RangeError",
    "propsAA",
    "JSON",
    "stringify",
    "propS",
    "objectToString",
    "obj",
    "sourceA",
    "DEFAULT_ITEMS_PER_PAGE",
    "GraphqlService",
    "defaultOrderBy",
    "defaultPaginationOptions",
    "datasetName",
    "queryQb",
    "QueryBuilder",
    "datasetQb",
    "dataQb",
    "columnIds",
    "columnDefinitions_1",
    "columnDefinitions_1_1",
    "fields",
    "buildFilterQuery",
    "isWithCursor",
    "pageInfoQb",
    "node",
    "datasetFilters",
    "paginationOptions",
    "sortingOptions",
    "orderBy",
    "filteringOptions",
    "addLocaleIntoQuery",
    "i18n",
    "extraQueryArguments",
    "_c",
    "queryArgument",
    "trimDoubleQuotesOnEnumField",
    "keepArgumentFieldDoubleQuotes",
    "inputArray",
    "shift",
    "split",
    "getInitPaginationOptions",
    "getDatasetName",
    "_currentFilters",
    "getCurrentPagination",
    "_currentPagination",
    "_currentSorters",
    "resetPaginationOptions",
    "after",
    "before",
    "pageNumber",
    "updateOptions",
    "debounceTypingDelay",
    "filterTypingDebounce",
    "castFilterToColumnFilter",
    "clearTimeout",
    "updateFilters",
    "processOnPaginationChanged",
    "updatePagination",
    "newPage",
    "updateSorters",
    "isUpdatedByPreset",
    "searchValue",
    "searchByArray",
    "_loop_1",
    "columnFilter_1",
    "this_1",
    "presetSorters",
    "graphqlSorters",
    "tmpSorterArray",
    "queryFieldSorter",
    "sortColumns_1",
    "sortColumns_1_1",
    "inputStr",
    "enumSearchWords",
    "patternWordInQuotes",
    "patternRegex",
    "reg",
    "RegExp",
    "group1",
    "group2",
    "group3",
    "removeDoubleQuotes",
    "tmpFilter",
    "padZero",
    "s",
    "trim",
    "allTitleCase",
    "outputStr",
    "substr",
    "OdataService",
    "_odataOptions",
    "filterQueue",
    "_defaultSortBy",
    "queryTmpArray",
    "top",
    "skip",
    "argument",
    "filterStr",
    "filterBySeparator",
    "saveColumnFilter",
    "updateFilterFromListTerms",
    "getFilterByColumn",
    "columnName",
    "getFilterCount",
    "removeColumnFilter",
    "search",
    "filterOptionObject",
    "updateFilterFromTerm",
    "searchBy",
    "tmpSearchByArray",
    "fieldSearchTerms",
    "tmpSearchTerms",
    "j",
    "lnj",
    "lnk",
    "caseType",
    "CaseType",
    "pascalCase",
    "GridOdataService",
    "odataService",
    "mergedOptions",
    "terms",
    "_loop_2",
    "columnFilter_2",
    "this_2",
    "bypassOdataQuery",
    "bypassBackendQuery",
    "encodeURIComponent",
    "dateFormatted",
    "mapOdataOperator",
    "sortByArray",
    "sorterArray",
    "sortColumns_2",
    "sortColumns_2_1",
    "columnFieldName",
    "csvString",
    "GridEventService",
    "attachOnCellChange",
    "onCellChange",
    "cell",
    "getDataItem",
    "returnedArgs",
    "gridDefinition",
    "dataContext",
    "attachOnClick",
    "onClick",
    "onCellClick",
    "GridStateService",
    "_columns",
    "_currentColumns",
    "subscriptions",
    "onGridStateChanged",
    "controlAndPluginService",
    "subscribeToAllGridChanges",
    "subscription",
    "getCurrentGridState",
    "gridState",
    "getCurrentColumns",
    "currentPagination",
    "getAssociatedCurrentColumns",
    "gridColumns",
    "currentColumns",
    "headerCssClass",
    "getAssociatedGridColumns",
    "currentColumn",
    "c",
    "hookExtensionEventToGridStateChange",
    "extensionName",
    "eventName",
    "extension",
    "newValues",
    "GridStateType",
    "hookSlickGridEventToGridStateChange",
    "resetColumns",
    "GridService",
    "gridStateService",
    "getColumnFromEventArguments",
    "getDataItemByRowNumber",
    "getItemRowMetadata",
    "previousItemMetadata",
    "meta",
    "cssClasses",
    "isEmptyObject",
    "_dirty",
    "rowClass",
    "highlightRow",
    "fadeDelay",
    "setSelectedRows",
    "getItemMetadata",
    "updateItem",
    "gridId",
    "getSelectedRows",
    "setSelectedRow",
    "rowIndexes",
    "renderGrid",
    "resetGrid",
    "originalColumns",
    "addItemToDatagrid",
    "shouldHighlightRow",
    "insertItem",
    "scrollRowIntoView",
    "deleteDataGridItem",
    "itemId",
    "deleteDataGridItemById",
    "getRowById",
    "deleteItem",
    "updateDataGridItem",
    "updateDataGridItemById",
    "GroupingAndColspanService",
    "createPreHeaderPanel",
    "createPreHeaderRowGroupingTitle",
    "onColumnsResized",
    "onRowCountChanged",
    "$preHeaderPanel",
    "getPreHeaderPanel",
    "css",
    "getHeadersWidth",
    "parent",
    "headerColumnWidthDiff",
    "getHeaderColumnWidthDiff",
    "lastColumnGroup",
    "widthTotal",
    "columnGroup",
    "ResizerService",
    "onGridBeforeResize",
    "attachAutoResizeDataGrid",
    "newSizes",
    "gridDomElm",
    "resizeGrid",
    "window",
    "_gridUid",
    "calculateGridNewDimensions",
    "containerElm",
    "containerId",
    "gridContainerId",
    "windowElm",
    "enablePagination",
    "gridHeight",
    "height",
    "coordOffsetTop",
    "availableHeight",
    "availableWidth",
    "newHeight",
    "newWidth",
    "getLastResizeDimensions",
    "_lastDimensions",
    "delay",
    "availableDimensions",
    "gridElm",
    "gridContainerElm",
    "heightWithPagination",
    "exec",
    "userAgent",
    "resizeCanvas",
    "AvgAggregator",
    "_field",
    "_count",
    "_nonNullCount",
    "_sum",
    "accumulate",
    "storeResult",
    "groupTotals",
    "avg",
    "MinAggregator",
    "_min",
    "min",
    "MaxAggregator",
    "_max",
    "max",
    "SumAggregator",
    "sum",
    "Aggregators",
    "Avg",
    "Min",
    "Max",
    "Sum",
    "CheckboxEditor",
    "internalColumnEditor",
    "columnEditor",
    "validator",
    "$input",
    "focus",
    "loadValue",
    "preClick",
    "serializeValue",
    "applyValue",
    "state",
    "isValueChanged",
    "validate",
    "validationResults",
    "valid",
    "msg",
    "DateEditor",
    "getCurrentLocale",
    "save",
    "commitChanges",
    "getColumnEditor",
    "domValue",
    "toDate",
    "FloatEditor",
    "getInputDecimalSteps",
    "keyCode",
    "KeyCode",
    "LEFT",
    "RIGHT",
    "stopImmediatePropagation",
    "getDecimalPlaces",
    "rtn",
    "decimalPlaces",
    "decimals",
    "zeroString",
    "decPlaces",
    "toFixed",
    "elmValue",
    "errorMsg",
    "errorMessage",
    "mapValidation",
    "{{minValue}}",
    "{{maxValue}}",
    "{{minDecimal}}",
    "{{maxDecimal}}",
    "matched",
    "IntegerEditor",
    "LongTextEditor",
    "_translate",
    "cancelText",
    "saveText",
    "$container",
    "$wrapper",
    "cancel",
    "handleKeyDown",
    "ENTER",
    "ESCAPE",
    "preventDefault",
    "TAB",
    "navigatePrev",
    "navigateNext",
    "cancelChanges",
    "left",
    "MultipleSelectEditor",
    "offsetLeft",
    "onOpen",
    "autoAdjustDropPosition",
    "$editorElm",
    "editorElmOptions",
    "editorTemplate",
    "each",
    "$e",
    "currentValues",
    "multipleSelectDomElement",
    "multipleSelectOptions",
    "windowHeight",
    "innerHeight",
    "pageScroll",
    "scrollTop",
    "$msDrop",
    "msDropHeight",
    "msDropOffsetTop",
    "newOffsetTop",
    "elementOptions",
    "SingleSelectEditor",
    "SliderEditor",
    "$sliderNumber",
    "editorParams",
    "TextEditor",
    "getValue",
    "setValue",
    "Editors",
    "checkbox",
    "integer",
    "longText",
    "arrayToCsvFormatter",
    "boldFormatter",
    "checkboxFormatter",
    "checkmarkFormatter",
    "collectionFormatter",
    "collectionEditorFormatter",
    "complexObjectFormatter",
    "dateIsoFormatter",
    "isDateValid",
    "dateTimeIsoFormatter",
    "dateTimeIsoAmPmFormatter",
    "dateTimeUsAmPmFormatter",
    "dateTimeUsFormatter",
    "dateUsFormatter",
    "decimalFormatter",
    "minDecimalPlaces",
    "maxDecimalPlaces",
    "deleteIconFormatter",
    "dollarColoredBoldFormatter",
    "dollarColoredFormatter",
    "dollarFormatter",
    "editIconFormatter",
    "hyperlinkFormatter",
    "matchUrl",
    "hyperlinkUriPrefixFormatter",
    "uriPrefix",
    "infoIconFormatter",
    "lowercaseFormatter",
    "maskFormatter",
    "mask",
    "i_1",
    "v_1",
    "multipleFormatter",
    "formatters",
    "formatters_1",
    "formatters_1_1",
    "percentFormatter",
    "percentCompleteBarFormatter",
    "percentCompleteFormatter",
    "percentSymbolFormatter",
    "progressBarFormatter",
    "color",
    "translateFormatter",
    "translateBooleanFormatter",
    "uppercaseFormatter",
    "yesNoFormatter",
    "Formatters",
    "arrayToCsv",
    "bold",
    "checkmark",
    "complexObject",
    "collectionEditor",
    "deleteIcon",
    "decimal",
    "dollar",
    "dollarColored",
    "dollarColoredBold",
    "editIcon",
    "hyperlink",
    "hyperlinkUriPrefix",
    "infoIcon",
    "lowercase",
    "multiple",
    "percent",
    "percentComplete",
    "percentCompleteBar",
    "percentSymbol",
    "progressBar",
    "translateBoolean",
    "uppercase",
    "yesNo",
    "avgTotalsPercentageFormatter",
    "totals",
    "prefix",
    "groupFormatterPrefix",
    "suffix",
    "groupFormatterSuffix",
    "avgTotalsDollarFormatter",
    "avgTotalsFormatter",
    "minTotalsFormatter",
    "maxTotalsFormatter",
    "sumTotalsColoredFormatter",
    "sumTotalsDollarColoredBoldFormatter",
    "sumTotalsDollarColoredFormatter",
    "sumTotalsDollarBoldFormatter",
    "sumTotalsDollarFormatter",
    "sumTotalsFormatter",
    "sumTotalsBoldFormatter",
    "GroupTotalFormatters",
    "avgTotals",
    "avgTotalsDollar",
    "avgTotalsPercentage",
    "maxTotals",
    "minTotals",
    "sumTotals",
    "sumTotalsBold",
    "sumTotalsColored",
    "sumTotalsDollar",
    "sumTotalsDollarBold",
    "sumTotalsDollarColored",
    "sumTotalsDollarColoredBold",
    "SlickPaginationComponent",
    "_isFirstRender",
    "onPaginationChanged",
    "EventEmitter",
    "dataFrom",
    "dataTo",
    "pageCount",
    "paginationPageSizes",
    "fromToParams",
    "from",
    "to",
    "_gridPaginationOptions",
    "gridPaginationOptions",
    "refreshPagination",
    "ngOnDestroy",
    "ngAfterViewInit",
    "_filterSubcription",
    "ceil",
    "changeToFirstPage",
    "onPageChanged",
    "changeToLastPage",
    "changeToNextPage",
    "changeToPreviousPage",
    "changeToCurrentPage",
    "currentTarget",
    "onChangeItemPerPage",
    "itemsPerPage",
    "isPageNumberReset",
    "recalculateFromToIndexes",
    "emit",
    "Component",
    "selector",
    "template",
    "Output",
    "Input",
    "AngularSlickgridComponent",
    "gridService",
    "gridEventService",
    "groupingAndColspanService",
    "resizer",
    "forRootConfig",
    "groupingDefinition",
    "showPagination",
    "isGridInitialized",
    "onAngularGridCreated",
    "onDataviewCreated",
    "onGridCreated",
    "onGridInitialized",
    "onBeforeGridCreate",
    "onBeforeGridDestroy",
    "onAfterGridDestroyed",
    "gridWidth",
    "updateColumnDefinitionsList",
    "getItems",
    "dataset",
    "_dataset",
    "refreshGridData",
    "ngOnInit",
    "gridHeightString",
    "gridWidthString",
    "initialization",
    "mergeGridOptions",
    "createBackendApiInternalPostProcessCallback",
    "Data",
    "GroupItemMetadataProvider",
    "DataView",
    "inlineFilters",
    "Grid",
    "attachDifferentHooks",
    "beginUpdate",
    "setItems",
    "endUpdate",
    "executeAfterDataviewCreated",
    "attachResizeHook",
    "attachBackendCallbackFunctions",
    "slickGrid",
    "groupingService",
    "pluginService",
    "resizerService",
    "backendApi_1",
    "nodes",
    "totalCount",
    "onLangChange",
    "checkboxColumn",
    "_loop_3",
    "this_3",
    "dispatchCustomEvent",
    "eventData",
    "_loop_4",
    "this_4",
    "gridStateChange",
    "updateRowCount",
    "onRowsChanged",
    "invalidateRows",
    "rows",
    "colspanCallback",
    "isExecuteCommandOnInit",
    "onInit",
    "observableOrPromise_1",
    "tslib_1.__awaiter",
    "paginationChanged",
    "reSort",
    "isShowing",
    "toggleHeaderRow",
    "isBubbling",
    "eventInit",
    "bubbles",
    "detail",
    "customElm",
    "nativeElement",
    "dispatchEvent",
    "providers",
    "decorators",
    "ViewChild",
    "read",
    "ElementRef",
    "AngularSlickgridModule",
    "forRoot",
    "ngModule",
    "useValue",
    "NgModule",
    "imports",
    "CommonModule",
    "TranslateModule",
    "declarations",
    "exports",
    "entryComponents",
    "buf",
    "charCodeAt"
  ],
  "mappings": "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"
}
