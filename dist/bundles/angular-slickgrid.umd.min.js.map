{
  "version": 3,
  "file": "angular-slickgrid.umd.min.js",
  "sources": [
    "ng://angular-slickgrid/node_modules/tslib/tslib.es6.js",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/delimiterType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/fileType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/gridStateType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/operatorType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/sortDirection.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/compareDateUtility.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsShortSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateIsoSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/numericSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/stringSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/sorterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/collection.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/booleanFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/filterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateIsoFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsShortFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUtcFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/collectionSearchFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/numberFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/stringFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/executeMappedCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundDateFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundInputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundSliderFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/inputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/multipleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/selectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/singleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/sliderFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/global-grid-options.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/slickgrid-config.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/filterFactory.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/filter.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/export.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/sort.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/constants.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/controlAndPlugin.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphqlQueryBuilder.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphql.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/global-utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid-odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridEvent.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridState.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/groupingAndColspan.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/resizer.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/avgAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/minAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/maxAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/sumAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/checkboxEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/dateEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/floatEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/integerEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/longTextEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/multipleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/singleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/sliderEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/textEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/arrayToCsvFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/boldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkboxFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkmarkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionEditorFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/complexObjectFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/decimalFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/deleteIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/editIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkUriPrefixFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/infoIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/lowercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/maskFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/multipleFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentSymbolFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/progressBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateBooleanFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/uppercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/yesNoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsPercentageFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/minTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/maxTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/slick-pagination.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/angular-slickgrid.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/modules/angular-slickgrid.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n",
    "export enum DelimiterType {\r\n  colon = ':',\r\n  comma = ',',\r\n  equalSign = '=',\r\n  pipe = '|',\r\n  semicolon = ';',\r\n  space = ' ',\r\n  tab = '\\t',\r\n\r\n  doubleColon = '::',\r\n  doublePipe = '||',\r\n  doubleSemicolon = ';;',\r\n}\r\n\r\n",
    "export enum FileType {\r\n  csv = 'csv',\r\n  doc = 'doc',\r\n  docx = 'docx',\r\n  pdf = 'pdf',\r\n  txt = 'txt',\r\n  xls = 'xls',\r\n  xlsx = 'xlsx'\r\n}\r\n",
    "export enum GridStateType {\r\n  columns = 'columns',\r\n  filter = 'filter',\r\n  pagination = 'pagination',\r\n  sorter = 'sorter'\r\n}\r\n",
    "export enum OperatorType {\n  /** value is empty */\n  empty = '',\n\n  /** value contains x */\n  contains = 'Contains',\n\n  /** value less than x */\n  lessThan = 'LT',\n\n  /** value less than or equal to x */\n  lessThanOrEqual = 'LE',\n\n  /** value greater than x */\n  greaterThan = 'GT',\n\n  /** value great than or equal to x */\n  greaterThanOrEqual = 'GE',\n\n  /** value not equal to x */\n  notEqual = 'NE',\n\n  /** value equal to x */\n  equal = 'EQ',\n\n  /** String ends with value */\n  endsWith = 'EndsWith',\n\n  /** String starts with value */\n  startsWith = 'StartsWith',\n\n  /** Find an equal match inside a collection */\n  in = 'IN',\n\n  /** Inverse (Not In) of an equal match inside a collection */\n  notIn = 'NOT_IN',\n\n  /**\n   * Find a substring contained inside a collection\n   * For example, this condition would return True with \"IN_CONTAINS\":: value='Task2,Task3', collection=['Task2','Task3']\n   * This would have returned False with \"IN\" because 'Task2' does not equal 'Task2,Task3'. However 'Task2' is contained in 'Task2,Task3'\n   */\n  inContains = 'IN_CONTAINS',\n\n  /** Inversed (Not In) of substring contained inside a collection */\n  notInContains = 'NOT_IN_CONTAINS',\n}\n",
    "export enum SortDirection {\r\n  asc = 'asc',\r\n  ASC = 'ASC',\r\n  desc = 'desc',\r\n  DESC = 'DESC'\r\n}\r\n",
    "import { FieldType, OperatorType } from '../models/index';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/first';\r\nimport 'rxjs/add/operator/take';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\n/** Simple function to which will loop and create as demanded the number of white spaces,\r\n * this will be used in the Excel export\r\n * @param int nbSpaces: number of white spaces to create\r\n */\r\nexport function addWhiteSpaces(nbSpaces): string {\r\n  let result = '';\r\n\r\n  for (let i = 0; i < nbSpaces; i++) {\r\n    result += ' ';\r\n  }\r\n  return result;\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityDecode(input: string): string {\r\n  return input.replace(/&#(\\d+);/g, function (match, dec) {\r\n    return String.fromCharCode(dec);\r\n  });\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityEncode(input: any): string {\r\n  const buf = [];\r\n  for (let i = input.length - 1; i >= 0; i--) {\r\n    buf.unshift(['&#', input[i].charCodeAt(), ';'].join(''));\r\n  }\r\n  return buf.join('');\r\n}\r\n\r\n/**\r\n * Compares two arrays to determine if all the items are equal\r\n * @param a first array\r\n * @param b second array to compare with a\r\n * @param [orderMatters=false] flag if the order matters, if not arrays will be sorted\r\n * @return boolean true if equal, else false\r\n */\r\nexport function arraysEqual(a: any[], b: any[], orderMatters: boolean = false): boolean {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n\r\n  if (a === null || b === null) {\r\n    return false;\r\n  }\r\n\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n\r\n  if (!orderMatters) {\r\n    a.sort();\r\n    b.sort();\r\n  }\r\n\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Try casting an input of type Promise | Observable into a Promise type.\r\n * @param object which could be of type Promise or Observable\r\n * @param fromServiceName string representing the caller service name and will be used if we throw a casting problem error\r\n */\r\nexport function castToPromise<T>(input: Promise<T> | Observable<T>, fromServiceName: string = ''): Promise<T> {\r\n  let promise: any = input;\r\n\r\n  if (input instanceof Promise) {\r\n    // if it's already a Promise then return it\r\n    return input;\r\n  } else if (input instanceof Observable) {\r\n    promise = input.first().toPromise();\r\n    if (!(promise instanceof Promise)) {\r\n      promise = input.take(1).toPromise();\r\n    }\r\n    if (!(promise instanceof Promise)) {\r\n      throw new Error(\r\n        `Something went wrong, Angular-Slickgrid ${fromServiceName} is not able to convert the Observable into a Promise.\r\n        If you are using Angular HttpClient, you could try converting your http call to a Promise with \".toPromise()\"\r\n        for example::  this.http.post('graphql', { query: graphqlQuery }).toPromise()\r\n        `);\r\n    }\r\n  }\r\n\r\n  return promise;\r\n}\r\n\r\n/**\r\n * Uses the logic function to find an item in an array or returns the default\r\n * value provided (empty object by default)\r\n * @param any[] array the array to filter\r\n * @param function logic the logic to find the item\r\n * @param any [defaultVal={}] the default value to return\r\n * @return object the found object or deafult value\r\n */\r\nexport function findOrDefault(array: any[], logic: (item: any) => boolean, defaultVal = {}): any {\r\n  return array.find(logic) || defaultVal;\r\n}\r\n\r\n/**\r\n  * Take a number (or a string) and display it as a formatted decimal string with defined minimum and maximum decimals\r\n  * @param input\r\n  * @param minDecimal\r\n  * @param maxDecimal\r\n  */\r\nexport function decimalFormatted(input: number | string, minDecimal?: number, maxDecimal?: number) {\r\n  if (isNaN(+input)) {\r\n    return input;\r\n  }\r\n\r\n  const minDec = (minDecimal === undefined) ? 2 : minDecimal;\r\n  const maxDec = (maxDecimal === undefined) ? 2 : maxDecimal;\r\n  let amount = String(Math.round(+input * Math.pow(10, maxDec)) / Math.pow(10, maxDec));\r\n\r\n  if (amount.indexOf('.') < 0) {\r\n    amount += '.';\r\n  }\r\n  while ((amount.length - amount.indexOf('.')) <= minDec) {\r\n    amount += '0';\r\n  }\r\n  return amount;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent moment.js format\r\n * refer to moment.js for the format standard used: https://momentjs.com/docs/#/parsing/string-format/\r\n * @param fieldType\r\n */\r\nexport function mapMomentDateFormatWithFieldType(fieldType: FieldType): string {\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'YYYY-MM-DD HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'YYYY-MM-DD hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'YYYY-MM-DD hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'MM/DD/YYYY';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'M/D/YY';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'MM/DD/YYYY HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'MM/DD/YYYY hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'MM/DD/YYYY hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'M/D/YY H:m:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'M/D/YY h:m:s a';\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'YYYY-MM-DD';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent Flatpickr format\r\n * refer to Flatpickr for the format standard used: https://chmln.github.io/flatpickr/formatting/#date-formatting-tokens\r\n * also note that they seem very similar to PHP format (except for am/pm): http://php.net/manual/en/function.date.php\r\n * @param fieldType\r\n */\r\nexport function mapFlatpickrDateFormatWithFieldType(fieldType: FieldType): string {\r\n  /*\r\n    d: Day of the month, 2 digits with leading zeros\t01 to 31\r\n    D: A textual representation of a day\tMon through Sun\r\n    l: (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday\r\n    j: Day of the month without leading zeros\t1 to 31\r\n    J: Day of the month without leading zeros and ordinal suffix\t1st, 2nd, to 31st\r\n    w: Numeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday)\r\n    F: A full textual representation of a month\tJanuary through December\r\n    m: Numeric representation of a month, with leading zero\t01 through 12\r\n    n: Numeric representation of a month, without leading zeros\t1 through 12\r\n    M: A short textual representation of a month\tJan through Dec\r\n    U: The number of seconds since the Unix Epoch\t1413704993\r\n    y: A two digit representation of a year\t99 or 03\r\n    Y: A full numeric representation of a year, 4 digits\t1999 or 2003\r\n    H: Hours (24 hours)\t00 to 23\r\n    h: Hours\t1 to 12\r\n    i: Minutes\t00 to 59\r\n    S: Seconds, 2 digits\t00 to 59\r\n    s: Seconds\t0, 1 to 59\r\n    K: AM/PM\tAM or PM\r\n  */\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'Y-m-d H:i:S';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'Y-m-d h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'Y-m-d h:i:S K';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'm/d/Y';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'm/d/y';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'm/d/Y H:i:S';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'm/d/Y h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'm/d/Y h:i:s K';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'm/d/y H:i:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'm/d/y h:i:s K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'Z';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'Y-m-d';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operators (ex.: <= is \"le\", > is \"gt\")\r\n * @param string operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorType(operator: string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (operator) {\r\n    case '<':\r\n      map = OperatorType.lessThan;\r\n      break;\r\n    case '<=':\r\n      map = OperatorType.lessThanOrEqual;\r\n      break;\r\n    case '>':\r\n      map = OperatorType.greaterThan;\r\n      break;\r\n    case '>=':\r\n      map = OperatorType.greaterThanOrEqual;\r\n      break;\r\n    case '<>':\r\n    case '!=':\r\n    case 'neq':\r\n    case 'NEQ':\r\n      map = OperatorType.notEqual;\r\n      break;\r\n    case '*':\r\n    case '.*':\r\n    case 'startsWith':\r\n      map = OperatorType.startsWith;\r\n      break;\r\n    case '*.':\r\n    case 'endsWith':\r\n      map = OperatorType.endsWith;\r\n      break;\r\n    case '=':\r\n    case '==':\r\n    case 'eq':\r\n    case 'EQ':\r\n      map = OperatorType.equal;\r\n      break;\r\n    case 'in':\r\n    case 'IN':\r\n      map = OperatorType.in;\r\n      break;\r\n    case 'notIn':\r\n    case 'NIN':\r\n    case 'NOT_IN':\r\n      map = OperatorType.notIn;\r\n      break;\r\n    default:\r\n      map = OperatorType.contains;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operator by a Filter Type\r\n * For example a multiple-select typically uses 'IN' operator\r\n * @param operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorByFieldType(fieldType: FieldType | string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.string:\r\n    case FieldType.unknown:\r\n      map = OperatorType.contains;\r\n      break;\r\n    case FieldType.float:\r\n    case FieldType.number:\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    case FieldType.date:\r\n    case FieldType.dateUtc:\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n    case FieldType.dateTimeIsoAmPm:\r\n    case FieldType.dateTimeIsoAM_PM:\r\n    case FieldType.dateUs:\r\n    case FieldType.dateUsShort:\r\n    case FieldType.dateTimeUs:\r\n    case FieldType.dateTimeUsAmPm:\r\n    case FieldType.dateTimeUsAM_PM:\r\n    case FieldType.dateTimeUsShort:\r\n    case FieldType.dateTimeUsShortAmPm:\r\n    case FieldType.dateTimeUsShortAM_PM:\r\n    default:\r\n      map = OperatorType.equal;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Parse a date passed as a string and return a Date object (if valid)\r\n * @param inputDateString\r\n * @returns string date formatted\r\n */\r\nexport function parseUtcDate(inputDateString: string, useUtc: boolean): string | null {\r\n  let date = null;\r\n\r\n  if (/^[0-9\\-\\/]*$/.test(inputDateString)) {\r\n    // get the UTC datetime with moment.js but we need to decode the value so that it's valid text\r\n    const dateString = decodeURIComponent(inputDateString);\r\n    const dateMoment = moment(new Date(dateString));\r\n    if (dateMoment.isValid() && dateMoment.year().toString().length === 4) {\r\n      date = (useUtc) ? dateMoment.utc().format() : dateMoment.format();\r\n    }\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\n/**\r\n * Sanitize, return only the text without HTML tags\r\n * @input htmlString\r\n * @return text\r\n */\r\nexport function sanitizeHtmlToText(htmlString: string) {\r\n  const temp = document.createElement('div');\r\n  temp.innerHTML = htmlString;\r\n  return temp.textContent || temp.innerText;\r\n}\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string\r\n * @returns string\r\n */\r\nexport function titleCase(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Converts a string to camel case\r\n * @param str the string to convert\r\n * @return the string in camel case\r\n */\r\nexport function toCamelCase(str: string): string {\r\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w|[\\s+\\-_\\/])/g, (match: string, offset: number) => {\r\n    // remove white space or hypens or underscores\r\n    if (/[\\s+\\-_\\/]/.test(match)) {\r\n      return '';\r\n    }\r\n\r\n    return offset === 0 ? match.toLowerCase() : match.toUpperCase();\r\n  });\r\n}\r\n\r\n/**\r\n * Converts a string to kebab (hypen) case\r\n * @param str the string to convert\r\n * @return the string in kebab case\r\n */\r\nexport function toKebabCase(str: string): string {\r\n  return toCamelCase(str).replace(/([A-Z])/g, '-$1').toLowerCase();\r\n}\r\n",
    "import * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport function compareDates(value1, value2, format, sortDirection, strict?: boolean) {\r\n  let diff = 0;\r\n\r\n  if (value1 === null || value1 === '' || !moment(value1, format, strict).isValid()) {\r\n    diff = -1;\r\n  } else if (value2 === null || value2 === '' || !moment(value2, format, strict).isValid()) {\r\n    diff = 1;\r\n  } else {\r\n    const date1 = moment(value1, format, strict);\r\n    const date2 = moment(value2, format, strict);\r\n    diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);\r\n  }\r\n\r\n  return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));\r\n}\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nimport { compareDates } from './compareDateUtility';\r\n\r\nexport const dateSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, moment.ISO_8601, sortDirection);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const numericSorter: Sorter = (value1, value2, sortDirection) => {\r\n  const x = (isNaN(value1) || value1 === '' || value1 === null) ? -99e+10 : parseFloat(value1);\r\n  const y = (isNaN(value2) || value2 === '' || value2 === null) ? -99e+10 : parseFloat(value2);\r\n  return sortDirection * (x === y ? 0 : (x > y ? 1 : -1));\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const stringSorter: Sorter = (value1, value2, sortDirection) => {\r\n  let position;\r\n  if (value1 === null) {\r\n    position = -1;\r\n  } else if (value2 === null) {\r\n    position = 1;\r\n  } else if (value1 === value2) {\r\n    position = 0;\r\n  } else if (sortDirection) {\r\n    position = value1 < value2 ? -1 : 1;\r\n  } else if (!sortDirection) {\r\n    position = value1 < value2 ? 1 : -1;\r\n  }\r\n  return sortDirection * position;\r\n};\r\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\nimport { dateUsShortSorter } from './dateUsShortSorter';\nimport { dateSorter } from './dateSorter';\nimport { dateIsoSorter } from './dateIsoSorter';\nimport { dateUsSorter } from './dateUsSorter';\nimport { numericSorter } from './numericSorter';\nimport { stringSorter } from './stringSorter';\n\nexport const Sorters = {\n  date: dateSorter,\n  dateIso: dateIsoSorter,\n  dateUs: dateUsSorter,\n  dateUsShort: dateUsShortSorter,\n  numeric: numericSorter,\n  string: stringSorter\n};\n",
    "import { FieldType } from './../models/index';\r\nimport { Sorters } from './index';\r\n\r\nexport function sortByFieldType(value1: any, value2: any, fieldType: FieldType, sortDirection: number) {\r\n  let sortResult = 0;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.number:\r\n      sortResult = Sorters.numeric(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.date:\r\n      sortResult = Sorters.date(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateIso:\r\n      sortResult = Sorters.dateIso(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUs:\r\n      sortResult = Sorters.dateUs(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      sortResult = Sorters.dateUsShort(value1, value2, sortDirection);\r\n      break;\r\n    default:\r\n      sortResult = Sorters.string(value1, value2, sortDirection);\r\n      break;\r\n  }\r\n\r\n  return sortResult;\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  CollectionFilterBy,\r\n  CollectionSortBy,\r\n  FieldType,\r\n  OperatorType,\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\n\r\n@Injectable()\r\nexport class CollectionService {\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /**\r\n   * Filter items from a collection\r\n   * @param collection\r\n   * @param filterBy\r\n   */\r\n  filterCollection(collection: any[], filterBy: CollectionFilterBy): any[] {\r\n    let filteredCollection: any[] = [];\r\n\r\n    if (filterBy) {\r\n      const property = filterBy.property || '';\r\n      const operator = filterBy.operator || OperatorType.equal;\r\n      // just check for undefined since the filter value could be null, 0, '', false etc\r\n      const value = typeof filterBy.value === 'undefined' ? '' : filterBy.value;\r\n\r\n      switch (operator) {\r\n        case OperatorType.equal:\r\n          filteredCollection = collection.filter((item) => item[property] === value);\r\n          break;\r\n        case OperatorType.in:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) !== -1);\r\n          break;\r\n        case OperatorType.notIn:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) === -1);\r\n          break;\r\n        case OperatorType.contains:\r\n          filteredCollection = collection.filter((item) => value.indexOf(item[property]) !== -1);\r\n          break;\r\n        default:\r\n          filteredCollection = collection.filter((item) => item[property] !== value);\r\n      }\r\n    }\r\n\r\n    return filteredCollection;\r\n  }\r\n\r\n  /**\r\n   * Sort items in a collection\r\n   * @param collection\r\n   * @param sortBy\r\n   * @param enableTranslateLabel\r\n   */\r\n  sortCollection(collection: any[], sortBy: CollectionSortBy, enableTranslateLabel?: boolean): any[] {\r\n    let sortedCollection: any[] = [];\r\n\r\n    if (sortBy) {\r\n      const property = sortBy.property || '';\r\n      const sortDirection = sortBy.hasOwnProperty('sortDesc') ? (sortBy.sortDesc ? -1 : 1) : 1;\r\n      const fieldType = sortBy.fieldType || FieldType.string;\r\n\r\n      sortedCollection = collection.sort((dataRow1: any, dataRow2: any) => {\r\n        const value1 = (enableTranslateLabel) ? this.translate.instant(dataRow1[property] || ' ') : dataRow1[property];\r\n        const value2 = (enableTranslateLabel) ? this.translate.instant(dataRow2[property] || ' ') : dataRow2[property];\r\n        const result = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n        return result;\r\n      });\r\n    }\r\n\r\n    return sortedCollection;\r\n  }\r\n}\r\n",
    "import { FilterCondition, FilterConditionOption } from './../models/index';\r\n\r\nfunction parseBoolean(str: number | string) {\r\n  return /(true|1)/i.test(str + '');\r\n}\r\n\r\nexport const booleanFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  return parseBoolean(options.cellValue) === parseBoolean(searchTerm);\r\n};\r\n",
    "export const testFilterCondition = (operator: string, value1: any, value2: any): boolean => {\n  switch (operator) {\n    case '<':\n    case 'LT': return (value1 < value2);\n    case '<=':\n    case 'LE': return (value1 <= value2);\n    case '>':\n    case 'GT': return (value1 > value2);\n    case '>=':\n    case 'GE': return (value1 >= value2);\n    case '!=':\n    case '<>':\n    case 'NE': return (value1 !== value2);\n    case '=':\n    case '==':\n    case 'EQ': return (value1 === value2);\n    case 'IN': return ((value2 && value2.includes) ? (value2.includes(value1)) : false);\n    case 'NIN':\n    case 'NOT_IN':\n      return ((value2 && value2.includes) ? (!value2.includes(value1)) : false);\n    case 'IN_CONTAINS':\n      if (value2 && Array.isArray(value2) && value2.findIndex) {\n        return ((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);\n      }\n      return false;\n    case 'NIN_CONTAINS':\n    case 'NOT_IN_CONTAINS':\n    if (value2 && Array.isArray(value2) && value2.findIndex) {\n      return !((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);\n    }\n    return false;\n}\nreturn true;\n};\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  const filterSearchType = options.filterSearchType || FieldType.dateIso;\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(filterSearchType);\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerm, searchDateFormat, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue);\r\n  const dateSearch = moment(searchTerm);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateUtcFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerms = Array.isArray(options.searchTerms) && options.searchTerms[0] || [];\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(options.filterSearchType || options.fieldType);\r\n  if (!moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerms[0], searchDateFormat, true).isValid()) {\r\n    return true;\r\n  }\r\n  const dateCell = moment(options.cellValue, moment.ISO_8601, true);\r\n  const dateSearch = moment(searchTerms[0], searchDateFormat, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const collectionSearchFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // multiple-select will always return text, so we should make our cell values text as well\r\n  const cellValue = options.cellValue + '';\r\n\r\n  return testFilterCondition(options.operator || 'IN', cellValue, options.searchTerms || []);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const numberFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const cellValue = parseFloat(options.cellValue);\r\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || 0;\r\n  if (typeof searchTerm === 'string') {\r\n    searchTerm = parseFloat(searchTerm);\r\n  }\r\n\r\n  if (!searchTerm && (!options.operator || options.operator === '')) {\r\n    return true;\r\n  }\r\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption, OperatorType } from '../models/index';\nimport { testFilterCondition } from './filterUtilities';\n\nexport const stringFilterCondition: FilterCondition = (options: FilterConditionOption) => {\n  // make sure the cell value is a string by casting it when possible\n  options.cellValue = (options.cellValue === undefined || options.cellValue === null) ? '' : options.cellValue.toString();\n\n  // make both the cell value and search value lower for case insensitive comparison\n  const cellValue = options.cellValue.toLowerCase();\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || '';\n  if (typeof searchTerm === 'string') {\n    searchTerm = searchTerm.toLowerCase();\n  }\n\n  if (options.operator === '*' || options.operator === OperatorType.endsWith) {\n    return cellValue.endsWith(searchTerm);\n  } else if ((options.operator === '' && options.cellValueLastChar === '*') || options.operator === OperatorType.startsWith) {\n    return cellValue.startsWith(searchTerm);\n  } else if (options.operator === '') {\n    return cellValue.includes(searchTerm);\n  }\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\n};\n",
    "import { booleanFilterCondition } from './booleanFilterCondition';\nimport { dateFilterCondition } from './dateFilterCondition';\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\nimport { FilterConditionOption } from './../models/filterConditionOption.interface';\nimport { FilterCondition } from '../models/filterCondition.interface';\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\nimport { numberFilterCondition } from './numberFilterCondition';\nimport { stringFilterCondition } from './stringFilterCondition';\nimport { FieldType } from '../models/index';\n\nexport const executeMappedCondition: FilterCondition = (options: FilterConditionOption) => {\n  // when using a multi-select ('IN' operator) we will not use the field type but instead go directly with a collection search\n  const operator = options.operator && options.operator.toUpperCase();\n  if (options && options.operator && (operator === 'IN' || operator === 'NIN' || operator === 'IN_CONTAINS' || operator === 'NIN_CONTAINS')) {\n    return collectionSearchFilterCondition(options);\n  }\n\n  // execute the mapped type, or default to String condition check\n  switch (options.fieldType) {\n    case FieldType.boolean:\n      return booleanFilterCondition(options);\n    case FieldType.date:\n      return dateFilterCondition(options);\n    case FieldType.dateUtc:\n      return dateUtcFilterCondition(options);\n    case FieldType.dateIso:\n      return dateIsoFilterCondition(options);\n    case FieldType.dateUs:\n    case FieldType.dateTimeUs:\n      return dateUsFilterCondition(options);\n    case FieldType.dateUsShort:\n    case FieldType.dateTimeUsShort:\n      return dateUsShortFilterCondition(options);\n    case FieldType.number:\n      return numberFilterCondition(options);\n    case FieldType.string:\n    default:\n      return stringFilterCondition(options);\n  }\n};\n",
    "import { FilterConditionOption } from './../models/filterConditionOption.interface';\r\nimport { booleanFilterCondition } from './booleanFilterCondition';\r\nimport { dateFilterCondition } from './dateFilterCondition';\r\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\r\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\r\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\r\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\r\nimport { executeMappedCondition } from './executeMappedCondition';\r\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { numberFilterCondition } from './numberFilterCondition';\r\nimport { stringFilterCondition } from './stringFilterCondition';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const FilterConditions = {\r\n  executeMappedCondition,\r\n  booleanFilter: booleanFilterCondition,\r\n  collectionSearchFilter: collectionSearchFilterCondition,\r\n  dateFilter: dateFilterCondition,\r\n  dateIsoFilter: dateIsoFilterCondition,\r\n  dateUtcFilter: dateUtcFilterCondition,\r\n  dateUsFilter: dateUsFilterCondition,\r\n  dateUsShortFilter: dateUsShortFilterCondition,\r\n  numberFilter: numberFilterCondition,\r\n  stringFilter: stringFilterCondition,\r\n  testFilter: testFilterCondition\r\n};\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { mapFlatpickrDateFormatWithFieldType } from '../services/utilities';\r\nimport { Column, Filter, FilterArguments, FilterCallback, FieldType, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\r\n\r\n// importing Flatpickr works better with a 'require'\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class CompoundDateFilter implements Filter {\r\n  private _clearFilterTriggered = false;\r\n  private $filterElm: any;\r\n  private $filterInputElm: any;\r\n  private $selectOperatorElm: any;\r\n  private _currentValue: string;\r\n  private _operator: OperatorType | OperatorString;\r\n  flatInstance: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  set operator(op: OperatorType | OperatorString) {\r\n    this._operator = op;\r\n  }\r\n  get operator(): OperatorType | OperatorString {\r\n    return this._operator || OperatorType.empty;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (args) {\r\n      this.grid = args.grid;\r\n      this.callback = args.callback;\r\n      this.columnDef = args.columnDef;\r\n      this.operator = args.operator || '';\r\n      this.searchTerms = args.searchTerms || [];\r\n\r\n      // date input can only have 1 search term, so we will use the 1st array index if it exist\r\n      const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n      // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n      // and initialize it if searchTerm is filled\r\n      this.$filterElm = this.createDomElement(searchTerm);\r\n\r\n      // step 3, subscribe to the keyup event and run the callback when that happens\r\n      // also add/remove \"filled\" class for styling purposes\r\n      this.$filterInputElm.keyup((e: any) => {\r\n        this.onTriggerEvent(e);\r\n      });\r\n      this.$selectOperatorElm.change((e: any) => {\r\n        this.onTriggerEvent(e);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.flatInstance && this.$selectOperatorElm) {\r\n      this._clearFilterTriggered = true;\r\n      this.searchTerms = [];\r\n      this.$selectOperatorElm.val(0);\r\n      this.flatInstance.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm[]) {\r\n    if (values && Array.isArray(values)) {\r\n      this.flatInstance.setDate(values[0]);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n  private buildDatePickerInput(searchTerm?: SearchTerm) {\r\n    const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\r\n    const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnDef.type || FieldType.dateUtc);\r\n    let currentLocale = this.translate.currentLang || 'en';\r\n    if (currentLocale.length > 2) {\r\n      currentLocale = currentLocale.substring(0, 2);\r\n    }\r\n\r\n    const pickerOptions: any = {\r\n      defaultDate: searchTerm || '',\r\n      altInput: true,\r\n      altFormat: outputFormat,\r\n      dateFormat: inputFormat,\r\n      wrap: true,\r\n      closeOnSelect: true,\r\n      locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n      onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n        this._currentValue = dateStr;\r\n\r\n        // when using the time picker, we can simulate a keyup event to avoid multiple backend request\r\n        // since backend request are only executed after user start typing, changing the time should be treated the same way\r\n        if (pickerOptions.enableTime) {\r\n          this.onTriggerEvent(new CustomEvent('keyup'));\r\n        } else {\r\n          this.onTriggerEvent(undefined);\r\n        }\r\n      }\r\n    };\r\n\r\n    // add the time picker when format is UTC (Z) or has the 'h' (meaning hours)\r\n    if (outputFormat && (outputFormat === 'Z' || outputFormat.toLowerCase().includes('h'))) {\r\n      pickerOptions.enableTime = true;\r\n    }\r\n\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    const $filterInputElm: any = $(`<div class=\"flatpickr\"><input type=\"text\" class=\"form-control\" data-input placeholder=\"${placeholder}\"></div>`);\r\n    this.flatInstance = ($filterInputElm[0] && typeof $filterInputElm[0].flatpickr === 'function') ? $filterInputElm[0].flatpickr(pickerOptions) : null;\r\n    return $filterInputElm;\r\n  }\r\n\r\n  private buildSelectOperatorHtmlString() {\r\n    const optionValues = this.getOptionValues();\r\n    let optionValueString = '';\r\n    optionValues.forEach((option) => {\r\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\r\n    });\r\n\r\n    return `<select class=\"form-control\">${optionValueString}</select>`;\r\n  }\r\n\r\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\r\n    return [\r\n      { operator: '' as OperatorString, description: '' },\r\n      { operator: '=' as OperatorString, description: '' },\r\n      { operator: '<' as OperatorString, description: '' },\r\n      { operator: '<=' as OperatorString, description: '' },\r\n      { operator: '>' as OperatorString, description: '' },\r\n      { operator: '>=' as OperatorString, description: '' },\r\n      { operator: '<>' as OperatorString, description: '' }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  private createDomElement(searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\r\n    this.$filterInputElm = this.buildDatePickerInput(searchTerm);\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\r\n    const $containerInputGroup = $(`<div class=\"input-group flatpickr\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon input-group-prepend operator\"></div>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon input-group-prepend operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <div class=flatpickr>\r\n          <input type=\"text\" class=\"form-control\" data-input>\r\n        </div>\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    $containerInputGroup.append($operatorInputGroupAddon);\r\n    $containerInputGroup.append(this.$filterInputElm);\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append($containerInputGroup);\r\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\r\n    this.$filterInputElm.data('columnId', this.columnDef.id);\r\n\r\n    if (this.operator) {\r\n      this.$selectOperatorElm.val(this.operator);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterContainerElm.addClass('filled');\r\n      this._currentValue = searchTerm as string;\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  private loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  private onTriggerEvent(e: Event | undefined) {\r\n    if (this._clearFilterTriggered) {\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\r\n      this._clearFilterTriggered = false; // reset flag for next use\r\n    } else {\r\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\r\n      (this._currentValue) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (this._currentValue ? [this._currentValue] : null), operator: selectedOperator || '' });\r\n    }\r\n  }\r\n\r\n  private hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  private show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n}\r\n",
    "import { Inject } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FieldType } from './../models/index';\nimport { Column, Filter, FilterArguments, FilterCallback, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class CompoundInputFilter implements Filter {\n  private _clearFilterTriggered = false;\n  private $filterElm: any;\n  private $filterInputElm: any;\n  private $selectOperatorElm: any;\n  private _operator: OperatorType | OperatorString;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor(private translate: TranslateService) {}\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  set operator(op: OperatorType | OperatorString) {\n    this._operator = op;\n  }\n  get operator(): OperatorType | OperatorString {\n    return this._operator || OperatorType.empty;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.operator = args.operator;\n    this.searchTerms = args.searchTerms || [];\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\n    // and initialize it if searchTerms is filled\n    this.$filterElm = this.createDomElement(searchTerm);\n\n    // step 3, subscribe to the keyup event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterInputElm.keyup((e: any) => {\n      this.onTriggerEvent(e);\n    });\n    this.$selectOperatorElm.change((e: any) => {\n      this.onTriggerEvent(e);\n    });\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm && this.$selectOperatorElm) {\n      this._clearFilterTriggered = true;\n      this.searchTerms = [];\n      this.$selectOperatorElm.val(0);\n      this.$filterInputElm.val('');\n      this.onTriggerEvent(null);\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('keyup').remove();\n      this.$selectOperatorElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values && Array.isArray(values)) {\n      this.$filterElm.val(values[0]);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  private buildInputHtmlString() {\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\n    return `<input class=\"form-control\" type=\"text\" placeholder=\"${placeholder}\" />`;\n  }\n\n  private buildSelectOperatorHtmlString() {\n    const optionValues = this.getOptionValues();\n    let optionValueString = '';\n    optionValues.forEach((option) => {\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\n    });\n\n    return `<select class=\"form-control\">${optionValueString}</select>`;\n  }\n\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\n    const type = (this.columnDef.type && this.columnDef.type) ? this.columnDef.type : FieldType.string;\n    let optionValues = [];\n\n    switch (type) {\n      case FieldType.string:\n        optionValues = [\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\n          { operator: '=' as OperatorString, description: this.translate.instant('EQUALS') },\n          { operator: 'a*' as OperatorString, description: this.translate.instant('STARTS_WITH') },\n          { operator: '*z' as OperatorString, description: this.translate.instant('ENDS_WITH') },\n          /*\n          { operator: 'IN' as OperatorString, description: this.translate.instant('IN_COLLECTION_SEPERATED_BY_COMMA') },\n          { operator: 'NIN' as OperatorString, description: this.translate.instant('NOT_IN_COLLECTION_SEPERATED_BY_COMMA') },\n          */\n        ];\n        break;\n      default:\n        optionValues = [\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\n          { operator: '=' as OperatorString, description: '' },\n          { operator: '<' as OperatorString, description: '' },\n          { operator: '<=' as OperatorString, description: '' },\n          { operator: '>' as OperatorString, description: '' },\n          { operator: '>=' as OperatorString, description: '' },\n          { operator: '<>' as OperatorString, description: '' }];\n        break;\n    }\n\n    return optionValues;\n  }\n\n  /**\n   * Create the DOM element\n   */\n  private createDomElement(searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM Select dropdown for the Operator\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\n    this.$filterInputElm = $(this.buildInputHtmlString());\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\n    const $containerInputGroup = $(`<div class=\"input-group\"></div>`);\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon input-group-prepend operator\"></div>`);\n\n    /* the DOM element final structure will be\n      <div class=\"input-group\">\n        <div class=\"input-group-addon input-group-prepend operator\">\n          <select class=\"form-control\"></select>\n        </div>\n        <input class=\"form-control\" type=\"text\" />\n      </div>\n    */\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\n    $containerInputGroup.append($operatorInputGroupAddon);\n    $containerInputGroup.append(this.$filterInputElm);\n\n    // create the DOM element & add an ID and filter class\n    $filterContainerElm.append($containerInputGroup);\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\n\n    this.$filterInputElm.val(searchTerm);\n    this.$filterInputElm.data('columnId', this.columnDef.id);\n\n    if (this.operator) {\n      this.$selectOperatorElm.val(this.operator);\n    }\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterContainerElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\n      $filterContainerElm.appendTo($headerElm);\n    }\n\n    return $filterContainerElm;\n  }\n\n  private onTriggerEvent(e: Event | undefined) {\n    if (this._clearFilterTriggered) {\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\n      this._clearFilterTriggered = false; // reset flag for next use\n    } else {\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\n      const value = this.$filterInputElm.val();\n      (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (value ? [value] : null), operator: selectedOperator || '' });\n    }\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport {\n  Column,\n  ColumnFilter,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  OperatorString,\n  OperatorType,\n  SearchTerm\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP = 1;\n\nexport class CompoundSliderFilter implements Filter {\n  private _clearFilterTriggered = false;\n  private _elementRangeInputId: string;\n  private _elementRangeOutputId: string;\n  private _operator: OperatorType | OperatorString;\n  private $containerInputGroupElm: any;\n  private $filterElm: any;\n  private $filterInputElm: any;\n  private $selectOperatorElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor() { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  /** Getter for the Filter Generic Params */\n  private get filterParams(): any {\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};\n  }\n\n  /** Getter for the `filter` properties */\n  private get filterProperties(): ColumnFilter {\n    return this.columnDef && this.columnDef.filter || {};\n  }\n\n  set operator(op: OperatorType | OperatorString) {\n    this._operator = op;\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return this._operator || OperatorType.empty;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    if (args) {\n      this.grid = args.grid;\n      this.callback = args.callback;\n      this.columnDef = args.columnDef;\n      this.operator = args.operator || '';\n      this.searchTerms = args.searchTerms || [];\n\n      // define the input & slider number IDs\n      this._elementRangeInputId = `rangeInput_${this.columnDef.field}`;\n      this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}`;\n\n      // filter input can only have 1 search term, so we will use the 1st array index if it exist\n      const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n\n      // step 1, create the DOM Element of the filter which contain the compound Operator+Input\n      // and initialize it if searchTerm is filled\n      this.$filterElm = this.createDomElement(searchTerm);\n\n      // step 3, subscribe to the keyup event and run the callback when that happens\n      // also add/remove \"filled\" class for styling purposes\n      this.$filterInputElm.change((e: any) => {\n        this.onTriggerEvent(e);\n      });\n      this.$selectOperatorElm.change((e: any) => {\n        this.onTriggerEvent(e);\n      });\n\n      // if user chose to display the slider number on the right side, then update it every time it changes\n      // we need to use both \"input\" and \"change\" event to be all cross-browser\n      if (!this.filterParams.hideSliderNumber) {\n        this.$filterInputElm.on('input change', (e: { target: HTMLInputElement }) => {\n          const value = e && e.target && e.target.value || '';\n          if (value) {\n            document.getElementById(this._elementRangeOutputId).innerHTML = value;\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Clear the filter value\n   */\n  clear() {\n    if (this.$filterElm && this.$selectOperatorElm) {\n      this._clearFilterTriggered = true;\n      this.searchTerms = [];\n      const clearedValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;\n      this.$selectOperatorElm.val(0);\n      this.$filterInputElm.val(clearedValue);\n      if (!this.filterParams.hideSliderNumber) {\n        this.$containerInputGroupElm.children('div.input-group-addon.input-group-append').children().last().html(clearedValue);\n      }\n      this.onTriggerEvent(undefined);\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values && Array.isArray(values)) {\n      this.$filterInputElm.val(values[0]);\n      this.$containerInputGroupElm.children('div.input-group-addon.input-group-append').children().last().html(values[0]);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /** Build HTML Template for the input range (slider) */\n  private buildTemplateHtmlString() {\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\n    const maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\n    const step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;\n\n    return `<input type=\"range\" id=\"${this._elementRangeInputId}\"\n              name=\"${this._elementRangeInputId}\"\n              defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n              class=\"form-control slider-filter-input range compound-slider\" />`;\n  }\n\n  /** Build HTML Template for the text (number) that is shown appended to the slider */\n  private buildTemplateSliderTextHtmlString() {\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\n\n    return `<div class=\"input-group-addon input-group-append slider-value\"><span class=\"input-group-text\" id=\"${this._elementRangeOutputId}\">${defaultValue}</span></div>`;\n  }\n\n  /** Build HTML Template select dropdown (operator) */\n  private buildSelectOperatorHtmlString() {\n    const optionValues = this.getOptionValues();\n    let optionValueString = '';\n    optionValues.forEach((option) => {\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\n    });\n\n    return `<select class=\"form-control\">${optionValueString}</select>`;\n  }\n\n  /** Get the available operator option values */\n  private getOptionValues(): { operator: OperatorString, description: string }[] {\n    return [\n      { operator: '' as OperatorString, description: '' },\n      { operator: '=' as OperatorString, description: '' },\n      { operator: '<' as OperatorString, description: '' },\n      { operator: '<=' as OperatorString, description: '' },\n      { operator: '>' as OperatorString, description: '' },\n      { operator: '>=' as OperatorString, description: '' },\n      { operator: '<>' as OperatorString, description: '' }\n    ];\n  }\n\n  /**\n   * Create the DOM element\n   */\n  private createDomElement(searchTerm?: SearchTerm) {\n    const searchTermInput = (searchTerm || '0') as string;\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM Select dropdown for the Operator\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\n    this.$filterInputElm = $(this.buildTemplateHtmlString());\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\n    this.$containerInputGroupElm = $(`<div class=\"input-group search-filter\"></div>`);\n    const $operatorInputGroupAddon = $(`<span class=\"input-group-addon input-group-prepend operator\"></span>`);\n\n    /* the DOM element final structure will be\n      <div class=\"input-group\">\n        <div class=\"input-group-addon input-group-prepend operator\">\n          <select class=\"form-control\"></select>\n        </div>\n        <input class=\"form-control\" type=\"text\" />\n        <div class=\"input-group-addon input-group-prepend\" id=\"rangeOuput_percentComplete\"><span class=\"input-group-text\">0</span></div>\n      </div>\n    */\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\n    this.$containerInputGroupElm.append($operatorInputGroupAddon);\n    this.$containerInputGroupElm.append(this.$filterInputElm);\n    if (!this.filterParams.hideSliderNumber) {\n      const $sliderTextInputAppendAddon = $(this.buildTemplateSliderTextHtmlString());\n      $sliderTextInputAppendAddon.children().html(searchTermInput);\n      this.$containerInputGroupElm.append($sliderTextInputAppendAddon);\n    }\n\n    // create the DOM element & add an ID and filter class\n    $filterContainerElm.append(this.$containerInputGroupElm);\n    $filterContainerElm.attr('id', `filter-${this.columnDef.field}`);\n\n    this.$filterInputElm.val(searchTermInput);\n    this.$filterInputElm.data('columnId', this.columnDef.field);\n\n    if (this.operator) {\n      this.$selectOperatorElm.val(this.operator);\n    }\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (searchTerm) {\n      $filterContainerElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\n      $filterContainerElm.appendTo($headerElm);\n    }\n\n    return $filterContainerElm;\n  }\n\n  private onTriggerEvent(e: Event | undefined) {\n    if (this._clearFilterTriggered) {\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\n      this._clearFilterTriggered = false; // reset flag for next use\n    } else {\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\n      const value = this.$filterInputElm.val();\n      (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (value ? [value] : null), operator: selectedOperator || '' });\n    }\n  }\n}\n",
    "import {\r\n  Column,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class InputFilter implements Filter {\r\n  private _clearFilterTriggered = false;\r\n  private $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor() {}\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.operator || '';\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.keyup((e: any) => {\r\n      const value = e && e.target && e.target.value || '';\r\n      if (this._clearFilterTriggered) {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\r\n        this._clearFilterTriggered = false; // reset flag for next use\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.$filterElm) {\r\n      this._clearFilterTriggered = true;\r\n      this.searchTerms = [];\r\n      this.$filterElm.val('');\r\n      this.$filterElm.trigger('keyup');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString() {\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    return `<input type=\"text\" class=\"form-control search-filter\" placeholder=\"${placeholder}\">`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n\r\n    $filterElm.val(searchTerm);\r\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CollectionService } from './../services/collection.service';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  MultipleSelectOption,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n  SelectOption,\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class MultipleSelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n  defaultOptions: MultipleSelectOption;\n  isFilled = false;\n  labelName: string;\n  valueName: string;\n  enableTranslateLabel = false;\n\n  /**\n   * Initialize the Filter\n   */\n  constructor(private translate: TranslateService, private collectionService: CollectionService) {\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,  // input search term on top of the select option list\n      maxHeight: 200,\n      okButton: true,\n      addTitle: true, // show tooltip of all selected items while hovering the filter\n      countSelected: this.translate.instant('X_OF_Y_SELECTED'),\n      allSelected: this.translate.instant('ALL_SELECTED'),\n      selectAllText: this.translate.instant('SELECT_ALL'),\n      selectAllDelimiter: ['', ''], // remove default square brackets of default text \"[Select All]\" => \"Select All\"\n\n      // we will subscribe to the onClose event for triggering our callback\n      // also add/remove \"filled\" class for styling purposes\n      onClose: () => {\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\n          this.isFilled = true;\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\n        } else {\n          this.isFilled = false;\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\n        }\n        this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: selectedItems });\n      }\n    };\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.in;\n  }\n\n  /**\n   * Initialize the filter template\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let newCollection = this.columnDef.filter.collection || [];\n\n    // user might want to filter certain items of the collection\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\n      const filterBy = this.columnDef.filter.collectionFilterBy;\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\n      const sortBy = this.columnDef.filter.collectionSortBy;\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString(newCollection);\n\n    // step 2, create the DOM Element of the filter & pre-load search terms\n    // also subscribe to the onClose event\n    this.createDomElement(filterTemplate);\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\n      this.$filterElm.multipleSelect('setSelects', []);\n      this.$filterElm.removeClass('filled');\n      this.searchTerms = [];\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off().remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values) {\n      this.$filterElm.multipleSelect('setSelects', values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString(optionCollection: any[]) {\n    let options = '';\n    optionCollection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.multipleSelect, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const selected = (this.findValueInSearchTerms(option[this.valueName]) >= 0) ? 'selected' : '';\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n\n      // html text of each select option\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\n\n      // if there's a search term, we will add the \"filled\" class for styling purposes\n      if (selected) {\n        this.isFilled = true;\n      }\n    });\n\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * Subscribe to the onClose event and run the callback when that happens\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    this.$filterElm = $(filterTemplate);\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\n    }\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterElm.data('columnId', this.columnDef.id);\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (this.isFilled) {\n      this.$filterElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\n      this.$filterElm.appendTo($headerElm);\n    }\n\n    // merge options & attach multiSelect\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\n    this.$filterElm = this.$filterElm.multipleSelect(options);\n  }\n\n  private findValueInSearchTerms(value: number | string): number {\n    if (this.searchTerms && Array.isArray(this.searchTerms)) {\n      for (let i = 0; i < this.searchTerms.length; i++) {\n        if (this.searchTerms[i] && this.searchTerms[i] === value) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n} from './../models/index';\nimport { Injectable } from '@angular/core';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class SelectFilter implements Filter {\n  private _clearFilterTriggered = false;\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n\n  constructor(private translate: TranslateService) {}\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\n      searchTerm = `${searchTerm}`;\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString();\n\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\n\n    // step 3, subscribe to the change event and run the callback when that happens\n    // also add/remove \"filled\" class for styling purposes\n    this.$filterElm.change((e: any) => {\n      const value = e && e.target && e.target.value || '';\n      if (this._clearFilterTriggered) {\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\n        this._clearFilterTriggered = false; // reset flag for next use\n        this.$filterElm.removeClass('filled');\n      } else {\n        this.$filterElm.addClass('filled');\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\n      }\n    });\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm) {\n      this._clearFilterTriggered = true;\n      this.searchTerms = [];\n      this.$filterElm.val('');\n      this.$filterElm.trigger('change');\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off('change').remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm | SearchTerm[]) {\n    if (values) {\n      this.$filterElm.val(values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  private buildTemplateHtmlString() {\n    if (!this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the Select Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.select, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    const optionCollection = this.columnDef.filter.collection || [];\n    const labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    const valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let options = '';\n    optionCollection.forEach((option: any) => {\n      if (!option || (option[labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.select, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n      const labelKey = option.labelKey || option[labelName];\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n      options += `<option value=\"${option[valueName]}\">${textLabel}</option>`;\n    });\n    return `<select class=\"form-control search-filter\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    const $filterElm = $(filterTemplate);\n    const searchTermInput = (searchTerm || '') as string;\n\n    $filterElm.val(searchTermInput);\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\n    $filterElm.data('columnId', this.columnDef.id);\n\n    // append the new DOM element to the header row\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\n      $filterElm.appendTo($headerElm);\n    }\n\n    return $filterElm;\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport { Injectable } from '@angular/core';\nimport { CollectionService } from './../services/collection.service';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  MultipleSelectOption,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n  SelectOption,\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class SingleSelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n  defaultOptions: MultipleSelectOption;\n  isFilled = false;\n  labelName: string;\n  valueName: string;\n  enableTranslateLabel = false;\n\n  constructor(private translate: TranslateService, private collectionService: CollectionService) {\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,  // input search term on top of the select option list\n      maxHeight: 200,\n      single: true,\n      onClose: () => {\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\n        let selectedItem = '';\n\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\n          selectedItem = selectedItems[0] || null;\n          this.isFilled = true;\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\n        } else {\n          this.isFilled = false;\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\n        }\n        this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: (selectedItem ? [selectedItem] : null) });\n      }\n    };\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms;\n\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let newCollection = this.columnDef.filter.collection || [];\n\n    // user might want to filter certain items of the collection\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\n      const filterBy = this.columnDef.filter.collectionFilterBy;\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\n      const sortBy = this.columnDef.filter.collectionSortBy;\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    // also when the search term is a boolean or a number, we will convert it to a string\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\n      searchTerm = `${searchTerm}`;\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString(newCollection || [], searchTerm);\n\n    // step 2, create the DOM Element of the filter & pre-load search term\n    this.createDomElement(filterTemplate);\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\n      this.$filterElm.multipleSelect('setSelects', []);\n      this.$filterElm.removeClass('filled');\n      this.searchTerms = [];\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off().remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm | SearchTerm[]) {\n    if (values) {\n      values = Array.isArray(values) ? values : [values];\n      this.$filterElm.multipleSelect('setSelects', values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString(optionCollection: any[], searchTerm?: SearchTerm) {\n    let options = '';\n    optionCollection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.singleSelect, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const selected = (option[this.valueName] === searchTerm) ? 'selected' : '';\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n\n      // html text of each select option\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\n\n      // if there's a search term, we will add the \"filled\" class for styling purposes\n      if (selected) {\n        this.isFilled = true;\n      }\n    });\n\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * Subscribe to the onClose event and run the callback when that happens\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    this.$filterElm = $(filterTemplate);\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\n    }\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterElm.data('columnId', this.columnDef.id);\n\n    // append the new DOM element to the header row\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\n      this.$filterElm.appendTo($headerElm);\n    }\n\n    // merge options & attach multiSelect\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\n    this.$filterElm = this.$filterElm.multipleSelect(options);\n  }\n}\n",
    "import {\r\n  Column,\r\n  ColumnFilter,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nconst DEFAULT_MIN_VALUE = 0;\r\nconst DEFAULT_MAX_VALUE = 100;\r\nconst DEFAULT_STEP = 1;\r\n\r\nexport class SliderFilter implements Filter {\r\n  private _clearFilterTriggered = false;\r\n  private _elementRangeInputId: string;\r\n  private _elementRangeOutputId: string;\r\n  private $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  /** Getter for the Filter Generic Params */\r\n  private get filterParams(): any {\r\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};\r\n  }\r\n\r\n  /** Getter for the `filter` properties */\r\n  private get filterProperties(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (!args) {\r\n      throw new Error('[Aurelia-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // define the input & slider number IDs\r\n    this._elementRangeInputId = `rangeInput_${this.columnDef.field}`;\r\n    this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}`;\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the change event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.change((e: any) => {\r\n      const value = e && e.target && e.target.value || '';\r\n      if (this._clearFilterTriggered) {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\r\n        this._clearFilterTriggered = false; // reset flag for next use\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\r\n      }\r\n    });\r\n\r\n    // if user chose to display the slider number on the right side, then update it every time it changes\r\n    // we need to use both \"input\" and \"change\" event to be all cross-browser\r\n    if (!this.filterParams.hideSliderNumber) {\r\n      this.$filterElm.on('input change', (e: { target: HTMLInputElement }) => {\r\n        const value = e && e.target && e.target.value || '';\r\n        if (value) {\r\n          document.getElementById(this._elementRangeOutputId).innerHTML = value;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.$filterElm) {\r\n      this._clearFilterTriggered = true;\r\n      this.searchTerms = [];\r\n      const clearedValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;\r\n      this.$filterElm.children('input').val(clearedValue);\r\n      this.$filterElm.children('div.input-group-addon.input-group-append').children().html(clearedValue);\r\n      this.$filterElm.trigger('change');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString() {\r\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\r\n    const maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;\r\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\r\n    const step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;\r\n\r\n    if (this.filterParams.hideSliderNumber) {\r\n      return `\r\n      <div class=\"search-filter\">\r\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\r\n          name=\"${this._elementRangeInputId}\"\r\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\r\n          class=\"form-control slider-filter-input range\" />\r\n      </div>`;\r\n    }\r\n\r\n    return `\r\n      <div class=\"input-group search-filter\">\r\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\r\n          name=\"${this._elementRangeInputId}\"\r\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\r\n          class=\"form-control slider-filter-input range\" />\r\n        <div class=\"input-group-addon input-group-append slider-value\">\r\n          <span class=\"input-group-text\" id=\"${this._elementRangeOutputId}\">${defaultValue}</span>\r\n        </div>\r\n      </div>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n    const searchTermInput = (searchTerm || '0') as string;\r\n\r\n    $filterElm.children('input').val(searchTermInput);\r\n    $filterElm.children('div.input-group-addon.input-group-append').children().html(searchTermInput);\r\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n",
    "import { Column, Filter } from './../models/index';\r\nimport { CompoundDateFilter } from './compoundDateFilter';\r\nimport { CompoundInputFilter } from './compoundInputFilter';\r\nimport { CompoundSliderFilter } from './compoundSliderFilter';\r\nimport { InputFilter } from './inputFilter';\r\nimport { MultipleSelectFilter } from './multipleSelectFilter';\r\nimport { SelectFilter } from './selectFilter';\r\nimport { SingleSelectFilter } from './singleSelectFilter';\r\nimport { SliderFilter } from './sliderFilter';\r\n\r\nexport const Filters = {\r\n  /** Compound Date Filter (compound of Operator + Date picker) */\r\n  compoundDate: CompoundDateFilter,\r\n\r\n  /** Compound Input Filter (compound of Operator + Input) */\r\n  compoundInput: CompoundInputFilter,\r\n\r\n  /** Compound Slider Filter (compound of Operator + Slider) */\r\n  compoundSlider: CompoundSliderFilter,\r\n\r\n  /** Default Filter, input type text filter */\r\n  input: InputFilter,\r\n\r\n  /** Slider Filter */\r\n  slider: SliderFilter,\r\n\r\n  /** Multiple Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  multipleSelect: MultipleSelectFilter,\r\n\r\n  /** Single Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  singleSelect: SingleSelectFilter,\r\n\r\n  /** Select filter, which uses native DOM element select */\r\n  select: SelectFilter\r\n};\r\n",
    "import { DelimiterType, FileType, GridOption } from './models/index';\r\nimport { Filters } from './filters/index';\r\n\r\n/**\r\n * Options that can be passed to the Bootstrap-Datetimepicker directly\r\n */\r\nexport const GlobalGridOptions: GridOption = {\r\n  alwaysShowVerticalScroll: true,\r\n  autoEdit: false,\r\n  asyncEditorLoading: false,\r\n  autoFitColumnsOnFirstLoad: true,\r\n  autoResize: {\r\n    bottomPadding: 20,\r\n    minHeight: 180,\r\n    minWidth: 300,\r\n    sidePadding: 0\r\n  },\r\n  cellHighlightCssClass: 'slick-cell-modified',\r\n  checkboxSelector: {\r\n    cssClass: 'slick-cell-checkboxsel'\r\n  },\r\n  columnPicker: {\r\n    hideForceFitButton: false,\r\n    hideSyncResizeButton: true\r\n  },\r\n  datasetIdPropertyName: 'id',\r\n  defaultFilterPlaceholder: '&#128269;',\r\n  defaultFilter: Filters.input,\r\n  editable: false,\r\n  enableAutoResize: true,\r\n  enableCellNavigation: false,\r\n  enableColumnPicker: true,\r\n  enableColumnReorder: true,\r\n  enableExport: true,\r\n  enableGridMenu: true,\r\n  enableHeaderMenu: true,\r\n  enableMouseHoverHighlightRow: true,\r\n  enableSorting: true,\r\n  enableTextSelectionOnCells: true,\r\n  explicitInitialization: true,\r\n  exportOptions: {\r\n    delimiter: DelimiterType.comma,\r\n    exportWithFormatter: false,\r\n    filename: 'export',\r\n    format: FileType.csv,\r\n    groupingAggregatorRowText: '',\r\n    sanitizeDataExport: false,\r\n    useUtf8WithBom: true\r\n  },\r\n  forceFitColumns: false,\r\n  gridMenu: {\r\n    hideClearAllFiltersCommand: false,\r\n    hideClearAllSortingCommand: false,\r\n    hideExportCsvCommand: false,\r\n    hideExportTextDelimitedCommand: true,\r\n    hideForceFitButton: false,\r\n    hideRefreshDatasetCommand: false,\r\n    hideSyncResizeButton: true,\r\n    hideToggleFilterCommand: false,\r\n    iconCssClass: 'fa fa-bars',\r\n    iconClearAllFiltersCommand: 'fa fa-filter text-danger',\r\n    iconClearAllSortingCommand: 'fa fa-unsorted text-danger',\r\n    iconExportCsvCommand: 'fa fa-download',\r\n    iconExportTextDelimitedCommand: 'fa fa-download',\r\n    iconRefreshDatasetCommand: 'fa fa-refresh',\r\n    iconToggleFilterCommand: 'fa fa-random',\r\n    menuWidth: 16,\r\n    resizeOnShowHeaderRow: true\r\n  },\r\n  headerMenu: {\r\n    autoAlign: true,\r\n    autoAlignOffset: 12,\r\n    minWidth: 140,\r\n    iconSortAscCommand: 'fa fa-sort-asc',\r\n    iconSortDescCommand: 'fa fa-sort-desc',\r\n    iconColumnHideCommand: 'fa fa-times',\r\n    hideColumnHideCommand: false,\r\n    hideSortCommands: false\r\n  },\r\n  headerRowHeight: 35,\r\n  multiColumnSort: true,\r\n  numberedMultiColumnSort: true,\r\n  tristateMultiColumnSort: false,\r\n  sortColNumberInSeparateSpan: true,\r\n  suppressActiveCellChangeOnEdit: true,\r\n  pagination: {\r\n    pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\r\n    pageSize: 25,\r\n    totalItems: 0\r\n  },\r\n  rowHeight: 35,\r\n  showHeaderRow: false,\r\n  topPanelHeight: 35\r\n};\r\n",
    "import { GlobalGridOptions } from './global-grid-options';\r\n\r\nexport class SlickgridConfig {\r\n  options: any;\r\n\r\n  constructor() {\r\n    this.options = GlobalGridOptions;\r\n  }\r\n}\r\n",
    "import { Injector, Injectable } from '@angular/core';\nimport { Filter } from '../models/filter.interface';\nimport { ColumnFilter } from '../models';\nimport { SlickgridConfig } from '../slickgrid-config';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CollectionService } from '../services/collection.service';\n\n@Injectable()\nexport class FilterFactory {\n  /**\n   * The options from the SlickgridConfig\n   */\n  private _options: any;\n\n  constructor(private config: SlickgridConfig, private translate: TranslateService, private collectionService: CollectionService) {\n    this._options = this.config.options;\n  }\n\n  // Uses the User model to create a new User\n  createFilter(columnFilter: ColumnFilter | undefined): Filter | undefined {\n    let filter: Filter | undefined;\n\n    if (columnFilter && columnFilter.model) {\n      filter = typeof columnFilter.model === 'function' ? new columnFilter.model(this.translate, this.collectionService) : columnFilter.model;\n    }\n\n    // fallback to the default filter\n    if (!filter && this._options.defaultFilter) {\n      filter = new this._options.defaultFilter(this.translate, this.collectionService);\n    }\n\n    return filter;\n  }\n}\n",
    "import { Component, Injectable } from '@angular/core';\nimport { castToPromise } from './utilities';\nimport { FilterConditions } from './../filter-conditions';\nimport {\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  Filter,\n  FilterArguments,\n  FilterCallbackArg,\n  FieldType,\n  GridOption,\n  OperatorType,\n  CurrentFilter,\n  SearchTerm,\n  SlickEvent,\n  OperatorString\n} from './../models/index';\nimport { FilterFactory } from '../filters/filterFactory';\nimport { Subject } from 'rxjs/Subject';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class FilterService {\n  private _eventHandler = new Slick.EventHandler();\n  private _slickSubscriber: SlickEvent;\n  private _filters: any[] = [];\n  private _columnFilters: ColumnFilters = {};\n  private _dataView: any;\n  private _grid: any;\n  private _onFilterChangedOptions: any;\n  onFilterChanged = new Subject<CurrentFilter[]>();\n  onFilterCleared = new Subject<boolean>();\n\n  constructor(private filterFactory: FilterFactory) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any): void {\n    this._grid = grid;\n  }\n\n  /**\n   * Attach a backend filter hook to the grid\n   * @param grid SlickGrid Grid object\n   */\n  attachBackendOnFilter(grid: any) {\n    this._filters = [];\n    this._slickSubscriber = new Slick.Event();\n\n    // subscribe to the SlickGrid event and call the backend execution\n    this._slickSubscriber.subscribe(this.attachBackendOnFilterSubscribe.bind(this));\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  async attachBackendOnFilterSubscribe(event: Event, args: any) {\n    if (!args || !args.grid) {\n      throw new Error('Something went wrong when trying to attach the \"attachBackendOnFilterSubscribe(event, args)\" function, it seems that \"args\" is not populated correctly');\n    }\n    const backendApi = this._gridOptions.backendServiceApi;\n    if (!backendApi || !backendApi.process || !backendApi.service) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    // run a preProcess callback if defined\n    if (backendApi.preProcess) {\n      backendApi.preProcess();\n    }\n\n    // call the service to get a query back\n    const query = await backendApi.service.processOnFilterChanged(event, args);\n\n    // emit an onFilterChanged event\n    if (args && !args.clearFilterTriggered) {\n      this.emitFilterChanged('remote');\n    }\n\n    // the process could be an Observable (like HttpClient) or a Promise\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n    const observableOrPromise = backendApi.process(query);\n    const processResult = await castToPromise(observableOrPromise);\n\n    // from the result, call our internal post process to update the Dataset and Pagination info\n    if (processResult && backendApi.internalPostProcess) {\n      backendApi.internalPostProcess(processResult);\n    }\n\n    // send the response process to the postProcess callback\n    if (backendApi.postProcess !== undefined) {\n      backendApi.postProcess(processResult);\n    }\n  }\n\n  /**\n   * Attach a local filter hook to the grid\n   * @param grid SlickGrid Grid object\n   * @param dataView\n   */\n  attachLocalOnFilter(grid: any, dataView: any) {\n    this._filters = [];\n    this._dataView = dataView;\n    this._slickSubscriber = new Slick.Event();\n\n    dataView.setFilterArgs({ columnFilters: this._columnFilters, grid: this._grid });\n    dataView.setFilter(this.customLocalFilter.bind(this, dataView));\n\n    this._slickSubscriber.subscribe((e: any, args: any) => {\n      const columnId = args.columnId;\n      if (columnId != null) {\n        dataView.refresh();\n      }\n      if (args && !args.clearFilterTriggered) {\n        this.emitFilterChanged('local');\n      }\n    });\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  /** Clear the search filters (below the column titles) */\n  clearFilters() {\n    this._filters.forEach((filter: Filter) => {\n      if (filter && filter.clear) {\n        // clear element and trigger a change\n        filter.clear();\n      }\n    });\n\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to clear columnFilter (without looping through) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // we also need to refresh the dataView and optionally the grid (it's optional since we use DataView)\n    if (this._dataView) {\n      this._dataView.refresh();\n      this._grid.invalidate();\n      this._grid.render();\n    }\n\n    // emit an event when filters are all cleared\n    this.onFilterCleared.next(true);\n  }\n\n  customLocalFilter(dataView: any, item: any, args: any) {\n    for (const columnId of Object.keys(args.columnFilters)) {\n      const columnFilter = args.columnFilters[columnId];\n      const columnIndex = args.grid.getColumnIndex(columnId);\n      const columnDef = args.grid.getColumns()[columnIndex];\n      if (!columnDef) {\n        return false;\n      }\n      const fieldType = columnDef.type || FieldType.string;\n      const filterSearchType = (columnDef.filterSearchType) ? columnDef.filterSearchType : null;\n\n      let cellValue = item[columnDef.queryField || columnDef.queryFieldFilter || columnDef.field];\n\n      // if we find searchTerms use them but make a deep copy so that we don't affect original array\n      // we might have to overwrite the value(s) locally that are returned\n      // e.g: we don't want to operator within the search value, since it will fail filter condition check trigger afterward\n      const searchValues = (columnFilter && columnFilter.searchTerms) ? [...columnFilter.searchTerms] : null;\n\n      let fieldSearchValue = (Array.isArray(searchValues) && searchValues.length === 1) ? searchValues[0] : '';\n      fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n\n      const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n      let operator = columnFilter.operator || ((matches) ? matches[1] : '');\n      const searchTerm = (!!matches) ? matches[2] : '';\n      const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n\n      if (searchValues && searchValues.length > 1) {\n        fieldSearchValue = searchValues.join(',');\n      } else if (typeof fieldSearchValue === 'string') {\n        // escaping the search value\n        fieldSearchValue = fieldSearchValue.replace(`'`, `''`); // escape single quotes by doubling them\n        if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\n          operator = (operator === '*' || operator === '*z') ? OperatorType.endsWith : OperatorType.startsWith;\n        }\n      }\n\n      // no need to query if search value is empty\n      if (searchTerm === '' && (!searchValues || (Array.isArray(searchValues) && searchValues.length === 0))) {\n        return true;\n      }\n\n      // if search value has a regex match we will only keep the value without the operator\n      // in this case we need to overwrite the returned search values to truncate operator from the string search\n      if (Array.isArray(matches) && matches.length >= 1 && (Array.isArray(searchValues) && searchValues.length === 1)) {\n        searchValues[0] = searchTerm;\n      }\n\n      // filter search terms should always be string type (even though we permit the end user to input numbers)\n      // so make sure each term are strings, if user has some default search terms, we will cast them to string\n      if (searchValues && Array.isArray(searchValues)) {\n        for (let k = 0, ln = searchValues.length; k < ln; k++) {\n          // make sure all search terms are strings\n          searchValues[k] = ((searchValues[k] === undefined || searchValues[k] === null) ? '' : searchValues[k]) + '';\n        }\n      }\n\n      // when using localization (i18n), we should use the formatter output to search as the new cell value\n      if (columnDef && columnDef.params && columnDef.params.useFormatterOuputToFilter) {\n        const rowIndex = (dataView && typeof dataView.getIdxById === 'function') ? dataView.getIdxById(item.id) : 0;\n        cellValue = columnDef.formatter(rowIndex, columnIndex, cellValue, columnDef, item, this._grid);\n      }\n\n      // make sure cell value is always a string\n      if (typeof cellValue === 'number') {\n        cellValue = cellValue.toString();\n      }\n\n      const conditionOptions = {\n        fieldType,\n        searchTerms: searchValues,\n        cellValue,\n        operator,\n        cellValueLastChar: lastValueChar,\n        filterSearchType\n      };\n\n      if (!FilterConditions.executeMappedCondition(conditionOptions)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  dispose() {\n    this.disposeColumnFilters();\n\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n\n    // unsubscribe local event\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\n      this._slickSubscriber.unsubscribe();\n    }\n  }\n\n  /**\n   * Dispose of the filters, since it's a singleton, we don't want to affect other grids with same columns\n   */\n  disposeColumnFilters() {\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to make columnFilter an empty (without looping) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // also destroy each Filter instances\n    this._filters.forEach((filter, index) => {\n      if (filter && filter.destroy) {\n        filter.destroy(true);\n      }\n    });\n  }\n\n  getColumnFilters() {\n    return this._columnFilters;\n  }\n\n  getCurrentLocalFilters(): CurrentFilter[] {\n    const currentFilters: CurrentFilter[] = [];\n    if (this._columnFilters) {\n      for (const colId of Object.keys(this._columnFilters)) {\n        const columnFilter = this._columnFilters[colId];\n        const columnDef = columnFilter.columnDef;\n        const filter = { columnId: colId || '' } as CurrentFilter;\n\n        if (columnFilter && columnFilter.searchTerms) {\n          filter.searchTerms = columnFilter.searchTerms;\n        }\n        if (columnFilter.operator) {\n          filter.operator = columnFilter.operator;\n        }\n        if (Array.isArray(filter.searchTerms) && filter.searchTerms.length > 0 && filter.searchTerms[0] !== '') {\n          currentFilters.push(filter);\n        }\n      }\n    }\n    return currentFilters;\n  }\n\n  callbackSearchEvent(e: Event | undefined, args: FilterCallbackArg) {\n    if (args) {\n      const searchTerm = ((e && e.target) ? (e.target as HTMLInputElement).value : undefined);\n      const searchTerms = (args.searchTerms && Array.isArray(args.searchTerms)) ? args.searchTerms : (searchTerm ? [searchTerm] : undefined);\n      const columnDef = args.columnDef || null;\n      const columnId = columnDef ? (columnDef.id || '') : '';\n      const operator = args.operator || undefined;\n      const hasSearchTerms = searchTerms && Array.isArray(searchTerms);\n      const termsCount = hasSearchTerms && searchTerms.length;\n\n      if (!hasSearchTerms || termsCount === 0 || (termsCount === 1 && searchTerms[0] === '')) {\n        // delete the property from the columnFilters when it becomes empty\n        // without doing this, it would leave an incorrect state of the previous column filters when filtering on another column\n        delete this._columnFilters[columnId];\n      } else {\n        const colId = '' + columnId as string;\n        const colFilter: ColumnFilter = {\n          columnId: colId,\n          columnDef,\n          searchTerms,\n        };\n        if (operator) {\n          colFilter.operator = operator;\n        }\n        this._columnFilters[colId] = colFilter;\n      }\n\n      this.triggerEvent(this._slickSubscriber, {\n        clearFilterTriggered: args && args.clearFilterTriggered,\n        columnId,\n        columnDef: args.columnDef || null,\n        columnFilters: this._columnFilters,\n        operator,\n        searchTerms,\n        serviceOptions: this._onFilterChangedOptions,\n        grid: this._grid\n      }, e);\n    }\n  }\n\n  addFilterTemplateToHeaderRow(args: { column: Column; grid: any; node: any }) {\n    const columnDef = args.column;\n    const columnId = columnDef.id || '';\n\n    if (columnDef && columnId !== 'selector' && columnDef.filterable) {\n      let searchTerms: SearchTerm[] | undefined;\n      let operator: OperatorString | OperatorType;\n      const filter: Filter | undefined = this.filterFactory.createFilter(args.column.filter);\n      operator = (columnDef && columnDef.filter && columnDef.filter.operator) || (filter && filter.operator) || undefined;\n\n      if (this._columnFilters[columnDef.id]) {\n        searchTerms = this._columnFilters[columnDef.id].searchTerms || undefined;\n        operator = this._columnFilters[columnDef.id].operator || undefined;\n      } else if (columnDef.filter) {\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // because of that we need to first get searchTerm(s) from the columnFilters (that is what the user last entered)\n        searchTerms = columnDef.filter.searchTerms || undefined;\n        this.updateColumnFilters(searchTerms, columnDef, operator);\n      }\n\n      const filterArguments: FilterArguments = {\n        grid: this._grid,\n        operator,\n        searchTerms,\n        columnDef,\n        callback: this.callbackSearchEvent.bind(this)\n      };\n\n      if (filter) {\n        filter.init(filterArguments);\n        const filterExistIndex = this._filters.findIndex((filt) => filter.columnDef.name === filt.columnDef.name);\n\n        // add to the filters arrays or replace it when found\n        if (filterExistIndex === -1) {\n          this._filters.push(filter);\n        } else {\n          this._filters[filterExistIndex] = filter;\n        }\n\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // we need to also set again the values in the DOM elements if the values were set by a searchTerm(s)\n        if (searchTerms && filter.setValues) {\n          filter.setValues(searchTerms);\n        }\n      }\n    }\n  }\n\n  /**\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\n   * Other services, like Pagination, can then subscribe to it.\n   * @param sender\n   */\n  emitFilterChanged(sender: 'local' | 'remote') {\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\n      let currentFilters: CurrentFilter[] = [];\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentFilters) {\n        currentFilters = backendService.getCurrentFilters() as CurrentFilter[];\n      }\n      this.onFilterChanged.next(currentFilters);\n    } else if (sender === 'local') {\n      this.onFilterChanged.next(this.getCurrentLocalFilters());\n    }\n  }\n\n  /**\n   * When user passes an array of preset filters, we need to pre-populate each column filter searchTerm(s)\n   * The process is to loop through the preset filters array, find the associated column from columnDefinitions and fill in the filter object searchTerm(s)\n   * This is basically the same as if we would manually add searchTerm(s) to a column filter object in the column definition, but we do it programmatically.\n   * At the end of the day, when creating the Filter (DOM Element), it will use these searchTerm(s) so we can take advantage of that without recoding each Filter type (DOM element)\n   */\n  populateColumnFilterSearchTerms() {\n    if (this._gridOptions.presets && Array.isArray(this._gridOptions.presets.filters) && this._gridOptions.presets.filters.length > 0) {\n      const filters = this._gridOptions.presets.filters;\n      this._columnDefinitions.forEach((columnDef: Column) =>  {\n        // clear any columnDef searchTerms before applying Presets\n        if (columnDef.filter && columnDef.filter.searchTerms) {\n          delete columnDef.filter.searchTerms;\n        }\n\n        // from each presets, we will find the associated columnDef and apply the preset searchTerms & operator if there is\n        const columnPreset = filters.find((presetFilter: CurrentFilter) => {\n          return presetFilter.columnId === columnDef.id;\n        });\n        if (columnPreset && columnPreset.searchTerms && Array.isArray(columnPreset.searchTerms)) {\n          columnDef.filter = columnDef.filter || {};\n          columnDef.filter.operator = columnPreset.operator || columnDef.filter.operator || '';\n          columnDef.filter.searchTerms = columnPreset.searchTerms;\n        }\n      });\n    }\n  }\n\n  private updateColumnFilters(searchTerms: SearchTerm[] | undefined, columnDef: any, operator?: OperatorType | OperatorString) {\n    if (searchTerms && columnDef) {\n      // this._columnFilters.searchTerms = searchTerms;\n      this._columnFilters[columnDef.id] = {\n        columnId: columnDef.id,\n        columnDef,\n        searchTerms,\n        operator\n      };\n    }\n  }\n\n  private triggerEvent(slickEvent: any, args: any, e: any) {\n    slickEvent = slickEvent || new Slick.Event();\n\n    // event might have been created as a CustomEvent (e.g. CompoundDateFilter), without being a valid Slick.EventData.\n    // if so we will create a new Slick.EventData and merge it with that CustomEvent to avoid having SlickGrid errors\n    let event = e;\n    if (e && typeof e.isPropagationStopped !== 'function') {\n      event = $.extend({}, new Slick.EventData(), e);\n    }\n    slickEvent.notify(args, event, args.grid);\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  ExportOption,\n  FileType,\n  Formatter,\n  GridOption\n} from './../models/index';\nimport { addWhiteSpaces, htmlEntityDecode, sanitizeHtmlToText } from './../services/utilities';\nimport { Subject } from 'rxjs/Subject';\nimport { TextEncoder } from 'text-encoding-utf-8';\n\n// using external non-typed js libraries\ndeclare let Slick: any;\ndeclare let $: any;\n\nexport interface ExportColumnHeader {\n  key: string;\n  title: string;\n}\n\n@Injectable()\nexport class ExportService {\n  private _lineCarriageReturn = '\\n';\n  private _dataView: any;\n  private _grid: any;\n  private _exportQuoteWrapper: string;\n  private _columnHeaders: ExportColumnHeader[];\n  private _groupedHeaders: ExportColumnHeader[];\n  private _hasGroupedItems = false;\n  private _exportOptions: ExportOption;\n  onGridBeforeExportToFile = new Subject<boolean>();\n  onGridAfterExportToFile = new Subject<{ options: any }>();\n\n  constructor(private translate: TranslateService) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Export Service\n   * @param grid\n   * @param gridOptions\n   * @param dataView\n   */\n  init(grid: any, dataView: any): void {\n    this._grid = grid;\n    this._dataView = dataView;\n  }\n\n  /**\n   * Function to export the Grid result to an Excel CSV format using javascript for it to produce the CSV file.\n   * This is a WYSIWYG export to file output (What You See is What You Get)\n   *\n   * NOTES: The column position needs to match perfectly the JSON Object position because of the way we are pulling the data,\n   * which means that if any column(s) got moved in the UI, it has to be reflected in the JSON array output as well\n   *\n   * Example: exportToFile({ format: FileType.csv, delimiter: DelimiterType.comma })\n   */\n  exportToFile(options: ExportOption) {\n    this.onGridBeforeExportToFile.next(true);\n    this._exportOptions = $.extend(true, {}, this._gridOptions.exportOptions, options);\n\n    // get the CSV output from the grid data\n    const dataOutput = this.getDataOutput();\n\n    // trigger a download file\n    // wrap it into a setTimeout so that the EventAggregator has enough time to start a pre-process like showing a spinner\n    setTimeout(() => {\n      const downloadOptions = {\n        filename: `${this._exportOptions.filename}.${this._exportOptions.format}`,\n        csvContent: dataOutput,\n        format: this._exportOptions.format,\n        useUtf8WithBom: this._exportOptions.useUtf8WithBom\n      };\n      this.startDownloadFile(downloadOptions);\n      this.onGridAfterExportToFile.next({ options: downloadOptions });\n    }, 0);\n  }\n\n  // -----------------------\n  // Private functions\n  // -----------------------\n\n  getDataOutput(): string {\n    const columns = this._grid.getColumns() || [];\n    const delimiter = this._exportOptions.delimiter || '';\n    const format = this._exportOptions.format || '';\n    const groupByColumnHeader = this._exportOptions.groupingColumnHeaderTitle || this.translate.instant('GROUP_BY');\n\n    // a CSV needs double quotes wrapper, the other types do not need any wrapper\n    this._exportQuoteWrapper = (format === FileType.csv) ? '\"' : '';\n\n    // data variable which will hold all the fields data of a row\n    let outputDataString = '';\n\n    // get grouped column titles and if found, we will add a \"Group by\" column at the first column index\n    const grouping = this._dataView.getGrouping();\n    if (grouping && Array.isArray(grouping) && grouping.length > 0) {\n      this._hasGroupedItems = true;\n      outputDataString += `${groupByColumnHeader}` + delimiter;\n    } else {\n      this._hasGroupedItems = false;\n    }\n\n    // get all column headers\n    this._columnHeaders = this.getColumnHeaders(columns) || [];\n    if (this._columnHeaders && Array.isArray(this._columnHeaders) && this._columnHeaders.length > 0) {\n      // add the header row + add a new line at the end of the row\n      const outputHeaderTitles = this._columnHeaders.map((header) => {\n        return this._exportQuoteWrapper + header.title + this._exportQuoteWrapper;\n      });\n      outputDataString += (outputHeaderTitles.join(delimiter) + this._lineCarriageReturn);\n    }\n\n    // Populate the rest of the Grid Data\n    outputDataString += this.getAllGridRowData(columns, this._lineCarriageReturn);\n\n    return outputDataString;\n  }\n\n  /**\n   * Get all the grid row data and return that as an output string\n   */\n  getAllGridRowData(columns: Column[], lineCarriageReturn: string): string {\n    let outputDataString = '';\n    const lineCount = this._dataView.getLength();\n\n    // loop through all the grid rows of data\n    for (let rowNumber = 0; rowNumber < lineCount; rowNumber++) {\n      const itemObj = this._dataView.getItem(rowNumber);\n\n      if (itemObj != null) {\n        // Normal row (not grouped by anything) would have an ID which was predefined in the Grid Columns definition\n        if (itemObj.id != null) {\n          // get regular row item data\n          outputDataString += this.readRegularRowData(columns, rowNumber, itemObj);\n        } else if (this._hasGroupedItems && itemObj.__groupTotals === undefined) {\n          // get the group row\n          outputDataString += this.readGroupedTitleRow(itemObj) + this._exportOptions.delimiter;\n        } else if (itemObj.__groupTotals) {\n          // else if the row is a Group By and we have agreggators, then a property of '__groupTotals' would exist under that object\n          outputDataString += this.readGroupedTotalRow(columns, itemObj) + this._exportOptions.delimiter;\n        }\n        outputDataString += lineCarriageReturn;\n      }\n    }\n\n    return outputDataString;\n  }\n\n  /**\n   * Get all header titles and their keys, translate the title when required.\n   * @param columns of the grid\n   */\n  getColumnHeaders(columns: Column[]): ExportColumnHeader[] {\n    if (!columns || !Array.isArray(columns) || columns.length === 0) {\n      return null;\n    }\n    const columnHeaders = [];\n\n    // Populate the Column Header, pull the name defined\n    columns.forEach((columnDef) => {\n      const fieldName = (columnDef.headerKey) ? this.translate.instant(columnDef.headerKey) : columnDef.name;\n      const skippedField = columnDef.excludeFromExport || false;\n\n      // if column width is 0 then it's not evaluated since that field is considered hidden should not be part of the export\n      if ((columnDef.width ===  undefined || columnDef.width > 0) && !skippedField) {\n        columnHeaders.push({\n          key: columnDef.field || columnDef.id,\n          title: fieldName\n        });\n      }\n    });\n\n    return columnHeaders;\n  }\n\n  /**\n   * Get the data of a regular row (a row without grouping)\n   * @param row\n   * @param itemObj\n   */\n  readRegularRowData(columns: Column[], row: number, itemObj: any) {\n    let idx = 0;\n    let rowOutputString = '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n\n    for (let col = 0, ln = columns.length; col < ln; col++) {\n      const columnDef = columns[col];\n      const fieldId = columnDef.field || columnDef.id || '';\n\n      // skip excluded column\n      if (columnDef.excludeFromExport) {\n          continue;\n      }\n\n      // if we are grouping and are on 1st column index, we need to skip this column since it will be used later by the grouping text:: Group by [columnX]\n      if (this._hasGroupedItems && idx === 0) {\n        rowOutputString += `\"\"` + delimiter;\n      }\n\n      // does the user want to evaluate current column Formatter?\n      const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._exportOptions.exportWithFormatter;\n\n      // did the user provide a Custom Formatter for the export\n      const exportCustomFormatter: Formatter = (columnDef.exportCustomFormatter !== undefined) ? columnDef.exportCustomFormatter : undefined;\n\n      let itemData = '';\n\n      if (exportCustomFormatter) {\n        itemData = exportCustomFormatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\n      } else if (isEvaluatingFormatter && !!columnDef.formatter) {\n        itemData = columnDef.formatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\n      } else {\n        itemData = (itemObj[fieldId] === null || itemObj[fieldId] === undefined) ? '' : itemObj[fieldId];\n      }\n\n      // does the user want to sanitize the output data (remove HTML tags)?\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n        itemData = sanitizeHtmlToText(itemData);\n      }\n\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n      if (format === FileType.csv) {\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n      }\n\n      // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n      // to cancel that effect we can had = in front, ex: =\"1E06\"\n      const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\n\n      rowOutputString += keepAsStringWrapper + exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\n      idx++;\n    }\n\n    return rowOutputString;\n  }\n\n  /**\n   * Get the grouped title(s), for example if we grouped by salesRep, the returned result would be:: 'Sales Rep'\n   * @param itemObj\n   */\n  readGroupedTitleRow(itemObj: any) {\n    let groupName = sanitizeHtmlToText(itemObj.title);\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n\n    groupName = addWhiteSpaces(5 * itemObj.level) + groupName;\n\n    if (format === FileType.csv) {\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n      groupName = groupName.toString().replace(/\"/gi, `\"\"`);\n    }\n\n    // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n    // to cancel that effect we can had = in front, ex: =\"1E06\"\n    // const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\n\n    return /*keepAsStringWrapper +*/ exportQuoteWrapper + ' ' + groupName + exportQuoteWrapper + delimiter;\n  }\n\n  /**\n   * Get the grouped totals, these are set by Slick Aggregators.\n   * For example if we grouped by \"salesRep\" and we have a Sum Aggregator on \"sales\", then the returned output would be:: [\"Sum 123$\"]\n   * @param itemObj\n   */\n  readGroupedTotalRow(columns: Column[], itemObj: any) {\n    let exportExponentialWrapper = '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n    const groupingAggregatorRowText = this._exportOptions.groupingAggregatorRowText || '';\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n    let output = `${exportQuoteWrapper}${groupingAggregatorRowText}${exportQuoteWrapper}${delimiter}`;\n\n    columns.forEach((columnDef) => {\n      let itemData = '';\n\n      // if there's a groupTotalsFormatter, we will re-run it to get the exact same output as what is shown in UI\n      if (columnDef.groupTotalsFormatter) {\n        itemData = columnDef.groupTotalsFormatter(itemObj, columnDef);\n      }\n\n      // does the user want to sanitize the output data (remove HTML tags)?\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n        itemData = sanitizeHtmlToText(itemData);\n      }\n\n      if (format === FileType.csv) {\n        // when CSV we also need to escape double quotes twice, so a double quote \" becomes 2x double quotes \"\"\n        // and if we have a text of (number)E(number),\n        // we don't want excel to transform it into exponential (1.0E06) to cancel that effect we can had = in front, ex: =\"1E06\"\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n        exportExponentialWrapper = (itemData.match(/^\\s*\\d+E\\d+\\s*$/i)) ? '=' : '';\n      }\n      output += exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\n    });\n\n    return output;\n  }\n\n  /**\n   * Triggers download file with file format.\n   * IE(6-10) are not supported\n   * All other browsers will use plain javascript on client side to produce a file download.\n   * @param options\n   */\n  startDownloadFile(options: { filename: string, csvContent: any, format: FileType | string, useUtf8WithBom: boolean }): void {\n    // IE(6-10) don't support javascript download and our service doesn't support either so throw an error, we have to make a round trip to the Web Server for exporting\n    if (navigator.appName === 'Microsoft Internet Explorer') {\n      throw new Error('Microsoft Internet Explorer 6 to 10 do not support javascript export to CSV. Please upgrade your browser.');\n    }\n\n    // set the correct MIME type\n    const mimeType = (options.format === FileType.csv) ? 'text/csv' : 'text/plain';\n\n    // make sure no html entities exist in the data\n    const csvContent = htmlEntityDecode(options.csvContent);\n\n    // dealing with Excel CSV export and UTF-8 is a little tricky.. We will use Option #2 to cover older Excel versions\n    // Option #1: we need to make Excel knowing that it's dealing with an UTF-8, A correctly formatted UTF8 file can have a Byte Order Mark as its first three octets\n    // reference: http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\n    // Option#2: use a 3rd party extension to javascript encode into UTF-16\n    let outputData: Uint8Array | string;\n    if (options.format === FileType.csv) {\n      outputData = new TextEncoder('utf-8').encode(csvContent);\n    } else {\n      outputData = csvContent;\n    }\n\n    // create a Blob object for the download\n    const blob = new Blob([options.useUtf8WithBom ? '\\uFEFF' : '', outputData], {\n      type: `${mimeType};charset=utf-8;`\n    });\n\n    // when using IE/Edge, then use different download call\n    if (typeof navigator.msSaveOrOpenBlob === 'function') {\n      navigator.msSaveOrOpenBlob(blob, options.filename);\n    } else {\n      // this trick will generate a temp <a /> tag\n      // the code will then trigger a hidden click for it to start downloading\n      const link = document.createElement('a');\n      const csvUrl = URL.createObjectURL(blob);\n\n      link.textContent = 'download';\n      link.href = csvUrl;\n      link.setAttribute('download', options.filename);\n\n      // set the visibility to hidden so there is no effect on your web-layout\n      link.style.visibility = 'hidden';\n\n      // this part will append the anchor tag, trigger a click (for download to start) and finally remove the tag once completed\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n}\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\r\nimport { castToPromise } from './utilities';\r\nimport {\r\n  CellArgs,\r\n  Column,\r\n  ColumnSort,\r\n  CurrentSorter,\r\n  FieldType,\r\n  GridOption,\r\n  SlickEvent,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\nimport { Sorters } from './../sorters';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// using external non-typed js libraries\r\ndeclare var Slick: any;\r\n\r\nexport class SortService {\r\n  private _currentLocalSorters: CurrentSorter[] = [];\r\n  private _eventHandler: any = new Slick.EventHandler();\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _slickSubscriber: SlickEvent;\r\n  private _isBackendGrid = false;\r\n  onSortChanged = new Subject<CurrentSorter[]>();\r\n  onSortCleared = new Subject<boolean>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  /**\r\n   * Attach a backend sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param dataView SlickGrid DataView object\r\n   */\r\n  attachBackendOnSort(grid: any, dataView: any) {\r\n    this._isBackendGrid = true;\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = grid.onSort;\r\n\r\n    // subscribe to the SlickGrid event and call the backend execution\r\n    this._slickSubscriber.subscribe(this.onBackendSortChanged.bind(this));\r\n  }\r\n\r\n  async onBackendSortChanged(event: Event, args: any) {\r\n    if (!args || !args.grid) {\r\n      throw new Error('Something went wrong when trying to attach the \"onBackendSortChanged(event, args)\" function, it seems that \"args\" is not populated correctly');\r\n    }\r\n    const gridOptions: GridOption = args.grid.getOptions() || {};\r\n    const backendApi = gridOptions.backendServiceApi;\r\n\r\n    if (!backendApi || !backendApi.process || !backendApi.service) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n    if (backendApi.preProcess) {\r\n      backendApi.preProcess();\r\n    }\r\n    const query = backendApi.service.processOnSortChanged(event, args);\r\n    this.emitSortChanged('remote');\r\n\r\n    // the process could be an Observable (like HttpClient) or a Promise\r\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n    const observableOrPromise = backendApi.process(query);\r\n    const processResult = await castToPromise(observableOrPromise);\r\n\r\n    // from the result, call our internal post process to update the Dataset and Pagination info\r\n    if (processResult && backendApi.internalPostProcess) {\r\n      backendApi.internalPostProcess(processResult);\r\n    }\r\n\r\n    // send the response process to the postProcess callback\r\n    if (backendApi.postProcess) {\r\n      backendApi.postProcess(processResult);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attach a local sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param gridOptions Grid Options object\r\n   * @param dataView\r\n   */\r\n  attachLocalOnSort(grid: any, dataView: any) {\r\n    this._isBackendGrid = false;\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = grid.onSort;\r\n\r\n    this._slickSubscriber.subscribe((e: any, args: any) => {\r\n      // multiSort and singleSort are not exactly the same, but we want to structure it the same for the (for loop) after\r\n      // also to avoid having to rewrite the for loop in the sort, we will make the singleSort an array of 1 object\r\n      const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({sortAsc: args.sortAsc, sortCol: args.sortCol});\r\n\r\n      // keep current sorters\r\n      this._currentLocalSorters = []; // reset current local sorters\r\n      if (Array.isArray(sortColumns)) {\r\n        sortColumns.forEach((sortColumn: { sortCol: Column, sortAsc: number }) => {\r\n          if (sortColumn.sortCol) {\r\n            this._currentLocalSorters.push({\r\n              columnId: sortColumn.sortCol.id,\r\n              direction: sortColumn.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      this.onLocalSortChanged(grid, dataView, sortColumns);\r\n      this.emitSortChanged('local');\r\n    });\r\n  }\r\n\r\n  clearSorting() {\r\n    if (this._grid && this._gridOptions && this._dataView) {\r\n      // remove any sort icons (this setSortColumns function call really does only that)\r\n      this._grid.setSortColumns([]);\r\n\r\n      // we also need to trigger a sort change\r\n      // for a backend grid, we will trigger a backend sort changed with an empty sort columns array\r\n      // however for a local grid, we need to pass a sort column and so we will sort by the 1st column\r\n      if (this._isBackendGrid) {\r\n        this.onBackendSortChanged(undefined, { grid: this._grid, sortCols: [] });\r\n      } else {\r\n        if (this._columnDefinitions && Array.isArray(this._columnDefinitions)) {\r\n          this.onLocalSortChanged(this._grid, this._dataView, new Array({sortAsc: true, sortCol: this._columnDefinitions[0] }));\r\n        }\r\n      }\r\n    }\r\n    // set current sorter to empty & emit a sort changed event\r\n    this._currentLocalSorters = [];\r\n\r\n    // emit an event when filters are all cleared\r\n    this.onSortCleared.next(true);\r\n  }\r\n\r\n  getCurrentLocalSorters(): CurrentSorter[] {\r\n    return this._currentLocalSorters;\r\n  }\r\n\r\n  /**\r\n   * Get column sorts,\r\n   * If a column is passed as an argument, we won't add this column to our output array since it is already in the array\r\n   * We want to know the sort prior to calling the next sorting command\r\n   */\r\n  getPreviousColumnSorts(columnId?: string) {\r\n    // getSortColumns() only returns sortAsc & columnId, we want the entire column definition\r\n    const oldSortColumns = this._grid.getSortColumns();\r\n\r\n    // get the column definition but only keep column which are not equal to our current column\r\n    const sortedCols = oldSortColumns.reduce((cols, col) => {\r\n      if (!columnId || col.columnId !== columnId) {\r\n        cols.push({ sortCol: this._columnDefinitions[this._grid.getColumnIndex(col.columnId)], sortAsc: col.sortAsc });\r\n      }\r\n      return cols;\r\n    }, []);\r\n\r\n    return sortedCols;\r\n  }\r\n\r\n  /**\r\n   * load any presets if there are any\r\n   * @param grid\r\n   * @param dataView\r\n   */\r\n  loadLocalPresets(grid: any, dataView: any) {\r\n    const sortCols: ColumnSort[] = [];\r\n    this._currentLocalSorters = []; // reset current local sorters\r\n    if (this._gridOptions && this._gridOptions.presets && this._gridOptions.presets.sorters) {\r\n      const sorters = this._gridOptions.presets.sorters;\r\n\r\n      sorters.forEach((presetSorting: CurrentSorter) => {\r\n        const gridColumn = this._columnDefinitions.find((col: Column) => col.id === presetSorting.columnId);\r\n        if (gridColumn) {\r\n          sortCols.push({\r\n            columnId: gridColumn.id,\r\n            sortAsc: ((presetSorting.direction.toUpperCase() === SortDirection.ASC) ? true : false),\r\n            sortCol: gridColumn\r\n          });\r\n\r\n          // keep current sorters\r\n          this._currentLocalSorters.push({\r\n            columnId: gridColumn.id + '',\r\n            direction: presetSorting.direction.toUpperCase() as SortDirectionString\r\n          });\r\n        }\r\n      });\r\n\r\n      if (sortCols.length > 0) {\r\n        this.onLocalSortChanged(grid, dataView, sortCols);\r\n        grid.setSortColumns(sortCols); // use this to add sort icon(s) in UI\r\n      }\r\n    }\r\n  }\r\n\r\n  onLocalSortChanged(grid: any, dataView: any, sortColumns: ColumnSort[]) {\r\n    dataView.sort((dataRow1: any, dataRow2: any) => {\r\n      for (let i = 0, l = sortColumns.length; i < l; i++) {\r\n        const columnSortObj = sortColumns[i];\r\n        if (columnSortObj && columnSortObj.sortCol) {\r\n          const sortDirection = columnSortObj.sortAsc ? SortDirectionNumber.asc : SortDirectionNumber.desc;\r\n          const sortField = columnSortObj.sortCol.queryField || columnSortObj.sortCol.queryFieldFilter || columnSortObj.sortCol.field;\r\n          const fieldType = columnSortObj.sortCol.type || FieldType.string;\r\n          const value1 = dataRow1[sortField];\r\n          const value2 = dataRow2[sortField];\r\n          const sortResult = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n          if (sortResult !== SortDirectionNumber.neutral) {\r\n            return sortResult;\r\n          }\r\n        }\r\n      }\r\n      return 0;\r\n    });\r\n    grid.invalidate();\r\n    grid.render();\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe local event\r\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\r\n      this._slickSubscriber.unsubscribe();\r\n    }\r\n\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n  }\r\n\r\n  /**\r\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\r\n   * Other services, like Pagination, can then subscribe to it.\r\n   * @param sender\r\n   */\r\n  emitSortChanged(sender: 'local' | 'remote') {\r\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      let currentSorters: CurrentSorter[] = [];\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        currentSorters = backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n      this.onSortChanged.next(currentSorters);\r\n    } else if (sender === 'local') {\r\n      this.onSortChanged.next(this.getCurrentLocalSorters());\r\n    }\r\n  }\r\n}\r\n",
    "export class Constants {\r\n  static TEXT_CANCEL = 'Cancel';\r\n  static TEXT_CLEAR_ALL_FILTERS = 'Clear All Filters';\r\n  static TEXT_CLEAR_ALL_SORTING = 'Clear All Sorting';\r\n  static TEXT_COLUMNS = 'Columns';\r\n  static TEXT_COMMANDS = 'Commands';\r\n  static TEXT_EXPORT_IN_CSV_FORMAT = 'Export in CSV format';\r\n  static TEXT_EXPORT_IN_TEXT_FORMAT = 'Export in Text format (Tab delimited)';\r\n  static TEXT_FORCE_FIT_COLUMNS = 'Force fit columns';\r\n  static TEXT_HIDE_COLUMN = 'Hide Column';\r\n  static TEXT_REFRESH_DATASET = 'Refresh Dataset';\r\n  static TEXT_SAVE = 'Save';\r\n  static TEXT_SYNCHRONOUS_RESIZE = 'Synchronous resize';\r\n  static TEXT_SORT_ASCENDING = 'Sort Ascending';\r\n  static TEXT_SORT_DESCENDING = 'Sort Descending';\r\n  static TEXT_TOGGLE_FILTER_ROW = 'Toggle Filter Row';\r\n  static VALIDATION_EDITOR_VALID_NUMBER = 'Please enter a valid number';\r\n  static VALIDATION_EDITOR_VALID_INTEGER = 'Please enter a valid integer number';\r\n  static VALIDATION_EDITOR_NUMBER_BETWEEN = 'Please enter a valid number between {{minValue}} and {{maxValue}}';\r\n  static VALIDATION_EDITOR_DECIMAL_BETWEEN = 'Please enter a valid number with a maximum of {{maxDecimal}} decimals';\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport {\n  CellArgs,\n  ColumnSort,\n  Column,\n  DelimiterType,\n  Extension,\n  FileType,\n  GraphqlResult,\n  GridMenu,\n  GridMenuItem,\n  GridOption,\n  HeaderButtonOnCommandArgs,\n  HeaderMenu,\n  HeaderMenuItem,\n  HeaderMenuOnCommandArgs,\n  HeaderMenuOnBeforeMenuShowArgs,\n} from './../models/index';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, sanitizeHtmlToText } from './../services/utilities';\nimport { FilterService } from './filter.service';\nimport { ExportService } from './export.service';\nimport { SortService } from './sort.service';\nimport { Constants } from '../constants';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class ControlAndPluginService {\n  private _dataView: any;\n  private _grid: any;\n  allColumns: Column[];\n  visibleColumns: Column[];\n  areVisibleColumnDifferent = false;\n  extensionList: Extension[] = [];\n  undoRedoBuffer: any;\n  userOriginalGridMenu: GridMenu;\n\n  // controls & plugins\n  autoTooltipPlugin: any;\n  cellExternalCopyManagerPlugin: any;\n  checkboxSelectorPlugin: any;\n  columnPickerControl: any;\n  gridMenuControl: any;\n  groupItemMetaProviderPlugin: any;\n  headerButtonsPlugin: any;\n  headerMenuPlugin: any;\n  rowSelectionPlugin: any;\n\n  constructor(\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private sortService: SortService,\n    private translate: TranslateService,\n  ) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  /** Get all columns (includes visible and non-visible) */\n  getAllColumns(): Column[] {\n    return this.allColumns || [];\n  }\n\n  /** Get only visible columns */\n  getVisibleColumns(): Column[] {\n    return this.visibleColumns || [];\n  }\n\n  /** Get all Extensions */\n  getAllExtensions(): Extension[] {\n    return this.extensionList;\n  }\n\n  /**\n   * Get an Extension by it's name\n   *  @param name\n   */\n  getExtensionByName(name: string): Extension | undefined {\n    return this.extensionList.find((p) => p.name === name);\n  }\n\n  /** Auto-resize all the column in the grid to fit the grid width */\n  autoResizeColumns() {\n    this._grid.autosizeColumns();\n  }\n\n  /**\n   * Attach/Create different Controls or Plugins after the Grid is created\n   * @param grid\n   * @param dataView\n   * @param groupItemMetadataProvider\n   */\n  attachDifferentControlOrPlugins(grid: any, dataView: any, groupItemMetadataProvider: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n    this.allColumns = this._columnDefinitions;\n    this.visibleColumns = this._columnDefinitions;\n\n    // make sure all columns are translated before creating ColumnPicker/GridMenu Controls\n    // this is to avoid having hidden columns not being translated on first load\n    if (this._gridOptions.enableTranslate) {\n      this.translateItems(this.allColumns, 'headerKey', 'name');\n    }\n\n    // Column Picker Control\n    if (this._gridOptions.enableColumnPicker) {\n      this.columnPickerControl = this.createColumnPicker(this._grid, this._columnDefinitions);\n      this.extensionList.push({ name: 'ColumnPicker', service: this.columnPickerControl });\n    }\n\n    // Grid Menu Control\n    if (this._gridOptions.enableGridMenu) {\n      // keep original user grid menu, useful when switching locale to translate\n      this.userOriginalGridMenu = { ...this._gridOptions.gridMenu };\n\n      this.gridMenuControl = this.createGridMenu(this._grid, this._columnDefinitions);\n      this.extensionList.push({ name: 'GridMenu', service: this.gridMenuControl });\n    }\n\n    // Auto Tooltip Plugin\n    if (this._gridOptions.enableAutoTooltip) {\n      this.autoTooltipPlugin = new Slick.AutoTooltips(this._gridOptions.autoTooltipOptions || {});\n      this._grid.registerPlugin(this.autoTooltipPlugin);\n      this.extensionList.push({ name: 'AutoTooltip', service: this.autoTooltipPlugin });\n    }\n\n    // Grouping Plugin\n    // register the group item metadata provider to add expand/collapse group handlers\n    if (this._gridOptions.enableGrouping) {\n      this.groupItemMetaProviderPlugin = groupItemMetadataProvider || {};\n      this._grid.registerPlugin(this.groupItemMetaProviderPlugin);\n      this.extensionList.push({ name: 'GroupItemMetaProvider', service: this.groupItemMetaProviderPlugin });\n    }\n\n    // Checkbox Selector Plugin\n    if (this._gridOptions.enableCheckboxSelector) {\n      // when enabling the Checkbox Selector Plugin, we need to also watch onClick events to perform certain actions\n      // the selector column has to be created BEFORE the grid (else it behaves oddly), but we can only watch grid events AFTER the grid is created\n      this._grid.registerPlugin(this.checkboxSelectorPlugin);\n      this.extensionList.push({ name: 'CheckboxSelector', service: this.checkboxSelectorPlugin });\n\n      // this also requires the Row Selection Model to be registered as well\n      if (!this.rowSelectionPlugin || !this._grid.getSelectionModel()) {\n        this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n        this._grid.setSelectionModel(this.rowSelectionPlugin);\n      }\n\n      // user might want to pre-select some rows\n      // the setTimeout is because of timing issue with styling (row selection happen but rows aren't highlighted properly)\n      if (this._gridOptions.preselectedRows && this.rowSelectionPlugin && this._grid.getSelectionModel()) {\n        setTimeout(() => this.checkboxSelectorPlugin.selectRows(this._gridOptions.preselectedRows), 0);\n      }\n    }\n\n    // Row Selection Plugin\n    if (!this._gridOptions.enableCheckboxSelector && this._gridOptions.enableRowSelection) {\n      this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n      this._grid.setSelectionModel(this.rowSelectionPlugin);\n    }\n\n    // Header Button Plugin\n    if (this._gridOptions.enableHeaderButton) {\n      this.headerButtonsPlugin = new Slick.Plugins.HeaderButtons(this._gridOptions.headerButton || {});\n      this._grid.registerPlugin(this.headerButtonsPlugin);\n      this.extensionList.push({ name: 'HeaderButtons', service: this.headerButtonsPlugin });\n      this.headerButtonsPlugin.onCommand.subscribe((e: Event, args: HeaderButtonOnCommandArgs) => {\n        if (this._gridOptions.headerButton && typeof this._gridOptions.headerButton.onCommand === 'function') {\n          this._gridOptions.headerButton.onCommand(e, args);\n        }\n      });\n    }\n\n    // Header Menu Plugin\n    if (this._gridOptions.enableHeaderMenu) {\n      this.headerMenuPlugin = this.createHeaderMenu(this._grid, this._dataView, this._columnDefinitions);\n    }\n\n    // Cell External Copy Manager Plugin (Excel Like)\n    if (this._gridOptions.enableExcelCopyBuffer) {\n      this.createUndoRedoBuffer();\n      this.hookUndoShortcutKey();\n      this.createCellExternalCopyManagerPlugin(this._grid);\n    }\n\n    // manually register other plugins\n    if (this._gridOptions.registerPlugins !== undefined) {\n      if (Array.isArray(this._gridOptions.registerPlugins)) {\n        this._gridOptions.registerPlugins.forEach((plugin) => {\n          this._grid.registerPlugin(plugin);\n          this.extensionList.push({ name: 'generic', service: plugin });\n        });\n      } else {\n        this._grid.registerPlugin(this._gridOptions.registerPlugins);\n        this.extensionList.push({ name: 'generic', service: this._gridOptions.registerPlugins });\n      }\n    }\n  }\n\n  /**\n   * Attach/Create different plugins before the Grid creation.\n   * For example the multi-select have to be added to the column definition before the grid is created to work properly\n   * @param columnDefinitions\n   * @param options\n   */\n  createCheckboxPluginBeforeGridCreation(columnDefinitions: Column[], options: GridOption) {\n    if (options.enableCheckboxSelector) {\n      if (!this.checkboxSelectorPlugin) {\n        this.checkboxSelectorPlugin = new Slick.CheckboxSelectColumn(options.checkboxSelector || {});\n      }\n      const selectionColumn: Column = this.checkboxSelectorPlugin.getColumnDefinition();\n      selectionColumn.excludeFromExport = true;\n      selectionColumn.excludeFromQuery = true;\n      selectionColumn.excludeFromHeaderMenu = true;\n      columnDefinitions.unshift(selectionColumn);\n    }\n  }\n\n  /** Create the Excel like copy manager */\n  createCellExternalCopyManagerPlugin(grid: any) {\n    let newRowIds = 0;\n    const pluginOptions = {\n      clipboardCommandHandler: (editCommand: any) => {\n        this.undoRedoBuffer.queueAndExecuteCommand.call(this.undoRedoBuffer, editCommand);\n      },\n      dataItemColumnValueExtractor: (item: any, columnDef: Column) => {\n        // when grid or cell is not editable, we will possibly evaluate the Formatter if it was passed\n        // to decide if we evaluate the Formatter, we will use the same flag from Export which is \"exportWithFormatter\"\n        if (!this._gridOptions.editable || !columnDef.editor) {\n          const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._gridOptions.exportOptions.exportWithFormatter;\n          if (columnDef.formatter && isEvaluatingFormatter) {\n            const formattedOutput = columnDef.formatter(0, 0, item[columnDef.field], columnDef, item, this._grid);\n            if (columnDef.sanitizeDataExport || (this._gridOptions.exportOptions && this._gridOptions.exportOptions.sanitizeDataExport)) {\n              return sanitizeHtmlToText(formattedOutput);\n            }\n            return formattedOutput;\n          }\n        }\n\n        // else use the default \"dataItemColumnValueExtractor\" from the plugin itself\n        // we can do that by setting back the getter with null\n        return null;\n      },\n      readOnlyMode: false,\n      includeHeaderWhenCopying: false,\n      newRowCreator: (count: number) => {\n        for (let i = 0; i < count; i++) {\n          const item = {\n            id: 'newRow_' + newRowIds++\n          };\n          grid.getData().addItem(item);\n        }\n      }\n    };\n\n    grid.setSelectionModel(new Slick.CellSelectionModel());\n    this.cellExternalCopyManagerPlugin = new Slick.CellExternalCopyManager(pluginOptions);\n    grid.registerPlugin(this.cellExternalCopyManagerPlugin);\n    this.extensionList.push({ name: 'CellExternalCopyManager', service: this.cellExternalCopyManagerPlugin });\n  }\n\n  /**\n   * Create the Column Picker and expose all the available hooks that user can subscribe (onColumnsChanged)\n   * @param grid\n   * @param columnDefinitions\n   */\n  createColumnPicker(grid: any, columnDefinitions: Column[]) {\n    // localization support for the picker\n    const columnTitle = this.getPickerTitleOutputString('columnTitle', 'columnPicker');\n    const forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'columnPicker');\n    const syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');\n\n    this._gridOptions.columnPicker = this._gridOptions.columnPicker || {};\n    this._gridOptions.columnPicker.columnTitle = this._gridOptions.columnPicker.columnTitle || columnTitle;\n    this._gridOptions.columnPicker.forceFitTitle = this._gridOptions.columnPicker.forceFitTitle || forceFitTitle;\n    this._gridOptions.columnPicker.syncResizeTitle = this._gridOptions.columnPicker.syncResizeTitle || syncResizeTitle;\n\n    this.columnPickerControl = new Slick.Controls.ColumnPicker(columnDefinitions, grid, this._gridOptions);\n    if (grid && this._gridOptions.enableColumnPicker) {\n      this.columnPickerControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\n        if (this._gridOptions.columnPicker && typeof this._gridOptions.columnPicker.onColumnsChanged === 'function') {\n          this._gridOptions.columnPicker.onColumnsChanged(e, args);\n        }\n      });\n    }\n\n    return this.columnPickerControl;\n  }\n\n  /**\n   * Create (or re-create) Grid Menu and expose all the available hooks that user can subscribe (onCommand, onMenuClose, ...)\n   * @param grid\n   * @param columnDefinitions\n   */\n  createGridMenu(grid: any, columnDefinitions: Column[]) {\n    if (this._gridOptions && this._gridOptions.gridMenu) {\n      this._gridOptions.gridMenu = { ...this.getDefaultGridMenuOptions(), ...this._gridOptions.gridMenu };\n\n      // merge original user grid menu items with internal items\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\n      this._gridOptions.gridMenu.customItems = [...this.userOriginalGridMenu.customItems || [], ...this.addGridMenuCustomCommands()];\n      this.translateItems(this._gridOptions.gridMenu.customItems, 'titleKey', 'title');\n      this.sortItems(this._gridOptions.gridMenu.customItems, 'positionOrder');\n\n      const gridMenuControl = new Slick.Controls.GridMenu(columnDefinitions, grid, this._gridOptions);\n      if (grid && this._gridOptions.gridMenu) {\n        gridMenuControl.onBeforeMenuShow.subscribe((e: Event, args: CellArgs) => {\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onBeforeMenuShow === 'function') {\n            this._gridOptions.gridMenu.onBeforeMenuShow(e, args);\n          }\n        });\n        gridMenuControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\n          this.areVisibleColumnDifferent = true;\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onColumnsChanged === 'function') {\n            this._gridOptions.gridMenu.onColumnsChanged(e, args);\n          }\n        });\n        gridMenuControl.onCommand.subscribe((e: Event, args: GridMenuItem) => {\n          this.executeGridMenuInternalCustomCommands(e, args);\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onCommand === 'function') {\n            this._gridOptions.gridMenu.onCommand(e, args);\n          }\n        });\n        gridMenuControl.onMenuClose.subscribe((e: Event, args: CellArgs) => {\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onMenuClose === 'function') {\n            this._gridOptions.gridMenu.onMenuClose(e, args);\n          }\n\n          // we also want to resize the columns if the user decided to hide certain column(s)\n          if (grid && typeof grid.autosizeColumns === 'function') {\n            // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree)\n            const gridUid = grid.getUID();\n            if (this.areVisibleColumnDifferent && gridUid && $(`.${gridUid}`).length > 0) {\n              grid.autosizeColumns();\n              this.areVisibleColumnDifferent = false;\n            }\n          }\n        });\n      }\n      return gridMenuControl;\n    }\n    return null;\n  }\n\n  /**\n   * Create the Header Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)\n   * @param grid\n   * @param dataView\n   * @param columnDefinitions\n   */\n  createHeaderMenu(grid: any, dataView: any, columnDefinitions: Column[]) {\n    this._gridOptions.headerMenu = { ...this.getDefaultHeaderMenuOptions(), ...this._gridOptions.headerMenu };\n    if (this._gridOptions.enableHeaderMenu) {\n      this._gridOptions.headerMenu = this.addHeaderMenuCustomCommands(this._gridOptions, columnDefinitions);\n    }\n\n    const headerMenuPlugin = new Slick.Plugins.HeaderMenu(this._gridOptions.headerMenu);\n\n    grid.registerPlugin(headerMenuPlugin);\n    headerMenuPlugin.onCommand.subscribe((e: Event, args: HeaderMenuOnCommandArgs) => {\n      this.executeHeaderMenuInternalCommands(e, args);\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onCommand === 'function') {\n        this._gridOptions.headerMenu.onCommand(e, args);\n      }\n    });\n    headerMenuPlugin.onBeforeMenuShow.subscribe((e: Event, args: HeaderMenuOnBeforeMenuShowArgs) => {\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onBeforeMenuShow === 'function') {\n        this._gridOptions.headerMenu.onBeforeMenuShow(e, args);\n      }\n    });\n\n    return headerMenuPlugin;\n  }\n\n  /** Create an undo redo buffer used by the Excel like copy */\n  createUndoRedoBuffer() {\n    const commandQueue: any[] = [];\n    let commandCtr = 0;\n\n    this.undoRedoBuffer = {\n      queueAndExecuteCommand: (editCommand: any) => {\n        commandQueue[commandCtr] = editCommand;\n        commandCtr++;\n        editCommand.execute();\n      },\n      undo: () => {\n        if (commandCtr === 0) { return; }\n        commandCtr--;\n        const command = commandQueue[commandCtr];\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\n          command.undo();\n        }\n      },\n      redo: () => {\n        if (commandCtr >= commandQueue.length) { return; }\n        const command = commandQueue[commandCtr];\n        commandCtr++;\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\n          command.execute();\n        }\n      }\n    };\n  }\n\n  /** Hide a column from the grid */\n  hideColumn(column: Column) {\n    if (this._grid && this.visibleColumns) {\n      const columnIndex = this._grid.getColumnIndex(column.id);\n      this.visibleColumns = this.removeColumnByIndex(this.visibleColumns, columnIndex);\n      this._grid.setColumns(this.visibleColumns);\n    }\n  }\n\n  /** Attach an undo shortcut key hook that will redo/undo the copy buffer */\n  hookUndoShortcutKey() {\n    // undo shortcut\n    $(document).keydown((e) => {\n      if (e.which === 90 && (e.ctrlKey || e.metaKey)) {    // CTRL + (shift) + Z\n        if (e.shiftKey) {\n          this.undoRedoBuffer.redo();\n        } else {\n          this.undoRedoBuffer.undo();\n        }\n      }\n    });\n  }\n\n  /** Dispose of all the controls & plugins */\n  dispose() {\n    this._grid = null;\n    this._dataView = null;\n    this.visibleColumns = [];\n\n    // dispose of each control/plugin if it has a destroy method\n    this.extensionList.forEach((item) => {\n      if (item && item.service && item.service.destroy) {\n        item.service.destroy();\n      }\n    });\n    this.extensionList = [];\n  }\n\n  /** Create Grid Menu with Custom Commands if user has enabled Filters and/or uses a Backend Service (OData, GraphQL) */\n  private addGridMenuCustomCommands() {\n    const backendApi = this._gridOptions.backendServiceApi || null;\n    const gridMenuCustomItems: GridMenuItem[] = [];\n\n    if (this._gridOptions && this._gridOptions.enableFiltering) {\n      // show grid menu: clear all filters\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllFiltersCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllFiltersCommand || 'fa fa-filter text-danger',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_FILTERS') : Constants.TEXT_CLEAR_ALL_FILTERS,\n            disabled: false,\n            command: 'clear-filter',\n            positionOrder: 50\n          }\n        );\n      }\n\n      // show grid menu: toggle filter row\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideToggleFilterCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconToggleFilterCommand || 'fa fa-random',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('TOGGLE_FILTER_ROW') : Constants.TEXT_TOGGLE_FILTER_ROW,\n            disabled: false,\n            command: 'toggle-filter',\n            positionOrder: 52\n          }\n        );\n      }\n\n      // show grid menu: refresh dataset\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideRefreshDatasetCommand && backendApi) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconRefreshDatasetCommand || 'fa fa-refresh',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('REFRESH_DATASET') : Constants.TEXT_REFRESH_DATASET,\n            disabled: false,\n            command: 'refresh-dataset',\n            positionOrder: 54\n          }\n        );\n      }\n    }\n\n    if (this._gridOptions.enableSorting) {\n      // show grid menu: clear all sorting\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllSortingCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllSortingCommand || 'fa fa-unsorted text-danger',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_SORTING') : Constants.TEXT_CLEAR_ALL_SORTING,\n            disabled: false,\n            command: 'clear-sorting',\n            positionOrder: 51\n          }\n        );\n      }\n    }\n\n    // show grid menu: export to file\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportCsvCommand) {\n      gridMenuCustomItems.push(\n        {\n          iconCssClass: this._gridOptions.gridMenu.iconExportCsvCommand || 'fa fa-download',\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_CSV') : Constants.TEXT_EXPORT_IN_CSV_FORMAT,\n          disabled: false,\n          command: 'export-csv',\n          positionOrder: 53\n        }\n      );\n    }\n    // show grid menu: export to text file as tab delimited\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportTextDelimitedCommand) {\n      gridMenuCustomItems.push(\n        {\n          iconCssClass: this._gridOptions.gridMenu.iconExportTextDelimitedCommand || 'fa fa-download',\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_TAB_DELIMITED') : Constants.TEXT_EXPORT_IN_TEXT_FORMAT,\n          disabled: false,\n          command: 'export-text-delimited',\n          positionOrder: 54\n        }\n      );\n    }\n\n    // add the custom \"Commands\" title if there are any commands\n    if (this._gridOptions && this._gridOptions.gridMenu && (gridMenuCustomItems.length > 0 || this._gridOptions.gridMenu.customItems.length > 0)) {\n      this._gridOptions.gridMenu.customTitle = this._gridOptions.gridMenu.customTitle || this.getPickerTitleOutputString('customTitle', 'gridMenu');\n    }\n\n    return gridMenuCustomItems;\n  }\n\n  /**\n   * Create Header Menu with Custom Commands if user has enabled Header Menu\n   * @param options\n   * @param columnDefinitions\n   * @return header menu\n   */\n  private addHeaderMenuCustomCommands(options: GridOption, columnDefinitions: Column[]): HeaderMenu {\n    const headerMenuOptions = options.headerMenu;\n\n    if (columnDefinitions && Array.isArray(columnDefinitions) && options.enableHeaderMenu) {\n      columnDefinitions.forEach((columnDef: Column) => {\n        if (columnDef && !columnDef.excludeFromHeaderMenu) {\n          if (!columnDef.header || !columnDef.header.menu) {\n            columnDef.header = {\n              menu: {\n                items: []\n              }\n            };\n          }\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\n\n          // Sorting Commands\n          if (options.enableSorting && columnDef.sortable && !headerMenuOptions.hideSortCommands) {\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-asc').length === 0) {\n              columnHeaderMenuItems.push({\n                iconCssClass: headerMenuOptions.iconSortAscCommand || 'fa fa-sort-asc',\n                title: options.enableTranslate ? this.translate.instant('SORT_ASCENDING') : Constants.TEXT_SORT_ASCENDING,\n                command: 'sort-asc',\n                positionOrder: 50\n              });\n            }\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-desc').length === 0) {\n              columnHeaderMenuItems.push({\n                iconCssClass: headerMenuOptions.iconSortDescCommand || 'fa fa-sort-desc',\n                title: options.enableTranslate ? this.translate.instant('SORT_DESCENDING') : Constants.TEXT_SORT_DESCENDING,\n                command: 'sort-desc',\n                positionOrder: 51\n              });\n            }\n          }\n\n          // Hide Column Command\n          if (!headerMenuOptions.hideColumnHideCommand && columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'hide').length === 0) {\n            columnHeaderMenuItems.push({\n              iconCssClass: headerMenuOptions.iconColumnHideCommand || 'fa fa-times',\n              title: options.enableTranslate ? this.translate.instant('HIDE_COLUMN') : Constants.TEXT_HIDE_COLUMN,\n              command: 'hide',\n              positionOrder: 52\n            });\n          }\n\n          this.translateItems(columnHeaderMenuItems, 'titleKey', 'title');\n\n          // sort the custom items by their position in the list\n          columnHeaderMenuItems.sort((itemA, itemB) => {\n            if (itemA && itemB && itemA.hasOwnProperty('positionOrder') && itemB.hasOwnProperty('positionOrder')) {\n              return itemA.positionOrder - itemB.positionOrder;\n            }\n            return 0;\n          });\n        }\n      });\n\n    }\n\n    return headerMenuOptions;\n  }\n\n  /** Execute the Header Menu Commands that was triggered by the onCommand subscribe */\n  executeHeaderMenuInternalCommands(e: Event, args: HeaderMenuOnCommandArgs) {\n    if (args && args.command) {\n      switch (args.command) {\n        case 'hide':\n          this.hideColumn(args.column);\n          this.autoResizeColumns();\n          break;\n        case 'sort-asc':\n        case 'sort-desc':\n          // get previously sorted columns\n          const cols: ColumnSort[] = this.sortService.getPreviousColumnSorts(args.column.id + '');\n\n          // add to the column array, the column sorted by the header menu\n          cols.push({ sortCol: args.column, sortAsc: (args.command === 'sort-asc') });\n          if (this._gridOptions.backendServiceApi) {\n            this.sortService.onBackendSortChanged(e, { multiColumnSort: true, sortCols: cols, grid: this._grid });\n          } else {\n            this.sortService.onLocalSortChanged(this._grid, this._dataView, cols);\n          }\n\n          // update the this.gridObj sortColumns array which will at the same add the visual sort icon(s) on the UI\n          const newSortColumns: ColumnSort[] = cols.map((col) => {\n            return { columnId: col.sortCol.id, sortAsc: col.sortAsc };\n          });\n          this._grid.setSortColumns(newSortColumns); // add sort icon in UI\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /**\n   * Execute the Grid Menu Custom command callback that was triggered by the onCommand subscribe\n   * These are the default internal custom commands\n   * @param event\n   * @param GridMenuItem args\n   */\n  executeGridMenuInternalCustomCommands(e: Event, args: GridMenuItem) {\n    if (args && args.command) {\n      switch (args.command) {\n        case 'clear-filter':\n          this.filterService.clearFilters();\n          this._dataView.refresh();\n          break;\n        case 'clear-sorting':\n          this.sortService.clearSorting();\n          this._dataView.refresh();\n          break;\n        case 'export-csv':\n          this.exportService.exportToFile({\n            delimiter: DelimiterType.comma,\n            filename: 'export',\n            format: FileType.csv,\n            useUtf8WithBom: true\n          });\n          break;\n        case 'export-text-delimited':\n          this.exportService.exportToFile({\n            delimiter: DelimiterType.tab,\n            filename: 'export',\n            format: FileType.txt,\n            useUtf8WithBom: true\n          });\n          break;\n        case 'toggle-filter':\n          this._grid.setHeaderRowVisibility(!this._grid.getOptions().showHeaderRow);\n          break;\n        case 'toggle-toppanel':\n          this._grid.setTopPanelVisibility(!this._grid.getOptions().showTopPanel);\n          break;\n        case 'refresh-dataset':\n          this.refreshBackendDataset();\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /** Refresh the dataset through the Backend Service */\n  refreshBackendDataset() {\n    let query;\n    const backendApi = this._gridOptions.backendServiceApi;\n    if (!backendApi || !backendApi.service || !backendApi.process) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    if (backendApi.service) {\n      query = backendApi.service.buildQuery();\n    }\n\n    if (query && query !== '') {\n      if (backendApi.preProcess) {\n        backendApi.preProcess();\n      }\n\n      // the process could be an Observable (like HttpClient) or a Promise\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n      const observableOrPromise = backendApi.process(query);\n\n      castToPromise(observableOrPromise).then((processResult: GraphqlResult | any) => {\n        // from the result, call our internal post process to update the Dataset and Pagination info\n        if (processResult && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  /**\n   * Remove a column from the grid by it's index in the grid\n   * @param array input\n   * @param index\n   */\n  removeColumnByIndex(array: any[], index: number) {\n    return array.filter((el: any, i: number) => {\n      return index !== i;\n    });\n  }\n\n  /** Translate the Column Picker and it's last 2 checkboxes */\n  translateColumnPicker() {\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\n    if (this._gridOptions && this._gridOptions.columnPicker) {\n      this.emptyColumnPickerTitles();\n\n      this._gridOptions.columnPicker.columnTitle = this.getPickerTitleOutputString('columnTitle', 'columnPicker');\n      this._gridOptions.columnPicker.forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'columnPicker');\n      this._gridOptions.columnPicker.syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');\n    }\n\n    // translate all columns (including non-visible)\n    this.translateItems(this.allColumns, 'headerKey', 'name');\n\n    // re-initialize the Column Picker, that will recreate all the list\n    // doing an \"init()\" won't drop any existing command attached\n    if (this.columnPickerControl.init) {\n      this.columnPickerControl.init(this._grid);\n    }\n  }\n\n  /** Translate the Grid Menu titles and column picker */\n  translateGridMenu() {\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\n    // we also need to call the control init so that it takes the new Grid object with latest values\n    if (this._gridOptions && this._gridOptions.gridMenu) {\n      this._gridOptions.gridMenu.customItems = [];\n      this.emptyGridMenuTitles();\n\n      // merge original user grid menu items with internal items\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\n      this._gridOptions.gridMenu.customItems = [...this.userOriginalGridMenu.customItems || [], ...this.addGridMenuCustomCommands()];\n      this.translateItems(this._gridOptions.gridMenu.customItems, 'titleKey', 'title');\n      this.sortItems(this._gridOptions.gridMenu.customItems, 'positionOrder');\n\n      this._gridOptions.gridMenu.columnTitle = this.getPickerTitleOutputString('columnTitle', 'gridMenu');\n      this._gridOptions.gridMenu.forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'gridMenu');\n      this._gridOptions.gridMenu.syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'gridMenu');\n\n      // translate all columns (including non-visible)\n      this.translateItems(this.allColumns, 'headerKey', 'name');\n\n      // re-initialize the Grid Menu, that will recreate all the menus & list\n      // doing an \"init()\" won't drop any existing command attached\n      if (this.gridMenuControl.init) {\n        this.gridMenuControl.init(this._grid);\n      }\n    }\n  }\n\n  /**\n   * Translate the Header Menu titles, we need to loop through all column definition to re-translate them\n   */\n  translateHeaderMenu() {\n    if (this._gridOptions && this._gridOptions.headerMenu) {\n      this.resetHeaderMenuTranslations(this.visibleColumns);\n    }\n  }\n\n  /**\n   * Translate manually the header titles.\n   * We could optionally pass a locale (that will change currently loaded locale), else it will use current locale\n   * @param locale to use\n   * @param new column definitions (optional)\n   */\n  translateColumnHeaders(locale?: boolean | string, newColumnDefinitions?: Column[]) {\n    if (locale) {\n      this.translate.use(locale as string);\n    }\n\n    const columnDefinitions = newColumnDefinitions || this._columnDefinitions;\n\n    this.translateItems(columnDefinitions, 'headerKey', 'name');\n    this.translateItems(this.allColumns, 'headerKey', 'name');\n\n    // re-render the column headers\n    this.renderColumnHeaders(columnDefinitions);\n  }\n\n  /**\n   * Render (or re-render) the column headers from column definitions.\n   * calling setColumns() will trigger a grid re-render\n   */\n  renderColumnHeaders(newColumnDefinitions?: Column[]) {\n    const collection = newColumnDefinitions || this._columnDefinitions;\n    if (Array.isArray(collection) && this._grid && this._grid.setColumns) {\n      this._grid.setColumns(collection);\n    }\n  }\n\n  private emptyColumnPickerTitles() {\n    this._gridOptions.columnPicker.columnTitle = '';\n    this._gridOptions.columnPicker.forceFitTitle = '';\n    this._gridOptions.columnPicker.syncResizeTitle = '';\n  }\n\n  private emptyGridMenuTitles() {\n    this._gridOptions.gridMenu.customTitle = '';\n    this._gridOptions.gridMenu.columnTitle = '';\n    this._gridOptions.gridMenu.forceFitTitle = '';\n    this._gridOptions.gridMenu.syncResizeTitle = '';\n  }\n\n  /**\n   * @return default Grid Menu options\n   */\n  private getDefaultGridMenuOptions(): GridMenu {\n    return {\n      customTitle: undefined,\n      columnTitle: this.getPickerTitleOutputString('columnTitle', 'gridMenu'),\n      forceFitTitle: this.getPickerTitleOutputString('forceFitTitle', 'gridMenu'),\n      syncResizeTitle: this.getPickerTitleOutputString('syncResizeTitle', 'gridMenu'),\n      iconCssClass: 'fa fa-bars',\n      menuWidth: 18,\n      customItems: [],\n      hideClearAllFiltersCommand: false,\n      hideRefreshDatasetCommand: false,\n      hideToggleFilterCommand: false,\n    };\n  }\n\n  /**\n   * @return default Header Menu options\n   */\n  private getDefaultHeaderMenuOptions(): HeaderMenu {\n    return {\n      autoAlignOffset: 12,\n      minWidth: 140,\n      hideColumnHideCommand: false,\n      hideSortCommands: false,\n      title: ''\n    };\n  }\n\n  /**\n   * From a Grid Menu object property name, we will return the correct title output string following this order\n   * 1- if user provided a title, use it as the output title\n   * 2- else if user provided a title key, use it to translate the output title\n   * 3- else if nothing is provided use\n   */\n  private getPickerTitleOutputString(propName: string, pickerName: 'gridMenu' | 'columnPicker') {\n    let output = '';\n    const picker = this._gridOptions && this._gridOptions[pickerName] || {};\n    const enableTranslate = this._gridOptions && this._gridOptions.enableTranslate || false;\n\n    const title = picker && picker[propName];\n    const titleKey = picker && picker[`${propName}Key`];\n\n    if (titleKey) {\n      output = this.translate.instant(titleKey || ' ');\n    } else {\n      switch (propName) {\n        case 'customTitle':\n          output = title || (enableTranslate ? this.translate.instant('COMMANDS') : Constants.TEXT_COMMANDS);\n          break;\n        case 'columnTitle':\n          output = title || (enableTranslate ? this.translate.instant('COLUMNS') : Constants.TEXT_COLUMNS);\n          break;\n        case 'forceFitTitle':\n          output = title || (enableTranslate ? this.translate.instant('FORCE_FIT_COLUMNS') : Constants.TEXT_FORCE_FIT_COLUMNS);\n          break;\n        case 'syncResizeTitle':\n          output = title || (enableTranslate ? this.translate.instant('SYNCHRONOUS_RESIZE') : Constants.TEXT_SYNCHRONOUS_RESIZE);\n          break;\n        default:\n          output = title;\n          break;\n      }\n    }\n    return output;\n  }\n\n  /**\n   * Reset all the Grid Menu options which have text to translate\n   * @param grid menu object\n   */\n  private resetHeaderMenuTranslations(columnDefinitions: Column[]) {\n    columnDefinitions.forEach((columnDef: Column) => {\n      if (columnDef && columnDef.header && columnDef.header && columnDef.header.menu && columnDef.header.menu.items) {\n        if (!columnDef.excludeFromHeaderMenu) {\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\n\n          columnHeaderMenuItems.forEach((item) => {\n            switch (item.command) {\n              case 'sort-asc':\n                item.title = this.translate.instant('SORT_ASCENDING') || Constants.TEXT_SORT_ASCENDING;\n                break;\n              case 'sort-desc':\n                item.title = this.translate.instant('SORT_DESCENDING') || Constants.TEXT_SORT_DESCENDING;\n                break;\n              case 'hide':\n                item.title = this.translate.instant('HIDE_COLUMN') || Constants.TEXT_HIDE_COLUMN;\n                break;\n            }\n\n            // re-translate if there's a \"titleKey\"\n            if (this._gridOptions && this._gridOptions.enableTranslate) {\n              this.translateItems(columnHeaderMenuItems, 'titleKey', 'title');\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Sort items in an array by a property name\n   * @params items array\n   * @param property name to sort with\n   * @return sorted array\n   */\n  private sortItems(items: any[], propertyName: string) {\n    // sort the custom items by their position in the list\n    items.sort((itemA, itemB) => {\n      if (itemA && itemB && itemA.hasOwnProperty(propertyName) && itemB.hasOwnProperty(propertyName)) {\n        return itemA[propertyName] - itemB[propertyName];\n      }\n      return 0;\n    });\n  }\n\n  /** Translate the an array of items from an input key and assign to the output key */\n  private translateItems(items: any[], inputKey: string, outputKey: string) {\n    for (const item of items) {\n      if (item[inputKey]) {\n        item[outputKey] = this.translate.instant(item[inputKey]);\n      }\n    }\n  }\n}\n",
    "/**\r\n * This GraphqlQueryBuilder class is a lib that already exist\r\n * but was causing issues with TypeScript, RequireJS and other bundler/packagers\r\n * and so I rewrote it in pure TypeScript.\r\n *\r\n * The previous lib can be viewed here at this Github\r\n * https://github.com/codemeasandwich/graphql-query-builder\r\n */\r\nexport default class GraphqlQueryBuilder {\r\n  alias: string;\r\n  head: any[] = [];\r\n  body: any;\r\n\r\n  /* Constructor, query/mutator you wish to use, and an alias or filter arguments. */\r\n  constructor(private queryFnName: string, aliasOrFilter?: string | object) {\r\n    if (typeof aliasOrFilter === 'function') {\r\n      this.alias = aliasOrFilter;\r\n    } else if (typeof aliasOrFilter === 'object') {\r\n      this.filter(aliasOrFilter);\r\n    } else if (undefined === aliasOrFilter && 2 === arguments.length) {\r\n      throw new TypeError(`You have passed undefined as Second argument to \"Query\"`);\r\n    } else if (undefined !== aliasOrFilter) {\r\n      throw new TypeError(`Second argument to \"Query\" should be an alias name(String) or filter arguments(Object). was passed ${aliasOrFilter}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The parameters to run the query against.\r\n   * @param filters An object mapping attribute to values\r\n   */\r\n  filter(filters: any) {\r\n    for (const prop of Object.keys(filters)) {\r\n      if (typeof filters[prop] === 'function') {\r\n        continue;\r\n      }\r\n      const val = this.getGraphQLValue(filters[prop]);\r\n      if (val === '{}') {\r\n        continue;\r\n      }\r\n      this.head.push(`${prop}:${val}`);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Outlines the properties you wish to be returned from the query.\r\n   * @param properties representing each attribute you want Returned\r\n   */\r\n  find(...searches: any[]) { // THIS NEED TO BE A \"FUNCTION\" to scope 'arguments'\r\n    if (!searches) {\r\n      throw new TypeError(`find value can not be >>falsy<<`);\r\n    }\r\n    // if its a string.. it may have other values\r\n    // else it sould be an Object or Array of maped values\r\n    const searchKeys = (searches.length === 1 && Array.isArray(searches[0])) ? searches[0] : searches;\r\n    this.body = this.parceFind(searchKeys);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set an alias for this result.\r\n   * @param alias\r\n   */\r\n  setAlias(alias: string) {\r\n    this.alias = alias;\r\n  }\r\n\r\n  /**\r\n   * Return to the formatted query string\r\n   * @return\r\n   */\r\n  toString() {\r\n    if (this.body === undefined) {\r\n      throw new ReferenceError(`return properties are not defined. use the 'find' function to defined them`);\r\n    }\r\n\r\n    return `${(this.alias) ? (this.alias + ':') : ''} ${this.queryFnName} ${(this.head.length > 0) ? '(' + this.head.join(',') + ')' : ''}  { ${this.body} }`;\r\n  }\r\n\r\n  // --\r\n  // PRIVATE FUNCTIONS\r\n  // -----------------\r\n\r\n  private parceFind(_levelA: any[]) {\r\n    const propsA = _levelA.map((currentValue, index) => {\r\n      const itemX = _levelA[index];\r\n\r\n      if (itemX instanceof GraphqlQueryBuilder) {\r\n        return itemX.toString();\r\n      } else if (!Array.isArray(itemX) && typeof itemX === 'object') {\r\n        const propsAA = Object.keys(itemX);\r\n        if (1 !== propsAA.length) {\r\n          throw new RangeError(`Alias objects should only have one value. was passed: ${JSON.stringify(itemX)}`);\r\n        }\r\n        const propS = propsAA[0];\r\n        const item = itemX[propS];\r\n\r\n        if (Array.isArray(item)) {\r\n          return new GraphqlQueryBuilder(propS).find(item);\r\n        }\r\n        return `${propS} : ${item} `;\r\n      } else if (typeof itemX === 'string') {\r\n        return itemX;\r\n      } else {\r\n        throw new RangeError(`cannot handle Find value of ${itemX}`);\r\n      }\r\n    });\r\n\r\n    return propsA.join(',');\r\n  }\r\n\r\n  private getGraphQLValue(value: any) {\r\n    if (typeof value === 'string') {\r\n      value = JSON.stringify(value);\r\n    } else if (Array.isArray(value)) {\r\n      value = value.map(item => {\r\n        return this.getGraphQLValue(item);\r\n      }).join();\r\n      value = `[${value}]`;\r\n    } else if (value instanceof Date) {\r\n      value = JSON.stringify(value);\r\n    } else if (value !== null && typeof value === 'object') {\r\n      value = this.objectToString(value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private objectToString(obj: any) {\r\n    const sourceA = [];\r\n\r\n    for (const prop of Object.keys(obj)) {\r\n      if (typeof obj[prop] === 'function') {\r\n        continue;\r\n      }\r\n      sourceA.push(`${prop}:${this.getGraphQLValue(obj[prop])}`);\r\n    }\r\n    return `{${sourceA.join()}}`;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { mapOperatorType, mapOperatorByFieldType } from './utilities';\r\nimport {\r\n  BackendService,\r\n  Column,\r\n  ColumnFilter,\r\n  ColumnFilters,\r\n  ColumnSort,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  FieldType,\r\n  FilterChangedArgs,\r\n  GraphqlCursorPaginationOption,\r\n  GraphqlDatasetFilter,\r\n  GraphqlFilteringOption,\r\n  GraphqlPaginationOption,\r\n  GraphqlServiceOption,\r\n  GraphqlSortingOption,\r\n  GridOption,\r\n  Pagination,\r\n  PaginationChangedArgs,\r\n  SortChangedArgs,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport QueryBuilder from './graphqlQueryBuilder';\r\n\r\n// timer for keeping track of user typing waits\r\nlet timer: any;\r\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\r\nconst DEFAULT_ITEMS_PER_PAGE = 25;\r\nconst DEFAULT_PAGE_SIZE = 20;\r\n\r\nexport class GraphqlService implements BackendService {\r\n  private _currentFilters: ColumnFilters | CurrentFilter[];\r\n  private _currentPagination: CurrentPagination;\r\n  private _currentSorters: CurrentSorter[];\r\n  private _columnDefinitions: Column[];\r\n  private _grid: any;\r\n  options: GraphqlServiceOption;\r\n  pagination: Pagination | undefined;\r\n  defaultOrderBy: GraphqlSortingOption = { field: 'id', direction: SortDirection.ASC };\r\n  defaultPaginationOptions: GraphqlPaginationOption | GraphqlCursorPaginationOption = {\r\n    first: DEFAULT_ITEMS_PER_PAGE,\r\n    offset: 0\r\n  };\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Build the GraphQL query, since the service include/exclude cursor, the output query will be different.\r\n   * @param serviceOptions GraphqlServiceOption\r\n   */\r\n  buildQuery() {\r\n    if (!this.options || !this.options.datasetName || (!this._columnDefinitions && !this.options.columnDefinitions)) {\r\n      throw new Error('GraphQL Service requires \"datasetName\" & \"columnDefinitions\" properties for it to work');\r\n    }\r\n\r\n    // get the column definitions and exclude some if they were tagged as excluded\r\n    let columnDefinitions = this._columnDefinitions || this.options.columnDefinitions;\r\n    columnDefinitions = columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\r\n\r\n    const queryQb = new QueryBuilder('query');\r\n    const datasetQb = new QueryBuilder(this.options.datasetName);\r\n    const dataQb = (this.options.isWithCursor) ? new QueryBuilder('edges') : new QueryBuilder('nodes');\r\n\r\n    // get all the columnds Ids for the filters to work\r\n    let columnIds: string[] = [];\r\n    if (columnDefinitions && Array.isArray(columnDefinitions)) {\r\n      for (const column of columnDefinitions) {\r\n        columnIds.push(column.field);\r\n\r\n        // if extra \"fields\" are passed, also push them to columnIds\r\n        if (column.fields) {\r\n          columnIds.push(...column.fields);\r\n        }\r\n      }\r\n      // columnIds = columnDefinitions.map((column) => column.field);\r\n    } else {\r\n      columnIds = this.options.columnIds || [];\r\n    }\r\n\r\n    // Slickgrid also requires the \"id\" field to be part of DataView\r\n    // add it to the GraphQL query if it wasn't already part of the list\r\n    if (columnIds.indexOf('id') === -1) {\r\n      columnIds.unshift('id');\r\n    }\r\n\r\n    const filters = this.buildFilterQuery(columnIds);\r\n\r\n    if (this.options.isWithCursor) {\r\n      // ...pageInfo { hasNextPage, endCursor }, edges { cursor, node { _filters_ } }\r\n      const pageInfoQb = new QueryBuilder('pageInfo');\r\n      pageInfoQb.find('hasNextPage', 'endCursor');\r\n      dataQb.find(['cursor', { node: filters }]);\r\n      datasetQb.find(['totalCount', pageInfoQb, dataQb]);\r\n    } else {\r\n      // ...nodes { _filters_ }\r\n      dataQb.find(filters);\r\n      datasetQb.find(['totalCount', dataQb]);\r\n    }\r\n\r\n    // add dataset filters, could be Pagination and SortingFilters and/or FieldFilters\r\n    const datasetFilters: GraphqlDatasetFilter = {\r\n      ...this.options.paginationOptions,\r\n      first: ((this.options.paginationOptions && this.options.paginationOptions.first) ? this.options.paginationOptions.first : ((this.pagination && this.pagination.pageSize) ? this.pagination.pageSize : null)) || this.defaultPaginationOptions.first\r\n    };\r\n\r\n    if (!this.options.isWithCursor) {\r\n      datasetFilters.offset = ((this.options.paginationOptions && this.options.paginationOptions.hasOwnProperty('offset')) ? +this.options.paginationOptions['offset'] : 0);\r\n    }\r\n\r\n    if (this.options.sortingOptions && Array.isArray(this.options.sortingOptions) && this.options.sortingOptions.length > 0) {\r\n      // orderBy: [{ field:x, direction: 'ASC' }]\r\n      datasetFilters.orderBy = this.options.sortingOptions;\r\n    }\r\n    if (this.options.filteringOptions && Array.isArray(this.options.filteringOptions) && this.options.filteringOptions.length > 0) {\r\n      // filterBy: [{ field: date, operator: '>', value: '2000-10-10' }]\r\n      datasetFilters.filterBy = this.options.filteringOptions;\r\n    }\r\n    if (this.options.addLocaleIntoQuery) {\r\n      // first: 20, ... locale: \"en-CA\"\r\n      datasetFilters.locale = this._gridOptions && this._gridOptions.i18n && this._gridOptions.i18n.currentLang || 'en';\r\n    }\r\n    if (this.options.extraQueryArguments) {\r\n      // first: 20, ... userId: 123\r\n      for (const queryArgument of this.options.extraQueryArguments) {\r\n        datasetFilters[queryArgument.field] = queryArgument.value;\r\n      }\r\n    }\r\n\r\n    // query { users(first: 20, orderBy: [], filterBy: [])}\r\n    datasetQb.filter(datasetFilters);\r\n    queryQb.find(datasetQb);\r\n\r\n    const enumSearchProperties = ['direction:', 'field:', 'operator:'];\r\n    return this.trimDoubleQuotesOnEnumField(queryQb.toString(), enumSearchProperties, this.options.keepArgumentFieldDoubleQuotes || false);\r\n  }\r\n\r\n  /**\r\n   * From an input array of strings, we want to build a GraphQL query string.\r\n   * The process has to take the dot notation and parse it into a valid GraphQL query\r\n   * Following this SO answer https://stackoverflow.com/a/47705476/1212166\r\n   *\r\n   * INPUT\r\n   *  ['firstName', 'lastName', 'billing.address.street', 'billing.address.zip']\r\n   * OUTPUT\r\n   * firstName, lastName, billing{address{street, zip}}\r\n   * @param inputArray\r\n   */\r\n  buildFilterQuery(inputArray: string[]) {\r\n\r\n    const set = (o: any = {}, a: any) => {\r\n      const k = a.shift();\r\n      o[k] = a.length ? set(o[k], a) : null;\r\n      return o;\r\n    };\r\n\r\n    const output = inputArray.reduce((o: any, a: string) => set(o, a.split('.')), {});\r\n\r\n    return JSON.stringify(output)\r\n      .replace(/\\\"|\\:|null/g, '')\r\n      .replace(/^\\{/, '')\r\n      .replace(/\\}$/, '');\r\n  }\r\n\r\n  init(serviceOptions?: GraphqlServiceOption, pagination?: Pagination, grid?: any): void {\r\n    this._grid = grid;\r\n    this.options = serviceOptions || {};\r\n    this.pagination = pagination;\r\n\r\n    if (grid && grid.getColumns) {\r\n      this._columnDefinitions = serviceOptions.columnDefinitions || grid.getColumns();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get an initialization of Pagination options\r\n   * @return Pagination Options\r\n   */\r\n  getInitPaginationOptions(): GraphqlDatasetFilter {\r\n    return (this.options.isWithCursor) ? { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE) } : { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE), offset: 0 };\r\n  }\r\n\r\n  /** Get the GraphQL dataset name */\r\n  getDatasetName(): string {\r\n    return this.options.datasetName || '';\r\n  }\r\n\r\n  /** Get the Filters that are currently used by the grid */\r\n  getCurrentFilters(): ColumnFilters | CurrentFilter[] {\r\n    return this._currentFilters;\r\n  }\r\n\r\n  /** Get the Pagination that is currently used by the grid */\r\n  getCurrentPagination(): CurrentPagination {\r\n    return this._currentPagination;\r\n  }\r\n\r\n  /** Get the Sorters that are currently used by the grid */\r\n  getCurrentSorters(): CurrentSorter[] {\r\n    return this._currentSorters;\r\n  }\r\n\r\n  /*\r\n   * Reset the pagination options\r\n   */\r\n  resetPaginationOptions() {\r\n    let paginationOptions;\r\n    if (this.options.isWithCursor) {\r\n      // first, last, after, before\r\n      paginationOptions = {\r\n        after: '',\r\n        before: undefined,\r\n        last: undefined\r\n      } as GraphqlCursorPaginationOption;\r\n    } else {\r\n      // first, last, offset\r\n      paginationOptions = (this.options.paginationOptions || this.getInitPaginationOptions()) as GraphqlPaginationOption;\r\n      paginationOptions.offset = 0;\r\n    }\r\n\r\n    // save current pagination as Page 1 and page size as \"first\" set size\r\n    this._currentPagination = {\r\n      pageNumber: 1,\r\n      pageSize: paginationOptions.first\r\n    };\r\n\r\n    this.updateOptions({ paginationOptions });\r\n  }\r\n\r\n  updateOptions(serviceOptions?: GraphqlServiceOption) {\r\n    this.options = { ...this.options, ...serviceOptions };\r\n  }\r\n\r\n  /*\r\n   * FILTERING\r\n   */\r\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\r\n    const gridOptions: GridOption = this._gridOptions || args.grid.getOptions();\r\n    const backendApi = gridOptions.backendServiceApi;\r\n\r\n    if (backendApi === undefined) {\r\n      throw new Error('Something went wrong in the GraphqlService, \"backendServiceApi\" is not initialized');\r\n    }\r\n\r\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\r\n    let debounceTypingDelay = 0;\r\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\r\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\r\n    }\r\n\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    this._currentFilters = this.castFilterToColumnFilter(args.columnFilters);\r\n\r\n    const promise = new Promise<string>((resolve, reject) => {\r\n      if (!args || !args.grid) {\r\n        throw new Error('Something went wrong when trying create the GraphQL Backend Service, it seems that \"args\" is not populated correctly');\r\n      }\r\n\r\n      // reset Pagination, then build the GraphQL query which we will use in the WebAPI callback\r\n      // wait a minimum user typing inactivity before processing any query\r\n      clearTimeout(timer);\r\n      timer = setTimeout(() => {\r\n        // loop through all columns to inspect filters & set the query\r\n        this.updateFilters(args.columnFilters, false);\r\n\r\n        this.resetPaginationOptions();\r\n        resolve(this.buildQuery());\r\n      }, debounceTypingDelay);\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  /*\r\n   * PAGINATION\r\n   * With cursor, the query can have 4 arguments (first, after, last, before), for example:\r\n   *   users (first:20, after:\"YXJyYXljb25uZWN0aW9uOjM=\") {\r\n   *     totalCount\r\n   *     pageInfo {\r\n   *       hasNextPage\r\n   *       endCursor\r\n   *     }\r\n   *     edges {\r\n   *       cursor\r\n   *       node {\r\n   *         name\r\n   *         gender\r\n   *       }\r\n   *     }\r\n   *   }\r\n   * Without cursor, the query can have 3 arguments (first, last, offset), for example:\r\n   *   users (first:20, offset: 10) {\r\n   *     totalCount\r\n   *     nodes {\r\n   *       name\r\n   *       gender\r\n   *     }\r\n   *   }\r\n   */\r\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\r\n    const pageSize = +(args.pageSize || ((this.pagination) ? this.pagination.pageSize : DEFAULT_PAGE_SIZE));\r\n    this.updatePagination(args.newPage, pageSize);\r\n\r\n    // build the GraphQL query which we will use in the WebAPI callback\r\n    return this.buildQuery();\r\n  }\r\n\r\n  /*\r\n   * SORTING\r\n   * we will use sorting as per a Facebook suggestion on a Github issue (with some small changes)\r\n   * https://github.com/graphql/graphql-relay-js/issues/20#issuecomment-220494222\r\n   */\r\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\r\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\r\n\r\n    // loop through all columns to inspect sorters & set the query\r\n    this.updateSorters(sortColumns);\r\n\r\n    // build the GraphQL query which we will use in the WebAPI callback\r\n    return this.buildQuery();\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect filters & update backend service filteringOptions\r\n   * @param columnFilters\r\n   */\r\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset: boolean) {\r\n    const searchByArray: GraphqlFilteringOption[] = [];\r\n    let searchValue: string | string[];\r\n\r\n    for (const columnId in columnFilters) {\r\n      if (columnFilters.hasOwnProperty(columnId)) {\r\n        const columnFilter = columnFilters[columnId];\r\n\r\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\r\n        let columnDef: Column | undefined;\r\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\r\n          columnDef = this._columnDefinitions.find((column: Column) => column.id === columnFilter.columnId);\r\n        } else {\r\n          columnDef = columnFilter.columnDef;\r\n        }\r\n        if (!columnDef) {\r\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\r\n        }\r\n\r\n        const fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\r\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\r\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\r\n        if (typeof fieldSearchValue === 'undefined') {\r\n          fieldSearchValue = '';\r\n        }\r\n\r\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\r\n          throw new Error(`GraphQL filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {model: Filters.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\r\n        }\r\n\r\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\r\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n        let operator = columnFilter.operator || ((matches) ? matches[1] : '');\r\n        searchValue = (!!matches) ? matches[2] : '';\r\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\r\n\r\n        // no need to query if search value is empty\r\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\r\n          continue;\r\n        }\r\n\r\n        // when having more than 1 search term (we need to create a CSV string for GraphQL \"IN\" or \"NOT IN\" filter search)\r\n        if (searchTerms && searchTerms.length > 1) {\r\n          searchValue = searchTerms.join(',');\r\n        } else if (typeof searchValue === 'string') {\r\n          // escaping the search value\r\n          searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\r\n          if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\r\n            operator = (operator === '*' || operator === '*z') ? 'endsWith' : 'startsWith';\r\n          }\r\n        }\r\n\r\n        // if we didn't find an Operator but we have a Filter Type, we should use default Operator\r\n        // multipleSelect is \"IN\", while singleSelect is \"EQ\", else don't map any operator\r\n        if (!operator && columnDef.filter) {\r\n          operator = columnDef.filter.operator;\r\n        }\r\n\r\n        // if we still don't have an operator find the proper Operator to use by it's field type\r\n        if (!operator) {\r\n          operator = mapOperatorByFieldType(columnDef.type || FieldType.string);\r\n        }\r\n\r\n        searchByArray.push({\r\n          field: fieldName,\r\n          operator: mapOperatorType(operator),\r\n          value: searchValue\r\n        });\r\n      }\r\n    }\r\n\r\n    // update the service options with filters for the buildQuery() to work later\r\n    this.updateOptions({ filteringOptions: searchByArray });\r\n  }\r\n\r\n  /**\r\n   * Update the pagination component with it's new page number and size\r\n   * @param newPage\r\n   * @param pageSize\r\n   */\r\n  updatePagination(newPage: number, pageSize: number) {\r\n    this._currentPagination = {\r\n      pageNumber: newPage,\r\n      pageSize\r\n    };\r\n\r\n    let paginationOptions;\r\n    if (this.options.isWithCursor) {\r\n      paginationOptions = {\r\n        first: pageSize\r\n      };\r\n    } else {\r\n      paginationOptions = {\r\n        first: pageSize,\r\n        offset: (newPage - 1) * pageSize\r\n      };\r\n    }\r\n\r\n    this.updateOptions({ paginationOptions });\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect sorters & update backend service sortingOptions\r\n   * @param columnFilters\r\n   */\r\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\r\n    let currentSorters: CurrentSorter[] = [];\r\n    let graphqlSorters: GraphqlSortingOption[] = [];\r\n\r\n    if (!sortColumns && presetSorters) {\r\n      // make the presets the current sorters, also make sure that all direction are in uppercase for GraphQL\r\n      currentSorters = presetSorters;\r\n      currentSorters.forEach((sorter) => sorter.direction = sorter.direction.toUpperCase() as SortDirectionString);\r\n\r\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\r\n      const tmpSorterArray = currentSorters.map((sorter) => {\r\n        const columnDef = this._columnDefinitions.find((column: Column) => column.id === sorter.columnId);\r\n        if (columnDef) {\r\n          graphqlSorters.push({\r\n            field: (columnDef.queryField || columnDef.queryFieldSorter || columnDef.field || columnDef.id) + '',\r\n            direction: sorter.direction\r\n          });\r\n        }\r\n        return {\r\n          columnId: sorter.columnId,\r\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\r\n        };\r\n      });\r\n      this._grid.setSortColumns(tmpSorterArray);\r\n    } else if (sortColumns && !presetSorters) {\r\n      // build the orderBy array, it could be multisort, example\r\n      // orderBy:[{field: lastName, direction: ASC}, {field: firstName, direction: DESC}]\r\n      if (sortColumns && sortColumns.length === 0) {\r\n        graphqlSorters = new Array(this.defaultOrderBy); // when empty, use the default sort\r\n        currentSorters = new Array({ columnId: this.defaultOrderBy.field, direction: this.defaultOrderBy.direction });\r\n      } else {\r\n        if (sortColumns) {\r\n          for (const column of sortColumns) {\r\n            if (column && column.sortCol) {\r\n              currentSorters.push({\r\n                columnId: column.sortCol.id + '',\r\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n              });\r\n\r\n              graphqlSorters.push({\r\n                field: (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '',\r\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // keep current Sorters and update the service options with the new sorting\r\n    this._currentSorters = currentSorters;\r\n    this.updateOptions({ sortingOptions: graphqlSorters });\r\n  }\r\n\r\n  /**\r\n   * A function which takes an input string and removes double quotes only\r\n   * on certain fields are identified as GraphQL enums (except fields with dot notation)\r\n   * For example let say we identified (\"direction:\", \"sort\") as word which are GraphQL enum fields\r\n   * then the result will be:\r\n   * FROM\r\n   * query { users (orderBy:[{field:\"firstName\", direction:\"ASC\"} }]) }\r\n   * TO\r\n   * query { users (orderBy:[{field: firstName, direction: ASC}})}\r\n   *\r\n   * EXCEPTIONS (fields with dot notation \".\" which are inside a \"field:\")\r\n   * these fields will keep double quotes while everything else will be stripped of double quotes\r\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: \"ASC\"} }\r\n   * TO\r\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: ASC}}\r\n   * @param inputStr input string\r\n   * @param enumSearchWords array of enum words to filter\r\n   * @returns outputStr output string\r\n   */\r\n  trimDoubleQuotesOnEnumField(inputStr: string, enumSearchWords: string[], keepArgumentFieldDoubleQuotes: boolean) {\r\n    const patternWordInQuotes = `\\s?((field:\\s*)?\".*?\")`;\r\n    let patternRegex = enumSearchWords.join(patternWordInQuotes + '|');\r\n    patternRegex += patternWordInQuotes; // the last one should also have the pattern but without the pipe \"|\"\r\n    // example with (field: & direction:):  /field:s?(\".*?\")|direction:s?(\".*?\")/\r\n    const reg = new RegExp(patternRegex, 'g');\r\n\r\n    return inputStr.replace(reg, (group1, group2, group3) => {\r\n      // remove double quotes except when the string starts with a \"field:\"\r\n      let removeDoubleQuotes = true;\r\n      if (group1.startsWith('field:') && keepArgumentFieldDoubleQuotes) {\r\n        removeDoubleQuotes = false;\r\n      }\r\n      const rep = removeDoubleQuotes ? group1.replace(/\"/g, '') : group1;\r\n      return rep;\r\n    });\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // -------------------\r\n  /**\r\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\r\n   * @param columnFilters\r\n   */\r\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    const filtersArray: ColumnFilter[] = (typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters;\r\n\r\n    return filtersArray.map((filter) => {\r\n      const columnDef = filter.columnDef;\r\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\r\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\r\n      if (filter.operator) {\r\n        tmpFilter.operator = filter.operator;\r\n      }\r\n      if (Array.isArray(filter.searchTerms)) {\r\n        tmpFilter.searchTerms = filter.searchTerms;\r\n      }\r\n      return tmpFilter;\r\n    });\r\n  }\r\n}\r\n",
    "declare interface StringConstructor {\r\n  allTitleCase(inputStr: string): string;\r\n  format(inputStr: string, args: any): string;\r\n  padZero(length: number): string;\r\n  trim(inputStr: string): string;\r\n  titleCase(inputStr: string): string;\r\n}\r\n\r\n\r\nString.format = function(format: string, args): string {\r\n  // const args = (Array.isArray(arguments[1])) ? arguments[1] : Array.prototype.slice.call(arguments, 1);\r\n\r\n  return format.replace(/{(\\d+)}/g, function (match, number) {\r\n    return (typeof args[number] !== 'undefined') ? args[number] : match;\r\n  });\r\n};\r\n\r\nString.padZero = function (this: string, length: number) {\r\n  let s = this;\r\n  while (s.length < length) {\r\n    s = '0' + s;\r\n  }\r\n  return s;\r\n};\r\n\r\n/**\r\n * Trim any extra white space from the string\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.trim = function(inputStr: string): string {\r\n  return inputStr ? inputStr.replace(/\\s+/g, ' ') : inputStr;\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.allTitleCase = function(inputStr: string): string {\r\n  return inputStr.replace(/\\w\\S*/g, function(outputStr) {\r\n     return outputStr.charAt(0).toUpperCase() + outputStr.substr(1).toLowerCase();\r\n  });\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n*/\r\nString.titleCase = function(inputStr: string): string {\r\n  return inputStr.charAt(0).toUpperCase() + inputStr.slice(1);\r\n};\r\n",
    "import './global-utilities';\r\nimport { CaseType, OdataOption } from './../models/index';\r\n\r\nexport class OdataService {\r\n  _columnFilters: any;\r\n  _defaultSortBy: string;\r\n  _odataOptions: OdataOption;\r\n\r\n  constructor() {\r\n    this._odataOptions = {\r\n      filterQueue: [],\r\n      orderBy: ''\r\n    };\r\n    this._defaultSortBy = '';\r\n    this._columnFilters = {};\r\n  }\r\n\r\n  /*\r\n    * Build the OData query string from all the options provided\r\n    * @return string OData query\r\n    */\r\n  buildQuery(): string {\r\n    this._odataOptions.filterQueue = [];\r\n    const queryTmpArray = [];\r\n\r\n    if (this._odataOptions.top) {\r\n      queryTmpArray.push(`$top=${this._odataOptions.top}`);\r\n    }\r\n    if (this._odataOptions.skip) {\r\n      queryTmpArray.push(`$skip=${this._odataOptions.skip}`);\r\n    }\r\n    if (this._odataOptions.orderBy) {\r\n      let argument = '';\r\n      if (Array.isArray(this._odataOptions.orderBy)) {\r\n        argument = this._odataOptions.orderBy.join(','); // csv, that will form a query example like: $orderby=RoleName asc, Id desc\r\n      } else {\r\n        argument = this._odataOptions.orderBy;\r\n      }\r\n      queryTmpArray.push(`$orderby=${argument}`);\r\n    }\r\n    if (this._odataOptions.filterBy || this._odataOptions.filter) {\r\n      if (this._odataOptions.filter) {\r\n        this._odataOptions.filterQueue = [];\r\n        let filterStr = this._odataOptions.filter;\r\n        if (Array.isArray(this._odataOptions.filter)) {\r\n          filterStr = this._odataOptions.filter.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n        }\r\n        this._odataOptions.filterQueue.push(`(${filterStr})`);\r\n      }\r\n      // filterBy are passed manually by the user, however we will only add it if the column wasn't yet filtered\r\n      if (!!this._odataOptions.filterBy && !!this._odataOptions.filterBy.fieldName && !this._columnFilters[this._odataOptions.filterBy.fieldName.toLowerCase()]) {\r\n        if (this._odataOptions.filterBy.searchTerm !== '') {\r\n          this.saveColumnFilter(this._odataOptions.filterBy.fieldName.toLowerCase(), this._odataOptions.filterBy.searchTerm, this._odataOptions.filterBy.searchTerms);\r\n          this.updateFilterFromListTerms(this._odataOptions.filterBy);\r\n        }\r\n      }\r\n    }\r\n    if (this._odataOptions.filterQueue.length > 0) {\r\n      const query = this._odataOptions.filterQueue.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n      this._odataOptions.filter = query; // overwrite with\r\n      queryTmpArray.push(`$filter=${query}`);\r\n    }\r\n\r\n    // join all the odata functions by a '&'\r\n    return queryTmpArray.join('&');\r\n  }\r\n\r\n  getFilterByColumn(columnName: string): string {\r\n    return (!!this._columnFilters[columnName]) ? this._columnFilters[columnName] : null;\r\n  }\r\n\r\n  getFilterCount(): number {\r\n    return (this._odataOptions.filterQueue) ? this._odataOptions.filterQueue.length : 0;\r\n  }\r\n\r\n  get columnFilters(): any[] {\r\n    return this._columnFilters;\r\n  }\r\n\r\n  get options(): OdataOption {\r\n    return this._odataOptions;\r\n  }\r\n\r\n  set options(options: OdataOption) {\r\n    this._odataOptions = options;\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string) {\r\n    delete this._columnFilters[fieldName];\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: any, searchTerms?: any[]) {\r\n    this._columnFilters[fieldName] = {\r\n      search: searchTerms,\r\n      value\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update the filter by a list of terms usually passed manually by the user as default filters\r\n   * @param filterOptions\r\n   * @returns\r\n   */\r\n  updateFilterFromListTerms(filterOptions: any) {\r\n    // build the filter query\r\n    if (Array.isArray(filterOptions)) {\r\n      filterOptions.forEach((filterOptionObject) => {\r\n        this.updateFilterFromTerm(filterOptionObject);\r\n      });\r\n    } else {\r\n      this.updateFilterFromTerm(filterOptions);\r\n    }\r\n  }\r\n\r\n  updateFilterFromTerm(filterOptions: any) {\r\n    let searchBy = '';\r\n    const tmpSearchByArray = [];\r\n    const fieldName = filterOptions.fieldName;\r\n    const fieldSearchTerms = filterOptions.searchTerms;\r\n    const operator = filterOptions.operator;\r\n\r\n    // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n    if (!!fieldSearchTerms && fieldSearchTerms.length > 0) {\r\n      const tmpSearchTerms = [];\r\n\r\n      if (operator === 'IN') {\r\n        // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n        for (let j = 0, lnj = fieldSearchTerms.length; j < lnj; j++) {\r\n          tmpSearchTerms.push(`${fieldName} eq '${fieldSearchTerms[j]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' or ');\r\n        searchBy = `$(${searchBy})`;\r\n      } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n        // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n        for (let k = 0, lnk = fieldSearchTerms.length; k < lnk; k++) {\r\n          tmpSearchTerms.push(`${fieldName} ne '${fieldSearchTerms[k]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' and ');\r\n        searchBy = `$(${searchBy})`;\r\n      }\r\n    }\r\n\r\n    // push to our temp array and also trim white spaces\r\n    tmpSearchByArray.push(String.trim(searchBy));\r\n\r\n    // add to the filter queue only if it doesn't exist in the queue\r\n    const filter = (tmpSearchByArray.length > 0) ? tmpSearchByArray.join(' and ') : '';\r\n    if (this._odataOptions.filterQueue && this._odataOptions.filterQueue.indexOf(filter) === -1) {\r\n      this._odataOptions.filterQueue.push(filter);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change any OData options that will be used to build the query\r\n   * @param object options\r\n   */\r\n  updateOptions(options: OdataOption) {\r\n    for (const property of Object.keys(options)) {\r\n      if (options.hasOwnProperty(property)) {\r\n        this._odataOptions[property] = options[property]; // replace of the property\r\n      }\r\n\r\n      // we need to keep the defaultSortBy for references whenever the user removes his Sorting\r\n      // then we would revert to the defaultSortBy and the only way is to keep a hard copy here\r\n      if (property === 'orderBy' || property === 'sortBy') {\r\n        let sortBy = options[property];\r\n\r\n        // make sure first char of each orderBy field is capitalize\r\n        if (this._odataOptions.caseType === CaseType.pascalCase) {\r\n          if (Array.isArray(sortBy)) {\r\n            sortBy.forEach((field, index, inputArray) => {\r\n              inputArray[index] = String.titleCase(field);\r\n            });\r\n          } else {\r\n            sortBy = String.titleCase(options[property]);\r\n          }\r\n        }\r\n        this._odataOptions.orderBy = sortBy;\r\n        this._defaultSortBy = sortBy;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
    "import './global-utilities';\r\nimport { parseUtcDate } from './utilities';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  BackendService,\r\n  CaseType,\r\n  Column,\r\n  ColumnFilter,\r\n  ColumnFilters,\r\n  ColumnSort,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  FilterChangedArgs,\r\n  FieldType,\r\n  GridOption,\r\n  OdataOption,\r\n  Pagination,\r\n  PaginationChangedArgs,\r\n  SearchTerm,\r\n  SortChangedArgs,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport { OdataService } from './odata.service';\r\n\r\nlet timer: any;\r\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\r\nconst DEFAULT_ITEMS_PER_PAGE = 25;\r\nconst DEFAULT_PAGE_SIZE = 20;\r\n\r\n@Injectable()\r\nexport class GridOdataService implements BackendService {\r\n  private _currentFilters: CurrentFilter[];\r\n  private _currentPagination: CurrentPagination;\r\n  private _currentSorters: CurrentSorter[];\r\n  private _columnDefinitions: Column[];\r\n  private _grid: any;\r\n  odataService: OdataService;\r\n  options: OdataOption;\r\n  pagination: Pagination | undefined;\r\n  defaultOptions: OdataOption = {\r\n    top: DEFAULT_ITEMS_PER_PAGE,\r\n    orderBy: '',\r\n    caseType: CaseType.pascalCase\r\n  };\r\n\r\n  constructor() {\r\n    this.odataService = new OdataService();\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  buildQuery(): string {\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  init(options: OdataOption, pagination?: Pagination, grid?: any): void {\r\n    this._grid = grid;\r\n    const mergedOptions = { ...this.defaultOptions, ...options };\r\n    if (pagination && pagination.pageSize) {\r\n      mergedOptions.top = pagination.pageSize;\r\n    }\r\n    this.odataService.options = { ...mergedOptions, top: mergedOptions.top || this.defaultOptions.top };\r\n    this.options = this.odataService.options;\r\n    this.pagination = pagination;\r\n\r\n    // save current pagination as Page 1 and page size as \"top\"\r\n    this._currentPagination = {\r\n      pageNumber: 1,\r\n      pageSize: this.odataService.options.top || this.defaultOptions.top\r\n    };\r\n\r\n    if (grid && grid.getColumns) {\r\n      this._columnDefinitions = (options && options.columnDefinitions) || grid.getColumns();\r\n      this._columnDefinitions = this._columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\r\n    }\r\n  }\r\n\r\n  updateOptions(serviceOptions?: OdataOption) {\r\n    this.options = { ...this.options, ...serviceOptions };\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string): void {\r\n    this.odataService.removeColumnFilter(fieldName);\r\n  }\r\n\r\n  /** Get the Filters that are currently used by the grid */\r\n  getCurrentFilters(): CurrentFilter[] {\r\n    return this._currentFilters;\r\n  }\r\n\r\n  /** Get the Pagination that is currently used by the grid */\r\n  getCurrentPagination(): CurrentPagination {\r\n    return this._currentPagination;\r\n  }\r\n\r\n  /** Get the Sorters that are currently used by the grid */\r\n  getCurrentSorters(): CurrentSorter[] {\r\n    return this._currentSorters;\r\n  }\r\n\r\n  /*\r\n   * Reset the pagination options\r\n   */\r\n  resetPaginationOptions() {\r\n    this.odataService.updateOptions({\r\n      skip: 0\r\n    });\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: string, terms?: any[]) {\r\n    this.odataService.saveColumnFilter(fieldName, value, terms);\r\n  }\r\n\r\n  /*\r\n   * FILTERING\r\n   */\r\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\r\n    const serviceOptions: GridOption = args.grid.getOptions();\r\n    const backendApi = serviceOptions.backendServiceApi;\r\n\r\n    if (backendApi === undefined) {\r\n      throw new Error('Something went wrong in the GridOdataService, \"backendServiceApi\" is not initialized');\r\n    }\r\n\r\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\r\n    let debounceTypingDelay = 0;\r\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\r\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\r\n    }\r\n\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    this._currentFilters = this.castFilterToColumnFilter(args.columnFilters);\r\n\r\n    const promise = new Promise<string>((resolve, reject) => {\r\n      // reset Pagination, then build the OData query which we will use in the WebAPI callback\r\n      // wait a minimum user typing inactivity before processing any query\r\n      clearTimeout(timer);\r\n      timer = setTimeout(() => {\r\n        // loop through all columns to inspect filters & set the query\r\n        this.updateFilters(args.columnFilters);\r\n\r\n        this.resetPaginationOptions();\r\n        resolve(this.odataService.buildQuery());\r\n      }, debounceTypingDelay);\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  /*\r\n   * PAGINATION\r\n   */\r\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\r\n    const pageSize = +(args.pageSize || DEFAULT_PAGE_SIZE);\r\n    this.updatePagination(args.newPage, pageSize);\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  /*\r\n   * SORTING\r\n   */\r\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\r\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\r\n\r\n    // loop through all columns to inspect sorters & set the query\r\n    this.updateSorters(sortColumns);\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect filters & update backend service filteringOptions\r\n   * @param columnFilters\r\n   */\r\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset?: boolean) {\r\n    let searchBy = '';\r\n    const searchByArray: string[] = [];\r\n\r\n    // loop through all columns to inspect filters\r\n    for (const columnId in columnFilters) {\r\n      if (columnFilters.hasOwnProperty(columnId)) {\r\n        const columnFilter = columnFilters[columnId];\r\n\r\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\r\n        let columnDef: Column | undefined;\r\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\r\n          columnDef = this._columnDefinitions.find((column: Column) => {\r\n            return column.id === columnFilter.columnId;\r\n          });\r\n        } else {\r\n          columnDef = columnFilter.columnDef;\r\n        }\r\n        if (!columnDef) {\r\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\r\n        }\r\n\r\n        let fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\r\n        const fieldType = columnDef.type || 'string';\r\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\r\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\r\n        if (typeof fieldSearchValue === 'undefined') {\r\n          fieldSearchValue = '';\r\n        }\r\n\r\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\r\n          throw new Error(`ODdata filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {model: Filters.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\r\n        }\r\n\r\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\r\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n        const operator = columnFilter.operator || ((matches) ? matches[1] : '');\r\n        let searchValue = (!!matches) ? matches[2] : '';\r\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\r\n        const bypassOdataQuery = columnFilter.bypassBackendQuery || false;\r\n\r\n        // no need to query if search value is empty\r\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\r\n          this.removeColumnFilter(fieldName);\r\n          continue;\r\n        }\r\n\r\n        // escaping the search value\r\n        searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\r\n        searchValue = encodeURIComponent(searchValue); // encode URI of the final search value\r\n\r\n        // extra query arguments\r\n        if (bypassOdataQuery) {\r\n          // push to our temp array and also trim white spaces\r\n          if (fieldName) {\r\n            this.saveColumnFilter(fieldName, fieldSearchValue, searchTerms);\r\n          }\r\n        } else {\r\n          searchBy = '';\r\n\r\n          // titleCase the fieldName so that it matches the WebApi names\r\n          if (this.odataService.options.caseType === CaseType.pascalCase) {\r\n            fieldName = String.titleCase(fieldName || '');\r\n          }\r\n\r\n          // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n          if (searchTerms && searchTerms.length > 1) {\r\n            const tmpSearchTerms = [];\r\n\r\n            if (operator === 'IN') {\r\n              // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n              for (let j = 0, lnj = searchTerms.length; j < lnj; j++) {\r\n                tmpSearchTerms.push(`${fieldName} eq '${searchTerms[j]}'`);\r\n              }\r\n              searchBy = tmpSearchTerms.join(' or ');\r\n              searchBy = `(${searchBy})`;\r\n            } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n              // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n              for (let k = 0, lnk = searchTerms.length; k < lnk; k++) {\r\n                tmpSearchTerms.push(`${fieldName} ne '${searchTerms[k]}'`);\r\n              }\r\n              searchBy = tmpSearchTerms.join(' and ');\r\n              searchBy = `(${searchBy})`;\r\n            }\r\n          } else if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar !== '') {\r\n            // first/last character is a '*' will be a startsWith or endsWith\r\n            searchBy = (operator === '*' || operator === '*z')\r\n              ? `endswith(${fieldName}, '${searchValue}')`\r\n              : `startswith(${fieldName}, '${searchValue}')`;\r\n          } else if (fieldType === FieldType.date) {\r\n            // date field needs to be UTC and within DateTime function\r\n            const dateFormatted = parseUtcDate(searchValue, true);\r\n            if (dateFormatted) {\r\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} DateTime'${dateFormatted}'`;\r\n            }\r\n          } else if (fieldType === FieldType.string) {\r\n            // string field needs to be in single quotes\r\n            if (operator === '') {\r\n              searchBy = `substringof('${searchValue}', ${fieldName})`;\r\n            } else {\r\n              // searchBy = `substringof('${searchValue}', ${fieldNameCased}) ${this.mapOdataOperator(operator)} true`;\r\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} '${searchValue}'`;\r\n            }\r\n          } else {\r\n            // any other field type (or undefined type)\r\n            searchValue = fieldType === FieldType.number ? searchValue : `'${searchValue}'`;\r\n            searchBy = `${fieldName} ${this.mapOdataOperator(operator)} ${searchValue}`;\r\n          }\r\n\r\n          // push to our temp array and also trim white spaces\r\n          if (searchBy !== '') {\r\n            searchByArray.push(String.trim(searchBy));\r\n            this.saveColumnFilter(fieldName || '', fieldSearchValue, searchTerms);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // update the service options with filters for the buildQuery() to work later\r\n    this.odataService.updateOptions({\r\n      filter: (searchByArray.length > 0) ? searchByArray.join(' and ') : '',\r\n      skip: undefined\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the pagination component with it's new page number and size\r\n   * @param newPage\r\n   * @param pageSize\r\n   */\r\n  updatePagination(newPage: number, pageSize: number) {\r\n    this._currentPagination = {\r\n      pageNumber: newPage,\r\n      pageSize\r\n    };\r\n\r\n    this.odataService.updateOptions({\r\n      top: pageSize,\r\n      skip: (newPage - 1) * pageSize\r\n    });\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect sorters & update backend service orderBy\r\n   * @param columnFilters\r\n   */\r\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\r\n    let sortByArray: any[] = [];\r\n    const sorterArray: CurrentSorter[] = [];\r\n\r\n    if (!sortColumns && presetSorters) {\r\n      // make the presets the current sorters, also make sure that all direction are in lowercase for OData\r\n      sortByArray = presetSorters;\r\n      sortByArray.forEach((sorter) => sorter.direction = sorter.direction.toLowerCase() as SortDirectionString);\r\n\r\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\r\n      const tmpSorterArray = sortByArray.map((sorter) => {\r\n        sorterArray.push({\r\n          columnId: sorter.columnId + '',\r\n          direction: sorter.direction\r\n        });\r\n        return {\r\n          columnId: sorter.columnId,\r\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\r\n        };\r\n      });\r\n      this._grid.setSortColumns(tmpSorterArray);\r\n    } else if (sortColumns && !presetSorters) {\r\n      // build the SortBy string, it could be multisort, example: customerNo asc, purchaserName desc\r\n      if (sortColumns && sortColumns.length === 0) {\r\n        sortByArray = new Array(this.defaultOptions.orderBy); // when empty, use the default sort\r\n      } else {\r\n        if (sortColumns) {\r\n          for (const column of sortColumns) {\r\n            if (column.sortCol) {\r\n              let fieldName = (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '';\r\n              let columnFieldName = (column.sortCol.field || column.sortCol.id) + '';\r\n              if (this.odataService.options.caseType === CaseType.pascalCase) {\r\n                fieldName = String.titleCase(fieldName);\r\n                columnFieldName = String.titleCase(columnFieldName);\r\n              }\r\n\r\n              sorterArray.push({\r\n                columnId: columnFieldName,\r\n                direction: column.sortAsc ? 'asc' : 'desc'\r\n              });\r\n            }\r\n          }\r\n          sortByArray = sorterArray;\r\n        }\r\n      }\r\n    }\r\n\r\n    // transform the sortby array into a CSV string for OData\r\n    sortByArray = sortByArray as CurrentSorter[];\r\n    const csvString = sortByArray.map((sorter) => `${sorter.columnId} ${sorter.direction.toLowerCase()}`).join(',');\r\n    this.odataService.updateOptions({\r\n      orderBy: (this.odataService.options.caseType === CaseType.pascalCase) ? String.titleCase(csvString) : csvString\r\n    });\r\n\r\n    // keep current Sorters and update the service options with the new sorting\r\n    this._currentSorters = sortByArray as CurrentSorter[];\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // -------------------\r\n  /**\r\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\r\n   * @param columnFilters\r\n   */\r\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    const filtersArray: ColumnFilter[] = ((typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters) as CurrentFilter[];\r\n\r\n    return filtersArray.map((filter) => {\r\n      const columnDef = filter.columnDef;\r\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\r\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\r\n      if (filter.operator) {\r\n        tmpFilter.operator = filter.operator;\r\n      }\r\n      if (Array.isArray(filter.searchTerms)) {\r\n        tmpFilter.searchTerms = filter.searchTerms;\r\n      }\r\n      return tmpFilter;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Mapper for mathematical operators (ex.: <= is \"le\", > is \"gt\")\r\n   * @param string operator\r\n   * @returns string map\r\n   */\r\n  private mapOdataOperator(operator: string) {\r\n    let map = '';\r\n    switch (operator) {\r\n      case '<':\r\n        map = 'lt';\r\n        break;\r\n      case '<=':\r\n        map = 'le';\r\n        break;\r\n      case '>':\r\n        map = 'gt';\r\n        break;\r\n      case '>=':\r\n        map = 'ge';\r\n        break;\r\n      case '<>':\r\n      case '!=':\r\n        map = 'ne';\r\n        break;\r\n      case '=':\r\n      case '==':\r\n      default:\r\n        map = 'eq';\r\n        break;\r\n    }\r\n\r\n    return map;\r\n  }\r\n}\r\n",
    "import { OnEventArgs, CellArgs, GridOption } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GridEventService {\n  private _eventHandler: any = new Slick.EventHandler();\n\n  /* OnCellChange Event */\n  attachOnCellChange(grid: any, dataView: any) {\n    // subscribe to this Slickgrid event of onCellChange\n    this._eventHandler.subscribe(grid.onCellChange, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellChange property (a callback function), then run it\n      if (typeof column.onCellChange === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onCellChange\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellChanges.... function\n        column.onCellChange(e, returnedArgs);\n      }\n    });\n  }\n  /* OnClick Event */\n  attachOnClick(grid: any, dataView: any) {\n    this._eventHandler.subscribe(grid.onClick, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellClick property (a callback function), then run it\n      if (typeof column.onCellClick === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onClick\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellClick.... function\n        column.onCellClick(e, returnedArgs);\n      }\n    });\n  }\n\n  dispose() {\n    this._eventHandler.unsubscribeAll();\n  }\n}\n",
    "import {\r\n  Column,\r\n  CurrentColumn,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  GridOption,\r\n  GridState,\r\n  GridStateChange,\r\n  GridStateType\r\n} from './../models/index';\r\nimport { ControlAndPluginService, FilterService, SortService } from './../services/index';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\ndeclare var Slick: any;\r\n\r\nexport class GridStateService {\r\n  private _eventHandler = new Slick.EventHandler();\r\n  private _columns: Column[] = [];\r\n  private _currentColumns: CurrentColumn[] = [];\r\n  private _grid: any;\r\n  private controlAndPluginService: ControlAndPluginService;\r\n  private filterService: FilterService;\r\n  private sortService: SortService;\r\n  private subscriptions: Subscription[] = [];\r\n  onGridStateChanged = new Subject<GridStateChange>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Export Service\r\n   * @param grid\r\n   * @param filterService\r\n   * @param sortService\r\n   * @param dataView\r\n   */\r\n  init(grid: any, controlAndPluginService: ControlAndPluginService, filterService: FilterService, sortService: SortService): void {\r\n    this._grid = grid;\r\n    this.controlAndPluginService = controlAndPluginService;\r\n    this.filterService = filterService;\r\n    this.sortService = sortService;\r\n\r\n    this.subscribeToAllGridChanges(grid);\r\n  }\r\n\r\n  /** Dispose of all the SlickGrid & Aurelia subscriptions */\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    // also unsubscribe all Aurelia Subscriptions\r\n    this.subscriptions.forEach((subscription: Subscription) => {\r\n      if (subscription && subscription.unsubscribe) {\r\n        subscription.unsubscribe();\r\n      }\r\n    });\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  /**\r\n   * Get the current grid state (filters/sorters/pagination)\r\n   * @return grid state\r\n   */\r\n  getCurrentGridState(): GridState {\r\n    const gridState: GridState = {\r\n      columns: this.getCurrentColumns(),\r\n      filters: this.getCurrentFilters(),\r\n      sorters: this.getCurrentSorters()\r\n    };\r\n\r\n    const currentPagination = this.getCurrentPagination();\r\n    if (currentPagination) {\r\n      gridState.pagination = currentPagination;\r\n    }\r\n    return gridState;\r\n  }\r\n\r\n  /**\r\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\r\n   * @return current columns\r\n   */\r\n  getColumns(): Column[] {\r\n    return this._columns || this._grid.getColumns();\r\n  }\r\n\r\n  /**\r\n   * From an array of Grid Column Definitions, get the associated Current Columns\r\n   * @param gridColumns\r\n   */\r\n  getAssociatedCurrentColumns(gridColumns: Column[]): CurrentColumn[] {\r\n    const currentColumns: CurrentColumn[] = [];\r\n\r\n    if (gridColumns && Array.isArray(gridColumns)) {\r\n      gridColumns.forEach((column: Column, index: number) => {\r\n        if (column && column.id) {\r\n          currentColumns.push({\r\n            columnId: column.id as string,\r\n            cssClass: column.cssClass || '',\r\n            headerCssClass: column.headerCssClass || '',\r\n            width: column.width || 0\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this._currentColumns = currentColumns;\r\n    return currentColumns;\r\n  }\r\n\r\n  /**\r\n   * From an array of Current Columns, get the associated Grid Column Definitions\r\n   * @param grid\r\n   * @param currentColumns\r\n   */\r\n  getAssociatedGridColumns(grid: any, currentColumns: CurrentColumn[]): Column[] {\r\n    const columns: Column[] = [];\r\n    const gridColumns: Column[] = grid.getColumns();\r\n\r\n    if (currentColumns && Array.isArray(currentColumns)) {\r\n      currentColumns.forEach((currentColumn: CurrentColumn, index: number) => {\r\n        const gridColumn: Column = gridColumns.find((c: Column) => c.id === currentColumn.columnId);\r\n        if (gridColumn && gridColumn.id) {\r\n          columns.push({\r\n            ...gridColumn,\r\n            cssClass: currentColumn.cssClass,\r\n            headerCssClass: currentColumn.headerCssClass,\r\n            width: currentColumn.width\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this._columns = columns;\r\n    return columns;\r\n  }\r\n\r\n  /**\r\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\r\n   * @return current columns\r\n   */\r\n  getCurrentColumns(): CurrentColumn[] {\r\n    let currentColumns: CurrentColumn[] = [];\r\n    if (this._currentColumns && Array.isArray(this._currentColumns) && this._currentColumns.length > 0) {\r\n      currentColumns = this._currentColumns;\r\n    } else {\r\n      currentColumns = this.getAssociatedCurrentColumns(this._grid.getColumns());\r\n    }\r\n\r\n    return currentColumns;\r\n  }\r\n\r\n  /**\r\n   * Get the Filters (and their state, columnId, searchTerm(s)) that are currently applied in the grid\r\n   * @return current filters\r\n   */\r\n  getCurrentFilters(): CurrentFilter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentFilters) {\r\n        return backendService.getCurrentFilters() as CurrentFilter[];\r\n      }\r\n    } else if (this.filterService && this.filterService.getCurrentLocalFilters) {\r\n      return this.filterService.getCurrentLocalFilters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get current Pagination (and it's state, pageNumber, pageSize) that are currently applied in the grid\r\n   * @return current pagination state\r\n   */\r\n  getCurrentPagination(): CurrentPagination | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentPagination) {\r\n        return backendService.getCurrentPagination();\r\n      }\r\n    } else {\r\n      // TODO implement this whenever local pagination gets implemented\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get the current Sorters (and their state, columnId, direction) that are currently applied in the grid\r\n   * @return current sorters\r\n   */\r\n  getCurrentSorters(): CurrentSorter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        return backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n    } else if (this.sortService && this.sortService.getCurrentLocalSorters) {\r\n      return this.sortService.getCurrentLocalSorters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Hook a SlickGrid Extension Event to a Grid State change event\r\n   * @param extension name\r\n   * @param grid\r\n   */\r\n  hookExtensionEventToGridStateChange(extensionName: string, eventName: string) {\r\n    const extension = this.controlAndPluginService && this.controlAndPluginService.getExtensionByName(extensionName);\r\n\r\n    if (extension && extension.service && extension.service[eventName] && extension.service[eventName].subscribe) {\r\n      this._eventHandler.subscribe(extension.service[eventName], (e: Event, args: any) => {\r\n        const columns: Column[] = args && args.columns;\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hook a Grid Event to a Grid State change event\r\n   * @param event name\r\n   * @param grid\r\n   */\r\n  hookSlickGridEventToGridStateChange(eventName: string, grid: any) {\r\n    if (grid && grid[eventName] && grid[eventName].subscribe) {\r\n      this._eventHandler.subscribe(grid[eventName], (e: Event, args: any) => {\r\n        const columns: Column[] = grid.getColumns();\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      });\r\n    }\r\n  }\r\n\r\n  resetColumns(columnDefinitions?: Column[]) {\r\n    const columns: Column[] = columnDefinitions || this._columns;\r\n    const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n    this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n  }\r\n\r\n  /**\r\n   * Subscribe to all necessary SlickGrid or Service Events that deals with a Grid change,\r\n   * when triggered, we will publish a Grid State Event with current Grid State\r\n   */\r\n  subscribeToAllGridChanges(grid: any) {\r\n    // Subscribe to Event Emitter of Filter changed\r\n    this.subscriptions.push(\r\n      this.filterService.onFilterChanged.subscribe((currentFilters: CurrentFilter[]) => {\r\n        this.onGridStateChanged.next({ change: { newValues: currentFilters, type: GridStateType.filter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n    // Subscribe to Event Emitter of Filter cleared\r\n      this.subscriptions.push(\r\n        this.filterService.onFilterCleared.subscribe(() => {\r\n          this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.filter }, gridState: this.getCurrentGridState() });\r\n        })\r\n      );\r\n\r\n    // Subscribe to Event Emitter of Sort changed\r\n    this.subscriptions.push(\r\n      this.sortService.onSortChanged.subscribe((currentSorters: CurrentSorter[]) => {\r\n        this.onGridStateChanged.next({ change: { newValues: currentSorters, type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to Event Emitter of Sort cleared\r\n    this.subscriptions.push(\r\n      this.sortService.onSortCleared.subscribe(() => {\r\n        this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to ColumnPicker and/or GridMenu for show/hide Columns visibility changes\r\n    this.hookExtensionEventToGridStateChange('ColumnPicker', 'onColumnsChanged');\r\n    this.hookExtensionEventToGridStateChange('GridMenu', 'onColumnsChanged');\r\n\r\n    // subscribe to Column Resize & Reordering\r\n    this.hookSlickGridEventToGridStateChange('onColumnsReordered', grid);\r\n    this.hookSlickGridEventToGridStateChange('onColumnsResized', grid);\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport { Injectable } from '@angular/core';\r\nimport { CellArgs, Column, GridOption, OnEventArgs } from './../models/index';\r\nimport { ControlAndPluginService } from './controlAndPlugin.service';\r\nimport { FilterService } from './filter.service';\r\nimport { GridStateService } from './gridState.service';\r\nimport { SortService } from './sort.service';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\ndeclare var Slick: any;\r\n\r\n@Injectable()\r\nexport class GridService {\r\n  private _grid: any;\r\n  private _dataView: any;\r\n\r\n  constructor(private controlAndPluginService: ControlAndPluginService, private filterService: FilterService, private gridStateService: GridStateService, private sortService: SortService, private translate: TranslateService) { }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  init(grid: any, dataView: any): void {\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n  }\r\n\r\n  /**\r\n   * From a SlickGrid Event triggered get the Column Definition and Item Data Context\r\n   *\r\n   * For example the SlickGrid onClick will return cell arguments when subscribing to it.\r\n   * From these cellArgs, we want to get the Column Definition and Item Data\r\n   * @param cell event args\r\n   * @return object with columnDef and dataContext\r\n   */\r\n  getColumnFromEventArguments(args: CellArgs): OnEventArgs {\r\n    if (!args || !args.grid || !args.grid.getColumns || !args.grid.getDataItem) {\r\n      throw new Error('To get the column definition and data, we need to have these arguments passed as objects (row, cell, grid)');\r\n    }\r\n\r\n    return {\r\n      row: args.row,\r\n      cell: args.cell,\r\n      columnDef: args.grid.getColumns()[args.cell],\r\n      dataContext: args.grid.getDataItem(args.row),\r\n      dataView: this._dataView,\r\n      grid: this._grid,\r\n      gridDefinition: this._gridOptions\r\n    };\r\n  }\r\n\r\n  /** Get data item by it's row index number */\r\n  getDataItemByRowNumber(rowNumber: number) {\r\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object');\r\n    }\r\n    return this._grid.getDataItem(rowNumber);\r\n  }\r\n\r\n  /** Chain the item Metadata with our implementation of Metadata at given row index */\r\n  getItemRowMetadata(previousItemMetadata: any) {\r\n    return (rowNumber: number) => {\r\n      const item = this._dataView.getItem(rowNumber);\r\n      let meta = {\r\n        cssClasses: ''\r\n      };\r\n      if (typeof previousItemMetadata === 'object' && !$.isEmptyObject(previousItemMetadata)) {\r\n        meta = previousItemMetadata(rowNumber);\r\n      }\r\n\r\n      if (item && item._dirty) {\r\n        meta.cssClasses = (meta.cssClasses || '') + ' dirty';\r\n      }\r\n      if (item && item.rowClass) {\r\n        meta.cssClasses += ` ${item.rowClass}`;\r\n        meta.cssClasses += ` row${rowNumber}`;\r\n      }\r\n\r\n      return meta;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Highlight then fade a row for x seconds.\r\n   * The implementation follows this SO answer: https://stackoverflow.com/a/19985148/1212166\r\n   * @param rowNumber\r\n   * @param fadeDelay\r\n   */\r\n  highlightRow(rowNumber: number, fadeDelay: number = 1500) {\r\n    // create a SelectionModel if there's not one yet\r\n    if (!this._grid.getSelectionModel()) {\r\n      const rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\r\n      this._grid.setSelectionModel(rowSelectionPlugin);\r\n    }\r\n\r\n    this._grid.setSelectedRows([rowNumber]);\r\n    this._dataView.getItemMetadata = this.getItemRowMetadata(this._dataView.getItemMetadata);\r\n\r\n    const item = this._dataView.getItem(rowNumber);\r\n    if (item && item.id) {\r\n      item.rowClass = 'highlight';\r\n      this._dataView.updateItem(item.id, item);\r\n      const gridOptions = this._grid.getOptions() as GridOption;\r\n\r\n      // highlight the row for a user defined timeout\r\n      $(`#${gridOptions.gridId}`)\r\n          .find(`.highlight.row${rowNumber}`)\r\n          .first();\r\n\r\n      // delete the row's CSS that was attached for highlighting\r\n      setTimeout(() => {\r\n        if (item && item.id) {\r\n          delete item.rowClass;\r\n          const gridIdx = this._dataView.getIdxById(item.id);\r\n          if (gridIdx !== undefined) {\r\n            this._dataView.updateItem(item.id, item);\r\n          }\r\n        }\r\n      }, fadeDelay + 10);\r\n    }\r\n  }\r\n\r\n  /** Get the Data Item from a grid row index */\r\n  getDataItemByRowIndex(index: number) {\r\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object');\r\n    }\r\n\r\n    return this._grid.getDataItem(index);\r\n  }\r\n\r\n  /** Get the Data Item from an array of grid row indexes */\r\n  getDataItemByRowIndexes(indexes: number[]) {\r\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object');\r\n    }\r\n\r\n    const dataItems = [];\r\n\r\n    if (Array.isArray(indexes)) {\r\n      indexes.forEach((idx) => {\r\n        dataItems.push(this._grid.getDataItem(idx));\r\n      });\r\n    }\r\n\r\n    return dataItems;\r\n  }\r\n\r\n  /** Get the currently selected row indexes */\r\n  getSelectedRows() {\r\n    return this._grid.getSelectedRows();\r\n  }\r\n\r\n  /** Get the currently selected rows item data */\r\n  getSelectedRowsDataItem() {\r\n    if (!this._grid || typeof this._grid.getSelectedRows !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object');\r\n    }\r\n\r\n    const selectedRowIndexes = this._grid.getSelectedRows();\r\n    return this.getDataItemByRowIndexes(selectedRowIndexes);\r\n  }\r\n\r\n  /** Select the selected row by a row index */\r\n  setSelectedRow(rowIndex: number) {\r\n    this._grid.setSelectedRows([rowIndex]);\r\n  }\r\n\r\n  /** Set selected rows with provided array of row indexes */\r\n  setSelectedRows(rowIndexes: number[]) {\r\n    this._grid.setSelectedRows(rowIndexes);\r\n  }\r\n\r\n  /** Re-Render the Grid */\r\n  renderGrid() {\r\n    if (this._grid && typeof this._grid.invalidate === 'function') {\r\n      this._grid.invalidate();\r\n      this._grid.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset the grid to it's original state (clear any filters, sorting & pagination if exists) .\r\n   * The column definitions could be passed as argument to reset (this can be used after a Grid State reset)\r\n   * The reset will clear the Filters & Sort, then will reset the Columns to their original state\r\n   */\r\n  resetGrid(columnDefinitions?: Column[]) {\r\n    // reset columns to original states & refresh the grid\r\n    if (this._grid && this._dataView) {\r\n      const originalColumns = this.controlAndPluginService.getAllColumns();\r\n      // const originalColumns = columnDefinitions || this._columnDefinitions;\r\n      if (Array.isArray(originalColumns) && originalColumns.length > 0) {\r\n        // set the grid columns to it's original column definitions\r\n        this._grid.setColumns(originalColumns);\r\n        this._dataView.refresh();\r\n        this._grid.autosizeColumns();\r\n        this.gridStateService.resetColumns(columnDefinitions);\r\n      }\r\n    }\r\n    if (this.filterService && this.filterService.clearFilters) {\r\n      this.filterService.clearFilters();\r\n    }\r\n    if (this.sortService && this.sortService.clearSorting) {\r\n      this.sortService.clearSorting();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add an item (data item) to the datagrid, by default it will highlight (flashing) the inserted row but we can disable it too\r\n   * @param object dataItem: item object holding all properties of that row\r\n   * @param shouldHighlightRow do we want to highlight the row after adding item\r\n   */\r\n  addItemToDatagrid(item: any, shouldHighlightRow = true) {\r\n    if (!this._grid || !this._gridOptions || !this._dataView) {\r\n      throw new Error('We could not find SlickGrid Grid, DataView objects');\r\n    }\r\n\r\n    const row = 0;\r\n    this._dataView.insertItem(row, item);\r\n    this._grid.scrollRowIntoView(0); // scroll to row 0\r\n\r\n    // highlight the row we just added, if defined\r\n    if (shouldHighlightRow) {\r\n      this.highlightRow(0, 1500);\r\n    }\r\n\r\n    // refresh dataview & grid\r\n    this._dataView.refresh();\r\n  }\r\n\r\n  /**\r\n   * Add item array (data item) to the datagrid, by default it will highlight (flashing) the inserted row but we can disable it too\r\n   * @param dataItem array: item object holding all properties of that row\r\n   * @param shouldHighlightRow do we want to highlight the row after adding item\r\n   */\r\n  addItemsToDatagrid(items: any[], shouldHighlightRow = true) {\r\n    if (Array.isArray(items)) {\r\n      items.forEach((item: any) => this.addItemToDatagrid(item, shouldHighlightRow));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete an existing item from the datagrid (dataView)\r\n   * @param object item: item object holding all properties of that row\r\n   */\r\n  deleteDataGridItem(item: any) {\r\n    if (!item || !item.hasOwnProperty('id')) {\r\n      throw new Error(`deleteDataGridItem() requires an item object which includes the \"id\" property`);\r\n    }\r\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\r\n    this.deleteDataGridItemById(itemId);\r\n  }\r\n\r\n  /**\r\n   * Delete an existing item from the datagrid (dataView) by it's id\r\n   * @param itemId: item unique id\r\n   */\r\n  deleteDataGridItemById(itemId: string | number) {\r\n    if (itemId === undefined) {\r\n      throw new Error(`Cannot delete a row without a valid \"id\"`);\r\n    }\r\n    if (this._dataView.getRowById(itemId) === undefined) {\r\n      throw new Error(`Could not find the item in the grid by it's associated \"id\"`);\r\n    }\r\n\r\n    // delete the item from the dataView\r\n    this._dataView.deleteItem(itemId);\r\n    this._dataView.refresh();\r\n  }\r\n\r\n  /**\r\n   * Update an existing item with new properties inside the datagrid\r\n   * @param object item: item object holding all properties of that row\r\n   */\r\n  updateDataGridItem(item: any) {\r\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\r\n\r\n    if (itemId === undefined) {\r\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\r\n    }\r\n\r\n    this.updateDataGridItemById(itemId, item);\r\n  }\r\n\r\n  /**\r\n   * Update an existing item in the datagrid by it's id and new properties\r\n   * @param itemId: item unique id\r\n   * @param object item: item object holding all properties of that row\r\n   * @param shouldHighlightRow do we want to highlight the row after update\r\n   */\r\n  updateDataGridItemById(itemId: number | string, item: any, shouldHighlightRow = true) {\r\n    if (itemId === undefined) {\r\n      throw new Error(`Cannot update a row without a valid \"id\"`);\r\n    }\r\n    const row = this._dataView.getRowById(itemId);\r\n\r\n    if (!item || row === undefined) {\r\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\r\n    }\r\n\r\n    const gridIdx = this._dataView.getIdxById(itemId);\r\n    if (gridIdx !== undefined) {\r\n      // Update the item itself inside the dataView\r\n      this._dataView.updateItem(itemId, item);\r\n\r\n      // highlight the row we just updated, if defined\r\n      if (shouldHighlightRow) {\r\n        this.highlightRow(row, 1500);\r\n      }\r\n\r\n      // refresh dataview & grid\r\n      this._dataView.refresh();\r\n    }\r\n  }\r\n}\r\n",
    "\nimport {\n  Column,\n  GridOption\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare let $: any;\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GroupingAndColspanService {\n  private _eventHandler = new Slick.EventHandler();\n  private _dataView: any;\n  private _grid: any;\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any, dataView: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n\n    if (grid && this._gridOptions) {\n      // When dealing with Pre-Header Grouping colspan, we need to re-create the pre-header in multiple occasions\n      // for all these occasions, we have to trigger a re-create\n      if (this._gridOptions.createPreHeaderPanel) {\n        this._eventHandler.subscribe(grid.onSort, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(grid.onColumnsResized, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(dataView.onRowCountChanged, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n\n        // also not sure why at this point, but it seems that I need to call the 1st create in a delayed execution\n        // probably some kind of timing issues and delaying it until the grid is fully ready does help\n        setTimeout(() => {\n          this.createPreHeaderRowGroupingTitle();\n        }, 50);\n      }\n    }\n  }\n\n  dispose() {\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n  }\n\n  createPreHeaderRowGroupingTitle() {\n    const $preHeaderPanel = $(this._grid.getPreHeaderPanel())\n      .empty()\n      .addClass('slick-header-columns')\n      .css('left', '-1000px')\n      .width(this._grid.getHeadersWidth());\n    $preHeaderPanel.parent().addClass('slick-header');\n    const headerColumnWidthDiff = this._grid.getHeaderColumnWidthDiff();\n    let m;\n    let header;\n    let lastColumnGroup = '';\n    let widthTotal = 0;\n\n    for (let i = 0; i < this._columnDefinitions.length; i++) {\n      m = this._columnDefinitions[i];\n      if (lastColumnGroup === m.columnGroup && i > 0) {\n        widthTotal += m.width;\n        header.width(widthTotal - headerColumnWidthDiff);\n      } else {\n        widthTotal = m.width;\n        header = $(`<div class=\"ui-state-default slick-header-column\" />`)\n          .html(`<span class=\"slick-column-name\">${m.columnGroup || ''}</span>`)\n          .width(m.width - headerColumnWidthDiff)\n          .appendTo($preHeaderPanel);\n      }\n      lastColumnGroup = m.columnGroup;\n    }\n  }\n}\n",
    "import { Column, GridOption } from './../models/index';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n// global constants, height/width are in pixels\r\nconst DATAGRID_MIN_HEIGHT = 180;\r\nconst DATAGRID_MIN_WIDTH = 300;\r\nconst DATAGRID_BOTTOM_PADDING = 20;\r\nconst DATAGRID_PAGINATION_HEIGHT = 35;\r\nlet timer: any;\r\n\r\nexport interface GridDimension {\r\n  height: number;\r\n  width: number;\r\n  heightWithPagination?: number;\r\n}\r\n\r\nexport class ResizerService {\r\n  private _grid: any;\r\n  private _lastDimensions: GridDimension;\r\n  onGridBeforeResize = new Subject<boolean>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  private get _gridUid(): string {\r\n    return (this._grid && this._grid.getUID) ? this._grid.getUID() : this._gridOptions.gridId;\r\n  }\r\n\r\n  init(grid: any): void {\r\n    this._grid = grid;\r\n  }\r\n\r\n  /** Attach an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space\r\n   * Options: we could also provide a % factor to resize on each height/width independently\r\n   */\r\n  attachAutoResizeDataGrid(newSizes?: GridDimension) {\r\n    // if we can't find the grid to resize, return without attaching anything\r\n    const gridDomElm = $(`#${this._gridOptions && this._gridOptions.gridId ? this._gridOptions.gridId : 'grid1'}`);\r\n    if (gridDomElm === undefined || gridDomElm.offset() === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // -- 1st resize the datagrid size at first load (we need this because the .on event is not triggered on first load)\r\n    this.resizeGrid(0, newSizes);\r\n\r\n    // -- 2nd attach a trigger on the Window DOM element, so that it happens also when resizing after first load\r\n    // -- attach auto-resize to Window object only if it exist\r\n    $(window).on(`resize.grid.${this._gridUid}`, () => {\r\n      this.onGridBeforeResize.next(true);\r\n      // for some yet unknown reason, calling the resize twice removes any stuttering/flickering when changing the height and makes it much smoother\r\n      this.resizeGrid(0, newSizes);\r\n      this.resizeGrid(0, newSizes);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation\r\n   * object gridOptions\r\n   */\r\n  calculateGridNewDimensions(gridOptions: GridOption): any {\r\n    const gridDomElm = $(`#${gridOptions.gridId}`);\r\n    const containerElm = (gridOptions.autoResize && gridOptions.autoResize.containerId) ? $(`#${gridOptions.autoResize.containerId}`) : $(`#${gridOptions.gridContainerId}`);\r\n    const windowElm = $(window);\r\n    if (windowElm === undefined || containerElm === undefined || gridDomElm === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // calculate bottom padding\r\n    // if using pagination, we need to add the pagination height to this bottom padding\r\n    let bottomPadding = (gridOptions.autoResize && gridOptions.autoResize.bottomPadding) ? gridOptions.autoResize.bottomPadding : DATAGRID_BOTTOM_PADDING;\r\n    if (bottomPadding && (gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\r\n      bottomPadding += DATAGRID_PAGINATION_HEIGHT;\r\n    }\r\n\r\n    const gridHeight = windowElm.height() || 0;\r\n    const coordOffsetTop = gridDomElm.offset();\r\n    const gridOffsetTop = (coordOffsetTop !== undefined) ? coordOffsetTop.top : 0;\r\n    const availableHeight = gridHeight - gridOffsetTop - bottomPadding;\r\n    const availableWidth = containerElm.width() || 0;\r\n    const minHeight = (gridOptions.autoResize && gridOptions.autoResize.minHeight < 0) ? gridOptions.autoResize.minHeight : DATAGRID_MIN_HEIGHT;\r\n    const minWidth = (gridOptions.autoResize && gridOptions.autoResize.minWidth < 0) ? gridOptions.autoResize.minWidth : DATAGRID_MIN_WIDTH;\r\n\r\n    let newHeight = availableHeight;\r\n    let newWidth = (gridOptions.autoResize && gridOptions.autoResize.sidePadding) ? availableWidth - gridOptions.autoResize.sidePadding : availableWidth;\r\n    if (newHeight < minHeight) {\r\n      newHeight = minHeight;\r\n    }\r\n    if (newWidth < minWidth) {\r\n      newWidth = minWidth;\r\n    }\r\n\r\n    return {\r\n      height: newHeight,\r\n      width: newWidth\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Dispose function when element is destroyed\r\n   */\r\n  dispose() {\r\n    $(window).off(`resize.grid.${this._gridUid}`);\r\n  }\r\n\r\n  getLastResizeDimensions(): GridDimension {\r\n    return this._lastDimensions;\r\n  }\r\n\r\n  /** Resize the datagrid to fit the browser height & width */\r\n  resizeGrid(delay?: number, newSizes?: GridDimension): void {\r\n    if (!this._grid || !this._gridOptions) {\r\n      throw new Error(`\r\n      Angular-Slickgrid resizer requires a valid Grid object and Grid Options defined.\r\n      You can fix this by setting your gridOption to use \"enableAutoResize\" or create an instance of the ResizerService by calling attachAutoResizeDataGrid()`);\r\n    }\r\n\r\n    // because of the javascript async nature, we might want to delay the resize a little bit\r\n    delay = delay || 0;\r\n\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      // calculate the available sizes with minimum height defined as a constant\r\n      const availableDimensions = this.calculateGridNewDimensions(this._gridOptions);\r\n      const gridElm = $(`#${this._gridOptions.gridId}`) || {};\r\n      const gridContainerElm = $(`#${this._gridOptions.gridContainerId}`) || {};\r\n\r\n      if ((newSizes || availableDimensions) && gridElm.length > 0) {\r\n        // get the new sizes, if new sizes are passed (not 0), we will use them else use available space\r\n        // basically if user passes 1 of the dimension, let say he passes just the height,\r\n        // we will use the height as a fixed height but the width will be resized by it's available space\r\n        const newHeight = (newSizes && newSizes.height) ? newSizes.height : availableDimensions.height;\r\n        const newWidth = (newSizes && newSizes.width) ? newSizes.width : availableDimensions.width;\r\n\r\n        // apply these new height/width to the datagrid\r\n        gridElm.height(newHeight);\r\n        gridElm.width(newWidth);\r\n        gridContainerElm.height(newHeight);\r\n        gridContainerElm.width(newWidth);\r\n\r\n        // keep last resized dimensions\r\n        this._lastDimensions = {\r\n          height: newHeight,\r\n          width: newWidth\r\n        };\r\n        if ((this._gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\r\n          this._lastDimensions.heightWithPagination = newHeight + DATAGRID_PAGINATION_HEIGHT;\r\n        }\r\n\r\n        // resize the slickgrid canvas on all browser except some IE versions\r\n        // exclude all IE below IE11\r\n        // IE11 wants to be a better standard (W3C) follower (finally) they even changed their appName output to also have 'Netscape'\r\n        if (new RegExp('MSIE [6-8]').exec(navigator.userAgent) === null && this._grid) {\r\n          this._grid.resizeCanvas();\r\n        }\r\n\r\n        // also call the grid auto-size columns so that it takes available when going bigger\r\n        this._grid.autosizeColumns();\r\n      }\r\n    }, delay);\r\n  }\r\n}\r\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class AvgAggregator implements Aggregator {\n  private _count: number;\n  private _nonNullCount: number;\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._count = 0;\n    this._nonNullCount = 0;\n    this._sum = 0;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    this._count++;\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._nonNullCount++;\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.avg) {\n      groupTotals.avg = {};\n    }\n    if (this._nonNullCount !== 0) {\n      groupTotals.avg[this._field] = this._sum / this._nonNullCount;\n    }\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MinAggregator implements Aggregator {\n  private _min: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._min = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._min == null || val < this._min) {\n        this._min = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.min) {\n      groupTotals.min = {};\n    }\n    groupTotals.min[this._field] = this._min;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MaxAggregator implements Aggregator {\n  private _max: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._max = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._max == null || val > this._max) {\n        this._max = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.max) {\n      groupTotals.max = {};\n    }\n    groupTotals.max[this._field] = this._max;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class SumAggregator implements Aggregator {\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._sum = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.sum) {\n      groupTotals.sum = {};\n    }\n    groupTotals.sum[this._field] = this._sum;\n  }\n}\n",
    "import { AvgAggregator } from './avgAggregator';\nimport { MinAggregator } from './minAggregator';\nimport { MaxAggregator } from './maxAggregator';\nimport { SumAggregator } from './sumAggregator';\n\n/** Provides a list of different Aggregators for the Group Formatter */\nexport const Aggregators = {\n  Avg: AvgAggregator,\n  Min: MinAggregator,\n  Max: MaxAggregator,\n  Sum: SumAggregator\n};\n",
    "import { Column, Editor, EditorValidator, EditorValidatorOutput } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class CheckboxEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: boolean;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"checkbox\" value=\"true\" class=\"editor-checkbox\" />`);\r\n    this.$input.appendTo(this.args.container);\r\n    this.$input.focus();\r\n  }\r\n\r\n  destroy(): void {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus(): void {\r\n    this.$input.focus();\r\n  }\r\n\r\n  hide() {\r\n    this.$input.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$input.show();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = !!item[this.columnDef.field];\r\n    if (this.defaultValue) {\r\n      this.$input.prop('checked', true);\r\n    } else {\r\n      this.$input.prop('checked', false);\r\n    }\r\n  }\r\n\r\n  preClick() {\r\n    this.$input.prop('checked', !this.$input.prop('checked'));\r\n  }\r\n\r\n  serializeValue(): boolean {\r\n    return this.$input.prop('checked');\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (this.serializeValue() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, FieldType, GridOption } from './../models/index';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a date picker editor using Flatpickr\r\n * https://chmln.github.io/flatpickr\r\n */\r\nexport class DateEditor implements Editor {\r\n  $input: any;\r\n  flatInstance: any;\r\n  defaultDate: string;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    if (this.args && this.args.column) {\r\n      const gridOptions = this.args.grid.getOptions() as GridOption;\r\n      this.defaultDate = (this.args.item) ? this.args.item[this.args.column.field] : null;\r\n      const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\r\n      const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || FieldType.dateUtc);\r\n      let currentLocale = this.getCurrentLocale(this.columnDef, gridOptions);\r\n      if (currentLocale.length > 2) {\r\n        currentLocale = currentLocale.substring(0, 2);\r\n      }\r\n\r\n      const pickerOptions: any = {\r\n        defaultDate: this.defaultDate,\r\n        altInput: true,\r\n        altFormat: inputFormat,\r\n        dateFormat: outputFormat,\r\n        closeOnSelect: false,\r\n        locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n        onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n          this.save();\r\n        },\r\n      };\r\n\r\n\r\n      this.$input = $(`<input type=\"text\" data-defaultDate=\"${this.defaultDate}\" class=\"editor-text flatpickr\" />`);\r\n      this.$input.appendTo(this.args.container);\r\n      this.flatInstance = (this.$input[0] && typeof this.$input[0].flatpickr === 'function') ? this.$input[0].flatpickr(pickerOptions) : null;\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  getCurrentLocale(columnDef: Column, gridOptions: GridOption) {\r\n    const options = gridOptions || columnDef.params || {};\r\n    if (options.i18n && options.i18n instanceof TranslateService) {\r\n      return options.i18n.currentLang;\r\n    }\r\n\r\n    return 'en';\r\n  }\r\n\r\n  loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  destroy() {\r\n    this.hide();\r\n    // this.flatInstance.destroy();\r\n    this.$input.remove();\r\n  }\r\n\r\n  show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultDate = item[this.args.column.field];\r\n    this.flatInstance.setDate(item[this.args.column.field]);\r\n  }\r\n\r\n  serializeValue() {\r\n    const domValue: string = this.$input.val();\r\n\r\n    if (!domValue) {\r\n      return '';\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n    const value = moment(domValue).format(outputFormat);\r\n\r\n    return value;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    if (!state) {\r\n      return;\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n    item[this.args.column.field] = moment(state, outputFormat).toDate();\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultDate == null)) && (this.$input.val() !== this.defaultDate);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Constants } from '../constants';\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst defaultDecimalPlaces = 0;\n\n/*\n * An example of a 'detached' editor.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class FloatEditor implements Editor {\n  $input: any;\n  defaultValue: any;\n\n  constructor(private args: any) {\n    this.init();\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args && this.args.column || {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): any {\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\n  }\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator {\n    return this.columnEditor.validator || this.columnDef.validator;\n  }\n\n  init(): void {\n    this.$input = $(`<input type=\"number\" class=\"editor-text\" step=\"${this.getInputDecimalSteps()}\" />`)\n      .appendTo(this.args.container)\n      .on('keydown.nav', (e) => {\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\n          e.stopImmediatePropagation();\n        }\n      });\n\n    setTimeout(() => {\n      this.$input.focus().select();\n    }, 50);\n  }\n\n  destroy() {\n    this.$input.remove();\n  }\n\n  focus() {\n    this.$input.focus();\n  }\n\n  getColumnEditor() {\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\n  }\n\n  getDecimalPlaces(): number {\n    // returns the number of fixed decimal places or null\n    let rtn = (this.columnEditor.params && this.columnEditor.params.hasOwnProperty('decimalPlaces')) ? this.columnEditor.params.decimalPlaces : undefined;\n\n    if (rtn === undefined) {\n      rtn = defaultDecimalPlaces;\n    }\n    return (!rtn && rtn !== 0 ? null : rtn);\n  }\n\n  getInputDecimalSteps(): string {\n    const decimals = this.getDecimalPlaces();\n    let zeroString = '';\n    for (let i = 1; i < decimals; i++) {\n      zeroString += '0';\n    }\n\n    if (decimals > 0) {\n      return `0.${zeroString}1`;\n    }\n    return '1';\n  }\n\n  loadValue(item: any) {\n    this.defaultValue = item[this.columnDef.field];\n\n    const decPlaces = this.getDecimalPlaces();\n    if (decPlaces !== null\n      && (this.defaultValue || this.defaultValue === 0)\n      && this.defaultValue.toFixed) {\n      this.defaultValue = this.defaultValue.toFixed(decPlaces);\n    }\n\n    this.$input.val(this.defaultValue);\n    this.$input[0].defaultValue = this.defaultValue;\n    this.$input.select();\n  }\n\n  serializeValue() {\n    let rtn = parseFloat(this.$input.val()) || 0;\n    const decPlaces = this.getDecimalPlaces();\n    if (decPlaces !== null\n      && (rtn || rtn === 0)\n      && rtn.toFixed) {\n      rtn = parseFloat(rtn.toFixed(decPlaces));\n    }\n\n    return rtn;\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.columnDef.field] = state;\n  }\n\n  isValueChanged() {\n    const elmValue = this.$input.val();\n    return (!(elmValue === '' && this.defaultValue === null)) && (elmValue !== this.defaultValue);\n  }\n\n  validate(): EditorValidatorOutput {\n    const elmValue = this.$input.val();\n    const decPlaces = this.getDecimalPlaces();\n    const minValue = this.columnEditor.minValue;\n    const maxValue = this.columnEditor.maxValue;\n    const errorMsg = this.columnEditor.errorMessage;\n    const mapValidation = {\n      '{{minValue}}': minValue,\n      '{{maxValue}}': maxValue,\n      '{{minDecimal}}': 0,\n      '{{maxDecimal}}': decPlaces\n    };\n\n    if (this.validator) {\n      const validationResults = this.validator(elmValue);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    } else if (isNaN(elmValue as number) || (decPlaces === 0 && !/^(\\d+(\\.)?(\\d)*)$/.test(elmValue))) {\n      // when decimal value is 0 (which is the default), we accept 0 or more decimal values\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_VALID_NUMBER\n      };\n    } else if (minValue !== undefined && (elmValue < minValue || elmValue > maxValue)) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    } else if ((decPlaces > 0 && !new RegExp(`^(\\\\d+(\\\\.)?(\\\\d){0,${decPlaces}})$`).test(elmValue))) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_DECIMAL_BETWEEN.replace(/{{minDecimal}}|{{maxDecimal}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n",
    "import { Constants } from './../constants';\r\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class IntegerEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"number\" class='editor-text' />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = parseInt(item[this.args.column.field], 10);\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return parseInt(this.$input.val() as string, 10) || 0;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    const elmValue = this.$input.val();\r\n    const value = isNaN(elmValue) ? elmValue : parseInt(elmValue, 10);\r\n    return (!(value === '' && this.defaultValue === null)) && (value !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    const elmValue = this.$input.val();\r\n    const errorMsg = this.columnEditor.params && this.columnEditor.errorMessage;\r\n\r\n    if (this.validator) {\r\n      const validationResults = this.validator(elmValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    } else if (isNaN(elmValue as number) || !/^[+-]?\\d+$/.test(elmValue)) {\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || Constants.VALIDATION_EDITOR_VALID_INTEGER\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport { Constants } from './../constants';\r\nimport {\r\n  Column,\r\n  Editor,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  GridOption,\r\n  HtmlElementPosition,\r\n  KeyCode\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class LongTextEditor implements Editor {\r\n  $input: any;\r\n  $wrapper: any;\r\n  defaultValue: any;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    const cancelText = this._translate.instant('CANCEL') || Constants.TEXT_CANCEL;\r\n    const saveText = this._translate.instant('SAVE') || Constants.TEXT_SAVE;\r\n    const $container = $('body');\r\n\r\n    this.$wrapper = $(`<div class=\"slick-large-editor-text\" />`).appendTo($container);\r\n    this.$input = $(`<textarea hidefocus rows=\"5\">`).appendTo(this.$wrapper);\r\n\r\n    $(`<div class=\"editor-footer\">\r\n          <button class=\"btn btn-primary btn-xs\">${saveText}</button>\r\n          <button class=\"btn btn-default btn-xs\">${cancelText}</button>\r\n      </div>`).appendTo(this.$wrapper);\r\n\r\n    this.$wrapper.find('button:first').on('click', (event: Event) => this.save());\r\n    this.$wrapper.find('button:last').on('click', (event: Event) => this.cancel());\r\n    this.$input.on('keydown', this.handleKeyDown);\r\n\r\n    this.position(this.args.position);\r\n    this.$input.focus().select();\r\n  }\r\n\r\n  handleKeyDown(e: any) {\r\n    if (e.which === KeyCode.ENTER && e.ctrlKey) {\r\n      this.save();\r\n    } else if (e.which === KeyCode.ESCAPE) {\r\n      e.preventDefault();\r\n      this.cancel();\r\n    } else if (e.which === KeyCode.TAB && e.shiftKey) {\r\n      e.preventDefault();\r\n      this.args.grid.navigatePrev();\r\n    } else if (e.which === KeyCode.TAB) {\r\n      e.preventDefault();\r\n      this.args.grid.navigateNext();\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  cancel() {\r\n    this.$input.val(this.defaultValue);\r\n    this.args.cancelChanges();\r\n  }\r\n\r\n  hide() {\r\n    this.$wrapper.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$wrapper.show();\r\n  }\r\n\r\n  position(position: HtmlElementPosition) {\r\n    this.$wrapper\r\n      .css('top', (position.top || 0) - 5)\r\n      .css('left', (position.left || 0) - 5);\r\n  }\r\n\r\n  destroy() {\r\n    this.$wrapper.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.$input.val(this.defaultValue = item[this.columnDef.field]);\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue == null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Column,\r\n  Editor,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  SelectOption,\r\n} from './../models/index';\r\nimport { arraysEqual, CollectionService } from '../services/index';\r\n\r\n// height in pixel of the multiple-select DOM element\r\nconst SELECT_ELEMENT_HEIGHT = 26;\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/**\r\n * Slickgrid editor class for multiple select lists\r\n */\r\nexport class MultipleSelectEditor implements Editor {\r\n  /** The JQuery DOM element */\r\n  $editorElm: any;\r\n\r\n  /** Editor Multiple-Select options */\r\n  editorElmOptions: MultipleSelectOption;\r\n\r\n  /** The multiple-select options for a multiple select list */\r\n  defaultOptions: MultipleSelectOption;\r\n\r\n  /** The default item values that are set */\r\n  defaultValue: any[];\r\n\r\n  /** The options label/value object to use in the select list */\r\n  collection: SelectOption[] = [];\r\n\r\n  /** The property name for values in the collection */\r\n  valueName: string;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName: string;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** Do we translate the label? */\r\n  enableTranslateLabel: boolean;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,\r\n      maxHeight: 200,\r\n      addTitle: true,\r\n      okButton: true,\r\n      selectAllDelimiter: ['', ''],\r\n      width: 150,\r\n      offsetLeft: 20,\r\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\r\n    };\r\n\r\n    if (this._translate) {\r\n      this.defaultOptions.countSelected = this._translate.instant('X_OF_Y_SELECTED');\r\n      this.defaultOptions.allSelected = this._translate.instant('ALL_SELECTED');\r\n      this.defaultOptions.selectAllText = this._translate.instant('SELECT_ALL');\r\n    }\r\n\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /**\r\n   * The current selected values from the collection\r\n   */\r\n  get currentValues() {\r\n    return this.collection\r\n      .filter(c => this.$editorElm.val().indexOf(c[this.valueName].toString()) !== -1)\r\n      .map(c => c[this.valueName]);\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init() {\r\n    if (!this.args) {\r\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\r\n    }\r\n\r\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the MultipleSelect Editor to work correctly.\r\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\r\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\r\n    }\r\n\r\n    const collectionService = new CollectionService(this._translate);\r\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\r\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\r\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\r\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\r\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    this.collection = newCollection;\r\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    this.createDomElement(editorTemplate);\r\n  }\r\n\r\n  applyValue(item: any, state: any): void {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  destroy() {\r\n    this.$editorElm.remove();\r\n  }\r\n\r\n  loadValue(item: any): void {\r\n    // convert to string because that is how the DOM will return these values\r\n    this.defaultValue = item[this.columnDef.field].map((i: any) => i.toString());\r\n\r\n    this.$editorElm.find('option').each((i: number, $e: any) => {\r\n      if (this.defaultValue.indexOf($e.value) !== -1) {\r\n        $e.selected = true;\r\n      } else {\r\n        $e.selected = false;\r\n      }\r\n    });\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  serializeValue(): any {\r\n    return this.currentValues;\r\n  }\r\n\r\n  focus() {\r\n    this.$editorElm.focus();\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    return !arraysEqual(this.$editorElm.val(), this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.currentValues);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n\r\n  private buildTemplateHtmlString(collection: any[]) {\r\n    let options = '';\r\n    collection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example: { collection: [ { value: '1', label: 'One' } ])`);\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n\r\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * Automatically adjust the multiple-select dropup or dropdown by available space\r\n   */\r\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\r\n    // height in pixel of the multiple-select element\r\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\r\n\r\n    const windowHeight = $(window).innerHeight() || 300;\r\n    const pageScroll = $('body').scrollTop() || 0;\r\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\r\n    const $msDrop = $msDropContainer.find('.ms-drop');\r\n    const msDropHeight = $msDrop.height() || 0;\r\n    const msDropOffsetTop = $msDrop.offset().top;\r\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\r\n\r\n    if (space < msDropHeight) {\r\n      if (multipleSelectOptions.container) {\r\n        // when using a container, we need to offset the drop ourself\r\n        // and also make sure there's space available on top before doing so\r\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\r\n        if (newOffsetTop > 0) {\r\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\r\n        }\r\n      } else {\r\n        // without container, we simply need to add the \"top\" class to the drop\r\n        $msDrop.addClass('top');\r\n      }\r\n      $msDrop.removeClass('bottom');\r\n    } else {\r\n      $msDrop.addClass('bottom');\r\n      $msDrop.removeClass('top');\r\n    }\r\n  }\r\n\r\n  /** Build the template HTML string */\r\n  private createDomElement(editorTemplate: string) {\r\n    this.$editorElm = $(editorTemplate);\r\n\r\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\r\n      this.$editorElm.appendTo(this.args.container);\r\n    }\r\n\r\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\r\n      // fallback to bootstrap\r\n      this.$editorElm.addClass('form-control');\r\n    } else {\r\n      const elementOptions = (this.columnDef.internalColumnEditor) ? this.columnDef.internalColumnEditor.elementOptions : {};\r\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\r\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\r\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\r\n    }\r\n  }\r\n\r\n  // refresh the jquery object because the selected checkboxes were already set\r\n  // prior to this method being called\r\n  private refresh() {\r\n    if (typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('refresh');\r\n    }\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  Editor,\n  EditorValidator,\n  EditorValidatorOutput,\n  GridOption,\n  MultipleSelectOption,\n  SelectOption\n} from './../models/index';\nimport { findOrDefault, CollectionService } from '../services/index';\nimport { Injectable } from '@angular/core';\n\n// height in pixel of the multiple-select DOM element\nconst SELECT_ELEMENT_HEIGHT = 26;\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n/**\n * Slickgrid editor class for single select lists\n */\nexport class SingleSelectEditor implements Editor {\n  /** The JQuery DOM element */\n  $editorElm: any;\n\n  /** Editor Multiple-Select options */\n  editorElmOptions: MultipleSelectOption;\n\n  /** The multiple-select options for a single select */\n  defaultOptions: any;\n\n  /** The default item value that is set */\n  defaultValue: any;\n\n  /** The options label/value object to use in the select list */\n  collection: SelectOption[] = [];\n\n  /** The property name for values in the collection */\n  valueName: string;\n\n  /** The property name for labels in the collection */\n  labelName: string;\n\n  /** Grid options */\n  gridOptions: GridOption;\n\n  /** Do we translate the label? */\n  enableTranslateLabel: boolean;\n\n  /** The i18n aurelia library */\n  private _translate: TranslateService;\n\n  constructor(private args: any) {\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\n    const options = this.gridOptions || this.args.column.params || {};\n    this._translate = options.i18n;\n\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,\n      maxHeight: 200,\n      width: 150,\n      offsetLeft: 20,\n      single: true,\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\n    };\n\n    this.init();\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args && this.args.column || {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): any {\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\n  }\n\n  /**\n   * The current selected value from the collection\n   */\n  get currentValue() {\n    return findOrDefault(this.collection, (c: any) =>\n      c[this.valueName].toString() === this.$editorElm.val())[this.valueName];\n  }\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator {\n    return this.columnEditor.validator || this.columnDef.validator;\n  }\n\n  init() {\n    if (!this.args) {\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\n    }\n\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the SingleSelect Editor to work correctly.\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\n    }\n\n    const collectionService = new CollectionService(this._translate);\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\n\n    // user might want to filter certain items of the collection\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionFilterBy) {\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    this.collection = newCollection;\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\n\n    this.createDomElement(editorTemplate);\n  }\n\n  applyValue(item: any, state: any): void {\n    item[this.columnDef.field] = state;\n  }\n\n  destroy() {\n    this.$editorElm.remove();\n  }\n\n  loadValue(item: any): void {\n    // convert to string because that is how the DOM will return these values\n    // make sure the prop exists first\n    this.defaultValue = item[this.columnDef.field] && item[this.columnDef.field].toString();\n\n\n    this.$editorElm.find('option').each((i: number, $e: any) => {\n      if (this.defaultValue === $e.value) {\n        $e.selected = true;\n      } else {\n        $e.selected = false;\n      }\n    });\n\n    this.refresh();\n  }\n\n  serializeValue(): any {\n    return this.currentValue;\n  }\n\n  focus() {\n    this.$editorElm.focus();\n  }\n\n  isValueChanged(): boolean {\n    return this.$editorElm.val() !== this.defaultValue;\n  }\n\n  validate(): EditorValidatorOutput {\n    if (this.validator) {\n      const validationResults = this.validator(this.currentValue);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    }\n\n    // by default the editor is always valid\n    // if user want it to be a required checkbox, he would have to provide his own validator\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n\n  private buildTemplateHtmlString(collection: any[]) {\n    let options = '';\n    collection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error('A collection with value/label (or value/labelKey when using ' +\n          'Locale) is required to populate the Select list, for example: { params: { ' +\n          '{ collection: [ { value: \\'1\\', label: \\'One\\' } ] } } }');\n      }\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\n\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\n    });\n\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\n  }\n\n    /**\n   * Automatically adjust the multiple-select dropup or dropdown by available space\n   */\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\n    // height in pixel of the multiple-select element\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\n\n    const windowHeight = $(window).innerHeight() || 300;\n    const pageScroll = $('body').scrollTop() || 0;\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\n    const $msDrop = $msDropContainer.find('.ms-drop');\n    const msDropHeight = $msDrop.height() || 0;\n    const msDropOffsetTop = $msDrop.offset().top;\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\n\n    if (space < msDropHeight) {\n      if (multipleSelectOptions.container) {\n        // when using a container, we need to offset the drop ourself\n        // and also make sure there's space available on top before doing so\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\n        if (newOffsetTop > 0) {\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\n        }\n      } else {\n        // without container, we simply need to add the \"top\" class to the drop\n        $msDrop.addClass('top');\n      }\n      $msDrop.removeClass('bottom');\n    } else {\n      $msDrop.addClass('bottom');\n      $msDrop.removeClass('top');\n    }\n  }\n\n  /** Build the template HTML string */\n  private createDomElement(editorTemplate: string) {\n    this.$editorElm = $(editorTemplate);\n\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\n      this.$editorElm.appendTo(this.args.container);\n    }\n\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\n      // fallback to bootstrap\n      this.$editorElm.addClass('form-control');\n    } else {\n      const elementOptions = (this.columnDef.params) ? this.columnDef.params.elementOptions : {};\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\n    }\n  }\n\n  // refresh the jquery object because the selected checkboxes were already set\n  // prior to this method being called\n  private refresh() {\n    if (typeof this.$editorElm.multipleSelect === 'function') {\n      this.$editorElm.multipleSelect('refresh');\n    }\n  }\n}\n",
    "import { Constants } from '../constants';\nimport { Column, Editor, EditorValidator, EditorValidatorOutput } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP = 1;\n\nexport class SliderEditor implements Editor {\n  private _elementRangeInputId: string;\n  private _elementRangeOutputId: string;\n  $editorElm: any;\n  $input: any;\n  $sliderNumber: any;\n  defaultValue: any;\n\n  constructor(private args: any) {\n    this.init();\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args && this.args.column || {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): any {\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\n  }\n\n  /** Getter for the Editor Generic Params */\n  private get editorParams(): any {\n    return this.columnEditor.params || {};\n  }\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator {\n    return this.columnEditor.validator || this.columnDef.validator;\n  }\n\n  init(): void {\n    const container = this.args.container;\n\n    // define the input & slider number IDs\n    const itemId = this.args && this.args.item && this.args.item.id;\n    this._elementRangeInputId = `rangeInput_${this.columnDef.field}_${itemId}`;\n    this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}_${itemId}`;\n\n    // create HTML string template\n    const editorTemplate = this.buildTemplateHtmlString();\n    this.$editorElm = $(editorTemplate);\n    this.$input = this.$editorElm.children('input');\n    this.$sliderNumber = this.$editorElm.children('div.input-group-addon.input-group-append').children();\n\n    // watch on change event\n    this.$editorElm\n      .appendTo(this.args.container)\n      .on('mouseup', (event: Event) => this.save());\n\n    // if user chose to display the slider number on the right side, then update it every time it changes\n    // we need to use both \"input\" and \"change\" event to be all cross-browser\n    if (!this.editorParams.hideSliderNumber) {\n      this.$editorElm.on('input change', (e: { target: HTMLInputElement }) => {\n        const value = e && e.target && e.target.value || '';\n        if (value) {\n          document.getElementById(this._elementRangeOutputId).innerHTML = e.target.value;\n        }\n      });\n    }\n  }\n\n  destroy() {\n    this.$editorElm.remove();\n  }\n\n  focus() {\n    this.$editorElm.focus();\n  }\n\n  save() {\n    this.args.commitChanges();\n  }\n\n  cancel() {\n    this.$input.val(this.defaultValue);\n    this.args.cancelChanges();\n  }\n\n  loadValue(item: any) {\n    // this.$input.val(this.defaultValue = item[this.columnDef.field]);\n    this.defaultValue = item[this.columnDef.field];\n    this.$input.val(this.defaultValue);\n    this.$input[0].defaultValue = this.defaultValue;\n    this.$sliderNumber.html(this.defaultValue);\n  }\n\n  serializeValue() {\n    return parseInt(this.$input.val() as string, 10) || 0;\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.columnDef.field] = state;\n  }\n\n  isValueChanged() {\n    const elmValue = this.$input.val();\n    return (!(elmValue === '' && this.defaultValue === null)) && (elmValue !== this.defaultValue);\n  }\n\n  validate(): EditorValidatorOutput {\n    const elmValue = this.$input.val();\n    const minValue = this.columnEditor.minValue;\n    const maxValue = this.columnEditor.maxValue;\n    const errorMsg = this.columnEditor.errorMessage;\n    const mapValidation = {\n      '{{minValue}}': minValue,\n      '{{maxValue}}': maxValue\n    };\n\n    if (this.validator) {\n      const validationResults = this.validator(elmValue);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    } else if (minValue !== undefined && (elmValue < minValue || elmValue > maxValue)) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString() {\n    const minValue = this.columnEditor.hasOwnProperty('minValue') ? this.columnEditor.minValue : DEFAULT_MIN_VALUE;\n    const maxValue = this.columnEditor.hasOwnProperty('maxValue') ? this.columnEditor.maxValue : DEFAULT_MAX_VALUE;\n    const defaultValue = this.editorParams.hasOwnProperty('sliderStartValue') ? this.editorParams.sliderStartValue : minValue;\n    const step = this.columnEditor.hasOwnProperty('valueStep') ? this.columnEditor.valueStep : DEFAULT_STEP;\n    const itemId = this.args && this.args.item && this.args.item.id;\n\n    if (this.editorParams.hideSliderNumber) {\n      return `\n      <div class=\"slider-editor\">\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\n          name=\"${this._elementRangeInputId}\"\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n          class=\"form-control slider-editor-input range\" />\n      </div>`;\n    }\n\n    return `\n      <div class=\"input-group slider-editor\">\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\n          name=\"${this._elementRangeInputId}\"\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n          class=\"form-control slider-editor-input range\" />\n        <div class=\"input-group-addon input-group-append slider-value\"><span class=\"input-group-text\" id=\"${this._elementRangeOutputId}\">${defaultValue}</span></div>\n      </div>`;\n  }\n}\n",
    "import { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class TextEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"text\" class=\"editor-text\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this.$input.val(val);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field] || '';\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue === null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { CheckboxEditor } from './checkboxEditor';\r\nimport { DateEditor } from './dateEditor';\r\nimport { FloatEditor } from './floatEditor';\r\nimport { IntegerEditor } from './integerEditor';\r\nimport { LongTextEditor } from './longTextEditor';\r\nimport { MultipleSelectEditor } from './multipleSelectEditor';\r\nimport { SingleSelectEditor } from './singleSelectEditor';\r\nimport { SliderEditor } from './sliderEditor';\r\nimport { TextEditor } from './textEditor';\r\n\r\nexport const Editors = {\r\n  /** Checkbox Editor (uses native checkbox DOM element) */\r\n  checkbox: CheckboxEditor,\r\n\r\n  /** Date Picker Editor (which uses 3rd party lib \"flatpickr\") */\r\n  date: DateEditor,\r\n\r\n  /** Float Number Editor */\r\n  float: FloatEditor,\r\n\r\n  /** Integer Editor */\r\n  integer: IntegerEditor,\r\n\r\n  /** Long Text Editor (uses a textarea) */\r\n  longText: LongTextEditor,\r\n\r\n  /** Multiple Select editor (which uses 3rd party lib \"multiple-select.js\") */\r\n  multipleSelect: MultipleSelectEditor,\r\n\r\n  /** Single Select editor (which uses 3rd party lib \"multiple-select.js\") */\r\n  singleSelect: SingleSelectEditor,\r\n\r\n  /** Slider Editor */\r\n  slider: SliderEditor,\r\n\r\n  /** Text Editor */\r\n  text: TextEditor\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const arrayToCsvFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && Array.isArray(value)) {\n    const values = value.join(', ');\n    return `<span title=\"${values}\">${values}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const boldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  } else {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkboxFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? '&#x2611;' : '';\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkmarkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? `<i class=\"fa fa-check checkmark-icon\" aria-hidden=\"true\"></i>` : '';\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of a params collection\n */\nexport const collectionFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.params || !columnDef.params.collection\n    || !columnDef.params.collection.length) {\n    return '';\n  }\n\n  const { params, params: { collection } } = columnDef;\n  const labelName = (params.customStructure) ? params.customStructure.label : 'label';\n  const valueName = (params.customStructure) ? params.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of an editor collection\n */\nexport const collectionEditorFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.internalColumnEditor || !columnDef.internalColumnEditor.collection\n    || !columnDef.internalColumnEditor.collection.length) {\n    return '';\n  }\n\n  const { internalColumnEditor, internalColumnEditor: { collection } } = columnDef;\n  const labelName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.label : 'label';\n  const valueName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const complexObjectFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!columnDef) {\n    return '';\n  }\n  const complexField = columnDef.field || '';\n  return complexField.split('.').reduce((obj, i) => (obj ? obj[i] : ''), dataContext);\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\n\nexport const dateIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIso);\n\nexport const dateTimeIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIsoAmPm);\n\nexport const dateTimeIsoAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUsAmPm);\n\nexport const dateTimeUsAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUs);\n\nexport const dateTimeUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\n\nexport const dateUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const decimalFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const params = columnDef.params || {};\n  const minDecimalPlaces = params.minDecimalPlaces || params.decimalPlaces || 2;\n  const maxDecimalPlaces = params.maxDecimalPlaces || 2;\n  return isNaN(+value) ? value : `${decimalFormatted(value, minDecimalPlaces, maxDecimalPlaces)}`;\n};\n\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const deleteIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-trash pointer delete-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredBoldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  } else {\n    return `<span style=\"color:red;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  isNaN(+value) ? '' : `$${decimalFormatted(value, 2, 4)}`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const editIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-pencil pointer edit-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const hyperlinkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && typeof value === 'string') {\n    const matchUrl = value.match(/^(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:\\/~\\+#]*[\\w\\-\\@?^=%&amp;\\/~\\+#])?/i);\n    if (matchUrl && Array.isArray(matchUrl)) {\n      return `<a href=\"${matchUrl[0]}\">' + value + '</a>`;\n    }\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\nexport const hyperlinkUriPrefixFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  let uriPrefix = (columnDef && columnDef.params && columnDef.params.uriPrefix) ? columnDef.params.uriPrefix : '';\n  if (!uriPrefix) {\n    throw new Error(`HyperlinkUriPrefix Formatter require a \"uriPrefix\" that can be passed through params. e.g.:: formatter: Formatters.hyperlinkUriPrefix, params: { uriPrefix: '/users/' }`);\n  }\n  if (value && uriPrefix && typeof uriPrefix === 'string' && !uriPrefix.includes('<script>')) {\n    uriPrefix += value;\n    return '<a href=\"' + uriPrefix + '\">' + value + '</a>';\n  }\n  return '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const infoIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-info-circle pointer info-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const lowercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toLowerCase() : '';\n};\n",
    "\nimport { Column, Formatter } from './../models/index';\n\n/**\n * Takes a value display it according to a mask provided\n * e.: 1234567890 with mask \"(000) 000-0000\" will display \"(123) 456-7890\"\n */\nexport const maskFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const params = columnDef.params || {};\n  const mask = params.mask;\n\n  if (!mask) {\n    throw new Error(`You must provide a \"mask\" via the generic \"params\" options (e.g.: { formatter: Formatters.mask, params: { mask: '000-000' }}`);\n  }\n\n  if (value && mask) {\n    let i = 0;\n    const v = value.toString();\n    return mask.replace(/[09A]/g, () => v[i++] || '');\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\nexport const multipleFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const params = columnDef.params || {};\n  if (!params.formatters || !Array.isArray(params.formatters)) {\n    throw new Error(`The multiple formatter requires the \"formatters\" to be provided as a column params.\n    For example: this.columnDefinitions = [{ id: title, field: title, formatter: Formatters.multiple, params: { formatters: [Formatters.lowercase, Formatters.uppercase] }`);\n  }\n  const formatters: Formatter[] = params.formatters;\n\n  // loop through all Formatters, the value of 1st formatter will be used by 2nd formatter and so on.\n  // they are piped and executed in sequences\n  let currentValue = value;\n  for (const formatter of formatters) {\n    currentValue = formatter(row, cell, currentValue, columnDef, dataContext, grid);\n  }\n  return currentValue;\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  if (value === null || value === '') {\r\n    return '';\r\n  }\r\n\r\n  const outputValue = value > 0 ? value / 100 : 0;\r\n  return `<span>${outputValue}%</span>`;\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'red';\n  } else if (value < 70) {\n    color = 'silver';\n  } else {\n    color = 'green';\n  }\n\n  return `<span class=\"percent-complete-bar\" style=\"background:${color}; width:${value}%\"></span>`;\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '-';\n  } else if (value < 50) {\n    return `<span style='color:red;font-weight:bold;'>${value}%</span>`;\n  } else {\n    return `<span style='color:green'>${value}%</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentSymbolFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  return value ? `<span>${value}%</span>` : '';\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const progressBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'danger';\n  } else if (value < 70) {\n    color = 'warning';\n  } else {\n    color = 'success';\n  }\n\n  return `<div class=\"progress\">\n    <div class=\"progress-bar progress-bar-${color} bg-${color}\" role=\"progressbar\" aria-valuenow=\"${value}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"min-width: 2em; width: ${value}%;\">\n    ${value}%\n    </div>\n  </div>`;\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a cell value and translates it with the \"ngx-translate\" service */\nexport const translateFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? translate.instant(value) : '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a boolean value, cast it to upperCase string and finally translates it with the \"ngx-translate\" service */\nexport const translateBooleanFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n  return value ? translate.instant(value.toUpperCase() as string) : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const uppercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toUpperCase() : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const yesNoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string =>\n  value ? 'Yes' : 'No';\n",
    "import { Column } from './../models/index';\nimport { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { boldFormatter } from './boldFormatter';\nimport { checkboxFormatter } from './checkboxFormatter';\nimport { checkmarkFormatter } from './checkmarkFormatter';\nimport { collectionFormatter } from './collectionFormatter';\nimport { collectionEditorFormatter } from './collectionEditorFormatter';\nimport { complexObjectFormatter } from './complexObjectFormatter';\nimport { dateIsoFormatter } from './dateIsoFormatter';\nimport { dateTimeIsoFormatter } from './dateTimeIsoFormatter';\nimport { dateTimeIsoAmPmFormatter } from './dateTimeIsoAmPmFormatter';\nimport { dateTimeUsAmPmFormatter } from './dateTimeUsAmPmFormatter';\nimport { dateTimeUsFormatter } from './dateTimeUsFormatter';\nimport { dateUsFormatter } from './dateUsFormatter';\nimport { decimalFormatter } from './decimalFormatter';\nimport { deleteIconFormatter } from './deleteIconFormatter';\nimport { dollarColoredBoldFormatter } from './dollarColoredBoldFormatter';\nimport { dollarColoredFormatter } from './dollarColoredFormatter';\nimport { dollarFormatter } from './dollarFormatter';\nimport { editIconFormatter } from './editIconFormatter';\nimport { hyperlinkFormatter } from './hyperlinkFormatter';\nimport { hyperlinkUriPrefixFormatter } from './hyperlinkUriPrefixFormatter';\nimport { infoIconFormatter } from './infoIconFormatter';\nimport { lowercaseFormatter } from './lowercaseFormatter';\nimport { maskFormatter } from './maskFormatter';\nimport { multipleFormatter } from './multipleFormatter';\nimport { percentFormatter } from './percentFormatter';\nimport { percentCompleteBarFormatter } from './percentCompleteBarFormatter';\nimport { percentCompleteFormatter } from './percentCompleteFormatter';\nimport { percentSymbolFormatter } from './percentSymbolFormatter';\nimport { progressBarFormatter } from './progressBarFormatter';\nimport { translateFormatter } from './translateFormatter';\nimport { translateBooleanFormatter } from './translateBooleanFormatter';\nimport { uppercaseFormatter } from './uppercaseFormatter';\nimport { yesNoFormatter } from './yesNoFormatter';\n\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const Formatters = {\n  /** Takes an array of string and converts it to a comma delimited string */\n  arrayToCsv: arrayToCsvFormatter,\n\n  /** show value in bold font weight as well */\n  bold: boldFormatter,\n\n  /** When value is filled (true), it will display a checkbox Unicode icon */\n  checkbox: checkboxFormatter,\n\n  /** When value is filled (true), it will display a Font-Awesome icon (fa-check) */\n  checkmark: checkmarkFormatter,\n\n  /** Takes a complex data object and return the data under that property (for example: \"user.firstName\" will return the first name \"John\") */\n  complexObject: complexObjectFormatter,\n\n  /**\n   * Looks up values from the columnDefinition.params.collection property and displays the label in CSV or string format\n   * @example\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\n   * const dataset = [{ value: 1 },{ value: 2 }];\n   */\n  collection: collectionFormatter,\n\n  /**\n   * Looks up values from the columnDefinition.editor.collection property and displays the label in CSV or string format\n   * @example\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\n   * const dataset = [{ value: 1 },{ value: 2 }];\n   */\n  collectionEditor: collectionEditorFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date format */\n  dateIso: dateIsoFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date+Time format */\n  dateTimeIso: dateTimeIsoFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date+Time+(am/pm) format */\n  dateTimeIsoAmPm: dateTimeIsoAmPmFormatter,\n\n  /** Takes a Date object and displays it as an US Date format */\n  dateUs: dateUsFormatter,\n\n  /** Takes a Date object and displays it as an US Date+Time format */\n  dateTimeUs: dateTimeUsFormatter,\n\n  /** Takes a Date object and displays it as an US Date+Time+(am/pm) format */\n  dateTimeUsAmPm: dateTimeUsAmPmFormatter,\n\n  /** Displays a Font-Awesome delete icon (fa-trash) */\n  deleteIcon: deleteIconFormatter,\n\n  /**\n   * Display the value as x decimals formatted, defaults to 2 decimals.\n   * You can pass \"decimalPlaces\" or \"minDecimalPlaces\" and/or \"maxDecimalPlaces\" to the generic \"params\" property, example:: `{ formatter: Formatters.decimal, params: { decimalPlaces: 3 }}`\n   * The property \"decimalPlaces\" is an alias of \"minDecimalPlaces\"\n   */\n  decimal: decimalFormatter,\n\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value */\n  dollar: dollarFormatter,\n\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value */\n  dollarColored: dollarColoredFormatter,\n\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value, show it in bold font weight as well */\n  dollarColoredBold: dollarColoredBoldFormatter,\n\n  /** Displays a Font-Awesome edit icon (fa-pencil) */\n  editIcon: editIconFormatter,\n\n  /** Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https). The structure will be \"<a href=\"hyperlink\">hyperlink</a>\" */\n  hyperlink: hyperlinkFormatter,\n\n  /** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\n  hyperlinkUriPrefix: hyperlinkUriPrefixFormatter,\n\n  /** Displays a Font-Awesome edit icon (fa-info-circle) */\n  infoIcon: infoIconFormatter,\n\n  /** Takes a value and displays it all lowercase */\n  lowercase: lowercaseFormatter,\n\n  /**\n   * Takes a value display it according to a mask provided\n   * e.: 1234567890 with mask \"(000) 000-0000\" will display \"(123) 456-7890\"\n   */\n  mask: maskFormatter,\n\n  /**\n   * You can pipe multiple formatters (executed in sequence), use params to pass the list of formatters. For example::\n   * { field: 'title', formatter: Formatters.multiple, params: { formatters: [ Formatters.lowercase, Formatters.uppercase ] }\n   */\n  multiple: multipleFormatter,\n\n  /** Takes a cell value number (between 0.0-1.0) and displays a red (<50) or green (>=50) bar */\n  percent: percentFormatter,\n\n  /** Takes a cell value number (between 0.0-100) and displays a red (<50) or green (>=50) bar */\n  percentComplete: percentCompleteFormatter,\n\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"percent-complete-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\n  percentCompleteBar: percentCompleteBarFormatter,\n\n  /** Takes a cell value number (between 0-100) and add the \"%\" after the number */\n  percentSymbol: percentSymbolFormatter,\n\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"progress-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\n  progressBar: progressBarFormatter,\n\n  /** Takes a cell value and translates it (i18n). Requires an instance of the Translate Service:: `i18n: this.translate */\n  translate: translateFormatter,\n\n  /** Takes a boolean value, cast it to upperCase string and finally translates it (i18n). */\n  translateBoolean: translateBooleanFormatter,\n\n  /** Takes a value and displays it all uppercase */\n  uppercase: uppercaseFormatter,\n\n  /** Takes a boolean value and display a string 'Yes' or 'No' */\n  yesNo: yesNoFormatter\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsPercentageFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + '%' + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const avgTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 4) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const minTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.min && totals.min[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const maxTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.max && totals.max[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 4) + suffix}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 2) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}`;\n  }\n  return '';\n};\n",
    "import { Column } from './../models/index';\nimport { avgTotalsPercentageFormatter } from './avgTotalsPercentageFormatter';\nimport { avgTotalsDollarFormatter } from './avgTotalsDollarFormatter';\nimport { avgTotalsFormatter } from './avgTotalsFormatter';\nimport { minTotalsFormatter } from './minTotalsFormatter';\nimport { maxTotalsFormatter } from './maxTotalsFormatter';\nimport { sumTotalsColoredFormatter } from './sumTotalsColoredFormatter';\nimport { sumTotalsDollarColoredBoldFormatter } from './sumTotalsDollarColoredBoldFormatter';\nimport { sumTotalsDollarColoredFormatter } from './sumTotalsDollarColoredFormatter';\nimport { sumTotalsDollarBoldFormatter } from './sumTotalsDollarBoldFormatter';\nimport { sumTotalsDollarFormatter } from './sumTotalsDollarFormatter';\nimport { sumTotalsFormatter } from './sumTotalsFormatter';\nimport { sumTotalsBoldFormatter } from './sumTotalsBoldFormatter';\n\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const GroupTotalFormatters = {\n  /**\n   * Average all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotals: avgTotalsFormatter,\n\n  /**\n   * Average all the column totals and display '$' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsDollar: avgTotalsDollarFormatter,\n\n  /**\n   * Average all the column totals and display '%' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsPercentage: avgTotalsPercentageFormatter,\n\n  /**\n   * Show max value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  maxTotals: maxTotalsFormatter,\n\n  /**\n   * Show min value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  minTotals: minTotalsFormatter,\n\n  /**\n   * Sums up all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotals: sumTotalsFormatter,\n\n  /**\n   * Sums up all the column totals and display it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsBold: sumTotalsBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsColored: sumTotalsColoredFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollar: sumTotalsDollarFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign and show it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarBold: sumTotalsDollarBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColored: sumTotalsDollarColoredFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value, show it in bold font weight as well\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColoredBold: sumTotalsDollarColoredBoldFormatter,\n};\n",
    "import { Pagination } from './../models/pagination.interface';\r\nimport { AfterViewInit, Component, EventEmitter, Injectable, Input, OnDestroy, Output } from '@angular/core';\r\nimport { castToPromise } from './../services/utilities';\r\nimport { GridOption } from './../models/index';\r\nimport { FilterService, SortService } from './../services/index';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n@Component({\r\n  selector: 'slick-pagination',\r\n  template: `<div class=\"slick-pagination\">\r\n    <div class=\"slick-pagination-nav\">\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-first fa fa-angle-double-left\" aria-label=\"First\" (click)=\"changeToFirstPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-prev fa fa-angle-left\" aria-label=\"Previous\" (click)=\"changeToPreviousPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n\r\n        <div class=\"slick-page-number\">\r\n            <span [translate]=\"'PAGE'\"></span>\r\n            <input type=\"text\" class=\"form-control\" value=\"{{pageNumber}}\" size=\"1\"  (change)=\"changeToCurrentPage($event)\">\r\n            <span [translate]=\"'OF'\"></span><span> {{pageCount}}</span>\r\n        </div>\r\n\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-next text-center fa fa-lg fa-angle-right\" aria-label=\"Next\" (click)=\"changeToNextPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-end fa fa-lg fa-angle-double-right\" aria-label=\"Last\" (click)=\"changeToLastPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n    </div>\r\n    <span class=\"slick-pagination-settings\">\r\n        <select id=\"items-per-page-label\" [value]=\"itemsPerPage\" (change)=\"onChangeItemPerPage($event)\">\r\n        <option value=\"{{pageSize}}\" *ngFor=\"let pageSize of paginationPageSizes;\">{{pageSize}}</option>\r\n        </select>\r\n        <span [translate]=\"'ITEMS_PER_PAGE'\"></span>,\r\n        <span class=\"slick-pagination-count\">\r\n            <span [translate]=\"'FROM_TO_OF_TOTAL_ITEMS'\" [translateParams]=\"{ from: dataFrom, to: dataTo, totalItems: totalItems }\"></span>\r\n        </span>\r\n    </span>\r\n    </div>\r\n`\r\n})\r\n@Injectable()\r\nexport class SlickPaginationComponent implements AfterViewInit, OnDestroy {\r\n  private _filterSubcription: Subscription;\r\n  private _gridPaginationOptions: GridOption;\r\n  private _isFirstRender = true;\r\n  @Output() onPaginationChanged = new EventEmitter<Pagination>();\r\n\r\n  @Input()\r\n  set gridPaginationOptions(gridPaginationOptions: GridOption) {\r\n    this._gridPaginationOptions = gridPaginationOptions;\r\n    if (this._isFirstRender || !gridPaginationOptions || !gridPaginationOptions.pagination || (gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n      this._isFirstRender = false;\r\n    }\r\n  }\r\n  get gridPaginationOptions(): GridOption {\r\n    return this._gridPaginationOptions;\r\n  }\r\n  @Input() grid: any;\r\n  dataFrom = 1;\r\n  dataTo = 1;\r\n  itemsPerPage: number;\r\n  pageCount = 0;\r\n  pageNumber = 1;\r\n  totalItems = 0;\r\n  paginationCallback: Function;\r\n  paginationPageSizes = [25, 75, 100];\r\n  fromToParams: any = { from: this.dataFrom, to: this.dataTo, totalItems: this.totalItems };\r\n\r\n  /** Constructor */\r\n  constructor(private filterService: FilterService, private sortService: SortService) { }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._gridPaginationOptions = this._gridPaginationOptions;\r\n    if (!this._gridPaginationOptions || !this._gridPaginationOptions.pagination || (this._gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n    }\r\n\r\n    // Subscribe to Event Emitter of Filter & Sort changed, go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterChanged.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n    // Subscribe to Filter clear and go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterCleared.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n  }\r\n\r\n  ceil(number: number) {\r\n    return Math.ceil(number);\r\n  }\r\n\r\n  changeToFirstPage(event: any) {\r\n    this.pageNumber = 1;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToLastPage(event: any) {\r\n    this.pageNumber = this.pageCount;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToNextPage(event: any) {\r\n    if (this.pageNumber < this.pageCount) {\r\n      this.pageNumber++;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToPreviousPage(event: any) {\r\n    if (this.pageNumber > 0) {\r\n      this.pageNumber--;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToCurrentPage(event: any) {\r\n    this.pageNumber = event.currentTarget.value;\r\n    if (this.pageNumber < 1) {\r\n          this.pageNumber = 1;\r\n    } else if (this.pageNumber > this.pageCount) {\r\n          this.pageNumber = this.pageCount;\r\n    }\r\n\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  dispose() {\r\n    this.onPaginationChanged.unsubscribe();\r\n    if (this._filterSubcription) {\r\n      this._filterSubcription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  onChangeItemPerPage(event: any) {\r\n    const itemsPerPage = +event.target.value;\r\n    this.pageCount = Math.ceil(this.totalItems / itemsPerPage);\r\n    this.pageNumber = 1;\r\n    this.itemsPerPage = itemsPerPage;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  refreshPagination(isPageNumberReset: boolean = false) {\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this._gridPaginationOptions && this._gridPaginationOptions.pagination) {\r\n      const pagination = this._gridPaginationOptions.pagination;\r\n      // set the number of items per page if not already set\r\n      if (!this.itemsPerPage) {\r\n        this.itemsPerPage = +((backendApi && backendApi.options && backendApi.options.paginationOptions && backendApi.options.paginationOptions.first) ? backendApi.options.paginationOptions.first : this._gridPaginationOptions.pagination.pageSize);\r\n      }\r\n\r\n      // if totalItems changed, we should always go back to the first page and recalculation the From-To indexes\r\n      if (isPageNumberReset || this.totalItems !== pagination.totalItems) {\r\n        if (this._isFirstRender && pagination.pageNumber && pagination.pageNumber > 1) {\r\n          this.pageNumber = pagination.pageNumber || 1;\r\n        } else {\r\n          this.pageNumber = 1;\r\n        }\r\n\r\n        // when page number is set to 1 then also reset the \"offset\" of backend service\r\n        if (this.pageNumber === 1) {\r\n          backendApi.service.resetPaginationOptions();\r\n        }\r\n      }\r\n\r\n      // calculate and refresh the multiple properties of the pagination UI\r\n      this.paginationPageSizes = this._gridPaginationOptions.pagination.pageSizes;\r\n      this.totalItems = this._gridPaginationOptions.pagination.totalItems;\r\n      this.recalculateFromToIndexes();\r\n    }\r\n    this.pageCount = Math.ceil(this.totalItems / this.itemsPerPage);\r\n  }\r\n\r\n  async onPageChanged(event: Event | undefined, pageNumber: number) {\r\n    this.recalculateFromToIndexes();\r\n\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this.dataTo > this.totalItems) {\r\n      this.dataTo = this.totalItems;\r\n    } else if (this.totalItems < this.itemsPerPage) {\r\n      this.dataTo = this.totalItems;\r\n    }\r\n    if (backendApi) {\r\n      const itemsPerPage = +this.itemsPerPage;\r\n\r\n      if (backendApi.preProcess) {\r\n        backendApi.preProcess();\r\n      }\r\n\r\n      const query = backendApi.service.processOnPaginationChanged(event, { newPage: pageNumber, pageSize: itemsPerPage });\r\n\r\n      // the process could be an Observable (like HttpClient) or a Promise\r\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n      const observableOrPromise = backendApi.process(query);\r\n      const processResult = await castToPromise(observableOrPromise);\r\n\r\n      // from the result, call our internal post process to update the Dataset and Pagination info\r\n      if (processResult && backendApi.internalPostProcess) {\r\n        backendApi.internalPostProcess(processResult);\r\n      }\r\n\r\n      // send the response process to the postProcess callback\r\n      if (backendApi.postProcess) {\r\n        backendApi.postProcess(processResult);\r\n      }\r\n    } else {\r\n      throw new Error('Pagination with a backend service requires \"BackendServiceApi\" to be defined in your grid options');\r\n    }\r\n\r\n    // emit the changes to the parent component\r\n    this.onPaginationChanged.emit({\r\n      pageNumber: this.pageNumber,\r\n      pageSizes: this.paginationPageSizes,\r\n      pageSize: this.itemsPerPage,\r\n      totalItems: this.totalItems\r\n    });\r\n  }\r\n\r\n  recalculateFromToIndexes() {\r\n    this.dataFrom = (this.pageNumber * this.itemsPerPage) - this.itemsPerPage + 1;\r\n    this.dataTo = (this.totalItems < this.itemsPerPage) ? this.totalItems : (this.pageNumber * this.itemsPerPage);\r\n  }\r\n}\r\n",
    "// import 3rd party vendor libs\nimport 'jquery-ui-dist/jquery-ui';\nimport 'slickgrid/lib/jquery.event.drag-2.3.0';\nimport 'slickgrid/slick.core';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.grid';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.groupitemmetadataprovider';\nimport 'slickgrid/controls/slick.columnpicker';\nimport 'slickgrid/controls/slick.gridmenu';\nimport 'slickgrid/controls/slick.pager';\nimport 'slickgrid/plugins/slick.autotooltips';\nimport 'slickgrid/plugins/slick.cellexternalcopymanager';\nimport 'slickgrid/plugins/slick.cellrangedecorator';\nimport 'slickgrid/plugins/slick.cellrangeselector';\nimport 'slickgrid/plugins/slick.cellselectionmodel';\nimport 'slickgrid/plugins/slick.checkboxselectcolumn';\nimport 'slickgrid/plugins/slick.headerbuttons';\nimport 'slickgrid/plugins/slick.headermenu';\nimport 'slickgrid/plugins/slick.rowmovemanager';\nimport 'slickgrid/plugins/slick.rowselectionmodel';\nimport { AfterViewInit, Component, EventEmitter, Inject, Injectable, Input, Output, OnDestroy, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, titleCase } from './../services/utilities';\nimport { GlobalGridOptions } from './../global-grid-options';\nimport {\n  AngularGridInstance,\n  BackendServiceOption,\n  Column,\n  GridOption,\n  GridStateChange,\n  GridStateType,\n  Pagination\n} from './../models/index';\nimport { ControlAndPluginService } from './../services/controlAndPlugin.service';\nimport { ExportService } from './../services/export.service';\nimport { FilterService } from './../services/filter.service';\nimport { GraphqlService } from './../services/graphql.service';\nimport { GridEventService } from './../services/gridEvent.service';\nimport { GridService } from './../services/grid.service';\nimport { GridStateService } from './../services/gridState.service';\nimport { GroupingAndColspanService } from './../services/groupingAndColspan.service';\nimport { ResizerService } from './../services/resizer.service';\nimport { SortService } from './../services/sort.service';\nimport { Subscription } from 'rxjs/Subscription';\nimport { FilterFactory } from '../filters/filterFactory';\nimport { SlickgridConfig } from '../slickgrid-config';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\nconst slickgridEventPrefix = 'sg';\n\n@Injectable()\n@Component({\n  selector: 'angular-slickgrid',\n  template: `<div id=\"slickGridContainer-{{gridId}}\" #customElm class=\"gridPane\" [style.width]=\"gridWidthString\">\r\n    <div attr.id='{{gridId}}' class=\"slickgrid-container\" style=\"width: 100%\" [style.height]=\"gridHeightString\">\r\n    </div>\r\n\r\n    <slick-pagination id=\"slickPagingContainer-{{gridId}}\"\r\n        *ngIf=\"showPagination\"\r\n        (onPaginationChanged)=\"paginationChanged($event)\"\r\n        [gridPaginationOptions]=\"gridPaginationOptions\">\r\n    </slick-pagination>\r\n</div>\r\n`,\n  providers: [\n    ControlAndPluginService,\n    ExportService,\n    FilterFactory,\n    FilterService,\n    GraphqlService,\n    GridEventService,\n    GridService,\n    GridStateService,\n    GroupingAndColspanService,\n    ResizerService,\n    SortService,\n    SlickgridConfig\n  ]\n})\nexport class AngularSlickgridComponent implements AfterViewInit, OnDestroy, OnInit {\n  @ViewChild('customElm', {read: ElementRef}) customElm: ElementRef;\n  private _dataset: any[];\n  private _columnDefinitions: Column[];\n  private _dataView: any;\n  private _eventHandler: any = new Slick.EventHandler();\n  grid: any;\n  gridPaginationOptions: GridOption;\n  gridHeightString: string;\n  gridWidthString: string;\n  groupingDefinition: any = {};\n  groupItemMetadataProvider: any;\n  showPagination = false;\n  isGridInitialized = false;\n  subscriptions: Subscription[] = [];\n\n  @Output() onAngularGridCreated = new EventEmitter<AngularGridInstance>();\n  @Output() onDataviewCreated = new EventEmitter<any>();\n  @Output() onGridCreated = new EventEmitter<any>();\n  @Output() onGridInitialized = new EventEmitter<any>();\n  @Output() onBeforeGridCreate = new EventEmitter<boolean>();\n  @Output() onBeforeGridDestroy = new EventEmitter<any>();\n  @Output() onAfterGridDestroyed = new EventEmitter<boolean>();\n  @Output() onGridStateChanged = new EventEmitter<GridStateChange>();\n  @Input() gridId: string;\n  @Input() gridOptions: GridOption;\n  @Input() gridHeight = 0;\n  @Input() gridWidth = 0;\n\n  @Input()\n  set columnDefinitions(columnDefinitions: Column[]) {\n    this._columnDefinitions = columnDefinitions;\n    if (this.isGridInitialized) {\n      this.updateColumnDefinitionsList(columnDefinitions);\n    }\n  }\n  get columnDefinitions(): Column[] {\n    return this._columnDefinitions;\n  }\n  @Input()\n  set dataset(dataset: any[]) {\n    this._dataset = dataset;\n    this.refreshGridData(dataset);\n  }\n  get dataset(): any[] {\n    return this._dataView.getItems();\n  }\n\n\n  constructor(\n    private controlAndPluginService: ControlAndPluginService,\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private gridService: GridService,\n    private gridEventService: GridEventService,\n    private gridStateService: GridStateService,\n    private groupingAndColspanService: GroupingAndColspanService,\n    private resizer: ResizerService,\n    private sortService: SortService,\n    private translate: TranslateService,\n    @Inject('config') private forRootConfig: GridOption\n  ) {}\n\n  ngOnInit(): void {\n    this.onBeforeGridCreate.emit(true);\n    if (!this.gridOptions.enableAutoResize && !this.gridOptions.autoResize) {\n      this.gridHeightString = `${this.gridHeight}px`;\n      this.gridWidthString = `${this.gridWidth}px`;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.onBeforeGridDestroy.emit(this.grid);\n    this.destroy();\n    this.onAfterGridDestroyed.emit(true);\n  }\n\n  destroy(emptyDomElementContainer = false) {\n    this._dataView = [];\n    this.gridOptions = {};\n    this._eventHandler.unsubscribeAll();\n    this.controlAndPluginService.dispose();\n    this.filterService.dispose();\n    this.gridEventService.dispose();\n    this.gridStateService.dispose();\n    this.groupingAndColspanService.dispose();\n    this.resizer.dispose();\n    this.sortService.dispose();\n    this.grid.destroy();\n\n    if (emptyDomElementContainer) {\n      $(this.gridOptions.gridContainerId).empty();\n    }\n\n    // also unsubscribe all RxJS subscriptions\n    this.subscriptions.forEach((subscription: Subscription) => {\n      if (subscription && subscription.unsubscribe) {\n        subscription.unsubscribe();\n      }\n    });\n    this.subscriptions = [];\n  }\n\n  ngAfterViewInit() {\n    this.initialization();\n    this.isGridInitialized = true;\n  }\n\n  initialization() {\n    // make sure the dataset is initialized (if not it will throw an error that it cannot getLength of null)\n    this._dataset = this._dataset || [];\n    this.gridOptions = this.mergeGridOptions(this.gridOptions);\n    this.createBackendApiInternalPostProcessCallback(this.gridOptions);\n\n    if (this.gridOptions.enableGrouping) {\n      this.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\n      this._dataView = new Slick.Data.DataView({\n        groupItemMetadataProvider: this.groupItemMetadataProvider,\n        inlineFilters: true\n      });\n    } else {\n      this._dataView = new Slick.Data.DataView();\n    }\n\n    // for convenience, we provide the property \"editor\" as an Angular-Slickgrid editor complex object\n    // however \"editor\" is used internally by SlickGrid for it's Editor Factory\n    // so in our lib we will swap \"editor\" and copy it into \"internalColumnEditor\"\n    // then take back \"editor.model\" and make it the new \"editor\" so that SlickGrid Editor Factory still works\n    this._columnDefinitions = this._columnDefinitions.map((c: Column | any) => ({\n      ...c,\n      editor: c.editor && c.editor.model,\n      internalColumnEditor: { ...c.editor }\n    })),\n\n    this.controlAndPluginService.createCheckboxPluginBeforeGridCreation(this._columnDefinitions, this.gridOptions);\n    this.grid = new Slick.Grid(`#${this.gridId}`, this._dataView, this._columnDefinitions, this.gridOptions);\n\n    this.controlAndPluginService.attachDifferentControlOrPlugins(this.grid, this._dataView, this.groupItemMetadataProvider);\n    this.attachDifferentHooks(this.grid, this.gridOptions, this._dataView);\n\n    // emit the Grid & DataView object to make them available in parent component\n    this.onGridCreated.emit(this.grid);\n    this.onDataviewCreated.emit(this._dataView);\n\n    this.grid.init();\n    this._dataView.beginUpdate();\n    this._dataView.setItems(this._dataset, this.gridOptions.datasetIdPropertyName);\n    this._dataView.endUpdate();\n\n    // after the DataView is created & updated execute some processes\n    this.executeAfterDataviewCreated(this.grid, this.gridOptions, this._dataView);\n\n    // attach resize ONLY after the dataView is ready\n    this.attachResizeHook(this.grid, this.gridOptions);\n\n    // attach grouping and header grouping colspan service\n    if (this.gridOptions.createPreHeaderPanel) {\n      this.groupingAndColspanService.init(this.grid, this._dataView);\n    }\n\n    // attach grid  service\n    this.gridService.init(this.grid, this._dataView);\n\n    // when user enables translation, we need to translate Headers on first pass & subsequently in the attachDifferentHooks\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders();\n    }\n\n    // if Export is enabled, initialize the service with the necessary grid and other objects\n    if (this.gridOptions.enableExport) {\n      this.exportService.init(this.grid, this._dataView);\n    }\n\n    // once all hooks are in placed and the grid is initialized, we can emit an event\n    this.onGridInitialized.emit(this.grid);\n\n    // attach the Backend Service API callback functions only after the grid is initialized\n    // because the preProcess() and onInit() might get triggered\n    if (this.gridOptions && this.gridOptions.backendServiceApi) {\n      this.attachBackendCallbackFunctions(this.gridOptions);\n    }\n\n    this.gridStateService.init(this.grid, this.controlAndPluginService, this.filterService, this.sortService);\n\n    this.onAngularGridCreated.emit({\n      // Slick Grid & DataView objects\n      dataView: this._dataView,\n      slickGrid: this.grid,\n\n      // public methods\n      destroy: this.destroy.bind(this),\n\n      // return all available Services (non-singleton)\n      backendService: this.gridOptions && this.gridOptions.backendServiceApi && this.gridOptions.backendServiceApi.service,\n      exportService: this.exportService,\n      filterService: this.filterService,\n      gridEventService: this.gridEventService,\n      gridStateService: this.gridStateService,\n      gridService: this.gridService,\n      groupingService: this.groupingAndColspanService,\n      pluginService: this.controlAndPluginService,\n      resizerService: this.resizer,\n      sortService: this.sortService,\n    });\n  }\n\n  /**\n   * Define what our internal Post Process callback, it will execute internally after we get back result from the Process backend call\n   * For now, this is GraphQL Service only feautre and it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n   */\n  createBackendApiInternalPostProcessCallback(gridOptions: GridOption) {\n    if (gridOptions && gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      // internalPostProcess only works with a GraphQL Service, so make sure it is that type\n      if (backendApi && backendApi.service && backendApi.service instanceof GraphqlService) {\n        backendApi.internalPostProcess = (processResult: any) => {\n          const datasetName = (backendApi && backendApi.service && typeof backendApi.service.getDatasetName === 'function') ? backendApi.service.getDatasetName() : '';\n          if (processResult && processResult.data && processResult.data[datasetName]) {\n            this._dataset = processResult.data[datasetName].nodes;\n            this.refreshGridData(this._dataset, processResult.data[datasetName].totalCount);\n          } else {\n            this._dataset = [];\n          }\n        };\n      }\n    }\n  }\n\n  attachDifferentHooks(grid: any, gridOptions: GridOption, dataView: any) {\n    // on locale change, we have to manually translate the Headers, GridMenu\n    this.subscriptions.push(\n      this.translate.onLangChange.subscribe((event) => {\n        if (gridOptions.enableTranslate) {\n          this.controlAndPluginService.translateColumnHeaders();\n          this.controlAndPluginService.translateColumnPicker();\n          this.controlAndPluginService.translateGridMenu();\n          this.controlAndPluginService.translateHeaderMenu();\n        }\n      })\n    );\n\n    // if user entered some Columns \"presets\", we need to reflect them all in the grid\n    if (gridOptions.presets && Array.isArray(gridOptions.presets.columns) && gridOptions.presets.columns.length > 0) {\n      const gridColumns: Column[] = this.gridStateService.getAssociatedGridColumns(grid, gridOptions.presets.columns);\n      if (gridColumns && Array.isArray(gridColumns) && gridColumns.length > 0) {\n        // make sure that the checkbox selector is also visible if it is enabled\n        if (gridOptions.enableCheckboxSelector) {\n          const checkboxColumn = (Array.isArray(this._columnDefinitions) && this._columnDefinitions.length > 0) ? this._columnDefinitions[0] : null;\n          if (checkboxColumn && checkboxColumn.id === '_checkbox_selector' && gridColumns[0].id !== '_checkbox_selector') {\n            gridColumns.unshift(checkboxColumn);\n          }\n        }\n\n        // finally set the new presets columns (including checkbox selector if need be)\n        grid.setColumns(gridColumns);\n      }\n    }\n\n    // attach external sorting (backend) when available or default onSort (dataView)\n    if (gridOptions.enableSorting) {\n      gridOptions.backendServiceApi ? this.sortService.attachBackendOnSort(grid, dataView) : this.sortService.attachLocalOnSort(grid, dataView);\n    }\n\n    // attach external filter (backend) when available or default onFilter (dataView)\n    if (gridOptions.enableFiltering) {\n      this.filterService.init(grid);\n\n      // if user entered some \"presets\", we need to reflect them all in the DOM\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n        this.filterService.populateColumnFilterSearchTerms();\n      }\n      gridOptions.backendServiceApi ? this.filterService.attachBackendOnFilter(grid) : this.filterService.attachLocalOnFilter(grid, this._dataView);\n    }\n\n    // if user set an onInit Backend, we'll run it right away (and if so, we also need to run preProcess, internalPostProcess & postProcess)\n    if (gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      if (backendApi && backendApi.service && backendApi.service.init) {\n        backendApi.service.init(backendApi.options, gridOptions.pagination, this.grid);\n      }\n    }\n\n    // expose all Slick Grid Events through dispatch\n    for (const prop in grid) {\n      if (grid.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(grid[prop], (e: any, args: any) => {\n          this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\n        });\n      }\n    }\n\n    // expose all Slick DataView Events through dispatch\n    for (const prop in dataView) {\n      if (dataView.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(dataView[prop], (e: any, args: any) => {\n          this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\n        });\n      }\n    }\n\n    // expose GridState Service changes event through dispatch\n    this.subscriptions.push(\n      this.gridStateService.onGridStateChanged.subscribe((gridStateChange: GridStateChange) => {\n        this.onGridStateChanged.emit(gridStateChange);\n      })\n    );\n\n\n    // on cell click, mainly used with the columnDef.action callback\n    this.gridEventService.attachOnCellChange(grid, dataView);\n    this.gridEventService.attachOnClick(grid, dataView);\n\n    this._eventHandler.subscribe(dataView.onRowCountChanged, (e: any, args: any) => {\n      grid.updateRowCount();\n      grid.render();\n    });\n    this._eventHandler.subscribe(dataView.onRowsChanged, (e: any, args: any) => {\n      grid.invalidateRows(args.rows);\n      grid.render();\n    });\n\n    // does the user have a colspan callback?\n    if (gridOptions.colspanCallback) {\n      this._dataView.getItemMetadata = (rowNumber: number) => {\n        const item = this._dataView.getItem(rowNumber);\n        return gridOptions.colspanCallback(item);\n      };\n    }\n  }\n\n  attachBackendCallbackFunctions(gridOptions: GridOption) {\n    const backendApi = gridOptions.backendServiceApi;\n    const serviceOptions: BackendServiceOption = (backendApi && backendApi.service && backendApi.service.options) ? backendApi.service.options : {};\n    const isExecuteCommandOnInit = (!serviceOptions) ? false : ((serviceOptions && serviceOptions.hasOwnProperty('executeProcessCommandOnInit')) ? serviceOptions['executeProcessCommandOnInit'] : true);\n\n    // update backend filters (if need be) before the query runs\n    if (backendApi) {\n      const backendService = backendApi.service;\n\n      // if user entered some any \"presets\", we need to reflect them all in the grid\n      if (gridOptions && gridOptions.presets) {\n         // Filters \"presets\"\n         if (backendService && backendService.updateFilters && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n          backendService.updateFilters(gridOptions.presets.filters, true);\n        }\n        // Sorters \"presets\"\n        if (backendService && backendService.updateSorters && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n          backendService.updateSorters(undefined, gridOptions.presets.sorters);\n        }\n        // Pagination \"presets\"\n        if (backendService && backendService.updatePagination && gridOptions.presets.pagination) {\n          backendService.updatePagination(gridOptions.presets.pagination.pageNumber, gridOptions.presets.pagination.pageSize);\n        }\n      } else {\n        const columnFilters = this.filterService.getColumnFilters();\n        if (columnFilters && backendService && backendService.updateFilters) {\n          backendService.updateFilters(columnFilters, false);\n        }\n      }\n    }\n\n    if (backendApi && backendApi.service && (backendApi.onInit || isExecuteCommandOnInit)) {\n      const query = (typeof backendApi.service.buildQuery === 'function') ? backendApi.service.buildQuery() : '';\n      const observableOrPromise = (isExecuteCommandOnInit) ? backendApi.process(query) : backendApi.onInit(query);\n\n      // wrap this inside a setTimeout to avoid timing issue since the gridOptions needs to be ready before running this onInit\n      setTimeout(async () => {\n        if (backendApi.preProcess) {\n          backendApi.preProcess();\n        }\n\n        // keep start time & end timestamps & return it after process execution\n        const startTime = new Date();\n\n        // the process could be an Observable (like HttpClient) or a Promise\n        // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n        const processResult = await castToPromise(observableOrPromise);\n\n        const endTime = new Date();\n\n        // define what our internal Post Process callback, only available for GraphQL Service for now\n        // it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n        if (processResult && backendApi && backendApi.service instanceof GraphqlService && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          if (processResult instanceof Object) {\n            processResult.timestamps = {\n              startTime,\n              endTime,\n              executionTime: endTime.valueOf() - startTime.valueOf(),\n            };\n          }\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  attachResizeHook(grid: any, options: GridOption) {\n    // expand/autofit columns on first page load\n    if (grid && options.autoFitColumnsOnFirstLoad) {\n      grid.autosizeColumns();\n    }\n\n    // auto-resize grid on browser resize\n    this.resizer.init(grid);\n    if (options.enableAutoResize) {\n      this.resizer.attachAutoResizeDataGrid({ height: this.gridHeight, width: this.gridWidth });\n      if (grid && options.autoFitColumnsOnFirstLoad) {\n        grid.autosizeColumns();\n      }\n    }\n  }\n\n  executeAfterDataviewCreated(grid: any, gridOptions: GridOption, dataView: any) {\n    // if user entered some Sort \"presets\", we need to reflect them all in the DOM\n    if (gridOptions.enableSorting) {\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n        this.sortService.loadLocalPresets(grid, dataView);\n      }\n    }\n  }\n\n  mergeGridOptions(gridOptions): GridOption {\n    gridOptions.gridId = this.gridId;\n    gridOptions.gridContainerId = `slickGridContainer-${this.gridId}`;\n    if (gridOptions.enableFiltering || this.forRootConfig.enableFiltering) {\n      gridOptions.showHeaderRow = true;\n    }\n    // use jquery extend to deep merge and avoid immutable properties changed in GlobalGridOptions after route change\n    return $.extend(true, {}, GlobalGridOptions, this.forRootConfig, gridOptions);\n  }\n\n  paginationChanged(pagination: Pagination) {\n    this.gridStateService.onGridStateChanged.next({\n      change: { newValues: pagination, type: GridStateType.pagination },\n      gridState: this.gridStateService.getCurrentGridState()\n    });\n  }\n\n  /**\n   * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well\n   * @param dataset\n   */\n  refreshGridData(dataset: any[], totalCount?: number) {\n    if (dataset && this.grid && this._dataView && typeof this._dataView.setItems === 'function') {\n      this._dataView.setItems(dataset, this.gridOptions.datasetIdPropertyName);\n      if (!this.gridOptions.backendServiceApi) {\n        this._dataView.reSort();\n      }\n\n      // this.grid.setData(dataset);\n      this.grid.invalidate();\n      this.grid.render();\n\n      if (this.gridOptions.enablePagination || this.gridOptions.backendServiceApi) {\n        // do we want to show pagination?\n        // if we have a backendServiceApi and the enablePagination is undefined, we'll assume that we do want to see it, else get that defined value\n        this.showPagination = ((this.gridOptions.backendServiceApi && this.gridOptions.enablePagination === undefined) ? true : this.gridOptions.enablePagination) || false;\n\n        // before merging the grid options, make sure that it has the totalItems count\n        // once we have that, we can merge and pass all these options to the pagination component\n        if (!this.gridOptions.pagination) {\n          this.gridOptions.pagination = (this.gridOptions.pagination) ? this.gridOptions.pagination : undefined;\n        }\n        if (this.gridOptions.pagination && totalCount) {\n          this.gridOptions.pagination.totalItems = totalCount;\n        }\n        if (this.gridOptions.presets && this.gridOptions.presets.pagination && this.gridOptions.pagination) {\n          this.gridOptions.pagination.pageSize = this.gridOptions.presets.pagination.pageSize;\n          this.gridOptions.pagination.pageNumber = this.gridOptions.presets.pagination.pageNumber;\n        }\n        this.gridPaginationOptions = this.mergeGridOptions(this.gridOptions);\n      }\n      if (this.grid &&  this.gridOptions.enableAutoResize) {\n        // resize the grid inside a slight timeout, in case other DOM element changed prior to the resize (like a filter/pagination changed)\n        this.resizer.resizeGrid(10, { height: this.gridHeight, width: this.gridWidth });\n      }\n    }\n  }\n\n  /**\n   * Dynamically change or update the column definitions list.\n   * We will re-render the grid so that the new header and data shows up correctly.\n   * If using i18n, we also need to trigger a re-translate of the column headers\n   */\n  updateColumnDefinitionsList(newColumnDefinitions) {\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders(false, newColumnDefinitions);\n    } else {\n      this.controlAndPluginService.renderColumnHeaders(newColumnDefinitions);\n    }\n    this.grid.autosizeColumns();\n  }\n\n  /** Toggle the filter row displayed on first row\n   * @param isShowing\n   */\n  showHeaderRow(isShowing: boolean) {\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  /** Toggle the filter row displayed on first row */\n  toggleHeaderRow() {\n    const isShowing = !this.grid.getOptions().showHeaderRow;\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  private dispatchCustomEvent(eventName: string, data?: any, isBubbling: boolean = true) {\n    const eventInit: CustomEventInit = { bubbles: isBubbling };\n    if (data) {\n      eventInit.detail = data;\n    }\n    this.customElm.nativeElement.dispatchEvent(new CustomEvent(eventName, eventInit));\n  }\n}\n",
    "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AngularSlickgridComponent } from './../components/angular-slickgrid.component';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport { FilterFactory } from '../filters/filterFactory';\r\nimport { GraphqlService } from './../services/graphql.service';\r\nimport { GridOdataService } from './../services/grid-odata.service';\r\nimport { GridOption } from './../models/gridOption.interface';\r\nimport { SlickPaginationComponent } from './../components/slick-pagination.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TranslateModule\r\n  ],\r\n  declarations: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  exports: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  entryComponents: [AngularSlickgridComponent]\r\n})\r\nexport class AngularSlickgridModule {\r\n  static forRoot(config: GridOption = {}) {\r\n    return {\r\n      ngModule: AngularSlickgridModule,\r\n      providers: [\r\n        { provide: 'config', useValue: config },\r\n        CollectionService,\r\n        FilterFactory,\r\n        GraphqlService,\r\n        GridOdataService\r\n      ]\r\n    };\r\n  }\r\n}\r\n"
  ],
  "names": [
    "__awaiter",
    "thisArg",
    "_arguments",
    "P",
    "generator",
    "Promise",
    "resolve",
    "reject",
    "fulfilled",
    "value",
    "step",
    "next",
    "e",
    "rejected",
    "result",
    "done",
    "then",
    "apply",
    "__generator",
    "body",
    "f",
    "y",
    "t",
    "g",
    "_",
    "label",
    "sent",
    "trys",
    "ops",
    "verb",
    "throw",
    "return",
    "Symbol",
    "iterator",
    "this",
    "n",
    "v",
    "op",
    "TypeError",
    "call",
    "pop",
    "length",
    "push",
    "__values",
    "o",
    "m",
    "i",
    "__read",
    "r",
    "ar",
    "error",
    "__spread",
    "arguments",
    "concat",
    "colon",
    "comma",
    "equalSign",
    "pipe",
    "semicolon",
    "space",
    "tab",
    "doubleColon",
    "doublePipe",
    "doubleSemicolon",
    "csv",
    "doc",
    "docx",
    "pdf",
    "txt",
    "xls",
    "xlsx",
    "columns",
    "filter",
    "pagination",
    "sorter",
    "empty",
    "contains",
    "lessThan",
    "lessThanOrEqual",
    "greaterThan",
    "greaterThanOrEqual",
    "notEqual",
    "equal",
    "endsWith",
    "startsWith",
    "in",
    "notIn",
    "inContains",
    "notInContains",
    "asc",
    "ASC",
    "desc",
    "DESC",
    "moment",
    "moment_",
    "addWhiteSpaces",
    "nbSpaces",
    "htmlEntityDecode",
    "input",
    "replace",
    "match",
    "dec",
    "String",
    "fromCharCode",
    "arraysEqual",
    "a",
    "b",
    "orderMatters",
    "sort",
    "castToPromise",
    "fromServiceName",
    "promise",
    "Observable",
    "first",
    "toPromise",
    "take",
    "Error",
    "findOrDefault",
    "array",
    "logic",
    "defaultVal",
    "find",
    "decimalFormatted",
    "minDecimal",
    "maxDecimal",
    "isNaN",
    "minDec",
    "undefined",
    "maxDec",
    "amount",
    "Math",
    "round",
    "pow",
    "indexOf",
    "mapMomentDateFormatWithFieldType",
    "fieldType",
    "map",
    "FieldType",
    "dateTime",
    "dateTimeIso",
    "dateTimeIsoAmPm",
    "dateTimeIsoAM_PM",
    "dateUs",
    "dateUsShort",
    "dateTimeUs",
    "dateTimeUsAmPm",
    "dateTimeUsAM_PM",
    "dateTimeUsShort",
    "dateTimeUsShortAmPm",
    "dateUtc",
    "date",
    "dateIso",
    "mapFlatpickrDateFormatWithFieldType",
    "mapOperatorType",
    "operator",
    "OperatorType",
    "mapOperatorByFieldType",
    "string",
    "unknown",
    "float",
    "number",
    "dateTimeUsShortAM_PM",
    "parseUtcDate",
    "inputDateString",
    "useUtc",
    "test",
    "dateString",
    "decodeURIComponent",
    "dateMoment",
    "Date",
    "isValid",
    "year",
    "toString",
    "utc",
    "format",
    "sanitizeHtmlToText",
    "htmlString",
    "temp",
    "document",
    "createElement",
    "innerHTML",
    "textContent",
    "innerText",
    "titleCase",
    "charAt",
    "toUpperCase",
    "slice",
    "toCamelCase",
    "str",
    "offset",
    "toLowerCase",
    "compareDates",
    "value1",
    "value2",
    "sortDirection",
    "strict",
    "diff",
    "date1",
    "date2",
    "parseInt",
    "FORMAT",
    "dateUsShortSorter",
    "dateSorter",
    "ISO_8601",
    "dateIsoSorter",
    "dateUsSorter",
    "numericSorter",
    "x",
    "parseFloat",
    "stringSorter",
    "position",
    "Sorters",
    "numeric",
    "sortByFieldType",
    "sortResult",
    "CollectionService",
    "translate",
    "prototype",
    "filterCollection",
    "collection",
    "filterBy",
    "filteredCollection",
    "property_1",
    "property",
    "value_1",
    "item",
    "sortCollection",
    "sortBy",
    "enableTranslateLabel",
    "_this",
    "sortedCollection",
    "property_2",
    "sortDirection_1",
    "hasOwnProperty",
    "sortDesc",
    "fieldType_1",
    "dataRow1",
    "dataRow2",
    "instant",
    "parseBoolean",
    "type",
    "Injectable",
    "TranslateService",
    "booleanFilterCondition",
    "options",
    "searchTerm",
    "Array",
    "isArray",
    "searchTerms",
    "cellValue",
    "testFilterCondition",
    "includes",
    "findIndex",
    "val",
    "dateFilterCondition",
    "searchDateFormat",
    "filterSearchType",
    "dateCell",
    "dateSearch",
    "dateIsoFilterCondition",
    "dateUsFilterCondition",
    "dateUsShortFilterCondition",
    "dateUtcFilterCondition",
    "collectionSearchFilterCondition",
    "numberFilterCondition",
    "stringFilterCondition",
    "cellValueLastChar",
    "executeMappedCondition",
    "boolean",
    "FilterConditions",
    "booleanFilter",
    "collectionSearchFilter",
    "dateFilter",
    "dateIsoFilter",
    "dateUtcFilter",
    "dateUsFilter",
    "dateUsShortFilter",
    "numberFilter",
    "stringFilter",
    "testFilter",
    "require",
    "CompoundDateFilter",
    "_clearFilterTriggered",
    "Object",
    "defineProperty",
    "get",
    "grid",
    "getOptions",
    "_operator",
    "set",
    "init",
    "args",
    "callback",
    "columnDef",
    "$filterElm",
    "createDomElement",
    "$filterInputElm",
    "keyup",
    "onTriggerEvent",
    "$selectOperatorElm",
    "change",
    "clear",
    "flatInstance",
    "destroy",
    "off",
    "remove",
    "setValues",
    "values",
    "setDate",
    "buildDatePickerInput",
    "inputFormat",
    "outputFormat",
    "outputType",
    "currentLocale",
    "currentLang",
    "substring",
    "pickerOptions",
    "defaultDate",
    "altInput",
    "altFormat",
    "dateFormat",
    "wrap",
    "closeOnSelect",
    "locale",
    "loadFlatpickrLocale",
    "onChange",
    "selectedDates",
    "dateStr",
    "instance",
    "_currentValue",
    "enableTime",
    "CustomEvent",
    "placeholder",
    "gridOptions",
    "defaultFilterPlaceholder",
    "$",
    "flatpickr",
    "buildSelectOperatorHtmlString",
    "optionValues",
    "getOptionValues",
    "optionValueString",
    "forEach",
    "option",
    "description",
    "$headerElm",
    "getHeaderRowColumn",
    "id",
    "$filterContainerElm",
    "$containerInputGroup",
    "$operatorInputGroupAddon",
    "append",
    "attr",
    "data",
    "addClass",
    "appendTo",
    "localeDefault",
    "default",
    "clearFilterTriggered",
    "selectedOperator",
    "text",
    "removeClass",
    "hide",
    "close",
    "show",
    "open",
    "CompoundInputFilter",
    "buildInputHtmlString",
    "CompoundSliderFilter",
    "params",
    "_elementRangeInputId",
    "field",
    "_elementRangeOutputId",
    "filterParams",
    "hideSliderNumber",
    "on",
    "target",
    "getElementById",
    "clearedValue",
    "sliderStartValue",
    "$containerInputGroupElm",
    "children",
    "last",
    "html",
    "buildTemplateHtmlString",
    "minValue",
    "filterProperties",
    "maxValue",
    "defaultValue",
    "valueStep",
    "buildTemplateSliderTextHtmlString",
    "searchTermInput",
    "$sliderTextInputAppendAddon",
    "InputFilter",
    "filterTemplate",
    "trigger",
    "MultipleSelectFilter",
    "collectionService",
    "isFilled",
    "defaultOptions",
    "container",
    "maxHeight",
    "okButton",
    "addTitle",
    "countSelected",
    "allSelected",
    "selectAllText",
    "selectAllDelimiter",
    "onClose",
    "selectedItems",
    "multipleSelect",
    "siblings",
    "labelName",
    "customStructure",
    "valueName",
    "newCollection",
    "collectionFilterBy",
    "collectionSortBy",
    "optionCollection",
    "labelKey",
    "selected",
    "findValueInSearchTerms",
    "textLabel",
    "assign",
    "filterOptions",
    "SelectFilter",
    "SingleSelectFilter",
    "single",
    "selectedItem",
    "SliderFilter",
    "Filters",
    "compoundDate",
    "compoundInput",
    "compoundSlider",
    "slider",
    "singleSelect",
    "select",
    "GlobalGridOptions",
    "alwaysShowVerticalScroll",
    "autoEdit",
    "asyncEditorLoading",
    "autoFitColumnsOnFirstLoad",
    "autoResize",
    "bottomPadding",
    "minHeight",
    "minWidth",
    "sidePadding",
    "cellHighlightCssClass",
    "checkboxSelector",
    "cssClass",
    "columnPicker",
    "hideForceFitButton",
    "hideSyncResizeButton",
    "datasetIdPropertyName",
    "defaultFilter",
    "editable",
    "enableAutoResize",
    "enableCellNavigation",
    "enableColumnPicker",
    "enableColumnReorder",
    "enableExport",
    "enableGridMenu",
    "enableHeaderMenu",
    "enableMouseHoverHighlightRow",
    "enableSorting",
    "enableTextSelectionOnCells",
    "explicitInitialization",
    "exportOptions",
    "delimiter",
    "DelimiterType",
    "exportWithFormatter",
    "filename",
    "FileType",
    "groupingAggregatorRowText",
    "sanitizeDataExport",
    "useUtf8WithBom",
    "forceFitColumns",
    "gridMenu",
    "hideClearAllFiltersCommand",
    "hideClearAllSortingCommand",
    "hideExportCsvCommand",
    "hideExportTextDelimitedCommand",
    "hideRefreshDatasetCommand",
    "hideToggleFilterCommand",
    "iconCssClass",
    "iconClearAllFiltersCommand",
    "iconClearAllSortingCommand",
    "iconExportCsvCommand",
    "iconExportTextDelimitedCommand",
    "iconRefreshDatasetCommand",
    "iconToggleFilterCommand",
    "menuWidth",
    "resizeOnShowHeaderRow",
    "headerMenu",
    "autoAlign",
    "autoAlignOffset",
    "iconSortAscCommand",
    "iconSortDescCommand",
    "iconColumnHideCommand",
    "hideColumnHideCommand",
    "hideSortCommands",
    "headerRowHeight",
    "multiColumnSort",
    "numberedMultiColumnSort",
    "tristateMultiColumnSort",
    "sortColNumberInSeparateSpan",
    "suppressActiveCellChangeOnEdit",
    "pageSizes",
    "pageSize",
    "totalItems",
    "rowHeight",
    "showHeaderRow",
    "topPanelHeight",
    "SlickgridConfig",
    "FilterFactory",
    "config",
    "_options",
    "createFilter",
    "columnFilter",
    "model",
    "FilterService",
    "filterFactory",
    "_eventHandler",
    "Slick",
    "EventHandler",
    "_filters",
    "_columnFilters",
    "onFilterChanged",
    "Subject",
    "onFilterCleared",
    "_grid",
    "getColumns",
    "attachBackendOnFilter",
    "_slickSubscriber",
    "Event",
    "subscribe",
    "attachBackendOnFilterSubscribe",
    "bind",
    "onHeaderRowCellRendered",
    "addFilterTemplateToHeaderRow",
    "event",
    "backendApi",
    "_gridOptions",
    "backendServiceApi",
    "process",
    "service",
    "preProcess",
    "processOnFilterChanged",
    "query",
    "_a",
    "emitFilterChanged",
    "processResult",
    "internalPostProcess",
    "postProcess",
    "attachLocalOnFilter",
    "dataView",
    "_dataView",
    "setFilterArgs",
    "columnFilters",
    "setFilter",
    "customLocalFilter",
    "columnId",
    "refresh",
    "clearFilters",
    "invalidate",
    "render",
    "tslib_1.__values",
    "keys",
    "_b",
    "columnIndex",
    "getColumnIndex",
    "queryField",
    "queryFieldFilter",
    "searchValues",
    "fieldSearchValue",
    "matches",
    "lastValueChar",
    "join",
    "k",
    "ln",
    "useFormatterOuputToFilter",
    "rowIndex",
    "getIdxById",
    "formatter",
    "dispose",
    "disposeColumnFilters",
    "unsubscribeAll",
    "unsubscribe",
    "index",
    "getColumnFilters",
    "getCurrentLocalFilters",
    "currentFilters",
    "colId",
    "callbackSearchEvent",
    "hasSearchTerms",
    "termsCount",
    "colFilter",
    "triggerEvent",
    "serviceOptions",
    "_onFilterChangedOptions",
    "column",
    "filterable",
    "filter_1",
    "updateColumnFilters",
    "filterArguments",
    "filterExistIndex",
    "filt",
    "name",
    "sender",
    "backendService",
    "getCurrentFilters",
    "populateColumnFilterSearchTerms",
    "presets",
    "filters",
    "filters_1",
    "_columnDefinitions",
    "columnPreset",
    "presetFilter",
    "slickEvent",
    "isPropagationStopped",
    "extend",
    "EventData",
    "notify",
    "ExportService",
    "_lineCarriageReturn",
    "_hasGroupedItems",
    "onGridBeforeExportToFile",
    "onGridAfterExportToFile",
    "exportToFile",
    "_exportOptions",
    "dataOutput",
    "getDataOutput",
    "setTimeout",
    "downloadOptions",
    "csvContent",
    "startDownloadFile",
    "groupByColumnHeader",
    "groupingColumnHeaderTitle",
    "_exportQuoteWrapper",
    "outputDataString",
    "grouping",
    "getGrouping",
    "_columnHeaders",
    "getColumnHeaders",
    "header",
    "title",
    "getAllGridRowData",
    "lineCarriageReturn",
    "lineCount",
    "getLength",
    "rowNumber",
    "itemObj",
    "getItem",
    "readRegularRowData",
    "__groupTotals",
    "readGroupedTitleRow",
    "readGroupedTotalRow",
    "columnHeaders",
    "fieldName",
    "headerKey",
    "skippedField",
    "excludeFromExport",
    "width",
    "key",
    "row",
    "idx",
    "rowOutputString",
    "exportQuoteWrapper",
    "col",
    "fieldId",
    "isEvaluatingFormatter",
    "exportCustomFormatter",
    "itemData",
    "exportCsvForceToKeepAsString",
    "groupName",
    "level",
    "output",
    "groupTotalsFormatter",
    "navigator",
    "appName",
    "outputData",
    "mimeType",
    "TextEncoder",
    "encode",
    "blob",
    "Blob",
    "msSaveOrOpenBlob",
    "link",
    "csvUrl",
    "URL",
    "createObjectURL",
    "href",
    "setAttribute",
    "style",
    "visibility",
    "appendChild",
    "click",
    "removeChild",
    "SortService",
    "_currentLocalSorters",
    "_isBackendGrid",
    "onSortChanged",
    "onSortCleared",
    "attachBackendOnSort",
    "onSort",
    "onBackendSortChanged",
    "processOnSortChanged",
    "emitSortChanged",
    "attachLocalOnSort",
    "sortColumns",
    "sortCols",
    "sortAsc",
    "sortCol",
    "sortColumn",
    "direction",
    "SortDirection",
    "onLocalSortChanged",
    "clearSorting",
    "setSortColumns",
    "getCurrentLocalSorters",
    "getPreviousColumnSorts",
    "getSortColumns",
    "reduce",
    "cols",
    "loadLocalPresets",
    "sorters",
    "presetSorting",
    "gridColumn",
    "l",
    "columnSortObj",
    "SortDirectionNumber",
    "sortField",
    "neutral",
    "currentSorters",
    "getCurrentSorters",
    "Constants",
    "TEXT_CANCEL",
    "TEXT_CLEAR_ALL_FILTERS",
    "TEXT_CLEAR_ALL_SORTING",
    "TEXT_COLUMNS",
    "TEXT_COMMANDS",
    "TEXT_EXPORT_IN_CSV_FORMAT",
    "TEXT_EXPORT_IN_TEXT_FORMAT",
    "TEXT_FORCE_FIT_COLUMNS",
    "TEXT_HIDE_COLUMN",
    "TEXT_REFRESH_DATASET",
    "TEXT_SAVE",
    "TEXT_SYNCHRONOUS_RESIZE",
    "TEXT_SORT_ASCENDING",
    "TEXT_SORT_DESCENDING",
    "TEXT_TOGGLE_FILTER_ROW",
    "VALIDATION_EDITOR_VALID_NUMBER",
    "VALIDATION_EDITOR_VALID_INTEGER",
    "VALIDATION_EDITOR_NUMBER_BETWEEN",
    "VALIDATION_EDITOR_DECIMAL_BETWEEN",
    "ControlAndPluginService",
    "exportService",
    "filterService",
    "sortService",
    "areVisibleColumnDifferent",
    "extensionList",
    "getAllColumns",
    "allColumns",
    "getVisibleColumns",
    "visibleColumns",
    "getAllExtensions",
    "getExtensionByName",
    "p",
    "autoResizeColumns",
    "autosizeColumns",
    "attachDifferentControlOrPlugins",
    "groupItemMetadataProvider",
    "enableTranslate",
    "translateItems",
    "columnPickerControl",
    "createColumnPicker",
    "userOriginalGridMenu",
    "gridMenuControl",
    "createGridMenu",
    "enableAutoTooltip",
    "autoTooltipPlugin",
    "AutoTooltips",
    "autoTooltipOptions",
    "registerPlugin",
    "enableGrouping",
    "groupItemMetaProviderPlugin",
    "enableCheckboxSelector",
    "checkboxSelectorPlugin",
    "rowSelectionPlugin",
    "getSelectionModel",
    "RowSelectionModel",
    "rowSelectionOptions",
    "setSelectionModel",
    "preselectedRows",
    "selectRows",
    "enableRowSelection",
    "enableHeaderButton",
    "headerButtonsPlugin",
    "Plugins",
    "HeaderButtons",
    "headerButton",
    "onCommand",
    "headerMenuPlugin",
    "createHeaderMenu",
    "enableExcelCopyBuffer",
    "createUndoRedoBuffer",
    "hookUndoShortcutKey",
    "createCellExternalCopyManagerPlugin",
    "registerPlugins",
    "plugin",
    "createCheckboxPluginBeforeGridCreation",
    "columnDefinitions",
    "CheckboxSelectColumn",
    "selectionColumn",
    "getColumnDefinition",
    "excludeFromQuery",
    "excludeFromHeaderMenu",
    "unshift",
    "newRowIds",
    "pluginOptions",
    "clipboardCommandHandler",
    "editCommand",
    "undoRedoBuffer",
    "queueAndExecuteCommand",
    "dataItemColumnValueExtractor",
    "editor",
    "formattedOutput",
    "readOnlyMode",
    "includeHeaderWhenCopying",
    "newRowCreator",
    "count",
    "getData",
    "addItem",
    "CellSelectionModel",
    "cellExternalCopyManagerPlugin",
    "CellExternalCopyManager",
    "columnTitle",
    "getPickerTitleOutputString",
    "forceFitTitle",
    "syncResizeTitle",
    "Controls",
    "ColumnPicker",
    "onColumnsChanged",
    "getDefaultGridMenuOptions",
    "customItems",
    "addGridMenuCustomCommands",
    "sortItems",
    "GridMenu",
    "onBeforeMenuShow",
    "executeGridMenuInternalCustomCommands",
    "onMenuClose",
    "gridUid",
    "getUID",
    "getDefaultHeaderMenuOptions",
    "addHeaderMenuCustomCommands",
    "HeaderMenu",
    "executeHeaderMenuInternalCommands",
    "commandQueue",
    "commandCtr",
    "execute",
    "undo",
    "command",
    "GlobalEditorLock",
    "cancelCurrentEdit",
    "redo",
    "hideColumn",
    "removeColumnByIndex",
    "setColumns",
    "keydown",
    "which",
    "ctrlKey",
    "metaKey",
    "shiftKey",
    "gridMenuCustomItems",
    "enableFiltering",
    "disabled",
    "positionOrder",
    "customTitle",
    "headerMenuOptions",
    "menu",
    "items",
    "columnHeaderMenuItems",
    "sortable",
    "itemA",
    "itemB",
    "newSortColumns",
    "setHeaderRowVisibility",
    "setTopPanelVisibility",
    "showTopPanel",
    "refreshBackendDataset",
    "buildQuery",
    "el",
    "translateColumnPicker",
    "emptyColumnPickerTitles",
    "translateGridMenu",
    "emptyGridMenuTitles",
    "translateHeaderMenu",
    "resetHeaderMenuTranslations",
    "translateColumnHeaders",
    "newColumnDefinitions",
    "use",
    "renderColumnHeaders",
    "propName",
    "pickerName",
    "picker",
    "titleKey",
    "columnHeaderMenuItems_1",
    "propertyName",
    "inputKey",
    "outputKey",
    "items_1",
    "items_1_1",
    "timer",
    "GraphqlQueryBuilder",
    "queryFnName",
    "aliasOrFilter",
    "head",
    "alias",
    "prop",
    "getGraphQLValue",
    "searches",
    "_i",
    "searchKeys",
    "parceFind",
    "setAlias",
    "ReferenceError",
    "_levelA",
    "currentValue",
    "itemX",
    "RangeError",
    "propsAA",
    "JSON",
    "stringify",
    "propS",
    "objectToString",
    "obj",
    "sourceA",
    "DEFAULT_ITEMS_PER_PAGE",
    "GraphqlService",
    "defaultOrderBy",
    "defaultPaginationOptions",
    "datasetName",
    "queryQb",
    "QueryBuilder",
    "datasetQb",
    "dataQb",
    "columnIds",
    "columnDefinitions_1",
    "columnDefinitions_1_1",
    "fields",
    "buildFilterQuery",
    "isWithCursor",
    "pageInfoQb",
    "node",
    "datasetFilters",
    "paginationOptions",
    "sortingOptions",
    "orderBy",
    "filteringOptions",
    "addLocaleIntoQuery",
    "i18n",
    "extraQueryArguments",
    "_c",
    "queryArgument",
    "trimDoubleQuotesOnEnumField",
    "keepArgumentFieldDoubleQuotes",
    "inputArray",
    "shift",
    "split",
    "getInitPaginationOptions",
    "getDatasetName",
    "_currentFilters",
    "getCurrentPagination",
    "_currentPagination",
    "_currentSorters",
    "resetPaginationOptions",
    "after",
    "before",
    "pageNumber",
    "updateOptions",
    "debounceTypingDelay",
    "filterTypingDebounce",
    "castFilterToColumnFilter",
    "clearTimeout",
    "updateFilters",
    "processOnPaginationChanged",
    "updatePagination",
    "newPage",
    "updateSorters",
    "isUpdatedByPreset",
    "searchValue",
    "searchByArray",
    "_loop_1",
    "columnFilter_1",
    "this_1",
    "presetSorters",
    "graphqlSorters",
    "tmpSorterArray",
    "queryFieldSorter",
    "sortColumns_1",
    "sortColumns_1_1",
    "inputStr",
    "enumSearchWords",
    "patternWordInQuotes",
    "patternRegex",
    "reg",
    "RegExp",
    "group1",
    "group2",
    "group3",
    "removeDoubleQuotes",
    "tmpFilter",
    "padZero",
    "s",
    "trim",
    "allTitleCase",
    "outputStr",
    "substr",
    "OdataService",
    "_odataOptions",
    "filterQueue",
    "_defaultSortBy",
    "queryTmpArray",
    "top",
    "skip",
    "argument",
    "filterStr",
    "filterBySeparator",
    "saveColumnFilter",
    "updateFilterFromListTerms",
    "getFilterByColumn",
    "columnName",
    "getFilterCount",
    "removeColumnFilter",
    "search",
    "filterOptionObject",
    "updateFilterFromTerm",
    "searchBy",
    "tmpSearchByArray",
    "fieldSearchTerms",
    "tmpSearchTerms",
    "j",
    "lnj",
    "lnk",
    "caseType",
    "CaseType",
    "pascalCase",
    "GridOdataService",
    "odataService",
    "mergedOptions",
    "terms",
    "_loop_2",
    "columnFilter_2",
    "this_2",
    "bypassOdataQuery",
    "bypassBackendQuery",
    "encodeURIComponent",
    "dateFormatted",
    "mapOdataOperator",
    "sortByArray",
    "sorterArray",
    "sortColumns_2",
    "sortColumns_2_1",
    "columnFieldName",
    "csvString",
    "GridEventService",
    "attachOnCellChange",
    "onCellChange",
    "cell",
    "getDataItem",
    "returnedArgs",
    "gridDefinition",
    "dataContext",
    "attachOnClick",
    "onClick",
    "onCellClick",
    "GridStateService",
    "_columns",
    "_currentColumns",
    "subscriptions",
    "onGridStateChanged",
    "controlAndPluginService",
    "subscribeToAllGridChanges",
    "subscription",
    "getCurrentGridState",
    "gridState",
    "getCurrentColumns",
    "currentPagination",
    "getAssociatedCurrentColumns",
    "gridColumns",
    "currentColumns",
    "headerCssClass",
    "getAssociatedGridColumns",
    "currentColumn",
    "c",
    "hookExtensionEventToGridStateChange",
    "extensionName",
    "eventName",
    "extension",
    "newValues",
    "GridStateType",
    "hookSlickGridEventToGridStateChange",
    "resetColumns",
    "GridService",
    "gridStateService",
    "getColumnFromEventArguments",
    "getDataItemByRowNumber",
    "getItemRowMetadata",
    "previousItemMetadata",
    "meta",
    "cssClasses",
    "isEmptyObject",
    "_dirty",
    "rowClass",
    "highlightRow",
    "fadeDelay",
    "setSelectedRows",
    "getItemMetadata",
    "updateItem",
    "gridId",
    "getDataItemByRowIndex",
    "getDataItemByRowIndexes",
    "indexes",
    "dataItems",
    "getSelectedRows",
    "getSelectedRowsDataItem",
    "selectedRowIndexes",
    "setSelectedRow",
    "rowIndexes",
    "renderGrid",
    "resetGrid",
    "originalColumns",
    "addItemToDatagrid",
    "shouldHighlightRow",
    "insertItem",
    "scrollRowIntoView",
    "addItemsToDatagrid",
    "deleteDataGridItem",
    "itemId",
    "deleteDataGridItemById",
    "getRowById",
    "deleteItem",
    "updateDataGridItem",
    "updateDataGridItemById",
    "GroupingAndColspanService",
    "createPreHeaderPanel",
    "createPreHeaderRowGroupingTitle",
    "onColumnsResized",
    "onRowCountChanged",
    "$preHeaderPanel",
    "getPreHeaderPanel",
    "css",
    "getHeadersWidth",
    "parent",
    "headerColumnWidthDiff",
    "getHeaderColumnWidthDiff",
    "lastColumnGroup",
    "widthTotal",
    "columnGroup",
    "ResizerService",
    "onGridBeforeResize",
    "attachAutoResizeDataGrid",
    "newSizes",
    "gridDomElm",
    "resizeGrid",
    "window",
    "_gridUid",
    "calculateGridNewDimensions",
    "containerElm",
    "containerId",
    "gridContainerId",
    "windowElm",
    "enablePagination",
    "gridHeight",
    "height",
    "coordOffsetTop",
    "availableHeight",
    "availableWidth",
    "newHeight",
    "newWidth",
    "getLastResizeDimensions",
    "_lastDimensions",
    "delay",
    "availableDimensions",
    "gridElm",
    "gridContainerElm",
    "heightWithPagination",
    "exec",
    "userAgent",
    "resizeCanvas",
    "AvgAggregator",
    "_field",
    "_count",
    "_nonNullCount",
    "_sum",
    "accumulate",
    "storeResult",
    "groupTotals",
    "avg",
    "MinAggregator",
    "_min",
    "min",
    "MaxAggregator",
    "_max",
    "max",
    "SumAggregator",
    "sum",
    "Aggregators",
    "Avg",
    "Min",
    "Max",
    "Sum",
    "CheckboxEditor",
    "internalColumnEditor",
    "columnEditor",
    "validator",
    "$input",
    "focus",
    "loadValue",
    "preClick",
    "serializeValue",
    "applyValue",
    "state",
    "isValueChanged",
    "validate",
    "validationResults",
    "valid",
    "msg",
    "DateEditor",
    "getCurrentLocale",
    "save",
    "commitChanges",
    "getColumnEditor",
    "domValue",
    "toDate",
    "FloatEditor",
    "getInputDecimalSteps",
    "keyCode",
    "KeyCode",
    "LEFT",
    "RIGHT",
    "stopImmediatePropagation",
    "getDecimalPlaces",
    "rtn",
    "decimalPlaces",
    "decimals",
    "zeroString",
    "decPlaces",
    "toFixed",
    "elmValue",
    "errorMsg",
    "errorMessage",
    "mapValidation",
    "{{minValue}}",
    "{{maxValue}}",
    "{{minDecimal}}",
    "{{maxDecimal}}",
    "matched",
    "IntegerEditor",
    "LongTextEditor",
    "_translate",
    "cancelText",
    "saveText",
    "$container",
    "$wrapper",
    "cancel",
    "handleKeyDown",
    "ENTER",
    "ESCAPE",
    "preventDefault",
    "TAB",
    "navigatePrev",
    "navigateNext",
    "cancelChanges",
    "left",
    "MultipleSelectEditor",
    "offsetLeft",
    "onOpen",
    "autoAdjustDropPosition",
    "$editorElm",
    "editorElmOptions",
    "editorTemplate",
    "each",
    "$e",
    "currentValues",
    "multipleSelectDomElement",
    "multipleSelectOptions",
    "windowHeight",
    "innerHeight",
    "pageScroll",
    "scrollTop",
    "$msDrop",
    "msDropHeight",
    "msDropOffsetTop",
    "newOffsetTop",
    "elementOptions",
    "SingleSelectEditor",
    "SliderEditor",
    "$sliderNumber",
    "editorParams",
    "TextEditor",
    "getValue",
    "setValue",
    "Editors",
    "checkbox",
    "integer",
    "longText",
    "arrayToCsvFormatter",
    "boldFormatter",
    "checkboxFormatter",
    "checkmarkFormatter",
    "collectionFormatter",
    "collectionEditorFormatter",
    "complexObjectFormatter",
    "dateIsoFormatter",
    "isDateValid",
    "dateTimeIsoFormatter",
    "dateTimeIsoAmPmFormatter",
    "dateTimeUsAmPmFormatter",
    "dateTimeUsFormatter",
    "dateUsFormatter",
    "decimalFormatter",
    "minDecimalPlaces",
    "maxDecimalPlaces",
    "deleteIconFormatter",
    "dollarColoredBoldFormatter",
    "dollarColoredFormatter",
    "dollarFormatter",
    "editIconFormatter",
    "hyperlinkFormatter",
    "matchUrl",
    "hyperlinkUriPrefixFormatter",
    "uriPrefix",
    "infoIconFormatter",
    "lowercaseFormatter",
    "maskFormatter",
    "mask",
    "i_1",
    "v_1",
    "multipleFormatter",
    "formatters",
    "formatters_1",
    "formatters_1_1",
    "percentFormatter",
    "percentCompleteBarFormatter",
    "percentCompleteFormatter",
    "percentSymbolFormatter",
    "progressBarFormatter",
    "color",
    "translateFormatter",
    "translateBooleanFormatter",
    "uppercaseFormatter",
    "yesNoFormatter",
    "Formatters",
    "arrayToCsv",
    "bold",
    "checkmark",
    "complexObject",
    "collectionEditor",
    "deleteIcon",
    "decimal",
    "dollar",
    "dollarColored",
    "dollarColoredBold",
    "editIcon",
    "hyperlink",
    "hyperlinkUriPrefix",
    "infoIcon",
    "lowercase",
    "multiple",
    "percent",
    "percentComplete",
    "percentCompleteBar",
    "percentSymbol",
    "progressBar",
    "translateBoolean",
    "uppercase",
    "yesNo",
    "avgTotalsPercentageFormatter",
    "totals",
    "prefix",
    "groupFormatterPrefix",
    "suffix",
    "groupFormatterSuffix",
    "avgTotalsDollarFormatter",
    "avgTotalsFormatter",
    "minTotalsFormatter",
    "maxTotalsFormatter",
    "sumTotalsColoredFormatter",
    "sumTotalsDollarColoredBoldFormatter",
    "sumTotalsDollarColoredFormatter",
    "sumTotalsDollarBoldFormatter",
    "sumTotalsDollarFormatter",
    "sumTotalsFormatter",
    "sumTotalsBoldFormatter",
    "GroupTotalFormatters",
    "avgTotals",
    "avgTotalsDollar",
    "avgTotalsPercentage",
    "maxTotals",
    "minTotals",
    "sumTotals",
    "sumTotalsBold",
    "sumTotalsColored",
    "sumTotalsDollar",
    "sumTotalsDollarBold",
    "sumTotalsDollarColored",
    "sumTotalsDollarColoredBold",
    "SlickPaginationComponent",
    "_isFirstRender",
    "onPaginationChanged",
    "EventEmitter",
    "dataFrom",
    "dataTo",
    "pageCount",
    "paginationPageSizes",
    "fromToParams",
    "from",
    "to",
    "_gridPaginationOptions",
    "gridPaginationOptions",
    "refreshPagination",
    "ngOnDestroy",
    "ngAfterViewInit",
    "_filterSubcription",
    "ceil",
    "changeToFirstPage",
    "onPageChanged",
    "changeToLastPage",
    "changeToNextPage",
    "changeToPreviousPage",
    "changeToCurrentPage",
    "currentTarget",
    "onChangeItemPerPage",
    "itemsPerPage",
    "isPageNumberReset",
    "recalculateFromToIndexes",
    "emit",
    "Component",
    "selector",
    "template",
    "Output",
    "Input",
    "AngularSlickgridComponent",
    "gridService",
    "gridEventService",
    "groupingAndColspanService",
    "resizer",
    "forRootConfig",
    "groupingDefinition",
    "showPagination",
    "isGridInitialized",
    "onAngularGridCreated",
    "onDataviewCreated",
    "onGridCreated",
    "onGridInitialized",
    "onBeforeGridCreate",
    "onBeforeGridDestroy",
    "onAfterGridDestroyed",
    "gridWidth",
    "updateColumnDefinitionsList",
    "getItems",
    "dataset",
    "_dataset",
    "refreshGridData",
    "ngOnInit",
    "gridHeightString",
    "gridWidthString",
    "emptyDomElementContainer",
    "initialization",
    "mergeGridOptions",
    "createBackendApiInternalPostProcessCallback",
    "Data",
    "GroupItemMetadataProvider",
    "DataView",
    "inlineFilters",
    "Grid",
    "attachDifferentHooks",
    "beginUpdate",
    "setItems",
    "endUpdate",
    "executeAfterDataviewCreated",
    "attachResizeHook",
    "attachBackendCallbackFunctions",
    "slickGrid",
    "groupingService",
    "pluginService",
    "resizerService",
    "backendApi_1",
    "nodes",
    "totalCount",
    "onLangChange",
    "checkboxColumn",
    "_loop_3",
    "this_3",
    "dispatchCustomEvent",
    "eventData",
    "_loop_4",
    "this_4",
    "gridStateChange",
    "updateRowCount",
    "onRowsChanged",
    "invalidateRows",
    "rows",
    "colspanCallback",
    "isExecuteCommandOnInit",
    "onInit",
    "observableOrPromise_1",
    "tslib_1.__awaiter",
    "startTime",
    "endTime",
    "timestamps",
    "executionTime",
    "valueOf",
    "paginationChanged",
    "reSort",
    "isShowing",
    "toggleHeaderRow",
    "isBubbling",
    "eventInit",
    "bubbles",
    "detail",
    "customElm",
    "nativeElement",
    "dispatchEvent",
    "providers",
    "decorators",
    "Inject",
    "ViewChild",
    "read",
    "ElementRef",
    "AngularSlickgridModule",
    "forRoot",
    "ngModule",
    "provide",
    "useValue",
    "NgModule",
    "imports",
    "CommonModule",
    "TranslateModule",
    "declarations",
    "exports",
    "entryComponents",
    "buf",
    "charCodeAt"
  ],
  "mappings": "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"
}
