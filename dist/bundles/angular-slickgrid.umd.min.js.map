{
  "version": 3,
  "file": "angular-slickgrid.umd.min.js",
  "sources": [
    "ng://angular-slickgrid/node_modules/tslib/tslib.es6.js",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/delimiterType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/fileType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/gridStateType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/operatorType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/sortDirection.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/compareDateUtility.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsShortSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateIsoSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/numericSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/stringSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/sorterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/collection.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/booleanFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/filterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateIsoFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsShortFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUtcFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/collectionSearchFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/numberFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/stringFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/executeMappedCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundDateFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundInputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/inputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/multipleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/selectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/singleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/global-grid-options.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/slickgrid-config.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/filterFactory.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/filter.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/export.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/sort.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/controlAndPlugin.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphqlQueryBuilder.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphql.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/global-utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid-odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridEvent.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridState.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/groupingAndColspan.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/resizer.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/avgAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/minAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/maxAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/sumAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/checkboxEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/dateEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/floatEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/integerEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/longTextEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/multipleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/singleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/textEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/arrayToCsvFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/boldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkboxFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkmarkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionEditorFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/complexObjectFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/deleteIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/editIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkUriPrefixFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/infoIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/lowercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/multipleFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentSymbolFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/progressBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateBooleanFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/uppercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/yesNoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsPercentageFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/minTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/maxTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/slick-pagination.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/angular-slickgrid.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/modules/angular-slickgrid.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n",
    "export enum DelimiterType {\r\n  colon = ':',\r\n  comma = ',',\r\n  equalSign = '=',\r\n  pipe = '|',\r\n  semicolon = ';',\r\n  space = ' ',\r\n  tab = '\\t',\r\n\r\n  doubleColon = '::',\r\n  doublePipe = '||',\r\n  doubleSemicolon = ';;',\r\n}\r\n\r\n",
    "export enum FileType {\r\n  csv = 'csv',\r\n  doc = 'doc',\r\n  docx = 'docx',\r\n  pdf = 'pdf',\r\n  txt = 'txt',\r\n  xls = 'xls',\r\n  xlsx = 'xlsx'\r\n}\r\n",
    "export enum GridStateType {\r\n  columns = 'columns',\r\n  filter = 'filter',\r\n  pagination = 'pagination',\r\n  sorter = 'sorter'\r\n}\r\n",
    "export enum OperatorType {\r\n  empty = '',\r\n  contains = 'Contains',\r\n  lessThan = 'LT',\r\n  lessThanOrEqual = 'LE',\r\n  greaterThan = 'GT',\r\n  greaterThanOrEqual = 'GE',\r\n  notEqual = 'NE',\r\n  equal = 'EQ',\r\n  endsWith = 'EndsWith',\r\n  startsWith = 'StartsWith',\r\n  in = 'IN',\r\n  notIn = 'NIN'\r\n}\r\n",
    "export enum SortDirection {\r\n  asc = 'asc',\r\n  ASC = 'ASC',\r\n  desc = 'desc',\r\n  DESC = 'DESC'\r\n}\r\n",
    "import { FieldType, OperatorType } from '../models/index';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/first';\r\nimport 'rxjs/add/operator/take';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\n/** Simple function to which will loop and create as demanded the number of white spaces,\r\n * this will be used in the Excel export\r\n * @param int nbSpaces: number of white spaces to create\r\n */\r\nexport function addWhiteSpaces(nbSpaces): string {\r\n  let result = '';\r\n\r\n  for (let i = 0; i < nbSpaces; i++) {\r\n    result += ' ';\r\n  }\r\n  return result;\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityDecode(input: string): string {\r\n  return input.replace(/&#(\\d+);/g, function (match, dec) {\r\n    return String.fromCharCode(dec);\r\n  });\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityEncode(input: any): string {\r\n  const buf = [];\r\n  for (let i = input.length - 1; i >= 0; i--) {\r\n    buf.unshift(['&#', input[i].charCodeAt(), ';'].join(''));\r\n  }\r\n  return buf.join('');\r\n}\r\n\r\n/**\r\n * Compares two arrays to determine if all the items are equal\r\n * @param a first array\r\n * @param b second array to compare with a\r\n * @param [orderMatters=false] flag if the order matters, if not arrays will be sorted\r\n * @return boolean true if equal, else false\r\n */\r\nexport function arraysEqual(a: any[], b: any[], orderMatters: boolean = false): boolean {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n\r\n  if (a === null || b === null) {\r\n    return false;\r\n  }\r\n\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n\r\n  if (!orderMatters) {\r\n    a.sort();\r\n    b.sort();\r\n  }\r\n\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Try casting an input of type Promise | Observable into a Promise type.\r\n * @param object which could be of type Promise or Observable\r\n * @param fromServiceName string representing the caller service name and will be used if we throw a casting problem error\r\n */\r\nexport function castToPromise<T>(input: Promise<T> | Observable<T>, fromServiceName: string = ''): Promise<T> {\r\n  let promise: any = input;\r\n\r\n  if (input instanceof Promise) {\r\n    // if it's already a Promise then return it\r\n    return input;\r\n  } else if (input instanceof Observable) {\r\n    promise = input.first().toPromise();\r\n    if (!(promise instanceof Promise)) {\r\n      promise = input.take(1).toPromise();\r\n    }\r\n    if (!(promise instanceof Promise)) {\r\n      throw new Error(\r\n        `Something went wrong, Angular-Slickgrid ${fromServiceName} is not able to convert the Observable into a Promise.\r\n        If you are using Angular HttpClient, you could try converting your http call to a Promise with \".toPromise()\"\r\n        for example::  this.http.post('graphql', { query: graphqlQuery }).toPromise()\r\n        `);\r\n    }\r\n  }\r\n\r\n  return promise;\r\n}\r\n\r\n/**\r\n * Uses the logic function to find an item in an array or returns the default\r\n * value provided (empty object by default)\r\n * @param any[] array the array to filter\r\n * @param function logic the logic to find the item\r\n * @param any [defaultVal={}] the default value to return\r\n * @return object the found object or deafult value\r\n */\r\nexport function findOrDefault(array: any[], logic: (item: any) => boolean, defaultVal = {}): any {\r\n  return array.find(logic) || defaultVal;\r\n}\r\n\r\n/**\r\n  * Take a number (or a string) and display it as a formatted decimal string with defined minimum and maximum decimals\r\n  * @param input\r\n  * @param minDecimal\r\n  * @param maxDecimal\r\n  */\r\nexport function decimalFormatted(input: number | string, minDecimal?: number, maxDecimal?: number) {\r\n  if (isNaN(+input)) {\r\n    return input;\r\n  }\r\n\r\n  const minDec = (minDecimal === undefined) ? 2 : minDecimal;\r\n  const maxDec = (maxDecimal === undefined) ? 2 : maxDecimal;\r\n  let amount = String(Math.round(+input * Math.pow(10, maxDec)) / Math.pow(10, maxDec));\r\n\r\n  if (amount.indexOf('.') < 0) {\r\n    amount += '.';\r\n  }\r\n  while ((amount.length - amount.indexOf('.')) <= minDec) {\r\n    amount += '0';\r\n  }\r\n  return amount;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent moment.js format\r\n * refer to moment.js for the format standard used: https://momentjs.com/docs/#/parsing/string-format/\r\n * @param fieldType\r\n */\r\nexport function mapMomentDateFormatWithFieldType(fieldType: FieldType): string {\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'YYYY-MM-DD HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'YYYY-MM-DD hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'YYYY-MM-DD hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'MM/DD/YYYY';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'M/D/YY';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'MM/DD/YYYY HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'MM/DD/YYYY hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'MM/DD/YYYY hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'M/D/YY H:m:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'M/D/YY h:m:s a';\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'YYYY-MM-DD';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent Flatpickr format\r\n * refer to Flatpickr for the format standard used: https://chmln.github.io/flatpickr/formatting/#date-formatting-tokens\r\n * also note that they seem very similar to PHP format (except for am/pm): http://php.net/manual/en/function.date.php\r\n * @param fieldType\r\n */\r\nexport function mapFlatpickrDateFormatWithFieldType(fieldType: FieldType): string {\r\n  /*\r\n    d: Day of the month, 2 digits with leading zeros\t01 to 31\r\n    D: A textual representation of a day\tMon through Sun\r\n    l: (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday\r\n    j: Day of the month without leading zeros\t1 to 31\r\n    J: Day of the month without leading zeros and ordinal suffix\t1st, 2nd, to 31st\r\n    w: Numeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday)\r\n    F: A full textual representation of a month\tJanuary through December\r\n    m: Numeric representation of a month, with leading zero\t01 through 12\r\n    n: Numeric representation of a month, without leading zeros\t1 through 12\r\n    M: A short textual representation of a month\tJan through Dec\r\n    U: The number of seconds since the Unix Epoch\t1413704993\r\n    y: A two digit representation of a year\t99 or 03\r\n    Y: A full numeric representation of a year, 4 digits\t1999 or 2003\r\n    H: Hours (24 hours)\t00 to 23\r\n    h: Hours\t1 to 12\r\n    i: Minutes\t00 to 59\r\n    S: Seconds, 2 digits\t00 to 59\r\n    s: Seconds\t0, 1 to 59\r\n    K: AM/PM\tAM or PM\r\n  */\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'Y-m-d H:i:S';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'Y-m-d h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'Y-m-d h:i:S K';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'm/d/Y';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'm/d/y';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'm/d/Y H:i:S';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'm/d/Y h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'm/d/Y h:i:s K';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'm/d/y H:i:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'm/d/y h:i:s K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'Z';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'Y-m-d';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operators (ex.: <= is \"le\", > is \"gt\")\r\n * @param string operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorType(operator: string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (operator) {\r\n    case '<':\r\n      map = OperatorType.lessThan;\r\n      break;\r\n    case '<=':\r\n      map = OperatorType.lessThanOrEqual;\r\n      break;\r\n    case '>':\r\n      map = OperatorType.greaterThan;\r\n      break;\r\n    case '>=':\r\n      map = OperatorType.greaterThanOrEqual;\r\n      break;\r\n    case '<>':\r\n    case '!=':\r\n    case 'neq':\r\n    case 'NEQ':\r\n      map = OperatorType.notEqual;\r\n      break;\r\n    case '*':\r\n    case '.*':\r\n    case 'startsWith':\r\n      map = OperatorType.startsWith;\r\n      break;\r\n    case '*.':\r\n    case 'endsWith':\r\n      map = OperatorType.endsWith;\r\n      break;\r\n    case '=':\r\n    case '==':\r\n    case 'eq':\r\n    case 'EQ':\r\n      map = OperatorType.equal;\r\n      break;\r\n    case 'in':\r\n    case 'IN':\r\n      map = OperatorType.in;\r\n      break;\r\n    case 'notIn':\r\n    case 'NIN':\r\n    case 'NOT_IN':\r\n      map = OperatorType.notIn;\r\n      break;\r\n    default:\r\n      map = OperatorType.contains;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operator by a Filter Type\r\n * For example a multiple-select typically uses 'IN' operator\r\n * @param operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorByFieldType(fieldType: FieldType | string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.string:\r\n    case FieldType.unknown:\r\n      map = OperatorType.contains;\r\n      break;\r\n    case FieldType.float:\r\n    case FieldType.number:\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    case FieldType.date:\r\n    case FieldType.dateUtc:\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n    case FieldType.dateTimeIsoAmPm:\r\n    case FieldType.dateTimeIsoAM_PM:\r\n    case FieldType.dateUs:\r\n    case FieldType.dateUsShort:\r\n    case FieldType.dateTimeUs:\r\n    case FieldType.dateTimeUsAmPm:\r\n    case FieldType.dateTimeUsAM_PM:\r\n    case FieldType.dateTimeUsShort:\r\n    case FieldType.dateTimeUsShortAmPm:\r\n    case FieldType.dateTimeUsShortAM_PM:\r\n    default:\r\n      map = OperatorType.equal;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Parse a date passed as a string and return a Date object (if valid)\r\n * @param inputDateString\r\n * @returns string date formatted\r\n */\r\nexport function parseUtcDate(inputDateString: string, useUtc: boolean): string | null {\r\n  let date = null;\r\n\r\n  if (/^[0-9\\-\\/]*$/.test(inputDateString)) {\r\n    // get the UTC datetime with moment.js but we need to decode the value so that it's valid text\r\n    const dateString = decodeURIComponent(inputDateString);\r\n    const dateMoment = moment(new Date(dateString));\r\n    if (dateMoment.isValid() && dateMoment.year().toString().length === 4) {\r\n      date = (useUtc) ? dateMoment.utc().format() : dateMoment.format();\r\n    }\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\n/**\r\n * Sanitize, return only the text without HTML tags\r\n * @input htmlString\r\n * @return text\r\n */\r\nexport function sanitizeHtmlToText(htmlString: string) {\r\n  const temp = document.createElement('div');\r\n  temp.innerHTML = htmlString;\r\n  return temp.textContent || temp.innerText;\r\n}\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string\r\n * @returns string\r\n */\r\nexport function titleCase(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Converts a string to camel case\r\n * @param str the string to convert\r\n * @return the string in camel case\r\n */\r\nexport function toCamelCase(str: string): string {\r\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w|[\\s+\\-_\\/])/g, (match: string, offset: number) => {\r\n    // remove white space or hypens or underscores\r\n    if (/[\\s+\\-_\\/]/.test(match)) {\r\n      return '';\r\n    }\r\n\r\n    return offset === 0 ? match.toLowerCase() : match.toUpperCase();\r\n  });\r\n}\r\n\r\n/**\r\n * Converts a string to kebab (hypen) case\r\n * @param str the string to convert\r\n * @return the string in kebab case\r\n */\r\nexport function toKebabCase(str: string): string {\r\n  return toCamelCase(str).replace(/([A-Z])/g, '-$1').toLowerCase();\r\n}\r\n",
    "import * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport function compareDates(value1, value2, format, sortDirection, strict?: boolean) {\r\n  let diff = 0;\r\n\r\n  if (value1 === null || value1 === '' || !moment(value1, format, strict).isValid()) {\r\n    diff = -1;\r\n  } else if (value2 === null || value2 === '' || !moment(value2, format, strict).isValid()) {\r\n    diff = 1;\r\n  } else {\r\n    const date1 = moment(value1, format, strict);\r\n    const date2 = moment(value2, format, strict);\r\n    diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);\r\n  }\r\n\r\n  return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));\r\n}\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nimport { compareDates } from './compareDateUtility';\r\n\r\nexport const dateSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, moment.ISO_8601, sortDirection);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const numericSorter: Sorter = (value1, value2, sortDirection) => {\r\n  const x = (isNaN(value1) || value1 === '' || value1 === null) ? -99e+10 : parseFloat(value1);\r\n  const y = (isNaN(value2) || value2 === '' || value2 === null) ? -99e+10 : parseFloat(value2);\r\n  return sortDirection * (x === y ? 0 : (x > y ? 1 : -1));\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const stringSorter: Sorter = (value1, value2, sortDirection) => {\r\n  let position;\r\n  if (value1 === null) {\r\n    position = -1;\r\n  } else if (value2 === null) {\r\n    position = 1;\r\n  } else if (value1 === value2) {\r\n    position = 0;\r\n  } else if (sortDirection) {\r\n    position = value1 < value2 ? -1 : 1;\r\n  } else if (!sortDirection) {\r\n    position = value1 < value2 ? 1 : -1;\r\n  }\r\n  return sortDirection * position;\r\n};\r\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\nimport { dateUsShortSorter } from './dateUsShortSorter';\nimport { dateSorter } from './dateSorter';\nimport { dateIsoSorter } from './dateIsoSorter';\nimport { dateUsSorter } from './dateUsSorter';\nimport { numericSorter } from './numericSorter';\nimport { stringSorter } from './stringSorter';\n\nexport const Sorters = {\n  date: dateSorter,\n  dateIso: dateIsoSorter,\n  dateUs: dateUsSorter,\n  dateUsShort: dateUsShortSorter,\n  numeric: numericSorter,\n  string: stringSorter\n};\n",
    "import { FieldType } from './../models/index';\r\nimport { Sorters } from './index';\r\n\r\nexport function sortByFieldType(value1: any, value2: any, fieldType: FieldType, sortDirection: number) {\r\n  let sortResult = 0;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.number:\r\n      sortResult = Sorters.numeric(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.date:\r\n      sortResult = Sorters.date(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateIso:\r\n      sortResult = Sorters.dateIso(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUs:\r\n      sortResult = Sorters.dateUs(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      sortResult = Sorters.dateUsShort(value1, value2, sortDirection);\r\n      break;\r\n    default:\r\n      sortResult = Sorters.string(value1, value2, sortDirection);\r\n      break;\r\n  }\r\n\r\n  return sortResult;\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  CollectionFilterBy,\r\n  CollectionSortBy,\r\n  FieldType,\r\n  OperatorType,\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\n\r\n@Injectable()\r\nexport class CollectionService {\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /**\r\n   * Filter items from a collection\r\n   * @param collection\r\n   * @param filterBy\r\n   */\r\n  filterCollection(collection: any[], filterBy: CollectionFilterBy): any[] {\r\n    let filteredCollection: any[] = [];\r\n\r\n    if (filterBy) {\r\n      const property = filterBy.property || '';\r\n      const operator = filterBy.operator || OperatorType.equal;\r\n      // just check for undefined since the filter value could be null, 0, '', false etc\r\n      const value = typeof filterBy.value === 'undefined' ? '' : filterBy.value;\r\n\r\n      switch (operator) {\r\n        case OperatorType.equal:\r\n          filteredCollection = collection.filter((item) => item[property] === value);\r\n          break;\r\n        case OperatorType.in:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) !== -1);\r\n          break;\r\n        case OperatorType.notIn:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) === -1);\r\n          break;\r\n        case OperatorType.contains:\r\n          filteredCollection = collection.filter((item) => value.indexOf(item[property]) !== -1);\r\n          break;\r\n        default:\r\n          filteredCollection = collection.filter((item) => item[property] !== value);\r\n      }\r\n    }\r\n\r\n    return filteredCollection;\r\n  }\r\n\r\n  /**\r\n   * Sort items in a collection\r\n   * @param collection\r\n   * @param sortBy\r\n   * @param enableTranslateLabel\r\n   */\r\n  sortCollection(collection: any[], sortBy: CollectionSortBy, enableTranslateLabel?: boolean): any[] {\r\n    let sortedCollection: any[] = [];\r\n\r\n    if (sortBy) {\r\n      const property = sortBy.property || '';\r\n      const sortDirection = sortBy.hasOwnProperty('sortDesc') ? (sortBy.sortDesc ? -1 : 1) : 1;\r\n      const fieldType = sortBy.fieldType || FieldType.string;\r\n\r\n      sortedCollection = collection.sort((dataRow1: any, dataRow2: any) => {\r\n        const value1 = (enableTranslateLabel) ? this.translate.instant(dataRow1[property] || ' ') : dataRow1[property];\r\n        const value2 = (enableTranslateLabel) ? this.translate.instant(dataRow2[property] || ' ') : dataRow2[property];\r\n        const result = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n        return result;\r\n      });\r\n    }\r\n\r\n    return sortedCollection;\r\n  }\r\n}\r\n",
    "import { FilterCondition, FilterConditionOption } from './../models/index';\r\n\r\nfunction parseBoolean(str: number | string) {\r\n  return /(true|1)/i.test(str + '');\r\n}\r\n\r\nexport const booleanFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  return parseBoolean(options.cellValue) === parseBoolean(searchTerm);\r\n};\r\n",
    "export const testFilterCondition = (operator: string, value1: any, value2: any): boolean => {\r\n  switch (operator) {\r\n    case '<':\r\n    case 'LT': return (value1 < value2);\r\n    case '<=':\r\n    case 'LE': return (value1 <= value2);\r\n    case '>':\r\n    case 'GT': return (value1 > value2);\r\n    case '>=':\r\n    case 'GE': return (value1 >= value2);\r\n    case '!=':\r\n    case '<>':\r\n    case 'NE': return (value1 !== value2);\r\n    case '=':\r\n    case '==':\r\n    case 'EQ': return (value1 === value2);\r\n    case 'IN': return ((value2 && value2.includes) ? (value2.includes(value1)) : false);\r\n  }\r\n  return true;\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  const filterSearchType = options.filterSearchType || FieldType.dateIso;\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(filterSearchType);\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerm, searchDateFormat, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue);\r\n  const dateSearch = moment(searchTerm);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateUtcFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerms = Array.isArray(options.searchTerms) && options.searchTerms[0] || [];\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(options.filterSearchType || options.fieldType);\r\n  if (!moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerms[0], searchDateFormat, true).isValid()) {\r\n    return true;\r\n  }\r\n  const dateCell = moment(options.cellValue, moment.ISO_8601, true);\r\n  const dateSearch = moment(searchTerms[0], searchDateFormat, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const collectionSearchFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // multiple-select will always return text, so we should make our cell values text as well\r\n  const cellValue = options.cellValue + '';\r\n\r\n  return testFilterCondition(options.operator || 'IN', cellValue, options.searchTerms || []);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const numberFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const cellValue = parseFloat(options.cellValue);\r\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || 0;\r\n  if (typeof searchTerm === 'string') {\r\n    searchTerm = parseFloat(searchTerm);\r\n  }\r\n\r\n  if (!searchTerm && (!options.operator || options.operator === '')) {\r\n    return true;\r\n  }\r\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption, OperatorType } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const stringFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // make sure the cell value is a string by casting it when possible\r\n  options.cellValue = (options.cellValue === undefined || options.cellValue === null) ? '' : options.cellValue.toString();\r\n\r\n  // make both the cell value and search value lower for case insensitive comparison\r\n  const cellValue = options.cellValue.toLowerCase();\r\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || '';\r\n  if (typeof searchTerm === 'string') {\r\n    searchTerm = searchTerm.toLowerCase();\r\n  }\r\n\r\n  if (options.operator === '*' || options.operator === OperatorType.endsWith) {\r\n    return cellValue.endsWith(searchTerm);\r\n  } else if ((options.operator === '' && options.cellValueLastChar === '*') || options.operator === OperatorType.startsWith) {\r\n    return cellValue.startsWith(searchTerm);\r\n  } else if (options.operator === '') {\r\n    return cellValue.includes(searchTerm);\r\n  }\r\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\r\n};\r\n",
    "import { booleanFilterCondition } from './booleanFilterCondition';\r\nimport { dateFilterCondition } from './dateFilterCondition';\r\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\r\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\r\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\r\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\r\nimport { FilterConditionOption } from './../models/filterConditionOption.interface';\r\nimport { FilterCondition } from '../models/filterCondition.interface';\r\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { numberFilterCondition } from './numberFilterCondition';\r\nimport { stringFilterCondition } from './stringFilterCondition';\r\nimport { FieldType } from '../models/index';\r\n\r\nexport const executeMappedCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // when using a multi-select ('IN' operator) we will not use the field type but instead go directly with a collection search\r\n  if (options && options.operator && options.operator.toUpperCase() === 'IN') {\r\n    return collectionSearchFilterCondition(options);\r\n  }\r\n\r\n  // execute the mapped type, or default to String condition check\r\n  switch (options.fieldType) {\r\n    case FieldType.boolean:\r\n      return booleanFilterCondition(options);\r\n    case FieldType.date:\r\n      return dateFilterCondition(options);\r\n    case FieldType.dateUtc:\r\n      return dateUtcFilterCondition(options);\r\n    case FieldType.dateIso:\r\n      return dateIsoFilterCondition(options);\r\n    case FieldType.dateUs:\r\n    case FieldType.dateTimeUs:\r\n      return dateUsFilterCondition(options);\r\n    case FieldType.dateUsShort:\r\n    case FieldType.dateTimeUsShort:\r\n      return dateUsShortFilterCondition(options);\r\n    case FieldType.number:\r\n      return numberFilterCondition(options);\r\n    case FieldType.string:\r\n    default:\r\n      return stringFilterCondition(options);\r\n  }\r\n};\r\n",
    "import { FilterConditionOption } from './../models/filterConditionOption.interface';\r\nimport { booleanFilterCondition } from './booleanFilterCondition';\r\nimport { dateFilterCondition } from './dateFilterCondition';\r\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\r\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\r\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\r\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\r\nimport { executeMappedCondition } from './executeMappedCondition';\r\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { numberFilterCondition } from './numberFilterCondition';\r\nimport { stringFilterCondition } from './stringFilterCondition';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const FilterConditions = {\r\n  executeMappedCondition,\r\n  booleanFilter: booleanFilterCondition,\r\n  collectionSearchFilter: collectionSearchFilterCondition,\r\n  dateFilter: dateFilterCondition,\r\n  dateIsoFilter: dateIsoFilterCondition,\r\n  dateUtcFilter: dateUtcFilterCondition,\r\n  dateUsFilter: dateUsFilterCondition,\r\n  dateUsShortFilter: dateUsShortFilterCondition,\r\n  numberFilter: numberFilterCondition,\r\n  stringFilter: stringFilterCondition,\r\n  testFilter: testFilterCondition\r\n};\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { mapFlatpickrDateFormatWithFieldType } from '../services/utilities';\r\nimport { Column, Filter, FilterArguments, FilterCallback, FieldType, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\r\n\r\n// importing Flatpickr works better with a 'require'\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class CompoundDateFilter implements Filter {\r\n  private $filterElm: any;\r\n  private $filterInputElm: any;\r\n  private $selectOperatorElm: any;\r\n  private _currentValue: string;\r\n  private _operator: OperatorType | OperatorString;\r\n  flatInstance: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  set operator(op: OperatorType | OperatorString) {\r\n    this._operator = op;\r\n  }\r\n  get operator(): OperatorType | OperatorString {\r\n    return this._operator || OperatorType.empty;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (args) {\r\n      this.grid = args.grid;\r\n      this.callback = args.callback;\r\n      this.columnDef = args.columnDef;\r\n      this.operator = args.operator || '';\r\n      this.searchTerms = args.searchTerms || [];\r\n\r\n      // date input can only have 1 search term, so we will use the 1st array index if it exist\r\n      const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n      // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n      // and initialize it if searchTerm is filled\r\n      this.$filterElm = this.createDomElement(searchTerm);\r\n\r\n      // step 3, subscribe to the keyup event and run the callback when that happens\r\n      // also add/remove \"filled\" class for styling purposes\r\n      this.$filterInputElm.keyup((e: any) => {\r\n        this.onTriggerEvent(e);\r\n      });\r\n      this.$selectOperatorElm.change((e: any) => {\r\n        this.onTriggerEvent(e);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.flatInstance && this.$selectOperatorElm) {\r\n      this.$selectOperatorElm.val(0);\r\n      this.flatInstance.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm[]) {\r\n    if (values && Array.isArray(values)) {\r\n      this.flatInstance.setDate(values[0]);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n  private buildDatePickerInput(searchTerm?: SearchTerm) {\r\n    const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\r\n    const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnDef.type || FieldType.dateUtc);\r\n    let currentLocale = this.translate.currentLang || 'en';\r\n    if (currentLocale.length > 2) {\r\n      currentLocale = currentLocale.substring(0, 2);\r\n    }\r\n\r\n    const pickerOptions: any = {\r\n      defaultDate: searchTerm || '',\r\n      altInput: true,\r\n      altFormat: outputFormat,\r\n      dateFormat: inputFormat,\r\n      wrap: true,\r\n      closeOnSelect: true,\r\n      locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n      onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n        this._currentValue = dateStr;\r\n\r\n        // when using the time picker, we can simulate a keyup event to avoid multiple backend request\r\n        // since backend request are only executed after user start typing, changing the time should be treated the same way\r\n        if (pickerOptions.enableTime) {\r\n          this.onTriggerEvent(new CustomEvent('keyup'), dateStr === '');\r\n        } else {\r\n          this.onTriggerEvent(undefined, dateStr === '');\r\n        }\r\n      }\r\n    };\r\n\r\n    // add the time picker when format is UTC (Z) or has the 'h' (meaning hours)\r\n    if (outputFormat && (outputFormat === 'Z' || outputFormat.toLowerCase().includes('h'))) {\r\n      pickerOptions.enableTime = true;\r\n    }\r\n\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    const $filterInputElm: any = $(`<div class=flatpickr><input type=\"text\" class=\"form-control\" data-input placeholder=\"${placeholder}\"></div>`);\r\n    this.flatInstance = ($filterInputElm[0] && typeof $filterInputElm[0].flatpickr === 'function') ? $filterInputElm[0].flatpickr(pickerOptions) : null;\r\n    return $filterInputElm;\r\n  }\r\n\r\n  private buildSelectOperatorHtmlString() {\r\n    const optionValues = this.getOptionValues();\r\n    let optionValueString = '';\r\n    optionValues.forEach((option) => {\r\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\r\n    });\r\n\r\n    return `<select class=\"form-control\">${optionValueString}</select>`;\r\n  }\r\n\r\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\r\n    return [\r\n      { operator: '' as OperatorString, description: '' },\r\n      { operator: '=' as OperatorString, description: '' },\r\n      { operator: '<' as OperatorString, description: '' },\r\n      { operator: '<=' as OperatorString, description: '' },\r\n      { operator: '>' as OperatorString, description: '' },\r\n      { operator: '>=' as OperatorString, description: '' },\r\n      { operator: '<>' as OperatorString, description: '' }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  private createDomElement(searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\r\n    this.$filterInputElm = this.buildDatePickerInput(searchTerm);\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\r\n    const $containerInputGroup = $(`<div class=\"input-group flatpickr\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon operator\"></div>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <div class=flatpickr>\r\n          <input type=\"text\" class=\"form-control\" data-input>\r\n        </div>\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    $containerInputGroup.append($operatorInputGroupAddon);\r\n    $containerInputGroup.append(this.$filterInputElm);\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append($containerInputGroup);\r\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\r\n    this.$filterInputElm.data('columnId', this.columnDef.id);\r\n\r\n    if (this.operator) {\r\n      this.$selectOperatorElm.val(this.operator);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterContainerElm.addClass('filled');\r\n      this._currentValue = searchTerm as string;\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  private loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  private onTriggerEvent(e: Event | undefined, clearFilterTriggered?: boolean) {\r\n    if (clearFilterTriggered) {\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n    } else {\r\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\r\n      (this._currentValue) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (this._currentValue ? [this._currentValue] : null), operator: selectedOperator || '' });\r\n    }\r\n  }\r\n\r\n  private hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  private show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n}\r\n",
    "import { Inject } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { FieldType } from './../models/index';\r\nimport { Column, Filter, FilterArguments, FilterCallback, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Inject(TranslateService)\r\nexport class CompoundInputFilter implements Filter {\r\n  private $filterElm: any;\r\n  private $filterInputElm: any;\r\n  private $selectOperatorElm: any;\r\n  private _operator: OperatorType | OperatorString;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  set operator(op: OperatorType | OperatorString) {\r\n    this._operator = op;\r\n  }\r\n  get operator(): OperatorType | OperatorString {\r\n    return this._operator || OperatorType.empty;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.operator = args.operator;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n    // and initialize it if searchTerms is filled\r\n    this.$filterElm = this.createDomElement(searchTerm);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterInputElm.keyup((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n    this.$selectOperatorElm.change((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.$filterElm && this.$selectOperatorElm) {\r\n      this.$selectOperatorElm.val(0);\r\n      this.$filterInputElm.val('');\r\n      this.onTriggerEvent(null, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n      this.$selectOperatorElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm[]) {\r\n    if (values && Array.isArray(values)) {\r\n      this.$filterElm.val(values[0]);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  private buildInputHtmlString() {\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    return `<input class=\"form-control\" type=\"text\" placeholder=\"${placeholder}\" />`;\r\n  }\r\n\r\n  private buildSelectOperatorHtmlString() {\r\n    const optionValues = this.getOptionValues();\r\n    let optionValueString = '';\r\n    optionValues.forEach((option) => {\r\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\r\n    });\r\n\r\n    return `<select class=\"form-control\">${optionValueString}</select>`;\r\n  }\r\n\r\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\r\n    const type = (this.columnDef.type && this.columnDef.type) ? this.columnDef.type : FieldType.string;\r\n    let optionValues = [];\r\n\r\n    switch (type) {\r\n      case FieldType.string:\r\n        optionValues = [\r\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\r\n          { operator: '=' as OperatorString, description: this.translate.instant('EQUALS') },\r\n          { operator: 'a*' as OperatorString, description: this.translate.instant('STARTS_WITH') },\r\n          { operator: '*z' as OperatorString, description: this.translate.instant('ENDS_WITH') },\r\n          /*\r\n          { operator: 'IN' as OperatorString, description: this.translate.instant('IN_COLLECTION_SEPERATED_BY_COMMA') },\r\n          { operator: 'NIN' as OperatorString, description: this.translate.instant('NOT_IN_COLLECTION_SEPERATED_BY_COMMA') },\r\n          */\r\n        ];\r\n        break;\r\n      default:\r\n        optionValues = [\r\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\r\n          { operator: '=' as OperatorString, description: '' },\r\n          { operator: '<' as OperatorString, description: '' },\r\n          { operator: '<=' as OperatorString, description: '' },\r\n          { operator: '>' as OperatorString, description: '' },\r\n          { operator: '>=' as OperatorString, description: '' },\r\n          { operator: '<>' as OperatorString, description: '' }];\r\n        break;\r\n    }\r\n\r\n    return optionValues;\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  private createDomElement(searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\r\n    this.$filterInputElm = $(this.buildInputHtmlString());\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\r\n    const $containerInputGroup = $(`<div class=\"input-group\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon operator\"></div>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <input class=\"form-control\" type=\"text\" />\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    $containerInputGroup.append($operatorInputGroupAddon);\r\n    $containerInputGroup.append(this.$filterInputElm);\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append($containerInputGroup);\r\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\r\n\r\n    this.$filterInputElm.val(searchTerm);\r\n    this.$filterInputElm.data('columnId', this.columnDef.id);\r\n\r\n    if (this.operator) {\r\n      this.$selectOperatorElm.val(this.operator);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterContainerElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  private onTriggerEvent(e: Event | undefined, clearFilterTriggered?: boolean) {\r\n    if (clearFilterTriggered) {\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n    } else {\r\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\r\n      const value = this.$filterInputElm.val();\r\n      (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (value ? [value] : null), operator: selectedOperator || '' });\r\n    }\r\n  }\r\n}\r\n",
    "import {\r\n  Column,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class InputFilter implements Filter {\r\n  private $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor() {}\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return OperatorType.equal;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.keyup((e: any) => {\r\n      const value = e && e.target && e.target.value || '';\r\n      if (!value || value === '') {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, searchTerms: [value] });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.val('');\r\n      this.$filterElm.trigger('keyup');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString() {\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    return `<input type=\"text\" class=\"form-control search-filter\" placeholder=\"${placeholder}\">`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n\r\n    $filterElm.val(searchTerm);\r\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport {\r\n  Column,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n  SelectOption,\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class MultipleSelectFilter implements Filter {\r\n  $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n  defaultOptions: MultipleSelectOption;\r\n  isFilled = false;\r\n  labelName: string;\r\n  valueName: string;\r\n  enableTranslateLabel = false;\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  constructor(private translate: TranslateService, private collectionService: CollectionService) {\r\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,  // input search term on top of the select option list\r\n      maxHeight: 200,\r\n      okButton: true,\r\n      addTitle: true, // show tooltip of all selected items while hovering the filter\r\n      countSelected: this.translate.instant('X_OF_Y_SELECTED'),\r\n      allSelected: this.translate.instant('ALL_SELECTED'),\r\n      selectAllText: this.translate.instant('SELECT_ALL'),\r\n      selectAllDelimiter: ['', ''], // remove default square brackets of default text \"[Select All]\" => \"Select All\"\r\n\r\n      // we will subscribe to the onClose event for triggering our callback\r\n      // also add/remove \"filled\" class for styling purposes\r\n      onClose: () => {\r\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\r\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\r\n          this.isFilled = true;\r\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\r\n        } else {\r\n          this.isFilled = false;\r\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\r\n        }\r\n        this.callback(undefined, { columnDef: this.columnDef, operator: 'IN', searchTerms: selectedItems });\r\n      }\r\n    };\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return OperatorType.in;\r\n  }\r\n\r\n  /**\r\n   * Initialize the filter template\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\r\n    }\r\n\r\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\r\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\r\n\r\n    let newCollection = this.columnDef.filter.collection || [];\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\r\n      const filterBy = this.columnDef.filter.collectionFilterBy;\r\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\r\n      const sortBy = this.columnDef.filter.collectionSortBy;\r\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    // step 2, create the DOM Element of the filter & pre-load search terms\r\n    // also subscribe to the onClose event\r\n    this.createDomElement(filterTemplate);\r\n  }\r\n\r\n  /**\r\n   * Clear the filter values\r\n   */\r\n  clear() {\r\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\r\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\r\n      // this.$filterElm = $(`#${this.$filterElm[0].id}`);\r\n      this.$filterElm.multipleSelect('setSelects', []);\r\n\r\n      this.$filterElm.removeClass('filled');\r\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off().remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm[]) {\r\n    if (values) {\r\n      this.$filterElm.multipleSelect('setSelects', values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString(optionCollection: any[]) {\r\n    let options = '';\r\n    optionCollection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.multipleSelect, collection: [ { value: '1', label: 'One' } ]')`);\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n      const selected = (this.findValueInSearchTerms(option[this.valueName]) >= 0) ? 'selected' : '';\r\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      // html text of each select option\r\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\r\n\r\n      // if there's a search term, we will add the \"filled\" class for styling purposes\r\n      if (selected) {\r\n        this.isFilled = true;\r\n      }\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * Subscribe to the onClose event and run the callback when that happens\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    this.$filterElm = $(filterTemplate);\r\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\r\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\r\n    }\r\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    this.$filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (this.isFilled) {\r\n      this.$filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\r\n      this.$filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    // merge options & attach multiSelect\r\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\r\n    this.$filterElm = this.$filterElm.multipleSelect(options);\r\n  }\r\n\r\n  private findValueInSearchTerms(value: number | string): number {\r\n    if (this.searchTerms && Array.isArray(this.searchTerms)) {\r\n      for (let i = 0; i < this.searchTerms.length; i++) {\r\n        if (this.searchTerms[i] && this.searchTerms[i] === value) {\r\n          return i;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Column,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n} from './../models/index';\r\nimport { Injectable } from '@angular/core';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class SelectFilter implements Filter {\r\n  $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return OperatorType.equal;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\r\n      searchTerm = `${searchTerm}`;\r\n    }\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the change event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.change((e: any) => {\r\n      const value = e && e.target && e.target.value || '';\r\n      if (!value || value === '') {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, searchTerms: [value], operator: 'EQ' });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter values\r\n   */\r\n  clear() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.val('');\r\n      this.$filterElm.trigger('change');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm | SearchTerm[]) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  private buildTemplateHtmlString() {\r\n    if (!this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the Select Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.select, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\r\n    }\r\n\r\n    const optionCollection = this.columnDef.filter.collection || [];\r\n    const labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\r\n    const valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\r\n\r\n    let options = '';\r\n    optionCollection.forEach((option: any) => {\r\n      if (!option || (option[labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.select, collection: [ { value: '1', label: 'One' } ]')`);\r\n      }\r\n      const labelKey = option.labelKey || option[labelName];\r\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\r\n      options += `<option value=\"${option[valueName]}\">${textLabel}</option>`;\r\n    });\r\n    return `<select class=\"form-control search-filter\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n    const searchTermInput = (searchTerm || '') as string;\r\n\r\n    $filterElm.val(searchTermInput);\r\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport { Injectable } from '@angular/core';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport {\r\n  Column,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n  SelectOption,\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class SingleSelectFilter implements Filter {\r\n  $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n  defaultOptions: MultipleSelectOption;\r\n  isFilled = false;\r\n  labelName: string;\r\n  valueName: string;\r\n  enableTranslateLabel = false;\r\n\r\n  constructor(private translate: TranslateService, private collectionService: CollectionService) {\r\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,  // input search term on top of the select option list\r\n      maxHeight: 200,\r\n      single: true,\r\n      onClose: () => {\r\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\r\n        let selectedItem = '';\r\n\r\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\r\n          selectedItem = selectedItems[0] || null;\r\n          this.isFilled = true;\r\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\r\n        } else {\r\n          this.isFilled = false;\r\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\r\n        }\r\n        this.callback(undefined, { columnDef: this.columnDef, operator: 'EQ', searchTerms: (selectedItem ? [selectedItem] : null) });\r\n      }\r\n    };\r\n  }\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return OperatorType.equal;\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms;\r\n\r\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\r\n    }\r\n\r\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\r\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\r\n\r\n    let newCollection = this.columnDef.filter.collection || [];\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\r\n      const filterBy = this.columnDef.filter.collectionFilterBy;\r\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\r\n      const sortBy = this.columnDef.filter.collectionSortBy;\r\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    // also when the search term is a boolean or a number, we will convert it to a string\r\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\r\n      searchTerm = `${searchTerm}`;\r\n    }\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString(newCollection || [], searchTerm);\r\n\r\n    // step 2, create the DOM Element of the filter & pre-load search term\r\n    this.createDomElement(filterTemplate);\r\n  }\r\n\r\n  /**\r\n   * Clear the filter values\r\n   */\r\n  clear() {\r\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\r\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\r\n      // this.$filterElm = $(`#${this.$filterElm[0].id}`);\r\n      this.$filterElm.multipleSelect('setSelects', []);\r\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off().remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm | SearchTerm[]) {\r\n    if (values) {\r\n      values = Array.isArray(values) ? values : [values];\r\n      this.$filterElm.multipleSelect('setSelects', values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString(optionCollection: any[], searchTerm?: SearchTerm) {\r\n    let options = '';\r\n    optionCollection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.singleSelect, collection: [ { value: '1', label: 'One' } ]')`);\r\n      }\r\n\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n      const selected = (option[this.valueName] === searchTerm) ? 'selected' : '';\r\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      // html text of each select option\r\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\r\n\r\n      // if there's a search term, we will add the \"filled\" class for styling purposes\r\n      if (selected) {\r\n        this.isFilled = true;\r\n      }\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * Subscribe to the onClose event and run the callback when that happens\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    this.$filterElm = $(filterTemplate);\r\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\r\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\r\n    }\r\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    this.$filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // append the new DOM element to the header row\r\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\r\n      this.$filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    // merge options & attach multiSelect\r\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\r\n    this.$filterElm = this.$filterElm.multipleSelect(options);\r\n  }\r\n}\r\n",
    "import { Column, Filter } from './../models/index';\r\nimport { CompoundDateFilter } from './compoundDateFilter';\r\nimport { CompoundInputFilter } from './compoundInputFilter';\r\nimport { InputFilter } from './inputFilter';\r\nimport { MultipleSelectFilter } from './multipleSelectFilter';\r\nimport { SelectFilter } from './selectFilter';\r\nimport { SingleSelectFilter } from './singleSelectFilter';\r\n\r\nexport const Filters = {\r\n  /** Default Filter, input type text filter with a magnifying glass placeholder */\r\n  input: InputFilter,\r\n\r\n  /** Multiple Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  multipleSelect: MultipleSelectFilter,\r\n\r\n  /** Single Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  singleSelect: SingleSelectFilter,\r\n\r\n  /** Select filter, which uses native DOM element select */\r\n  select: SelectFilter,\r\n\r\n  /** Compound Date Filter (compound of Operator + Date picker) */\r\n  compoundDate: CompoundDateFilter,\r\n\r\n  /** Compound Input Filter (compound of Operator + Input) */\r\n  compoundInput: CompoundInputFilter,\r\n};\r\n",
    "import { DelimiterType, FileType, GridOption } from './models/index';\r\nimport { Filters } from './filters/index';\r\n\r\n/**\r\n * Options that can be passed to the Bootstrap-Datetimepicker directly\r\n */\r\nexport const GlobalGridOptions: GridOption = {\r\n  alwaysShowVerticalScroll: true,\r\n  autoEdit: false,\r\n  asyncEditorLoading: false,\r\n  autoFitColumnsOnFirstLoad: true,\r\n  autoResize: {\r\n    bottomPadding: 20,\r\n    minHeight: 180,\r\n    minWidth: 300,\r\n    sidePadding: 0\r\n  },\r\n  cellHighlightCssClass: 'slick-cell-modified',\r\n  checkboxSelector: {\r\n    cssClass: 'slick-cell-checkboxsel'\r\n  },\r\n  columnPicker: {\r\n    hideForceFitButton: false,\r\n    hideSyncResizeButton: true\r\n  },\r\n  datasetIdPropertyName: 'id',\r\n  defaultFilterPlaceholder: '&#128269;',\r\n  defaultFilter: Filters.input,\r\n  editable: false,\r\n  enableAutoResize: true,\r\n  enableCellNavigation: false,\r\n  enableColumnPicker: true,\r\n  enableColumnReorder: true,\r\n  enableExport: true,\r\n  enableGridMenu: true,\r\n  enableHeaderMenu: true,\r\n  enableMouseHoverHighlightRow: true,\r\n  enableSorting: true,\r\n  enableTextSelectionOnCells: true,\r\n  explicitInitialization: true,\r\n  exportOptions: {\r\n    delimiter: DelimiterType.comma,\r\n    exportWithFormatter: false,\r\n    filename: 'export',\r\n    format: FileType.csv,\r\n    groupingAggregatorRowText: '',\r\n    sanitizeDataExport: false,\r\n    useUtf8WithBom: true\r\n  },\r\n  forceFitColumns: false,\r\n  gridMenu: {\r\n    hideClearAllFiltersCommand: false,\r\n    hideClearAllSortingCommand: false,\r\n    hideExportCsvCommand: false,\r\n    hideExportTextDelimitedCommand: true,\r\n    hideForceFitButton: false,\r\n    hideRefreshDatasetCommand: false,\r\n    hideSyncResizeButton: true,\r\n    hideToggleFilterCommand: false,\r\n    iconCssClass: 'fa fa-bars',\r\n    iconClearAllFiltersCommand: 'fa fa-filter text-danger',\r\n    iconClearAllSortingCommand: 'fa fa-unsorted text-danger',\r\n    iconExportCsvCommand: 'fa fa-download',\r\n    iconExportTextDelimitedCommand: 'fa fa-download',\r\n    iconRefreshDatasetCommand: 'fa fa-refresh',\r\n    iconToggleFilterCommand: 'fa fa-random',\r\n    menuWidth: 16,\r\n    resizeOnShowHeaderRow: true\r\n  },\r\n  headerMenu: {\r\n    autoAlign: true,\r\n    autoAlignOffset: 12,\r\n    minWidth: 140,\r\n    iconSortAscCommand: 'fa fa-sort-asc',\r\n    iconSortDescCommand: 'fa fa-sort-desc',\r\n    iconColumnHideCommand: 'fa fa-times',\r\n    hideColumnHideCommand: false,\r\n    hideSortCommands: false\r\n  },\r\n  headerRowHeight: 35,\r\n  multiColumnSort: true,\r\n  numberedMultiColumnSort: true,\r\n  tristateMultiColumnSort: false,\r\n  sortColNumberInSeparateSpan: true,\r\n  suppressActiveCellChangeOnEdit: true,\r\n  pagination: {\r\n    pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\r\n    pageSize: 25,\r\n    totalItems: 0\r\n  },\r\n  rowHeight: 35,\r\n  showHeaderRow: false,\r\n  topPanelHeight: 35\r\n};\r\n",
    "import { GlobalGridOptions } from './global-grid-options';\r\n\r\nexport class SlickgridConfig {\r\n  options: any;\r\n\r\n  constructor() {\r\n    this.options = GlobalGridOptions;\r\n  }\r\n}\r\n",
    "import { Injector, Injectable } from '@angular/core';\r\nimport { Filter } from '../models/filter.interface';\r\nimport { ColumnFilter } from '../models';\r\nimport { SlickgridConfig } from '../slickgrid-config';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Filters } from '.';\r\nimport { CollectionService } from '../services/collection.service';\r\n\r\n@Injectable()\r\nexport class FilterFactory {\r\n  /**\r\n   * The options from the SlickgridConfig\r\n   */\r\n  private _options: any;\r\n\r\n  constructor(private injector: Injector, private config: SlickgridConfig, private translate: TranslateService, private collectionService: CollectionService) {\r\n    this._options = this.config.options;\r\n  }\r\n\r\n  // Uses the User model to create a new User\r\n  createFilter(columnFilter: ColumnFilter | undefined): Filter | undefined {\r\n    let filter: Filter | undefined;\r\n\r\n    if (columnFilter && columnFilter.model) {\r\n      // the model either needs to be retrieved or is already instantiated\r\n      // filter = typeof columnFilter.model === 'function' ? this.injector.get(columnFilter.model) : columnFilter.model;\r\n      const filterInstance = columnFilter.model;\r\n      const filterName = typeof columnFilter.model === 'function' ? filterInstance.name : '';\r\n/*\r\n      if (filterName) {\r\n        switch (filterName) {\r\n          case 'InputFilter':\r\n            filter = new Filters.input();\r\n            break;\r\n          case 'SelectFilter':\r\n            filter = new Filters.select(this.translate);\r\n            break;\r\n          case 'MultipleSelectFilter':\r\n            filter = new Filters.multipleSelect(this.translate, this.collectionService);\r\n            break;\r\n          case 'SingleSelectFilter':\r\n            filter = new Filters.singleSelect(this.translate, this.collectionService);\r\n            break;\r\n          case 'CompoundDateFilter':\r\n            filter = new Filters.compoundDate(this.translate);\r\n            break;\r\n          case 'CompoundInputFilter':\r\n            filter = new Filters.compoundInput(this.translate);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      } else {\r\n        filter = columnFilter.model;\r\n      }*/\r\n      // filter = typeof columnFilter.model === 'function' ? this.injector.get(this.translate, this.collectionService) : columnFilter.model;\r\n      filter = typeof columnFilter.model === 'function' ? new columnFilter.model(this.translate, this.collectionService) : columnFilter.model;\r\n    }\r\n\r\n    // fallback to the default filter\r\n    if (!filter && this._options.defaultFilter) {\r\n      // filter = this.injector.get(this._options.defaultFilter);\r\n      filter = new this._options.defaultFilter(this.translate, this.collectionService);\r\n    }\r\n\r\n    return filter;\r\n  }\r\n\r\n  private createInjector(service: any) {\r\n    const injector = Injector.create([{provide: service, deps: [TranslateService]}]);\r\n    // let injector = ReflectiveInjector.resolveAndCreate([service]);\r\n    // injector = injector.resolveAndCreateChild([service]);\r\n    return injector.get(service);\r\n  }\r\n}\r\n",
    "import { Component, Injectable } from '@angular/core';\r\nimport { castToPromise } from './utilities';\r\nimport { FilterConditions } from './../filter-conditions';\r\nimport {\r\n  Column,\r\n  ColumnFilter,\r\n  ColumnFilters,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallbackArg,\r\n  FieldType,\r\n  GridOption,\r\n  OperatorType,\r\n  CurrentFilter,\r\n  SearchTerm,\r\n  SlickEvent,\r\n  OperatorString\r\n} from './../models/index';\r\nimport { FilterFactory } from '../filters/filterFactory';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// using external non-typed js libraries\r\ndeclare var Slick: any;\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class FilterService {\r\n  private _eventHandler = new Slick.EventHandler();\r\n  private _slickSubscriber: SlickEvent;\r\n  private _filters: any[] = [];\r\n  private _columnFilters: ColumnFilters = {};\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _onFilterChangedOptions: any;\r\n  onFilterChanged = new Subject<CurrentFilter[]>();\r\n  onFilterCleared = new Subject<boolean>();\r\n\r\n  constructor(private filterFactory: FilterFactory) { }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  init(grid: any): void {\r\n    this._grid = grid;\r\n  }\r\n\r\n  /**\r\n   * Attach a backend filter hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   */\r\n  attachBackendOnFilter(grid: any) {\r\n    this._filters = [];\r\n    this._slickSubscriber = new Slick.Event();\r\n\r\n    // subscribe to the SlickGrid event and call the backend execution\r\n    this._slickSubscriber.subscribe(this.attachBackendOnFilterSubscribe.bind(this));\r\n\r\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\r\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\r\n      this.addFilterTemplateToHeaderRow(args);\r\n    });\r\n  }\r\n\r\n  async attachBackendOnFilterSubscribe(event: Event, args: any) {\r\n    if (!args || !args.grid) {\r\n      throw new Error('Something went wrong when trying to attach the \"attachBackendOnFilterSubscribe(event, args)\" function, it seems that \"args\" is not populated correctly');\r\n    }\r\n    const backendApi = this._gridOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.process || !backendApi.service) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    // run a preProcess callback if defined\r\n    if (backendApi.preProcess) {\r\n      backendApi.preProcess();\r\n    }\r\n\r\n    // call the service to get a query back\r\n    const query = await backendApi.service.processOnFilterChanged(event, args);\r\n\r\n    // emit an onFilterChanged event\r\n    if (args && !args.clearFilterTriggered) {\r\n      this.emitFilterChanged('remote');\r\n    }\r\n\r\n    // the process could be an Observable (like HttpClient) or a Promise\r\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n    const observableOrPromise = backendApi.process(query);\r\n    const processResult = await castToPromise(observableOrPromise);\r\n\r\n    // from the result, call our internal post process to update the Dataset and Pagination info\r\n    if (processResult && backendApi.internalPostProcess) {\r\n      backendApi.internalPostProcess(processResult);\r\n    }\r\n\r\n    // send the response process to the postProcess callback\r\n    if (backendApi.postProcess !== undefined) {\r\n      backendApi.postProcess(processResult);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attach a local filter hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param dataView\r\n   */\r\n  attachLocalOnFilter(grid: any, dataView: any) {\r\n    this._filters = [];\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = new Slick.Event();\r\n\r\n    dataView.setFilterArgs({ columnFilters: this._columnFilters, grid: this._grid });\r\n    dataView.setFilter(this.customLocalFilter.bind(this, dataView));\r\n\r\n    this._slickSubscriber.subscribe((e: any, args: any) => {\r\n      const columnId = args.columnId;\r\n      if (columnId != null) {\r\n        dataView.refresh();\r\n      }\r\n      if (args && !args.clearFilterTriggered) {\r\n        this.emitFilterChanged('local');\r\n      }\r\n    });\r\n\r\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\r\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\r\n      this.addFilterTemplateToHeaderRow(args);\r\n    });\r\n  }\r\n\r\n  /** Clear the search filters (below the column titles) */\r\n  clearFilters() {\r\n    this._filters.forEach((filter: Filter) => {\r\n      if (filter && filter.clear) {\r\n        // clear element and trigger a change\r\n        filter.clear();\r\n      }\r\n    });\r\n\r\n    // we need to loop through all columnFilters and delete them 1 by 1\r\n    // only trying to clear columnFilter (without looping through) would not trigger a dataset change\r\n    for (const columnId in this._columnFilters) {\r\n      if (columnId && this._columnFilters[columnId]) {\r\n        delete this._columnFilters[columnId];\r\n      }\r\n    }\r\n\r\n    // we also need to refresh the dataView and optionally the grid (it's optional since we use DataView)\r\n    if (this._dataView) {\r\n      this._dataView.refresh();\r\n      this._grid.invalidate();\r\n      this._grid.render();\r\n    }\r\n\r\n    // emit an event when filters are all cleared\r\n    this.onFilterCleared.next(true);\r\n  }\r\n\r\n  customLocalFilter(dataView: any, item: any, args: any) {\r\n    for (const columnId of Object.keys(args.columnFilters)) {\r\n      const columnFilter = args.columnFilters[columnId];\r\n      const columnIndex = args.grid.getColumnIndex(columnId);\r\n      const columnDef = args.grid.getColumns()[columnIndex];\r\n      if (!columnDef) {\r\n        return false;\r\n      }\r\n      const fieldType = columnDef.type || FieldType.string;\r\n      const filterSearchType = (columnDef.filterSearchType) ? columnDef.filterSearchType : null;\r\n\r\n      let cellValue = item[columnDef.queryField || columnDef.queryFieldFilter || columnDef.field];\r\n      const searchTerms = (columnFilter && columnFilter.searchTerms) ? columnFilter.searchTerms : null;\r\n\r\n      let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\r\n      if (typeof fieldSearchValue === 'undefined') {\r\n        fieldSearchValue = '';\r\n      }\r\n      fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\r\n\r\n      const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n      let operator = columnFilter.operator || ((matches) ? matches[1] : '');\r\n      const searchTerm = (!!matches) ? matches[2] : '';\r\n      const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\r\n\r\n      if (searchTerms && searchTerms.length > 1) {\r\n        fieldSearchValue = searchTerms.join(',');\r\n      } else if (typeof fieldSearchValue === 'string') {\r\n        // escaping the search value\r\n        fieldSearchValue = fieldSearchValue.replace(`'`, `''`); // escape single quotes by doubling them\r\n        if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\r\n          operator = (operator === '*' || operator === '*z') ? OperatorType.endsWith : OperatorType.startsWith;\r\n        }\r\n      }\r\n\r\n      // no need to query if search value is empty\r\n      if (searchTerm === '' && !searchTerms) {\r\n        return true;\r\n      }\r\n\r\n      // filter search terms should always be string type (even though we permit the end user to input numbers)\r\n      // so make sure each term are strings, if user has some default search terms, we will cast them to string\r\n      if (searchTerms && Array.isArray(searchTerms)) {\r\n        for (let k = 0, ln = searchTerms.length; k < ln; k++) {\r\n          // make sure all search terms are strings\r\n          searchTerms[k] = ((searchTerms[k] === undefined || searchTerms[k] === null) ? '' : searchTerms[k]) + '';\r\n        }\r\n      }\r\n\r\n      // when using localization (i18n), we should use the formatter output to search as the new cell value\r\n      if (columnDef && columnDef.params && columnDef.params.useFormatterOuputToFilter) {\r\n        const rowIndex = (dataView && typeof dataView.getIdxById === 'function') ? dataView.getIdxById(item.id) : 0;\r\n        cellValue = columnDef.formatter(rowIndex, columnIndex, cellValue, columnDef, item, this._grid);\r\n      }\r\n\r\n      // make sure cell value is always a string\r\n      if (typeof cellValue === 'number') {\r\n        cellValue = cellValue.toString();\r\n      }\r\n\r\n      const conditionOptions = {\r\n        fieldType,\r\n        searchTerms,\r\n        cellValue,\r\n        operator,\r\n        cellValueLastChar: lastValueChar,\r\n        filterSearchType\r\n      };\r\n\r\n      if (!FilterConditions.executeMappedCondition(conditionOptions)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  dispose() {\r\n    this.disposeColumnFilters();\r\n\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    // unsubscribe local event\r\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\r\n      this._slickSubscriber.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispose of the filters, since it's a singleton, we don't want to affect other grids with same columns\r\n   */\r\n  disposeColumnFilters() {\r\n    // we need to loop through all columnFilters and delete them 1 by 1\r\n    // only trying to make columnFilter an empty (without looping) would not trigger a dataset change\r\n    for (const columnId in this._columnFilters) {\r\n      if (columnId && this._columnFilters[columnId]) {\r\n        delete this._columnFilters[columnId];\r\n      }\r\n    }\r\n\r\n    // also destroy each Filter instances\r\n    this._filters.forEach((filter, index) => {\r\n      if (filter && filter.destroy) {\r\n        filter.destroy(true);\r\n      }\r\n    });\r\n  }\r\n\r\n  getColumnFilters() {\r\n    return this._columnFilters;\r\n  }\r\n\r\n  getCurrentLocalFilters(): CurrentFilter[] {\r\n    const currentFilters: CurrentFilter[] = [];\r\n    if (this._columnFilters) {\r\n      for (const colId of Object.keys(this._columnFilters)) {\r\n        const columnFilter = this._columnFilters[colId];\r\n        const columnDef = columnFilter.columnDef;\r\n        const filter = { columnId: colId || '' } as CurrentFilter;\r\n\r\n        if (columnFilter && columnFilter.searchTerms) {\r\n          filter.searchTerms = columnFilter.searchTerms;\r\n        }\r\n        if (columnFilter.operator) {\r\n          filter.operator = columnFilter.operator;\r\n        }\r\n        if (Array.isArray(filter.searchTerms) && filter.searchTerms.length > 0 && filter.searchTerms[0] !== '') {\r\n          currentFilters.push(filter);\r\n        }\r\n      }\r\n    }\r\n    return currentFilters;\r\n  }\r\n\r\n  callbackSearchEvent(e: Event | undefined, args: FilterCallbackArg) {\r\n    if (args) {\r\n      const searchTerm = ((e && e.target) ? (e.target as HTMLInputElement).value : undefined);\r\n      const searchTerms = (args.searchTerms && Array.isArray(args.searchTerms)) ? args.searchTerms : searchTerm ? [searchTerm] : undefined;\r\n      const columnDef = args.columnDef || null;\r\n      const columnId = columnDef ? (columnDef.id || '') : '';\r\n      const operator = args.operator || undefined;\r\n\r\n      if (!searchTerms || (Array.isArray(searchTerms) && searchTerms.length === 0)) {\r\n        // delete the property from the columnFilters when it becomes empty\r\n        // without doing this, it would leave an incorrect state of the previous column filters when filtering on another column\r\n        delete this._columnFilters[columnId];\r\n      } else {\r\n        const colId = '' + columnId as string;\r\n        const colFilter: ColumnFilter = {\r\n          columnId: colId,\r\n          columnDef,\r\n          searchTerms,\r\n        };\r\n        if (operator) {\r\n          colFilter.operator = operator;\r\n        }\r\n        this._columnFilters[colId] = colFilter;\r\n      }\r\n\r\n      this.triggerEvent(this._slickSubscriber, {\r\n        clearFilterTriggered: args && args.clearFilterTriggered,\r\n        columnId,\r\n        columnDef: args.columnDef || null,\r\n        columnFilters: this._columnFilters,\r\n        operator,\r\n        searchTerms,\r\n        serviceOptions: this._onFilterChangedOptions,\r\n        grid: this._grid\r\n      }, e);\r\n    }\r\n  }\r\n\r\n  addFilterTemplateToHeaderRow(args: { column: Column; grid: any; node: any }) {\r\n    const columnDef = args.column;\r\n    const columnId = columnDef.id || '';\r\n\r\n    if (columnDef && columnId !== 'selector' && columnDef.filterable) {\r\n      let searchTerms: SearchTerm[] | undefined;\r\n      let operator: OperatorString | OperatorType;\r\n      const filter: Filter | undefined = this.filterFactory.createFilter(args.column.filter);\r\n      operator = (columnDef && columnDef.filter && columnDef.filter.operator) || (filter && filter.operator) || undefined;\r\n\r\n      if (this._columnFilters[columnDef.id]) {\r\n        searchTerms = this._columnFilters[columnDef.id].searchTerms || undefined;\r\n        operator = this._columnFilters[columnDef.id].operator || undefined;\r\n      } else if (columnDef.filter) {\r\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\r\n        // because of that we need to first get searchTerm(s) from the columnFilters (that is what the user last entered)\r\n        searchTerms = columnDef.filter.searchTerms || undefined;\r\n        this.updateColumnFilters(searchTerms, columnDef, operator);\r\n      }\r\n\r\n      const filterArguments: FilterArguments = {\r\n        grid: this._grid,\r\n        operator,\r\n        searchTerms,\r\n        columnDef,\r\n        callback: this.callbackSearchEvent.bind(this)\r\n      };\r\n\r\n      if (filter) {\r\n        filter.init(filterArguments);\r\n        const filterExistIndex = this._filters.findIndex((filt) => filter.columnDef.name === filt.columnDef.name);\r\n\r\n        // add to the filters arrays or replace it when found\r\n        if (filterExistIndex === -1) {\r\n          this._filters.push(filter);\r\n        } else {\r\n          this._filters[filterExistIndex] = filter;\r\n        }\r\n\r\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\r\n        // we need to also set again the values in the DOM elements if the values were set by a searchTerm(s)\r\n        if (searchTerms && filter.setValues) {\r\n          filter.setValues(searchTerms);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\r\n   * Other services, like Pagination, can then subscribe to it.\r\n   * @param sender\r\n   */\r\n  emitFilterChanged(sender: 'local' | 'remote') {\r\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      let currentFilters: CurrentFilter[] = [];\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentFilters) {\r\n        currentFilters = backendService.getCurrentFilters() as CurrentFilter[];\r\n      }\r\n      this.onFilterChanged.next(currentFilters);\r\n    } else if (sender === 'local') {\r\n      this.onFilterChanged.next(this.getCurrentLocalFilters());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When user passes an array of preset filters, we need to pre-populate each column filter searchTerm(s)\r\n   * The process is to loop through the preset filters array, find the associated column from columnDefinitions and fill in the filter object searchTerm(s)\r\n   * This is basically the same as if we would manually add searchTerm(s) to a column filter object in the column definition, but we do it programmatically.\r\n   * At the end of the day, when creating the Filter (DOM Element), it will use these searchTerm(s) so we can take advantage of that without recoding each Filter type (DOM element)\r\n   */\r\n  populateColumnFilterSearchTerms() {\r\n    if (this._gridOptions.presets && Array.isArray(this._gridOptions.presets.filters) && this._gridOptions.presets.filters.length > 0) {\r\n      const filters = this._gridOptions.presets.filters;\r\n      this._columnDefinitions.forEach((columnDef: Column) =>  {\r\n        // clear any columnDef searchTerms before applying Presets\r\n        if (columnDef.filter && columnDef.filter.searchTerms) {\r\n          delete columnDef.filter.searchTerms;\r\n        }\r\n\r\n        // from each presets, we will find the associated columnDef and apply the preset searchTerms & operator if there is\r\n        const columnPreset = filters.find((presetFilter: CurrentFilter) => {\r\n          return presetFilter.columnId === columnDef.id;\r\n        });\r\n        if (columnPreset && columnPreset.searchTerms && Array.isArray(columnPreset.searchTerms)) {\r\n          columnDef.filter = columnDef.filter || {};\r\n          columnDef.filter.operator = columnPreset.operator || columnDef.filter.operator || '';\r\n          columnDef.filter.searchTerms = columnPreset.searchTerms;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private updateColumnFilters(searchTerms: SearchTerm[] | undefined, columnDef: any, operator?: OperatorType | OperatorString) {\r\n    if (searchTerms && columnDef) {\r\n      // this._columnFilters.searchTerms = searchTerms;\r\n      this._columnFilters[columnDef.id] = {\r\n        columnId: columnDef.id,\r\n        columnDef,\r\n        searchTerms,\r\n        operator\r\n      };\r\n    }\r\n  }\r\n\r\n  private triggerEvent(slickEvent: any, args: any, e: any) {\r\n    slickEvent = slickEvent || new Slick.Event();\r\n\r\n    // event might have been created as a CustomEvent (e.g. CompoundDateFilter), without being a valid Slick.EventData.\r\n    // if so we will create a new Slick.EventData and merge it with that CustomEvent to avoid having SlickGrid errors\r\n    let event = e;\r\n    if (e && typeof e.isPropagationStopped !== 'function') {\r\n      event = $.extend({}, new Slick.EventData(), e);\r\n    }\r\n    slickEvent.notify(args, event, args.grid);\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  ExportOption,\n  FileType,\n  Formatter,\n  GridOption\n} from './../models/index';\nimport { addWhiteSpaces, htmlEntityDecode, sanitizeHtmlToText } from './../services/utilities';\nimport { Subject } from 'rxjs/Subject';\nimport { TextEncoder } from 'text-encoding-utf-8';\n\n// using external non-typed js libraries\ndeclare let Slick: any;\ndeclare let $: any;\n\nexport interface ExportColumnHeader {\n  key: string;\n  title: string;\n}\n\n@Injectable()\nexport class ExportService {\n  private _lineCarriageReturn = '\\n';\n  private _dataView: any;\n  private _grid: any;\n  private _exportQuoteWrapper: string;\n  private _columnHeaders: ExportColumnHeader[];\n  private _groupedHeaders: ExportColumnHeader[];\n  private _hasGroupedItems = false;\n  private _exportOptions: ExportOption;\n  onGridBeforeExportToFile = new Subject<boolean>();\n  onGridAfterExportToFile = new Subject<{ options: any }>();\n\n  constructor(private translate: TranslateService) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Export Service\n   * @param grid\n   * @param gridOptions\n   * @param dataView\n   */\n  init(grid: any, dataView: any): void {\n    this._grid = grid;\n    this._dataView = dataView;\n  }\n\n  /**\n   * Function to export the Grid result to an Excel CSV format using javascript for it to produce the CSV file.\n   * This is a WYSIWYG export to file output (What You See is What You Get)\n   *\n   * NOTES: The column position needs to match perfectly the JSON Object position because of the way we are pulling the data,\n   * which means that if any column(s) got moved in the UI, it has to be reflected in the JSON array output as well\n   *\n   * Example: exportToFile({ format: FileType.csv, delimiter: DelimiterType.comma })\n   */\n  exportToFile(options: ExportOption) {\n    this.onGridBeforeExportToFile.next(true);\n    this._exportOptions = $.extend(true, {}, this._gridOptions.exportOptions, options);\n\n    // get the CSV output from the grid data\n    const dataOutput = this.getDataOutput();\n\n    // trigger a download file\n    // wrap it into a setTimeout so that the EventAggregator has enough time to start a pre-process like showing a spinner\n    setTimeout(() => {\n      const downloadOptions = {\n        filename: `${this._exportOptions.filename}.${this._exportOptions.format}`,\n        csvContent: dataOutput,\n        format: this._exportOptions.format,\n        useUtf8WithBom: this._exportOptions.useUtf8WithBom\n      };\n      this.startDownloadFile(downloadOptions);\n      this.onGridAfterExportToFile.next({ options: downloadOptions });\n    }, 0);\n  }\n\n  // -----------------------\n  // Private functions\n  // -----------------------\n\n  getDataOutput(): string {\n    const columns = this._grid.getColumns() || [];\n    const delimiter = this._exportOptions.delimiter || '';\n    const format = this._exportOptions.format || '';\n    const groupByColumnHeader = this._exportOptions.groupingColumnHeaderTitle || this.translate.instant('GROUP_BY');\n\n    // a CSV needs double quotes wrapper, the other types do not need any wrapper\n    this._exportQuoteWrapper = (format === FileType.csv) ? '\"' : '';\n\n    // data variable which will hold all the fields data of a row\n    let outputDataString = '';\n\n    // get grouped column titles and if found, we will add a \"Group by\" column at the first column index\n    const grouping = this._dataView.getGrouping();\n    if (grouping && Array.isArray(grouping) && grouping.length > 0) {\n      this._hasGroupedItems = true;\n      outputDataString += `${groupByColumnHeader}` + delimiter;\n    } else {\n      this._hasGroupedItems = false;\n    }\n\n    // get all column headers\n    this._columnHeaders = this.getColumnHeaders(columns) || [];\n    if (this._columnHeaders && Array.isArray(this._columnHeaders) && this._columnHeaders.length > 0) {\n      // add the header row + add a new line at the end of the row\n      const outputHeaderTitles = this._columnHeaders.map((header) => {\n        return this._exportQuoteWrapper + header.title + this._exportQuoteWrapper;\n      });\n      outputDataString += (outputHeaderTitles.join(delimiter) + this._lineCarriageReturn);\n    }\n\n    // Populate the rest of the Grid Data\n    outputDataString += this.getAllGridRowData(columns, this._lineCarriageReturn);\n\n    return outputDataString;\n  }\n\n  /**\n   * Get all the grid row data and return that as an output string\n   */\n  getAllGridRowData(columns: Column[], lineCarriageReturn: string): string {\n    let outputDataString = '';\n    const lineCount = this._dataView.getLength();\n\n    // loop through all the grid rows of data\n    for (let rowNumber = 0; rowNumber < lineCount; rowNumber++) {\n      const itemObj = this._dataView.getItem(rowNumber);\n\n      if (itemObj != null) {\n        // Normal row (not grouped by anything) would have an ID which was predefined in the Grid Columns definition\n        if (itemObj.id != null) {\n          // get regular row item data\n          outputDataString += this.readRegularRowData(columns, rowNumber, itemObj);\n        } else if (this._hasGroupedItems && itemObj.__groupTotals === undefined) {\n          // get the group row\n          outputDataString += this.readGroupedTitleRow(itemObj) + this._exportOptions.delimiter;\n        } else if (itemObj.__groupTotals) {\n          // else if the row is a Group By and we have agreggators, then a property of '__groupTotals' would exist under that object\n          outputDataString += this.readGroupedTotalRow(columns, itemObj) + this._exportOptions.delimiter;\n        }\n        outputDataString += lineCarriageReturn;\n      }\n    }\n\n    return outputDataString;\n  }\n\n  /**\n   * Get all header titles and their keys, translate the title when required.\n   * @param columns of the grid\n   */\n  getColumnHeaders(columns: Column[]): ExportColumnHeader[] {\n    if (!columns || !Array.isArray(columns) || columns.length === 0) {\n      return null;\n    }\n    const columnHeaders = [];\n\n    // Populate the Column Header, pull the name defined\n    columns.forEach((columnDef) => {\n      const fieldName = (columnDef.headerKey) ? this.translate.instant(columnDef.headerKey) : columnDef.name;\n      const skippedField = columnDef.excludeFromExport || false;\n\n      // if column width is 0 then it's not evaluated since that field is considered hidden should not be part of the export\n      if ((columnDef.width ===  undefined || columnDef.width > 0) && !skippedField) {\n        columnHeaders.push({\n          key: columnDef.field || columnDef.id,\n          title: fieldName\n        });\n      }\n    });\n\n    return columnHeaders;\n  }\n\n  /**\n   * Get the data of a regular row (a row without grouping)\n   * @param row\n   * @param itemObj\n   */\n  readRegularRowData(columns: Column[], row: number, itemObj: any) {\n    let idx = 0;\n    let rowOutputString = '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n\n    for (let col = 0, ln = columns.length; col < ln; col++) {\n      const columnDef = columns[col];\n      const fieldId = columnDef.field || columnDef.id || '';\n\n      // skip excluded column\n      if (columnDef.excludeFromExport) {\n          continue;\n      }\n\n      // if we are grouping and are on 1st column index, we need to skip this column since it will be used later by the grouping text:: Group by [columnX]\n      if (this._hasGroupedItems && idx === 0) {\n        rowOutputString += `\"\"` + delimiter;\n      }\n\n      // does the user want to evaluate current column Formatter?\n      const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._exportOptions.exportWithFormatter;\n\n      // did the user provide a Custom Formatter for the export\n      const exportCustomFormatter: Formatter = (columnDef.exportCustomFormatter !== undefined) ? columnDef.exportCustomFormatter : undefined;\n\n      let itemData = '';\n\n      if (exportCustomFormatter) {\n        itemData = exportCustomFormatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\n      } else if (isEvaluatingFormatter && !!columnDef.formatter) {\n        itemData = columnDef.formatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\n      } else {\n        itemData = (itemObj[fieldId] === null || itemObj[fieldId] === undefined) ? '' : itemObj[fieldId];\n      }\n\n      // does the user want to sanitize the output data (remove HTML tags)?\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n        itemData = sanitizeHtmlToText(itemData);\n      }\n\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n      if (format === FileType.csv) {\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n      }\n\n      // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n      // to cancel that effect we can had = in front, ex: =\"1E06\"\n      const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\n\n      rowOutputString += keepAsStringWrapper + exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\n      idx++;\n    }\n\n    return rowOutputString;\n  }\n\n  /**\n   * Get the grouped title(s), for example if we grouped by salesRep, the returned result would be:: 'Sales Rep'\n   * @param itemObj\n   */\n  readGroupedTitleRow(itemObj: any) {\n    let groupName = sanitizeHtmlToText(itemObj.title);\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n\n    groupName = addWhiteSpaces(5 * itemObj.level) + groupName;\n\n    if (format === FileType.csv) {\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n      groupName = groupName.toString().replace(/\"/gi, `\"\"`);\n    }\n\n    // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n    // to cancel that effect we can had = in front, ex: =\"1E06\"\n    // const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\n\n    return /*keepAsStringWrapper +*/ exportQuoteWrapper + ' ' + groupName + exportQuoteWrapper + delimiter;\n  }\n\n  /**\n   * Get the grouped totals, these are set by Slick Aggregators.\n   * For example if we grouped by \"salesRep\" and we have a Sum Aggregator on \"sales\", then the returned output would be:: [\"Sum 123$\"]\n   * @param itemObj\n   */\n  readGroupedTotalRow(columns: Column[], itemObj: any) {\n    let exportExponentialWrapper = '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n    const groupingAggregatorRowText = this._exportOptions.groupingAggregatorRowText || '';\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n    let output = `${exportQuoteWrapper}${groupingAggregatorRowText}${exportQuoteWrapper}${delimiter}`;\n\n    columns.forEach((columnDef) => {\n      let itemData = '';\n\n      // if there's a groupTotalsFormatter, we will re-run it to get the exact same output as what is shown in UI\n      if (columnDef.groupTotalsFormatter) {\n        itemData = columnDef.groupTotalsFormatter(itemObj, columnDef);\n      }\n\n      // does the user want to sanitize the output data (remove HTML tags)?\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n        itemData = sanitizeHtmlToText(itemData);\n      }\n\n      if (format === FileType.csv) {\n        // when CSV we also need to escape double quotes twice, so a double quote \" becomes 2x double quotes \"\"\n        // and if we have a text of (number)E(number),\n        // we don't want excel to transform it into exponential (1.0E06) to cancel that effect we can had = in front, ex: =\"1E06\"\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n        exportExponentialWrapper = (itemData.match(/^\\s*\\d+E\\d+\\s*$/i)) ? '=' : '';\n      }\n      output += exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\n    });\n\n    return output;\n  }\n\n  /**\n   * Triggers download file with file format.\n   * IE(6-10) are not supported\n   * All other browsers will use plain javascript on client side to produce a file download.\n   * @param options\n   */\n  startDownloadFile(options: { filename: string, csvContent: any, format: FileType | string, useUtf8WithBom: boolean }): void {\n    // IE(6-10) don't support javascript download and our service doesn't support either so throw an error, we have to make a round trip to the Web Server for exporting\n    if (navigator.appName === 'Microsoft Internet Explorer') {\n      throw new Error('Microsoft Internet Explorer 6 to 10 do not support javascript export to CSV. Please upgrade your browser.');\n    }\n\n    // set the correct MIME type\n    const mimeType = (options.format === FileType.csv) ? 'text/csv' : 'text/plain';\n\n    // make sure no html entities exist in the data\n    const csvContent = htmlEntityDecode(options.csvContent);\n\n    // dealing with Excel CSV export and UTF-8 is a little tricky.. We will use Option #2 to cover older Excel versions\n    // Option #1: we need to make Excel knowing that it's dealing with an UTF-8, A correctly formatted UTF8 file can have a Byte Order Mark as its first three octets\n    // reference: http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\n    // Option#2: use a 3rd party extension to javascript encode into UTF-16\n    let outputData: Uint8Array | string;\n    if (options.format === FileType.csv) {\n      outputData = new TextEncoder('utf-8').encode(csvContent);\n    } else {\n      outputData = csvContent;\n    }\n\n    // create a Blob object for the download\n    const blob = new Blob([options.useUtf8WithBom ? '\\uFEFF' : '', outputData], {\n      type: `${mimeType};charset=utf-8;`\n    });\n\n    // when using IE/Edge, then use different download call\n    if (typeof navigator.msSaveOrOpenBlob === 'function') {\n      navigator.msSaveOrOpenBlob(blob, options.filename);\n    } else {\n      // this trick will generate a temp <a /> tag\n      // the code will then trigger a hidden click for it to start downloading\n      const link = document.createElement('a');\n      const csvUrl = URL.createObjectURL(blob);\n\n      link.textContent = 'download';\n      link.href = csvUrl;\n      link.setAttribute('download', options.filename);\n\n      // set the visibility to hidden so there is no effect on your web-layout\n      link.style.visibility = 'hidden';\n\n      // this part will append the anchor tag, trigger a click (for download to start) and finally remove the tag once completed\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n}\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\r\nimport { castToPromise } from './utilities';\r\nimport {\r\n  CellArgs,\r\n  Column,\r\n  ColumnSort,\r\n  CurrentSorter,\r\n  FieldType,\r\n  GridOption,\r\n  SlickEvent,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\nimport { Sorters } from './../sorters';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// using external non-typed js libraries\r\ndeclare var Slick: any;\r\n\r\nexport class SortService {\r\n  private _currentLocalSorters: CurrentSorter[] = [];\r\n  private _eventHandler: any = new Slick.EventHandler();\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _slickSubscriber: SlickEvent;\r\n  private _isBackendGrid = false;\r\n  onSortChanged = new Subject<CurrentSorter[]>();\r\n  onSortCleared = new Subject<boolean>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  /**\r\n   * Attach a backend sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param dataView SlickGrid DataView object\r\n   */\r\n  attachBackendOnSort(grid: any, dataView: any) {\r\n    this._isBackendGrid = true;\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = grid.onSort;\r\n\r\n    // subscribe to the SlickGrid event and call the backend execution\r\n    this._slickSubscriber.subscribe(this.onBackendSortChanged.bind(this));\r\n  }\r\n\r\n  async onBackendSortChanged(event: Event, args: any) {\r\n    if (!args || !args.grid) {\r\n      throw new Error('Something went wrong when trying to attach the \"onBackendSortChanged(event, args)\" function, it seems that \"args\" is not populated correctly');\r\n    }\r\n    const gridOptions: GridOption = args.grid.getOptions() || {};\r\n    const backendApi = gridOptions.backendServiceApi;\r\n\r\n    if (!backendApi || !backendApi.process || !backendApi.service) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n    if (backendApi.preProcess) {\r\n      backendApi.preProcess();\r\n    }\r\n    const query = backendApi.service.processOnSortChanged(event, args);\r\n    this.emitSortChanged('remote');\r\n\r\n    // the process could be an Observable (like HttpClient) or a Promise\r\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n    const observableOrPromise = backendApi.process(query);\r\n    const processResult = await castToPromise(observableOrPromise);\r\n\r\n    // from the result, call our internal post process to update the Dataset and Pagination info\r\n    if (processResult && backendApi.internalPostProcess) {\r\n      backendApi.internalPostProcess(processResult);\r\n    }\r\n\r\n    // send the response process to the postProcess callback\r\n    if (backendApi.postProcess) {\r\n      backendApi.postProcess(processResult);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attach a local sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param gridOptions Grid Options object\r\n   * @param dataView\r\n   */\r\n  attachLocalOnSort(grid: any, dataView: any) {\r\n    this._isBackendGrid = false;\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = grid.onSort;\r\n\r\n    this._slickSubscriber.subscribe((e: any, args: any) => {\r\n      // multiSort and singleSort are not exactly the same, but we want to structure it the same for the (for loop) after\r\n      // also to avoid having to rewrite the for loop in the sort, we will make the singleSort an array of 1 object\r\n      const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({sortAsc: args.sortAsc, sortCol: args.sortCol});\r\n\r\n      // keep current sorters\r\n      this._currentLocalSorters = []; // reset current local sorters\r\n      if (Array.isArray(sortColumns)) {\r\n        sortColumns.forEach((sortColumn: { sortCol: Column, sortAsc: number }) => {\r\n          if (sortColumn.sortCol) {\r\n            this._currentLocalSorters.push({\r\n              columnId: sortColumn.sortCol.id,\r\n              direction: sortColumn.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      this.onLocalSortChanged(grid, dataView, sortColumns);\r\n      this.emitSortChanged('local');\r\n    });\r\n  }\r\n\r\n  clearSorting() {\r\n    if (this._grid && this._gridOptions && this._dataView) {\r\n      // remove any sort icons (this setSortColumns function call really does only that)\r\n      this._grid.setSortColumns([]);\r\n\r\n      // we also need to trigger a sort change\r\n      // for a backend grid, we will trigger a backend sort changed with an empty sort columns array\r\n      // however for a local grid, we need to pass a sort column and so we will sort by the 1st column\r\n      if (this._isBackendGrid) {\r\n        this.onBackendSortChanged(undefined, { grid: this._grid, sortCols: [] });\r\n      } else {\r\n        if (this._columnDefinitions && Array.isArray(this._columnDefinitions)) {\r\n          this.onLocalSortChanged(this._grid, this._dataView, new Array({sortAsc: true, sortCol: this._columnDefinitions[0] }));\r\n        }\r\n      }\r\n    }\r\n    // set current sorter to empty & emit a sort changed event\r\n    this._currentLocalSorters = [];\r\n\r\n    // emit an event when filters are all cleared\r\n    this.onSortCleared.next(true);\r\n  }\r\n\r\n  getCurrentLocalSorters(): CurrentSorter[] {\r\n    return this._currentLocalSorters;\r\n  }\r\n\r\n  /**\r\n   * Get column sorts,\r\n   * If a column is passed as an argument, we won't add this column to our output array since it is already in the array\r\n   * We want to know the sort prior to calling the next sorting command\r\n   */\r\n  getPreviousColumnSorts(columnId?: string) {\r\n    // getSortColumns() only returns sortAsc & columnId, we want the entire column definition\r\n    const oldSortColumns = this._grid.getSortColumns();\r\n\r\n    // get the column definition but only keep column which are not equal to our current column\r\n    const sortedCols = oldSortColumns.reduce((cols, col) => {\r\n      if (!columnId || col.columnId !== columnId) {\r\n        cols.push({ sortCol: this._columnDefinitions[this._grid.getColumnIndex(col.columnId)], sortAsc: col.sortAsc });\r\n      }\r\n      return cols;\r\n    }, []);\r\n\r\n    return sortedCols;\r\n  }\r\n\r\n  /**\r\n   * load any presets if there are any\r\n   * @param grid\r\n   * @param dataView\r\n   */\r\n  loadLocalPresets(grid: any, dataView: any) {\r\n    const sortCols: ColumnSort[] = [];\r\n    this._currentLocalSorters = []; // reset current local sorters\r\n    if (this._gridOptions && this._gridOptions.presets && this._gridOptions.presets.sorters) {\r\n      const sorters = this._gridOptions.presets.sorters;\r\n\r\n      sorters.forEach((presetSorting: CurrentSorter) => {\r\n        const gridColumn = this._columnDefinitions.find((col: Column) => col.id === presetSorting.columnId);\r\n        if (gridColumn) {\r\n          sortCols.push({\r\n            columnId: gridColumn.id,\r\n            sortAsc: ((presetSorting.direction.toUpperCase() === SortDirection.ASC) ? true : false),\r\n            sortCol: gridColumn\r\n          });\r\n\r\n          // keep current sorters\r\n          this._currentLocalSorters.push({\r\n            columnId: gridColumn.id + '',\r\n            direction: presetSorting.direction.toUpperCase() as SortDirectionString\r\n          });\r\n        }\r\n      });\r\n\r\n      if (sortCols.length > 0) {\r\n        this.onLocalSortChanged(grid, dataView, sortCols);\r\n        grid.setSortColumns(sortCols); // use this to add sort icon(s) in UI\r\n      }\r\n    }\r\n  }\r\n\r\n  onLocalSortChanged(grid: any, dataView: any, sortColumns: ColumnSort[]) {\r\n    dataView.sort((dataRow1: any, dataRow2: any) => {\r\n      for (let i = 0, l = sortColumns.length; i < l; i++) {\r\n        const columnSortObj = sortColumns[i];\r\n        if (columnSortObj && columnSortObj.sortCol) {\r\n          const sortDirection = columnSortObj.sortAsc ? SortDirectionNumber.asc : SortDirectionNumber.desc;\r\n          const sortField = columnSortObj.sortCol.queryField || columnSortObj.sortCol.queryFieldFilter || columnSortObj.sortCol.field;\r\n          const fieldType = columnSortObj.sortCol.type || FieldType.string;\r\n          const value1 = dataRow1[sortField];\r\n          const value2 = dataRow2[sortField];\r\n          const sortResult = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n          if (sortResult !== SortDirectionNumber.neutral) {\r\n            return sortResult;\r\n          }\r\n        }\r\n      }\r\n      return 0;\r\n    });\r\n    grid.invalidate();\r\n    grid.render();\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe local event\r\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\r\n      this._slickSubscriber.unsubscribe();\r\n    }\r\n\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n  }\r\n\r\n  /**\r\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\r\n   * Other services, like Pagination, can then subscribe to it.\r\n   * @param sender\r\n   */\r\n  emitSortChanged(sender: 'local' | 'remote') {\r\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      let currentSorters: CurrentSorter[] = [];\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        currentSorters = backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n      this.onSortChanged.next(currentSorters);\r\n    } else if (sender === 'local') {\r\n      this.onSortChanged.next(this.getCurrentLocalSorters());\r\n    }\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport {\n  CellArgs,\n  ColumnSort,\n  Column,\n  DelimiterType,\n  Extension,\n  FileType,\n  GraphqlResult,\n  GridMenu,\n  GridMenuItem,\n  GridOption,\n  HeaderButtonOnCommandArgs,\n  HeaderMenu,\n  HeaderMenuItem,\n  HeaderMenuOnCommandArgs,\n  HeaderMenuOnBeforeMenuShowArgs,\n} from './../models/index';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, sanitizeHtmlToText } from './../services/utilities';\nimport { FilterService } from './filter.service';\nimport { ExportService } from './export.service';\nimport { SortService } from './sort.service';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class ControlAndPluginService {\n  private _dataView: any;\n  private _grid: any;\n  allColumns: Column[];\n  visibleColumns: Column[];\n  areVisibleColumnDifferent = false;\n  extensionList: Extension[] = [];\n  undoRedoBuffer: any;\n  userOriginalGridMenu: GridMenu;\n\n  // controls & plugins\n  autoTooltipPlugin: any;\n  cellExternalCopyManagerPlugin: any;\n  checkboxSelectorPlugin: any;\n  columnPickerControl: any;\n  gridMenuControl: any;\n  groupItemMetaProviderPlugin: any;\n  headerButtonsPlugin: any;\n  headerMenuPlugin: any;\n  rowSelectionPlugin: any;\n\n  constructor(\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private sortService: SortService,\n    private translate: TranslateService,\n  ) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  /** Get all columns (includes visible and non-visible) */\n  getAllColumns(): Column[] {\n    return this.allColumns || [];\n  }\n\n  /** Get only visible columns */\n  getVisibleColumns(): Column[] {\n    return this.visibleColumns || [];\n  }\n\n  /** Get all Extensions */\n  getAllExtensions(): Extension[] {\n    return this.extensionList;\n  }\n\n  /**\n   * Get an Extension by it's name\n   *  @param name\n   */\n  getExtensionByName(name: string): Extension | undefined {\n    return this.extensionList.find((p) => p.name === name);\n  }\n\n  /** Auto-resize all the column in the grid to fit the grid width */\n  autoResizeColumns() {\n    this._grid.autosizeColumns();\n  }\n\n  /**\n   * Attach/Create different Controls or Plugins after the Grid is created\n   * @param grid\n   * @param dataView\n   * @param groupItemMetadataProvider\n   */\n  attachDifferentControlOrPlugins(grid: any, dataView: any, groupItemMetadataProvider: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n    this.allColumns = this._columnDefinitions;\n    this.visibleColumns = this._columnDefinitions;\n\n    // make sure all columns are translated before creating ColumnPicker/GridMenu Controls\n    // this is to avoid having hidden columns not being translated on first load\n    if (this._gridOptions.enableTranslate) {\n      this.translateHeaderKeys(this.allColumns);\n    }\n\n    // Column Picker Control\n    if (this._gridOptions.enableColumnPicker) {\n      this.columnPickerControl = this.createColumnPicker(this._grid, this._columnDefinitions);\n      this.extensionList.push({ name: 'ColumnPicker', service: this.columnPickerControl });\n    }\n\n    // Grid Menu Control\n    if (this._gridOptions.enableGridMenu) {\n      // keep original user grid menu, useful when switching locale to translate\n      this.userOriginalGridMenu = { ...this._gridOptions.gridMenu };\n\n      this.gridMenuControl = this.createGridMenu(this._grid, this._columnDefinitions);\n      this.extensionList.push({ name: 'GridMenu', service: this.gridMenuControl });\n    }\n\n    // Auto Tooltip Plugin\n    if (this._gridOptions.enableAutoTooltip) {\n      this.autoTooltipPlugin = new Slick.AutoTooltips(this._gridOptions.autoTooltipOptions || {});\n      this._grid.registerPlugin(this.autoTooltipPlugin);\n      this.extensionList.push({ name: 'AutoTooltip', service: this.autoTooltipPlugin });\n    }\n\n    // Grouping Plugin\n    // register the group item metadata provider to add expand/collapse group handlers\n    if (this._gridOptions.enableGrouping) {\n      this.groupItemMetaProviderPlugin = groupItemMetadataProvider || {};\n      this._grid.registerPlugin(this.groupItemMetaProviderPlugin);\n      this.extensionList.push({ name: 'GroupItemMetaProvider', service: this.groupItemMetaProviderPlugin });\n    }\n\n    // Checkbox Selector Plugin\n    if (this._gridOptions.enableCheckboxSelector) {\n      // when enabling the Checkbox Selector Plugin, we need to also watch onClick events to perform certain actions\n      // the selector column has to be created BEFORE the grid (else it behaves oddly), but we can only watch grid events AFTER the grid is created\n      this._grid.registerPlugin(this.checkboxSelectorPlugin);\n      this.extensionList.push({ name: 'CheckboxSelector', service: this.checkboxSelectorPlugin });\n\n      // this also requires the Row Selection Model to be registered as well\n      if (!this.rowSelectionPlugin || !this._grid.getSelectionModel()) {\n        this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n        this._grid.setSelectionModel(this.rowSelectionPlugin);\n      }\n\n      // user might want to pre-select some rows\n      // the setTimeout is because of timing issue with styling (row selection happen but rows aren't highlighted properly)\n      if (this._gridOptions.preselectedRows && this.rowSelectionPlugin && this._grid.getSelectionModel()) {\n        setTimeout(() => this.checkboxSelectorPlugin.selectRows(this._gridOptions.preselectedRows), 0);\n      }\n    }\n\n    // Row Selection Plugin\n    if (!this._gridOptions.enableCheckboxSelector && this._gridOptions.enableRowSelection) {\n      this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n      this._grid.setSelectionModel(this.rowSelectionPlugin);\n    }\n\n    // Header Button Plugin\n    if (this._gridOptions.enableHeaderButton) {\n      this.headerButtonsPlugin = new Slick.Plugins.HeaderButtons(this._gridOptions.headerButton || {});\n      this._grid.registerPlugin(this.headerButtonsPlugin);\n      this.extensionList.push({ name: 'HeaderButtons', service: this.headerButtonsPlugin });\n      this.headerButtonsPlugin.onCommand.subscribe((e: Event, args: HeaderButtonOnCommandArgs) => {\n        if (this._gridOptions.headerButton && typeof this._gridOptions.headerButton.onCommand === 'function') {\n          this._gridOptions.headerButton.onCommand(e, args);\n        }\n      });\n    }\n\n    // Header Menu Plugin\n    if (this._gridOptions.enableHeaderMenu) {\n      this.headerMenuPlugin = this.createHeaderMenu(this._grid, this._dataView, this._columnDefinitions);\n    }\n\n    // Cell External Copy Manager Plugin (Excel Like)\n    if (this._gridOptions.enableExcelCopyBuffer) {\n      this.createUndoRedoBuffer();\n      this.hookUndoShortcutKey();\n      this.createCellExternalCopyManagerPlugin(this._grid);\n    }\n\n    // manually register other plugins\n    if (this._gridOptions.registerPlugins !== undefined) {\n      if (Array.isArray(this._gridOptions.registerPlugins)) {\n        this._gridOptions.registerPlugins.forEach((plugin) => {\n          this._grid.registerPlugin(plugin);\n          this.extensionList.push({ name: 'generic', service: plugin });\n        });\n      } else {\n        this._grid.registerPlugin(this._gridOptions.registerPlugins);\n        this.extensionList.push({ name: 'generic', service: this._gridOptions.registerPlugins });\n      }\n    }\n  }\n\n  /**\n   * Attach/Create different plugins before the Grid creation.\n   * For example the multi-select have to be added to the column definition before the grid is created to work properly\n   * @param columnDefinitions\n   * @param options\n   */\n  createCheckboxPluginBeforeGridCreation(columnDefinitions: Column[], options: GridOption) {\n    if (options.enableCheckboxSelector) {\n      if (!this.checkboxSelectorPlugin) {\n        this.checkboxSelectorPlugin = new Slick.CheckboxSelectColumn(options.checkboxSelector || {});\n      }\n      const selectionColumn: Column = this.checkboxSelectorPlugin.getColumnDefinition();\n      selectionColumn.excludeFromExport = true;\n      selectionColumn.excludeFromQuery = true;\n      selectionColumn.excludeFromHeaderMenu = true;\n      columnDefinitions.unshift(selectionColumn);\n    }\n  }\n\n  /** Create the Excel like copy manager */\n  createCellExternalCopyManagerPlugin(grid: any) {\n    let newRowIds = 0;\n    const pluginOptions = {\n      clipboardCommandHandler: (editCommand: any) => {\n        this.undoRedoBuffer.queueAndExecuteCommand.call(this.undoRedoBuffer, editCommand);\n      },\n      dataItemColumnValueExtractor: (item: any, columnDef: Column) => {\n        // when grid or cell is not editable, we will possibly evaluate the Formatter if it was passed\n        // to decide if we evaluate the Formatter, we will use the same flag from Export which is \"exportWithFormatter\"\n        if (!this._gridOptions.editable || !columnDef.editor) {\n          const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._gridOptions.exportOptions.exportWithFormatter;\n          if (columnDef.formatter && isEvaluatingFormatter) {\n            const formattedOutput = columnDef.formatter(0, 0, item[columnDef.field], columnDef, item, this._grid);\n            if (columnDef.sanitizeDataExport || (this._gridOptions.exportOptions && this._gridOptions.exportOptions.sanitizeDataExport)) {\n              return sanitizeHtmlToText(formattedOutput);\n            }\n            return formattedOutput;\n          }\n        }\n\n        // else use the default \"dataItemColumnValueExtractor\" from the plugin itself\n        // we can do that by setting back the getter with null\n        return null;\n      },\n      readOnlyMode: false,\n      includeHeaderWhenCopying: false,\n      newRowCreator: (count: number) => {\n        for (let i = 0; i < count; i++) {\n          const item = {\n            id: 'newRow_' + newRowIds++\n          };\n          grid.getData().addItem(item);\n        }\n      }\n    };\n\n    grid.setSelectionModel(new Slick.CellSelectionModel());\n    this.cellExternalCopyManagerPlugin = new Slick.CellExternalCopyManager(pluginOptions);\n    grid.registerPlugin(this.cellExternalCopyManagerPlugin);\n    this.extensionList.push({ name: 'CellExternalCopyManager', service: this.cellExternalCopyManagerPlugin });\n  }\n\n  /**\n   * Create the Column Picker and expose all the available hooks that user can subscribe (onColumnsChanged)\n   * @param grid\n   * @param columnDefinitions\n   */\n  createColumnPicker(grid: any, columnDefinitions: Column[]) {\n    // localization support for the picker\n    const forceFitTitle = this._gridOptions.enableTranslate ? this.getDefaultTranslationByKey('forcefit') : 'Force fit columns';\n    const syncResizeTitle = this._gridOptions.enableTranslate ? this.getDefaultTranslationByKey('synch') : 'Synchronous resize';\n\n    this._gridOptions.columnPicker = this._gridOptions.columnPicker || {};\n    this._gridOptions.columnPicker.forceFitTitle = this._gridOptions.columnPicker.forceFitTitle || forceFitTitle;\n    this._gridOptions.columnPicker.syncResizeTitle = this._gridOptions.columnPicker.syncResizeTitle || syncResizeTitle;\n\n    this.columnPickerControl = new Slick.Controls.ColumnPicker(columnDefinitions, grid, this._gridOptions);\n    if (grid && this._gridOptions.enableColumnPicker) {\n      this.columnPickerControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\n        if (this._gridOptions.columnPicker && typeof this._gridOptions.columnPicker.onColumnsChanged === 'function') {\n          this._gridOptions.columnPicker.onColumnsChanged(e, args);\n        }\n      });\n    }\n\n    return this.columnPickerControl;\n  }\n\n  /**\n   * Create (or re-create) Grid Menu and expose all the available hooks that user can subscribe (onCommand, onMenuClose, ...)\n   * @param grid\n   * @param columnDefinitions\n   */\n  createGridMenu(grid: any, columnDefinitions: Column[]) {\n    if (this._gridOptions && this._gridOptions.gridMenu) {\n      this._gridOptions.gridMenu = { ...this.getDefaultGridMenuOptions(), ...this._gridOptions.gridMenu };\n\n      // merge original user grid menu items with internal items\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\n      this._gridOptions.gridMenu.customItems = [...this.userOriginalGridMenu.customItems || [], ...this.addGridMenuCustomCommands()];\n      this.sortItems(this._gridOptions.gridMenu.customItems, 'positionOrder');\n\n      const gridMenuControl = new Slick.Controls.GridMenu(columnDefinitions, grid, this._gridOptions);\n      if (grid && this._gridOptions.gridMenu) {\n        gridMenuControl.onBeforeMenuShow.subscribe((e: Event, args: CellArgs) => {\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onBeforeMenuShow === 'function') {\n            this._gridOptions.gridMenu.onBeforeMenuShow(e, args);\n          }\n        });\n        gridMenuControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\n          this.areVisibleColumnDifferent = true;\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onColumnsChanged === 'function') {\n            this._gridOptions.gridMenu.onColumnsChanged(e, args);\n          }\n        });\n        gridMenuControl.onCommand.subscribe((e: Event, args: GridMenuItem) => {\n          this.executeGridMenuInternalCustomCommands(e, args);\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onCommand === 'function') {\n            this._gridOptions.gridMenu.onCommand(e, args);\n          }\n        });\n        gridMenuControl.onMenuClose.subscribe((e: Event, args: CellArgs) => {\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onMenuClose === 'function') {\n            this._gridOptions.gridMenu.onMenuClose(e, args);\n          }\n\n          // we also want to resize the columns if the user decided to hide certain column(s)\n          if (grid && typeof grid.autosizeColumns === 'function') {\n            // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree)\n            const gridUid = grid.getUID();\n            if (this.areVisibleColumnDifferent && gridUid && $(`.${gridUid}`).length > 0) {\n              grid.autosizeColumns();\n              this.areVisibleColumnDifferent = false;\n            }\n          }\n        });\n      }\n      return gridMenuControl;\n    }\n    return null;\n  }\n\n  /**\n   * Create the Header Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)\n   * @param grid\n   * @param dataView\n   * @param columnDefinitions\n   */\n  createHeaderMenu(grid: any, dataView: any, columnDefinitions: Column[]) {\n    this._gridOptions.headerMenu = { ...this.getDefaultHeaderMenuOptions(), ...this._gridOptions.headerMenu };\n    if (this._gridOptions.enableHeaderMenu) {\n      this._gridOptions.headerMenu = this.addHeaderMenuCustomCommands(grid, dataView, this._gridOptions, columnDefinitions);\n    }\n\n    const headerMenuPlugin = new Slick.Plugins.HeaderMenu(this._gridOptions.headerMenu);\n\n    grid.registerPlugin(headerMenuPlugin);\n    headerMenuPlugin.onCommand.subscribe((e: Event, args: HeaderMenuOnCommandArgs) => {\n      this.executeHeaderMenuInternalCommands(e, args);\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onCommand === 'function') {\n        this._gridOptions.headerMenu.onCommand(e, args);\n      }\n    });\n    headerMenuPlugin.onBeforeMenuShow.subscribe((e: Event, args: HeaderMenuOnBeforeMenuShowArgs) => {\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onBeforeMenuShow === 'function') {\n        this._gridOptions.headerMenu.onBeforeMenuShow(e, args);\n      }\n    });\n\n    return headerMenuPlugin;\n  }\n\n  /** Create an undo redo buffer used by the Excel like copy */\n  createUndoRedoBuffer() {\n    const commandQueue: any[] = [];\n    let commandCtr = 0;\n\n    this.undoRedoBuffer = {\n      queueAndExecuteCommand: (editCommand: any) => {\n        commandQueue[commandCtr] = editCommand;\n        commandCtr++;\n        editCommand.execute();\n      },\n      undo: () => {\n        if (commandCtr === 0) { return; }\n        commandCtr--;\n        const command = commandQueue[commandCtr];\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\n          command.undo();\n        }\n      },\n      redo: () => {\n        if (commandCtr >= commandQueue.length) { return; }\n        const command = commandQueue[commandCtr];\n        commandCtr++;\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\n          command.execute();\n        }\n      }\n    };\n  }\n\n  /** Hide a column from the grid */\n  hideColumn(column: Column) {\n    if (this._grid && this.visibleColumns) {\n      const columnIndex = this._grid.getColumnIndex(column.id);\n      this.visibleColumns = this.removeColumnByIndex(this.visibleColumns, columnIndex);\n      this._grid.setColumns(this.visibleColumns);\n    }\n  }\n\n  /** Attach an undo shortcut key hook that will redo/undo the copy buffer */\n  hookUndoShortcutKey() {\n    // undo shortcut\n    $(document).keydown((e) => {\n      if (e.which === 90 && (e.ctrlKey || e.metaKey)) {    // CTRL + (shift) + Z\n        if (e.shiftKey) {\n          this.undoRedoBuffer.redo();\n        } else {\n          this.undoRedoBuffer.undo();\n        }\n      }\n    });\n  }\n\n  /** Dispose of all the controls & plugins */\n  dispose() {\n    this._grid = null;\n    this._dataView = null;\n    this.visibleColumns = [];\n\n    // dispose of each control/plugin if it has a destroy method\n    this.extensionList.forEach((item) => {\n      if (item && item.service && item.service.destroy) {\n        item.service.destroy();\n      }\n    });\n    this.extensionList = [];\n  }\n\n  /** Create Grid Menu with Custom Commands if user has enabled Filters and/or uses a Backend Service (OData, GraphQL) */\n  private addGridMenuCustomCommands() {\n    const backendApi = this._gridOptions.backendServiceApi || null;\n    const gridMenuCustomItems: GridMenuItem[] = [];\n\n    if (this._gridOptions && this._gridOptions.enableFiltering) {\n      // show grid menu: clear all filters\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllFiltersCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllFiltersCommand || 'fa fa-filter text-danger',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_FILTERS') : 'Clear All Filters',\n            disabled: false,\n            command: 'clear-filter',\n            positionOrder: 50\n          }\n        );\n      }\n\n      // show grid menu: toggle filter row\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideToggleFilterCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconToggleFilterCommand || 'fa fa-random',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('TOGGLE_FILTER_ROW') : 'Toggle Filter Row',\n            disabled: false,\n            command: 'toggle-filter',\n            positionOrder: 52\n          }\n        );\n      }\n\n      // show grid menu: refresh dataset\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideRefreshDatasetCommand && backendApi) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconRefreshDatasetCommand || 'fa fa-refresh',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('REFRESH_DATASET') : 'Refresh Dataset',\n            disabled: false,\n            command: 'refresh-dataset',\n            positionOrder: 54\n          }\n        );\n      }\n    }\n\n    if (this._gridOptions.enableSorting) {\n      // show grid menu: clear all sorting\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllSortingCommand) {\n        gridMenuCustomItems.push(\n          {\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllSortingCommand || 'fa fa-unsorted text-danger',\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_SORTING') : 'Clear All Sorting',\n            disabled: false,\n            command: 'clear-sorting',\n            positionOrder: 51\n          }\n        );\n      }\n    }\n\n    // show grid menu: export to file\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportCsvCommand) {\n      gridMenuCustomItems.push(\n        {\n          iconCssClass: this._gridOptions.gridMenu.iconExportCsvCommand || 'fa fa-download',\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_CSV') : 'Export in CSV format',\n          disabled: false,\n          command: 'export-csv',\n          positionOrder: 53\n        }\n      );\n    }\n    // show grid menu: export to text file as tab delimited\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportTextDelimitedCommand) {\n      gridMenuCustomItems.push(\n        {\n          iconCssClass: this._gridOptions.gridMenu.iconExportTextDelimitedCommand || 'fa fa-download',\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_TAB_DELIMITED') : 'Export in Text format (Tab delimited)',\n          disabled: false,\n          command: 'export-text-delimited',\n          positionOrder: 54\n        }\n      );\n    }\n\n    // add the custom \"Commands\" title if there are any commands\n    if (this._gridOptions && this._gridOptions.gridMenu && (gridMenuCustomItems.length > 0 || this._gridOptions.gridMenu.customItems.length > 0)) {\n      const customTitle = this._gridOptions.enableTranslate ? this.getDefaultTranslationByKey('commands') : 'Commands';\n      this._gridOptions.gridMenu.customTitle = this._gridOptions.gridMenu.customTitle || customTitle;\n    }\n\n    return gridMenuCustomItems;\n  }\n\n  /**\n   * Create Header Menu with Custom Commands if user has enabled Header Menu\n   * @param grid\n   * @param dataView\n   * @param options\n   * @param columnDefinitions\n   * @return header menu\n   */\n  private addHeaderMenuCustomCommands(grid: any, dataView: any, options: GridOption, columnDefinitions: Column[]): HeaderMenu {\n    const headerMenuOptions = options.headerMenu;\n\n    if (columnDefinitions && Array.isArray(columnDefinitions) && options.enableHeaderMenu) {\n      columnDefinitions.forEach((columnDef: Column) => {\n        if (columnDef && !columnDef.excludeFromHeaderMenu) {\n          if (!columnDef.header || !columnDef.header.menu) {\n            columnDef.header = {\n              menu: {\n                items: []\n              }\n            };\n          }\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\n\n          // Sorting Commands\n          if (options.enableSorting && columnDef.sortable && !headerMenuOptions.hideSortCommands) {\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-asc').length === 0) {\n              columnHeaderMenuItems.push({\n                iconCssClass: headerMenuOptions.iconSortAscCommand || 'fa fa-sort-asc',\n                title: options.enableTranslate ? this.translate.instant('SORT_ASCENDING') : 'Sort Ascending',\n                command: 'sort-asc',\n                positionOrder: 50\n              });\n            }\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-desc').length === 0) {\n              columnHeaderMenuItems.push({\n                iconCssClass: headerMenuOptions.iconSortDescCommand || 'fa fa-sort-desc',\n                title: options.enableTranslate ? this.translate.instant('SORT_DESCENDING') : 'Sort Descending',\n                command: 'sort-desc',\n                positionOrder: 51\n              });\n            }\n          }\n\n          // Hide Column Command\n          if (!headerMenuOptions.hideColumnHideCommand && columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'hide').length === 0) {\n            columnHeaderMenuItems.push({\n              iconCssClass: headerMenuOptions.iconColumnHideCommand || 'fa fa-times',\n              title: options.enableTranslate ? this.translate.instant('HIDE_COLUMN') : 'Hide Column',\n              command: 'hide',\n              positionOrder: 52\n            });\n          }\n\n          // sort the custom items by their position in the list\n          columnHeaderMenuItems.sort((itemA, itemB) => {\n            if (itemA && itemB && itemA.hasOwnProperty('positionOrder') && itemB.hasOwnProperty('positionOrder')) {\n              return itemA.positionOrder - itemB.positionOrder;\n            }\n            return 0;\n          });\n        }\n      });\n\n    }\n\n    return headerMenuOptions;\n  }\n\n  /** Execute the Header Menu Commands that was triggered by the onCommand subscribe */\n  executeHeaderMenuInternalCommands(e: Event, args: HeaderMenuOnCommandArgs) {\n    if (args && args.command) {\n      switch (args.command) {\n        case 'hide':\n          this.hideColumn(args.column);\n          this.autoResizeColumns();\n          break;\n        case 'sort-asc':\n        case 'sort-desc':\n          // get previously sorted columns\n          const cols: ColumnSort[] = this.sortService.getPreviousColumnSorts(args.column.id + '');\n\n          // add to the column array, the column sorted by the header menu\n          cols.push({ sortCol: args.column, sortAsc: (args.command === 'sort-asc') });\n          if (this._gridOptions.backendServiceApi) {\n            this.sortService.onBackendSortChanged(e, { multiColumnSort: true, sortCols: cols, grid: this._grid });\n          } else {\n            this.sortService.onLocalSortChanged(this._grid, this._dataView, cols);\n          }\n\n          // update the this.gridObj sortColumns array which will at the same add the visual sort icon(s) on the UI\n          const newSortColumns: ColumnSort[] = cols.map((col) => {\n            return { columnId: col.sortCol.id, sortAsc: col.sortAsc };\n          });\n          this._grid.setSortColumns(newSortColumns); // add sort icon in UI\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /**\n   * Execute the Grid Menu Custom command callback that was triggered by the onCommand subscribe\n   * These are the default internal custom commands\n   * @param event\n   * @param GridMenuItem args\n   */\n  executeGridMenuInternalCustomCommands(e: Event, args: GridMenuItem) {\n    if (args && args.command) {\n      switch (args.command) {\n        case 'clear-filter':\n          this.filterService.clearFilters();\n          this._dataView.refresh();\n          break;\n        case 'clear-sorting':\n          this.sortService.clearSorting();\n          this._dataView.refresh();\n          break;\n        case 'export-csv':\n          this.exportService.exportToFile({\n            delimiter: DelimiterType.comma,\n            filename: 'export',\n            format: FileType.csv,\n            useUtf8WithBom: true\n          });\n          break;\n        case 'export-text-delimited':\n          this.exportService.exportToFile({\n            delimiter: DelimiterType.tab,\n            filename: 'export',\n            format: FileType.txt,\n            useUtf8WithBom: true\n          });\n          break;\n        case 'toggle-filter':\n          this._grid.setHeaderRowVisibility(!this._grid.getOptions().showHeaderRow);\n          break;\n        case 'toggle-toppanel':\n          this._grid.setTopPanelVisibility(!this._grid.getOptions().showTopPanel);\n          break;\n        case 'refresh-dataset':\n          this.refreshBackendDataset();\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /** Refresh the dataset through the Backend Service */\n  refreshBackendDataset() {\n    let query;\n    const backendApi = this._gridOptions.backendServiceApi;\n    if (!backendApi || !backendApi.service || !backendApi.process) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    if (backendApi.service) {\n      query = backendApi.service.buildQuery();\n    }\n\n    if (query && query !== '') {\n      if (backendApi.preProcess) {\n        backendApi.preProcess();\n      }\n\n      // the process could be an Observable (like HttpClient) or a Promise\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n      const observableOrPromise = backendApi.process(query);\n\n      castToPromise(observableOrPromise).then((processResult: GraphqlResult | any) => {\n        // from the result, call our internal post process to update the Dataset and Pagination info\n        if (processResult && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  /**\n   * Remove a column from the grid by it's index in the grid\n   * @param array input\n   * @param index\n   */\n  removeColumnByIndex(array: any[], index: number) {\n    return array.filter((el: any, i: number) => {\n      return index !== i;\n    });\n  }\n\n  /** Translate the Column Picker and it's last 2 checkboxes */\n  translateColumnPicker() {\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\n    if (this._gridOptions && this._gridOptions.columnPicker) {\n      this._gridOptions.columnPicker.columnTitle = this.getDefaultTranslationByKey('columns');\n      this._gridOptions.columnPicker.forceFitTitle = this.getDefaultTranslationByKey('forcefit');\n      this._gridOptions.columnPicker.syncResizeTitle = this.getDefaultTranslationByKey('synch');\n    }\n    this.translateHeaderKeys(this.allColumns);\n  }\n\n  /** Translate the Grid Menu titles and column picker */\n  translateGridMenu() {\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\n    // we also need to call the control init so that it takes the new Grid object with latest values\n    if (this._gridOptions && this._gridOptions.gridMenu) {\n      this._gridOptions.gridMenu.customItems = [];\n\n      // merge original user grid menu items with internal items\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\n      this._gridOptions.gridMenu.customTitle = this.userOriginalGridMenu && this.userOriginalGridMenu.customTitle || '';\n      this._gridOptions.gridMenu.customItems = [...this.userOriginalGridMenu.customItems || [], ...this.addGridMenuCustomCommands()];\n      this.sortItems(this._gridOptions.gridMenu.customItems, 'positionOrder');\n\n      this._gridOptions.gridMenu.columnTitle = this.getDefaultTranslationByKey('columns');\n      this._gridOptions.gridMenu.forceFitTitle = this.getDefaultTranslationByKey('forcefit');\n      this._gridOptions.gridMenu.syncResizeTitle = this.getDefaultTranslationByKey('synch');\n\n      // translate all columns (including non-visible)\n      this.translateHeaderKeys(this.allColumns);\n\n      // re-initialize the Grid Menu, that will recreate all the menus & list\n      // and so will act like a translate\n      // we do this instead of recreating the Grid Menu control itself (because doing so would destroy any previous commands attached)\n      this.gridMenuControl.init(this._grid);\n    }\n  }\n\n  /**\n   * Translate the Header Menu titles, we need to loop through all column definition to re-translate them\n   */\n  translateHeaderMenu() {\n    if (this._gridOptions && this._gridOptions.headerMenu) {\n      this.resetHeaderMenuTranslations(this.visibleColumns);\n    }\n  }\n\n  /**\n   * Translate manually the header titles.\n   * We could optionally pass a locale (that will change currently loaded locale), else it will use current locale\n   * @param locale to use\n   * @param new column definitions (optional)\n   */\n  translateColumnHeaders(locale?: boolean | string, newColumnDefinitions?: Column[]) {\n    if (locale) {\n      this.translate.use(locale as string);\n    }\n\n    const columnDefinitions = newColumnDefinitions || this._columnDefinitions;\n\n    this.translateHeaderKeys(columnDefinitions);\n    this.translateHeaderKeys(this.allColumns);\n\n    // re-render the column headers\n    this.renderColumnHeaders(columnDefinitions);\n  }\n\n  /**\n   * Render (or re-render) the column headers from column definitions.\n   * calling setColumns() will trigger a grid re-render\n   */\n  renderColumnHeaders(newColumnDefinitions?: Column[]) {\n    const collection = newColumnDefinitions || this._columnDefinitions;\n    if (Array.isArray(collection) && this._grid && this._grid.setColumns) {\n      this._grid.setColumns(collection);\n    }\n  }\n\n  /**\n   * @return default Grid Menu options\n   */\n  private getDefaultGridMenuOptions(): GridMenu {\n    return {\n      columnTitle: this.getDefaultTranslationByKey('columns'),\n      forceFitTitle: this.getDefaultTranslationByKey('forcefit'),\n      syncResizeTitle: this.getDefaultTranslationByKey('synch'),\n      iconCssClass: 'fa fa-bars',\n      menuWidth: 18,\n      customTitle: undefined,\n      customItems: [],\n      hideClearAllFiltersCommand: false,\n      hideRefreshDatasetCommand: false,\n      hideToggleFilterCommand: false\n    };\n  }\n\n  /**\n   * @return default Header Menu options\n   */\n  private getDefaultHeaderMenuOptions(): HeaderMenu {\n    return {\n      autoAlignOffset: 12,\n      minWidth: 140,\n      hideColumnHideCommand: false,\n      hideSortCommands: false\n    };\n  }\n\n  private getDefaultTranslationByKey(key: 'commands' | 'columns' | 'forcefit' | 'synch') {\n    let output = '';\n    switch (key) {\n      case 'commands':\n        output = this.translate.instant('COMMANDS') || 'Commands';\n        break;\n      case 'columns':\n        output = this.translate.instant('COLUMNS') || 'Columns';\n        break;\n      case 'forcefit':\n        output = this.translate.instant('FORCE_FIT_COLUMNS') || 'Force fit columns';\n        break;\n      case 'synch':\n        output = this.translate.instant('SYNCHRONOUS_RESIZE') || 'Synchronous resize';\n        break;\n    }\n    return output;\n  }\n\n  /**\n   * Reset all the Grid Menu options which have text to translate\n   * @param grid menu object\n   */\n  private resetGridMenuTranslations(gridMenu: GridMenu): GridMenu {\n    // we will reset the custom items array since the commands title have to be translated too (no worries, we will re-create it later)\n    gridMenu.customItems = [];\n    delete gridMenu.customTitle;\n\n    gridMenu.columnTitle = this.getDefaultTranslationByKey('columns');\n    gridMenu.forceFitTitle = this.getDefaultTranslationByKey('forcefit');\n    gridMenu.syncResizeTitle = this.getDefaultTranslationByKey('synch');\n\n    return gridMenu;\n  }\n\n  /**\n   * Reset all the Grid Menu options which have text to translate\n   * @param grid menu object\n   */\n  private resetHeaderMenuTranslations(columnDefinitions: Column[]) {\n    columnDefinitions.forEach((columnDef: Column) => {\n      if (columnDef && columnDef.header && columnDef.header && columnDef.header.menu && columnDef.header.menu.items) {\n        if (!columnDef.excludeFromHeaderMenu) {\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\n\n          columnHeaderMenuItems.forEach((item) => {\n            switch (item.command) {\n              case 'sort-asc':\n                item.title = this.translate.instant('SORT_ASCENDING') || 'Sort Ascending';\n                break;\n              case 'sort-desc':\n                item.title = this.translate.instant('SORT_DESCENDING') || 'Sort Ascending';\n                break;\n              case 'hide':\n                item.title = this.translate.instant('HIDE_COLUMN') || 'Sort Ascending';\n                break;\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Sort items in an array by a property name\n   * @params items array\n   * @param property name to sort with\n   * @return sorted array\n   */\n  private sortItems(items: any[], propertyName: string) {\n    // sort the custom items by their position in the list\n    items.sort((itemA, itemB) => {\n      if (itemA && itemB && itemA.hasOwnProperty(propertyName) && itemB.hasOwnProperty(propertyName)) {\n        return itemA[propertyName] - itemB[propertyName];\n      }\n      return 0;\n    });\n  }\n\n  /**\n   * Translate the columns headerKey\n   * Note that this is done through pointers so we don't need to return anything to see them translated\n   */\n  private translateHeaderKeys(columns: Column[]) {\n    for (const column of columns) {\n      if (column.headerKey) {\n        column.name = this.translate.instant(column.headerKey);\n      }\n    }\n  }\n}\n",
    "/**\r\n * This GraphqlQueryBuilder class is a lib that already exist\r\n * but was causing issues with TypeScript, RequireJS and other bundler/packagers\r\n * and so I rewrote it in pure TypeScript.\r\n *\r\n * The previous lib can be viewed here at this Github\r\n * https://github.com/codemeasandwich/graphql-query-builder\r\n */\r\nexport default class GraphqlQueryBuilder {\r\n  alias: string;\r\n  head: any[] = [];\r\n  body: any;\r\n\r\n  /* Constructor, query/mutator you wish to use, and an alias or filter arguments. */\r\n  constructor(private queryFnName: string, aliasOrFilter?: string | object) {\r\n    if (typeof aliasOrFilter === 'function') {\r\n      this.alias = aliasOrFilter;\r\n    } else if (typeof aliasOrFilter === 'object') {\r\n      this.filter(aliasOrFilter);\r\n    } else if (undefined === aliasOrFilter && 2 === arguments.length) {\r\n      throw new TypeError(`You have passed undefined as Second argument to \"Query\"`);\r\n    } else if (undefined !== aliasOrFilter) {\r\n      throw new TypeError(`Second argument to \"Query\" should be an alias name(String) or filter arguments(Object). was passed ${aliasOrFilter}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The parameters to run the query against.\r\n   * @param filters An object mapping attribute to values\r\n   */\r\n  filter(filters: any) {\r\n    for (const prop of Object.keys(filters)) {\r\n      if (typeof filters[prop] === 'function') {\r\n        continue;\r\n      }\r\n      const val = this.getGraphQLValue(filters[prop]);\r\n      if (val === '{}') {\r\n        continue;\r\n      }\r\n      this.head.push(`${prop}:${val}`);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Outlines the properties you wish to be returned from the query.\r\n   * @param properties representing each attribute you want Returned\r\n   */\r\n  find(...searches: any[]) { // THIS NEED TO BE A \"FUNCTION\" to scope 'arguments'\r\n    if (!searches) {\r\n      throw new TypeError(`find value can not be >>falsy<<`);\r\n    }\r\n    // if its a string.. it may have other values\r\n    // else it sould be an Object or Array of maped values\r\n    const searchKeys = (searches.length === 1 && Array.isArray(searches[0])) ? searches[0] : searches;\r\n    this.body = this.parceFind(searchKeys);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set an alias for this result.\r\n   * @param alias\r\n   */\r\n  setAlias(alias: string) {\r\n    this.alias = alias;\r\n  }\r\n\r\n  /**\r\n   * Return to the formatted query string\r\n   * @return\r\n   */\r\n  toString() {\r\n    if (this.body === undefined) {\r\n      throw new ReferenceError(`return properties are not defined. use the 'find' function to defined them`);\r\n    }\r\n\r\n    return `${(this.alias) ? (this.alias + ':') : ''} ${this.queryFnName} ${(this.head.length > 0) ? '(' + this.head.join(',') + ')' : ''}  { ${this.body} }`;\r\n  }\r\n\r\n  // --\r\n  // PRIVATE FUNCTIONS\r\n  // -----------------\r\n\r\n  private parceFind(_levelA: any[]) {\r\n    const propsA = _levelA.map((currentValue, index) => {\r\n      const itemX = _levelA[index];\r\n\r\n      if (itemX instanceof GraphqlQueryBuilder) {\r\n        return itemX.toString();\r\n      } else if (!Array.isArray(itemX) && typeof itemX === 'object') {\r\n        const propsAA = Object.keys(itemX);\r\n        if (1 !== propsAA.length) {\r\n          throw new RangeError(`Alias objects should only have one value. was passed: ${JSON.stringify(itemX)}`);\r\n        }\r\n        const propS = propsAA[0];\r\n        const item = itemX[propS];\r\n\r\n        if (Array.isArray(item)) {\r\n          return new GraphqlQueryBuilder(propS).find(item);\r\n        }\r\n        return `${propS} : ${item} `;\r\n      } else if (typeof itemX === 'string') {\r\n        return itemX;\r\n      } else {\r\n        throw new RangeError(`cannot handle Find value of ${itemX}`);\r\n      }\r\n    });\r\n\r\n    return propsA.join(',');\r\n  }\r\n\r\n  private getGraphQLValue(value: any) {\r\n    if (typeof value === 'string') {\r\n      value = JSON.stringify(value);\r\n    } else if (Array.isArray(value)) {\r\n      value = value.map(item => {\r\n        return this.getGraphQLValue(item);\r\n      }).join();\r\n      value = `[${value}]`;\r\n    } else if (value instanceof Date) {\r\n      value = JSON.stringify(value);\r\n    } else if (value !== null && typeof value === 'object') {\r\n      value = this.objectToString(value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private objectToString(obj: any) {\r\n    const sourceA = [];\r\n\r\n    for (const prop of Object.keys(obj)) {\r\n      if (typeof obj[prop] === 'function') {\r\n        continue;\r\n      }\r\n      sourceA.push(`${prop}:${this.getGraphQLValue(obj[prop])}`);\r\n    }\r\n    return `{${sourceA.join()}}`;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport { mapOperatorType, mapOperatorByFieldType } from './utilities';\nimport {\n  BackendService,\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  ColumnSort,\n  CurrentFilter,\n  CurrentPagination,\n  CurrentSorter,\n  FieldType,\n  FilterChangedArgs,\n  GraphqlCursorPaginationOption,\n  GraphqlDatasetFilter,\n  GraphqlFilteringOption,\n  GraphqlPaginationOption,\n  GraphqlServiceOption,\n  GraphqlSortingOption,\n  GridOption,\n  Pagination,\n  PaginationChangedArgs,\n  SortChangedArgs,\n  SortDirection,\n  SortDirectionString\n} from './../models/index';\nimport QueryBuilder from './graphqlQueryBuilder';\n\n// timer for keeping track of user typing waits\nlet timer: any;\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\nconst DEFAULT_ITEMS_PER_PAGE = 25;\nconst DEFAULT_PAGE_SIZE = 20;\n\nexport class GraphqlService implements BackendService {\n  private _currentFilters: ColumnFilters | CurrentFilter[];\n  private _currentPagination: CurrentPagination;\n  private _currentSorters: CurrentSorter[];\n  private _columnDefinitions: Column[];\n  private _grid: any;\n  options: GraphqlServiceOption;\n  pagination: Pagination | undefined;\n  defaultOrderBy: GraphqlSortingOption = { field: 'id', direction: SortDirection.ASC };\n  defaultPaginationOptions: GraphqlPaginationOption | GraphqlCursorPaginationOption = {\n    first: DEFAULT_ITEMS_PER_PAGE,\n    offset: 0\n  };\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Build the GraphQL query, since the service include/exclude cursor, the output query will be different.\n   * @param serviceOptions GraphqlServiceOption\n   */\n  buildQuery() {\n    if (!this.options || !this.options.datasetName || (!this._columnDefinitions && !this.options.columnDefinitions)) {\n      throw new Error('GraphQL Service requires \"datasetName\" & \"columnDefinitions\" properties for it to work');\n    }\n\n    // get the column definitions and exclude some if they were tagged as excluded\n    let columnDefinitions = this._columnDefinitions || this.options.columnDefinitions;\n    columnDefinitions = columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\n\n    const queryQb = new QueryBuilder('query');\n    const datasetQb = new QueryBuilder(this.options.datasetName);\n    const dataQb = (this.options.isWithCursor) ? new QueryBuilder('edges') : new QueryBuilder('nodes');\n\n    // get all the columnds Ids for the filters to work\n    let columnIds: string[] = [];\n    if (columnDefinitions && Array.isArray(columnDefinitions)) {\n      for (const column of columnDefinitions) {\n        columnIds.push(column.field);\n\n        // if extra \"fields\" are passed, also push them to columnIds\n        if (column.fields) {\n          columnIds.push(...column.fields);\n        }\n      }\n      // columnIds = columnDefinitions.map((column) => column.field);\n    } else {\n      columnIds = this.options.columnIds || [];\n    }\n\n    // Slickgrid also requires the \"id\" field to be part of DataView\n    // add it to the GraphQL query if it wasn't already part of the list\n    if (columnIds.indexOf('id') === -1) {\n      columnIds.unshift('id');\n    }\n\n    const filters = this.buildFilterQuery(columnIds);\n\n    if (this.options.isWithCursor) {\n      // ...pageInfo { hasNextPage, endCursor }, edges { cursor, node { _filters_ } }\n      const pageInfoQb = new QueryBuilder('pageInfo');\n      pageInfoQb.find('hasNextPage', 'endCursor');\n      dataQb.find(['cursor', { node: filters }]);\n      datasetQb.find(['totalCount', pageInfoQb, dataQb]);\n    } else {\n      // ...nodes { _filters_ }\n      dataQb.find(filters);\n      datasetQb.find(['totalCount', dataQb]);\n    }\n\n    // add dataset filters, could be Pagination and SortingFilters and/or FieldFilters\n    const datasetFilters: GraphqlDatasetFilter = {\n      ...this.options.paginationOptions,\n      first: ((this.options.paginationOptions && this.options.paginationOptions.first) ? this.options.paginationOptions.first : ((this.pagination && this.pagination.pageSize) ? this.pagination.pageSize : null)) || this.defaultPaginationOptions.first\n    };\n\n    if (!this.options.isWithCursor) {\n      datasetFilters.offset = ((this.options.paginationOptions && this.options.paginationOptions.hasOwnProperty('offset')) ? +this.options.paginationOptions['offset'] : 0);\n    }\n\n    if (this.options.sortingOptions && Array.isArray(this.options.sortingOptions) && this.options.sortingOptions.length > 0) {\n      // orderBy: [{ field:x, direction: 'ASC' }]\n      datasetFilters.orderBy = this.options.sortingOptions;\n    }\n    if (this.options.filteringOptions && Array.isArray(this.options.filteringOptions) && this.options.filteringOptions.length > 0) {\n      // filterBy: [{ field: date, operator: '>', value: '2000-10-10' }]\n      datasetFilters.filterBy = this.options.filteringOptions;\n    }\n    if (this.options.addLocaleIntoQuery) {\n      // first: 20, ... locale: \"en-CA\"\n      datasetFilters.locale = this._gridOptions && this._gridOptions.i18n && this._gridOptions.i18n.currentLang || 'en';\n    }\n    if (this.options.extraQueryArguments) {\n      // first: 20, ... userId: 123\n      for (const queryArgument of this.options.extraQueryArguments) {\n        datasetFilters[queryArgument.field] = queryArgument.value;\n      }\n    }\n\n    // query { users(first: 20, orderBy: [], filterBy: [])}\n    datasetQb.filter(datasetFilters);\n    queryQb.find(datasetQb);\n\n    const enumSearchProperties = ['direction:', 'field:', 'operator:'];\n    return this.trimDoubleQuotesOnEnumField(queryQb.toString(), enumSearchProperties, this.options.keepArgumentFieldDoubleQuotes || false);\n  }\n\n  /**\n   * From an input array of strings, we want to build a GraphQL query string.\n   * The process has to take the dot notation and parse it into a valid GraphQL query\n   * Following this SO answer https://stackoverflow.com/a/47705476/1212166\n   *\n   * INPUT\n   *  ['firstName', 'lastName', 'billing.address.street', 'billing.address.zip']\n   * OUTPUT\n   * firstName, lastName, billing{address{street, zip}}\n   * @param inputArray\n   */\n  buildFilterQuery(inputArray: string[]) {\n\n    const set = (o: any = {}, a: any) => {\n      const k = a.shift();\n      o[k] = a.length ? set(o[k], a) : null;\n      return o;\n    };\n\n    const output = inputArray.reduce((o: any, a: string) => set(o, a.split('.')), {});\n\n    return JSON.stringify(output)\n      .replace(/\\\"|\\:|null/g, '')\n      .replace(/^\\{/, '')\n      .replace(/\\}$/, '');\n  }\n\n  init(serviceOptions?: GraphqlServiceOption, pagination?: Pagination, grid?: any): void {\n    this._grid = grid;\n    this.options = serviceOptions || {};\n    this.pagination = pagination;\n\n    if (grid && grid.getColumns && grid.getOptions) {\n      this._columnDefinitions = grid.getColumns();\n    }\n  }\n\n  /**\n   * Get an initialization of Pagination options\n   * @return Pagination Options\n   */\n  getInitPaginationOptions(): GraphqlDatasetFilter {\n    return (this.options.isWithCursor) ? { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE) } : { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE), offset: 0 };\n  }\n\n  /** Get the GraphQL dataset name */\n  getDatasetName(): string {\n    return this.options.datasetName || '';\n  }\n\n  /** Get the Filters that are currently used by the grid */\n  getCurrentFilters(): ColumnFilters | CurrentFilter[] {\n    return this._currentFilters;\n  }\n\n  /** Get the Pagination that is currently used by the grid */\n  getCurrentPagination(): CurrentPagination {\n    return this._currentPagination;\n  }\n\n  /** Get the Sorters that are currently used by the grid */\n  getCurrentSorters(): CurrentSorter[] {\n    return this._currentSorters;\n  }\n\n  /*\n   * Reset the pagination options\n   */\n  resetPaginationOptions() {\n    let paginationOptions;\n    if (this.options.isWithCursor) {\n      // first, last, after, before\n      paginationOptions = {\n        after: '',\n        before: undefined,\n        last: undefined\n      } as GraphqlCursorPaginationOption;\n    } else {\n      // first, last, offset\n      paginationOptions = (this.options.paginationOptions || this.getInitPaginationOptions()) as GraphqlPaginationOption;\n      paginationOptions.offset = 0;\n    }\n\n    // save current pagination as Page 1 and page size as \"first\" set size\n    this._currentPagination = {\n      pageNumber: 1,\n      pageSize: paginationOptions.first\n    };\n\n    this.updateOptions({ paginationOptions });\n  }\n\n  updateOptions(serviceOptions?: GraphqlServiceOption) {\n    this.options = { ...this.options, ...serviceOptions };\n  }\n\n  /*\n   * FILTERING\n   */\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\n    const gridOptions: GridOption = this._gridOptions || args.grid.getOptions();\n    const backendApi = gridOptions.backendServiceApi;\n\n    if (backendApi === undefined) {\n      throw new Error('Something went wrong in the GraphqlService, \"backendServiceApi\" is not initialized');\n    }\n\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\n    let debounceTypingDelay = 0;\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\n    }\n\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    this._currentFilters = this.castFilterToColumnFilter(args.columnFilters);\n\n    const promise = new Promise<string>((resolve, reject) => {\n      if (!args || !args.grid) {\n        throw new Error('Something went wrong when trying create the GraphQL Backend Service, it seems that \"args\" is not populated correctly');\n      }\n\n      // reset Pagination, then build the GraphQL query which we will use in the WebAPI callback\n      // wait a minimum user typing inactivity before processing any query\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        // loop through all columns to inspect filters & set the query\n        this.updateFilters(args.columnFilters, false);\n\n        this.resetPaginationOptions();\n        resolve(this.buildQuery());\n      }, debounceTypingDelay);\n    });\n\n    return promise;\n  }\n\n  /*\n   * PAGINATION\n   * With cursor, the query can have 4 arguments (first, after, last, before), for example:\n   *   users (first:20, after:\"YXJyYXljb25uZWN0aW9uOjM=\") {\n   *     totalCount\n   *     pageInfo {\n   *       hasNextPage\n   *       endCursor\n   *     }\n   *     edges {\n   *       cursor\n   *       node {\n   *         name\n   *         gender\n   *       }\n   *     }\n   *   }\n   * Without cursor, the query can have 3 arguments (first, last, offset), for example:\n   *   users (first:20, offset: 10) {\n   *     totalCount\n   *     nodes {\n   *       name\n   *       gender\n   *     }\n   *   }\n   */\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\n    const pageSize = +(args.pageSize || ((this.pagination) ? this.pagination.pageSize : DEFAULT_PAGE_SIZE));\n    this.updatePagination(args.newPage, pageSize);\n\n    // build the GraphQL query which we will use in the WebAPI callback\n    return this.buildQuery();\n  }\n\n  /*\n   * SORTING\n   * we will use sorting as per a Facebook suggestion on a Github issue (with some small changes)\n   * https://github.com/graphql/graphql-relay-js/issues/20#issuecomment-220494222\n   */\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\n\n    // loop through all columns to inspect sorters & set the query\n    this.updateSorters(sortColumns);\n\n    // build the GraphQL query which we will use in the WebAPI callback\n    return this.buildQuery();\n  }\n\n  /**\n   * loop through all columns to inspect filters & update backend service filteringOptions\n   * @param columnFilters\n   */\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset: boolean) {\n    const searchByArray: GraphqlFilteringOption[] = [];\n    let searchValue: string | string[];\n\n    for (const columnId in columnFilters) {\n      if (columnFilters.hasOwnProperty(columnId)) {\n        const columnFilter = columnFilters[columnId];\n\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\n        let columnDef: Column | undefined;\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\n          columnDef = this._columnDefinitions.find((column: Column) => column.id === columnFilter.columnId);\n        } else {\n          columnDef = columnFilter.columnDef;\n        }\n        if (!columnDef) {\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\n        }\n\n        const fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\n        if (typeof fieldSearchValue === 'undefined') {\n          fieldSearchValue = '';\n        }\n\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\n          throw new Error(`GraphQL filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {model: Filters.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\n        }\n\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n        let operator = columnFilter.operator || ((matches) ? matches[1] : '');\n        searchValue = (!!matches) ? matches[2] : '';\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n\n        // no need to query if search value is empty\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\n          continue;\n        }\n\n        // when having more than 1 search term (we need to create a CSV string for GraphQL \"IN\" or \"NOT IN\" filter search)\n        if (searchTerms && searchTerms.length > 1) {\n          searchValue = searchTerms.join(',');\n        } else if (typeof searchValue === 'string') {\n          // escaping the search value\n          searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\n          if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\n            operator = (operator === '*' || operator === '*z') ? 'endsWith' : 'startsWith';\n          }\n        }\n\n        // if we didn't find an Operator but we have a Filter Type, we should use default Operator\n        // multipleSelect is \"IN\", while singleSelect is \"EQ\", else don't map any operator\n        if (!operator && columnDef.filter) {\n          operator = columnDef.filter.operator;\n        }\n\n        // if we still don't have an operator find the proper Operator to use by it's field type\n        if (!operator) {\n          operator = mapOperatorByFieldType(columnDef.type || FieldType.string);\n        }\n\n        searchByArray.push({\n          field: fieldName,\n          operator: mapOperatorType(operator),\n          value: searchValue\n        });\n      }\n    }\n\n    // update the service options with filters for the buildQuery() to work later\n    this.updateOptions({ filteringOptions: searchByArray });\n  }\n\n  /**\n   * Update the pagination component with it's new page number and size\n   * @param newPage\n   * @param pageSize\n   */\n  updatePagination(newPage: number, pageSize: number) {\n    this._currentPagination = {\n      pageNumber: newPage,\n      pageSize\n    };\n\n    let paginationOptions;\n    if (this.options.isWithCursor) {\n      paginationOptions = {\n        first: pageSize\n      };\n    } else {\n      paginationOptions = {\n        first: pageSize,\n        offset: (newPage - 1) * pageSize\n      };\n    }\n\n    this.updateOptions({ paginationOptions });\n  }\n\n  /**\n   * loop through all columns to inspect sorters & update backend service sortingOptions\n   * @param columnFilters\n   */\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\n    let currentSorters: CurrentSorter[] = [];\n    let graphqlSorters: GraphqlSortingOption[] = [];\n\n    if (!sortColumns && presetSorters) {\n      // make the presets the current sorters, also make sure that all direction are in uppercase for GraphQL\n      currentSorters = presetSorters;\n      currentSorters.forEach((sorter) => sorter.direction = sorter.direction.toUpperCase() as SortDirectionString);\n\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\n      const tmpSorterArray = currentSorters.map((sorter) => {\n        const columnDef = this._columnDefinitions.find((column: Column) => column.id === sorter.columnId);\n        if (columnDef) {\n          graphqlSorters.push({\n            field: (columnDef.queryField || columnDef.queryFieldSorter || columnDef.field || columnDef.id) + '',\n            direction: sorter.direction\n          });\n        }\n        return {\n          columnId: sorter.columnId,\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\n        };\n      });\n      this._grid.setSortColumns(tmpSorterArray);\n    } else if (sortColumns && !presetSorters) {\n      // build the orderBy array, it could be multisort, example\n      // orderBy:[{field: lastName, direction: ASC}, {field: firstName, direction: DESC}]\n      if (sortColumns && sortColumns.length === 0) {\n        graphqlSorters = new Array(this.defaultOrderBy); // when empty, use the default sort\n        currentSorters = new Array({ columnId: this.defaultOrderBy.field, direction: this.defaultOrderBy.direction });\n      } else {\n        if (sortColumns) {\n          for (const column of sortColumns) {\n            if (column && column.sortCol) {\n              currentSorters.push({\n                columnId: column.sortCol.id + '',\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\n              });\n\n              graphqlSorters.push({\n                field: (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '',\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\n              });\n            }\n          }\n        }\n      }\n    }\n\n    // keep current Sorters and update the service options with the new sorting\n    this._currentSorters = currentSorters;\n    this.updateOptions({ sortingOptions: graphqlSorters });\n  }\n\n  /**\n   * A function which takes an input string and removes double quotes only\n   * on certain fields are identified as GraphQL enums (except fields with dot notation)\n   * For example let say we identified (\"direction:\", \"sort\") as word which are GraphQL enum fields\n   * then the result will be:\n   * FROM\n   * query { users (orderBy:[{field:\"firstName\", direction:\"ASC\"} }]) }\n   * TO\n   * query { users (orderBy:[{field: firstName, direction: ASC}})}\n   *\n   * EXCEPTIONS (fields with dot notation \".\" which are inside a \"field:\")\n   * these fields will keep double quotes while everything else will be stripped of double quotes\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: \"ASC\"} }\n   * TO\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: ASC}}\n   * @param inputStr input string\n   * @param enumSearchWords array of enum words to filter\n   * @returns outputStr output string\n   */\n  trimDoubleQuotesOnEnumField(inputStr: string, enumSearchWords: string[], keepArgumentFieldDoubleQuotes: boolean) {\n    const patternWordInQuotes = `\\s?((field:\\s*)?\".*?\")`;\n    let patternRegex = enumSearchWords.join(patternWordInQuotes + '|');\n    patternRegex += patternWordInQuotes; // the last one should also have the pattern but without the pipe \"|\"\n    // example with (field: & direction:):  /field:s?(\".*?\")|direction:s?(\".*?\")/\n    const reg = new RegExp(patternRegex, 'g');\n\n    return inputStr.replace(reg, (group1, group2, group3) => {\n      // remove double quotes except when the string starts with a \"field:\"\n      let removeDoubleQuotes = true;\n      if (group1.startsWith('field:') && keepArgumentFieldDoubleQuotes) {\n        removeDoubleQuotes = false;\n      }\n      const rep = removeDoubleQuotes ? group1.replace(/\"/g, '') : group1;\n      return rep;\n    });\n  }\n\n  //\n  // private functions\n  // -------------------\n  /**\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\n   * @param columnFilters\n   */\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    const filtersArray: ColumnFilter[] = (typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters;\n\n    return filtersArray.map((filter) => {\n      const columnDef = filter.columnDef;\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\n      if (filter.operator) {\n        tmpFilter.operator = filter.operator;\n      }\n      if (Array.isArray(filter.searchTerms)) {\n        tmpFilter.searchTerms = filter.searchTerms;\n      }\n      return tmpFilter;\n    });\n  }\n}\n",
    "declare interface StringConstructor {\r\n  allTitleCase(inputStr: string): string;\r\n  format(inputStr: string, args: any): string;\r\n  padZero(length: number): string;\r\n  trim(inputStr: string): string;\r\n  titleCase(inputStr: string): string;\r\n}\r\n\r\n\r\nString.format = function(format: string, args): string {\r\n  // const args = (Array.isArray(arguments[1])) ? arguments[1] : Array.prototype.slice.call(arguments, 1);\r\n\r\n  return format.replace(/{(\\d+)}/g, function (match, number) {\r\n    return (typeof args[number] !== 'undefined') ? args[number] : match;\r\n  });\r\n};\r\n\r\nString.padZero = function (this: string, length: number) {\r\n  let s = this;\r\n  while (s.length < length) {\r\n    s = '0' + s;\r\n  }\r\n  return s;\r\n};\r\n\r\n/**\r\n * Trim any extra white space from the string\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.trim = function(inputStr: string): string {\r\n  return inputStr ? inputStr.replace(/\\s+/g, ' ') : inputStr;\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.allTitleCase = function(inputStr: string): string {\r\n  return inputStr.replace(/\\w\\S*/g, function(outputStr) {\r\n     return outputStr.charAt(0).toUpperCase() + outputStr.substr(1).toLowerCase();\r\n  });\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n*/\r\nString.titleCase = function(inputStr: string): string {\r\n  return inputStr.charAt(0).toUpperCase() + inputStr.slice(1);\r\n};\r\n",
    "import './global-utilities';\r\nimport { CaseType, OdataOption } from './../models/index';\r\n\r\nexport class OdataService {\r\n  _columnFilters: any;\r\n  _defaultSortBy: string;\r\n  _odataOptions: OdataOption;\r\n\r\n  constructor() {\r\n    this._odataOptions = {\r\n      filterQueue: [],\r\n      orderBy: ''\r\n    };\r\n    this._defaultSortBy = '';\r\n    this._columnFilters = {};\r\n  }\r\n\r\n  /*\r\n    * Build the OData query string from all the options provided\r\n    * @return string OData query\r\n    */\r\n  buildQuery(): string {\r\n    this._odataOptions.filterQueue = [];\r\n    const queryTmpArray = [];\r\n\r\n    if (this._odataOptions.top) {\r\n      queryTmpArray.push(`$top=${this._odataOptions.top}`);\r\n    }\r\n    if (this._odataOptions.skip) {\r\n      queryTmpArray.push(`$skip=${this._odataOptions.skip}`);\r\n    }\r\n    if (this._odataOptions.orderBy) {\r\n      let argument = '';\r\n      if (Array.isArray(this._odataOptions.orderBy)) {\r\n        argument = this._odataOptions.orderBy.join(','); // csv, that will form a query example like: $orderby=RoleName asc, Id desc\r\n      } else {\r\n        argument = this._odataOptions.orderBy;\r\n      }\r\n      queryTmpArray.push(`$orderby=${argument}`);\r\n    }\r\n    if (this._odataOptions.filterBy || this._odataOptions.filter) {\r\n      if (this._odataOptions.filter) {\r\n        this._odataOptions.filterQueue = [];\r\n        let filterStr = this._odataOptions.filter;\r\n        if (Array.isArray(this._odataOptions.filter)) {\r\n          filterStr = this._odataOptions.filter.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n        }\r\n        this._odataOptions.filterQueue.push(`(${filterStr})`);\r\n      }\r\n      // filterBy are passed manually by the user, however we will only add it if the column wasn't yet filtered\r\n      if (!!this._odataOptions.filterBy && !!this._odataOptions.filterBy.fieldName && !this._columnFilters[this._odataOptions.filterBy.fieldName.toLowerCase()]) {\r\n        if (this._odataOptions.filterBy.searchTerm !== '') {\r\n          this.saveColumnFilter(this._odataOptions.filterBy.fieldName.toLowerCase(), this._odataOptions.filterBy.searchTerm, this._odataOptions.filterBy.searchTerms);\r\n          this.updateFilterFromListTerms(this._odataOptions.filterBy);\r\n        }\r\n      }\r\n    }\r\n    if (this._odataOptions.filterQueue.length > 0) {\r\n      const query = this._odataOptions.filterQueue.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n      this._odataOptions.filter = query; // overwrite with\r\n      queryTmpArray.push(`$filter=${query}`);\r\n    }\r\n\r\n    // join all the odata functions by a '&'\r\n    return queryTmpArray.join('&');\r\n  }\r\n\r\n  getFilterByColumn(columnName: string): string {\r\n    return (!!this._columnFilters[columnName]) ? this._columnFilters[columnName] : null;\r\n  }\r\n\r\n  getFilterCount(): number {\r\n    return (this._odataOptions.filterQueue) ? this._odataOptions.filterQueue.length : 0;\r\n  }\r\n\r\n  get columnFilters(): any[] {\r\n    return this._columnFilters;\r\n  }\r\n\r\n  get options(): OdataOption {\r\n    return this._odataOptions;\r\n  }\r\n\r\n  set options(options: OdataOption) {\r\n    this._odataOptions = options;\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string) {\r\n    delete this._columnFilters[fieldName];\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: any, searchTerms?: any[]) {\r\n    this._columnFilters[fieldName] = {\r\n      search: searchTerms,\r\n      value\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update the filter by a list of terms usually passed manually by the user as default filters\r\n   * @param filterOptions\r\n   * @returns\r\n   */\r\n  updateFilterFromListTerms(filterOptions: any) {\r\n    // build the filter query\r\n    if (Array.isArray(filterOptions)) {\r\n      filterOptions.forEach((filterOptionObject) => {\r\n        this.updateFilterFromTerm(filterOptionObject);\r\n      });\r\n    } else {\r\n      this.updateFilterFromTerm(filterOptions);\r\n    }\r\n  }\r\n\r\n  updateFilterFromTerm(filterOptions: any) {\r\n    let searchBy = '';\r\n    const tmpSearchByArray = [];\r\n    const fieldName = filterOptions.fieldName;\r\n    const fieldSearchTerms = filterOptions.searchTerms;\r\n    const operator = filterOptions.operator;\r\n\r\n    // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n    if (!!fieldSearchTerms && fieldSearchTerms.length > 0) {\r\n      const tmpSearchTerms = [];\r\n\r\n      if (operator === 'IN') {\r\n        // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n        for (let j = 0, lnj = fieldSearchTerms.length; j < lnj; j++) {\r\n          tmpSearchTerms.push(`${fieldName} eq '${fieldSearchTerms[j]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' or ');\r\n        searchBy = `$(${searchBy})`;\r\n      } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n        // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n        for (let k = 0, lnk = fieldSearchTerms.length; k < lnk; k++) {\r\n          tmpSearchTerms.push(`${fieldName} ne '${fieldSearchTerms[k]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' and ');\r\n        searchBy = `$(${searchBy})`;\r\n      }\r\n    }\r\n\r\n    // push to our temp array and also trim white spaces\r\n    tmpSearchByArray.push(String.trim(searchBy));\r\n\r\n    // add to the filter queue only if it doesn't exist in the queue\r\n    const filter = (tmpSearchByArray.length > 0) ? tmpSearchByArray.join(' and ') : '';\r\n    if (this._odataOptions.filterQueue && this._odataOptions.filterQueue.indexOf(filter) === -1) {\r\n      this._odataOptions.filterQueue.push(filter);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change any OData options that will be used to build the query\r\n   * @param object options\r\n   */\r\n  updateOptions(options: OdataOption) {\r\n    for (const property of Object.keys(options)) {\r\n      if (options.hasOwnProperty(property)) {\r\n        this._odataOptions[property] = options[property]; // replace of the property\r\n      }\r\n\r\n      // we need to keep the defaultSortBy for references whenever the user removes his Sorting\r\n      // then we would revert to the defaultSortBy and the only way is to keep a hard copy here\r\n      if (property === 'orderBy' || property === 'sortBy') {\r\n        let sortBy = options[property];\r\n\r\n        // make sure first char of each orderBy field is capitalize\r\n        if (this._odataOptions.caseType === CaseType.pascalCase) {\r\n          if (Array.isArray(sortBy)) {\r\n            sortBy.forEach((field, index, inputArray) => {\r\n              inputArray[index] = String.titleCase(field);\r\n            });\r\n          } else {\r\n            sortBy = String.titleCase(options[property]);\r\n          }\r\n        }\r\n        this._odataOptions.orderBy = sortBy;\r\n        this._defaultSortBy = sortBy;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
    "import './global-utilities';\nimport { parseUtcDate } from './utilities';\nimport { Injectable } from '@angular/core';\nimport {\n  BackendService,\n  CaseType,\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  ColumnSort,\n  CurrentFilter,\n  CurrentPagination,\n  CurrentSorter,\n  FilterChangedArgs,\n  FieldType,\n  GridOption,\n  OdataOption,\n  Pagination,\n  PaginationChangedArgs,\n  SearchTerm,\n  SortChangedArgs,\n  SortDirection,\n  SortDirectionString\n} from './../models/index';\nimport { OdataService } from './odata.service';\n\nlet timer: any;\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\nconst DEFAULT_ITEMS_PER_PAGE = 25;\nconst DEFAULT_PAGE_SIZE = 20;\n\n@Injectable()\nexport class GridOdataService implements BackendService {\n  private _currentFilters: CurrentFilter[];\n  private _currentPagination: CurrentPagination;\n  private _currentSorters: CurrentSorter[];\n  private _columnDefinitions: Column[];\n  private _grid: any;\n  odataService: OdataService;\n  options: OdataOption;\n  pagination: Pagination | undefined;\n  defaultOptions: OdataOption = {\n    top: DEFAULT_ITEMS_PER_PAGE,\n    orderBy: '',\n    caseType: CaseType.pascalCase\n  };\n\n  constructor() {\n    this.odataService = new OdataService();\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  buildQuery(): string {\n    return this.odataService.buildQuery();\n  }\n\n  init(options: OdataOption, pagination?: Pagination, grid?: any): void {\n    this._grid = grid;\n    const mergedOptions = { ...this.defaultOptions, ...options };\n    if (pagination && pagination.pageSize) {\n      mergedOptions.top = pagination.pageSize;\n    }\n    this.odataService.options = { ...mergedOptions, top: mergedOptions.top || this.defaultOptions.top };\n    this.options = this.odataService.options;\n    this.pagination = pagination;\n\n    // save current pagination as Page 1 and page size as \"top\"\n    this._currentPagination = {\n      pageNumber: 1,\n      pageSize: this.odataService.options.top || this.defaultOptions.top\n    };\n\n    if (grid && grid.getColumns && grid.getOptions) {\n      this._columnDefinitions = grid.getColumns() || options.columnDefinitions;\n      this._columnDefinitions = this._columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\n    }\n  }\n\n  updateOptions(serviceOptions?: OdataOption) {\n    this.options = { ...this.options, ...serviceOptions };\n  }\n\n  removeColumnFilter(fieldName: string): void {\n    this.odataService.removeColumnFilter(fieldName);\n  }\n\n  /** Get the Filters that are currently used by the grid */\n  getCurrentFilters(): CurrentFilter[] {\n    return this._currentFilters;\n  }\n\n  /** Get the Pagination that is currently used by the grid */\n  getCurrentPagination(): CurrentPagination {\n    return this._currentPagination;\n  }\n\n  /** Get the Sorters that are currently used by the grid */\n  getCurrentSorters(): CurrentSorter[] {\n    return this._currentSorters;\n  }\n\n  /*\n   * Reset the pagination options\n   */\n  resetPaginationOptions() {\n    this.odataService.updateOptions({\n      skip: 0\n    });\n  }\n\n  saveColumnFilter(fieldName: string, value: string, terms?: any[]) {\n    this.odataService.saveColumnFilter(fieldName, value, terms);\n  }\n\n  /*\n   * FILTERING\n   */\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\n    const serviceOptions: GridOption = args.grid.getOptions();\n    const backendApi = serviceOptions.backendServiceApi;\n\n    if (backendApi === undefined) {\n      throw new Error('Something went wrong in the GridOdataService, \"backendServiceApi\" is not initialized');\n    }\n\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\n    let debounceTypingDelay = 0;\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\n    }\n\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    this._currentFilters = this.castFilterToColumnFilter(args.columnFilters);\n\n    const promise = new Promise<string>((resolve, reject) => {\n      // reset Pagination, then build the OData query which we will use in the WebAPI callback\n      // wait a minimum user typing inactivity before processing any query\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        // loop through all columns to inspect filters & set the query\n        this.updateFilters(args.columnFilters);\n\n        this.resetPaginationOptions();\n        resolve(this.odataService.buildQuery());\n      }, debounceTypingDelay);\n    });\n\n    return promise;\n  }\n\n  /*\n   * PAGINATION\n   */\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\n    const pageSize = +(args.pageSize || DEFAULT_PAGE_SIZE);\n    this.updatePagination(args.newPage, pageSize);\n\n    // build the OData query which we will use in the WebAPI callback\n    return this.odataService.buildQuery();\n  }\n\n  /*\n   * SORTING\n   */\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\n\n    // loop through all columns to inspect sorters & set the query\n    this.updateSorters(sortColumns);\n\n    // build the OData query which we will use in the WebAPI callback\n    return this.odataService.buildQuery();\n  }\n\n  /**\n   * loop through all columns to inspect filters & update backend service filteringOptions\n   * @param columnFilters\n   */\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset?: boolean) {\n    let searchBy = '';\n    const searchByArray: string[] = [];\n\n    // loop through all columns to inspect filters\n    for (const columnId in columnFilters) {\n      if (columnFilters.hasOwnProperty(columnId)) {\n        const columnFilter = columnFilters[columnId];\n\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\n        let columnDef: Column | undefined;\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\n          columnDef = this._columnDefinitions.find((column: Column) => {\n            return column.id === columnFilter.columnId;\n          });\n        } else {\n          columnDef = columnFilter.columnDef;\n        }\n        if (!columnDef) {\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\n        }\n\n        let fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\n        const fieldType = columnDef.type || 'string';\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\n        if (typeof fieldSearchValue === 'undefined') {\n          fieldSearchValue = '';\n        }\n\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\n          throw new Error(`ODdata filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {model: Filters.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\n        }\n\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n        const operator = columnFilter.operator || ((matches) ? matches[1] : '');\n        let searchValue = (!!matches) ? matches[2] : '';\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n        const bypassOdataQuery = columnFilter.bypassBackendQuery || false;\n\n        // no need to query if search value is empty\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\n          this.removeColumnFilter(fieldName);\n          continue;\n        }\n\n        // escaping the search value\n        searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\n        searchValue = encodeURIComponent(searchValue); // encode URI of the final search value\n\n        // extra query arguments\n        if (bypassOdataQuery) {\n          // push to our temp array and also trim white spaces\n          if (fieldName) {\n            this.saveColumnFilter(fieldName, fieldSearchValue, searchTerms);\n          }\n        } else {\n          searchBy = '';\n\n          // titleCase the fieldName so that it matches the WebApi names\n          if (this.odataService.options.caseType === CaseType.pascalCase) {\n            fieldName = String.titleCase(fieldName || '');\n          }\n\n          // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\n          if (searchTerms && searchTerms.length > 1) {\n            const tmpSearchTerms = [];\n\n            if (operator === 'IN') {\n              // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\n              for (let j = 0, lnj = searchTerms.length; j < lnj; j++) {\n                tmpSearchTerms.push(`${fieldName} eq '${searchTerms[j]}'`);\n              }\n              searchBy = tmpSearchTerms.join(' or ');\n              searchBy = `(${searchBy})`;\n            } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\n              // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\n              for (let k = 0, lnk = searchTerms.length; k < lnk; k++) {\n                tmpSearchTerms.push(`${fieldName} ne '${searchTerms[k]}'`);\n              }\n              searchBy = tmpSearchTerms.join(' and ');\n              searchBy = `(${searchBy})`;\n            }\n          } else if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar !== '') {\n            // first/last character is a '*' will be a startsWith or endsWith\n            searchBy = (operator === '*' || operator === '*z')\n              ? `endswith(${fieldName}, '${searchValue}')`\n              : `startswith(${fieldName}, '${searchValue}')`;\n          } else if (fieldType === FieldType.date) {\n            // date field needs to be UTC and within DateTime function\n            const dateFormatted = parseUtcDate(searchValue, true);\n            if (dateFormatted) {\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} DateTime'${dateFormatted}'`;\n            }\n          } else if (fieldType === FieldType.string) {\n            // string field needs to be in single quotes\n            if (operator === '') {\n              searchBy = `substringof('${searchValue}', ${fieldName})`;\n            } else {\n              // searchBy = `substringof('${searchValue}', ${fieldNameCased}) ${this.mapOdataOperator(operator)} true`;\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} '${searchValue}'`;\n            }\n          } else {\n            // any other field type (or undefined type)\n            searchValue = fieldType === FieldType.number ? searchValue : `'${searchValue}'`;\n            searchBy = `${fieldName} ${this.mapOdataOperator(operator)} ${searchValue}`;\n          }\n\n          // push to our temp array and also trim white spaces\n          if (searchBy !== '') {\n            searchByArray.push(String.trim(searchBy));\n            this.saveColumnFilter(fieldName || '', fieldSearchValue, searchTerms);\n          }\n        }\n      }\n    }\n\n    // update the service options with filters for the buildQuery() to work later\n    this.odataService.updateOptions({\n      filter: (searchByArray.length > 0) ? searchByArray.join(' and ') : '',\n      skip: undefined\n    });\n  }\n\n  /**\n   * Update the pagination component with it's new page number and size\n   * @param newPage\n   * @param pageSize\n   */\n  updatePagination(newPage: number, pageSize: number) {\n    this._currentPagination = {\n      pageNumber: newPage,\n      pageSize\n    };\n\n    this.odataService.updateOptions({\n      top: pageSize,\n      skip: (newPage - 1) * pageSize\n    });\n  }\n\n  /**\n   * loop through all columns to inspect sorters & update backend service orderBy\n   * @param columnFilters\n   */\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\n    let sortByArray: any[] = [];\n    const sorterArray: CurrentSorter[] = [];\n\n    if (!sortColumns && presetSorters) {\n      // make the presets the current sorters, also make sure that all direction are in lowercase for OData\n      sortByArray = presetSorters;\n      sortByArray.forEach((sorter) => sorter.direction = sorter.direction.toLowerCase() as SortDirectionString);\n\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\n      const tmpSorterArray = sortByArray.map((sorter) => {\n        sorterArray.push({\n          columnId: sorter.columnId + '',\n          direction: sorter.direction\n        });\n        return {\n          columnId: sorter.columnId,\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\n        };\n      });\n      this._grid.setSortColumns(tmpSorterArray);\n    } else if (sortColumns && !presetSorters) {\n      // build the SortBy string, it could be multisort, example: customerNo asc, purchaserName desc\n      if (sortColumns && sortColumns.length === 0) {\n        sortByArray = new Array(this.defaultOptions.orderBy); // when empty, use the default sort\n      } else {\n        if (sortColumns) {\n          for (const column of sortColumns) {\n            if (column.sortCol) {\n              let fieldName = (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '';\n              let columnFieldName = (column.sortCol.field || column.sortCol.id) + '';\n              if (this.odataService.options.caseType === CaseType.pascalCase) {\n                fieldName = String.titleCase(fieldName);\n                columnFieldName = String.titleCase(columnFieldName);\n              }\n\n              sorterArray.push({\n                columnId: columnFieldName,\n                direction: column.sortAsc ? 'asc' : 'desc'\n              });\n            }\n          }\n          sortByArray = sorterArray;\n        }\n      }\n    }\n\n    // transform the sortby array into a CSV string for OData\n    sortByArray = sortByArray as CurrentSorter[];\n    const csvString = sortByArray.map((sorter) => `${sorter.columnId} ${sorter.direction.toLowerCase()}`).join(',');\n    this.odataService.updateOptions({\n      orderBy: (this.odataService.options.caseType === CaseType.pascalCase) ? String.titleCase(csvString) : csvString\n    });\n\n    // keep current Sorters and update the service options with the new sorting\n    this._currentSorters = sortByArray as CurrentSorter[];\n\n    // build the OData query which we will use in the WebAPI callback\n    return this.odataService.buildQuery();\n  }\n\n  //\n  // private functions\n  // -------------------\n  /**\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\n   * @param columnFilters\n   */\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    const filtersArray: ColumnFilter[] = ((typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters) as CurrentFilter[];\n\n    return filtersArray.map((filter) => {\n      const columnDef = filter.columnDef;\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\n      if (filter.operator) {\n        tmpFilter.operator = filter.operator;\n      }\n      if (Array.isArray(filter.searchTerms)) {\n        tmpFilter.searchTerms = filter.searchTerms;\n      }\n      return tmpFilter;\n    });\n  }\n\n  /**\n   * Mapper for mathematical operators (ex.: <= is \"le\", > is \"gt\")\n   * @param string operator\n   * @returns string map\n   */\n  private mapOdataOperator(operator: string) {\n    let map = '';\n    switch (operator) {\n      case '<':\n        map = 'lt';\n        break;\n      case '<=':\n        map = 'le';\n        break;\n      case '>':\n        map = 'gt';\n        break;\n      case '>=':\n        map = 'ge';\n        break;\n      case '<>':\n      case '!=':\n        map = 'ne';\n        break;\n      case '=':\n      case '==':\n      default:\n        map = 'eq';\n        break;\n    }\n\n    return map;\n  }\n}\n",
    "import { OnEventArgs, CellArgs, GridOption } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GridEventService {\n  private _eventHandler: any = new Slick.EventHandler();\n\n  /* OnCellChange Event */\n  attachOnCellChange(grid: any, dataView: any) {\n    // subscribe to this Slickgrid event of onCellChange\n    this._eventHandler.subscribe(grid.onCellChange, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellChange property (a callback function), then run it\n      if (typeof column.onCellChange === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onCellChange\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellChanges.... function\n        column.onCellChange(e, returnedArgs);\n      }\n    });\n  }\n  /* OnClick Event */\n  attachOnClick(grid: any, dataView: any) {\n    this._eventHandler.subscribe(grid.onClick, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellClick property (a callback function), then run it\n      if (typeof column.onCellClick === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onClick\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellClick.... function\n        column.onCellClick(e, returnedArgs);\n      }\n    });\n  }\n\n  dispose() {\n    this._eventHandler.unsubscribeAll();\n  }\n}\n",
    "import {\r\n  Column,\r\n  CurrentColumn,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  GridOption,\r\n  GridState,\r\n  GridStateChange,\r\n  GridStateType\r\n} from './../models/index';\r\nimport { ControlAndPluginService, FilterService, SortService } from './../services/index';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\ndeclare var Slick: any;\r\n\r\nexport class GridStateService {\r\n  private _eventHandler = new Slick.EventHandler();\r\n  private _columns: Column[] = [];\r\n  private _currentColumns: CurrentColumn[] = [];\r\n  private _grid: any;\r\n  private controlAndPluginService: ControlAndPluginService;\r\n  private filterService: FilterService;\r\n  private sortService: SortService;\r\n  private subscriptions: Subscription[] = [];\r\n  onGridStateChanged = new Subject<GridStateChange>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Export Service\r\n   * @param grid\r\n   * @param filterService\r\n   * @param sortService\r\n   * @param dataView\r\n   */\r\n  init(grid: any, controlAndPluginService: ControlAndPluginService, filterService: FilterService, sortService: SortService): void {\r\n    this._grid = grid;\r\n    this.controlAndPluginService = controlAndPluginService;\r\n    this.filterService = filterService;\r\n    this.sortService = sortService;\r\n\r\n    this.subscribeToAllGridChanges(grid);\r\n  }\r\n\r\n  /** Dispose of all the SlickGrid & Aurelia subscriptions */\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    // also unsubscribe all Aurelia Subscriptions\r\n    this.subscriptions.forEach((subscription: Subscription) => {\r\n      if (subscription && subscription.unsubscribe) {\r\n        subscription.unsubscribe();\r\n      }\r\n    });\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  /**\r\n   * Get the current grid state (filters/sorters/pagination)\r\n   * @return grid state\r\n   */\r\n  getCurrentGridState(): GridState {\r\n    const gridState: GridState = {\r\n      columns: this.getCurrentColumns(),\r\n      filters: this.getCurrentFilters(),\r\n      sorters: this.getCurrentSorters()\r\n    };\r\n\r\n    const currentPagination = this.getCurrentPagination();\r\n    if (currentPagination) {\r\n      gridState.pagination = currentPagination;\r\n    }\r\n    return gridState;\r\n  }\r\n\r\n  /**\r\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\r\n   * @return current columns\r\n   */\r\n  getColumns(): Column[] {\r\n    return this._columns || this._grid.getColumns();\r\n  }\r\n\r\n  /**\r\n   * From an array of Grid Column Definitions, get the associated Current Columns\r\n   * @param gridColumns\r\n   */\r\n  getAssociatedCurrentColumns(gridColumns: Column[]): CurrentColumn[] {\r\n    const currentColumns: CurrentColumn[] = [];\r\n\r\n    if (gridColumns && Array.isArray(gridColumns)) {\r\n      gridColumns.forEach((column: Column, index: number) => {\r\n        if (column && column.id) {\r\n          currentColumns.push({\r\n            columnId: column.id as string,\r\n            cssClass: column.cssClass || '',\r\n            headerCssClass: column.headerCssClass || '',\r\n            width: column.width || 0\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this._currentColumns = currentColumns;\r\n    return currentColumns;\r\n  }\r\n\r\n  /**\r\n   * From an array of Current Columns, get the associated Grid Column Definitions\r\n   * @param grid\r\n   * @param currentColumns\r\n   */\r\n  getAssociatedGridColumns(grid: any, currentColumns: CurrentColumn[]): Column[] {\r\n    const columns: Column[] = [];\r\n    const gridColumns: Column[] = grid.getColumns();\r\n\r\n    if (currentColumns && Array.isArray(currentColumns)) {\r\n      currentColumns.forEach((currentColumn: CurrentColumn, index: number) => {\r\n        const gridColumn: Column = gridColumns.find((c: Column) => c.id === currentColumn.columnId);\r\n        if (gridColumn && gridColumn.id) {\r\n          columns.push({\r\n            ...gridColumn,\r\n            cssClass: currentColumn.cssClass,\r\n            headerCssClass: currentColumn.headerCssClass,\r\n            width: currentColumn.width\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this._columns = columns;\r\n    return columns;\r\n  }\r\n\r\n  /**\r\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\r\n   * @return current columns\r\n   */\r\n  getCurrentColumns(): CurrentColumn[] {\r\n    let currentColumns: CurrentColumn[] = [];\r\n    if (this._currentColumns && Array.isArray(this._currentColumns) && this._currentColumns.length > 0) {\r\n      currentColumns = this._currentColumns;\r\n    } else {\r\n      currentColumns = this.getAssociatedCurrentColumns(this._grid.getColumns());\r\n    }\r\n\r\n    return currentColumns;\r\n  }\r\n\r\n  /**\r\n   * Get the Filters (and their state, columnId, searchTerm(s)) that are currently applied in the grid\r\n   * @return current filters\r\n   */\r\n  getCurrentFilters(): CurrentFilter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentFilters) {\r\n        return backendService.getCurrentFilters() as CurrentFilter[];\r\n      }\r\n    } else if (this.filterService && this.filterService.getCurrentLocalFilters) {\r\n      return this.filterService.getCurrentLocalFilters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get current Pagination (and it's state, pageNumber, pageSize) that are currently applied in the grid\r\n   * @return current pagination state\r\n   */\r\n  getCurrentPagination(): CurrentPagination | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentPagination) {\r\n        return backendService.getCurrentPagination();\r\n      }\r\n    } else {\r\n      // TODO implement this whenever local pagination gets implemented\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get the current Sorters (and their state, columnId, direction) that are currently applied in the grid\r\n   * @return current sorters\r\n   */\r\n  getCurrentSorters(): CurrentSorter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        return backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n    } else if (this.sortService && this.sortService.getCurrentLocalSorters) {\r\n      return this.sortService.getCurrentLocalSorters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Hook a SlickGrid Extension Event to a Grid State change event\r\n   * @param extension name\r\n   * @param grid\r\n   */\r\n  hookExtensionEventToGridStateChange(extensionName: string, eventName: string) {\r\n    const extension = this.controlAndPluginService && this.controlAndPluginService.getExtensionByName(extensionName);\r\n\r\n    if (extension && extension.service && extension.service[eventName] && extension.service[eventName].subscribe) {\r\n      this._eventHandler.subscribe(extension.service[eventName], (e: Event, args: any) => {\r\n        const columns: Column[] = args && args.columns;\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hook a Grid Event to a Grid State change event\r\n   * @param event name\r\n   * @param grid\r\n   */\r\n  hookSlickGridEventToGridStateChange(eventName: string, grid: any) {\r\n    if (grid && grid[eventName] && grid[eventName].subscribe) {\r\n      this._eventHandler.subscribe(grid[eventName], (e: Event, args: any) => {\r\n        const columns: Column[] = grid.getColumns();\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      });\r\n    }\r\n  }\r\n\r\n  resetColumns(columnDefinitions?: Column[]) {\r\n    const columns: Column[] = columnDefinitions || this._columns;\r\n    const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n    this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n  }\r\n\r\n  /**\r\n   * Subscribe to all necessary SlickGrid or Service Events that deals with a Grid change,\r\n   * when triggered, we will publish a Grid State Event with current Grid State\r\n   */\r\n  subscribeToAllGridChanges(grid: any) {\r\n    // Subscribe to Event Emitter of Filter changed\r\n    this.subscriptions.push(\r\n      this.filterService.onFilterChanged.subscribe((currentFilters: CurrentFilter[]) => {\r\n        this.onGridStateChanged.next({ change: { newValues: currentFilters, type: GridStateType.filter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n    // Subscribe to Event Emitter of Filter cleared\r\n      this.subscriptions.push(\r\n        this.filterService.onFilterCleared.subscribe(() => {\r\n          this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.filter }, gridState: this.getCurrentGridState() });\r\n        })\r\n      );\r\n\r\n    // Subscribe to Event Emitter of Sort changed\r\n    this.subscriptions.push(\r\n      this.sortService.onSortChanged.subscribe((currentSorters: CurrentSorter[]) => {\r\n        this.onGridStateChanged.next({ change: { newValues: currentSorters, type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to Event Emitter of Sort cleared\r\n    this.subscriptions.push(\r\n      this.sortService.onSortCleared.subscribe(() => {\r\n        this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to ColumnPicker and/or GridMenu for show/hide Columns visibility changes\r\n    this.hookExtensionEventToGridStateChange('ColumnPicker', 'onColumnsChanged');\r\n    this.hookExtensionEventToGridStateChange('GridMenu', 'onColumnsChanged');\r\n\r\n    // subscribe to Column Resize & Reordering\r\n    this.hookSlickGridEventToGridStateChange('onColumnsReordered', grid);\r\n    this.hookSlickGridEventToGridStateChange('onColumnsResized', grid);\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport { Injectable } from '@angular/core';\nimport { CellArgs, Column, GridOption, OnEventArgs } from './../models/index';\nimport { ControlAndPluginService } from './controlAndPlugin.service';\nimport { FilterService } from './filter.service';\nimport { GridStateService } from './gridState.service';\nimport { SortService } from './sort.service';\n\n// using external non-typed js libraries\ndeclare var $: any;\ndeclare var Slick: any;\n\n@Injectable()\nexport class GridService {\n  private _grid: any;\n  private _dataView: any;\n\n  constructor(private controlAndPluginService: ControlAndPluginService, private filterService: FilterService, private gridStateService: GridStateService, private sortService: SortService, private translate: TranslateService) { }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  init(grid: any, dataView: any): void {\n    this._grid = grid;\n    this._dataView = dataView;\n  }\n\n  /**\n   * From a SlickGrid Event triggered get the Column Definition and Item Data Context\n   *\n   * For example the SlickGrid onClick will return cell arguments when subscribing to it.\n   * From these cellArgs, we want to get the Column Definition and Item Data\n   * @param cell event args\n   * @return object with columnDef and dataContext\n   */\n  getColumnFromEventArguments(args: CellArgs): OnEventArgs {\n    if (!args || !args.grid || !args.grid.getColumns || !args.grid.getDataItem) {\n      throw new Error('To get the column definition and data, we need to have these arguments passed as objects (row, cell, grid)');\n    }\n\n    return {\n      row: args.row,\n      cell: args.cell,\n      columnDef: args.grid.getColumns()[args.cell],\n      dataContext: args.grid.getDataItem(args.row),\n      dataView: this._dataView,\n      grid: this._grid,\n      gridDefinition: this._gridOptions\n    };\n  }\n\n  getDataItemByRowNumber(rowNumber: number) {\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\n      throw new Error('We could not find SlickGrid Grid object');\n    }\n    return this._grid.getDataItem(rowNumber);\n  }\n\n  /** Chain the item Metadata with our implementation of Metadata at given row index */\n  getItemRowMetadata(previousItemMetadata: any) {\n    return (rowNumber: number) => {\n      const item = this._dataView.getItem(rowNumber);\n      let meta = {\n        cssClasses: ''\n      };\n      if (typeof previousItemMetadata === 'object' && !$.isEmptyObject(previousItemMetadata)) {\n        meta = previousItemMetadata(rowNumber);\n      }\n\n      if (item && item._dirty) {\n        meta.cssClasses = (meta.cssClasses || '') + ' dirty';\n      }\n      if (item && item.rowClass) {\n        meta.cssClasses += ` ${item.rowClass}`;\n        meta.cssClasses += ` row${rowNumber}`;\n      }\n\n      return meta;\n    };\n  }\n\n  /**\n   * Highlight then fade a row for x seconds.\n   * The implementation follows this SO answer: https://stackoverflow.com/a/19985148/1212166\n   * @param rowNumber\n   * @param fadeDelay\n   */\n  highlightRow(rowNumber: number, fadeDelay: number = 1500) {\n    // create a SelectionModel if there's not one yet\n    if (!this._grid.getSelectionModel()) {\n      const rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n      this._grid.setSelectionModel(rowSelectionPlugin);\n    }\n\n    this._grid.setSelectedRows([rowNumber]);\n    this._dataView.getItemMetadata = this.getItemRowMetadata(this._dataView.getItemMetadata);\n\n    const item = this._dataView.getItem(rowNumber);\n    if (item && item.id) {\n      item.rowClass = 'highlight';\n      this._dataView.updateItem(item.id, item);\n      const gridOptions = this._grid.getOptions() as GridOption;\n\n      // highlight the row for a user defined timeout\n      $(`#${gridOptions.gridId}`)\n          .find(`.highlight.row${rowNumber}`)\n          .first();\n\n      // delete the row's CSS that was attached for highlighting\n      setTimeout(() => {\n        if (item && item.id) {\n          delete item.rowClass;\n          const gridIdx = this._dataView.getIdxById(item.id);\n          if (gridIdx !== undefined) {\n            this._dataView.updateItem(item.id, item);\n          }\n        }\n      }, fadeDelay + 10);\n    }\n  }\n\n  /** Get the currently selected rows */\n  getSelectedRows() {\n    return this._grid.getSelectedRows();\n  }\n\n  /** Select the selected row by a row index */\n  setSelectedRow(rowIndex: number) {\n    this._grid.setSelectedRows([rowIndex]);\n  }\n\n  /** Set selected rows with provided array of row indexes */\n  setSelectedRows(rowIndexes: number[]) {\n    this._grid.setSelectedRows(rowIndexes);\n  }\n\n  /** Re-Render the Grid */\n  renderGrid() {\n    if (this._grid && typeof this._grid.invalidate === 'function') {\n      this._grid.invalidate();\n      this._grid.render();\n    }\n  }\n\n  /**\n   * Reset the grid to it's original state (clear any filters, sorting & pagination if exists) .\n   * The column definitions could be passed as argument to reset (this can be used after a Grid State reset)\n   * The reset will clear the Filters & Sort, then will reset the Columns to their original state\n   */\n  resetGrid(columnDefinitions?: Column[]) {\n    // reset columns to original states & refresh the grid\n    if (this._grid && this._dataView) {\n      const originalColumns = this.controlAndPluginService.getAllColumns();\n      // const originalColumns = columnDefinitions || this._columnDefinitions;\n      if (Array.isArray(originalColumns) && originalColumns.length > 0) {\n        // set the grid columns to it's original column definitions\n        this._grid.setColumns(originalColumns);\n        this._dataView.refresh();\n        this._grid.autosizeColumns();\n        this.gridStateService.resetColumns(columnDefinitions);\n      }\n    }\n    if (this.filterService && this.filterService.clearFilters) {\n      this.filterService.clearFilters();\n    }\n    if (this.sortService && this.sortService.clearSorting) {\n      this.sortService.clearSorting();\n    }\n  }\n\n  /**\n   * Add an item (data item) to the datagrid\n   * @param object dataItem: item object holding all properties of that row\n   */\n  addItemToDatagrid(item) {\n    if (!this._grid || !this._gridOptions || !this._dataView) {\n      throw new Error('We could not find SlickGrid Grid, DataView objects');\n    }\n    if (!this._gridOptions || (!this._gridOptions.enableCheckboxSelector && !this._gridOptions.enableRowSelection)) {\n      throw new Error('addItemToDatagrid() requires to have a valid Slickgrid Selection Model. You can overcome this issue by enabling enableCheckboxSelector or enableRowSelection to True');\n    }\n\n    const row = 0;\n    this._dataView.insertItem(row, item);\n    this._grid.scrollRowIntoView(0); // scroll to row 0\n    this.highlightRow(0, 1500);\n\n    // refresh dataview & grid\n    this._dataView.refresh();\n  }\n\n  /**\n   * Delete an existing item from the datagrid (dataView)\n   * @param object item: item object holding all properties of that row\n   */\n  deleteDataGridItem(item: any) {\n    if (!item || !item.hasOwnProperty('id')) {\n      throw new Error(`deleteDataGridItem() requires an item object which includes the \"id\" property`);\n    }\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\n    this.deleteDataGridItemById(itemId);\n  }\n\n  /**\n   * Delete an existing item from the datagrid (dataView) by it's id\n   * @param itemId: item unique id\n   */\n  deleteDataGridItemById(itemId: string | number) {\n    if (itemId === undefined) {\n      throw new Error(`Cannot delete a row without a valid \"id\"`);\n    }\n    if (this._dataView.getRowById(itemId) === undefined) {\n      throw new Error(`Could not find the item in the grid by it's associated \"id\"`);\n    }\n\n    // delete the item from the dataView\n    this._dataView.deleteItem(itemId);\n    this._dataView.refresh();\n  }\n\n  /**\n   * Update an existing item with new properties inside the datagrid\n   * @param object item: item object holding all properties of that row\n   */\n  updateDataGridItem(item: any) {\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\n\n    if (itemId === undefined) {\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\n    }\n\n    this.updateDataGridItemById(itemId, item);\n  }\n\n  /**\n   * Update an existing item in the datagrid by it's id and new properties\n   * @param itemId: item unique id\n   * @param object item: item object holding all properties of that row\n   */\n  updateDataGridItemById(itemId: number | string, item: any) {\n    if (itemId === undefined) {\n      throw new Error(`Cannot update a row without a valid \"id\"`);\n    }\n    const row = this._dataView.getRowById(itemId);\n\n    if (!item || row === undefined) {\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\n    }\n\n    const gridIdx = this._dataView.getIdxById(itemId);\n    if (gridIdx !== undefined) {\n      // Update the item itself inside the dataView\n      this._dataView.updateItem(itemId, item);\n\n      // highlight the row we just updated\n      this.highlightRow(row, 1500);\n\n      // refresh dataview & grid\n      this._dataView.refresh();\n    }\n  }\n}\n",
    "\nimport {\n  Column,\n  GridOption\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare let $: any;\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GroupingAndColspanService {\n  private _eventHandler = new Slick.EventHandler();\n  private _dataView: any;\n  private _grid: any;\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any, dataView: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n\n    if (grid && this._gridOptions) {\n      // When dealing with Pre-Header Grouping colspan, we need to re-create the pre-header in multiple occasions\n      // for all these occasions, we have to trigger a re-create\n      if (this._gridOptions.createPreHeaderPanel) {\n        this._eventHandler.subscribe(grid.onSort, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(grid.onColumnsResized, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(dataView.onRowCountChanged, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n\n        // also not sure why at this point, but it seems that I need to call the 1st create in a delayed execution\n        // probably some kind of timing issues and delaying it until the grid is fully ready does help\n        setTimeout(() => {\n          this.createPreHeaderRowGroupingTitle();\n        }, 50);\n      }\n    }\n  }\n\n  dispose() {\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n  }\n\n  createPreHeaderRowGroupingTitle() {\n    const $preHeaderPanel = $(this._grid.getPreHeaderPanel())\n      .empty()\n      .addClass('slick-header-columns')\n      .css('left', '-1000px')\n      .width(this._grid.getHeadersWidth());\n    $preHeaderPanel.parent().addClass('slick-header');\n    const headerColumnWidthDiff = this._grid.getHeaderColumnWidthDiff();\n    let m;\n    let header;\n    let lastColumnGroup = '';\n    let widthTotal = 0;\n\n    for (let i = 0; i < this._columnDefinitions.length; i++) {\n      m = this._columnDefinitions[i];\n      if (lastColumnGroup === m.columnGroup && i > 0) {\n        widthTotal += m.width;\n        header.width(widthTotal - headerColumnWidthDiff);\n      } else {\n        widthTotal = m.width;\n        header = $(`<div class=\"ui-state-default slick-header-column\" />`)\n          .html(`<span class=\"slick-column-name\">${m.columnGroup || ''}</span>`)\n          .width(m.width - headerColumnWidthDiff)\n          .appendTo($preHeaderPanel);\n      }\n      lastColumnGroup = m.columnGroup;\n    }\n  }\n}\n",
    "import { Column, GridOption } from './../models/index';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n// global constants, height/width are in pixels\r\nconst DATAGRID_MIN_HEIGHT = 180;\r\nconst DATAGRID_MIN_WIDTH = 300;\r\nconst DATAGRID_BOTTOM_PADDING = 20;\r\nconst DATAGRID_PAGINATION_HEIGHT = 35;\r\nlet timer: any;\r\n\r\nexport interface GridDimension {\r\n  height: number;\r\n  width: number;\r\n  heightWithPagination?: number;\r\n}\r\n\r\nexport class ResizerService {\r\n  private _grid: any;\r\n  private _lastDimensions: GridDimension;\r\n  onGridBeforeResize = new Subject<boolean>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  private get _gridUid(): string {\r\n    return (this._grid && this._grid.getUID) ? this._grid.getUID() : this._gridOptions.gridId;\r\n  }\r\n\r\n  init(grid: any): void {\r\n    this._grid = grid;\r\n  }\r\n\r\n  /** Attach an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space\r\n   * Options: we could also provide a % factor to resize on each height/width independently\r\n   */\r\n  attachAutoResizeDataGrid(newSizes?: GridDimension) {\r\n    // if we can't find the grid to resize, return without attaching anything\r\n    const gridDomElm = $(`#${this._gridOptions && this._gridOptions.gridId ? this._gridOptions.gridId : 'grid1'}`);\r\n    if (gridDomElm === undefined || gridDomElm.offset() === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // -- 1st resize the datagrid size at first load (we need this because the .on event is not triggered on first load)\r\n    this.resizeGrid(0, newSizes);\r\n\r\n    // -- 2nd attach a trigger on the Window DOM element, so that it happens also when resizing after first load\r\n    // -- attach auto-resize to Window object only if it exist\r\n    $(window).on(`resize.grid.${this._gridUid}`, () => {\r\n      this.onGridBeforeResize.next(true);\r\n      // for some yet unknown reason, calling the resize twice removes any stuttering/flickering when changing the height and makes it much smoother\r\n      this.resizeGrid(0, newSizes);\r\n      this.resizeGrid(0, newSizes);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation\r\n   * object gridOptions\r\n   */\r\n  calculateGridNewDimensions(gridOptions: GridOption): any {\r\n    const gridDomElm = $(`#${gridOptions.gridId}`);\r\n    const containerElm = (gridOptions.autoResize && gridOptions.autoResize.containerId) ? $(`#${gridOptions.autoResize.containerId}`) : $(`#${gridOptions.gridContainerId}`);\r\n    const windowElm = $(window);\r\n    if (windowElm === undefined || containerElm === undefined || gridDomElm === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // calculate bottom padding\r\n    // if using pagination, we need to add the pagination height to this bottom padding\r\n    let bottomPadding = (gridOptions.autoResize && gridOptions.autoResize.bottomPadding) ? gridOptions.autoResize.bottomPadding : DATAGRID_BOTTOM_PADDING;\r\n    if (bottomPadding && (gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\r\n      bottomPadding += DATAGRID_PAGINATION_HEIGHT;\r\n    }\r\n\r\n    const gridHeight = windowElm.height() || 0;\r\n    const coordOffsetTop = gridDomElm.offset();\r\n    const gridOffsetTop = (coordOffsetTop !== undefined) ? coordOffsetTop.top : 0;\r\n    const availableHeight = gridHeight - gridOffsetTop - bottomPadding;\r\n    const availableWidth = containerElm.width() || 0;\r\n    const minHeight = (gridOptions.autoResize && gridOptions.autoResize.minHeight < 0) ? gridOptions.autoResize.minHeight : DATAGRID_MIN_HEIGHT;\r\n    const minWidth = (gridOptions.autoResize && gridOptions.autoResize.minWidth < 0) ? gridOptions.autoResize.minWidth : DATAGRID_MIN_WIDTH;\r\n\r\n    let newHeight = availableHeight;\r\n    let newWidth = (gridOptions.autoResize && gridOptions.autoResize.sidePadding) ? availableWidth - gridOptions.autoResize.sidePadding : availableWidth;\r\n    if (newHeight < minHeight) {\r\n      newHeight = minHeight;\r\n    }\r\n    if (newWidth < minWidth) {\r\n      newWidth = minWidth;\r\n    }\r\n\r\n    return {\r\n      height: newHeight,\r\n      width: newWidth\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Dispose function when element is destroyed\r\n   */\r\n  dispose() {\r\n    $(window).off(`resize.grid.${this._gridUid}`);\r\n  }\r\n\r\n  getLastResizeDimensions(): GridDimension {\r\n    return this._lastDimensions;\r\n  }\r\n\r\n  /** Resize the datagrid to fit the browser height & width */\r\n  resizeGrid(delay?: number, newSizes?: GridDimension): void {\r\n    if (!this._grid || !this._gridOptions) {\r\n      throw new Error(`\r\n      Angular-Slickgrid resizer requires a valid Grid object and Grid Options defined.\r\n      You can fix this by setting your gridOption to use \"enableAutoResize\" or create an instance of the ResizerService by calling attachAutoResizeDataGrid()`);\r\n    }\r\n\r\n    // because of the javascript async nature, we might want to delay the resize a little bit\r\n    delay = delay || 0;\r\n\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      // calculate the available sizes with minimum height defined as a constant\r\n      const availableDimensions = this.calculateGridNewDimensions(this._gridOptions);\r\n      const gridElm = $(`#${this._gridOptions.gridId}`) || {};\r\n      const gridContainerElm = $(`#${this._gridOptions.gridContainerId}`) || {};\r\n\r\n      if ((newSizes || availableDimensions) && gridElm.length > 0) {\r\n        // get the new sizes, if new sizes are passed (not 0), we will use them else use available space\r\n        // basically if user passes 1 of the dimension, let say he passes just the height,\r\n        // we will use the height as a fixed height but the width will be resized by it's available space\r\n        const newHeight = (newSizes && newSizes.height) ? newSizes.height : availableDimensions.height;\r\n        const newWidth = (newSizes && newSizes.width) ? newSizes.width : availableDimensions.width;\r\n\r\n        // apply these new height/width to the datagrid\r\n        gridElm.height(newHeight);\r\n        gridElm.width(newWidth);\r\n        gridContainerElm.height(newHeight);\r\n        gridContainerElm.width(newWidth);\r\n\r\n        // keep last resized dimensions\r\n        this._lastDimensions = {\r\n          height: newHeight,\r\n          width: newWidth\r\n        };\r\n        if ((this._gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\r\n          this._lastDimensions.heightWithPagination = newHeight + DATAGRID_PAGINATION_HEIGHT;\r\n        }\r\n\r\n        // resize the slickgrid canvas on all browser except some IE versions\r\n        // exclude all IE below IE11\r\n        // IE11 wants to be a better standard (W3C) follower (finally) they even changed their appName output to also have 'Netscape'\r\n        if (new RegExp('MSIE [6-8]').exec(navigator.userAgent) === null && this._grid) {\r\n          this._grid.resizeCanvas();\r\n        }\r\n\r\n        // also call the grid auto-size columns so that it takes available when going bigger\r\n        this._grid.autosizeColumns();\r\n      }\r\n    }, delay);\r\n  }\r\n}\r\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class AvgAggregator implements Aggregator {\n  private _count: number;\n  private _nonNullCount: number;\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._count = 0;\n    this._nonNullCount = 0;\n    this._sum = 0;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    this._count++;\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._nonNullCount++;\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.avg) {\n      groupTotals.avg = {};\n    }\n    if (this._nonNullCount !== 0) {\n      groupTotals.avg[this._field] = this._sum / this._nonNullCount;\n    }\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MinAggregator implements Aggregator {\n  private _min: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._min = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._min == null || val < this._min) {\n        this._min = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.min) {\n      groupTotals.min = {};\n    }\n    groupTotals.min[this._field] = this._min;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MaxAggregator implements Aggregator {\n  private _max: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._max = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._max == null || val > this._max) {\n        this._max = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.max) {\n      groupTotals.max = {};\n    }\n    groupTotals.max[this._field] = this._max;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class SumAggregator implements Aggregator {\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._sum = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.sum) {\n      groupTotals.sum = {};\n    }\n    groupTotals.sum[this._field] = this._sum;\n  }\n}\n",
    "import { AvgAggregator } from './avgAggregator';\nimport { MinAggregator } from './minAggregator';\nimport { MaxAggregator } from './maxAggregator';\nimport { SumAggregator } from './sumAggregator';\n\n/** Provides a list of different Aggregators for the Group Formatter */\nexport const Aggregators = {\n  Avg: AvgAggregator,\n  Min: MinAggregator,\n  Max: MaxAggregator,\n  Sum: SumAggregator\n};\n",
    "import { Column, Editor } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class CheckboxEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: boolean;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"checkbox\" value=\"true\" class=\"editor-checkbox\" />`);\r\n    this.$input.appendTo(this.args.container);\r\n    this.$input.focus();\r\n  }\r\n\r\n  destroy(): void {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus(): void {\r\n    this.$input.focus();\r\n  }\r\n\r\n  hide() {\r\n    this.$input.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$input.show();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = !!item[this.args.column.field];\r\n    if (this.defaultValue) {\r\n      this.$input.prop('checked', true);\r\n    } else {\r\n      this.$input.prop('checked', false);\r\n    }\r\n  }\r\n\r\n  preClick() {\r\n    this.$input.prop('checked', !this.$input.prop('checked'));\r\n  }\r\n\r\n  serializeValue(): boolean {\r\n    return this.$input.prop('checked');\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (this.serializeValue() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.$input.val(), this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { Column, Editor, FieldType, GridOption } from './../models/index';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a date picker editor using Flatpickr\r\n * https://chmln.github.io/flatpickr\r\n */\r\nexport class DateEditor implements Editor {\r\n  $input: any;\r\n  flatInstance: any;\r\n  defaultDate: string;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    if (this.args && this.args.column) {\r\n      const columnDef = this.args.column;\r\n      const gridOptions = this.args.grid.getOptions() as GridOption;\r\n      this.defaultDate = (this.args.item) ? this.args.item[this.args.column.field] : null;\r\n      const inputFormat = mapFlatpickrDateFormatWithFieldType(columnDef.type || FieldType.dateIso);\r\n      const outputFormat = mapFlatpickrDateFormatWithFieldType(columnDef.outputType || FieldType.dateUtc);\r\n      let currentLocale = this.getCurrentLocale(columnDef, gridOptions);\r\n      if (currentLocale.length > 2) {\r\n        currentLocale = currentLocale.substring(0, 2);\r\n      }\r\n\r\n      const pickerOptions: any = {\r\n        defaultDate: this.defaultDate,\r\n        altInput: true,\r\n        altFormat: inputFormat,\r\n        dateFormat: outputFormat,\r\n        closeOnSelect: false,\r\n        locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n        onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n          this.save();\r\n        },\r\n      };\r\n\r\n\r\n      this.$input = $(`<input type=\"text\" data-defaultDate=\"${this.defaultDate}\" class=\"editor-text flatpickr\" />`);\r\n      this.$input.appendTo(this.args.container);\r\n      this.flatInstance = (this.$input[0] && typeof this.$input[0].flatpickr === 'function') ? this.$input[0].flatpickr(pickerOptions) : null;\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  getCurrentLocale(columnDef: Column, gridOptions: GridOption) {\r\n    const options = gridOptions || columnDef.params || {};\r\n    if (options.i18n && options.i18n instanceof TranslateService) {\r\n      return options.i18n.currentLang;\r\n    }\r\n\r\n    return 'en';\r\n  }\r\n\r\n  loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  destroy() {\r\n    this.hide();\r\n    // this.flatInstance.destroy();\r\n    this.$input.remove();\r\n  }\r\n\r\n  show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultDate = item[this.args.column.field];\r\n    this.flatInstance.setDate(item[this.args.column.field]);\r\n  }\r\n\r\n  serializeValue() {\r\n    const domValue: string = this.$input.val();\r\n\r\n    if (!domValue) {\r\n      return '';\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n    const value = moment(domValue).format(outputFormat);\r\n\r\n    return value;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    if (!state) {\r\n      return;\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n\r\n    item[this.args.column.field] = moment(state, outputFormat).toDate();\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultDate == null)) && (this.$input.val() !== this.defaultDate);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.$input.val(), this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Column, Editor, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nconst defaultDecimalPlaces = 0;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class FloatEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"number\" class=\"editor-text\" step=\"${this.getInputDecimalSteps()}\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  getDecimalPlaces() {\r\n    // returns the number of fixed decimal places or null\r\n    const columnEditor = this.getColumnEditor();\r\n    let rtn = (columnEditor && columnEditor.params && columnEditor.params.hasOwnProperty('decimalPlaces')) ? columnEditor.params.decimalPlaces : undefined;\r\n    if (rtn === undefined) {\r\n      rtn = defaultDecimalPlaces;\r\n    }\r\n    return (!rtn && rtn !== 0 ? null : rtn);\r\n  }\r\n\r\n  getInputDecimalSteps() {\r\n    const decimals = this.getDecimalPlaces();\r\n    let zeroString = '';\r\n    for (let i = 1; i < decimals; i++) {\r\n      zeroString += '0';\r\n    }\r\n\r\n    if (decimals > 0) {\r\n      return `0.${zeroString}1`;\r\n    }\r\n    return '1';\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field];\r\n\r\n    const decPlaces = this.getDecimalPlaces();\r\n    if (decPlaces !== null\r\n      && (this.defaultValue || this.defaultValue === 0)\r\n      && this.defaultValue.toFixed) {\r\n      this.defaultValue = this.defaultValue.toFixed(decPlaces);\r\n    }\r\n\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    let rtn = parseFloat(this.$input.val()) || 0;\r\n    const decPlaces = this.getDecimalPlaces();\r\n    if (decPlaces !== null\r\n      && (rtn || rtn === 0)\r\n      && rtn.toFixed) {\r\n      rtn = parseFloat(rtn.toFixed(decPlaces));\r\n    }\r\n\r\n    return rtn;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    const elmValue = this.$input.val();\r\n    return (!(elmValue === '' && this.defaultValue === null)) && (elmValue !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n    const elmValue = this.$input.val();\r\n    const columnEditor = this.getColumnEditor();\r\n    const decPlaces = this.getDecimalPlaces();\r\n    const errorMsg = columnEditor.params && columnEditor.params.validatorErrorMessage;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(elmValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    } else if (isNaN(elmValue as number) || (decPlaces === 0 && !/^(\\d+(\\.)?(\\d)*)$/.test(elmValue))) {\r\n      // when decimal value is 0 (which is the default), we accept 0 or more decimal values\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || `Please enter a valid number`\r\n      };\r\n    } else if (isNaN(elmValue as number) || (decPlaces > 0 && !new RegExp(`^(\\\\d+(\\\\.)?(\\\\d){0,${decPlaces}})$`).test(elmValue))) {\r\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\r\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || `Please enter a valid number between 0 and ${decPlaces} decimals`\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Column, Editor, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class IntegerEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"number\" class='editor-text' />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = parseInt(item[this.args.column.field], 10);\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return parseInt(this.$input.val() as string, 10) || 0;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    const elmValue = this.$input.val();\r\n    const value = isNaN(elmValue) ? elmValue : parseInt(elmValue, 10);\r\n    return (!(value === '' && this.defaultValue === null)) && (value !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n    const columnEditor = this.getColumnEditor();\r\n    const errorMsg = columnEditor.params && columnEditor.params.validatorErrorMessage;\r\n    const elmValue = this.$input.val();\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(elmValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    } else if (isNaN(elmValue as number) || !/^[+-]?\\d+$/.test(elmValue)) {\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || 'Please enter a valid integer number'\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Column, Editor, HtmlElementPosition, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class LongTextEditor implements Editor {\r\n  $input: any;\r\n  $wrapper: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    const $container = $('body');\r\n\r\n    this.$wrapper = $(`<div class=\"slick-large-editor-text\" />`).appendTo($container);\r\n    this.$input = $(`<textarea hidefocus rows=\"5\">`).appendTo(this.$wrapper);\r\n\r\n    $(`<div class=\"editor-footer\">\r\n        <button class=\"btn btn-primary btn-xs\">Save</button>\r\n        <button class=\"btn btn-default btn-xs\">Cancel</button>\r\n      </div>`).appendTo(this.$wrapper);\r\n\r\n    this.$wrapper.find('button:first').on('click', (event: Event) => this.save());\r\n    this.$wrapper.find('button:last').on('click', (event: Event) => this.cancel());\r\n    this.$input.on('keydown', this.handleKeyDown);\r\n\r\n    this.position(this.args.position);\r\n    this.$input.focus().select();\r\n  }\r\n\r\n  handleKeyDown(e: any) {\r\n    if (e.which === KeyCode.ENTER && e.ctrlKey) {\r\n      this.save();\r\n    } else if (e.which === KeyCode.ESCAPE) {\r\n      e.preventDefault();\r\n      this.cancel();\r\n    } else if (e.which === KeyCode.TAB && e.shiftKey) {\r\n      e.preventDefault();\r\n      this.args.grid.navigatePrev();\r\n    } else if (e.which === KeyCode.TAB) {\r\n      e.preventDefault();\r\n      this.args.grid.navigateNext();\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  cancel() {\r\n    this.$input.val(this.defaultValue);\r\n    this.args.cancelChanges();\r\n  }\r\n\r\n  hide() {\r\n    this.$wrapper.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$wrapper.show();\r\n  }\r\n\r\n  position(position: HtmlElementPosition) {\r\n    this.$wrapper\r\n      .css('top', (position.top || 0) - 5)\r\n      .css('left', (position.left || 0) - 5);\r\n  }\r\n\r\n  destroy() {\r\n    this.$wrapper.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.$input.val(this.defaultValue = item[this.args.column.field]);\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue == null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.$input.val(), this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Editor,\r\n  Column,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  SelectOption\r\n} from './../models/index';\r\nimport { arraysEqual, CollectionService } from '../services/index';\r\n\r\n// height in pixel of the multiple-select DOM element\r\nconst SELECT_ELEMENT_HEIGHT = 26;\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/**\r\n * Slickgrid editor class for multiple select lists\r\n */\r\nexport class MultipleSelectEditor implements Editor {\r\n  /** The JQuery DOM element */\r\n  $editorElm: any;\r\n\r\n  /** Editor Multiple-Select options */\r\n  editorElmOptions: MultipleSelectOption;\r\n\r\n  /** The slick grid column being edited */\r\n  columnDef: Column;\r\n\r\n  /** The multiple-select options for a multiple select list */\r\n  defaultOptions: MultipleSelectOption;\r\n\r\n  /** The default item values that are set */\r\n  defaultValue: any[];\r\n\r\n  /** The options label/value object to use in the select list */\r\n  collection: SelectOption[] = [];\r\n\r\n  /** The property name for values in the collection */\r\n  valueName: string;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName: string;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** Do we translate the label? */\r\n  enableTranslateLabel: boolean;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,\r\n      maxHeight: 200,\r\n      addTitle: true,\r\n      okButton: true,\r\n      selectAllDelimiter: ['', ''],\r\n      width: 150,\r\n      offsetLeft: 20,\r\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\r\n    };\r\n\r\n    if (this._translate) {\r\n      this.defaultOptions.countSelected = this._translate.instant('X_OF_Y_SELECTED');\r\n      this.defaultOptions.allSelected = this._translate.instant('ALL_SELECTED');\r\n      this.defaultOptions.selectAllText = this._translate.instant('SELECT_ALL');\r\n    }\r\n\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * The current selected values from the collection\r\n   */\r\n  get currentValues() {\r\n    return this.collection\r\n      .filter(c => this.$editorElm.val().indexOf(c[this.valueName].toString()) !== -1)\r\n      .map(c => c[this.valueName]);\r\n  }\r\n\r\n  init() {\r\n    if (!this.args) {\r\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\r\n    }\r\n\r\n    this.columnDef = this.args.column as Column;\r\n\r\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the MultipleSelect Editor to work correctly.\r\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\r\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\r\n    }\r\n\r\n    const collectionService = new CollectionService(this._translate);\r\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\r\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\r\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\r\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\r\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    this.collection = newCollection;\r\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    this.createDomElement(editorTemplate);\r\n  }\r\n\r\n  applyValue(item: any, state: any): void {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  destroy() {\r\n    this.$editorElm.remove();\r\n  }\r\n\r\n  loadValue(item: any): void {\r\n    // convert to string because that is how the DOM will return these values\r\n    this.defaultValue = item[this.columnDef.field].map((i: any) => i.toString());\r\n\r\n    this.$editorElm.find('option').each((i: number, $e: any) => {\r\n      if (this.defaultValue.indexOf($e.value) !== -1) {\r\n        $e.selected = true;\r\n      } else {\r\n        $e.selected = false;\r\n      }\r\n    });\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  serializeValue(): any {\r\n    return this.currentValues;\r\n  }\r\n\r\n  focus() {\r\n    this.$editorElm.focus();\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    return !arraysEqual(this.$editorElm.val(), this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.currentValues, this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n\r\n  private buildTemplateHtmlString(collection: any[]) {\r\n    let options = '';\r\n    collection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example: { collection: [ { value: '1', label: 'One' } ])`);\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n\r\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * Automatically adjust the multiple-select dropup or dropdown by available space\r\n   */\r\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\r\n    // height in pixel of the multiple-select element\r\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\r\n\r\n    const windowHeight = $(window).innerHeight() || 300;\r\n    const pageScroll = $('body').scrollTop() || 0;\r\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\r\n    const $msDrop = $msDropContainer.find('.ms-drop');\r\n    const msDropHeight = $msDrop.height() || 0;\r\n    const msDropOffsetTop = $msDrop.offset().top;\r\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\r\n\r\n    if (space < msDropHeight) {\r\n      if (multipleSelectOptions.container) {\r\n        // when using a container, we need to offset the drop ourself\r\n        // and also make sure there's space available on top before doing so\r\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\r\n        if (newOffsetTop > 0) {\r\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\r\n        }\r\n      } else {\r\n        // without container, we simply need to add the \"top\" class to the drop\r\n        $msDrop.addClass('top');\r\n      }\r\n      $msDrop.removeClass('bottom');\r\n    } else {\r\n      $msDrop.addClass('bottom');\r\n      $msDrop.removeClass('top');\r\n    }\r\n  }\r\n\r\n  /** Build the template HTML string */\r\n  private createDomElement(editorTemplate: string) {\r\n    this.$editorElm = $(editorTemplate);\r\n\r\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\r\n      this.$editorElm.appendTo(this.args.container);\r\n    }\r\n\r\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\r\n      // fallback to bootstrap\r\n      this.$editorElm.addClass('form-control');\r\n    } else {\r\n      const elementOptions = (this.columnDef.internalColumnEditor) ? this.columnDef.internalColumnEditor.elementOptions : {};\r\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\r\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\r\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\r\n    }\r\n  }\r\n\r\n  // refresh the jquery object because the selected checkboxes were already set\r\n  // prior to this method being called\r\n  private refresh() {\r\n    if (typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('refresh');\r\n    }\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Editor,\r\n  Column,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  SelectOption\r\n} from './../models/index';\r\nimport { findOrDefault, CollectionService } from '../services/index';\r\n\r\n// height in pixel of the multiple-select DOM element\r\nconst SELECT_ELEMENT_HEIGHT = 26;\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/**\r\n * Slickgrid editor class for single select lists\r\n */\r\nexport class SingleSelectEditor implements Editor {\r\n  /** The JQuery DOM element */\r\n  $editorElm: any;\r\n\r\n  /** Editor Multiple-Select options */\r\n  editorElmOptions: MultipleSelectOption;\r\n\r\n  /** The slick grid column being edited */\r\n  columnDef: Column;\r\n\r\n  /** The multiple-select options for a single select */\r\n  defaultOptions: any;\r\n\r\n  /** The default item value that is set */\r\n  defaultValue: any;\r\n\r\n  /** The options label/value object to use in the select list */\r\n  collection: SelectOption[] = [];\r\n\r\n  /** The property name for values in the collection */\r\n  valueName: string;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName: string;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** Do we translate the label? */\r\n  enableTranslateLabel: boolean;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,\r\n      maxHeight: 200,\r\n      width: 150,\r\n      offsetLeft: 20,\r\n      single: true,\r\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\r\n    };\r\n\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * The current selected value from the collection\r\n   */\r\n  get currentValue() {\r\n    return findOrDefault(this.collection, (c: any) =>\r\n      c[this.valueName].toString() === this.$editorElm.val())[this.valueName];\r\n  }\r\n\r\n  init() {\r\n    if (!this.args) {\r\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\r\n    }\r\n\r\n    this.columnDef = this.args.column;\r\n\r\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the SingleSelect Editor to work correctly.\r\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\r\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\r\n    }\r\n\r\n    const collectionService = new CollectionService(this._translate);\r\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\r\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\r\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionFilterBy) {\r\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\r\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\r\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    this.collection = newCollection;\r\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    this.createDomElement(editorTemplate);\r\n  }\r\n\r\n  applyValue(item: any, state: any): void {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  destroy() {\r\n    this.$editorElm.remove();\r\n  }\r\n\r\n  loadValue(item: any): void {\r\n    // convert to string because that is how the DOM will return these values\r\n    // make sure the prop exists first\r\n    this.defaultValue = item[this.columnDef.field] && item[this.columnDef.field].toString();\r\n\r\n\r\n    this.$editorElm.find('option').each((i: number, $e: any) => {\r\n      if (this.defaultValue === $e.value) {\r\n        $e.selected = true;\r\n      } else {\r\n        $e.selected = false;\r\n      }\r\n    });\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  serializeValue(): any {\r\n    return this.currentValue;\r\n  }\r\n\r\n  focus() {\r\n    this.$editorElm.focus();\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    return this.$editorElm.val() !== this.defaultValue;\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.currentValue, this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n\r\n  private buildTemplateHtmlString(collection: any[]) {\r\n    let options = '';\r\n    collection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error('A collection with value/label (or value/labelKey when using ' +\r\n          'Locale) is required to populate the Select list, for example: { params: { ' +\r\n          '{ collection: [ { value: \\'1\\', label: \\'One\\' } ] } } }');\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\r\n  }\r\n\r\n    /**\r\n   * Automatically adjust the multiple-select dropup or dropdown by available space\r\n   */\r\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\r\n    // height in pixel of the multiple-select element\r\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\r\n\r\n    const windowHeight = $(window).innerHeight() || 300;\r\n    const pageScroll = $('body').scrollTop() || 0;\r\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\r\n    const $msDrop = $msDropContainer.find('.ms-drop');\r\n    const msDropHeight = $msDrop.height() || 0;\r\n    const msDropOffsetTop = $msDrop.offset().top;\r\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\r\n\r\n    if (space < msDropHeight) {\r\n      if (multipleSelectOptions.container) {\r\n        // when using a container, we need to offset the drop ourself\r\n        // and also make sure there's space available on top before doing so\r\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\r\n        if (newOffsetTop > 0) {\r\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\r\n        }\r\n      } else {\r\n        // without container, we simply need to add the \"top\" class to the drop\r\n        $msDrop.addClass('top');\r\n      }\r\n      $msDrop.removeClass('bottom');\r\n    } else {\r\n      $msDrop.addClass('bottom');\r\n      $msDrop.removeClass('top');\r\n    }\r\n  }\r\n\r\n  /** Build the template HTML string */\r\n  private createDomElement(editorTemplate: string) {\r\n    this.$editorElm = $(editorTemplate);\r\n\r\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\r\n      this.$editorElm.appendTo(this.args.container);\r\n    }\r\n\r\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\r\n      // fallback to bootstrap\r\n      this.$editorElm.addClass('form-control');\r\n    } else {\r\n      const elementOptions = (this.columnDef.params) ? this.columnDef.params.elementOptions : {};\r\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\r\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\r\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\r\n    }\r\n  }\r\n\r\n  // refresh the jquery object because the selected checkboxes were already set\r\n  // prior to this method being called\r\n  private refresh() {\r\n    if (typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('refresh');\r\n    }\r\n  }\r\n}\r\n",
    "import { Column, Editor, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class TextEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"text\" class=\"editor-text\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this.$input.val(val);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field] || '';\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue === null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { CheckboxEditor } from './checkboxEditor';\r\nimport { DateEditor } from './dateEditor';\r\nimport { FloatEditor } from './floatEditor';\r\nimport { IntegerEditor } from './integerEditor';\r\nimport { LongTextEditor } from './longTextEditor';\r\nimport { MultipleSelectEditor } from './multipleSelectEditor';\r\nimport { SingleSelectEditor } from './singleSelectEditor';\r\nimport { TextEditor } from './textEditor';\r\n\r\nexport const Editors = {\r\n  checkbox: CheckboxEditor,\r\n  date: DateEditor,\r\n  float: FloatEditor,\r\n  integer: IntegerEditor,\r\n  longText: LongTextEditor,\r\n  multipleSelect: MultipleSelectEditor,\r\n  singleSelect: SingleSelectEditor,\r\n  text: TextEditor\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const arrayToCsvFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && Array.isArray(value)) {\n    const values = value.join(', ');\n    return `<span title=\"${values}\">${values}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const boldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  } else {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkboxFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? '&#x2611;' : '';\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkmarkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? `<i class=\"fa fa-check checkmark-icon\" aria-hidden=\"true\"></i>` : '';\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of a params collection\n */\nexport const collectionFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.params || !columnDef.params.collection\n    || !columnDef.params.collection.length) {\n    return '';\n  }\n\n  const { params, params: { collection } } = columnDef;\n  const labelName = (params.customStructure) ? params.customStructure.label : 'label';\n  const valueName = (params.customStructure) ? params.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of an editor collection\n */\nexport const collectionEditorFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.internalColumnEditor || !columnDef.internalColumnEditor.collection\n    || !columnDef.internalColumnEditor.collection.length) {\n    return '';\n  }\n\n  const { internalColumnEditor, internalColumnEditor: { collection } } = columnDef;\n  const labelName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.label : 'label';\n  const valueName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const complexObjectFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!columnDef) {\n    return '';\n  }\n  const complexField = columnDef.field || '';\n  return complexField.split('.').reduce((obj, i) => (obj ? obj[i] : ''), dataContext);\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\n\nexport const dateIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? moment(value).format(FORMAT) : '';\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIso);\n\nexport const dateTimeIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? moment(value).format(FORMAT) : '';\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIsoAmPm);\r\n\r\nexport const dateTimeIsoAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUsAmPm);\r\n\r\nexport const dateTimeUsAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUs);\r\n\r\nexport const dateTimeUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const deleteIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-trash pointer delete-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredBoldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  } else {\n    return `<span style=\"color:red;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  isNaN(+value) ? '' : `$${decimalFormatted(value, 2, 4)}`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const editIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-pencil pointer edit-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const hyperlinkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && typeof value === 'string') {\n    const matchUrl = value.match(/^(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:\\/~\\+#]*[\\w\\-\\@?^=%&amp;\\/~\\+#])?/i);\n    if (matchUrl && Array.isArray(matchUrl)) {\n      return `<a href=\"${matchUrl[0]}\">' + value + '</a>`;\n    }\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\nexport const hyperlinkUriPrefixFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  let uriPrefix = (columnDef && columnDef.params && columnDef.params.uriPrefix) ? columnDef.params.uriPrefix : '';\n  if (!uriPrefix) {\n    throw new Error(`HyperlinkUriPrefix Formatter require a \"uriPrefix\" that can be passed through params. e.g.:: formatter: Formatters.hyperlinkUriPrefix, params: { uriPrefix: '/users/' }`);\n  }\n  if (value && uriPrefix && typeof uriPrefix === 'string' && !uriPrefix.includes('<script>')) {\n    uriPrefix += value;\n    return '<a href=\"' + uriPrefix + '\">' + value + '</a>';\n  }\n  return '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const infoIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-info-circle pointer info-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const lowercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toLowerCase() : '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\nexport const multipleFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const params = columnDef.params || {};\n  if (!params.formatters || !Array.isArray(params.formatters)) {\n    throw new Error(`The multiple formatter requires the \"formatters\" to be provided as a column params.\n    For example: this.columnDefinitions = [{ id: title, field: title, formatter: Formatters.multiple, params: { formatters: [Formatters.lowercase, Formatters.uppercase] }`);\n  }\n  const formatters: Formatter[] = params.formatters;\n\n  // loop through all Formatters, the value of 1st formatter will be used by 2nd formatter and so on.\n  // they are piped and executed in sequences\n  let currentValue = value;\n  for (const formatter of formatters) {\n    currentValue = formatter(row, cell, currentValue, columnDef, dataContext, grid);\n  }\n  return currentValue;\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  if (value === null || value === '') {\r\n    return '';\r\n  }\r\n\r\n  const outputValue = value > 0 ? value / 100 : 0;\r\n  return `<span>${outputValue}%</span>`;\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'red';\n  } else if (value < 70) {\n    color = 'silver';\n  } else {\n    color = 'green';\n  }\n\n  return `<span class=\"percent-complete-bar\" style=\"background:${color}; width:${value}%\"></span>`;\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '-';\n  } else if (value < 50) {\n    return `<span style='color:red;font-weight:bold;'>${value}%</span>`;\n  } else {\n    return `<span style='color:green'>${value}%</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentSymbolFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  return value ? `<span>${value}%</span>` : '';\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const progressBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'danger';\n  } else if (value < 70) {\n    color = 'warning';\n  } else {\n    color = 'success';\n  }\n\n  return `<div class=\"progress\">\n    <div class=\"progress-bar progress-bar-${color}\" role=\"progressbar\" aria-valuenow=\"${value}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"min-width: 2em; width: ${value}%;\">\n    ${value}%\n    </div>\n  </div>`;\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a cell value and translates it with the \"ngx-translate\" service */\nexport const translateFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? translate.instant(value) : '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a boolean value, cast it to upperCase string and finally translates it with the \"ngx-translate\" service */\nexport const translateBooleanFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n  return value ? translate.instant(value.toUpperCase() as string) : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const uppercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toUpperCase() : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const yesNoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string =>\n  value ? 'Yes' : 'No';\n",
    "import { Column } from './../models/index';\r\nimport { arrayToCsvFormatter } from './arrayToCsvFormatter';\r\nimport { boldFormatter } from './boldFormatter';\r\nimport { checkboxFormatter } from './checkboxFormatter';\r\nimport { checkmarkFormatter } from './checkmarkFormatter';\r\nimport { collectionFormatter } from './collectionFormatter';\r\nimport { collectionEditorFormatter } from './collectionEditorFormatter';\r\nimport { complexObjectFormatter } from './complexObjectFormatter';\r\nimport { dateIsoFormatter } from './dateIsoFormatter';\r\nimport { dateTimeIsoFormatter } from './dateTimeIsoFormatter';\r\nimport { dateTimeIsoAmPmFormatter } from './dateTimeIsoAmPmFormatter';\r\nimport { dateTimeUsAmPmFormatter } from './dateTimeUsAmPmFormatter';\r\nimport { dateTimeUsFormatter } from './dateTimeUsFormatter';\r\nimport { dateUsFormatter } from './dateUsFormatter';\r\nimport { deleteIconFormatter } from './deleteIconFormatter';\r\nimport { dollarColoredBoldFormatter } from './dollarColoredBoldFormatter';\r\nimport { dollarColoredFormatter } from './dollarColoredFormatter';\r\nimport { dollarFormatter } from './dollarFormatter';\r\nimport { editIconFormatter } from './editIconFormatter';\r\nimport { hyperlinkFormatter } from './hyperlinkFormatter';\r\nimport { hyperlinkUriPrefixFormatter } from './hyperlinkUriPrefixFormatter';\r\nimport { infoIconFormatter } from './infoIconFormatter';\r\nimport { lowercaseFormatter } from './lowercaseFormatter';\r\nimport { multipleFormatter } from './multipleFormatter';\r\nimport { percentFormatter } from './percentFormatter';\r\nimport { percentCompleteBarFormatter } from './percentCompleteBarFormatter';\r\nimport { percentCompleteFormatter } from './percentCompleteFormatter';\r\nimport { percentSymbolFormatter } from './percentSymbolFormatter';\r\nimport { progressBarFormatter } from './progressBarFormatter';\r\nimport { translateFormatter } from './translateFormatter';\r\nimport { translateBooleanFormatter } from './translateBooleanFormatter';\r\nimport { uppercaseFormatter } from './uppercaseFormatter';\r\nimport { yesNoFormatter } from './yesNoFormatter';\r\n\r\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\r\nexport const Formatters = {\r\n  /** Takes an array of string and converts it to a comma delimited string */\r\n  arrayToCsv: arrayToCsvFormatter,\r\n\r\n  /** show value in bold font weight as well */\r\n  bold: boldFormatter,\r\n\r\n  /** When value is filled (true), it will display a checkbox Unicode icon */\r\n  checkbox: checkboxFormatter,\r\n\r\n  /** When value is filled (true), it will display a Font-Awesome icon (fa-check) */\r\n  checkmark: checkmarkFormatter,\r\n\r\n  /** Takes a complex data object and return the data under that property (for example: \"user.firstName\" will return the first name \"John\") */\r\n  complexObject: complexObjectFormatter,\r\n\r\n  /**\r\n   * Looks up values from the columnDefinition.params.collection property and displays the label in CSV or string format\r\n   * @example\r\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\r\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\r\n   * const dataset = [{ value: 1 },{ value: 2 }];\r\n   */\r\n  collection: collectionFormatter,\r\n\r\n  /**\r\n   * Looks up values from the columnDefinition.editor.collection property and displays the label in CSV or string format\r\n   * @example\r\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\r\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\r\n   * const dataset = [{ value: 1 },{ value: 2 }];\r\n   */\r\n  collectionEditor: collectionEditorFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date format */\r\n  dateIso: dateIsoFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date+Time format */\r\n  dateTimeIso: dateTimeIsoFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date+Time+(am/pm) format */\r\n  dateTimeIsoAmPm: dateTimeIsoAmPmFormatter,\r\n\r\n  /** Takes a Date object and displays it as an US Date format */\r\n  dateUs: dateUsFormatter,\r\n\r\n  /** Takes a Date object and displays it as an US Date+Time format */\r\n  dateTimeUs: dateTimeUsFormatter,\r\n\r\n  /** Takes a Date object and displays it as an US Date+Time+(am/pm) format */\r\n  dateTimeUsAmPm: dateTimeUsAmPmFormatter,\r\n\r\n  /** Displays a Font-Awesome delete icon (fa-trash) */\r\n  deleteIcon: deleteIconFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value */\r\n  dollar: dollarFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value */\r\n  dollarColored: dollarColoredFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value, show it in bold font weight as well */\r\n  dollarColoredBold: dollarColoredBoldFormatter,\r\n\r\n  /** Displays a Font-Awesome edit icon (fa-pencil) */\r\n  editIcon: editIconFormatter,\r\n\r\n  /** Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https). The structure will be \"<a href=\"hyperlink\">hyperlink</a>\" */\r\n  hyperlink: hyperlinkFormatter,\r\n\r\n  /** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\r\n  hyperlinkUriPrefix: hyperlinkUriPrefixFormatter,\r\n\r\n  /** Displays a Font-Awesome edit icon (fa-info-circle) */\r\n  infoIcon: infoIconFormatter,\r\n\r\n  /** Takes a value and displays it all lowercase */\r\n  lowercase: lowercaseFormatter,\r\n\r\n  /**\r\n   * You can pipe multiple formatters (executed in sequence), use params to pass the list of formatters. For example::\r\n   * { field: 'title', formatter: Formatters.multiple, params: { formatters: [ Formatters.lowercase, Formatters.uppercase ] }\r\n   */\r\n  multiple: multipleFormatter,\r\n\r\n  /** Takes a cell value number (between 0.0-1.0) and displays a red (<50) or green (>=50) bar */\r\n  percent: percentFormatter,\r\n\r\n  /** Takes a cell value number (between 0.0-100) and displays a red (<50) or green (>=50) bar */\r\n  percentComplete: percentCompleteFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"percent-complete-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\r\n  percentCompleteBar: percentCompleteBarFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and add the \"%\" after the number */\r\n  percentSymbol: percentSymbolFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"progress-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\r\n  progressBar: progressBarFormatter,\r\n\r\n  /** Takes a cell value and translates it (i18n). Requires an instance of the Translate Service:: `i18n: this.translate */\r\n  translate: translateFormatter,\r\n\r\n  /** Takes a boolean value, cast it to upperCase string and finally translates it (i18n). */\r\n  translateBoolean: translateBooleanFormatter,\r\n\r\n  /** Takes a value and displays it all uppercase */\r\n  uppercase: uppercaseFormatter,\r\n\r\n  /** Takes a boolean value and display a string 'Yes' or 'No' */\r\n  yesNo: yesNoFormatter\r\n};\r\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsPercentageFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + '%' + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const avgTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 4) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const minTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.min && totals.min[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const maxTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.max && totals.max[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 4) + suffix}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 2) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}`;\n  }\n  return '';\n};\n",
    "import { Column } from './../models/index';\nimport { avgTotalsPercentageFormatter } from './avgTotalsPercentageFormatter';\nimport { avgTotalsDollarFormatter } from './avgTotalsDollarFormatter';\nimport { avgTotalsFormatter } from './avgTotalsFormatter';\nimport { minTotalsFormatter } from './minTotalsFormatter';\nimport { maxTotalsFormatter } from './maxTotalsFormatter';\nimport { sumTotalsColoredFormatter } from './sumTotalsColoredFormatter';\nimport { sumTotalsDollarColoredBoldFormatter } from './sumTotalsDollarColoredBoldFormatter';\nimport { sumTotalsDollarColoredFormatter } from './sumTotalsDollarColoredFormatter';\nimport { sumTotalsDollarBoldFormatter } from './sumTotalsDollarBoldFormatter';\nimport { sumTotalsDollarFormatter } from './sumTotalsDollarFormatter';\nimport { sumTotalsFormatter } from './sumTotalsFormatter';\nimport { sumTotalsBoldFormatter } from './sumTotalsBoldFormatter';\n\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const GroupTotalFormatters = {\n  /**\n   * Average all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotals: avgTotalsFormatter,\n\n  /**\n   * Average all the column totals and display '$' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsDollar: avgTotalsDollarFormatter,\n\n  /**\n   * Average all the column totals and display '%' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsPercentage: avgTotalsPercentageFormatter,\n\n  /**\n   * Show max value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  maxTotals: maxTotalsFormatter,\n\n  /**\n   * Show min value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  minTotals: minTotalsFormatter,\n\n  /**\n   * Sums up all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotals: sumTotalsFormatter,\n\n  /**\n   * Sums up all the column totals and display it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsBold: sumTotalsBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsColored: sumTotalsColoredFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollar: sumTotalsDollarFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign and show it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarBold: sumTotalsDollarBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColored: sumTotalsDollarColoredFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value, show it in bold font weight as well\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColoredBold: sumTotalsDollarColoredBoldFormatter,\n};\n",
    "import { Pagination } from './../models/pagination.interface';\r\nimport { AfterViewInit, Component, EventEmitter, Injectable, Input, OnDestroy, Output } from '@angular/core';\r\nimport { castToPromise } from './../services/utilities';\r\nimport { GridOption } from './../models/index';\r\nimport { FilterService, SortService } from './../services/index';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n@Component({\r\n  selector: 'slick-pagination',\r\n  template: `<div class=\"slick-pagination\">\r\n    <div class=\"slick-pagination-nav\">\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-first fa fa-angle-double-left\" aria-label=\"First\" (click)=\"changeToFirstPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-prev fa fa-angle-left\" aria-label=\"Previous\" (click)=\"changeToPreviousPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n\r\n        <div class=\"slick-page-number\">\r\n            <span [translate]=\"'PAGE'\"></span>\r\n            <input type=\"text\" class=\"form-control\" value=\"{{pageNumber}}\" size=\"1\"  (change)=\"changeToCurrentPage($event)\">\r\n            <span [translate]=\"'OF'\"></span><span> {{pageCount}}</span>\r\n        </div>\r\n\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-next text-center fa fa-lg fa-angle-right\" aria-label=\"Next\" (click)=\"changeToNextPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-end fa fa-lg fa-angle-double-right\" aria-label=\"Last\" (click)=\"changeToLastPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n    </div>\r\n    <span class=\"slick-pagination-settings\">\r\n        <select id=\"items-per-page-label\" [value]=\"itemsPerPage\" (change)=\"onChangeItemPerPage($event)\">\r\n        <option value=\"{{pageSize}}\" *ngFor=\"let pageSize of paginationPageSizes;\">{{pageSize}}</option>\r\n        </select>\r\n        <span [translate]=\"'ITEMS_PER_PAGE'\"></span>,\r\n        <span class=\"slick-pagination-count\">\r\n            <span [translate]=\"'FROM_TO_OF_TOTAL_ITEMS'\" [translateParams]=\"{ from: dataFrom, to: dataTo, totalItems: totalItems }\"></span>\r\n        </span>\r\n    </span>\r\n    </div>\r\n`\r\n})\r\n@Injectable()\r\nexport class SlickPaginationComponent implements AfterViewInit, OnDestroy {\r\n  private _filterSubcription: Subscription;\r\n  private _gridPaginationOptions: GridOption;\r\n  private _isFirstRender = true;\r\n  @Output() onPaginationChanged = new EventEmitter<Pagination>();\r\n\r\n  @Input()\r\n  set gridPaginationOptions(gridPaginationOptions: GridOption) {\r\n    this._gridPaginationOptions = gridPaginationOptions;\r\n    if (this._isFirstRender || !gridPaginationOptions || !gridPaginationOptions.pagination || (gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n      this._isFirstRender = false;\r\n    }\r\n  }\r\n  get gridPaginationOptions(): GridOption {\r\n    return this._gridPaginationOptions;\r\n  }\r\n  @Input() grid: any;\r\n  dataFrom = 1;\r\n  dataTo = 1;\r\n  itemsPerPage: number;\r\n  pageCount = 0;\r\n  pageNumber = 1;\r\n  totalItems = 0;\r\n  paginationCallback: Function;\r\n  paginationPageSizes = [25, 75, 100];\r\n  fromToParams: any = { from: this.dataFrom, to: this.dataTo, totalItems: this.totalItems };\r\n\r\n  /** Constructor */\r\n  constructor(private filterService: FilterService, private sortService: SortService) { }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._gridPaginationOptions = this._gridPaginationOptions;\r\n    if (!this._gridPaginationOptions || !this._gridPaginationOptions.pagination || (this._gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n    }\r\n\r\n    // Subscribe to Event Emitter of Filter & Sort changed, go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterChanged.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n    // Subscribe to Filter clear and go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterCleared.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n  }\r\n\r\n  ceil(number: number) {\r\n    return Math.ceil(number);\r\n  }\r\n\r\n  changeToFirstPage(event: any) {\r\n    this.pageNumber = 1;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToLastPage(event: any) {\r\n    this.pageNumber = this.pageCount;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToNextPage(event: any) {\r\n    if (this.pageNumber < this.pageCount) {\r\n      this.pageNumber++;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToPreviousPage(event: any) {\r\n    if (this.pageNumber > 0) {\r\n      this.pageNumber--;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToCurrentPage(event: any) {\r\n    this.pageNumber = event.currentTarget.value;\r\n    if (this.pageNumber < 1) {\r\n          this.pageNumber = 1;\r\n    } else if (this.pageNumber > this.pageCount) {\r\n          this.pageNumber = this.pageCount;\r\n    }\r\n\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  dispose() {\r\n    this.onPaginationChanged.unsubscribe();\r\n    if (this._filterSubcription) {\r\n      this._filterSubcription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  onChangeItemPerPage(event: any) {\r\n    const itemsPerPage = +event.target.value;\r\n    this.pageCount = Math.ceil(this.totalItems / itemsPerPage);\r\n    this.pageNumber = 1;\r\n    this.itemsPerPage = itemsPerPage;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  refreshPagination(isPageNumberReset: boolean = false) {\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this._gridPaginationOptions && this._gridPaginationOptions.pagination) {\r\n      const pagination = this._gridPaginationOptions.pagination;\r\n      // set the number of items per page if not already set\r\n      if (!this.itemsPerPage) {\r\n        this.itemsPerPage = +((backendApi && backendApi.options && backendApi.options.paginationOptions && backendApi.options.paginationOptions.first) ? backendApi.options.paginationOptions.first : this._gridPaginationOptions.pagination.pageSize);\r\n      }\r\n\r\n      // if totalItems changed, we should always go back to the first page and recalculation the From-To indexes\r\n      if (isPageNumberReset || this.totalItems !== pagination.totalItems) {\r\n        if (this._isFirstRender && pagination.pageNumber && pagination.pageNumber > 1) {\r\n          this.pageNumber = pagination.pageNumber || 1;\r\n        } else {\r\n          this.pageNumber = 1;\r\n        }\r\n\r\n        // when page number is set to 1 then also reset the \"offset\" of backend service\r\n        if (this.pageNumber === 1) {\r\n          backendApi.service.resetPaginationOptions();\r\n        }\r\n      }\r\n\r\n      // calculate and refresh the multiple properties of the pagination UI\r\n      this.paginationPageSizes = this._gridPaginationOptions.pagination.pageSizes;\r\n      this.totalItems = this._gridPaginationOptions.pagination.totalItems;\r\n      this.recalculateFromToIndexes();\r\n    }\r\n    this.pageCount = Math.ceil(this.totalItems / this.itemsPerPage);\r\n  }\r\n\r\n  async onPageChanged(event: Event | undefined, pageNumber: number) {\r\n    this.recalculateFromToIndexes();\r\n\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this.dataTo > this.totalItems) {\r\n      this.dataTo = this.totalItems;\r\n    } else if (this.totalItems < this.itemsPerPage) {\r\n      this.dataTo = this.totalItems;\r\n    }\r\n    if (backendApi) {\r\n      const itemsPerPage = +this.itemsPerPage;\r\n\r\n      if (backendApi.preProcess) {\r\n        backendApi.preProcess();\r\n      }\r\n\r\n      const query = backendApi.service.processOnPaginationChanged(event, { newPage: pageNumber, pageSize: itemsPerPage });\r\n\r\n      // the process could be an Observable (like HttpClient) or a Promise\r\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n      const observableOrPromise = backendApi.process(query);\r\n      const processResult = await castToPromise(observableOrPromise);\r\n\r\n      // from the result, call our internal post process to update the Dataset and Pagination info\r\n      if (processResult && backendApi.internalPostProcess) {\r\n        backendApi.internalPostProcess(processResult);\r\n      }\r\n\r\n      // send the response process to the postProcess callback\r\n      if (backendApi.postProcess) {\r\n        backendApi.postProcess(processResult);\r\n      }\r\n    } else {\r\n      throw new Error('Pagination with a backend service requires \"BackendServiceApi\" to be defined in your grid options');\r\n    }\r\n\r\n    // emit the changes to the parent component\r\n    this.onPaginationChanged.emit({\r\n      pageNumber: this.pageNumber,\r\n      pageSizes: this.paginationPageSizes,\r\n      pageSize: this.itemsPerPage,\r\n      totalItems: this.totalItems\r\n    });\r\n  }\r\n\r\n  recalculateFromToIndexes() {\r\n    this.dataFrom = (this.pageNumber * this.itemsPerPage) - this.itemsPerPage + 1;\r\n    this.dataTo = (this.totalItems < this.itemsPerPage) ? this.totalItems : (this.pageNumber * this.itemsPerPage);\r\n  }\r\n}\r\n",
    "// import 3rd party vendor libs\nimport 'jquery-ui-dist/jquery-ui';\nimport 'slickgrid/lib/jquery.event.drag-2.3.0';\nimport 'slickgrid/slick.core';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.grid';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.groupitemmetadataprovider';\nimport 'slickgrid/controls/slick.columnpicker';\nimport 'slickgrid/controls/slick.gridmenu';\nimport 'slickgrid/controls/slick.pager';\nimport 'slickgrid/plugins/slick.autotooltips';\nimport 'slickgrid/plugins/slick.cellexternalcopymanager';\nimport 'slickgrid/plugins/slick.cellrangedecorator';\nimport 'slickgrid/plugins/slick.cellrangeselector';\nimport 'slickgrid/plugins/slick.cellselectionmodel';\nimport 'slickgrid/plugins/slick.checkboxselectcolumn';\nimport 'slickgrid/plugins/slick.headerbuttons';\nimport 'slickgrid/plugins/slick.headermenu';\nimport 'slickgrid/plugins/slick.rowmovemanager';\nimport 'slickgrid/plugins/slick.rowselectionmodel';\nimport { AfterViewInit, Component, EventEmitter, Inject, Injectable, Input, Output, OnDestroy, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, titleCase } from './../services/utilities';\nimport { GlobalGridOptions } from './../global-grid-options';\nimport {\n  AngularGridInstance,\n  BackendServiceOption,\n  Column,\n  GridOption,\n  GridStateChange,\n  GridStateType,\n  Pagination\n} from './../models/index';\nimport { ControlAndPluginService } from './../services/controlAndPlugin.service';\nimport { ExportService } from './../services/export.service';\nimport { FilterService } from './../services/filter.service';\nimport { GraphqlService } from './../services/graphql.service';\nimport { GridEventService } from './../services/gridEvent.service';\nimport { GridService } from './../services/grid.service';\nimport { GridStateService } from './../services/gridState.service';\nimport { GroupingAndColspanService } from './../services/groupingAndColspan.service';\nimport { ResizerService } from './../services/resizer.service';\nimport { SortService } from './../services/sort.service';\nimport { Subscription } from 'rxjs/Subscription';\nimport { CompoundDateFilter } from '../filters/compoundDateFilter';\nimport { CompoundInputFilter } from '../filters/compoundInputFilter';\nimport { InputFilter } from '../filters/inputFilter';\nimport { MultipleSelectFilter } from '../filters/multipleSelectFilter';\nimport { SingleSelectFilter } from '../filters/singleSelectFilter';\nimport { SelectFilter } from '../filters/selectFilter';\nimport { FilterFactory } from '../filters/filterFactory';\nimport { SlickgridConfig } from '../slickgrid-config';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\nconst slickgridEventPrefix = 'sg';\n\n@Injectable()\n@Component({\n  selector: 'angular-slickgrid',\n  template: `<div id=\"slickGridContainer-{{gridId}}\" #customElm class=\"gridPane\" [style.width]=\"gridWidthString\">\r\n    <div attr.id='{{gridId}}' class=\"slickgrid-container\" style=\"width: 100%\" [style.height]=\"gridHeightString\">\r\n    </div>\r\n\r\n    <slick-pagination id=\"slickPagingContainer-{{gridId}}\"\r\n        *ngIf=\"showPagination\"\r\n        (onPaginationChanged)=\"paginationChanged($event)\"\r\n        [gridPaginationOptions]=\"gridPaginationOptions\">\r\n    </slick-pagination>\r\n</div>\r\n`,\n  providers: [\n    CompoundDateFilter,\n    CompoundInputFilter,\n    InputFilter,\n    MultipleSelectFilter,\n    SingleSelectFilter,\n    SelectFilter,\n    ControlAndPluginService,\n    ExportService,\n    FilterFactory,\n    FilterService,\n    GraphqlService,\n    GridEventService,\n    GridService,\n    GridStateService,\n    GroupingAndColspanService,\n    ResizerService,\n    SortService,\n    SlickgridConfig\n  ]\n})\nexport class AngularSlickgridComponent implements AfterViewInit, OnDestroy, OnInit {\n  @ViewChild('customElm', {read: ElementRef}) customElm: ElementRef;\n  private _dataset: any[];\n  private _columnDefinitions: Column[];\n  private _dataView: any;\n  private _eventHandler: any = new Slick.EventHandler();\n  grid: any;\n  gridPaginationOptions: GridOption;\n  gridHeightString: string;\n  gridWidthString: string;\n  groupingDefinition: any = {};\n  groupItemMetadataProvider: any;\n  showPagination = false;\n  isGridInitialized = false;\n  subscriptions: Subscription[] = [];\n\n  @Output() onAngularGridCreated = new EventEmitter<AngularGridInstance>();\n  @Output() onDataviewCreated = new EventEmitter<any>();\n  @Output() onGridCreated = new EventEmitter<any>();\n  @Output() onGridInitialized = new EventEmitter<any>();\n  @Output() onBeforeGridCreate = new EventEmitter<boolean>();\n  @Output() onBeforeGridDestroy = new EventEmitter<any>();\n  @Output() onAfterGridDestroyed = new EventEmitter<boolean>();\n  @Output() onGridStateChanged = new EventEmitter<GridStateChange>();\n  @Input() gridId: string;\n  @Input() gridOptions: GridOption;\n  @Input() gridHeight = 0;\n  @Input() gridWidth = 0;\n\n  @Input()\n  set columnDefinitions(columnDefinitions: Column[]) {\n    this._columnDefinitions = columnDefinitions;\n    if (this.isGridInitialized) {\n      this.updateColumnDefinitionsList(columnDefinitions);\n    }\n  }\n  get columnDefinitions(): Column[] {\n    return this._columnDefinitions;\n  }\n  @Input()\n  set dataset(dataset: any[]) {\n    this._dataset = dataset;\n    this.refreshGridData(dataset);\n  }\n  get dataset(): any[] {\n    return this._dataView.getItems();\n  }\n\n\n  constructor(\n    private controlAndPluginService: ControlAndPluginService,\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private gridService: GridService,\n    private gridEventService: GridEventService,\n    private gridStateService: GridStateService,\n    private groupingAndColspanService: GroupingAndColspanService,\n    private resizer: ResizerService,\n    private sortService: SortService,\n    private translate: TranslateService,\n    @Inject('config') private forRootConfig: GridOption\n  ) {}\n\n  ngOnInit(): void {\n    this.onBeforeGridCreate.emit(true);\n    if (!this.gridOptions.enableAutoResize && !this.gridOptions.autoResize) {\n      this.gridHeightString = `${this.gridHeight}px`;\n      this.gridWidthString = `${this.gridWidth}px`;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.onBeforeGridDestroy.emit(this.grid);\n    this.destroy();\n    this.onAfterGridDestroyed.emit(true);\n  }\n\n  destroy() {\n    this._dataView = [];\n    this.gridOptions = {};\n    this._eventHandler.unsubscribeAll();\n    this.controlAndPluginService.dispose();\n    this.filterService.dispose();\n    this.gridEventService.dispose();\n    this.gridStateService.dispose();\n    this.groupingAndColspanService.dispose();\n    this.resizer.dispose();\n    this.sortService.dispose();\n    this.grid.destroy();\n\n    // also unsubscribe all RxJS subscriptions\n    this.subscriptions.forEach((subscription: Subscription) => {\n      if (subscription && subscription.unsubscribe) {\n        subscription.unsubscribe();\n      }\n    });\n    this.subscriptions = [];\n  }\n\n  ngAfterViewInit() {\n    this.initialization();\n    this.isGridInitialized = true;\n  }\n\n  initialization() {\n    // make sure the dataset is initialized (if not it will throw an error that it cannot getLength of null)\n    this._dataset = this._dataset || [];\n    this.gridOptions = this.mergeGridOptions(this.gridOptions);\n    this.createBackendApiInternalPostProcessCallback(this.gridOptions);\n\n    if (this.gridOptions.enableGrouping) {\n      this.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\n      this._dataView = new Slick.Data.DataView({\n        groupItemMetadataProvider: this.groupItemMetadataProvider,\n        inlineFilters: true\n      });\n    } else {\n      this._dataView = new Slick.Data.DataView();\n    }\n\n    // for convenience, we provide the property \"editor\" as an Angular-Slickgrid editor complex object\n    // however \"editor\" is used internally by SlickGrid for it's Editor Factory\n    // so in our lib we will swap \"editor\" and copy it into \"internalColumnEditor\"\n    // then take back \"editor.model\" and make it the new \"editor\" so that SlickGrid Editor Factory still works\n    this._columnDefinitions = this._columnDefinitions.map((c: Column | any) => ({\n      ...c,\n      editor: c.editor && c.editor.model,\n      internalColumnEditor: { ...c.editor }\n    })),\n\n    this.controlAndPluginService.createCheckboxPluginBeforeGridCreation(this._columnDefinitions, this.gridOptions);\n    this.grid = new Slick.Grid(`#${this.gridId}`, this._dataView, this._columnDefinitions, this.gridOptions);\n\n    this.controlAndPluginService.attachDifferentControlOrPlugins(this.grid, this._dataView, this.groupItemMetadataProvider);\n    this.attachDifferentHooks(this.grid, this.gridOptions, this._dataView);\n\n    // emit the Grid & DataView object to make them available in parent component\n    this.onGridCreated.emit(this.grid);\n    this.onDataviewCreated.emit(this._dataView);\n\n    this.grid.init();\n    this._dataView.beginUpdate();\n    this._dataView.setItems(this._dataset, this.gridOptions.datasetIdPropertyName);\n    this._dataView.endUpdate();\n\n    // after the DataView is created & updated execute some processes\n    this.executeAfterDataviewCreated(this.grid, this.gridOptions, this._dataView);\n\n    // attach resize ONLY after the dataView is ready\n    this.attachResizeHook(this.grid, this.gridOptions);\n\n    // attach grouping and header grouping colspan service\n    if (this.gridOptions.createPreHeaderPanel) {\n      this.groupingAndColspanService.init(this.grid, this._dataView);\n    }\n\n    // attach grid  service\n    this.gridService.init(this.grid, this._dataView);\n\n    // when user enables translation, we need to translate Headers on first pass & subsequently in the attachDifferentHooks\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders();\n    }\n\n    // if Export is enabled, initialize the service with the necessary grid and other objects\n    if (this.gridOptions.enableExport) {\n      this.exportService.init(this.grid, this._dataView);\n    }\n\n    // once all hooks are in placed and the grid is initialized, we can emit an event\n    this.onGridInitialized.emit(this.grid);\n\n    // attach the Backend Service API callback functions only after the grid is initialized\n    // because the preProcess() and onInit() might get triggered\n    if (this.gridOptions && this.gridOptions.backendServiceApi) {\n      this.attachBackendCallbackFunctions(this.gridOptions);\n    }\n\n    this.gridStateService.init(this.grid, this.controlAndPluginService, this.filterService, this.sortService);\n\n    this.onAngularGridCreated.emit({\n      // Slick Grid & DataView objects\n      dataView: this._dataView,\n      slickGrid: this.grid,\n\n      // return all available Services (non-singleton)\n      backendService: this.gridOptions && this.gridOptions.backendServiceApi && this.gridOptions.backendServiceApi.service,\n      exportService: this.exportService,\n      filterService: this.filterService,\n      gridEventService: this.gridEventService,\n      gridStateService: this.gridStateService,\n      gridService: this.gridService,\n      groupingService: this.groupingAndColspanService,\n      pluginService: this.controlAndPluginService,\n      resizerService: this.resizer,\n      sortService: this.sortService,\n    });\n  }\n\n  /**\n   * Define what our internal Post Process callback, it will execute internally after we get back result from the Process backend call\n   * For now, this is GraphQL Service only feautre and it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n   */\n  createBackendApiInternalPostProcessCallback(gridOptions: GridOption) {\n    if (gridOptions && gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      // internalPostProcess only works with a GraphQL Service, so make sure it is that type\n      if (backendApi && backendApi.service && backendApi.service instanceof GraphqlService) {\n        backendApi.internalPostProcess = (processResult: any) => {\n          const datasetName = (backendApi && backendApi.service && typeof backendApi.service.getDatasetName === 'function') ? backendApi.service.getDatasetName() : '';\n          if (processResult && processResult.data && processResult.data[datasetName]) {\n            this._dataset = processResult.data[datasetName].nodes;\n            this.refreshGridData(this._dataset, processResult.data[datasetName].totalCount);\n          } else {\n            this._dataset = [];\n          }\n        };\n      }\n    }\n  }\n\n  attachDifferentHooks(grid: any, gridOptions: GridOption, dataView: any) {\n    // on locale change, we have to manually translate the Headers, GridMenu\n    this.subscriptions.push(\n      this.translate.onLangChange.subscribe((event) => {\n        if (gridOptions.enableTranslate) {\n          this.controlAndPluginService.translateColumnHeaders();\n          this.controlAndPluginService.translateColumnPicker();\n          this.controlAndPluginService.translateGridMenu();\n          this.controlAndPluginService.translateHeaderMenu();\n        }\n      })\n    );\n\n    // if user entered some Columns \"presets\", we need to reflect them all in the grid\n    if (gridOptions.presets && Array.isArray(gridOptions.presets.columns) && gridOptions.presets.columns.length > 0) {\n      const gridColumns: Column[] = this.gridStateService.getAssociatedGridColumns(grid, gridOptions.presets.columns);\n      if (gridColumns && Array.isArray(gridColumns) && gridColumns.length > 0) {\n        // make sure that the checkbox selector is also visible if it is enabled\n        if (gridOptions.enableCheckboxSelector) {\n          const checkboxColumn = (Array.isArray(this._columnDefinitions) && this._columnDefinitions.length > 0) ? this._columnDefinitions[0] : null;\n          if (checkboxColumn && checkboxColumn.id === '_checkbox_selector' && gridColumns[0].id !== '_checkbox_selector') {\n            gridColumns.unshift(checkboxColumn);\n          }\n        }\n\n        // finally set the new presets columns (including checkbox selector if need be)\n        grid.setColumns(gridColumns);\n      }\n    }\n\n    // attach external sorting (backend) when available or default onSort (dataView)\n    if (gridOptions.enableSorting) {\n      gridOptions.backendServiceApi ? this.sortService.attachBackendOnSort(grid, dataView) : this.sortService.attachLocalOnSort(grid, dataView);\n    }\n\n    // attach external filter (backend) when available or default onFilter (dataView)\n    if (gridOptions.enableFiltering) {\n      this.filterService.init(grid);\n\n      // if user entered some \"presets\", we need to reflect them all in the DOM\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n        this.filterService.populateColumnFilterSearchTerms();\n      }\n      gridOptions.backendServiceApi ? this.filterService.attachBackendOnFilter(grid) : this.filterService.attachLocalOnFilter(grid, this._dataView);\n    }\n\n    // if user set an onInit Backend, we'll run it right away (and if so, we also need to run preProcess, internalPostProcess & postProcess)\n    if (gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      if (backendApi && backendApi.service && backendApi.service.init) {\n        backendApi.service.init(backendApi.options, gridOptions.pagination, this.grid);\n      }\n    }\n\n    // expose all Slick Grid Events through dispatch\n    for (const prop in grid) {\n      if (grid.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(grid[prop], (e: any, args: any) => {\n          this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\n        });\n      }\n    }\n\n    // expose all Slick DataView Events through dispatch\n    for (const prop in dataView) {\n      if (dataView.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(dataView[prop], (e: any, args: any) => {\n          this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\n        });\n      }\n    }\n\n    // expose GridState Service changes event through dispatch\n    this.subscriptions.push(\n      this.gridStateService.onGridStateChanged.subscribe((gridStateChange: GridStateChange) => {\n        this.onGridStateChanged.emit(gridStateChange);\n      })\n    );\n\n\n    // on cell click, mainly used with the columnDef.action callback\n    this.gridEventService.attachOnCellChange(grid, dataView);\n    this.gridEventService.attachOnClick(grid, dataView);\n\n    this._eventHandler.subscribe(dataView.onRowCountChanged, (e: any, args: any) => {\n      grid.updateRowCount();\n      grid.render();\n    });\n    this._eventHandler.subscribe(dataView.onRowsChanged, (e: any, args: any) => {\n      grid.invalidateRows(args.rows);\n      grid.render();\n    });\n\n    // does the user have a colspan callback?\n    if (gridOptions.colspanCallback) {\n      this._dataView.getItemMetadata = (rowNumber: number) => {\n        const item = this._dataView.getItem(rowNumber);\n        return gridOptions.colspanCallback(item);\n      };\n    }\n  }\n\n  attachBackendCallbackFunctions(gridOptions: GridOption) {\n    const backendApi = gridOptions.backendServiceApi;\n    const serviceOptions: BackendServiceOption = (backendApi && backendApi.service && backendApi.service.options) ? backendApi.service.options : {};\n    const isExecuteCommandOnInit = (!serviceOptions) ? false : ((serviceOptions && serviceOptions.hasOwnProperty('executeProcessCommandOnInit')) ? serviceOptions['executeProcessCommandOnInit'] : true);\n\n    // update backend filters (if need be) before the query runs\n    if (backendApi) {\n      const backendService = backendApi.service;\n\n      // if user entered some any \"presets\", we need to reflect them all in the grid\n      if (gridOptions && gridOptions.presets) {\n         // Filters \"presets\"\n         if (backendService && backendService.updateFilters && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n          backendService.updateFilters(gridOptions.presets.filters, true);\n        }\n        // Sorters \"presets\"\n        if (backendService && backendService.updateSorters && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n          backendService.updateSorters(undefined, gridOptions.presets.sorters);\n        }\n        // Pagination \"presets\"\n        if (backendService && backendService.updatePagination && gridOptions.presets.pagination) {\n          backendService.updatePagination(gridOptions.presets.pagination.pageNumber, gridOptions.presets.pagination.pageSize);\n        }\n      } else {\n        const columnFilters = this.filterService.getColumnFilters();\n        if (columnFilters && backendService && backendService.updateFilters) {\n          backendService.updateFilters(columnFilters, false);\n        }\n      }\n    }\n\n    if (backendApi && backendApi.service && (backendApi.onInit || isExecuteCommandOnInit)) {\n      const query = (typeof backendApi.service.buildQuery === 'function') ? backendApi.service.buildQuery() : '';\n      const observableOrPromise = (isExecuteCommandOnInit) ? backendApi.process(query) : backendApi.onInit(query);\n\n      // wrap this inside a setTimeout to avoid timing issue since the gridOptions needs to be ready before running this onInit\n      setTimeout(async () => {\n        if (backendApi.preProcess) {\n          backendApi.preProcess();\n        }\n\n        // the process could be an Observable (like HttpClient) or a Promise\n        // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n        const processResult = await castToPromise(observableOrPromise);\n\n        // define what our internal Post Process callback, only available for GraphQL Service for now\n        // it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n        if (processResult && backendApi && backendApi.service instanceof GraphqlService && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  attachResizeHook(grid: any, options: GridOption) {\n    // expand/autofit columns on first page load\n    if (grid && options.autoFitColumnsOnFirstLoad) {\n      grid.autosizeColumns();\n    }\n\n    // auto-resize grid on browser resize\n    this.resizer.init(grid);\n    if (options.enableAutoResize) {\n      this.resizer.attachAutoResizeDataGrid({ height: this.gridHeight, width: this.gridWidth });\n      if (grid && options.autoFitColumnsOnFirstLoad) {\n        grid.autosizeColumns();\n      }\n    }\n  }\n\n  executeAfterDataviewCreated(grid: any, gridOptions: GridOption, dataView: any) {\n    // if user entered some Sort \"presets\", we need to reflect them all in the DOM\n    if (gridOptions.enableSorting) {\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n        this.sortService.loadLocalPresets(grid, dataView);\n      }\n    }\n  }\n\n  mergeGridOptions(gridOptions): GridOption {\n    gridOptions.gridId = this.gridId;\n    gridOptions.gridContainerId = `slickGridContainer-${this.gridId}`;\n    if (gridOptions.enableFiltering || this.forRootConfig.enableFiltering) {\n      gridOptions.showHeaderRow = true;\n    }\n    // use jquery extend to deep merge and avoid immutable properties changed in GlobalGridOptions after route change\n    return $.extend(true, {}, GlobalGridOptions, this.forRootConfig, gridOptions);\n  }\n\n  paginationChanged(pagination: Pagination) {\n    this.gridStateService.onGridStateChanged.next({\n      change: { newValues: pagination, type: GridStateType.pagination },\n      gridState: this.gridStateService.getCurrentGridState()\n    });\n  }\n\n  /**\n   * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well\n   * @param dataset\n   */\n  refreshGridData(dataset: any[], totalCount?: number) {\n    if (dataset && this.grid && this._dataView && typeof this._dataView.setItems === 'function') {\n      this._dataView.setItems(dataset, this.gridOptions.datasetIdPropertyName);\n      this._dataView.reSort();\n\n      // this.grid.setData(dataset);\n      this.grid.invalidate();\n      this.grid.render();\n\n      if (this.gridOptions.enablePagination || this.gridOptions.backendServiceApi) {\n        // do we want to show pagination?\n        // if we have a backendServiceApi and the enablePagination is undefined, we'll assume that we do want to see it, else get that defined value\n        this.showPagination = ((this.gridOptions.backendServiceApi && this.gridOptions.enablePagination === undefined) ? true : this.gridOptions.enablePagination) || false;\n\n        // before merging the grid options, make sure that it has the totalItems count\n        // once we have that, we can merge and pass all these options to the pagination component\n        if (!this.gridOptions.pagination) {\n          this.gridOptions.pagination = (this.gridOptions.pagination) ? this.gridOptions.pagination : undefined;\n        }\n        if (this.gridOptions.pagination && totalCount) {\n          this.gridOptions.pagination.totalItems = totalCount;\n        }\n        if (this.gridOptions.presets && this.gridOptions.presets.pagination && this.gridOptions.pagination) {\n          this.gridOptions.pagination.pageSize = this.gridOptions.presets.pagination.pageSize;\n          this.gridOptions.pagination.pageNumber = this.gridOptions.presets.pagination.pageNumber;\n        }\n        this.gridPaginationOptions = this.mergeGridOptions(this.gridOptions);\n      }\n      if (this.grid &&  this.gridOptions.enableAutoResize) {\n        // resize the grid inside a slight timeout, in case other DOM element changed prior to the resize (like a filter/pagination changed)\n        this.resizer.resizeGrid(10, { height: this.gridHeight, width: this.gridWidth });\n      }\n    }\n  }\n\n  /**\n   * Dynamically change or update the column definitions list.\n   * We will re-render the grid so that the new header and data shows up correctly.\n   * If using i18n, we also need to trigger a re-translate of the column headers\n   */\n  updateColumnDefinitionsList(newColumnDefinitions) {\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders(false, newColumnDefinitions);\n    } else {\n      this.controlAndPluginService.renderColumnHeaders(newColumnDefinitions);\n    }\n    this.grid.autosizeColumns();\n  }\n\n  /** Toggle the filter row displayed on first row\n   * @param isShowing\n   */\n  showHeaderRow(isShowing: boolean) {\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  /** Toggle the filter row displayed on first row */\n  toggleHeaderRow() {\n    const isShowing = !this.grid.getOptions().showHeaderRow;\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  private dispatchCustomEvent(eventName: string, data?: any, isBubbling: boolean = true) {\n    const eventInit: CustomEventInit = { bubbles: isBubbling };\n    if (data) {\n      eventInit.detail = data;\n    }\n    this.customElm.nativeElement.dispatchEvent(new CustomEvent(eventName, eventInit));\n  }\n}\n",
    "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AngularSlickgridComponent } from './../components/angular-slickgrid.component';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport { GraphqlService } from './../services/graphql.service';\r\nimport { GridOdataService } from './../services/grid-odata.service';\r\nimport { GridOption } from './../models/gridOption.interface';\r\nimport { SlickPaginationComponent } from './../components/slick-pagination.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TranslateModule\r\n  ],\r\n  declarations: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  exports: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  entryComponents: [AngularSlickgridComponent]\r\n})\r\nexport class AngularSlickgridModule {\r\n  static forRoot(config: GridOption = {}) {\r\n    return {\r\n      ngModule: AngularSlickgridModule,\r\n      providers: [\r\n        { provide: 'config', useValue: config },\r\n        CollectionService,\r\n        GraphqlService,\r\n        GridOdataService\r\n      ]\r\n    };\r\n  }\r\n}\r\n"
  ],
  "names": [
    "__awaiter",
    "thisArg",
    "_arguments",
    "P",
    "generator",
    "Promise",
    "resolve",
    "reject",
    "fulfilled",
    "value",
    "step",
    "next",
    "e",
    "rejected",
    "result",
    "done",
    "then",
    "apply",
    "__generator",
    "body",
    "f",
    "y",
    "t",
    "g",
    "_",
    "label",
    "sent",
    "trys",
    "ops",
    "verb",
    "throw",
    "return",
    "Symbol",
    "iterator",
    "this",
    "n",
    "v",
    "op",
    "TypeError",
    "call",
    "pop",
    "length",
    "push",
    "__values",
    "o",
    "m",
    "i",
    "__read",
    "r",
    "ar",
    "error",
    "__spread",
    "arguments",
    "concat",
    "colon",
    "comma",
    "equalSign",
    "pipe",
    "semicolon",
    "space",
    "tab",
    "doubleColon",
    "doublePipe",
    "doubleSemicolon",
    "csv",
    "doc",
    "docx",
    "pdf",
    "txt",
    "xls",
    "xlsx",
    "columns",
    "filter",
    "pagination",
    "sorter",
    "empty",
    "contains",
    "lessThan",
    "lessThanOrEqual",
    "greaterThan",
    "greaterThanOrEqual",
    "notEqual",
    "equal",
    "endsWith",
    "startsWith",
    "in",
    "notIn",
    "asc",
    "ASC",
    "desc",
    "DESC",
    "moment",
    "moment_",
    "addWhiteSpaces",
    "nbSpaces",
    "htmlEntityDecode",
    "input",
    "replace",
    "match",
    "dec",
    "String",
    "fromCharCode",
    "arraysEqual",
    "a",
    "b",
    "orderMatters",
    "sort",
    "castToPromise",
    "fromServiceName",
    "promise",
    "Observable",
    "first",
    "toPromise",
    "take",
    "Error",
    "findOrDefault",
    "array",
    "logic",
    "defaultVal",
    "find",
    "decimalFormatted",
    "minDecimal",
    "maxDecimal",
    "isNaN",
    "minDec",
    "undefined",
    "maxDec",
    "amount",
    "Math",
    "round",
    "pow",
    "indexOf",
    "mapMomentDateFormatWithFieldType",
    "fieldType",
    "map",
    "FieldType",
    "dateTime",
    "dateTimeIso",
    "dateTimeIsoAmPm",
    "dateTimeIsoAM_PM",
    "dateUs",
    "dateUsShort",
    "dateTimeUs",
    "dateTimeUsAmPm",
    "dateTimeUsAM_PM",
    "dateTimeUsShort",
    "dateTimeUsShortAmPm",
    "dateUtc",
    "date",
    "dateIso",
    "mapFlatpickrDateFormatWithFieldType",
    "mapOperatorType",
    "operator",
    "OperatorType",
    "mapOperatorByFieldType",
    "string",
    "unknown",
    "float",
    "number",
    "dateTimeUsShortAM_PM",
    "parseUtcDate",
    "inputDateString",
    "useUtc",
    "test",
    "dateString",
    "decodeURIComponent",
    "dateMoment",
    "Date",
    "isValid",
    "year",
    "toString",
    "utc",
    "format",
    "sanitizeHtmlToText",
    "htmlString",
    "temp",
    "document",
    "createElement",
    "innerHTML",
    "textContent",
    "innerText",
    "titleCase",
    "charAt",
    "toUpperCase",
    "slice",
    "toCamelCase",
    "str",
    "offset",
    "toLowerCase",
    "compareDates",
    "value1",
    "value2",
    "sortDirection",
    "strict",
    "diff",
    "date1",
    "date2",
    "parseInt",
    "FORMAT",
    "dateUsShortSorter",
    "dateSorter",
    "ISO_8601",
    "dateIsoSorter",
    "dateUsSorter",
    "numericSorter",
    "x",
    "parseFloat",
    "stringSorter",
    "position",
    "Sorters",
    "numeric",
    "sortByFieldType",
    "sortResult",
    "CollectionService",
    "translate",
    "prototype",
    "filterCollection",
    "collection",
    "filterBy",
    "filteredCollection",
    "property_1",
    "property",
    "value_1",
    "item",
    "sortCollection",
    "sortBy",
    "enableTranslateLabel",
    "_this",
    "sortedCollection",
    "property_2",
    "sortDirection_1",
    "hasOwnProperty",
    "sortDesc",
    "fieldType_1",
    "dataRow1",
    "dataRow2",
    "instant",
    "parseBoolean",
    "type",
    "Injectable",
    "TranslateService",
    "booleanFilterCondition",
    "options",
    "searchTerm",
    "Array",
    "isArray",
    "searchTerms",
    "cellValue",
    "testFilterCondition",
    "includes",
    "dateFilterCondition",
    "searchDateFormat",
    "filterSearchType",
    "dateCell",
    "dateSearch",
    "dateIsoFilterCondition",
    "dateUsFilterCondition",
    "dateUsShortFilterCondition",
    "dateUtcFilterCondition",
    "collectionSearchFilterCondition",
    "numberFilterCondition",
    "stringFilterCondition",
    "cellValueLastChar",
    "executeMappedCondition",
    "boolean",
    "FilterConditions",
    "booleanFilter",
    "collectionSearchFilter",
    "dateFilter",
    "dateIsoFilter",
    "dateUtcFilter",
    "dateUsFilter",
    "dateUsShortFilter",
    "numberFilter",
    "stringFilter",
    "testFilter",
    "require",
    "CompoundDateFilter",
    "Object",
    "defineProperty",
    "get",
    "grid",
    "getOptions",
    "_operator",
    "set",
    "init",
    "args",
    "callback",
    "columnDef",
    "$filterElm",
    "createDomElement",
    "$filterInputElm",
    "keyup",
    "onTriggerEvent",
    "$selectOperatorElm",
    "change",
    "clear",
    "flatInstance",
    "val",
    "destroy",
    "off",
    "remove",
    "setValues",
    "values",
    "setDate",
    "buildDatePickerInput",
    "inputFormat",
    "outputFormat",
    "outputType",
    "currentLocale",
    "currentLang",
    "substring",
    "pickerOptions",
    "defaultDate",
    "altInput",
    "altFormat",
    "dateFormat",
    "wrap",
    "closeOnSelect",
    "locale",
    "loadFlatpickrLocale",
    "onChange",
    "selectedDates",
    "dateStr",
    "instance",
    "_currentValue",
    "enableTime",
    "CustomEvent",
    "placeholder",
    "gridOptions",
    "defaultFilterPlaceholder",
    "$",
    "flatpickr",
    "buildSelectOperatorHtmlString",
    "optionValues",
    "getOptionValues",
    "optionValueString",
    "forEach",
    "option",
    "description",
    "$headerElm",
    "getHeaderRowColumn",
    "id",
    "$filterContainerElm",
    "$containerInputGroup",
    "$operatorInputGroupAddon",
    "append",
    "attr",
    "data",
    "addClass",
    "appendTo",
    "localeDefault",
    "default",
    "clearFilterTriggered",
    "selectedOperator",
    "text",
    "removeClass",
    "hide",
    "close",
    "show",
    "open",
    "CompoundInputFilter",
    "buildInputHtmlString",
    "Inject",
    "InputFilter",
    "filterTemplate",
    "buildTemplateHtmlString",
    "target",
    "trigger",
    "MultipleSelectFilter",
    "collectionService",
    "isFilled",
    "defaultOptions",
    "container",
    "maxHeight",
    "okButton",
    "addTitle",
    "countSelected",
    "allSelected",
    "selectAllText",
    "selectAllDelimiter",
    "onClose",
    "selectedItems",
    "multipleSelect",
    "siblings",
    "labelName",
    "customStructure",
    "valueName",
    "newCollection",
    "params",
    "collectionFilterBy",
    "collectionSortBy",
    "optionCollection",
    "labelKey",
    "selected",
    "findValueInSearchTerms",
    "textLabel",
    "assign",
    "filterOptions",
    "SelectFilter",
    "searchTermInput",
    "SingleSelectFilter",
    "single",
    "selectedItem",
    "Filters",
    "singleSelect",
    "select",
    "compoundDate",
    "compoundInput",
    "GlobalGridOptions",
    "alwaysShowVerticalScroll",
    "autoEdit",
    "asyncEditorLoading",
    "autoFitColumnsOnFirstLoad",
    "autoResize",
    "bottomPadding",
    "minHeight",
    "minWidth",
    "sidePadding",
    "cellHighlightCssClass",
    "checkboxSelector",
    "cssClass",
    "columnPicker",
    "hideForceFitButton",
    "hideSyncResizeButton",
    "datasetIdPropertyName",
    "defaultFilter",
    "editable",
    "enableAutoResize",
    "enableCellNavigation",
    "enableColumnPicker",
    "enableColumnReorder",
    "enableExport",
    "enableGridMenu",
    "enableHeaderMenu",
    "enableMouseHoverHighlightRow",
    "enableSorting",
    "enableTextSelectionOnCells",
    "explicitInitialization",
    "exportOptions",
    "delimiter",
    "DelimiterType",
    "exportWithFormatter",
    "filename",
    "FileType",
    "groupingAggregatorRowText",
    "sanitizeDataExport",
    "useUtf8WithBom",
    "forceFitColumns",
    "gridMenu",
    "hideClearAllFiltersCommand",
    "hideClearAllSortingCommand",
    "hideExportCsvCommand",
    "hideExportTextDelimitedCommand",
    "hideRefreshDatasetCommand",
    "hideToggleFilterCommand",
    "iconCssClass",
    "iconClearAllFiltersCommand",
    "iconClearAllSortingCommand",
    "iconExportCsvCommand",
    "iconExportTextDelimitedCommand",
    "iconRefreshDatasetCommand",
    "iconToggleFilterCommand",
    "menuWidth",
    "resizeOnShowHeaderRow",
    "headerMenu",
    "autoAlign",
    "autoAlignOffset",
    "iconSortAscCommand",
    "iconSortDescCommand",
    "iconColumnHideCommand",
    "hideColumnHideCommand",
    "hideSortCommands",
    "headerRowHeight",
    "multiColumnSort",
    "numberedMultiColumnSort",
    "tristateMultiColumnSort",
    "sortColNumberInSeparateSpan",
    "suppressActiveCellChangeOnEdit",
    "pageSizes",
    "pageSize",
    "totalItems",
    "rowHeight",
    "showHeaderRow",
    "topPanelHeight",
    "SlickgridConfig",
    "FilterFactory",
    "injector",
    "config",
    "_options",
    "createFilter",
    "columnFilter",
    "model",
    "filterInstance",
    "name",
    "createInjector",
    "service",
    "Injector",
    "create",
    "provide",
    "deps",
    "FilterService",
    "filterFactory",
    "_eventHandler",
    "Slick",
    "EventHandler",
    "_filters",
    "_columnFilters",
    "onFilterChanged",
    "Subject",
    "onFilterCleared",
    "_grid",
    "getColumns",
    "attachBackendOnFilter",
    "_slickSubscriber",
    "Event",
    "subscribe",
    "attachBackendOnFilterSubscribe",
    "bind",
    "onHeaderRowCellRendered",
    "addFilterTemplateToHeaderRow",
    "event",
    "backendApi",
    "_gridOptions",
    "backendServiceApi",
    "process",
    "preProcess",
    "processOnFilterChanged",
    "query",
    "_a",
    "emitFilterChanged",
    "processResult",
    "internalPostProcess",
    "postProcess",
    "attachLocalOnFilter",
    "dataView",
    "_dataView",
    "setFilterArgs",
    "columnFilters",
    "setFilter",
    "customLocalFilter",
    "columnId",
    "refresh",
    "clearFilters",
    "invalidate",
    "render",
    "tslib_1.__values",
    "keys",
    "_b",
    "columnIndex",
    "getColumnIndex",
    "queryField",
    "queryFieldFilter",
    "field",
    "fieldSearchValue",
    "matches",
    "lastValueChar",
    "join",
    "k",
    "ln",
    "useFormatterOuputToFilter",
    "rowIndex",
    "getIdxById",
    "formatter",
    "dispose",
    "disposeColumnFilters",
    "unsubscribeAll",
    "unsubscribe",
    "index",
    "getColumnFilters",
    "getCurrentLocalFilters",
    "currentFilters",
    "colId",
    "callbackSearchEvent",
    "colFilter",
    "triggerEvent",
    "serviceOptions",
    "_onFilterChangedOptions",
    "column",
    "filterable",
    "filter_1",
    "updateColumnFilters",
    "filterArguments",
    "filterExistIndex",
    "findIndex",
    "filt",
    "sender",
    "backendService",
    "getCurrentFilters",
    "populateColumnFilterSearchTerms",
    "presets",
    "filters",
    "filters_1",
    "_columnDefinitions",
    "columnPreset",
    "presetFilter",
    "slickEvent",
    "isPropagationStopped",
    "extend",
    "EventData",
    "notify",
    "ExportService",
    "_lineCarriageReturn",
    "_hasGroupedItems",
    "onGridBeforeExportToFile",
    "onGridAfterExportToFile",
    "exportToFile",
    "_exportOptions",
    "dataOutput",
    "getDataOutput",
    "setTimeout",
    "downloadOptions",
    "csvContent",
    "startDownloadFile",
    "groupByColumnHeader",
    "groupingColumnHeaderTitle",
    "_exportQuoteWrapper",
    "outputDataString",
    "grouping",
    "getGrouping",
    "_columnHeaders",
    "getColumnHeaders",
    "header",
    "title",
    "getAllGridRowData",
    "lineCarriageReturn",
    "lineCount",
    "getLength",
    "rowNumber",
    "itemObj",
    "getItem",
    "readRegularRowData",
    "__groupTotals",
    "readGroupedTitleRow",
    "readGroupedTotalRow",
    "columnHeaders",
    "fieldName",
    "headerKey",
    "skippedField",
    "excludeFromExport",
    "width",
    "key",
    "row",
    "idx",
    "rowOutputString",
    "exportQuoteWrapper",
    "col",
    "fieldId",
    "isEvaluatingFormatter",
    "exportCustomFormatter",
    "itemData",
    "exportCsvForceToKeepAsString",
    "groupName",
    "level",
    "output",
    "groupTotalsFormatter",
    "navigator",
    "appName",
    "outputData",
    "mimeType",
    "TextEncoder",
    "encode",
    "blob",
    "Blob",
    "msSaveOrOpenBlob",
    "link",
    "csvUrl",
    "URL",
    "createObjectURL",
    "href",
    "setAttribute",
    "style",
    "visibility",
    "appendChild",
    "click",
    "removeChild",
    "SortService",
    "_currentLocalSorters",
    "_isBackendGrid",
    "onSortChanged",
    "onSortCleared",
    "attachBackendOnSort",
    "onSort",
    "onBackendSortChanged",
    "processOnSortChanged",
    "emitSortChanged",
    "attachLocalOnSort",
    "sortColumns",
    "sortCols",
    "sortAsc",
    "sortCol",
    "sortColumn",
    "direction",
    "SortDirection",
    "onLocalSortChanged",
    "clearSorting",
    "setSortColumns",
    "getCurrentLocalSorters",
    "getPreviousColumnSorts",
    "getSortColumns",
    "reduce",
    "cols",
    "loadLocalPresets",
    "sorters",
    "presetSorting",
    "gridColumn",
    "l",
    "columnSortObj",
    "SortDirectionNumber",
    "sortField",
    "neutral",
    "currentSorters",
    "getCurrentSorters",
    "ControlAndPluginService",
    "exportService",
    "filterService",
    "sortService",
    "areVisibleColumnDifferent",
    "extensionList",
    "getAllColumns",
    "allColumns",
    "getVisibleColumns",
    "visibleColumns",
    "getAllExtensions",
    "getExtensionByName",
    "p",
    "autoResizeColumns",
    "autosizeColumns",
    "attachDifferentControlOrPlugins",
    "groupItemMetadataProvider",
    "enableTranslate",
    "translateHeaderKeys",
    "columnPickerControl",
    "createColumnPicker",
    "userOriginalGridMenu",
    "gridMenuControl",
    "createGridMenu",
    "enableAutoTooltip",
    "autoTooltipPlugin",
    "AutoTooltips",
    "autoTooltipOptions",
    "registerPlugin",
    "enableGrouping",
    "groupItemMetaProviderPlugin",
    "enableCheckboxSelector",
    "checkboxSelectorPlugin",
    "rowSelectionPlugin",
    "getSelectionModel",
    "RowSelectionModel",
    "rowSelectionOptions",
    "setSelectionModel",
    "preselectedRows",
    "selectRows",
    "enableRowSelection",
    "enableHeaderButton",
    "headerButtonsPlugin",
    "Plugins",
    "HeaderButtons",
    "headerButton",
    "onCommand",
    "headerMenuPlugin",
    "createHeaderMenu",
    "enableExcelCopyBuffer",
    "createUndoRedoBuffer",
    "hookUndoShortcutKey",
    "createCellExternalCopyManagerPlugin",
    "registerPlugins",
    "plugin",
    "createCheckboxPluginBeforeGridCreation",
    "columnDefinitions",
    "CheckboxSelectColumn",
    "selectionColumn",
    "getColumnDefinition",
    "excludeFromQuery",
    "excludeFromHeaderMenu",
    "unshift",
    "newRowIds",
    "pluginOptions",
    "clipboardCommandHandler",
    "editCommand",
    "undoRedoBuffer",
    "queueAndExecuteCommand",
    "dataItemColumnValueExtractor",
    "editor",
    "formattedOutput",
    "readOnlyMode",
    "includeHeaderWhenCopying",
    "newRowCreator",
    "count",
    "getData",
    "addItem",
    "CellSelectionModel",
    "cellExternalCopyManagerPlugin",
    "CellExternalCopyManager",
    "forceFitTitle",
    "getDefaultTranslationByKey",
    "syncResizeTitle",
    "Controls",
    "ColumnPicker",
    "onColumnsChanged",
    "getDefaultGridMenuOptions",
    "customItems",
    "addGridMenuCustomCommands",
    "sortItems",
    "GridMenu",
    "onBeforeMenuShow",
    "executeGridMenuInternalCustomCommands",
    "onMenuClose",
    "gridUid",
    "getUID",
    "getDefaultHeaderMenuOptions",
    "addHeaderMenuCustomCommands",
    "HeaderMenu",
    "executeHeaderMenuInternalCommands",
    "commandQueue",
    "commandCtr",
    "execute",
    "undo",
    "command",
    "GlobalEditorLock",
    "cancelCurrentEdit",
    "redo",
    "hideColumn",
    "removeColumnByIndex",
    "setColumns",
    "keydown",
    "which",
    "ctrlKey",
    "metaKey",
    "shiftKey",
    "gridMenuCustomItems",
    "enableFiltering",
    "disabled",
    "positionOrder",
    "customTitle",
    "headerMenuOptions",
    "menu",
    "items",
    "columnHeaderMenuItems",
    "sortable",
    "itemA",
    "itemB",
    "newSortColumns",
    "setHeaderRowVisibility",
    "setTopPanelVisibility",
    "showTopPanel",
    "refreshBackendDataset",
    "buildQuery",
    "el",
    "translateColumnPicker",
    "columnTitle",
    "translateGridMenu",
    "translateHeaderMenu",
    "resetHeaderMenuTranslations",
    "translateColumnHeaders",
    "newColumnDefinitions",
    "use",
    "renderColumnHeaders",
    "resetGridMenuTranslations",
    "propertyName",
    "columns_1",
    "columns_1_1",
    "timer",
    "GraphqlQueryBuilder",
    "queryFnName",
    "aliasOrFilter",
    "head",
    "alias",
    "prop",
    "getGraphQLValue",
    "searches",
    "_i",
    "searchKeys",
    "parceFind",
    "setAlias",
    "ReferenceError",
    "_levelA",
    "currentValue",
    "itemX",
    "RangeError",
    "propsAA",
    "JSON",
    "stringify",
    "propS",
    "objectToString",
    "obj",
    "sourceA",
    "DEFAULT_ITEMS_PER_PAGE",
    "GraphqlService",
    "defaultOrderBy",
    "defaultPaginationOptions",
    "datasetName",
    "queryQb",
    "QueryBuilder",
    "datasetQb",
    "dataQb",
    "columnIds",
    "columnDefinitions_1",
    "columnDefinitions_1_1",
    "fields",
    "buildFilterQuery",
    "isWithCursor",
    "pageInfoQb",
    "node",
    "datasetFilters",
    "paginationOptions",
    "sortingOptions",
    "orderBy",
    "filteringOptions",
    "addLocaleIntoQuery",
    "i18n",
    "extraQueryArguments",
    "_c",
    "queryArgument",
    "trimDoubleQuotesOnEnumField",
    "keepArgumentFieldDoubleQuotes",
    "inputArray",
    "shift",
    "split",
    "getInitPaginationOptions",
    "getDatasetName",
    "_currentFilters",
    "getCurrentPagination",
    "_currentPagination",
    "_currentSorters",
    "resetPaginationOptions",
    "after",
    "before",
    "last",
    "pageNumber",
    "updateOptions",
    "debounceTypingDelay",
    "filterTypingDebounce",
    "castFilterToColumnFilter",
    "clearTimeout",
    "updateFilters",
    "processOnPaginationChanged",
    "updatePagination",
    "newPage",
    "updateSorters",
    "isUpdatedByPreset",
    "searchValue",
    "searchByArray",
    "_loop_1",
    "columnFilter_1",
    "this_1",
    "presetSorters",
    "graphqlSorters",
    "tmpSorterArray",
    "queryFieldSorter",
    "sortColumns_1",
    "sortColumns_1_1",
    "inputStr",
    "enumSearchWords",
    "patternWordInQuotes",
    "patternRegex",
    "reg",
    "RegExp",
    "group1",
    "group2",
    "group3",
    "removeDoubleQuotes",
    "tmpFilter",
    "padZero",
    "s",
    "trim",
    "allTitleCase",
    "outputStr",
    "substr",
    "OdataService",
    "_odataOptions",
    "filterQueue",
    "_defaultSortBy",
    "queryTmpArray",
    "top",
    "skip",
    "argument",
    "filterStr",
    "filterBySeparator",
    "saveColumnFilter",
    "updateFilterFromListTerms",
    "getFilterByColumn",
    "columnName",
    "getFilterCount",
    "removeColumnFilter",
    "search",
    "filterOptionObject",
    "updateFilterFromTerm",
    "searchBy",
    "tmpSearchByArray",
    "fieldSearchTerms",
    "tmpSearchTerms",
    "j",
    "lnj",
    "lnk",
    "caseType",
    "CaseType",
    "pascalCase",
    "GridOdataService",
    "odataService",
    "mergedOptions",
    "terms",
    "_loop_2",
    "columnFilter_2",
    "this_2",
    "bypassOdataQuery",
    "bypassBackendQuery",
    "encodeURIComponent",
    "dateFormatted",
    "mapOdataOperator",
    "sortByArray",
    "sorterArray",
    "sortColumns_2",
    "sortColumns_2_1",
    "columnFieldName",
    "csvString",
    "GridEventService",
    "attachOnCellChange",
    "onCellChange",
    "cell",
    "getDataItem",
    "returnedArgs",
    "gridDefinition",
    "dataContext",
    "attachOnClick",
    "onClick",
    "onCellClick",
    "GridStateService",
    "_columns",
    "_currentColumns",
    "subscriptions",
    "onGridStateChanged",
    "controlAndPluginService",
    "subscribeToAllGridChanges",
    "subscription",
    "getCurrentGridState",
    "gridState",
    "getCurrentColumns",
    "currentPagination",
    "getAssociatedCurrentColumns",
    "gridColumns",
    "currentColumns",
    "headerCssClass",
    "getAssociatedGridColumns",
    "currentColumn",
    "c",
    "hookExtensionEventToGridStateChange",
    "extensionName",
    "eventName",
    "extension",
    "newValues",
    "GridStateType",
    "hookSlickGridEventToGridStateChange",
    "resetColumns",
    "GridService",
    "gridStateService",
    "getColumnFromEventArguments",
    "getDataItemByRowNumber",
    "getItemRowMetadata",
    "previousItemMetadata",
    "meta",
    "cssClasses",
    "isEmptyObject",
    "_dirty",
    "rowClass",
    "highlightRow",
    "fadeDelay",
    "setSelectedRows",
    "getItemMetadata",
    "updateItem",
    "gridId",
    "getSelectedRows",
    "setSelectedRow",
    "rowIndexes",
    "renderGrid",
    "resetGrid",
    "originalColumns",
    "addItemToDatagrid",
    "insertItem",
    "scrollRowIntoView",
    "deleteDataGridItem",
    "itemId",
    "deleteDataGridItemById",
    "getRowById",
    "deleteItem",
    "updateDataGridItem",
    "updateDataGridItemById",
    "GroupingAndColspanService",
    "createPreHeaderPanel",
    "createPreHeaderRowGroupingTitle",
    "onColumnsResized",
    "onRowCountChanged",
    "$preHeaderPanel",
    "getPreHeaderPanel",
    "css",
    "getHeadersWidth",
    "parent",
    "headerColumnWidthDiff",
    "getHeaderColumnWidthDiff",
    "lastColumnGroup",
    "widthTotal",
    "columnGroup",
    "html",
    "ResizerService",
    "onGridBeforeResize",
    "attachAutoResizeDataGrid",
    "newSizes",
    "gridDomElm",
    "resizeGrid",
    "window",
    "on",
    "_gridUid",
    "calculateGridNewDimensions",
    "containerElm",
    "containerId",
    "gridContainerId",
    "windowElm",
    "enablePagination",
    "gridHeight",
    "height",
    "coordOffsetTop",
    "availableHeight",
    "availableWidth",
    "newHeight",
    "newWidth",
    "getLastResizeDimensions",
    "_lastDimensions",
    "delay",
    "availableDimensions",
    "gridElm",
    "gridContainerElm",
    "heightWithPagination",
    "exec",
    "userAgent",
    "resizeCanvas",
    "AvgAggregator",
    "_field",
    "_count",
    "_nonNullCount",
    "_sum",
    "accumulate",
    "storeResult",
    "groupTotals",
    "avg",
    "MinAggregator",
    "_min",
    "min",
    "MaxAggregator",
    "_max",
    "max",
    "SumAggregator",
    "sum",
    "Aggregators",
    "Avg",
    "Min",
    "Max",
    "Sum",
    "CheckboxEditor",
    "$input",
    "focus",
    "loadValue",
    "defaultValue",
    "preClick",
    "serializeValue",
    "applyValue",
    "state",
    "isValueChanged",
    "validate",
    "validator",
    "validationResults",
    "valid",
    "msg",
    "DateEditor",
    "getCurrentLocale",
    "save",
    "commitChanges",
    "getColumnEditor",
    "internalColumnEditor",
    "domValue",
    "toDate",
    "FloatEditor",
    "getInputDecimalSteps",
    "keyCode",
    "KeyCode",
    "LEFT",
    "RIGHT",
    "stopImmediatePropagation",
    "getDecimalPlaces",
    "columnEditor",
    "rtn",
    "decimalPlaces",
    "decimals",
    "zeroString",
    "decPlaces",
    "toFixed",
    "elmValue",
    "errorMsg",
    "validatorErrorMessage",
    "IntegerEditor",
    "LongTextEditor",
    "$container",
    "$wrapper",
    "cancel",
    "handleKeyDown",
    "ENTER",
    "ESCAPE",
    "preventDefault",
    "TAB",
    "navigatePrev",
    "navigateNext",
    "cancelChanges",
    "left",
    "MultipleSelectEditor",
    "_translate",
    "offsetLeft",
    "onOpen",
    "autoAdjustDropPosition",
    "$editorElm",
    "editorElmOptions",
    "editorTemplate",
    "each",
    "$e",
    "currentValues",
    "multipleSelectDomElement",
    "multipleSelectOptions",
    "windowHeight",
    "innerHeight",
    "pageScroll",
    "scrollTop",
    "$msDrop",
    "msDropHeight",
    "msDropOffsetTop",
    "newOffsetTop",
    "elementOptions",
    "SingleSelectEditor",
    "TextEditor",
    "getValue",
    "setValue",
    "Editors",
    "checkbox",
    "integer",
    "longText",
    "arrayToCsvFormatter",
    "boldFormatter",
    "checkboxFormatter",
    "checkmarkFormatter",
    "collectionFormatter",
    "collectionEditorFormatter",
    "complexObjectFormatter",
    "dateIsoFormatter",
    "dateTimeIsoFormatter",
    "dateTimeIsoAmPmFormatter",
    "dateTimeUsAmPmFormatter",
    "dateTimeUsFormatter",
    "dateUsFormatter",
    "deleteIconFormatter",
    "dollarColoredBoldFormatter",
    "dollarColoredFormatter",
    "dollarFormatter",
    "editIconFormatter",
    "hyperlinkFormatter",
    "matchUrl",
    "hyperlinkUriPrefixFormatter",
    "uriPrefix",
    "infoIconFormatter",
    "lowercaseFormatter",
    "multipleFormatter",
    "formatters",
    "formatters_1",
    "formatters_1_1",
    "percentFormatter",
    "percentCompleteBarFormatter",
    "percentCompleteFormatter",
    "percentSymbolFormatter",
    "progressBarFormatter",
    "translateFormatter",
    "translateBooleanFormatter",
    "uppercaseFormatter",
    "yesNoFormatter",
    "Formatters",
    "arrayToCsv",
    "bold",
    "checkmark",
    "complexObject",
    "collectionEditor",
    "deleteIcon",
    "dollar",
    "dollarColored",
    "dollarColoredBold",
    "editIcon",
    "hyperlink",
    "hyperlinkUriPrefix",
    "infoIcon",
    "lowercase",
    "multiple",
    "percent",
    "percentComplete",
    "percentCompleteBar",
    "percentSymbol",
    "progressBar",
    "translateBoolean",
    "uppercase",
    "yesNo",
    "avgTotalsPercentageFormatter",
    "totals",
    "prefix",
    "groupFormatterPrefix",
    "suffix",
    "groupFormatterSuffix",
    "avgTotalsDollarFormatter",
    "avgTotalsFormatter",
    "minTotalsFormatter",
    "maxTotalsFormatter",
    "sumTotalsColoredFormatter",
    "sumTotalsDollarColoredBoldFormatter",
    "sumTotalsDollarColoredFormatter",
    "sumTotalsDollarBoldFormatter",
    "sumTotalsDollarFormatter",
    "sumTotalsFormatter",
    "sumTotalsBoldFormatter",
    "GroupTotalFormatters",
    "avgTotals",
    "avgTotalsDollar",
    "avgTotalsPercentage",
    "maxTotals",
    "minTotals",
    "sumTotals",
    "sumTotalsBold",
    "sumTotalsColored",
    "sumTotalsDollar",
    "sumTotalsDollarBold",
    "sumTotalsDollarColored",
    "sumTotalsDollarColoredBold",
    "SlickPaginationComponent",
    "_isFirstRender",
    "onPaginationChanged",
    "EventEmitter",
    "dataFrom",
    "dataTo",
    "pageCount",
    "paginationPageSizes",
    "fromToParams",
    "from",
    "to",
    "_gridPaginationOptions",
    "gridPaginationOptions",
    "refreshPagination",
    "ngOnDestroy",
    "ngAfterViewInit",
    "_filterSubcription",
    "ceil",
    "changeToFirstPage",
    "onPageChanged",
    "changeToLastPage",
    "changeToNextPage",
    "changeToPreviousPage",
    "changeToCurrentPage",
    "currentTarget",
    "onChangeItemPerPage",
    "itemsPerPage",
    "isPageNumberReset",
    "recalculateFromToIndexes",
    "emit",
    "Component",
    "selector",
    "template",
    "Output",
    "Input",
    "AngularSlickgridComponent",
    "gridService",
    "gridEventService",
    "groupingAndColspanService",
    "resizer",
    "forRootConfig",
    "groupingDefinition",
    "showPagination",
    "isGridInitialized",
    "onAngularGridCreated",
    "onDataviewCreated",
    "onGridCreated",
    "onGridInitialized",
    "onBeforeGridCreate",
    "onBeforeGridDestroy",
    "onAfterGridDestroyed",
    "gridWidth",
    "updateColumnDefinitionsList",
    "getItems",
    "dataset",
    "_dataset",
    "refreshGridData",
    "ngOnInit",
    "gridHeightString",
    "gridWidthString",
    "initialization",
    "mergeGridOptions",
    "createBackendApiInternalPostProcessCallback",
    "Data",
    "GroupItemMetadataProvider",
    "DataView",
    "inlineFilters",
    "Grid",
    "attachDifferentHooks",
    "beginUpdate",
    "setItems",
    "endUpdate",
    "executeAfterDataviewCreated",
    "attachResizeHook",
    "attachBackendCallbackFunctions",
    "slickGrid",
    "groupingService",
    "pluginService",
    "resizerService",
    "backendApi_1",
    "nodes",
    "totalCount",
    "onLangChange",
    "checkboxColumn",
    "_loop_3",
    "this_3",
    "dispatchCustomEvent",
    "eventData",
    "_loop_4",
    "this_4",
    "gridStateChange",
    "updateRowCount",
    "onRowsChanged",
    "invalidateRows",
    "rows",
    "colspanCallback",
    "isExecuteCommandOnInit",
    "onInit",
    "observableOrPromise_1",
    "tslib_1.__awaiter",
    "paginationChanged",
    "reSort",
    "isShowing",
    "toggleHeaderRow",
    "isBubbling",
    "eventInit",
    "bubbles",
    "detail",
    "customElm",
    "nativeElement",
    "dispatchEvent",
    "providers",
    "decorators",
    "ViewChild",
    "read",
    "ElementRef",
    "AngularSlickgridModule",
    "forRoot",
    "ngModule",
    "useValue",
    "NgModule",
    "imports",
    "CommonModule",
    "TranslateModule",
    "declarations",
    "exports",
    "entryComponents",
    "buf",
    "charCodeAt"
  ],
  "mappings": "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"
}
