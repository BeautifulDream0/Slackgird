{
  "version": 3,
  "file": "angular-slickgrid.umd.min.js",
  "sources": [
    "ng://angular-slickgrid/node_modules/tslib/tslib.es6.js",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/delimiterType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/fileType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/gridStateType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/operatorType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/sortDirection.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/compareDateUtility.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsShortSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateIsoSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/numericSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/stringSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/sorterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/collection.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/booleanFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/filterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateIsoFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsShortFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUtcFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/collectionSearchFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/numberFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/stringFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/executeMappedCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundDateFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundInputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundSliderFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/inputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/multipleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/selectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/singleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/sliderFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/global-grid-options.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/slickgrid-config.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/filterFactory.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/filter.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/export.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/sort.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/constants.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/controlAndPlugin.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphqlQueryBuilder.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphql.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/global-utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid-odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridEvent.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridState.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/groupingAndColspan.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/resizer.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/avgAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/minAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/maxAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/sumAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/checkboxEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/dateEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/floatEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/integerEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/longTextEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/multipleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/singleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/sliderEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/textEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/arrayToCsvFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/boldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkboxFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkmarkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionEditorFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/complexObjectFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/decimalFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/deleteIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/editIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkUriPrefixFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/infoIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/lowercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/maskFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/multipleFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentSymbolFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/progressBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateBooleanFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/uppercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/yesNoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsPercentageFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/minTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/maxTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/slick-pagination.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/angular-slickgrid.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/modules/angular-slickgrid.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n",
    "export enum DelimiterType {\r\n  colon = ':',\r\n  comma = ',',\r\n  equalSign = '=',\r\n  pipe = '|',\r\n  semicolon = ';',\r\n  space = ' ',\r\n  tab = '\\t',\r\n\r\n  doubleColon = '::',\r\n  doublePipe = '||',\r\n  doubleSemicolon = ';;',\r\n}\r\n\r\n",
    "export enum FileType {\r\n  csv = 'csv',\r\n  doc = 'doc',\r\n  docx = 'docx',\r\n  pdf = 'pdf',\r\n  txt = 'txt',\r\n  xls = 'xls',\r\n  xlsx = 'xlsx'\r\n}\r\n",
    "export enum GridStateType {\r\n  columns = 'columns',\r\n  filter = 'filter',\r\n  pagination = 'pagination',\r\n  sorter = 'sorter'\r\n}\r\n",
    "export enum OperatorType {\n  /** value is empty */\n  empty = '',\n\n  /** value contains x */\n  contains = 'Contains',\n\n  /** value less than x */\n  lessThan = 'LT',\n\n  /** value less than or equal to x */\n  lessThanOrEqual = 'LE',\n\n  /** value greater than x */\n  greaterThan = 'GT',\n\n  /** value great than or equal to x */\n  greaterThanOrEqual = 'GE',\n\n  /** value not equal to x */\n  notEqual = 'NE',\n\n  /** value equal to x */\n  equal = 'EQ',\n\n  /** String ends with value */\n  endsWith = 'EndsWith',\n\n  /** String starts with value */\n  startsWith = 'StartsWith',\n\n  /** Find an equal match inside a collection */\n  in = 'IN',\n\n  /** Inverse (Not In) of an equal match inside a collection */\n  notIn = 'NOT_IN',\n\n  /**\n   * Find a substring contained inside a collection\n   * For example, this condition would return True with \"IN_CONTAINS\":: value='Task2,Task3', collection=['Task2','Task3']\n   * This would have returned False with \"IN\" because 'Task2' does not equal 'Task2,Task3'. However 'Task2' is contained in 'Task2,Task3'\n   */\n  inContains = 'IN_CONTAINS',\n\n  /** Inversed (Not In) of substring contained inside a collection */\n  notInContains = 'NOT_IN_CONTAINS',\n}\n",
    "export enum SortDirection {\r\n  asc = 'asc',\r\n  ASC = 'ASC',\r\n  desc = 'desc',\r\n  DESC = 'DESC'\r\n}\r\n",
    "import { FieldType, OperatorType } from '../models/index';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/first';\nimport 'rxjs/add/operator/take';\nimport 'rxjs/add/operator/toPromise';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n/** Simple function to which will loop and create as demanded the number of white spaces,\n * this will be used in the Excel export\n * @param int nbSpaces: number of white spaces to create\n */\nexport function addWhiteSpaces(nbSpaces): string {\n  let result = '';\n\n  for (let i = 0; i < nbSpaces; i++) {\n    result += ' ';\n  }\n  return result;\n}\n\n/**\n * Compares two objects to determine if all the properties are equal\n * We will do a deep check recursively to make sure all properties really are the same\n * @param x first object\n * @param y second object to compare with a  */\nexport function objectsDeepEqual(x, y) {\n  const ok = Object.keys, tx = typeof x, ty = typeof y;\n  return x && y && tx === 'object' && tx === ty ? (\n    ok(x).length === ok(y).length &&\n      ok(x).every(key => objectsDeepEqual(x[key], y[key]))\n  ) : (x === y);\n}\n\n/** HTML encode using jQuery */\nexport function htmlEncode(value) {\n  // create a in-memory div, set it's inner text(which jQuery automatically encodes)\n  // then grab the encoded contents back out.  The div never exists on the page.\n  return $('<div/>').text(value).html();\n}\n\n/** HTML decode using jQuery */\nexport function htmlDecode(value) {\n  return $('<div/>').html(value).text();\n}\n\n/** decode text into html entity\n * @param string text: input text\n * @param string text: output text\n */\nexport function htmlEntityDecode(input: string): string {\n  return input.replace(/&#(\\d+);/g, function (match, dec) {\n    return String.fromCharCode(dec);\n  });\n}\n\n/** decode text into html entity\n * @param string text: input text\n * @param string text: output text\n */\nexport function htmlEntityEncode(input: any): string {\n  const buf = [];\n  for (let i = input.length - 1; i >= 0; i--) {\n    buf.unshift(['&#', input[i].charCodeAt(), ';'].join(''));\n  }\n  return buf.join('');\n}\n\n/**\n * Compares two arrays to determine if all the items are equal\n * @param a first array\n * @param b second array to compare with a\n * @param [orderMatters=false] flag if the order matters, if not arrays will be sorted\n * @return boolean true if equal, else false\n */\nexport function arraysEqual(a: any[], b: any[], orderMatters: boolean = false): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (!a || !b) {\n    return false;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  if (!orderMatters) {\n    a.sort();\n    b.sort();\n  }\n\n  for (let i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Try casting an input of type Promise | Observable into a Promise type.\n * @param object which could be of type Promise or Observable\n * @param fromServiceName string representing the caller service name and will be used if we throw a casting problem error\n */\nexport function castToPromise<T>(input: Promise<T> | Observable<T>, fromServiceName: string = ''): Promise<T> {\n  let promise: any = input;\n\n  if (input instanceof Promise) {\n    // if it's already a Promise then return it\n    return input;\n  } else if (input instanceof Observable) {\n    promise = input.first().toPromise();\n    if (!(promise instanceof Promise)) {\n      promise = input.take(1).toPromise();\n    }\n    if (!(promise instanceof Promise)) {\n      throw new Error(\n        `Something went wrong, Angular-Slickgrid ${fromServiceName} is not able to convert the Observable into a Promise.\n        If you are using Angular HttpClient, you could try converting your http call to a Promise with \".toPromise()\"\n        for example::  this.http.post('graphql', { query: graphqlQuery }).toPromise()\n        `);\n    }\n  }\n\n  return promise;\n}\n\n/**\n * Uses the logic function to find an item in an array or returns the default\n * value provided (empty object by default)\n * @param any[] array the array to filter\n * @param function logic the logic to find the item\n * @param any [defaultVal={}] the default value to return\n * @return object the found object or deafult value\n */\nexport function findOrDefault(array: any[], logic: (item: any) => boolean, defaultVal = {}): any {\n  return array.find(logic) || defaultVal;\n}\n\n/**\n  * Take a number (or a string) and display it as a formatted decimal string with defined minimum and maximum decimals\n  * @param input\n  * @param minDecimal\n  * @param maxDecimal\n  */\nexport function decimalFormatted(input: number | string, minDecimal?: number, maxDecimal?: number) {\n  if (isNaN(+input)) {\n    return input;\n  }\n\n  const minDec = (minDecimal === undefined) ? 2 : minDecimal;\n  const maxDec = (maxDecimal === undefined) ? 2 : maxDecimal;\n  let amount = String(Math.round(+input * Math.pow(10, maxDec)) / Math.pow(10, maxDec));\n\n  if (amount.indexOf('.') < 0) {\n    amount += '.';\n  }\n  while ((amount.length - amount.indexOf('.')) <= minDec) {\n    amount += '0';\n  }\n  return amount;\n}\n\n/**\n * From a Date FieldType, return it's equivalent moment.js format\n * refer to moment.js for the format standard used: https://momentjs.com/docs/#/parsing/string-format/\n * @param fieldType\n */\nexport function mapMomentDateFormatWithFieldType(fieldType: FieldType): string {\n  let map: string;\n  switch (fieldType) {\n    case FieldType.dateTime:\n    case FieldType.dateTimeIso:\n      map = 'YYYY-MM-DD HH:mm:ss';\n      break;\n    case FieldType.dateTimeIsoAmPm:\n      map = 'YYYY-MM-DD hh:mm:ss a';\n      break;\n    case FieldType.dateTimeIsoAM_PM:\n      map = 'YYYY-MM-DD hh:mm:ss A';\n      break;\n    case FieldType.dateUs:\n      map = 'MM/DD/YYYY';\n      break;\n    case FieldType.dateUsShort:\n      map = 'M/D/YY';\n      break;\n    case FieldType.dateTimeUs:\n      map = 'MM/DD/YYYY HH:mm:ss';\n      break;\n    case FieldType.dateTimeUsAmPm:\n      map = 'MM/DD/YYYY hh:mm:ss a';\n      break;\n    case FieldType.dateTimeUsAM_PM:\n      map = 'MM/DD/YYYY hh:mm:ss A';\n      break;\n    case FieldType.dateTimeUsShort:\n      map = 'M/D/YY H:m:s';\n      break;\n    case FieldType.dateTimeUsShortAmPm:\n      map = 'M/D/YY h:m:s a';\n      break;\n    case FieldType.dateUtc:\n      map = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\n      break;\n    case FieldType.date:\n    case FieldType.dateIso:\n    default:\n      map = 'YYYY-MM-DD';\n      break;\n  }\n  return map;\n}\n\n/**\n * From a Date FieldType, return it's equivalent Flatpickr format\n * refer to Flatpickr for the format standard used: https://chmln.github.io/flatpickr/formatting/#date-formatting-tokens\n * also note that they seem very similar to PHP format (except for am/pm): http://php.net/manual/en/function.date.php\n * @param fieldType\n */\nexport function mapFlatpickrDateFormatWithFieldType(fieldType: FieldType): string {\n  /*\n    d: Day of the month, 2 digits with leading zeros\t01 to 31\n    D: A textual representation of a day\tMon through Sun\n    l: (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday\n    j: Day of the month without leading zeros\t1 to 31\n    J: Day of the month without leading zeros and ordinal suffix\t1st, 2nd, to 31st\n    w: Numeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday)\n    F: A full textual representation of a month\tJanuary through December\n    m: Numeric representation of a month, with leading zero\t01 through 12\n    n: Numeric representation of a month, without leading zeros\t1 through 12\n    M: A short textual representation of a month\tJan through Dec\n    U: The number of seconds since the Unix Epoch\t1413704993\n    y: A two digit representation of a year\t99 or 03\n    Y: A full numeric representation of a year, 4 digits\t1999 or 2003\n    H: Hours (24 hours)\t00 to 23\n    h: Hours\t1 to 12\n    i: Minutes\t00 to 59\n    S: Seconds, 2 digits\t00 to 59\n    s: Seconds\t0, 1 to 59\n    K: AM/PM\tAM or PM\n  */\n  let map: string;\n  switch (fieldType) {\n    case FieldType.dateTime:\n    case FieldType.dateTimeIso:\n      map = 'Y-m-d H:i:S';\n      break;\n    case FieldType.dateTimeIsoAmPm:\n      map = 'Y-m-d h:i:S K'; // there is no lowercase in Flatpickr :(\n      break;\n    case FieldType.dateTimeIsoAM_PM:\n      map = 'Y-m-d h:i:S K';\n      break;\n    case FieldType.dateUs:\n      map = 'm/d/Y';\n      break;\n    case FieldType.dateUsShort:\n      map = 'm/d/y';\n      break;\n    case FieldType.dateTimeUs:\n      map = 'm/d/Y H:i:S';\n      break;\n    case FieldType.dateTimeUsAmPm:\n      map = 'm/d/Y h:i:S K'; // there is no lowercase in Flatpickr :(\n      break;\n    case FieldType.dateTimeUsAM_PM:\n      map = 'm/d/Y h:i:s K';\n      break;\n    case FieldType.dateTimeUsShort:\n      map = 'm/d/y H:i:s';\n      break;\n    case FieldType.dateTimeUsShortAmPm:\n      map = 'm/d/y h:i:s K'; // there is no lowercase in Flatpickr :(\n      break;\n    case FieldType.dateUtc:\n      map = 'Z';\n      break;\n    case FieldType.date:\n    case FieldType.dateIso:\n    default:\n      map = 'Y-m-d';\n      break;\n  }\n  return map;\n}\n\n/**\n * Mapper for query operators (ex.: <= is \"le\", > is \"gt\")\n * @param string operator\n * @returns string map\n */\nexport function mapOperatorType(operator: string): OperatorType {\n  let map: OperatorType;\n\n  switch (operator) {\n    case '<':\n      map = OperatorType.lessThan;\n      break;\n    case '<=':\n      map = OperatorType.lessThanOrEqual;\n      break;\n    case '>':\n      map = OperatorType.greaterThan;\n      break;\n    case '>=':\n      map = OperatorType.greaterThanOrEqual;\n      break;\n    case '<>':\n    case '!=':\n    case 'neq':\n    case 'NEQ':\n      map = OperatorType.notEqual;\n      break;\n    case '*':\n    case '.*':\n    case 'startsWith':\n      map = OperatorType.startsWith;\n      break;\n    case '*.':\n    case 'endsWith':\n      map = OperatorType.endsWith;\n      break;\n    case '=':\n    case '==':\n    case 'eq':\n    case 'EQ':\n      map = OperatorType.equal;\n      break;\n    case 'in':\n    case 'IN':\n      map = OperatorType.in;\n      break;\n    case 'notIn':\n    case 'NIN':\n    case 'NOT_IN':\n      map = OperatorType.notIn;\n      break;\n    default:\n      map = OperatorType.contains;\n      break;\n  }\n\n  return map;\n}\n\n/**\n * Mapper for query operator by a Filter Type\n * For example a multiple-select typically uses 'IN' operator\n * @param operator\n * @returns string map\n */\nexport function mapOperatorByFieldType(fieldType: FieldType | string): OperatorType {\n  let map: OperatorType;\n\n  switch (fieldType) {\n    case FieldType.string:\n    case FieldType.unknown:\n      map = OperatorType.contains;\n      break;\n    case FieldType.float:\n    case FieldType.number:\n    case FieldType.date:\n    case FieldType.dateIso:\n    case FieldType.date:\n    case FieldType.dateUtc:\n    case FieldType.dateTime:\n    case FieldType.dateTimeIso:\n    case FieldType.dateTimeIsoAmPm:\n    case FieldType.dateTimeIsoAM_PM:\n    case FieldType.dateUs:\n    case FieldType.dateUsShort:\n    case FieldType.dateTimeUs:\n    case FieldType.dateTimeUsAmPm:\n    case FieldType.dateTimeUsAM_PM:\n    case FieldType.dateTimeUsShort:\n    case FieldType.dateTimeUsShortAmPm:\n    case FieldType.dateTimeUsShortAM_PM:\n    default:\n      map = OperatorType.equal;\n      break;\n  }\n\n  return map;\n}\n\n/**\n * Parse a date passed as a string and return a Date object (if valid)\n * @param inputDateString\n * @returns string date formatted\n */\nexport function parseUtcDate(inputDateString: string, useUtc: boolean): string | null {\n  let date = null;\n\n  if (/^[0-9\\-\\/]*$/.test(inputDateString)) {\n    // get the UTC datetime with moment.js but we need to decode the value so that it's valid text\n    const dateString = decodeURIComponent(inputDateString);\n    const dateMoment = moment(new Date(dateString));\n    if (dateMoment.isValid() && dateMoment.year().toString().length === 4) {\n      date = (useUtc) ? dateMoment.utc().format() : dateMoment.format();\n    }\n  }\n\n  return date;\n}\n\n/**\n * Sanitize, return only the text without HTML tags\n * @input htmlString\n * @return text\n */\nexport function sanitizeHtmlToText(htmlString: string) {\n  const temp = document.createElement('div');\n  temp.innerHTML = htmlString;\n  return temp.textContent || temp.innerText;\n}\n\n/**\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\n * @param string\n * @returns string\n */\nexport function titleCase(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Converts a string to camel case\n * @param str the string to convert\n * @return the string in camel case\n */\nexport function toCamelCase(str: string): string {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w|[\\s+\\-_\\/])/g, (match: string, offset: number) => {\n    // remove white space or hypens or underscores\n    if (/[\\s+\\-_\\/]/.test(match)) {\n      return '';\n    }\n\n    return offset === 0 ? match.toLowerCase() : match.toUpperCase();\n  });\n}\n\n/**\n * Converts a string to kebab (hypen) case\n * @param str the string to convert\n * @return the string in kebab case\n */\nexport function toKebabCase(str: string): string {\n  return toCamelCase(str).replace(/([A-Z])/g, '-$1').toLowerCase();\n}\n",
    "import * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport function compareDates(value1, value2, format, sortDirection, strict?: boolean) {\r\n  let diff = 0;\r\n\r\n  if (value1 === null || value1 === '' || !moment(value1, format, strict).isValid()) {\r\n    diff = -1;\r\n  } else if (value2 === null || value2 === '' || !moment(value2, format, strict).isValid()) {\r\n    diff = 1;\r\n  } else {\r\n    const date1 = moment(value1, format, strict);\r\n    const date2 = moment(value2, format, strict);\r\n    diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);\r\n  }\r\n\r\n  return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));\r\n}\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nimport { compareDates } from './compareDateUtility';\r\n\r\nexport const dateSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, moment.ISO_8601, sortDirection);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const numericSorter: Sorter = (value1, value2, sortDirection) => {\r\n  const x = (isNaN(value1) || value1 === '' || value1 === null) ? -99e+10 : parseFloat(value1);\r\n  const y = (isNaN(value2) || value2 === '' || value2 === null) ? -99e+10 : parseFloat(value2);\r\n  return sortDirection * (x === y ? 0 : (x > y ? 1 : -1));\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const stringSorter: Sorter = (value1, value2, sortDirection) => {\r\n  let position;\r\n  if (value1 === null) {\r\n    position = -1;\r\n  } else if (value2 === null) {\r\n    position = 1;\r\n  } else if (value1 === value2) {\r\n    position = 0;\r\n  } else if (sortDirection) {\r\n    position = value1 < value2 ? -1 : 1;\r\n  } else if (!sortDirection) {\r\n    position = value1 < value2 ? 1 : -1;\r\n  }\r\n  return sortDirection * position;\r\n};\r\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\nimport { dateUsShortSorter } from './dateUsShortSorter';\nimport { dateSorter } from './dateSorter';\nimport { dateIsoSorter } from './dateIsoSorter';\nimport { dateUsSorter } from './dateUsSorter';\nimport { numericSorter } from './numericSorter';\nimport { stringSorter } from './stringSorter';\n\nexport const Sorters = {\n  date: dateSorter,\n  dateIso: dateIsoSorter,\n  dateUs: dateUsSorter,\n  dateUsShort: dateUsShortSorter,\n  numeric: numericSorter,\n  string: stringSorter\n};\n",
    "import { FieldType } from './../models/index';\r\nimport { Sorters } from './index';\r\n\r\nexport function sortByFieldType(value1: any, value2: any, fieldType: FieldType, sortDirection: number) {\r\n  let sortResult = 0;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.number:\r\n      sortResult = Sorters.numeric(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.date:\r\n      sortResult = Sorters.date(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateIso:\r\n      sortResult = Sorters.dateIso(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUs:\r\n      sortResult = Sorters.dateUs(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      sortResult = Sorters.dateUsShort(value1, value2, sortDirection);\r\n      break;\r\n    default:\r\n      sortResult = Sorters.string(value1, value2, sortDirection);\r\n      break;\r\n  }\r\n\r\n  return sortResult;\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  CollectionFilterBy,\r\n  CollectionSortBy,\r\n  FieldType,\r\n  OperatorType,\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\n\r\n@Injectable()\r\nexport class CollectionService {\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /**\r\n   * Filter items from a collection\r\n   * @param collection\r\n   * @param filterBy\r\n   */\r\n  filterCollection(collection: any[], filterBy: CollectionFilterBy): any[] {\r\n    let filteredCollection: any[] = [];\r\n\r\n    if (filterBy) {\r\n      const property = filterBy.property || '';\r\n      const operator = filterBy.operator || OperatorType.equal;\r\n      // just check for undefined since the filter value could be null, 0, '', false etc\r\n      const value = typeof filterBy.value === 'undefined' ? '' : filterBy.value;\r\n\r\n      switch (operator) {\r\n        case OperatorType.equal:\r\n          filteredCollection = collection.filter((item) => item[property] === value);\r\n          break;\r\n        case OperatorType.in:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) !== -1);\r\n          break;\r\n        case OperatorType.notIn:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) === -1);\r\n          break;\r\n        case OperatorType.contains:\r\n          filteredCollection = collection.filter((item) => value.indexOf(item[property]) !== -1);\r\n          break;\r\n        default:\r\n          filteredCollection = collection.filter((item) => item[property] !== value);\r\n      }\r\n    }\r\n\r\n    return filteredCollection;\r\n  }\r\n\r\n  /**\r\n   * Sort items in a collection\r\n   * @param collection\r\n   * @param sortBy\r\n   * @param enableTranslateLabel\r\n   */\r\n  sortCollection(collection: any[], sortBy: CollectionSortBy, enableTranslateLabel?: boolean): any[] {\r\n    let sortedCollection: any[] = [];\r\n\r\n    if (sortBy) {\r\n      const property = sortBy.property || '';\r\n      const sortDirection = sortBy.hasOwnProperty('sortDesc') ? (sortBy.sortDesc ? -1 : 1) : 1;\r\n      const fieldType = sortBy.fieldType || FieldType.string;\r\n\r\n      sortedCollection = collection.sort((dataRow1: any, dataRow2: any) => {\r\n        const value1 = (enableTranslateLabel) ? this.translate.instant(dataRow1[property] || ' ') : dataRow1[property];\r\n        const value2 = (enableTranslateLabel) ? this.translate.instant(dataRow2[property] || ' ') : dataRow2[property];\r\n        const result = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n        return result;\r\n      });\r\n    }\r\n\r\n    return sortedCollection;\r\n  }\r\n}\r\n",
    "import { FilterCondition, FilterConditionOption } from './../models/index';\r\n\r\nfunction parseBoolean(str: number | string) {\r\n  return /(true|1)/i.test(str + '');\r\n}\r\n\r\nexport const booleanFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  return parseBoolean(options.cellValue) === parseBoolean(searchTerm);\r\n};\r\n",
    "export const testFilterCondition = (operator: string, value1: any, value2: any): boolean => {\n  switch (operator) {\n    case '<':\n    case 'LT': return (value1 < value2);\n    case '<=':\n    case 'LE': return (value1 <= value2);\n    case '>':\n    case 'GT': return (value1 > value2);\n    case '>=':\n    case 'GE': return (value1 >= value2);\n    case '!=':\n    case '<>':\n    case 'NE': return (value1 !== value2);\n    case '=':\n    case '==':\n    case 'EQ': return (value1 === value2);\n    case 'IN': return ((value2 && value2.includes) ? (value2.includes(value1)) : false);\n    case 'NIN':\n    case 'NOT_IN':\n      return ((value2 && value2.includes) ? (!value2.includes(value1)) : false);\n    case 'IN_CONTAINS':\n      if (value2 && Array.isArray(value2) && value2.findIndex) {\n        return ((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);\n      }\n      return false;\n    case 'NIN_CONTAINS':\n    case 'NOT_IN_CONTAINS':\n    if (value2 && Array.isArray(value2) && value2.findIndex) {\n      return !((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);\n    }\n    return false;\n}\nreturn true;\n};\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  const filterSearchType = options.filterSearchType || FieldType.dateIso;\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(filterSearchType);\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerm, searchDateFormat, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue);\r\n  const dateSearch = moment(searchTerm);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateUtcFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerms = Array.isArray(options.searchTerms) && options.searchTerms[0] || [];\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(options.filterSearchType || options.fieldType);\r\n  if (!moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerms[0], searchDateFormat, true).isValid()) {\r\n    return true;\r\n  }\r\n  const dateCell = moment(options.cellValue, moment.ISO_8601, true);\r\n  const dateSearch = moment(searchTerms[0], searchDateFormat, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const collectionSearchFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // multiple-select will always return text, so we should make our cell values text as well\r\n  const cellValue = options.cellValue + '';\r\n\r\n  return testFilterCondition(options.operator || 'IN', cellValue, options.searchTerms || []);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const numberFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const cellValue = parseFloat(options.cellValue);\r\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || 0;\r\n  if (typeof searchTerm === 'string') {\r\n    searchTerm = parseFloat(searchTerm);\r\n  }\r\n\r\n  if (!searchTerm && (!options.operator || options.operator === '')) {\r\n    return true;\r\n  }\r\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption, OperatorType } from '../models/index';\nimport { testFilterCondition } from './filterUtilities';\n\nexport const stringFilterCondition: FilterCondition = (options: FilterConditionOption) => {\n  // make sure the cell value is a string by casting it when possible\n  options.cellValue = (options.cellValue === undefined || options.cellValue === null) ? '' : options.cellValue.toString();\n\n  // make both the cell value and search value lower for case insensitive comparison\n  const cellValue = options.cellValue.toLowerCase();\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || '';\n  if (typeof searchTerm === 'string') {\n    searchTerm = searchTerm.toLowerCase();\n  }\n\n  if (options.operator === '*' || options.operator === OperatorType.endsWith) {\n    return cellValue.endsWith(searchTerm);\n  } else if ((options.operator === '' && options.cellValueLastChar === '*') || options.operator === OperatorType.startsWith) {\n    return cellValue.startsWith(searchTerm);\n  } else if (options.operator === '') {\n    return cellValue.includes(searchTerm);\n  }\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\n};\n",
    "import { booleanFilterCondition } from './booleanFilterCondition';\nimport { dateFilterCondition } from './dateFilterCondition';\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\nimport { FilterConditionOption } from './../models/filterConditionOption.interface';\nimport { FilterCondition } from '../models/filterCondition.interface';\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\nimport { numberFilterCondition } from './numberFilterCondition';\nimport { stringFilterCondition } from './stringFilterCondition';\nimport { FieldType } from '../models/index';\n\nexport const executeMappedCondition: FilterCondition = (options: FilterConditionOption) => {\n  // when using a multi-select ('IN' operator) we will not use the field type but instead go directly with a collection search\n  const operator = options.operator && options.operator.toUpperCase();\n  if (options && options.operator && (operator === 'IN' || operator === 'NIN' || operator === 'IN_CONTAINS' || operator === 'NIN_CONTAINS')) {\n    return collectionSearchFilterCondition(options);\n  }\n\n  // execute the mapped type, or default to String condition check\n  switch (options.fieldType) {\n    case FieldType.boolean:\n      return booleanFilterCondition(options);\n    case FieldType.date:\n      return dateFilterCondition(options);\n    case FieldType.dateUtc:\n      return dateUtcFilterCondition(options);\n    case FieldType.dateIso:\n      return dateIsoFilterCondition(options);\n    case FieldType.dateUs:\n    case FieldType.dateTimeUs:\n      return dateUsFilterCondition(options);\n    case FieldType.dateUsShort:\n    case FieldType.dateTimeUsShort:\n      return dateUsShortFilterCondition(options);\n    case FieldType.number:\n      return numberFilterCondition(options);\n    case FieldType.string:\n    default:\n      return stringFilterCondition(options);\n  }\n};\n",
    "import { FilterConditionOption } from './../models/filterConditionOption.interface';\r\nimport { booleanFilterCondition } from './booleanFilterCondition';\r\nimport { dateFilterCondition } from './dateFilterCondition';\r\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\r\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\r\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\r\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\r\nimport { executeMappedCondition } from './executeMappedCondition';\r\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { numberFilterCondition } from './numberFilterCondition';\r\nimport { stringFilterCondition } from './stringFilterCondition';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const FilterConditions = {\r\n  executeMappedCondition,\r\n  booleanFilter: booleanFilterCondition,\r\n  collectionSearchFilter: collectionSearchFilterCondition,\r\n  dateFilter: dateFilterCondition,\r\n  dateIsoFilter: dateIsoFilterCondition,\r\n  dateUtcFilter: dateUtcFilterCondition,\r\n  dateUsFilter: dateUsFilterCondition,\r\n  dateUsShortFilter: dateUsShortFilterCondition,\r\n  numberFilter: numberFilterCondition,\r\n  stringFilter: stringFilterCondition,\r\n  testFilter: testFilterCondition\r\n};\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { mapFlatpickrDateFormatWithFieldType } from '../services/utilities';\r\nimport { Column, Filter, FilterArguments, FilterCallback, FieldType, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\r\n\r\n// importing Flatpickr works better with a 'require'\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class CompoundDateFilter implements Filter {\r\n  private _clearFilterTriggered = false;\r\n  private $filterElm: any;\r\n  private $filterInputElm: any;\r\n  private $selectOperatorElm: any;\r\n  private _currentValue: string;\r\n  private _operator: OperatorType | OperatorString;\r\n  flatInstance: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  set operator(op: OperatorType | OperatorString) {\r\n    this._operator = op;\r\n  }\r\n  get operator(): OperatorType | OperatorString {\r\n    return this._operator || OperatorType.empty;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (args) {\r\n      this.grid = args.grid;\r\n      this.callback = args.callback;\r\n      this.columnDef = args.columnDef;\r\n      this.operator = args.operator || '';\r\n      this.searchTerms = args.searchTerms || [];\r\n\r\n      // date input can only have 1 search term, so we will use the 1st array index if it exist\r\n      const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n      // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n      // and initialize it if searchTerm is filled\r\n      this.$filterElm = this.createDomElement(searchTerm);\r\n\r\n      // step 3, subscribe to the keyup event and run the callback when that happens\r\n      // also add/remove \"filled\" class for styling purposes\r\n      this.$filterInputElm.keyup((e: any) => {\r\n        this.onTriggerEvent(e);\r\n      });\r\n      this.$selectOperatorElm.change((e: any) => {\r\n        this.onTriggerEvent(e);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.flatInstance && this.$selectOperatorElm) {\r\n      this._clearFilterTriggered = true;\r\n      this.searchTerms = [];\r\n      this.$selectOperatorElm.val(0);\r\n      this.flatInstance.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm[]) {\r\n    if (values && Array.isArray(values)) {\r\n      this.flatInstance.setDate(values[0]);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n  private buildDatePickerInput(searchTerm?: SearchTerm) {\r\n    const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\r\n    const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnDef.type || FieldType.dateUtc);\r\n    let currentLocale = this.translate.currentLang || 'en';\r\n    if (currentLocale.length > 2) {\r\n      currentLocale = currentLocale.substring(0, 2);\r\n    }\r\n\r\n    const pickerOptions: any = {\r\n      defaultDate: searchTerm || '',\r\n      altInput: true,\r\n      altFormat: outputFormat,\r\n      dateFormat: inputFormat,\r\n      wrap: true,\r\n      closeOnSelect: true,\r\n      locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n      onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n        this._currentValue = dateStr;\r\n\r\n        // when using the time picker, we can simulate a keyup event to avoid multiple backend request\r\n        // since backend request are only executed after user start typing, changing the time should be treated the same way\r\n        if (pickerOptions.enableTime) {\r\n          this.onTriggerEvent(new CustomEvent('keyup'));\r\n        } else {\r\n          this.onTriggerEvent(undefined);\r\n        }\r\n      }\r\n    };\r\n\r\n    // add the time picker when format is UTC (Z) or has the 'h' (meaning hours)\r\n    if (outputFormat && (outputFormat === 'Z' || outputFormat.toLowerCase().includes('h'))) {\r\n      pickerOptions.enableTime = true;\r\n    }\r\n\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    const $filterInputElm: any = $(`<div class=\"flatpickr\"><input type=\"text\" class=\"form-control\" data-input placeholder=\"${placeholder}\"></div>`);\r\n    this.flatInstance = ($filterInputElm[0] && typeof $filterInputElm[0].flatpickr === 'function') ? $filterInputElm[0].flatpickr(pickerOptions) : null;\r\n    return $filterInputElm;\r\n  }\r\n\r\n  private buildSelectOperatorHtmlString() {\r\n    const optionValues = this.getOptionValues();\r\n    let optionValueString = '';\r\n    optionValues.forEach((option) => {\r\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\r\n    });\r\n\r\n    return `<select class=\"form-control\">${optionValueString}</select>`;\r\n  }\r\n\r\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\r\n    return [\r\n      { operator: '' as OperatorString, description: '' },\r\n      { operator: '=' as OperatorString, description: '' },\r\n      { operator: '<' as OperatorString, description: '' },\r\n      { operator: '<=' as OperatorString, description: '' },\r\n      { operator: '>' as OperatorString, description: '' },\r\n      { operator: '>=' as OperatorString, description: '' },\r\n      { operator: '<>' as OperatorString, description: '' }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  private createDomElement(searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\r\n    this.$filterInputElm = this.buildDatePickerInput(searchTerm);\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\r\n    const $containerInputGroup = $(`<div class=\"input-group flatpickr\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon input-group-prepend operator\"></div>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon input-group-prepend operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <div class=flatpickr>\r\n          <input type=\"text\" class=\"form-control\" data-input>\r\n        </div>\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    $containerInputGroup.append($operatorInputGroupAddon);\r\n    $containerInputGroup.append(this.$filterInputElm);\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append($containerInputGroup);\r\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\r\n    this.$filterInputElm.data('columnId', this.columnDef.id);\r\n\r\n    if (this.operator) {\r\n      this.$selectOperatorElm.val(this.operator);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterContainerElm.addClass('filled');\r\n      this._currentValue = searchTerm as string;\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  private loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  private onTriggerEvent(e: Event | undefined) {\r\n    if (this._clearFilterTriggered) {\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\r\n      this._clearFilterTriggered = false; // reset flag for next use\r\n    } else {\r\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\r\n      (this._currentValue) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (this._currentValue ? [this._currentValue] : null), operator: selectedOperator || '' });\r\n    }\r\n  }\r\n\r\n  private hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  private show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n}\r\n",
    "import { Inject } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { FieldType } from './../models/index';\r\nimport { Column, Filter, FilterArguments, FilterCallback, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class CompoundInputFilter implements Filter {\r\n  private _clearFilterTriggered = false;\r\n  private $filterElm: any;\r\n  private $filterInputElm: any;\r\n  private $selectOperatorElm: any;\r\n  private _operator: OperatorType | OperatorString;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  set operator(op: OperatorType | OperatorString) {\r\n    this._operator = op;\r\n  }\r\n  get operator(): OperatorType | OperatorString {\r\n    return this._operator || OperatorType.empty;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.operator = args.operator;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n    // and initialize it if searchTerms is filled\r\n    this.$filterElm = this.createDomElement(searchTerm);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterInputElm.keyup((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n    this.$selectOperatorElm.change((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.$filterElm && this.$selectOperatorElm) {\r\n      this._clearFilterTriggered = true;\r\n      this.searchTerms = [];\r\n      this.$selectOperatorElm.val(0);\r\n      this.$filterInputElm.val('');\r\n      this.onTriggerEvent(null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n      this.$selectOperatorElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm[]) {\r\n    if (values && Array.isArray(values)) {\r\n      this.$filterElm.val(values[0]);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  private buildInputHtmlString() {\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    return `<input class=\"form-control\" type=\"text\" placeholder=\"${placeholder}\" />`;\r\n  }\r\n\r\n  private buildSelectOperatorHtmlString() {\r\n    const optionValues = this.getOptionValues();\r\n    let optionValueString = '';\r\n    optionValues.forEach((option) => {\r\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\r\n    });\r\n\r\n    return `<select class=\"form-control\">${optionValueString}</select>`;\r\n  }\r\n\r\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\r\n    const type = (this.columnDef.type && this.columnDef.type) ? this.columnDef.type : FieldType.string;\r\n    let optionValues = [];\r\n\r\n    switch (type) {\r\n      case FieldType.string:\r\n        optionValues = [\r\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\r\n          { operator: '=' as OperatorString, description: this.translate.instant('EQUALS') },\r\n          { operator: 'a*' as OperatorString, description: this.translate.instant('STARTS_WITH') },\r\n          { operator: '*z' as OperatorString, description: this.translate.instant('ENDS_WITH') },\r\n          /*\r\n          { operator: 'IN' as OperatorString, description: this.translate.instant('IN_COLLECTION_SEPERATED_BY_COMMA') },\r\n          { operator: 'NIN' as OperatorString, description: this.translate.instant('NOT_IN_COLLECTION_SEPERATED_BY_COMMA') },\r\n          */\r\n        ];\r\n        break;\r\n      default:\r\n        optionValues = [\r\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\r\n          { operator: '=' as OperatorString, description: '' },\r\n          { operator: '<' as OperatorString, description: '' },\r\n          { operator: '<=' as OperatorString, description: '' },\r\n          { operator: '>' as OperatorString, description: '' },\r\n          { operator: '>=' as OperatorString, description: '' },\r\n          { operator: '<>' as OperatorString, description: '' }];\r\n        break;\r\n    }\r\n\r\n    return optionValues;\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  private createDomElement(searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\r\n    this.$filterInputElm = $(this.buildInputHtmlString());\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\r\n    const $containerInputGroup = $(`<div class=\"input-group\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon input-group-prepend operator\"></div>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon input-group-prepend operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <input class=\"form-control\" type=\"text\" />\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    $containerInputGroup.append($operatorInputGroupAddon);\r\n    $containerInputGroup.append(this.$filterInputElm);\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append($containerInputGroup);\r\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\r\n\r\n    this.$filterInputElm.val(searchTerm);\r\n    this.$filterInputElm.data('columnId', this.columnDef.id);\r\n\r\n    if (this.operator) {\r\n      this.$selectOperatorElm.val(this.operator);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterContainerElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  private onTriggerEvent(e: Event | undefined) {\r\n    if (this._clearFilterTriggered) {\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\r\n      this._clearFilterTriggered = false; // reset flag for next use\r\n    } else {\r\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\r\n      const value = this.$filterInputElm.val();\r\n      (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (value ? [value] : null), operator: selectedOperator || '' });\r\n    }\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport {\r\n  Column,\r\n  ColumnFilter,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  OperatorString,\r\n  OperatorType,\r\n  SearchTerm\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nconst DEFAULT_MIN_VALUE = 0;\r\nconst DEFAULT_MAX_VALUE = 100;\r\nconst DEFAULT_STEP = 1;\r\n\r\nexport class CompoundSliderFilter implements Filter {\r\n  private _clearFilterTriggered = false;\r\n  private _elementRangeInputId: string;\r\n  private _elementRangeOutputId: string;\r\n  private _operator: OperatorType | OperatorString;\r\n  private $containerInputGroupElm: any;\r\n  private $filterElm: any;\r\n  private $filterInputElm: any;\r\n  private $selectOperatorElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor() { }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Filter Generic Params */\r\n  private get filterParams(): any {\r\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};\r\n  }\r\n\r\n  /** Getter for the `filter` properties */\r\n  private get filterProperties(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  set operator(op: OperatorType | OperatorString) {\r\n    this._operator = op;\r\n  }\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return this._operator || OperatorType.empty;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (args) {\r\n      this.grid = args.grid;\r\n      this.callback = args.callback;\r\n      this.columnDef = args.columnDef;\r\n      this.operator = args.operator || '';\r\n      this.searchTerms = args.searchTerms || [];\r\n\r\n      // define the input & slider number IDs\r\n      this._elementRangeInputId = `rangeInput_${this.columnDef.field}`;\r\n      this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}`;\r\n\r\n      // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n      const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n      // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n      // and initialize it if searchTerm is filled\r\n      this.$filterElm = this.createDomElement(searchTerm);\r\n\r\n      // step 3, subscribe to the keyup event and run the callback when that happens\r\n      // also add/remove \"filled\" class for styling purposes\r\n      this.$filterInputElm.change((e: any) => {\r\n        this.onTriggerEvent(e);\r\n      });\r\n      this.$selectOperatorElm.change((e: any) => {\r\n        this.onTriggerEvent(e);\r\n      });\r\n\r\n      // if user chose to display the slider number on the right side, then update it every time it changes\r\n      // we need to use both \"input\" and \"change\" event to be all cross-browser\r\n      if (!this.filterParams.hideSliderNumber) {\r\n        this.$filterInputElm.on('input change', (e: { target: HTMLInputElement }) => {\r\n          const value = e && e.target && e.target.value || '';\r\n          if (value) {\r\n            document.getElementById(this._elementRangeOutputId).innerHTML = value;\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.$filterElm && this.$selectOperatorElm) {\r\n      this._clearFilterTriggered = true;\r\n      this.searchTerms = [];\r\n      const clearedValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;\r\n      this.$selectOperatorElm.val(0);\r\n      this.$filterInputElm.val(clearedValue);\r\n      if (!this.filterParams.hideSliderNumber) {\r\n        this.$containerInputGroupElm.children('div.input-group-addon.input-group-append').children().last().html(clearedValue);\r\n      }\r\n      this.onTriggerEvent(undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm[]) {\r\n    if (values && Array.isArray(values)) {\r\n      this.$filterInputElm.val(values[0]);\r\n      this.$containerInputGroupElm.children('div.input-group-addon.input-group-append').children().last().html(values[0]);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /** Build HTML Template for the input range (slider) */\r\n  private buildTemplateHtmlString() {\r\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\r\n    const maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;\r\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\r\n    const step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;\r\n\r\n    return `<input type=\"range\" id=\"${this._elementRangeInputId}\"\r\n              name=\"${this._elementRangeInputId}\"\r\n              defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\r\n              class=\"form-control slider-filter-input range compound-slider\" />`;\r\n  }\r\n\r\n  /** Build HTML Template for the text (number) that is shown appended to the slider */\r\n  private buildTemplateSliderTextHtmlString() {\r\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\r\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\r\n\r\n    return `<div class=\"input-group-addon input-group-append slider-value\"><span class=\"input-group-text\" id=\"${this._elementRangeOutputId}\">${defaultValue}</span></div>`;\r\n  }\r\n\r\n  /** Build HTML Template select dropdown (operator) */\r\n  private buildSelectOperatorHtmlString() {\r\n    const optionValues = this.getOptionValues();\r\n    let optionValueString = '';\r\n    optionValues.forEach((option) => {\r\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\r\n    });\r\n\r\n    return `<select class=\"form-control\">${optionValueString}</select>`;\r\n  }\r\n\r\n  /** Get the available operator option values */\r\n  private getOptionValues(): { operator: OperatorString, description: string }[] {\r\n    return [\r\n      { operator: '' as OperatorString, description: '' },\r\n      { operator: '=' as OperatorString, description: '' },\r\n      { operator: '<' as OperatorString, description: '' },\r\n      { operator: '<=' as OperatorString, description: '' },\r\n      { operator: '>' as OperatorString, description: '' },\r\n      { operator: '>=' as OperatorString, description: '' },\r\n      { operator: '<>' as OperatorString, description: '' }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  private createDomElement(searchTerm?: SearchTerm) {\r\n    const searchTermInput = (searchTerm || '0') as string;\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\r\n    this.$filterInputElm = $(this.buildTemplateHtmlString());\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\r\n    this.$containerInputGroupElm = $(`<div class=\"input-group search-filter\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<span class=\"input-group-addon input-group-prepend operator\"></span>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon input-group-prepend operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <input class=\"form-control\" type=\"text\" />\r\n        <div class=\"input-group-addon input-group-prepend\" id=\"rangeOuput_percentComplete\"><span class=\"input-group-text\">0</span></div>\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    this.$containerInputGroupElm.append($operatorInputGroupAddon);\r\n    this.$containerInputGroupElm.append(this.$filterInputElm);\r\n    if (!this.filterParams.hideSliderNumber) {\r\n      const $sliderTextInputAppendAddon = $(this.buildTemplateSliderTextHtmlString());\r\n      $sliderTextInputAppendAddon.children().html(searchTermInput);\r\n      this.$containerInputGroupElm.append($sliderTextInputAppendAddon);\r\n    }\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append(this.$containerInputGroupElm);\r\n    $filterContainerElm.attr('id', `filter-${this.columnDef.field}`);\r\n\r\n    this.$filterInputElm.val(searchTermInput);\r\n    this.$filterInputElm.data('columnId', this.columnDef.field);\r\n\r\n    if (this.operator) {\r\n      this.$selectOperatorElm.val(this.operator);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterContainerElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  private onTriggerEvent(e: Event | undefined) {\r\n    if (this._clearFilterTriggered) {\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\r\n      this._clearFilterTriggered = false; // reset flag for next use\r\n    } else {\r\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\r\n      const value = this.$filterInputElm.val();\r\n      (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, searchTerms: (value ? [value] : null), operator: selectedOperator || '' });\r\n    }\r\n  }\r\n}\r\n",
    "import {\r\n  Column,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class InputFilter implements Filter {\r\n  private _clearFilterTriggered = false;\r\n  private $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor() {}\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.operator || '';\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.keyup((e: any) => {\r\n      const value = e && e.target && e.target.value || '';\r\n      if (this._clearFilterTriggered) {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\r\n        this._clearFilterTriggered = false; // reset flag for next use\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.$filterElm) {\r\n      this._clearFilterTriggered = true;\r\n      this.searchTerms = [];\r\n      this.$filterElm.val('');\r\n      this.$filterElm.trigger('keyup');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString() {\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    return `<input type=\"text\" class=\"form-control search-filter\" placeholder=\"${placeholder}\">`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n\r\n    $filterElm.val(searchTerm);\r\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  MultipleSelectOption,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n  SelectOption,\n} from './../models/index';\nimport { CollectionService } from './../services/collection.service';\nimport { htmlEncode } from '../services/utilities';\nimport * as sanitizeHtml_ from 'sanitize-html';\nconst sanitizeHtml = sanitizeHtml_; // patch to fix rollup to work\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class MultipleSelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n  defaultOptions: MultipleSelectOption;\n  isFilled = false;\n  labelName: string;\n  labelPrefixName: string;\n  labelSuffixName: string;\n  valueName: string;\n  enableTranslateLabel = false;\n\n  /**\n   * Initialize the Filter\n   */\n  constructor(private translate: TranslateService, private collectionService: CollectionService) {\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,  // input search term on top of the select option list\n      maxHeight: 200,\n      okButton: true,\n      addTitle: true, // show tooltip of all selected items while hovering the filter\n      countSelected: this.translate.instant('X_OF_Y_SELECTED'),\n      allSelected: this.translate.instant('ALL_SELECTED'),\n      selectAllText: this.translate.instant('SELECT_ALL'),\n      selectAllDelimiter: ['', ''], // remove default square brackets of default text \"[Select All]\" => \"Select All\"\n      textTemplate: ($elm) => {\n        // render HTML code or not, by default it is sanitized and won't be rendered\n        const isRenderHtmlEnabled = this.columnDef && this.columnDef.filter && this.columnDef.filter.enableRenderHtml || false;\n        return isRenderHtmlEnabled ? $elm.text() : $elm.html();\n      },\n      onClose: () => {\n        // we will subscribe to the onClose event for triggering our callback\n        // also add/remove \"filled\" class for styling purposes\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\n          this.isFilled = true;\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\n        } else {\n          this.isFilled = false;\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\n        }\n\n        this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: selectedItems });\n      }\n    };\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.in;\n  }\n\n  /**\n   * Initialize the filter template\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms || [];\n\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    this.labelPrefixName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.labelPrefix : 'labelPrefix';\n    this.labelSuffixName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.labelSuffix : 'labelSuffix';\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let newCollection = this.columnDef.filter.collection || [];\n\n    // user might want to filter certain items of the collection\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\n      const filterBy = this.columnDef.filter.collectionFilterBy;\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\n      const sortBy = this.columnDef.filter.collectionSortBy;\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString(newCollection);\n\n    // step 2, create the DOM Element of the filter & pre-load search terms\n    // also subscribe to the onClose event\n    this.createDomElement(filterTemplate);\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\n      this.$filterElm.multipleSelect('setSelects', []);\n      this.$filterElm.removeClass('filled');\n      this.searchTerms = [];\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off().remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm[]) {\n    if (values) {\n      this.$filterElm.multipleSelect('setSelects', values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString(optionCollection: any[]) {\n    let options = '';\n    const isAddingSpaceBetweenLabels = this.columnDef && this.columnDef.filter && this.columnDef.filter.customStructure && this.columnDef.filter.customStructure.addSpaceBetweenLabels || false;\n    const isRenderHtmlEnabled = this.columnDef && this.columnDef.filter && this.columnDef.filter.enableRenderHtml || false;\n    const sanitizedOptions = this.gridOptions && this.gridOptions.sanitizeHtmlOptions || {};\n\n    optionCollection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.multipleSelect, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const selected = (this.findValueInSearchTerms(option[this.valueName]) >= 0) ? 'selected' : '';\n      const labelText = ((option.labelKey || this.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n      const prefixText = option[this.labelPrefixName] || '';\n      const suffixText = option[this.labelSuffixName] || '';\n      let optionText = isAddingSpaceBetweenLabels ? `${prefixText} ${labelText} ${suffixText}` : (prefixText + labelText + suffixText);\n\n      // if user specifically wants to render html text, he needs to opt-in else it will stripped out by default\n      // also, the 3rd party lib will saninitze any html code unless it's encoded, so we'll do that\n      if (isRenderHtmlEnabled) {\n        // sanitize any unauthorized html tags like script and others\n        // for the remaining allowed tags we'll permit all attributes\n        const sanitizedText = sanitizeHtml(optionText, sanitizedOptions);\n        optionText = htmlEncode(sanitizedText);\n      }\n\n      // html text of each select option\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${optionText}</option>`;\n\n      // if there's a search term, we will add the \"filled\" class for styling purposes\n      if (selected) {\n        this.isFilled = true;\n      }\n    });\n\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * Subscribe to the onClose event and run the callback when that happens\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    this.$filterElm = $(filterTemplate);\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\n    }\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterElm.data('columnId', this.columnDef.id);\n\n    // if there's a search term, we will add the \"filled\" class for styling purposes\n    if (this.isFilled) {\n      this.$filterElm.addClass('filled');\n    }\n\n    // append the new DOM element to the header row\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\n      this.$filterElm.appendTo($headerElm);\n    }\n\n    // merge options & attach multiSelect\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\n    this.$filterElm = this.$filterElm.multipleSelect(options);\n  }\n\n  private findValueInSearchTerms(value: number | string): number {\n    if (this.searchTerms && Array.isArray(this.searchTerms)) {\n      for (let i = 0; i < this.searchTerms.length; i++) {\n        if (this.searchTerms[i] && this.searchTerms[i] === value) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Column,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n} from './../models/index';\r\nimport { Injectable } from '@angular/core';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class SelectFilter implements Filter {\r\n  private _clearFilterTriggered = false;\r\n  $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\r\n      searchTerm = `${searchTerm}`;\r\n    }\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the change event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.change((e: any) => {\r\n      const value = e && e.target && e.target.value || '';\r\n      if (this._clearFilterTriggered) {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\r\n        this._clearFilterTriggered = false; // reset flag for next use\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter values\r\n   */\r\n  clear() {\r\n    if (this.$filterElm) {\r\n      this._clearFilterTriggered = true;\r\n      this.searchTerms = [];\r\n      this.$filterElm.val('');\r\n      this.$filterElm.trigger('change');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm | SearchTerm[]) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  private buildTemplateHtmlString() {\r\n    if (!this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the Select Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.select, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\r\n    }\r\n\r\n    const optionCollection = this.columnDef.filter.collection || [];\r\n    const labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\r\n    const valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\r\n\r\n    let options = '';\r\n    optionCollection.forEach((option: any) => {\r\n      if (!option || (option[labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.select, collection: [ { value: '1', label: 'One' } ]')`);\r\n      }\r\n      const labelKey = option.labelKey || option[labelName];\r\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\r\n      options += `<option value=\"${option[valueName]}\">${textLabel}</option>`;\r\n    });\r\n    return `<select class=\"form-control search-filter\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n    const searchTermInput = (searchTerm || '') as string;\r\n\r\n    $filterElm.val(searchTermInput);\r\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  Filter,\n  FilterArguments,\n  FilterCallback,\n  GridOption,\n  MultipleSelectOption,\n  OperatorType,\n  OperatorString,\n  SearchTerm,\n  SelectOption,\n} from './../models/index';\nimport { CollectionService } from './../services/collection.service';\nimport { htmlEncode } from '../services/utilities';\nimport * as sanitizeHtml_ from 'sanitize-html';\nconst sanitizeHtml = sanitizeHtml_; // patch to fix rollup to work\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nexport class SingleSelectFilter implements Filter {\n  $filterElm: any;\n  grid: any;\n  searchTerms: SearchTerm[];\n  columnDef: Column;\n  callback: FilterCallback;\n  defaultOptions: MultipleSelectOption;\n  isFilled = false;\n  labelName: string;\n  labelPrefixName: string;\n  labelSuffixName: string;\n  valueName: string;\n  enableTranslateLabel = false;\n\n  constructor(private translate: TranslateService, private collectionService: CollectionService) {\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\n    this.defaultOptions = {\n      container: 'body',\n      filter: false,  // input search term on top of the select option list\n      maxHeight: 200,\n      single: true,\n      textTemplate: ($elm) => {\n        // render HTML code or not, by default it is sanitized and won't be rendered\n        const isRenderHtmlEnabled = this.columnDef && this.columnDef.filter && this.columnDef.filter.enableRenderHtml || false;\n        return isRenderHtmlEnabled ? $elm.text() : $elm.html();\n      },\n      onClose: () => {\n        // we will subscribe to the onClose event for triggering our callback\n        // also add/remove \"filled\" class for styling purposes\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\n        let selectedItem = '';\n\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\n          selectedItem = selectedItems[0] || null;\n          this.isFilled = true;\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\n        } else {\n          this.isFilled = false;\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\n        }\n\n        this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: (selectedItem ? [selectedItem] : null) });\n      }\n    };\n  }\n\n  get operator(): OperatorType | OperatorString {\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get gridOptions(): GridOption {\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  init(args: FilterArguments) {\n    this.grid = args.grid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = args.searchTerms;\n\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\n    }\n\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\n    this.labelPrefixName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.labelPrefix : 'labelPrefix';\n    this.labelSuffixName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.labelSuffix : 'labelSuffix';\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\n\n    let newCollection = this.columnDef.filter.collection || [];\n\n    // user might want to filter certain items of the collection\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\n      const filterBy = this.columnDef.filter.collectionFilterBy;\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\n    }\n\n    // user might want to sort the collection\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\n      const sortBy = this.columnDef.filter.collectionSortBy;\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\n    }\n\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\n    // also when the search term is a boolean or a number, we will convert it to a string\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\n      searchTerm = `${searchTerm}`;\n    }\n\n    // step 1, create HTML string template\n    const filterTemplate = this.buildTemplateHtmlString(newCollection || [], searchTerm);\n\n    // step 2, create the DOM Element of the filter & pre-load search term\n    this.createDomElement(filterTemplate);\n  }\n\n  /**\n   * Clear the filter values\n   */\n  clear() {\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\n      this.$filterElm.multipleSelect('setSelects', []);\n      this.$filterElm.removeClass('filled');\n      this.searchTerms = [];\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\n    }\n  }\n\n  /**\n   * destroy the filter\n   */\n  destroy() {\n    if (this.$filterElm) {\n      this.$filterElm.off().remove();\n    }\n  }\n\n  /**\n   * Set value(s) on the DOM element\n   */\n  setValues(values: SearchTerm | SearchTerm[]) {\n    if (values) {\n      values = Array.isArray(values) ? values : [values];\n      this.$filterElm.multipleSelect('setSelects', values);\n    }\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString(optionCollection: any[], searchTerm?: SearchTerm) {\n    let options = '';\n    const isAddingSpaceBetweenLabels = this.columnDef && this.columnDef.filter && this.columnDef.filter.customStructure && this.columnDef.filter.customStructure.addSpaceBetweenLabels || false;\n    const isRenderHtmlEnabled = this.columnDef && this.columnDef.filter && this.columnDef.filter.enableRenderHtml || false;\n    const sanitizedOptions = this.gridOptions && this.gridOptions.sanitizeHtmlOptions || {};\n\n    optionCollection.forEach((option: SelectOption) => {\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.singleSelect, collection: [ { value: '1', label: 'One' } ]')`);\n      }\n\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\n      const selected = (option[this.valueName] === searchTerm) ? 'selected' : '';\n      const labelText = ((option.labelKey || this.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\n      const prefixText = option[this.labelPrefixName] || '';\n      const suffixText = option[this.labelSuffixName] || '';\n      let optionText = isAddingSpaceBetweenLabels ? `${prefixText} ${labelText} ${suffixText}` : (prefixText + labelText + suffixText);\n\n      // if user specifically wants to render html text, he needs to opt-in else it will stripped out by default\n      // also, the 3rd party lib will saninitze any html code unless it's encoded, so we'll do that\n      if (isRenderHtmlEnabled) {\n        // sanitize any unauthorized html tags like script and others\n        // for the remaining allowed tags we'll permit all attributes\n        const sanitizeText = sanitizeHtml(optionText, sanitizedOptions);\n        optionText = htmlEncode(sanitizeText);\n      }\n\n      // html text of each select option\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${optionText}</option>`;\n\n      // if there's a search term, we will add the \"filled\" class for styling purposes\n      if (selected) {\n        this.isFilled = true;\n      }\n    });\n\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\n  }\n\n  /**\n   * From the html template string, create a DOM element\n   * Subscribe to the onClose event and run the callback when that happens\n   * @param filterTemplate\n   */\n  private createDomElement(filterTemplate: string) {\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\n    $($headerElm).empty();\n\n    // create the DOM element & add an ID and filter class\n    this.$filterElm = $(filterTemplate);\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\n    }\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\n    this.$filterElm.data('columnId', this.columnDef.id);\n\n    // append the new DOM element to the header row\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\n      this.$filterElm.appendTo($headerElm);\n    }\n\n    // merge options & attach multiSelect\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\n    this.$filterElm = this.$filterElm.multipleSelect(options);\n  }\n}\n",
    "import {\r\n  Column,\r\n  ColumnFilter,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  OperatorType,\r\n  OperatorString,\r\n  SearchTerm,\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nconst DEFAULT_MIN_VALUE = 0;\r\nconst DEFAULT_MAX_VALUE = 100;\r\nconst DEFAULT_STEP = 1;\r\n\r\nexport class SliderFilter implements Filter {\r\n  private _clearFilterTriggered = false;\r\n  private _elementRangeInputId: string;\r\n  private _elementRangeOutputId: string;\r\n  private $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  /** Getter for the Filter Generic Params */\r\n  private get filterParams(): any {\r\n    return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};\r\n  }\r\n\r\n  /** Getter for the `filter` properties */\r\n  private get filterProperties(): ColumnFilter {\r\n    return this.columnDef && this.columnDef.filter || {};\r\n  }\r\n\r\n  get operator(): OperatorType | OperatorString {\r\n    return (this.columnDef && this.columnDef.filter && this.columnDef.filter.operator) || OperatorType.equal;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    if (!args) {\r\n      throw new Error('[Aurelia-SlickGrid] A filter must always have an \"init()\" with valid arguments.');\r\n    }\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // define the input & slider number IDs\r\n    this._elementRangeInputId = `rangeInput_${this.columnDef.field}`;\r\n    this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}`;\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the change event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.change((e: any) => {\r\n      const value = e && e.target && e.target.value || '';\r\n      if (this._clearFilterTriggered) {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered });\r\n        this._clearFilterTriggered = false; // reset flag for next use\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value] });\r\n      }\r\n    });\r\n\r\n    // if user chose to display the slider number on the right side, then update it every time it changes\r\n    // we need to use both \"input\" and \"change\" event to be all cross-browser\r\n    if (!this.filterParams.hideSliderNumber) {\r\n      this.$filterElm.on('input change', (e: { target: HTMLInputElement }) => {\r\n        const value = e && e.target && e.target.value || '';\r\n        if (value) {\r\n          document.getElementById(this._elementRangeOutputId).innerHTML = value;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.$filterElm) {\r\n      this._clearFilterTriggered = true;\r\n      this.searchTerms = [];\r\n      const clearedValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;\r\n      this.$filterElm.children('input').val(clearedValue);\r\n      this.$filterElm.children('div.input-group-addon.input-group-append').children().html(clearedValue);\r\n      this.$filterElm.trigger('change');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString() {\r\n    const minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;\r\n    const maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;\r\n    const defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;\r\n    const step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;\r\n\r\n    if (this.filterParams.hideSliderNumber) {\r\n      return `\r\n      <div class=\"search-filter\">\r\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\r\n          name=\"${this._elementRangeInputId}\"\r\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\r\n          class=\"form-control slider-filter-input range\" />\r\n      </div>`;\r\n    }\r\n\r\n    return `\r\n      <div class=\"input-group search-filter\">\r\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\r\n          name=\"${this._elementRangeInputId}\"\r\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\r\n          class=\"form-control slider-filter-input range\" />\r\n        <div class=\"input-group-addon input-group-append slider-value\">\r\n          <span class=\"input-group-text\" id=\"${this._elementRangeOutputId}\">${defaultValue}</span>\r\n        </div>\r\n      </div>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n    const searchTermInput = (searchTerm || '0') as string;\r\n\r\n    $filterElm.children('input').val(searchTermInput);\r\n    $filterElm.children('div.input-group-addon.input-group-append').children().html(searchTermInput);\r\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n",
    "import { Column, Filter } from './../models/index';\r\nimport { CompoundDateFilter } from './compoundDateFilter';\r\nimport { CompoundInputFilter } from './compoundInputFilter';\r\nimport { CompoundSliderFilter } from './compoundSliderFilter';\r\nimport { InputFilter } from './inputFilter';\r\nimport { MultipleSelectFilter } from './multipleSelectFilter';\r\nimport { SelectFilter } from './selectFilter';\r\nimport { SingleSelectFilter } from './singleSelectFilter';\r\nimport { SliderFilter } from './sliderFilter';\r\n\r\nexport const Filters = {\r\n  /** Compound Date Filter (compound of Operator + Date picker) */\r\n  compoundDate: CompoundDateFilter,\r\n\r\n  /** Compound Input Filter (compound of Operator + Input) */\r\n  compoundInput: CompoundInputFilter,\r\n\r\n  /** Compound Slider Filter (compound of Operator + Slider) */\r\n  compoundSlider: CompoundSliderFilter,\r\n\r\n  /** Default Filter, input type text filter */\r\n  input: InputFilter,\r\n\r\n  /** Slider Filter */\r\n  slider: SliderFilter,\r\n\r\n  /** Multiple Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  multipleSelect: MultipleSelectFilter,\r\n\r\n  /** Single Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  singleSelect: SingleSelectFilter,\r\n\r\n  /** Select filter, which uses native DOM element select */\r\n  select: SelectFilter\r\n};\r\n",
    "import { DelimiterType, FileType, GridOption } from './models/index';\r\nimport { Filters } from './filters/index';\r\n\r\n/**\r\n * Options that can be passed to the Bootstrap-Datetimepicker directly\r\n */\r\nexport const GlobalGridOptions: GridOption = {\r\n  alwaysShowVerticalScroll: true,\r\n  autoEdit: false,\r\n  asyncEditorLoading: false,\r\n  autoFitColumnsOnFirstLoad: true,\r\n  autoResize: {\r\n    bottomPadding: 20,\r\n    minHeight: 180,\r\n    minWidth: 300,\r\n    sidePadding: 0\r\n  },\r\n  cellHighlightCssClass: 'slick-cell-modified',\r\n  checkboxSelector: {\r\n    cssClass: 'slick-cell-checkboxsel'\r\n  },\r\n  columnPicker: {\r\n    hideForceFitButton: false,\r\n    hideSyncResizeButton: true\r\n  },\r\n  datasetIdPropertyName: 'id',\r\n  defaultFilterPlaceholder: '&#128269;',\r\n  defaultFilter: Filters.input,\r\n  editable: false,\r\n  enableAutoResize: true,\r\n  enableCellNavigation: false,\r\n  enableColumnPicker: true,\r\n  enableColumnReorder: true,\r\n  enableExport: true,\r\n  enableGridMenu: true,\r\n  enableHeaderMenu: true,\r\n  enableMouseHoverHighlightRow: true,\r\n  enableSorting: true,\r\n  enableTextSelectionOnCells: true,\r\n  explicitInitialization: true,\r\n  exportOptions: {\r\n    delimiter: DelimiterType.comma,\r\n    exportWithFormatter: false,\r\n    filename: 'export',\r\n    format: FileType.csv,\r\n    groupingAggregatorRowText: '',\r\n    sanitizeDataExport: false,\r\n    useUtf8WithBom: true\r\n  },\r\n  forceFitColumns: false,\r\n  gridMenu: {\r\n    hideClearAllFiltersCommand: false,\r\n    hideClearAllSortingCommand: false,\r\n    hideExportCsvCommand: false,\r\n    hideExportTextDelimitedCommand: true,\r\n    hideForceFitButton: false,\r\n    hideRefreshDatasetCommand: false,\r\n    hideSyncResizeButton: true,\r\n    hideToggleFilterCommand: false,\r\n    iconCssClass: 'fa fa-bars',\r\n    iconClearAllFiltersCommand: 'fa fa-filter text-danger',\r\n    iconClearAllSortingCommand: 'fa fa-unsorted text-danger',\r\n    iconExportCsvCommand: 'fa fa-download',\r\n    iconExportTextDelimitedCommand: 'fa fa-download',\r\n    iconRefreshDatasetCommand: 'fa fa-refresh',\r\n    iconToggleFilterCommand: 'fa fa-random',\r\n    menuWidth: 16,\r\n    resizeOnShowHeaderRow: true\r\n  },\r\n  headerMenu: {\r\n    autoAlign: true,\r\n    autoAlignOffset: 12,\r\n    minWidth: 140,\r\n    iconSortAscCommand: 'fa fa-sort-asc',\r\n    iconSortDescCommand: 'fa fa-sort-desc',\r\n    iconColumnHideCommand: 'fa fa-times',\r\n    hideColumnHideCommand: false,\r\n    hideSortCommands: false\r\n  },\r\n  headerRowHeight: 35,\r\n  multiColumnSort: true,\r\n  numberedMultiColumnSort: true,\r\n  tristateMultiColumnSort: false,\r\n  sanitizeHtmlOptions: {\r\n    allowedTags: [ 'h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol',\r\n    'nl', 'li', 'b', 'i', 'strong', 'em', 'strike', 'code', 'hr', 'br', 'div',\r\n    'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'pre', 'iframe', 'span' ],\r\n    allowedAttributes: { '*': ['*'] }\r\n  },\r\n  sortColNumberInSeparateSpan: true,\r\n  suppressActiveCellChangeOnEdit: true,\r\n  pagination: {\r\n    pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\r\n    pageSize: 25,\r\n    totalItems: 0\r\n  },\r\n  rowHeight: 35,\r\n  showHeaderRow: false,\r\n  topPanelHeight: 35\r\n};\r\n",
    "import { GlobalGridOptions } from './global-grid-options';\r\n\r\nexport class SlickgridConfig {\r\n  options: any;\r\n\r\n  constructor() {\r\n    this.options = GlobalGridOptions;\r\n  }\r\n}\r\n",
    "import { Injector, Injectable } from '@angular/core';\r\nimport { Filter } from '../models/filter.interface';\r\nimport { ColumnFilter } from '../models';\r\nimport { SlickgridConfig } from '../slickgrid-config';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CollectionService } from '../services/collection.service';\r\n\r\n@Injectable()\r\nexport class FilterFactory {\r\n  /**\r\n   * The options from the SlickgridConfig\r\n   */\r\n  private _options: any;\r\n\r\n  constructor(private config: SlickgridConfig, private translate: TranslateService, private collectionService: CollectionService) {\r\n    this._options = this.config.options;\r\n  }\r\n\r\n  // Uses the User model to create a new User\r\n  createFilter(columnFilter: ColumnFilter | undefined): Filter | undefined {\r\n    let filter: Filter | undefined;\r\n\r\n    if (columnFilter && columnFilter.model) {\r\n      filter = typeof columnFilter.model === 'function' ? new columnFilter.model(this.translate, this.collectionService) : columnFilter.model;\r\n    }\r\n\r\n    // fallback to the default filter\r\n    if (!filter && this._options.defaultFilter) {\r\n      filter = new this._options.defaultFilter(this.translate, this.collectionService);\r\n    }\r\n\r\n    return filter;\r\n  }\r\n}\r\n",
    "import { Component, Injectable } from '@angular/core';\nimport { castToPromise, objectsDeepEqual } from './utilities';\nimport { FilterConditions } from './../filter-conditions';\nimport {\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  Filter,\n  FilterArguments,\n  FilterCallbackArg,\n  FieldType,\n  GridOption,\n  OperatorType,\n  CurrentFilter,\n  SearchTerm,\n  SlickEvent,\n  OperatorString\n} from './../models/index';\nimport { FilterFactory } from '../filters/filterFactory';\nimport { Subject } from 'rxjs/Subject';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class FilterService {\n  private _eventHandler = new Slick.EventHandler();\n  private _slickSubscriber: SlickEvent;\n  private _filters: any[] = [];\n  private _columnFilters: ColumnFilters = {};\n  private _dataView: any;\n  private _grid: any;\n  private _onFilterChangedOptions: any;\n  onFilterChanged = new Subject<CurrentFilter[]>();\n  onFilterCleared = new Subject<boolean>();\n\n  constructor(private filterFactory: FilterFactory) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any): void {\n    this._grid = grid;\n  }\n\n  /**\n   * Attach a backend filter hook to the grid\n   * @param grid SlickGrid Grid object\n   */\n  attachBackendOnFilter(grid: any) {\n    this._filters = [];\n    this._slickSubscriber = new Slick.Event();\n\n    // subscribe to the SlickGrid event and call the backend execution\n    this._slickSubscriber.subscribe(this.attachBackendOnFilterSubscribe.bind(this));\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  async attachBackendOnFilterSubscribe(event: Event, args: any) {\n    if (!args || !args.grid) {\n      throw new Error('Something went wrong when trying to attach the \"attachBackendOnFilterSubscribe(event, args)\" function, it seems that \"args\" is not populated correctly');\n    }\n    const backendApi = this._gridOptions.backendServiceApi;\n    if (!backendApi || !backendApi.process || !backendApi.service) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    // keep start time & end timestamps & return it after process execution\n    const startTime = new Date();\n\n    // run a preProcess callback if defined\n    if (backendApi.preProcess) {\n      backendApi.preProcess();\n    }\n\n    // call the service to get a query back\n    const query = await backendApi.service.processOnFilterChanged(event, args);\n\n    // emit an onFilterChanged event\n    if (args && !args.clearFilterTriggered) {\n      this.emitFilterChanged('remote');\n    }\n\n    // the process could be an Observable (like HttpClient) or a Promise\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n    const observableOrPromise = backendApi.process(query);\n    const processResult = await castToPromise(observableOrPromise);\n    const endTime = new Date();\n\n    // from the result, call our internal post process to update the Dataset and Pagination info\n    if (processResult && backendApi.internalPostProcess) {\n      backendApi.internalPostProcess(processResult);\n    }\n\n    // send the response process to the postProcess callback\n    if (backendApi.postProcess !== undefined) {\n      if (processResult instanceof Object) {\n        processResult.statistics = {\n          startTime,\n          endTime,\n          executionTime: endTime.valueOf() - startTime.valueOf(),\n          totalItemCount: this._gridOptions && this._gridOptions.pagination && this._gridOptions.pagination.totalItems\n        };\n      }\n      backendApi.postProcess(processResult);\n    }\n  }\n\n  /**\n   * Attach a local filter hook to the grid\n   * @param grid SlickGrid Grid object\n   * @param dataView\n   */\n  attachLocalOnFilter(grid: any, dataView: any) {\n    this._filters = [];\n    this._dataView = dataView;\n    this._slickSubscriber = new Slick.Event();\n\n    dataView.setFilterArgs({ columnFilters: this._columnFilters, grid: this._grid });\n    dataView.setFilter(this.customLocalFilter.bind(this, dataView));\n\n    this._slickSubscriber.subscribe((e: any, args: any) => {\n      const columnId = args.columnId;\n      if (columnId != null) {\n        dataView.refresh();\n      }\n      if (args && !args.clearFilterTriggered) {\n        this.emitFilterChanged('local');\n      }\n    });\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  /** Clear the search filters (below the column titles) */\n  clearFilters() {\n    this._filters.forEach((filter: Filter) => {\n      if (filter && filter.clear) {\n        // clear element and trigger a change\n        filter.clear();\n      }\n    });\n\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to clear columnFilter (without looping through) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // we also need to refresh the dataView and optionally the grid (it's optional since we use DataView)\n    if (this._dataView) {\n      this._dataView.refresh();\n      this._grid.invalidate();\n      this._grid.render();\n    }\n\n    // emit an event when filters are all cleared\n    this.onFilterCleared.next(true);\n  }\n\n  customLocalFilter(dataView: any, item: any, args: any) {\n    for (const columnId of Object.keys(args.columnFilters)) {\n      const columnFilter = args.columnFilters[columnId];\n      const columnIndex = args.grid.getColumnIndex(columnId);\n      const columnDef = args.grid.getColumns()[columnIndex];\n      if (!columnDef) {\n        return false;\n      }\n      const fieldType = columnDef.type || FieldType.string;\n      const filterSearchType = (columnDef.filterSearchType) ? columnDef.filterSearchType : null;\n\n      let cellValue = item[columnDef.queryField || columnDef.queryFieldFilter || columnDef.field];\n\n      // if we find searchTerms use them but make a deep copy so that we don't affect original array\n      // we might have to overwrite the value(s) locally that are returned\n      // e.g: we don't want to operator within the search value, since it will fail filter condition check trigger afterward\n      const searchValues = (columnFilter && columnFilter.searchTerms) ? [...columnFilter.searchTerms] : null;\n\n      let fieldSearchValue = (Array.isArray(searchValues) && searchValues.length === 1) ? searchValues[0] : '';\n      fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n\n      const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n      let operator = columnFilter.operator || ((matches) ? matches[1] : '');\n      const searchTerm = (!!matches) ? matches[2] : '';\n      const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n\n      if (searchValues && searchValues.length > 1) {\n        fieldSearchValue = searchValues.join(',');\n      } else if (typeof fieldSearchValue === 'string') {\n        // escaping the search value\n        fieldSearchValue = fieldSearchValue.replace(`'`, `''`); // escape single quotes by doubling them\n        if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\n          operator = (operator === '*' || operator === '*z') ? OperatorType.endsWith : OperatorType.startsWith;\n        }\n      }\n\n      // no need to query if search value is empty\n      if (searchTerm === '' && (!searchValues || (Array.isArray(searchValues) && searchValues.length === 0))) {\n        return true;\n      }\n\n      // if search value has a regex match we will only keep the value without the operator\n      // in this case we need to overwrite the returned search values to truncate operator from the string search\n      if (Array.isArray(matches) && matches.length >= 1 && (Array.isArray(searchValues) && searchValues.length === 1)) {\n        searchValues[0] = searchTerm;\n      }\n\n      // filter search terms should always be string type (even though we permit the end user to input numbers)\n      // so make sure each term are strings, if user has some default search terms, we will cast them to string\n      if (searchValues && Array.isArray(searchValues)) {\n        for (let k = 0, ln = searchValues.length; k < ln; k++) {\n          // make sure all search terms are strings\n          searchValues[k] = ((searchValues[k] === undefined || searchValues[k] === null) ? '' : searchValues[k]) + '';\n        }\n      }\n\n      // when using localization (i18n), we should use the formatter output to search as the new cell value\n      if (columnDef && columnDef.params && columnDef.params.useFormatterOuputToFilter) {\n        const rowIndex = (dataView && typeof dataView.getIdxById === 'function') ? dataView.getIdxById(item.id) : 0;\n        cellValue = columnDef.formatter(rowIndex, columnIndex, cellValue, columnDef, item, this._grid);\n      }\n\n      // make sure cell value is always a string\n      if (typeof cellValue === 'number') {\n        cellValue = cellValue.toString();\n      }\n\n      const conditionOptions = {\n        fieldType,\n        searchTerms: searchValues,\n        cellValue,\n        operator,\n        cellValueLastChar: lastValueChar,\n        filterSearchType\n      };\n\n      if (!FilterConditions.executeMappedCondition(conditionOptions)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  dispose() {\n    this.disposeColumnFilters();\n\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n\n    // unsubscribe local event\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\n      this._slickSubscriber.unsubscribe();\n    }\n  }\n\n  /**\n   * Dispose of the filters, since it's a singleton, we don't want to affect other grids with same columns\n   */\n  disposeColumnFilters() {\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to make columnFilter an empty (without looping) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // also destroy each Filter instances\n    this._filters.forEach((filter, index) => {\n      if (filter && filter.destroy) {\n        filter.destroy(true);\n      }\n    });\n  }\n\n  getColumnFilters() {\n    return this._columnFilters;\n  }\n\n  getCurrentLocalFilters(): CurrentFilter[] {\n    const currentFilters: CurrentFilter[] = [];\n    if (this._columnFilters) {\n      for (const colId of Object.keys(this._columnFilters)) {\n        const columnFilter = this._columnFilters[colId];\n        const columnDef = columnFilter.columnDef;\n        const filter = { columnId: colId || '' } as CurrentFilter;\n\n        if (columnFilter && columnFilter.searchTerms) {\n          filter.searchTerms = columnFilter.searchTerms;\n        }\n        if (columnFilter.operator) {\n          filter.operator = columnFilter.operator;\n        }\n        if (Array.isArray(filter.searchTerms) && filter.searchTerms.length > 0 && filter.searchTerms[0] !== '') {\n          currentFilters.push(filter);\n        }\n      }\n    }\n    return currentFilters;\n  }\n\n  callbackSearchEvent(e: Event | undefined, args: FilterCallbackArg) {\n    if (args) {\n      const searchTerm = ((e && e.target) ? (e.target as HTMLInputElement).value : undefined);\n      const searchTerms = (args.searchTerms && Array.isArray(args.searchTerms)) ? args.searchTerms : (searchTerm ? [searchTerm] : undefined);\n      const columnDef = args.columnDef || null;\n      const columnId = columnDef ? (columnDef.id || '') : '';\n      const operator = args.operator || undefined;\n      const hasSearchTerms = searchTerms && Array.isArray(searchTerms);\n      const termsCount = hasSearchTerms && searchTerms.length;\n      const oldColumnFilters = { ...this._columnFilters };\n\n      if (!hasSearchTerms || termsCount === 0 || (termsCount === 1 && searchTerms[0] === '')) {\n        // delete the property from the columnFilters when it becomes empty\n        // without doing this, it would leave an incorrect state of the previous column filters when filtering on another column\n        delete this._columnFilters[columnId];\n      } else {\n        const colId = '' + columnId as string;\n        const colFilter: ColumnFilter = {\n          columnId: colId,\n          columnDef,\n          searchTerms,\n        };\n        if (operator) {\n          colFilter.operator = operator;\n        }\n        this._columnFilters[colId] = colFilter;\n      }\n\n      // trigger an event only if Filters changed\n      if (!objectsDeepEqual(oldColumnFilters, this._columnFilters)) {\n        this.triggerEvent(this._slickSubscriber, {\n          clearFilterTriggered: args && args.clearFilterTriggered,\n          columnId,\n          columnDef: args.columnDef || null,\n          columnFilters: this._columnFilters,\n          operator,\n          searchTerms,\n          serviceOptions: this._onFilterChangedOptions,\n          grid: this._grid\n        }, e);\n      }\n    }\n  }\n\n  addFilterTemplateToHeaderRow(args: { column: Column; grid: any; node: any }) {\n    const columnDef = args.column;\n    const columnId = columnDef.id || '';\n\n    if (columnDef && columnId !== 'selector' && columnDef.filterable) {\n      let searchTerms: SearchTerm[] | undefined;\n      let operator: OperatorString | OperatorType;\n      const filter: Filter | undefined = this.filterFactory.createFilter(args.column.filter);\n      operator = (columnDef && columnDef.filter && columnDef.filter.operator) || (filter && filter.operator) || undefined;\n\n      if (this._columnFilters[columnDef.id]) {\n        searchTerms = this._columnFilters[columnDef.id].searchTerms || undefined;\n        operator = this._columnFilters[columnDef.id].operator || undefined;\n      } else if (columnDef.filter) {\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // because of that we need to first get searchTerm(s) from the columnFilters (that is what the user last entered)\n        searchTerms = columnDef.filter.searchTerms || undefined;\n        this.updateColumnFilters(searchTerms, columnDef, operator);\n      }\n\n      const filterArguments: FilterArguments = {\n        grid: this._grid,\n        operator,\n        searchTerms,\n        columnDef,\n        callback: this.callbackSearchEvent.bind(this)\n      };\n\n      if (filter) {\n        filter.init(filterArguments);\n        const filterExistIndex = this._filters.findIndex((filt) => filter.columnDef.name === filt.columnDef.name);\n\n        // add to the filters arrays or replace it when found\n        if (filterExistIndex === -1) {\n          this._filters.push(filter);\n        } else {\n          this._filters[filterExistIndex] = filter;\n        }\n\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // we need to also set again the values in the DOM elements if the values were set by a searchTerm(s)\n        if (searchTerms && filter.setValues) {\n          filter.setValues(searchTerms);\n        }\n      }\n    }\n  }\n\n  /**\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\n   * Other services, like Pagination, can then subscribe to it.\n   * @param sender\n   */\n  emitFilterChanged(sender: 'local' | 'remote') {\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\n      let currentFilters: CurrentFilter[] = [];\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentFilters) {\n        currentFilters = backendService.getCurrentFilters() as CurrentFilter[];\n      }\n      this.onFilterChanged.next(currentFilters);\n    } else if (sender === 'local') {\n      this.onFilterChanged.next(this.getCurrentLocalFilters());\n    }\n  }\n\n  /**\n   * When user passes an array of preset filters, we need to pre-populate each column filter searchTerm(s)\n   * The process is to loop through the preset filters array, find the associated column from columnDefinitions and fill in the filter object searchTerm(s)\n   * This is basically the same as if we would manually add searchTerm(s) to a column filter object in the column definition, but we do it programmatically.\n   * At the end of the day, when creating the Filter (DOM Element), it will use these searchTerm(s) so we can take advantage of that without recoding each Filter type (DOM element)\n   */\n  populateColumnFilterSearchTerms() {\n    if (this._gridOptions.presets && Array.isArray(this._gridOptions.presets.filters) && this._gridOptions.presets.filters.length > 0) {\n      const filters = this._gridOptions.presets.filters;\n      this._columnDefinitions.forEach((columnDef: Column) =>  {\n        // clear any columnDef searchTerms before applying Presets\n        if (columnDef.filter && columnDef.filter.searchTerms) {\n          delete columnDef.filter.searchTerms;\n        }\n\n        // from each presets, we will find the associated columnDef and apply the preset searchTerms & operator if there is\n        const columnPreset = filters.find((presetFilter: CurrentFilter) => {\n          return presetFilter.columnId === columnDef.id;\n        });\n        if (columnPreset && columnPreset.searchTerms && Array.isArray(columnPreset.searchTerms)) {\n          columnDef.filter = columnDef.filter || {};\n          columnDef.filter.operator = columnPreset.operator || columnDef.filter.operator || '';\n          columnDef.filter.searchTerms = columnPreset.searchTerms;\n        }\n      });\n    }\n  }\n\n  private updateColumnFilters(searchTerms: SearchTerm[] | undefined, columnDef: any, operator?: OperatorType | OperatorString) {\n    if (searchTerms && columnDef) {\n      // this._columnFilters.searchTerms = searchTerms;\n      this._columnFilters[columnDef.id] = {\n        columnId: columnDef.id,\n        columnDef,\n        searchTerms,\n        operator\n      };\n    }\n  }\n\n  private triggerEvent(slickEvent: any, args: any, e: any) {\n    slickEvent = slickEvent || new Slick.Event();\n\n    // event might have been created as a CustomEvent (e.g. CompoundDateFilter), without being a valid Slick.EventData.\n    // if so we will create a new Slick.EventData and merge it with that CustomEvent to avoid having SlickGrid errors\n    let event = e;\n    if (e && typeof e.isPropagationStopped !== 'function') {\n      event = $.extend({}, new Slick.EventData(), e);\n    }\n    slickEvent.notify(args, event, args.grid);\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  Column,\n  ExportOption,\n  FileType,\n  Formatter,\n  GridOption\n} from './../models/index';\nimport { addWhiteSpaces, htmlEntityDecode, sanitizeHtmlToText } from './../services/utilities';\nimport { Subject } from 'rxjs/Subject';\nimport { TextEncoder } from 'text-encoding-utf-8';\n\n// using external non-typed js libraries\ndeclare let Slick: any;\ndeclare let $: any;\n\nexport interface ExportColumnHeader {\n  key: string;\n  title: string;\n}\n\n@Injectable()\nexport class ExportService {\n  private _lineCarriageReturn = '\\n';\n  private _dataView: any;\n  private _grid: any;\n  private _exportQuoteWrapper: string;\n  private _columnHeaders: ExportColumnHeader[];\n  private _groupedHeaders: ExportColumnHeader[];\n  private _hasGroupedItems = false;\n  private _exportOptions: ExportOption;\n  onGridBeforeExportToFile = new Subject<boolean>();\n  onGridAfterExportToFile = new Subject<{ options: any }>();\n\n  constructor(private translate: TranslateService) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Export Service\n   * @param grid\n   * @param gridOptions\n   * @param dataView\n   */\n  init(grid: any, dataView: any): void {\n    this._grid = grid;\n    this._dataView = dataView;\n  }\n\n  /**\n   * Function to export the Grid result to an Excel CSV format using javascript for it to produce the CSV file.\n   * This is a WYSIWYG export to file output (What You See is What You Get)\n   *\n   * NOTES: The column position needs to match perfectly the JSON Object position because of the way we are pulling the data,\n   * which means that if any column(s) got moved in the UI, it has to be reflected in the JSON array output as well\n   *\n   * Example: exportToFile({ format: FileType.csv, delimiter: DelimiterType.comma })\n   */\n  exportToFile(options: ExportOption) {\n    this.onGridBeforeExportToFile.next(true);\n    this._exportOptions = $.extend(true, {}, this._gridOptions.exportOptions, options);\n\n    // get the CSV output from the grid data\n    const dataOutput = this.getDataOutput();\n\n    // trigger a download file\n    // wrap it into a setTimeout so that the EventAggregator has enough time to start a pre-process like showing a spinner\n    setTimeout(() => {\n      const downloadOptions = {\n        filename: `${this._exportOptions.filename}.${this._exportOptions.format}`,\n        csvContent: dataOutput,\n        format: this._exportOptions.format,\n        useUtf8WithBom: this._exportOptions.useUtf8WithBom\n      };\n      this.startDownloadFile(downloadOptions);\n      this.onGridAfterExportToFile.next({ options: downloadOptions });\n    }, 0);\n  }\n\n  // -----------------------\n  // Private functions\n  // -----------------------\n\n  getDataOutput(): string {\n    const columns = this._grid.getColumns() || [];\n    const delimiter = this._exportOptions.delimiter || '';\n    const format = this._exportOptions.format || '';\n    const groupByColumnHeader = this._exportOptions.groupingColumnHeaderTitle || this.translate.instant('GROUP_BY');\n\n    // a CSV needs double quotes wrapper, the other types do not need any wrapper\n    this._exportQuoteWrapper = (format === FileType.csv) ? '\"' : '';\n\n    // data variable which will hold all the fields data of a row\n    let outputDataString = '';\n\n    // get grouped column titles and if found, we will add a \"Group by\" column at the first column index\n    const grouping = this._dataView.getGrouping();\n    if (grouping && Array.isArray(grouping) && grouping.length > 0) {\n      this._hasGroupedItems = true;\n      outputDataString += `${groupByColumnHeader}` + delimiter;\n    } else {\n      this._hasGroupedItems = false;\n    }\n\n    // get all column headers\n    this._columnHeaders = this.getColumnHeaders(columns) || [];\n    if (this._columnHeaders && Array.isArray(this._columnHeaders) && this._columnHeaders.length > 0) {\n      // add the header row + add a new line at the end of the row\n      const outputHeaderTitles = this._columnHeaders.map((header) => {\n        return this._exportQuoteWrapper + header.title + this._exportQuoteWrapper;\n      });\n      outputDataString += (outputHeaderTitles.join(delimiter) + this._lineCarriageReturn);\n    }\n\n    // Populate the rest of the Grid Data\n    outputDataString += this.getAllGridRowData(columns, this._lineCarriageReturn);\n\n    return outputDataString;\n  }\n\n  /**\n   * Get all the grid row data and return that as an output string\n   */\n  getAllGridRowData(columns: Column[], lineCarriageReturn: string): string {\n    let outputDataString = '';\n    const lineCount = this._dataView.getLength();\n\n    // loop through all the grid rows of data\n    for (let rowNumber = 0; rowNumber < lineCount; rowNumber++) {\n      const itemObj = this._dataView.getItem(rowNumber);\n\n      if (itemObj != null) {\n        // Normal row (not grouped by anything) would have an ID which was predefined in the Grid Columns definition\n        if (itemObj.id != null) {\n          // get regular row item data\n          outputDataString += this.readRegularRowData(columns, rowNumber, itemObj);\n        } else if (this._hasGroupedItems && itemObj.__groupTotals === undefined) {\n          // get the group row\n          outputDataString += this.readGroupedTitleRow(itemObj) + this._exportOptions.delimiter;\n        } else if (itemObj.__groupTotals) {\n          // else if the row is a Group By and we have agreggators, then a property of '__groupTotals' would exist under that object\n          outputDataString += this.readGroupedTotalRow(columns, itemObj) + this._exportOptions.delimiter;\n        }\n        outputDataString += lineCarriageReturn;\n      }\n    }\n\n    return outputDataString;\n  }\n\n  /**\n   * Get all header titles and their keys, translate the title when required.\n   * @param columns of the grid\n   */\n  getColumnHeaders(columns: Column[]): ExportColumnHeader[] {\n    if (!columns || !Array.isArray(columns) || columns.length === 0) {\n      return null;\n    }\n    const columnHeaders = [];\n\n    // Populate the Column Header, pull the name defined\n    columns.forEach((columnDef) => {\n      const fieldName = (columnDef.headerKey) ? this.translate.instant(columnDef.headerKey) : columnDef.name;\n      const skippedField = columnDef.excludeFromExport || false;\n\n      // if column width is 0 then it's not evaluated since that field is considered hidden should not be part of the export\n      if ((columnDef.width ===  undefined || columnDef.width > 0) && !skippedField) {\n        columnHeaders.push({\n          key: columnDef.field || columnDef.id,\n          title: fieldName\n        });\n      }\n    });\n\n    return columnHeaders;\n  }\n\n  /**\n   * Get the data of a regular row (a row without grouping)\n   * @param row\n   * @param itemObj\n   */\n  readRegularRowData(columns: Column[], row: number, itemObj: any) {\n    let idx = 0;\n    let rowOutputString = '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n\n    for (let col = 0, ln = columns.length; col < ln; col++) {\n      const columnDef = columns[col];\n      const fieldId = columnDef.field || columnDef.id || '';\n\n      // skip excluded column\n      if (columnDef.excludeFromExport) {\n          continue;\n      }\n\n      // if we are grouping and are on 1st column index, we need to skip this column since it will be used later by the grouping text:: Group by [columnX]\n      if (this._hasGroupedItems && idx === 0) {\n        rowOutputString += `\"\"` + delimiter;\n      }\n\n      // does the user want to evaluate current column Formatter?\n      const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._exportOptions.exportWithFormatter;\n\n      // did the user provide a Custom Formatter for the export\n      const exportCustomFormatter: Formatter = (columnDef.exportCustomFormatter !== undefined) ? columnDef.exportCustomFormatter : undefined;\n\n      let itemData = '';\n\n      if (exportCustomFormatter) {\n        itemData = exportCustomFormatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\n      } else if (isEvaluatingFormatter && !!columnDef.formatter) {\n        itemData = columnDef.formatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\n      } else {\n        itemData = (itemObj[fieldId] === null || itemObj[fieldId] === undefined) ? '' : itemObj[fieldId];\n      }\n\n      // does the user want to sanitize the output data (remove HTML tags)?\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n        itemData = sanitizeHtmlToText(itemData);\n      }\n\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n      if (format === FileType.csv) {\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n      }\n\n      // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n      // to cancel that effect we can had = in front, ex: =\"1E06\"\n      const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\n\n      rowOutputString += keepAsStringWrapper + exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\n      idx++;\n    }\n\n    return rowOutputString;\n  }\n\n  /**\n   * Get the grouped title(s), for example if we grouped by salesRep, the returned result would be:: 'Sales Rep'\n   * @param itemObj\n   */\n  readGroupedTitleRow(itemObj: any) {\n    let groupName = sanitizeHtmlToText(itemObj.title);\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n\n    groupName = addWhiteSpaces(5 * itemObj.level) + groupName;\n\n    if (format === FileType.csv) {\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n      groupName = groupName.toString().replace(/\"/gi, `\"\"`);\n    }\n\n    // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n    // to cancel that effect we can had = in front, ex: =\"1E06\"\n    // const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\n\n    return /*keepAsStringWrapper +*/ exportQuoteWrapper + ' ' + groupName + exportQuoteWrapper + delimiter;\n  }\n\n  /**\n   * Get the grouped totals, these are set by Slick Aggregators.\n   * For example if we grouped by \"salesRep\" and we have a Sum Aggregator on \"sales\", then the returned output would be:: [\"Sum 123$\"]\n   * @param itemObj\n   */\n  readGroupedTotalRow(columns: Column[], itemObj: any) {\n    let exportExponentialWrapper = '';\n    const delimiter = this._exportOptions.delimiter;\n    const format = this._exportOptions.format;\n    const groupingAggregatorRowText = this._exportOptions.groupingAggregatorRowText || '';\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\n    let output = `${exportQuoteWrapper}${groupingAggregatorRowText}${exportQuoteWrapper}${delimiter}`;\n\n    columns.forEach((columnDef) => {\n      let itemData = '';\n\n      // if there's a groupTotalsFormatter, we will re-run it to get the exact same output as what is shown in UI\n      if (columnDef.groupTotalsFormatter) {\n        itemData = columnDef.groupTotalsFormatter(itemObj, columnDef);\n      }\n\n      // does the user want to sanitize the output data (remove HTML tags)?\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n        itemData = sanitizeHtmlToText(itemData);\n      }\n\n      if (format === FileType.csv) {\n        // when CSV we also need to escape double quotes twice, so a double quote \" becomes 2x double quotes \"\"\n        // and if we have a text of (number)E(number),\n        // we don't want excel to transform it into exponential (1.0E06) to cancel that effect we can had = in front, ex: =\"1E06\"\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n        exportExponentialWrapper = (itemData.match(/^\\s*\\d+E\\d+\\s*$/i)) ? '=' : '';\n      }\n      output += exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\n    });\n\n    return output;\n  }\n\n  /**\n   * Triggers download file with file format.\n   * IE(6-10) are not supported\n   * All other browsers will use plain javascript on client side to produce a file download.\n   * @param options\n   */\n  startDownloadFile(options: { filename: string, csvContent: any, format: FileType | string, useUtf8WithBom: boolean }): void {\n    // IE(6-10) don't support javascript download and our service doesn't support either so throw an error, we have to make a round trip to the Web Server for exporting\n    if (navigator.appName === 'Microsoft Internet Explorer') {\n      throw new Error('Microsoft Internet Explorer 6 to 10 do not support javascript export to CSV. Please upgrade your browser.');\n    }\n\n    // set the correct MIME type\n    const mimeType = (options.format === FileType.csv) ? 'text/csv' : 'text/plain';\n\n    // make sure no html entities exist in the data\n    const csvContent = htmlEntityDecode(options.csvContent);\n\n    // dealing with Excel CSV export and UTF-8 is a little tricky.. We will use Option #2 to cover older Excel versions\n    // Option #1: we need to make Excel knowing that it's dealing with an UTF-8, A correctly formatted UTF8 file can have a Byte Order Mark as its first three octets\n    // reference: http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\n    // Option#2: use a 3rd party extension to javascript encode into UTF-16\n    let outputData: Uint8Array | string;\n    if (options.format === FileType.csv) {\n      outputData = new TextEncoder('utf-8').encode(csvContent);\n    } else {\n      outputData = csvContent;\n    }\n\n    // create a Blob object for the download\n    const blob = new Blob([options.useUtf8WithBom ? '\\uFEFF' : '', outputData], {\n      type: `${mimeType};charset=utf-8;`\n    });\n\n    // when using IE/Edge, then use different download call\n    if (typeof navigator.msSaveOrOpenBlob === 'function') {\n      navigator.msSaveOrOpenBlob(blob, options.filename);\n    } else {\n      // this trick will generate a temp <a /> tag\n      // the code will then trigger a hidden click for it to start downloading\n      const link = document.createElement('a');\n      const csvUrl = URL.createObjectURL(blob);\n\n      link.textContent = 'download';\n      link.href = csvUrl;\n      link.setAttribute('download', options.filename);\n\n      // set the visibility to hidden so there is no effect on your web-layout\n      link.style.visibility = 'hidden';\n\n      // this part will append the anchor tag, trigger a click (for download to start) and finally remove the tag once completed\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n}\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\r\nimport { castToPromise } from './utilities';\r\nimport {\r\n  CellArgs,\r\n  Column,\r\n  ColumnSort,\r\n  CurrentSorter,\r\n  FieldType,\r\n  GridOption,\r\n  SlickEvent,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\nimport { Sorters } from './../sorters';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// using external non-typed js libraries\r\ndeclare var Slick: any;\r\n\r\nexport class SortService {\r\n  private _currentLocalSorters: CurrentSorter[] = [];\r\n  private _eventHandler: any = new Slick.EventHandler();\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _slickSubscriber: SlickEvent;\r\n  private _isBackendGrid = false;\r\n  onSortChanged = new Subject<CurrentSorter[]>();\r\n  onSortCleared = new Subject<boolean>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  /**\r\n   * Attach a backend sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param dataView SlickGrid DataView object\r\n   */\r\n  attachBackendOnSort(grid: any, dataView: any) {\r\n    this._isBackendGrid = true;\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = grid.onSort;\r\n\r\n    // subscribe to the SlickGrid event and call the backend execution\r\n    this._slickSubscriber.subscribe(this.onBackendSortChanged.bind(this));\r\n  }\r\n\r\n  async onBackendSortChanged(event: Event, args: any) {\r\n    if (!args || !args.grid) {\r\n      throw new Error('Something went wrong when trying to attach the \"onBackendSortChanged(event, args)\" function, it seems that \"args\" is not populated correctly');\r\n    }\r\n    const gridOptions: GridOption = args.grid.getOptions() || {};\r\n    const backendApi = gridOptions.backendServiceApi;\r\n\r\n    if (!backendApi || !backendApi.process || !backendApi.service) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    // keep start time & end timestamps & return it after process execution\r\n    const startTime = new Date();\r\n\r\n    if (backendApi.preProcess) {\r\n      backendApi.preProcess();\r\n    }\r\n\r\n    const query = backendApi.service.processOnSortChanged(event, args);\r\n    this.emitSortChanged('remote');\r\n\r\n    // the process could be an Observable (like HttpClient) or a Promise\r\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n    const observableOrPromise = backendApi.process(query);\r\n    const processResult = await castToPromise(observableOrPromise);\r\n    const endTime = new Date();\r\n\r\n    // from the result, call our internal post process to update the Dataset and Pagination info\r\n    if (processResult && backendApi.internalPostProcess) {\r\n      backendApi.internalPostProcess(processResult);\r\n    }\r\n\r\n    // send the response process to the postProcess callback\r\n    if (backendApi.postProcess) {\r\n      if (processResult instanceof Object) {\r\n        processResult.statistics = {\r\n          startTime,\r\n          endTime,\r\n          executionTime: endTime.valueOf() - startTime.valueOf(),\r\n          totalItemCount: this._gridOptions && this._gridOptions.pagination && this._gridOptions.pagination.totalItems\r\n        };\r\n      }\r\n      backendApi.postProcess(processResult);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attach a local sort (single/multi) hook to the grid\r\n   * @param grid SlickGrid Grid object\r\n   * @param gridOptions Grid Options object\r\n   * @param dataView\r\n   */\r\n  attachLocalOnSort(grid: any, dataView: any) {\r\n    this._isBackendGrid = false;\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this._slickSubscriber = grid.onSort;\r\n\r\n    this._slickSubscriber.subscribe((e: any, args: any) => {\r\n      // multiSort and singleSort are not exactly the same, but we want to structure it the same for the (for loop) after\r\n      // also to avoid having to rewrite the for loop in the sort, we will make the singleSort an array of 1 object\r\n      const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({sortAsc: args.sortAsc, sortCol: args.sortCol});\r\n\r\n      // keep current sorters\r\n      this._currentLocalSorters = []; // reset current local sorters\r\n      if (Array.isArray(sortColumns)) {\r\n        sortColumns.forEach((sortColumn: { sortCol: Column, sortAsc: number }) => {\r\n          if (sortColumn.sortCol) {\r\n            this._currentLocalSorters.push({\r\n              columnId: sortColumn.sortCol.id,\r\n              direction: sortColumn.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      this.onLocalSortChanged(grid, dataView, sortColumns);\r\n      this.emitSortChanged('local');\r\n    });\r\n  }\r\n\r\n  clearSorting() {\r\n    if (this._grid && this._gridOptions && this._dataView) {\r\n      // remove any sort icons (this setSortColumns function call really does only that)\r\n      this._grid.setSortColumns([]);\r\n\r\n      // we also need to trigger a sort change\r\n      // for a backend grid, we will trigger a backend sort changed with an empty sort columns array\r\n      // however for a local grid, we need to pass a sort column and so we will sort by the 1st column\r\n      if (this._isBackendGrid) {\r\n        this.onBackendSortChanged(undefined, { grid: this._grid, sortCols: [] });\r\n      } else {\r\n        if (this._columnDefinitions && Array.isArray(this._columnDefinitions)) {\r\n          this.onLocalSortChanged(this._grid, this._dataView, new Array({sortAsc: true, sortCol: this._columnDefinitions[0] }));\r\n        }\r\n      }\r\n    }\r\n    // set current sorter to empty & emit a sort changed event\r\n    this._currentLocalSorters = [];\r\n\r\n    // emit an event when filters are all cleared\r\n    this.onSortCleared.next(true);\r\n  }\r\n\r\n  getCurrentLocalSorters(): CurrentSorter[] {\r\n    return this._currentLocalSorters;\r\n  }\r\n\r\n  /**\r\n   * Get column sorts,\r\n   * If a column is passed as an argument, we won't add this column to our output array since it is already in the array\r\n   * We want to know the sort prior to calling the next sorting command\r\n   */\r\n  getPreviousColumnSorts(columnId?: string) {\r\n    // getSortColumns() only returns sortAsc & columnId, we want the entire column definition\r\n    const oldSortColumns = this._grid.getSortColumns();\r\n\r\n    // get the column definition but only keep column which are not equal to our current column\r\n    const sortedCols = oldSortColumns.reduce((cols, col) => {\r\n      if (!columnId || col.columnId !== columnId) {\r\n        cols.push({ sortCol: this._columnDefinitions[this._grid.getColumnIndex(col.columnId)], sortAsc: col.sortAsc });\r\n      }\r\n      return cols;\r\n    }, []);\r\n\r\n    return sortedCols;\r\n  }\r\n\r\n  /**\r\n   * load any presets if there are any\r\n   * @param grid\r\n   * @param dataView\r\n   */\r\n  loadLocalPresets(grid: any, dataView: any) {\r\n    const sortCols: ColumnSort[] = [];\r\n    this._currentLocalSorters = []; // reset current local sorters\r\n    if (this._gridOptions && this._gridOptions.presets && this._gridOptions.presets.sorters) {\r\n      const sorters = this._gridOptions.presets.sorters;\r\n\r\n      sorters.forEach((presetSorting: CurrentSorter) => {\r\n        const gridColumn = this._columnDefinitions.find((col: Column) => col.id === presetSorting.columnId);\r\n        if (gridColumn) {\r\n          sortCols.push({\r\n            columnId: gridColumn.id,\r\n            sortAsc: ((presetSorting.direction.toUpperCase() === SortDirection.ASC) ? true : false),\r\n            sortCol: gridColumn\r\n          });\r\n\r\n          // keep current sorters\r\n          this._currentLocalSorters.push({\r\n            columnId: gridColumn.id + '',\r\n            direction: presetSorting.direction.toUpperCase() as SortDirectionString\r\n          });\r\n        }\r\n      });\r\n\r\n      if (sortCols.length > 0) {\r\n        this.onLocalSortChanged(grid, dataView, sortCols);\r\n        grid.setSortColumns(sortCols); // use this to add sort icon(s) in UI\r\n      }\r\n    }\r\n  }\r\n\r\n  onLocalSortChanged(grid: any, dataView: any, sortColumns: ColumnSort[]) {\r\n    dataView.sort((dataRow1: any, dataRow2: any) => {\r\n      for (let i = 0, l = sortColumns.length; i < l; i++) {\r\n        const columnSortObj = sortColumns[i];\r\n        if (columnSortObj && columnSortObj.sortCol) {\r\n          const sortDirection = columnSortObj.sortAsc ? SortDirectionNumber.asc : SortDirectionNumber.desc;\r\n          const sortField = columnSortObj.sortCol.queryField || columnSortObj.sortCol.queryFieldFilter || columnSortObj.sortCol.field;\r\n          const fieldType = columnSortObj.sortCol.type || FieldType.string;\r\n          const value1 = dataRow1[sortField];\r\n          const value2 = dataRow2[sortField];\r\n          const sortResult = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n          if (sortResult !== SortDirectionNumber.neutral) {\r\n            return sortResult;\r\n          }\r\n        }\r\n      }\r\n      return 0;\r\n    });\r\n    grid.invalidate();\r\n    grid.render();\r\n  }\r\n\r\n  dispose() {\r\n    // unsubscribe local event\r\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\r\n      this._slickSubscriber.unsubscribe();\r\n    }\r\n\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n  }\r\n\r\n  /**\r\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\r\n   * Other services, like Pagination, can then subscribe to it.\r\n   * @param sender\r\n   */\r\n  emitSortChanged(sender: 'local' | 'remote') {\r\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      let currentSorters: CurrentSorter[] = [];\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        currentSorters = backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n      this.onSortChanged.next(currentSorters);\r\n    } else if (sender === 'local') {\r\n      this.onSortChanged.next(this.getCurrentLocalSorters());\r\n    }\r\n  }\r\n}\r\n",
    "export class Constants {\r\n  static TEXT_CANCEL = 'Cancel';\r\n  static TEXT_CLEAR_ALL_FILTERS = 'Clear All Filters';\r\n  static TEXT_CLEAR_ALL_SORTING = 'Clear All Sorting';\r\n  static TEXT_COLUMNS = 'Columns';\r\n  static TEXT_COMMANDS = 'Commands';\r\n  static TEXT_EXPORT_IN_CSV_FORMAT = 'Export in CSV format';\r\n  static TEXT_EXPORT_IN_TEXT_FORMAT = 'Export in Text format (Tab delimited)';\r\n  static TEXT_FORCE_FIT_COLUMNS = 'Force fit columns';\r\n  static TEXT_HIDE_COLUMN = 'Hide Column';\r\n  static TEXT_REFRESH_DATASET = 'Refresh Dataset';\r\n  static TEXT_SAVE = 'Save';\r\n  static TEXT_SYNCHRONOUS_RESIZE = 'Synchronous resize';\r\n  static TEXT_SORT_ASCENDING = 'Sort Ascending';\r\n  static TEXT_SORT_DESCENDING = 'Sort Descending';\r\n  static TEXT_TOGGLE_FILTER_ROW = 'Toggle Filter Row';\r\n  static VALIDATION_EDITOR_VALID_NUMBER = 'Please enter a valid number';\r\n  static VALIDATION_EDITOR_VALID_INTEGER = 'Please enter a valid integer number';\r\n  static VALIDATION_EDITOR_NUMBER_BETWEEN = 'Please enter a valid number between {{minValue}} and {{maxValue}}';\r\n  static VALIDATION_EDITOR_DECIMAL_BETWEEN = 'Please enter a valid number with a maximum of {{maxDecimal}} decimals';\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport {\r\n  CellArgs,\r\n  ColumnSort,\r\n  Column,\r\n  DelimiterType,\r\n  Extension,\r\n  FileType,\r\n  GraphqlResult,\r\n  GridMenu,\r\n  GridMenuItem,\r\n  GridOption,\r\n  HeaderButtonOnCommandArgs,\r\n  HeaderMenu,\r\n  HeaderMenuItem,\r\n  HeaderMenuOnCommandArgs,\r\n  HeaderMenuOnBeforeMenuShowArgs,\r\n} from './../models/index';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { castToPromise, sanitizeHtmlToText } from './../services/utilities';\r\nimport { FilterService } from './filter.service';\r\nimport { ExportService } from './export.service';\r\nimport { SortService } from './sort.service';\r\nimport { Constants } from '../constants';\r\n\r\n// using external non-typed js libraries\r\ndeclare var Slick: any;\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class ControlAndPluginService {\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  allColumns: Column[];\r\n  visibleColumns: Column[];\r\n  areVisibleColumnDifferent = false;\r\n  extensionList: Extension[] = [];\r\n  undoRedoBuffer: any;\r\n  userOriginalGridMenu: GridMenu;\r\n\r\n  // controls & plugins\r\n  autoTooltipPlugin: any;\r\n  cellExternalCopyManagerPlugin: any;\r\n  checkboxSelectorPlugin: any;\r\n  columnPickerControl: any;\r\n  gridMenuControl: any;\r\n  groupItemMetaProviderPlugin: any;\r\n  headerButtonsPlugin: any;\r\n  headerMenuPlugin: any;\r\n  rowSelectionPlugin: any;\r\n\r\n  constructor(\r\n    private exportService: ExportService,\r\n    private filterService: FilterService,\r\n    private sortService: SortService,\r\n    private translate: TranslateService,\r\n  ) { }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /** Setter for the Grid Options pulled through the Grid Object */\r\n  private set _gridOptions(gridOptions: GridOption) {\r\n    this._gridOptions = gridOptions;\r\n  }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  /** Get all columns (includes visible and non-visible) */\r\n  getAllColumns(): Column[] {\r\n    return this.allColumns || [];\r\n  }\r\n\r\n  /** Get only visible columns */\r\n  getVisibleColumns(): Column[] {\r\n    return this.visibleColumns || [];\r\n  }\r\n\r\n  /** Get all Extensions */\r\n  getAllExtensions(): Extension[] {\r\n    return this.extensionList;\r\n  }\r\n\r\n  /**\r\n   * Get an Extension by it's name\r\n   *  @param name\r\n   */\r\n  getExtensionByName(name: string): Extension | undefined {\r\n    return this.extensionList.find((p) => p.name === name);\r\n  }\r\n\r\n  /** Auto-resize all the column in the grid to fit the grid width */\r\n  autoResizeColumns() {\r\n    this._grid.autosizeColumns();\r\n  }\r\n\r\n  /**\r\n   * Attach/Create different Controls or Plugins after the Grid is created\r\n   * @param grid\r\n   * @param dataView\r\n   * @param groupItemMetadataProvider\r\n   */\r\n  attachDifferentControlOrPlugins(grid: any, dataView: any, groupItemMetadataProvider: any) {\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this.allColumns = this._columnDefinitions;\r\n    this.visibleColumns = this._columnDefinitions;\r\n\r\n    // make sure all columns are translated before creating ColumnPicker/GridMenu Controls\r\n    // this is to avoid having hidden columns not being translated on first load\r\n    if (this._gridOptions.enableTranslate) {\r\n      this.translateItems(this.allColumns, 'headerKey', 'name');\r\n    }\r\n\r\n    // Column Picker Control\r\n    if (this._gridOptions.enableColumnPicker) {\r\n      this.columnPickerControl = this.createColumnPicker(this._grid, this._columnDefinitions);\r\n      this.extensionList.push({ name: 'ColumnPicker', service: this.columnPickerControl });\r\n    }\r\n\r\n    // Grid Menu Control\r\n    if (this._gridOptions.enableGridMenu) {\r\n      // keep original user grid menu, useful when switching locale to translate\r\n      this.userOriginalGridMenu = { ...this._gridOptions.gridMenu };\r\n\r\n      this.gridMenuControl = this.createGridMenu(this._grid, this._columnDefinitions);\r\n      this.extensionList.push({ name: 'GridMenu', service: this.gridMenuControl });\r\n    }\r\n\r\n    // Auto Tooltip Plugin\r\n    if (this._gridOptions.enableAutoTooltip) {\r\n      this.autoTooltipPlugin = new Slick.AutoTooltips(this._gridOptions.autoTooltipOptions || {});\r\n      this._grid.registerPlugin(this.autoTooltipPlugin);\r\n      this.extensionList.push({ name: 'AutoTooltip', service: this.autoTooltipPlugin });\r\n    }\r\n\r\n    // Grouping Plugin\r\n    // register the group item metadata provider to add expand/collapse group handlers\r\n    if (this._gridOptions.enableGrouping) {\r\n      this.groupItemMetaProviderPlugin = groupItemMetadataProvider || {};\r\n      this._grid.registerPlugin(this.groupItemMetaProviderPlugin);\r\n      this.extensionList.push({ name: 'GroupItemMetaProvider', service: this.groupItemMetaProviderPlugin });\r\n    }\r\n\r\n    // Checkbox Selector Plugin\r\n    if (this._gridOptions.enableCheckboxSelector) {\r\n      // when enabling the Checkbox Selector Plugin, we need to also watch onClick events to perform certain actions\r\n      // the selector column has to be created BEFORE the grid (else it behaves oddly), but we can only watch grid events AFTER the grid is created\r\n      this._grid.registerPlugin(this.checkboxSelectorPlugin);\r\n      this.extensionList.push({ name: 'CheckboxSelector', service: this.checkboxSelectorPlugin });\r\n\r\n      // this also requires the Row Selection Model to be registered as well\r\n      if (!this.rowSelectionPlugin || !this._grid.getSelectionModel()) {\r\n        this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\r\n        this._grid.setSelectionModel(this.rowSelectionPlugin);\r\n      }\r\n\r\n      // user might want to pre-select some rows\r\n      // the setTimeout is because of timing issue with styling (row selection happen but rows aren't highlighted properly)\r\n      if (this._gridOptions.preselectedRows && this.rowSelectionPlugin && this._grid.getSelectionModel()) {\r\n        setTimeout(() => this.checkboxSelectorPlugin.selectRows(this._gridOptions.preselectedRows), 0);\r\n      }\r\n    }\r\n\r\n    // Row Selection Plugin\r\n    if (!this._gridOptions.enableCheckboxSelector && this._gridOptions.enableRowSelection) {\r\n      this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\r\n      this._grid.setSelectionModel(this.rowSelectionPlugin);\r\n    }\r\n\r\n    // Header Button Plugin\r\n    if (this._gridOptions.enableHeaderButton) {\r\n      this.headerButtonsPlugin = new Slick.Plugins.HeaderButtons(this._gridOptions.headerButton || {});\r\n      this._grid.registerPlugin(this.headerButtonsPlugin);\r\n      this.extensionList.push({ name: 'HeaderButtons', service: this.headerButtonsPlugin });\r\n      this.headerButtonsPlugin.onCommand.subscribe((e: Event, args: HeaderButtonOnCommandArgs) => {\r\n        if (this._gridOptions.headerButton && typeof this._gridOptions.headerButton.onCommand === 'function') {\r\n          this._gridOptions.headerButton.onCommand(e, args);\r\n        }\r\n      });\r\n    }\r\n\r\n    // Header Menu Plugin\r\n    if (this._gridOptions.enableHeaderMenu) {\r\n      this.headerMenuPlugin = this.createHeaderMenu(this._grid, this._dataView, this._columnDefinitions);\r\n    }\r\n\r\n    // Cell External Copy Manager Plugin (Excel Like)\r\n    if (this._gridOptions.enableExcelCopyBuffer) {\r\n      this.createUndoRedoBuffer();\r\n      this.hookUndoShortcutKey();\r\n      this.createCellExternalCopyManagerPlugin(this._grid);\r\n    }\r\n\r\n    // manually register other plugins\r\n    if (this._gridOptions.registerPlugins !== undefined) {\r\n      if (Array.isArray(this._gridOptions.registerPlugins)) {\r\n        this._gridOptions.registerPlugins.forEach((plugin) => {\r\n          this._grid.registerPlugin(plugin);\r\n          this.extensionList.push({ name: 'generic', service: plugin });\r\n        });\r\n      } else {\r\n        this._grid.registerPlugin(this._gridOptions.registerPlugins);\r\n        this.extensionList.push({ name: 'generic', service: this._gridOptions.registerPlugins });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attach/Create different plugins before the Grid creation.\r\n   * For example the multi-select have to be added to the column definition before the grid is created to work properly\r\n   * @param columnDefinitions\r\n   * @param options\r\n   */\r\n  createCheckboxPluginBeforeGridCreation(columnDefinitions: Column[], options: GridOption) {\r\n    if (options.enableCheckboxSelector) {\r\n      if (!this.checkboxSelectorPlugin) {\r\n        this.checkboxSelectorPlugin = new Slick.CheckboxSelectColumn(options.checkboxSelector || {});\r\n      }\r\n      const selectionColumn: Column = this.checkboxSelectorPlugin.getColumnDefinition();\r\n      selectionColumn.excludeFromExport = true;\r\n      selectionColumn.excludeFromQuery = true;\r\n      selectionColumn.excludeFromHeaderMenu = true;\r\n      columnDefinitions.unshift(selectionColumn);\r\n    }\r\n  }\r\n\r\n  /** Create the Excel like copy manager */\r\n  createCellExternalCopyManagerPlugin(grid: any) {\r\n    let newRowIds = 0;\r\n    const pluginOptions = {\r\n      clipboardCommandHandler: (editCommand: any) => {\r\n        this.undoRedoBuffer.queueAndExecuteCommand.call(this.undoRedoBuffer, editCommand);\r\n      },\r\n      dataItemColumnValueExtractor: (item: any, columnDef: Column) => {\r\n        // when grid or cell is not editable, we will possibly evaluate the Formatter if it was passed\r\n        // to decide if we evaluate the Formatter, we will use the same flag from Export which is \"exportWithFormatter\"\r\n        if (!this._gridOptions.editable || !columnDef.editor) {\r\n          const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._gridOptions.exportOptions.exportWithFormatter;\r\n          if (columnDef.formatter && isEvaluatingFormatter) {\r\n            const formattedOutput = columnDef.formatter(0, 0, item[columnDef.field], columnDef, item, this._grid);\r\n            if (columnDef.sanitizeDataExport || (this._gridOptions.exportOptions && this._gridOptions.exportOptions.sanitizeDataExport)) {\r\n              return sanitizeHtmlToText(formattedOutput);\r\n            }\r\n            return formattedOutput;\r\n          }\r\n        }\r\n\r\n        // else use the default \"dataItemColumnValueExtractor\" from the plugin itself\r\n        // we can do that by setting back the getter with null\r\n        return null;\r\n      },\r\n      readOnlyMode: false,\r\n      includeHeaderWhenCopying: false,\r\n      newRowCreator: (count: number) => {\r\n        for (let i = 0; i < count; i++) {\r\n          const item = {\r\n            id: 'newRow_' + newRowIds++\r\n          };\r\n          grid.getData().addItem(item);\r\n        }\r\n      }\r\n    };\r\n\r\n    grid.setSelectionModel(new Slick.CellSelectionModel());\r\n    this.cellExternalCopyManagerPlugin = new Slick.CellExternalCopyManager(pluginOptions);\r\n    grid.registerPlugin(this.cellExternalCopyManagerPlugin);\r\n    this.extensionList.push({ name: 'CellExternalCopyManager', service: this.cellExternalCopyManagerPlugin });\r\n  }\r\n\r\n  /**\r\n   * Create the Column Picker and expose all the available hooks that user can subscribe (onColumnsChanged)\r\n   * @param grid\r\n   * @param columnDefinitions\r\n   */\r\n  createColumnPicker(grid: any, columnDefinitions: Column[]) {\r\n    // localization support for the picker\r\n    const columnTitle = this.getPickerTitleOutputString('columnTitle', 'columnPicker');\r\n    const forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'columnPicker');\r\n    const syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');\r\n\r\n    this._gridOptions.columnPicker = this._gridOptions.columnPicker || {};\r\n    this._gridOptions.columnPicker.columnTitle = this._gridOptions.columnPicker.columnTitle || columnTitle;\r\n    this._gridOptions.columnPicker.forceFitTitle = this._gridOptions.columnPicker.forceFitTitle || forceFitTitle;\r\n    this._gridOptions.columnPicker.syncResizeTitle = this._gridOptions.columnPicker.syncResizeTitle || syncResizeTitle;\r\n\r\n    this.columnPickerControl = new Slick.Controls.ColumnPicker(columnDefinitions, grid, this._gridOptions);\r\n    if (grid && this._gridOptions.enableColumnPicker) {\r\n      this.columnPickerControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\r\n        if (this._gridOptions.columnPicker && typeof this._gridOptions.columnPicker.onColumnsChanged === 'function') {\r\n          this._gridOptions.columnPicker.onColumnsChanged(e, args);\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.columnPickerControl;\r\n  }\r\n\r\n  /**\r\n   * Create (or re-create) Grid Menu and expose all the available hooks that user can subscribe (onCommand, onMenuClose, ...)\r\n   * @param grid\r\n   * @param columnDefinitions\r\n   */\r\n  createGridMenu(grid: any, columnDefinitions: Column[]) {\r\n    if (this._gridOptions && this._gridOptions.gridMenu) {\r\n      this._gridOptions.gridMenu = { ...this.getDefaultGridMenuOptions(), ...this._gridOptions.gridMenu };\r\n\r\n      // merge original user grid menu items with internal items\r\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\r\n      this._gridOptions.gridMenu.customItems = [...this.userOriginalGridMenu.customItems || [], ...this.addGridMenuCustomCommands()];\r\n      this.translateItems(this._gridOptions.gridMenu.customItems, 'titleKey', 'title');\r\n      this.sortItems(this._gridOptions.gridMenu.customItems, 'positionOrder');\r\n\r\n      const gridMenuControl = new Slick.Controls.GridMenu(columnDefinitions, grid, this._gridOptions);\r\n      if (grid && this._gridOptions.gridMenu) {\r\n        gridMenuControl.onBeforeMenuShow.subscribe((e: Event, args: CellArgs) => {\r\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onBeforeMenuShow === 'function') {\r\n            this._gridOptions.gridMenu.onBeforeMenuShow(e, args);\r\n          }\r\n        });\r\n        gridMenuControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\r\n          this.areVisibleColumnDifferent = true;\r\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onColumnsChanged === 'function') {\r\n            this._gridOptions.gridMenu.onColumnsChanged(e, args);\r\n          }\r\n        });\r\n        gridMenuControl.onCommand.subscribe((e: Event, args: GridMenuItem) => {\r\n          this.executeGridMenuInternalCustomCommands(e, args);\r\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onCommand === 'function') {\r\n            this._gridOptions.gridMenu.onCommand(e, args);\r\n          }\r\n        });\r\n        gridMenuControl.onMenuClose.subscribe((e: Event, args: CellArgs) => {\r\n          if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onMenuClose === 'function') {\r\n            this._gridOptions.gridMenu.onMenuClose(e, args);\r\n          }\r\n\r\n          // we also want to resize the columns if the user decided to hide certain column(s)\r\n          if (grid && typeof grid.autosizeColumns === 'function') {\r\n            // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree)\r\n            const gridUid = grid.getUID();\r\n            if (this.areVisibleColumnDifferent && gridUid && $(`.${gridUid}`).length > 0) {\r\n              grid.autosizeColumns();\r\n              this.areVisibleColumnDifferent = false;\r\n            }\r\n          }\r\n        });\r\n      }\r\n      return gridMenuControl;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Create the Header Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)\r\n   * @param grid\r\n   * @param dataView\r\n   * @param columnDefinitions\r\n   */\r\n  createHeaderMenu(grid: any, dataView: any, columnDefinitions: Column[]) {\r\n    this._gridOptions.headerMenu = { ...this.getDefaultHeaderMenuOptions(), ...this._gridOptions.headerMenu };\r\n    if (this._gridOptions.enableHeaderMenu) {\r\n      this._gridOptions.headerMenu = this.addHeaderMenuCustomCommands(this._gridOptions, columnDefinitions);\r\n    }\r\n\r\n    const headerMenuPlugin = new Slick.Plugins.HeaderMenu(this._gridOptions.headerMenu);\r\n\r\n    grid.registerPlugin(headerMenuPlugin);\r\n    headerMenuPlugin.onCommand.subscribe((e: Event, args: HeaderMenuOnCommandArgs) => {\r\n      this.executeHeaderMenuInternalCommands(e, args);\r\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onCommand === 'function') {\r\n        this._gridOptions.headerMenu.onCommand(e, args);\r\n      }\r\n    });\r\n    headerMenuPlugin.onBeforeMenuShow.subscribe((e: Event, args: HeaderMenuOnBeforeMenuShowArgs) => {\r\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onBeforeMenuShow === 'function') {\r\n        this._gridOptions.headerMenu.onBeforeMenuShow(e, args);\r\n      }\r\n    });\r\n\r\n    return headerMenuPlugin;\r\n  }\r\n\r\n  /** Create an undo redo buffer used by the Excel like copy */\r\n  createUndoRedoBuffer() {\r\n    const commandQueue: any[] = [];\r\n    let commandCtr = 0;\r\n\r\n    this.undoRedoBuffer = {\r\n      queueAndExecuteCommand: (editCommand: any) => {\r\n        commandQueue[commandCtr] = editCommand;\r\n        commandCtr++;\r\n        editCommand.execute();\r\n      },\r\n      undo: () => {\r\n        if (commandCtr === 0) { return; }\r\n        commandCtr--;\r\n        const command = commandQueue[commandCtr];\r\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\r\n          command.undo();\r\n        }\r\n      },\r\n      redo: () => {\r\n        if (commandCtr >= commandQueue.length) { return; }\r\n        const command = commandQueue[commandCtr];\r\n        commandCtr++;\r\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\r\n          command.execute();\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  /** Hide a column from the grid */\r\n  hideColumn(column: Column) {\r\n    if (this._grid && this.visibleColumns) {\r\n      const columnIndex = this._grid.getColumnIndex(column.id);\r\n      this.visibleColumns = this.removeColumnByIndex(this.visibleColumns, columnIndex);\r\n      this._grid.setColumns(this.visibleColumns);\r\n    }\r\n  }\r\n\r\n  /** Attach an undo shortcut key hook that will redo/undo the copy buffer */\r\n  hookUndoShortcutKey() {\r\n    // undo shortcut\r\n    $(document).keydown((e) => {\r\n      if (e.which === 90 && (e.ctrlKey || e.metaKey)) {    // CTRL + (shift) + Z\r\n        if (e.shiftKey) {\r\n          this.undoRedoBuffer.redo();\r\n        } else {\r\n          this.undoRedoBuffer.undo();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Dispose of all the controls & plugins */\r\n  dispose() {\r\n    this._grid = null;\r\n    this._dataView = null;\r\n    this.visibleColumns = [];\r\n\r\n    // dispose of each control/plugin if it has a destroy method\r\n    this.extensionList.forEach((item) => {\r\n      if (item && item.service && item.service.destroy) {\r\n        item.service.destroy();\r\n      }\r\n    });\r\n    this.extensionList = [];\r\n  }\r\n\r\n  /** Create Grid Menu with Custom Commands if user has enabled Filters and/or uses a Backend Service (OData, GraphQL) */\r\n  private addGridMenuCustomCommands() {\r\n    const backendApi = this._gridOptions.backendServiceApi || null;\r\n    const gridMenuCustomItems: GridMenuItem[] = [];\r\n\r\n    if (this._gridOptions && this._gridOptions.enableFiltering) {\r\n      // show grid menu: clear all filters\r\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllFiltersCommand) {\r\n        gridMenuCustomItems.push(\r\n          {\r\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllFiltersCommand || 'fa fa-filter text-danger',\r\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_FILTERS') : Constants.TEXT_CLEAR_ALL_FILTERS,\r\n            disabled: false,\r\n            command: 'clear-filter',\r\n            positionOrder: 50\r\n          }\r\n        );\r\n      }\r\n\r\n      // show grid menu: toggle filter row\r\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideToggleFilterCommand) {\r\n        gridMenuCustomItems.push(\r\n          {\r\n            iconCssClass: this._gridOptions.gridMenu.iconToggleFilterCommand || 'fa fa-random',\r\n            title: this._gridOptions.enableTranslate ? this.translate.instant('TOGGLE_FILTER_ROW') : Constants.TEXT_TOGGLE_FILTER_ROW,\r\n            disabled: false,\r\n            command: 'toggle-filter',\r\n            positionOrder: 52\r\n          }\r\n        );\r\n      }\r\n\r\n      // show grid menu: refresh dataset\r\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideRefreshDatasetCommand && backendApi) {\r\n        gridMenuCustomItems.push(\r\n          {\r\n            iconCssClass: this._gridOptions.gridMenu.iconRefreshDatasetCommand || 'fa fa-refresh',\r\n            title: this._gridOptions.enableTranslate ? this.translate.instant('REFRESH_DATASET') : Constants.TEXT_REFRESH_DATASET,\r\n            disabled: false,\r\n            command: 'refresh-dataset',\r\n            positionOrder: 54\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._gridOptions.enableSorting) {\r\n      // show grid menu: clear all sorting\r\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllSortingCommand) {\r\n        gridMenuCustomItems.push(\r\n          {\r\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllSortingCommand || 'fa fa-unsorted text-danger',\r\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_SORTING') : Constants.TEXT_CLEAR_ALL_SORTING,\r\n            disabled: false,\r\n            command: 'clear-sorting',\r\n            positionOrder: 51\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n    // show grid menu: export to file\r\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportCsvCommand) {\r\n      gridMenuCustomItems.push(\r\n        {\r\n          iconCssClass: this._gridOptions.gridMenu.iconExportCsvCommand || 'fa fa-download',\r\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_CSV') : Constants.TEXT_EXPORT_IN_CSV_FORMAT,\r\n          disabled: false,\r\n          command: 'export-csv',\r\n          positionOrder: 53\r\n        }\r\n      );\r\n    }\r\n    // show grid menu: export to text file as tab delimited\r\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportTextDelimitedCommand) {\r\n      gridMenuCustomItems.push(\r\n        {\r\n          iconCssClass: this._gridOptions.gridMenu.iconExportTextDelimitedCommand || 'fa fa-download',\r\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_TAB_DELIMITED') : Constants.TEXT_EXPORT_IN_TEXT_FORMAT,\r\n          disabled: false,\r\n          command: 'export-text-delimited',\r\n          positionOrder: 54\r\n        }\r\n      );\r\n    }\r\n\r\n    // add the custom \"Commands\" title if there are any commands\r\n    if (this._gridOptions && this._gridOptions.gridMenu && (gridMenuCustomItems.length > 0 || this._gridOptions.gridMenu.customItems.length > 0)) {\r\n      this._gridOptions.gridMenu.customTitle = this._gridOptions.gridMenu.customTitle || this.getPickerTitleOutputString('customTitle', 'gridMenu');\r\n    }\r\n\r\n    return gridMenuCustomItems;\r\n  }\r\n\r\n  /**\r\n   * Create Header Menu with Custom Commands if user has enabled Header Menu\r\n   * @param options\r\n   * @param columnDefinitions\r\n   * @return header menu\r\n   */\r\n  private addHeaderMenuCustomCommands(options: GridOption, columnDefinitions: Column[]): HeaderMenu {\r\n    const headerMenuOptions = options.headerMenu;\r\n\r\n    if (columnDefinitions && Array.isArray(columnDefinitions) && options.enableHeaderMenu) {\r\n      columnDefinitions.forEach((columnDef: Column) => {\r\n        if (columnDef && !columnDef.excludeFromHeaderMenu) {\r\n          if (!columnDef.header || !columnDef.header.menu) {\r\n            columnDef.header = {\r\n              menu: {\r\n                items: []\r\n              }\r\n            };\r\n          }\r\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\r\n\r\n          // Sorting Commands\r\n          if (options.enableSorting && columnDef.sortable && !headerMenuOptions.hideSortCommands) {\r\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-asc').length === 0) {\r\n              columnHeaderMenuItems.push({\r\n                iconCssClass: headerMenuOptions.iconSortAscCommand || 'fa fa-sort-asc',\r\n                title: options.enableTranslate ? this.translate.instant('SORT_ASCENDING') : Constants.TEXT_SORT_ASCENDING,\r\n                command: 'sort-asc',\r\n                positionOrder: 50\r\n              });\r\n            }\r\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-desc').length === 0) {\r\n              columnHeaderMenuItems.push({\r\n                iconCssClass: headerMenuOptions.iconSortDescCommand || 'fa fa-sort-desc',\r\n                title: options.enableTranslate ? this.translate.instant('SORT_DESCENDING') : Constants.TEXT_SORT_DESCENDING,\r\n                command: 'sort-desc',\r\n                positionOrder: 51\r\n              });\r\n            }\r\n          }\r\n\r\n          // Hide Column Command\r\n          if (!headerMenuOptions.hideColumnHideCommand && columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'hide').length === 0) {\r\n            columnHeaderMenuItems.push({\r\n              iconCssClass: headerMenuOptions.iconColumnHideCommand || 'fa fa-times',\r\n              title: options.enableTranslate ? this.translate.instant('HIDE_COLUMN') : Constants.TEXT_HIDE_COLUMN,\r\n              command: 'hide',\r\n              positionOrder: 52\r\n            });\r\n          }\r\n\r\n          this.translateItems(columnHeaderMenuItems, 'titleKey', 'title');\r\n\r\n          // sort the custom items by their position in the list\r\n          columnHeaderMenuItems.sort((itemA, itemB) => {\r\n            if (itemA && itemB && itemA.hasOwnProperty('positionOrder') && itemB.hasOwnProperty('positionOrder')) {\r\n              return itemA.positionOrder - itemB.positionOrder;\r\n            }\r\n            return 0;\r\n          });\r\n        }\r\n      });\r\n\r\n    }\r\n\r\n    return headerMenuOptions;\r\n  }\r\n\r\n  /** Execute the Header Menu Commands that was triggered by the onCommand subscribe */\r\n  executeHeaderMenuInternalCommands(e: Event, args: HeaderMenuOnCommandArgs) {\r\n    if (args && args.command) {\r\n      switch (args.command) {\r\n        case 'hide':\r\n          this.hideColumn(args.column);\r\n          this.autoResizeColumns();\r\n          break;\r\n        case 'sort-asc':\r\n        case 'sort-desc':\r\n          // get previously sorted columns\r\n          const cols: ColumnSort[] = this.sortService.getPreviousColumnSorts(args.column.id + '');\r\n\r\n          // add to the column array, the column sorted by the header menu\r\n          cols.push({ sortCol: args.column, sortAsc: (args.command === 'sort-asc') });\r\n          if (this._gridOptions.backendServiceApi) {\r\n            this.sortService.onBackendSortChanged(e, { multiColumnSort: true, sortCols: cols, grid: this._grid });\r\n          } else {\r\n            this.sortService.onLocalSortChanged(this._grid, this._dataView, cols);\r\n          }\r\n\r\n          // update the this.gridObj sortColumns array which will at the same add the visual sort icon(s) on the UI\r\n          const newSortColumns: ColumnSort[] = cols.map((col) => {\r\n            return { columnId: col.sortCol.id, sortAsc: col.sortAsc };\r\n          });\r\n          this._grid.setSortColumns(newSortColumns); // add sort icon in UI\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute the Grid Menu Custom command callback that was triggered by the onCommand subscribe\r\n   * These are the default internal custom commands\r\n   * @param event\r\n   * @param GridMenuItem args\r\n   */\r\n  executeGridMenuInternalCustomCommands(e: Event, args: GridMenuItem) {\r\n    if (args && args.command) {\r\n      switch (args.command) {\r\n        case 'clear-filter':\r\n          this.filterService.clearFilters();\r\n          this._dataView.refresh();\r\n          break;\r\n        case 'clear-sorting':\r\n          this.sortService.clearSorting();\r\n          this._dataView.refresh();\r\n          break;\r\n        case 'export-csv':\r\n          this.exportService.exportToFile({\r\n            delimiter: DelimiterType.comma,\r\n            filename: 'export',\r\n            format: FileType.csv,\r\n            useUtf8WithBom: true\r\n          });\r\n          break;\r\n        case 'export-text-delimited':\r\n          this.exportService.exportToFile({\r\n            delimiter: DelimiterType.tab,\r\n            filename: 'export',\r\n            format: FileType.txt,\r\n            useUtf8WithBom: true\r\n          });\r\n          break;\r\n        case 'toggle-filter':\r\n          this._grid.setHeaderRowVisibility(!this._grid.getOptions().showHeaderRow);\r\n          break;\r\n        case 'toggle-toppanel':\r\n          this._grid.setTopPanelVisibility(!this._grid.getOptions().showTopPanel);\r\n          break;\r\n        case 'refresh-dataset':\r\n          this.refreshBackendDataset();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Refresh the dataset through the Backend Service */\r\n  refreshBackendDataset(gridOptions?: GridOption) {\r\n    let query = '';\r\n\r\n    // user can pass new set of grid options which will override current ones\r\n    if (gridOptions) {\r\n      this._gridOptions = { ...this._gridOptions, ...gridOptions };\r\n    }\r\n\r\n    const backendApi = this._gridOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (backendApi.service) {\r\n      query = backendApi.service.buildQuery();\r\n    }\r\n\r\n    if (query && query !== '') {\r\n      // keep start time & end timestamps & return it after process execution\r\n      const startTime = new Date();\r\n\r\n      if (backendApi.preProcess) {\r\n        backendApi.preProcess();\r\n      }\r\n\r\n      // the process could be an Observable (like HttpClient) or a Promise\r\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n      const observableOrPromise = backendApi.process(query);\r\n\r\n      castToPromise(observableOrPromise).then((processResult: GraphqlResult | any) => {\r\n        const endTime = new Date();\r\n\r\n        // from the result, call our internal post process to update the Dataset and Pagination info\r\n        if (processResult && backendApi.internalPostProcess) {\r\n          backendApi.internalPostProcess(processResult);\r\n        }\r\n\r\n        // send the response process to the postProcess callback\r\n        if (backendApi.postProcess) {\r\n          if (processResult instanceof Object) {\r\n            processResult.statistics = {\r\n              startTime,\r\n              endTime,\r\n              executionTime: endTime.valueOf() - startTime.valueOf(),\r\n              totalItemCount: this._gridOptions && this._gridOptions.pagination && this._gridOptions.pagination.totalItems\r\n            };\r\n          }\r\n          backendApi.postProcess(processResult);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a column from the grid by it's index in the grid\r\n   * @param array input\r\n   * @param index\r\n   */\r\n  removeColumnByIndex(array: any[], index: number) {\r\n    return array.filter((el: any, i: number) => {\r\n      return index !== i;\r\n    });\r\n  }\r\n\r\n  /** Translate the Column Picker and it's last 2 checkboxes */\r\n  translateColumnPicker() {\r\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\r\n    if (this._gridOptions && this._gridOptions.columnPicker) {\r\n      this.emptyColumnPickerTitles();\r\n\r\n      this._gridOptions.columnPicker.columnTitle = this.getPickerTitleOutputString('columnTitle', 'columnPicker');\r\n      this._gridOptions.columnPicker.forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'columnPicker');\r\n      this._gridOptions.columnPicker.syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');\r\n    }\r\n\r\n    // translate all columns (including non-visible)\r\n    this.translateItems(this.allColumns, 'headerKey', 'name');\r\n\r\n    // re-initialize the Column Picker, that will recreate all the list\r\n    // doing an \"init()\" won't drop any existing command attached\r\n    if (this.columnPickerControl.init) {\r\n      this.columnPickerControl.init(this._grid);\r\n    }\r\n  }\r\n\r\n  /** Translate the Grid Menu titles and column picker */\r\n  translateGridMenu() {\r\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\r\n    // we also need to call the control init so that it takes the new Grid object with latest values\r\n    if (this._gridOptions && this._gridOptions.gridMenu) {\r\n      this._gridOptions.gridMenu.customItems = [];\r\n      this.emptyGridMenuTitles();\r\n\r\n      // merge original user grid menu items with internal items\r\n      // then sort all Grid Menu Custom Items (sorted by pointer, no need to use the return)\r\n      this._gridOptions.gridMenu.customItems = [...this.userOriginalGridMenu.customItems || [], ...this.addGridMenuCustomCommands()];\r\n      this.translateItems(this._gridOptions.gridMenu.customItems, 'titleKey', 'title');\r\n      this.sortItems(this._gridOptions.gridMenu.customItems, 'positionOrder');\r\n\r\n      this._gridOptions.gridMenu.columnTitle = this.getPickerTitleOutputString('columnTitle', 'gridMenu');\r\n      this._gridOptions.gridMenu.forceFitTitle = this.getPickerTitleOutputString('forceFitTitle', 'gridMenu');\r\n      this._gridOptions.gridMenu.syncResizeTitle = this.getPickerTitleOutputString('syncResizeTitle', 'gridMenu');\r\n\r\n      // translate all columns (including non-visible)\r\n      this.translateItems(this.allColumns, 'headerKey', 'name');\r\n\r\n      // re-initialize the Grid Menu, that will recreate all the menus & list\r\n      // doing an \"init()\" won't drop any existing command attached\r\n      if (this.gridMenuControl.init) {\r\n        this.gridMenuControl.init(this._grid);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Translate the Header Menu titles, we need to loop through all column definition to re-translate them\r\n   */\r\n  translateHeaderMenu() {\r\n    if (this._gridOptions && this._gridOptions.headerMenu) {\r\n      this.resetHeaderMenuTranslations(this.visibleColumns);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Translate manually the header titles.\r\n   * We could optionally pass a locale (that will change currently loaded locale), else it will use current locale\r\n   * @param locale to use\r\n   * @param new column definitions (optional)\r\n   */\r\n  translateColumnHeaders(locale?: boolean | string, newColumnDefinitions?: Column[]) {\r\n    if (locale) {\r\n      this.translate.use(locale as string);\r\n    }\r\n\r\n    const columnDefinitions = newColumnDefinitions || this._columnDefinitions;\r\n\r\n    this.translateItems(columnDefinitions, 'headerKey', 'name');\r\n    this.translateItems(this.allColumns, 'headerKey', 'name');\r\n\r\n    // re-render the column headers\r\n    this.renderColumnHeaders(columnDefinitions);\r\n  }\r\n\r\n  /**\r\n   * Render (or re-render) the column headers from column definitions.\r\n   * calling setColumns() will trigger a grid re-render\r\n   */\r\n  renderColumnHeaders(newColumnDefinitions?: Column[]) {\r\n    const collection = newColumnDefinitions || this._columnDefinitions;\r\n    if (Array.isArray(collection) && this._grid && this._grid.setColumns) {\r\n      this._grid.setColumns(collection);\r\n    }\r\n  }\r\n\r\n  private emptyColumnPickerTitles() {\r\n    this._gridOptions.columnPicker.columnTitle = '';\r\n    this._gridOptions.columnPicker.forceFitTitle = '';\r\n    this._gridOptions.columnPicker.syncResizeTitle = '';\r\n  }\r\n\r\n  private emptyGridMenuTitles() {\r\n    this._gridOptions.gridMenu.customTitle = '';\r\n    this._gridOptions.gridMenu.columnTitle = '';\r\n    this._gridOptions.gridMenu.forceFitTitle = '';\r\n    this._gridOptions.gridMenu.syncResizeTitle = '';\r\n  }\r\n\r\n  /**\r\n   * @return default Grid Menu options\r\n   */\r\n  private getDefaultGridMenuOptions(): GridMenu {\r\n    return {\r\n      customTitle: undefined,\r\n      columnTitle: this.getPickerTitleOutputString('columnTitle', 'gridMenu'),\r\n      forceFitTitle: this.getPickerTitleOutputString('forceFitTitle', 'gridMenu'),\r\n      syncResizeTitle: this.getPickerTitleOutputString('syncResizeTitle', 'gridMenu'),\r\n      iconCssClass: 'fa fa-bars',\r\n      menuWidth: 18,\r\n      customItems: [],\r\n      hideClearAllFiltersCommand: false,\r\n      hideRefreshDatasetCommand: false,\r\n      hideToggleFilterCommand: false,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @return default Header Menu options\r\n   */\r\n  private getDefaultHeaderMenuOptions(): HeaderMenu {\r\n    return {\r\n      autoAlignOffset: 12,\r\n      minWidth: 140,\r\n      hideColumnHideCommand: false,\r\n      hideSortCommands: false,\r\n      title: ''\r\n    };\r\n  }\r\n\r\n  /**\r\n   * From a Grid Menu object property name, we will return the correct title output string following this order\r\n   * 1- if user provided a title, use it as the output title\r\n   * 2- else if user provided a title key, use it to translate the output title\r\n   * 3- else if nothing is provided use\r\n   */\r\n  private getPickerTitleOutputString(propName: string, pickerName: 'gridMenu' | 'columnPicker') {\r\n    let output = '';\r\n    const picker = this._gridOptions && this._gridOptions[pickerName] || {};\r\n    const enableTranslate = this._gridOptions && this._gridOptions.enableTranslate || false;\r\n\r\n    const title = picker && picker[propName];\r\n    const titleKey = picker && picker[`${propName}Key`];\r\n\r\n    if (titleKey) {\r\n      output = this.translate.instant(titleKey || ' ');\r\n    } else {\r\n      switch (propName) {\r\n        case 'customTitle':\r\n          output = title || (enableTranslate ? this.translate.instant('COMMANDS') : Constants.TEXT_COMMANDS);\r\n          break;\r\n        case 'columnTitle':\r\n          output = title || (enableTranslate ? this.translate.instant('COLUMNS') : Constants.TEXT_COLUMNS);\r\n          break;\r\n        case 'forceFitTitle':\r\n          output = title || (enableTranslate ? this.translate.instant('FORCE_FIT_COLUMNS') : Constants.TEXT_FORCE_FIT_COLUMNS);\r\n          break;\r\n        case 'syncResizeTitle':\r\n          output = title || (enableTranslate ? this.translate.instant('SYNCHRONOUS_RESIZE') : Constants.TEXT_SYNCHRONOUS_RESIZE);\r\n          break;\r\n        default:\r\n          output = title;\r\n          break;\r\n      }\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Reset all the Grid Menu options which have text to translate\r\n   * @param grid menu object\r\n   */\r\n  private resetHeaderMenuTranslations(columnDefinitions: Column[]) {\r\n    columnDefinitions.forEach((columnDef: Column) => {\r\n      if (columnDef && columnDef.header && columnDef.header && columnDef.header.menu && columnDef.header.menu.items) {\r\n        if (!columnDef.excludeFromHeaderMenu) {\r\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\r\n\r\n          columnHeaderMenuItems.forEach((item) => {\r\n            switch (item.command) {\r\n              case 'sort-asc':\r\n                item.title = this.translate.instant('SORT_ASCENDING') || Constants.TEXT_SORT_ASCENDING;\r\n                break;\r\n              case 'sort-desc':\r\n                item.title = this.translate.instant('SORT_DESCENDING') || Constants.TEXT_SORT_DESCENDING;\r\n                break;\r\n              case 'hide':\r\n                item.title = this.translate.instant('HIDE_COLUMN') || Constants.TEXT_HIDE_COLUMN;\r\n                break;\r\n            }\r\n\r\n            // re-translate if there's a \"titleKey\"\r\n            if (this._gridOptions && this._gridOptions.enableTranslate) {\r\n              this.translateItems(columnHeaderMenuItems, 'titleKey', 'title');\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sort items in an array by a property name\r\n   * @params items array\r\n   * @param property name to sort with\r\n   * @return sorted array\r\n   */\r\n  private sortItems(items: any[], propertyName: string) {\r\n    // sort the custom items by their position in the list\r\n    items.sort((itemA, itemB) => {\r\n      if (itemA && itemB && itemA.hasOwnProperty(propertyName) && itemB.hasOwnProperty(propertyName)) {\r\n        return itemA[propertyName] - itemB[propertyName];\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  /** Translate the an array of items from an input key and assign to the output key */\r\n  private translateItems(items: any[], inputKey: string, outputKey: string) {\r\n    for (const item of items) {\r\n      if (item[inputKey]) {\r\n        item[outputKey] = this.translate.instant(item[inputKey]);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
    "/**\r\n * This GraphqlQueryBuilder class is a lib that already exist\r\n * but was causing issues with TypeScript, RequireJS and other bundler/packagers\r\n * and so I rewrote it in pure TypeScript.\r\n *\r\n * The previous lib can be viewed here at this Github\r\n * https://github.com/codemeasandwich/graphql-query-builder\r\n */\r\nexport default class GraphqlQueryBuilder {\r\n  alias: string;\r\n  head: any[] = [];\r\n  body: any;\r\n\r\n  /* Constructor, query/mutator you wish to use, and an alias or filter arguments. */\r\n  constructor(private queryFnName: string, aliasOrFilter?: string | object) {\r\n    if (typeof aliasOrFilter === 'function') {\r\n      this.alias = aliasOrFilter;\r\n    } else if (typeof aliasOrFilter === 'object') {\r\n      this.filter(aliasOrFilter);\r\n    } else if (undefined === aliasOrFilter && 2 === arguments.length) {\r\n      throw new TypeError(`You have passed undefined as Second argument to \"Query\"`);\r\n    } else if (undefined !== aliasOrFilter) {\r\n      throw new TypeError(`Second argument to \"Query\" should be an alias name(String) or filter arguments(Object). was passed ${aliasOrFilter}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The parameters to run the query against.\r\n   * @param filters An object mapping attribute to values\r\n   */\r\n  filter(filters: any) {\r\n    for (const prop of Object.keys(filters)) {\r\n      if (typeof filters[prop] === 'function') {\r\n        continue;\r\n      }\r\n      const val = this.getGraphQLValue(filters[prop]);\r\n      if (val === '{}') {\r\n        continue;\r\n      }\r\n      this.head.push(`${prop}:${val}`);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Outlines the properties you wish to be returned from the query.\r\n   * @param properties representing each attribute you want Returned\r\n   */\r\n  find(...searches: any[]) { // THIS NEED TO BE A \"FUNCTION\" to scope 'arguments'\r\n    if (!searches) {\r\n      throw new TypeError(`find value can not be >>falsy<<`);\r\n    }\r\n    // if its a string.. it may have other values\r\n    // else it sould be an Object or Array of maped values\r\n    const searchKeys = (searches.length === 1 && Array.isArray(searches[0])) ? searches[0] : searches;\r\n    this.body = this.parceFind(searchKeys);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set an alias for this result.\r\n   * @param alias\r\n   */\r\n  setAlias(alias: string) {\r\n    this.alias = alias;\r\n  }\r\n\r\n  /**\r\n   * Return to the formatted query string\r\n   * @return\r\n   */\r\n  toString() {\r\n    if (this.body === undefined) {\r\n      throw new ReferenceError(`return properties are not defined. use the 'find' function to defined them`);\r\n    }\r\n\r\n    return `${(this.alias) ? (this.alias + ':') : ''} ${this.queryFnName} ${(this.head.length > 0) ? '(' + this.head.join(',') + ')' : ''}  { ${this.body} }`;\r\n  }\r\n\r\n  // --\r\n  // PRIVATE FUNCTIONS\r\n  // -----------------\r\n\r\n  private parceFind(_levelA: any[]) {\r\n    const propsA = _levelA.map((currentValue, index) => {\r\n      const itemX = _levelA[index];\r\n\r\n      if (itemX instanceof GraphqlQueryBuilder) {\r\n        return itemX.toString();\r\n      } else if (!Array.isArray(itemX) && typeof itemX === 'object') {\r\n        const propsAA = Object.keys(itemX);\r\n        if (1 !== propsAA.length) {\r\n          throw new RangeError(`Alias objects should only have one value. was passed: ${JSON.stringify(itemX)}`);\r\n        }\r\n        const propS = propsAA[0];\r\n        const item = itemX[propS];\r\n\r\n        if (Array.isArray(item)) {\r\n          return new GraphqlQueryBuilder(propS).find(item);\r\n        }\r\n        return `${propS} : ${item} `;\r\n      } else if (typeof itemX === 'string') {\r\n        return itemX;\r\n      } else {\r\n        throw new RangeError(`cannot handle Find value of ${itemX}`);\r\n      }\r\n    });\r\n\r\n    return propsA.join(',');\r\n  }\r\n\r\n  private getGraphQLValue(value: any) {\r\n    if (typeof value === 'string') {\r\n      value = JSON.stringify(value);\r\n    } else if (Array.isArray(value)) {\r\n      value = value.map(item => {\r\n        return this.getGraphQLValue(item);\r\n      }).join();\r\n      value = `[${value}]`;\r\n    } else if (value instanceof Date) {\r\n      value = JSON.stringify(value);\r\n    } else if (value !== null && typeof value === 'object') {\r\n      value = this.objectToString(value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private objectToString(obj: any) {\r\n    const sourceA = [];\r\n\r\n    for (const prop of Object.keys(obj)) {\r\n      if (typeof obj[prop] === 'function') {\r\n        continue;\r\n      }\r\n      sourceA.push(`${prop}:${this.getGraphQLValue(obj[prop])}`);\r\n    }\r\n    return `{${sourceA.join()}}`;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { mapOperatorType, mapOperatorByFieldType } from './utilities';\r\nimport {\r\n  BackendService,\r\n  Column,\r\n  ColumnFilter,\r\n  ColumnFilters,\r\n  ColumnSort,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  FieldType,\r\n  FilterChangedArgs,\r\n  GraphqlCursorPaginationOption,\r\n  GraphqlDatasetFilter,\r\n  GraphqlFilteringOption,\r\n  GraphqlPaginationOption,\r\n  GraphqlServiceOption,\r\n  GraphqlSortingOption,\r\n  GridOption,\r\n  Pagination,\r\n  PaginationChangedArgs,\r\n  SortChangedArgs,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport QueryBuilder from './graphqlQueryBuilder';\r\n\r\n// timer for keeping track of user typing waits\r\nlet timer: any;\r\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\r\nconst DEFAULT_ITEMS_PER_PAGE = 25;\r\nconst DEFAULT_PAGE_SIZE = 20;\r\n\r\nexport class GraphqlService implements BackendService {\r\n  private _currentFilters: ColumnFilters | CurrentFilter[];\r\n  private _currentPagination: CurrentPagination;\r\n  private _currentSorters: CurrentSorter[];\r\n  private _columnDefinitions: Column[];\r\n  private _grid: any;\r\n  options: GraphqlServiceOption;\r\n  pagination: Pagination | undefined;\r\n  defaultOrderBy: GraphqlSortingOption = { field: 'id', direction: SortDirection.ASC };\r\n  defaultPaginationOptions: GraphqlPaginationOption | GraphqlCursorPaginationOption = {\r\n    first: DEFAULT_ITEMS_PER_PAGE,\r\n    offset: 0\r\n  };\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Build the GraphQL query, since the service include/exclude cursor, the output query will be different.\r\n   * @param serviceOptions GraphqlServiceOption\r\n   */\r\n  buildQuery() {\r\n    if (!this.options || !this.options.datasetName || (!this._columnDefinitions && !this.options.columnDefinitions)) {\r\n      throw new Error('GraphQL Service requires \"datasetName\" & \"columnDefinitions\" properties for it to work');\r\n    }\r\n\r\n    // get the column definitions and exclude some if they were tagged as excluded\r\n    let columnDefinitions = this._columnDefinitions || this.options.columnDefinitions;\r\n    columnDefinitions = columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\r\n\r\n    const queryQb = new QueryBuilder('query');\r\n    const datasetQb = new QueryBuilder(this.options.datasetName);\r\n    const dataQb = (this.options.isWithCursor) ? new QueryBuilder('edges') : new QueryBuilder('nodes');\r\n\r\n    // get all the columnds Ids for the filters to work\r\n    let columnIds: string[] = [];\r\n    if (columnDefinitions && Array.isArray(columnDefinitions)) {\r\n      for (const column of columnDefinitions) {\r\n        columnIds.push(column.field);\r\n\r\n        // if extra \"fields\" are passed, also push them to columnIds\r\n        if (column.fields) {\r\n          columnIds.push(...column.fields);\r\n        }\r\n      }\r\n      // columnIds = columnDefinitions.map((column) => column.field);\r\n    } else {\r\n      columnIds = this.options.columnIds || [];\r\n    }\r\n\r\n    // Slickgrid also requires the \"id\" field to be part of DataView\r\n    // add it to the GraphQL query if it wasn't already part of the list\r\n    if (columnIds.indexOf('id') === -1) {\r\n      columnIds.unshift('id');\r\n    }\r\n\r\n    const filters = this.buildFilterQuery(columnIds);\r\n\r\n    if (this.options.isWithCursor) {\r\n      // ...pageInfo { hasNextPage, endCursor }, edges { cursor, node { _filters_ } }\r\n      const pageInfoQb = new QueryBuilder('pageInfo');\r\n      pageInfoQb.find('hasNextPage', 'endCursor');\r\n      dataQb.find(['cursor', { node: filters }]);\r\n      datasetQb.find(['totalCount', pageInfoQb, dataQb]);\r\n    } else {\r\n      // ...nodes { _filters_ }\r\n      dataQb.find(filters);\r\n      datasetQb.find(['totalCount', dataQb]);\r\n    }\r\n\r\n    // add dataset filters, could be Pagination and SortingFilters and/or FieldFilters\r\n    const datasetFilters: GraphqlDatasetFilter = {\r\n      ...this.options.paginationOptions,\r\n      first: ((this.options.paginationOptions && this.options.paginationOptions.first) ? this.options.paginationOptions.first : ((this.pagination && this.pagination.pageSize) ? this.pagination.pageSize : null)) || this.defaultPaginationOptions.first\r\n    };\r\n\r\n    if (!this.options.isWithCursor) {\r\n      datasetFilters.offset = ((this.options.paginationOptions && this.options.paginationOptions.hasOwnProperty('offset')) ? +this.options.paginationOptions['offset'] : 0);\r\n    }\r\n\r\n    if (this.options.sortingOptions && Array.isArray(this.options.sortingOptions) && this.options.sortingOptions.length > 0) {\r\n      // orderBy: [{ field:x, direction: 'ASC' }]\r\n      datasetFilters.orderBy = this.options.sortingOptions;\r\n    }\r\n    if (this.options.filteringOptions && Array.isArray(this.options.filteringOptions) && this.options.filteringOptions.length > 0) {\r\n      // filterBy: [{ field: date, operator: '>', value: '2000-10-10' }]\r\n      datasetFilters.filterBy = this.options.filteringOptions;\r\n    }\r\n    if (this.options.addLocaleIntoQuery) {\r\n      // first: 20, ... locale: \"en-CA\"\r\n      datasetFilters.locale = this._gridOptions && this._gridOptions.i18n && this._gridOptions.i18n.currentLang || 'en';\r\n    }\r\n    if (this.options.extraQueryArguments) {\r\n      // first: 20, ... userId: 123\r\n      for (const queryArgument of this.options.extraQueryArguments) {\r\n        datasetFilters[queryArgument.field] = queryArgument.value;\r\n      }\r\n    }\r\n\r\n    // query { users(first: 20, orderBy: [], filterBy: [])}\r\n    datasetQb.filter(datasetFilters);\r\n    queryQb.find(datasetQb);\r\n\r\n    const enumSearchProperties = ['direction:', 'field:', 'operator:'];\r\n    return this.trimDoubleQuotesOnEnumField(queryQb.toString(), enumSearchProperties, this.options.keepArgumentFieldDoubleQuotes || false);\r\n  }\r\n\r\n  /**\r\n   * From an input array of strings, we want to build a GraphQL query string.\r\n   * The process has to take the dot notation and parse it into a valid GraphQL query\r\n   * Following this SO answer https://stackoverflow.com/a/47705476/1212166\r\n   *\r\n   * INPUT\r\n   *  ['firstName', 'lastName', 'billing.address.street', 'billing.address.zip']\r\n   * OUTPUT\r\n   * firstName, lastName, billing{address{street, zip}}\r\n   * @param inputArray\r\n   */\r\n  buildFilterQuery(inputArray: string[]) {\r\n\r\n    const set = (o: any = {}, a: any) => {\r\n      const k = a.shift();\r\n      o[k] = a.length ? set(o[k], a) : null;\r\n      return o;\r\n    };\r\n\r\n    const output = inputArray.reduce((o: any, a: string) => set(o, a.split('.')), {});\r\n\r\n    return JSON.stringify(output)\r\n      .replace(/\\\"|\\:|null/g, '')\r\n      .replace(/^\\{/, '')\r\n      .replace(/\\}$/, '');\r\n  }\r\n\r\n  init(serviceOptions?: GraphqlServiceOption, pagination?: Pagination, grid?: any): void {\r\n    this._grid = grid;\r\n    this.options = serviceOptions || {};\r\n    this.pagination = pagination;\r\n\r\n    if (grid && grid.getColumns) {\r\n      this._columnDefinitions = serviceOptions.columnDefinitions || grid.getColumns();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get an initialization of Pagination options\r\n   * @return Pagination Options\r\n   */\r\n  getInitPaginationOptions(): GraphqlDatasetFilter {\r\n    return (this.options.isWithCursor) ? { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE) } : { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE), offset: 0 };\r\n  }\r\n\r\n  /** Get the GraphQL dataset name */\r\n  getDatasetName(): string {\r\n    return this.options.datasetName || '';\r\n  }\r\n\r\n  /** Get the Filters that are currently used by the grid */\r\n  getCurrentFilters(): ColumnFilters | CurrentFilter[] {\r\n    return this._currentFilters;\r\n  }\r\n\r\n  /** Get the Pagination that is currently used by the grid */\r\n  getCurrentPagination(): CurrentPagination {\r\n    return this._currentPagination;\r\n  }\r\n\r\n  /** Get the Sorters that are currently used by the grid */\r\n  getCurrentSorters(): CurrentSorter[] {\r\n    return this._currentSorters;\r\n  }\r\n\r\n  /*\r\n   * Reset the pagination options\r\n   */\r\n  resetPaginationOptions() {\r\n    let paginationOptions;\r\n    if (this.options.isWithCursor) {\r\n      // first, last, after, before\r\n      paginationOptions = {\r\n        after: '',\r\n        before: undefined,\r\n        last: undefined\r\n      } as GraphqlCursorPaginationOption;\r\n    } else {\r\n      // first, last, offset\r\n      paginationOptions = (this.options.paginationOptions || this.getInitPaginationOptions()) as GraphqlPaginationOption;\r\n      paginationOptions.offset = 0;\r\n    }\r\n\r\n    // save current pagination as Page 1 and page size as \"first\" set size\r\n    this._currentPagination = {\r\n      pageNumber: 1,\r\n      pageSize: paginationOptions.first\r\n    };\r\n\r\n    this.updateOptions({ paginationOptions });\r\n  }\r\n\r\n  updateOptions(serviceOptions?: GraphqlServiceOption) {\r\n    this.options = { ...this.options, ...serviceOptions };\r\n  }\r\n\r\n  /*\r\n   * FILTERING\r\n   */\r\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\r\n    const gridOptions: GridOption = this._gridOptions || args.grid.getOptions();\r\n    const backendApi = gridOptions.backendServiceApi;\r\n\r\n    if (backendApi === undefined) {\r\n      throw new Error('Something went wrong in the GraphqlService, \"backendServiceApi\" is not initialized');\r\n    }\r\n\r\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\r\n    let debounceTypingDelay = 0;\r\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\r\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\r\n    }\r\n\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    this._currentFilters = this.castFilterToColumnFilter(args.columnFilters);\r\n\r\n    const promise = new Promise<string>((resolve, reject) => {\r\n      if (!args || !args.grid) {\r\n        throw new Error('Something went wrong when trying create the GraphQL Backend Service, it seems that \"args\" is not populated correctly');\r\n      }\r\n\r\n      // reset Pagination, then build the GraphQL query which we will use in the WebAPI callback\r\n      // wait a minimum user typing inactivity before processing any query\r\n      clearTimeout(timer);\r\n      timer = setTimeout(() => {\r\n        // loop through all columns to inspect filters & set the query\r\n        this.updateFilters(args.columnFilters, false);\r\n\r\n        this.resetPaginationOptions();\r\n        resolve(this.buildQuery());\r\n      }, debounceTypingDelay);\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  /*\r\n   * PAGINATION\r\n   * With cursor, the query can have 4 arguments (first, after, last, before), for example:\r\n   *   users (first:20, after:\"YXJyYXljb25uZWN0aW9uOjM=\") {\r\n   *     totalCount\r\n   *     pageInfo {\r\n   *       hasNextPage\r\n   *       endCursor\r\n   *     }\r\n   *     edges {\r\n   *       cursor\r\n   *       node {\r\n   *         name\r\n   *         gender\r\n   *       }\r\n   *     }\r\n   *   }\r\n   * Without cursor, the query can have 3 arguments (first, last, offset), for example:\r\n   *   users (first:20, offset: 10) {\r\n   *     totalCount\r\n   *     nodes {\r\n   *       name\r\n   *       gender\r\n   *     }\r\n   *   }\r\n   */\r\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\r\n    const pageSize = +(args.pageSize || ((this.pagination) ? this.pagination.pageSize : DEFAULT_PAGE_SIZE));\r\n    this.updatePagination(args.newPage, pageSize);\r\n\r\n    // build the GraphQL query which we will use in the WebAPI callback\r\n    return this.buildQuery();\r\n  }\r\n\r\n  /*\r\n   * SORTING\r\n   * we will use sorting as per a Facebook suggestion on a Github issue (with some small changes)\r\n   * https://github.com/graphql/graphql-relay-js/issues/20#issuecomment-220494222\r\n   */\r\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\r\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\r\n\r\n    // loop through all columns to inspect sorters & set the query\r\n    this.updateSorters(sortColumns);\r\n\r\n    // build the GraphQL query which we will use in the WebAPI callback\r\n    return this.buildQuery();\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect filters & update backend service filteringOptions\r\n   * @param columnFilters\r\n   */\r\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset: boolean) {\r\n    const searchByArray: GraphqlFilteringOption[] = [];\r\n    let searchValue: string | string[];\r\n\r\n    for (const columnId in columnFilters) {\r\n      if (columnFilters.hasOwnProperty(columnId)) {\r\n        const columnFilter = columnFilters[columnId];\r\n\r\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\r\n        let columnDef: Column | undefined;\r\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\r\n          columnDef = this._columnDefinitions.find((column: Column) => column.id === columnFilter.columnId);\r\n        } else {\r\n          columnDef = columnFilter.columnDef;\r\n        }\r\n        if (!columnDef) {\r\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\r\n        }\r\n\r\n        const fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\r\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\r\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\r\n        if (typeof fieldSearchValue === 'undefined') {\r\n          fieldSearchValue = '';\r\n        }\r\n\r\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\r\n          throw new Error(`GraphQL filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {model: Filters.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\r\n        }\r\n\r\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\r\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n        let operator = columnFilter.operator || ((matches) ? matches[1] : '');\r\n        searchValue = (!!matches) ? matches[2] : '';\r\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\r\n\r\n        // no need to query if search value is empty\r\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\r\n          continue;\r\n        }\r\n\r\n        // when having more than 1 search term (we need to create a CSV string for GraphQL \"IN\" or \"NOT IN\" filter search)\r\n        if (searchTerms && searchTerms.length > 1) {\r\n          searchValue = searchTerms.join(',');\r\n        } else if (typeof searchValue === 'string') {\r\n          // escaping the search value\r\n          searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\r\n          if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\r\n            operator = (operator === '*' || operator === '*z') ? 'endsWith' : 'startsWith';\r\n          }\r\n        }\r\n\r\n        // if we didn't find an Operator but we have a Filter Type, we should use default Operator\r\n        // multipleSelect is \"IN\", while singleSelect is \"EQ\", else don't map any operator\r\n        if (!operator && columnDef.filter) {\r\n          operator = columnDef.filter.operator;\r\n        }\r\n\r\n        // if we still don't have an operator find the proper Operator to use by it's field type\r\n        if (!operator) {\r\n          operator = mapOperatorByFieldType(columnDef.type || FieldType.string);\r\n        }\r\n\r\n        searchByArray.push({\r\n          field: fieldName,\r\n          operator: mapOperatorType(operator),\r\n          value: searchValue\r\n        });\r\n      }\r\n    }\r\n\r\n    // update the service options with filters for the buildQuery() to work later\r\n    this.updateOptions({ filteringOptions: searchByArray });\r\n  }\r\n\r\n  /**\r\n   * Update the pagination component with it's new page number and size\r\n   * @param newPage\r\n   * @param pageSize\r\n   */\r\n  updatePagination(newPage: number, pageSize: number) {\r\n    this._currentPagination = {\r\n      pageNumber: newPage,\r\n      pageSize\r\n    };\r\n\r\n    let paginationOptions;\r\n    if (this.options.isWithCursor) {\r\n      paginationOptions = {\r\n        first: pageSize\r\n      };\r\n    } else {\r\n      paginationOptions = {\r\n        first: pageSize,\r\n        offset: (newPage - 1) * pageSize\r\n      };\r\n    }\r\n\r\n    this.updateOptions({ paginationOptions });\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect sorters & update backend service sortingOptions\r\n   * @param columnFilters\r\n   */\r\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\r\n    let currentSorters: CurrentSorter[] = [];\r\n    let graphqlSorters: GraphqlSortingOption[] = [];\r\n\r\n    if (!sortColumns && presetSorters) {\r\n      // make the presets the current sorters, also make sure that all direction are in uppercase for GraphQL\r\n      currentSorters = presetSorters;\r\n      currentSorters.forEach((sorter) => sorter.direction = sorter.direction.toUpperCase() as SortDirectionString);\r\n\r\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\r\n      const tmpSorterArray = currentSorters.map((sorter) => {\r\n        const columnDef = this._columnDefinitions.find((column: Column) => column.id === sorter.columnId);\r\n        if (columnDef) {\r\n          graphqlSorters.push({\r\n            field: (columnDef.queryField || columnDef.queryFieldSorter || columnDef.field || columnDef.id) + '',\r\n            direction: sorter.direction\r\n          });\r\n        }\r\n        return {\r\n          columnId: sorter.columnId,\r\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\r\n        };\r\n      });\r\n      this._grid.setSortColumns(tmpSorterArray);\r\n    } else if (sortColumns && !presetSorters) {\r\n      // build the orderBy array, it could be multisort, example\r\n      // orderBy:[{field: lastName, direction: ASC}, {field: firstName, direction: DESC}]\r\n      if (sortColumns && sortColumns.length === 0) {\r\n        graphqlSorters = new Array(this.defaultOrderBy); // when empty, use the default sort\r\n        currentSorters = new Array({ columnId: this.defaultOrderBy.field, direction: this.defaultOrderBy.direction });\r\n      } else {\r\n        if (sortColumns) {\r\n          for (const column of sortColumns) {\r\n            if (column && column.sortCol) {\r\n              currentSorters.push({\r\n                columnId: column.sortCol.id + '',\r\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n              });\r\n\r\n              graphqlSorters.push({\r\n                field: (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '',\r\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // keep current Sorters and update the service options with the new sorting\r\n    this._currentSorters = currentSorters;\r\n    this.updateOptions({ sortingOptions: graphqlSorters });\r\n  }\r\n\r\n  /**\r\n   * A function which takes an input string and removes double quotes only\r\n   * on certain fields are identified as GraphQL enums (except fields with dot notation)\r\n   * For example let say we identified (\"direction:\", \"sort\") as word which are GraphQL enum fields\r\n   * then the result will be:\r\n   * FROM\r\n   * query { users (orderBy:[{field:\"firstName\", direction:\"ASC\"} }]) }\r\n   * TO\r\n   * query { users (orderBy:[{field: firstName, direction: ASC}})}\r\n   *\r\n   * EXCEPTIONS (fields with dot notation \".\" which are inside a \"field:\")\r\n   * these fields will keep double quotes while everything else will be stripped of double quotes\r\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: \"ASC\"} }\r\n   * TO\r\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: ASC}}\r\n   * @param inputStr input string\r\n   * @param enumSearchWords array of enum words to filter\r\n   * @returns outputStr output string\r\n   */\r\n  trimDoubleQuotesOnEnumField(inputStr: string, enumSearchWords: string[], keepArgumentFieldDoubleQuotes: boolean) {\r\n    const patternWordInQuotes = `\\s?((field:\\s*)?\".*?\")`;\r\n    let patternRegex = enumSearchWords.join(patternWordInQuotes + '|');\r\n    patternRegex += patternWordInQuotes; // the last one should also have the pattern but without the pipe \"|\"\r\n    // example with (field: & direction:):  /field:s?(\".*?\")|direction:s?(\".*?\")/\r\n    const reg = new RegExp(patternRegex, 'g');\r\n\r\n    return inputStr.replace(reg, (group1, group2, group3) => {\r\n      // remove double quotes except when the string starts with a \"field:\"\r\n      let removeDoubleQuotes = true;\r\n      if (group1.startsWith('field:') && keepArgumentFieldDoubleQuotes) {\r\n        removeDoubleQuotes = false;\r\n      }\r\n      const rep = removeDoubleQuotes ? group1.replace(/\"/g, '') : group1;\r\n      return rep;\r\n    });\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // -------------------\r\n  /**\r\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\r\n   * @param columnFilters\r\n   */\r\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    const filtersArray: ColumnFilter[] = (typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters;\r\n\r\n    return filtersArray.map((filter) => {\r\n      const columnDef = filter.columnDef;\r\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\r\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\r\n      if (filter.operator) {\r\n        tmpFilter.operator = filter.operator;\r\n      }\r\n      if (Array.isArray(filter.searchTerms)) {\r\n        tmpFilter.searchTerms = filter.searchTerms;\r\n      }\r\n      return tmpFilter;\r\n    });\r\n  }\r\n}\r\n",
    "declare interface StringConstructor {\r\n  allTitleCase(inputStr: string): string;\r\n  format(inputStr: string, args: any): string;\r\n  padZero(length: number): string;\r\n  trim(inputStr: string): string;\r\n  titleCase(inputStr: string): string;\r\n}\r\n\r\n\r\nString.format = function(format: string, args): string {\r\n  // const args = (Array.isArray(arguments[1])) ? arguments[1] : Array.prototype.slice.call(arguments, 1);\r\n\r\n  return format.replace(/{(\\d+)}/g, function (match, number) {\r\n    return (typeof args[number] !== 'undefined') ? args[number] : match;\r\n  });\r\n};\r\n\r\nString.padZero = function (this: string, length: number) {\r\n  let s = this;\r\n  while (s.length < length) {\r\n    s = '0' + s;\r\n  }\r\n  return s;\r\n};\r\n\r\n/**\r\n * Trim any extra white space from the string\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.trim = function(inputStr: string): string {\r\n  return inputStr ? inputStr.replace(/\\s+/g, ' ') : inputStr;\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.allTitleCase = function(inputStr: string): string {\r\n  return inputStr.replace(/\\w\\S*/g, function(outputStr) {\r\n     return outputStr.charAt(0).toUpperCase() + outputStr.substr(1).toLowerCase();\r\n  });\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n*/\r\nString.titleCase = function(inputStr: string): string {\r\n  return inputStr.charAt(0).toUpperCase() + inputStr.slice(1);\r\n};\r\n",
    "import './global-utilities';\r\nimport { CaseType, OdataOption } from './../models/index';\r\n\r\nexport class OdataService {\r\n  _columnFilters: any;\r\n  _defaultSortBy: string;\r\n  _odataOptions: OdataOption;\r\n\r\n  constructor() {\r\n    this._odataOptions = {\r\n      filterQueue: [],\r\n      orderBy: ''\r\n    };\r\n    this._defaultSortBy = '';\r\n    this._columnFilters = {};\r\n  }\r\n\r\n  /*\r\n    * Build the OData query string from all the options provided\r\n    * @return string OData query\r\n    */\r\n  buildQuery(): string {\r\n    this._odataOptions.filterQueue = [];\r\n    const queryTmpArray = [];\r\n\r\n    if (this._odataOptions.top) {\r\n      queryTmpArray.push(`$top=${this._odataOptions.top}`);\r\n    }\r\n    if (this._odataOptions.skip) {\r\n      queryTmpArray.push(`$skip=${this._odataOptions.skip}`);\r\n    }\r\n    if (this._odataOptions.orderBy) {\r\n      let argument = '';\r\n      if (Array.isArray(this._odataOptions.orderBy)) {\r\n        argument = this._odataOptions.orderBy.join(','); // csv, that will form a query example like: $orderby=RoleName asc, Id desc\r\n      } else {\r\n        argument = this._odataOptions.orderBy;\r\n      }\r\n      queryTmpArray.push(`$orderby=${argument}`);\r\n    }\r\n    if (this._odataOptions.filterBy || this._odataOptions.filter) {\r\n      if (this._odataOptions.filter) {\r\n        this._odataOptions.filterQueue = [];\r\n        let filterStr = this._odataOptions.filter;\r\n        if (Array.isArray(this._odataOptions.filter)) {\r\n          filterStr = this._odataOptions.filter.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n        }\r\n        this._odataOptions.filterQueue.push(`(${filterStr})`);\r\n      }\r\n      // filterBy are passed manually by the user, however we will only add it if the column wasn't yet filtered\r\n      if (!!this._odataOptions.filterBy && !!this._odataOptions.filterBy.fieldName && !this._columnFilters[this._odataOptions.filterBy.fieldName.toLowerCase()]) {\r\n        if (this._odataOptions.filterBy.searchTerm !== '') {\r\n          this.saveColumnFilter(this._odataOptions.filterBy.fieldName.toLowerCase(), this._odataOptions.filterBy.searchTerm, this._odataOptions.filterBy.searchTerms);\r\n          this.updateFilterFromListTerms(this._odataOptions.filterBy);\r\n        }\r\n      }\r\n    }\r\n    if (this._odataOptions.filterQueue.length > 0) {\r\n      const query = this._odataOptions.filterQueue.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n      this._odataOptions.filter = query; // overwrite with\r\n      queryTmpArray.push(`$filter=${query}`);\r\n    }\r\n\r\n    // join all the odata functions by a '&'\r\n    return queryTmpArray.join('&');\r\n  }\r\n\r\n  getFilterByColumn(columnName: string): string {\r\n    return (!!this._columnFilters[columnName]) ? this._columnFilters[columnName] : null;\r\n  }\r\n\r\n  getFilterCount(): number {\r\n    return (this._odataOptions.filterQueue) ? this._odataOptions.filterQueue.length : 0;\r\n  }\r\n\r\n  get columnFilters(): any[] {\r\n    return this._columnFilters;\r\n  }\r\n\r\n  get options(): OdataOption {\r\n    return this._odataOptions;\r\n  }\r\n\r\n  set options(options: OdataOption) {\r\n    this._odataOptions = options;\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string) {\r\n    delete this._columnFilters[fieldName];\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: any, searchTerms?: any[]) {\r\n    this._columnFilters[fieldName] = {\r\n      search: searchTerms,\r\n      value\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update the filter by a list of terms usually passed manually by the user as default filters\r\n   * @param filterOptions\r\n   * @returns\r\n   */\r\n  updateFilterFromListTerms(filterOptions: any) {\r\n    // build the filter query\r\n    if (Array.isArray(filterOptions)) {\r\n      filterOptions.forEach((filterOptionObject) => {\r\n        this.updateFilterFromTerm(filterOptionObject);\r\n      });\r\n    } else {\r\n      this.updateFilterFromTerm(filterOptions);\r\n    }\r\n  }\r\n\r\n  updateFilterFromTerm(filterOptions: any) {\r\n    let searchBy = '';\r\n    const tmpSearchByArray = [];\r\n    const fieldName = filterOptions.fieldName;\r\n    const fieldSearchTerms = filterOptions.searchTerms;\r\n    const operator = filterOptions.operator;\r\n\r\n    // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n    if (!!fieldSearchTerms && fieldSearchTerms.length > 0) {\r\n      const tmpSearchTerms = [];\r\n\r\n      if (operator === 'IN') {\r\n        // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n        for (let j = 0, lnj = fieldSearchTerms.length; j < lnj; j++) {\r\n          tmpSearchTerms.push(`${fieldName} eq '${fieldSearchTerms[j]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' or ');\r\n        searchBy = `$(${searchBy})`;\r\n      } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n        // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n        for (let k = 0, lnk = fieldSearchTerms.length; k < lnk; k++) {\r\n          tmpSearchTerms.push(`${fieldName} ne '${fieldSearchTerms[k]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' and ');\r\n        searchBy = `$(${searchBy})`;\r\n      }\r\n    }\r\n\r\n    // push to our temp array and also trim white spaces\r\n    tmpSearchByArray.push(String.trim(searchBy));\r\n\r\n    // add to the filter queue only if it doesn't exist in the queue\r\n    const filter = (tmpSearchByArray.length > 0) ? tmpSearchByArray.join(' and ') : '';\r\n    if (this._odataOptions.filterQueue && this._odataOptions.filterQueue.indexOf(filter) === -1) {\r\n      this._odataOptions.filterQueue.push(filter);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change any OData options that will be used to build the query\r\n   * @param object options\r\n   */\r\n  updateOptions(options: OdataOption) {\r\n    for (const property of Object.keys(options)) {\r\n      if (options.hasOwnProperty(property)) {\r\n        this._odataOptions[property] = options[property]; // replace of the property\r\n      }\r\n\r\n      // we need to keep the defaultSortBy for references whenever the user removes his Sorting\r\n      // then we would revert to the defaultSortBy and the only way is to keep a hard copy here\r\n      if (property === 'orderBy' || property === 'sortBy') {\r\n        let sortBy = options[property];\r\n\r\n        // make sure first char of each orderBy field is capitalize\r\n        if (this._odataOptions.caseType === CaseType.pascalCase) {\r\n          if (Array.isArray(sortBy)) {\r\n            sortBy.forEach((field, index, inputArray) => {\r\n              inputArray[index] = String.titleCase(field);\r\n            });\r\n          } else {\r\n            sortBy = String.titleCase(options[property]);\r\n          }\r\n        }\r\n        this._odataOptions.orderBy = sortBy;\r\n        this._defaultSortBy = sortBy;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
    "import './global-utilities';\r\nimport { parseUtcDate } from './utilities';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  BackendService,\r\n  CaseType,\r\n  Column,\r\n  ColumnFilter,\r\n  ColumnFilters,\r\n  ColumnSort,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  FilterChangedArgs,\r\n  FieldType,\r\n  GridOption,\r\n  OdataOption,\r\n  Pagination,\r\n  PaginationChangedArgs,\r\n  SearchTerm,\r\n  SortChangedArgs,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport { OdataService } from './odata.service';\r\n\r\nlet timer: any;\r\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\r\nconst DEFAULT_ITEMS_PER_PAGE = 25;\r\nconst DEFAULT_PAGE_SIZE = 20;\r\n\r\n@Injectable()\r\nexport class GridOdataService implements BackendService {\r\n  private _currentFilters: CurrentFilter[];\r\n  private _currentPagination: CurrentPagination;\r\n  private _currentSorters: CurrentSorter[];\r\n  private _columnDefinitions: Column[];\r\n  private _grid: any;\r\n  odataService: OdataService;\r\n  options: OdataOption;\r\n  pagination: Pagination | undefined;\r\n  defaultOptions: OdataOption = {\r\n    top: DEFAULT_ITEMS_PER_PAGE,\r\n    orderBy: '',\r\n    caseType: CaseType.pascalCase\r\n  };\r\n\r\n  constructor() {\r\n    this.odataService = new OdataService();\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  buildQuery(): string {\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  init(options: OdataOption, pagination?: Pagination, grid?: any): void {\r\n    this._grid = grid;\r\n    const mergedOptions = { ...this.defaultOptions, ...options };\r\n    if (pagination && pagination.pageSize) {\r\n      mergedOptions.top = pagination.pageSize;\r\n    }\r\n    this.odataService.options = { ...mergedOptions, top: mergedOptions.top || this.defaultOptions.top };\r\n    this.options = this.odataService.options;\r\n    this.pagination = pagination;\r\n\r\n    // save current pagination as Page 1 and page size as \"top\"\r\n    this._currentPagination = {\r\n      pageNumber: 1,\r\n      pageSize: this.odataService.options.top || this.defaultOptions.top\r\n    };\r\n\r\n    if (grid && grid.getColumns) {\r\n      this._columnDefinitions = (options && options.columnDefinitions) || grid.getColumns();\r\n      this._columnDefinitions = this._columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\r\n    }\r\n  }\r\n\r\n  updateOptions(serviceOptions?: OdataOption) {\r\n    this.options = { ...this.options, ...serviceOptions };\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string): void {\r\n    this.odataService.removeColumnFilter(fieldName);\r\n  }\r\n\r\n  /** Get the Filters that are currently used by the grid */\r\n  getCurrentFilters(): CurrentFilter[] {\r\n    return this._currentFilters;\r\n  }\r\n\r\n  /** Get the Pagination that is currently used by the grid */\r\n  getCurrentPagination(): CurrentPagination {\r\n    return this._currentPagination;\r\n  }\r\n\r\n  /** Get the Sorters that are currently used by the grid */\r\n  getCurrentSorters(): CurrentSorter[] {\r\n    return this._currentSorters;\r\n  }\r\n\r\n  /*\r\n   * Reset the pagination options\r\n   */\r\n  resetPaginationOptions() {\r\n    this.odataService.updateOptions({\r\n      skip: 0\r\n    });\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: string, terms?: any[]) {\r\n    this.odataService.saveColumnFilter(fieldName, value, terms);\r\n  }\r\n\r\n  /*\r\n   * FILTERING\r\n   */\r\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\r\n    const serviceOptions: GridOption = args.grid.getOptions();\r\n    const backendApi = serviceOptions.backendServiceApi;\r\n\r\n    if (backendApi === undefined) {\r\n      throw new Error('Something went wrong in the GridOdataService, \"backendServiceApi\" is not initialized');\r\n    }\r\n\r\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\r\n    let debounceTypingDelay = 0;\r\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\r\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\r\n    }\r\n\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    this._currentFilters = this.castFilterToColumnFilter(args.columnFilters);\r\n\r\n    const promise = new Promise<string>((resolve, reject) => {\r\n      // reset Pagination, then build the OData query which we will use in the WebAPI callback\r\n      // wait a minimum user typing inactivity before processing any query\r\n      clearTimeout(timer);\r\n      timer = setTimeout(() => {\r\n        // loop through all columns to inspect filters & set the query\r\n        this.updateFilters(args.columnFilters);\r\n\r\n        this.resetPaginationOptions();\r\n        resolve(this.odataService.buildQuery());\r\n      }, debounceTypingDelay);\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  /*\r\n   * PAGINATION\r\n   */\r\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\r\n    const pageSize = +(args.pageSize || DEFAULT_PAGE_SIZE);\r\n    this.updatePagination(args.newPage, pageSize);\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  /*\r\n   * SORTING\r\n   */\r\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\r\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\r\n\r\n    // loop through all columns to inspect sorters & set the query\r\n    this.updateSorters(sortColumns);\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect filters & update backend service filteringOptions\r\n   * @param columnFilters\r\n   */\r\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset?: boolean) {\r\n    let searchBy = '';\r\n    const searchByArray: string[] = [];\r\n\r\n    // loop through all columns to inspect filters\r\n    for (const columnId in columnFilters) {\r\n      if (columnFilters.hasOwnProperty(columnId)) {\r\n        const columnFilter = columnFilters[columnId];\r\n\r\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\r\n        let columnDef: Column | undefined;\r\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\r\n          columnDef = this._columnDefinitions.find((column: Column) => {\r\n            return column.id === columnFilter.columnId;\r\n          });\r\n        } else {\r\n          columnDef = columnFilter.columnDef;\r\n        }\r\n        if (!columnDef) {\r\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\r\n        }\r\n\r\n        let fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\r\n        const fieldType = columnDef.type || 'string';\r\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\r\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\r\n        if (typeof fieldSearchValue === 'undefined') {\r\n          fieldSearchValue = '';\r\n        }\r\n\r\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\r\n          throw new Error(`ODdata filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {model: Filters.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\r\n        }\r\n\r\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\r\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n        const operator = columnFilter.operator || ((matches) ? matches[1] : '');\r\n        let searchValue = (!!matches) ? matches[2] : '';\r\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\r\n        const bypassOdataQuery = columnFilter.bypassBackendQuery || false;\r\n\r\n        // no need to query if search value is empty\r\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\r\n          this.removeColumnFilter(fieldName);\r\n          continue;\r\n        }\r\n\r\n        // escaping the search value\r\n        searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\r\n        searchValue = encodeURIComponent(searchValue); // encode URI of the final search value\r\n\r\n        // extra query arguments\r\n        if (bypassOdataQuery) {\r\n          // push to our temp array and also trim white spaces\r\n          if (fieldName) {\r\n            this.saveColumnFilter(fieldName, fieldSearchValue, searchTerms);\r\n          }\r\n        } else {\r\n          searchBy = '';\r\n\r\n          // titleCase the fieldName so that it matches the WebApi names\r\n          if (this.odataService.options.caseType === CaseType.pascalCase) {\r\n            fieldName = String.titleCase(fieldName || '');\r\n          }\r\n\r\n          // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n          if (searchTerms && searchTerms.length > 1) {\r\n            const tmpSearchTerms = [];\r\n\r\n            if (operator === 'IN') {\r\n              // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n              for (let j = 0, lnj = searchTerms.length; j < lnj; j++) {\r\n                tmpSearchTerms.push(`${fieldName} eq '${searchTerms[j]}'`);\r\n              }\r\n              searchBy = tmpSearchTerms.join(' or ');\r\n              searchBy = `(${searchBy})`;\r\n            } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n              // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n              for (let k = 0, lnk = searchTerms.length; k < lnk; k++) {\r\n                tmpSearchTerms.push(`${fieldName} ne '${searchTerms[k]}'`);\r\n              }\r\n              searchBy = tmpSearchTerms.join(' and ');\r\n              searchBy = `(${searchBy})`;\r\n            }\r\n          } else if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar !== '') {\r\n            // first/last character is a '*' will be a startsWith or endsWith\r\n            searchBy = (operator === '*' || operator === '*z')\r\n              ? `endswith(${fieldName}, '${searchValue}')`\r\n              : `startswith(${fieldName}, '${searchValue}')`;\r\n          } else if (fieldType === FieldType.date) {\r\n            // date field needs to be UTC and within DateTime function\r\n            const dateFormatted = parseUtcDate(searchValue, true);\r\n            if (dateFormatted) {\r\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} DateTime'${dateFormatted}'`;\r\n            }\r\n          } else if (fieldType === FieldType.string) {\r\n            // string field needs to be in single quotes\r\n            if (operator === '') {\r\n              searchBy = `substringof('${searchValue}', ${fieldName})`;\r\n            } else {\r\n              // searchBy = `substringof('${searchValue}', ${fieldNameCased}) ${this.mapOdataOperator(operator)} true`;\r\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} '${searchValue}'`;\r\n            }\r\n          } else {\r\n            // any other field type (or undefined type)\r\n            searchValue = fieldType === FieldType.number ? searchValue : `'${searchValue}'`;\r\n            searchBy = `${fieldName} ${this.mapOdataOperator(operator)} ${searchValue}`;\r\n          }\r\n\r\n          // push to our temp array and also trim white spaces\r\n          if (searchBy !== '') {\r\n            searchByArray.push(String.trim(searchBy));\r\n            this.saveColumnFilter(fieldName || '', fieldSearchValue, searchTerms);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // update the service options with filters for the buildQuery() to work later\r\n    this.odataService.updateOptions({\r\n      filter: (searchByArray.length > 0) ? searchByArray.join(' and ') : '',\r\n      skip: undefined\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the pagination component with it's new page number and size\r\n   * @param newPage\r\n   * @param pageSize\r\n   */\r\n  updatePagination(newPage: number, pageSize: number) {\r\n    this._currentPagination = {\r\n      pageNumber: newPage,\r\n      pageSize\r\n    };\r\n\r\n    this.odataService.updateOptions({\r\n      top: pageSize,\r\n      skip: (newPage - 1) * pageSize\r\n    });\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect sorters & update backend service orderBy\r\n   * @param columnFilters\r\n   */\r\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\r\n    let sortByArray: any[] = [];\r\n    const sorterArray: CurrentSorter[] = [];\r\n\r\n    if (!sortColumns && presetSorters) {\r\n      // make the presets the current sorters, also make sure that all direction are in lowercase for OData\r\n      sortByArray = presetSorters;\r\n      sortByArray.forEach((sorter) => sorter.direction = sorter.direction.toLowerCase() as SortDirectionString);\r\n\r\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\r\n      const tmpSorterArray = sortByArray.map((sorter) => {\r\n        sorterArray.push({\r\n          columnId: sorter.columnId + '',\r\n          direction: sorter.direction\r\n        });\r\n        return {\r\n          columnId: sorter.columnId,\r\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\r\n        };\r\n      });\r\n      this._grid.setSortColumns(tmpSorterArray);\r\n    } else if (sortColumns && !presetSorters) {\r\n      // build the SortBy string, it could be multisort, example: customerNo asc, purchaserName desc\r\n      if (sortColumns && sortColumns.length === 0) {\r\n        sortByArray = new Array(this.defaultOptions.orderBy); // when empty, use the default sort\r\n      } else {\r\n        if (sortColumns) {\r\n          for (const column of sortColumns) {\r\n            if (column.sortCol) {\r\n              let fieldName = (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '';\r\n              let columnFieldName = (column.sortCol.field || column.sortCol.id) + '';\r\n              if (this.odataService.options.caseType === CaseType.pascalCase) {\r\n                fieldName = String.titleCase(fieldName);\r\n                columnFieldName = String.titleCase(columnFieldName);\r\n              }\r\n\r\n              sorterArray.push({\r\n                columnId: columnFieldName,\r\n                direction: column.sortAsc ? 'asc' : 'desc'\r\n              });\r\n            }\r\n          }\r\n          sortByArray = sorterArray;\r\n        }\r\n      }\r\n    }\r\n\r\n    // transform the sortby array into a CSV string for OData\r\n    sortByArray = sortByArray as CurrentSorter[];\r\n    const csvString = sortByArray.map((sorter) => `${sorter.columnId} ${sorter.direction.toLowerCase()}`).join(',');\r\n    this.odataService.updateOptions({\r\n      orderBy: (this.odataService.options.caseType === CaseType.pascalCase) ? String.titleCase(csvString) : csvString\r\n    });\r\n\r\n    // keep current Sorters and update the service options with the new sorting\r\n    this._currentSorters = sortByArray as CurrentSorter[];\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // -------------------\r\n  /**\r\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\r\n   * @param columnFilters\r\n   */\r\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    const filtersArray: ColumnFilter[] = ((typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters) as CurrentFilter[];\r\n\r\n    return filtersArray.map((filter) => {\r\n      const columnDef = filter.columnDef;\r\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\r\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\r\n      if (filter.operator) {\r\n        tmpFilter.operator = filter.operator;\r\n      }\r\n      if (Array.isArray(filter.searchTerms)) {\r\n        tmpFilter.searchTerms = filter.searchTerms;\r\n      }\r\n      return tmpFilter;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Mapper for mathematical operators (ex.: <= is \"le\", > is \"gt\")\r\n   * @param string operator\r\n   * @returns string map\r\n   */\r\n  private mapOdataOperator(operator: string) {\r\n    let map = '';\r\n    switch (operator) {\r\n      case '<':\r\n        map = 'lt';\r\n        break;\r\n      case '<=':\r\n        map = 'le';\r\n        break;\r\n      case '>':\r\n        map = 'gt';\r\n        break;\r\n      case '>=':\r\n        map = 'ge';\r\n        break;\r\n      case '<>':\r\n      case '!=':\r\n        map = 'ne';\r\n        break;\r\n      case '=':\r\n      case '==':\r\n      default:\r\n        map = 'eq';\r\n        break;\r\n    }\r\n\r\n    return map;\r\n  }\r\n}\r\n",
    "import { OnEventArgs, CellArgs, GridOption } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GridEventService {\n  private _eventHandler: any = new Slick.EventHandler();\n\n  /* OnCellChange Event */\n  attachOnCellChange(grid: any, dataView: any) {\n    // subscribe to this Slickgrid event of onCellChange\n    this._eventHandler.subscribe(grid.onCellChange, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellChange property (a callback function), then run it\n      if (typeof column.onCellChange === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onCellChange\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellChanges.... function\n        column.onCellChange(e, returnedArgs);\n      }\n    });\n  }\n  /* OnClick Event */\n  attachOnClick(grid: any, dataView: any) {\n    this._eventHandler.subscribe(grid.onClick, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellClick property (a callback function), then run it\n      if (typeof column.onCellClick === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onClick\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellClick.... function\n        column.onCellClick(e, returnedArgs);\n      }\n    });\n  }\n\n  dispose() {\n    this._eventHandler.unsubscribeAll();\n  }\n}\n",
    "import {\r\n  Column,\r\n  CurrentColumn,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  GridOption,\r\n  GridState,\r\n  GridStateChange,\r\n  GridStateType\r\n} from './../models/index';\r\nimport { ControlAndPluginService, FilterService, SortService } from './../services/index';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\ndeclare var Slick: any;\r\n\r\nexport class GridStateService {\r\n  private _eventHandler = new Slick.EventHandler();\r\n  private _columns: Column[] = [];\r\n  private _currentColumns: CurrentColumn[] = [];\r\n  private _grid: any;\r\n  private controlAndPluginService: ControlAndPluginService;\r\n  private filterService: FilterService;\r\n  private sortService: SortService;\r\n  private subscriptions: Subscription[] = [];\r\n  onGridStateChanged = new Subject<GridStateChange>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Export Service\r\n   * @param grid\r\n   * @param filterService\r\n   * @param sortService\r\n   * @param dataView\r\n   */\r\n  init(grid: any, controlAndPluginService: ControlAndPluginService, filterService: FilterService, sortService: SortService): void {\r\n    this._grid = grid;\r\n    this.controlAndPluginService = controlAndPluginService;\r\n    this.filterService = filterService;\r\n    this.sortService = sortService;\r\n\r\n    this.subscribeToAllGridChanges(grid);\r\n  }\r\n\r\n  /** Dispose of all the SlickGrid & Aurelia subscriptions */\r\n  dispose() {\r\n    // unsubscribe all SlickGrid events\r\n    this._eventHandler.unsubscribeAll();\r\n\r\n    // also unsubscribe all Aurelia Subscriptions\r\n    this.subscriptions.forEach((subscription: Subscription) => {\r\n      if (subscription && subscription.unsubscribe) {\r\n        subscription.unsubscribe();\r\n      }\r\n    });\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  /**\r\n   * Get the current grid state (filters/sorters/pagination)\r\n   * @return grid state\r\n   */\r\n  getCurrentGridState(): GridState {\r\n    const gridState: GridState = {\r\n      columns: this.getCurrentColumns(),\r\n      filters: this.getCurrentFilters(),\r\n      sorters: this.getCurrentSorters()\r\n    };\r\n\r\n    const currentPagination = this.getCurrentPagination();\r\n    if (currentPagination) {\r\n      gridState.pagination = currentPagination;\r\n    }\r\n    return gridState;\r\n  }\r\n\r\n  /**\r\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\r\n   * @return current columns\r\n   */\r\n  getColumns(): Column[] {\r\n    return this._columns || this._grid.getColumns();\r\n  }\r\n\r\n  /**\r\n   * From an array of Grid Column Definitions, get the associated Current Columns\r\n   * @param gridColumns\r\n   */\r\n  getAssociatedCurrentColumns(gridColumns: Column[]): CurrentColumn[] {\r\n    const currentColumns: CurrentColumn[] = [];\r\n\r\n    if (gridColumns && Array.isArray(gridColumns)) {\r\n      gridColumns.forEach((column: Column, index: number) => {\r\n        if (column && column.id) {\r\n          currentColumns.push({\r\n            columnId: column.id as string,\r\n            cssClass: column.cssClass || '',\r\n            headerCssClass: column.headerCssClass || '',\r\n            width: column.width || 0\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this._currentColumns = currentColumns;\r\n    return currentColumns;\r\n  }\r\n\r\n  /**\r\n   * From an array of Current Columns, get the associated Grid Column Definitions\r\n   * @param grid\r\n   * @param currentColumns\r\n   */\r\n  getAssociatedGridColumns(grid: any, currentColumns: CurrentColumn[]): Column[] {\r\n    const columns: Column[] = [];\r\n    const gridColumns: Column[] = grid.getColumns();\r\n\r\n    if (currentColumns && Array.isArray(currentColumns)) {\r\n      currentColumns.forEach((currentColumn: CurrentColumn, index: number) => {\r\n        const gridColumn: Column = gridColumns.find((c: Column) => c.id === currentColumn.columnId);\r\n        if (gridColumn && gridColumn.id) {\r\n          columns.push({\r\n            ...gridColumn,\r\n            cssClass: currentColumn.cssClass,\r\n            headerCssClass: currentColumn.headerCssClass,\r\n            width: currentColumn.width\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this._columns = columns;\r\n    return columns;\r\n  }\r\n\r\n  /**\r\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\r\n   * @return current columns\r\n   */\r\n  getCurrentColumns(): CurrentColumn[] {\r\n    let currentColumns: CurrentColumn[] = [];\r\n    if (this._currentColumns && Array.isArray(this._currentColumns) && this._currentColumns.length > 0) {\r\n      currentColumns = this._currentColumns;\r\n    } else {\r\n      currentColumns = this.getAssociatedCurrentColumns(this._grid.getColumns());\r\n    }\r\n\r\n    return currentColumns;\r\n  }\r\n\r\n  /**\r\n   * Get the Filters (and their state, columnId, searchTerm(s)) that are currently applied in the grid\r\n   * @return current filters\r\n   */\r\n  getCurrentFilters(): CurrentFilter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentFilters) {\r\n        return backendService.getCurrentFilters() as CurrentFilter[];\r\n      }\r\n    } else if (this.filterService && this.filterService.getCurrentLocalFilters) {\r\n      return this.filterService.getCurrentLocalFilters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get current Pagination (and it's state, pageNumber, pageSize) that are currently applied in the grid\r\n   * @return current pagination state\r\n   */\r\n  getCurrentPagination(): CurrentPagination | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentPagination) {\r\n        return backendService.getCurrentPagination();\r\n      }\r\n    } else {\r\n      // TODO implement this whenever local pagination gets implemented\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get the current Sorters (and their state, columnId, direction) that are currently applied in the grid\r\n   * @return current sorters\r\n   */\r\n  getCurrentSorters(): CurrentSorter[] | null {\r\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\r\n      const backendService = this._gridOptions.backendServiceApi.service;\r\n      if (backendService && backendService.getCurrentSorters) {\r\n        return backendService.getCurrentSorters() as CurrentSorter[];\r\n      }\r\n    } else if (this.sortService && this.sortService.getCurrentLocalSorters) {\r\n      return this.sortService.getCurrentLocalSorters();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Hook a SlickGrid Extension Event to a Grid State change event\r\n   * @param extension name\r\n   * @param grid\r\n   */\r\n  hookExtensionEventToGridStateChange(extensionName: string, eventName: string) {\r\n    const extension = this.controlAndPluginService && this.controlAndPluginService.getExtensionByName(extensionName);\r\n\r\n    if (extension && extension.service && extension.service[eventName] && extension.service[eventName].subscribe) {\r\n      this._eventHandler.subscribe(extension.service[eventName], (e: Event, args: any) => {\r\n        const columns: Column[] = args && args.columns;\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hook a Grid Event to a Grid State change event\r\n   * @param event name\r\n   * @param grid\r\n   */\r\n  hookSlickGridEventToGridStateChange(eventName: string, grid: any) {\r\n    if (grid && grid[eventName] && grid[eventName].subscribe) {\r\n      this._eventHandler.subscribe(grid[eventName], (e: Event, args: any) => {\r\n        const columns: Column[] = grid.getColumns();\r\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n      });\r\n    }\r\n  }\r\n\r\n  resetColumns(columnDefinitions?: Column[]) {\r\n    const columns: Column[] = columnDefinitions || this._columns;\r\n    const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\r\n    this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\r\n  }\r\n\r\n  /**\r\n   * Subscribe to all necessary SlickGrid or Service Events that deals with a Grid change,\r\n   * when triggered, we will publish a Grid State Event with current Grid State\r\n   */\r\n  subscribeToAllGridChanges(grid: any) {\r\n    // Subscribe to Event Emitter of Filter changed\r\n    this.subscriptions.push(\r\n      this.filterService.onFilterChanged.subscribe((currentFilters: CurrentFilter[]) => {\r\n        // if we use Row Selection or the Checkbox Selector, we need to reset any selection\r\n        if (this._gridOptions.enableRowSelection || this._gridOptions.enableCheckboxSelector) {\r\n          this._grid.setSelectedRows([]);\r\n        }\r\n        this.onGridStateChanged.next({ change: { newValues: currentFilters, type: GridStateType.filter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n    // Subscribe to Event Emitter of Filter cleared\r\n      this.subscriptions.push(\r\n        this.filterService.onFilterCleared.subscribe(() => {\r\n          // if we use Row Selection or the Checkbox Selector, we need to reset any selection\r\n          if (this._gridOptions.enableRowSelection || this._gridOptions.enableCheckboxSelector) {\r\n            this._grid.setSelectedRows([]);\r\n          }\r\n          this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.filter }, gridState: this.getCurrentGridState() });\r\n        })\r\n      );\r\n\r\n    // Subscribe to Event Emitter of Sort changed\r\n    this.subscriptions.push(\r\n      this.sortService.onSortChanged.subscribe((currentSorters: CurrentSorter[]) => {\r\n        this.onGridStateChanged.next({ change: { newValues: currentSorters, type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to Event Emitter of Sort cleared\r\n    this.subscriptions.push(\r\n      this.sortService.onSortCleared.subscribe(() => {\r\n        this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\r\n      })\r\n    );\r\n\r\n    // Subscribe to ColumnPicker and/or GridMenu for show/hide Columns visibility changes\r\n    this.hookExtensionEventToGridStateChange('ColumnPicker', 'onColumnsChanged');\r\n    this.hookExtensionEventToGridStateChange('GridMenu', 'onColumnsChanged');\r\n\r\n    // subscribe to Column Resize & Reordering\r\n    this.hookSlickGridEventToGridStateChange('onColumnsReordered', grid);\r\n    this.hookSlickGridEventToGridStateChange('onColumnsResized', grid);\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport { Injectable } from '@angular/core';\r\nimport { CellArgs, Column, GridOption, OnEventArgs } from './../models/index';\r\nimport { ControlAndPluginService } from './controlAndPlugin.service';\r\nimport { FilterService } from './filter.service';\r\nimport { GridStateService } from './gridState.service';\r\nimport { SortService } from './sort.service';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\ndeclare var Slick: any;\r\n\r\n@Injectable()\r\nexport class GridService {\r\n  private _grid: any;\r\n  private _dataView: any;\r\n\r\n  constructor(private controlAndPluginService: ControlAndPluginService, private filterService: FilterService, private gridStateService: GridStateService, private sortService: SortService, private translate: TranslateService) { }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  init(grid: any, dataView: any): void {\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n  }\r\n\r\n  /**\r\n   * From a SlickGrid Event triggered get the Column Definition and Item Data Context\r\n   *\r\n   * For example the SlickGrid onClick will return cell arguments when subscribing to it.\r\n   * From these cellArgs, we want to get the Column Definition and Item Data\r\n   * @param cell event args\r\n   * @return object with columnDef and dataContext\r\n   */\r\n  getColumnFromEventArguments(args: CellArgs): OnEventArgs {\r\n    if (!args || !args.grid || !args.grid.getColumns || !args.grid.getDataItem) {\r\n      throw new Error('To get the column definition and data, we need to have these arguments passed as objects (row, cell, grid)');\r\n    }\r\n\r\n    return {\r\n      row: args.row,\r\n      cell: args.cell,\r\n      columnDef: args.grid.getColumns()[args.cell],\r\n      dataContext: args.grid.getDataItem(args.row),\r\n      dataView: this._dataView,\r\n      grid: this._grid,\r\n      gridDefinition: this._gridOptions\r\n    };\r\n  }\r\n\r\n  /** Get data item by it's row index number */\r\n  getDataItemByRowNumber(rowNumber: number) {\r\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object');\r\n    }\r\n    return this._grid.getDataItem(rowNumber);\r\n  }\r\n\r\n  /** Chain the item Metadata with our implementation of Metadata at given row index */\r\n  getItemRowMetadata(previousItemMetadata: any) {\r\n    return (rowNumber: number) => {\r\n      const item = this._dataView.getItem(rowNumber);\r\n      let meta = {\r\n        cssClasses: ''\r\n      };\r\n      if (typeof previousItemMetadata === 'object' && !$.isEmptyObject(previousItemMetadata)) {\r\n        meta = previousItemMetadata(rowNumber);\r\n      }\r\n\r\n      if (item && item._dirty) {\r\n        meta.cssClasses = (meta.cssClasses || '') + ' dirty';\r\n      }\r\n      if (item && item.rowClass) {\r\n        meta.cssClasses += ` ${item.rowClass}`;\r\n        meta.cssClasses += ` row${rowNumber}`;\r\n      }\r\n\r\n      return meta;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Highlight then fade a row for x seconds.\r\n   * The implementation follows this SO answer: https://stackoverflow.com/a/19985148/1212166\r\n   * @param rowNumber\r\n   * @param fadeDelay\r\n   */\r\n  highlightRow(rowNumber: number, fadeDelay: number = 1500) {\r\n    // create a SelectionModel if there's not one yet\r\n    if (!this._grid.getSelectionModel()) {\r\n      const rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\r\n      this._grid.setSelectionModel(rowSelectionPlugin);\r\n    }\r\n\r\n    this._grid.setSelectedRows([rowNumber]);\r\n    this._dataView.getItemMetadata = this.getItemRowMetadata(this._dataView.getItemMetadata);\r\n\r\n    const item = this._dataView.getItem(rowNumber);\r\n    if (item && item.id) {\r\n      item.rowClass = 'highlight';\r\n      this._dataView.updateItem(item.id, item);\r\n      const gridOptions = this._grid.getOptions() as GridOption;\r\n\r\n      // highlight the row for a user defined timeout\r\n      $(`#${gridOptions.gridId}`)\r\n          .find(`.highlight.row${rowNumber}`)\r\n          .first();\r\n\r\n      // delete the row's CSS that was attached for highlighting\r\n      setTimeout(() => {\r\n        if (item && item.id) {\r\n          delete item.rowClass;\r\n          const gridIdx = this._dataView.getIdxById(item.id);\r\n          if (gridIdx !== undefined) {\r\n            this._dataView.updateItem(item.id, item);\r\n          }\r\n        }\r\n      }, fadeDelay + 10);\r\n    }\r\n  }\r\n\r\n  /** Get the Data Item from a grid row index */\r\n  getDataItemByRowIndex(index: number) {\r\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object');\r\n    }\r\n\r\n    return this._grid.getDataItem(index);\r\n  }\r\n\r\n  /** Get the Data Item from an array of grid row indexes */\r\n  getDataItemByRowIndexes(indexes: number[]) {\r\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object');\r\n    }\r\n\r\n    const dataItems = [];\r\n\r\n    if (Array.isArray(indexes)) {\r\n      indexes.forEach((idx) => {\r\n        dataItems.push(this._grid.getDataItem(idx));\r\n      });\r\n    }\r\n\r\n    return dataItems;\r\n  }\r\n\r\n  /** Get the currently selected row indexes */\r\n  getSelectedRows() {\r\n    return this._grid.getSelectedRows();\r\n  }\r\n\r\n  /** Get the currently selected rows item data */\r\n  getSelectedRowsDataItem() {\r\n    if (!this._grid || typeof this._grid.getSelectedRows !== 'function') {\r\n      throw new Error('We could not find SlickGrid Grid object');\r\n    }\r\n\r\n    const selectedRowIndexes = this._grid.getSelectedRows();\r\n    return this.getDataItemByRowIndexes(selectedRowIndexes);\r\n  }\r\n\r\n  /** Select the selected row by a row index */\r\n  setSelectedRow(rowIndex: number) {\r\n    this._grid.setSelectedRows([rowIndex]);\r\n  }\r\n\r\n  /** Set selected rows with provided array of row indexes */\r\n  setSelectedRows(rowIndexes: number[]) {\r\n    this._grid.setSelectedRows(rowIndexes);\r\n  }\r\n\r\n  /** Re-Render the Grid */\r\n  renderGrid() {\r\n    if (this._grid && typeof this._grid.invalidate === 'function') {\r\n      this._grid.invalidate();\r\n      this._grid.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset the grid to it's original state (clear any filters, sorting & pagination if exists) .\r\n   * The column definitions could be passed as argument to reset (this can be used after a Grid State reset)\r\n   * The reset will clear the Filters & Sort, then will reset the Columns to their original state\r\n   */\r\n  resetGrid(columnDefinitions?: Column[]) {\r\n    // reset columns to original states & refresh the grid\r\n    if (this._grid && this._dataView) {\r\n      const originalColumns = this.controlAndPluginService.getAllColumns();\r\n      // const originalColumns = columnDefinitions || this._columnDefinitions;\r\n      if (Array.isArray(originalColumns) && originalColumns.length > 0) {\r\n        // set the grid columns to it's original column definitions\r\n        this._grid.setColumns(originalColumns);\r\n        this._dataView.refresh();\r\n        this._grid.autosizeColumns();\r\n        this.gridStateService.resetColumns(columnDefinitions);\r\n      }\r\n    }\r\n    if (this.filterService && this.filterService.clearFilters) {\r\n      this.filterService.clearFilters();\r\n    }\r\n    if (this.sortService && this.sortService.clearSorting) {\r\n      this.sortService.clearSorting();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add an item (data item) to the datagrid, by default it will highlight (flashing) the inserted row but we can disable it too\r\n   * @param object dataItem: item object holding all properties of that row\r\n   * @param shouldHighlightRow do we want to highlight the row after adding item\r\n   */\r\n  addItemToDatagrid(item: any, shouldHighlightRow = true) {\r\n    if (!this._grid || !this._gridOptions || !this._dataView) {\r\n      throw new Error('We could not find SlickGrid Grid, DataView objects');\r\n    }\r\n\r\n    const row = 0;\r\n    this._dataView.insertItem(row, item);\r\n    this._grid.scrollRowIntoView(0); // scroll to row 0\r\n\r\n    // highlight the row we just added, if defined\r\n    if (shouldHighlightRow) {\r\n      this.highlightRow(0, 1500);\r\n    }\r\n\r\n    // refresh dataview & grid\r\n    this._dataView.refresh();\r\n  }\r\n\r\n  /**\r\n   * Add item array (data item) to the datagrid, by default it will highlight (flashing) the inserted row but we can disable it too\r\n   * @param dataItem array: item object holding all properties of that row\r\n   * @param shouldHighlightRow do we want to highlight the row after adding item\r\n   */\r\n  addItemsToDatagrid(items: any[], shouldHighlightRow = true) {\r\n    if (Array.isArray(items)) {\r\n      items.forEach((item: any) => this.addItemToDatagrid(item, shouldHighlightRow));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete an existing item from the datagrid (dataView)\r\n   * @param object item: item object holding all properties of that row\r\n   */\r\n  deleteDataGridItem(item: any) {\r\n    if (!item || !item.hasOwnProperty('id')) {\r\n      throw new Error(`deleteDataGridItem() requires an item object which includes the \"id\" property`);\r\n    }\r\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\r\n    this.deleteDataGridItemById(itemId);\r\n  }\r\n\r\n  /**\r\n   * Delete an existing item from the datagrid (dataView) by it's id\r\n   * @param itemId: item unique id\r\n   */\r\n  deleteDataGridItemById(itemId: string | number) {\r\n    if (itemId === undefined) {\r\n      throw new Error(`Cannot delete a row without a valid \"id\"`);\r\n    }\r\n    if (this._dataView.getRowById(itemId) === undefined) {\r\n      throw new Error(`Could not find the item in the grid by it's associated \"id\"`);\r\n    }\r\n\r\n    // delete the item from the dataView\r\n    this._dataView.deleteItem(itemId);\r\n    this._dataView.refresh();\r\n  }\r\n\r\n  /**\r\n   * Update an existing item with new properties inside the datagrid\r\n   * @param object item: item object holding all properties of that row\r\n   */\r\n  updateDataGridItem(item: any) {\r\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\r\n\r\n    if (itemId === undefined) {\r\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\r\n    }\r\n\r\n    this.updateDataGridItemById(itemId, item);\r\n  }\r\n\r\n  /**\r\n   * Update an existing item in the datagrid by it's id and new properties\r\n   * @param itemId: item unique id\r\n   * @param object item: item object holding all properties of that row\r\n   * @param shouldHighlightRow do we want to highlight the row after update\r\n   */\r\n  updateDataGridItemById(itemId: number | string, item: any, shouldHighlightRow = true) {\r\n    if (itemId === undefined) {\r\n      throw new Error(`Cannot update a row without a valid \"id\"`);\r\n    }\r\n    const row = this._dataView.getRowById(itemId);\r\n\r\n    if (!item || row === undefined) {\r\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\r\n    }\r\n\r\n    const gridIdx = this._dataView.getIdxById(itemId);\r\n    if (gridIdx !== undefined) {\r\n      // Update the item itself inside the dataView\r\n      this._dataView.updateItem(itemId, item);\r\n\r\n      // highlight the row we just updated, if defined\r\n      if (shouldHighlightRow) {\r\n        this.highlightRow(row, 1500);\r\n      }\r\n\r\n      // refresh dataview & grid\r\n      this._dataView.refresh();\r\n    }\r\n  }\r\n}\r\n",
    "\nimport {\n  Column,\n  GridOption\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare let $: any;\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GroupingAndColspanService {\n  private _eventHandler = new Slick.EventHandler();\n  private _dataView: any;\n  private _grid: any;\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any, dataView: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n\n    if (grid && this._gridOptions) {\n      // When dealing with Pre-Header Grouping colspan, we need to re-create the pre-header in multiple occasions\n      // for all these occasions, we have to trigger a re-create\n      if (this._gridOptions.createPreHeaderPanel) {\n        this._eventHandler.subscribe(grid.onSort, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(grid.onColumnsResized, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(dataView.onRowCountChanged, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n\n        // also not sure why at this point, but it seems that I need to call the 1st create in a delayed execution\n        // probably some kind of timing issues and delaying it until the grid is fully ready does help\n        setTimeout(() => {\n          this.createPreHeaderRowGroupingTitle();\n        }, 50);\n      }\n    }\n  }\n\n  dispose() {\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n  }\n\n  createPreHeaderRowGroupingTitle() {\n    const $preHeaderPanel = $(this._grid.getPreHeaderPanel())\n      .empty()\n      .addClass('slick-header-columns')\n      .css('left', '-1000px')\n      .width(this._grid.getHeadersWidth());\n    $preHeaderPanel.parent().addClass('slick-header');\n    const headerColumnWidthDiff = this._grid.getHeaderColumnWidthDiff();\n    let m;\n    let header;\n    let lastColumnGroup = '';\n    let widthTotal = 0;\n\n    for (let i = 0; i < this._columnDefinitions.length; i++) {\n      m = this._columnDefinitions[i];\n      if (lastColumnGroup === m.columnGroup && i > 0) {\n        widthTotal += m.width;\n        header.width(widthTotal - headerColumnWidthDiff);\n      } else {\n        widthTotal = m.width;\n        header = $(`<div class=\"ui-state-default slick-header-column\" />`)\n          .html(`<span class=\"slick-column-name\">${m.columnGroup || ''}</span>`)\n          .width(m.width - headerColumnWidthDiff)\n          .appendTo($preHeaderPanel);\n      }\n      lastColumnGroup = m.columnGroup;\n    }\n  }\n}\n",
    "import { GridOption } from './../models/index';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n// global constants, height/width are in pixels\r\nconst DATAGRID_MIN_HEIGHT = 180;\r\nconst DATAGRID_MIN_WIDTH = 300;\r\nconst DATAGRID_BOTTOM_PADDING = 20;\r\nconst DATAGRID_PAGINATION_HEIGHT = 35;\r\nlet timer: any;\r\n\r\nexport interface GridDimension {\r\n  height: number;\r\n  width: number;\r\n  heightWithPagination?: number;\r\n}\r\n\r\nexport class ResizerService {\r\n  private _grid: any;\r\n  private _lastDimensions: GridDimension;\r\n  onGridBeforeResize = new Subject<boolean>();\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  private get _gridUid(): string {\r\n    return (this._grid && this._grid.getUID) ? this._grid.getUID() : this._gridOptions.gridId;\r\n  }\r\n\r\n  init(grid: any): void {\r\n    this._grid = grid;\r\n  }\r\n\r\n  /** Attach an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space\r\n   * Options: we could also provide a % factor to resize on each height/width independently\r\n   */\r\n  attachAutoResizeDataGrid(newSizes?: GridDimension) {\r\n    // if we can't find the grid to resize, return without attaching anything\r\n    const gridDomElm = $(`#${this._gridOptions && this._gridOptions.gridId ? this._gridOptions.gridId : 'grid1'}`);\r\n    if (gridDomElm === undefined || gridDomElm.offset() === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // -- 1st resize the datagrid size at first load (we need this because the .on event is not triggered on first load)\r\n    this.resizeGrid(0, newSizes);\r\n\r\n    // -- 2nd attach a trigger on the Window DOM element, so that it happens also when resizing after first load\r\n    // -- attach auto-resize to Window object only if it exist\r\n    $(window).on(`resize.grid.${this._gridUid}`, () => {\r\n      this.onGridBeforeResize.next(true);\r\n      // for some yet unknown reason, calling the resize twice removes any stuttering/flickering when changing the height and makes it much smoother\r\n      this.resizeGrid(0, newSizes);\r\n      this.resizeGrid(0, newSizes);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation\r\n   * object gridOptions\r\n   */\r\n  calculateGridNewDimensions(gridOptions: GridOption): GridDimension | null {\r\n    const gridDomElm = $(`#${gridOptions.gridId}`);\r\n    const containerElm = (gridOptions.autoResize && gridOptions.autoResize.containerId) ? $(`#${gridOptions.autoResize.containerId}`) : $(`#${gridOptions.gridContainerId}`);\r\n    const windowElm = $(window);\r\n    if (windowElm === undefined || containerElm === undefined || gridDomElm === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // calculate bottom padding\r\n    // if using pagination, we need to add the pagination height to this bottom padding\r\n    let bottomPadding = (gridOptions.autoResize && gridOptions.autoResize.bottomPadding) ? gridOptions.autoResize.bottomPadding : DATAGRID_BOTTOM_PADDING;\r\n    if (bottomPadding && (gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\r\n      bottomPadding += DATAGRID_PAGINATION_HEIGHT;\r\n    }\r\n\r\n    const gridHeight = windowElm.height() || 0;\r\n    const coordOffsetTop = gridDomElm.offset();\r\n    const gridOffsetTop = (coordOffsetTop !== undefined) ? coordOffsetTop.top : 0;\r\n    const availableHeight = gridHeight - gridOffsetTop - bottomPadding;\r\n    const availableWidth = containerElm.width() || 0;\r\n    const minHeight = (gridOptions.autoResize && gridOptions.autoResize.minHeight < 0) ? gridOptions.autoResize.minHeight : DATAGRID_MIN_HEIGHT;\r\n    const minWidth = (gridOptions.autoResize && gridOptions.autoResize.minWidth < 0) ? gridOptions.autoResize.minWidth : DATAGRID_MIN_WIDTH;\r\n\r\n    let newHeight = availableHeight;\r\n    let newWidth = (gridOptions.autoResize && gridOptions.autoResize.sidePadding) ? availableWidth - gridOptions.autoResize.sidePadding : availableWidth;\r\n    if (newHeight < minHeight) {\r\n      newHeight = minHeight;\r\n    }\r\n    if (newWidth < minWidth) {\r\n      newWidth = minWidth;\r\n    }\r\n\r\n    return {\r\n      height: newHeight,\r\n      width: newWidth\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Dispose function when element is destroyed\r\n   */\r\n  dispose() {\r\n    $(window).off(`resize.grid.${this._gridUid}`);\r\n  }\r\n\r\n  getLastResizeDimensions(): GridDimension {\r\n    return this._lastDimensions;\r\n  }\r\n\r\n  /** Resize the datagrid to fit the browser height & width */\r\n  resizeGrid(delay?: number, newSizes?: GridDimension): Promise<GridDimension> {\r\n    if (!this._grid || !this._gridOptions) {\r\n      throw new Error(`\r\n      Angular-Slickgrid resizer requires a valid Grid object and Grid Options defined.\r\n      You can fix this by setting your gridOption to use \"enableAutoResize\" or create an instance of the ResizerService by calling attachAutoResizeDataGrid()`);\r\n    }\r\n\r\n    return new Promise((resolve) => {\r\n      // because of the javascript async nature, we might want to delay the resize a little bit\r\n      delay = delay || 0;\r\n\r\n      clearTimeout(timer);\r\n\r\n      timer = setTimeout(() => {\r\n        // calculate the available sizes with minimum height defined as a constant\r\n        const availableDimensions = this.calculateGridNewDimensions(this._gridOptions);\r\n        const gridElm = $(`#${this._gridOptions.gridId}`) || {};\r\n        const gridContainerElm = $(`#${this._gridOptions.gridContainerId}`) || {};\r\n\r\n        if ((newSizes || availableDimensions) && gridElm.length > 0) {\r\n          // get the new sizes, if new sizes are passed (not 0), we will use them else use available space\r\n          // basically if user passes 1 of the dimension, let say he passes just the height,\r\n          // we will use the height as a fixed height but the width will be resized by it's available space\r\n          const newHeight = (newSizes && newSizes.height) ? newSizes.height : availableDimensions.height;\r\n          const newWidth = (newSizes && newSizes.width) ? newSizes.width : availableDimensions.width;\r\n\r\n          // apply these new height/width to the datagrid\r\n          gridElm.height(newHeight);\r\n          gridElm.width(newWidth);\r\n          gridContainerElm.height(newHeight);\r\n          gridContainerElm.width(newWidth);\r\n\r\n          // resize the slickgrid canvas on all browser except some IE versions\r\n          // exclude all IE below IE11\r\n          // IE11 wants to be a better standard (W3C) follower (finally) they even changed their appName output to also have 'Netscape'\r\n          if (new RegExp('MSIE [6-8]').exec(navigator.userAgent) === null && this._grid) {\r\n            this._grid.resizeCanvas();\r\n          }\r\n\r\n          // also call the grid auto-size columns so that it takes available when going bigger\r\n          this._grid.autosizeColumns();\r\n\r\n          // keep last resized dimensions & resolve them to the Promise\r\n          this._lastDimensions = {\r\n            height: newHeight,\r\n            width: newWidth\r\n          };\r\n\r\n          if ((this._gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\r\n            this._lastDimensions.heightWithPagination = newHeight + DATAGRID_PAGINATION_HEIGHT;\r\n          }\r\n\r\n          resolve(this._lastDimensions);\r\n        }\r\n      }, delay);\r\n    });\r\n  }\r\n}\r\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class AvgAggregator implements Aggregator {\n  private _count: number;\n  private _nonNullCount: number;\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._count = 0;\n    this._nonNullCount = 0;\n    this._sum = 0;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    this._count++;\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._nonNullCount++;\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.avg) {\n      groupTotals.avg = {};\n    }\n    if (this._nonNullCount !== 0) {\n      groupTotals.avg[this._field] = this._sum / this._nonNullCount;\n    }\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MinAggregator implements Aggregator {\n  private _min: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._min = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._min == null || val < this._min) {\n        this._min = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.min) {\n      groupTotals.min = {};\n    }\n    groupTotals.min[this._field] = this._min;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MaxAggregator implements Aggregator {\n  private _max: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._max = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._max == null || val > this._max) {\n        this._max = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.max) {\n      groupTotals.max = {};\n    }\n    groupTotals.max[this._field] = this._max;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class SumAggregator implements Aggregator {\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._sum = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.sum) {\n      groupTotals.sum = {};\n    }\n    groupTotals.sum[this._field] = this._sum;\n  }\n}\n",
    "import { AvgAggregator } from './avgAggregator';\nimport { MinAggregator } from './minAggregator';\nimport { MaxAggregator } from './maxAggregator';\nimport { SumAggregator } from './sumAggregator';\n\n/** Provides a list of different Aggregators for the Group Formatter */\nexport const Aggregators = {\n  Avg: AvgAggregator,\n  Min: MinAggregator,\n  Max: MaxAggregator,\n  Sum: SumAggregator\n};\n",
    "import { Column, Editor, EditorValidator, EditorValidatorOutput } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class CheckboxEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: boolean;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"checkbox\" value=\"true\" class=\"editor-checkbox\" />`);\r\n    this.$input.appendTo(this.args.container);\r\n    this.$input.focus();\r\n  }\r\n\r\n  destroy(): void {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus(): void {\r\n    this.$input.focus();\r\n  }\r\n\r\n  hide() {\r\n    this.$input.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$input.show();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = !!item[this.columnDef.field];\r\n    if (this.defaultValue) {\r\n      this.$input.prop('checked', true);\r\n    } else {\r\n      this.$input.prop('checked', false);\r\n    }\r\n  }\r\n\r\n  preClick() {\r\n    this.$input.prop('checked', !this.$input.prop('checked'));\r\n  }\r\n\r\n  serializeValue(): boolean {\r\n    return this.$input.prop('checked');\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (this.serializeValue() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, FieldType, GridOption } from './../models/index';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a date picker editor using Flatpickr\r\n * https://chmln.github.io/flatpickr\r\n */\r\nexport class DateEditor implements Editor {\r\n  $input: any;\r\n  flatInstance: any;\r\n  defaultDate: string;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    if (this.args && this.args.column) {\r\n      const gridOptions = this.args.grid.getOptions() as GridOption;\r\n      this.defaultDate = (this.args.item) ? this.args.item[this.args.column.field] : null;\r\n      const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\r\n      const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || FieldType.dateUtc);\r\n      let currentLocale = this.getCurrentLocale(this.columnDef, gridOptions);\r\n      if (currentLocale.length > 2) {\r\n        currentLocale = currentLocale.substring(0, 2);\r\n      }\r\n\r\n      const pickerOptions: any = {\r\n        defaultDate: this.defaultDate,\r\n        altInput: true,\r\n        altFormat: inputFormat,\r\n        dateFormat: outputFormat,\r\n        closeOnSelect: false,\r\n        locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n        onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n          this.save();\r\n        },\r\n      };\r\n\r\n\r\n      this.$input = $(`<input type=\"text\" data-defaultDate=\"${this.defaultDate}\" class=\"editor-text flatpickr\" />`);\r\n      this.$input.appendTo(this.args.container);\r\n      this.flatInstance = (this.$input[0] && typeof this.$input[0].flatpickr === 'function') ? this.$input[0].flatpickr(pickerOptions) : null;\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  getCurrentLocale(columnDef: Column, gridOptions: GridOption) {\r\n    const options = gridOptions || columnDef.params || {};\r\n    if (options.i18n && options.i18n instanceof TranslateService) {\r\n      return options.i18n.currentLang;\r\n    }\r\n\r\n    return 'en';\r\n  }\r\n\r\n  loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  destroy() {\r\n    this.hide();\r\n    // this.flatInstance.destroy();\r\n    this.$input.remove();\r\n  }\r\n\r\n  show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultDate = item[this.args.column.field];\r\n    this.flatInstance.setDate(item[this.args.column.field]);\r\n  }\r\n\r\n  serializeValue() {\r\n    const domValue: string = this.$input.val();\r\n\r\n    if (!domValue) {\r\n      return '';\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n    const value = moment(domValue).format(outputFormat);\r\n\r\n    return value;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    if (!state) {\r\n      return;\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n    item[this.args.column.field] = moment(state, outputFormat).toDate();\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultDate == null)) && (this.$input.val() !== this.defaultDate);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Constants } from '../constants';\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst defaultDecimalPlaces = 0;\n\n/*\n * An example of a 'detached' editor.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class FloatEditor implements Editor {\n  $input: any;\n  defaultValue: any;\n\n  constructor(private args: any) {\n    this.init();\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args && this.args.column || {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): any {\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\n  }\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator {\n    return this.columnEditor.validator || this.columnDef.validator;\n  }\n\n  init(): void {\n    this.$input = $(`<input type=\"number\" class=\"editor-text\" step=\"${this.getInputDecimalSteps()}\" />`)\n      .appendTo(this.args.container)\n      .on('keydown.nav', (e) => {\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\n          e.stopImmediatePropagation();\n        }\n      });\n\n    setTimeout(() => {\n      this.$input.focus().select();\n    }, 50);\n  }\n\n  destroy() {\n    this.$input.remove();\n  }\n\n  focus() {\n    this.$input.focus();\n  }\n\n  getColumnEditor() {\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\n  }\n\n  getDecimalPlaces(): number {\n    // returns the number of fixed decimal places or null\n    let rtn = (this.columnEditor.params && this.columnEditor.params.hasOwnProperty('decimalPlaces')) ? this.columnEditor.params.decimalPlaces : undefined;\n\n    if (rtn === undefined) {\n      rtn = defaultDecimalPlaces;\n    }\n    return (!rtn && rtn !== 0 ? null : rtn);\n  }\n\n  getInputDecimalSteps(): string {\n    const decimals = this.getDecimalPlaces();\n    let zeroString = '';\n    for (let i = 1; i < decimals; i++) {\n      zeroString += '0';\n    }\n\n    if (decimals > 0) {\n      return `0.${zeroString}1`;\n    }\n    return '1';\n  }\n\n  loadValue(item: any) {\n    this.defaultValue = item[this.columnDef.field];\n\n    const decPlaces = this.getDecimalPlaces();\n    if (decPlaces !== null\n      && (this.defaultValue || this.defaultValue === 0)\n      && this.defaultValue.toFixed) {\n      this.defaultValue = this.defaultValue.toFixed(decPlaces);\n    }\n\n    this.$input.val(this.defaultValue);\n    this.$input[0].defaultValue = this.defaultValue;\n    this.$input.select();\n  }\n\n  serializeValue() {\n    let rtn = parseFloat(this.$input.val()) || 0;\n    const decPlaces = this.getDecimalPlaces();\n    if (decPlaces !== null\n      && (rtn || rtn === 0)\n      && rtn.toFixed) {\n      rtn = parseFloat(rtn.toFixed(decPlaces));\n    }\n\n    return rtn;\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.columnDef.field] = state;\n  }\n\n  isValueChanged() {\n    const elmValue = this.$input.val();\n    return (!(elmValue === '' && this.defaultValue === null)) && (elmValue !== this.defaultValue);\n  }\n\n  validate(): EditorValidatorOutput {\n    const elmValue = this.$input.val();\n    const decPlaces = this.getDecimalPlaces();\n    const minValue = this.columnEditor.minValue;\n    const maxValue = this.columnEditor.maxValue;\n    const errorMsg = this.columnEditor.errorMessage;\n    const mapValidation = {\n      '{{minValue}}': minValue,\n      '{{maxValue}}': maxValue,\n      '{{minDecimal}}': 0,\n      '{{maxDecimal}}': decPlaces\n    };\n\n    if (this.validator) {\n      const validationResults = this.validator(elmValue);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    } else if (isNaN(elmValue as number) || (decPlaces === 0 && !/^(\\d+(\\.)?(\\d)*)$/.test(elmValue))) {\n      // when decimal value is 0 (which is the default), we accept 0 or more decimal values\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_VALID_NUMBER\n      };\n    } else if (minValue !== undefined && (elmValue < minValue || elmValue > maxValue)) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    } else if ((decPlaces > 0 && !new RegExp(`^(\\\\d+(\\\\.)?(\\\\d){0,${decPlaces}})$`).test(elmValue))) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_DECIMAL_BETWEEN.replace(/{{minDecimal}}|{{maxDecimal}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n",
    "import { Constants } from './../constants';\r\nimport { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class IntegerEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"number\" class='editor-text' />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = parseInt(item[this.args.column.field], 10);\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return parseInt(this.$input.val() as string, 10) || 0;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    const elmValue = this.$input.val();\r\n    const value = isNaN(elmValue) ? elmValue : parseInt(elmValue, 10);\r\n    return (!(value === '' && this.defaultValue === null)) && (value !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    const elmValue = this.$input.val();\r\n    const errorMsg = this.columnEditor.params && this.columnEditor.errorMessage;\r\n\r\n    if (this.validator) {\r\n      const validationResults = this.validator(elmValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    } else if (isNaN(elmValue as number) || !/^[+-]?\\d+$/.test(elmValue)) {\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || Constants.VALIDATION_EDITOR_VALID_INTEGER\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport { Constants } from './../constants';\r\nimport {\r\n  Column,\r\n  Editor,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  GridOption,\r\n  HtmlElementPosition,\r\n  KeyCode\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class LongTextEditor implements Editor {\r\n  $input: any;\r\n  $wrapper: any;\r\n  defaultValue: any;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    const cancelText = this._translate.instant('CANCEL') || Constants.TEXT_CANCEL;\r\n    const saveText = this._translate.instant('SAVE') || Constants.TEXT_SAVE;\r\n    const $container = $('body');\r\n\r\n    this.$wrapper = $(`<div class=\"slick-large-editor-text\" />`).appendTo($container);\r\n    this.$input = $(`<textarea hidefocus rows=\"5\">`).appendTo(this.$wrapper);\r\n\r\n    $(`<div class=\"editor-footer\">\r\n          <button class=\"btn btn-primary btn-xs\">${saveText}</button>\r\n          <button class=\"btn btn-default btn-xs\">${cancelText}</button>\r\n      </div>`).appendTo(this.$wrapper);\r\n\r\n    this.$wrapper.find('button:first').on('click', (event: Event) => this.save());\r\n    this.$wrapper.find('button:last').on('click', (event: Event) => this.cancel());\r\n    this.$input.on('keydown', this.handleKeyDown);\r\n\r\n    this.position(this.args.position);\r\n    this.$input.focus().select();\r\n  }\r\n\r\n  handleKeyDown(e: any) {\r\n    if (e.which === KeyCode.ENTER && e.ctrlKey) {\r\n      this.save();\r\n    } else if (e.which === KeyCode.ESCAPE) {\r\n      e.preventDefault();\r\n      this.cancel();\r\n    } else if (e.which === KeyCode.TAB && e.shiftKey) {\r\n      e.preventDefault();\r\n      this.args.grid.navigatePrev();\r\n    } else if (e.which === KeyCode.TAB) {\r\n      e.preventDefault();\r\n      this.args.grid.navigateNext();\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  cancel() {\r\n    this.$input.val(this.defaultValue);\r\n    this.args.cancelChanges();\r\n  }\r\n\r\n  hide() {\r\n    this.$wrapper.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$wrapper.show();\r\n  }\r\n\r\n  position(position: HtmlElementPosition) {\r\n    this.$wrapper\r\n      .css('top', (position.top || 0) - 5)\r\n      .css('left', (position.left || 0) - 5);\r\n  }\r\n\r\n  destroy() {\r\n    this.$wrapper.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.$input.val(this.defaultValue = item[this.columnDef.field]);\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue == null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Column,\r\n  Editor,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  SelectOption,\r\n} from './../models/index';\r\nimport { CollectionService } from '../services/index';\r\nimport { arraysEqual, htmlEncode } from '../services/utilities';\r\nimport * as sanitizeHtml_ from 'sanitize-html';\r\nconst sanitizeHtml = sanitizeHtml_; // patch to fix rollup to work\r\n\r\n// height in pixel of the multiple-select DOM element\r\nconst SELECT_ELEMENT_HEIGHT = 26;\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/**\r\n * Slickgrid editor class for multiple select lists\r\n */\r\nexport class MultipleSelectEditor implements Editor {\r\n  /** The JQuery DOM element */\r\n  $editorElm: any;\r\n\r\n  /** Editor Multiple-Select options */\r\n  editorElmOptions: MultipleSelectOption;\r\n\r\n  /** The multiple-select options for a multiple select list */\r\n  defaultOptions: MultipleSelectOption;\r\n\r\n  /** The default item values that are set */\r\n  defaultValue: any[];\r\n\r\n  /** The options label/value object to use in the select list */\r\n  collection: SelectOption[] = [];\r\n\r\n  /** The property name for values in the collection */\r\n  valueName: string;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName: string;\r\n\r\n  /** The property name for a prefix that can be added to the labels in the collection */\r\n  labelPrefixName: string;\r\n\r\n  /** The property name for a suffix that can be added to the labels in the collection */\r\n  labelSuffixName: string;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** Do we translate the label? */\r\n  enableTranslateLabel: boolean;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,\r\n      maxHeight: 200,\r\n      addTitle: true,\r\n      okButton: true,\r\n      selectAllDelimiter: ['', ''],\r\n      width: 150,\r\n      offsetLeft: 20,\r\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\r\n      textTemplate: ($elm) => {\r\n        // render HTML code or not, by default it is sanitized and won't be rendered\r\n        const isRenderHtmlEnabled = this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.enableRenderHtml || false;\r\n        return isRenderHtmlEnabled ? $elm.text() : $elm.html();\r\n      },\r\n    };\r\n\r\n    if (this._translate) {\r\n      this.defaultOptions.countSelected = this._translate.instant('X_OF_Y_SELECTED');\r\n      this.defaultOptions.allSelected = this._translate.instant('ALL_SELECTED');\r\n      this.defaultOptions.selectAllText = this._translate.instant('SELECT_ALL');\r\n    }\r\n\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /**\r\n   * The current selected values from the collection\r\n   */\r\n  get currentValues() {\r\n    return this.collection\r\n      .filter(c => this.$editorElm.val().indexOf(c[this.valueName].toString()) !== -1)\r\n      .map(c => c[this.valueName]);\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init() {\r\n    if (!this.args) {\r\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\r\n    }\r\n\r\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the MultipleSelect Editor to work correctly.\r\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\r\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\r\n    }\r\n\r\n    const collectionService = new CollectionService(this._translate);\r\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\r\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\r\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\r\n    this.labelPrefixName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.labelPrefix : 'labelPrefix';\r\n    this.labelSuffixName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.labelSuffix : 'labelSuffix';\r\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\r\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\r\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    this.collection = newCollection;\r\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    this.createDomElement(editorTemplate);\r\n  }\r\n\r\n  applyValue(item: any, state: any): void {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  destroy() {\r\n    this.$editorElm.remove();\r\n  }\r\n\r\n  loadValue(item: any): void {\r\n    // convert to string because that is how the DOM will return these values\r\n    this.defaultValue = item[this.columnDef.field].map((i: any) => i.toString());\r\n\r\n    this.$editorElm.find('option').each((i: number, $e: any) => {\r\n      if (this.defaultValue.indexOf($e.value) !== -1) {\r\n        $e.selected = true;\r\n      } else {\r\n        $e.selected = false;\r\n      }\r\n    });\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  serializeValue(): any {\r\n    return this.currentValues;\r\n  }\r\n\r\n  focus() {\r\n    this.$editorElm.focus();\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    return !arraysEqual(this.$editorElm.val(), this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.currentValues);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n\r\n  private buildTemplateHtmlString(collection: any[]) {\r\n    let options = '';\r\n    const isAddingSpaceBetweenLabels = this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.customStructure && this.columnDef.internalColumnEditor.customStructure.addSpaceBetweenLabels || false;\r\n    const isRenderHtmlEnabled = this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.enableRenderHtml || false;\r\n    const sanitizedOptions = this.gridOptions && this.gridOptions.sanitizeHtmlOptions || {};\r\n\r\n    collection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example: { collection: [ { value: '1', label: 'One' } ])`);\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n      const labelText = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\r\n      const prefixText = option[this.labelPrefixName] || '';\r\n      const suffixText = option[this.labelSuffixName] || '';\r\n      let optionText = isAddingSpaceBetweenLabels ? `${prefixText} ${labelText} ${suffixText}` : (prefixText + labelText + suffixText);\r\n\r\n      // if user specifically wants to render html text, he needs to opt-in else it will stripped out by default\r\n      // also, the 3rd party lib will saninitze any html code unless it's encoded, so we'll do that\r\n      if (isRenderHtmlEnabled) {\r\n        // sanitize any unauthorized html tags like script and others\r\n        // for the remaining allowed tags we'll permit all attributes\r\n        const sanitizeText = sanitizeHtml(optionText, sanitizedOptions);\r\n        optionText = htmlEncode(sanitizeText);\r\n      }\r\n\r\n      options += `<option value=\"${option[this.valueName]}\">${optionText}</option>`;\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * Automatically adjust the multiple-select dropup or dropdown by available space\r\n   */\r\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\r\n    // height in pixel of the multiple-select element\r\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\r\n\r\n    const windowHeight = $(window).innerHeight() || 300;\r\n    const pageScroll = $('body').scrollTop() || 0;\r\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\r\n    const $msDrop = $msDropContainer.find('.ms-drop');\r\n    const msDropHeight = $msDrop.height() || 0;\r\n    const msDropOffsetTop = $msDrop.offset().top;\r\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\r\n\r\n    if (space < msDropHeight) {\r\n      if (multipleSelectOptions.container) {\r\n        // when using a container, we need to offset the drop ourself\r\n        // and also make sure there's space available on top before doing so\r\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\r\n        if (newOffsetTop > 0) {\r\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\r\n        }\r\n      } else {\r\n        // without container, we simply need to add the \"top\" class to the drop\r\n        $msDrop.addClass('top');\r\n      }\r\n      $msDrop.removeClass('bottom');\r\n    } else {\r\n      $msDrop.addClass('bottom');\r\n      $msDrop.removeClass('top');\r\n    }\r\n  }\r\n\r\n  /** Build the template HTML string */\r\n  private createDomElement(editorTemplate: string) {\r\n    this.$editorElm = $(editorTemplate);\r\n\r\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\r\n      this.$editorElm.appendTo(this.args.container);\r\n    }\r\n\r\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\r\n      // fallback to bootstrap\r\n      this.$editorElm.addClass('form-control');\r\n    } else {\r\n      const elementOptions = (this.columnDef.internalColumnEditor) ? this.columnDef.internalColumnEditor.elementOptions : {};\r\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\r\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\r\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\r\n    }\r\n  }\r\n\r\n  // refresh the jquery object because the selected checkboxes were already set\r\n  // prior to this method being called\r\n  private refresh() {\r\n    if (typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('refresh');\r\n    }\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Column,\r\n  Editor,\r\n  EditorValidator,\r\n  EditorValidatorOutput,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  SelectOption\r\n} from './../models/index';\r\nimport { findOrDefault, CollectionService, htmlEncode } from '../services/index';\r\nimport * as sanitizeHtml_ from 'sanitize-html';\r\nconst sanitizeHtml = sanitizeHtml_; // patch to fix rollup to work\r\n\r\n// height in pixel of the multiple-select DOM element\r\nconst SELECT_ELEMENT_HEIGHT = 26;\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/**\r\n * Slickgrid editor class for single select lists\r\n */\r\nexport class SingleSelectEditor implements Editor {\r\n  /** The JQuery DOM element */\r\n  $editorElm: any;\r\n\r\n  /** Editor Multiple-Select options */\r\n  editorElmOptions: MultipleSelectOption;\r\n\r\n  /** The multiple-select options for a single select */\r\n  defaultOptions: any;\r\n\r\n  /** The default item value that is set */\r\n  defaultValue: any;\r\n\r\n  /** The options label/value object to use in the select list */\r\n  collection: SelectOption[] = [];\r\n\r\n  /** The property name for values in the collection */\r\n  valueName: string;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName: string;\r\n\r\n  /** The property name for a prefix that can be added to the labels in the collection */\r\n  labelPrefixName: string;\r\n\r\n   /** The property name for a suffix that can be added to the labels in the collection */\r\n  labelSuffixName: string;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** Do we translate the label? */\r\n  enableTranslateLabel: boolean;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,\r\n      maxHeight: 200,\r\n      width: 150,\r\n      offsetLeft: 20,\r\n      single: true,\r\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\r\n      textTemplate: ($elm) => {\r\n        // render HTML code or not, by default it is sanitized and won't be rendered\r\n        const isRenderHtmlEnabled = this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.enableRenderHtml || false;\r\n        return isRenderHtmlEnabled ? $elm.text() : $elm.html();\r\n      },\r\n    };\r\n\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /**\r\n   * The current selected value from the collection\r\n   */\r\n  get currentValue() {\r\n    return findOrDefault(this.collection, (c: any) =>\r\n      c[this.valueName].toString() === this.$editorElm.val())[this.valueName];\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init() {\r\n    if (!this.args) {\r\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\r\n    }\r\n\r\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the SingleSelect Editor to work correctly.\r\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\r\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\r\n    }\r\n\r\n    const collectionService = new CollectionService(this._translate);\r\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\r\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\r\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\r\n    this.labelPrefixName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.labelPrefix : 'labelPrefix';\r\n    this.labelSuffixName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.labelSuffix : 'labelSuffix';\r\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionFilterBy) {\r\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\r\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\r\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    this.collection = newCollection;\r\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    this.createDomElement(editorTemplate);\r\n  }\r\n\r\n  applyValue(item: any, state: any): void {\r\n    item[this.columnDef.field] = state;\r\n  }\r\n\r\n  destroy() {\r\n    this.$editorElm.remove();\r\n  }\r\n\r\n  loadValue(item: any): void {\r\n    // convert to string because that is how the DOM will return these values\r\n    // make sure the prop exists first\r\n    this.defaultValue = item[this.columnDef.field] && item[this.columnDef.field].toString();\r\n\r\n\r\n    this.$editorElm.find('option').each((i: number, $e: any) => {\r\n      if (this.defaultValue === $e.value) {\r\n        $e.selected = true;\r\n      } else {\r\n        $e.selected = false;\r\n      }\r\n    });\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  serializeValue(): any {\r\n    return this.currentValue;\r\n  }\r\n\r\n  focus() {\r\n    this.$editorElm.focus();\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    return this.$editorElm.val() !== this.defaultValue;\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.currentValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n\r\n  private buildTemplateHtmlString(collection: any[]) {\r\n    let options = '';\r\n    const isAddingSpaceBetweenLabels = this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.customStructure && this.columnDef.internalColumnEditor.customStructure.addSpaceBetweenLabels || false;\r\n    const isRenderHtmlEnabled = this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.enableRenderHtml || false;\r\n    const sanitizedOptions = this.gridOptions && this.gridOptions.sanitizeHtmlOptions || {};\r\n\r\n    collection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error('A collection with value/label (or value/labelKey when using ' +\r\n          'Locale) is required to populate the Select list, for example: { params: { ' +\r\n          '{ collection: [ { value: \\'1\\', label: \\'One\\' } ] } } }');\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n      const labelText = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\r\n      const prefixText = option[this.labelPrefixName] || '';\r\n      const suffixText = option[this.labelSuffixName] || '';\r\n      let optionText = isAddingSpaceBetweenLabels ? `${prefixText} ${labelText} ${suffixText}` : (prefixText + labelText + suffixText);\r\n\r\n      // if user specifically wants to render html text, he needs to opt-in else it will stripped out by default\r\n      // also, the 3rd party lib will saninitze any html code unless it's encoded, so we'll do that\r\n      if (isRenderHtmlEnabled) {\r\n        // sanitize any unauthorized html tags like script and others\r\n        // for the remaining allowed tags we'll permit all attributes\r\n        const sanitizeText = sanitizeHtml(optionText, sanitizedOptions);\r\n        optionText = htmlEncode(sanitizeText);\r\n      }\r\n\r\n      options += `<option value=\"${option[this.valueName]}\">${optionText}</option>`;\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\r\n  }\r\n\r\n    /**\r\n   * Automatically adjust the multiple-select dropup or dropdown by available space\r\n   */\r\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\r\n    // height in pixel of the multiple-select element\r\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\r\n\r\n    const windowHeight = $(window).innerHeight() || 300;\r\n    const pageScroll = $('body').scrollTop() || 0;\r\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\r\n    const $msDrop = $msDropContainer.find('.ms-drop');\r\n    const msDropHeight = $msDrop.height() || 0;\r\n    const msDropOffsetTop = $msDrop.offset().top;\r\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\r\n\r\n    if (space < msDropHeight) {\r\n      if (multipleSelectOptions.container) {\r\n        // when using a container, we need to offset the drop ourself\r\n        // and also make sure there's space available on top before doing so\r\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\r\n        if (newOffsetTop > 0) {\r\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\r\n        }\r\n      } else {\r\n        // without container, we simply need to add the \"top\" class to the drop\r\n        $msDrop.addClass('top');\r\n      }\r\n      $msDrop.removeClass('bottom');\r\n    } else {\r\n      $msDrop.addClass('bottom');\r\n      $msDrop.removeClass('top');\r\n    }\r\n  }\r\n\r\n  /** Build the template HTML string */\r\n  private createDomElement(editorTemplate: string) {\r\n    this.$editorElm = $(editorTemplate);\r\n\r\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\r\n      this.$editorElm.appendTo(this.args.container);\r\n    }\r\n\r\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\r\n      // fallback to bootstrap\r\n      this.$editorElm.addClass('form-control');\r\n    } else {\r\n      const elementOptions = (this.columnDef.params) ? this.columnDef.params.elementOptions : {};\r\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\r\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\r\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\r\n    }\r\n  }\r\n\r\n  // refresh the jquery object because the selected checkboxes were already set\r\n  // prior to this method being called\r\n  private refresh() {\r\n    if (typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('refresh');\r\n    }\r\n  }\r\n}\r\n",
    "import { Constants } from '../constants';\nimport { Column, Editor, EditorValidator, EditorValidatorOutput } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP = 1;\n\nexport class SliderEditor implements Editor {\n  private _elementRangeInputId: string;\n  private _elementRangeOutputId: string;\n  $editorElm: any;\n  $input: any;\n  $sliderNumber: any;\n  defaultValue: any;\n\n  constructor(private args: any) {\n    this.init();\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args && this.args.column || {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): any {\n    return this.columnDef && this.columnDef.internalColumnEditor || {};\n  }\n\n  /** Getter for the Editor Generic Params */\n  private get editorParams(): any {\n    return this.columnEditor.params || {};\n  }\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator {\n    return this.columnEditor.validator || this.columnDef.validator;\n  }\n\n  init(): void {\n    const container = this.args.container;\n\n    // define the input & slider number IDs\n    const itemId = this.args && this.args.item && this.args.item.id;\n    this._elementRangeInputId = `rangeInput_${this.columnDef.field}_${itemId}`;\n    this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}_${itemId}`;\n\n    // create HTML string template\n    const editorTemplate = this.buildTemplateHtmlString();\n    this.$editorElm = $(editorTemplate);\n    this.$input = this.$editorElm.children('input');\n    this.$sliderNumber = this.$editorElm.children('div.input-group-addon.input-group-append').children();\n\n    // watch on change event\n    this.$editorElm\n      .appendTo(this.args.container)\n      .on('mouseup', (event: Event) => this.save());\n\n    // if user chose to display the slider number on the right side, then update it every time it changes\n    // we need to use both \"input\" and \"change\" event to be all cross-browser\n    if (!this.editorParams.hideSliderNumber) {\n      this.$editorElm.on('input change', (e: { target: HTMLInputElement }) => {\n        const value = e && e.target && e.target.value || '';\n        if (value) {\n          document.getElementById(this._elementRangeOutputId).innerHTML = e.target.value;\n        }\n      });\n    }\n  }\n\n  destroy() {\n    this.$editorElm.remove();\n  }\n\n  focus() {\n    this.$editorElm.focus();\n  }\n\n  save() {\n    this.args.commitChanges();\n  }\n\n  cancel() {\n    this.$input.val(this.defaultValue);\n    this.args.cancelChanges();\n  }\n\n  loadValue(item: any) {\n    // this.$input.val(this.defaultValue = item[this.columnDef.field]);\n    this.defaultValue = item[this.columnDef.field];\n    this.$input.val(this.defaultValue);\n    this.$input[0].defaultValue = this.defaultValue;\n    this.$sliderNumber.html(this.defaultValue);\n  }\n\n  serializeValue() {\n    return parseInt(this.$input.val() as string, 10) || 0;\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.columnDef.field] = state;\n  }\n\n  isValueChanged() {\n    const elmValue = this.$input.val();\n    return (!(elmValue === '' && this.defaultValue === null)) && (elmValue !== this.defaultValue);\n  }\n\n  validate(): EditorValidatorOutput {\n    const elmValue = this.$input.val();\n    const minValue = this.columnEditor.minValue;\n    const maxValue = this.columnEditor.maxValue;\n    const errorMsg = this.columnEditor.errorMessage;\n    const mapValidation = {\n      '{{minValue}}': minValue,\n      '{{maxValue}}': maxValue\n    };\n\n    if (this.validator) {\n      const validationResults = this.validator(elmValue);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    } else if (minValue !== undefined && (elmValue < minValue || elmValue > maxValue)) {\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n      return {\n        valid: false,\n        msg: errorMsg || Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => {\n          return mapValidation[matched];\n        })\n      };\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Create the HTML template as a string\n   */\n  private buildTemplateHtmlString() {\n    const minValue = this.columnEditor.hasOwnProperty('minValue') ? this.columnEditor.minValue : DEFAULT_MIN_VALUE;\n    const maxValue = this.columnEditor.hasOwnProperty('maxValue') ? this.columnEditor.maxValue : DEFAULT_MAX_VALUE;\n    const defaultValue = this.editorParams.hasOwnProperty('sliderStartValue') ? this.editorParams.sliderStartValue : minValue;\n    const step = this.columnEditor.hasOwnProperty('valueStep') ? this.columnEditor.valueStep : DEFAULT_STEP;\n    const itemId = this.args && this.args.item && this.args.item.id;\n\n    if (this.editorParams.hideSliderNumber) {\n      return `\n      <div class=\"slider-editor\">\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\n          name=\"${this._elementRangeInputId}\"\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n          class=\"form-control slider-editor-input range\" />\n      </div>`;\n    }\n\n    return `\n      <div class=\"input-group slider-editor\">\n        <input type=\"range\" id=\"${this._elementRangeInputId}\"\n          name=\"${this._elementRangeInputId}\"\n          defaultValue=\"${defaultValue}\" min=\"${minValue}\" max=\"${maxValue}\" step=\"${step}\"\n          class=\"form-control slider-editor-input range\" />\n        <div class=\"input-group-addon input-group-append slider-value\"><span class=\"input-group-text\" id=\"${this._elementRangeOutputId}\">${defaultValue}</span></div>\n      </div>`;\n  }\n}\n",
    "import { Column, Editor, EditorValidator, EditorValidatorOutput, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class TextEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  /** Get Column Definition object */\r\n  get columnDef(): Column {\r\n    return this.args && this.args.column || {};\r\n  }\r\n\r\n  /** Get Column Editor object */\r\n  get columnEditor(): any {\r\n    return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor || {};\r\n  }\r\n\r\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\r\n  get validator(): EditorValidator {\r\n    return this.columnEditor.validator || this.columnDef.validator;\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"text\" class=\"editor-text\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this.$input.val(val);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field] || '';\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue === null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidatorOutput {\r\n    if (this.validator) {\r\n      const validationResults = this.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    // by default the editor is always valid\r\n    // if user want it to be a required checkbox, he would have to provide his own validator\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { CheckboxEditor } from './checkboxEditor';\r\nimport { DateEditor } from './dateEditor';\r\nimport { FloatEditor } from './floatEditor';\r\nimport { IntegerEditor } from './integerEditor';\r\nimport { LongTextEditor } from './longTextEditor';\r\nimport { MultipleSelectEditor } from './multipleSelectEditor';\r\nimport { SingleSelectEditor } from './singleSelectEditor';\r\nimport { SliderEditor } from './sliderEditor';\r\nimport { TextEditor } from './textEditor';\r\n\r\nexport const Editors = {\r\n  /** Checkbox Editor (uses native checkbox DOM element) */\r\n  checkbox: CheckboxEditor,\r\n\r\n  /** Date Picker Editor (which uses 3rd party lib \"flatpickr\") */\r\n  date: DateEditor,\r\n\r\n  /** Float Number Editor */\r\n  float: FloatEditor,\r\n\r\n  /** Integer Editor */\r\n  integer: IntegerEditor,\r\n\r\n  /** Long Text Editor (uses a textarea) */\r\n  longText: LongTextEditor,\r\n\r\n  /** Multiple Select editor (which uses 3rd party lib \"multiple-select.js\") */\r\n  multipleSelect: MultipleSelectEditor,\r\n\r\n  /** Single Select editor (which uses 3rd party lib \"multiple-select.js\") */\r\n  singleSelect: SingleSelectEditor,\r\n\r\n  /** Slider Editor */\r\n  slider: SliderEditor,\r\n\r\n  /** Text Editor */\r\n  text: TextEditor\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const arrayToCsvFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && Array.isArray(value)) {\n    const values = value.join(', ');\n    return `<span title=\"${values}\">${values}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const boldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  } else {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkboxFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? '&#x2611;' : '';\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkmarkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? `<i class=\"fa fa-check checkmark-icon\" aria-hidden=\"true\"></i>` : '';\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of a params collection\n */\nexport const collectionFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.params || !columnDef.params.collection\n    || !columnDef.params.collection.length) {\n    return '';\n  }\n\n  const { params, params: { collection } } = columnDef;\n  const labelName = (params.customStructure) ? params.customStructure.label : 'label';\n  const valueName = (params.customStructure) ? params.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of an editor collection\n */\nexport const collectionEditorFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.internalColumnEditor || !columnDef.internalColumnEditor.collection\n    || !columnDef.internalColumnEditor.collection.length) {\n    return '';\n  }\n\n  const { internalColumnEditor, internalColumnEditor: { collection } } = columnDef;\n  const labelName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.label : 'label';\n  const valueName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const complexObjectFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!columnDef) {\n    return '';\n  }\n  const complexField = columnDef.field || '';\n  return complexField.split('.').reduce((obj, i) => (obj ? obj[i] : ''), dataContext);\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\n\nexport const dateIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIso);\n\nexport const dateTimeIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIsoAmPm);\n\nexport const dateTimeIsoAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUsAmPm);\n\nexport const dateTimeUsAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUs);\n\nexport const dateTimeUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\n\nexport const dateUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const isDateValid = moment(value, FORMAT, false).isValid();\n  return (value && isDateValid) ? moment(value).format(FORMAT) : value;\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const decimalFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const params = columnDef.params || {};\n  const minDecimalPlaces = params.minDecimalPlaces || params.decimalPlaces || 2;\n  const maxDecimalPlaces = params.maxDecimalPlaces || 2;\n  return isNaN(+value) ? value : `${decimalFormatted(value, minDecimalPlaces, maxDecimalPlaces)}`;\n};\n\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const deleteIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-trash pointer delete-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column, Formatter } from './../models/index';\r\nimport { decimalFormatted } from './../services/utilities';\r\n\r\nexport const dollarColoredBoldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\r\n  const isNumber = !isNaN(+value);\r\n  const params = columnDef && columnDef.params || {};\r\n  const minDecimal = params.minDecimal || 2;\r\n  const maxDecimal = params.minDecimal || 4;\r\n  const outputValue = (isNumber && (params.minDecimal || params.maxDecimal)) ? decimalFormatted(value, minDecimal, maxDecimal) : value;\r\n\r\n  if (!isNumber) {\r\n    return '';\r\n  } else if (value >= 0) {\r\n    return `<span style=\"color:green; font-weight: bold;\">$${outputValue}</span>`;\r\n  } else {\r\n    return `<span style=\"color:red; font-weight: bold;\">$${outputValue}</span>`;\r\n  }\r\n};\r\n",
    "import { Column, Formatter } from './../models/index';\r\nimport { decimalFormatted } from './../services/utilities';\r\n\r\nexport const dollarColoredFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\r\n  const isNumber = !isNaN(+value);\r\n  const params = columnDef && columnDef.params || {};\r\n  const minDecimal = params.minDecimal || 2;\r\n  const maxDecimal = params.minDecimal || 4;\r\n  const outputValue = (isNumber && (params.minDecimal || params.maxDecimal)) ? decimalFormatted(value, minDecimal, maxDecimal) : value;\r\n\r\n  if (!isNumber) {\r\n    return '';\r\n  } else if (value >= 0) {\r\n    return `<span style=\"color:green;\">$${outputValue}</span>`;\r\n  } else {\r\n    return `<span style=\"color:red;\">$${outputValue}</span>`;\r\n  }\r\n};\r\n",
    "import { Column, Formatter } from './../models/index';\r\nimport { decimalFormatted } from './../services/utilities';\r\n\r\nexport const dollarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\r\n  const isNumber = !isNaN(+value);\r\n  const params = columnDef && columnDef.params || {};\r\n  const minDecimal = params.minDecimal || 2;\r\n  const maxDecimal = params.minDecimal || 4;\r\n  const outputValue = (isNumber && (params.minDecimal || params.maxDecimal)) ? decimalFormatted(value, minDecimal, maxDecimal) : value;\r\n\r\n  return !isNumber ? '' : `$${outputValue}`;\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const editIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-pencil pointer edit-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const hyperlinkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && typeof value === 'string') {\n    const matchUrl = value.match(/^(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:\\/~\\+#]*[\\w\\-\\@?^=%&amp;\\/~\\+#])?/i);\n    if (matchUrl && Array.isArray(matchUrl)) {\n      return `<a href=\"${matchUrl[0]}\">' + value + '</a>`;\n    }\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\nexport const hyperlinkUriPrefixFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  let uriPrefix = (columnDef && columnDef.params && columnDef.params.uriPrefix) ? columnDef.params.uriPrefix : '';\n  if (!uriPrefix) {\n    throw new Error(`HyperlinkUriPrefix Formatter require a \"uriPrefix\" that can be passed through params. e.g.:: formatter: Formatters.hyperlinkUriPrefix, params: { uriPrefix: '/users/' }`);\n  }\n  if (value && uriPrefix && typeof uriPrefix === 'string' && !uriPrefix.includes('<script>')) {\n    uriPrefix += value;\n    return '<a href=\"' + uriPrefix + '\">' + value + '</a>';\n  }\n  return '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const infoIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-info-circle pointer info-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const lowercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toLowerCase() : '';\n};\n",
    "\nimport { Column, Formatter } from './../models/index';\n\n/**\n * Takes a value display it according to a mask provided\n * e.: 1234567890 with mask \"(000) 000-0000\" will display \"(123) 456-7890\"\n */\nexport const maskFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  const params = columnDef.params || {};\n  const mask = params.mask;\n\n  if (!mask) {\n    throw new Error(`You must provide a \"mask\" via the generic \"params\" options (e.g.: { formatter: Formatters.mask, params: { mask: '000-000' }}`);\n  }\n\n  if (value && mask) {\n    let i = 0;\n    const v = value.toString();\n    return mask.replace(/[09A]/g, () => v[i++] || '');\n  }\n  return '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\nexport const multipleFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const params = columnDef.params || {};\n  if (!params.formatters || !Array.isArray(params.formatters)) {\n    throw new Error(`The multiple formatter requires the \"formatters\" to be provided as a column params.\n    For example: this.columnDefinitions = [{ id: title, field: title, formatter: Formatters.multiple, params: { formatters: [Formatters.lowercase, Formatters.uppercase] }`);\n  }\n  const formatters: Formatter[] = params.formatters;\n\n  // loop through all Formatters, the value of 1st formatter will be used by 2nd formatter and so on.\n  // they are piped and executed in sequences\n  let currentValue = value;\n  for (const formatter of formatters) {\n    currentValue = formatter(row, cell, currentValue, columnDef, dataContext, grid);\n  }\n  return currentValue;\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  if (value === null || value === '') {\r\n    return '';\r\n  }\r\n\r\n  const outputValue = value > 0 ? value / 100 : 0;\r\n  return `<span>${outputValue}%</span>`;\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'red';\n  } else if (value < 70) {\n    color = 'silver';\n  } else {\n    color = 'green';\n  }\n\n  return `<span class=\"percent-complete-bar\" style=\"background:${color}; width:${value}%\"></span>`;\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '-';\n  } else if (value < 50) {\n    return `<span style='color:red;font-weight:bold;'>${value}%</span>`;\n  } else {\n    return `<span style='color:green'>${value}%</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentSymbolFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  return value ? `<span>${value}%</span>` : '';\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const progressBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'danger';\n  } else if (value < 70) {\n    color = 'warning';\n  } else {\n    color = 'success';\n  }\n\n  return `<div class=\"progress\">\n    <div class=\"progress-bar progress-bar-${color} bg-${color}\" role=\"progressbar\" aria-valuenow=\"${value}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"min-width: 2em; width: ${value}%;\">\n    ${value}%\n    </div>\n  </div>`;\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a cell value and translates it with the \"ngx-translate\" service */\nexport const translateFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? translate.instant(value) : '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a boolean value, cast it to upperCase string and finally translates it with the \"ngx-translate\" service */\nexport const translateBooleanFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n  return value ? translate.instant(value.toUpperCase() as string) : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const uppercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toUpperCase() : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const yesNoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string =>\n  value ? 'Yes' : 'No';\n",
    "import { Column } from './../models/index';\nimport { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { boldFormatter } from './boldFormatter';\nimport { checkboxFormatter } from './checkboxFormatter';\nimport { checkmarkFormatter } from './checkmarkFormatter';\nimport { collectionFormatter } from './collectionFormatter';\nimport { collectionEditorFormatter } from './collectionEditorFormatter';\nimport { complexObjectFormatter } from './complexObjectFormatter';\nimport { dateIsoFormatter } from './dateIsoFormatter';\nimport { dateTimeIsoFormatter } from './dateTimeIsoFormatter';\nimport { dateTimeIsoAmPmFormatter } from './dateTimeIsoAmPmFormatter';\nimport { dateTimeUsAmPmFormatter } from './dateTimeUsAmPmFormatter';\nimport { dateTimeUsFormatter } from './dateTimeUsFormatter';\nimport { dateUsFormatter } from './dateUsFormatter';\nimport { decimalFormatter } from './decimalFormatter';\nimport { deleteIconFormatter } from './deleteIconFormatter';\nimport { dollarColoredBoldFormatter } from './dollarColoredBoldFormatter';\nimport { dollarColoredFormatter } from './dollarColoredFormatter';\nimport { dollarFormatter } from './dollarFormatter';\nimport { editIconFormatter } from './editIconFormatter';\nimport { hyperlinkFormatter } from './hyperlinkFormatter';\nimport { hyperlinkUriPrefixFormatter } from './hyperlinkUriPrefixFormatter';\nimport { infoIconFormatter } from './infoIconFormatter';\nimport { lowercaseFormatter } from './lowercaseFormatter';\nimport { maskFormatter } from './maskFormatter';\nimport { multipleFormatter } from './multipleFormatter';\nimport { percentFormatter } from './percentFormatter';\nimport { percentCompleteBarFormatter } from './percentCompleteBarFormatter';\nimport { percentCompleteFormatter } from './percentCompleteFormatter';\nimport { percentSymbolFormatter } from './percentSymbolFormatter';\nimport { progressBarFormatter } from './progressBarFormatter';\nimport { translateFormatter } from './translateFormatter';\nimport { translateBooleanFormatter } from './translateBooleanFormatter';\nimport { uppercaseFormatter } from './uppercaseFormatter';\nimport { yesNoFormatter } from './yesNoFormatter';\n\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const Formatters = {\n  /** Takes an array of string and converts it to a comma delimited string */\n  arrayToCsv: arrayToCsvFormatter,\n\n  /** show value in bold font weight as well */\n  bold: boldFormatter,\n\n  /** When value is filled (true), it will display a checkbox Unicode icon */\n  checkbox: checkboxFormatter,\n\n  /** When value is filled (true), it will display a Font-Awesome icon (fa-check) */\n  checkmark: checkmarkFormatter,\n\n  /** Takes a complex data object and return the data under that property (for example: \"user.firstName\" will return the first name \"John\") */\n  complexObject: complexObjectFormatter,\n\n  /**\n   * Looks up values from the columnDefinition.params.collection property and displays the label in CSV or string format\n   * @example\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\n   * const dataset = [{ value: 1 },{ value: 2 }];\n   */\n  collection: collectionFormatter,\n\n  /**\n   * Looks up values from the columnDefinition.editor.collection property and displays the label in CSV or string format\n   * @example\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\n   * const dataset = [{ value: 1 },{ value: 2 }];\n   */\n  collectionEditor: collectionEditorFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date format */\n  dateIso: dateIsoFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date+Time format */\n  dateTimeIso: dateTimeIsoFormatter,\n\n  /** Takes a Date object and displays it as an ISO Date+Time+(am/pm) format */\n  dateTimeIsoAmPm: dateTimeIsoAmPmFormatter,\n\n  /** Takes a Date object and displays it as an US Date format */\n  dateUs: dateUsFormatter,\n\n  /** Takes a Date object and displays it as an US Date+Time format */\n  dateTimeUs: dateTimeUsFormatter,\n\n  /** Takes a Date object and displays it as an US Date+Time+(am/pm) format */\n  dateTimeUsAmPm: dateTimeUsAmPmFormatter,\n\n  /** Displays a Font-Awesome delete icon (fa-trash) */\n  deleteIcon: deleteIconFormatter,\n\n  /**\n   * Display the value as x decimals formatted, defaults to 2 decimals.\n   * You can pass \"decimalPlaces\" or \"minDecimalPlaces\" and/or \"maxDecimalPlaces\" to the generic \"params\" property, example:: `{ formatter: Formatters.decimal, params: { decimalPlaces: 3 }}`\n   * The property \"decimalPlaces\" is an alias of \"minDecimalPlaces\"\n   */\n  decimal: decimalFormatter,\n\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value */\n  dollar: dollarFormatter,\n\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value */\n  dollarColored: dollarColoredFormatter,\n\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value, show it in bold font weight as well */\n  dollarColoredBold: dollarColoredBoldFormatter,\n\n  /** Displays a Font-Awesome edit icon (fa-pencil) */\n  editIcon: editIconFormatter,\n\n  /** Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https). The structure will be \"<a href=\"hyperlink\">hyperlink</a>\" */\n  hyperlink: hyperlinkFormatter,\n\n  /** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\n  hyperlinkUriPrefix: hyperlinkUriPrefixFormatter,\n\n  /** Displays a Font-Awesome edit icon (fa-info-circle) */\n  infoIcon: infoIconFormatter,\n\n  /** Takes a value and displays it all lowercase */\n  lowercase: lowercaseFormatter,\n\n  /**\n   * Takes a value display it according to a mask provided\n   * e.: 1234567890 with mask \"(000) 000-0000\" will display \"(123) 456-7890\"\n   */\n  mask: maskFormatter,\n\n  /**\n   * You can pipe multiple formatters (executed in sequence), use params to pass the list of formatters. For example::\n   * { field: 'title', formatter: Formatters.multiple, params: { formatters: [ Formatters.lowercase, Formatters.uppercase ] }\n   */\n  multiple: multipleFormatter,\n\n  /** Takes a cell value number (between 0.0-1.0) and displays a red (<50) or green (>=50) bar */\n  percent: percentFormatter,\n\n  /** Takes a cell value number (between 0.0-100) and displays a red (<50) or green (>=50) bar */\n  percentComplete: percentCompleteFormatter,\n\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"percent-complete-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\n  percentCompleteBar: percentCompleteBarFormatter,\n\n  /** Takes a cell value number (between 0-100) and add the \"%\" after the number */\n  percentSymbol: percentSymbolFormatter,\n\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"progress-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\n  progressBar: progressBarFormatter,\n\n  /** Takes a cell value and translates it (i18n). Requires an instance of the Translate Service:: `i18n: this.translate */\n  translate: translateFormatter,\n\n  /** Takes a boolean value, cast it to upperCase string and finally translates it (i18n). */\n  translateBoolean: translateBooleanFormatter,\n\n  /** Takes a value and displays it all uppercase */\n  uppercase: uppercaseFormatter,\n\n  /** Takes a boolean value and display a string 'Yes' or 'No' */\n  yesNo: yesNoFormatter\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsPercentageFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + '%' + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const avgTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 4) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const minTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.min && totals.min[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const maxTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.max && totals.max[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 4) + suffix}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 2) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}`;\n  }\n  return '';\n};\n",
    "import { Column } from './../models/index';\nimport { avgTotalsPercentageFormatter } from './avgTotalsPercentageFormatter';\nimport { avgTotalsDollarFormatter } from './avgTotalsDollarFormatter';\nimport { avgTotalsFormatter } from './avgTotalsFormatter';\nimport { minTotalsFormatter } from './minTotalsFormatter';\nimport { maxTotalsFormatter } from './maxTotalsFormatter';\nimport { sumTotalsColoredFormatter } from './sumTotalsColoredFormatter';\nimport { sumTotalsDollarColoredBoldFormatter } from './sumTotalsDollarColoredBoldFormatter';\nimport { sumTotalsDollarColoredFormatter } from './sumTotalsDollarColoredFormatter';\nimport { sumTotalsDollarBoldFormatter } from './sumTotalsDollarBoldFormatter';\nimport { sumTotalsDollarFormatter } from './sumTotalsDollarFormatter';\nimport { sumTotalsFormatter } from './sumTotalsFormatter';\nimport { sumTotalsBoldFormatter } from './sumTotalsBoldFormatter';\n\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const GroupTotalFormatters = {\n  /**\n   * Average all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotals: avgTotalsFormatter,\n\n  /**\n   * Average all the column totals and display '$' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsDollar: avgTotalsDollarFormatter,\n\n  /**\n   * Average all the column totals and display '%' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsPercentage: avgTotalsPercentageFormatter,\n\n  /**\n   * Show max value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  maxTotals: maxTotalsFormatter,\n\n  /**\n   * Show min value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  minTotals: minTotalsFormatter,\n\n  /**\n   * Sums up all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotals: sumTotalsFormatter,\n\n  /**\n   * Sums up all the column totals and display it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsBold: sumTotalsBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsColored: sumTotalsColoredFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollar: sumTotalsDollarFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign and show it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarBold: sumTotalsDollarBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColored: sumTotalsDollarColoredFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value, show it in bold font weight as well\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColoredBold: sumTotalsDollarColoredBoldFormatter,\n};\n",
    "import { Pagination } from './../models/pagination.interface';\r\nimport { AfterViewInit, Component, EventEmitter, Injectable, Input, OnDestroy, Output } from '@angular/core';\r\nimport { castToPromise } from './../services/utilities';\r\nimport { GridOption } from './../models/index';\r\nimport { FilterService } from './../services/index';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n@Component({\r\n  selector: 'slick-pagination',\r\n  template: `<div class=\"slick-pagination\">\r\n    <div class=\"slick-pagination-nav\">\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-first fa fa-angle-double-left\" aria-label=\"First\" (click)=\"changeToFirstPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-prev fa fa-angle-left\" aria-label=\"Previous\" (click)=\"changeToPreviousPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n\r\n        <div class=\"slick-page-number\">\r\n            <span [translate]=\"'PAGE'\"></span>\r\n            <input type=\"text\" class=\"form-control\" value=\"{{pageNumber}}\" size=\"1\"  (change)=\"changeToCurrentPage($event)\">\r\n            <span [translate]=\"'OF'\"></span><span> {{pageCount}}</span>\r\n        </div>\r\n\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-next text-center fa fa-lg fa-angle-right\" aria-label=\"Next\" (click)=\"changeToNextPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-end fa fa-lg fa-angle-double-right\" aria-label=\"Last\" (click)=\"changeToLastPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n    </div>\r\n    <span class=\"slick-pagination-settings\">\r\n        <select id=\"items-per-page-label\" [value]=\"itemsPerPage\" (change)=\"onChangeItemPerPage($event)\">\r\n        <option value=\"{{pageSize}}\" *ngFor=\"let pageSize of paginationPageSizes;\">{{pageSize}}</option>\r\n        </select>\r\n        <span [translate]=\"'ITEMS_PER_PAGE'\"></span>,\r\n        <span class=\"slick-pagination-count\">\r\n            <span [translate]=\"'FROM_TO_OF_TOTAL_ITEMS'\" [translateParams]=\"{ from: dataFrom, to: dataTo, totalItems: totalItems }\"></span>\r\n        </span>\r\n    </span>\r\n    </div>\r\n`\r\n})\r\n@Injectable()\r\nexport class SlickPaginationComponent implements AfterViewInit, OnDestroy {\r\n  private _filterSubcription: Subscription;\r\n  private _gridPaginationOptions: GridOption;\r\n  private _isFirstRender = true;\r\n  @Output() onPaginationChanged = new EventEmitter<Pagination>();\r\n\r\n  @Input()\r\n  set gridPaginationOptions(gridPaginationOptions: GridOption) {\r\n    this._gridPaginationOptions = gridPaginationOptions;\r\n    if (this._isFirstRender || !gridPaginationOptions || !gridPaginationOptions.pagination || (gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n      this._isFirstRender = false;\r\n    }\r\n  }\r\n  get gridPaginationOptions(): GridOption {\r\n    return this._gridPaginationOptions;\r\n  }\r\n  @Input() grid: any;\r\n  dataFrom = 1;\r\n  dataTo = 1;\r\n  itemsPerPage: number;\r\n  pageCount = 0;\r\n  pageNumber = 1;\r\n  totalItems = 0;\r\n  paginationCallback: Function;\r\n  paginationPageSizes = [25, 75, 100];\r\n  fromToParams: any = { from: this.dataFrom, to: this.dataTo, totalItems: this.totalItems };\r\n\r\n  /** Constructor */\r\n  constructor(private filterService: FilterService) { }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._gridPaginationOptions = this._gridPaginationOptions;\r\n    if (!this._gridPaginationOptions || !this._gridPaginationOptions.pagination || (this._gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n    }\r\n\r\n    // Subscribe to Event Emitter of Filter & Sort changed, go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterChanged.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n    // Subscribe to Filter clear and go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterCleared.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n  }\r\n\r\n  ceil(number: number) {\r\n    return Math.ceil(number);\r\n  }\r\n\r\n  changeToFirstPage(event: any) {\r\n    this.pageNumber = 1;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToLastPage(event: any) {\r\n    this.pageNumber = this.pageCount;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToNextPage(event: any) {\r\n    if (this.pageNumber < this.pageCount) {\r\n      this.pageNumber++;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToPreviousPage(event: any) {\r\n    if (this.pageNumber > 0) {\r\n      this.pageNumber--;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToCurrentPage(event: any) {\r\n    this.pageNumber = event.currentTarget.value;\r\n    if (this.pageNumber < 1) {\r\n          this.pageNumber = 1;\r\n    } else if (this.pageNumber > this.pageCount) {\r\n          this.pageNumber = this.pageCount;\r\n    }\r\n\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  dispose() {\r\n    this.onPaginationChanged.unsubscribe();\r\n    if (this._filterSubcription) {\r\n      this._filterSubcription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  onChangeItemPerPage(event: any) {\r\n    const itemsPerPage = +event.target.value;\r\n    this.pageCount = Math.ceil(this.totalItems / itemsPerPage);\r\n    this.pageNumber = 1;\r\n    this.itemsPerPage = itemsPerPage;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  refreshPagination(isPageNumberReset: boolean = false) {\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this._gridPaginationOptions && this._gridPaginationOptions.pagination) {\r\n      const pagination = this._gridPaginationOptions.pagination;\r\n      // set the number of items per page if not already set\r\n      if (!this.itemsPerPage) {\r\n        this.itemsPerPage = +((backendApi && backendApi.options && backendApi.options.paginationOptions && backendApi.options.paginationOptions.first) ? backendApi.options.paginationOptions.first : this._gridPaginationOptions.pagination.pageSize);\r\n      }\r\n\r\n      // if totalItems changed, we should always go back to the first page and recalculation the From-To indexes\r\n      if (isPageNumberReset || this.totalItems !== pagination.totalItems) {\r\n        if (this._isFirstRender && pagination.pageNumber && pagination.pageNumber > 1) {\r\n          this.pageNumber = pagination.pageNumber || 1;\r\n        } else {\r\n          this.pageNumber = 1;\r\n        }\r\n\r\n        // when page number is set to 1 then also reset the \"offset\" of backend service\r\n        if (this.pageNumber === 1) {\r\n          backendApi.service.resetPaginationOptions();\r\n        }\r\n      }\r\n\r\n      // calculate and refresh the multiple properties of the pagination UI\r\n      this.paginationPageSizes = this._gridPaginationOptions.pagination.pageSizes;\r\n      this.totalItems = this._gridPaginationOptions.pagination.totalItems;\r\n      this.recalculateFromToIndexes();\r\n    }\r\n    this.pageCount = Math.ceil(this.totalItems / this.itemsPerPage);\r\n  }\r\n\r\n  async onPageChanged(event: Event | undefined, pageNumber: number) {\r\n    this.recalculateFromToIndexes();\r\n\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this.dataTo > this.totalItems) {\r\n      this.dataTo = this.totalItems;\r\n    } else if (this.totalItems < this.itemsPerPage) {\r\n      this.dataTo = this.totalItems;\r\n    }\r\n    if (backendApi) {\r\n      const itemsPerPage = +this.itemsPerPage;\r\n\r\n      // keep start time & end timestamps & return it after process execution\r\n      const startTime = new Date();\r\n\r\n      if (backendApi.preProcess) {\r\n        backendApi.preProcess();\r\n      }\r\n\r\n      const query = backendApi.service.processOnPaginationChanged(event, { newPage: pageNumber, pageSize: itemsPerPage });\r\n\r\n      // the process could be an Observable (like HttpClient) or a Promise\r\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n      const observableOrPromise = backendApi.process(query);\r\n      const processResult = await castToPromise(observableOrPromise);\r\n      const endTime = new Date();\r\n\r\n      // from the result, call our internal post process to update the Dataset and Pagination info\r\n      if (processResult && backendApi.internalPostProcess) {\r\n        backendApi.internalPostProcess(processResult);\r\n      }\r\n\r\n      // send the response process to the postProcess callback\r\n      if (backendApi.postProcess) {\r\n        if (processResult instanceof Object) {\r\n          processResult.statistics = {\r\n            startTime,\r\n            endTime,\r\n            executionTime: endTime.valueOf() - startTime.valueOf(),\r\n            itemCount: this.totalItems,\r\n            totalItemCount: this.totalItems\r\n          };\r\n        }\r\n        backendApi.postProcess(processResult);\r\n      }\r\n    } else {\r\n      throw new Error('Pagination with a backend service requires \"BackendServiceApi\" to be defined in your grid options');\r\n    }\r\n\r\n    // emit the changes to the parent component\r\n    this.onPaginationChanged.emit({\r\n      pageNumber: this.pageNumber,\r\n      pageSizes: this.paginationPageSizes,\r\n      pageSize: this.itemsPerPage,\r\n      totalItems: this.totalItems\r\n    });\r\n  }\r\n\r\n  recalculateFromToIndexes() {\r\n    this.dataFrom = (this.pageNumber * this.itemsPerPage) - this.itemsPerPage + 1;\r\n    this.dataTo = (this.totalItems < this.itemsPerPage) ? this.totalItems : (this.pageNumber * this.itemsPerPage);\r\n  }\r\n}\r\n",
    "// import 3rd party vendor libs\r\nimport 'jquery-ui-dist/jquery-ui';\r\nimport 'slickgrid/lib/jquery.event.drag-2.3.0';\r\nimport 'slickgrid/slick.core';\r\nimport 'slickgrid/slick.dataview';\r\nimport 'slickgrid/slick.grid';\r\nimport 'slickgrid/slick.dataview';\r\nimport 'slickgrid/slick.groupitemmetadataprovider';\r\nimport 'slickgrid/controls/slick.columnpicker';\r\nimport 'slickgrid/controls/slick.gridmenu';\r\nimport 'slickgrid/controls/slick.pager';\r\nimport 'slickgrid/plugins/slick.autotooltips';\r\nimport 'slickgrid/plugins/slick.cellexternalcopymanager';\r\nimport 'slickgrid/plugins/slick.cellrangedecorator';\r\nimport 'slickgrid/plugins/slick.cellrangeselector';\r\nimport 'slickgrid/plugins/slick.cellselectionmodel';\r\nimport 'slickgrid/plugins/slick.checkboxselectcolumn';\r\nimport 'slickgrid/plugins/slick.headerbuttons';\r\nimport 'slickgrid/plugins/slick.headermenu';\r\nimport 'slickgrid/plugins/slick.rowmovemanager';\r\nimport 'slickgrid/plugins/slick.rowselectionmodel';\r\nimport { AfterViewInit, Component, EventEmitter, Inject, Injectable, Input, Output, OnDestroy, OnInit, ElementRef, ViewChild } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { castToPromise, titleCase } from './../services/utilities';\r\nimport { GlobalGridOptions } from './../global-grid-options';\r\nimport {\r\n  AngularGridInstance,\r\n  BackendServiceOption,\r\n  Column,\r\n  GraphqlResult,\r\n  GridOption,\r\n  GridStateChange,\r\n  GridStateType,\r\n  Pagination,\r\n  Statistic\r\n} from './../models/index';\r\nimport { ControlAndPluginService } from './../services/controlAndPlugin.service';\r\nimport { ExportService } from './../services/export.service';\r\nimport { FilterService } from './../services/filter.service';\r\nimport { GraphqlService } from './../services/graphql.service';\r\nimport { GridEventService } from './../services/gridEvent.service';\r\nimport { GridService } from './../services/grid.service';\r\nimport { GridStateService } from './../services/gridState.service';\r\nimport { GroupingAndColspanService } from './../services/groupingAndColspan.service';\r\nimport { ResizerService } from './../services/resizer.service';\r\nimport { SortService } from './../services/sort.service';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { FilterFactory } from '../filters/filterFactory';\r\nimport { SlickgridConfig } from '../slickgrid-config';\r\n\r\n// using external non-typed js libraries\r\ndeclare var Slick: any;\r\ndeclare var $: any;\r\n\r\nconst slickgridEventPrefix = 'sg';\r\n\r\n@Injectable()\r\n@Component({\r\n  selector: 'angular-slickgrid',\r\n  template: `<div id=\"slickGridContainer-{{gridId}}\" class=\"gridPane\" [style.width]=\"gridWidthString\">\r\n    <div attr.id='{{gridId}}' class=\"slickgrid-container\" style=\"width: 100%\" [style.height]=\"gridHeightString\">\r\n    </div>\r\n\r\n    <slick-pagination id=\"slickPagingContainer-{{gridId}}\"\r\n        *ngIf=\"showPagination\"\r\n        (onPaginationChanged)=\"paginationChanged($event)\"\r\n        [gridPaginationOptions]=\"gridPaginationOptions\">\r\n    </slick-pagination>\r\n</div>\r\n`,\r\n  providers: [\r\n    ControlAndPluginService,\r\n    ExportService,\r\n    FilterFactory,\r\n    FilterService,\r\n    GraphqlService,\r\n    GridEventService,\r\n    GridService,\r\n    GridStateService,\r\n    GroupingAndColspanService,\r\n    ResizerService,\r\n    SortService,\r\n    SlickgridConfig\r\n  ]\r\n})\r\nexport class AngularSlickgridComponent implements AfterViewInit, OnDestroy, OnInit {\r\n  private _dataset: any[];\r\n  private _columnDefinitions: Column[];\r\n  private _dataView: any;\r\n  private _eventHandler: any = new Slick.EventHandler();\r\n  grid: any;\r\n  gridPaginationOptions: GridOption;\r\n  gridHeightString: string;\r\n  gridWidthString: string;\r\n  groupingDefinition: any = {};\r\n  groupItemMetadataProvider: any;\r\n  showPagination = false;\r\n  isGridInitialized = false;\r\n  subscriptions: Subscription[] = [];\r\n\r\n  @Output() onAngularGridCreated = new EventEmitter<AngularGridInstance>();\r\n  @Output() onDataviewCreated = new EventEmitter<any>();\r\n  @Output() onGridCreated = new EventEmitter<any>();\r\n  @Output() onGridInitialized = new EventEmitter<any>();\r\n  @Output() onBeforeGridCreate = new EventEmitter<boolean>();\r\n  @Output() onBeforeGridDestroy = new EventEmitter<any>();\r\n  @Output() onAfterGridDestroyed = new EventEmitter<boolean>();\r\n  @Output() onGridStateChanged = new EventEmitter<GridStateChange>();\r\n  @Input() gridId: string;\r\n  @Input() gridOptions: GridOption;\r\n  @Input() gridHeight = 0;\r\n  @Input() gridWidth = 0;\r\n\r\n  @Input()\r\n  set columnDefinitions(columnDefinitions: Column[]) {\r\n    this._columnDefinitions = columnDefinitions;\r\n    if (this.isGridInitialized) {\r\n      this.updateColumnDefinitionsList(columnDefinitions);\r\n    }\r\n  }\r\n  get columnDefinitions(): Column[] {\r\n    return this._columnDefinitions;\r\n  }\r\n  @Input()\r\n  set dataset(dataset: any[]) {\r\n    this._dataset = dataset;\r\n    this.refreshGridData(dataset);\r\n  }\r\n  get dataset(): any[] {\r\n    return this._dataView.getItems();\r\n  }\r\n\r\n\r\n  constructor(\r\n    private controlAndPluginService: ControlAndPluginService,\r\n    private elm: ElementRef,\r\n    private exportService: ExportService,\r\n    private filterService: FilterService,\r\n    private gridService: GridService,\r\n    private gridEventService: GridEventService,\r\n    private gridStateService: GridStateService,\r\n    private groupingAndColspanService: GroupingAndColspanService,\r\n    private resizer: ResizerService,\r\n    private sortService: SortService,\r\n    private translate: TranslateService,\r\n    @Inject('config') private forRootConfig: GridOption\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.onBeforeGridCreate.emit(true);\r\n    if (!this.gridOptions.enableAutoResize && !this.gridOptions.autoResize) {\r\n      this.gridHeightString = `${this.gridHeight}px`;\r\n      this.gridWidthString = `${this.gridWidth}px`;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.onBeforeGridDestroy.emit(this.grid);\r\n    this.destroy();\r\n    this.onAfterGridDestroyed.emit(true);\r\n  }\r\n\r\n  destroy(emptyDomElementContainer = false) {\r\n    this._dataView = [];\r\n    this.gridOptions = {};\r\n    this._eventHandler.unsubscribeAll();\r\n    this.controlAndPluginService.dispose();\r\n    this.filterService.dispose();\r\n    this.gridEventService.dispose();\r\n    this.gridStateService.dispose();\r\n    this.groupingAndColspanService.dispose();\r\n    this.resizer.dispose();\r\n    this.sortService.dispose();\r\n    this.grid.destroy();\r\n\r\n    if (emptyDomElementContainer) {\r\n      $(this.gridOptions.gridContainerId).empty();\r\n    }\r\n\r\n    // also unsubscribe all RxJS subscriptions\r\n    this.subscriptions.forEach((subscription: Subscription) => {\r\n      if (subscription && subscription.unsubscribe) {\r\n        subscription.unsubscribe();\r\n      }\r\n    });\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.initialization();\r\n    this.isGridInitialized = true;\r\n  }\r\n\r\n  initialization() {\r\n    // make sure the dataset is initialized (if not it will throw an error that it cannot getLength of null)\r\n    this._dataset = this._dataset || [];\r\n    this.gridOptions = this.mergeGridOptions(this.gridOptions);\r\n    this.createBackendApiInternalPostProcessCallback(this.gridOptions);\r\n\r\n    if (this.gridOptions.enableGrouping) {\r\n      this.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\r\n      this._dataView = new Slick.Data.DataView({\r\n        groupItemMetadataProvider: this.groupItemMetadataProvider,\r\n        inlineFilters: true\r\n      });\r\n    } else {\r\n      this._dataView = new Slick.Data.DataView();\r\n    }\r\n\r\n    // for convenience, we provide the property \"editor\" as an Angular-Slickgrid editor complex object\r\n    // however \"editor\" is used internally by SlickGrid for it's Editor Factory\r\n    // so in our lib we will swap \"editor\" and copy it into \"internalColumnEditor\"\r\n    // then take back \"editor.model\" and make it the new \"editor\" so that SlickGrid Editor Factory still works\r\n    this._columnDefinitions = this._columnDefinitions.map((c: Column | any) => ({\r\n      ...c,\r\n      editor: c.editor && c.editor.model,\r\n      internalColumnEditor: { ...c.editor }\r\n    })),\r\n\r\n    this.controlAndPluginService.createCheckboxPluginBeforeGridCreation(this._columnDefinitions, this.gridOptions);\r\n    this.grid = new Slick.Grid(`#${this.gridId}`, this._dataView, this._columnDefinitions, this.gridOptions);\r\n\r\n    this.controlAndPluginService.attachDifferentControlOrPlugins(this.grid, this._dataView, this.groupItemMetadataProvider);\r\n    this.attachDifferentHooks(this.grid, this.gridOptions, this._dataView);\r\n\r\n    // emit the Grid & DataView object to make them available in parent component\r\n    this.onGridCreated.emit(this.grid);\r\n    this.onDataviewCreated.emit(this._dataView);\r\n\r\n    this.grid.init();\r\n    this._dataView.beginUpdate();\r\n    this._dataView.setItems(this._dataset, this.gridOptions.datasetIdPropertyName);\r\n    this._dataView.endUpdate();\r\n\r\n    // after the DataView is created & updated execute some processes\r\n    this.executeAfterDataviewCreated(this.grid, this.gridOptions, this._dataView);\r\n\r\n    // attach resize ONLY after the dataView is ready\r\n    this.attachResizeHook(this.grid, this.gridOptions);\r\n\r\n    // attach grouping and header grouping colspan service\r\n    if (this.gridOptions.createPreHeaderPanel) {\r\n      this.groupingAndColspanService.init(this.grid, this._dataView);\r\n    }\r\n\r\n    // attach grid  service\r\n    this.gridService.init(this.grid, this._dataView);\r\n\r\n    // when user enables translation, we need to translate Headers on first pass & subsequently in the attachDifferentHooks\r\n    if (this.gridOptions.enableTranslate) {\r\n      this.controlAndPluginService.translateColumnHeaders();\r\n    }\r\n\r\n    // if Export is enabled, initialize the service with the necessary grid and other objects\r\n    if (this.gridOptions.enableExport) {\r\n      this.exportService.init(this.grid, this._dataView);\r\n    }\r\n\r\n    // once all hooks are in placed and the grid is initialized, we can emit an event\r\n    this.onGridInitialized.emit(this.grid);\r\n\r\n    // attach the Backend Service API callback functions only after the grid is initialized\r\n    // because the preProcess() and onInit() might get triggered\r\n    if (this.gridOptions && this.gridOptions.backendServiceApi) {\r\n      this.attachBackendCallbackFunctions(this.gridOptions);\r\n    }\r\n\r\n    this.gridStateService.init(this.grid, this.controlAndPluginService, this.filterService, this.sortService);\r\n\r\n    this.onAngularGridCreated.emit({\r\n      // Slick Grid & DataView objects\r\n      dataView: this._dataView,\r\n      slickGrid: this.grid,\r\n\r\n      // public methods\r\n      destroy: this.destroy.bind(this),\r\n\r\n      // return all available Services (non-singleton)\r\n      backendService: this.gridOptions && this.gridOptions.backendServiceApi && this.gridOptions.backendServiceApi.service,\r\n      exportService: this.exportService,\r\n      filterService: this.filterService,\r\n      gridEventService: this.gridEventService,\r\n      gridStateService: this.gridStateService,\r\n      gridService: this.gridService,\r\n      groupingService: this.groupingAndColspanService,\r\n      pluginService: this.controlAndPluginService,\r\n      resizerService: this.resizer,\r\n      sortService: this.sortService,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Define what our internal Post Process callback, it will execute internally after we get back result from the Process backend call\r\n   * For now, this is GraphQL Service only feautre and it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\r\n   */\r\n  createBackendApiInternalPostProcessCallback(gridOptions: GridOption) {\r\n    if (gridOptions && gridOptions.backendServiceApi) {\r\n      const backendApi = gridOptions.backendServiceApi;\r\n\r\n      // internalPostProcess only works with a GraphQL Service, so make sure it is that type\r\n      if (backendApi && backendApi.service && backendApi.service instanceof GraphqlService) {\r\n        backendApi.internalPostProcess = (processResult: any) => {\r\n          const datasetName = (backendApi && backendApi.service && typeof backendApi.service.getDatasetName === 'function') ? backendApi.service.getDatasetName() : '';\r\n          if (processResult && processResult.data && processResult.data[datasetName]) {\r\n            this._dataset = processResult.data[datasetName].nodes;\r\n            this.refreshGridData(this._dataset, processResult.data[datasetName].totalCount);\r\n          } else {\r\n            this._dataset = [];\r\n          }\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  attachDifferentHooks(grid: any, gridOptions: GridOption, dataView: any) {\r\n    // on locale change, we have to manually translate the Headers, GridMenu\r\n    this.subscriptions.push(\r\n      this.translate.onLangChange.subscribe((event) => {\r\n        if (gridOptions.enableTranslate) {\r\n          this.controlAndPluginService.translateColumnHeaders();\r\n          this.controlAndPluginService.translateColumnPicker();\r\n          this.controlAndPluginService.translateGridMenu();\r\n          this.controlAndPluginService.translateHeaderMenu();\r\n        }\r\n      })\r\n    );\r\n\r\n    // if user entered some Columns \"presets\", we need to reflect them all in the grid\r\n    if (gridOptions.presets && Array.isArray(gridOptions.presets.columns) && gridOptions.presets.columns.length > 0) {\r\n      const gridColumns: Column[] = this.gridStateService.getAssociatedGridColumns(grid, gridOptions.presets.columns);\r\n      if (gridColumns && Array.isArray(gridColumns) && gridColumns.length > 0) {\r\n        // make sure that the checkbox selector is also visible if it is enabled\r\n        if (gridOptions.enableCheckboxSelector) {\r\n          const checkboxColumn = (Array.isArray(this._columnDefinitions) && this._columnDefinitions.length > 0) ? this._columnDefinitions[0] : null;\r\n          if (checkboxColumn && checkboxColumn.id === '_checkbox_selector' && gridColumns[0].id !== '_checkbox_selector') {\r\n            gridColumns.unshift(checkboxColumn);\r\n          }\r\n        }\r\n\r\n        // finally set the new presets columns (including checkbox selector if need be)\r\n        grid.setColumns(gridColumns);\r\n      }\r\n    }\r\n\r\n    // attach external sorting (backend) when available or default onSort (dataView)\r\n    if (gridOptions.enableSorting) {\r\n      gridOptions.backendServiceApi ? this.sortService.attachBackendOnSort(grid, dataView) : this.sortService.attachLocalOnSort(grid, dataView);\r\n    }\r\n\r\n    // attach external filter (backend) when available or default onFilter (dataView)\r\n    if (gridOptions.enableFiltering) {\r\n      this.filterService.init(grid);\r\n\r\n      // if user entered some \"presets\", we need to reflect them all in the DOM\r\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\r\n        this.filterService.populateColumnFilterSearchTerms();\r\n      }\r\n      gridOptions.backendServiceApi ? this.filterService.attachBackendOnFilter(grid) : this.filterService.attachLocalOnFilter(grid, this._dataView);\r\n    }\r\n\r\n    // if user set an onInit Backend, we'll run it right away (and if so, we also need to run preProcess, internalPostProcess & postProcess)\r\n    if (gridOptions.backendServiceApi) {\r\n      const backendApi = gridOptions.backendServiceApi;\r\n\r\n      if (backendApi && backendApi.service && backendApi.service.init) {\r\n        backendApi.service.init(backendApi.options, gridOptions.pagination, this.grid);\r\n      }\r\n    }\r\n\r\n    // expose all Slick Grid Events through dispatch\r\n    for (const prop in grid) {\r\n      if (grid.hasOwnProperty(prop) && prop.startsWith('on')) {\r\n        this._eventHandler.subscribe(grid[prop], (e: any, args: any) => {\r\n          return this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\r\n        });\r\n      }\r\n    }\r\n\r\n    // expose all Slick DataView Events through dispatch\r\n    for (const prop in dataView) {\r\n      if (dataView.hasOwnProperty(prop) && prop.startsWith('on')) {\r\n        this._eventHandler.subscribe(dataView[prop], (e: any, args: any) => {\r\n          return this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\r\n        });\r\n      }\r\n    }\r\n\r\n    // expose GridState Service changes event through dispatch\r\n    this.subscriptions.push(\r\n      this.gridStateService.onGridStateChanged.subscribe((gridStateChange: GridStateChange) => {\r\n        this.onGridStateChanged.emit(gridStateChange);\r\n      })\r\n    );\r\n\r\n\r\n    // on cell click, mainly used with the columnDef.action callback\r\n    this.gridEventService.attachOnCellChange(grid, dataView);\r\n    this.gridEventService.attachOnClick(grid, dataView);\r\n\r\n    this._eventHandler.subscribe(dataView.onRowCountChanged, (e: any, args: any) => {\r\n      grid.updateRowCount();\r\n      grid.render();\r\n    });\r\n    this._eventHandler.subscribe(dataView.onRowsChanged, (e: any, args: any) => {\r\n      grid.invalidateRows(args.rows);\r\n      grid.render();\r\n    });\r\n\r\n    // does the user have a colspan callback?\r\n    if (gridOptions.colspanCallback) {\r\n      this._dataView.getItemMetadata = (rowNumber: number) => {\r\n        const item = this._dataView.getItem(rowNumber);\r\n        return gridOptions.colspanCallback(item);\r\n      };\r\n    }\r\n  }\r\n\r\n  attachBackendCallbackFunctions(gridOptions: GridOption) {\r\n    const backendApi = gridOptions.backendServiceApi;\r\n    const serviceOptions: BackendServiceOption = (backendApi && backendApi.service && backendApi.service.options) ? backendApi.service.options : {};\r\n    const isExecuteCommandOnInit = (!serviceOptions) ? false : ((serviceOptions && serviceOptions.hasOwnProperty('executeProcessCommandOnInit')) ? serviceOptions['executeProcessCommandOnInit'] : true);\r\n\r\n    // update backend filters (if need be) before the query runs\r\n    if (backendApi) {\r\n      const backendService = backendApi.service;\r\n\r\n      // if user entered some any \"presets\", we need to reflect them all in the grid\r\n      if (gridOptions && gridOptions.presets) {\r\n         // Filters \"presets\"\r\n         if (backendService && backendService.updateFilters && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\r\n          backendService.updateFilters(gridOptions.presets.filters, true);\r\n        }\r\n        // Sorters \"presets\"\r\n        if (backendService && backendService.updateSorters && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\r\n          backendService.updateSorters(undefined, gridOptions.presets.sorters);\r\n        }\r\n        // Pagination \"presets\"\r\n        if (backendService && backendService.updatePagination && gridOptions.presets.pagination) {\r\n          backendService.updatePagination(gridOptions.presets.pagination.pageNumber, gridOptions.presets.pagination.pageSize);\r\n        }\r\n      } else {\r\n        const columnFilters = this.filterService.getColumnFilters();\r\n        if (columnFilters && backendService && backendService.updateFilters) {\r\n          backendService.updateFilters(columnFilters, false);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (backendApi && backendApi.service && (backendApi.onInit || isExecuteCommandOnInit)) {\r\n      const query = (typeof backendApi.service.buildQuery === 'function') ? backendApi.service.buildQuery() : '';\r\n      const observableOrPromise = (isExecuteCommandOnInit) ? backendApi.process(query) : backendApi.onInit(query);\r\n\r\n      // wrap this inside a setTimeout to avoid timing issue since the gridOptions needs to be ready before running this onInit\r\n      setTimeout(async () => {\r\n        // keep start time & end timestamps & return it after process execution\r\n        const startTime = new Date();\r\n\r\n        if (backendApi.preProcess) {\r\n          backendApi.preProcess();\r\n        }\r\n\r\n        // the process could be an Observable (like HttpClient) or a Promise\r\n        // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n        const processResult: GraphqlResult | any = await castToPromise(observableOrPromise);\r\n        const endTime = new Date();\r\n\r\n        // define what our internal Post Process callback, only available for GraphQL Service for now\r\n        // it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\r\n        if (processResult && backendApi && backendApi.service instanceof GraphqlService && backendApi.internalPostProcess) {\r\n          backendApi.internalPostProcess(processResult);\r\n        }\r\n\r\n        // send the response process to the postProcess callback\r\n        if (backendApi.postProcess) {\r\n          const datasetName = (backendApi && backendApi.service && typeof backendApi.service.getDatasetName === 'function') ? backendApi.service.getDatasetName() : '';\r\n          if (processResult instanceof Object) {\r\n            processResult.statistics = {\r\n              startTime,\r\n              endTime,\r\n              executionTime: endTime.valueOf() - startTime.valueOf(),\r\n              totalItemCount: this.gridOptions && this.gridOptions.pagination && this.gridOptions.pagination.totalItems\r\n            };\r\n          }\r\n          backendApi.postProcess(processResult);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  attachResizeHook(grid: any, options: GridOption) {\r\n    // expand/autofit columns on first page load\r\n    if (grid && options.autoFitColumnsOnFirstLoad) {\r\n      grid.autosizeColumns();\r\n    }\r\n\r\n    // auto-resize grid on browser resize\r\n    this.resizer.init(grid);\r\n    if (options.enableAutoResize) {\r\n      this.resizer.attachAutoResizeDataGrid({ height: this.gridHeight, width: this.gridWidth });\r\n      if (grid && options.autoFitColumnsOnFirstLoad) {\r\n        grid.autosizeColumns();\r\n      }\r\n    }\r\n  }\r\n\r\n  executeAfterDataviewCreated(grid: any, gridOptions: GridOption, dataView: any) {\r\n    // if user entered some Sort \"presets\", we need to reflect them all in the DOM\r\n    if (gridOptions.enableSorting) {\r\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\r\n        this.sortService.loadLocalPresets(grid, dataView);\r\n      }\r\n    }\r\n  }\r\n\r\n  mergeGridOptions(gridOptions): GridOption {\r\n    gridOptions.gridId = this.gridId;\r\n    gridOptions.gridContainerId = `slickGridContainer-${this.gridId}`;\r\n    if (gridOptions.enableFiltering || this.forRootConfig.enableFiltering) {\r\n      gridOptions.showHeaderRow = true;\r\n    }\r\n    // use jquery extend to deep merge and avoid immutable properties changed in GlobalGridOptions after route change\r\n    return $.extend(true, {}, GlobalGridOptions, this.forRootConfig, gridOptions);\r\n  }\r\n\r\n  /**\r\n   * On a Pagination changed, we will trigger a Grid State changed with the new pagination info\r\n   * Also if we use Row Selection or the Checkbox Selector, we need to reset any selection\r\n   */\r\n  paginationChanged(pagination: Pagination) {\r\n    if (this.gridOptions.enableRowSelection || this.gridOptions.enableCheckboxSelector) {\r\n      this.gridService.setSelectedRows([]);\r\n    }\r\n\r\n    this.gridStateService.onGridStateChanged.next({\r\n      change: { newValues: pagination, type: GridStateType.pagination },\r\n      gridState: this.gridStateService.getCurrentGridState()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well\r\n   * @param dataset\r\n   */\r\n  refreshGridData(dataset: any[], totalCount?: number) {\r\n    if (dataset && this.grid && this._dataView && typeof this._dataView.setItems === 'function') {\r\n      this._dataView.setItems(dataset, this.gridOptions.datasetIdPropertyName);\r\n      if (!this.gridOptions.backendServiceApi) {\r\n        this._dataView.reSort();\r\n      }\r\n\r\n      // this.grid.setData(dataset);\r\n      this.grid.invalidate();\r\n      this.grid.render();\r\n\r\n      if (this.gridOptions.enablePagination || this.gridOptions.backendServiceApi) {\r\n        // do we want to show pagination?\r\n        // if we have a backendServiceApi and the enablePagination is undefined, we'll assume that we do want to see it, else get that defined value\r\n        this.showPagination = ((this.gridOptions.backendServiceApi && this.gridOptions.enablePagination === undefined) ? true : this.gridOptions.enablePagination) || false;\r\n\r\n        // before merging the grid options, make sure that it has the totalItems count\r\n        // once we have that, we can merge and pass all these options to the pagination component\r\n        if (!this.gridOptions.pagination) {\r\n          this.gridOptions.pagination = (this.gridOptions.pagination) ? this.gridOptions.pagination : undefined;\r\n        }\r\n        if (this.gridOptions.pagination && totalCount) {\r\n          this.gridOptions.pagination.totalItems = totalCount;\r\n        }\r\n        if (this.gridOptions.presets && this.gridOptions.presets.pagination && this.gridOptions.pagination) {\r\n          this.gridOptions.pagination.pageSize = this.gridOptions.presets.pagination.pageSize;\r\n          this.gridOptions.pagination.pageNumber = this.gridOptions.presets.pagination.pageNumber;\r\n        }\r\n        this.gridPaginationOptions = this.mergeGridOptions(this.gridOptions);\r\n      }\r\n\r\n      // resize the grid inside a slight timeout, in case other DOM element changed prior to the resize (like a filter/pagination changed)\r\n      if (this.grid &&  this.gridOptions.enableAutoResize) {\r\n        this.resizer.resizeGrid(10, { height: this.gridHeight, width: this.gridWidth });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dynamically change or update the column definitions list.\r\n   * We will re-render the grid so that the new header and data shows up correctly.\r\n   * If using i18n, we also need to trigger a re-translate of the column headers\r\n   */\r\n  updateColumnDefinitionsList(newColumnDefinitions) {\r\n    if (this.gridOptions.enableTranslate) {\r\n      this.controlAndPluginService.translateColumnHeaders(false, newColumnDefinitions);\r\n    } else {\r\n      this.controlAndPluginService.renderColumnHeaders(newColumnDefinitions);\r\n    }\r\n    this.grid.autosizeColumns();\r\n  }\r\n\r\n  /** Toggle the filter row displayed on first row\r\n   * @param isShowing\r\n   */\r\n  showHeaderRow(isShowing: boolean) {\r\n    this.grid.setHeaderRowVisibility(isShowing);\r\n    return isShowing;\r\n  }\r\n\r\n  /** Toggle the filter row displayed on first row */\r\n  toggleHeaderRow() {\r\n    const isShowing = !this.grid.getOptions().showHeaderRow;\r\n    this.grid.setHeaderRowVisibility(isShowing);\r\n    return isShowing;\r\n  }\r\n\r\n  private dispatchCustomEvent(eventName: string, data?: any, isBubbling: boolean = true, isCancelable: boolean = true) {\r\n    const eventInit: CustomEventInit = { bubbles: isBubbling, cancelable: isCancelable };\r\n    if (data) {\r\n      eventInit.detail = data;\r\n    }\r\n    return this.elm.nativeElement.dispatchEvent(new CustomEvent(eventName, eventInit));\r\n  }\r\n}\r\n",
    "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AngularSlickgridComponent } from './../components/angular-slickgrid.component';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport { FilterFactory } from '../filters/filterFactory';\r\nimport { GraphqlService } from './../services/graphql.service';\r\nimport { GridOdataService } from './../services/grid-odata.service';\r\nimport { GridOption } from './../models/gridOption.interface';\r\nimport { SlickPaginationComponent } from './../components/slick-pagination.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TranslateModule\r\n  ],\r\n  declarations: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  exports: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  entryComponents: [AngularSlickgridComponent]\r\n})\r\nexport class AngularSlickgridModule {\r\n  static forRoot(config: GridOption = {}) {\r\n    return {\r\n      ngModule: AngularSlickgridModule,\r\n      providers: [\r\n        { provide: 'config', useValue: config },\r\n        CollectionService,\r\n        FilterFactory,\r\n        GraphqlService,\r\n        GridOdataService\r\n      ]\r\n    };\r\n  }\r\n}\r\n"
  ],
  "names": [
    "__awaiter",
    "thisArg",
    "_arguments",
    "P",
    "generator",
    "Promise",
    "resolve",
    "reject",
    "fulfilled",
    "value",
    "step",
    "next",
    "e",
    "rejected",
    "result",
    "done",
    "then",
    "apply",
    "__generator",
    "body",
    "f",
    "y",
    "t",
    "g",
    "_",
    "label",
    "sent",
    "trys",
    "ops",
    "verb",
    "throw",
    "return",
    "Symbol",
    "iterator",
    "this",
    "n",
    "v",
    "op",
    "TypeError",
    "call",
    "pop",
    "length",
    "push",
    "__values",
    "o",
    "m",
    "i",
    "__read",
    "r",
    "ar",
    "error",
    "__spread",
    "arguments",
    "concat",
    "colon",
    "comma",
    "equalSign",
    "pipe",
    "semicolon",
    "space",
    "tab",
    "doubleColon",
    "doublePipe",
    "doubleSemicolon",
    "csv",
    "doc",
    "docx",
    "pdf",
    "txt",
    "xls",
    "xlsx",
    "columns",
    "filter",
    "pagination",
    "sorter",
    "empty",
    "contains",
    "lessThan",
    "lessThanOrEqual",
    "greaterThan",
    "greaterThanOrEqual",
    "notEqual",
    "equal",
    "endsWith",
    "startsWith",
    "in",
    "notIn",
    "inContains",
    "notInContains",
    "asc",
    "ASC",
    "desc",
    "DESC",
    "moment",
    "moment_",
    "addWhiteSpaces",
    "nbSpaces",
    "objectsDeepEqual",
    "x",
    "ok",
    "Object",
    "keys",
    "tx",
    "every",
    "key",
    "htmlEncode",
    "$",
    "text",
    "html",
    "htmlEntityDecode",
    "input",
    "replace",
    "match",
    "dec",
    "String",
    "fromCharCode",
    "arraysEqual",
    "a",
    "b",
    "orderMatters",
    "sort",
    "castToPromise",
    "fromServiceName",
    "promise",
    "Observable",
    "first",
    "toPromise",
    "take",
    "Error",
    "findOrDefault",
    "array",
    "logic",
    "defaultVal",
    "find",
    "decimalFormatted",
    "minDecimal",
    "maxDecimal",
    "isNaN",
    "minDec",
    "undefined",
    "maxDec",
    "amount",
    "Math",
    "round",
    "pow",
    "indexOf",
    "mapMomentDateFormatWithFieldType",
    "fieldType",
    "map",
    "FieldType",
    "dateTime",
    "dateTimeIso",
    "dateTimeIsoAmPm",
    "dateTimeIsoAM_PM",
    "dateUs",
    "dateUsShort",
    "dateTimeUs",
    "dateTimeUsAmPm",
    "dateTimeUsAM_PM",
    "dateTimeUsShort",
    "dateTimeUsShortAmPm",
    "dateUtc",
    "date",
    "dateIso",
    "mapFlatpickrDateFormatWithFieldType",
    "mapOperatorType",
    "operator",
    "OperatorType",
    "mapOperatorByFieldType",
    "string",
    "unknown",
    "float",
    "number",
    "dateTimeUsShortAM_PM",
    "parseUtcDate",
    "inputDateString",
    "useUtc",
    "test",
    "dateString",
    "decodeURIComponent",
    "dateMoment",
    "Date",
    "isValid",
    "year",
    "toString",
    "utc",
    "format",
    "sanitizeHtmlToText",
    "htmlString",
    "temp",
    "document",
    "createElement",
    "innerHTML",
    "textContent",
    "innerText",
    "titleCase",
    "charAt",
    "toUpperCase",
    "slice",
    "toCamelCase",
    "str",
    "offset",
    "toLowerCase",
    "compareDates",
    "value1",
    "value2",
    "sortDirection",
    "strict",
    "diff",
    "date1",
    "date2",
    "parseInt",
    "FORMAT",
    "dateUsShortSorter",
    "dateSorter",
    "ISO_8601",
    "dateIsoSorter",
    "dateUsSorter",
    "numericSorter",
    "parseFloat",
    "stringSorter",
    "position",
    "Sorters",
    "numeric",
    "sortByFieldType",
    "sortResult",
    "CollectionService",
    "translate",
    "prototype",
    "filterCollection",
    "collection",
    "filterBy",
    "filteredCollection",
    "property_1",
    "property",
    "value_1",
    "item",
    "sortCollection",
    "sortBy",
    "enableTranslateLabel",
    "_this",
    "sortedCollection",
    "property_2",
    "sortDirection_1",
    "hasOwnProperty",
    "sortDesc",
    "fieldType_1",
    "dataRow1",
    "dataRow2",
    "instant",
    "parseBoolean",
    "type",
    "Injectable",
    "TranslateService",
    "booleanFilterCondition",
    "options",
    "searchTerm",
    "Array",
    "isArray",
    "searchTerms",
    "cellValue",
    "testFilterCondition",
    "includes",
    "findIndex",
    "val",
    "dateFilterCondition",
    "searchDateFormat",
    "filterSearchType",
    "dateCell",
    "dateSearch",
    "dateIsoFilterCondition",
    "dateUsFilterCondition",
    "dateUsShortFilterCondition",
    "dateUtcFilterCondition",
    "collectionSearchFilterCondition",
    "numberFilterCondition",
    "stringFilterCondition",
    "cellValueLastChar",
    "executeMappedCondition",
    "boolean",
    "FilterConditions",
    "booleanFilter",
    "collectionSearchFilter",
    "dateFilter",
    "dateIsoFilter",
    "dateUtcFilter",
    "dateUsFilter",
    "dateUsShortFilter",
    "numberFilter",
    "stringFilter",
    "testFilter",
    "require",
    "CompoundDateFilter",
    "_clearFilterTriggered",
    "defineProperty",
    "get",
    "grid",
    "getOptions",
    "_operator",
    "set",
    "init",
    "args",
    "callback",
    "columnDef",
    "$filterElm",
    "createDomElement",
    "$filterInputElm",
    "keyup",
    "onTriggerEvent",
    "$selectOperatorElm",
    "change",
    "clear",
    "flatInstance",
    "destroy",
    "off",
    "remove",
    "setValues",
    "values",
    "setDate",
    "buildDatePickerInput",
    "inputFormat",
    "outputFormat",
    "outputType",
    "currentLocale",
    "currentLang",
    "substring",
    "pickerOptions",
    "defaultDate",
    "altInput",
    "altFormat",
    "dateFormat",
    "wrap",
    "closeOnSelect",
    "locale",
    "loadFlatpickrLocale",
    "onChange",
    "selectedDates",
    "dateStr",
    "instance",
    "_currentValue",
    "enableTime",
    "CustomEvent",
    "placeholder",
    "gridOptions",
    "defaultFilterPlaceholder",
    "flatpickr",
    "buildSelectOperatorHtmlString",
    "optionValues",
    "getOptionValues",
    "optionValueString",
    "forEach",
    "option",
    "description",
    "$headerElm",
    "getHeaderRowColumn",
    "id",
    "$filterContainerElm",
    "$containerInputGroup",
    "$operatorInputGroupAddon",
    "append",
    "attr",
    "data",
    "addClass",
    "appendTo",
    "localeDefault",
    "default",
    "clearFilterTriggered",
    "selectedOperator",
    "removeClass",
    "hide",
    "close",
    "show",
    "open",
    "CompoundInputFilter",
    "buildInputHtmlString",
    "CompoundSliderFilter",
    "params",
    "_elementRangeInputId",
    "field",
    "_elementRangeOutputId",
    "filterParams",
    "hideSliderNumber",
    "on",
    "target",
    "getElementById",
    "clearedValue",
    "sliderStartValue",
    "$containerInputGroupElm",
    "children",
    "last",
    "buildTemplateHtmlString",
    "minValue",
    "filterProperties",
    "maxValue",
    "defaultValue",
    "valueStep",
    "buildTemplateSliderTextHtmlString",
    "searchTermInput",
    "$sliderTextInputAppendAddon",
    "InputFilter",
    "filterTemplate",
    "trigger",
    "sanitizeHtml",
    "sanitizeHtml_",
    "MultipleSelectFilter",
    "collectionService",
    "isFilled",
    "defaultOptions",
    "container",
    "maxHeight",
    "okButton",
    "addTitle",
    "countSelected",
    "allSelected",
    "selectAllText",
    "selectAllDelimiter",
    "textTemplate",
    "$elm",
    "enableRenderHtml",
    "onClose",
    "selectedItems",
    "multipleSelect",
    "siblings",
    "labelName",
    "customStructure",
    "labelPrefixName",
    "labelPrefix",
    "labelSuffixName",
    "labelSuffix",
    "valueName",
    "newCollection",
    "collectionFilterBy",
    "collectionSortBy",
    "optionCollection",
    "isAddingSpaceBetweenLabels",
    "addSpaceBetweenLabels",
    "isRenderHtmlEnabled",
    "sanitizedOptions",
    "sanitizeHtmlOptions",
    "labelKey",
    "selected",
    "findValueInSearchTerms",
    "labelText",
    "prefixText",
    "suffixText",
    "optionText",
    "assign",
    "filterOptions",
    "SelectFilter",
    "textLabel",
    "SingleSelectFilter",
    "single",
    "selectedItem",
    "SliderFilter",
    "Filters",
    "compoundDate",
    "compoundInput",
    "compoundSlider",
    "slider",
    "singleSelect",
    "select",
    "GlobalGridOptions",
    "alwaysShowVerticalScroll",
    "autoEdit",
    "asyncEditorLoading",
    "autoFitColumnsOnFirstLoad",
    "autoResize",
    "bottomPadding",
    "minHeight",
    "minWidth",
    "sidePadding",
    "cellHighlightCssClass",
    "checkboxSelector",
    "cssClass",
    "columnPicker",
    "hideForceFitButton",
    "hideSyncResizeButton",
    "datasetIdPropertyName",
    "defaultFilter",
    "editable",
    "enableAutoResize",
    "enableCellNavigation",
    "enableColumnPicker",
    "enableColumnReorder",
    "enableExport",
    "enableGridMenu",
    "enableHeaderMenu",
    "enableMouseHoverHighlightRow",
    "enableSorting",
    "enableTextSelectionOnCells",
    "explicitInitialization",
    "exportOptions",
    "delimiter",
    "DelimiterType",
    "exportWithFormatter",
    "filename",
    "FileType",
    "groupingAggregatorRowText",
    "sanitizeDataExport",
    "useUtf8WithBom",
    "forceFitColumns",
    "gridMenu",
    "hideClearAllFiltersCommand",
    "hideClearAllSortingCommand",
    "hideExportCsvCommand",
    "hideExportTextDelimitedCommand",
    "hideRefreshDatasetCommand",
    "hideToggleFilterCommand",
    "iconCssClass",
    "iconClearAllFiltersCommand",
    "iconClearAllSortingCommand",
    "iconExportCsvCommand",
    "iconExportTextDelimitedCommand",
    "iconRefreshDatasetCommand",
    "iconToggleFilterCommand",
    "menuWidth",
    "resizeOnShowHeaderRow",
    "headerMenu",
    "autoAlign",
    "autoAlignOffset",
    "iconSortAscCommand",
    "iconSortDescCommand",
    "iconColumnHideCommand",
    "hideColumnHideCommand",
    "hideSortCommands",
    "headerRowHeight",
    "multiColumnSort",
    "numberedMultiColumnSort",
    "tristateMultiColumnSort",
    "allowedTags",
    "allowedAttributes",
    "*",
    "sortColNumberInSeparateSpan",
    "suppressActiveCellChangeOnEdit",
    "pageSizes",
    "pageSize",
    "totalItems",
    "rowHeight",
    "showHeaderRow",
    "topPanelHeight",
    "SlickgridConfig",
    "FilterFactory",
    "config",
    "_options",
    "createFilter",
    "columnFilter",
    "model",
    "FilterService",
    "filterFactory",
    "_eventHandler",
    "Slick",
    "EventHandler",
    "_filters",
    "_columnFilters",
    "onFilterChanged",
    "Subject",
    "onFilterCleared",
    "_grid",
    "getColumns",
    "attachBackendOnFilter",
    "_slickSubscriber",
    "Event",
    "subscribe",
    "attachBackendOnFilterSubscribe",
    "bind",
    "onHeaderRowCellRendered",
    "addFilterTemplateToHeaderRow",
    "event",
    "backendApi",
    "_gridOptions",
    "backendServiceApi",
    "process",
    "service",
    "startTime",
    "preProcess",
    "processOnFilterChanged",
    "query",
    "_a",
    "emitFilterChanged",
    "processResult",
    "endTime",
    "internalPostProcess",
    "postProcess",
    "statistics",
    "executionTime",
    "valueOf",
    "totalItemCount",
    "attachLocalOnFilter",
    "dataView",
    "_dataView",
    "setFilterArgs",
    "columnFilters",
    "setFilter",
    "customLocalFilter",
    "columnId",
    "refresh",
    "clearFilters",
    "invalidate",
    "render",
    "tslib_1.__values",
    "_b",
    "columnIndex",
    "getColumnIndex",
    "queryField",
    "queryFieldFilter",
    "searchValues",
    "fieldSearchValue",
    "matches",
    "lastValueChar",
    "join",
    "k",
    "ln",
    "useFormatterOuputToFilter",
    "rowIndex",
    "getIdxById",
    "formatter",
    "dispose",
    "disposeColumnFilters",
    "unsubscribeAll",
    "unsubscribe",
    "index",
    "getColumnFilters",
    "getCurrentLocalFilters",
    "currentFilters",
    "colId",
    "callbackSearchEvent",
    "hasSearchTerms",
    "termsCount",
    "oldColumnFilters",
    "colFilter",
    "triggerEvent",
    "serviceOptions",
    "_onFilterChangedOptions",
    "column",
    "filterable",
    "filter_1",
    "updateColumnFilters",
    "filterArguments",
    "filterExistIndex",
    "filt",
    "name",
    "sender",
    "backendService",
    "getCurrentFilters",
    "populateColumnFilterSearchTerms",
    "presets",
    "filters",
    "filters_1",
    "_columnDefinitions",
    "columnPreset",
    "presetFilter",
    "slickEvent",
    "isPropagationStopped",
    "extend",
    "EventData",
    "notify",
    "ExportService",
    "_lineCarriageReturn",
    "_hasGroupedItems",
    "onGridBeforeExportToFile",
    "onGridAfterExportToFile",
    "exportToFile",
    "_exportOptions",
    "dataOutput",
    "getDataOutput",
    "setTimeout",
    "downloadOptions",
    "csvContent",
    "startDownloadFile",
    "groupByColumnHeader",
    "groupingColumnHeaderTitle",
    "_exportQuoteWrapper",
    "outputDataString",
    "grouping",
    "getGrouping",
    "_columnHeaders",
    "getColumnHeaders",
    "header",
    "title",
    "getAllGridRowData",
    "lineCarriageReturn",
    "lineCount",
    "getLength",
    "rowNumber",
    "itemObj",
    "getItem",
    "readRegularRowData",
    "__groupTotals",
    "readGroupedTitleRow",
    "readGroupedTotalRow",
    "columnHeaders",
    "fieldName",
    "headerKey",
    "skippedField",
    "excludeFromExport",
    "width",
    "row",
    "idx",
    "rowOutputString",
    "exportQuoteWrapper",
    "col",
    "fieldId",
    "isEvaluatingFormatter",
    "exportCustomFormatter",
    "itemData",
    "exportCsvForceToKeepAsString",
    "groupName",
    "level",
    "output",
    "groupTotalsFormatter",
    "navigator",
    "appName",
    "outputData",
    "mimeType",
    "TextEncoder",
    "encode",
    "blob",
    "Blob",
    "msSaveOrOpenBlob",
    "link",
    "csvUrl",
    "URL",
    "createObjectURL",
    "href",
    "setAttribute",
    "style",
    "visibility",
    "appendChild",
    "click",
    "removeChild",
    "SortService",
    "_currentLocalSorters",
    "_isBackendGrid",
    "onSortChanged",
    "onSortCleared",
    "attachBackendOnSort",
    "onSort",
    "onBackendSortChanged",
    "processOnSortChanged",
    "emitSortChanged",
    "attachLocalOnSort",
    "sortColumns",
    "sortCols",
    "sortAsc",
    "sortCol",
    "sortColumn",
    "direction",
    "SortDirection",
    "onLocalSortChanged",
    "clearSorting",
    "setSortColumns",
    "getCurrentLocalSorters",
    "getPreviousColumnSorts",
    "getSortColumns",
    "reduce",
    "cols",
    "loadLocalPresets",
    "sorters",
    "presetSorting",
    "gridColumn",
    "l",
    "columnSortObj",
    "SortDirectionNumber",
    "sortField",
    "neutral",
    "currentSorters",
    "getCurrentSorters",
    "Constants",
    "TEXT_CANCEL",
    "TEXT_CLEAR_ALL_FILTERS",
    "TEXT_CLEAR_ALL_SORTING",
    "TEXT_COLUMNS",
    "TEXT_COMMANDS",
    "TEXT_EXPORT_IN_CSV_FORMAT",
    "TEXT_EXPORT_IN_TEXT_FORMAT",
    "TEXT_FORCE_FIT_COLUMNS",
    "TEXT_HIDE_COLUMN",
    "TEXT_REFRESH_DATASET",
    "TEXT_SAVE",
    "TEXT_SYNCHRONOUS_RESIZE",
    "TEXT_SORT_ASCENDING",
    "TEXT_SORT_DESCENDING",
    "TEXT_TOGGLE_FILTER_ROW",
    "VALIDATION_EDITOR_VALID_NUMBER",
    "VALIDATION_EDITOR_VALID_INTEGER",
    "VALIDATION_EDITOR_NUMBER_BETWEEN",
    "VALIDATION_EDITOR_DECIMAL_BETWEEN",
    "ControlAndPluginService",
    "exportService",
    "filterService",
    "sortService",
    "areVisibleColumnDifferent",
    "extensionList",
    "getAllColumns",
    "allColumns",
    "getVisibleColumns",
    "visibleColumns",
    "getAllExtensions",
    "getExtensionByName",
    "p",
    "autoResizeColumns",
    "autosizeColumns",
    "attachDifferentControlOrPlugins",
    "groupItemMetadataProvider",
    "enableTranslate",
    "translateItems",
    "columnPickerControl",
    "createColumnPicker",
    "userOriginalGridMenu",
    "gridMenuControl",
    "createGridMenu",
    "enableAutoTooltip",
    "autoTooltipPlugin",
    "AutoTooltips",
    "autoTooltipOptions",
    "registerPlugin",
    "enableGrouping",
    "groupItemMetaProviderPlugin",
    "enableCheckboxSelector",
    "checkboxSelectorPlugin",
    "rowSelectionPlugin",
    "getSelectionModel",
    "RowSelectionModel",
    "rowSelectionOptions",
    "setSelectionModel",
    "preselectedRows",
    "selectRows",
    "enableRowSelection",
    "enableHeaderButton",
    "headerButtonsPlugin",
    "Plugins",
    "HeaderButtons",
    "headerButton",
    "onCommand",
    "headerMenuPlugin",
    "createHeaderMenu",
    "enableExcelCopyBuffer",
    "createUndoRedoBuffer",
    "hookUndoShortcutKey",
    "createCellExternalCopyManagerPlugin",
    "registerPlugins",
    "plugin",
    "createCheckboxPluginBeforeGridCreation",
    "columnDefinitions",
    "CheckboxSelectColumn",
    "selectionColumn",
    "getColumnDefinition",
    "excludeFromQuery",
    "excludeFromHeaderMenu",
    "unshift",
    "newRowIds",
    "pluginOptions",
    "clipboardCommandHandler",
    "editCommand",
    "undoRedoBuffer",
    "queueAndExecuteCommand",
    "dataItemColumnValueExtractor",
    "editor",
    "formattedOutput",
    "readOnlyMode",
    "includeHeaderWhenCopying",
    "newRowCreator",
    "count",
    "getData",
    "addItem",
    "CellSelectionModel",
    "cellExternalCopyManagerPlugin",
    "CellExternalCopyManager",
    "columnTitle",
    "getPickerTitleOutputString",
    "forceFitTitle",
    "syncResizeTitle",
    "Controls",
    "ColumnPicker",
    "onColumnsChanged",
    "getDefaultGridMenuOptions",
    "customItems",
    "addGridMenuCustomCommands",
    "sortItems",
    "GridMenu",
    "onBeforeMenuShow",
    "executeGridMenuInternalCustomCommands",
    "onMenuClose",
    "gridUid",
    "getUID",
    "getDefaultHeaderMenuOptions",
    "addHeaderMenuCustomCommands",
    "HeaderMenu",
    "executeHeaderMenuInternalCommands",
    "commandQueue",
    "commandCtr",
    "execute",
    "undo",
    "command",
    "GlobalEditorLock",
    "cancelCurrentEdit",
    "redo",
    "hideColumn",
    "removeColumnByIndex",
    "setColumns",
    "keydown",
    "which",
    "ctrlKey",
    "metaKey",
    "shiftKey",
    "gridMenuCustomItems",
    "enableFiltering",
    "disabled",
    "positionOrder",
    "customTitle",
    "headerMenuOptions",
    "menu",
    "items",
    "columnHeaderMenuItems",
    "sortable",
    "itemA",
    "itemB",
    "newSortColumns",
    "setHeaderRowVisibility",
    "setTopPanelVisibility",
    "showTopPanel",
    "refreshBackendDataset",
    "buildQuery",
    "startTime_1",
    "el",
    "translateColumnPicker",
    "emptyColumnPickerTitles",
    "translateGridMenu",
    "emptyGridMenuTitles",
    "translateHeaderMenu",
    "resetHeaderMenuTranslations",
    "translateColumnHeaders",
    "newColumnDefinitions",
    "use",
    "renderColumnHeaders",
    "propName",
    "pickerName",
    "picker",
    "titleKey",
    "columnHeaderMenuItems_1",
    "propertyName",
    "inputKey",
    "outputKey",
    "items_1",
    "items_1_1",
    "timer",
    "GraphqlQueryBuilder",
    "queryFnName",
    "aliasOrFilter",
    "head",
    "alias",
    "prop",
    "getGraphQLValue",
    "searches",
    "_i",
    "searchKeys",
    "parceFind",
    "setAlias",
    "ReferenceError",
    "_levelA",
    "currentValue",
    "itemX",
    "RangeError",
    "propsAA",
    "JSON",
    "stringify",
    "propS",
    "objectToString",
    "obj",
    "sourceA",
    "DEFAULT_ITEMS_PER_PAGE",
    "GraphqlService",
    "defaultOrderBy",
    "defaultPaginationOptions",
    "datasetName",
    "queryQb",
    "QueryBuilder",
    "datasetQb",
    "dataQb",
    "columnIds",
    "columnDefinitions_1",
    "columnDefinitions_1_1",
    "fields",
    "buildFilterQuery",
    "isWithCursor",
    "pageInfoQb",
    "node",
    "datasetFilters",
    "paginationOptions",
    "sortingOptions",
    "orderBy",
    "filteringOptions",
    "addLocaleIntoQuery",
    "i18n",
    "extraQueryArguments",
    "_c",
    "queryArgument",
    "trimDoubleQuotesOnEnumField",
    "keepArgumentFieldDoubleQuotes",
    "inputArray",
    "shift",
    "split",
    "getInitPaginationOptions",
    "getDatasetName",
    "_currentFilters",
    "getCurrentPagination",
    "_currentPagination",
    "_currentSorters",
    "resetPaginationOptions",
    "after",
    "before",
    "pageNumber",
    "updateOptions",
    "debounceTypingDelay",
    "filterTypingDebounce",
    "castFilterToColumnFilter",
    "clearTimeout",
    "updateFilters",
    "processOnPaginationChanged",
    "updatePagination",
    "newPage",
    "updateSorters",
    "isUpdatedByPreset",
    "searchValue",
    "searchByArray",
    "_loop_1",
    "columnFilter_1",
    "this_1",
    "presetSorters",
    "graphqlSorters",
    "tmpSorterArray",
    "queryFieldSorter",
    "sortColumns_1",
    "sortColumns_1_1",
    "inputStr",
    "enumSearchWords",
    "patternWordInQuotes",
    "patternRegex",
    "reg",
    "RegExp",
    "group1",
    "group2",
    "group3",
    "removeDoubleQuotes",
    "tmpFilter",
    "padZero",
    "s",
    "trim",
    "allTitleCase",
    "outputStr",
    "substr",
    "OdataService",
    "_odataOptions",
    "filterQueue",
    "_defaultSortBy",
    "queryTmpArray",
    "top",
    "skip",
    "argument",
    "filterStr",
    "filterBySeparator",
    "saveColumnFilter",
    "updateFilterFromListTerms",
    "getFilterByColumn",
    "columnName",
    "getFilterCount",
    "removeColumnFilter",
    "search",
    "filterOptionObject",
    "updateFilterFromTerm",
    "searchBy",
    "tmpSearchByArray",
    "fieldSearchTerms",
    "tmpSearchTerms",
    "j",
    "lnj",
    "lnk",
    "caseType",
    "CaseType",
    "pascalCase",
    "GridOdataService",
    "odataService",
    "mergedOptions",
    "terms",
    "_loop_2",
    "columnFilter_2",
    "this_2",
    "bypassOdataQuery",
    "bypassBackendQuery",
    "encodeURIComponent",
    "dateFormatted",
    "mapOdataOperator",
    "sortByArray",
    "sorterArray",
    "sortColumns_2",
    "sortColumns_2_1",
    "columnFieldName",
    "csvString",
    "GridEventService",
    "attachOnCellChange",
    "onCellChange",
    "cell",
    "getDataItem",
    "returnedArgs",
    "gridDefinition",
    "dataContext",
    "attachOnClick",
    "onClick",
    "onCellClick",
    "GridStateService",
    "_columns",
    "_currentColumns",
    "subscriptions",
    "onGridStateChanged",
    "controlAndPluginService",
    "subscribeToAllGridChanges",
    "subscription",
    "getCurrentGridState",
    "gridState",
    "getCurrentColumns",
    "currentPagination",
    "getAssociatedCurrentColumns",
    "gridColumns",
    "currentColumns",
    "headerCssClass",
    "getAssociatedGridColumns",
    "currentColumn",
    "c",
    "hookExtensionEventToGridStateChange",
    "extensionName",
    "eventName",
    "extension",
    "newValues",
    "GridStateType",
    "hookSlickGridEventToGridStateChange",
    "resetColumns",
    "setSelectedRows",
    "GridService",
    "gridStateService",
    "getColumnFromEventArguments",
    "getDataItemByRowNumber",
    "getItemRowMetadata",
    "previousItemMetadata",
    "meta",
    "cssClasses",
    "isEmptyObject",
    "_dirty",
    "rowClass",
    "highlightRow",
    "fadeDelay",
    "getItemMetadata",
    "updateItem",
    "gridId",
    "getDataItemByRowIndex",
    "getDataItemByRowIndexes",
    "indexes",
    "dataItems",
    "getSelectedRows",
    "getSelectedRowsDataItem",
    "selectedRowIndexes",
    "setSelectedRow",
    "rowIndexes",
    "renderGrid",
    "resetGrid",
    "originalColumns",
    "addItemToDatagrid",
    "shouldHighlightRow",
    "insertItem",
    "scrollRowIntoView",
    "addItemsToDatagrid",
    "deleteDataGridItem",
    "itemId",
    "deleteDataGridItemById",
    "getRowById",
    "deleteItem",
    "updateDataGridItem",
    "updateDataGridItemById",
    "GroupingAndColspanService",
    "createPreHeaderPanel",
    "createPreHeaderRowGroupingTitle",
    "onColumnsResized",
    "onRowCountChanged",
    "$preHeaderPanel",
    "getPreHeaderPanel",
    "css",
    "getHeadersWidth",
    "parent",
    "headerColumnWidthDiff",
    "getHeaderColumnWidthDiff",
    "lastColumnGroup",
    "widthTotal",
    "columnGroup",
    "ResizerService",
    "onGridBeforeResize",
    "attachAutoResizeDataGrid",
    "newSizes",
    "gridDomElm",
    "resizeGrid",
    "window",
    "_gridUid",
    "calculateGridNewDimensions",
    "containerElm",
    "containerId",
    "gridContainerId",
    "windowElm",
    "enablePagination",
    "gridHeight",
    "height",
    "coordOffsetTop",
    "availableHeight",
    "availableWidth",
    "newHeight",
    "newWidth",
    "getLastResizeDimensions",
    "_lastDimensions",
    "delay",
    "availableDimensions",
    "gridElm",
    "gridContainerElm",
    "exec",
    "userAgent",
    "resizeCanvas",
    "heightWithPagination",
    "AvgAggregator",
    "_field",
    "_count",
    "_nonNullCount",
    "_sum",
    "accumulate",
    "storeResult",
    "groupTotals",
    "avg",
    "MinAggregator",
    "_min",
    "min",
    "MaxAggregator",
    "_max",
    "max",
    "SumAggregator",
    "sum",
    "Aggregators",
    "Avg",
    "Min",
    "Max",
    "Sum",
    "CheckboxEditor",
    "internalColumnEditor",
    "columnEditor",
    "validator",
    "$input",
    "focus",
    "loadValue",
    "preClick",
    "serializeValue",
    "applyValue",
    "state",
    "isValueChanged",
    "validate",
    "validationResults",
    "valid",
    "msg",
    "DateEditor",
    "getCurrentLocale",
    "save",
    "commitChanges",
    "getColumnEditor",
    "domValue",
    "toDate",
    "FloatEditor",
    "getInputDecimalSteps",
    "keyCode",
    "KeyCode",
    "LEFT",
    "RIGHT",
    "stopImmediatePropagation",
    "getDecimalPlaces",
    "rtn",
    "decimalPlaces",
    "decimals",
    "zeroString",
    "decPlaces",
    "toFixed",
    "elmValue",
    "errorMsg",
    "errorMessage",
    "mapValidation",
    "{{minValue}}",
    "{{maxValue}}",
    "{{minDecimal}}",
    "{{maxDecimal}}",
    "matched",
    "IntegerEditor",
    "LongTextEditor",
    "_translate",
    "cancelText",
    "saveText",
    "$container",
    "$wrapper",
    "cancel",
    "handleKeyDown",
    "ENTER",
    "ESCAPE",
    "preventDefault",
    "TAB",
    "navigatePrev",
    "navigateNext",
    "cancelChanges",
    "left",
    "MultipleSelectEditor",
    "offsetLeft",
    "onOpen",
    "autoAdjustDropPosition",
    "$editorElm",
    "editorElmOptions",
    "editorTemplate",
    "each",
    "$e",
    "currentValues",
    "multipleSelectDomElement",
    "multipleSelectOptions",
    "windowHeight",
    "innerHeight",
    "pageScroll",
    "scrollTop",
    "$msDrop",
    "msDropHeight",
    "msDropOffsetTop",
    "newOffsetTop",
    "elementOptions",
    "SingleSelectEditor",
    "SliderEditor",
    "$sliderNumber",
    "editorParams",
    "TextEditor",
    "getValue",
    "setValue",
    "Editors",
    "checkbox",
    "integer",
    "longText",
    "arrayToCsvFormatter",
    "boldFormatter",
    "checkboxFormatter",
    "checkmarkFormatter",
    "collectionFormatter",
    "collectionEditorFormatter",
    "complexObjectFormatter",
    "dateIsoFormatter",
    "isDateValid",
    "dateTimeIsoFormatter",
    "dateTimeIsoAmPmFormatter",
    "dateTimeUsAmPmFormatter",
    "dateTimeUsFormatter",
    "dateUsFormatter",
    "decimalFormatter",
    "minDecimalPlaces",
    "maxDecimalPlaces",
    "deleteIconFormatter",
    "dollarColoredBoldFormatter",
    "isNumber",
    "outputValue",
    "dollarColoredFormatter",
    "dollarFormatter",
    "editIconFormatter",
    "hyperlinkFormatter",
    "matchUrl",
    "hyperlinkUriPrefixFormatter",
    "uriPrefix",
    "infoIconFormatter",
    "lowercaseFormatter",
    "maskFormatter",
    "mask",
    "i_1",
    "v_1",
    "multipleFormatter",
    "formatters",
    "formatters_1",
    "formatters_1_1",
    "percentFormatter",
    "percentCompleteBarFormatter",
    "percentCompleteFormatter",
    "percentSymbolFormatter",
    "progressBarFormatter",
    "color",
    "translateFormatter",
    "translateBooleanFormatter",
    "uppercaseFormatter",
    "yesNoFormatter",
    "Formatters",
    "arrayToCsv",
    "bold",
    "checkmark",
    "complexObject",
    "collectionEditor",
    "deleteIcon",
    "decimal",
    "dollar",
    "dollarColored",
    "dollarColoredBold",
    "editIcon",
    "hyperlink",
    "hyperlinkUriPrefix",
    "infoIcon",
    "lowercase",
    "multiple",
    "percent",
    "percentComplete",
    "percentCompleteBar",
    "percentSymbol",
    "progressBar",
    "translateBoolean",
    "uppercase",
    "yesNo",
    "avgTotalsPercentageFormatter",
    "totals",
    "prefix",
    "groupFormatterPrefix",
    "suffix",
    "groupFormatterSuffix",
    "avgTotalsDollarFormatter",
    "avgTotalsFormatter",
    "minTotalsFormatter",
    "maxTotalsFormatter",
    "sumTotalsColoredFormatter",
    "sumTotalsDollarColoredBoldFormatter",
    "sumTotalsDollarColoredFormatter",
    "sumTotalsDollarBoldFormatter",
    "sumTotalsDollarFormatter",
    "sumTotalsFormatter",
    "sumTotalsBoldFormatter",
    "GroupTotalFormatters",
    "avgTotals",
    "avgTotalsDollar",
    "avgTotalsPercentage",
    "maxTotals",
    "minTotals",
    "sumTotals",
    "sumTotalsBold",
    "sumTotalsColored",
    "sumTotalsDollar",
    "sumTotalsDollarBold",
    "sumTotalsDollarColored",
    "sumTotalsDollarColoredBold",
    "SlickPaginationComponent",
    "_isFirstRender",
    "onPaginationChanged",
    "EventEmitter",
    "dataFrom",
    "dataTo",
    "pageCount",
    "paginationPageSizes",
    "fromToParams",
    "from",
    "to",
    "_gridPaginationOptions",
    "gridPaginationOptions",
    "refreshPagination",
    "ngOnDestroy",
    "ngAfterViewInit",
    "_filterSubcription",
    "ceil",
    "changeToFirstPage",
    "onPageChanged",
    "changeToLastPage",
    "changeToNextPage",
    "changeToPreviousPage",
    "changeToCurrentPage",
    "currentTarget",
    "onChangeItemPerPage",
    "itemsPerPage",
    "isPageNumberReset",
    "recalculateFromToIndexes",
    "itemCount",
    "emit",
    "Component",
    "selector",
    "template",
    "Output",
    "Input",
    "AngularSlickgridComponent",
    "elm",
    "gridService",
    "gridEventService",
    "groupingAndColspanService",
    "resizer",
    "forRootConfig",
    "groupingDefinition",
    "showPagination",
    "isGridInitialized",
    "onAngularGridCreated",
    "onDataviewCreated",
    "onGridCreated",
    "onGridInitialized",
    "onBeforeGridCreate",
    "onBeforeGridDestroy",
    "onAfterGridDestroyed",
    "gridWidth",
    "updateColumnDefinitionsList",
    "getItems",
    "dataset",
    "_dataset",
    "refreshGridData",
    "ngOnInit",
    "gridHeightString",
    "gridWidthString",
    "emptyDomElementContainer",
    "initialization",
    "mergeGridOptions",
    "createBackendApiInternalPostProcessCallback",
    "Data",
    "GroupItemMetadataProvider",
    "DataView",
    "inlineFilters",
    "Grid",
    "attachDifferentHooks",
    "beginUpdate",
    "setItems",
    "endUpdate",
    "executeAfterDataviewCreated",
    "attachResizeHook",
    "attachBackendCallbackFunctions",
    "slickGrid",
    "groupingService",
    "pluginService",
    "resizerService",
    "backendApi_1",
    "nodes",
    "totalCount",
    "onLangChange",
    "checkboxColumn",
    "_loop_3",
    "this_3",
    "dispatchCustomEvent",
    "eventData",
    "_loop_4",
    "this_4",
    "gridStateChange",
    "updateRowCount",
    "onRowsChanged",
    "invalidateRows",
    "rows",
    "colspanCallback",
    "isExecuteCommandOnInit",
    "onInit",
    "observableOrPromise_1",
    "tslib_1.__awaiter",
    "paginationChanged",
    "reSort",
    "isShowing",
    "toggleHeaderRow",
    "isBubbling",
    "isCancelable",
    "eventInit",
    "bubbles",
    "cancelable",
    "detail",
    "nativeElement",
    "dispatchEvent",
    "providers",
    "ElementRef",
    "decorators",
    "Inject",
    "AngularSlickgridModule",
    "forRoot",
    "ngModule",
    "provide",
    "useValue",
    "NgModule",
    "imports",
    "CommonModule",
    "TranslateModule",
    "declarations",
    "exports",
    "entryComponents",
    "buf",
    "charCodeAt"
  ],
  "mappings": "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"
}
