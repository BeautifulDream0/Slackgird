{
  "version": 3,
  "file": "angular-slickgrid.js",
  "sources": [
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/modules/angular-slickgrid.module.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/angular-slickgrid.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/global-grid-options.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/components/slick-pagination.component.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsDollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/sumTotalsColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/maxTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/minTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsDollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/grouping-formatters/avgTotalsPercentageFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/yesNoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/uppercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateBooleanFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/translateFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/progressBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentSymbolFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentCompleteBarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/percentFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/multipleFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/lowercaseFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/infoIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkUriPrefixFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/hyperlinkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/editIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dollarColoredBoldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/deleteIconFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeUsAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoAmPmFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateTimeIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/dateIsoFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/complexObjectFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionEditorFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/collectionFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkmarkFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/checkboxFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/boldFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/formatters/arrayToCsvFormatter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/textEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/singleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/multipleSelectEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/longTextEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/integerEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/floatEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/dateEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/editors/checkboxEditor.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/sumAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/maxAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/minAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/aggregators/avgAggregator.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/resizer.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/groupingAndColspan.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridState.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/gridEvent.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/grid-odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/odata.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/global-utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphql.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/graphqlQueryBuilder.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/controlAndPlugin.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/sort.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/export.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/filter.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/singleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/selectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/multipleSelectFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/inputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundInputFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filters/compoundDateFilter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/executeMappedCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/stringFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/numberFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/collectionSearchFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUtcFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsShortFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateUsFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateIsoFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/dateFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/filterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/filter-conditions/booleanFilterCondition.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/collection.service.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/sorterUtilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/index.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/stringSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/numericSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateIsoSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/dateUsShortSorter.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/sorters/compareDateUtility.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/services/utilities.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/sortDirection.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/operatorType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/gridStateType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/fileType.enum.ts",
    "ng://angular-slickgrid/out/app/modules/angular-slickgrid/models/delimiterType.enum.ts"
  ],
  "sourcesContent": [
    "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AngularSlickgridComponent } from './../components/angular-slickgrid.component';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport { GraphqlService } from './../services/graphql.service';\r\nimport { GridOdataService } from './../services/grid-odata.service';\r\nimport { GridOption } from './../models/gridOption.interface';\r\nimport { SlickPaginationComponent } from './../components/slick-pagination.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TranslateModule\r\n  ],\r\n  declarations: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  exports: [\r\n    AngularSlickgridComponent,\r\n    SlickPaginationComponent\r\n  ],\r\n  entryComponents: [AngularSlickgridComponent]\r\n})\r\nexport class AngularSlickgridModule {\r\n  static forRoot(config: GridOption = {}) {\r\n    return {\r\n      ngModule: AngularSlickgridModule,\r\n      providers: [\r\n        { provide: 'config', useValue: config },\r\n        CollectionService,\r\n        GraphqlService,\r\n        GridOdataService\r\n      ]\r\n    };\r\n  }\r\n}\r\n",
    "// import 3rd party vendor libs\nimport 'jquery-ui-dist/jquery-ui';\nimport 'slickgrid/lib/jquery.event.drag-2.3.0';\nimport 'slickgrid/slick.core';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.grid';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.groupitemmetadataprovider';\nimport 'slickgrid/controls/slick.columnpicker';\nimport 'slickgrid/controls/slick.gridmenu';\nimport 'slickgrid/controls/slick.pager';\nimport 'slickgrid/plugins/slick.autotooltips';\nimport 'slickgrid/plugins/slick.cellexternalcopymanager';\nimport 'slickgrid/plugins/slick.cellrangedecorator';\nimport 'slickgrid/plugins/slick.cellrangeselector';\nimport 'slickgrid/plugins/slick.cellselectionmodel';\nimport 'slickgrid/plugins/slick.checkboxselectcolumn';\nimport 'slickgrid/plugins/slick.headerbuttons';\nimport 'slickgrid/plugins/slick.headermenu';\nimport 'slickgrid/plugins/slick.rowmovemanager';\nimport 'slickgrid/plugins/slick.rowselectionmodel';\nimport { AfterViewInit, Component, EventEmitter, Inject, Injectable, Input, Output, OnDestroy, OnInit, ViewChildren, ElementRef, ViewChild, ReflectiveInjector } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castToPromise, titleCase } from './../services/utilities';\nimport { GlobalGridOptions } from './../global-grid-options';\nimport {\n  AngularGridInstance,\n  BackendServiceOption,\n  Column,\n  Editor,\n  EditorType,\n  GridOption,\n  GridStateChange,\n  GridStateType,\n  Pagination\n} from './../models/index';\nimport { Editors, AVAILABLE_EDITORS } from './../editors/index';\nimport { ControlAndPluginService } from './../services/controlAndPlugin.service';\nimport { ExportService } from './../services/export.service';\nimport { FilterService } from './../services/filter.service';\nimport { GraphqlService } from './../services/graphql.service';\nimport { GridEventService } from './../services/gridEvent.service';\nimport { GridService } from './../services/grid.service';\nimport { GridStateService } from './../services/gridState.service';\nimport { GroupingAndColspanService } from './../services/groupingAndColspan.service';\nimport { ResizerService } from './../services/resizer.service';\nimport { SortService } from './../services/sort.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\nconst slickgridEventPrefix = 'sg';\n\n@Injectable()\n@Component({\n  selector: 'angular-slickgrid',\n  template: `<div id=\"slickGridContainer-{{gridId}}\" #customElm class=\"gridPane\" [style.width]=\"gridWidthString\">\r\n    <div attr.id='{{gridId}}' class=\"slickgrid-container\" style=\"width: 100%\" [style.height]=\"gridHeightString\">\r\n    </div>\r\n\r\n    <slick-pagination id=\"slickPagingContainer-{{gridId}}\"\r\n        *ngIf=\"showPagination\"\r\n        (onPaginationChanged)=\"paginationChanged($event)\"\r\n        [gridPaginationOptions]=\"gridPaginationOptions\">\r\n    </slick-pagination>\r\n</div>\r\n`,\n  providers: [\n    ControlAndPluginService,\n    ExportService,\n    FilterService,\n    GraphqlService,\n    GridEventService,\n    GridService,\n    GridStateService,\n    GroupingAndColspanService,\n    ResizerService,\n    SortService\n  ]\n})\nexport class AngularSlickgridComponent implements AfterViewInit, OnDestroy, OnInit {\n  @ViewChild('customElm', {read: ElementRef}) customElm: ElementRef;\n  private _dataset: any[];\n  private _columnDefinitions: Column[];\n  private _dataView: any;\n  private _eventHandler: any = new Slick.EventHandler();\n  grid: any;\n  gridPaginationOptions: GridOption;\n  gridHeightString: string;\n  gridWidthString: string;\n  groupingDefinition: any = {};\n  groupItemMetadataProvider: any;\n  showPagination = false;\n  isGridInitialized = false;\n  subscriptions: Subscription[] = [];\n\n  @Output() onAngularGridCreated = new EventEmitter<AngularGridInstance>();\n  @Output() onDataviewCreated = new EventEmitter<any>();\n  @Output() onGridCreated = new EventEmitter<any>();\n  @Output() onGridInitialized = new EventEmitter<any>();\n  @Output() onBeforeGridCreate = new EventEmitter<boolean>();\n  @Output() onBeforeGridDestroy = new EventEmitter<any>();\n  @Output() onAfterGridDestroyed = new EventEmitter<boolean>();\n  @Output() onGridStateChanged = new EventEmitter<GridStateChange>();\n  @Input() gridId: string;\n  @Input() gridOptions: GridOption;\n  @Input() gridHeight = 0;\n  @Input() gridWidth = 0;\n\n  @Input()\n  set columnDefinitions(columnDefinitions: Column[]) {\n    this._columnDefinitions = columnDefinitions;\n    if (this.isGridInitialized) {\n      this.updateColumnDefinitionsList(columnDefinitions);\n    }\n  }\n  get columnDefinitions(): Column[] {\n    return this._columnDefinitions;\n  }\n  @Input()\n  set dataset(dataset: any[]) {\n    this._dataset = dataset;\n    this.refreshGridData(dataset);\n  }\n  get dataset(): any[] {\n    return this._dataView.getItems();\n  }\n\n\n  constructor(\n    private controlAndPluginService: ControlAndPluginService,\n    private exportService: ExportService,\n    private filterService: FilterService,\n    private gridService: GridService,\n    private gridEventService: GridEventService,\n    private gridStateService: GridStateService,\n    private groupingAndColspanService: GroupingAndColspanService,\n    private resizer: ResizerService,\n    private sortService: SortService,\n    private translate: TranslateService,\n    @Inject('config') private forRootConfig: GridOption\n  ) {}\n\n  ngOnInit(): void {\n    this.onBeforeGridCreate.emit(true);\n    if (!this.gridOptions.enableAutoResize && !this.gridOptions.autoResize) {\n      this.gridHeightString = `${this.gridHeight}px`;\n      this.gridWidthString = `${this.gridWidth}px`;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.onBeforeGridDestroy.emit(this.grid);\n    this.destroy();\n    this.onAfterGridDestroyed.emit(true);\n  }\n\n  destroy() {\n    this._dataView = [];\n    this.gridOptions = {};\n    this._eventHandler.unsubscribeAll();\n    this.controlAndPluginService.dispose();\n    this.filterService.dispose();\n    this.gridEventService.dispose();\n    this.gridStateService.dispose();\n    this.groupingAndColspanService.dispose();\n    this.resizer.dispose();\n    this.sortService.dispose();\n    this.grid.destroy();\n\n    // also unsubscribe all RxJS subscriptions\n    this.subscriptions.forEach((subscription: Subscription) => {\n      if (subscription && subscription.unsubscribe) {\n        subscription.unsubscribe();\n      }\n    });\n    this.subscriptions = [];\n  }\n\n  ngAfterViewInit() {\n    this.initialization();\n    this.isGridInitialized = true;\n  }\n\n  initialization() {\n    // make sure the dataset is initialized (if not it will throw an error that it cannot getLength of null)\n    this._dataset = this._dataset || [];\n    this.gridOptions = this.mergeGridOptions(this.gridOptions);\n    this.createBackendApiInternalPostProcessCallback(this.gridOptions);\n\n    if (this.gridOptions.enableGrouping) {\n      this.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\n      this._dataView = new Slick.Data.DataView({\n        groupItemMetadataProvider: this.groupItemMetadataProvider,\n        inlineFilters: true\n      });\n    } else {\n      this._dataView = new Slick.Data.DataView();\n    }\n\n    // for convenience, we provide the property \"editor\" as an Angular-Slickgrid editor complex object\n    // however \"editor\" is used internally by SlickGrid for it's Editor Factory\n    // so in our lib we will swap \"editor\" and copy it into \"internalColumnEditor\"\n    // then take back \"editor.type\" and make it the new \"editor\" so that SlickGrid Editor Factory still works\n    this._columnDefinitions = this._columnDefinitions.map((c: Column | any) => ({ ...c, editor: this.getEditor((c.editor && c.editor.type), c), internalColumnEditor: { ...c.editor } })),\n\n    this.controlAndPluginService.createCheckboxPluginBeforeGridCreation(this._columnDefinitions, this.gridOptions);\n    this.grid = new Slick.Grid(`#${this.gridId}`, this._dataView, this._columnDefinitions, this.gridOptions);\n\n    this.controlAndPluginService.attachDifferentControlOrPlugins(this.grid, this._dataView, this.groupItemMetadataProvider);\n    this.attachDifferentHooks(this.grid, this.gridOptions, this._dataView);\n\n    // emit the Grid & DataView object to make them available in parent component\n    this.onGridCreated.emit(this.grid);\n    this.onDataviewCreated.emit(this._dataView);\n\n    this.grid.init();\n    this._dataView.beginUpdate();\n    this._dataView.setItems(this._dataset, this.gridOptions.datasetIdPropertyName);\n    this._dataView.endUpdate();\n\n    // after the DataView is created & updated execute some processes\n    this.executeAfterDataviewCreated(this.grid, this.gridOptions, this._dataView);\n\n    // attach resize ONLY after the dataView is ready\n    this.attachResizeHook(this.grid, this.gridOptions);\n\n    // attach grouping and header grouping colspan service\n    if (this.gridOptions.createPreHeaderPanel) {\n      this.groupingAndColspanService.init(this.grid, this._dataView);\n    }\n\n    // attach grid  service\n    this.gridService.init(this.grid, this._dataView);\n\n    // when user enables translation, we need to translate Headers on first pass & subsequently in the attachDifferentHooks\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders();\n    }\n\n    // if Export is enabled, initialize the service with the necessary grid and other objects\n    if (this.gridOptions.enableExport) {\n      this.exportService.init(this.grid, this._dataView);\n    }\n\n    // once all hooks are in placed and the grid is initialized, we can emit an event\n    this.onGridInitialized.emit(this.grid);\n\n    // attach the Backend Service API callback functions only after the grid is initialized\n    // because the preProcess() and onInit() might get triggered\n    if (this.gridOptions && this.gridOptions.backendServiceApi) {\n      this.attachBackendCallbackFunctions(this.gridOptions);\n    }\n\n    this.gridStateService.init(this.grid, this.controlAndPluginService, this.filterService, this.sortService);\n\n    this.onAngularGridCreated.emit({\n      // Slick Grid & DataView objects\n      dataView: this._dataView,\n      slickGrid: this.grid,\n\n      // return all available Services (non-singleton)\n      backendService: this.gridOptions && this.gridOptions.backendServiceApi && this.gridOptions.backendServiceApi.service,\n      exportService: this.exportService,\n      filterService: this.filterService,\n      gridEventService: this.gridEventService,\n      gridStateService: this.gridStateService,\n      gridService: this.gridService,\n      groupingService: this.groupingAndColspanService,\n      pluginService: this.controlAndPluginService,\n      resizerService: this.resizer,\n      sortService: this.sortService,\n    });\n  }\n\n  /**\n   * From the list of available editors, find the editor associated to it's type\n   * and if it's a custom one, return the \"customEditor\" from the column\n   * @param type\n   * @param column\n   */\n  getEditor(type: EditorType, column: Column) {\n    if (type === EditorType.custom && column && column.editor && column.editor.hasOwnProperty('customEditor')) {\n      return column.editor['customEditor'];\n    }\n\n    const editorFound = AVAILABLE_EDITORS.find(editor => editor.type === type);\n    if (editorFound && editorFound.editor) {\n      return editorFound.editor;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Define what our internal Post Process callback, it will execute internally after we get back result from the Process backend call\n   * For now, this is GraphQL Service only feautre and it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n   */\n  createBackendApiInternalPostProcessCallback(gridOptions: GridOption) {\n    if (gridOptions && gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      // internalPostProcess only works with a GraphQL Service, so make sure it is that type\n      if (backendApi && backendApi.service && backendApi.service instanceof GraphqlService) {\n        backendApi.internalPostProcess = (processResult: any) => {\n          const datasetName = (backendApi && backendApi.service && typeof backendApi.service.getDatasetName === 'function') ? backendApi.service.getDatasetName() : '';\n          if (processResult && processResult.data && processResult.data[datasetName]) {\n            this._dataset = processResult.data[datasetName].nodes;\n            this.refreshGridData(this._dataset, processResult.data[datasetName].totalCount);\n          } else {\n            this._dataset = [];\n          }\n        };\n      }\n    }\n  }\n\n  attachDifferentHooks(grid: any, gridOptions: GridOption, dataView: any) {\n    // on locale change, we have to manually translate the Headers, GridMenu\n    this.subscriptions.push(\n      this.translate.onLangChange.subscribe((event) => {\n        if (gridOptions.enableTranslate) {\n          this.controlAndPluginService.translateColumnHeaders();\n          this.controlAndPluginService.translateColumnPicker();\n          this.controlAndPluginService.translateGridMenu();\n          this.controlAndPluginService.translateHeaderMenu();\n        }\n      })\n    );\n\n    // if user entered some Columns \"presets\", we need to reflect them all in the grid\n    if (gridOptions.presets && Array.isArray(gridOptions.presets.columns) && gridOptions.presets.columns.length > 0) {\n      const gridColumns: Column[] = this.gridStateService.getAssociatedGridColumns(grid, gridOptions.presets.columns);\n      if (gridColumns && Array.isArray(gridColumns) && gridColumns.length > 0) {\n        // make sure that the checkbox selector is also visible if it is enabled\n        if (gridOptions.enableCheckboxSelector) {\n          const checkboxColumn = (Array.isArray(this.columnDefinitions) && this.columnDefinitions.length > 0) ? this.columnDefinitions[0] : null;\n          if (checkboxColumn && checkboxColumn.id === '_checkbox_selector' && gridColumns[0].id !== '_checkbox_selector') {\n            gridColumns.unshift(checkboxColumn);\n          }\n        }\n\n        // finally set the new presets columns (including checkbox selector if need be)\n        grid.setColumns(gridColumns);\n      }\n    }\n\n    // attach external sorting (backend) when available or default onSort (dataView)\n    if (gridOptions.enableSorting) {\n      gridOptions.backendServiceApi ? this.sortService.attachBackendOnSort(grid, dataView) : this.sortService.attachLocalOnSort(grid, dataView);\n    }\n\n    // attach external filter (backend) when available or default onFilter (dataView)\n    if (gridOptions.enableFiltering) {\n      this.filterService.init(grid);\n\n      // if user entered some \"presets\", we need to reflect them all in the DOM\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n        this.filterService.populateColumnFilterSearchTerms();\n      }\n      gridOptions.backendServiceApi ? this.filterService.attachBackendOnFilter(grid) : this.filterService.attachLocalOnFilter(grid, this._dataView);\n    }\n\n    // if user set an onInit Backend, we'll run it right away (and if so, we also need to run preProcess, internalPostProcess & postProcess)\n    if (gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      if (backendApi && backendApi.service && backendApi.service.init) {\n        backendApi.service.init(backendApi.options, gridOptions.pagination, this.grid);\n      }\n    }\n\n    // expose all Slick Grid Events through dispatch\n    for (const prop in grid) {\n      if (grid.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(grid[prop], (e: any, args: any) => {\n          this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\n        });\n      }\n    }\n\n    // expose all Slick DataView Events through dispatch\n    for (const prop in dataView) {\n      if (dataView.hasOwnProperty(prop) && prop.startsWith('on')) {\n        this._eventHandler.subscribe(dataView[prop], (e: any, args: any) => {\n          this.dispatchCustomEvent(`${slickgridEventPrefix}${titleCase(prop)}`, { eventData: e, args });\n        });\n      }\n    }\n\n    // expose GridState Service changes event through dispatch\n    this.subscriptions.push(\n      this.gridStateService.onGridStateChanged.subscribe((gridStateChange: GridStateChange) => {\n        this.onGridStateChanged.emit(gridStateChange);\n      })\n    );\n\n\n    // on cell click, mainly used with the columnDef.action callback\n    this.gridEventService.attachOnCellChange(grid, dataView);\n    this.gridEventService.attachOnClick(grid, dataView);\n\n    this._eventHandler.subscribe(dataView.onRowCountChanged, (e: any, args: any) => {\n      grid.updateRowCount();\n      grid.render();\n    });\n    this._eventHandler.subscribe(dataView.onRowsChanged, (e: any, args: any) => {\n      grid.invalidateRows(args.rows);\n      grid.render();\n    });\n\n    // does the user have a colspan callback?\n    if (gridOptions.colspanCallback) {\n      this._dataView.getItemMetadata = (rowNumber: number) => {\n        const item = this._dataView.getItem(rowNumber);\n        return gridOptions.colspanCallback(item);\n      };\n    }\n  }\n\n  attachBackendCallbackFunctions(gridOptions: GridOption) {\n    const backendApi = gridOptions.backendServiceApi;\n    const serviceOptions: BackendServiceOption = (backendApi && backendApi.service && backendApi.service.options) ? backendApi.service.options : {};\n    const isExecuteCommandOnInit = (!serviceOptions) ? false : ((serviceOptions && serviceOptions.hasOwnProperty('executeProcessCommandOnInit')) ? serviceOptions['executeProcessCommandOnInit'] : true);\n\n    // update backend filters (if need be) before the query runs\n    if (backendApi) {\n      const backendService = backendApi.service;\n\n      // if user entered some any \"presets\", we need to reflect them all in the grid\n      if (gridOptions && gridOptions.presets) {\n         // Filters \"presets\"\n         if (backendService && backendService.updateFilters && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n          backendService.updateFilters(gridOptions.presets.filters, true);\n        }\n        // Sorters \"presets\"\n        if (backendService && backendService.updateSorters && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n          backendService.updateSorters(undefined, gridOptions.presets.sorters);\n        }\n        // Pagination \"presets\"\n        if (backendService && backendService.updatePagination && gridOptions.presets.pagination) {\n          backendService.updatePagination(gridOptions.presets.pagination.pageNumber, gridOptions.presets.pagination.pageSize);\n        }\n      } else {\n        const columnFilters = this.filterService.getColumnFilters();\n        if (columnFilters && backendService && backendService.updateFilters) {\n          backendService.updateFilters(columnFilters, false);\n        }\n      }\n    }\n\n    if (backendApi && backendApi.service && (backendApi.onInit || isExecuteCommandOnInit)) {\n      const query = (typeof backendApi.service.buildQuery === 'function') ? backendApi.service.buildQuery() : '';\n      const observableOrPromise = (isExecuteCommandOnInit) ? backendApi.process(query) : backendApi.onInit(query);\n\n      // wrap this inside a setTimeout to avoid timing issue since the gridOptions needs to be ready before running this onInit\n      setTimeout(async () => {\n        if (backendApi.preProcess) {\n          backendApi.preProcess();\n        }\n\n        // the process could be an Observable (like HttpClient) or a Promise\n        // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n        const processResult = await castToPromise(observableOrPromise);\n\n        // define what our internal Post Process callback, only available for GraphQL Service for now\n        // it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n        if (processResult && backendApi && backendApi.service instanceof GraphqlService && backendApi.internalPostProcess) {\n          backendApi.internalPostProcess(processResult);\n        }\n\n        // send the response process to the postProcess callback\n        if (backendApi.postProcess) {\n          backendApi.postProcess(processResult);\n        }\n      });\n    }\n  }\n\n  attachResizeHook(grid: any, options: GridOption) {\n    // expand/autofit columns on first page load\n    if (grid && options.autoFitColumnsOnFirstLoad) {\n      grid.autosizeColumns();\n    }\n\n    // auto-resize grid on browser resize\n    this.resizer.init(grid);\n    if (options.enableAutoResize) {\n      this.resizer.attachAutoResizeDataGrid({ height: this.gridHeight, width: this.gridWidth });\n      if (grid && options.autoFitColumnsOnFirstLoad) {\n        grid.autosizeColumns();\n      }\n    }\n  }\n\n  executeAfterDataviewCreated(grid: any, gridOptions: GridOption, dataView: any) {\n    // if user entered some Sort \"presets\", we need to reflect them all in the DOM\n    if (gridOptions.enableSorting) {\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n        this.sortService.loadLocalPresets(grid, dataView);\n      }\n    }\n  }\n\n  mergeGridOptions(gridOptions): GridOption {\n    gridOptions.gridId = this.gridId;\n    gridOptions.gridContainerId = `slickGridContainer-${this.gridId}`;\n    if (gridOptions.enableFiltering || this.forRootConfig.enableFiltering) {\n      gridOptions.showHeaderRow = true;\n    }\n    // use jquery extend to deep merge and avoid immutable properties changed in GlobalGridOptions after route change\n    return $.extend(true, {}, GlobalGridOptions, this.forRootConfig, gridOptions);\n  }\n\n  paginationChanged(pagination: Pagination) {\n    this.gridStateService.onGridStateChanged.next({\n      change: { newValues: pagination, type: GridStateType.pagination },\n      gridState: this.gridStateService.getCurrentGridState()\n    });\n  }\n\n  /**\n   * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well\n   * @param dataset\n   */\n  refreshGridData(dataset: any[], totalCount?: number) {\n    if (dataset && this.grid && this._dataView && typeof this._dataView.setItems === 'function') {\n      this._dataView.setItems(dataset, this.gridOptions.datasetIdPropertyName);\n      this._dataView.reSort();\n\n      // this.grid.setData(dataset);\n      this.grid.invalidate();\n      this.grid.render();\n\n      if (this.gridOptions.enablePagination || this.gridOptions.backendServiceApi) {\n        // do we want to show pagination?\n        // if we have a backendServiceApi and the enablePagination is undefined, we'll assume that we do want to see it, else get that defined value\n        this.showPagination = ((this.gridOptions.backendServiceApi && this.gridOptions.enablePagination === undefined) ? true : this.gridOptions.enablePagination) || false;\n\n        // before merging the grid options, make sure that it has the totalItems count\n        // once we have that, we can merge and pass all these options to the pagination component\n        if (!this.gridOptions.pagination) {\n          this.gridOptions.pagination = (this.gridOptions.pagination) ? this.gridOptions.pagination : undefined;\n        }\n        if (this.gridOptions.pagination && totalCount) {\n          this.gridOptions.pagination.totalItems = totalCount;\n        }\n        if (this.gridOptions.presets && this.gridOptions.presets.pagination && this.gridOptions.pagination) {\n          this.gridOptions.pagination.pageSize = this.gridOptions.presets.pagination.pageSize;\n          this.gridOptions.pagination.pageNumber = this.gridOptions.presets.pagination.pageNumber;\n        }\n        this.gridPaginationOptions = this.mergeGridOptions(this.gridOptions);\n      }\n      if (this.grid &&  this.gridOptions.enableAutoResize) {\n        // resize the grid inside a slight timeout, in case other DOM element changed prior to the resize (like a filter/pagination changed)\n        this.resizer.resizeGrid(10, { height: this.gridHeight, width: this.gridWidth });\n      }\n    }\n  }\n\n  /**\n   * Dynamically change or update the column definitions list.\n   * We will re-render the grid so that the new header and data shows up correctly.\n   * If using i18n, we also need to trigger a re-translate of the column headers\n   */\n  updateColumnDefinitionsList(newColumnDefinitions) {\n    if (this.gridOptions.enableTranslate) {\n      this.controlAndPluginService.translateColumnHeaders(false, newColumnDefinitions);\n    } else {\n      this.controlAndPluginService.renderColumnHeaders(newColumnDefinitions);\n    }\n    this.grid.autosizeColumns();\n  }\n\n  /** Toggle the filter row displayed on first row\n   * @param isShowing\n   */\n  showHeaderRow(isShowing: boolean) {\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  /** Toggle the filter row displayed on first row */\n  toggleHeaderRow() {\n    const isShowing = !this.grid.getOptions().showHeaderRow;\n    this.grid.setHeaderRowVisibility(isShowing);\n    return isShowing;\n  }\n\n  private dispatchCustomEvent(eventName: string, data?: any, isBubbling: boolean = true) {\n    const eventInit: CustomEventInit = { bubbles: isBubbling };\n    if (data) {\n      eventInit.detail = data;\n    }\n    this.customElm.nativeElement.dispatchEvent(new CustomEvent(eventName, eventInit));\n  }\n}\n",
    "import { DelimiterType, FileType, FilterType, GridOption } from './models/index';\n\n/**\n * Options that can be passed to the Bootstrap-Datetimepicker directly\n */\nexport const GlobalGridOptions: GridOption = {\n  alwaysShowVerticalScroll: true,\n  autoEdit: false,\n  asyncEditorLoading: false,\n  autoFitColumnsOnFirstLoad: true,\n  autoResize: {\n    bottomPadding: 20,\n    minHeight: 180,\n    minWidth: 300,\n    sidePadding: 0\n  },\n  cellHighlightCssClass: 'slick-cell-modified',\n  checkboxSelector: {\n    cssClass: 'slick-cell-checkboxsel'\n  },\n  columnPicker: {\n    hideForceFitButton: false,\n    hideSyncResizeButton: true\n  },\n  datasetIdPropertyName: 'id',\n  defaultFilterPlaceholder: '&#128269;',\n  defaultFilterType: FilterType.input,\n  editable: false,\n  enableAutoResize: true,\n  enableCellNavigation: false,\n  enableColumnPicker: true,\n  enableColumnReorder: true,\n  enableExport: true,\n  enableGridMenu: true,\n  enableHeaderMenu: true,\n  enableMouseHoverHighlightRow: true,\n  enableSorting: true,\n  enableTextSelectionOnCells: true,\n  explicitInitialization: true,\n  exportOptions: {\n    delimiter: DelimiterType.comma,\n    exportWithFormatter: false,\n    filename: 'export',\n    format: FileType.csv,\n    groupingAggregatorRowText: '',\n    sanitizeDataExport: false,\n    useUtf8WithBom: true\n  },\n  forceFitColumns: false,\n  gridMenu: {\n    hideClearAllFiltersCommand: false,\n    hideClearAllSortingCommand: false,\n    hideExportCsvCommand: false,\n    hideExportTextDelimitedCommand: true,\n    hideForceFitButton: false,\n    hideRefreshDatasetCommand: false,\n    hideSyncResizeButton: true,\n    hideToggleFilterCommand: false,\n    iconCssClass: 'fa fa-bars',\n    iconClearAllFiltersCommand: 'fa fa-filter text-danger',\n    iconClearAllSortingCommand: 'fa fa-unsorted text-danger',\n    iconExportCsvCommand: 'fa fa-download',\n    iconExportTextDelimitedCommand: 'fa fa-download',\n    iconRefreshDatasetCommand: 'fa fa-refresh',\n    iconToggleFilterCommand: 'fa fa-random',\n    menuWidth: 16,\n    resizeOnShowHeaderRow: true\n  },\n  headerMenu: {\n    autoAlign: true,\n    autoAlignOffset: 12,\n    minWidth: 140,\n    iconSortAscCommand: 'fa fa-sort-asc',\n    iconSortDescCommand: 'fa fa-sort-desc',\n    iconColumnHideCommand: 'fa fa-times',\n    hideColumnHideCommand: false,\n    hideSortCommands: false\n  },\n  headerRowHeight: 35,\n  multiColumnSort: true,\n  numberedMultiColumnSort: true,\n  tristateMultiColumnSort: false,\n  sortColNumberInSeparateSpan: true,\n  suppressActiveCellChangeOnEdit: true,\n  pagination: {\n    pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\n    pageSize: 25,\n    totalItems: 0\n  },\n  rowHeight: 35,\n  showHeaderRow: false,\n  topPanelHeight: 35\n};\n",
    "import { Pagination } from './../models/pagination.interface';\r\nimport { AfterViewInit, Component, EventEmitter, Injectable, Input, OnDestroy, Output } from '@angular/core';\r\nimport { castToPromise } from './../services/utilities';\r\nimport { GridOption } from './../models/index';\r\nimport { FilterService, SortService } from './../services/index';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n@Component({\r\n  selector: 'slick-pagination',\r\n  template: `<div class=\"slick-pagination\">\r\n    <div class=\"slick-pagination-nav\">\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-first fa fa-angle-double-left\" aria-label=\"First\" (click)=\"changeToFirstPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-prev fa fa-angle-left\" aria-label=\"Previous\" (click)=\"changeToPreviousPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n\r\n        <div class=\"slick-page-number\">\r\n            <span [translate]=\"'PAGE'\"></span>\r\n            <input type=\"text\" class=\"form-control\" value=\"{{pageNumber}}\" size=\"1\"  (change)=\"changeToCurrentPage($event)\">\r\n            <span [translate]=\"'OF'\"></span><span> {{pageCount}}</span>\r\n        </div>\r\n\r\n        <nav aria-label=\"Page navigation\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-next text-center fa fa-lg fa-angle-right\" aria-label=\"Next\" (click)=\"changeToNextPage($event)\">\r\n            </a>\r\n            </li>\r\n            <li class=\"page-item\" [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\">\r\n            <a class=\"page-link icon-seek-end fa fa-lg fa-angle-double-right\" aria-label=\"Last\" (click)=\"changeToLastPage($event)\">\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n    </div>\r\n    <span class=\"slick-pagination-settings\">\r\n        <select id=\"items-per-page-label\" [value]=\"itemsPerPage\" (change)=\"onChangeItemPerPage($event)\">\r\n        <option value=\"{{pageSize}}\" *ngFor=\"let pageSize of paginationPageSizes;\">{{pageSize}}</option>\r\n        </select>\r\n        <span [translate]=\"'ITEMS_PER_PAGE'\"></span>,\r\n        <span class=\"slick-pagination-count\">\r\n            <span [translate]=\"'FROM_TO_OF_TOTAL_ITEMS'\" [translateParams]=\"{ from: dataFrom, to: dataTo, totalItems: totalItems }\"></span>\r\n        </span>\r\n    </span>\r\n    </div>\r\n`\r\n})\r\n@Injectable()\r\nexport class SlickPaginationComponent implements AfterViewInit, OnDestroy {\r\n  private _filterSubcription: Subscription;\r\n  private _gridPaginationOptions: GridOption;\r\n  private _isFirstRender = true;\r\n  @Output() onPaginationChanged = new EventEmitter<Pagination>();\r\n\r\n  @Input()\r\n  set gridPaginationOptions(gridPaginationOptions: GridOption) {\r\n    this._gridPaginationOptions = gridPaginationOptions;\r\n    if (this._isFirstRender || !gridPaginationOptions || !gridPaginationOptions.pagination || (gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n      this._isFirstRender = false;\r\n    }\r\n  }\r\n  get gridPaginationOptions(): GridOption {\r\n    return this._gridPaginationOptions;\r\n  }\r\n  @Input() grid: any;\r\n  dataFrom = 1;\r\n  dataTo = 1;\r\n  itemsPerPage: number;\r\n  pageCount = 0;\r\n  pageNumber = 1;\r\n  totalItems = 0;\r\n  paginationCallback: Function;\r\n  paginationPageSizes = [25, 75, 100];\r\n  fromToParams: any = { from: this.dataFrom, to: this.dataTo, totalItems: this.totalItems };\r\n\r\n  /** Constructor */\r\n  constructor(private filterService: FilterService, private sortService: SortService) { }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._gridPaginationOptions = this._gridPaginationOptions;\r\n    if (!this._gridPaginationOptions || !this._gridPaginationOptions.pagination || (this._gridPaginationOptions.pagination.totalItems !== this.totalItems)) {\r\n      this.refreshPagination();\r\n    }\r\n\r\n    // Subscribe to Event Emitter of Filter & Sort changed, go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterChanged.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n    // Subscribe to Filter clear and go back to page 1 when that happen\r\n    this._filterSubcription = this.filterService.onFilterCleared.subscribe((data) => {\r\n      this.refreshPagination(true);\r\n    });\r\n  }\r\n\r\n  ceil(number: number) {\r\n    return Math.ceil(number);\r\n  }\r\n\r\n  changeToFirstPage(event: any) {\r\n    this.pageNumber = 1;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToLastPage(event: any) {\r\n    this.pageNumber = this.pageCount;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  changeToNextPage(event: any) {\r\n    if (this.pageNumber < this.pageCount) {\r\n      this.pageNumber++;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToPreviousPage(event: any) {\r\n    if (this.pageNumber > 0) {\r\n      this.pageNumber--;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n  }\r\n\r\n  changeToCurrentPage(event: any) {\r\n    this.pageNumber = event.currentTarget.value;\r\n    if (this.pageNumber < 1) {\r\n          this.pageNumber = 1;\r\n    } else if (this.pageNumber > this.pageCount) {\r\n          this.pageNumber = this.pageCount;\r\n    }\r\n\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  dispose() {\r\n    this.onPaginationChanged.unsubscribe();\r\n    if (this._filterSubcription) {\r\n      this._filterSubcription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  onChangeItemPerPage(event: any) {\r\n    const itemsPerPage = +event.target.value;\r\n    this.pageCount = Math.ceil(this.totalItems / itemsPerPage);\r\n    this.pageNumber = 1;\r\n    this.itemsPerPage = itemsPerPage;\r\n    this.onPageChanged(event, this.pageNumber);\r\n  }\r\n\r\n  refreshPagination(isPageNumberReset: boolean = false) {\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this._gridPaginationOptions && this._gridPaginationOptions.pagination) {\r\n      const pagination = this._gridPaginationOptions.pagination;\r\n      // set the number of items per page if not already set\r\n      if (!this.itemsPerPage) {\r\n        this.itemsPerPage = +((backendApi && backendApi.options && backendApi.options.paginationOptions && backendApi.options.paginationOptions.first) ? backendApi.options.paginationOptions.first : this._gridPaginationOptions.pagination.pageSize);\r\n      }\r\n\r\n      // if totalItems changed, we should always go back to the first page and recalculation the From-To indexes\r\n      if (isPageNumberReset || this.totalItems !== pagination.totalItems) {\r\n        if (this._isFirstRender && pagination.pageNumber && pagination.pageNumber > 1) {\r\n          this.pageNumber = pagination.pageNumber || 1;\r\n        } else {\r\n          this.pageNumber = 1;\r\n        }\r\n\r\n        // when page number is set to 1 then also reset the \"offset\" of backend service\r\n        if (this.pageNumber === 1) {\r\n          backendApi.service.resetPaginationOptions();\r\n        }\r\n      }\r\n\r\n      // calculate and refresh the multiple properties of the pagination UI\r\n      this.paginationPageSizes = this._gridPaginationOptions.pagination.pageSizes;\r\n      this.totalItems = this._gridPaginationOptions.pagination.totalItems;\r\n      this.recalculateFromToIndexes();\r\n    }\r\n    this.pageCount = Math.ceil(this.totalItems / this.itemsPerPage);\r\n  }\r\n\r\n  async onPageChanged(event: Event | undefined, pageNumber: number) {\r\n    this.recalculateFromToIndexes();\r\n\r\n    const backendApi = this._gridPaginationOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (this.dataTo > this.totalItems) {\r\n      this.dataTo = this.totalItems;\r\n    } else if (this.totalItems < this.itemsPerPage) {\r\n      this.dataTo = this.totalItems;\r\n    }\r\n    if (backendApi) {\r\n      const itemsPerPage = +this.itemsPerPage;\r\n\r\n      if (backendApi.preProcess) {\r\n        backendApi.preProcess();\r\n      }\r\n\r\n      const query = backendApi.service.processOnPaginationChanged(event, { newPage: pageNumber, pageSize: itemsPerPage });\r\n\r\n      // the process could be an Observable (like HttpClient) or a Promise\r\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n      const observableOrPromise = backendApi.process(query);\r\n      const processResult = await castToPromise(observableOrPromise);\r\n\r\n      // from the result, call our internal post process to update the Dataset and Pagination info\r\n      if (processResult && backendApi.internalPostProcess) {\r\n        backendApi.internalPostProcess(processResult);\r\n      }\r\n\r\n      // send the response process to the postProcess callback\r\n      if (backendApi.postProcess) {\r\n        backendApi.postProcess(processResult);\r\n      }\r\n    } else {\r\n      throw new Error('Pagination with a backend service requires \"BackendServiceApi\" to be defined in your grid options');\r\n    }\r\n\r\n    // emit the changes to the parent component\r\n    this.onPaginationChanged.emit({\r\n      pageNumber: this.pageNumber,\r\n      pageSizes: this.paginationPageSizes,\r\n      pageSize: this.itemsPerPage,\r\n      totalItems: this.totalItems\r\n    });\r\n  }\r\n\r\n  recalculateFromToIndexes() {\r\n    this.dataFrom = (this.pageNumber * this.itemsPerPage) - this.itemsPerPage + 1;\r\n    this.dataTo = (this.totalItems < this.itemsPerPage) ? this.totalItems : (this.pageNumber * this.itemsPerPage);\r\n  }\r\n}\r\n",
    "import { Column } from './../models/index';\nimport { avgTotalsPercentageFormatter } from './avgTotalsPercentageFormatter';\nimport { avgTotalsDollarFormatter } from './avgTotalsDollarFormatter';\nimport { avgTotalsFormatter } from './avgTotalsFormatter';\nimport { minTotalsFormatter } from './minTotalsFormatter';\nimport { maxTotalsFormatter } from './maxTotalsFormatter';\nimport { sumTotalsColoredFormatter } from './sumTotalsColoredFormatter';\nimport { sumTotalsDollarColoredBoldFormatter } from './sumTotalsDollarColoredBoldFormatter';\nimport { sumTotalsDollarColoredFormatter } from './sumTotalsDollarColoredFormatter';\nimport { sumTotalsDollarBoldFormatter } from './sumTotalsDollarBoldFormatter';\nimport { sumTotalsDollarFormatter } from './sumTotalsDollarFormatter';\nimport { sumTotalsFormatter } from './sumTotalsFormatter';\nimport { sumTotalsBoldFormatter } from './sumTotalsBoldFormatter';\n\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const GroupTotalFormatters = {\n  /**\n   * Average all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotals: avgTotalsFormatter,\n\n  /**\n   * Average all the column totals and display '$' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsDollar: avgTotalsDollarFormatter,\n\n  /**\n   * Average all the column totals and display '%' at the end of the value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  avgTotalsPercentage: avgTotalsPercentageFormatter,\n\n  /**\n   * Show max value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  maxTotals: maxTotalsFormatter,\n\n  /**\n   * Show min value of all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  minTotals: minTotalsFormatter,\n\n  /**\n   * Sums up all the column totals\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotals: sumTotalsFormatter,\n\n  /**\n   * Sums up all the column totals and display it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsBold: sumTotalsBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsColored: sumTotalsColoredFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollar: sumTotalsDollarFormatter,\n\n  /**\n   * Sums up all the column totals and display dollar sign and show it in bold font weight\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarBold: sumTotalsDollarBoldFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColored: sumTotalsDollarColoredFormatter,\n\n  /**\n   * Sums up all the column totals, change color of text to red/green on negative/positive value, show it in bold font weight as well\n   * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n   */\n  sumTotalsDollarColoredBold: sumTotalsDollarColoredBoldFormatter,\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}`;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 2) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return `<span style=\"font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 4) + suffix}</span>`;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const sumTotalsDollarColoredBoldFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">${prefix + '$' + decimalFormatted(val, 2, 2) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const sumTotalsColoredFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.sum && totals.sum[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (isNaN(+val)) {\n    return '';\n  } else if (val >= 0) {\n    return `<span style=\"color:green;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  } else {\n    return `<span style=\"color:red;\">${prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix}</span>`;\n  }\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const maxTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.max && totals.max[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const minTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.min && totals.min[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + ((Math.round(parseFloat(val) * 1000000) / 1000000)) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const avgTotalsDollarFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + '$' + decimalFormatted(val, 2, 4) + suffix;\n  }\n  return '';\n};\n",
    "import { Column, GroupTotalsFormatter } from './../models/index';\n\nexport const avgTotalsPercentageFormatter: GroupTotalsFormatter = (totals: any, columnDef: Column, grid?: any) => {\n  const field = columnDef.field || '';\n  const val = totals.avg && totals.avg[field];\n  const prefix = (columnDef.params && columnDef.params.groupFormatterPrefix) ? columnDef.params.groupFormatterPrefix : '';\n  const suffix = (columnDef.params && columnDef.params.groupFormatterSuffix) ? columnDef.params.groupFormatterSuffix : '';\n\n  if (val != null) {\n    return prefix + Math.round(val) + '%' + suffix;\n  }\n  return '';\n};\n",
    "import { Column } from './../models/index';\r\nimport { arrayToCsvFormatter } from './arrayToCsvFormatter';\r\nimport { boldFormatter } from './boldFormatter';\r\nimport { checkboxFormatter } from './checkboxFormatter';\r\nimport { checkmarkFormatter } from './checkmarkFormatter';\r\nimport { collectionFormatter } from './collectionFormatter';\r\nimport { collectionEditorFormatter } from './collectionEditorFormatter';\r\nimport { complexObjectFormatter } from './complexObjectFormatter';\r\nimport { dateIsoFormatter } from './dateIsoFormatter';\r\nimport { dateTimeIsoFormatter } from './dateTimeIsoFormatter';\r\nimport { dateTimeIsoAmPmFormatter } from './dateTimeIsoAmPmFormatter';\r\nimport { dateTimeUsAmPmFormatter } from './dateTimeUsAmPmFormatter';\r\nimport { dateTimeUsFormatter } from './dateTimeUsFormatter';\r\nimport { dateUsFormatter } from './dateUsFormatter';\r\nimport { deleteIconFormatter } from './deleteIconFormatter';\r\nimport { dollarColoredBoldFormatter } from './dollarColoredBoldFormatter';\r\nimport { dollarColoredFormatter } from './dollarColoredFormatter';\r\nimport { dollarFormatter } from './dollarFormatter';\r\nimport { editIconFormatter } from './editIconFormatter';\r\nimport { hyperlinkFormatter } from './hyperlinkFormatter';\r\nimport { hyperlinkUriPrefixFormatter } from './hyperlinkUriPrefixFormatter';\r\nimport { infoIconFormatter } from './infoIconFormatter';\r\nimport { lowercaseFormatter } from './lowercaseFormatter';\r\nimport { multipleFormatter } from './multipleFormatter';\r\nimport { percentFormatter } from './percentFormatter';\r\nimport { percentCompleteBarFormatter } from './percentCompleteBarFormatter';\r\nimport { percentCompleteFormatter } from './percentCompleteFormatter';\r\nimport { percentSymbolFormatter } from './percentSymbolFormatter';\r\nimport { progressBarFormatter } from './progressBarFormatter';\r\nimport { translateFormatter } from './translateFormatter';\r\nimport { translateBooleanFormatter } from './translateBooleanFormatter';\r\nimport { uppercaseFormatter } from './uppercaseFormatter';\r\nimport { yesNoFormatter } from './yesNoFormatter';\r\n\r\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\r\nexport const Formatters = {\r\n  /** Takes an array of string and converts it to a comma delimited string */\r\n  arrayToCsv: arrayToCsvFormatter,\r\n\r\n  /** show value in bold font weight as well */\r\n  bold: boldFormatter,\r\n\r\n  /** When value is filled (true), it will display a checkbox Unicode icon */\r\n  checkbox: checkboxFormatter,\r\n\r\n  /** When value is filled (true), it will display a Font-Awesome icon (fa-check) */\r\n  checkmark: checkmarkFormatter,\r\n\r\n  /** Takes a complex data object and return the data under that property (for example: \"user.firstName\" will return the first name \"John\") */\r\n  complexObject: complexObjectFormatter,\r\n\r\n  /**\r\n   * Looks up values from the columnDefinition.params.collection property and displays the label in CSV or string format\r\n   * @example\r\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\r\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\r\n   * const dataset = [{ value: 1 },{ value: 2 }];\r\n   */\r\n  collection: collectionFormatter,\r\n\r\n  /**\r\n   * Looks up values from the columnDefinition.editor.collection property and displays the label in CSV or string format\r\n   * @example\r\n   * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset\r\n   * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}\r\n   * const dataset = [{ value: 1 },{ value: 2 }];\r\n   */\r\n  collectionEditor: collectionEditorFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date format */\r\n  dateIso: dateIsoFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date+Time format */\r\n  dateTimeIso: dateTimeIsoFormatter,\r\n\r\n  /** Takes a Date object and displays it as an ISO Date+Time+(am/pm) format */\r\n  dateTimeIsoAmPm: dateTimeIsoAmPmFormatter,\r\n\r\n  /** Takes a Date object and displays it as an US Date format */\r\n  dateUs: dateUsFormatter,\r\n\r\n  /** Takes a Date object and displays it as an US Date+Time format */\r\n  dateTimeUs: dateTimeUsFormatter,\r\n\r\n  /** Takes a Date object and displays it as an US Date+Time+(am/pm) format */\r\n  dateTimeUsAmPm: dateTimeUsAmPmFormatter,\r\n\r\n  /** Displays a Font-Awesome delete icon (fa-trash) */\r\n  deleteIcon: deleteIconFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value */\r\n  dollar: dollarFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value */\r\n  dollarColored: dollarColoredFormatter,\r\n\r\n  /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value, show it in bold font weight as well */\r\n  dollarColoredBold: dollarColoredBoldFormatter,\r\n\r\n  /** Displays a Font-Awesome edit icon (fa-pencil) */\r\n  editIcon: editIconFormatter,\r\n\r\n  /** Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https). The structure will be \"<a href=\"hyperlink\">hyperlink</a>\" */\r\n  hyperlink: hyperlinkFormatter,\r\n\r\n  /** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\r\n  hyperlinkUriPrefix: hyperlinkUriPrefixFormatter,\r\n\r\n  /** Displays a Font-Awesome edit icon (fa-info-circle) */\r\n  infoIcon: infoIconFormatter,\r\n\r\n  /** Takes a value and displays it all lowercase */\r\n  lowercase: lowercaseFormatter,\r\n\r\n  /**\r\n   * You can pipe multiple formatters (executed in sequence), use params to pass the list of formatters. For example::\r\n   * { field: 'title', formatter: Formatters.multiple, params: { formatters: [ Formatters.lowercase, Formatters.uppercase ] }\r\n   */\r\n  multiple: multipleFormatter,\r\n\r\n  /** Takes a cell value number (between 0.0-1.0) and displays a red (<50) or green (>=50) bar */\r\n  percent: percentFormatter,\r\n\r\n  /** Takes a cell value number (between 0.0-100) and displays a red (<50) or green (>=50) bar */\r\n  percentComplete: percentCompleteFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"percent-complete-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\r\n  percentCompleteBar: percentCompleteBarFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and add the \"%\" after the number */\r\n  percentSymbol: percentSymbolFormatter,\r\n\r\n  /** Takes a cell value number (between 0-100) and displays Bootstrap \"progress-bar\" a red (<30), silver (>30 & <70) or green (>=70) bar */\r\n  progressBar: progressBarFormatter,\r\n\r\n  /** Takes a cell value and translates it (i18n). Requires an instance of the Translate Service:: `i18n: this.translate */\r\n  translate: translateFormatter,\r\n\r\n  /** Takes a boolean value, cast it to upperCase string and finally translates it (i18n). */\r\n  translateBoolean: translateBooleanFormatter,\r\n\r\n  /** Takes a value and displays it all uppercase */\r\n  uppercase: uppercaseFormatter,\r\n\r\n  /** Takes a boolean value and display a string 'Yes' or 'No' */\r\n  yesNo: yesNoFormatter\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const yesNoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string =>\n  value ? 'Yes' : 'No';\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const uppercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toUpperCase() : '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a boolean value, cast it to upperCase string and finally translates it with the \"ngx-translate\" service */\nexport const translateBooleanFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n  return value ? translate.instant(value.toUpperCase() as string) : '';\n};\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes a cell value and translates it with the \"ngx-translate\" service */\nexport const translateFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const gridOptions = (grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {};\n  const options = gridOptions || columnDef.params || {};\n  const translate = options.i18n;\n\n  if (!translate || typeof translate.instant !== 'function') {\n    throw new Error(`The translate formatter requires the \"ngx-translate\" Service to be provided as a Grid Options or Column Definition \"i18n\".\n    For example: this.gridOptions = { enableTranslate: true, i18n: this.translate }`);\n  }\n\n  // make sure the value is a string (for example a boolean value would throw an error)\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? translate.instant(value) : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const progressBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'danger';\n  } else if (value < 70) {\n    color = 'warning';\n  } else {\n    color = 'success';\n  }\n\n  return `<div class=\"progress\">\n    <div class=\"progress-bar progress-bar-${color}\" role=\"progressbar\" aria-valuenow=\"${value}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"min-width: 2em; width: ${value}%;\">\n    ${value}%\n    </div>\n  </div>`;\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentSymbolFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  return value ? `<span>${value}%</span>` : '';\r\n};\r\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '-';\n  } else if (value < 50) {\n    return `<span style='color:red;font-weight:bold;'>${value}%</span>`;\n  } else {\n    return `<span style='color:green'>${value}%</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const percentCompleteBarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\n  if (value === null || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'red';\n  } else if (value < 70) {\n    color = 'silver';\n  } else {\n    color = 'green';\n  }\n\n  return `<span class=\"percent-complete-bar\" style=\"background:${color}; width:${value}%\"></span>`;\n};\n",
    "import { Column } from './../models/column.interface';\r\nimport { Formatter } from './../models/formatter.interface';\r\n\r\nexport const percentFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any): string => {\r\n  if (value === null || value === '') {\r\n    return '';\r\n  }\r\n\r\n  const outputValue = value > 0 ? value / 100 : 0;\r\n  return `<span>${outputValue}%</span>`;\r\n};\r\n",
    "import { Column, Formatter } from './../models/index';\n\nexport const multipleFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any, grid: any) => {\n  const params = columnDef.params || {};\n  if (!params.formatters || !Array.isArray(params.formatters)) {\n    throw new Error(`The multiple formatter requires the \"formatters\" to be provided as a column params.\n    For example: this.columnDefinitions = [{ id: title, field: title, formatter: Formatters.multiple, params: { formatters: [Formatters.lowercase, Formatters.uppercase] }`);\n  }\n  const formatters: Formatter[] = params.formatters;\n\n  // loop through all Formatters, the value of 1st formatter will be used by 2nd formatter and so on.\n  // they are piped and executed in sequences\n  let currentValue = value;\n  for (const formatter of formatters) {\n    currentValue = formatter(row, cell, currentValue, columnDef, dataContext, grid);\n  }\n  return currentValue;\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const lowercaseFormatter: Formatter = (row: number, cell: number, value: string | any, columnDef: Column, dataContext: any): string => {\n  // make sure the value is a string\n  if (value !== undefined && typeof value !== 'string') {\n    value = value + '';\n  }\n\n  return value ? value.toLowerCase() : '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const infoIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-info-circle pointer info-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column, Formatter } from './../models/index';\n\n/** Takes an hyperlink URI prefix (passed in column definition \"params.uriPrefix\") and adds the cell value. The structure will be \"<a href=\"uriPrefix\">value</a>\"  */\nexport const hyperlinkUriPrefixFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  let uriPrefix = (columnDef && columnDef.params && columnDef.params.uriPrefix) ? columnDef.params.uriPrefix : '';\n  if (!uriPrefix) {\n    throw new Error(`HyperlinkUriPrefix Formatter require a \"uriPrefix\" that can be passed through params. e.g.:: formatter: Formatters.hyperlinkUriPrefix, params: { uriPrefix: '/users/' }`);\n  }\n  if (value && uriPrefix && typeof uriPrefix === 'string' && !uriPrefix.includes('<script>')) {\n    uriPrefix += value;\n    return '<a href=\"' + uriPrefix + '\">' + value + '</a>';\n  }\n  return '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const hyperlinkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && typeof value === 'string') {\n    const matchUrl = value.match(/^(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:\\/~\\+#]*[\\w\\-\\@?^=%&amp;\\/~\\+#])?/i);\n    if (matchUrl && Array.isArray(matchUrl)) {\n      return `<a href=\"${matchUrl[0]}\">' + value + '</a>`;\n    }\n  }\n  return '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const editIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-pencil pointer edit-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  isNaN(+value) ? '' : `$${decimalFormatted(value, 2, 4)}`;\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  } else {\n    return `<span style=\"color:red;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  }\n};\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const dollarColoredBoldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"color:green; font-weight: bold;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  } else {\n    return `<span style=\"color:red; font-weight: bold;\">$${decimalFormatted(value, 2, 2)}</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const deleteIconFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  `<i class=\"fa fa-trash pointer delete-icon\" aria-hidden=\"true\"></i>`;\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUs);\r\n\r\nexport const dateTimeUsFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeUsAmPm);\r\n\r\nexport const dateTimeUsAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIsoAmPm);\r\n\r\nexport const dateTimeIsoAmPmFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? moment(value).format(FORMAT) : '';\r\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateTimeIso);\n\nexport const dateTimeIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? moment(value).format(FORMAT) : '';\n",
    "import { Column, FieldType, Formatter } from './../models/index';\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\nimport * as moment_ from 'moment-mini';\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\n\nexport const dateIsoFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? moment(value).format(FORMAT) : '';\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const complexObjectFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!columnDef) {\n    return '';\n  }\n  const complexField = columnDef.field || '';\n  return complexField.split('.').reduce((obj, i) => (obj ? obj[i] : ''), dataContext);\n};\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of an editor collection\n */\nexport const collectionEditorFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.internalColumnEditor || !columnDef.internalColumnEditor.collection\n    || !columnDef.internalColumnEditor.collection.length) {\n    return '';\n  }\n\n  const { internalColumnEditor, internalColumnEditor: { collection } } = columnDef;\n  const labelName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.label : 'label';\n  const valueName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { arrayToCsvFormatter } from './arrayToCsvFormatter';\nimport { Column, Formatter } from './../models/index';\nimport { findOrDefault } from '../services/utilities';\n\n/**\n * A formatter to show the label property value of a params collection\n */\nexport const collectionFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!value || !columnDef || !columnDef.params || !columnDef.params.collection\n    || !columnDef.params.collection.length) {\n    return '';\n  }\n\n  const { params, params: { collection } } = columnDef;\n  const labelName = (params.customStructure) ? params.customStructure.label : 'label';\n  const valueName = (params.customStructure) ? params.customStructure.value : 'value';\n\n  if (Array.isArray(value)) {\n    return arrayToCsvFormatter(row,\n      cell,\n      value.map((v: any) => findOrDefault(collection, (c: any) => c[valueName] === v)[labelName]),\n      columnDef,\n      dataContext);\n  }\n\n  return findOrDefault(collection, (c: any) => c[valueName] === value)[labelName] || '';\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkmarkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? `<i class=\"fa fa-check checkmark-icon\" aria-hidden=\"true\"></i>` : '';\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const checkboxFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\n  value ? '&#x2611;' : '';\n",
    "import { Column, Formatter } from './../models/index';\nimport { decimalFormatted } from './../services/utilities';\n\nexport const boldFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (!isNaN(+value)) {\n    return '';\n  } else if (value >= 0) {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  } else {\n    return `<span style=\"font-weight: bold\">${decimalFormatted(value, 2, 2)}$</span>`;\n  }\n};\n",
    "import { Column } from './../models/column.interface';\nimport { Formatter } from './../models/formatter.interface';\n\nexport const arrayToCsvFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  if (value && Array.isArray(value)) {\n    const values = value.join(', ');\n    return `<span title=\"${values}\">${values}</span>`;\n  }\n  return '';\n};\n",
    "import { EditorType } from './../models/editorType.enum';\r\nimport { CheckboxEditor } from './checkboxEditor';\r\nimport { DateEditor } from './dateEditor';\r\nimport { FloatEditor } from './floatEditor';\r\nimport { IntegerEditor } from './integerEditor';\r\nimport { LongTextEditor } from './longTextEditor';\r\nimport { MultipleSelectEditor } from './multipleSelectEditor';\r\nimport { SingleSelectEditor } from './singleSelectEditor';\r\nimport { TextEditor } from './textEditor';\r\nimport { Editor } from '../models';\r\n\r\nexport class AvailableEditor {\r\n  constructor(public type: EditorType, public editor: any) {}\r\n}\r\n\r\nexport const Editors = {\r\n  checkbox: CheckboxEditor,\r\n  date: DateEditor,\r\n  float: FloatEditor,\r\n  integer: IntegerEditor,\r\n  longText: LongTextEditor,\r\n  multipleSelect: MultipleSelectEditor,\r\n  singleSelect: SingleSelectEditor,\r\n  text: TextEditor\r\n};\r\n\r\nexport const AVAILABLE_EDITORS: AvailableEditor[] = [\r\n  { type: EditorType.checkbox, editor: CheckboxEditor },\r\n  { type: EditorType.date, editor: DateEditor },\r\n  { type: EditorType.float, editor: FloatEditor },\r\n  { type: EditorType.integer, editor: IntegerEditor },\r\n  { type: EditorType.longText, editor: LongTextEditor },\r\n  { type: EditorType.multipleSelect, editor: MultipleSelectEditor },\r\n  { type: EditorType.singleSelect, editor: SingleSelectEditor },\r\n  { type: EditorType.text, editor: TextEditor },\r\n];\r\n",
    "import { Column, Editor, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class TextEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"text\" class=\"editor-text\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this.$input.val(val);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field] || '';\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue === null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Editor,\r\n  Column,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  SelectOption\r\n} from './../models/index';\r\nimport { findOrDefault, CollectionService } from '../services/index';\r\n\r\n// height in pixel of the multiple-select DOM element\r\nconst SELECT_ELEMENT_HEIGHT = 26;\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/**\r\n * Slickgrid editor class for single select lists\r\n */\r\nexport class SingleSelectEditor implements Editor {\r\n  /** The JQuery DOM element */\r\n  $editorElm: any;\r\n\r\n  /** Editor Multiple-Select options */\r\n  editorElmOptions: MultipleSelectOption;\r\n\r\n  /** The slick grid column being edited */\r\n  columnDef: Column;\r\n\r\n  /** The multiple-select options for a single select */\r\n  defaultOptions: any;\r\n\r\n  /** The default item value that is set */\r\n  defaultValue: any;\r\n\r\n  /** The options label/value object to use in the select list */\r\n  collection: SelectOption[] = [];\r\n\r\n  /** The property name for values in the collection */\r\n  valueName: string;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName: string;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** Do we translate the label? */\r\n  enableTranslateLabel: boolean;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,\r\n      maxHeight: 200,\r\n      width: 150,\r\n      offsetLeft: 20,\r\n      single: true,\r\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\r\n    };\r\n\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * The current selected value from the collection\r\n   */\r\n  get currentValue() {\r\n    return findOrDefault(this.collection, (c: any) =>\r\n      c[this.valueName].toString() === this.$editorElm.val())[this.valueName];\r\n  }\r\n\r\n  init() {\r\n    if (!this.args) {\r\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\r\n    }\r\n\r\n    this.columnDef = this.args.column;\r\n\r\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the SingleSelect Editor to work correctly.\r\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\r\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\r\n    }\r\n\r\n    const collectionService = new CollectionService(this._translate);\r\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\r\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\r\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionFilterBy) {\r\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\r\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\r\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    this.collection = newCollection;\r\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    this.createDomElement(editorTemplate);\r\n  }\r\n\r\n  applyValue(item: any, state: any): void {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  destroy() {\r\n    this.$editorElm.remove();\r\n  }\r\n\r\n  loadValue(item: any): void {\r\n    // convert to string because that is how the DOM will return these values\r\n    // make sure the prop exists first\r\n    this.defaultValue = item[this.columnDef.field] && item[this.columnDef.field].toString();\r\n\r\n\r\n    this.$editorElm.find('option').each((i: number, $e: any) => {\r\n      if (this.defaultValue === $e.value) {\r\n        $e.selected = true;\r\n      } else {\r\n        $e.selected = false;\r\n      }\r\n    });\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  serializeValue(): any {\r\n    return this.currentValue;\r\n  }\r\n\r\n  focus() {\r\n    this.$editorElm.focus();\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    return this.$editorElm.val() !== this.defaultValue;\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.currentValue, this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n\r\n  private buildTemplateHtmlString(collection: any[]) {\r\n    let options = '';\r\n    collection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error('A collection with value/label (or value/labelKey when using ' +\r\n          'Locale) is required to populate the Select list, for example: { params: { ' +\r\n          '{ collection: [ { value: \\'1\\', label: \\'One\\' } ] } } }');\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\r\n  }\r\n\r\n    /**\r\n   * Automatically adjust the multiple-select dropup or dropdown by available space\r\n   */\r\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\r\n    // height in pixel of the multiple-select element\r\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\r\n\r\n    const windowHeight = $(window).innerHeight() || 300;\r\n    const pageScroll = $('body').scrollTop() || 0;\r\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\r\n    const $msDrop = $msDropContainer.find('.ms-drop');\r\n    const msDropHeight = $msDrop.height() || 0;\r\n    const msDropOffsetTop = $msDrop.offset().top;\r\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\r\n\r\n    if (space < msDropHeight) {\r\n      if (multipleSelectOptions.container) {\r\n        // when using a container, we need to offset the drop ourself\r\n        // and also make sure there's space available on top before doing so\r\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\r\n        if (newOffsetTop > 0) {\r\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\r\n        }\r\n      } else {\r\n        // without container, we simply need to add the \"top\" class to the drop\r\n        $msDrop.addClass('top');\r\n      }\r\n      $msDrop.removeClass('bottom');\r\n    } else {\r\n      $msDrop.addClass('bottom');\r\n      $msDrop.removeClass('top');\r\n    }\r\n  }\r\n\r\n  /** Build the template HTML string */\r\n  private createDomElement(editorTemplate: string) {\r\n    this.$editorElm = $(editorTemplate);\r\n\r\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\r\n      this.$editorElm.appendTo(this.args.container);\r\n    }\r\n\r\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\r\n      // fallback to bootstrap\r\n      this.$editorElm.addClass('form-control');\r\n    } else {\r\n      const elementOptions = (this.columnDef.params) ? this.columnDef.params.elementOptions : {};\r\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\r\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\r\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\r\n    }\r\n  }\r\n\r\n  // refresh the jquery object because the selected checkboxes were already set\r\n  // prior to this method being called\r\n  private refresh() {\r\n    if (typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('refresh');\r\n    }\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  Editor,\r\n  Column,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  SelectOption\r\n} from './../models/index';\r\nimport { arraysEqual, CollectionService } from '../services/index';\r\n\r\n// height in pixel of the multiple-select DOM element\r\nconst SELECT_ELEMENT_HEIGHT = 26;\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/**\r\n * Slickgrid editor class for multiple select lists\r\n */\r\nexport class MultipleSelectEditor implements Editor {\r\n  /** The JQuery DOM element */\r\n  $editorElm: any;\r\n\r\n  /** Editor Multiple-Select options */\r\n  editorElmOptions: MultipleSelectOption;\r\n\r\n  /** The slick grid column being edited */\r\n  columnDef: Column;\r\n\r\n  /** The multiple-select options for a multiple select list */\r\n  defaultOptions: MultipleSelectOption;\r\n\r\n  /** The default item values that are set */\r\n  defaultValue: any[];\r\n\r\n  /** The options label/value object to use in the select list */\r\n  collection: SelectOption[] = [];\r\n\r\n  /** The property name for values in the collection */\r\n  valueName: string;\r\n\r\n  /** The property name for labels in the collection */\r\n  labelName: string;\r\n\r\n  /** Grid options */\r\n  gridOptions: GridOption;\r\n\r\n  /** Do we translate the label? */\r\n  enableTranslateLabel: boolean;\r\n\r\n  /** The i18n aurelia library */\r\n  private _translate: TranslateService;\r\n\r\n  constructor(private args: any) {\r\n    this.gridOptions = this.args.grid.getOptions() as GridOption;\r\n    const options = this.gridOptions || this.args.column.params || {};\r\n    this._translate = options.i18n;\r\n\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,\r\n      maxHeight: 200,\r\n      addTitle: true,\r\n      okButton: true,\r\n      selectAllDelimiter: ['', ''],\r\n      width: 150,\r\n      offsetLeft: 20,\r\n      onOpen: () => this.autoAdjustDropPosition(this.$editorElm, this.editorElmOptions),\r\n    };\r\n\r\n    if (this._translate) {\r\n      this.defaultOptions.countSelected = this._translate.instant('X_OF_Y_SELECTED');\r\n      this.defaultOptions.allSelected = this._translate.instant('ALL_SELECTED');\r\n      this.defaultOptions.selectAllText = this._translate.instant('SELECT_ALL');\r\n    }\r\n\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * The current selected values from the collection\r\n   */\r\n  get currentValues() {\r\n    return this.collection\r\n      .filter(c => this.$editorElm.val().indexOf(c[this.valueName].toString()) !== -1)\r\n      .map(c => c[this.valueName]);\r\n  }\r\n\r\n  init() {\r\n    if (!this.args) {\r\n      throw new Error('[Angular-SlickGrid] An editor must always have an \"init()\" with valid arguments.');\r\n    }\r\n\r\n    this.columnDef = this.args.column as Column;\r\n\r\n    if (!this.columnDef || !this.columnDef.internalColumnEditor || !this.columnDef.internalColumnEditor.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" inside Column Definition Editor for the MultipleSelect Editor to work correctly.\r\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\r\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\r\n    }\r\n\r\n    const collectionService = new CollectionService(this._translate);\r\n    this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;\r\n    let newCollection =  this.columnDef.internalColumnEditor.collection || [];\r\n    this.labelName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.internalColumnEditor.customStructure) ? this.columnDef.internalColumnEditor.customStructure.value : 'value';\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const filterBy = this.columnDef.internalColumnEditor.collectionFilterBy;\r\n      newCollection = collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {\r\n      const sortBy = this.columnDef.internalColumnEditor.collectionSortBy;\r\n      newCollection = collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    this.collection = newCollection;\r\n    const editorTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    this.createDomElement(editorTemplate);\r\n  }\r\n\r\n  applyValue(item: any, state: any): void {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  destroy() {\r\n    this.$editorElm.remove();\r\n  }\r\n\r\n  loadValue(item: any): void {\r\n    // convert to string because that is how the DOM will return these values\r\n    this.defaultValue = item[this.columnDef.field].map((i: any) => i.toString());\r\n\r\n    this.$editorElm.find('option').each((i: number, $e: any) => {\r\n      if (this.defaultValue.indexOf($e.value) !== -1) {\r\n        $e.selected = true;\r\n      } else {\r\n        $e.selected = false;\r\n      }\r\n    });\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  serializeValue(): any {\r\n    return this.currentValues;\r\n  }\r\n\r\n  focus() {\r\n    this.$editorElm.focus();\r\n  }\r\n\r\n  isValueChanged(): boolean {\r\n    return !arraysEqual(this.$editorElm.val(), this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.currentValues, this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n\r\n  private buildTemplateHtmlString(collection: any[]) {\r\n    let options = '';\r\n    collection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example: { collection: [ { value: '1', label: 'One' } ])`);\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n\r\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this._translate && typeof this._translate.instant === 'function') ? this._translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      options += `<option value=\"${option[this.valueName]}\">${textLabel}</option>`;\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * Automatically adjust the multiple-select dropup or dropdown by available space\r\n   */\r\n  private autoAdjustDropPosition(multipleSelectDomElement: any, multipleSelectOptions: MultipleSelectOption) {\r\n    // height in pixel of the multiple-select element\r\n    const selectElmHeight = SELECT_ELEMENT_HEIGHT;\r\n\r\n    const windowHeight = $(window).innerHeight() || 300;\r\n    const pageScroll = $('body').scrollTop() || 0;\r\n    const $msDropContainer = multipleSelectOptions.container ? $(multipleSelectOptions.container) : multipleSelectDomElement;\r\n    const $msDrop = $msDropContainer.find('.ms-drop');\r\n    const msDropHeight = $msDrop.height() || 0;\r\n    const msDropOffsetTop = $msDrop.offset().top;\r\n    const space = windowHeight - (msDropOffsetTop - pageScroll);\r\n\r\n    if (space < msDropHeight) {\r\n      if (multipleSelectOptions.container) {\r\n        // when using a container, we need to offset the drop ourself\r\n        // and also make sure there's space available on top before doing so\r\n        const newOffsetTop = (msDropOffsetTop - msDropHeight - selectElmHeight);\r\n        if (newOffsetTop > 0) {\r\n          $msDrop.offset({ top: newOffsetTop < 0 ? 0 : newOffsetTop });\r\n        }\r\n      } else {\r\n        // without container, we simply need to add the \"top\" class to the drop\r\n        $msDrop.addClass('top');\r\n      }\r\n      $msDrop.removeClass('bottom');\r\n    } else {\r\n      $msDrop.addClass('bottom');\r\n      $msDrop.removeClass('top');\r\n    }\r\n  }\r\n\r\n  /** Build the template HTML string */\r\n  private createDomElement(editorTemplate: string) {\r\n    this.$editorElm = $(editorTemplate);\r\n\r\n    if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {\r\n      this.$editorElm.appendTo(this.args.container);\r\n    }\r\n\r\n    if (typeof this.$editorElm.multipleSelect !== 'function') {\r\n      // fallback to bootstrap\r\n      this.$editorElm.addClass('form-control');\r\n    } else {\r\n      const elementOptions = (this.columnDef.internalColumnEditor) ? this.columnDef.internalColumnEditor.elementOptions : {};\r\n      this.editorElmOptions = { ...this.defaultOptions, ...elementOptions };\r\n      this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);\r\n      setTimeout(() => this.$editorElm.multipleSelect('open'));\r\n    }\r\n  }\r\n\r\n  // refresh the jquery object because the selected checkboxes were already set\r\n  // prior to this method being called\r\n  private refresh() {\r\n    if (typeof this.$editorElm.multipleSelect === 'function') {\r\n      this.$editorElm.multipleSelect('refresh');\r\n    }\r\n  }\r\n}\r\n",
    "import { Column, Editor, HtmlElementPosition, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class LongTextEditor implements Editor {\r\n  $input: any;\r\n  $wrapper: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    const $container = $('body');\r\n\r\n    this.$wrapper = $(`<div class=\"slick-large-editor-text\" />`).appendTo($container);\r\n    this.$input = $(`<textarea hidefocus rows=\"5\">`).appendTo(this.$wrapper);\r\n\r\n    $(`<div class=\"editor-footer\">\r\n        <button class=\"btn btn-primary btn-xs\">Save</button>\r\n        <button class=\"btn btn-default btn-xs\">Cancel</button>\r\n      </div>`).appendTo(this.$wrapper);\r\n\r\n    this.$wrapper.find('button:first').on('click', (event: Event) => this.save());\r\n    this.$wrapper.find('button:last').on('click', (event: Event) => this.cancel());\r\n    this.$input.on('keydown', this.handleKeyDown);\r\n\r\n    this.position(this.args.position);\r\n    this.$input.focus().select();\r\n  }\r\n\r\n  handleKeyDown(e: any) {\r\n    if (e.which === KeyCode.ENTER && e.ctrlKey) {\r\n      this.save();\r\n    } else if (e.which === KeyCode.ESCAPE) {\r\n      e.preventDefault();\r\n      this.cancel();\r\n    } else if (e.which === KeyCode.TAB && e.shiftKey) {\r\n      e.preventDefault();\r\n      this.args.grid.navigatePrev();\r\n    } else if (e.which === KeyCode.TAB) {\r\n      e.preventDefault();\r\n      this.args.grid.navigateNext();\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  cancel() {\r\n    this.$input.val(this.defaultValue);\r\n    this.args.cancelChanges();\r\n  }\r\n\r\n  hide() {\r\n    this.$wrapper.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$wrapper.show();\r\n  }\r\n\r\n  position(position: HtmlElementPosition) {\r\n    this.$wrapper\r\n      .css('top', (position.top || 0) - 5)\r\n      .css('left', (position.left || 0) - 5);\r\n  }\r\n\r\n  destroy() {\r\n    this.$wrapper.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.$input.val(this.defaultValue = item[this.args.column.field]);\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue == null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.$input.val(), this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Column, Editor, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class IntegerEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"number\" class='editor-text' />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = parseInt(item[this.args.column.field], 10);\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return parseInt(this.$input.val() as string, 10) || 0;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    const elmValue = this.$input.val();\r\n    const value = isNaN(elmValue) ? elmValue : parseInt(elmValue, 10);\r\n    return (!(value === '' && this.defaultValue === null)) && (value !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n    const columnEditor = this.getColumnEditor();\r\n    const errorMsg = columnEditor.params && columnEditor.params.validatorErrorMessage;\r\n    const elmValue = this.$input.val();\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(elmValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    } else if (isNaN(elmValue as number) || !/^[+-]?\\d+$/.test(elmValue)) {\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || 'Please enter a valid integer number'\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Column, Editor, KeyCode } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nconst defaultDecimalPlaces = 0;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class FloatEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"number\" class=\"editor-text\" step=\"${this.getInputDecimalSteps()}\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  getDecimalPlaces() {\r\n    // returns the number of fixed decimal places or null\r\n    const columnEditor = this.getColumnEditor();\r\n    let rtn = (columnEditor && columnEditor.params && columnEditor.params.hasOwnProperty('decimalPlaces')) ? columnEditor.params.decimalPlaces : undefined;\r\n    if (rtn === undefined) {\r\n      rtn = defaultDecimalPlaces;\r\n    }\r\n    return (!rtn && rtn !== 0 ? null : rtn);\r\n  }\r\n\r\n  getInputDecimalSteps() {\r\n    const decimals = this.getDecimalPlaces();\r\n    let zeroString = '';\r\n    for (let i = 1; i < decimals; i++) {\r\n      zeroString += '0';\r\n    }\r\n\r\n    if (decimals > 0) {\r\n      return `0.${zeroString}1`;\r\n    }\r\n    return '1';\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field];\r\n\r\n    const decPlaces = this.getDecimalPlaces();\r\n    if (decPlaces !== null\r\n      && (this.defaultValue || this.defaultValue === 0)\r\n      && this.defaultValue.toFixed) {\r\n      this.defaultValue = this.defaultValue.toFixed(decPlaces);\r\n    }\r\n\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    let rtn = parseFloat(this.$input.val()) || 0;\r\n    const decPlaces = this.getDecimalPlaces();\r\n    if (decPlaces !== null\r\n      && (rtn || rtn === 0)\r\n      && rtn.toFixed) {\r\n      rtn = parseFloat(rtn.toFixed(decPlaces));\r\n    }\r\n\r\n    return rtn;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    const elmValue = this.$input.val();\r\n    return (!(elmValue === '' && this.defaultValue === null)) && (elmValue !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n    const elmValue = this.$input.val();\r\n    const columnEditor = this.getColumnEditor();\r\n    const decPlaces = this.getDecimalPlaces();\r\n    const errorMsg = columnEditor.params && columnEditor.params.validatorErrorMessage;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(elmValue);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    } else if (isNaN(elmValue as number) || (decPlaces === 0 && !/^(\\d+(\\.)?(\\d)*)$/.test(elmValue))) {\r\n      // when decimal value is 0 (which is the default), we accept 0 or more decimal values\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || `Please enter a valid number`\r\n      };\r\n    } else if (isNaN(elmValue as number) || (decPlaces > 0 && !new RegExp(`^(\\\\d+(\\\\.)?(\\\\d){0,${decPlaces}})$`).test(elmValue))) {\r\n      // when decimal value is bigger than 0, we only accept the decimal values as that value set\r\n      // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\r\n      return {\r\n        valid: false,\r\n        msg: errorMsg || `Please enter a valid number between 0 and ${decPlaces} decimals`\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { Column, Editor, FieldType, GridOption } from './../models/index';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a date picker editor using Flatpickr\r\n * https://chmln.github.io/flatpickr\r\n */\r\nexport class DateEditor implements Editor {\r\n  $input: any;\r\n  flatInstance: any;\r\n  defaultDate: string;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    if (this.args && this.args.column) {\r\n      const columnDef = this.args.column;\r\n      const gridOptions = this.args.grid.getOptions() as GridOption;\r\n      this.defaultDate = (this.args.item) ? this.args.item[this.args.column.field] : null;\r\n      const inputFormat = mapFlatpickrDateFormatWithFieldType(columnDef.type || FieldType.dateIso);\r\n      const outputFormat = mapFlatpickrDateFormatWithFieldType(columnDef.outputType || FieldType.dateUtc);\r\n      let currentLocale = this.getCurrentLocale(columnDef, gridOptions);\r\n      if (currentLocale.length > 2) {\r\n        currentLocale = currentLocale.substring(0, 2);\r\n      }\r\n\r\n      const pickerOptions: any = {\r\n        defaultDate: this.defaultDate,\r\n        altInput: true,\r\n        altFormat: inputFormat,\r\n        dateFormat: outputFormat,\r\n        closeOnSelect: false,\r\n        locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n        onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n          this.save();\r\n        },\r\n      };\r\n\r\n\r\n      this.$input = $(`<input type=\"text\" data-defaultDate=\"${this.defaultDate}\" class=\"editor-text flatpickr\" />`);\r\n      this.$input.appendTo(this.args.container);\r\n      this.flatInstance = (this.$input[0] && typeof this.$input[0].flatpickr === 'function') ? this.$input[0].flatpickr(pickerOptions) : null;\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  getCurrentLocale(columnDef: Column, gridOptions: GridOption) {\r\n    const options = gridOptions || columnDef.params || {};\r\n    if (options.i18n && options.i18n instanceof TranslateService) {\r\n      return options.i18n.currentLang;\r\n    }\r\n\r\n    return 'en';\r\n  }\r\n\r\n  loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  destroy() {\r\n    this.hide();\r\n    // this.flatInstance.destroy();\r\n    this.$input.remove();\r\n  }\r\n\r\n  show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  save() {\r\n    this.args.commitChanges();\r\n  }\r\n\r\n  getColumnEditor() {\r\n    return this.args && this.args.column && this.args.column.internalColumnEditor && this.args.column.internalColumnEditor;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultDate = item[this.args.column.field];\r\n    this.flatInstance.setDate(item[this.args.column.field]);\r\n  }\r\n\r\n  serializeValue() {\r\n    const domValue: string = this.$input.val();\r\n\r\n    if (!domValue) {\r\n      return '';\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n    const value = moment(domValue).format(outputFormat);\r\n\r\n    return value;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    if (!state) {\r\n      return;\r\n    }\r\n\r\n    const outputFormat = mapMomentDateFormatWithFieldType(this.args.column.type || FieldType.dateIso);\r\n\r\n    item[this.args.column.field] = moment(state, outputFormat).toDate();\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultDate == null)) && (this.$input.val() !== this.defaultDate);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.$input.val(), this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { Column, Editor } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class CheckboxEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: boolean;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"checkbox\" value=\"true\" class=\"editor-checkbox\" />`);\r\n    this.$input.appendTo(this.args.container);\r\n    this.$input.focus();\r\n  }\r\n\r\n  destroy(): void {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus(): void {\r\n    this.$input.focus();\r\n  }\r\n\r\n  hide() {\r\n    this.$input.hide();\r\n  }\r\n\r\n  show() {\r\n    this.$input.show();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = !!item[this.args.column.field];\r\n    if (this.defaultValue) {\r\n      this.$input.prop('checked', true);\r\n    } else {\r\n      this.$input.prop('checked', false);\r\n    }\r\n  }\r\n\r\n  preClick() {\r\n    this.$input.prop('checked', !this.$input.prop('checked'));\r\n  }\r\n\r\n  serializeValue(): boolean {\r\n    return this.$input.prop('checked');\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (this.serializeValue() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    const column = (this.args && this.args.column) as Column;\r\n\r\n    if (column.validator) {\r\n      const validationResults = column.validator(this.$input.val(), this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n",
    "import { AvgAggregator } from './avgAggregator';\nimport { MinAggregator } from './minAggregator';\nimport { MaxAggregator } from './maxAggregator';\nimport { SumAggregator } from './sumAggregator';\n\n/** Provides a list of different Aggregators for the Group Formatter */\nexport const Aggregators = {\n  Avg: AvgAggregator,\n  Min: MinAggregator,\n  Max: MaxAggregator,\n  Sum: SumAggregator\n};\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class SumAggregator implements Aggregator {\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._sum = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.sum) {\n      groupTotals.sum = {};\n    }\n    groupTotals.sum[this._field] = this._sum;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MaxAggregator implements Aggregator {\n  private _max: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._max = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._max == null || val > this._max) {\n        this._max = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.max) {\n      groupTotals.max = {};\n    }\n    groupTotals.max[this._field] = this._max;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class MinAggregator implements Aggregator {\n  private _min: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init() {\n    this._min = null;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    if (val != null && val !== '' && !isNaN(val)) {\n      if (this._min == null || val < this._min) {\n        this._min = val;\n      }\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.min) {\n      groupTotals.min = {};\n    }\n    groupTotals.min[this._field] = this._min;\n  }\n}\n",
    "import { Aggregator } from './../models/aggregator.interface';\n\nexport class AvgAggregator implements Aggregator {\n  private _count: number;\n  private _nonNullCount: number;\n  private _sum: number;\n  private _field: number | string;\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  init(): void {\n    this._count = 0;\n    this._nonNullCount = 0;\n    this._sum = 0;\n  }\n\n  accumulate(item) {\n    const val = item[this._field];\n    this._count++;\n    if (val != null && val !== '' && !isNaN(val)) {\n      this._nonNullCount++;\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals) {\n    if (!groupTotals.avg) {\n      groupTotals.avg = {};\n    }\n    if (this._nonNullCount !== 0) {\n      groupTotals.avg[this._field] = this._sum / this._nonNullCount;\n    }\n  }\n}\n",
    "import { Column, GridOption } from './../models/index';\nimport { Subject } from 'rxjs/Subject';\n\n// using external non-typed js libraries\ndeclare var $: any;\n\n// global constants, height/width are in pixels\nconst DATAGRID_MIN_HEIGHT = 180;\nconst DATAGRID_MIN_WIDTH = 300;\nconst DATAGRID_BOTTOM_PADDING = 20;\nconst DATAGRID_PAGINATION_HEIGHT = 35;\nlet timer: any;\n\nexport interface GridDimension {\n  height: number;\n  width: number;\n  heightWithPagination?: number;\n}\n\nexport class ResizerService {\n  private _grid: any;\n  private _lastDimensions: GridDimension;\n  onGridBeforeResize = new Subject<boolean>();\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  private get _gridUid(): string {\n    return (this._grid && this._grid.getUID) ? this._grid.getUID() : this._gridOptions.gridId;\n  }\n\n  init(grid: any): void {\n    this._grid = grid;\n  }\n\n  /** Attach an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space\n   * Options: we could also provide a % factor to resize on each height/width independently\n   */\n  attachAutoResizeDataGrid(newSizes?: GridDimension) {\n    // if we can't find the grid to resize, return without attaching anything\n    const gridDomElm = $(`#${this._gridOptions && this._gridOptions.gridId ? this._gridOptions.gridId : 'grid1'}`);\n    if (gridDomElm === undefined || gridDomElm.offset() === undefined) {\n      return null;\n    }\n\n    // -- 1st resize the datagrid size at first load (we need this because the .on event is not triggered on first load)\n    this.resizeGrid(0, newSizes);\n\n    // -- 2nd attach a trigger on the Window DOM element, so that it happens also when resizing after first load\n    // -- attach auto-resize to Window object only if it exist\n    $(window).on(`resize.grid.${this._gridUid}`, () => {\n      this.onGridBeforeResize.next(true);\n      // for some yet unknown reason, calling the resize twice removes any stuttering/flickering when changing the height and makes it much smoother\n      this.resizeGrid(0, newSizes);\n      this.resizeGrid(0, newSizes);\n    });\n  }\n\n  /**\n   * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation\n   * object gridOptions\n   */\n  calculateGridNewDimensions(gridOptions: GridOption): any {\n    const gridDomElm = $(`#${gridOptions.gridId}`);\n    const containerElm = (gridOptions.autoResize && gridOptions.autoResize.containerId) ? $(`#${gridOptions.autoResize.containerId}`) : $(`#${gridOptions.gridContainerId}`);\n    const windowElm = $(window);\n    if (windowElm === undefined || containerElm === undefined || gridDomElm === undefined) {\n      return null;\n    }\n\n    // calculate bottom padding\n    // if using pagination, we need to add the pagination height to this bottom padding\n    let bottomPadding = (gridOptions.autoResize && gridOptions.autoResize.bottomPadding) ? gridOptions.autoResize.bottomPadding : DATAGRID_BOTTOM_PADDING;\n    if (bottomPadding && (gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\n      bottomPadding += DATAGRID_PAGINATION_HEIGHT;\n    }\n\n    const gridHeight = windowElm.height() || 0;\n    const coordOffsetTop = gridDomElm.offset();\n    const gridOffsetTop = (coordOffsetTop !== undefined) ? coordOffsetTop.top : 0;\n    const availableHeight = gridHeight - gridOffsetTop - bottomPadding;\n    const availableWidth = containerElm.width() || 0;\n    const minHeight = (gridOptions.autoResize && gridOptions.autoResize.minHeight < 0) ? gridOptions.autoResize.minHeight : DATAGRID_MIN_HEIGHT;\n    const minWidth = (gridOptions.autoResize && gridOptions.autoResize.minWidth < 0) ? gridOptions.autoResize.minWidth : DATAGRID_MIN_WIDTH;\n\n    let newHeight = availableHeight;\n    let newWidth = (gridOptions.autoResize && gridOptions.autoResize.sidePadding) ? availableWidth - gridOptions.autoResize.sidePadding : availableWidth;\n    if (newHeight < minHeight) {\n      newHeight = minHeight;\n    }\n    if (newWidth < minWidth) {\n      newWidth = minWidth;\n    }\n\n    return {\n      height: newHeight,\n      width: newWidth\n    };\n  }\n\n  /**\n   * Dispose function when element is destroyed\n   */\n  dispose() {\n    $(window).off(`resize.grid.${this._gridUid}`);\n  }\n\n  getLastResizeDimensions(): GridDimension {\n    return this._lastDimensions;\n  }\n\n  /** Resize the datagrid to fit the browser height & width */\n  resizeGrid(delay?: number, newSizes?: GridDimension): void {\n    if (!this._grid || !this._gridOptions) {\n      throw new Error(`\n      Angular-Slickgrid resizer requires a valid Grid object and Grid Options defined.\n      You can fix this by setting your gridOption to use \"enableAutoResize\" or create an instance of the ResizerService by calling attachAutoResizeDataGrid()`);\n    }\n\n    // because of the javascript async nature, we might want to delay the resize a little bit\n    delay = delay || 0;\n\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      // calculate the available sizes with minimum height defined as a constant\n      const availableDimensions = this.calculateGridNewDimensions(this._gridOptions);\n      const gridElm = $(`#${this._gridOptions.gridId}`) || {};\n      const gridContainerElm = $(`#${this._gridOptions.gridContainerId}`) || {};\n\n      if ((newSizes || availableDimensions) && gridElm.length > 0) {\n        // get the new sizes, if new sizes are passed (not 0), we will use them else use available space\n        // basically if user passes 1 of the dimension, let say he passes just the height,\n        // we will use the height as a fixed height but the width will be resized by it's available space\n        const newHeight = (newSizes && newSizes.height) ? newSizes.height : availableDimensions.height;\n        const newWidth = (newSizes && newSizes.width) ? newSizes.width : availableDimensions.width;\n\n        // apply these new height/width to the datagrid\n        gridElm.height(newHeight);\n        gridElm.width(newWidth);\n        gridContainerElm.height(newHeight);\n        gridContainerElm.width(newWidth);\n\n        // keep last resized dimensions\n        this._lastDimensions = {\n          height: newHeight,\n          width: newWidth\n        };\n        if ((this._gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {\n          this._lastDimensions.heightWithPagination = newHeight + DATAGRID_PAGINATION_HEIGHT;\n        }\n\n        // resize the slickgrid canvas on all browser except some IE versions\n        // exclude all IE below IE11\n        // IE11 wants to be a better standard (W3C) follower (finally) they even changed their appName output to also have 'Netscape'\n        if (new RegExp('MSIE [6-8]').exec(navigator.userAgent) === null && this._grid) {\n          this._grid.resizeCanvas();\n        }\n\n        // also call the grid auto-size columns so that it takes available when going bigger\n        this._grid.autosizeColumns();\n      }\n    }, delay);\n  }\n}\n",
    "\nimport {\n  Column,\n  GridOption\n} from './../models/index';\n\n// using external non-typed js libraries\ndeclare let $: any;\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GroupingAndColspanService {\n  private _eventHandler = new Slick.EventHandler();\n  private _dataView: any;\n  private _grid: any;\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any, dataView: any) {\n    this._grid = grid;\n    this._dataView = dataView;\n\n    if (grid && this._gridOptions) {\n      // When dealing with Pre-Header Grouping colspan, we need to re-create the pre-header in multiple occasions\n      // for all these occasions, we have to trigger a re-create\n      if (this._gridOptions.createPreHeaderPanel) {\n        this._eventHandler.subscribe(grid.onSort, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(grid.onColumnsResized, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n        this._eventHandler.subscribe(dataView.onRowCountChanged, (e: Event, args: any) => {\n          this.createPreHeaderRowGroupingTitle();\n        });\n\n        // also not sure why at this point, but it seems that I need to call the 1st create in a delayed execution\n        // probably some kind of timing issues and delaying it until the grid is fully ready does help\n        setTimeout(() => {\n          this.createPreHeaderRowGroupingTitle();\n        }, 50);\n      }\n    }\n  }\n\n  dispose() {\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n  }\n\n  createPreHeaderRowGroupingTitle() {\n    const $preHeaderPanel = $(this._grid.getPreHeaderPanel())\n      .empty()\n      .addClass('slick-header-columns')\n      .css('left', '-1000px')\n      .width(this._grid.getHeadersWidth());\n    $preHeaderPanel.parent().addClass('slick-header');\n    const headerColumnWidthDiff = this._grid.getHeaderColumnWidthDiff();\n    let m;\n    let header;\n    let lastColumnGroup = '';\n    let widthTotal = 0;\n\n    for (let i = 0; i < this._columnDefinitions.length; i++) {\n      m = this._columnDefinitions[i];\n      if (lastColumnGroup === m.columnGroup && i > 0) {\n        widthTotal += m.width;\n        header.width(widthTotal - headerColumnWidthDiff);\n      } else {\n        widthTotal = m.width;\n        header = $(`<div class=\"ui-state-default slick-header-column\" />`)\n          .html(`<span class=\"slick-column-name\">${m.columnGroup || ''}</span>`)\n          .width(m.width - headerColumnWidthDiff)\n          .appendTo($preHeaderPanel);\n      }\n      lastColumnGroup = m.columnGroup;\n    }\n  }\n}\n",
    "import { TranslateService } from '@ngx-translate/core';\nimport { Injectable } from '@angular/core';\nimport { CellArgs, Column, GridOption, OnEventArgs } from './../models/index';\nimport { ControlAndPluginService } from './controlAndPlugin.service';\nimport { FilterService } from './filter.service';\nimport { GridStateService } from './gridState.service';\nimport { SortService } from './sort.service';\n\n// using external non-typed js libraries\ndeclare var $: any;\ndeclare var Slick: any;\n\n@Injectable()\nexport class GridService {\n  private _grid: any;\n  private _dataView: any;\n\n  constructor(private controlAndPluginService: ControlAndPluginService, private filterService: FilterService, private gridStateService: GridStateService, private sortService: SortService, private translate: TranslateService) { }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  init(grid: any, dataView: any): void {\n    this._grid = grid;\n    this._dataView = dataView;\n  }\n\n  /**\n   * From a SlickGrid Event triggered get the Column Definition and Item Data Context\n   *\n   * For example the SlickGrid onClick will return cell arguments when subscribing to it.\n   * From these cellArgs, we want to get the Column Definition and Item Data\n   * @param cell event args\n   * @return object with columnDef and dataContext\n   */\n  getColumnFromEventArguments(args: CellArgs): OnEventArgs {\n    if (!args || !args.grid || !args.grid.getColumns || !args.grid.getDataItem) {\n      throw new Error('To get the column definition and data, we need to have these arguments passed as objects (row, cell, grid)');\n    }\n\n    return {\n      row: args.row,\n      cell: args.cell,\n      columnDef: args.grid.getColumns()[args.cell],\n      dataContext: args.grid.getDataItem(args.row),\n      dataView: this._dataView,\n      grid: this._grid,\n      gridDefinition: this._gridOptions\n    };\n  }\n\n  getDataItemByRowNumber(rowNumber: number) {\n    if (!this._grid || typeof this._grid.getDataItem !== 'function') {\n      throw new Error('We could not find SlickGrid Grid object');\n    }\n    return this._grid.getDataItem(rowNumber);\n  }\n\n  /** Chain the item Metadata with our implementation of Metadata at given row index */\n  getItemRowMetadata(previousItemMetadata: any) {\n    return (rowNumber: number) => {\n      const item = this._dataView.getItem(rowNumber);\n      let meta = {\n        cssClasses: ''\n      };\n      if (typeof previousItemMetadata === 'object' && !$.isEmptyObject(previousItemMetadata)) {\n        meta = previousItemMetadata(rowNumber);\n      }\n\n      if (item && item._dirty) {\n        meta.cssClasses = (meta.cssClasses || '') + ' dirty';\n      }\n      if (item && item.rowClass) {\n        meta.cssClasses += ` ${item.rowClass}`;\n        meta.cssClasses += ` row${rowNumber}`;\n      }\n\n      return meta;\n    };\n  }\n\n  /**\n   * Highlight then fade a row for x seconds.\n   * The implementation follows this SO answer: https://stackoverflow.com/a/19985148/1212166\n   * @param rowNumber\n   * @param fadeDelay\n   */\n  highlightRow(rowNumber: number, fadeDelay: number = 1500) {\n    // create a SelectionModel if there's not one yet\n    if (!this._grid.getSelectionModel()) {\n      const rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\n      this._grid.setSelectionModel(rowSelectionPlugin);\n    }\n\n    this._grid.setSelectedRows([rowNumber]);\n    this._dataView.getItemMetadata = this.getItemRowMetadata(this._dataView.getItemMetadata);\n\n    const item = this._dataView.getItem(rowNumber);\n    if (item && item.id) {\n      item.rowClass = 'highlight';\n      this._dataView.updateItem(item.id, item);\n      const gridOptions = this._grid.getOptions() as GridOption;\n\n      // highlight the row for a user defined timeout\n      $(`#${gridOptions.gridId}`)\n          .find(`.highlight.row${rowNumber}`)\n          .first();\n\n      // delete the row's CSS that was attached for highlighting\n      setTimeout(() => {\n        if (item && item.id) {\n          delete item.rowClass;\n          const gridIdx = this._dataView.getIdxById(item.id);\n          if (gridIdx !== undefined) {\n            this._dataView.updateItem(item.id, item);\n          }\n        }\n      }, fadeDelay + 10);\n    }\n  }\n\n  /** Get the currently selected rows */\n  getSelectedRows() {\n    return this._grid.getSelectedRows();\n  }\n\n  /** Select the selected row by a row index */\n  setSelectedRow(rowIndex: number) {\n    this._grid.setSelectedRows([rowIndex]);\n  }\n\n  /** Set selected rows with provided array of row indexes */\n  setSelectedRows(rowIndexes: number[]) {\n    this._grid.setSelectedRows(rowIndexes);\n  }\n\n  /** Re-Render the Grid */\n  renderGrid() {\n    if (this._grid && typeof this._grid.invalidate === 'function') {\n      this._grid.invalidate();\n      this._grid.render();\n    }\n  }\n\n  /**\n   * Reset the grid to it's original state (clear any filters, sorting & pagination if exists) .\n   * The column definitions could be passed as argument to reset (this can be used after a Grid State reset)\n   * The reset will clear the Filters & Sort, then will reset the Columns to their original state\n   */\n  resetGrid(columnDefinitions?: Column[]) {\n    // reset columns to original states & refresh the grid\n    if (this._grid && this._dataView) {\n      const originalColumns = this.controlAndPluginService.getAllColumns();\n      // const originalColumns = columnDefinitions || this._columnDefinitions;\n      if (Array.isArray(originalColumns) && originalColumns.length > 0) {\n        // set the grid columns to it's original column definitions\n        this._grid.setColumns(originalColumns);\n        this._dataView.refresh();\n        this._grid.autosizeColumns();\n        this.gridStateService.resetColumns(columnDefinitions);\n      }\n    }\n    if (this.filterService && this.filterService.clearFilters) {\n      this.filterService.clearFilters();\n    }\n    if (this.sortService && this.sortService.clearSorting) {\n      this.sortService.clearSorting();\n    }\n  }\n\n  /**\n   * Add an item (data item) to the datagrid\n   * @param object dataItem: item object holding all properties of that row\n   */\n  addItemToDatagrid(item) {\n    if (!this._grid || !this._gridOptions || !this._dataView) {\n      throw new Error('We could not find SlickGrid Grid, DataView objects');\n    }\n    if (!this._gridOptions || (!this._gridOptions.enableCheckboxSelector && !this._gridOptions.enableRowSelection)) {\n      throw new Error('addItemToDatagrid() requires to have a valid Slickgrid Selection Model. You can overcome this issue by enabling enableCheckboxSelector or enableRowSelection to True');\n    }\n\n    const row = 0;\n    this._dataView.insertItem(row, item);\n    this._grid.scrollRowIntoView(0); // scroll to row 0\n    this.highlightRow(0, 1500);\n\n    // refresh dataview & grid\n    this._dataView.refresh();\n  }\n\n  /**\n   * Delete an existing item from the datagrid (dataView)\n   * @param object item: item object holding all properties of that row\n   */\n  deleteDataGridItem(item: any) {\n    if (!item || !item.hasOwnProperty('id')) {\n      throw new Error(`deleteDataGridItem() requires an item object which includes the \"id\" property`);\n    }\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\n    this.deleteDataGridItemById(itemId);\n  }\n\n  /**\n   * Delete an existing item from the datagrid (dataView) by it's id\n   * @param itemId: item unique id\n   */\n  deleteDataGridItemById(itemId: string | number) {\n    if (itemId === undefined) {\n      throw new Error(`Cannot delete a row without a valid \"id\"`);\n    }\n    if (this._dataView.getRowById(itemId) === undefined) {\n      throw new Error(`Could not find the item in the grid by it's associated \"id\"`);\n    }\n\n    // delete the item from the dataView\n    this._dataView.deleteItem(itemId);\n    this._dataView.refresh();\n  }\n\n  /**\n   * Update an existing item with new properties inside the datagrid\n   * @param object item: item object holding all properties of that row\n   */\n  updateDataGridItem(item: any) {\n    const itemId = (!item || !item.hasOwnProperty('id')) ? undefined : item.id;\n\n    if (itemId === undefined) {\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\n    }\n\n    this.updateDataGridItemById(itemId, item);\n  }\n\n  /**\n   * Update an existing item in the datagrid by it's id and new properties\n   * @param itemId: item unique id\n   * @param object item: item object holding all properties of that row\n   */\n  updateDataGridItemById(itemId: number | string, item: any) {\n    if (itemId === undefined) {\n      throw new Error(`Cannot update a row without a valid \"id\"`);\n    }\n    const row = this._dataView.getRowById(itemId);\n\n    if (!item || !row) {\n      throw new Error(`Could not find the item in the grid or it's associated \"id\"`);\n    }\n\n    const gridIdx = this._dataView.getIdxById(itemId);\n    if (gridIdx !== undefined) {\n      // Update the item itself inside the dataView\n      this._dataView.updateItem(itemId, item);\n\n      // highlight the row we just updated\n      this.highlightRow(row, 1500);\n\n      // refresh dataview & grid\n      this._dataView.refresh();\n    }\n  }\n}\n",
    "import {\n  Column,\n  CurrentColumn,\n  CurrentFilter,\n  CurrentPagination,\n  CurrentSorter,\n  GridOption,\n  GridState,\n  GridStateChange,\n  GridStateType\n} from './../models/index';\nimport { ControlAndPluginService, FilterService, SortService } from './../services/index';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\n\n// using external non-typed js libraries\ndeclare var $: any;\ndeclare var Slick: any;\n\nexport class GridStateService {\n  private _eventHandler = new Slick.EventHandler();\n  private _columns: Column[] = [];\n  private _currentColumns: CurrentColumn[] = [];\n  private _grid: any;\n  private controlAndPluginService: ControlAndPluginService;\n  private filterService: FilterService;\n  private sortService: SortService;\n  private subscriptions: Subscription[] = [];\n  onGridStateChanged = new Subject<GridStateChange>();\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Initialize the Export Service\n   * @param grid\n   * @param filterService\n   * @param sortService\n   * @param dataView\n   */\n  init(grid: any, controlAndPluginService: ControlAndPluginService, filterService: FilterService, sortService: SortService): void {\n    this._grid = grid;\n    this.controlAndPluginService = controlAndPluginService;\n    this.filterService = filterService;\n    this.sortService = sortService;\n\n    this.subscribeToAllGridChanges(grid);\n  }\n\n  /** Dispose of all the SlickGrid & Aurelia subscriptions */\n  dispose() {\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n\n    // also unsubscribe all Aurelia Subscriptions\n    this.subscriptions.forEach((subscription: Subscription) => {\n      if (subscription && subscription.unsubscribe) {\n        subscription.unsubscribe();\n      }\n    });\n    this.subscriptions = [];\n  }\n\n  /**\n   * Get the current grid state (filters/sorters/pagination)\n   * @return grid state\n   */\n  getCurrentGridState(): GridState {\n    const gridState: GridState = {\n      columns: this.getCurrentColumns(),\n      filters: this.getCurrentFilters(),\n      sorters: this.getCurrentSorters()\n    };\n\n    const currentPagination = this.getCurrentPagination();\n    if (currentPagination) {\n      gridState.pagination = currentPagination;\n    }\n    return gridState;\n  }\n\n  /**\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\n   * @return current columns\n   */\n  getColumns(): Column[] {\n    return this._columns || this._grid.getColumns();\n  }\n\n  /**\n   * From an array of Grid Column Definitions, get the associated Current Columns\n   * @param gridColumns\n   */\n  getAssociatedCurrentColumns(gridColumns: Column[]): CurrentColumn[] {\n    const currentColumns: CurrentColumn[] = [];\n\n    if (gridColumns && Array.isArray(gridColumns)) {\n      gridColumns.forEach((column: Column, index: number) => {\n        if (column && column.id) {\n          currentColumns.push({\n            columnId: column.id as string,\n            cssClass: column.cssClass || '',\n            headerCssClass: column.headerCssClass || '',\n            width: column.width || 0\n          });\n        }\n      });\n    }\n    this._currentColumns = currentColumns;\n    return currentColumns;\n  }\n\n  /**\n   * From an array of Current Columns, get the associated Grid Column Definitions\n   * @param grid\n   * @param currentColumns\n   */\n  getAssociatedGridColumns(grid: any, currentColumns: CurrentColumn[]): Column[] {\n    const columns: Column[] = [];\n    const gridColumns: Column[] = grid.getColumns();\n\n    if (currentColumns && Array.isArray(currentColumns)) {\n      currentColumns.forEach((currentColumn: CurrentColumn, index: number) => {\n        const gridColumn: Column = gridColumns.find((c: Column) => c.id === currentColumn.columnId);\n        if (gridColumn && gridColumn.id) {\n          columns.push({\n            ...gridColumn,\n            cssClass: currentColumn.cssClass,\n            headerCssClass: currentColumn.headerCssClass,\n            width: currentColumn.width\n          });\n        }\n      });\n    }\n    this._columns = columns;\n    return columns;\n  }\n\n  /**\n   * Get the Columns (and their state: visibility/position) that are currently applied in the grid\n   * @return current columns\n   */\n  getCurrentColumns(): CurrentColumn[] {\n    let currentColumns: CurrentColumn[] = [];\n    if (this._currentColumns && Array.isArray(this._currentColumns) && this._currentColumns.length > 0) {\n      currentColumns = this._currentColumns;\n    } else {\n      currentColumns = this.getAssociatedCurrentColumns(this._grid.getColumns());\n    }\n\n    return currentColumns;\n  }\n\n  /**\n   * Get the Filters (and their state, columnId, searchTerm(s)) that are currently applied in the grid\n   * @return current filters\n   */\n  getCurrentFilters(): CurrentFilter[] | null {\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentFilters) {\n        return backendService.getCurrentFilters() as CurrentFilter[];\n      }\n    } else if (this.filterService && this.filterService.getCurrentLocalFilters) {\n      return this.filterService.getCurrentLocalFilters();\n    }\n    return null;\n  }\n\n  /**\n   * Get current Pagination (and it's state, pageNumber, pageSize) that are currently applied in the grid\n   * @return current pagination state\n   */\n  getCurrentPagination(): CurrentPagination | null {\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentPagination) {\n        return backendService.getCurrentPagination();\n      }\n    } else {\n      // TODO implement this whenever local pagination gets implemented\n    }\n    return null;\n  }\n\n  /**\n   * Get the current Sorters (and their state, columnId, direction) that are currently applied in the grid\n   * @return current sorters\n   */\n  getCurrentSorters(): CurrentSorter[] | null {\n    if (this._gridOptions && this._gridOptions.backendServiceApi) {\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentSorters) {\n        return backendService.getCurrentSorters() as CurrentSorter[];\n      }\n    } else if (this.sortService && this.sortService.getCurrentLocalSorters) {\n      return this.sortService.getCurrentLocalSorters();\n    }\n    return null;\n  }\n\n  /**\n   * Hook a SlickGrid Extension Event to a Grid State change event\n   * @param extension name\n   * @param grid\n   */\n  hookExtensionEventToGridStateChange(extensionName: string, eventName: string) {\n    const extension = this.controlAndPluginService && this.controlAndPluginService.getExtensionByName(extensionName);\n\n    if (extension && extension.service && extension.service[eventName] && extension.service[eventName].subscribe) {\n      this._eventHandler.subscribe(extension.service[eventName], (e: Event, args: any) => {\n        const columns: Column[] = args && args.columns;\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\n      });\n    }\n  }\n\n  /**\n   * Hook a Grid Event to a Grid State change event\n   * @param event name\n   * @param grid\n   */\n  hookSlickGridEventToGridStateChange(eventName: string, grid: any) {\n    if (grid && grid[eventName] && grid[eventName].subscribe) {\n      this._eventHandler.subscribe(grid[eventName], (e: Event, args: any) => {\n        const columns: Column[] = grid.getColumns();\n        const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\n        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\n      });\n    }\n  }\n\n  resetColumns(columnDefinitions?: Column[]) {\n    const columns: Column[] = columnDefinitions || this._columns;\n    const currentColumns: CurrentColumn[] = this.getAssociatedCurrentColumns(columns);\n    this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });\n  }\n\n  /**\n   * Subscribe to all necessary SlickGrid or Service Events that deals with a Grid change,\n   * when triggered, we will publish a Grid State Event with current Grid State\n   */\n  subscribeToAllGridChanges(grid: any) {\n    // Subscribe to Event Emitter of Filter changed\n    this.subscriptions.push(\n      this.filterService.onFilterChanged.subscribe((currentFilters: CurrentFilter[]) => {\n        this.onGridStateChanged.next({ change: { newValues: currentFilters, type: GridStateType.filter }, gridState: this.getCurrentGridState() });\n      })\n    );\n    // Subscribe to Event Emitter of Filter cleared\n      this.subscriptions.push(\n        this.filterService.onFilterCleared.subscribe(() => {\n          this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.filter }, gridState: this.getCurrentGridState() });\n        })\n      );\n\n    // Subscribe to Event Emitter of Sort changed\n    this.subscriptions.push(\n      this.sortService.onSortChanged.subscribe((currentSorters: CurrentSorter[]) => {\n        this.onGridStateChanged.next({ change: { newValues: currentSorters, type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\n      })\n    );\n\n    // Subscribe to Event Emitter of Sort cleared\n    this.subscriptions.push(\n      this.sortService.onSortCleared.subscribe(() => {\n        this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.sorter }, gridState: this.getCurrentGridState() });\n      })\n    );\n\n    // Subscribe to ColumnPicker and/or GridMenu for show/hide Columns visibility changes\n    this.hookExtensionEventToGridStateChange('ColumnPicker', 'onColumnsChanged');\n    this.hookExtensionEventToGridStateChange('GridMenu', 'onColumnsChanged');\n\n    // subscribe to Column Resize & Reordering\n    this.hookSlickGridEventToGridStateChange('onColumnsReordered', grid);\n    this.hookSlickGridEventToGridStateChange('onColumnsResized', grid);\n  }\n}\n",
    "import { OnEventArgs, CellArgs, GridOption } from './../models/index';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class GridEventService {\n  private _eventHandler: any = new Slick.EventHandler();\n\n  /* OnCellChange Event */\n  attachOnCellChange(grid: any, dataView: any) {\n    // subscribe to this Slickgrid event of onCellChange\n    this._eventHandler.subscribe(grid.onCellChange, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellChange property (a callback function), then run it\n      if (typeof column.onCellChange === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onCellChange\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellChanges.... function\n        column.onCellChange(e, returnedArgs);\n      }\n    });\n  }\n  /* OnClick Event */\n  attachOnClick(grid: any, dataView: any) {\n    this._eventHandler.subscribe(grid.onClick, (e: Event, args: CellArgs) => {\n      if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {\n        return;\n      }\n      const column = grid.getColumns()[args.cell];\n\n      // if the column definition has a onCellClick property (a callback function), then run it\n      if (typeof column.onCellClick === 'function') {\n        // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onClick\n        const returnedArgs: OnEventArgs = {\n          row: args.row,\n          cell: args.cell,\n          dataView,\n          gridDefinition: grid.getOptions(),\n          grid,\n          columnDef: column,\n          dataContext: grid.getDataItem(args.row)\n        };\n\n        // finally call up the Slick.column.onCellClick.... function\n        column.onCellClick(e, returnedArgs);\n      }\n    });\n  }\n\n  dispose() {\n    this._eventHandler.unsubscribeAll();\n  }\n}\n",
    "import './global-utilities';\r\nimport { parseUtcDate } from './utilities';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  BackendService,\r\n  CaseType,\r\n  Column,\r\n  ColumnFilter,\r\n  ColumnFilters,\r\n  ColumnSort,\r\n  CurrentFilter,\r\n  CurrentPagination,\r\n  CurrentSorter,\r\n  FilterChangedArgs,\r\n  FieldType,\r\n  GridOption,\r\n  OdataOption,\r\n  Pagination,\r\n  PaginationChangedArgs,\r\n  SearchTerm,\r\n  SortChangedArgs,\r\n  SortDirection,\r\n  SortDirectionString\r\n} from './../models/index';\r\nimport { OdataService } from './odata.service';\r\n\r\nlet timer: any;\r\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\r\nconst DEFAULT_ITEMS_PER_PAGE = 25;\r\nconst DEFAULT_PAGE_SIZE = 20;\r\n\r\n@Injectable()\r\nexport class GridOdataService implements BackendService {\r\n  private _currentFilters: CurrentFilter[];\r\n  private _currentPagination: CurrentPagination;\r\n  private _currentSorters: CurrentSorter[];\r\n  private _columnDefinitions: Column[];\r\n  private _grid: any;\r\n  odataService: OdataService;\r\n  options: OdataOption;\r\n  pagination: Pagination | undefined;\r\n  defaultOptions: OdataOption = {\r\n    top: DEFAULT_ITEMS_PER_PAGE,\r\n    orderBy: '',\r\n    caseType: CaseType.pascalCase\r\n  };\r\n\r\n  constructor() {\r\n    this.odataService = new OdataService();\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  buildQuery(): string {\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  init(options: OdataOption, pagination?: Pagination, grid?: any): void {\r\n    this._grid = grid;\r\n    const mergedOptions = { ...this.defaultOptions, ...options };\r\n    if (pagination && pagination.pageSize) {\r\n      mergedOptions.top = pagination.pageSize;\r\n    }\r\n    this.odataService.options = { ...mergedOptions, top: mergedOptions.top || this.defaultOptions.top };\r\n    this.options = this.odataService.options;\r\n    this.pagination = pagination;\r\n\r\n    // save current pagination as Page 1 and page size as \"top\"\r\n    this._currentPagination = {\r\n      pageNumber: 1,\r\n      pageSize: this.odataService.options.top || this.defaultOptions.top\r\n    };\r\n\r\n    if (grid && grid.getColumns && grid.getOptions) {\r\n      this._columnDefinitions = grid.getColumns() || options.columnDefinitions;\r\n      this._columnDefinitions = this._columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\r\n    }\r\n  }\r\n\r\n  updateOptions(serviceOptions?: OdataOption) {\r\n    this.options = { ...this.options, ...serviceOptions };\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string): void {\r\n    this.odataService.removeColumnFilter(fieldName);\r\n  }\r\n\r\n  /** Get the Filters that are currently used by the grid */\r\n  getCurrentFilters(): CurrentFilter[] {\r\n    return this._currentFilters;\r\n  }\r\n\r\n  /** Get the Pagination that is currently used by the grid */\r\n  getCurrentPagination(): CurrentPagination {\r\n    return this._currentPagination;\r\n  }\r\n\r\n  /** Get the Sorters that are currently used by the grid */\r\n  getCurrentSorters(): CurrentSorter[] {\r\n    return this._currentSorters;\r\n  }\r\n\r\n  /*\r\n   * Reset the pagination options\r\n   */\r\n  resetPaginationOptions() {\r\n    this.odataService.updateOptions({\r\n      skip: 0\r\n    });\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: string, terms?: any[]) {\r\n    this.odataService.saveColumnFilter(fieldName, value, terms);\r\n  }\r\n\r\n  /*\r\n   * FILTERING\r\n   */\r\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\r\n    const serviceOptions: GridOption = args.grid.getOptions();\r\n    const backendApi = serviceOptions.backendServiceApi;\r\n\r\n    if (backendApi === undefined) {\r\n      throw new Error('Something went wrong in the GridOdataService, \"backendServiceApi\" is not initialized');\r\n    }\r\n\r\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\r\n    let debounceTypingDelay = 0;\r\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\r\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\r\n    }\r\n\r\n    const promise = new Promise<string>((resolve, reject) => {\r\n      // reset Pagination, then build the OData query which we will use in the WebAPI callback\r\n      // wait a minimum user typing inactivity before processing any query\r\n      clearTimeout(timer);\r\n      timer = setTimeout(() => {\r\n        // loop through all columns to inspect filters & set the query\r\n        this.updateFilters(args.columnFilters);\r\n\r\n        this.resetPaginationOptions();\r\n        resolve(this.odataService.buildQuery());\r\n      }, debounceTypingDelay);\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  /*\r\n   * PAGINATION\r\n   */\r\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\r\n    const pageSize = +(args.pageSize || DEFAULT_PAGE_SIZE);\r\n    this.updatePagination(args.newPage, pageSize);\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  /*\r\n   * SORTING\r\n   */\r\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\r\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\r\n\r\n    // loop through all columns to inspect sorters & set the query\r\n    this.updateSorters(sortColumns);\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect filters & update backend service filteringOptions\r\n   * @param columnFilters\r\n   */\r\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset?: boolean) {\r\n    this._currentFilters = this.castFilterToColumnFilter(columnFilters);\r\n    let searchBy = '';\r\n    const searchByArray: string[] = [];\r\n\r\n    // loop through all columns to inspect filters\r\n    for (const columnId in columnFilters) {\r\n      if (columnFilters.hasOwnProperty(columnId)) {\r\n        const columnFilter = columnFilters[columnId];\r\n\r\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\r\n        let columnDef: Column | undefined;\r\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\r\n          columnDef = this._columnDefinitions.find((column: Column) => {\r\n            return column.id === columnFilter.columnId;\r\n          });\r\n        } else {\r\n          columnDef = columnFilter.columnDef;\r\n        }\r\n        if (!columnDef) {\r\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\r\n        }\r\n\r\n        let fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\r\n        const fieldType = columnDef.type || 'string';\r\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\r\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\r\n        if (typeof fieldSearchValue === 'undefined') {\r\n          fieldSearchValue = '';\r\n        }\r\n\r\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\r\n          throw new Error(`ODdata filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {type: FilterType.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\r\n        }\r\n\r\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\r\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\r\n        const operator = columnFilter.operator || ((matches) ? matches[1] : '');\r\n        let searchValue = (!!matches) ? matches[2] : '';\r\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\r\n        const bypassOdataQuery = columnFilter.bypassBackendQuery || false;\r\n\r\n        // no need to query if search value is empty\r\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\r\n          this.removeColumnFilter(fieldName);\r\n          continue;\r\n        }\r\n\r\n        // escaping the search value\r\n        searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\r\n        searchValue = encodeURIComponent(searchValue); // encode URI of the final search value\r\n\r\n        // extra query arguments\r\n        if (bypassOdataQuery) {\r\n          // push to our temp array and also trim white spaces\r\n          if (fieldName) {\r\n            this.saveColumnFilter(fieldName, fieldSearchValue, searchTerms);\r\n          }\r\n        } else {\r\n          searchBy = '';\r\n\r\n          // titleCase the fieldName so that it matches the WebApi names\r\n          if (this.odataService.options.caseType === CaseType.pascalCase) {\r\n            fieldName = String.titleCase(fieldName || '');\r\n          }\r\n\r\n          // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n          if (searchTerms && searchTerms.length > 1) {\r\n            const tmpSearchTerms = [];\r\n\r\n            if (operator === 'IN') {\r\n              // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n              for (let j = 0, lnj = searchTerms.length; j < lnj; j++) {\r\n                tmpSearchTerms.push(`${fieldName} eq '${searchTerms[j]}'`);\r\n              }\r\n              searchBy = tmpSearchTerms.join(' or ');\r\n              searchBy = `(${searchBy})`;\r\n            } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n              // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n              for (let k = 0, lnk = searchTerms.length; k < lnk; k++) {\r\n                tmpSearchTerms.push(`${fieldName} ne '${searchTerms[k]}'`);\r\n              }\r\n              searchBy = tmpSearchTerms.join(' and ');\r\n              searchBy = `(${searchBy})`;\r\n            }\r\n          } else if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar !== '') {\r\n            // first/last character is a '*' will be a startsWith or endsWith\r\n            searchBy = (operator === '*' || operator === '*z')\r\n              ? `endswith(${fieldName}, '${searchValue}')`\r\n              : `startswith(${fieldName}, '${searchValue}')`;\r\n          } else if (fieldType === FieldType.date) {\r\n            // date field needs to be UTC and within DateTime function\r\n            const dateFormatted = parseUtcDate(searchValue, true);\r\n            if (dateFormatted) {\r\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} DateTime'${dateFormatted}'`;\r\n            }\r\n          } else if (fieldType === FieldType.string) {\r\n            // string field needs to be in single quotes\r\n            if (operator === '') {\r\n              searchBy = `substringof('${searchValue}', ${fieldName})`;\r\n            } else {\r\n              // searchBy = `substringof('${searchValue}', ${fieldNameCased}) ${this.mapOdataOperator(operator)} true`;\r\n              searchBy = `${fieldName} ${this.mapOdataOperator(operator)} '${searchValue}'`;\r\n            }\r\n          } else {\r\n            // any other field type (or undefined type)\r\n            searchValue = fieldType === FieldType.number ? searchValue : `'${searchValue}'`;\r\n            searchBy = `${fieldName} ${this.mapOdataOperator(operator)} ${searchValue}`;\r\n          }\r\n\r\n          // push to our temp array and also trim white spaces\r\n          if (searchBy !== '') {\r\n            searchByArray.push(String.trim(searchBy));\r\n            this.saveColumnFilter(fieldName || '', fieldSearchValue, searchTerms);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // update the service options with filters for the buildQuery() to work later\r\n    this.odataService.updateOptions({\r\n      filter: (searchByArray.length > 0) ? searchByArray.join(' and ') : '',\r\n      skip: undefined\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the pagination component with it's new page number and size\r\n   * @param newPage\r\n   * @param pageSize\r\n   */\r\n  updatePagination(newPage: number, pageSize: number) {\r\n    this._currentPagination = {\r\n      pageNumber: newPage,\r\n      pageSize\r\n    };\r\n\r\n    this.odataService.updateOptions({\r\n      top: pageSize,\r\n      skip: (newPage - 1) * pageSize\r\n    });\r\n  }\r\n\r\n  /**\r\n   * loop through all columns to inspect sorters & update backend service orderBy\r\n   * @param columnFilters\r\n   */\r\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\r\n    let sortByArray: any[] = [];\r\n    const sorterArray: CurrentSorter[] = [];\r\n\r\n    if (!sortColumns && presetSorters) {\r\n      // make the presets the current sorters, also make sure that all direction are in lowercase for OData\r\n      sortByArray = presetSorters;\r\n      sortByArray.forEach((sorter) => sorter.direction = sorter.direction.toLowerCase() as SortDirectionString);\r\n\r\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\r\n      const tmpSorterArray = sortByArray.map((sorter) => {\r\n        sorterArray.push({\r\n          columnId: sorter.columnId + '',\r\n          direction: sorter.direction\r\n        });\r\n        return {\r\n          columnId: sorter.columnId,\r\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\r\n        };\r\n      });\r\n      this._grid.setSortColumns(tmpSorterArray);\r\n    } else if (sortColumns && !presetSorters) {\r\n      // build the SortBy string, it could be multisort, example: customerNo asc, purchaserName desc\r\n      if (sortColumns && sortColumns.length === 0) {\r\n        sortByArray = new Array(this.defaultOptions.orderBy); // when empty, use the default sort\r\n      } else {\r\n        if (sortColumns) {\r\n          for (const column of sortColumns) {\r\n            if (column.sortCol) {\r\n              let fieldName = (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '';\r\n              let columnFieldName = (column.sortCol.field || column.sortCol.id) + '';\r\n              if (this.odataService.options.caseType === CaseType.pascalCase) {\r\n                fieldName = String.titleCase(fieldName);\r\n                columnFieldName = String.titleCase(columnFieldName);\r\n              }\r\n\r\n              sorterArray.push({\r\n                columnId: columnFieldName,\r\n                direction: column.sortAsc ? 'asc' : 'desc'\r\n              });\r\n            }\r\n          }\r\n          sortByArray = sorterArray;\r\n        }\r\n      }\r\n    }\r\n\r\n    // transform the sortby array into a CSV string for OData\r\n    sortByArray = sortByArray as CurrentSorter[];\r\n    const csvString = sortByArray.map((sorter) => `${sorter.columnId} ${sorter.direction.toLowerCase()}`).join(',');\r\n    this.odataService.updateOptions({\r\n      orderBy: (this.odataService.options.caseType === CaseType.pascalCase) ? String.titleCase(csvString) : csvString\r\n    });\r\n\r\n    // keep current Sorters and update the service options with the new sorting\r\n    this._currentSorters = sortByArray as CurrentSorter[];\r\n\r\n    // build the OData query which we will use in the WebAPI callback\r\n    return this.odataService.buildQuery();\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // -------------------\r\n  /**\r\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\r\n   * @param columnFilters\r\n   */\r\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\r\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\r\n    const filtersArray: ColumnFilter[] = ((typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters) as CurrentFilter[];\r\n\r\n    return filtersArray.map((filter) => {\r\n      const columnDef = filter.columnDef;\r\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\r\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\r\n      if (filter.operator) {\r\n        tmpFilter.operator = filter.operator;\r\n      }\r\n      if (Array.isArray(filter.searchTerms)) {\r\n        tmpFilter.searchTerms = filter.searchTerms;\r\n      }\r\n      return tmpFilter;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Mapper for mathematical operators (ex.: <= is \"le\", > is \"gt\")\r\n   * @param string operator\r\n   * @returns string map\r\n   */\r\n  private mapOdataOperator(operator: string) {\r\n    let map = '';\r\n    switch (operator) {\r\n      case '<':\r\n        map = 'lt';\r\n        break;\r\n      case '<=':\r\n        map = 'le';\r\n        break;\r\n      case '>':\r\n        map = 'gt';\r\n        break;\r\n      case '>=':\r\n        map = 'ge';\r\n        break;\r\n      case '<>':\r\n      case '!=':\r\n        map = 'ne';\r\n        break;\r\n      case '=':\r\n      case '==':\r\n      default:\r\n        map = 'eq';\r\n        break;\r\n    }\r\n\r\n    return map;\r\n  }\r\n}\r\n",
    "import './global-utilities';\r\nimport { CaseType, OdataOption } from './../models/index';\r\n\r\nexport class OdataService {\r\n  _columnFilters: any;\r\n  _defaultSortBy: string;\r\n  _odataOptions: OdataOption;\r\n\r\n  constructor() {\r\n    this._odataOptions = {\r\n      filterQueue: [],\r\n      orderBy: ''\r\n    };\r\n    this._defaultSortBy = '';\r\n    this._columnFilters = {};\r\n  }\r\n\r\n  /*\r\n    * Build the OData query string from all the options provided\r\n    * @return string OData query\r\n    */\r\n  buildQuery(): string {\r\n    this._odataOptions.filterQueue = [];\r\n    const queryTmpArray = [];\r\n\r\n    if (this._odataOptions.top) {\r\n      queryTmpArray.push(`$top=${this._odataOptions.top}`);\r\n    }\r\n    if (this._odataOptions.skip) {\r\n      queryTmpArray.push(`$skip=${this._odataOptions.skip}`);\r\n    }\r\n    if (this._odataOptions.orderBy) {\r\n      let argument = '';\r\n      if (Array.isArray(this._odataOptions.orderBy)) {\r\n        argument = this._odataOptions.orderBy.join(','); // csv, that will form a query example like: $orderby=RoleName asc, Id desc\r\n      } else {\r\n        argument = this._odataOptions.orderBy;\r\n      }\r\n      queryTmpArray.push(`$orderby=${argument}`);\r\n    }\r\n    if (this._odataOptions.filterBy || this._odataOptions.filter) {\r\n      if (this._odataOptions.filter) {\r\n        this._odataOptions.filterQueue = [];\r\n        let filterStr = this._odataOptions.filter;\r\n        if (Array.isArray(this._odataOptions.filter)) {\r\n          filterStr = this._odataOptions.filter.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n        }\r\n        this._odataOptions.filterQueue.push(`(${filterStr})`);\r\n      }\r\n      // filterBy are passed manually by the user, however we will only add it if the column wasn't yet filtered\r\n      if (!!this._odataOptions.filterBy && !!this._odataOptions.filterBy.fieldName && !this._columnFilters[this._odataOptions.filterBy.fieldName.toLowerCase()]) {\r\n        if (this._odataOptions.filterBy.searchTerm !== '') {\r\n          this.saveColumnFilter(this._odataOptions.filterBy.fieldName.toLowerCase(), this._odataOptions.filterBy.searchTerm, this._odataOptions.filterBy.searchTerms);\r\n          this.updateFilterFromListTerms(this._odataOptions.filterBy);\r\n        }\r\n      }\r\n    }\r\n    if (this._odataOptions.filterQueue.length > 0) {\r\n      const query = this._odataOptions.filterQueue.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\r\n      this._odataOptions.filter = query; // overwrite with\r\n      queryTmpArray.push(`$filter=${query}`);\r\n    }\r\n\r\n    // join all the odata functions by a '&'\r\n    return queryTmpArray.join('&');\r\n  }\r\n\r\n  getFilterByColumn(columnName: string): string {\r\n    return (!!this._columnFilters[columnName]) ? this._columnFilters[columnName] : null;\r\n  }\r\n\r\n  getFilterCount(): number {\r\n    return (this._odataOptions.filterQueue) ? this._odataOptions.filterQueue.length : 0;\r\n  }\r\n\r\n  get columnFilters(): any[] {\r\n    return this._columnFilters;\r\n  }\r\n\r\n  get options(): OdataOption {\r\n    return this._odataOptions;\r\n  }\r\n\r\n  set options(options: OdataOption) {\r\n    this._odataOptions = options;\r\n  }\r\n\r\n  removeColumnFilter(fieldName: string) {\r\n    delete this._columnFilters[fieldName];\r\n  }\r\n\r\n  saveColumnFilter(fieldName: string, value: any, searchTerms?: any[]) {\r\n    this._columnFilters[fieldName] = {\r\n      search: searchTerms,\r\n      value\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update the filter by a list of terms usually passed manually by the user as default filters\r\n   * @param filterOptions\r\n   * @returns\r\n   */\r\n  updateFilterFromListTerms(filterOptions: any) {\r\n    // build the filter query\r\n    if (Array.isArray(filterOptions)) {\r\n      filterOptions.forEach((filterOptionObject) => {\r\n        this.updateFilterFromTerm(filterOptionObject);\r\n      });\r\n    } else {\r\n      this.updateFilterFromTerm(filterOptions);\r\n    }\r\n  }\r\n\r\n  updateFilterFromTerm(filterOptions: any) {\r\n    let searchBy = '';\r\n    const tmpSearchByArray = [];\r\n    const fieldName = filterOptions.fieldName;\r\n    const fieldSearchTerms = filterOptions.searchTerms;\r\n    const operator = filterOptions.operator;\r\n\r\n    // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\r\n    if (!!fieldSearchTerms && fieldSearchTerms.length > 0) {\r\n      const tmpSearchTerms = [];\r\n\r\n      if (operator === 'IN') {\r\n        // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\r\n        for (let j = 0, lnj = fieldSearchTerms.length; j < lnj; j++) {\r\n          tmpSearchTerms.push(`${fieldName} eq '${fieldSearchTerms[j]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' or ');\r\n        searchBy = `$(${searchBy})`;\r\n      } else if (operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN') {\r\n        // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\r\n        for (let k = 0, lnk = fieldSearchTerms.length; k < lnk; k++) {\r\n          tmpSearchTerms.push(`${fieldName} ne '${fieldSearchTerms[k]}'`);\r\n        }\r\n        searchBy = tmpSearchTerms.join(' and ');\r\n        searchBy = `$(${searchBy})`;\r\n      }\r\n    }\r\n\r\n    // push to our temp array and also trim white spaces\r\n    tmpSearchByArray.push(String.trim(searchBy));\r\n\r\n    // add to the filter queue only if it doesn't exist in the queue\r\n    const filter = (tmpSearchByArray.length > 0) ? tmpSearchByArray.join(' and ') : '';\r\n    if (this._odataOptions.filterQueue && this._odataOptions.filterQueue.indexOf(filter) === -1) {\r\n      this._odataOptions.filterQueue.push(filter);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change any OData options that will be used to build the query\r\n   * @param object options\r\n   */\r\n  updateOptions(options: OdataOption) {\r\n    for (const property of Object.keys(options)) {\r\n      if (options.hasOwnProperty(property)) {\r\n        this._odataOptions[property] = options[property]; // replace of the property\r\n      }\r\n\r\n      // we need to keep the defaultSortBy for references whenever the user removes his Sorting\r\n      // then we would revert to the defaultSortBy and the only way is to keep a hard copy here\r\n      if (property === 'orderBy' || property === 'sortBy') {\r\n        let sortBy = options[property];\r\n\r\n        // make sure first char of each orderBy field is capitalize\r\n        if (this._odataOptions.caseType === CaseType.pascalCase) {\r\n          if (Array.isArray(sortBy)) {\r\n            sortBy.forEach((field, index, inputArray) => {\r\n              inputArray[index] = String.titleCase(field);\r\n            });\r\n          } else {\r\n            sortBy = String.titleCase(options[property]);\r\n          }\r\n        }\r\n        this._odataOptions.orderBy = sortBy;\r\n        this._defaultSortBy = sortBy;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
    "declare interface StringConstructor {\r\n  allTitleCase(inputStr: string): string;\r\n  format(inputStr: string, args: any): string;\r\n  padZero(length: number): string;\r\n  trim(inputStr: string): string;\r\n  titleCase(inputStr: string): string;\r\n}\r\n\r\n\r\nString.format = function(format: string, args): string {\r\n  // const args = (Array.isArray(arguments[1])) ? arguments[1] : Array.prototype.slice.call(arguments, 1);\r\n\r\n  return format.replace(/{(\\d+)}/g, function (match, number) {\r\n    return (typeof args[number] !== 'undefined') ? args[number] : match;\r\n  });\r\n};\r\n\r\nString.padZero = function (this: string, length: number) {\r\n  let s = this;\r\n  while (s.length < length) {\r\n    s = '0' + s;\r\n  }\r\n  return s;\r\n};\r\n\r\n/**\r\n * Trim any extra white space from the string\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.trim = function(inputStr: string): string {\r\n  return inputStr ? inputStr.replace(/\\s+/g, ' ') : inputStr;\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n */\r\nString.allTitleCase = function(inputStr: string): string {\r\n  return inputStr.replace(/\\w\\S*/g, function(outputStr) {\r\n     return outputStr.charAt(0).toUpperCase() + outputStr.substr(1).toLowerCase();\r\n  });\r\n};\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string inputStr\r\n * @returns string outputStr\r\n*/\r\nString.titleCase = function(inputStr: string): string {\r\n  return inputStr.charAt(0).toUpperCase() + inputStr.slice(1);\r\n};\r\n",
    "import { Injectable } from '@angular/core';\nimport { mapOperatorType, mapOperatorByFilterType, mapOperatorByFieldType } from './utilities';\nimport {\n  BackendService,\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  ColumnSort,\n  CurrentFilter,\n  CurrentPagination,\n  CurrentSorter,\n  FieldType,\n  FilterChangedArgs,\n  GraphqlCursorPaginationOption,\n  GraphqlDatasetFilter,\n  GraphqlFilteringOption,\n  GraphqlPaginationOption,\n  GraphqlServiceOption,\n  GraphqlSortingOption,\n  GridOption,\n  Pagination,\n  PaginationChangedArgs,\n  SortChangedArgs,\n  SortDirection,\n  SortDirectionString\n} from './../models/index';\nimport QueryBuilder from './graphqlQueryBuilder';\n\n// timer for keeping track of user typing waits\nlet timer: any;\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\nconst DEFAULT_ITEMS_PER_PAGE = 25;\nconst DEFAULT_PAGE_SIZE = 20;\n\nexport class GraphqlService implements BackendService {\n  private _currentFilters: ColumnFilters | CurrentFilter[];\n  private _currentPagination: CurrentPagination;\n  private _currentSorters: CurrentSorter[];\n  private _columnDefinitions: Column[];\n  private _grid: any;\n  options: GraphqlServiceOption;\n  pagination: Pagination | undefined;\n  defaultOrderBy: GraphqlSortingOption = { field: 'id', direction: SortDirection.ASC };\n  defaultPaginationOptions: GraphqlPaginationOption | GraphqlCursorPaginationOption = {\n    first: DEFAULT_ITEMS_PER_PAGE,\n    offset: 0\n  };\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /**\n   * Build the GraphQL query, since the service include/exclude cursor, the output query will be different.\n   * @param serviceOptions GraphqlServiceOption\n   */\n  buildQuery() {\n    if (!this.options || !this.options.datasetName || (!this._columnDefinitions && !this.options.columnDefinitions)) {\n      throw new Error('GraphQL Service requires \"datasetName\" & \"columnDefinitions\" properties for it to work');\n    }\n\n    // get the column definitions and exclude some if they were tagged as excluded\n    let columnDefinitions = this._columnDefinitions || this.options.columnDefinitions;\n    columnDefinitions = columnDefinitions.filter((column: Column) => !column.excludeFromQuery);\n\n    const queryQb = new QueryBuilder('query');\n    const datasetQb = new QueryBuilder(this.options.datasetName);\n    const dataQb = (this.options.isWithCursor) ? new QueryBuilder('edges') : new QueryBuilder('nodes');\n\n    // get all the columnds Ids for the filters to work\n    let columnIds: string[] = [];\n    if (columnDefinitions && Array.isArray(columnDefinitions)) {\n      for (const column of columnDefinitions) {\n        columnIds.push(column.field);\n\n        // if extra \"fields\" are passed, also push them to columnIds\n        if (column.fields) {\n          columnIds.push(...column.fields);\n        }\n      }\n      // columnIds = columnDefinitions.map((column) => column.field);\n    } else {\n      columnIds = this.options.columnIds || [];\n    }\n\n    // Slickgrid also requires the \"id\" field to be part of DataView\n    // add it to the GraphQL query if it wasn't already part of the list\n    if (columnIds.indexOf('id') === -1) {\n      columnIds.unshift('id');\n    }\n\n    const filters = this.buildFilterQuery(columnIds);\n\n    if (this.options.isWithCursor) {\n      // ...pageInfo { hasNextPage, endCursor }, edges { cursor, node { _filters_ } }\n      const pageInfoQb = new QueryBuilder('pageInfo');\n      pageInfoQb.find('hasNextPage', 'endCursor');\n      dataQb.find(['cursor', { node: filters }]);\n      datasetQb.find(['totalCount', pageInfoQb, dataQb]);\n    } else {\n      // ...nodes { _filters_ }\n      dataQb.find(filters);\n      datasetQb.find(['totalCount', dataQb]);\n    }\n\n    // add dataset filters, could be Pagination and SortingFilters and/or FieldFilters\n    const datasetFilters: GraphqlDatasetFilter = {\n      ...this.options.paginationOptions,\n      first: ((this.options.paginationOptions && this.options.paginationOptions.first) ? this.options.paginationOptions.first : ((this.pagination && this.pagination.pageSize) ? this.pagination.pageSize : null)) || this.defaultPaginationOptions.first\n    };\n\n    if (!this.options.isWithCursor) {\n      datasetFilters.offset = ((this.options.paginationOptions && this.options.paginationOptions.hasOwnProperty('offset')) ? +this.options.paginationOptions['offset'] : 0);\n    }\n\n    if (this.options.sortingOptions && Array.isArray(this.options.sortingOptions) && this.options.sortingOptions.length > 0) {\n      // orderBy: [{ field:x, direction: 'ASC' }]\n      datasetFilters.orderBy = this.options.sortingOptions;\n    }\n    if (this.options.filteringOptions && Array.isArray(this.options.filteringOptions) && this.options.filteringOptions.length > 0) {\n      // filterBy: [{ field: date, operator: '>', value: '2000-10-10' }]\n      datasetFilters.filterBy = this.options.filteringOptions;\n    }\n    if (this.options.addLocaleIntoQuery) {\n      // first: 20, ... locale: \"en-CA\"\n      datasetFilters.locale = this._gridOptions && this._gridOptions.i18n && this._gridOptions.i18n.currentLang || 'en';\n    }\n    if (this.options.extraQueryArguments) {\n      // first: 20, ... userId: 123\n      for (const queryArgument of this.options.extraQueryArguments) {\n        datasetFilters[queryArgument.field] = queryArgument.value;\n      }\n    }\n\n    // query { users(first: 20, orderBy: [], filterBy: [])}\n    datasetQb.filter(datasetFilters);\n    queryQb.find(datasetQb);\n\n    const enumSearchProperties = ['direction:', 'field:', 'operator:'];\n    return this.trimDoubleQuotesOnEnumField(queryQb.toString(), enumSearchProperties, this.options.keepArgumentFieldDoubleQuotes || false);\n  }\n\n  /**\n   * From an input array of strings, we want to build a GraphQL query string.\n   * The process has to take the dot notation and parse it into a valid GraphQL query\n   * Following this SO answer https://stackoverflow.com/a/47705476/1212166\n   *\n   * INPUT\n   *  ['firstName', 'lastName', 'billing.address.street', 'billing.address.zip']\n   * OUTPUT\n   * firstName, lastName, billing{address{street, zip}}\n   * @param inputArray\n   */\n  buildFilterQuery(inputArray: string[]) {\n\n    const set = (o: any = {}, a: any) => {\n      const k = a.shift();\n      o[k] = a.length ? set(o[k], a) : null;\n      return o;\n    };\n\n    const output = inputArray.reduce((o: any, a: string) => set(o, a.split('.')), {});\n\n    return JSON.stringify(output)\n      .replace(/\\\"|\\:|null/g, '')\n      .replace(/^\\{/, '')\n      .replace(/\\}$/, '');\n  }\n\n  init(serviceOptions?: GraphqlServiceOption, pagination?: Pagination, grid?: any): void {\n    this._grid = grid;\n    this.options = serviceOptions || {};\n    this.pagination = pagination;\n\n    if (grid && grid.getColumns && grid.getOptions) {\n      this._columnDefinitions = grid.getColumns();\n    }\n  }\n\n  /**\n   * Get an initialization of Pagination options\n   * @return Pagination Options\n   */\n  getInitPaginationOptions(): GraphqlDatasetFilter {\n    return (this.options.isWithCursor) ? { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE) } : { first: (this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE), offset: 0 };\n  }\n\n  /** Get the GraphQL dataset name */\n  getDatasetName(): string {\n    return this.options.datasetName || '';\n  }\n\n  /** Get the Filters that are currently used by the grid */\n  getCurrentFilters(): ColumnFilters | CurrentFilter[] {\n    return this._currentFilters;\n  }\n\n  /** Get the Pagination that is currently used by the grid */\n  getCurrentPagination(): CurrentPagination {\n    return this._currentPagination;\n  }\n\n  /** Get the Sorters that are currently used by the grid */\n  getCurrentSorters(): CurrentSorter[] {\n    return this._currentSorters;\n  }\n\n  /*\n   * Reset the pagination options\n   */\n  resetPaginationOptions() {\n    let paginationOptions;\n    if (this.options.isWithCursor) {\n      // first, last, after, before\n      paginationOptions = {\n        after: '',\n        before: undefined,\n        last: undefined\n      } as GraphqlCursorPaginationOption;\n    } else {\n      // first, last, offset\n      paginationOptions = (this.options.paginationOptions || this.getInitPaginationOptions()) as GraphqlPaginationOption;\n      paginationOptions.offset = 0;\n    }\n\n    // save current pagination as Page 1 and page size as \"first\" set size\n    this._currentPagination = {\n      pageNumber: 1,\n      pageSize: paginationOptions.first\n    };\n\n    this.updateOptions({ paginationOptions });\n  }\n\n  updateOptions(serviceOptions?: GraphqlServiceOption) {\n    this.options = { ...this.options, ...serviceOptions };\n  }\n\n  /*\n   * FILTERING\n   */\n  processOnFilterChanged(event: Event, args: FilterChangedArgs): Promise<string> {\n    const gridOptions: GridOption = this._gridOptions || args.grid.getOptions();\n    const backendApi = gridOptions.backendServiceApi;\n\n    if (backendApi === undefined) {\n      throw new Error('Something went wrong in the GraphqlService, \"backendServiceApi\" is not initialized');\n    }\n\n    // only add a delay when user is typing, on select dropdown filter it will execute right away\n    let debounceTypingDelay = 0;\n    if (event && (event.type === 'keyup' || event.type === 'keydown')) {\n      debounceTypingDelay = backendApi.filterTypingDebounce || DEFAULT_FILTER_TYPING_DEBOUNCE;\n    }\n\n    const promise = new Promise<string>((resolve, reject) => {\n      if (!args || !args.grid) {\n        throw new Error('Something went wrong when trying create the GraphQL Backend Service, it seems that \"args\" is not populated correctly');\n      }\n\n      // reset Pagination, then build the GraphQL query which we will use in the WebAPI callback\n      // wait a minimum user typing inactivity before processing any query\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        // loop through all columns to inspect filters & set the query\n        this.updateFilters(args.columnFilters, false);\n\n        this.resetPaginationOptions();\n        resolve(this.buildQuery());\n      }, debounceTypingDelay);\n    });\n\n    return promise;\n  }\n\n  /*\n   * PAGINATION\n   * With cursor, the query can have 4 arguments (first, after, last, before), for example:\n   *   users (first:20, after:\"YXJyYXljb25uZWN0aW9uOjM=\") {\n   *     totalCount\n   *     pageInfo {\n   *       hasNextPage\n   *       endCursor\n   *     }\n   *     edges {\n   *       cursor\n   *       node {\n   *         name\n   *         gender\n   *       }\n   *     }\n   *   }\n   * Without cursor, the query can have 3 arguments (first, last, offset), for example:\n   *   users (first:20, offset: 10) {\n   *     totalCount\n   *     nodes {\n   *       name\n   *       gender\n   *     }\n   *   }\n   */\n  processOnPaginationChanged(event: Event, args: PaginationChangedArgs) {\n    const pageSize = +(args.pageSize || ((this.pagination) ? this.pagination.pageSize : DEFAULT_PAGE_SIZE));\n    this.updatePagination(args.newPage, pageSize);\n\n    // build the GraphQL query which we will use in the WebAPI callback\n    return this.buildQuery();\n  }\n\n  /*\n   * SORTING\n   * we will use sorting as per a Facebook suggestion on a Github issue (with some small changes)\n   * https://github.com/graphql/graphql-relay-js/issues/20#issuecomment-220494222\n   */\n  processOnSortChanged(event: Event, args: SortChangedArgs) {\n    const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });\n\n    // loop through all columns to inspect sorters & set the query\n    this.updateSorters(sortColumns);\n\n    // build the GraphQL query which we will use in the WebAPI callback\n    return this.buildQuery();\n  }\n\n  /**\n   * loop through all columns to inspect filters & update backend service filteringOptions\n   * @param columnFilters\n   */\n  updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPreset: boolean) {\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    this._currentFilters = this.castFilterToColumnFilter(columnFilters);\n\n    const searchByArray: GraphqlFilteringOption[] = [];\n    let searchValue: string | string[];\n\n    for (const columnId in columnFilters) {\n      if (columnFilters.hasOwnProperty(columnId)) {\n        const columnFilter = columnFilters[columnId];\n\n        // if user defined some \"presets\", then we need to find the filters from the column definitions instead\n        let columnDef: Column | undefined;\n        if (isUpdatedByPreset && Array.isArray(this._columnDefinitions)) {\n          columnDef = this._columnDefinitions.find((column: Column) => column.id === columnFilter.columnId);\n        } else {\n          columnDef = columnFilter.columnDef;\n        }\n        if (!columnDef) {\n          throw new Error('[Backend Service API]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\n        }\n\n        const fieldName = columnDef.queryField || columnDef.queryFieldFilter || columnDef.field || columnDef.name || '';\n        const searchTerms = (columnFilter ? columnFilter.searchTerms : null) || [];\n        let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\n        if (typeof fieldSearchValue === 'undefined') {\n          fieldSearchValue = '';\n        }\n\n        if (typeof fieldSearchValue !== 'string' && !searchTerms) {\n          throw new Error(`GraphQL filter searchTerm property must be provided as type \"string\", if you use filter with options then make sure your IDs are also string. For example: filter: {type: FilterType.select, collection: [{ id: \"0\", value: \"0\" }, { id: \"1\", value: \"1\" }]`);\n        }\n\n        fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n        const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n        let operator = columnFilter.operator || ((matches) ? matches[1] : '');\n        searchValue = (!!matches) ? matches[2] : '';\n        const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n\n        // no need to query if search value is empty\n        if (fieldName && searchValue === '' && searchTerms.length === 0) {\n          continue;\n        }\n\n        // when having more than 1 search term (we need to create a CSV string for GraphQL \"IN\" or \"NOT IN\" filter search)\n        if (searchTerms && searchTerms.length > 1) {\n          searchValue = searchTerms.join(',');\n        } else if (typeof searchValue === 'string') {\n          // escaping the search value\n          searchValue = searchValue.replace(`'`, `''`); // escape single quotes by doubling them\n          if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\n            operator = (operator === '*' || operator === '*z') ? 'endsWith' : 'startsWith';\n          }\n        }\n\n        // if we didn't find an Operator but we have a Filter Type, we should use default Operator\n        // multipleSelect is \"IN\", while singleSelect is \"EQ\", else don't map any operator\n        if (!operator && columnDef.filter) {\n          operator = mapOperatorByFilterType(columnDef.filter.type || '');\n        }\n\n        // if we still don't have an operator find the proper Operator to use by it's field type\n        if (!operator) {\n          operator = mapOperatorByFieldType(columnDef.type || FieldType.string);\n        }\n\n        searchByArray.push({\n          field: fieldName,\n          operator: mapOperatorType(operator),\n          value: searchValue\n        });\n      }\n    }\n\n    // update the service options with filters for the buildQuery() to work later\n    this.updateOptions({ filteringOptions: searchByArray });\n  }\n\n  /**\n   * Update the pagination component with it's new page number and size\n   * @param newPage\n   * @param pageSize\n   */\n  updatePagination(newPage: number, pageSize: number) {\n    this._currentPagination = {\n      pageNumber: newPage,\n      pageSize\n    };\n\n    let paginationOptions;\n    if (this.options.isWithCursor) {\n      paginationOptions = {\n        first: pageSize\n      };\n    } else {\n      paginationOptions = {\n        first: pageSize,\n        offset: (newPage - 1) * pageSize\n      };\n    }\n\n    this.updateOptions({ paginationOptions });\n  }\n\n  /**\n   * loop through all columns to inspect sorters & update backend service sortingOptions\n   * @param columnFilters\n   */\n  updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]) {\n    let currentSorters: CurrentSorter[] = [];\n    let graphqlSorters: GraphqlSortingOption[] = [];\n\n    if (!sortColumns && presetSorters) {\n      // make the presets the current sorters, also make sure that all direction are in uppercase for GraphQL\n      currentSorters = presetSorters;\n      currentSorters.forEach((sorter) => sorter.direction = sorter.direction.toUpperCase() as SortDirectionString);\n\n      // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\n      const tmpSorterArray = currentSorters.map((sorter) => {\n        const columnDef = this._columnDefinitions.find((column: Column) => column.id === sorter.columnId);\n        if (columnDef) {\n          graphqlSorters.push({\n            field: (columnDef.queryField || columnDef.queryFieldSorter || columnDef.field || columnDef.id) + '',\n            direction: sorter.direction\n          });\n        }\n        return {\n          columnId: sorter.columnId,\n          sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC\n        };\n      });\n      this._grid.setSortColumns(tmpSorterArray);\n    } else if (sortColumns && !presetSorters) {\n      // build the orderBy array, it could be multisort, example\n      // orderBy:[{field: lastName, direction: ASC}, {field: firstName, direction: DESC}]\n      if (sortColumns && sortColumns.length === 0) {\n        graphqlSorters = new Array(this.defaultOrderBy); // when empty, use the default sort\n        currentSorters = new Array({ columnId: this.defaultOrderBy.field, direction: this.defaultOrderBy.direction });\n      } else {\n        if (sortColumns) {\n          for (const column of sortColumns) {\n            if (column && column.sortCol) {\n              currentSorters.push({\n                columnId: column.sortCol.id + '',\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\n              });\n\n              graphqlSorters.push({\n                field: (column.sortCol.queryField || column.sortCol.queryFieldSorter || column.sortCol.field || column.sortCol.id) + '',\n                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC\n              });\n            }\n          }\n        }\n      }\n    }\n\n    // keep current Sorters and update the service options with the new sorting\n    this._currentSorters = currentSorters;\n    this.updateOptions({ sortingOptions: graphqlSorters });\n  }\n\n  /**\n   * A function which takes an input string and removes double quotes only\n   * on certain fields are identified as GraphQL enums (except fields with dot notation)\n   * For example let say we identified (\"direction:\", \"sort\") as word which are GraphQL enum fields\n   * then the result will be:\n   * FROM\n   * query { users (orderBy:[{field:\"firstName\", direction:\"ASC\"} }]) }\n   * TO\n   * query { users (orderBy:[{field: firstName, direction: ASC}})}\n   *\n   * EXCEPTIONS (fields with dot notation \".\" which are inside a \"field:\")\n   * these fields will keep double quotes while everything else will be stripped of double quotes\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: \"ASC\"} }\n   * TO\n   * query { users (orderBy:[{field:\"billing.street.name\", direction: ASC}}\n   * @param inputStr input string\n   * @param enumSearchWords array of enum words to filter\n   * @returns outputStr output string\n   */\n  trimDoubleQuotesOnEnumField(inputStr: string, enumSearchWords: string[], keepArgumentFieldDoubleQuotes: boolean) {\n    const patternWordInQuotes = `\\s?((field:\\s*)?\".*?\")`;\n    let patternRegex = enumSearchWords.join(patternWordInQuotes + '|');\n    patternRegex += patternWordInQuotes; // the last one should also have the pattern but without the pipe \"|\"\n    // example with (field: & direction:):  /field:s?(\".*?\")|direction:s?(\".*?\")/\n    const reg = new RegExp(patternRegex, 'g');\n\n    return inputStr.replace(reg, (group1, group2, group3) => {\n      // remove double quotes except when the string starts with a \"field:\"\n      let removeDoubleQuotes = true;\n      if (group1.startsWith('field:') && keepArgumentFieldDoubleQuotes) {\n        removeDoubleQuotes = false;\n      }\n      const rep = removeDoubleQuotes ? group1.replace(/\"/g, '') : group1;\n      return rep;\n    });\n  }\n\n  //\n  // private functions\n  // -------------------\n  /**\n   * Cast provided filters (could be in multiple format) into an array of ColumnFilter\n   * @param columnFilters\n   */\n  private castFilterToColumnFilter(columnFilters: ColumnFilters | CurrentFilter[]): CurrentFilter[] {\n    // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n    const filtersArray: ColumnFilter[] = (typeof columnFilters === 'object') ? Object.keys(columnFilters).map(key => columnFilters[key]) : columnFilters;\n\n    return filtersArray.map((filter) => {\n      const columnDef = filter.columnDef;\n      const header = (columnDef) ? (columnDef.headerKey || columnDef.name || '') : '';\n      const tmpFilter: CurrentFilter = { columnId: filter.columnId || '' };\n      if (filter.operator) {\n        tmpFilter.operator = filter.operator;\n      }\n      if (Array.isArray(filter.searchTerms)) {\n        tmpFilter.searchTerms = filter.searchTerms;\n      }\n      return tmpFilter;\n    });\n  }\n}\n",
    "/**\r\n * This GraphqlQueryBuilder class is a lib that already exist\r\n * but was causing issues with TypeScript, RequireJS and other bundler/packagers\r\n * and so I rewrote it in pure TypeScript.\r\n *\r\n * The previous lib can be viewed here at this Github\r\n * https://github.com/codemeasandwich/graphql-query-builder\r\n */\r\nexport default class GraphqlQueryBuilder {\r\n  alias: string;\r\n  head: any[] = [];\r\n  body: any;\r\n\r\n  /* Constructor, query/mutator you wish to use, and an alias or filter arguments. */\r\n  constructor(private queryFnName: string, aliasOrFilter?: string | object) {\r\n    if (typeof aliasOrFilter === 'function') {\r\n      this.alias = aliasOrFilter;\r\n    } else if (typeof aliasOrFilter === 'object') {\r\n      this.filter(aliasOrFilter);\r\n    } else if (undefined === aliasOrFilter && 2 === arguments.length) {\r\n      throw new TypeError(`You have passed undefined as Second argument to \"Query\"`);\r\n    } else if (undefined !== aliasOrFilter) {\r\n      throw new TypeError(`Second argument to \"Query\" should be an alias name(String) or filter arguments(Object). was passed ${aliasOrFilter}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The parameters to run the query against.\r\n   * @param filters An object mapping attribute to values\r\n   */\r\n  filter(filters: any) {\r\n    for (const prop of Object.keys(filters)) {\r\n      if (typeof filters[prop] === 'function') {\r\n        continue;\r\n      }\r\n      const val = this.getGraphQLValue(filters[prop]);\r\n      if (val === '{}') {\r\n        continue;\r\n      }\r\n      this.head.push(`${prop}:${val}`);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Outlines the properties you wish to be returned from the query.\r\n   * @param properties representing each attribute you want Returned\r\n   */\r\n  find(...searches: any[]) { // THIS NEED TO BE A \"FUNCTION\" to scope 'arguments'\r\n    if (!searches) {\r\n      throw new TypeError(`find value can not be >>falsy<<`);\r\n    }\r\n    // if its a string.. it may have other values\r\n    // else it sould be an Object or Array of maped values\r\n    const searchKeys = (searches.length === 1 && Array.isArray(searches[0])) ? searches[0] : searches;\r\n    this.body = this.parceFind(searchKeys);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set an alias for this result.\r\n   * @param alias\r\n   */\r\n  setAlias(alias: string) {\r\n    this.alias = alias;\r\n  }\r\n\r\n  /**\r\n   * Return to the formatted query string\r\n   * @return\r\n   */\r\n  toString() {\r\n    if (this.body === undefined) {\r\n      throw new ReferenceError(`return properties are not defined. use the 'find' function to defined them`);\r\n    }\r\n\r\n    return `${(this.alias) ? (this.alias + ':') : ''} ${this.queryFnName} ${(this.head.length > 0) ? '(' + this.head.join(',') + ')' : ''}  { ${this.body} }`;\r\n  }\r\n\r\n  // --\r\n  // PRIVATE FUNCTIONS\r\n  // -----------------\r\n\r\n  private parceFind(_levelA: any[]) {\r\n    const propsA = _levelA.map((currentValue, index) => {\r\n      const itemX = _levelA[index];\r\n\r\n      if (itemX instanceof GraphqlQueryBuilder) {\r\n        return itemX.toString();\r\n      } else if (!Array.isArray(itemX) && typeof itemX === 'object') {\r\n        const propsAA = Object.keys(itemX);\r\n        if (1 !== propsAA.length) {\r\n          throw new RangeError(`Alias objects should only have one value. was passed: ${JSON.stringify(itemX)}`);\r\n        }\r\n        const propS = propsAA[0];\r\n        const item = itemX[propS];\r\n\r\n        if (Array.isArray(item)) {\r\n          return new GraphqlQueryBuilder(propS).find(item);\r\n        }\r\n        return `${propS} : ${item} `;\r\n      } else if (typeof itemX === 'string') {\r\n        return itemX;\r\n      } else {\r\n        throw new RangeError(`cannot handle Find value of ${itemX}`);\r\n      }\r\n    });\r\n\r\n    return propsA.join(',');\r\n  }\r\n\r\n  private getGraphQLValue(value: any) {\r\n    if (typeof value === 'string') {\r\n      value = JSON.stringify(value);\r\n    } else if (Array.isArray(value)) {\r\n      value = value.map(item => {\r\n        return this.getGraphQLValue(item);\r\n      }).join();\r\n      value = `[${value}]`;\r\n    } else if (value instanceof Date) {\r\n      value = JSON.stringify(value);\r\n    } else if (value !== null && typeof value === 'object') {\r\n      value = this.objectToString(value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private objectToString(obj: any) {\r\n    const sourceA = [];\r\n\r\n    for (const prop of Object.keys(obj)) {\r\n      if (typeof obj[prop] === 'function') {\r\n        continue;\r\n      }\r\n      sourceA.push(`${prop}:${this.getGraphQLValue(obj[prop])}`);\r\n    }\r\n    return `{${sourceA.join()}}`;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport {\r\n  CellArgs,\r\n  ColumnSort,\r\n  CustomGridMenu,\r\n  Column,\r\n  DelimiterType,\r\n  Extension,\r\n  FileType,\r\n  GraphqlResult,\r\n  GridMenu,\r\n  GridOption,\r\n  HeaderButtonOnCommandArgs,\r\n  HeaderMenu,\r\n  HeaderMenuItem,\r\n  HeaderMenuOnCommandArgs,\r\n  HeaderMenuOnBeforeMenuShowArgs,\r\n} from './../models/index';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { castToPromise, sanitizeHtmlToText } from './../services/utilities';\r\nimport { FilterService } from './filter.service';\r\nimport { ExportService } from './export.service';\r\nimport { SortService } from './sort.service';\r\n\r\n// using external non-typed js libraries\r\ndeclare var Slick: any;\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class ControlAndPluginService {\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  allColumns: Column[];\r\n  visibleColumns: Column[];\r\n  areVisibleColumnDifferent = false;\r\n  extensionList: Extension[] = [];\r\n\r\n  // controls & plugins\r\n  autoTooltipPlugin: any;\r\n  cellExternalCopyManagerPlugin: any;\r\n  checkboxSelectorPlugin: any;\r\n  columnPickerControl: any;\r\n  groupItemMetaProviderPlugin: any;\r\n  headerButtonsPlugin: any;\r\n  headerMenuPlugin: any;\r\n  gridMenuControl: any;\r\n  rowSelectionPlugin: any;\r\n  undoRedoBuffer: any;\r\n\r\n  constructor(\r\n    private exportService: ExportService,\r\n    private filterService: FilterService,\r\n    private sortService: SortService,\r\n    private translate: TranslateService\r\n  ) {}\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /** Getter for the Column Definitions pulled through the Grid Object */\r\n  private get _columnDefinitions(): Column[] {\r\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\r\n  }\r\n\r\n  /** Get all columns (includes visible and non-visible) */\r\n  getAllColumns(): Column[] {\r\n    return this.allColumns || [];\r\n  }\r\n\r\n  /** Get only visible columns */\r\n  getVisibleColumns(): Column[] {\r\n    return this.visibleColumns || [];\r\n  }\r\n\r\n  getAllExtensions(): Extension[] {\r\n    return this.extensionList;\r\n  }\r\n\r\n  getExtensionByName(name: string): Extension | undefined {\r\n    return this.extensionList.find((p) => p.name === name);\r\n  }\r\n\r\n  /** Auto-resize all the column in the grid to fit the grid width */\r\n  autoResizeColumns() {\r\n    this._grid.autosizeColumns();\r\n  }\r\n\r\n  /**\r\n   * Attach/Create different Controls or Plugins after the Grid is created\r\n   * @param grid\r\n   * @param options\r\n   * @param dataView\r\n   */\r\n  attachDifferentControlOrPlugins(grid: any, dataView: any, groupItemMetadataProvider: any) {\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n    this.visibleColumns = this._columnDefinitions;\r\n    this.allColumns = this._columnDefinitions;\r\n\r\n    // make sure all columns are translated before creating ColumnPicker/GridMenu Controls\r\n    // this is to avoid having hidden columns not being translated on first load\r\n    if (this._gridOptions.enableTranslate) {\r\n      this.translateHeaderKeys(this.allColumns);\r\n    }\r\n\r\n    // Column Picker Control\r\n    if (this._gridOptions.enableColumnPicker) {\r\n      this.columnPickerControl = this.createColumnPicker(this._grid, this._columnDefinitions);\r\n      this.extensionList.push({ name: 'ColumnPicker', service: this.columnPickerControl });\r\n    }\r\n\r\n    // Grid Menu Control\r\n    if (this._gridOptions.enableGridMenu) {\r\n      this.gridMenuControl = this.createGridMenu(this._grid, this._columnDefinitions);\r\n      this.extensionList.push({ name: 'GridMenu', service: this.gridMenuControl });\r\n    }\r\n\r\n    // Auto Tooltip Plugin\r\n    if (this._gridOptions.enableAutoTooltip) {\r\n      this.autoTooltipPlugin = new Slick.AutoTooltips(this._gridOptions.autoTooltipOptions || {});\r\n      this._grid.registerPlugin(this.autoTooltipPlugin);\r\n      this.extensionList.push({ name: 'AutoTooltip', service: this.autoTooltipPlugin });\r\n    }\r\n\r\n    // Grouping Plugin\r\n    // register the group item metadata provider to add expand/collapse group handlers\r\n    if (this._gridOptions.enableGrouping) {\r\n      this.groupItemMetaProviderPlugin = groupItemMetadataProvider || {};\r\n      this._grid.registerPlugin(this.groupItemMetaProviderPlugin);\r\n      this.extensionList.push({ name: 'GroupItemMetaProvider', service: this.groupItemMetaProviderPlugin });\r\n    }\r\n\r\n    // Checkbox Selector Plugin\r\n    if (this._gridOptions.enableCheckboxSelector) {\r\n      // when enabling the Checkbox Selector Plugin, we need to also watch onClick events to perform certain actions\r\n      // the selector column has to be created BEFORE the grid (else it behaves oddly), but we can only watch grid events AFTER the grid is created\r\n      this._grid.registerPlugin(this.checkboxSelectorPlugin);\r\n      this.extensionList.push({ name: 'CheckboxSelector', service: this.checkboxSelectorPlugin });\r\n\r\n      // this also requires the Row Selection Model to be registered as well\r\n      if (!this.rowSelectionPlugin || !this._grid.getSelectionModel()) {\r\n        this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\r\n        this._grid.setSelectionModel(this.rowSelectionPlugin);\r\n      }\r\n\r\n      // user might want to pre-select some rows\r\n      // the setTimeout is because of timing issue with styling (row selection happen but rows aren't highlighted properly)\r\n      if (this._gridOptions.preselectedRows && this.rowSelectionPlugin && this._grid.getSelectionModel()) {\r\n        setTimeout(() => this.checkboxSelectorPlugin.selectRows(this._gridOptions.preselectedRows), 0);\r\n      }\r\n    }\r\n\r\n    // Row Selection Plugin\r\n    if (!this._gridOptions.enableCheckboxSelector && this._gridOptions.enableRowSelection) {\r\n      this.rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});\r\n      this._grid.setSelectionModel(this.rowSelectionPlugin);\r\n    }\r\n\r\n    // Header Button Plugin\r\n    if (this._gridOptions.enableHeaderButton) {\r\n      this.headerButtonsPlugin = new Slick.Plugins.HeaderButtons(this._gridOptions.headerButton || {});\r\n      this._grid.registerPlugin(this.headerButtonsPlugin);\r\n      this.extensionList.push({ name: 'HeaderButtons', service: this.headerButtonsPlugin });\r\n      this.headerButtonsPlugin.onCommand.subscribe((e: Event, args: HeaderButtonOnCommandArgs) => {\r\n        if (this._gridOptions.headerButton && typeof this._gridOptions.headerButton.onCommand === 'function') {\r\n          this._gridOptions.headerButton.onCommand(e, args);\r\n        }\r\n      });\r\n    }\r\n\r\n    // Header Menu Plugin\r\n    if (this._gridOptions.enableHeaderMenu) {\r\n      this.headerMenuPlugin = this.createHeaderMenu(this._grid, this._dataView, this._columnDefinitions);\r\n    }\r\n\r\n    // Cell External Copy Manager Plugin (Excel Like)\r\n    if (this._gridOptions.enableExcelCopyBuffer) {\r\n      this.createUndoRedoBuffer();\r\n      this.hookUndoShortcutKey();\r\n      this.createCellExternalCopyManagerPlugin(this._grid);\r\n    }\r\n\r\n    // manually register other plugins\r\n    if (this._gridOptions.registerPlugins !== undefined) {\r\n      if (Array.isArray(this._gridOptions.registerPlugins)) {\r\n        this._gridOptions.registerPlugins.forEach((plugin) => {\r\n          this._grid.registerPlugin(plugin);\r\n          this.extensionList.push({ name: 'generic', service: plugin });\r\n        });\r\n      } else {\r\n        this._grid.registerPlugin(this._gridOptions.registerPlugins);\r\n        this.extensionList.push({ name: 'generic', service: this._gridOptions.registerPlugins });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attach/Create different plugins before the Grid creation.\r\n   * For example the multi-select have to be added to the column definition before the grid is created to work properly\r\n   * @param columnDefinitions\r\n   * @param options\r\n   */\r\n  createCheckboxPluginBeforeGridCreation(columnDefinitions: Column[], options: GridOption) {\r\n    if (options.enableCheckboxSelector) {\r\n      if (!this.checkboxSelectorPlugin) {\r\n        this.checkboxSelectorPlugin = new Slick.CheckboxSelectColumn(options.checkboxSelector || {});\r\n      }\r\n      const selectionColumn: Column = this.checkboxSelectorPlugin.getColumnDefinition();\r\n      selectionColumn.excludeFromExport = true;\r\n      selectionColumn.excludeFromQuery = true;\r\n      selectionColumn.excludeFromHeaderMenu = true;\r\n      columnDefinitions.unshift(selectionColumn);\r\n    }\r\n  }\r\n\r\n  /** Create the Excel like copy manager */\r\n  createCellExternalCopyManagerPlugin(grid: any) {\r\n    let newRowIds = 0;\r\n    const pluginOptions = {\r\n      clipboardCommandHandler: (editCommand) => {\r\n        this.undoRedoBuffer.queueAndExecuteCommand.call(this.undoRedoBuffer, editCommand);\r\n      },\r\n      dataItemColumnValueExtractor: (item, columnDef) => {\r\n        // when grid or cell is not editable, we will possibly evaluate the Formatter if it was passed\r\n        // to decide if we evaluate the Formatter, we will use the same flag from Export which is \"exportWithFormatter\"\r\n        if (!this._gridOptions.editable || !columnDef.editor) {\r\n          const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._gridOptions.exportOptions.exportWithFormatter;\r\n          if (columnDef.formatter && isEvaluatingFormatter) {\r\n            const formattedOutput = columnDef.formatter(0, 0, item[columnDef.field], columnDef, item, this._grid);\r\n            if (columnDef.sanitizeDataExport || (this._gridOptions.exportOptions && this._gridOptions.exportOptions.sanitizeDataExport)) {\r\n              return sanitizeHtmlToText(formattedOutput);\r\n            }\r\n            return formattedOutput;\r\n          }\r\n        }\r\n\r\n        // else use the default \"dataItemColumnValueExtractor\" from the plugin itself\r\n        // we can do that by setting back the getter with null\r\n        return null;\r\n      },\r\n      readOnlyMode: false,\r\n      includeHeaderWhenCopying: false,\r\n      newRowCreator: (count) => {\r\n        for (let i = 0; i < count; i++) {\r\n          const item = {\r\n            id: 'newRow_' + newRowIds++\r\n          };\r\n          grid.getData().addItem(item);\r\n        }\r\n      }\r\n    };\r\n\r\n    grid.setSelectionModel(new Slick.CellSelectionModel());\r\n    this.cellExternalCopyManagerPlugin = new Slick.CellExternalCopyManager(pluginOptions);\r\n    grid.registerPlugin(this.cellExternalCopyManagerPlugin);\r\n    this.extensionList.push({ name: 'CellExternalCopyManager', service: this.cellExternalCopyManagerPlugin });\r\n  }\r\n\r\n  /**\r\n   * Create the Column Picker and expose all the available hooks that user can subscribe (onColumnsChanged)\r\n   * @param grid\r\n   * @param columnDefinitions\r\n   * @param gridOptions\r\n   */\r\n  createColumnPicker(grid: any, columnDefinitions: Column[]) {\r\n    // localization support for the picker\r\n    const forceFitTitle = this._gridOptions.enableTranslate ? this.getDefaultTranslationByKey('forcefit') : 'Force fit columns';\r\n    const syncResizeTitle = this._gridOptions.enableTranslate ? this.getDefaultTranslationByKey('synch') : 'Synchronous resize';\r\n\r\n    this._gridOptions.columnPicker = this._gridOptions.columnPicker || {};\r\n    this._gridOptions.columnPicker.forceFitTitle = this._gridOptions.columnPicker.forceFitTitle || forceFitTitle;\r\n    this._gridOptions.columnPicker.syncResizeTitle = this._gridOptions.columnPicker.syncResizeTitle || syncResizeTitle;\r\n\r\n    this.columnPickerControl = new Slick.Controls.ColumnPicker(columnDefinitions, grid, this._gridOptions);\r\n    if (grid && this._gridOptions.enableColumnPicker) {\r\n      this.columnPickerControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\r\n        if (this._gridOptions.columnPicker && typeof this._gridOptions.columnPicker.onColumnsChanged === 'function') {\r\n          this._gridOptions.columnPicker.onColumnsChanged(e, args);\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.columnPickerControl;\r\n  }\r\n\r\n  /**\r\n   * Create (or re-create) Grid Menu and expose all the available hooks that user can subscribe (onCommand, onMenuClose, ...)\r\n   * @param grid\r\n   * @param columnDefinitions\r\n   * @param _gridOptions\r\n   */\r\n  createGridMenu(grid: any, columnDefinitions: Column[]) {\r\n    this._gridOptions.gridMenu = { ...this.getDefaultGridMenuOptions(), ...this._gridOptions.gridMenu };\r\n    this.addGridMenuCustomCommands(grid);\r\n\r\n    const gridMenuControl = new Slick.Controls.GridMenu(columnDefinitions, grid, this._gridOptions);\r\n    if (grid && this._gridOptions.gridMenu) {\r\n      gridMenuControl.onBeforeMenuShow.subscribe((e: Event, args: CellArgs) => {\r\n        if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onBeforeMenuShow === 'function') {\r\n          this._gridOptions.gridMenu.onBeforeMenuShow(e, args);\r\n        }\r\n      });\r\n      gridMenuControl.onColumnsChanged.subscribe((e: Event, args: CellArgs) => {\r\n        this.areVisibleColumnDifferent = true;\r\n        if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onColumnsChanged === 'function') {\r\n          this._gridOptions.gridMenu.onColumnsChanged(e, args);\r\n        }\r\n      });\r\n      gridMenuControl.onCommand.subscribe((e: Event, args: CustomGridMenu) => {\r\n        this.executeGridMenuInternalCustomCommands(e, args);\r\n        if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onCommand === 'function') {\r\n          this._gridOptions.gridMenu.onCommand(e, args);\r\n        }\r\n      });\r\n      gridMenuControl.onMenuClose.subscribe((e: Event, args: CellArgs) => {\r\n        if (this._gridOptions.gridMenu && typeof this._gridOptions.gridMenu.onMenuClose === 'function') {\r\n          this._gridOptions.gridMenu.onMenuClose(e, args);\r\n        }\r\n\r\n        // we also want to resize the columns if the user decided to hide certain column(s)\r\n        if (grid && typeof grid.autosizeColumns === 'function') {\r\n          // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree)\r\n          const gridUid = grid.getUID();\r\n          if (this.areVisibleColumnDifferent && gridUid && $(`.${gridUid}`).length > 0) {\r\n            grid.autosizeColumns();\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return gridMenuControl;\r\n  }\r\n\r\n  /**\r\n   * Create the Header Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)\r\n   * @param grid\r\n   * @param columnDefinitions\r\n   * @param options\r\n   */\r\n  createHeaderMenu(grid: any, dataView: any, columnDefinitions: Column[]) {\r\n    this._gridOptions.headerMenu = { ...this.getDefaultHeaderMenuOptions(), ...this._gridOptions.headerMenu };\r\n    if (this._gridOptions.enableHeaderMenu) {\r\n      this._gridOptions.headerMenu = this.addHeaderMenuCustomCommands(grid, dataView, this._gridOptions, columnDefinitions);\r\n    }\r\n\r\n    const headerMenuPlugin = new Slick.Plugins.HeaderMenu(this._gridOptions.headerMenu);\r\n\r\n    grid.registerPlugin(headerMenuPlugin);\r\n    headerMenuPlugin.onCommand.subscribe((e: Event, args: HeaderMenuOnCommandArgs) => {\r\n      this.executeHeaderMenuInternalCommands(e, args);\r\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onCommand === 'function') {\r\n        this._gridOptions.headerMenu.onCommand(e, args);\r\n      }\r\n    });\r\n    headerMenuPlugin.onBeforeMenuShow.subscribe((e: Event, args: HeaderMenuOnBeforeMenuShowArgs) => {\r\n      if (this._gridOptions.headerMenu && typeof this._gridOptions.headerMenu.onBeforeMenuShow === 'function') {\r\n        this._gridOptions.headerMenu.onBeforeMenuShow(e, args);\r\n      }\r\n    });\r\n\r\n    return headerMenuPlugin;\r\n  }\r\n\r\n  /** Create an undo redo buffer used by the Excel like copy */\r\n  createUndoRedoBuffer() {\r\n    const commandQueue = [];\r\n    let commandCtr = 0;\r\n\r\n    this.undoRedoBuffer = {\r\n      queueAndExecuteCommand: (editCommand) => {\r\n        commandQueue[commandCtr] = editCommand;\r\n        commandCtr++;\r\n        editCommand.execute();\r\n      },\r\n      undo: () => {\r\n        if (commandCtr === 0) { return; }\r\n        commandCtr--;\r\n        const command = commandQueue[commandCtr];\r\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\r\n          command.undo();\r\n        }\r\n      },\r\n      redo: () => {\r\n        if (commandCtr >= commandQueue.length) { return; }\r\n        const command = commandQueue[commandCtr];\r\n        commandCtr++;\r\n        if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\r\n          command.execute();\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  /** Hide a column from the grid */\r\n  hideColumn(column: Column) {\r\n    if (this._grid && this.visibleColumns) {\r\n      const columnIndex = this._grid.getColumnIndex(column.id);\r\n      this.visibleColumns = this.removeColumnByIndex(this.visibleColumns, columnIndex);\r\n      this._grid.setColumns(this.visibleColumns);\r\n    }\r\n  }\r\n\r\n  /** Attach an undo shortcut key hook that will redo/undo the copy buffer */\r\n  hookUndoShortcutKey() {\r\n    // undo shortcut\r\n    $(document).keydown((e) => {\r\n      if (e.which === 90 && (e.ctrlKey || e.metaKey)) {    // CTRL + (shift) + Z\r\n        if (e.shiftKey) {\r\n          this.undoRedoBuffer.redo();\r\n        } else {\r\n          this.undoRedoBuffer.undo();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Dispose of all the controls & plugins */\r\n  dispose() {\r\n    this._grid = null;\r\n    this._dataView = null;\r\n    this.visibleColumns = [];\r\n\r\n    // destroy the control/plugin if it has that method\r\n    this.extensionList.forEach((item) => {\r\n      if (item && item.service && item.service.destroy) {\r\n        item.service.destroy();\r\n      }\r\n    });\r\n    this.extensionList = [];\r\n  }\r\n\r\n  /**\r\n   * Create Grid Menu with Custom Commands if user has enabled Filters and/or uses a Backend Service (OData, GraphQL)\r\n   * @param grid\r\n   * @return gridMenu\r\n   */\r\n  private addGridMenuCustomCommands(grid: any) {\r\n    const backendApi = this._gridOptions.backendServiceApi || null;\r\n\r\n    if (this._gridOptions.enableFiltering) {\r\n      // show grid menu: clear all filters\r\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllFiltersCommand && this._gridOptions.gridMenu.customItems && this._gridOptions.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'clear-filter').length === 0) {\r\n        this._gridOptions.gridMenu.customItems.push(\r\n          {\r\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllFiltersCommand || 'fa fa-filter text-danger',\r\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_FILTERS') : 'Clear All Filters',\r\n            disabled: false,\r\n            command: 'clear-filter',\r\n            positionOrder: 50\r\n          }\r\n        );\r\n      }\r\n\r\n      // show grid menu: toggle filter row\r\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideToggleFilterCommand && this._gridOptions.gridMenu.customItems && this._gridOptions.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'toggle-filter').length === 0) {\r\n        this._gridOptions.gridMenu.customItems.push(\r\n          {\r\n            iconCssClass: this._gridOptions.gridMenu.iconToggleFilterCommand || 'fa fa-random',\r\n            title: this._gridOptions.enableTranslate ? this.translate.instant('TOGGLE_FILTER_ROW') : 'Toggle Filter Row',\r\n            disabled: false,\r\n            command: 'toggle-filter',\r\n            positionOrder: 52\r\n          }\r\n        );\r\n      }\r\n\r\n      // show grid menu: refresh dataset\r\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideRefreshDatasetCommand && backendApi && this._gridOptions.gridMenu.customItems && this._gridOptions.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'refresh-dataset').length === 0) {\r\n        this._gridOptions.gridMenu.customItems.push(\r\n          {\r\n            iconCssClass: this._gridOptions.gridMenu.iconRefreshDatasetCommand || 'fa fa-refresh',\r\n            title: this._gridOptions.enableTranslate ? this.translate.instant('REFRESH_DATASET') : 'Refresh Dataset',\r\n            disabled: false,\r\n            command: 'refresh-dataset',\r\n            positionOrder: 54\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._gridOptions.enableSorting) {\r\n      // show grid menu: clear all sorting\r\n      if (this._gridOptions && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideClearAllSortingCommand && this._gridOptions.gridMenu.customItems && this._gridOptions.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'clear-sorting').length === 0) {\r\n        this._gridOptions.gridMenu.customItems.push(\r\n          {\r\n            iconCssClass: this._gridOptions.gridMenu.iconClearAllSortingCommand || 'fa fa-unsorted text-danger',\r\n            title: this._gridOptions.enableTranslate ? this.translate.instant('CLEAR_ALL_SORTING') : 'Clear All Sorting',\r\n            disabled: false,\r\n            command: 'clear-sorting',\r\n            positionOrder: 51\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n    // show grid menu: export to file\r\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportCsvCommand && this._gridOptions.gridMenu.customItems && this._gridOptions.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'export-csv').length === 0) {\r\n      this._gridOptions.gridMenu.customItems.push(\r\n        {\r\n          iconCssClass: this._gridOptions.gridMenu.iconExportCsvCommand || 'fa fa-download',\r\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_CSV') : 'Export in CSV format',\r\n          disabled: false,\r\n          command: 'export-csv',\r\n          positionOrder: 53\r\n        }\r\n      );\r\n    }\r\n    // show grid menu: export to text file as tab delimited\r\n    if (this._gridOptions && this._gridOptions.enableExport && this._gridOptions.gridMenu && !this._gridOptions.gridMenu.hideExportTextDelimitedCommand && this._gridOptions.gridMenu.customItems && this._gridOptions.gridMenu.customItems.filter((item: CustomGridMenu) => item.command === 'export-text-delimited').length === 0) {\r\n      this._gridOptions.gridMenu.customItems.push(\r\n        {\r\n          iconCssClass: this._gridOptions.gridMenu.iconExportTextDelimitedCommand || 'fa fa-download',\r\n          title: this._gridOptions.enableTranslate ? this.translate.instant('EXPORT_TO_TAB_DELIMITED') : 'Export in Text format (Tab delimited)',\r\n          disabled: false,\r\n          command: 'export-text-delimited',\r\n          positionOrder: 54\r\n        }\r\n      );\r\n    }\r\n\r\n    // add the custom \"Commands\" title if there are any commands\r\n    if (this._gridOptions && this._gridOptions.gridMenu && this._gridOptions.gridMenu.customItems && this._gridOptions.gridMenu.customItems.length > 0) {\r\n      const customTitle = this._gridOptions.enableTranslate ? this.getDefaultTranslationByKey('commands') : 'Commands';\r\n      this._gridOptions.gridMenu.customTitle = this._gridOptions.gridMenu.customTitle || customTitle;\r\n\r\n      // sort the custom items by their position in the list\r\n      this._gridOptions.gridMenu.customItems.sort((itemA, itemB) => {\r\n        if (itemA && itemB && itemA.hasOwnProperty('positionOrder') && itemB.hasOwnProperty('positionOrder')) {\r\n          return itemA.positionOrder - itemB.positionOrder;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create Header Menu with Custom Commands if user has enabled Header Menu\r\n   * @param grid\r\n   * @param dataView\r\n   * @param options\r\n   * @param columnDefinitions\r\n   * @return header menu\r\n   */\r\n  private addHeaderMenuCustomCommands(grid: any, dataView: any, options: GridOption, columnDefinitions: Column[]): HeaderMenu {\r\n    const headerMenuOptions = options.headerMenu;\r\n\r\n    if (columnDefinitions && Array.isArray(columnDefinitions) && options.enableHeaderMenu) {\r\n      columnDefinitions.forEach((columnDef: Column) => {\r\n        if (columnDef && !columnDef.excludeFromHeaderMenu) {\r\n          if (!columnDef.header || !columnDef.header.menu) {\r\n            columnDef.header = {\r\n              menu: {\r\n                items: []\r\n              }\r\n            };\r\n          }\r\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\r\n\r\n          // Sorting Commands\r\n          if (options.enableSorting && columnDef.sortable && !headerMenuOptions.hideSortCommands) {\r\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-asc').length === 0) {\r\n              columnHeaderMenuItems.push({\r\n                iconCssClass: headerMenuOptions.iconSortAscCommand || 'fa fa-sort-asc',\r\n                title: options.enableTranslate ? this.translate.instant('SORT_ASCENDING') : 'Sort Ascending',\r\n                command: 'sort-asc',\r\n                positionOrder: 50\r\n              });\r\n            }\r\n            if (columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'sort-desc').length === 0) {\r\n              columnHeaderMenuItems.push({\r\n                iconCssClass: headerMenuOptions.iconSortDescCommand || 'fa fa-sort-desc',\r\n                title: options.enableTranslate ? this.translate.instant('SORT_DESCENDING') : 'Sort Descending',\r\n                command: 'sort-desc',\r\n                positionOrder: 51\r\n              });\r\n            }\r\n          }\r\n\r\n          // Hide Column Command\r\n          if (!headerMenuOptions.hideColumnHideCommand && columnHeaderMenuItems.filter((item: HeaderMenuItem) => item.command === 'hide').length === 0) {\r\n            columnHeaderMenuItems.push({\r\n              iconCssClass: headerMenuOptions.iconColumnHideCommand || 'fa fa-times',\r\n              title: options.enableTranslate ? this.translate.instant('HIDE_COLUMN') : 'Hide Column',\r\n              command: 'hide',\r\n              positionOrder: 52\r\n            });\r\n          }\r\n\r\n          // sort the custom items by their position in the list\r\n          columnHeaderMenuItems.sort((itemA, itemB) => {\r\n            if (itemA && itemB && itemA.hasOwnProperty('positionOrder') && itemB.hasOwnProperty('positionOrder')) {\r\n              return itemA.positionOrder - itemB.positionOrder;\r\n            }\r\n            return 0;\r\n          });\r\n        }\r\n      });\r\n\r\n    }\r\n\r\n    return headerMenuOptions;\r\n  }\r\n\r\n  /** Execute the Header Menu Commands that was triggered by the onCommand subscribe */\r\n  executeHeaderMenuInternalCommands(e: Event, args: HeaderMenuOnCommandArgs) {\r\n    if (args && args.command) {\r\n      switch (args.command) {\r\n        case 'hide':\r\n        this.hideColumn(args.column);\r\n        this.autoResizeColumns();\r\n          break;\r\n        case 'sort-asc':\r\n        case 'sort-desc':\r\n          // get previously sorted columns\r\n          const cols: ColumnSort[] = this.sortService.getPreviousColumnSorts(args.column.id + '');\r\n\r\n          // add to the column array, the column sorted by the header menu\r\n          cols.push({ sortCol: args.column, sortAsc: (args.command === 'sort-asc') });\r\n          if (this._gridOptions.backendServiceApi) {\r\n            this.sortService.onBackendSortChanged(e, { multiColumnSort: true, sortCols: cols, grid: this._grid });\r\n          } else {\r\n            this.sortService.onLocalSortChanged(this._grid, this._dataView, cols);\r\n          }\r\n\r\n          // update the this.gridObj sortColumns array which will at the same add the visual sort icon(s) on the UI\r\n          const newSortColumns: ColumnSort[] = cols.map((col) => {\r\n            return { columnId: col.sortCol.id, sortAsc: col.sortAsc };\r\n          });\r\n          this._grid.setSortColumns(newSortColumns); // add sort icon in UI\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute the Grid Menu Custom command callback that was triggered by the onCommand subscribe\r\n   * These are the default internal custom commands\r\n   */\r\n  executeGridMenuInternalCustomCommands(e: Event, args: CustomGridMenu) {\r\n    if (args && args.command) {\r\n      switch (args.command) {\r\n        case 'clear-filter':\r\n          this.filterService.clearFilters();\r\n          this._dataView.refresh();\r\n          break;\r\n        case 'clear-sorting':\r\n          this.sortService.clearSorting();\r\n          this._dataView.refresh();\r\n          break;\r\n        case 'export-csv':\r\n          this.exportService.exportToFile({\r\n            delimiter: DelimiterType.comma,\r\n            filename: 'export',\r\n            format: FileType.csv,\r\n            useUtf8WithBom: true\r\n          });\r\n          break;\r\n        case 'export-text-delimited':\r\n          this.exportService.exportToFile({\r\n            delimiter: DelimiterType.tab,\r\n            filename: 'export',\r\n            format: FileType.txt,\r\n            useUtf8WithBom: true\r\n          });\r\n          break;\r\n        case 'toggle-filter':\r\n          this._grid.setHeaderRowVisibility(!this._grid.getOptions().showHeaderRow);\r\n          break;\r\n        case 'toggle-toppanel':\r\n          this._grid.setTopPanelVisibility(!this._grid.getOptions().showTopPanel);\r\n          break;\r\n        case 'refresh-dataset':\r\n          this.refreshBackendDataset();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Refresh the dataset through the Backend Service */\r\n  refreshBackendDataset() {\r\n    let query;\r\n    const backendApi = this._gridOptions.backendServiceApi;\r\n    if (!backendApi || !backendApi.service || !backendApi.process) {\r\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\r\n    }\r\n\r\n    if (backendApi.service) {\r\n      query = backendApi.service.buildQuery();\r\n    }\r\n\r\n    if (query && query !== '') {\r\n      if (backendApi.preProcess) {\r\n        backendApi.preProcess();\r\n      }\r\n\r\n      // the process could be an Observable (like HttpClient) or a Promise\r\n      // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\r\n      const observableOrPromise = backendApi.process(query);\r\n\r\n      castToPromise(observableOrPromise).then((processResult: GraphqlResult | any) => {\r\n        // from the result, call our internal post process to update the Dataset and Pagination info\r\n        if (processResult && backendApi.internalPostProcess) {\r\n          backendApi.internalPostProcess(processResult);\r\n        }\r\n\r\n        // send the response process to the postProcess callback\r\n        if (backendApi.postProcess) {\r\n          backendApi.postProcess(processResult);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Remove a column from the grid by it's index in the grid */\r\n  removeColumnByIndex(array: any[], index: number) {\r\n    return array.filter((el: any, i: number) => {\r\n      return index !== i;\r\n    });\r\n  }\r\n\r\n  /** Translate the Column Picker and it's last 2 checkboxes */\r\n  translateColumnPicker() {\r\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\r\n    if (this._gridOptions && this._gridOptions.columnPicker) {\r\n      this._gridOptions.columnPicker.columnTitle = this.getDefaultTranslationByKey('columns');\r\n      this._gridOptions.columnPicker.forceFitTitle = this.getDefaultTranslationByKey('forcefit');\r\n      this._gridOptions.columnPicker.syncResizeTitle = this.getDefaultTranslationByKey('synch');\r\n    }\r\n    this.translateHeaderKeys(this.allColumns);\r\n  }\r\n\r\n  /** Translate the Grid Menu titles and column picker */\r\n  translateGridMenu() {\r\n    // update the properties by pointers, that is the only way to get Grid Menu Control to see the new values\r\n    // we also need to call the control init so that it takes the new Grid object with latest values\r\n    if (this._gridOptions && this._gridOptions.gridMenu) {\r\n      this._gridOptions.gridMenu.customItems = [];\r\n      this._gridOptions.gridMenu.customTitle = '';\r\n      this._gridOptions.gridMenu.columnTitle = this.getDefaultTranslationByKey('columns');\r\n      this._gridOptions.gridMenu.forceFitTitle = this.getDefaultTranslationByKey('forcefit');\r\n      this._gridOptions.gridMenu.syncResizeTitle = this.getDefaultTranslationByKey('synch');\r\n\r\n      // translate all columns (including non-visible)\r\n      this.translateHeaderKeys(this.allColumns);\r\n\r\n      // re-create the list of Custom Commands\r\n      this.addGridMenuCustomCommands(this._grid);\r\n      this.gridMenuControl.init(this._grid);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Translate the Header Menu titles, we need to loop through all column definition to re-translate them\r\n   */\r\n  translateHeaderMenu() {\r\n    if (this._gridOptions && this._gridOptions.headerMenu) {\r\n      this.resetHeaderMenuTranslations(this.visibleColumns);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Translate manually the header titles.\r\n   * We could optionally pass a locale (that will change currently loaded locale), else it will use current locale\r\n   * @param locale locale to use\r\n   */\r\n  translateColumnHeaders(locale?: boolean | string, newColumnDefinitions?: Column[]) {\r\n    if (locale) {\r\n      this.translate.use(locale as string);\r\n    }\r\n\r\n    const columnDefinitions = newColumnDefinitions || this._columnDefinitions;\r\n\r\n    this.translateHeaderKeys(columnDefinitions);\r\n    this.translateHeaderKeys(this.allColumns);\r\n\r\n    // re-render the column headers\r\n    this.renderColumnHeaders(columnDefinitions);\r\n  }\r\n\r\n  /**\r\n   * Render (or re-render) the column headers from column definitions.\r\n   * calling setColumns() will trigger a grid re-render\r\n   */\r\n  renderColumnHeaders(newColumnDefinitions?: Column[]) {\r\n    const collection = newColumnDefinitions || this._columnDefinitions;\r\n    if (Array.isArray(collection) && this._grid && this._grid.setColumns) {\r\n      this._grid.setColumns(collection);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return default Grid Menu options\r\n   */\r\n  private getDefaultGridMenuOptions(): GridMenu {\r\n    return {\r\n      columnTitle: this.getDefaultTranslationByKey('columns'),\r\n      forceFitTitle: this.getDefaultTranslationByKey('forcefit'),\r\n      syncResizeTitle: this.getDefaultTranslationByKey('synch'),\r\n      iconCssClass: 'fa fa-bars',\r\n      menuWidth: 18,\r\n      customTitle: undefined,\r\n      customItems: [],\r\n      hideClearAllFiltersCommand: false,\r\n      hideRefreshDatasetCommand: false,\r\n      hideToggleFilterCommand: false\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @return default Header Menu options\r\n   */\r\n  private getDefaultHeaderMenuOptions(): HeaderMenu {\r\n    return {\r\n      autoAlignOffset: 12,\r\n      minWidth: 140,\r\n      hideColumnHideCommand: false,\r\n      hideSortCommands: false\r\n    };\r\n  }\r\n\r\n  private getDefaultTranslationByKey(key: 'commands' | 'columns' | 'forcefit' | 'synch') {\r\n    let output = '';\r\n    switch (key) {\r\n      case 'commands':\r\n        output = this.translate.instant('COMMANDS') || 'Commands';\r\n        break;\r\n      case 'columns':\r\n        output = this.translate.instant('COLUMNS') || 'Columns';\r\n        break;\r\n      case 'forcefit':\r\n        output = this.translate.instant('FORCE_FIT_COLUMNS') || 'Force fit columns';\r\n        break;\r\n      case 'synch':\r\n        output = this.translate.instant('SYNCHRONOUS_RESIZE') || 'Synchronous resize';\r\n        break;\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Reset all the Grid Menu options which have text to translate\r\n   * @param grid menu object\r\n   */\r\n  private resetGridMenuTranslations(gridMenu: GridMenu): GridMenu {\r\n    // we will reset the custom items array since the commands title have to be translated too (no worries, we will re-create it later)\r\n    gridMenu.customItems = [];\r\n    delete gridMenu.customTitle;\r\n\r\n    gridMenu.columnTitle = this.getDefaultTranslationByKey('columns');\r\n    gridMenu.forceFitTitle = this.getDefaultTranslationByKey('forcefit');\r\n    gridMenu.syncResizeTitle = this.getDefaultTranslationByKey('synch');\r\n\r\n    return gridMenu;\r\n  }\r\n\r\n  /**\r\n   * Reset all the Grid Menu options which have text to translate\r\n   * @param grid menu object\r\n   */\r\n  private resetHeaderMenuTranslations(columnDefinitions: Column[]) {\r\n    columnDefinitions.forEach((columnDef: Column) => {\r\n      if (columnDef && columnDef.header && columnDef.header && columnDef.header.menu && columnDef.header.menu.items) {\r\n        if (!columnDef.excludeFromHeaderMenu) {\r\n          const columnHeaderMenuItems: HeaderMenuItem[] = columnDef.header.menu.items || [];\r\n\r\n          columnHeaderMenuItems.forEach((item) => {\r\n            switch (item.command) {\r\n              case 'sort-asc':\r\n                item.title = this.translate.instant('SORT_ASCENDING') || 'Sort Ascending';\r\n                break;\r\n              case 'sort-desc':\r\n                item.title = this.translate.instant('SORT_DESCENDING') || 'Sort Ascending';\r\n                break;\r\n              case 'hide':\r\n                item.title = this.translate.instant('HIDE_COLUMN') || 'Sort Ascending';\r\n                break;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Translate the columns headerKey\r\n   * Note that this is done through pointers so we don't need to return anything to see them translated\r\n   */\r\n  private translateHeaderKeys(columns: Column[]) {\r\n    for (const column of columns) {\r\n      if (column.headerKey) {\r\n        column.name = this.translate.instant(column.headerKey);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\nimport { castToPromise } from './utilities';\nimport {\n  CellArgs,\n  Column,\n  ColumnSort,\n  CurrentSorter,\n  FieldType,\n  GridOption,\n  SlickEvent,\n  SortDirection,\n  SortDirectionString\n} from './../models/index';\nimport { sortByFieldType } from '../sorters/sorterUtilities';\nimport { Sorters } from './../sorters';\nimport { Subject } from 'rxjs/Subject';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\n\nexport class SortService {\n  private _currentLocalSorters: CurrentSorter[] = [];\n  private _eventHandler: any = new Slick.EventHandler();\n  private _dataView: any;\n  private _grid: any;\n  private _slickSubscriber: SlickEvent;\n  private _isBackendGrid = false;\n  onSortChanged = new Subject<CurrentSorter[]>();\n  onSortCleared = new Subject<boolean>();\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  /**\n   * Attach a backend sort (single/multi) hook to the grid\n   * @param grid SlickGrid Grid object\n   * @param dataView SlickGrid DataView object\n   */\n  attachBackendOnSort(grid: any, dataView: any) {\n    this._isBackendGrid = true;\n    this._grid = grid;\n    this._dataView = dataView;\n    this._slickSubscriber = grid.onSort;\n\n    // subscribe to the SlickGrid event and call the backend execution\n    this._slickSubscriber.subscribe(this.onBackendSortChanged.bind(this));\n  }\n\n  async onBackendSortChanged(event: Event, args: any) {\n    if (!args || !args.grid) {\n      throw new Error('Something went wrong when trying to attach the \"onBackendSortChanged(event, args)\" function, it seems that \"args\" is not populated correctly');\n    }\n    const gridOptions: GridOption = args.grid.getOptions() || {};\n    const backendApi = gridOptions.backendServiceApi;\n\n    if (!backendApi || !backendApi.process || !backendApi.service) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n    if (backendApi.preProcess) {\n      backendApi.preProcess();\n    }\n    const query = backendApi.service.processOnSortChanged(event, args);\n    this.emitSortChanged('remote');\n\n    // the process could be an Observable (like HttpClient) or a Promise\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n    const observableOrPromise = backendApi.process(query);\n    const processResult = await castToPromise(observableOrPromise);\n\n    // from the result, call our internal post process to update the Dataset and Pagination info\n    if (processResult && backendApi.internalPostProcess) {\n      backendApi.internalPostProcess(processResult);\n    }\n\n    // send the response process to the postProcess callback\n    if (backendApi.postProcess) {\n      backendApi.postProcess(processResult);\n    }\n  }\n\n  /**\n   * Attach a local sort (single/multi) hook to the grid\n   * @param grid SlickGrid Grid object\n   * @param gridOptions Grid Options object\n   * @param dataView\n   */\n  attachLocalOnSort(grid: any, dataView: any) {\n    this._isBackendGrid = false;\n    this._grid = grid;\n    this._dataView = dataView;\n    this._slickSubscriber = grid.onSort;\n\n    this._slickSubscriber.subscribe((e: any, args: any) => {\n      // multiSort and singleSort are not exactly the same, but we want to structure it the same for the (for loop) after\n      // also to avoid having to rewrite the for loop in the sort, we will make the singleSort an array of 1 object\n      const sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({sortAsc: args.sortAsc, sortCol: args.sortCol});\n\n      // keep current sorters\n      this._currentLocalSorters = []; // reset current local sorters\n      if (Array.isArray(sortColumns)) {\n        sortColumns.forEach((sortColumn: { sortCol: Column, sortAsc: number }) => {\n          if (sortColumn.sortCol) {\n            this._currentLocalSorters.push({\n              columnId: sortColumn.sortCol.id,\n              direction: sortColumn.sortAsc ? SortDirection.ASC : SortDirection.DESC\n            });\n          }\n        });\n      }\n\n      this.onLocalSortChanged(grid, dataView, sortColumns);\n      this.emitSortChanged('local');\n    });\n  }\n\n  clearSorting() {\n    if (this._grid && this._gridOptions && this._dataView) {\n      // remove any sort icons (this setSortColumns function call really does only that)\n      this._grid.setSortColumns([]);\n\n      // we also need to trigger a sort change\n      // for a backend grid, we will trigger a backend sort changed with an empty sort columns array\n      // however for a local grid, we need to pass a sort column and so we will sort by the 1st column\n      if (this._isBackendGrid) {\n        this.onBackendSortChanged(undefined, { grid: this._grid, sortCols: [] });\n      } else {\n        if (this._columnDefinitions && Array.isArray(this._columnDefinitions)) {\n          this.onLocalSortChanged(this._grid, this._dataView, new Array({sortAsc: true, sortCol: this._columnDefinitions[0] }));\n        }\n      }\n    }\n    // set current sorter to empty & emit a sort changed event\n    this._currentLocalSorters = [];\n\n    // emit an event when filters are all cleared\n    this.onSortCleared.next(true);\n  }\n\n  getCurrentLocalSorters(): CurrentSorter[] {\n    return this._currentLocalSorters;\n  }\n\n  /**\n   * Get column sorts,\n   * If a column is passed as an argument, we won't add this column to our output array since it is already in the array\n   * We want to know the sort prior to calling the next sorting command\n   */\n  getPreviousColumnSorts(columnId?: string) {\n    // getSortColumns() only returns sortAsc & columnId, we want the entire column definition\n    const oldSortColumns = this._grid.getSortColumns();\n\n    // get the column definition but only keep column which are not equal to our current column\n    const sortedCols = oldSortColumns.reduce((cols, col) => {\n      if (!columnId || col.columnId !== columnId) {\n        cols.push({ sortCol: this._columnDefinitions[this._grid.getColumnIndex(col.columnId)], sortAsc: col.sortAsc });\n      }\n      return cols;\n    }, []);\n\n    return sortedCols;\n  }\n\n  /**\n   * load any presets if there are any\n   * @param grid\n   * @param dataView\n   */\n  loadLocalPresets(grid: any, dataView: any) {\n    const sortCols: ColumnSort[] = [];\n    this._currentLocalSorters = []; // reset current local sorters\n    if (this._gridOptions && this._gridOptions.presets && this._gridOptions.presets.sorters) {\n      const sorters = this._gridOptions.presets.sorters;\n\n      sorters.forEach((presetSorting: CurrentSorter) => {\n        const gridColumn = this._columnDefinitions.find((col: Column) => col.id === presetSorting.columnId);\n        if (gridColumn) {\n          sortCols.push({\n            columnId: gridColumn.id,\n            sortAsc: ((presetSorting.direction.toUpperCase() === SortDirection.ASC) ? true : false),\n            sortCol: gridColumn\n          });\n\n          // keep current sorters\n          this._currentLocalSorters.push({\n            columnId: gridColumn.id + '',\n            direction: presetSorting.direction.toUpperCase() as SortDirectionString\n          });\n        }\n      });\n\n      if (sortCols.length > 0) {\n        this.onLocalSortChanged(grid, dataView, sortCols);\n        grid.setSortColumns(sortCols); // use this to add sort icon(s) in UI\n      }\n    }\n  }\n\n  onLocalSortChanged(grid: any, dataView: any, sortColumns: ColumnSort[]) {\n    dataView.sort((dataRow1: any, dataRow2: any) => {\n      for (let i = 0, l = sortColumns.length; i < l; i++) {\n        const columnSortObj = sortColumns[i];\n        if (columnSortObj && columnSortObj.sortCol) {\n          const sortDirection = columnSortObj.sortAsc ? SortDirectionNumber.asc : SortDirectionNumber.desc;\n          const sortField = columnSortObj.sortCol.queryField || columnSortObj.sortCol.queryFieldFilter || columnSortObj.sortCol.field;\n          const fieldType = columnSortObj.sortCol.type || FieldType.string;\n          const value1 = dataRow1[sortField];\n          const value2 = dataRow2[sortField];\n          const sortResult = sortByFieldType(value1, value2, fieldType, sortDirection);\n          if (sortResult !== SortDirectionNumber.neutral) {\n            return sortResult;\n          }\n        }\n      }\n      return 0;\n    });\n    grid.invalidate();\n    grid.render();\n  }\n\n  dispose() {\n    // unsubscribe local event\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\n      this._slickSubscriber.unsubscribe();\n    }\n\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n  }\n\n  /**\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\n   * Other services, like Pagination, can then subscribe to it.\n   * @param sender\n   */\n  emitSortChanged(sender: 'local' | 'remote') {\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\n      let currentSorters: CurrentSorter[] = [];\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentSorters) {\n        currentSorters = backendService.getCurrentSorters() as CurrentSorter[];\n      }\n      this.onSortChanged.next(currentSorters);\n    } else if (sender === 'local') {\n      this.onSortChanged.next(this.getCurrentLocalSorters());\n    }\n  }\n}\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  CellArgs,\r\n  CustomGridMenu,\r\n  Column,\r\n  DelimiterType,\r\n  ExportOption,\r\n  FileType,\r\n  Formatter,\r\n  GraphqlResult,\r\n  GridMenu,\r\n  GridOption,\r\n  HeaderButtonOnCommandArgs,\r\n  HeaderMenuOnCommandArgs,\r\n  HeaderMenuOnBeforeMenuShowArgs\r\n} from './../models/index';\r\nimport { addWhiteSpaces, htmlEntityDecode, sanitizeHtmlToText } from './../services/utilities';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { TextEncoder } from 'text-encoding-utf-8';\r\n\r\n// using external non-typed js libraries\r\ndeclare let Slick: any;\r\ndeclare let $: any;\r\n\r\nexport interface ExportColumnHeader {\r\n  key: string;\r\n  title: string;\r\n}\r\n\r\n@Injectable()\r\nexport class ExportService {\r\n  private _lineCarriageReturn = '\\n';\r\n  private _dataView: any;\r\n  private _grid: any;\r\n  private _exportQuoteWrapper: string;\r\n  private _columnHeaders: ExportColumnHeader[];\r\n  private _groupedHeaders: ExportColumnHeader[];\r\n  private _hasGroupedItems = false;\r\n  private _exportOptions: ExportOption;\r\n  onGridBeforeExportToFile = new Subject<boolean>();\r\n  onGridAfterExportToFile = new Subject<{ options: any }>();\r\n\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get _gridOptions(): GridOption {\r\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Export Service\r\n   * @param grid\r\n   * @param gridOptions\r\n   * @param dataView\r\n   */\r\n  init(grid: any, dataView: any): void {\r\n    this._grid = grid;\r\n    this._dataView = dataView;\r\n  }\r\n\r\n  /**\r\n   * Function to export the Grid result to an Excel CSV format using javascript for it to produce the CSV file.\r\n   * This is a WYSIWYG export to file output (What You See is What You Get)\r\n   *\r\n   * NOTES: The column position needs to match perfectly the JSON Object position because of the way we are pulling the data,\r\n   * which means that if any column(s) got moved in the UI, it has to be reflected in the JSON array output as well\r\n   *\r\n   * Example: exportToFile({ format: FileType.csv, delimiter: DelimiterType.comma })\r\n   */\r\n  exportToFile(options: ExportOption) {\r\n    this.onGridBeforeExportToFile.next(true);\r\n    this._exportOptions = $.extend(true, {}, this._gridOptions.exportOptions, options);\r\n\r\n    // get the CSV output from the grid data\r\n    const dataOutput = this.getDataOutput();\r\n\r\n    // trigger a download file\r\n    // wrap it into a setTimeout so that the EventAggregator has enough time to start a pre-process like showing a spinner\r\n    setTimeout(() => {\r\n      const downloadOptions = {\r\n        filename: `${this._exportOptions.filename}.${this._exportOptions.format}`,\r\n        csvContent: dataOutput,\r\n        format: this._exportOptions.format,\r\n        useUtf8WithBom: this._exportOptions.useUtf8WithBom\r\n      };\r\n      this.startDownloadFile(downloadOptions);\r\n      this.onGridAfterExportToFile.next({ options: downloadOptions });\r\n    }, 0);\r\n  }\r\n\r\n  // -----------------------\r\n  // Private functions\r\n  // -----------------------\r\n\r\n  getDataOutput(): string {\r\n    const columns = this._grid.getColumns() || [];\r\n    const delimiter = this._exportOptions.delimiter || '';\r\n    const format = this._exportOptions.format || '';\r\n    const groupByColumnHeader = this._exportOptions.groupingColumnHeaderTitle || this.translate.instant('GROUP_BY');\r\n\r\n    // a CSV needs double quotes wrapper, the other types do not need any wrapper\r\n    this._exportQuoteWrapper = (format === FileType.csv) ? '\"' : '';\r\n\r\n    // data variable which will hold all the fields data of a row\r\n    let outputDataString = '';\r\n\r\n    // get grouped column titles and if found, we will add a \"Group by\" column at the first column index\r\n    const grouping = this._dataView.getGrouping();\r\n    if (grouping && Array.isArray(grouping) && grouping.length > 0) {\r\n      this._hasGroupedItems = true;\r\n      outputDataString += `${groupByColumnHeader}` + delimiter;\r\n    } else {\r\n      this._hasGroupedItems = false;\r\n    }\r\n\r\n    // get all column headers\r\n    this._columnHeaders = this.getColumnHeaders(columns) || [];\r\n    if (this._columnHeaders && Array.isArray(this._columnHeaders) && this._columnHeaders.length > 0) {\r\n      // add the header row + add a new line at the end of the row\r\n      const outputHeaderTitles = this._columnHeaders.map((header) => {\r\n        return this._exportQuoteWrapper + header.title + this._exportQuoteWrapper;\r\n      });\r\n      outputDataString += (outputHeaderTitles.join(delimiter) + this._lineCarriageReturn);\r\n    }\r\n\r\n    // Populate the rest of the Grid Data\r\n    outputDataString += this.getAllGridRowData(columns, this._lineCarriageReturn);\r\n\r\n    return outputDataString;\r\n  }\r\n\r\n  /**\r\n   * Get all the grid row data and return that as an output string\r\n   */\r\n  getAllGridRowData(columns: Column[], lineCarriageReturn: string): string {\r\n    let outputDataString = '';\r\n    const lineCount = this._dataView.getLength();\r\n\r\n    // loop through all the grid rows of data\r\n    for (let rowNumber = 0; rowNumber < lineCount; rowNumber++) {\r\n      const itemObj = this._dataView.getItem(rowNumber);\r\n\r\n      if (itemObj != null) {\r\n        // Normal row (not grouped by anything) would have an ID which was predefined in the Grid Columns definition\r\n        if (itemObj.id != null) {\r\n          // get regular row item data\r\n          outputDataString += this.readRegularRowData(columns, rowNumber, itemObj);\r\n        } else if (this._hasGroupedItems && itemObj.__groupTotals === undefined) {\r\n          // get the group row\r\n          outputDataString += this.readGroupedTitleRow(itemObj) + this._exportOptions.delimiter;\r\n        } else if (itemObj.__groupTotals) {\r\n          // else if the row is a Group By and we have agreggators, then a property of '__groupTotals' would exist under that object\r\n          outputDataString += this.readGroupedTotalRow(columns, itemObj) + this._exportOptions.delimiter;\r\n        }\r\n        outputDataString += lineCarriageReturn;\r\n      }\r\n    }\r\n\r\n    return outputDataString;\r\n  }\r\n\r\n  /**\r\n   * Get all header titles and their keys, translate the title when required.\r\n   * @param columns of the grid\r\n   */\r\n  getColumnHeaders(columns: Column[]): ExportColumnHeader[] {\r\n    if (!columns || !Array.isArray(columns) || columns.length === 0) {\r\n      return null;\r\n    }\r\n    const columnHeaders = [];\r\n\r\n    // Populate the Column Header, pull the name defined\r\n    columns.forEach((columnDef) => {\r\n      const fieldName = (columnDef.headerKey) ? this.translate.instant(columnDef.headerKey) : columnDef.name;\r\n      const skippedField = columnDef.excludeFromExport || false;\r\n\r\n      // if column width is 0 then it's not evaluated since that field is considered hidden should not be part of the export\r\n      if ((columnDef.width ===  undefined || columnDef.width > 0) && !skippedField) {\r\n        columnHeaders.push({\r\n          key: columnDef.field || columnDef.id,\r\n          title: fieldName\r\n        });\r\n      }\r\n    });\r\n\r\n    return columnHeaders;\r\n  }\r\n\r\n  /**\r\n   * Get the data of a regular row (a row without grouping)\r\n   * @param row\r\n   * @param itemObj\r\n   */\r\n  readRegularRowData(columns: Column[], row: number, itemObj: any) {\r\n    let idx = 0;\r\n    let rowOutputString = '';\r\n    const delimiter = this._exportOptions.delimiter;\r\n    const format = this._exportOptions.format;\r\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\r\n\r\n    for (let col = 0, ln = columns.length; col < ln; col++) {\r\n      const columnDef = columns[col];\r\n      const fieldId = columnDef.field || columnDef.id || '';\r\n\r\n      // skip excluded column\r\n      if (columnDef.excludeFromExport) {\r\n          continue;\r\n      }\r\n\r\n      // if we are grouping and are on 1st column index, we need to skip this column since it will be used later by the grouping text:: Group by [columnX]\r\n      if (this._hasGroupedItems && idx === 0) {\r\n        rowOutputString += `\"\"` + delimiter;\r\n      }\r\n\r\n      // does the user want to evaluate current column Formatter?\r\n      const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : this._exportOptions.exportWithFormatter;\r\n\r\n      // did the user provide a Custom Formatter for the export\r\n      const exportCustomFormatter: Formatter = (columnDef.exportCustomFormatter !== undefined) ? columnDef.exportCustomFormatter : undefined;\r\n\r\n      let itemData = '';\r\n\r\n      if (exportCustomFormatter) {\r\n        itemData = exportCustomFormatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\r\n      } else if (isEvaluatingFormatter && !!columnDef.formatter) {\r\n        itemData = columnDef.formatter(row, col, itemObj[fieldId], columnDef, itemObj, this._grid);\r\n      } else {\r\n        itemData = (itemObj[fieldId] === null || itemObj[fieldId] === undefined) ? '' : itemObj[fieldId];\r\n      }\r\n\r\n      // does the user want to sanitize the output data (remove HTML tags)?\r\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\r\n        itemData = sanitizeHtmlToText(itemData);\r\n      }\r\n\r\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\r\n      if (format === FileType.csv) {\r\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\r\n      }\r\n\r\n      // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\r\n      // to cancel that effect we can had = in front, ex: =\"1E06\"\r\n      const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\r\n\r\n      rowOutputString += keepAsStringWrapper + exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\r\n      idx++;\r\n    }\r\n\r\n    return rowOutputString;\r\n  }\r\n\r\n  /**\r\n   * Get the grouped title(s), for example if we grouped by salesRep, the returned result would be:: 'Sales Rep'\r\n   * @param itemObj\r\n   */\r\n  readGroupedTitleRow(itemObj: any) {\r\n    let groupName = sanitizeHtmlToText(itemObj.title);\r\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\r\n    const delimiter = this._exportOptions.delimiter;\r\n    const format = this._exportOptions.format;\r\n\r\n    groupName = addWhiteSpaces(5 * itemObj.level) + groupName;\r\n\r\n    if (format === FileType.csv) {\r\n      // when CSV we also need to escape double quotes twice, so \" becomes \"\"\r\n      groupName = groupName.toString().replace(/\"/gi, `\"\"`);\r\n    }\r\n\r\n    // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\r\n    // to cancel that effect we can had = in front, ex: =\"1E06\"\r\n    // const keepAsStringWrapper = (columnDef && columnDef.exportCsvForceToKeepAsString) ? '=' : '';\r\n\r\n    return /*keepAsStringWrapper +*/ exportQuoteWrapper + ' ' + groupName + exportQuoteWrapper + delimiter;\r\n  }\r\n\r\n  /**\r\n   * Get the grouped totals, these are set by Slick Aggregators.\r\n   * For example if we grouped by \"salesRep\" and we have a Sum Aggregator on \"sales\", then the returned output would be:: [\"Sum 123$\"]\r\n   * @param itemObj\r\n   */\r\n  readGroupedTotalRow(columns: Column[], itemObj: any) {\r\n    let exportExponentialWrapper = '';\r\n    const delimiter = this._exportOptions.delimiter;\r\n    const format = this._exportOptions.format;\r\n    const groupingAggregatorRowText = this._exportOptions.groupingAggregatorRowText || '';\r\n    const exportQuoteWrapper = this._exportQuoteWrapper || '';\r\n    let output = `${exportQuoteWrapper}${groupingAggregatorRowText}${exportQuoteWrapper}${delimiter}`;\r\n\r\n    columns.forEach((columnDef) => {\r\n      let itemData = '';\r\n\r\n      // if there's a groupTotalsFormatter, we will re-run it to get the exact same output as what is shown in UI\r\n      if (columnDef.groupTotalsFormatter) {\r\n        itemData = columnDef.groupTotalsFormatter(itemObj, columnDef);\r\n      }\r\n\r\n      // does the user want to sanitize the output data (remove HTML tags)?\r\n      if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\r\n        itemData = sanitizeHtmlToText(itemData);\r\n      }\r\n\r\n      if (format === FileType.csv) {\r\n        // when CSV we also need to escape double quotes twice, so a double quote \" becomes 2x double quotes \"\"\r\n        // and if we have a text of (number)E(number),\r\n        // we don't want excel to transform it into exponential (1.0E06) to cancel that effect we can had = in front, ex: =\"1E06\"\r\n        itemData = itemData.toString().replace(/\"/gi, `\"\"`);\r\n        exportExponentialWrapper = (itemData.match(/^\\s*\\d+E\\d+\\s*$/i)) ? '=' : '';\r\n      }\r\n      output += exportQuoteWrapper + itemData + exportQuoteWrapper + delimiter;\r\n    });\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Triggers download file with file format.\r\n   * IE(6-10) are not supported\r\n   * All other browsers will use plain javascript on client side to produce a file download.\r\n   * @param options\r\n   */\r\n  startDownloadFile(options: { filename: string, csvContent: any, format: FileType | string, useUtf8WithBom: boolean }): void {\r\n    // IE(6-10) don't support javascript download and our service doesn't support either so throw an error, we have to make a round trip to the Web Server for exporting\r\n    if (navigator.appName === 'Microsoft Internet Explorer') {\r\n      throw new Error('Microsoft Internet Explorer 6 to 10 do not support javascript export to CSV. Please upgrade your browser.');\r\n    }\r\n\r\n    // set the correct MIME type\r\n    const mimeType = (options.format === FileType.csv) ? 'text/csv' : 'text/plain';\r\n\r\n    // make sure no html entities exist in the data\r\n    const csvContent = htmlEntityDecode(options.csvContent);\r\n\r\n    // dealing with Excel CSV export and UTF-8 is a little tricky.. We will use Option #2 to cover older Excel versions\r\n    // Option #1: we need to make Excel knowing that it's dealing with an UTF-8, A correctly formatted UTF8 file can have a Byte Order Mark as its first three octets\r\n    // reference: http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\r\n    // Option#2: use a 3rd party extension to javascript encode into UTF-16\r\n    let outputData: Uint8Array | string;\r\n    if (options.format === FileType.csv) {\r\n      outputData = new TextEncoder('utf-8').encode(csvContent);\r\n    } else {\r\n      outputData = csvContent;\r\n    }\r\n\r\n    // create a Blob object for the download\r\n    const blob = new Blob([options.useUtf8WithBom ? '\\uFEFF' : '', outputData], {\r\n      type: `${mimeType};charset=utf-8;`\r\n    });\r\n\r\n    // when using IE/Edge, then use different download call\r\n    if (typeof navigator.msSaveOrOpenBlob === 'function') {\r\n      navigator.msSaveOrOpenBlob(blob, options.filename);\r\n    } else {\r\n      // this trick will generate a temp <a /> tag\r\n      // the code will then trigger a hidden click for it to start downloading\r\n      const link = document.createElement('a');\r\n      const csvUrl = URL.createObjectURL(blob);\r\n\r\n      link.textContent = 'download';\r\n      link.href = csvUrl;\r\n      link.setAttribute('download', options.filename);\r\n\r\n      // set the visibility to hidden so there is no effect on your web-layout\r\n      link.style.visibility = 'hidden';\r\n\r\n      // this part will append the anchor tag, trigger a click (for download to start) and finally remove the tag once completed\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    }\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CollectionService } from './collection.service';\nimport { castToPromise } from './utilities';\nimport { FilterConditions } from './../filter-conditions';\nimport { Filters } from './../filters';\nimport {\n  Column,\n  ColumnFilter,\n  ColumnFilters,\n  Filter,\n  FilterArguments,\n  FilterCallbackArg,\n  FieldType,\n  FilterType,\n  GridOption,\n  OperatorType,\n  CurrentFilter,\n  SearchTerm,\n  SlickEvent,\n  OperatorString\n} from './../models/index';\nimport { Subject } from 'rxjs/Subject';\n\n// using external non-typed js libraries\ndeclare var Slick: any;\ndeclare var $: any;\n\n@Injectable()\nexport class FilterService {\n  private _eventHandler = new Slick.EventHandler();\n  private _slickSubscriber: SlickEvent;\n  private _filters: any[] = [];\n  private _columnFilters: ColumnFilters = {};\n  private _dataView: any;\n  private _grid: any;\n  private _onFilterChangedOptions: any;\n  private _isFirstQuery = true;\n  onFilterChanged = new Subject<CurrentFilter[]>();\n  onFilterCleared = new Subject<boolean>();\n\n  constructor(private collectionService: CollectionService, private translate: TranslateService) { }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  private get _gridOptions(): GridOption {\n    return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};\n  }\n\n  /** Getter for the Column Definitions pulled through the Grid Object */\n  private get _columnDefinitions(): Column[] {\n    return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];\n  }\n\n  init(grid: any): void {\n    this._grid = grid;\n  }\n\n  /**\n   * Attach a backend filter hook to the grid\n   * @param grid SlickGrid Grid object\n   */\n  attachBackendOnFilter(grid: any) {\n    this._filters = [];\n    this._slickSubscriber = new Slick.Event();\n\n    // subscribe to the SlickGrid event and call the backend execution\n    this._slickSubscriber.subscribe(this.attachBackendOnFilterSubscribe.bind(this));\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  async attachBackendOnFilterSubscribe(event: Event, args: any) {\n    if (!args || !args.grid) {\n      throw new Error('Something went wrong when trying to attach the \"attachBackendOnFilterSubscribe(event, args)\" function, it seems that \"args\" is not populated correctly');\n    }\n    const backendApi = this._gridOptions.backendServiceApi;\n    if (!backendApi || !backendApi.process || !backendApi.service) {\n      throw new Error(`BackendServiceApi requires at least a \"process\" function and a \"service\" defined`);\n    }\n\n    // run a preProcess callback if defined\n    if (backendApi.preProcess) {\n      backendApi.preProcess();\n    }\n\n    // call the service to get a query back\n    const query = await backendApi.service.processOnFilterChanged(event, args);\n\n    // emit an onFilterChanged event\n    if (args && !args.clearFilterTriggered) {\n      this.emitFilterChanged('remote');\n    }\n\n    // the process could be an Observable (like HttpClient) or a Promise\n    // in any case, we need to have a Promise so that we can await on it (if an Observable, convert it to Promise)\n    const observableOrPromise = backendApi.process(query);\n    const processResult = await castToPromise(observableOrPromise);\n\n    // from the result, call our internal post process to update the Dataset and Pagination info\n    if (processResult && backendApi.internalPostProcess) {\n      backendApi.internalPostProcess(processResult);\n    }\n\n    // send the response process to the postProcess callback\n    if (backendApi.postProcess !== undefined) {\n      backendApi.postProcess(processResult);\n    }\n  }\n\n  /**\n   * Attach a local filter hook to the grid\n   * @param grid SlickGrid Grid object\n   * @param dataView\n   */\n  attachLocalOnFilter(grid: any, dataView: any) {\n    this._filters = [];\n    this._dataView = dataView;\n    this._slickSubscriber = new Slick.Event();\n\n    dataView.setFilterArgs({ columnFilters: this._columnFilters, grid: this._grid });\n    dataView.setFilter(this.customLocalFilter.bind(this, dataView));\n\n    this._slickSubscriber.subscribe((e: any, args: any) => {\n      const columnId = args.columnId;\n      if (columnId != null) {\n        dataView.refresh();\n      }\n      if (args && !args.clearFilterTriggered) {\n        this.emitFilterChanged('local');\n      }\n    });\n\n    // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template\n    this._eventHandler.subscribe(grid.onHeaderRowCellRendered, (e: Event, args: any) => {\n      this.addFilterTemplateToHeaderRow(args);\n    });\n  }\n\n  /** Clear the search filters (below the column titles) */\n  clearFilters() {\n    this._filters.forEach((filter: Filter) => {\n      if (filter && filter.clear) {\n        // clear element and trigger a change\n        filter.clear();\n      }\n    });\n\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to clear columnFilter (without looping through) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // we also need to refresh the dataView and optionally the grid (it's optional since we use DataView)\n    if (this._dataView) {\n      this._dataView.refresh();\n      this._grid.invalidate();\n      this._grid.render();\n    }\n\n    // emit an event when filters are all cleared\n    this.onFilterCleared.next(true);\n  }\n\n  customLocalFilter(dataView: any, item: any, args: any) {\n    for (const columnId of Object.keys(args.columnFilters)) {\n      const columnFilter = args.columnFilters[columnId];\n      const columnIndex = args.grid.getColumnIndex(columnId);\n      const columnDef = args.grid.getColumns()[columnIndex];\n      if (!columnDef) {\n        return false;\n      }\n      const fieldType = columnDef.type || FieldType.string;\n      const filterSearchType = (columnDef.filterSearchType) ? columnDef.filterSearchType : null;\n\n      let cellValue = item[columnDef.queryField || columnDef.queryFieldFilter || columnDef.field];\n      const searchTerms = (columnFilter && columnFilter.searchTerms) ? columnFilter.searchTerms : null;\n\n      let fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';\n      if (typeof fieldSearchValue === 'undefined') {\n        fieldSearchValue = '';\n      }\n      fieldSearchValue = '' + fieldSearchValue; // make sure it's a string\n\n      const matches = fieldSearchValue.match(/^([<>!=\\*]{0,2})(.*[^<>!=\\*])([\\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)\n      let operator = columnFilter.operator || ((matches) ? matches[1] : '');\n      const searchTerm = (!!matches) ? matches[2] : '';\n      const lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');\n\n      if (searchTerms && searchTerms.length > 1) {\n        fieldSearchValue = searchTerms.join(',');\n      } else if (typeof fieldSearchValue === 'string') {\n        // escaping the search value\n        fieldSearchValue = fieldSearchValue.replace(`'`, `''`); // escape single quotes by doubling them\n        if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {\n          operator = (operator === '*' || operator === '*z') ? OperatorType.endsWith : OperatorType.startsWith;\n        }\n      }\n\n      // when using a Filter that is not a custom type, we want to make sure that we have a default operator type\n      // for example a multiple-select should always be using IN, while a single select will use an EQ\n      const filterType = (columnDef.filter && columnDef.filter.type) ? columnDef.filter.type : FilterType.input;\n      if (!operator && filterType !== FilterType.custom) {\n        switch (filterType) {\n          case FilterType.select:\n          case FilterType.multipleSelect:\n            operator = 'IN';\n            break;\n          case FilterType.singleSelect:\n            operator = 'EQ';\n            break;\n          default:\n            operator = operator;\n            break;\n        }\n      }\n\n      // no need to query if search value is empty\n      if (searchTerm === '' && !searchTerms) {\n        return true;\n      }\n\n      // filter search terms should always be string type (even though we permit the end user to input numbers)\n      // so make sure each term are strings, if user has some default search terms, we will cast them to string\n      if (searchTerms && Array.isArray(searchTerms)) {\n        for (let k = 0, ln = searchTerms.length; k < ln; k++) {\n          // make sure all search terms are strings\n          searchTerms[k] = ((searchTerms[k] === undefined || searchTerms[k] === null) ? '' : searchTerms[k]) + '';\n        }\n      }\n\n      // when using localization (i18n), we should use the formatter output to search as the new cell value\n      if (columnDef && columnDef.params && columnDef.params.useFormatterOuputToFilter) {\n        const rowIndex = (dataView && typeof dataView.getIdxById === 'function') ? dataView.getIdxById(item.id) : 0;\n        cellValue = columnDef.formatter(rowIndex, columnIndex, cellValue, columnDef, item, this._grid);\n      }\n\n      // make sure cell value is always a string\n      if (typeof cellValue === 'number') {\n        cellValue = cellValue.toString();\n      }\n\n      const conditionOptions = {\n        fieldType,\n        searchTerms,\n        cellValue,\n        operator,\n        cellValueLastChar: lastValueChar,\n        filterSearchType\n      };\n\n      if (!FilterConditions.executeMappedCondition(conditionOptions)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  dispose() {\n    this.disposeColumnFilters();\n\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n\n    // unsubscribe local event\n    if (this._slickSubscriber && typeof this._slickSubscriber.unsubscribe === 'function') {\n      this._slickSubscriber.unsubscribe();\n    }\n  }\n\n  /**\n   * Dispose of the filters, since it's a singleton, we don't want to affect other grids with same columns\n   */\n  disposeColumnFilters() {\n    // we need to loop through all columnFilters and delete them 1 by 1\n    // only trying to make columnFilter an empty (without looping) would not trigger a dataset change\n    for (const columnId in this._columnFilters) {\n      if (columnId && this._columnFilters[columnId]) {\n        delete this._columnFilters[columnId];\n      }\n    }\n\n    // also destroy each Filter instances\n    this._filters.forEach((filter, index) => {\n      if (filter && filter.destroy) {\n        filter.destroy(true);\n      }\n    });\n  }\n\n  getColumnFilters() {\n    return this._columnFilters;\n  }\n\n  getCurrentLocalFilters(): CurrentFilter[] {\n    const currentFilters: CurrentFilter[] = [];\n    if (this._columnFilters) {\n      for (const colId of Object.keys(this._columnFilters)) {\n        const columnFilter = this._columnFilters[colId];\n        const columnDef = columnFilter.columnDef;\n        const filter = { columnId: colId || '' } as CurrentFilter;\n\n        if (columnFilter && columnFilter.searchTerms) {\n          filter.searchTerms = columnFilter.searchTerms;\n        }\n        if (columnFilter.operator) {\n          filter.operator = columnFilter.operator;\n        }\n        if (Array.isArray(filter.searchTerms) && filter.searchTerms.length > 0 && filter.searchTerms[0] !== '') {\n          currentFilters.push(filter);\n        }\n      }\n    }\n    return currentFilters;\n  }\n\n  callbackSearchEvent(e: Event | undefined, args: FilterCallbackArg) {\n    if (args) {\n      const searchTerm = ((e && e.target) ? (e.target as HTMLInputElement).value : undefined);\n      const searchTerms = (args.searchTerms && Array.isArray(args.searchTerms)) ? args.searchTerms : searchTerm ? [searchTerm] : undefined;\n      const columnDef = args.columnDef || null;\n      const columnId = columnDef ? (columnDef.id || '') : '';\n      const operator = args.operator || undefined;\n\n      if (!searchTerms || (Array.isArray(searchTerms) && searchTerms.length === 0)) {\n        // delete the property from the columnFilters when it becomes empty\n        // without doing this, it would leave an incorrect state of the previous column filters when filtering on another column\n        delete this._columnFilters[columnId];\n      } else {\n        const colId = '' + columnId as string;\n        const colFilter: ColumnFilter = {\n          columnId: colId,\n          columnDef,\n          searchTerms,\n        };\n        if (operator) {\n          colFilter.operator = operator;\n        }\n        this._columnFilters[colId] = colFilter;\n      }\n\n      this.triggerEvent(this._slickSubscriber, {\n        clearFilterTriggered: args && args.clearFilterTriggered,\n        columnId,\n        columnDef: args.columnDef || null,\n        columnFilters: this._columnFilters,\n        operator,\n        searchTerms,\n        serviceOptions: this._onFilterChangedOptions,\n        grid: this._grid\n      }, e);\n    }\n  }\n\n  addFilterTemplateToHeaderRow(args: { column: Column; grid: any; node: any }) {\n    const columnDef = args.column;\n    const columnId = columnDef.id || '';\n\n    if (columnDef && columnId !== 'selector' && columnDef.filterable) {\n      let searchTerms: SearchTerm[] | undefined;\n      let operator: OperatorString | OperatorType;\n\n      if (this._columnFilters[columnDef.id]) {\n        searchTerms = this._columnFilters[columnDef.id].searchTerms || undefined;\n        operator = this._columnFilters[columnDef.id].operator || undefined;\n      } else if (columnDef.filter) {\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // because of that we need to first get searchTerm(s) from the columnFilters (that is what the user last entered)\n        searchTerms = columnDef.filter.searchTerms || undefined;\n        operator = columnDef.filter.operator || undefined;\n        this.updateColumnFilters(searchTerms, columnDef);\n      }\n\n      const filterArguments: FilterArguments = {\n        grid: this._grid,\n        operator,\n        searchTerms,\n        columnDef,\n        callback: this.callbackSearchEvent.bind(this)\n      };\n\n      // depending on the Filter type, we will watch the correct event\n      // or use the global default when no filter type is provided\n      let filterType = (columnDef.filter && columnDef.filter.type) ? columnDef.filter.type : FilterType.input;\n      if (!filterType) {\n        filterType = this._gridOptions.defaultFilterType;\n      }\n\n      let filter: Filter;\n      switch (filterType) {\n        case FilterType.custom:\n          if (columnDef && columnDef.filter && columnDef.filter.customFilter) {\n            filter = columnDef.filter.customFilter;\n          }\n          break;\n        case FilterType.select:\n          filter = new Filters.select(this.translate);\n          break;\n        case FilterType.multipleSelect:\n          filter = new Filters.multipleSelect(this.collectionService, this.translate);\n          break;\n        case FilterType.singleSelect:\n          filter = new Filters.singleSelect(this.collectionService, this.translate);\n          break;\n        case FilterType.compoundDate:\n          filter = new Filters.compoundDate(this.translate);\n          break;\n        case FilterType.compoundInput:\n          filter = new Filters.compoundInput(this.translate);\n          break;\n        case FilterType.input:\n        default:\n          filter = new Filters.input();\n          break;\n      }\n\n      if (filter) {\n        filter.init(filterArguments);\n        const filterExistIndex = this._filters.findIndex((filt) => filter.columnDef.name === filt.columnDef.name);\n\n        // add to the filters arrays or replace it when found\n        if (filterExistIndex === -1) {\n          this._filters.push(filter);\n        } else {\n          this._filters[filterExistIndex] = filter;\n        }\n\n        // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)\n        // we need to also set again the values in the DOM elements if the values were set by a searchTerm(s)\n        if (searchTerms && filter.setValues) {\n          filter.setValues(searchTerms);\n        }\n      }\n    }\n  }\n\n  /**\n   * A simple function that is attached to the subscriber and emit a change when the sort is called.\n   * Other services, like Pagination, can then subscribe to it.\n   * @param sender\n   */\n  emitFilterChanged(sender: 'local' | 'remote') {\n    if (sender === 'remote' && this._gridOptions && this._gridOptions.backendServiceApi) {\n      let currentFilters: CurrentFilter[] = [];\n      const backendService = this._gridOptions.backendServiceApi.service;\n      if (backendService && backendService.getCurrentFilters) {\n        currentFilters = backendService.getCurrentFilters() as CurrentFilter[];\n      }\n      this.onFilterChanged.next(currentFilters);\n    } else if (sender === 'local') {\n      this.onFilterChanged.next(this.getCurrentLocalFilters());\n    }\n  }\n\n  /**\n   * When user passes an array of preset filters, we need to pre-populate each column filter searchTerm(s)\n   * The process is to loop through the preset filters array, find the associated column from columnDefinitions and fill in the filter object searchTerm(s)\n   * This is basically the same as if we would manually add searchTerm(s) to a column filter object in the column definition, but we do it programmatically.\n   * At the end of the day, when creating the Filter (DOM Element), it will use these searchTerm(s) so we can take advantage of that without recoding each Filter type (DOM element)\n   */\n  populateColumnFilterSearchTerms() {\n    if (this._gridOptions.presets && Array.isArray(this._gridOptions.presets.filters) && this._gridOptions.presets.filters.length > 0) {\n      const filters = this._gridOptions.presets.filters;\n      this._columnDefinitions.forEach((columnDef: Column) =>  {\n        // clear any columnDef searchTerms before applying Presets\n        if (columnDef.filter && columnDef.filter.searchTerms) {\n          delete columnDef.filter.searchTerms;\n        }\n\n        // from each presets, we will find the associated columnDef and apply the preset searchTerms & operator if there is\n        const columnPreset = filters.find((presetFilter: CurrentFilter) => {\n          return presetFilter.columnId === columnDef.id;\n        });\n        if (columnPreset && columnPreset.searchTerms && Array.isArray(columnPreset.searchTerms)) {\n          columnDef.filter = columnDef.filter || {};\n          columnDef.filter.operator = columnPreset.operator || columnDef.filter.operator || '';\n          columnDef.filter.searchTerms = columnPreset.searchTerms;\n        }\n      });\n    }\n    return this._columnDefinitions;\n  }\n\n  private updateColumnFilters(searchTerms: SearchTerm[] | undefined, columnDef: any) {\n    if (searchTerms) {\n      // this._columnFilters.searchTerms = searchTerms;\n      this._columnFilters[columnDef.id] = {\n        columnId: columnDef.id,\n        columnDef,\n        searchTerms,\n        operator: (columnDef && columnDef.filter && columnDef.filter.operator) ? columnDef.filter.operator : null,\n        type: (columnDef && columnDef.filter && columnDef.filter.type) ? columnDef.filter.type : FilterType.input\n      };\n    }\n  }\n\n  private triggerEvent(slickEvent: any, args: any, e: any) {\n    slickEvent = slickEvent || new Slick.Event();\n\n    // event might have been created as a CustomEvent (e.g. CompoundDateFilter), without being a valid Slick.EventData.\n    // if so we will create a new Slick.EventData and merge it with that CustomEvent to avoid having SlickGrid errors\n    let event = e;\n    if (e && typeof e.isPropagationStopped !== 'function') {\n      event = $.extend({}, new Slick.EventData(), e);\n    }\n    slickEvent.notify(args, event, args.grid);\n  }\n}\n",
    "import { Column, Filter } from './../models/index';\r\nimport { CompoundDateFilter } from './compoundDateFilter';\r\nimport { CompoundInputFilter } from './compoundInputFilter';\r\nimport { InputFilter } from './inputFilter';\r\nimport { MultipleSelectFilter } from './multipleSelectFilter';\r\nimport { SelectFilter } from './selectFilter';\r\nimport { SingleSelectFilter } from './singleSelectFilter';\r\n\r\nexport const Filters = {\r\n  /** Default Filter, input type text filter with a magnifying glass placeholder */\r\n  input: InputFilter,\r\n\r\n  /** Multiple Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  multipleSelect: MultipleSelectFilter,\r\n\r\n  /** Single Select filter, which uses 3rd party lib \"multiple-select.js\" */\r\n  singleSelect: SingleSelectFilter,\r\n\r\n  /** Select filter, which uses native DOM element select */\r\n  select: SelectFilter,\r\n\r\n  /** Compound Date Filter (compound of Operator + Date picker) */\r\n  compoundDate: CompoundDateFilter,\r\n\r\n  /** Compound Input Filter (compound of Operator + Input) */\r\n  compoundInput: CompoundInputFilter,\r\n};\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport { Injectable } from '@angular/core';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport {\r\n  Column,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  SearchTerm,\r\n  SelectOption,\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class SingleSelectFilter implements Filter {\r\n  $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n  defaultOptions: MultipleSelectOption;\r\n  isFilled = false;\r\n  labelName: string;\r\n  valueName: string;\r\n  enableTranslateLabel = false;\r\n\r\n  constructor(private collectionService: CollectionService, private translate: TranslateService) {\r\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,  // input search term on top of the select option list\r\n      maxHeight: 200,\r\n      single: true,\r\n      onClose: () => {\r\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\r\n        let selectedItem = '';\r\n\r\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\r\n          selectedItem = selectedItems[0];\r\n          this.isFilled = true;\r\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\r\n        } else {\r\n          this.isFilled = false;\r\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\r\n        }\r\n        this.callback(undefined, { columnDef: this.columnDef, operator: 'EQ', searchTerms: [selectedItem] });\r\n      }\r\n    };\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms;\r\n\r\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: type: FilterType.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\r\n    }\r\n\r\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\r\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\r\n\r\n    let newCollection = this.columnDef.filter.collection || [];\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\r\n      const filterBy = this.columnDef.filter.collectionFilterBy;\r\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\r\n      const sortBy = this.columnDef.filter.collectionSortBy;\r\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    // also when the search term is a boolean or a number, we will convert it to a string\r\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\r\n      searchTerm = `${searchTerm}`;\r\n    }\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString(newCollection || [], searchTerm);\r\n\r\n    // step 2, create the DOM Element of the filter & pre-load search term\r\n    this.createDomElement(filterTemplate);\r\n  }\r\n\r\n  /**\r\n   * Clear the filter values\r\n   */\r\n  clear() {\r\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\r\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\r\n      // this.$filterElm = $(`#${this.$filterElm[0].id}`);\r\n      this.$filterElm.multipleSelect('setSelects', []);\r\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off().remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm | SearchTerm[]) {\r\n    if (values) {\r\n      values = Array.isArray(values) ? values : [values];\r\n      this.$filterElm.multipleSelect('setSelects', values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString(optionCollection: any[], searchTerm?: SearchTerm) {\r\n    let options = '';\r\n    optionCollection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: type: FilterType.singleSelect, collection: [ { value: '1', label: 'One' } ]')`);\r\n      }\r\n\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n      const selected = (option[this.valueName] === searchTerm) ? 'selected' : '';\r\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      // html text of each select option\r\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\r\n\r\n      // if there's a search term, we will add the \"filled\" class for styling purposes\r\n      if (selected) {\r\n        this.isFilled = true;\r\n      }\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * Subscribe to the onClose event and run the callback when that happens\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    this.$filterElm = $(filterTemplate);\r\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\r\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\r\n    }\r\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    this.$filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // append the new DOM element to the header row\r\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\r\n      this.$filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    // merge options & attach multiSelect\r\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\r\n    this.$filterElm = this.$filterElm.multipleSelect(options);\r\n  }\r\n}\r\n",
    "import { TranslateService } from '@ngx-translate/core';\r\nimport { Column, Filter, FilterArguments, FilterCallback, SearchTerm } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class SelectFilter implements Filter {\r\n  $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    let searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n    if (typeof searchTerm === 'boolean' || typeof searchTerm === 'number') {\r\n      searchTerm = `${searchTerm}`;\r\n    }\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the change event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.change((e: any) => {\r\n      const value = e && e.target && e.target.value || '';\r\n      if (!value || value === '') {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, searchTerms: [value], operator: 'EQ' });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter values\r\n   */\r\n  clear() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.val('');\r\n      this.$filterElm.trigger('change');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm | SearchTerm[]) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  private buildTemplateHtmlString() {\r\n    if (!this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the Select Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: type: FilterType.select, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\r\n    }\r\n\r\n    const optionCollection = this.columnDef.filter.collection || [];\r\n    const labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\r\n    const valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\r\n\r\n    let options = '';\r\n    optionCollection.forEach((option: any) => {\r\n      if (!option || (option[labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: type: FilterType.select, collection: [ { value: '1', label: 'One' } ]')`);\r\n      }\r\n      const labelKey = option.labelKey || option[labelName];\r\n      const textLabel = ((option.labelKey || this.columnDef.filter.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\r\n      options += `<option value=\"${option[valueName]}\">${textLabel}</option>`;\r\n    });\r\n    return `<select class=\"form-control search-filter\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n    const searchTermInput = (searchTerm || '') as string;\r\n\r\n    $filterElm.val(searchTermInput);\r\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CollectionService } from './../services/collection.service';\r\nimport {\r\n  Column,\r\n  Filter,\r\n  FilterArguments,\r\n  FilterCallback,\r\n  GridOption,\r\n  MultipleSelectOption,\r\n  SearchTerm,\r\n  SelectOption,\r\n} from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class MultipleSelectFilter implements Filter {\r\n  $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n  defaultOptions: MultipleSelectOption;\r\n  isFilled = false;\r\n  labelName: string;\r\n  valueName: string;\r\n  enableTranslateLabel = false;\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  constructor(private collectionService: CollectionService, private translate: TranslateService) {\r\n    // default options used by this Filter, user can overwrite any of these by passing \"otions\"\r\n    this.defaultOptions = {\r\n      container: 'body',\r\n      filter: false,  // input search term on top of the select option list\r\n      maxHeight: 200,\r\n      okButton: true,\r\n      addTitle: true, // show tooltip of all selected items while hovering the filter\r\n      countSelected: this.translate.instant('X_OF_Y_SELECTED'),\r\n      allSelected: this.translate.instant('ALL_SELECTED'),\r\n      selectAllText: this.translate.instant('SELECT_ALL'),\r\n      selectAllDelimiter: ['', ''], // remove default square brackets of default text \"[Select All]\" => \"Select All\"\r\n\r\n      // we will subscribe to the onClose event for triggering our callback\r\n      // also add/remove \"filled\" class for styling purposes\r\n      onClose: () => {\r\n        const selectedItems = this.$filterElm.multipleSelect('getSelects');\r\n        if (Array.isArray(selectedItems) && selectedItems.length > 0) {\r\n          this.isFilled = true;\r\n          this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');\r\n        } else {\r\n          this.isFilled = false;\r\n          this.$filterElm.removeClass('filled').siblings('div .search-filter').removeClass('filled');\r\n        }\r\n        this.callback(undefined, { columnDef: this.columnDef, operator: 'IN', searchTerms: selectedItems });\r\n      }\r\n    };\r\n  }\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the filter template\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    if (!this.grid || !this.columnDef || !this.columnDef.filter || !this.columnDef.filter.collection) {\r\n      throw new Error(`[Angular-SlickGrid] You need to pass a \"collection\" for the MultipleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: type: FilterType.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }`);\r\n    }\r\n\r\n    this.enableTranslateLabel = this.columnDef.filter.enableTranslateLabel;\r\n    this.labelName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.label : 'label';\r\n    this.valueName = (this.columnDef.filter.customStructure) ? this.columnDef.filter.customStructure.value : 'value';\r\n\r\n    let newCollection = this.columnDef.filter.collection || [];\r\n\r\n    // user might want to filter certain items of the collection\r\n    if (this.gridOptions.params && this.columnDef.filter.collectionFilterBy) {\r\n      const filterBy = this.columnDef.filter.collectionFilterBy;\r\n      newCollection = this.collectionService.filterCollection(newCollection, filterBy);\r\n    }\r\n\r\n    // user might want to sort the collection\r\n    if (this.columnDef.filter && this.columnDef.filter.collectionSortBy) {\r\n      const sortBy = this.columnDef.filter.collectionSortBy;\r\n      newCollection = this.collectionService.sortCollection(newCollection, sortBy, this.enableTranslateLabel);\r\n    }\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString(newCollection);\r\n\r\n    // step 2, create the DOM Element of the filter & pre-load search terms\r\n    // also subscribe to the onClose event\r\n    this.createDomElement(filterTemplate);\r\n  }\r\n\r\n  /**\r\n   * Clear the filter values\r\n   */\r\n  clear() {\r\n    if (this.$filterElm && this.$filterElm.multipleSelect) {\r\n      // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)\r\n      // this.$filterElm = $(`#${this.$filterElm[0].id}`);\r\n      this.$filterElm.multipleSelect('setSelects', []);\r\n\r\n      this.$filterElm.removeClass('filled');\r\n      this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off().remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm[]) {\r\n    if (values) {\r\n      this.$filterElm.multipleSelect('setSelects', values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString(optionCollection: any[]) {\r\n    let options = '';\r\n    optionCollection.forEach((option: SelectOption) => {\r\n      if (!option || (option[this.labelName] === undefined && option.labelKey === undefined)) {\r\n        throw new Error(`A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: type: FilterType.multipleSelect, collection: [ { value: '1', label: 'One' } ]')`);\r\n      }\r\n      const labelKey = (option.labelKey || option[this.labelName]) as string;\r\n      const selected = (this.findValueInSearchTerms(option[this.valueName]) >= 0) ? 'selected' : '';\r\n      const textLabel = ((option.labelKey || this.enableTranslateLabel) && this.translate && typeof this.translate.instant === 'function') ? this.translate.instant(labelKey || ' ') : labelKey;\r\n\r\n      // html text of each select option\r\n      options += `<option value=\"${option[this.valueName]}\" ${selected}>${textLabel}</option>`;\r\n\r\n      // if there's a search term, we will add the \"filled\" class for styling purposes\r\n      if (selected) {\r\n        this.isFilled = true;\r\n      }\r\n    });\r\n\r\n    return `<select class=\"ms-filter search-filter\" multiple=\"multiple\">${options}</select>`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * Subscribe to the onClose event and run the callback when that happens\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    this.$filterElm = $(filterTemplate);\r\n    if (typeof this.$filterElm.multipleSelect !== 'function') {\r\n      throw new Error(`multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file`);\r\n    }\r\n    this.$filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    this.$filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (this.isFilled) {\r\n      this.$filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {\r\n      this.$filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    // merge options & attach multiSelect\r\n    const options: MultipleSelectOption = { ...this.defaultOptions, ...this.columnDef.filter.filterOptions };\r\n    this.$filterElm = this.$filterElm.multipleSelect(options);\r\n  }\r\n\r\n  private findValueInSearchTerms(value: number | string): number {\r\n    if (this.searchTerms && Array.isArray(this.searchTerms)) {\r\n      for (let i = 0; i < this.searchTerms.length; i++) {\r\n        if (this.searchTerms[i] && this.searchTerms[i] === value) {\r\n          return i;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n}\r\n",
    "import { Column, Filter, FilterArguments, FilterCallback, GridOption, SearchTerm } from './../models/index';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class InputFilter implements Filter {\r\n  private $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor() {}\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterElm.keyup((e: any) => {\r\n      const value = e && e.target && e.target.value || '';\r\n      if (!value || value === '') {\r\n        this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n        this.$filterElm.removeClass('filled');\r\n      } else {\r\n        this.$filterElm.addClass('filled');\r\n        this.callback(e, { columnDef: this.columnDef, searchTerms: [value] });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.val('');\r\n      this.$filterElm.trigger('keyup');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString() {\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    return `<input type=\"text\" class=\"form-control search-filter\" placeholder=\"${placeholder}\">`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n\r\n    $filterElm.val(searchTerm);\r\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { FieldType } from './../models/index';\r\nimport { Column, Filter, FilterArguments, FilterCallback, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\r\nimport { htmlEntityEncode } from '..';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class CompoundInputFilter implements Filter {\r\n  private $filterElm: any;\r\n  private $filterInputElm: any;\r\n  private $selectOperatorElm: any;\r\n  grid: any;\r\n  operator: OperatorType | OperatorString;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.operator = args.operator;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n    // and initialize it if searchTerms is filled\r\n    this.$filterElm = this.createDomElement(searchTerm);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterInputElm.keyup((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n    this.$selectOperatorElm.change((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.$filterElm && this.$selectOperatorElm) {\r\n      this.$selectOperatorElm.val(0);\r\n      this.$filterInputElm.val('');\r\n      this.onTriggerEvent(null, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n      this.$selectOperatorElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm[]) {\r\n    if (values && Array.isArray(values)) {\r\n      this.$filterElm.val(values[0]);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  private buildInputHtmlString() {\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    return `<input class=\"form-control\" type=\"text\" placeholder=\"${placeholder}\" />`;\r\n  }\r\n\r\n  private buildSelectOperatorHtmlString() {\r\n    const optionValues = this.getOptionValues();\r\n    let optionValueString = '';\r\n    optionValues.forEach((option) => {\r\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\r\n    });\r\n\r\n    return `<select class=\"form-control\">${optionValueString}</select>`;\r\n  }\r\n\r\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\r\n    const type = (this.columnDef.type && this.columnDef.type) ? this.columnDef.type : FieldType.string;\r\n    let optionValues = [];\r\n\r\n    switch (type) {\r\n      case FieldType.string:\r\n        optionValues = [\r\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\r\n          { operator: '=' as OperatorString, description: this.translate.instant('EQUALS') },\r\n          { operator: 'a*' as OperatorString, description: this.translate.instant('STARTS_WITH') },\r\n          { operator: '*z' as OperatorString, description: this.translate.instant('ENDS_WITH') },\r\n          /*\r\n          { operator: 'IN' as OperatorString, description: this.translate.instant('IN_COLLECTION_SEPERATED_BY_COMMA') },\r\n          { operator: 'NIN' as OperatorString, description: this.translate.instant('NOT_IN_COLLECTION_SEPERATED_BY_COMMA') },\r\n          */\r\n        ];\r\n        break;\r\n      default:\r\n        optionValues = [\r\n          { operator: '' as OperatorString, description: this.translate.instant('CONTAINS') },\r\n          { operator: '=' as OperatorString, description: '' },\r\n          { operator: '<' as OperatorString, description: '' },\r\n          { operator: '<=' as OperatorString, description: '' },\r\n          { operator: '>' as OperatorString, description: '' },\r\n          { operator: '>=' as OperatorString, description: '' },\r\n          { operator: '<>' as OperatorString, description: '' }];\r\n        break;\r\n    }\r\n\r\n    return optionValues;\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  private createDomElement(searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\r\n    this.$filterInputElm = $(this.buildInputHtmlString());\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\r\n    const $containerInputGroup = $(`<div class=\"input-group\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon operator\"></div>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <input class=\"form-control\" type=\"text\" />\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    $containerInputGroup.append($operatorInputGroupAddon);\r\n    $containerInputGroup.append(this.$filterInputElm);\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append($containerInputGroup);\r\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\r\n\r\n    this.$filterInputElm.val(searchTerm);\r\n    this.$filterInputElm.data('columnId', this.columnDef.id);\r\n\r\n    if (this.operator) {\r\n      this.$selectOperatorElm.val(this.operator);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterContainerElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  private onTriggerEvent(e: Event | undefined, clearFilterTriggered?: boolean) {\r\n    if (clearFilterTriggered) {\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n    } else {\r\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\r\n      const value = this.$filterInputElm.val();\r\n      (value) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, searchTerms: [value], operator: selectedOperator || '' });\r\n    }\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { mapFlatpickrDateFormatWithFieldType } from '../services/utilities';\r\nimport { Column, Filter, FilterArguments, FilterCallback, FieldType, GridOption, OperatorString, OperatorType, SearchTerm } from './../models/index';\r\n\r\n// importing Flatpickr works better with a 'require'\r\ndeclare function require(name: string);\r\nrequire('flatpickr');\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n@Injectable()\r\nexport class CompoundDateFilter implements Filter {\r\n  private $filterElm: any;\r\n  private $filterInputElm: any;\r\n  private $selectOperatorElm: any;\r\n  private _currentValue: string;\r\n  flatInstance: any;\r\n  grid: any;\r\n  operator: OperatorType | OperatorString;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  /** Getter for the Grid Options pulled through the Grid Object */\r\n  private get gridOptions(): GridOption {\r\n    return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};\r\n  }\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.operator = args.operator;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // date input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n    // step 1, create the DOM Element of the filter which contain the compound Operator+Input\r\n    // and initialize it if searchTerms is filled\r\n    this.$filterElm = this.createDomElement(searchTerm);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    // also add/remove \"filled\" class for styling purposes\r\n    this.$filterInputElm.keyup((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n    this.$selectOperatorElm.change((e: any) => {\r\n      this.onTriggerEvent(e);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.flatInstance && this.$selectOperatorElm) {\r\n      this.$selectOperatorElm.val(0);\r\n      this.flatInstance.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n      this.$selectOperatorElm.off('change').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values: SearchTerm[]) {\r\n    if (values && Array.isArray(values)) {\r\n      this.flatInstance.setDate(values[0]);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  private buildDatePickerInput(searchTerm?: SearchTerm) {\r\n    const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);\r\n    const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnDef.type || FieldType.dateUtc);\r\n    let currentLocale = this.getCurrentLocale(this.columnDef, this.gridOptions) || '';\r\n    if (currentLocale.length > 2) {\r\n      currentLocale = currentLocale.substring(0, 2);\r\n    }\r\n\r\n    const pickerOptions: any = {\r\n      defaultDate: searchTerm || '',\r\n      altInput: true,\r\n      altFormat: outputFormat,\r\n      dateFormat: inputFormat,\r\n      wrap: true,\r\n      closeOnSelect: true,\r\n      locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',\r\n      onChange: (selectedDates: any[] | any, dateStr: string, instance: any) => {\r\n        this._currentValue = dateStr;\r\n\r\n        // when using the time picker, we can simulate a keyup event to avoid multiple backend request\r\n        // since backend request are only executed after user start typing, changing the time should be treated the same way\r\n        if (pickerOptions.enableTime) {\r\n          this.onTriggerEvent(new CustomEvent('keyup'), dateStr === '');\r\n        } else {\r\n          this.onTriggerEvent(undefined, dateStr === '');\r\n        }\r\n      },\r\n    };\r\n\r\n    // add the time picker when format is UTC (Z) or has the 'h' (meaning hours)\r\n    if (outputFormat && (outputFormat === 'Z' || outputFormat.toLowerCase().includes('h'))) {\r\n      pickerOptions.enableTime = true;\r\n    }\r\n\r\n    const placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';\r\n    const $filterInputElm = $(`<div class=flatpickr><input type=\"text\" class=\"form-control\" data-input placeholder=\"${placeholder}\"></div>`);\r\n    this.flatInstance = ($filterInputElm[0] && typeof $filterInputElm[0].flatpickr === 'function') ? $filterInputElm[0].flatpickr(pickerOptions) : null;\r\n    return $filterInputElm;\r\n  }\r\n\r\n  private buildSelectOperatorHtmlString() {\r\n    const optionValues = this.getOptionValues();\r\n    let optionValueString = '';\r\n    optionValues.forEach((option) => {\r\n      optionValueString += `<option value=\"${option.operator}\" title=\"${option.description}\">${option.operator}</option>`;\r\n    });\r\n\r\n    return `<select class=\"form-control\">${optionValueString}</select>`;\r\n  }\r\n\r\n  private getOptionValues(): {operator: OperatorString, description: string }[] {\r\n    return [\r\n      { operator: '' as OperatorString, description: '' },\r\n      { operator: '=' as OperatorString, description: '' },\r\n      { operator: '<' as OperatorString, description: '' },\r\n      { operator: '<=' as OperatorString, description: '' },\r\n      { operator: '>' as OperatorString, description: '' },\r\n      { operator: '>=' as OperatorString, description: '' },\r\n      { operator: '<>' as OperatorString, description: '' }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Create the DOM element\r\n   */\r\n  private createDomElement(searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    if (searchTerm) {\r\n      this._currentValue = searchTerm as string;\r\n    }\r\n\r\n    // create the DOM Select dropdown for the Operator\r\n    this.$selectOperatorElm = $(this.buildSelectOperatorHtmlString());\r\n    this.$filterInputElm = this.buildDatePickerInput(searchTerm);\r\n    const $filterContainerElm = $(`<div class=\"form-group search-filter\"></div>`);\r\n    const $containerInputGroup = $(`<div class=\"input-group flatpickr\"></div>`);\r\n    const $operatorInputGroupAddon = $(`<div class=\"input-group-addon operator\"></div>`);\r\n\r\n    /* the DOM element final structure will be\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-addon operator\">\r\n          <select class=\"form-control\"></select>\r\n        </div>\r\n        <div class=flatpickr>\r\n          <input type=\"text\" class=\"form-control\" data-input>\r\n        </div>\r\n      </div>\r\n    */\r\n    $operatorInputGroupAddon.append(this.$selectOperatorElm);\r\n    $containerInputGroup.append($operatorInputGroupAddon);\r\n    $containerInputGroup.append(this.$filterInputElm);\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    $filterContainerElm.append($containerInputGroup);\r\n    $filterContainerElm.attr('id', `filter-${this.columnDef.id}`);\r\n    this.$filterInputElm.data('columnId', this.columnDef.id);\r\n\r\n    if (this.operator) {\r\n      this.$selectOperatorElm.val(this.operator);\r\n    }\r\n\r\n    // if there's a search term, we will add the \"filled\" class for styling purposes\r\n    if (searchTerm) {\r\n      $filterContainerElm.addClass('filled');\r\n    }\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {\r\n      $filterContainerElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterContainerElm;\r\n  }\r\n\r\n  private getCurrentLocale(columnDef: Column, gridOptions: GridOption) {\r\n    const options = gridOptions || columnDef.params || {};\r\n    if (options.i18n && options.i18n instanceof TranslateService) {\r\n      return options.i18n.currentLang;\r\n    }\r\n\r\n    return 'en';\r\n  }\r\n\r\n  private loadFlatpickrLocale(locale: string) {\r\n    // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/\r\n    if (locale !== 'en') {\r\n      const localeDefault: any = require(`flatpickr/dist/l10n/${locale}.js`).default;\r\n      return (localeDefault && localeDefault[locale]) ? localeDefault[locale] : 'en';\r\n    }\r\n    return 'en';\r\n  }\r\n\r\n  private onTriggerEvent(e: Event | undefined, clearFilterTriggered?: boolean) {\r\n    if (clearFilterTriggered) {\r\n      this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: true });\r\n    } else {\r\n      const selectedOperator = this.$selectOperatorElm.find('option:selected').text();\r\n      (this._currentValue) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');\r\n      this.callback(e, { columnDef: this.columnDef, searchTerms: [this._currentValue], operator: selectedOperator || '' });\r\n    }\r\n  }\r\n\r\n  private hide() {\r\n    if (this.flatInstance && typeof this.flatInstance.close === 'function') {\r\n      this.flatInstance.close();\r\n    }\r\n  }\r\n\r\n  private show() {\r\n    if (this.flatInstance && typeof this.flatInstance.open === 'function') {\r\n      this.flatInstance.open();\r\n    }\r\n  }\r\n}\r\n",
    "import { FilterConditionOption } from './../models/filterConditionOption.interface';\r\nimport { booleanFilterCondition } from './booleanFilterCondition';\r\nimport { dateFilterCondition } from './dateFilterCondition';\r\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\r\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\r\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\r\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\r\nimport { executeMappedCondition } from './executeMappedCondition';\r\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { numberFilterCondition } from './numberFilterCondition';\r\nimport { stringFilterCondition } from './stringFilterCondition';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const FilterConditions = {\r\n  executeMappedCondition,\r\n  booleanFilter: booleanFilterCondition,\r\n  collectionSearchFilter: collectionSearchFilterCondition,\r\n  dateFilter: dateFilterCondition,\r\n  dateIsoFilter: dateIsoFilterCondition,\r\n  dateUtcFilter: dateUtcFilterCondition,\r\n  dateUsFilter: dateUsFilterCondition,\r\n  dateUsShortFilter: dateUsShortFilterCondition,\r\n  numberFilter: numberFilterCondition,\r\n  stringFilter: stringFilterCondition,\r\n  testFilter: testFilterCondition\r\n};\r\n",
    "import { booleanFilterCondition } from './booleanFilterCondition';\r\nimport { dateFilterCondition } from './dateFilterCondition';\r\nimport { dateIsoFilterCondition } from './dateIsoFilterCondition';\r\nimport { dateUsShortFilterCondition } from './dateUsShortFilterCondition';\r\nimport { dateUsFilterCondition } from './dateUsFilterCondition';\r\nimport { dateUtcFilterCondition } from './dateUtcFilterCondition';\r\nimport { FilterConditionOption } from './../models/filterConditionOption.interface';\r\nimport { FilterCondition } from '../models/filterCondition.interface';\r\nimport { collectionSearchFilterCondition } from './collectionSearchFilterCondition';\r\nimport { numberFilterCondition } from './numberFilterCondition';\r\nimport { stringFilterCondition } from './stringFilterCondition';\r\nimport { FieldType } from '../models/index';\r\n\r\nexport const executeMappedCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // when using a multi-select ('IN' operator) we will not use the field type but instead go directly with a collection search\r\n  if (options && options.operator && options.operator.toUpperCase() === 'IN') {\r\n    return collectionSearchFilterCondition(options);\r\n  }\r\n\r\n  // execute the mapped type, or default to String condition check\r\n  switch (options.fieldType) {\r\n    case FieldType.boolean:\r\n      return booleanFilterCondition(options);\r\n    case FieldType.date:\r\n      return dateFilterCondition(options);\r\n    case FieldType.dateUtc:\r\n      return dateUtcFilterCondition(options);\r\n    case FieldType.dateIso:\r\n      return dateIsoFilterCondition(options);\r\n    case FieldType.dateUs:\r\n    case FieldType.dateTimeUs:\r\n      return dateUsFilterCondition(options);\r\n    case FieldType.dateUsShort:\r\n    case FieldType.dateTimeUsShort:\r\n      return dateUsShortFilterCondition(options);\r\n    case FieldType.number:\r\n      return numberFilterCondition(options);\r\n    case FieldType.string:\r\n    default:\r\n      return stringFilterCondition(options);\r\n  }\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption, OperatorType } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const stringFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // make sure the cell value is a string by casting it when possible\r\n  options.cellValue = (options.cellValue === undefined || options.cellValue === null) ? '' : options.cellValue.toString();\r\n\r\n  // make both the cell value and search value lower for case insensitive comparison\r\n  const cellValue = options.cellValue.toLowerCase();\r\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || '';\r\n  if (typeof searchTerm === 'string') {\r\n    searchTerm = searchTerm.toLowerCase();\r\n  }\r\n\r\n  if (options.operator === '*' || options.operator === OperatorType.endsWith) {\r\n    return cellValue.endsWith(searchTerm);\r\n  } else if ((options.operator === '' && options.cellValueLastChar === '*') || options.operator === OperatorType.startsWith) {\r\n    return cellValue.startsWith(searchTerm);\r\n  } else if (options.operator === '') {\r\n    return cellValue.includes(searchTerm);\r\n  }\r\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const numberFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const cellValue = parseFloat(options.cellValue);\r\n  let searchTerm = (Array.isArray(options.searchTerms) && options.searchTerms[0]) || 0;\r\n  if (typeof searchTerm === 'string') {\r\n    searchTerm = parseFloat(searchTerm);\r\n  }\r\n\r\n  if (!searchTerm && (!options.operator || options.operator === '')) {\r\n    return true;\r\n  }\r\n  return testFilterCondition(options.operator || '==', cellValue, searchTerm);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\n\r\nexport const collectionSearchFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  // multiple-select will always return text, so we should make our cell values text as well\r\n  const cellValue = options.cellValue + '';\r\n\r\n  return testFilterCondition(options.operator || 'IN', cellValue, options.searchTerms || []);\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateUtcFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerms = Array.isArray(options.searchTerms) && options.searchTerms[0] || [];\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(options.filterSearchType || options.fieldType);\r\n  if (!moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerms[0], searchDateFormat, true).isValid()) {\r\n    return true;\r\n  }\r\n  const dateCell = moment(options.cellValue, moment.ISO_8601, true);\r\n  const dateSearch = moment(searchTerms[0], searchDateFormat, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, FORMAT, true).isValid() || !moment(searchTerm, FORMAT, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue, FORMAT, true);\r\n  const dateSearch = moment(searchTerm, FORMAT, true);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "import { FieldType, FilterCondition, FilterConditionOption } from '../models/index';\r\nimport { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { testFilterCondition } from './filterUtilities';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport const dateFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  const filterSearchType = options.filterSearchType || FieldType.dateIso;\r\n  const searchDateFormat = mapMomentDateFormatWithFieldType(filterSearchType);\r\n  if (searchTerm === null || searchTerm === '' || !moment(options.cellValue, moment.ISO_8601).isValid() || !moment(searchTerm, searchDateFormat, true).isValid()) {\r\n    return false;\r\n  }\r\n  const dateCell = moment(options.cellValue);\r\n  const dateSearch = moment(searchTerm);\r\n\r\n  // run the filter condition with date in Unix Timestamp format\r\n  return testFilterCondition(options.operator || '==', parseInt(dateCell.format('X'), 10), parseInt(dateSearch.format('X'), 10));\r\n};\r\n",
    "export const testFilterCondition = (operator: string, value1: any, value2: any): boolean => {\r\n  switch (operator) {\r\n    case '<':\r\n    case 'LT': return (value1 < value2);\r\n    case '<=':\r\n    case 'LE': return (value1 <= value2);\r\n    case '>':\r\n    case 'GT': return (value1 > value2);\r\n    case '>=':\r\n    case 'GE': return (value1 >= value2);\r\n    case '!=':\r\n    case '<>':\r\n    case 'NE': return (value1 !== value2);\r\n    case '=':\r\n    case '==':\r\n    case 'EQ': return (value1 === value2);\r\n    case 'IN': return ((value2 && value2.includes) ? (value2.includes(value1)) : false);\r\n  }\r\n  return true;\r\n};\r\n",
    "import { FilterCondition, FilterConditionOption } from './../models/index';\r\n\r\nfunction parseBoolean(str: number | string) {\r\n  return /(true|1)/i.test(str + '');\r\n}\r\n\r\nexport const booleanFilterCondition: FilterCondition = (options: FilterConditionOption) => {\r\n  const searchTerm = Array.isArray(options.searchTerms) && options.searchTerms[0] || '';\r\n  return parseBoolean(options.cellValue) === parseBoolean(searchTerm);\r\n};\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  CollectionFilterBy,\r\n  CollectionSortBy,\r\n  FieldType,\r\n  OperatorType,\r\n} from './../models/index';\r\nimport { sortByFieldType } from '../sorters/sorterUtilities';\r\n\r\n@Injectable()\r\nexport class CollectionService {\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  /**\r\n   * Filter items from a collection\r\n   * @param collection\r\n   * @param filterBy\r\n   */\r\n  filterCollection(collection: any[], filterBy: CollectionFilterBy): any[] {\r\n    let filteredCollection: any[] = [];\r\n\r\n    if (filterBy) {\r\n      const property = filterBy.property || '';\r\n      const operator = filterBy.operator || OperatorType.equal;\r\n      // just check for undefined since the filter value could be null, 0, '', false etc\r\n      const value = typeof filterBy.value === 'undefined' ? '' : filterBy.value;\r\n\r\n      switch (operator) {\r\n        case OperatorType.equal:\r\n          filteredCollection = collection.filter((item) => item[property] === value);\r\n          break;\r\n        case OperatorType.in:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) !== -1);\r\n          break;\r\n        case OperatorType.notIn:\r\n          filteredCollection = collection.filter((item) => item[property].indexOf(value) === -1);\r\n          break;\r\n        case OperatorType.contains:\r\n          filteredCollection = collection.filter((item) => value.indexOf(item[property]) !== -1);\r\n          break;\r\n        default:\r\n          filteredCollection = collection.filter((item) => item[property] !== value);\r\n      }\r\n    }\r\n\r\n    return filteredCollection;\r\n  }\r\n\r\n  /**\r\n   * Sort items in a collection\r\n   * @param collection\r\n   * @param sortBy\r\n   * @param enableTranslateLabel\r\n   */\r\n  sortCollection(collection: any[], sortBy: CollectionSortBy, enableTranslateLabel?: boolean): any[] {\r\n    let sortedCollection: any[] = [];\r\n\r\n    if (sortBy) {\r\n      const property = sortBy.property || '';\r\n      const sortDirection = sortBy.hasOwnProperty('sortDesc') ? (sortBy.sortDesc ? -1 : 1) : 1;\r\n      const fieldType = sortBy.fieldType || FieldType.string;\r\n\r\n      sortedCollection = collection.sort((dataRow1: any, dataRow2: any) => {\r\n        const value1 = (enableTranslateLabel) ? this.translate.instant(dataRow1[property] || ' ') : dataRow1[property];\r\n        const value2 = (enableTranslateLabel) ? this.translate.instant(dataRow2[property] || ' ') : dataRow2[property];\r\n        const result = sortByFieldType(value1, value2, fieldType, sortDirection);\r\n        return result;\r\n      });\r\n    }\r\n\r\n    return sortedCollection;\r\n  }\r\n}\r\n",
    "import { FieldType } from './../models/index';\r\nimport { Sorters } from './index';\r\n\r\nexport function sortByFieldType(value1: any, value2: any, fieldType: FieldType, sortDirection: number) {\r\n  let sortResult = 0;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.number:\r\n      sortResult = Sorters.numeric(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.date:\r\n      sortResult = Sorters.date(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateIso:\r\n      sortResult = Sorters.dateIso(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUs:\r\n      sortResult = Sorters.dateUs(value1, value2, sortDirection);\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      sortResult = Sorters.dateUsShort(value1, value2, sortDirection);\r\n      break;\r\n    default:\r\n      sortResult = Sorters.string(value1, value2, sortDirection);\r\n      break;\r\n  }\r\n\r\n  return sortResult;\r\n}\r\n",
    "import { SortDirectionNumber } from './../models/sortDirectionNumber.enum';\nimport { dateUsShortSorter } from './dateUsShortSorter';\nimport { dateSorter } from './dateSorter';\nimport { dateIsoSorter } from './dateIsoSorter';\nimport { dateUsSorter } from './dateUsSorter';\nimport { numericSorter } from './numericSorter';\nimport { stringSorter } from './stringSorter';\n\nexport const Sorters = {\n  date: dateSorter,\n  dateIso: dateIsoSorter,\n  dateUs: dateUsSorter,\n  dateUsShort: dateUsShortSorter,\n  numeric: numericSorter,\n  string: stringSorter\n};\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const stringSorter: Sorter = (value1, value2, sortDirection) => {\r\n  let position;\r\n  if (value1 === null) {\r\n    position = -1;\r\n  } else if (value2 === null) {\r\n    position = 1;\r\n  } else if (value1 === value2) {\r\n    position = 0;\r\n  } else if (sortDirection) {\r\n    position = value1 < value2 ? -1 : 1;\r\n  } else if (!sortDirection) {\r\n    position = value1 < value2 ? 1 : -1;\r\n  }\r\n  return sortDirection * position;\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\n\r\nexport const numericSorter: Sorter = (value1, value2, sortDirection) => {\r\n  const x = (isNaN(value1) || value1 === '' || value1 === null) ? -99e+10 : parseFloat(value1);\r\n  const y = (isNaN(value2) || value2 === '' || value2 === null) ? -99e+10 : parseFloat(value2);\r\n  return sortDirection * (x === y ? 0 : (x > y ? 1 : -1));\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUs);\r\n\r\nexport const dateUsSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateIso);\r\n\r\nexport const dateIsoSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import { Sorter } from './../models/index';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\nimport { compareDates } from './compareDateUtility';\r\n\r\nexport const dateSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, moment.ISO_8601, sortDirection);\r\n};\r\n",
    "import { mapMomentDateFormatWithFieldType } from './../services/utilities';\r\nimport { FieldType, Sorter } from './../models/index';\r\nimport { compareDates } from './compareDateUtility';\r\nconst FORMAT = mapMomentDateFormatWithFieldType(FieldType.dateUsShort);\r\n\r\nexport const dateUsShortSorter: Sorter = (value1, value2, sortDirection) => {\r\n  return compareDates(value1, value2, FORMAT, sortDirection, true);\r\n};\r\n",
    "import * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\nexport function compareDates(value1, value2, format, sortDirection, strict?: boolean) {\r\n  let diff = 0;\r\n\r\n  if (value1 === null || value1 === '' || !moment(value1, format, strict).isValid()) {\r\n    diff = -1;\r\n  } else if (value2 === null || value2 === '' || !moment(value2, format, strict).isValid()) {\r\n    diff = 1;\r\n  } else {\r\n    const date1 = moment(value1, format, strict);\r\n    const date2 = moment(value2, format, strict);\r\n    diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);\r\n  }\r\n\r\n  return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));\r\n}\r\n",
    "import { FieldType, OperatorType, FilterType } from '../models/index';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/first';\r\nimport 'rxjs/add/operator/take';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport * as moment_ from 'moment-mini';\r\nconst moment = moment_; // patch to fix rollup \"moment has no default export\" issue, document here https://github.com/rollup/rollup/issues/670\r\n\r\n/** Simple function to which will loop and create as demanded the number of white spaces,\r\n * this will be used in the Excel export\r\n * @param int nbSpaces: number of white spaces to create\r\n */\r\nexport function addWhiteSpaces(nbSpaces): string {\r\n  let result = '';\r\n\r\n  for (let i = 0; i < nbSpaces; i++) {\r\n    result += ' ';\r\n  }\r\n  return result;\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityDecode(input: string): string {\r\n  return input.replace(/&#(\\d+);/g, function (match, dec) {\r\n    return String.fromCharCode(dec);\r\n  });\r\n}\r\n\r\n/** decode text into html entity\r\n * @param string text: input text\r\n * @param string text: output text\r\n */\r\nexport function htmlEntityEncode(input: any): string {\r\n  const buf = [];\r\n  for (let i = input.length - 1; i >= 0; i--) {\r\n    buf.unshift(['&#', input[i].charCodeAt(), ';'].join(''));\r\n  }\r\n  return buf.join('');\r\n}\r\n\r\n/**\r\n * Compares two arrays to determine if all the items are equal\r\n * @param a first array\r\n * @param b second array to compare with a\r\n * @param [orderMatters=false] flag if the order matters, if not arrays will be sorted\r\n * @return boolean true if equal, else false\r\n */\r\nexport function arraysEqual(a: any[], b: any[], orderMatters: boolean = false): boolean {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n\r\n  if (a === null || b === null) {\r\n    return false;\r\n  }\r\n\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n\r\n  if (!orderMatters) {\r\n    a.sort();\r\n    b.sort();\r\n  }\r\n\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Try casting an input of type Promise | Observable into a Promise type.\r\n * @param object which could be of type Promise or Observable\r\n * @param fromServiceName string representing the caller service name and will be used if we throw a casting problem error\r\n */\r\nexport function castToPromise<T>(input: Promise<T> | Observable<T>, fromServiceName: string = ''): Promise<T> {\r\n  let promise: any = input;\r\n\r\n  if (input instanceof Promise) {\r\n    // if it's already a Promise then return it\r\n    return input;\r\n  } else if (input instanceof Observable) {\r\n    promise = input.first().toPromise();\r\n    if (!(promise instanceof Promise)) {\r\n      promise = input.take(1).toPromise();\r\n    }\r\n    if (!(promise instanceof Promise)) {\r\n      throw new Error(\r\n        `Something went wrong, Angular-Slickgrid ${fromServiceName} is not able to convert the Observable into a Promise.\r\n        If you are using Angular HttpClient, you could try converting your http call to a Promise with \".toPromise()\"\r\n        for example::  this.http.post('graphql', { query: graphqlQuery }).toPromise()\r\n        `);\r\n    }\r\n  }\r\n\r\n  return promise;\r\n}\r\n\r\n/**\r\n * Uses the logic function to find an item in an array or returns the default\r\n * value provided (empty object by default)\r\n * @param any[] array the array to filter\r\n * @param function logic the logic to find the item\r\n * @param any [defaultVal={}] the default value to return\r\n * @return object the found object or deafult value\r\n */\r\nexport function findOrDefault(array: any[], logic: (item: any) => boolean, defaultVal = {}): any {\r\n  return array.find(logic) || defaultVal;\r\n}\r\n\r\n/**\r\n  * Take a number (or a string) and display it as a formatted decimal string with defined minimum and maximum decimals\r\n  * @param input\r\n  * @param minDecimal\r\n  * @param maxDecimal\r\n  */\r\nexport function decimalFormatted(input: number | string, minDecimal?: number, maxDecimal?: number) {\r\n  if (isNaN(+input)) {\r\n    return input;\r\n  }\r\n\r\n  const minDec = (minDecimal === undefined) ? 2 : minDecimal;\r\n  const maxDec = (maxDecimal === undefined) ? 2 : maxDecimal;\r\n  let amount = String(Math.round(+input * Math.pow(10, maxDec)) / Math.pow(10, maxDec));\r\n\r\n  if (amount.indexOf('.') < 0) {\r\n    amount += '.';\r\n  }\r\n  while ((amount.length - amount.indexOf('.')) <= minDec) {\r\n    amount += '0';\r\n  }\r\n  return amount;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent moment.js format\r\n * refer to moment.js for the format standard used: https://momentjs.com/docs/#/parsing/string-format/\r\n * @param fieldType\r\n */\r\nexport function mapMomentDateFormatWithFieldType(fieldType: FieldType): string {\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'YYYY-MM-DD HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'YYYY-MM-DD hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'YYYY-MM-DD hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'MM/DD/YYYY';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'M/D/YY';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'MM/DD/YYYY HH:mm:ss';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'MM/DD/YYYY hh:mm:ss a';\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'MM/DD/YYYY hh:mm:ss A';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'M/D/YY H:m:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'M/D/YY h:m:s a';\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'YYYY-MM-DD';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * From a Date FieldType, return it's equivalent Flatpickr format\r\n * refer to Flatpickr for the format standard used: https://chmln.github.io/flatpickr/formatting/#date-formatting-tokens\r\n * also note that they seem very similar to PHP format (except for am/pm): http://php.net/manual/en/function.date.php\r\n * @param fieldType\r\n */\r\nexport function mapFlatpickrDateFormatWithFieldType(fieldType: FieldType): string {\r\n  /*\r\n    d: Day of the month, 2 digits with leading zeros\t01 to 31\r\n    D: A textual representation of a day\tMon through Sun\r\n    l: (lowercase 'L')\tA full textual representation of the day of the week\tSunday through Saturday\r\n    j: Day of the month without leading zeros\t1 to 31\r\n    J: Day of the month without leading zeros and ordinal suffix\t1st, 2nd, to 31st\r\n    w: Numeric representation of the day of the week\t0 (for Sunday) through 6 (for Saturday)\r\n    F: A full textual representation of a month\tJanuary through December\r\n    m: Numeric representation of a month, with leading zero\t01 through 12\r\n    n: Numeric representation of a month, without leading zeros\t1 through 12\r\n    M: A short textual representation of a month\tJan through Dec\r\n    U: The number of seconds since the Unix Epoch\t1413704993\r\n    y: A two digit representation of a year\t99 or 03\r\n    Y: A full numeric representation of a year, 4 digits\t1999 or 2003\r\n    H: Hours (24 hours)\t00 to 23\r\n    h: Hours\t1 to 12\r\n    i: Minutes\t00 to 59\r\n    S: Seconds, 2 digits\t00 to 59\r\n    s: Seconds\t0, 1 to 59\r\n    K: AM/PM\tAM or PM\r\n  */\r\n  let map: string;\r\n  switch (fieldType) {\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n      map = 'Y-m-d H:i:S';\r\n      break;\r\n    case FieldType.dateTimeIsoAmPm:\r\n      map = 'Y-m-d h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeIsoAM_PM:\r\n      map = 'Y-m-d h:i:S K';\r\n      break;\r\n    case FieldType.dateUs:\r\n      map = 'm/d/Y';\r\n      break;\r\n    case FieldType.dateUsShort:\r\n      map = 'm/d/y';\r\n      break;\r\n    case FieldType.dateTimeUs:\r\n      map = 'm/d/Y H:i:S';\r\n      break;\r\n    case FieldType.dateTimeUsAmPm:\r\n      map = 'm/d/Y h:i:S K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateTimeUsAM_PM:\r\n      map = 'm/d/Y h:i:s K';\r\n      break;\r\n    case FieldType.dateTimeUsShort:\r\n      map = 'm/d/y H:i:s';\r\n      break;\r\n    case FieldType.dateTimeUsShortAmPm:\r\n      map = 'm/d/y h:i:s K'; // there is no lowercase in Flatpickr :(\r\n      break;\r\n    case FieldType.dateUtc:\r\n      map = 'Z';\r\n      break;\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    default:\r\n      map = 'Y-m-d';\r\n      break;\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operators (ex.: <= is \"le\", > is \"gt\")\r\n * @param string operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorType(operator: string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (operator) {\r\n    case '<':\r\n      map = OperatorType.lessThan;\r\n      break;\r\n    case '<=':\r\n      map = OperatorType.lessThanOrEqual;\r\n      break;\r\n    case '>':\r\n      map = OperatorType.greaterThan;\r\n      break;\r\n    case '>=':\r\n      map = OperatorType.greaterThanOrEqual;\r\n      break;\r\n    case '<>':\r\n    case '!=':\r\n    case 'neq':\r\n    case 'NEQ':\r\n      map = OperatorType.notEqual;\r\n      break;\r\n    case '*':\r\n    case '.*':\r\n    case 'startsWith':\r\n      map = OperatorType.startsWith;\r\n      break;\r\n    case '*.':\r\n    case 'endsWith':\r\n      map = OperatorType.endsWith;\r\n      break;\r\n    case '=':\r\n    case '==':\r\n    case 'eq':\r\n    case 'EQ':\r\n      map = OperatorType.equal;\r\n      break;\r\n    case 'in':\r\n    case 'IN':\r\n      map = OperatorType.in;\r\n      break;\r\n    case 'notIn':\r\n    case 'NIN':\r\n    case 'NOT_IN':\r\n      map = OperatorType.notIn;\r\n      break;\r\n    default:\r\n      map = OperatorType.contains;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operator by a Filter Type\r\n * For example a multiple-select typically uses 'IN' operator\r\n * @param operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorByFieldType(fieldType: FieldType | string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (fieldType) {\r\n    case FieldType.string:\r\n    case FieldType.unknown:\r\n      map = OperatorType.contains;\r\n      break;\r\n    case FieldType.float:\r\n    case FieldType.number:\r\n    case FieldType.date:\r\n    case FieldType.dateIso:\r\n    case FieldType.date:\r\n    case FieldType.dateUtc:\r\n    case FieldType.dateTime:\r\n    case FieldType.dateTimeIso:\r\n    case FieldType.dateTimeIsoAmPm:\r\n    case FieldType.dateTimeIsoAM_PM:\r\n    case FieldType.dateUs:\r\n    case FieldType.dateUsShort:\r\n    case FieldType.dateTimeUs:\r\n    case FieldType.dateTimeUsAmPm:\r\n    case FieldType.dateTimeUsAM_PM:\r\n    case FieldType.dateTimeUsShort:\r\n    case FieldType.dateTimeUsShortAmPm:\r\n    case FieldType.dateTimeUsShortAM_PM:\r\n    default:\r\n      map = OperatorType.equal;\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Mapper for query operator by a Filter Type\r\n * For example a multiple-select typically uses 'IN' operator\r\n * @param operator\r\n * @returns string map\r\n */\r\nexport function mapOperatorByFilterType(filterType: FilterType | string): OperatorType {\r\n  let map: OperatorType;\r\n\r\n  switch (filterType) {\r\n    case FilterType.multipleSelect:\r\n      map = OperatorType.in;\r\n      break;\r\n    case FilterType.singleSelect:\r\n      map = OperatorType.equal;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Parse a date passed as a string and return a Date object (if valid)\r\n * @param inputDateString\r\n * @returns string date formatted\r\n */\r\nexport function parseUtcDate(inputDateString: string, useUtc: boolean): string | null {\r\n  let date = null;\r\n\r\n  if (/^[0-9\\-\\/]*$/.test(inputDateString)) {\r\n    // get the UTC datetime with moment.js but we need to decode the value so that it's valid text\r\n    const dateString = decodeURIComponent(inputDateString);\r\n    const dateMoment = moment(new Date(dateString));\r\n    if (dateMoment.isValid() && dateMoment.year().toString().length === 4) {\r\n      date = (useUtc) ? dateMoment.utc().format() : dateMoment.format();\r\n    }\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\n/**\r\n * Sanitize, return only the text without HTML tags\r\n * @input htmlString\r\n * @return text\r\n */\r\nexport function sanitizeHtmlToText(htmlString: string) {\r\n  const temp = document.createElement('div');\r\n  temp.innerHTML = htmlString;\r\n  return temp.textContent || temp.innerText;\r\n}\r\n\r\n/**\r\n * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)\r\n * @param string\r\n * @returns string\r\n */\r\nexport function titleCase(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Converts a string to camel case\r\n * @param str the string to convert\r\n * @return the string in camel case\r\n */\r\nexport function toCamelCase(str: string): string {\r\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w|[\\s+\\-_\\/])/g, (match: string, offset: number) => {\r\n    // remove white space or hypens or underscores\r\n    if (/[\\s+\\-_\\/]/.test(match)) {\r\n      return '';\r\n    }\r\n\r\n    return offset === 0 ? match.toLowerCase() : match.toUpperCase();\r\n  });\r\n}\r\n\r\n/**\r\n * Converts a string to kebab (hypen) case\r\n * @param str the string to convert\r\n * @return the string in kebab case\r\n */\r\nexport function toKebabCase(str: string): string {\r\n  return toCamelCase(str).replace(/([A-Z])/g, '-$1').toLowerCase();\r\n}\r\n",
    "export enum SortDirection {\r\n  asc = 'asc',\r\n  ASC = 'ASC',\r\n  desc = 'desc',\r\n  DESC = 'DESC'\r\n}\r\n",
    "export enum OperatorType {\r\n  contains = 'Contains',\r\n  lessThan = 'LT',\r\n  lessThanOrEqual = 'LE',\r\n  greaterThan = 'GT',\r\n  greaterThanOrEqual = 'GE',\r\n  notEqual = 'NE',\r\n  equal = 'EQ',\r\n  endsWith = 'EndsWith',\r\n  startsWith = 'StartsWith',\r\n  in = 'IN',\r\n  notIn = 'NIN'\r\n}\r\n",
    "export enum GridStateType {\r\n  columns = 'columns',\r\n  filter = 'filter',\r\n  pagination = 'pagination',\r\n  sorter = 'sorter'\r\n}\r\n",
    "export enum FileType {\r\n  csv = 'csv',\r\n  doc = 'doc',\r\n  docx = 'docx',\r\n  pdf = 'pdf',\r\n  txt = 'txt',\r\n  xls = 'xls',\r\n  xlsx = 'xlsx'\r\n}\r\n",
    "export enum DelimiterType {\r\n  colon = ':',\r\n  comma = ',',\r\n  equalSign = '=',\r\n  pipe = '|',\r\n  semicolon = ';',\r\n  space = ' ',\r\n  tab = '\\t',\r\n\r\n  doubleColon = '::',\r\n  doublePipe = '||',\r\n  doubleSemicolon = ';;',\r\n}\r\n\r\n"
  ],
  "names": [
    "tslib_1.__awaiter",
    "tslib_1.__values",
    "moment",
    "FORMAT",
    "SELECT_ELEMENT_HEIGHT",
    "timer",
    "DEFAULT_PAGE_SIZE",
    "DEFAULT_FILTER_TYPING_DEBOUNCE",
    "DEFAULT_ITEMS_PER_PAGE",
    "QueryBuilder"
  ],
  "mappings": "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"
}
